
lora-e5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001207c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001690  080121c0  080121c0  000221c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013850  08013850  000300f8  2**0
                  CONTENTS
  4 .ARM          00000008  08013850  08013850  00023850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013858  08013858  000300f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013858  08013858  00023858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801385c  0801385c  0002385c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000080  08013860  00030080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c94  200000f8  080138d8  000300f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d8c  080138d8  00034d8c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000300f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003e2a4  00000000  00000000  00030122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000084fa  00000000  00000000  0006e3c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002d08  00000000  00000000  000768c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000029c0  00000000  00000000  000795c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a70  00000000  00000000  0007bf88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000442b7  00000000  00000000  000a29f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4b7f  00000000  00000000  000e6caf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001bb82e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cbb8  00000000  00000000  001bb880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000f8 	.word	0x200000f8
 800015c:	00000000 	.word	0x00000000
 8000160:	080121a4 	.word	0x080121a4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000fc 	.word	0x200000fc
 800017c:	080121a4 	.word	0x080121a4

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2uiz>:
 8000b08:	004a      	lsls	r2, r1, #1
 8000b0a:	d211      	bcs.n	8000b30 <__aeabi_d2uiz+0x28>
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d211      	bcs.n	8000b36 <__aeabi_d2uiz+0x2e>
 8000b12:	d50d      	bpl.n	8000b30 <__aeabi_d2uiz+0x28>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d40e      	bmi.n	8000b3c <__aeabi_d2uiz+0x34>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_d2uiz+0x3a>
 8000b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0000 	mov.w	r0, #0
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_frsub>:
 8000b48:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b4c:	e002      	b.n	8000b54 <__addsf3>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_fsub>:
 8000b50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b54 <__addsf3>:
 8000b54:	0042      	lsls	r2, r0, #1
 8000b56:	bf1f      	itttt	ne
 8000b58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b5c:	ea92 0f03 	teqne	r2, r3
 8000b60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b68:	d06a      	beq.n	8000c40 <__addsf3+0xec>
 8000b6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b72:	bfc1      	itttt	gt
 8000b74:	18d2      	addgt	r2, r2, r3
 8000b76:	4041      	eorgt	r1, r0
 8000b78:	4048      	eorgt	r0, r1
 8000b7a:	4041      	eorgt	r1, r0
 8000b7c:	bfb8      	it	lt
 8000b7e:	425b      	neglt	r3, r3
 8000b80:	2b19      	cmp	r3, #25
 8000b82:	bf88      	it	hi
 8000b84:	4770      	bxhi	lr
 8000b86:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b9e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4249      	negne	r1, r1
 8000ba6:	ea92 0f03 	teq	r2, r3
 8000baa:	d03f      	beq.n	8000c2c <__addsf3+0xd8>
 8000bac:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bb4:	eb10 000c 	adds.w	r0, r0, ip
 8000bb8:	f1c3 0320 	rsb	r3, r3, #32
 8000bbc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bc4:	d502      	bpl.n	8000bcc <__addsf3+0x78>
 8000bc6:	4249      	negs	r1, r1
 8000bc8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bcc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd0:	d313      	bcc.n	8000bfa <__addsf3+0xa6>
 8000bd2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bd6:	d306      	bcc.n	8000be6 <__addsf3+0x92>
 8000bd8:	0840      	lsrs	r0, r0, #1
 8000bda:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bde:	f102 0201 	add.w	r2, r2, #1
 8000be2:	2afe      	cmp	r2, #254	; 0xfe
 8000be4:	d251      	bcs.n	8000c8a <__addsf3+0x136>
 8000be6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bee:	bf08      	it	eq
 8000bf0:	f020 0001 	biceq.w	r0, r0, #1
 8000bf4:	ea40 0003 	orr.w	r0, r0, r3
 8000bf8:	4770      	bx	lr
 8000bfa:	0049      	lsls	r1, r1, #1
 8000bfc:	eb40 0000 	adc.w	r0, r0, r0
 8000c00:	3a01      	subs	r2, #1
 8000c02:	bf28      	it	cs
 8000c04:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c08:	d2ed      	bcs.n	8000be6 <__addsf3+0x92>
 8000c0a:	fab0 fc80 	clz	ip, r0
 8000c0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c12:	ebb2 020c 	subs.w	r2, r2, ip
 8000c16:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c1a:	bfaa      	itet	ge
 8000c1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c20:	4252      	neglt	r2, r2
 8000c22:	4318      	orrge	r0, r3
 8000c24:	bfbc      	itt	lt
 8000c26:	40d0      	lsrlt	r0, r2
 8000c28:	4318      	orrlt	r0, r3
 8000c2a:	4770      	bx	lr
 8000c2c:	f092 0f00 	teq	r2, #0
 8000c30:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c34:	bf06      	itte	eq
 8000c36:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c3a:	3201      	addeq	r2, #1
 8000c3c:	3b01      	subne	r3, #1
 8000c3e:	e7b5      	b.n	8000bac <__addsf3+0x58>
 8000c40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c48:	bf18      	it	ne
 8000c4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c4e:	d021      	beq.n	8000c94 <__addsf3+0x140>
 8000c50:	ea92 0f03 	teq	r2, r3
 8000c54:	d004      	beq.n	8000c60 <__addsf3+0x10c>
 8000c56:	f092 0f00 	teq	r2, #0
 8000c5a:	bf08      	it	eq
 8000c5c:	4608      	moveq	r0, r1
 8000c5e:	4770      	bx	lr
 8000c60:	ea90 0f01 	teq	r0, r1
 8000c64:	bf1c      	itt	ne
 8000c66:	2000      	movne	r0, #0
 8000c68:	4770      	bxne	lr
 8000c6a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c6e:	d104      	bne.n	8000c7a <__addsf3+0x126>
 8000c70:	0040      	lsls	r0, r0, #1
 8000c72:	bf28      	it	cs
 8000c74:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c78:	4770      	bx	lr
 8000c7a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c7e:	bf3c      	itt	cc
 8000c80:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bxcc	lr
 8000c86:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c8a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c92:	4770      	bx	lr
 8000c94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c98:	bf16      	itet	ne
 8000c9a:	4608      	movne	r0, r1
 8000c9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca0:	4601      	movne	r1, r0
 8000ca2:	0242      	lsls	r2, r0, #9
 8000ca4:	bf06      	itte	eq
 8000ca6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000caa:	ea90 0f01 	teqeq	r0, r1
 8000cae:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cb2:	4770      	bx	lr

08000cb4 <__aeabi_ui2f>:
 8000cb4:	f04f 0300 	mov.w	r3, #0
 8000cb8:	e004      	b.n	8000cc4 <__aeabi_i2f+0x8>
 8000cba:	bf00      	nop

08000cbc <__aeabi_i2f>:
 8000cbc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc0:	bf48      	it	mi
 8000cc2:	4240      	negmi	r0, r0
 8000cc4:	ea5f 0c00 	movs.w	ip, r0
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd0:	4601      	mov	r1, r0
 8000cd2:	f04f 0000 	mov.w	r0, #0
 8000cd6:	e01c      	b.n	8000d12 <__aeabi_l2f+0x2a>

08000cd8 <__aeabi_ul2f>:
 8000cd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cdc:	bf08      	it	eq
 8000cde:	4770      	bxeq	lr
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	e00a      	b.n	8000cfc <__aeabi_l2f+0x14>
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_l2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cf4:	d502      	bpl.n	8000cfc <__aeabi_l2f+0x14>
 8000cf6:	4240      	negs	r0, r0
 8000cf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cfc:	ea5f 0c01 	movs.w	ip, r1
 8000d00:	bf02      	ittt	eq
 8000d02:	4684      	moveq	ip, r0
 8000d04:	4601      	moveq	r1, r0
 8000d06:	2000      	moveq	r0, #0
 8000d08:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d0c:	bf08      	it	eq
 8000d0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d12:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d16:	fabc f28c 	clz	r2, ip
 8000d1a:	3a08      	subs	r2, #8
 8000d1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d20:	db10      	blt.n	8000d44 <__aeabi_l2f+0x5c>
 8000d22:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d26:	4463      	add	r3, ip
 8000d28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d34:	fa20 f202 	lsr.w	r2, r0, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	f020 0001 	biceq.w	r0, r0, #1
 8000d42:	4770      	bx	lr
 8000d44:	f102 0220 	add.w	r2, r2, #32
 8000d48:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d54:	fa21 f202 	lsr.w	r2, r1, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d62:	4770      	bx	lr

08000d64 <__aeabi_f2uiz>:
 8000d64:	0042      	lsls	r2, r0, #1
 8000d66:	d20e      	bcs.n	8000d86 <__aeabi_f2uiz+0x22>
 8000d68:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d6c:	d30b      	bcc.n	8000d86 <__aeabi_f2uiz+0x22>
 8000d6e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d72:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d76:	d409      	bmi.n	8000d8c <__aeabi_f2uiz+0x28>
 8000d78:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d80:	fa23 f002 	lsr.w	r0, r3, r2
 8000d84:	4770      	bx	lr
 8000d86:	f04f 0000 	mov.w	r0, #0
 8000d8a:	4770      	bx	lr
 8000d8c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d90:	d101      	bne.n	8000d96 <__aeabi_f2uiz+0x32>
 8000d92:	0242      	lsls	r2, r0, #9
 8000d94:	d102      	bne.n	8000d9c <__aeabi_f2uiz+0x38>
 8000d96:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9a:	4770      	bx	lr
 8000d9c:	f04f 0000 	mov.w	r0, #0
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop

08000da4 <__aeabi_uldivmod>:
 8000da4:	b953      	cbnz	r3, 8000dbc <__aeabi_uldivmod+0x18>
 8000da6:	b94a      	cbnz	r2, 8000dbc <__aeabi_uldivmod+0x18>
 8000da8:	2900      	cmp	r1, #0
 8000daa:	bf08      	it	eq
 8000dac:	2800      	cmpeq	r0, #0
 8000dae:	bf1c      	itt	ne
 8000db0:	f04f 31ff 	movne.w	r1, #4294967295
 8000db4:	f04f 30ff 	movne.w	r0, #4294967295
 8000db8:	f000 b974 	b.w	80010a4 <__aeabi_idiv0>
 8000dbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dc4:	f000 f806 	bl	8000dd4 <__udivmoddi4>
 8000dc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dd0:	b004      	add	sp, #16
 8000dd2:	4770      	bx	lr

08000dd4 <__udivmoddi4>:
 8000dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd8:	9e08      	ldr	r6, [sp, #32]
 8000dda:	460d      	mov	r5, r1
 8000ddc:	4604      	mov	r4, r0
 8000dde:	4688      	mov	r8, r1
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d14d      	bne.n	8000e80 <__udivmoddi4+0xac>
 8000de4:	428a      	cmp	r2, r1
 8000de6:	4694      	mov	ip, r2
 8000de8:	d968      	bls.n	8000ebc <__udivmoddi4+0xe8>
 8000dea:	fab2 f282 	clz	r2, r2
 8000dee:	b152      	cbz	r2, 8000e06 <__udivmoddi4+0x32>
 8000df0:	fa01 f302 	lsl.w	r3, r1, r2
 8000df4:	f1c2 0120 	rsb	r1, r2, #32
 8000df8:	fa20 f101 	lsr.w	r1, r0, r1
 8000dfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e00:	ea41 0803 	orr.w	r8, r1, r3
 8000e04:	4094      	lsls	r4, r2
 8000e06:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000e0a:	0c21      	lsrs	r1, r4, #16
 8000e0c:	fbb8 fef5 	udiv	lr, r8, r5
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	fb05 831e 	mls	r3, r5, lr, r8
 8000e18:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e1c:	fb0e f107 	mul.w	r1, lr, r7
 8000e20:	4299      	cmp	r1, r3
 8000e22:	d90b      	bls.n	8000e3c <__udivmoddi4+0x68>
 8000e24:	eb1c 0303 	adds.w	r3, ip, r3
 8000e28:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000e2c:	f080 811e 	bcs.w	800106c <__udivmoddi4+0x298>
 8000e30:	4299      	cmp	r1, r3
 8000e32:	f240 811b 	bls.w	800106c <__udivmoddi4+0x298>
 8000e36:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb3 f0f5 	udiv	r0, r3, r5
 8000e44:	fb05 3310 	mls	r3, r5, r0, r3
 8000e48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e4c:	fb00 f707 	mul.w	r7, r0, r7
 8000e50:	42a7      	cmp	r7, r4
 8000e52:	d90a      	bls.n	8000e6a <__udivmoddi4+0x96>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5c:	f080 8108 	bcs.w	8001070 <__udivmoddi4+0x29c>
 8000e60:	42a7      	cmp	r7, r4
 8000e62:	f240 8105 	bls.w	8001070 <__udivmoddi4+0x29c>
 8000e66:	4464      	add	r4, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	1be4      	subs	r4, r4, r7
 8000e6c:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000e70:	2100      	movs	r1, #0
 8000e72:	b11e      	cbz	r6, 8000e7c <__udivmoddi4+0xa8>
 8000e74:	40d4      	lsrs	r4, r2
 8000e76:	2300      	movs	r3, #0
 8000e78:	e9c6 4300 	strd	r4, r3, [r6]
 8000e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e80:	428b      	cmp	r3, r1
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0xc2>
 8000e84:	2e00      	cmp	r6, #0
 8000e86:	f000 80ee 	beq.w	8001066 <__udivmoddi4+0x292>
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	e9c6 0500 	strd	r0, r5, [r6]
 8000e90:	4608      	mov	r0, r1
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	fab3 f183 	clz	r1, r3
 8000e9a:	2900      	cmp	r1, #0
 8000e9c:	d14a      	bne.n	8000f34 <__udivmoddi4+0x160>
 8000e9e:	42ab      	cmp	r3, r5
 8000ea0:	d302      	bcc.n	8000ea8 <__udivmoddi4+0xd4>
 8000ea2:	4282      	cmp	r2, r0
 8000ea4:	f200 80f9 	bhi.w	800109a <__udivmoddi4+0x2c6>
 8000ea8:	1a84      	subs	r4, r0, r2
 8000eaa:	eb65 0303 	sbc.w	r3, r5, r3
 8000eae:	2001      	movs	r0, #1
 8000eb0:	4698      	mov	r8, r3
 8000eb2:	2e00      	cmp	r6, #0
 8000eb4:	d0e2      	beq.n	8000e7c <__udivmoddi4+0xa8>
 8000eb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000eba:	e7df      	b.n	8000e7c <__udivmoddi4+0xa8>
 8000ebc:	b902      	cbnz	r2, 8000ec0 <__udivmoddi4+0xec>
 8000ebe:	deff      	udf	#255	; 0xff
 8000ec0:	fab2 f282 	clz	r2, r2
 8000ec4:	2a00      	cmp	r2, #0
 8000ec6:	f040 8091 	bne.w	8000fec <__udivmoddi4+0x218>
 8000eca:	eba1 050c 	sub.w	r5, r1, ip
 8000ece:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed2:	fa1f fe8c 	uxth.w	lr, ip
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	fbb5 f3f7 	udiv	r3, r5, r7
 8000edc:	fb07 5013 	mls	r0, r7, r3, r5
 8000ee0:	0c25      	lsrs	r5, r4, #16
 8000ee2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000ee6:	fb0e f003 	mul.w	r0, lr, r3
 8000eea:	42a8      	cmp	r0, r5
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x12c>
 8000eee:	eb1c 0505 	adds.w	r5, ip, r5
 8000ef2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ef6:	d202      	bcs.n	8000efe <__udivmoddi4+0x12a>
 8000ef8:	42a8      	cmp	r0, r5
 8000efa:	f200 80cb 	bhi.w	8001094 <__udivmoddi4+0x2c0>
 8000efe:	4643      	mov	r3, r8
 8000f00:	1a2d      	subs	r5, r5, r0
 8000f02:	b2a4      	uxth	r4, r4
 8000f04:	fbb5 f0f7 	udiv	r0, r5, r7
 8000f08:	fb07 5510 	mls	r5, r7, r0, r5
 8000f0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f10:	fb0e fe00 	mul.w	lr, lr, r0
 8000f14:	45a6      	cmp	lr, r4
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x156>
 8000f18:	eb1c 0404 	adds.w	r4, ip, r4
 8000f1c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f20:	d202      	bcs.n	8000f28 <__udivmoddi4+0x154>
 8000f22:	45a6      	cmp	lr, r4
 8000f24:	f200 80bb 	bhi.w	800109e <__udivmoddi4+0x2ca>
 8000f28:	4628      	mov	r0, r5
 8000f2a:	eba4 040e 	sub.w	r4, r4, lr
 8000f2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f32:	e79e      	b.n	8000e72 <__udivmoddi4+0x9e>
 8000f34:	f1c1 0720 	rsb	r7, r1, #32
 8000f38:	408b      	lsls	r3, r1
 8000f3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f42:	fa20 f407 	lsr.w	r4, r0, r7
 8000f46:	fa05 f301 	lsl.w	r3, r5, r1
 8000f4a:	431c      	orrs	r4, r3
 8000f4c:	40fd      	lsrs	r5, r7
 8000f4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f52:	fa00 f301 	lsl.w	r3, r0, r1
 8000f56:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f5a:	0c20      	lsrs	r0, r4, #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fb09 5518 	mls	r5, r9, r8, r5
 8000f64:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000f68:	fb08 f00e 	mul.w	r0, r8, lr
 8000f6c:	42a8      	cmp	r0, r5
 8000f6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f72:	d90b      	bls.n	8000f8c <__udivmoddi4+0x1b8>
 8000f74:	eb1c 0505 	adds.w	r5, ip, r5
 8000f78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f7c:	f080 8088 	bcs.w	8001090 <__udivmoddi4+0x2bc>
 8000f80:	42a8      	cmp	r0, r5
 8000f82:	f240 8085 	bls.w	8001090 <__udivmoddi4+0x2bc>
 8000f86:	f1a8 0802 	sub.w	r8, r8, #2
 8000f8a:	4465      	add	r5, ip
 8000f8c:	1a2d      	subs	r5, r5, r0
 8000f8e:	b2a4      	uxth	r4, r4
 8000f90:	fbb5 f0f9 	udiv	r0, r5, r9
 8000f94:	fb09 5510 	mls	r5, r9, r0, r5
 8000f98:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000f9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fa0:	45ae      	cmp	lr, r5
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x1e2>
 8000fa4:	eb1c 0505 	adds.w	r5, ip, r5
 8000fa8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fac:	d26c      	bcs.n	8001088 <__udivmoddi4+0x2b4>
 8000fae:	45ae      	cmp	lr, r5
 8000fb0:	d96a      	bls.n	8001088 <__udivmoddi4+0x2b4>
 8000fb2:	3802      	subs	r0, #2
 8000fb4:	4465      	add	r5, ip
 8000fb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fba:	fba0 9402 	umull	r9, r4, r0, r2
 8000fbe:	eba5 050e 	sub.w	r5, r5, lr
 8000fc2:	42a5      	cmp	r5, r4
 8000fc4:	46c8      	mov	r8, r9
 8000fc6:	46a6      	mov	lr, r4
 8000fc8:	d356      	bcc.n	8001078 <__udivmoddi4+0x2a4>
 8000fca:	d053      	beq.n	8001074 <__udivmoddi4+0x2a0>
 8000fcc:	b15e      	cbz	r6, 8000fe6 <__udivmoddi4+0x212>
 8000fce:	ebb3 0208 	subs.w	r2, r3, r8
 8000fd2:	eb65 050e 	sbc.w	r5, r5, lr
 8000fd6:	fa05 f707 	lsl.w	r7, r5, r7
 8000fda:	fa22 f301 	lsr.w	r3, r2, r1
 8000fde:	40cd      	lsrs	r5, r1
 8000fe0:	431f      	orrs	r7, r3
 8000fe2:	e9c6 7500 	strd	r7, r5, [r6]
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fec:	f1c2 0320 	rsb	r3, r2, #32
 8000ff0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ff4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ff8:	fa25 f303 	lsr.w	r3, r5, r3
 8000ffc:	4095      	lsls	r5, r2
 8000ffe:	430d      	orrs	r5, r1
 8001000:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001004:	fa1f fe8c 	uxth.w	lr, ip
 8001008:	fbb3 f1f7 	udiv	r1, r3, r7
 800100c:	fb07 3011 	mls	r0, r7, r1, r3
 8001010:	0c2b      	lsrs	r3, r5, #16
 8001012:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001016:	fb01 f00e 	mul.w	r0, r1, lr
 800101a:	4298      	cmp	r0, r3
 800101c:	fa04 f402 	lsl.w	r4, r4, r2
 8001020:	d908      	bls.n	8001034 <__udivmoddi4+0x260>
 8001022:	eb1c 0303 	adds.w	r3, ip, r3
 8001026:	f101 38ff 	add.w	r8, r1, #4294967295
 800102a:	d22f      	bcs.n	800108c <__udivmoddi4+0x2b8>
 800102c:	4298      	cmp	r0, r3
 800102e:	d92d      	bls.n	800108c <__udivmoddi4+0x2b8>
 8001030:	3902      	subs	r1, #2
 8001032:	4463      	add	r3, ip
 8001034:	1a1b      	subs	r3, r3, r0
 8001036:	b2ad      	uxth	r5, r5
 8001038:	fbb3 f0f7 	udiv	r0, r3, r7
 800103c:	fb07 3310 	mls	r3, r7, r0, r3
 8001040:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8001044:	fb00 f30e 	mul.w	r3, r0, lr
 8001048:	42ab      	cmp	r3, r5
 800104a:	d908      	bls.n	800105e <__udivmoddi4+0x28a>
 800104c:	eb1c 0505 	adds.w	r5, ip, r5
 8001050:	f100 38ff 	add.w	r8, r0, #4294967295
 8001054:	d216      	bcs.n	8001084 <__udivmoddi4+0x2b0>
 8001056:	42ab      	cmp	r3, r5
 8001058:	d914      	bls.n	8001084 <__udivmoddi4+0x2b0>
 800105a:	3802      	subs	r0, #2
 800105c:	4465      	add	r5, ip
 800105e:	1aed      	subs	r5, r5, r3
 8001060:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001064:	e738      	b.n	8000ed8 <__udivmoddi4+0x104>
 8001066:	4631      	mov	r1, r6
 8001068:	4630      	mov	r0, r6
 800106a:	e707      	b.n	8000e7c <__udivmoddi4+0xa8>
 800106c:	4686      	mov	lr, r0
 800106e:	e6e5      	b.n	8000e3c <__udivmoddi4+0x68>
 8001070:	4618      	mov	r0, r3
 8001072:	e6fa      	b.n	8000e6a <__udivmoddi4+0x96>
 8001074:	454b      	cmp	r3, r9
 8001076:	d2a9      	bcs.n	8000fcc <__udivmoddi4+0x1f8>
 8001078:	ebb9 0802 	subs.w	r8, r9, r2
 800107c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001080:	3801      	subs	r0, #1
 8001082:	e7a3      	b.n	8000fcc <__udivmoddi4+0x1f8>
 8001084:	4640      	mov	r0, r8
 8001086:	e7ea      	b.n	800105e <__udivmoddi4+0x28a>
 8001088:	4620      	mov	r0, r4
 800108a:	e794      	b.n	8000fb6 <__udivmoddi4+0x1e2>
 800108c:	4641      	mov	r1, r8
 800108e:	e7d1      	b.n	8001034 <__udivmoddi4+0x260>
 8001090:	46d0      	mov	r8, sl
 8001092:	e77b      	b.n	8000f8c <__udivmoddi4+0x1b8>
 8001094:	3b02      	subs	r3, #2
 8001096:	4465      	add	r5, ip
 8001098:	e732      	b.n	8000f00 <__udivmoddi4+0x12c>
 800109a:	4608      	mov	r0, r1
 800109c:	e709      	b.n	8000eb2 <__udivmoddi4+0xde>
 800109e:	4464      	add	r4, ip
 80010a0:	3802      	subs	r0, #2
 80010a2:	e742      	b.n	8000f2a <__udivmoddi4+0x156>

080010a4 <__aeabi_idiv0>:
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <osDelayTask>:
 * @brief Delay routine
 * @param[in] delay Amount of time for which the calling task should block
 **/

void osDelayTask(systime_t delay)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
   //Delay the task for the specified duration
   vTaskDelay(OS_MS_TO_SYSTICKS(delay));
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f00d f825 	bl	800e100 <vTaskDelay>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <osSuspendAllTasks>:
/**
 * @brief Suspend scheduler activity
 **/

void osSuspendAllTasks(void)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	af00      	add	r7, sp, #0
   //Make sure the operating system is running
   if(xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80010c2:	f00d fccb 	bl	800ea5c <xTaskGetSchedulerState>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d001      	beq.n	80010d0 <osSuspendAllTasks+0x12>
   {
      //Suspend all tasks
      vTaskSuspendAll();
 80010cc:	f00d f8bc 	bl	800e248 <vTaskSuspendAll>
   }
}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <osResumeAllTasks>:
/**
 * @brief Resume scheduler activity
 **/

void osResumeAllTasks(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
   //Make sure the operating system is running
   if(xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80010d8:	f00d fcc0 	bl	800ea5c <xTaskGetSchedulerState>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d001      	beq.n	80010e6 <osResumeAllTasks+0x12>
   {
      //Resume all tasks
      xTaskResumeAll();
 80010e2:	f00d f8bf 	bl	800e264 <xTaskResumeAll>
   }
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}

080010ea <osAllocMem>:
 * @return A pointer to the allocated memory block or NULL if
 *   there is insufficient memory available
 **/

__weak_func void *osAllocMem(size_t size)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b084      	sub	sp, #16
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
   void *p;

   //Allocate a memory block
   p = pvPortMalloc(size);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f00e fc0a 	bl	800f90c <pvPortMalloc>
 80010f8:	60f8      	str	r0, [r7, #12]
   //Debug message
   TRACE_DEBUG("Allocating %" PRIuSIZE " bytes at 0x%08" PRIXPTR "\r\n",
      size, (uintptr_t) p);

   //Return a pointer to the newly allocated memory block
   return p;
 80010fa:	68fb      	ldr	r3, [r7, #12]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <osFreeMem>:
 * @brief Release a previously allocated memory block
 * @param[in] p Previously allocated memory block to be freed
 **/

__weak_func void osFreeMem(void *p)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
   //Make sure the pointer is valid
   if(p != NULL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d002      	beq.n	8001118 <osFreeMem+0x14>
   {
      //Debug message
      TRACE_DEBUG("Freeing memory at 0x%08" PRIXPTR "\r\n", (uintptr_t) p);

      //Free memory block
      vPortFree(p);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f00e fcc4 	bl	800faa0 <vPortFree>
   }
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr

0800112c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4a06      	ldr	r2, [pc, #24]	; (8001154 <vApplicationGetIdleTaskMemory+0x28>)
 800113c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	4a05      	ldr	r2, [pc, #20]	; (8001158 <vApplicationGetIdleTaskMemory+0x2c>)
 8001142:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2280      	movs	r2, #128	; 0x80
 8001148:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800114a:	bf00      	nop
 800114c:	3714      	adds	r7, #20
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr
 8001154:	20000114 	.word	0x20000114
 8001158:	200001c8 	.word	0x200001c8

0800115c <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4a07      	ldr	r2, [pc, #28]	; (8001188 <vApplicationGetTimerTaskMemory+0x2c>)
 800116c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	4a06      	ldr	r2, [pc, #24]	; (800118c <vApplicationGetTimerTaskMemory+0x30>)
 8001172:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f44f 7280 	mov.w	r2, #256	; 0x100
 800117a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	200003c8 	.word	0x200003c8
 800118c:	2000047c 	.word	0x2000047c

08001190 <vApplicationStackOverflowHook>:
 * @brief FreeRTOS stackoverflow detection callback
 **/

void vApplicationStackOverflowHook( TaskHandle_t xTask,
                                    signed char *pcTaskName )
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
	fprintf(stderr, "Stack overflow in task '%s'!\r\n", pcTaskName);
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <vApplicationStackOverflowHook+0x30>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	683a      	ldr	r2, [r7, #0]
 80011a2:	4908      	ldr	r1, [pc, #32]	; (80011c4 <vApplicationStackOverflowHook+0x34>)
 80011a4:	4618      	mov	r0, r3
 80011a6:	f00e fe6b 	bl	800fe80 <fiprintf>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80011aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011ae:	f383 8811 	msr	BASEPRI, r3
 80011b2:	f3bf 8f6f 	isb	sy
 80011b6:	f3bf 8f4f 	dsb	sy
 80011ba:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80011bc:	bf00      	nop
	taskDISABLE_INTERRUPTS();
	while(1);
 80011be:	e7fe      	b.n	80011be <vApplicationStackOverflowHook+0x2e>
 80011c0:	20000094 	.word	0x20000094
 80011c4:	080121c0 	.word	0x080121c0

080011c8 <vApplicationMallocFailedHook>:
/**
 * @brief FreeRTOS memory allocation failed detection callback
 **/

void vApplicationMallocFailedHook( void )
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
	fprintf(stderr, "OS memory allocation failed!\r\n");
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <vApplicationMallocFailedHook+0x2c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	221e      	movs	r2, #30
 80011d6:	2101      	movs	r1, #1
 80011d8:	4807      	ldr	r0, [pc, #28]	; (80011f8 <vApplicationMallocFailedHook+0x30>)
 80011da:	f00e fee3 	bl	800ffa4 <fwrite>
	__asm volatile
 80011de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011e2:	f383 8811 	msr	BASEPRI, r3
 80011e6:	f3bf 8f6f 	isb	sy
 80011ea:	f3bf 8f4f 	dsb	sy
 80011ee:	607b      	str	r3, [r7, #4]
}
 80011f0:	bf00      	nop
	taskDISABLE_INTERRUPTS();
	while(1);
 80011f2:	e7fe      	b.n	80011f2 <vApplicationMallocFailedHook+0x2a>
 80011f4:	20000094 	.word	0x20000094
 80011f8:	080121e0 	.word	0x080121e0

080011fc <Int2Str>:
 * @param  intnum: The integer to be converted
 * @retval None
 **/

void Int2Str(uint8_t *p_str, uint32_t intnum)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b087      	sub	sp, #28
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
  uint32_t i, divider = 1000000000, pos = 0, status = 0;
 8001206:	4b25      	ldr	r3, [pc, #148]	; (800129c <Int2Str+0xa0>)
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	2300      	movs	r3, #0
 8001210:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < 10; i++)
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
 8001216:	e038      	b.n	800128a <Int2Str+0x8e>
  {
    p_str[pos++] = (intnum / divider) + 48;
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001220:	b2da      	uxtb	r2, r3
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	1c59      	adds	r1, r3, #1
 8001226:	60f9      	str	r1, [r7, #12]
 8001228:	6879      	ldr	r1, [r7, #4]
 800122a:	440b      	add	r3, r1
 800122c:	3230      	adds	r2, #48	; 0x30
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	701a      	strb	r2, [r3, #0]

    intnum = intnum % divider;
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	fbb3 f2f2 	udiv	r2, r3, r2
 800123a:	6939      	ldr	r1, [r7, #16]
 800123c:	fb01 f202 	mul.w	r2, r1, r2
 8001240:	1a9b      	subs	r3, r3, r2
 8001242:	603b      	str	r3, [r7, #0]
    divider /= 10;
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	4a16      	ldr	r2, [pc, #88]	; (80012a0 <Int2Str+0xa4>)
 8001248:	fba2 2303 	umull	r2, r3, r2, r3
 800124c:	08db      	lsrs	r3, r3, #3
 800124e:	613b      	str	r3, [r7, #16]
    if ((p_str[pos-1] == '0') & (status == 0))
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	3b01      	subs	r3, #1
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	4413      	add	r3, r2
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b30      	cmp	r3, #48	; 0x30
 800125c:	bf0c      	ite	eq
 800125e:	2301      	moveq	r3, #1
 8001260:	2300      	movne	r3, #0
 8001262:	b2da      	uxtb	r2, r3
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	2b00      	cmp	r3, #0
 8001268:	bf0c      	ite	eq
 800126a:	2301      	moveq	r3, #1
 800126c:	2300      	movne	r3, #0
 800126e:	b2db      	uxtb	r3, r3
 8001270:	4013      	ands	r3, r2
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b00      	cmp	r3, #0
 8001276:	d002      	beq.n	800127e <Int2Str+0x82>
    {
      pos = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	e002      	b.n	8001284 <Int2Str+0x88>
    }
    else
    {
      status++;
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	3301      	adds	r3, #1
 8001282:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < 10; i++)
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	3301      	adds	r3, #1
 8001288:	617b      	str	r3, [r7, #20]
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	2b09      	cmp	r3, #9
 800128e:	d9c3      	bls.n	8001218 <Int2Str+0x1c>
    }
  }
}
 8001290:	bf00      	nop
 8001292:	bf00      	nop
 8001294:	371c      	adds	r7, #28
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr
 800129c:	3b9aca00 	.word	0x3b9aca00
 80012a0:	cccccccd 	.word	0xcccccccd

080012a4 <Str2Int>:
  * @param  p_intnum: The integer value
  * @retval 1: Correct
  *         0: Error
  */
uint32_t Str2Int(uint8_t *p_inputstr, uint32_t *p_intnum)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b087      	sub	sp, #28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  uint32_t i = 0, res = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
  uint32_t val = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]

  if ((p_inputstr[0] == '0') && ((p_inputstr[1] == 'x') || (p_inputstr[1] == 'X')))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b30      	cmp	r3, #48	; 0x30
 80012c0:	f040 80d7 	bne.w	8001472 <Str2Int+0x1ce>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3301      	adds	r3, #1
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b78      	cmp	r3, #120	; 0x78
 80012cc:	d005      	beq.n	80012da <Str2Int+0x36>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	3301      	adds	r3, #1
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b58      	cmp	r3, #88	; 0x58
 80012d6:	f040 80cc 	bne.w	8001472 <Str2Int+0x1ce>
  {
    i = 2;
 80012da:	2302      	movs	r3, #2
 80012dc:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 80012de:	e057      	b.n	8001390 <Str2Int+0xec>
    {
      if (ISVALIDHEX(p_inputstr[i]))
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	4413      	add	r3, r2
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b40      	cmp	r3, #64	; 0x40
 80012ea:	d905      	bls.n	80012f8 <Str2Int+0x54>
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	4413      	add	r3, r2
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b46      	cmp	r3, #70	; 0x46
 80012f6:	d917      	bls.n	8001328 <Str2Int+0x84>
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	4413      	add	r3, r2
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b60      	cmp	r3, #96	; 0x60
 8001302:	d905      	bls.n	8001310 <Str2Int+0x6c>
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	4413      	add	r3, r2
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b66      	cmp	r3, #102	; 0x66
 800130e:	d90b      	bls.n	8001328 <Str2Int+0x84>
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	4413      	add	r3, r2
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b2f      	cmp	r3, #47	; 0x2f
 800131a:	d936      	bls.n	800138a <Str2Int+0xe6>
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	4413      	add	r3, r2
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b39      	cmp	r3, #57	; 0x39
 8001326:	d830      	bhi.n	800138a <Str2Int+0xe6>
      {
        val = (val << 4) + CONVERTHEX(p_inputstr[i]);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	011b      	lsls	r3, r3, #4
 800132c:	6879      	ldr	r1, [r7, #4]
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	440a      	add	r2, r1
 8001332:	7812      	ldrb	r2, [r2, #0]
 8001334:	2a2f      	cmp	r2, #47	; 0x2f
 8001336:	d90b      	bls.n	8001350 <Str2Int+0xac>
 8001338:	6879      	ldr	r1, [r7, #4]
 800133a:	697a      	ldr	r2, [r7, #20]
 800133c:	440a      	add	r2, r1
 800133e:	7812      	ldrb	r2, [r2, #0]
 8001340:	2a39      	cmp	r2, #57	; 0x39
 8001342:	d805      	bhi.n	8001350 <Str2Int+0xac>
 8001344:	6879      	ldr	r1, [r7, #4]
 8001346:	697a      	ldr	r2, [r7, #20]
 8001348:	440a      	add	r2, r1
 800134a:	7812      	ldrb	r2, [r2, #0]
 800134c:	3a30      	subs	r2, #48	; 0x30
 800134e:	e016      	b.n	800137e <Str2Int+0xda>
 8001350:	6879      	ldr	r1, [r7, #4]
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	440a      	add	r2, r1
 8001356:	7812      	ldrb	r2, [r2, #0]
 8001358:	2a40      	cmp	r2, #64	; 0x40
 800135a:	d90b      	bls.n	8001374 <Str2Int+0xd0>
 800135c:	6879      	ldr	r1, [r7, #4]
 800135e:	697a      	ldr	r2, [r7, #20]
 8001360:	440a      	add	r2, r1
 8001362:	7812      	ldrb	r2, [r2, #0]
 8001364:	2a46      	cmp	r2, #70	; 0x46
 8001366:	d805      	bhi.n	8001374 <Str2Int+0xd0>
 8001368:	6879      	ldr	r1, [r7, #4]
 800136a:	697a      	ldr	r2, [r7, #20]
 800136c:	440a      	add	r2, r1
 800136e:	7812      	ldrb	r2, [r2, #0]
 8001370:	3a37      	subs	r2, #55	; 0x37
 8001372:	e004      	b.n	800137e <Str2Int+0xda>
 8001374:	6879      	ldr	r1, [r7, #4]
 8001376:	697a      	ldr	r2, [r7, #20]
 8001378:	440a      	add	r2, r1
 800137a:	7812      	ldrb	r2, [r2, #0]
 800137c:	3a57      	subs	r2, #87	; 0x57
 800137e:	4413      	add	r3, r2
 8001380:	60fb      	str	r3, [r7, #12]
      {
        /* Return 0, Invalid input */
        res = 0;
        break;
      }
      i++;
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	3301      	adds	r3, #1
 8001386:	617b      	str	r3, [r7, #20]
 8001388:	e002      	b.n	8001390 <Str2Int+0xec>
        res = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	613b      	str	r3, [r7, #16]
        break;
 800138e:	e008      	b.n	80013a2 <Str2Int+0xfe>
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	2b0a      	cmp	r3, #10
 8001394:	d805      	bhi.n	80013a2 <Str2Int+0xfe>
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	4413      	add	r3, r2
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d19e      	bne.n	80012e0 <Str2Int+0x3c>
    }

    /* valid result */
    if (p_inputstr[i] == '\0')
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	4413      	add	r3, r2
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d167      	bne.n	800147e <Str2Int+0x1da>
    {
      *p_intnum = val;
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	68fa      	ldr	r2, [r7, #12]
 80013b2:	601a      	str	r2, [r3, #0]
      res = 1;
 80013b4:	2301      	movs	r3, #1
 80013b6:	613b      	str	r3, [r7, #16]
    if (p_inputstr[i] == '\0')
 80013b8:	e061      	b.n	800147e <Str2Int+0x1da>
  }
  else /* max 10-digit decimal input */
  {
    while ( ( i < 11 ) && ( res != 1 ) )
    {
      if (p_inputstr[i] == '\0')
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	4413      	add	r3, r2
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d105      	bne.n	80013d2 <Str2Int+0x12e>
      {
        *p_intnum = val;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	68fa      	ldr	r2, [r7, #12]
 80013ca:	601a      	str	r2, [r3, #0]
        /* return 1 */
        res = 1;
 80013cc:	2301      	movs	r3, #1
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	e04c      	b.n	800146c <Str2Int+0x1c8>
      }
      else if (((p_inputstr[i] == 'k') || (p_inputstr[i] == 'K')) && (i > 0))
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	4413      	add	r3, r2
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b6b      	cmp	r3, #107	; 0x6b
 80013dc:	d005      	beq.n	80013ea <Str2Int+0x146>
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	4413      	add	r3, r2
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b4b      	cmp	r3, #75	; 0x4b
 80013e8:	d10b      	bne.n	8001402 <Str2Int+0x15e>
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d008      	beq.n	8001402 <Str2Int+0x15e>
      {
        val = val << 10;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	029b      	lsls	r3, r3, #10
 80013f4:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	601a      	str	r2, [r3, #0]
        res = 1;
 80013fc:	2301      	movs	r3, #1
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	e034      	b.n	800146c <Str2Int+0x1c8>
      }
      else if (((p_inputstr[i] == 'm') || (p_inputstr[i] == 'M')) && (i > 0))
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	4413      	add	r3, r2
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b6d      	cmp	r3, #109	; 0x6d
 800140c:	d005      	beq.n	800141a <Str2Int+0x176>
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	4413      	add	r3, r2
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b4d      	cmp	r3, #77	; 0x4d
 8001418:	d10b      	bne.n	8001432 <Str2Int+0x18e>
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d008      	beq.n	8001432 <Str2Int+0x18e>
      {
        val = val << 20;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	051b      	lsls	r3, r3, #20
 8001424:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	601a      	str	r2, [r3, #0]
        res = 1;
 800142c:	2301      	movs	r3, #1
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	e01c      	b.n	800146c <Str2Int+0x1c8>
      }
      else if (ISVALIDDEC(p_inputstr[i]))
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	4413      	add	r3, r2
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b2f      	cmp	r3, #47	; 0x2f
 800143c:	d913      	bls.n	8001466 <Str2Int+0x1c2>
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	4413      	add	r3, r2
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b39      	cmp	r3, #57	; 0x39
 8001448:	d80d      	bhi.n	8001466 <Str2Int+0x1c2>
      {
        val = val * 10 + CONVERTDEC(p_inputstr[i]);
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	4613      	mov	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	4619      	mov	r1, r3
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	4413      	add	r3, r2
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	440b      	add	r3, r1
 8001460:	3b30      	subs	r3, #48	; 0x30
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	e002      	b.n	800146c <Str2Int+0x1c8>
      }
      else
      {
        /* return 0, Invalid input */
        res = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
        break;
 800146a:	e008      	b.n	800147e <Str2Int+0x1da>
      }
      i++;
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	3301      	adds	r3, #1
 8001470:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( res != 1 ) )
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	2b0a      	cmp	r3, #10
 8001476:	d802      	bhi.n	800147e <Str2Int+0x1da>
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d19d      	bne.n	80013ba <Str2Int+0x116>
    }
  }

  return res;
 800147e:	693b      	ldr	r3, [r7, #16]
}
 8001480:	4618      	mov	r0, r3
 8001482:	371c      	adds	r7, #28
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr
	...

0800148c <Serial_PutString>:
  * @brief  Print a string on the HyperTerminal
  * @param  p_string: The string to be printed
  * @retval None
  */
void Serial_PutString(uint8_t *p_string)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint16_t length = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	81fb      	strh	r3, [r7, #14]

  while (p_string[length] != '\0')
 8001498:	e002      	b.n	80014a0 <Serial_PutString+0x14>
  {
    length++;
 800149a:	89fb      	ldrh	r3, [r7, #14]
 800149c:	3301      	adds	r3, #1
 800149e:	81fb      	strh	r3, [r7, #14]
  while (p_string[length] != '\0')
 80014a0:	89fb      	ldrh	r3, [r7, #14]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1f6      	bne.n	800149a <Serial_PutString+0xe>
  }
  HAL_UART_Transmit(&UartHandle, p_string, length, TX_TIMEOUT);
 80014ac:	89fa      	ldrh	r2, [r7, #14]
 80014ae:	2364      	movs	r3, #100	; 0x64
 80014b0:	6879      	ldr	r1, [r7, #4]
 80014b2:	4803      	ldr	r0, [pc, #12]	; (80014c0 <Serial_PutString+0x34>)
 80014b4:	f008 fd30 	bl	8009f18 <HAL_UART_Transmit>
}
 80014b8:	bf00      	nop
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000b6c 	.word	0x20000b6c

080014c4 <Serial_PutByte>:
  * @brief  Transmit a byte to the HyperTerminal
  * @param  param The byte to be sent
  * @retval HAL_StatusTypeDef HAL_OK if OK
  */
HAL_StatusTypeDef Serial_PutByte( uint8_t param )
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
  /* May be timeouted... */
  if ( UartHandle.gState == HAL_UART_STATE_TIMEOUT )
 80014ce:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <Serial_PutByte+0x34>)
 80014d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014d4:	2ba0      	cmp	r3, #160	; 0xa0
 80014d6:	d103      	bne.n	80014e0 <Serial_PutByte+0x1c>
  {
    UartHandle.gState = HAL_UART_STATE_READY;
 80014d8:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <Serial_PutByte+0x34>)
 80014da:	2220      	movs	r2, #32
 80014dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }
  return HAL_UART_Transmit(&UartHandle, &param, 1, TX_TIMEOUT);
 80014e0:	1df9      	adds	r1, r7, #7
 80014e2:	2364      	movs	r3, #100	; 0x64
 80014e4:	2201      	movs	r2, #1
 80014e6:	4804      	ldr	r0, [pc, #16]	; (80014f8 <Serial_PutByte+0x34>)
 80014e8:	f008 fd16 	bl	8009f18 <HAL_UART_Transmit>
 80014ec:	4603      	mov	r3, r0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000b6c 	.word	0x20000b6c

080014fc <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001508:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800150a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4313      	orrs	r3, r2
 8001512:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001514:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001518:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4013      	ands	r3, r2
 800151e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001520:	68fb      	ldr	r3, [r7, #12]
}
 8001522:	bf00      	nop
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr

0800152c <updateDevice>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

bool updateDevice()
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
	uint8_t c;
	bool status = false;
 8001532:	2300      	movs	r3, #0
 8001534:	71fb      	strb	r3, [r7, #7]
	bool bootReady = false;
 8001536:	2300      	movs	r3, #0
 8001538:	71bb      	strb	r3, [r7, #6]
	serialPutStr("E5 POR\n");
 800153a:	4816      	ldr	r0, [pc, #88]	; (8001594 <updateDevice+0x68>)
 800153c:	f00b f972 	bl	800c824 <serialPutStr>
    do
    {
    	if(HAL_UART_Receive(&huart2, &c, 1, 100) == HAL_OK)
 8001540:	1d79      	adds	r1, r7, #5
 8001542:	2364      	movs	r3, #100	; 0x64
 8001544:	2201      	movs	r2, #1
 8001546:	4814      	ldr	r0, [pc, #80]	; (8001598 <updateDevice+0x6c>)
 8001548:	f008 fd6c 	bl	800a024 <HAL_UART_Receive>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d113      	bne.n	800157a <updateDevice+0x4e>
		{
    		switch(c)
 8001552:	797b      	ldrb	r3, [r7, #5]
 8001554:	2b61      	cmp	r3, #97	; 0x61
 8001556:	d002      	beq.n	800155e <updateDevice+0x32>
 8001558:	2b62      	cmp	r3, #98	; 0x62
 800155a:	d005      	beq.n	8001568 <updateDevice+0x3c>
 800155c:	e009      	b.n	8001572 <updateDevice+0x46>
    		{
    		case 'a':
    			status = true;
 800155e:	2301      	movs	r3, #1
 8001560:	71fb      	strb	r3, [r7, #7]
    			bootReady = true;
 8001562:	2301      	movs	r3, #1
 8001564:	71bb      	strb	r3, [r7, #6]
    			break;
 8001566:	e009      	b.n	800157c <updateDevice+0x50>

    		case 'b':
    			status = false;
 8001568:	2300      	movs	r3, #0
 800156a:	71fb      	strb	r3, [r7, #7]
    			bootReady = true;
 800156c:	2301      	movs	r3, #1
 800156e:	71bb      	strb	r3, [r7, #6]
    			break;
 8001570:	e004      	b.n	800157c <updateDevice+0x50>
    		default:
    			serialPutStr("Unknown Command\n");
 8001572:	480a      	ldr	r0, [pc, #40]	; (800159c <updateDevice+0x70>)
 8001574:	f00b f956 	bl	800c824 <serialPutStr>
    			break;
 8001578:	e000      	b.n	800157c <updateDevice+0x50>
    		}
		}
 800157a:	bf00      	nop
    }while(!bootReady);
 800157c:	79bb      	ldrb	r3, [r7, #6]
 800157e:	f083 0301 	eor.w	r3, r3, #1
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1db      	bne.n	8001540 <updateDevice+0x14>

	return status;
 8001588:	79fb      	ldrb	r3, [r7, #7]
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	08012228 	.word	0x08012228
 8001598:	200009c8 	.word	0x200009c8
 800159c:	08012230 	.word	0x08012230

080015a0 <__io_putchar>:

int __io_putchar(int ch)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	uint8_t c;

	c = (uint8_t)ch;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	73fb      	strb	r3, [r7, #15]

	if(HAL_UART_Transmit(&huart2, &c, 1, 100) == HAL_OK)
 80015ae:	f107 010f 	add.w	r1, r7, #15
 80015b2:	2364      	movs	r3, #100	; 0x64
 80015b4:	2201      	movs	r2, #1
 80015b6:	4807      	ldr	r0, [pc, #28]	; (80015d4 <__io_putchar+0x34>)
 80015b8:	f008 fcae 	bl	8009f18 <HAL_UART_Transmit>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <__io_putchar+0x26>
		return ch;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	e001      	b.n	80015ca <__io_putchar+0x2a>
	else
		return -1;
 80015c6:	f04f 33ff 	mov.w	r3, #4294967295
	return -1;
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	200009c8 	.word	0x200009c8

080015d8 <ledTaskHandler>:
/**
 * @brief Led task routine (for debug purpose)
 **/

void ledTaskHandler(void const * argument)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80015e0:	2201      	movs	r2, #1
 80015e2:	2140      	movs	r1, #64	; 0x40
 80015e4:	4807      	ldr	r0, [pc, #28]	; (8001604 <ledTaskHandler+0x2c>)
 80015e6:	f005 f8b5 	bl	8006754 <HAL_GPIO_WritePin>
		osDelay(100);
 80015ea:	2064      	movs	r0, #100	; 0x64
 80015ec:	f00b fa9b 	bl	800cb26 <osDelay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80015f0:	2200      	movs	r2, #0
 80015f2:	2140      	movs	r1, #64	; 0x40
 80015f4:	4803      	ldr	r0, [pc, #12]	; (8001604 <ledTaskHandler+0x2c>)
 80015f6:	f005 f8ad 	bl	8006754 <HAL_GPIO_WritePin>
		osDelay(900);
 80015fa:	f44f 7061 	mov.w	r0, #900	; 0x384
 80015fe:	f00b fa92 	bl	800cb26 <osDelay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001602:	e7ed      	b.n	80015e0 <ledTaskHandler+0x8>
 8001604:	48000400 	.word	0x48000400

08001608 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001608:	b5b0      	push	{r4, r5, r7, lr}
 800160a:	b0a4      	sub	sp, #144	; 0x90
 800160c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800160e:	f003 fa33 	bl	8004a78 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001612:	f000 f8b7 	bl	8001784 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001616:	f000 fb09 	bl	8001c2c <MX_GPIO_Init>
	MX_ADC_Init();
 800161a:	f000 f90f 	bl	800183c <MX_ADC_Init>
	MX_LPUART1_UART_Init();
 800161e:	f000 f99b 	bl	8001958 <MX_LPUART1_UART_Init>
	MX_USART2_UART_Init();
 8001622:	f000 f9e3 	bl	80019ec <MX_USART2_UART_Init>
	MX_RTC_Init();
 8001626:	f000 fa2d 	bl	8001a84 <MX_RTC_Init>
	MX_SPI2_Init();
 800162a:	f000 fac1 	bl	8001bb0 <MX_SPI2_Init>
	MX_I2C2_Init();
 800162e:	f000 f953 	bl	80018d8 <MX_I2C2_Init>

	/* USER CODE END 2 */

	/* Create the mutex(es) */
	/* definition and creation of UartMutex */
	osMutexDef(UartMutex);
 8001632:	2300      	movs	r3, #0
 8001634:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001638:	2300      	movs	r3, #0
 800163a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	UartMutexHandle = osMutexCreate(osMutex(UartMutex));
 800163e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001642:	4618      	mov	r0, r3
 8001644:	f00b fa83 	bl	800cb4e <osMutexCreate>
 8001648:	4603      	mov	r3, r0
 800164a:	4a41      	ldr	r2, [pc, #260]	; (8001750 <main+0x148>)
 800164c:	6013      	str	r3, [r2, #0]

	/* definition and creation of SpiMutex */
	osMutexDef(SpiMutex);
 800164e:	2300      	movs	r3, #0
 8001650:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001654:	2300      	movs	r3, #0
 8001656:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	SpiMutexHandle = osMutexCreate(osMutex(SpiMutex));
 800165a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800165e:	4618      	mov	r0, r3
 8001660:	f00b fa75 	bl	800cb4e <osMutexCreate>
 8001664:	4603      	mov	r3, r0
 8001666:	4a3b      	ldr	r2, [pc, #236]	; (8001754 <main+0x14c>)
 8001668:	6013      	str	r3, [r2, #0]

	/* definition and creation of I2cMutex */
	osMutexDef(I2cMutex);
 800166a:	2300      	movs	r3, #0
 800166c:	67bb      	str	r3, [r7, #120]	; 0x78
 800166e:	2300      	movs	r3, #0
 8001670:	67fb      	str	r3, [r7, #124]	; 0x7c
	I2cMutexHandle = osMutexCreate(osMutex(I2cMutex));
 8001672:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001676:	4618      	mov	r0, r3
 8001678:	f00b fa69 	bl	800cb4e <osMutexCreate>
 800167c:	4603      	mov	r3, r0
 800167e:	4a36      	ldr	r2, [pc, #216]	; (8001758 <main+0x150>)
 8001680:	6013      	str	r3, [r2, #0]

	/* definition and creation of RtcMutex */
	osMutexDef(RtcMutex);
 8001682:	2300      	movs	r3, #0
 8001684:	673b      	str	r3, [r7, #112]	; 0x70
 8001686:	2300      	movs	r3, #0
 8001688:	677b      	str	r3, [r7, #116]	; 0x74
	RtcMutexHandle = osMutexCreate(osMutex(RtcMutex));
 800168a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800168e:	4618      	mov	r0, r3
 8001690:	f00b fa5d 	bl	800cb4e <osMutexCreate>
 8001694:	4603      	mov	r3, r0
 8001696:	4a31      	ldr	r2, [pc, #196]	; (800175c <main+0x154>)
 8001698:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_MUTEX */
	/* add mutexes, ... */

	// definition and creation of iapMutex */
	osMutexDef(iapMutex);
 800169a:	2300      	movs	r3, #0
 800169c:	66bb      	str	r3, [r7, #104]	; 0x68
 800169e:	2300      	movs	r3, #0
 80016a0:	66fb      	str	r3, [r7, #108]	; 0x6c
	iapMutexHandle = osMutexCreate(osMutex(iapMutex));
 80016a2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80016a6:	4618      	mov	r0, r3
 80016a8:	f00b fa51 	bl	800cb4e <osMutexCreate>
 80016ac:	4603      	mov	r3, r0
 80016ae:	4a2c      	ldr	r2, [pc, #176]	; (8001760 <main+0x158>)
 80016b0:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of xQueue1 */
	osMessageQDef(xQueue1, 100, uint16_t);
 80016b2:	4b2c      	ldr	r3, [pc, #176]	; (8001764 <main+0x15c>)
 80016b4:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80016b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	xQueue1Handle = osMessageCreate(osMessageQ(xQueue1), NULL);
 80016be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016c2:	2100      	movs	r1, #0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f00b fadf 	bl	800cc88 <osMessageCreate>
 80016ca:	4603      	mov	r3, r0
 80016cc:	4a26      	ldr	r2, [pc, #152]	; (8001768 <main+0x160>)
 80016ce:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */

	// definition and creation of uartUserTask

	if(updateDevice())
 80016d0:	f7ff ff2c 	bl	800152c <updateDevice>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d026      	beq.n	8001728 <main+0x120>
	{
		osThreadDef(uartUserTask, uartUserTaskHandler, osPriorityNormal, 0, 500);
 80016da:	4b24      	ldr	r3, [pc, #144]	; (800176c <main+0x164>)
 80016dc:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80016e0:	461d      	mov	r5, r3
 80016e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		uartUserTaskHandle = osThreadCreate(osThread(uartUserTask), NULL);
 80016ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016f2:	2100      	movs	r1, #0
 80016f4:	4618      	mov	r0, r3
 80016f6:	f00b f9ca 	bl	800ca8e <osThreadCreate>
 80016fa:	4603      	mov	r3, r0
 80016fc:	4a1c      	ldr	r2, [pc, #112]	; (8001770 <main+0x168>)
 80016fe:	6013      	str	r3, [r2, #0]

		// definition and creation of ledTask
		osThreadDef(ledTask, ledTaskHandler, osPriorityNormal, 0, 128);
 8001700:	4b1c      	ldr	r3, [pc, #112]	; (8001774 <main+0x16c>)
 8001702:	f107 0420 	add.w	r4, r7, #32
 8001706:	461d      	mov	r5, r3
 8001708:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800170a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800170c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001710:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		ledTaskHandle = osThreadCreate(osThread(ledTask), NULL);
 8001714:	f107 0320 	add.w	r3, r7, #32
 8001718:	2100      	movs	r1, #0
 800171a:	4618      	mov	r0, r3
 800171c:	f00b f9b7 	bl	800ca8e <osThreadCreate>
 8001720:	4603      	mov	r3, r0
 8001722:	4a15      	ldr	r2, [pc, #84]	; (8001778 <main+0x170>)
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	e010      	b.n	800174a <main+0x142>
	}
	else
	{
		osThreadDef(terminalTask, terminalTaskHandler, osPriorityNormal, 0, 500);
 8001728:	4b14      	ldr	r3, [pc, #80]	; (800177c <main+0x174>)
 800172a:	1d3c      	adds	r4, r7, #4
 800172c:	461d      	mov	r5, r3
 800172e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001730:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001732:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001736:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		terminalTaskHandle = osThreadCreate(osThread(terminalTask), NULL);
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	2100      	movs	r1, #0
 800173e:	4618      	mov	r0, r3
 8001740:	f00b f9a5 	bl	800ca8e <osThreadCreate>
 8001744:	4603      	mov	r3, r0
 8001746:	4a0e      	ldr	r2, [pc, #56]	; (8001780 <main+0x178>)
 8001748:	6013      	str	r3, [r2, #0]


	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 800174a:	f00b f999 	bl	800ca80 <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800174e:	e7fe      	b.n	800174e <main+0x146>
 8001750:	20000b00 	.word	0x20000b00
 8001754:	20000b04 	.word	0x20000b04
 8001758:	20000b08 	.word	0x20000b08
 800175c:	20000b0c 	.word	0x20000b0c
 8001760:	20000b10 	.word	0x20000b10
 8001764:	0801225c 	.word	0x0801225c
 8001768:	20000afc 	.word	0x20000afc
 800176c:	0801226c 	.word	0x0801226c
 8001770:	20000b18 	.word	0x20000b18
 8001774:	08012288 	.word	0x08012288
 8001778:	20000b14 	.word	0x20000b14
 800177c:	080122a4 	.word	0x080122a4
 8001780:	20000af8 	.word	0x20000af8

08001784 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b09a      	sub	sp, #104	; 0x68
 8001788:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800178a:	f107 0320 	add.w	r3, r7, #32
 800178e:	2248      	movs	r2, #72	; 0x48
 8001790:	2100      	movs	r1, #0
 8001792:	4618      	mov	r0, r3
 8001794:	f00e fc73 	bl	801007e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001798:	f107 0308 	add.w	r3, r7, #8
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
 80017a8:	615a      	str	r2, [r3, #20]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017aa:	4b23      	ldr	r3, [pc, #140]	; (8001838 <SystemClock_Config+0xb4>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017b2:	4a21      	ldr	r2, [pc, #132]	; (8001838 <SystemClock_Config+0xb4>)
 80017b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	4b1f      	ldr	r3, [pc, #124]	; (8001838 <SystemClock_Config+0xb4>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80017c6:	232a      	movs	r3, #42	; 0x2a
 80017c8:	623b      	str	r3, [r7, #32]
			|RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ce:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80017d0:	2301      	movs	r3, #1
 80017d2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017d4:	2340      	movs	r3, #64	; 0x40
 80017d6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80017d8:	2300      	movs	r3, #0
 80017da:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80017dc:	23b0      	movs	r3, #176	; 0xb0
 80017de:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 80017e0:	2300      	movs	r3, #0
 80017e2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80017e4:	2301      	movs	r3, #1
 80017e6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017e8:	2300      	movs	r3, #0
 80017ea:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ec:	f107 0320 	add.w	r3, r7, #32
 80017f0:	4618      	mov	r0, r3
 80017f2:	f005 fb95 	bl	8006f20 <HAL_RCC_OscConfig>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <SystemClock_Config+0x7c>
	{
		Error_Handler();
 80017fc:	f000 fab2 	bl	8001d64 <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001800:	234f      	movs	r3, #79	; 0x4f
 8001802:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
			|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001804:	2300      	movs	r3, #0
 8001806:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001808:	2300      	movs	r3, #0
 800180a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001810:	2300      	movs	r3, #0
 8001812:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001814:	2300      	movs	r3, #0
 8001816:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001818:	f107 0308 	add.w	r3, r7, #8
 800181c:	2102      	movs	r1, #2
 800181e:	4618      	mov	r0, r3
 8001820:	f005 ff00 	bl	8007624 <HAL_RCC_ClockConfig>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <SystemClock_Config+0xaa>
	{
		Error_Handler();
 800182a:	f000 fa9b 	bl	8001d64 <Error_Handler>
	}
}
 800182e:	bf00      	nop
 8001830:	3768      	adds	r7, #104	; 0x68
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	58000400 	.word	0x58000400

0800183c <MX_ADC_Init>:
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0

	/* USER CODE END ADC_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC;
 8001840:	4b23      	ldr	r3, [pc, #140]	; (80018d0 <MX_ADC_Init+0x94>)
 8001842:	4a24      	ldr	r2, [pc, #144]	; (80018d4 <MX_ADC_Init+0x98>)
 8001844:	601a      	str	r2, [r3, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001846:	4b22      	ldr	r3, [pc, #136]	; (80018d0 <MX_ADC_Init+0x94>)
 8001848:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800184c:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800184e:	4b20      	ldr	r3, [pc, #128]	; (80018d0 <MX_ADC_Init+0x94>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001854:	4b1e      	ldr	r3, [pc, #120]	; (80018d0 <MX_ADC_Init+0x94>)
 8001856:	2200      	movs	r2, #0
 8001858:	60da      	str	r2, [r3, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800185a:	4b1d      	ldr	r3, [pc, #116]	; (80018d0 <MX_ADC_Init+0x94>)
 800185c:	2200      	movs	r2, #0
 800185e:	611a      	str	r2, [r3, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001860:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <MX_ADC_Init+0x94>)
 8001862:	2204      	movs	r2, #4
 8001864:	615a      	str	r2, [r3, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 8001866:	4b1a      	ldr	r3, [pc, #104]	; (80018d0 <MX_ADC_Init+0x94>)
 8001868:	2200      	movs	r2, #0
 800186a:	761a      	strb	r2, [r3, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800186c:	4b18      	ldr	r3, [pc, #96]	; (80018d0 <MX_ADC_Init+0x94>)
 800186e:	2200      	movs	r2, #0
 8001870:	765a      	strb	r2, [r3, #25]
	hadc.Init.ContinuousConvMode = DISABLE;
 8001872:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <MX_ADC_Init+0x94>)
 8001874:	2200      	movs	r2, #0
 8001876:	769a      	strb	r2, [r3, #26]
	hadc.Init.NbrOfConversion = 1;
 8001878:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <MX_ADC_Init+0x94>)
 800187a:	2201      	movs	r2, #1
 800187c:	61da      	str	r2, [r3, #28]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 800187e:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <MX_ADC_Init+0x94>)
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2020 	strb.w	r2, [r3, #32]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001886:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <MX_ADC_Init+0x94>)
 8001888:	2200      	movs	r2, #0
 800188a:	625a      	str	r2, [r3, #36]	; 0x24
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800188c:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <MX_ADC_Init+0x94>)
 800188e:	2200      	movs	r2, #0
 8001890:	629a      	str	r2, [r3, #40]	; 0x28
	hadc.Init.DMAContinuousRequests = DISABLE;
 8001892:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <MX_ADC_Init+0x94>)
 8001894:	2200      	movs	r2, #0
 8001896:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800189a:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <MX_ADC_Init+0x94>)
 800189c:	2200      	movs	r2, #0
 800189e:	631a      	str	r2, [r3, #48]	; 0x30
	hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80018a0:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <MX_ADC_Init+0x94>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	635a      	str	r2, [r3, #52]	; 0x34
	hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80018a6:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <MX_ADC_Init+0x94>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	639a      	str	r2, [r3, #56]	; 0x38
	hadc.Init.OversamplingMode = DISABLE;
 80018ac:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <MX_ADC_Init+0x94>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <MX_ADC_Init+0x94>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	64da      	str	r2, [r3, #76]	; 0x4c
	if (HAL_ADC_Init(&hadc) != HAL_OK)
 80018ba:	4805      	ldr	r0, [pc, #20]	; (80018d0 <MX_ADC_Init+0x94>)
 80018bc:	f003 facc 	bl	8004e58 <HAL_ADC_Init>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_ADC_Init+0x8e>
	{
		Error_Handler();
 80018c6:	f000 fa4d 	bl	8001d64 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	2000087c 	.word	0x2000087c
 80018d4:	40012400 	.word	0x40012400

080018d8 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 80018dc:	4b1b      	ldr	r3, [pc, #108]	; (800194c <MX_I2C2_Init+0x74>)
 80018de:	4a1c      	ldr	r2, [pc, #112]	; (8001950 <MX_I2C2_Init+0x78>)
 80018e0:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x20303E5D;
 80018e2:	4b1a      	ldr	r3, [pc, #104]	; (800194c <MX_I2C2_Init+0x74>)
 80018e4:	4a1b      	ldr	r2, [pc, #108]	; (8001954 <MX_I2C2_Init+0x7c>)
 80018e6:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 80018e8:	4b18      	ldr	r3, [pc, #96]	; (800194c <MX_I2C2_Init+0x74>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018ee:	4b17      	ldr	r3, [pc, #92]	; (800194c <MX_I2C2_Init+0x74>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018f4:	4b15      	ldr	r3, [pc, #84]	; (800194c <MX_I2C2_Init+0x74>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 80018fa:	4b14      	ldr	r3, [pc, #80]	; (800194c <MX_I2C2_Init+0x74>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001900:	4b12      	ldr	r3, [pc, #72]	; (800194c <MX_I2C2_Init+0x74>)
 8001902:	2200      	movs	r2, #0
 8001904:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001906:	4b11      	ldr	r3, [pc, #68]	; (800194c <MX_I2C2_Init+0x74>)
 8001908:	2200      	movs	r2, #0
 800190a:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800190c:	4b0f      	ldr	r3, [pc, #60]	; (800194c <MX_I2C2_Init+0x74>)
 800190e:	2200      	movs	r2, #0
 8001910:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001912:	480e      	ldr	r0, [pc, #56]	; (800194c <MX_I2C2_Init+0x74>)
 8001914:	f004 ff35 	bl	8006782 <HAL_I2C_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_I2C2_Init+0x4a>
	{
		Error_Handler();
 800191e:	f000 fa21 	bl	8001d64 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001922:	2100      	movs	r1, #0
 8001924:	4809      	ldr	r0, [pc, #36]	; (800194c <MX_I2C2_Init+0x74>)
 8001926:	f004 ffbb 	bl	80068a0 <HAL_I2CEx_ConfigAnalogFilter>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_I2C2_Init+0x5c>
	{
		Error_Handler();
 8001930:	f000 fa18 	bl	8001d64 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001934:	2100      	movs	r1, #0
 8001936:	4805      	ldr	r0, [pc, #20]	; (800194c <MX_I2C2_Init+0x74>)
 8001938:	f004 fffc 	bl	8006934 <HAL_I2CEx_ConfigDigitalFilter>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_I2C2_Init+0x6e>
	{
		Error_Handler();
 8001942:	f000 fa0f 	bl	8001d64 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	200008e0 	.word	0x200008e0
 8001950:	40005800 	.word	0x40005800
 8001954:	20303e5d 	.word	0x20303e5d

08001958 <MX_LPUART1_UART_Init>:
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 800195c:	4b21      	ldr	r3, [pc, #132]	; (80019e4 <MX_LPUART1_UART_Init+0x8c>)
 800195e:	4a22      	ldr	r2, [pc, #136]	; (80019e8 <MX_LPUART1_UART_Init+0x90>)
 8001960:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 9600;
 8001962:	4b20      	ldr	r3, [pc, #128]	; (80019e4 <MX_LPUART1_UART_Init+0x8c>)
 8001964:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001968:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800196a:	4b1e      	ldr	r3, [pc, #120]	; (80019e4 <MX_LPUART1_UART_Init+0x8c>)
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001970:	4b1c      	ldr	r3, [pc, #112]	; (80019e4 <MX_LPUART1_UART_Init+0x8c>)
 8001972:	2200      	movs	r2, #0
 8001974:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001976:	4b1b      	ldr	r3, [pc, #108]	; (80019e4 <MX_LPUART1_UART_Init+0x8c>)
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_RX;
 800197c:	4b19      	ldr	r3, [pc, #100]	; (80019e4 <MX_LPUART1_UART_Init+0x8c>)
 800197e:	2204      	movs	r2, #4
 8001980:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001982:	4b18      	ldr	r3, [pc, #96]	; (80019e4 <MX_LPUART1_UART_Init+0x8c>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001988:	4b16      	ldr	r3, [pc, #88]	; (80019e4 <MX_LPUART1_UART_Init+0x8c>)
 800198a:	2200      	movs	r2, #0
 800198c:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800198e:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <MX_LPUART1_UART_Init+0x8c>)
 8001990:	2200      	movs	r2, #0
 8001992:	625a      	str	r2, [r3, #36]	; 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001994:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <MX_LPUART1_UART_Init+0x8c>)
 8001996:	2200      	movs	r2, #0
 8001998:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_HalfDuplex_Init(&hlpuart1) != HAL_OK)
 800199a:	4812      	ldr	r0, [pc, #72]	; (80019e4 <MX_LPUART1_UART_Init+0x8c>)
 800199c:	f008 fa64 	bl	8009e68 <HAL_HalfDuplex_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_LPUART1_UART_Init+0x52>
	{
		Error_Handler();
 80019a6:	f000 f9dd 	bl	8001d64 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019aa:	2100      	movs	r1, #0
 80019ac:	480d      	ldr	r0, [pc, #52]	; (80019e4 <MX_LPUART1_UART_Init+0x8c>)
 80019ae:	f00a faec 	bl	800bf8a <HAL_UARTEx_SetTxFifoThreshold>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_LPUART1_UART_Init+0x64>
	{
		Error_Handler();
 80019b8:	f000 f9d4 	bl	8001d64 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019bc:	2100      	movs	r1, #0
 80019be:	4809      	ldr	r0, [pc, #36]	; (80019e4 <MX_LPUART1_UART_Init+0x8c>)
 80019c0:	f00a fb21 	bl	800c006 <HAL_UARTEx_SetRxFifoThreshold>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_LPUART1_UART_Init+0x76>
	{
		Error_Handler();
 80019ca:	f000 f9cb 	bl	8001d64 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80019ce:	4805      	ldr	r0, [pc, #20]	; (80019e4 <MX_LPUART1_UART_Init+0x8c>)
 80019d0:	f00a faa3 	bl	800bf1a <HAL_UARTEx_DisableFifoMode>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_LPUART1_UART_Init+0x86>
	{
		Error_Handler();
 80019da:	f000 f9c3 	bl	8001d64 <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000934 	.word	0x20000934
 80019e8:	40008000 	.word	0x40008000

080019ec <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80019f0:	4b22      	ldr	r3, [pc, #136]	; (8001a7c <MX_USART2_UART_Init+0x90>)
 80019f2:	4a23      	ldr	r2, [pc, #140]	; (8001a80 <MX_USART2_UART_Init+0x94>)
 80019f4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80019f6:	4b21      	ldr	r3, [pc, #132]	; (8001a7c <MX_USART2_UART_Init+0x90>)
 80019f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019fc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019fe:	4b1f      	ldr	r3, [pc, #124]	; (8001a7c <MX_USART2_UART_Init+0x90>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001a04:	4b1d      	ldr	r3, [pc, #116]	; (8001a7c <MX_USART2_UART_Init+0x90>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001a0a:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <MX_USART2_UART_Init+0x90>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001a10:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <MX_USART2_UART_Init+0x90>)
 8001a12:	220c      	movs	r2, #12
 8001a14:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a16:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <MX_USART2_UART_Init+0x90>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a1c:	4b17      	ldr	r3, [pc, #92]	; (8001a7c <MX_USART2_UART_Init+0x90>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a22:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <MX_USART2_UART_Init+0x90>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a28:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <MX_USART2_UART_Init+0x90>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a2e:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <MX_USART2_UART_Init+0x90>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a34:	4811      	ldr	r0, [pc, #68]	; (8001a7c <MX_USART2_UART_Init+0x90>)
 8001a36:	f008 f9c7 	bl	8009dc8 <HAL_UART_Init>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_USART2_UART_Init+0x58>
	{
		Error_Handler();
 8001a40:	f000 f990 	bl	8001d64 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a44:	2100      	movs	r1, #0
 8001a46:	480d      	ldr	r0, [pc, #52]	; (8001a7c <MX_USART2_UART_Init+0x90>)
 8001a48:	f00a fa9f 	bl	800bf8a <HAL_UARTEx_SetTxFifoThreshold>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_USART2_UART_Init+0x6a>
	{
		Error_Handler();
 8001a52:	f000 f987 	bl	8001d64 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a56:	2100      	movs	r1, #0
 8001a58:	4808      	ldr	r0, [pc, #32]	; (8001a7c <MX_USART2_UART_Init+0x90>)
 8001a5a:	f00a fad4 	bl	800c006 <HAL_UARTEx_SetRxFifoThreshold>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_USART2_UART_Init+0x7c>
	{
		Error_Handler();
 8001a64:	f000 f97e 	bl	8001d64 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001a68:	4804      	ldr	r0, [pc, #16]	; (8001a7c <MX_USART2_UART_Init+0x90>)
 8001a6a:	f00a fa56 	bl	800bf1a <HAL_UARTEx_DisableFifoMode>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_USART2_UART_Init+0x8c>
	{
		Error_Handler();
 8001a74:	f000 f976 	bl	8001d64 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001a78:	bf00      	nop
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	200009c8 	.word	0x200009c8
 8001a80:	40004400 	.word	0x40004400

08001a84 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b092      	sub	sp, #72	; 0x48
 8001a88:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = {0};
 8001a8a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	60da      	str	r2, [r3, #12]
 8001a98:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	633b      	str	r3, [r7, #48]	; 0x30
	RTC_AlarmTypeDef sAlarm = {0};
 8001a9e:	1d3b      	adds	r3, r7, #4
 8001aa0:	222c      	movs	r2, #44	; 0x2c
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f00e faea 	bl	801007e <memset>

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8001aaa:	4b3f      	ldr	r3, [pc, #252]	; (8001ba8 <MX_RTC_Init+0x124>)
 8001aac:	4a3f      	ldr	r2, [pc, #252]	; (8001bac <MX_RTC_Init+0x128>)
 8001aae:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001ab0:	4b3d      	ldr	r3, [pc, #244]	; (8001ba8 <MX_RTC_Init+0x124>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8001ab6:	4b3c      	ldr	r3, [pc, #240]	; (8001ba8 <MX_RTC_Init+0x124>)
 8001ab8:	227f      	movs	r2, #127	; 0x7f
 8001aba:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8001abc:	4b3a      	ldr	r3, [pc, #232]	; (8001ba8 <MX_RTC_Init+0x124>)
 8001abe:	22ff      	movs	r2, #255	; 0xff
 8001ac0:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ac2:	4b39      	ldr	r3, [pc, #228]	; (8001ba8 <MX_RTC_Init+0x124>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001ac8:	4b37      	ldr	r3, [pc, #220]	; (8001ba8 <MX_RTC_Init+0x124>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ace:	4b36      	ldr	r3, [pc, #216]	; (8001ba8 <MX_RTC_Init+0x124>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ad4:	4b34      	ldr	r3, [pc, #208]	; (8001ba8 <MX_RTC_Init+0x124>)
 8001ad6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ada:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001adc:	4b32      	ldr	r3, [pc, #200]	; (8001ba8 <MX_RTC_Init+0x124>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	621a      	str	r2, [r3, #32]
	hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001ae2:	4b31      	ldr	r3, [pc, #196]	; (8001ba8 <MX_RTC_Init+0x124>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ae8:	482f      	ldr	r0, [pc, #188]	; (8001ba8 <MX_RTC_Init+0x124>)
 8001aea:	f006 fa95 	bl	8008018 <HAL_RTC_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_RTC_Init+0x74>
	{
		Error_Handler();
 8001af4:	f000 f936 	bl	8001d64 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	sTime.Minutes = 0x0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	sTime.Seconds = 0x0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	643b      	str	r3, [r7, #64]	; 0x40
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001b12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b16:	2201      	movs	r2, #1
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4823      	ldr	r0, [pc, #140]	; (8001ba8 <MX_RTC_Init+0x124>)
 8001b1c:	f006 fafe 	bl	800811c <HAL_RTC_SetTime>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_RTC_Init+0xa6>
	{
		Error_Handler();
 8001b26:	f000 f91d 	bl	8001d64 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	sDate.Month = RTC_MONTH_JANUARY;
 8001b30:	2301      	movs	r3, #1
 8001b32:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	sDate.Date = 0x1;
 8001b36:	2301      	movs	r3, #1
 8001b38:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	sDate.Year = 0x0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001b42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b46:	2201      	movs	r2, #1
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4817      	ldr	r0, [pc, #92]	; (8001ba8 <MX_RTC_Init+0x124>)
 8001b4c:	f006 fb82 	bl	8008254 <HAL_RTC_SetDate>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_RTC_Init+0xd6>
	{
		Error_Handler();
 8001b56:	f000 f905 	bl	8001d64 <Error_Handler>
	}

	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0x0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	713b      	strb	r3, [r7, #4]
	sAlarm.AlarmTime.Minutes = 0x0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	717b      	strb	r3, [r7, #5]
	sAlarm.AlarmTime.Seconds = 0x0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	71bb      	strb	r3, [r7, #6]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	60bb      	str	r3, [r7, #8]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
	sAlarm.AlarmDateWeekDay = 0x1;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	sAlarm.Alarm = RTC_ALARM_A;
 8001b84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b88:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001b8a:	1d3b      	adds	r3, r7, #4
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4805      	ldr	r0, [pc, #20]	; (8001ba8 <MX_RTC_Init+0x124>)
 8001b92:	f006 fbe5 	bl	8008360 <HAL_RTC_SetAlarm>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_RTC_Init+0x11c>
	{
		Error_Handler();
 8001b9c:	f000 f8e2 	bl	8001d64 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8001ba0:	bf00      	nop
 8001ba2:	3748      	adds	r7, #72	; 0x48
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20000a5c 	.word	0x20000a5c
 8001bac:	40002800 	.word	0x40002800

08001bb0 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8001bb4:	4b1b      	ldr	r3, [pc, #108]	; (8001c24 <MX_SPI2_Init+0x74>)
 8001bb6:	4a1c      	ldr	r2, [pc, #112]	; (8001c28 <MX_SPI2_Init+0x78>)
 8001bb8:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8001bba:	4b1a      	ldr	r3, [pc, #104]	; (8001c24 <MX_SPI2_Init+0x74>)
 8001bbc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bc0:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001bc2:	4b18      	ldr	r3, [pc, #96]	; (8001c24 <MX_SPI2_Init+0x74>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bc8:	4b16      	ldr	r3, [pc, #88]	; (8001c24 <MX_SPI2_Init+0x74>)
 8001bca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001bce:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bd0:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <MX_SPI2_Init+0x74>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bd6:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <MX_SPI2_Init+0x74>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8001bdc:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <MX_SPI2_Init+0x74>)
 8001bde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001be2:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001be4:	4b0f      	ldr	r3, [pc, #60]	; (8001c24 <MX_SPI2_Init+0x74>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bea:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <MX_SPI2_Init+0x74>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bf0:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <MX_SPI2_Init+0x74>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bf6:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <MX_SPI2_Init+0x74>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 8001bfc:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <MX_SPI2_Init+0x74>)
 8001bfe:	2207      	movs	r2, #7
 8001c00:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c02:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <MX_SPI2_Init+0x74>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001c08:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <MX_SPI2_Init+0x74>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c0e:	4805      	ldr	r0, [pc, #20]	; (8001c24 <MX_SPI2_Init+0x74>)
 8001c10:	f006 fd5f 	bl	80086d2 <HAL_SPI_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_SPI2_Init+0x6e>
	{
		Error_Handler();
 8001c1a:	f000 f8a3 	bl	8001d64 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000a94 	.word	0x20000a94
 8001c28:	40003800 	.word	0x40003800

08001c2c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c32:	1d3b      	adds	r3, r7, #4
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001c40:	2001      	movs	r0, #1
 8001c42:	f7ff fc5b 	bl	80014fc <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001c46:	2002      	movs	r0, #2
 8001c48:	f7ff fc58 	bl	80014fc <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001c4c:	2004      	movs	r0, #4
 8001c4e:	f7ff fc55 	bl	80014fc <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, ADC_SW_Pin|FLASH_CS_Pin|MB_OC_Pin|LED_Pin, GPIO_PIN_RESET);
 8001c52:	2200      	movs	r2, #0
 8001c54:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8001c58:	481e      	ldr	r0, [pc, #120]	; (8001cd4 <MX_GPIO_Init+0xa8>)
 8001c5a:	f004 fd7b 	bl	8006754 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, MB_PWR_Pin|EXT_PWR_Pin, GPIO_PIN_RESET);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f240 2101 	movw	r1, #513	; 0x201
 8001c64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c68:	f004 fd74 	bl	8006754 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(MB_CTL_GPIO_Port, MB_CTL_Pin, GPIO_PIN_RESET);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2102      	movs	r1, #2
 8001c70:	4819      	ldr	r0, [pc, #100]	; (8001cd8 <MX_GPIO_Init+0xac>)
 8001c72:	f004 fd6f 	bl	8006754 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : ADC_SW_Pin FLASH_CS_Pin MB_OC_Pin LED_Pin */
	GPIO_InitStruct.Pin = ADC_SW_Pin|FLASH_CS_Pin|MB_OC_Pin|LED_Pin;
 8001c76:	f44f 7338 	mov.w	r3, #736	; 0x2e0
 8001c7a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c84:	2300      	movs	r3, #0
 8001c86:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c88:	1d3b      	adds	r3, r7, #4
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4811      	ldr	r0, [pc, #68]	; (8001cd4 <MX_GPIO_Init+0xa8>)
 8001c8e:	f004 fb33 	bl	80062f8 <HAL_GPIO_Init>

	/*Configure GPIO pins : MB_PWR_Pin EXT_PWR_Pin */
	GPIO_InitStruct.Pin = MB_PWR_Pin|EXT_PWR_Pin;
 8001c92:	f240 2301 	movw	r3, #513	; 0x201
 8001c96:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca4:	1d3b      	adds	r3, r7, #4
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cac:	f004 fb24 	bl	80062f8 <HAL_GPIO_Init>

	/*Configure GPIO pin : MB_CTL_Pin */
	GPIO_InitStruct.Pin = MB_CTL_Pin;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(MB_CTL_GPIO_Port, &GPIO_InitStruct);
 8001cc0:	1d3b      	adds	r3, r7, #4
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4804      	ldr	r0, [pc, #16]	; (8001cd8 <MX_GPIO_Init+0xac>)
 8001cc6:	f004 fb17 	bl	80062f8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001cca:	bf00      	nop
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	48000400 	.word	0x48000400
 8001cd8:	48000800 	.word	0x48000800

08001cdc <Get_AdcHandle>:
	osDelay(Delay);
}


ADC_HandleTypeDef *Get_AdcHandle(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
	return &hadc;
 8001ce0:	4b02      	ldr	r3, [pc, #8]	; (8001cec <Get_AdcHandle+0x10>)
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	2000087c 	.word	0x2000087c

08001cf0 <Get_DebugHandle>:


UART_HandleTypeDef *Get_DebugHandle(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
	return &huart2;
 8001cf4:	4b02      	ldr	r3, [pc, #8]	; (8001d00 <Get_DebugHandle+0x10>)
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	200009c8 	.word	0x200009c8

08001d04 <Get_SonarHandle>:

UART_HandleTypeDef *Get_SonarHandle(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
	return &hlpuart1;;
 8001d08:	4b02      	ldr	r3, [pc, #8]	; (8001d14 <Get_SonarHandle+0x10>)
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	20000934 	.word	0x20000934

08001d18 <Get_SpiHandle>:
{
	return &hrtc;
}

SPI_HandleTypeDef   *Get_SpiHandle(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
	return &hspi2;
 8001d1c:	4b02      	ldr	r3, [pc, #8]	; (8001d28 <Get_SpiHandle+0x10>)
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	20000a94 	.word	0x20000a94

08001d2c <Get_TerminalQueueHandle>:




osMessageQId Get_TerminalQueueHandle(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
	return xQueue1Handle;;
 8001d30:	4b02      	ldr	r3, [pc, #8]	; (8001d3c <Get_TerminalQueueHandle+0x10>)
 8001d32:	681b      	ldr	r3, [r3, #0]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr
 8001d3c:	20000afc 	.word	0x20000afc

08001d40 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a04      	ldr	r2, [pc, #16]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d101      	bne.n	8001d56 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001d52:	f002 feb1 	bl	8004ab8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40012c00 	.word	0x40012c00

08001d64 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d68:	b672      	cpsid	i
}
 8001d6a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001d6c:	e7fe      	b.n	8001d6c <Error_Handler+0x8>

08001d6e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001d86:	bf00      	nop
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr

08001d8e <LL_AHB2_GRP1_EnableClock>:
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b085      	sub	sp, #20
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001daa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4013      	ands	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001db2:	68fb      	ldr	r3, [r7, #12]
}
 8001db4:	bf00      	nop
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr

08001dbe <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b085      	sub	sp, #20
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001dcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dda:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4013      	ands	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001de2:	68fb      	ldr	r3, [r7, #12]
}
 8001de4:	bf00      	nop
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr

08001dee <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b085      	sub	sp, #20
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dfa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001e06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e12:	68fb      	ldr	r3, [r7, #12]
}
 8001e14:	bf00      	nop
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr

08001e1e <LL_APB1_GRP1_DisableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001e26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e2a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e34:	4013      	ands	r3, r2
 8001e36:	658b      	str	r3, [r1, #88]	; 0x58
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bc80      	pop	{r7}
 8001e40:	4770      	bx	lr

08001e42 <LL_APB1_GRP2_DisableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_DisableClock(uint32_t Periphs)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 8001e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	43db      	mvns	r3, r3
 8001e54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e58:	4013      	ands	r3, r2
 8001e5a:	65cb      	str	r3, [r1, #92]	; 0x5c
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr

08001e66 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b085      	sub	sp, #20
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e72:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4013      	ands	r3, r2
 8001e88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
}
 8001e8c:	bf00      	nop
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr

08001e96 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	210f      	movs	r1, #15
 8001e9e:	f06f 0001 	mvn.w	r0, #1
 8001ea2:	f003 ff1c 	bl	8005cde <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
	...

08001eac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb4:	f107 030c 	add.w	r3, r7, #12
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
 8001ec2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a0c      	ldr	r2, [pc, #48]	; (8001efc <HAL_ADC_MspInit+0x50>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d112      	bne.n	8001ef4 <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001ece:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ed2:	f7ff ffc8 	bl	8001e66 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed6:	2002      	movs	r0, #2
 8001ed8:	f7ff ff59 	bl	8001d8e <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB3     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001edc:	2308      	movs	r3, #8
 8001ede:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee8:	f107 030c 	add.w	r3, r7, #12
 8001eec:	4619      	mov	r1, r3
 8001eee:	4804      	ldr	r0, [pc, #16]	; (8001f00 <HAL_ADC_MspInit+0x54>)
 8001ef0:	f004 fa02 	bl	80062f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }

}
 8001ef4:	bf00      	nop
 8001ef6:	3720      	adds	r7, #32
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40012400 	.word	0x40012400
 8001f00:	48000400 	.word	0x48000400

08001f04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b096      	sub	sp, #88	; 0x58
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	609a      	str	r2, [r3, #8]
 8001f18:	60da      	str	r2, [r3, #12]
 8001f1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f1c:	f107 030c 	add.w	r3, r7, #12
 8001f20:	2238      	movs	r2, #56	; 0x38
 8001f22:	2100      	movs	r1, #0
 8001f24:	4618      	mov	r0, r3
 8001f26:	f00e f8aa 	bl	801007e <memset>
  if(hi2c->Instance==I2C2)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a21      	ldr	r2, [pc, #132]	; (8001fb4 <HAL_I2C_MspInit+0xb0>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d13b      	bne.n	8001fac <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001f34:	2380      	movs	r3, #128	; 0x80
 8001f36:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001f38:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f3e:	f107 030c 	add.w	r3, r7, #12
 8001f42:	4618      	mov	r0, r3
 8001f44:	f005 ff4e 	bl	8007de4 <HAL_RCCEx_PeriphCLKConfig>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001f4e:	f7ff ff09 	bl	8001d64 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f52:	2001      	movs	r0, #1
 8001f54:	f7ff ff1b 	bl	8001d8e <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f58:	2002      	movs	r0, #2
 8001f5a:	f7ff ff18 	bl	8001d8e <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f62:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f64:	2312      	movs	r3, #18
 8001f66:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f70:	2304      	movs	r3, #4
 8001f72:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f74:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f7e:	f004 f9bb 	bl	80062f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f86:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f88:	2312      	movs	r3, #18
 8001f8a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f90:	2300      	movs	r3, #0
 8001f92:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f94:	2304      	movs	r3, #4
 8001f96:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f98:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4806      	ldr	r0, [pc, #24]	; (8001fb8 <HAL_I2C_MspInit+0xb4>)
 8001fa0:	f004 f9aa 	bl	80062f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001fa4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001fa8:	f7ff ff09 	bl	8001dbe <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001fac:	bf00      	nop
 8001fae:	3758      	adds	r7, #88	; 0x58
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40005800 	.word	0x40005800
 8001fb8:	48000400 	.word	0x48000400

08001fbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b096      	sub	sp, #88	; 0x58
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fd4:	f107 030c 	add.w	r3, r7, #12
 8001fd8:	2238      	movs	r2, #56	; 0x38
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f00e f84e 	bl	801007e <memset>
  if(huart->Instance==LPUART1)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a30      	ldr	r2, [pc, #192]	; (80020a8 <HAL_UART_MspInit+0xec>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d125      	bne.n	8002038 <HAL_UART_MspInit+0x7c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001fec:	2320      	movs	r3, #32
 8001fee:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 8001ff0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ff4:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ff6:	f107 030c 	add.w	r3, r7, #12
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f005 fef2 	bl	8007de4 <HAL_RCCEx_PeriphCLKConfig>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002006:	f7ff fead 	bl	8001d64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800200a:	2001      	movs	r0, #1
 800200c:	f7ff feef 	bl	8001dee <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002010:	2004      	movs	r0, #4
 8002012:	f7ff febc 	bl	8001d8e <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = MB_RX_Pin;
 8002016:	2301      	movs	r3, #1
 8002018:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800201a:	2312      	movs	r3, #18
 800201c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800201e:	2301      	movs	r3, #1
 8002020:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002022:	2300      	movs	r3, #0
 8002024:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002026:	2308      	movs	r3, #8
 8002028:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800202a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800202e:	4619      	mov	r1, r3
 8002030:	481e      	ldr	r0, [pc, #120]	; (80020ac <HAL_UART_MspInit+0xf0>)
 8002032:	f004 f961 	bl	80062f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002036:	e033      	b.n	80020a0 <HAL_UART_MspInit+0xe4>
  else if(huart->Instance==USART2)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a1c      	ldr	r2, [pc, #112]	; (80020b0 <HAL_UART_MspInit+0xf4>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d12e      	bne.n	80020a0 <HAL_UART_MspInit+0xe4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002042:	2302      	movs	r3, #2
 8002044:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002046:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800204a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800204c:	f107 030c 	add.w	r3, r7, #12
 8002050:	4618      	mov	r0, r3
 8002052:	f005 fec7 	bl	8007de4 <HAL_RCCEx_PeriphCLKConfig>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <HAL_UART_MspInit+0xa4>
      Error_Handler();
 800205c:	f7ff fe82 	bl	8001d64 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002060:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002064:	f7ff feab 	bl	8001dbe <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002068:	2001      	movs	r0, #1
 800206a:	f7ff fe90 	bl	8001d8e <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 800206e:	230c      	movs	r3, #12
 8002070:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002072:	2302      	movs	r3, #2
 8002074:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207a:	2300      	movs	r3, #0
 800207c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800207e:	2307      	movs	r3, #7
 8002080:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002082:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002086:	4619      	mov	r1, r3
 8002088:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800208c:	f004 f934 	bl	80062f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002090:	2200      	movs	r2, #0
 8002092:	2105      	movs	r1, #5
 8002094:	2025      	movs	r0, #37	; 0x25
 8002096:	f003 fe22 	bl	8005cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800209a:	2025      	movs	r0, #37	; 0x25
 800209c:	f003 fe39 	bl	8005d12 <HAL_NVIC_EnableIRQ>
}
 80020a0:	bf00      	nop
 80020a2:	3758      	adds	r7, #88	; 0x58
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40008000 	.word	0x40008000
 80020ac:	48000800 	.word	0x48000800
 80020b0:	40004400 	.word	0x40004400

080020b4 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  if(huart->Instance==LPUART1)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a0f      	ldr	r2, [pc, #60]	; (8002100 <HAL_UART_MspDeInit+0x4c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d107      	bne.n	80020d6 <HAL_UART_MspDeInit+0x22>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 80020c6:	2001      	movs	r0, #1
 80020c8:	f7ff febb 	bl	8001e42 <LL_APB1_GRP2_DisableClock>

    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_1);
 80020cc:	2102      	movs	r1, #2
 80020ce:	480d      	ldr	r0, [pc, #52]	; (8002104 <HAL_UART_MspDeInit+0x50>)
 80020d0:	f004 fa72 	bl	80065b8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 80020d4:	e010      	b.n	80020f8 <HAL_UART_MspDeInit+0x44>
  else if(huart->Instance==USART2)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a0b      	ldr	r2, [pc, #44]	; (8002108 <HAL_UART_MspDeInit+0x54>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d10b      	bne.n	80020f8 <HAL_UART_MspDeInit+0x44>
    __HAL_RCC_USART2_CLK_DISABLE();
 80020e0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80020e4:	f7ff fe9b 	bl	8001e1e <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 80020e8:	210c      	movs	r1, #12
 80020ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ee:	f004 fa63 	bl	80065b8 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80020f2:	2025      	movs	r0, #37	; 0x25
 80020f4:	f003 fe1b 	bl	8005d2e <HAL_NVIC_DisableIRQ>
}
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40008000 	.word	0x40008000
 8002104:	48000800 	.word	0x48000800
 8002108:	40004400 	.word	0x40004400

0800210c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b090      	sub	sp, #64	; 0x40
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002114:	f107 0308 	add.w	r3, r7, #8
 8002118:	2238      	movs	r2, #56	; 0x38
 800211a:	2100      	movs	r1, #0
 800211c:	4618      	mov	r0, r3
 800211e:	f00d ffae 	bl	801007e <memset>
  if(hrtc->Instance==RTC)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a0e      	ldr	r2, [pc, #56]	; (8002160 <HAL_RTC_MspInit+0x54>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d115      	bne.n	8002158 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800212c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002130:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002132:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002136:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002138:	f107 0308 	add.w	r3, r7, #8
 800213c:	4618      	mov	r0, r3
 800213e:	f005 fe51 	bl	8007de4 <HAL_RCCEx_PeriphCLKConfig>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002148:	f7ff fe0c 	bl	8001d64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800214c:	f7ff fe0f 	bl	8001d6e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002150:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002154:	f7ff fe33 	bl	8001dbe <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002158:	bf00      	nop
 800215a:	3740      	adds	r7, #64	; 0x40
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40002800 	.word	0x40002800

08002164 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b096      	sub	sp, #88	; 0x58
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800217c:	f107 030c 	add.w	r3, r7, #12
 8002180:	2238      	movs	r2, #56	; 0x38
 8002182:	2100      	movs	r1, #0
 8002184:	4618      	mov	r0, r3
 8002186:	f00d ff7a 	bl	801007e <memset>
  if(hspi->Instance==SPI2)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a21      	ldr	r2, [pc, #132]	; (8002214 <HAL_SPI_MspInit+0xb0>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d13b      	bne.n	800220c <HAL_SPI_MspInit+0xa8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 8002194:	2310      	movs	r3, #16
 8002196:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 8002198:	f44f 7300 	mov.w	r3, #512	; 0x200
 800219c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800219e:	f107 030c 	add.w	r3, r7, #12
 80021a2:	4618      	mov	r0, r3
 80021a4:	f005 fe1e 	bl	8007de4 <HAL_RCCEx_PeriphCLKConfig>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80021ae:	f7ff fdd9 	bl	8001d64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80021b2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80021b6:	f7ff fe02 	bl	8001dbe <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ba:	2002      	movs	r0, #2
 80021bc:	f7ff fde7 	bl	8001d8e <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c0:	2001      	movs	r0, #1
 80021c2:	f7ff fde4 	bl	8001d8e <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PA10     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 80021c6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80021ca:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021cc:	2302      	movs	r3, #2
 80021ce:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021d0:	2301      	movs	r3, #1
 80021d2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d4:	2300      	movs	r3, #0
 80021d6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021d8:	2305      	movs	r3, #5
 80021da:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80021e0:	4619      	mov	r1, r3
 80021e2:	480d      	ldr	r0, [pc, #52]	; (8002218 <HAL_SPI_MspInit+0xb4>)
 80021e4:	f004 f888 	bl	80062f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021ec:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ee:	2302      	movs	r3, #2
 80021f0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021f2:	2301      	movs	r3, #1
 80021f4:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f6:	2300      	movs	r3, #0
 80021f8:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021fa:	2305      	movs	r3, #5
 80021fc:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002202:	4619      	mov	r1, r3
 8002204:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002208:	f004 f876 	bl	80062f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800220c:	bf00      	nop
 800220e:	3758      	adds	r7, #88	; 0x58
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40003800 	.word	0x40003800
 8002218:	48000400 	.word	0x48000400

0800221c <LL_APB2_GRP1_EnableClock>:
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002228:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800222a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4313      	orrs	r3, r2
 8002232:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002238:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4013      	ands	r3, r2
 800223e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002240:	68fb      	ldr	r3, [r7, #12]
}
 8002242:	bf00      	nop
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr

0800224c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08c      	sub	sp, #48	; 0x30
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8002258:	2300      	movs	r3, #0
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800225c:	2300      	movs	r3, #0
 800225e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002262:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002266:	f7ff ffd9 	bl	800221c <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800226a:	f107 0208 	add.w	r2, r7, #8
 800226e:	f107 030c 	add.w	r3, r7, #12
 8002272:	4611      	mov	r1, r2
 8002274:	4618      	mov	r0, r3
 8002276:	f005 fbd1 	bl	8007a1c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800227a:	f005 fbbd 	bl	80079f8 <HAL_RCC_GetPCLK2Freq>
 800227e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002282:	4a21      	ldr	r2, [pc, #132]	; (8002308 <HAL_InitTick+0xbc>)
 8002284:	fba2 2303 	umull	r2, r3, r2, r3
 8002288:	0c9b      	lsrs	r3, r3, #18
 800228a:	3b01      	subs	r3, #1
 800228c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800228e:	4b1f      	ldr	r3, [pc, #124]	; (800230c <HAL_InitTick+0xc0>)
 8002290:	4a1f      	ldr	r2, [pc, #124]	; (8002310 <HAL_InitTick+0xc4>)
 8002292:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002294:	4b1d      	ldr	r3, [pc, #116]	; (800230c <HAL_InitTick+0xc0>)
 8002296:	f240 32e7 	movw	r2, #999	; 0x3e7
 800229a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800229c:	4a1b      	ldr	r2, [pc, #108]	; (800230c <HAL_InitTick+0xc0>)
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80022a2:	4b1a      	ldr	r3, [pc, #104]	; (800230c <HAL_InitTick+0xc0>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a8:	4b18      	ldr	r3, [pc, #96]	; (800230c <HAL_InitTick+0xc0>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80022ae:	4817      	ldr	r0, [pc, #92]	; (800230c <HAL_InitTick+0xc0>)
 80022b0:	f007 fafc 	bl	80098ac <HAL_TIM_Base_Init>
 80022b4:	4603      	mov	r3, r0
 80022b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80022ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d11b      	bne.n	80022fa <HAL_InitTick+0xae>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80022c2:	4812      	ldr	r0, [pc, #72]	; (800230c <HAL_InitTick+0xc0>)
 80022c4:	f007 fb52 	bl	800996c <HAL_TIM_Base_Start_IT>
 80022c8:	4603      	mov	r3, r0
 80022ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80022ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d111      	bne.n	80022fa <HAL_InitTick+0xae>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80022d6:	2018      	movs	r0, #24
 80022d8:	f003 fd1b 	bl	8005d12 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b0f      	cmp	r3, #15
 80022e0:	d808      	bhi.n	80022f4 <HAL_InitTick+0xa8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80022e2:	2200      	movs	r2, #0
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	2018      	movs	r0, #24
 80022e8:	f003 fcf9 	bl	8005cde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022ec:	4a09      	ldr	r2, [pc, #36]	; (8002314 <HAL_InitTick+0xc8>)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	e002      	b.n	80022fa <HAL_InitTick+0xae>
      }
      else
      {
        status = HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80022fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3730      	adds	r7, #48	; 0x30
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	431bde83 	.word	0x431bde83
 800230c:	20000b1c 	.word	0x20000b1c
 8002310:	40012c00 	.word	0x40012c00
 8002314:	20000088 	.word	0x20000088

08002318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800231c:	e7fe      	b.n	800231c <NMI_Handler+0x4>

0800231e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800231e:	b480      	push	{r7}
 8002320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002322:	e7fe      	b.n	8002322 <HardFault_Handler+0x4>

08002324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002328:	e7fe      	b.n	8002328 <MemManage_Handler+0x4>

0800232a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800232e:	e7fe      	b.n	800232e <BusFault_Handler+0x4>

08002330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002334:	e7fe      	b.n	8002334 <UsageFault_Handler+0x4>

08002336 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002336:	b480      	push	{r7}
 8002338:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800233a:	bf00      	nop
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr
	...

08002344 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update Interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002348:	4802      	ldr	r0, [pc, #8]	; (8002354 <TIM1_UP_IRQHandler+0x10>)
 800234a:	f007 fb5b 	bl	8009a04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20000b1c 	.word	0x20000b1c

08002358 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800235c:	4802      	ldr	r0, [pc, #8]	; (8002368 <USART2_IRQHandler+0x10>)
 800235e:	f007 ff71 	bl	800a244 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	200009c8 	.word	0x200009c8

0800236c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  return 1;
 8002370:	2301      	movs	r3, #1
}
 8002372:	4618      	mov	r0, r3
 8002374:	46bd      	mov	sp, r7
 8002376:	bc80      	pop	{r7}
 8002378:	4770      	bx	lr

0800237a <_kill>:

int _kill(int pid, int sig)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b082      	sub	sp, #8
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
 8002382:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002384:	f00d fca0 	bl	800fcc8 <__errno>
 8002388:	4603      	mov	r3, r0
 800238a:	2216      	movs	r2, #22
 800238c:	601a      	str	r2, [r3, #0]
  return -1;
 800238e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <_exit>:

void _exit (int status)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b082      	sub	sp, #8
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023a2:	f04f 31ff 	mov.w	r1, #4294967295
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff ffe7 	bl	800237a <_kill>
  while (1) {}    /* Make sure we hang here */
 80023ac:	e7fe      	b.n	80023ac <_exit+0x12>

080023ae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b086      	sub	sp, #24
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	60f8      	str	r0, [r7, #12]
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]
 80023be:	e00a      	b.n	80023d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023c0:	f3af 8000 	nop.w
 80023c4:	4601      	mov	r1, r0
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	1c5a      	adds	r2, r3, #1
 80023ca:	60ba      	str	r2, [r7, #8]
 80023cc:	b2ca      	uxtb	r2, r1
 80023ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	3301      	adds	r3, #1
 80023d4:	617b      	str	r3, [r7, #20]
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	429a      	cmp	r2, r3
 80023dc:	dbf0      	blt.n	80023c0 <_read+0x12>
  }

  return len;
 80023de:	687b      	ldr	r3, [r7, #4]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
 80023f8:	e009      	b.n	800240e <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	1c5a      	adds	r2, r3, #1
 80023fe:	60ba      	str	r2, [r7, #8]
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff f8cc 	bl	80015a0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	3301      	adds	r3, #1
 800240c:	617b      	str	r3, [r7, #20]
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	429a      	cmp	r2, r3
 8002414:	dbf1      	blt.n	80023fa <_write+0x12>
  }
  return len;
 8002416:	687b      	ldr	r3, [r7, #4]
}
 8002418:	4618      	mov	r0, r3
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <_close>:

int _close(int file)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002428:	f04f 33ff 	mov.w	r3, #4294967295
}
 800242c:	4618      	mov	r0, r3
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	bc80      	pop	{r7}
 8002434:	4770      	bx	lr

08002436 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002436:	b480      	push	{r7}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002446:	605a      	str	r2, [r3, #4]
  return 0;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <_isatty>:

int _isatty(int file)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800245c:	2301      	movs	r3, #1
}
 800245e:	4618      	mov	r0, r3
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr

08002468 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr

08002480 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002488:	4a14      	ldr	r2, [pc, #80]	; (80024dc <_sbrk+0x5c>)
 800248a:	4b15      	ldr	r3, [pc, #84]	; (80024e0 <_sbrk+0x60>)
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002494:	4b13      	ldr	r3, [pc, #76]	; (80024e4 <_sbrk+0x64>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d102      	bne.n	80024a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800249c:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <_sbrk+0x64>)
 800249e:	4a12      	ldr	r2, [pc, #72]	; (80024e8 <_sbrk+0x68>)
 80024a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024a2:	4b10      	ldr	r3, [pc, #64]	; (80024e4 <_sbrk+0x64>)
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4413      	add	r3, r2
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d207      	bcs.n	80024c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024b0:	f00d fc0a 	bl	800fcc8 <__errno>
 80024b4:	4603      	mov	r3, r0
 80024b6:	220c      	movs	r2, #12
 80024b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024ba:	f04f 33ff 	mov.w	r3, #4294967295
 80024be:	e009      	b.n	80024d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024c0:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <_sbrk+0x64>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024c6:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <_sbrk+0x64>)
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4413      	add	r3, r2
 80024ce:	4a05      	ldr	r2, [pc, #20]	; (80024e4 <_sbrk+0x64>)
 80024d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024d2:	68fb      	ldr	r3, [r7, #12]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	20010000 	.word	0x20010000
 80024e0:	00000400 	.word	0x00000400
 80024e4:	20000b68 	.word	0x20000b68
 80024e8:	20004d90 	.word	0x20004d90

080024ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location add offset address ------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 80024f0:	4b03      	ldr	r3, [pc, #12]	; (8002500 <SystemInit+0x14>)
 80024f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024f6:	609a      	str	r2, [r3, #8]

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr
 8002500:	e000ed00 	.word	0xe000ed00

08002504 <LL_AHB2_GRP1_EnableClock>:
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800250c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002510:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002512:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4313      	orrs	r3, r2
 800251a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800251c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002520:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4013      	ands	r3, r2
 8002526:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002528:	68fb      	ldr	r3, [r7, #12]
}
 800252a:	bf00      	nop
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr

08002534 <LL_APB1_GRP1_EnableClock>:
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800253c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002540:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002542:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4313      	orrs	r3, r2
 800254a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800254c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002550:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4013      	ands	r3, r2
 8002556:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002558:	68fb      	ldr	r3, [r7, #12]
}
 800255a:	bf00      	nop
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr

08002564 <uartUserDownload>:
/**
 * @brief Download a file via serial port
 **/

void uartUserDownload(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
   uint8_t number[11] = {0};
 800256a:	2300      	movs	r3, #0
 800256c:	60bb      	str	r3, [r7, #8]
 800256e:	f107 030c 	add.w	r3, r7, #12
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	f8c3 2003 	str.w	r2, [r3, #3]
   uint32_t size = 0;
 800257a:	2300      	movs	r3, #0
 800257c:	607b      	str	r3, [r7, #4]
   COM_StatusTypeDef result;

   cboot_error_t cboot_error;

   //Get exclusive access
   osMutexWait(iapMutexHandle, osWaitForever);
 800257e:	4b6b      	ldr	r3, [pc, #428]	; (800272c <uartUserDownload+0x1c8>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f04f 31ff 	mov.w	r1, #4294967295
 8002586:	4618      	mov	r0, r3
 8002588:	f00a fafa 	bl	800cb80 <osMutexWait>

   //Suspend scheduler
   osThreadSuspendAll();
 800258c:	f00a fba4 	bl	800ccd8 <osThreadSuspendAll>

#if 1
   //Debug message
   TRACE_INFO("\r\n");
 8002590:	f7fe fd95 	bl	80010be <osSuspendAllTasks>
 8002594:	4b66      	ldr	r3, [pc, #408]	; (8002730 <uartUserDownload+0x1cc>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	2202      	movs	r2, #2
 800259c:	2101      	movs	r1, #1
 800259e:	4865      	ldr	r0, [pc, #404]	; (8002734 <uartUserDownload+0x1d0>)
 80025a0:	f00d fd00 	bl	800ffa4 <fwrite>
 80025a4:	f7fe fd96 	bl	80010d4 <osResumeAllTasks>
   TRACE_INFO("Starting firmware update...\r\n");
 80025a8:	f7fe fd89 	bl	80010be <osSuspendAllTasks>
 80025ac:	4b60      	ldr	r3, [pc, #384]	; (8002730 <uartUserDownload+0x1cc>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	221d      	movs	r2, #29
 80025b4:	2101      	movs	r1, #1
 80025b6:	4860      	ldr	r0, [pc, #384]	; (8002738 <uartUserDownload+0x1d4>)
 80025b8:	f00d fcf4 	bl	800ffa4 <fwrite>
 80025bc:	f7fe fd8a 	bl	80010d4 <osResumeAllTasks>



   //Get default IAP settings
   iapGetDefaultSettings(&iapSettings);
 80025c0:	485e      	ldr	r0, [pc, #376]	; (800273c <uartUserDownload+0x1d8>)
 80025c2:	f000 fcb5 	bl	8002f30 <iapGetDefaultSettings>
   iapSettings.imageInCrypto.cipherMode                     = IAP_SETTING_CIPHER_MODE;
   iapSettings.imageInCrypto.cipherKey                      = IAP_SETTING_CIPHER_KEY;
   iapSettings.imageInCrypto.cipherKeyLen                   = IAP_SETTING_CIHPER_KEY_LEN;
#else
   //User IAP settings configuration
   iapSettings.imageInCrypto.verifySettings.verifyMethod    = IAP_VERIFY_METHOD;
 80025c6:	4b5d      	ldr	r3, [pc, #372]	; (800273c <uartUserDownload+0x1d8>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	721a      	strb	r2, [r3, #8]
   iapSettings.imageInCrypto.verifySettings.integrityAlgo   = IAP_SETTING_INTEGRITY_ALGO;
 80025cc:	4b5b      	ldr	r3, [pc, #364]	; (800273c <uartUserDownload+0x1d8>)
 80025ce:	4a5c      	ldr	r2, [pc, #368]	; (8002740 <uartUserDownload+0x1dc>)
 80025d0:	60da      	str	r2, [r3, #12]
#endif
   //User IAP primary(internal flash) memory driver
   iapSettings.primaryFlashDriver             = IAP_SETTING_PRM_MEM_DRIVER;
 80025d2:	4b5a      	ldr	r3, [pc, #360]	; (800273c <uartUserDownload+0x1d8>)
 80025d4:	4a5b      	ldr	r2, [pc, #364]	; (8002744 <uartUserDownload+0x1e0>)
 80025d6:	605a      	str	r2, [r3, #4]
   //User IAP secondary(external flash) memory driver
   iapSettings.secondaryFlashDriver           = IAP_SETTING_SRD_MEM_DRIVER;
 80025d8:	4b58      	ldr	r3, [pc, #352]	; (800273c <uartUserDownload+0x1d8>)
 80025da:	4a5b      	ldr	r2, [pc, #364]	; (8002748 <uartUserDownload+0x1e4>)
 80025dc:	611a      	str	r2, [r3, #16]

   //User IAP first secondary memory slot configuration
   iapSettings.addrSlot1                       = IAP_SETTING_SRD_MEM_SLOT_1_ADDR;
 80025de:	4b57      	ldr	r3, [pc, #348]	; (800273c <uartUserDownload+0x1d8>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	839a      	strh	r2, [r3, #28]
   iapSettings.sizeSlot1                       = IAP_SETTING_SRD_MEM_SLOT_1_SIZE;
 80025e4:	4b55      	ldr	r3, [pc, #340]	; (800273c <uartUserDownload+0x1d8>)
 80025e6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80025ea:	621a      	str	r2, [r3, #32]
#if defined(APP_DEMO_3)
   iapSettings.appVersion = 0x00030000;
#elif defined(APP_DEMO_2)
   iapSettings.appVersion = 0x00020000;
#else
   iapSettings.appVersion = 0x00010000;
 80025ec:	4b53      	ldr	r3, [pc, #332]	; (800273c <uartUserDownload+0x1d8>)
 80025ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025f2:	601a      	str	r2, [r3, #0]
#endif

   //Initialize IAP Application context
   cboot_error = iapInit(&iapContext, &iapSettings);
 80025f4:	4951      	ldr	r1, [pc, #324]	; (800273c <uartUserDownload+0x1d8>)
 80025f6:	4855      	ldr	r0, [pc, #340]	; (800274c <uartUserDownload+0x1e8>)
 80025f8:	f000 fcaa 	bl	8002f50 <iapInit>
 80025fc:	4603      	mov	r3, r0
 80025fe:	82fb      	strh	r3, [r7, #22]
   //Is any error?
   if(cboot_error != CBOOT_NO_ERROR)
 8002600:	8afb      	ldrh	r3, [r7, #22]
 8002602:	f240 224b 	movw	r2, #587	; 0x24b
 8002606:	4293      	cmp	r3, r2
 8002608:	d00c      	beq.n	8002624 <uartUserDownload+0xc0>
   {
      //Debug message
      TRACE_ERROR("Failed to initialize IAP!\r\n");
 800260a:	f7fe fd58 	bl	80010be <osSuspendAllTasks>
 800260e:	4b48      	ldr	r3, [pc, #288]	; (8002730 <uartUserDownload+0x1cc>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	221b      	movs	r2, #27
 8002616:	2101      	movs	r1, #1
 8002618:	484d      	ldr	r0, [pc, #308]	; (8002750 <uartUserDownload+0x1ec>)
 800261a:	f00d fcc3 	bl	800ffa4 <fwrite>
 800261e:	f7fe fd59 	bl	80010d4 <osResumeAllTasks>
 8002622:	e078      	b.n	8002716 <uartUserDownload+0x1b2>
   }
   else
#endif
   {
      Serial_PutString((uint8_t *)"Waiting for the file to be sent ... (press 'a' to abort)\r\n");
 8002624:	484b      	ldr	r0, [pc, #300]	; (8002754 <uartUserDownload+0x1f0>)
 8002626:	f7fe ff31 	bl	800148c <Serial_PutString>
      result = Ymodem_Receive( &size );
 800262a:	1d3b      	adds	r3, r7, #4
 800262c:	4618      	mov	r0, r3
 800262e:	f000 fad3 	bl	8002bd8 <Ymodem_Receive>
 8002632:	4603      	mov	r3, r0
 8002634:	757b      	strb	r3, [r7, #21]
      if (result == COM_OK)
 8002636:	7d7b      	ldrb	r3, [r7, #21]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d154      	bne.n	80026e6 <uartUserDownload+0x182>
      {
         Serial_PutString((uint8_t *)"\n\n\r Programming Completed Successfully!\n\r--------------------------------\r\n Name: ");
 800263c:	4846      	ldr	r0, [pc, #280]	; (8002758 <uartUserDownload+0x1f4>)
 800263e:	f7fe ff25 	bl	800148c <Serial_PutString>
         Serial_PutString(aFileName);
 8002642:	4846      	ldr	r0, [pc, #280]	; (800275c <uartUserDownload+0x1f8>)
 8002644:	f7fe ff22 	bl	800148c <Serial_PutString>
         Int2Str(number, size);
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	f107 0308 	add.w	r3, r7, #8
 800264e:	4611      	mov	r1, r2
 8002650:	4618      	mov	r0, r3
 8002652:	f7fe fdd3 	bl	80011fc <Int2Str>
         Serial_PutString((uint8_t *)"\r\n Size: ");
 8002656:	4842      	ldr	r0, [pc, #264]	; (8002760 <uartUserDownload+0x1fc>)
 8002658:	f7fe ff18 	bl	800148c <Serial_PutString>
         Serial_PutString(number);
 800265c:	f107 0308 	add.w	r3, r7, #8
 8002660:	4618      	mov	r0, r3
 8002662:	f7fe ff13 	bl	800148c <Serial_PutString>
         Serial_PutString((uint8_t *)" Bytes\r\n");
 8002666:	483f      	ldr	r0, [pc, #252]	; (8002764 <uartUserDownload+0x200>)
 8002668:	f7fe ff10 	bl	800148c <Serial_PutString>
         Serial_PutString((uint8_t *)"-------------------\r\n");
 800266c:	483e      	ldr	r0, [pc, #248]	; (8002768 <uartUserDownload+0x204>)
 800266e:	f7fe ff0d 	bl	800148c <Serial_PutString>
#if 1
         cboot_error = iapFinalize(&iapContext);
 8002672:	4836      	ldr	r0, [pc, #216]	; (800274c <uartUserDownload+0x1e8>)
 8002674:	f000 fd72 	bl	800315c <iapFinalize>
 8002678:	4603      	mov	r3, r0
 800267a:	82fb      	strh	r3, [r7, #22]
         if(cboot_error != CBOOT_NO_ERROR)
 800267c:	8afb      	ldrh	r3, [r7, #22]
 800267e:	f240 224b 	movw	r2, #587	; 0x24b
 8002682:	4293      	cmp	r3, r2
 8002684:	d00c      	beq.n	80026a0 <uartUserDownload+0x13c>
         {
            //Debug message
            TRACE_ERROR("Failed to finalize firmware update!\r\n");
 8002686:	f7fe fd1a 	bl	80010be <osSuspendAllTasks>
 800268a:	4b29      	ldr	r3, [pc, #164]	; (8002730 <uartUserDownload+0x1cc>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	2225      	movs	r2, #37	; 0x25
 8002692:	2101      	movs	r1, #1
 8002694:	4835      	ldr	r0, [pc, #212]	; (800276c <uartUserDownload+0x208>)
 8002696:	f00d fc85 	bl	800ffa4 <fwrite>
 800269a:	f7fe fd1b 	bl	80010d4 <osResumeAllTasks>
 800269e:	e03a      	b.n	8002716 <uartUserDownload+0x1b2>
         }
         else
         {
        	//DEbug message
        	TRACE_INFO("Update image successfully processed. Rebooting to finalize update...\r\n");
 80026a0:	f7fe fd0d 	bl	80010be <osSuspendAllTasks>
 80026a4:	4b22      	ldr	r3, [pc, #136]	; (8002730 <uartUserDownload+0x1cc>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	2246      	movs	r2, #70	; 0x46
 80026ac:	2101      	movs	r1, #1
 80026ae:	4830      	ldr	r0, [pc, #192]	; (8002770 <uartUserDownload+0x20c>)
 80026b0:	f00d fc78 	bl	800ffa4 <fwrite>
 80026b4:	f7fe fd0e 	bl	80010d4 <osResumeAllTasks>

            cboot_error = iapReboot(&iapContext);
 80026b8:	4824      	ldr	r0, [pc, #144]	; (800274c <uartUserDownload+0x1e8>)
 80026ba:	f000 fdb5 	bl	8003228 <iapReboot>
 80026be:	4603      	mov	r3, r0
 80026c0:	82fb      	strh	r3, [r7, #22]
            if(cboot_error != CBOOT_NO_ERROR)
 80026c2:	8afb      	ldrh	r3, [r7, #22]
 80026c4:	f240 224b 	movw	r2, #587	; 0x24b
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d024      	beq.n	8002716 <uartUserDownload+0x1b2>
            {
               //Debug message
               TRACE_ERROR("Failed to reboot!\r\n");
 80026cc:	f7fe fcf7 	bl	80010be <osSuspendAllTasks>
 80026d0:	4b17      	ldr	r3, [pc, #92]	; (8002730 <uartUserDownload+0x1cc>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	2213      	movs	r2, #19
 80026d8:	2101      	movs	r1, #1
 80026da:	4826      	ldr	r0, [pc, #152]	; (8002774 <uartUserDownload+0x210>)
 80026dc:	f00d fc62 	bl	800ffa4 <fwrite>
 80026e0:	f7fe fcf8 	bl	80010d4 <osResumeAllTasks>
 80026e4:	e017      	b.n	8002716 <uartUserDownload+0x1b2>
            }
         }
#endif
      }
      else if (result == COM_LIMIT)
 80026e6:	7d7b      	ldrb	r3, [r7, #21]
 80026e8:	2b05      	cmp	r3, #5
 80026ea:	d103      	bne.n	80026f4 <uartUserDownload+0x190>
      {
         Serial_PutString((uint8_t *)"\r\n\r\nThe image size is higher than the allowed space memory!\r\n");
 80026ec:	4822      	ldr	r0, [pc, #136]	; (8002778 <uartUserDownload+0x214>)
 80026ee:	f7fe fecd 	bl	800148c <Serial_PutString>
 80026f2:	e010      	b.n	8002716 <uartUserDownload+0x1b2>
      }
      else if (result == COM_DATA)
 80026f4:	7d7b      	ldrb	r3, [r7, #21]
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d103      	bne.n	8002702 <uartUserDownload+0x19e>
      {
         Serial_PutString((uint8_t *)"\r\n\r\nVerification failed!\r\n");
 80026fa:	4820      	ldr	r0, [pc, #128]	; (800277c <uartUserDownload+0x218>)
 80026fc:	f7fe fec6 	bl	800148c <Serial_PutString>
 8002700:	e009      	b.n	8002716 <uartUserDownload+0x1b2>
      }
      else if (result == COM_ABORT)
 8002702:	7d7b      	ldrb	r3, [r7, #21]
 8002704:	2b02      	cmp	r3, #2
 8002706:	d103      	bne.n	8002710 <uartUserDownload+0x1ac>
      {
         Serial_PutString((uint8_t *)"\r\n\nAborted by user.\r\n");
 8002708:	481d      	ldr	r0, [pc, #116]	; (8002780 <uartUserDownload+0x21c>)
 800270a:	f7fe febf 	bl	800148c <Serial_PutString>
 800270e:	e002      	b.n	8002716 <uartUserDownload+0x1b2>
      }
      else
      {
         Serial_PutString((uint8_t *)"\r\nFailed to receive the file!\r\n");
 8002710:	481c      	ldr	r0, [pc, #112]	; (8002784 <uartUserDownload+0x220>)
 8002712:	f7fe febb 	bl	800148c <Serial_PutString>
      }
   }

   //Suspend scheduler
   osThreadResumeAll();
 8002716:	f00a fae6 	bl	800cce6 <osThreadResumeAll>

   //Release exclusive access
   osMutexRelease(iapMutexHandle);
 800271a:	4b04      	ldr	r3, [pc, #16]	; (800272c <uartUserDownload+0x1c8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f00a fa7c 	bl	800cc1c <osMutexRelease>
}
 8002724:	bf00      	nop
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	20000b10 	.word	0x20000b10
 8002730:	20000094 	.word	0x20000094
 8002734:	080122c0 	.word	0x080122c0
 8002738:	080122c4 	.word	0x080122c4
 800273c:	20001404 	.word	0x20001404
 8002740:	08012e80 	.word	0x08012e80
 8002744:	08012ef0 	.word	0x08012ef0
 8002748:	08012f44 	.word	0x08012f44
 800274c:	20000c00 	.word	0x20000c00
 8002750:	080122e4 	.word	0x080122e4
 8002754:	08012300 	.word	0x08012300
 8002758:	0801233c 	.word	0x0801233c
 800275c:	20001428 	.word	0x20001428
 8002760:	08012390 	.word	0x08012390
 8002764:	0801239c 	.word	0x0801239c
 8002768:	080123a8 	.word	0x080123a8
 800276c:	080123c0 	.word	0x080123c0
 8002770:	080123e8 	.word	0x080123e8
 8002774:	08012430 	.word	0x08012430
 8002778:	08012444 	.word	0x08012444
 800277c:	08012484 	.word	0x08012484
 8002780:	080124a0 	.word	0x080124a0
 8002784:	080124b8 	.word	0x080124b8

08002788 <Ymodem_Receive_UserCallback>:
 * @param[in] length Length of the received data
 * @retuen Error code
 **/

cboot_error_t Ymodem_Receive_UserCallback(uint8_t *data, size_t length)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
   cboot_error_t cboot_error;

   //Write received bytes in flash
   cboot_error = iapUpdate(&iapContext, data, length);
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	480d      	ldr	r0, [pc, #52]	; (80027cc <Ymodem_Receive_UserCallback+0x44>)
 8002798:	f000 fc60 	bl	800305c <iapUpdate>
 800279c:	4603      	mov	r3, r0
 800279e:	81fb      	strh	r3, [r7, #14]
   //Is any error?
   if(cboot_error != CBOOT_NO_ERROR)
 80027a0:	89fb      	ldrh	r3, [r7, #14]
 80027a2:	f240 224b 	movw	r2, #587	; 0x24b
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d00b      	beq.n	80027c2 <Ymodem_Receive_UserCallback+0x3a>
   {
      //Debug message
      TRACE_ERROR("Failed to update firmware!\r\n");
 80027aa:	f7fe fc88 	bl	80010be <osSuspendAllTasks>
 80027ae:	4b08      	ldr	r3, [pc, #32]	; (80027d0 <Ymodem_Receive_UserCallback+0x48>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	221c      	movs	r2, #28
 80027b6:	2101      	movs	r1, #1
 80027b8:	4806      	ldr	r0, [pc, #24]	; (80027d4 <Ymodem_Receive_UserCallback+0x4c>)
 80027ba:	f00d fbf3 	bl	800ffa4 <fwrite>
 80027be:	f7fe fc89 	bl	80010d4 <osResumeAllTasks>
   }

   //Status code
   return cboot_error;
 80027c2:	89fb      	ldrh	r3, [r7, #14]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	20000c00 	.word	0x20000c00
 80027d0:	20000094 	.word	0x20000094
 80027d4:	080124d8 	.word	0x080124d8

080027d8 <uartUserInit>:
/**
 * @brief Initialize user uart
 **/

void uartUserInit(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0

   //
   // Setup UART against MX_UART_Init(). May not be needed if we keep MX_UART_Init().
   //

   HAL_UART_MspDeInit(Get_DebugHandle());
 80027de:	f7ff fa87 	bl	8001cf0 <Get_DebugHandle>
 80027e2:	4603      	mov	r3, r0
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff fc65 	bl	80020b4 <HAL_UART_MspDeInit>

   //Enable GPIOA clock
   __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ea:	2001      	movs	r0, #1
 80027ec:	f7ff fe8a 	bl	8002504 <LL_AHB2_GRP1_EnableClock>
   //Enable USART2 clock
   __HAL_RCC_USART2_CLK_ENABLE();
 80027f0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80027f4:	f7ff fe9e 	bl	8002534 <LL_APB1_GRP1_EnableClock>

   //Configure USART2_TX (PA2)
   GPIO_InitStructure.Pin = GPIO_PIN_2;
 80027f8:	2304      	movs	r3, #4
 80027fa:	607b      	str	r3, [r7, #4]
   GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80027fc:	2302      	movs	r3, #2
 80027fe:	60bb      	str	r3, [r7, #8]
   GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002800:	2300      	movs	r3, #0
 8002802:	60fb      	str	r3, [r7, #12]
   GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 8002804:	2300      	movs	r3, #0
 8002806:	613b      	str	r3, [r7, #16]
   GPIO_InitStructure.Alternate = GPIO_AF7_USART2;
 8002808:	2307      	movs	r3, #7
 800280a:	617b      	str	r3, [r7, #20]
   HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800280c:	1d3b      	adds	r3, r7, #4
 800280e:	4619      	mov	r1, r3
 8002810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002814:	f003 fd70 	bl	80062f8 <HAL_GPIO_Init>

   //Configure USART2_RX (PA3)
   GPIO_InitStructure.Pin = GPIO_PIN_3;
 8002818:	2308      	movs	r3, #8
 800281a:	607b      	str	r3, [r7, #4]
   GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800281c:	2302      	movs	r3, #2
 800281e:	60bb      	str	r3, [r7, #8]
   GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002820:	2300      	movs	r3, #0
 8002822:	60fb      	str	r3, [r7, #12]
   GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 8002824:	2300      	movs	r3, #0
 8002826:	613b      	str	r3, [r7, #16]
   GPIO_InitStructure.Alternate = GPIO_AF7_USART2;
 8002828:	2307      	movs	r3, #7
 800282a:	617b      	str	r3, [r7, #20]
   HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800282c:	1d3b      	adds	r3, r7, #4
 800282e:	4619      	mov	r1, r3
 8002830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002834:	f003 fd60 	bl	80062f8 <HAL_GPIO_Init>

   UartHandle.Instance = USART2;
 8002838:	4b0e      	ldr	r3, [pc, #56]	; (8002874 <uartUserInit+0x9c>)
 800283a:	4a0f      	ldr	r2, [pc, #60]	; (8002878 <uartUserInit+0xa0>)
 800283c:	601a      	str	r2, [r3, #0]
   UartHandle.Init.BaudRate = 115200;
 800283e:	4b0d      	ldr	r3, [pc, #52]	; (8002874 <uartUserInit+0x9c>)
 8002840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002844:	605a      	str	r2, [r3, #4]
   UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8002846:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <uartUserInit+0x9c>)
 8002848:	2200      	movs	r2, #0
 800284a:	609a      	str	r2, [r3, #8]
   UartHandle.Init.StopBits = UART_STOPBITS_1;
 800284c:	4b09      	ldr	r3, [pc, #36]	; (8002874 <uartUserInit+0x9c>)
 800284e:	2200      	movs	r2, #0
 8002850:	60da      	str	r2, [r3, #12]
   UartHandle.Init.Parity = UART_PARITY_NONE;
 8002852:	4b08      	ldr	r3, [pc, #32]	; (8002874 <uartUserInit+0x9c>)
 8002854:	2200      	movs	r2, #0
 8002856:	611a      	str	r2, [r3, #16]
   UartHandle.Init.Mode = UART_MODE_TX_RX;
 8002858:	4b06      	ldr	r3, [pc, #24]	; (8002874 <uartUserInit+0x9c>)
 800285a:	220c      	movs	r2, #12
 800285c:	615a      	str	r2, [r3, #20]
   UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800285e:	4b05      	ldr	r3, [pc, #20]	; (8002874 <uartUserInit+0x9c>)
 8002860:	2200      	movs	r2, #0
 8002862:	619a      	str	r2, [r3, #24]
   HAL_UART_Init(&UartHandle);
 8002864:	4803      	ldr	r0, [pc, #12]	; (8002874 <uartUserInit+0x9c>)
 8002866:	f007 faaf 	bl	8009dc8 <HAL_UART_Init>
}
 800286a:	bf00      	nop
 800286c:	3718      	adds	r7, #24
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	20000b6c 	.word	0x20000b6c
 8002878:	40004400 	.word	0x40004400

0800287c <uartUserTaskHandler>:
/**
 * @brief Uart user task routine
 **/

void uartUserTaskHandler(void *param)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
   uint8_t key = 0;
 8002884:	2300      	movs	r3, #0
 8002886:	737b      	strb	r3, [r7, #13]
   uint8_t state = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	73fb      	strb	r3, [r7, #15]
   HAL_StatusTypeDef status;

   //Init uart
   uartUserInit();
 800288c:	f7ff ffa4 	bl	80027d8 <uartUserInit>

   while(1)
   {
      if(state == 0)
 8002890:	7bfb      	ldrb	r3, [r7, #15]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d11a      	bne.n	80028cc <uartUserTaskHandler+0x50>
      {
         Serial_PutString((uint8_t*) "\r\n");
 8002896:	482d      	ldr	r0, [pc, #180]	; (800294c <uartUserTaskHandler+0xd0>)
 8002898:	f7fe fdf8 	bl	800148c <Serial_PutString>
         Serial_PutString((uint8_t*) "=======================\r\n");
 800289c:	482c      	ldr	r0, [pc, #176]	; (8002950 <uartUserTaskHandler+0xd4>)
 800289e:	f7fe fdf5 	bl	800148c <Serial_PutString>
         Serial_PutString((uint8_t*) "= Y-MODEM update menu =\r\n");
 80028a2:	482c      	ldr	r0, [pc, #176]	; (8002954 <uartUserTaskHandler+0xd8>)
 80028a4:	f7fe fdf2 	bl	800148c <Serial_PutString>
         Serial_PutString((uint8_t*) "=======================\r\n");
 80028a8:	4829      	ldr	r0, [pc, #164]	; (8002950 <uartUserTaskHandler+0xd4>)
 80028aa:	f7fe fdef 	bl	800148c <Serial_PutString>
         Serial_PutString((uint8_t*) "Choices:\r\n");
 80028ae:	482a      	ldr	r0, [pc, #168]	; (8002958 <uartUserTaskHandler+0xdc>)
 80028b0:	f7fe fdec 	bl	800148c <Serial_PutString>
         Serial_PutString((uint8_t*) "  1 -> Download update image\r\n");
 80028b4:	4829      	ldr	r0, [pc, #164]	; (800295c <uartUserTaskHandler+0xe0>)
 80028b6:	f7fe fde9 	bl	800148c <Serial_PutString>
         Serial_PutString((uint8_t*) "  2 -> Get current application version\r\n");
 80028ba:	4829      	ldr	r0, [pc, #164]	; (8002960 <uartUserTaskHandler+0xe4>)
 80028bc:	f7fe fde6 	bl	800148c <Serial_PutString>
         Serial_PutString((uint8_t*) "\r\n");
 80028c0:	4822      	ldr	r0, [pc, #136]	; (800294c <uartUserTaskHandler+0xd0>)
 80028c2:	f7fe fde3 	bl	800148c <Serial_PutString>

         //Change state
         state = 1;
 80028c6:	2301      	movs	r3, #1
 80028c8:	73fb      	strb	r3, [r7, #15]
 80028ca:	e03b      	b.n	8002944 <uartUserTaskHandler+0xc8>
      }
      else if(state == 1)
 80028cc:	7bfb      	ldrb	r3, [r7, #15]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d138      	bne.n	8002944 <uartUserTaskHandler+0xc8>
      {
         /* Clean the input path */
         __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 80028d2:	4b24      	ldr	r3, [pc, #144]	; (8002964 <uartUserTaskHandler+0xe8>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	699a      	ldr	r2, [r3, #24]
 80028d8:	4b22      	ldr	r3, [pc, #136]	; (8002964 <uartUserTaskHandler+0xe8>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f042 0208 	orr.w	r2, r2, #8
 80028e0:	619a      	str	r2, [r3, #24]
 80028e2:	4b20      	ldr	r3, [pc, #128]	; (8002964 <uartUserTaskHandler+0xe8>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	699a      	ldr	r2, [r3, #24]
 80028e8:	4b1e      	ldr	r3, [pc, #120]	; (8002964 <uartUserTaskHandler+0xe8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f042 0210 	orr.w	r2, r2, #16
 80028f0:	619a      	str	r2, [r3, #24]

         /* Receive key */
         status = HAL_UART_Receive(&UartHandle, &key, 1, RX_TIMEOUT);
 80028f2:	f107 010d 	add.w	r1, r7, #13
 80028f6:	f04f 33ff 	mov.w	r3, #4294967295
 80028fa:	2201      	movs	r2, #1
 80028fc:	4819      	ldr	r0, [pc, #100]	; (8002964 <uartUserTaskHandler+0xe8>)
 80028fe:	f007 fb91 	bl	800a024 <HAL_UART_Receive>
 8002902:	4603      	mov	r3, r0
 8002904:	73bb      	strb	r3, [r7, #14]

         if(status == HAL_OK)
 8002906:	7bbb      	ldrb	r3, [r7, #14]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d11b      	bne.n	8002944 <uartUserTaskHandler+0xc8>
         {
            switch(key)
 800290c:	7b7b      	ldrb	r3, [r7, #13]
 800290e:	2b31      	cmp	r3, #49	; 0x31
 8002910:	d002      	beq.n	8002918 <uartUserTaskHandler+0x9c>
 8002912:	2b32      	cmp	r3, #50	; 0x32
 8002914:	d006      	beq.n	8002924 <uartUserTaskHandler+0xa8>
 8002916:	e009      	b.n	800292c <uartUserTaskHandler+0xb0>
            {
               case '1':
                  Serial_PutString((uint8_t*) "Downloading update image...\r\n");
 8002918:	4813      	ldr	r0, [pc, #76]	; (8002968 <uartUserTaskHandler+0xec>)
 800291a:	f7fe fdb7 	bl	800148c <Serial_PutString>
                  //Start downloading file
                  uartUserDownload();
 800291e:	f7ff fe21 	bl	8002564 <uartUserDownload>
                  break;
 8002922:	e00a      	b.n	800293a <uartUserTaskHandler+0xbe>

               case '2':
#if defined(APP_DEMO_V1)
                  Serial_PutString((uint8_t*) "v1.0.0\r\n");
 8002924:	4811      	ldr	r0, [pc, #68]	; (800296c <uartUserTaskHandler+0xf0>)
 8002926:	f7fe fdb1 	bl	800148c <Serial_PutString>
#elif defined(APP_DEMO_V2)
                  Serial_PutString((uint8_t*) "v2.0.0\r\n");
#else
                  Serial_PutString((uint8_t*) "v3.0.0\r\n");
#endif
                  break;
 800292a:	e006      	b.n	800293a <uartUserTaskHandler+0xbe>

               default:
                  Serial_PutString((uint8_t*) "Unknown number!\r\n");
 800292c:	4810      	ldr	r0, [pc, #64]	; (8002970 <uartUserTaskHandler+0xf4>)
 800292e:	f7fe fdad 	bl	800148c <Serial_PutString>
                  Serial_PutString((uint8_t*) "Number should be 1 or 2!\r\n");
 8002932:	4810      	ldr	r0, [pc, #64]	; (8002974 <uartUserTaskHandler+0xf8>)
 8002934:	f7fe fdaa 	bl	800148c <Serial_PutString>
                  break;
 8002938:	bf00      	nop
            }
            Serial_PutString((uint8_t*) "\r\n");
 800293a:	4804      	ldr	r0, [pc, #16]	; (800294c <uartUserTaskHandler+0xd0>)
 800293c:	f7fe fda6 	bl	800148c <Serial_PutString>

            //Change state
            state = 0;
 8002940:	2300      	movs	r3, #0
 8002942:	73fb      	strb	r3, [r7, #15]
      {
         //For sanity
      }

      //Os delay
      osDelayTask(200);
 8002944:	20c8      	movs	r0, #200	; 0xc8
 8002946:	f7fe fbaf 	bl	80010a8 <osDelayTask>
      if(state == 0)
 800294a:	e7a1      	b.n	8002890 <uartUserTaskHandler+0x14>
 800294c:	080122c0 	.word	0x080122c0
 8002950:	080124f8 	.word	0x080124f8
 8002954:	08012514 	.word	0x08012514
 8002958:	08012530 	.word	0x08012530
 800295c:	0801253c 	.word	0x0801253c
 8002960:	0801255c 	.word	0x0801255c
 8002964:	20000b6c 	.word	0x20000b6c
 8002968:	08012588 	.word	0x08012588
 800296c:	080125a8 	.word	0x080125a8
 8002970:	080125b4 	.word	0x080125b4
 8002974:	080125c8 	.word	0x080125c8

08002978 <ReceivePacket>:
 * @return HAL_OK: normally return
 *         HAL_BUSY: abort by user
 **/

static HAL_StatusTypeDef ReceivePacket(uint8_t *p_data, uint32_t *p_length, uint32_t timeout)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b088      	sub	sp, #32
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
  uint32_t crc;
  uint32_t packet_size = 0;
 8002984:	2300      	movs	r3, #0
 8002986:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef status;
  uint8_t char1;

  *p_length = 0;
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
  status = HAL_UART_Receive(&UartHandle, &char1, 1, timeout);
 800298e:	f107 0113 	add.w	r1, r7, #19
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	485d      	ldr	r0, [pc, #372]	; (8002b0c <ReceivePacket+0x194>)
 8002998:	f007 fb44 	bl	800a024 <HAL_UART_Receive>
 800299c:	4603      	mov	r3, r0
 800299e:	76fb      	strb	r3, [r7, #27]

  if (status == HAL_OK)
 80029a0:	7efb      	ldrb	r3, [r7, #27]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f040 80aa 	bne.w	8002afc <ReceivePacket+0x184>
  {
    switch (char1)
 80029a8:	7cfb      	ldrb	r3, [r7, #19]
 80029aa:	2b61      	cmp	r3, #97	; 0x61
 80029ac:	d059      	beq.n	8002a62 <ReceivePacket+0xea>
 80029ae:	2b61      	cmp	r3, #97	; 0x61
 80029b0:	dc5a      	bgt.n	8002a68 <ReceivePacket+0xf0>
 80029b2:	2b18      	cmp	r3, #24
 80029b4:	dc38      	bgt.n	8002a28 <ReceivePacket+0xb0>
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	dd56      	ble.n	8002a68 <ReceivePacket+0xf0>
 80029ba:	3b01      	subs	r3, #1
 80029bc:	2b17      	cmp	r3, #23
 80029be:	d853      	bhi.n	8002a68 <ReceivePacket+0xf0>
 80029c0:	a201      	add	r2, pc, #4	; (adr r2, 80029c8 <ReceivePacket+0x50>)
 80029c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c6:	bf00      	nop
 80029c8:	08002a2f 	.word	0x08002a2f
 80029cc:	08002a35 	.word	0x08002a35
 80029d0:	08002a69 	.word	0x08002a69
 80029d4:	08002a6f 	.word	0x08002a6f
 80029d8:	08002a69 	.word	0x08002a69
 80029dc:	08002a69 	.word	0x08002a69
 80029e0:	08002a69 	.word	0x08002a69
 80029e4:	08002a69 	.word	0x08002a69
 80029e8:	08002a69 	.word	0x08002a69
 80029ec:	08002a69 	.word	0x08002a69
 80029f0:	08002a69 	.word	0x08002a69
 80029f4:	08002a69 	.word	0x08002a69
 80029f8:	08002a69 	.word	0x08002a69
 80029fc:	08002a69 	.word	0x08002a69
 8002a00:	08002a69 	.word	0x08002a69
 8002a04:	08002a69 	.word	0x08002a69
 8002a08:	08002a69 	.word	0x08002a69
 8002a0c:	08002a69 	.word	0x08002a69
 8002a10:	08002a69 	.word	0x08002a69
 8002a14:	08002a69 	.word	0x08002a69
 8002a18:	08002a69 	.word	0x08002a69
 8002a1c:	08002a69 	.word	0x08002a69
 8002a20:	08002a69 	.word	0x08002a69
 8002a24:	08002a3d 	.word	0x08002a3d
 8002a28:	2b41      	cmp	r3, #65	; 0x41
 8002a2a:	d01a      	beq.n	8002a62 <ReceivePacket+0xea>
 8002a2c:	e01c      	b.n	8002a68 <ReceivePacket+0xf0>
    {
      case SOH:
        packet_size = PACKET_SIZE;
 8002a2e:	2380      	movs	r3, #128	; 0x80
 8002a30:	61fb      	str	r3, [r7, #28]
        break;
 8002a32:	e01d      	b.n	8002a70 <ReceivePacket+0xf8>
      case STX:
        packet_size = PACKET_1K_SIZE;
 8002a34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a38:	61fb      	str	r3, [r7, #28]
        break;
 8002a3a:	e019      	b.n	8002a70 <ReceivePacket+0xf8>
      case EOT:
        break;
      case CA:
        if ((HAL_UART_Receive(&UartHandle, &char1, 1, timeout) == HAL_OK) && (char1 == CA))
 8002a3c:	f107 0113 	add.w	r1, r7, #19
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	4831      	ldr	r0, [pc, #196]	; (8002b0c <ReceivePacket+0x194>)
 8002a46:	f007 faed 	bl	800a024 <HAL_UART_Receive>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d105      	bne.n	8002a5c <ReceivePacket+0xe4>
 8002a50:	7cfb      	ldrb	r3, [r7, #19]
 8002a52:	2b18      	cmp	r3, #24
 8002a54:	d102      	bne.n	8002a5c <ReceivePacket+0xe4>
        {
          packet_size = 2;
 8002a56:	2302      	movs	r3, #2
 8002a58:	61fb      	str	r3, [r7, #28]
        }
        else
        {
          status = HAL_ERROR;
        }
        break;
 8002a5a:	e009      	b.n	8002a70 <ReceivePacket+0xf8>
          status = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	76fb      	strb	r3, [r7, #27]
        break;
 8002a60:	e006      	b.n	8002a70 <ReceivePacket+0xf8>
      case ABORT1:
      case ABORT2:
        status = HAL_BUSY;
 8002a62:	2302      	movs	r3, #2
 8002a64:	76fb      	strb	r3, [r7, #27]
        break;
 8002a66:	e003      	b.n	8002a70 <ReceivePacket+0xf8>
      default:
        status = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	76fb      	strb	r3, [r7, #27]
        break;
 8002a6c:	e000      	b.n	8002a70 <ReceivePacket+0xf8>
        break;
 8002a6e:	bf00      	nop
    }
    *p_data = char1;
 8002a70:	7cfa      	ldrb	r2, [r7, #19]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	701a      	strb	r2, [r3, #0]

    if (packet_size >= PACKET_SIZE )
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	2b7f      	cmp	r3, #127	; 0x7f
 8002a7a:	d93f      	bls.n	8002afc <ReceivePacket+0x184>
    {
      status = HAL_UART_Receive(&UartHandle, &p_data[PACKET_NUMBER_INDEX], packet_size + PACKET_OVERHEAD_SIZE, timeout);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	1c99      	adds	r1, r3, #2
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	3304      	adds	r3, #4
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4820      	ldr	r0, [pc, #128]	; (8002b0c <ReceivePacket+0x194>)
 8002a8c:	f007 faca 	bl	800a024 <HAL_UART_Receive>
 8002a90:	4603      	mov	r3, r0
 8002a92:	76fb      	strb	r3, [r7, #27]

      /* Simple packet sanity check */
      if (status == HAL_OK )
 8002a94:	7efb      	ldrb	r3, [r7, #27]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d12e      	bne.n	8002af8 <ReceivePacket+0x180>
      {
        if (p_data[PACKET_NUMBER_INDEX] != ((p_data[PACKET_CNUMBER_INDEX]) ^ NEGATIVE_BYTE))
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	3302      	adds	r3, #2
 8002a9e:	781a      	ldrb	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	3303      	adds	r3, #3
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d004      	beq.n	8002ab8 <ReceivePacket+0x140>
        {
          packet_size = 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61fb      	str	r3, [r7, #28]
          status = HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	76fb      	strb	r3, [r7, #27]
 8002ab6:	e021      	b.n	8002afc <ReceivePacket+0x184>
        }
        else
        {
          /* Check packet CRC */
          crc = p_data[ packet_size + PACKET_DATA_INDEX ] << 8;
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	3304      	adds	r3, #4
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	4413      	add	r3, r2
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	021b      	lsls	r3, r3, #8
 8002ac4:	617b      	str	r3, [r7, #20]
          crc += p_data[ packet_size + PACKET_DATA_INDEX + 1 ];
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	3305      	adds	r3, #5
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	4413      	add	r3, r2
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	617b      	str	r3, [r7, #20]
          if (Cal_CRC16(&p_data[PACKET_DATA_INDEX], packet_size) != crc )
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	3304      	adds	r3, #4
 8002adc:	69f9      	ldr	r1, [r7, #28]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 f849 	bl	8002b76 <Cal_CRC16>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d006      	beq.n	8002afc <ReceivePacket+0x184>
          {
            packet_size = 0;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61fb      	str	r3, [r7, #28]
            status = HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	76fb      	strb	r3, [r7, #27]
 8002af6:	e001      	b.n	8002afc <ReceivePacket+0x184>
          }
        }
      }
      else
      {
        packet_size = 0;
 8002af8:	2300      	movs	r3, #0
 8002afa:	61fb      	str	r3, [r7, #28]
      }
    }
  }
  *p_length = packet_size;
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	69fa      	ldr	r2, [r7, #28]
 8002b00:	601a      	str	r2, [r3, #0]
  return status;
 8002b02:	7efb      	ldrb	r3, [r7, #27]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3720      	adds	r7, #32
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	20000b6c 	.word	0x20000b6c

08002b10 <UpdateCRC16>:
 * @param[in] input byte
 * @return None
 **/

uint16_t UpdateCRC16(uint16_t crc_in, uint8_t byte)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	460a      	mov	r2, r1
 8002b1a:	80fb      	strh	r3, [r7, #6]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	717b      	strb	r3, [r7, #5]
  uint32_t crc = crc_in;
 8002b20:	88fb      	ldrh	r3, [r7, #6]
 8002b22:	60fb      	str	r3, [r7, #12]
  uint32_t in = byte | 0x100;
 8002b24:	797b      	ldrb	r3, [r7, #5]
 8002b26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b2a:	60bb      	str	r3, [r7, #8]

  do
  {
    crc <<= 1;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	60fb      	str	r3, [r7, #12]
    in <<= 1;
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	60bb      	str	r3, [r7, #8]
    if(in & 0x100)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d002      	beq.n	8002b48 <UpdateCRC16+0x38>
      ++crc;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	3301      	adds	r3, #1
 8002b46:	60fb      	str	r3, [r7, #12]
    if(crc & 0x10000)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d005      	beq.n	8002b5e <UpdateCRC16+0x4e>
      crc ^= 0x1021;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8002b58:	f083 0301 	eor.w	r3, r3, #1
 8002b5c:	60fb      	str	r3, [r7, #12]
  }

  while(!(in & 0x10000));
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0e1      	beq.n	8002b2c <UpdateCRC16+0x1c>

  return crc & 0xffffu;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	b29b      	uxth	r3, r3
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr

08002b76 <Cal_CRC16>:
 * @param[in] length
 * @return None
 **/

uint16_t Cal_CRC16(const uint8_t* p_data, uint32_t size)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b084      	sub	sp, #16
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
 8002b7e:	6039      	str	r1, [r7, #0]
  uint32_t crc = 0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	60fb      	str	r3, [r7, #12]
  const uint8_t* dataEnd = p_data+size;
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	4413      	add	r3, r2
 8002b8a:	60bb      	str	r3, [r7, #8]

  while(p_data < dataEnd)
 8002b8c:	e00a      	b.n	8002ba4 <Cal_CRC16+0x2e>
    crc = UpdateCRC16(crc, *p_data++);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	b298      	uxth	r0, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	1c5a      	adds	r2, r3, #1
 8002b96:	607a      	str	r2, [r7, #4]
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	f7ff ffb8 	bl	8002b10 <UpdateCRC16>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	60fb      	str	r3, [r7, #12]
  while(p_data < dataEnd)
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d3f0      	bcc.n	8002b8e <Cal_CRC16+0x18>

  crc = UpdateCRC16(crc, 0);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7ff ffac 	bl	8002b10 <UpdateCRC16>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	60fb      	str	r3, [r7, #12]
  crc = UpdateCRC16(crc, 0);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff ffa4 	bl	8002b10 <UpdateCRC16>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	60fb      	str	r3, [r7, #12]

  return crc&0xffffu;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	b29b      	uxth	r3, r3
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <Ymodem_Receive>:
 * @param[out] p_size The size of the file.
 * @return COM_StatusTypeDef result of reception/programming
 **/

COM_StatusTypeDef Ymodem_Receive ( uint32_t *p_size )
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b092      	sub	sp, #72	; 0x48
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t i, packet_length, session_done = 0, file_done, errors = 0, session_begin = 0, packets_received = 0, bytes_received = 0;
 8002be0:	2300      	movs	r3, #0
 8002be2:	643b      	str	r3, [r7, #64]	; 0x40
 8002be4:	2300      	movs	r3, #0
 8002be6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002be8:	2300      	movs	r3, #0
 8002bea:	637b      	str	r3, [r7, #52]	; 0x34
 8002bec:	2300      	movs	r3, #0
 8002bee:	633b      	str	r3, [r7, #48]	; 0x30
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t filesize;
  uint8_t *file_ptr, *data_ptr;
  uint8_t file_size[FILE_SIZE_LENGTH];
  COM_StatusTypeDef result = COM_OK;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  while ((session_done == 0) && (result == COM_OK))
 8002bfa:	e0ea      	b.n	8002dd2 <Ymodem_Receive+0x1fa>
  {
    packets_received = 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	633b      	str	r3, [r7, #48]	; 0x30
    file_done = 0;
 8002c00:	2300      	movs	r3, #0
 8002c02:	63fb      	str	r3, [r7, #60]	; 0x3c
    while ((file_done == 0) && (result == COM_OK))
 8002c04:	e0dd      	b.n	8002dc2 <Ymodem_Receive+0x1ea>
    {
      switch (ReceivePacket(aPacketData, &packet_length, DOWNLOAD_TIMEOUT))
 8002c06:	f107 031c 	add.w	r3, r7, #28
 8002c0a:	f643 2298 	movw	r2, #15000	; 0x3a98
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4877      	ldr	r0, [pc, #476]	; (8002df0 <Ymodem_Receive+0x218>)
 8002c12:	f7ff feb1 	bl	8002978 <ReceivePacket>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <Ymodem_Receive+0x4c>
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	f000 80b2 	beq.w	8002d86 <Ymodem_Receive+0x1ae>
 8002c22:	e0ba      	b.n	8002d9a <Ymodem_Receive+0x1c2>
      {
        case HAL_OK:
          errors = 0;
 8002c24:	2300      	movs	r3, #0
 8002c26:	63bb      	str	r3, [r7, #56]	; 0x38
          switch (packet_length)
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d008      	beq.n	8002c40 <Ymodem_Receive+0x68>
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d10c      	bne.n	8002c4c <Ymodem_Receive+0x74>
          {
            case 2:
              /* Abort by sender */
              Serial_PutByte(ACK);
 8002c32:	2006      	movs	r0, #6
 8002c34:	f7fe fc46 	bl	80014c4 <Serial_PutByte>
              result = COM_ABORT;
 8002c38:	2302      	movs	r3, #2
 8002c3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              break;
 8002c3e:	e0a1      	b.n	8002d84 <Ymodem_Receive+0x1ac>
            case 0:
              /* End of transmission */
              Serial_PutByte(ACK);
 8002c40:	2006      	movs	r0, #6
 8002c42:	f7fe fc3f 	bl	80014c4 <Serial_PutByte>
              file_done = 1;
 8002c46:	2301      	movs	r3, #1
 8002c48:	63fb      	str	r3, [r7, #60]	; 0x3c
              break;
 8002c4a:	e09b      	b.n	8002d84 <Ymodem_Receive+0x1ac>
            default:
              /* Normal packet */
              if (aPacketData[PACKET_NUMBER_INDEX] != (0xFFU & packets_received))
 8002c4c:	4b68      	ldr	r3, [pc, #416]	; (8002df0 <Ymodem_Receive+0x218>)
 8002c4e:	789b      	ldrb	r3, [r3, #2]
 8002c50:	461a      	mov	r2, r3
 8002c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d003      	beq.n	8002c62 <Ymodem_Receive+0x8a>
              {
                Serial_PutByte(NAK);
 8002c5a:	2015      	movs	r0, #21
 8002c5c:	f7fe fc32 	bl	80014c4 <Serial_PutByte>
                  }
                }
                packets_received ++;
                session_begin = 1;
              }
              break;
 8002c60:	e08f      	b.n	8002d82 <Ymodem_Receive+0x1aa>
                if (packets_received == 0)
 8002c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d158      	bne.n	8002d1a <Ymodem_Receive+0x142>
                  if (aPacketData[PACKET_DATA_INDEX] != 0)
 8002c68:	4b61      	ldr	r3, [pc, #388]	; (8002df0 <Ymodem_Receive+0x218>)
 8002c6a:	791b      	ldrb	r3, [r3, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d04c      	beq.n	8002d0a <Ymodem_Receive+0x132>
                    i = 0;
 8002c70:	2300      	movs	r3, #0
 8002c72:	647b      	str	r3, [r7, #68]	; 0x44
                    file_ptr = aPacketData + PACKET_DATA_INDEX;
 8002c74:	4b5f      	ldr	r3, [pc, #380]	; (8002df4 <Ymodem_Receive+0x21c>)
 8002c76:	62bb      	str	r3, [r7, #40]	; 0x28
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 8002c78:	e008      	b.n	8002c8c <Ymodem_Receive+0xb4>
                      aFileName[i++] = *file_ptr++;
 8002c7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c7c:	1c53      	adds	r3, r2, #1
 8002c7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c82:	1c59      	adds	r1, r3, #1
 8002c84:	6479      	str	r1, [r7, #68]	; 0x44
 8002c86:	7811      	ldrb	r1, [r2, #0]
 8002c88:	4a5b      	ldr	r2, [pc, #364]	; (8002df8 <Ymodem_Receive+0x220>)
 8002c8a:	54d1      	strb	r1, [r2, r3]
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 8002c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d002      	beq.n	8002c9a <Ymodem_Receive+0xc2>
 8002c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c96:	2b3f      	cmp	r3, #63	; 0x3f
 8002c98:	d9ef      	bls.n	8002c7a <Ymodem_Receive+0xa2>
                    aFileName[i++] = '\0';
 8002c9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c9c:	1c5a      	adds	r2, r3, #1
 8002c9e:	647a      	str	r2, [r7, #68]	; 0x44
 8002ca0:	4a55      	ldr	r2, [pc, #340]	; (8002df8 <Ymodem_Receive+0x220>)
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	54d1      	strb	r1, [r2, r3]
                    i = 0;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	647b      	str	r3, [r7, #68]	; 0x44
                    file_ptr ++;
 8002caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cac:	3301      	adds	r3, #1
 8002cae:	62bb      	str	r3, [r7, #40]	; 0x28
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 8002cb0:	e00a      	b.n	8002cc8 <Ymodem_Receive+0xf0>
                      file_size[i++] = *file_ptr++;
 8002cb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cb4:	1c53      	adds	r3, r2, #1
 8002cb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cba:	1c59      	adds	r1, r3, #1
 8002cbc:	6479      	str	r1, [r7, #68]	; 0x44
 8002cbe:	7812      	ldrb	r2, [r2, #0]
 8002cc0:	3348      	adds	r3, #72	; 0x48
 8002cc2:	443b      	add	r3, r7
 8002cc4:	f803 2c40 	strb.w	r2, [r3, #-64]
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 8002cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b20      	cmp	r3, #32
 8002cce:	d002      	beq.n	8002cd6 <Ymodem_Receive+0xfe>
 8002cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cd2:	2b0f      	cmp	r3, #15
 8002cd4:	d9ed      	bls.n	8002cb2 <Ymodem_Receive+0xda>
                    file_size[i++] = '\0';
 8002cd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cd8:	1c5a      	adds	r2, r3, #1
 8002cda:	647a      	str	r2, [r7, #68]	; 0x44
 8002cdc:	3348      	adds	r3, #72	; 0x48
 8002cde:	443b      	add	r3, r7
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f803 2c40 	strb.w	r2, [r3, #-64]
                    Str2Int(file_size, &filesize);
 8002ce6:	f107 0218 	add.w	r2, r7, #24
 8002cea:	f107 0308 	add.w	r3, r7, #8
 8002cee:	4611      	mov	r1, r2
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7fe fad7 	bl	80012a4 <Str2Int>
                    *p_size = filesize;
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	601a      	str	r2, [r3, #0]
                    Serial_PutByte(ACK);
 8002cfc:	2006      	movs	r0, #6
 8002cfe:	f7fe fbe1 	bl	80014c4 <Serial_PutByte>
                    Serial_PutByte(CRC16);
 8002d02:	2043      	movs	r0, #67	; 0x43
 8002d04:	f7fe fbde 	bl	80014c4 <Serial_PutByte>
 8002d08:	e036      	b.n	8002d78 <Ymodem_Receive+0x1a0>
                    Serial_PutByte(ACK);
 8002d0a:	2006      	movs	r0, #6
 8002d0c:	f7fe fbda 	bl	80014c4 <Serial_PutByte>
                    file_done = 1;
 8002d10:	2301      	movs	r3, #1
 8002d12:	63fb      	str	r3, [r7, #60]	; 0x3c
                    session_done = 1;
 8002d14:	2301      	movs	r3, #1
 8002d16:	643b      	str	r3, [r7, #64]	; 0x40
                    break;
 8002d18:	e034      	b.n	8002d84 <Ymodem_Receive+0x1ac>
                   data_ptr = (uint8_t*)&aPacketData[PACKET_DATA_INDEX];
 8002d1a:	4b36      	ldr	r3, [pc, #216]	; (8002df4 <Ymodem_Receive+0x21c>)
 8002d1c:	623b      	str	r3, [r7, #32]
                   if((filesize - bytes_received) < 1024)
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d28:	d20a      	bcs.n	8002d40 <Ymodem_Receive+0x168>
                      while(data_ptr[packet_length-1] == '\x1A')
 8002d2a:	e002      	b.n	8002d32 <Ymodem_Receive+0x15a>
                         packet_length--;
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	61fb      	str	r3, [r7, #28]
                      while(data_ptr[packet_length-1] == '\x1A')
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	3b01      	subs	r3, #1
 8002d36:	6a3a      	ldr	r2, [r7, #32]
 8002d38:	4413      	add	r3, r2
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b1a      	cmp	r3, #26
 8002d3e:	d0f5      	beq.n	8002d2c <Ymodem_Receive+0x154>
                   bytes_received += packet_length;
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d44:	4413      	add	r3, r2
 8002d46:	62fb      	str	r3, [r7, #44]	; 0x2c
                   if(Ymodem_Receive_UserCallback(data_ptr, packet_length) == CBOOT_NO_ERROR)
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	6a38      	ldr	r0, [r7, #32]
 8002d4e:	f7ff fd1b 	bl	8002788 <Ymodem_Receive_UserCallback>
 8002d52:	4603      	mov	r3, r0
 8002d54:	461a      	mov	r2, r3
 8002d56:	f240 234b 	movw	r3, #587	; 0x24b
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d103      	bne.n	8002d66 <Ymodem_Receive+0x18e>
                      Serial_PutByte(ACK);
 8002d5e:	2006      	movs	r0, #6
 8002d60:	f7fe fbb0 	bl	80014c4 <Serial_PutByte>
 8002d64:	e008      	b.n	8002d78 <Ymodem_Receive+0x1a0>
                    Serial_PutByte(CA);
 8002d66:	2018      	movs	r0, #24
 8002d68:	f7fe fbac 	bl	80014c4 <Serial_PutByte>
                    Serial_PutByte(CA);
 8002d6c:	2018      	movs	r0, #24
 8002d6e:	f7fe fba9 	bl	80014c4 <Serial_PutByte>
                    result = COM_DATA;
 8002d72:	2304      	movs	r3, #4
 8002d74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                packets_received ++;
 8002d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	633b      	str	r3, [r7, #48]	; 0x30
                session_begin = 1;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8002d82:	bf00      	nop
          }
          break;
 8002d84:	e01d      	b.n	8002dc2 <Ymodem_Receive+0x1ea>
        case HAL_BUSY: /* Abort actually */
          Serial_PutByte(CA);
 8002d86:	2018      	movs	r0, #24
 8002d88:	f7fe fb9c 	bl	80014c4 <Serial_PutByte>
          Serial_PutByte(CA);
 8002d8c:	2018      	movs	r0, #24
 8002d8e:	f7fe fb99 	bl	80014c4 <Serial_PutByte>
          result = COM_ABORT;
 8002d92:	2302      	movs	r3, #2
 8002d94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 8002d98:	e013      	b.n	8002dc2 <Ymodem_Receive+0x1ea>
        default:
          if (session_begin > 0)
 8002d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d002      	beq.n	8002da6 <Ymodem_Receive+0x1ce>
          {
            errors ++;
 8002da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da2:	3301      	adds	r3, #1
 8002da4:	63bb      	str	r3, [r7, #56]	; 0x38
          }
          if (errors > MAX_ERRORS)
 8002da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da8:	2b05      	cmp	r3, #5
 8002daa:	d906      	bls.n	8002dba <Ymodem_Receive+0x1e2>
          {
            /* Abort communication */
            Serial_PutByte(CA);
 8002dac:	2018      	movs	r0, #24
 8002dae:	f7fe fb89 	bl	80014c4 <Serial_PutByte>
            Serial_PutByte(CA);
 8002db2:	2018      	movs	r0, #24
 8002db4:	f7fe fb86 	bl	80014c4 <Serial_PutByte>
 8002db8:	e002      	b.n	8002dc0 <Ymodem_Receive+0x1e8>
          }
          else
          {
            Serial_PutByte(CRC16); /* Ask for a packet */
 8002dba:	2043      	movs	r0, #67	; 0x43
 8002dbc:	f7fe fb82 	bl	80014c4 <Serial_PutByte>
          }
          break;
 8002dc0:	bf00      	nop
    while ((file_done == 0) && (result == COM_OK))
 8002dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d104      	bne.n	8002dd2 <Ymodem_Receive+0x1fa>
 8002dc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f43f af1a 	beq.w	8002c06 <Ymodem_Receive+0x2e>
  while ((session_done == 0) && (result == COM_OK))
 8002dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d104      	bne.n	8002de2 <Ymodem_Receive+0x20a>
 8002dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f43f af0d 	beq.w	8002bfc <Ymodem_Receive+0x24>
      }
    }
  }
  return result;
 8002de2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3748      	adds	r7, #72	; 0x48
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	20001468 	.word	0x20001468
 8002df4:	2000146c 	.word	0x2000146c
 8002df8:	20001428 	.word	0x20001428

08002dfc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002dfc:	480d      	ldr	r0, [pc, #52]	; (8002e34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002dfe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e00:	f7ff fb74 	bl	80024ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e04:	480c      	ldr	r0, [pc, #48]	; (8002e38 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e06:	490d      	ldr	r1, [pc, #52]	; (8002e3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e08:	4a0d      	ldr	r2, [pc, #52]	; (8002e40 <LoopForever+0xe>)
  movs r3, #0
 8002e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e0c:	e002      	b.n	8002e14 <LoopCopyDataInit>

08002e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e12:	3304      	adds	r3, #4

08002e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e18:	d3f9      	bcc.n	8002e0e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e1a:	4a0a      	ldr	r2, [pc, #40]	; (8002e44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e1c:	4c0a      	ldr	r4, [pc, #40]	; (8002e48 <LoopForever+0x16>)
  movs r3, #0
 8002e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e20:	e001      	b.n	8002e26 <LoopFillZerobss>

08002e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e24:	3204      	adds	r2, #4

08002e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e28:	d3fb      	bcc.n	8002e22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002e2a:	f00d f8c9 	bl	800ffc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e2e:	f7fe fbeb 	bl	8001608 <main>

08002e32 <LoopForever>:

LoopForever:
    b LoopForever
 8002e32:	e7fe      	b.n	8002e32 <LoopForever>
  ldr   r0, =_estack
 8002e34:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002e38:	20000080 	.word	0x20000080
  ldr r1, =_edata
 8002e3c:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 8002e40:	08013860 	.word	0x08013860
  ldr r2, =_sbss
 8002e44:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 8002e48:	20004d8c 	.word	0x20004d8c

08002e4c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e4c:	e7fe      	b.n	8002e4c <ADC_IRQHandler>

08002e4e <crc32Compute>:
 * @param[out] digest Pointer to the calculated digest
 * @return Error code
 **/

error_t crc32Compute(const void *data, size_t length, uint8_t *digest)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b086      	sub	sp, #24
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	60f8      	str	r0, [r7, #12]
 8002e56:	60b9      	str	r1, [r7, #8]
 8002e58:	607a      	str	r2, [r7, #4]
   //Allocate a memory buffer to hold the CRC32 context
   Crc32Context *context = cryptoAllocMem(sizeof(Crc32Context));
 8002e5a:	2004      	movs	r0, #4
 8002e5c:	f7fe f945 	bl	80010ea <osAllocMem>
 8002e60:	6178      	str	r0, [r7, #20]
   //Failed to allocate memory?
   if(context == NULL)
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <crc32Compute+0x1e>
      return ERROR_OUT_OF_MEMORY;
 8002e68:	2364      	movs	r3, #100	; 0x64
 8002e6a:	e00f      	b.n	8002e8c <crc32Compute+0x3e>

   //Initialize the CRC32 context
   crc32Init(context);
 8002e6c:	6978      	ldr	r0, [r7, #20]
 8002e6e:	f000 f811 	bl	8002e94 <crc32Init>
   //Digest the message
   crc32Update(context, data, length);
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	68f9      	ldr	r1, [r7, #12]
 8002e76:	6978      	ldr	r0, [r7, #20]
 8002e78:	f000 f81a 	bl	8002eb0 <crc32Update>
   //Finalize the CRC32 message digest
   crc32Final(context, digest);
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	6978      	ldr	r0, [r7, #20]
 8002e80:	f000 f844 	bl	8002f0c <crc32Final>

   //Free previously allocated memory
   cryptoFreeMem(context);
 8002e84:	6978      	ldr	r0, [r7, #20]
 8002e86:	f7fe f93d 	bl	8001104 <osFreeMem>
   //Successful processing
   return NO_ERROR;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3718      	adds	r7, #24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <crc32Init>:
 * @brief Initialize CRC32 message digest context
 * @param[in] context Pointer to the CRC32 context to initialize
 **/

void crc32Init(Crc32Context *context)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
   //CRC (digest) preset value
   context->digest = 0xFFFFFFFF;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8002ea2:	601a      	str	r2, [r3, #0]
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bc80      	pop	{r7}
 8002eac:	4770      	bx	lr
	...

08002eb0 <crc32Update>:
 * @param[in] data Pointer to the buffer being hashed
 * @param[in] length Length of the buffer
 **/

void crc32Update(Crc32Context *context, const void *data, size_t length)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b089      	sub	sp, #36	; 0x24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
   size_t i;
   const uint8_t *p;
   uint32_t crc;

   //Restaure last crc
   crc = (uint32_t)context->digest;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	61bb      	str	r3, [r7, #24]

   //Point to the data over which to calculate the CRC
   p = (uint8_t *) data;
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	617b      	str	r3, [r7, #20]

   //Process the incoming data
   for(i = 0; i < length; i++)
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	61fb      	str	r3, [r7, #28]
 8002eca:	e010      	b.n	8002eee <crc32Update+0x3e>
   {
      //The message is processed byte by byte
      crc = (crc >> 8) ^ crc32Table[(crc & 0xFF) ^ p[i]];
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	0a1a      	lsrs	r2, r3, #8
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	6978      	ldr	r0, [r7, #20]
 8002ed6:	69f9      	ldr	r1, [r7, #28]
 8002ed8:	4401      	add	r1, r0
 8002eda:	7809      	ldrb	r1, [r1, #0]
 8002edc:	404b      	eors	r3, r1
 8002ede:	490a      	ldr	r1, [pc, #40]	; (8002f08 <crc32Update+0x58>)
 8002ee0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002ee4:	4053      	eors	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
   for(i = 0; i < length; i++)
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	3301      	adds	r3, #1
 8002eec:	61fb      	str	r3, [r7, #28]
 8002eee:	69fa      	ldr	r2, [r7, #28]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d3ea      	bcc.n	8002ecc <crc32Update+0x1c>
   }

   //Save updated crc
   context->digest = crc;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	601a      	str	r2, [r3, #0]
}
 8002efc:	bf00      	nop
 8002efe:	3724      	adds	r7, #36	; 0x24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bc80      	pop	{r7}
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	08012a80 	.word	0x08012a80

08002f0c <crc32Final>:
 * @param[in] context Pointer to the CRC32 context
 * @param[out] digest Calculated digest (optional parameter)
 **/

void crc32Final(Crc32Context *context, uint8_t *digest)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
   //Copy the resulting digest
   if(digest != NULL)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d004      	beq.n	8002f26 <crc32Final+0x1a>
      osMemcpy(digest, (uint8_t*)&context->digest, CRC32_DIGEST_SIZE);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	461a      	mov	r2, r3
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	601a      	str	r2, [r3, #0]
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr

08002f30 <iapGetDefaultSettings>:
* @brief Initialize settings with default values
* @param[in,out] settings Structure that contains IAP settings
**/

void iapGetDefaultSettings(IapSettings *settings)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
   //Clear image output crypto settings structure
   memset(settings, 0x00, sizeof(IapSettings));
 8002f38:	2224      	movs	r2, #36	; 0x24
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f00d f89e 	bl	801007e <memset>

#if (VERIFY_INTEGRITY_SUPPORT == ENABLED || IAP_SINGLE_BANK_SUPPORT == ENABLED)
   //IAP integrity setting
   settings->imageInCrypto.verifySettings.integrityAlgo = NULL;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	60da      	str	r2, [r3, #12]
   settings->imageInCrypto.cipherAlgo = NULL;
   settings->imageInCrypto.cipherMode = CIPHER_MODE_NULL;
   settings->imageInCrypto.cipherKey = NULL;
   settings->imageInCrypto.cipherKeyLen = 0;
#endif
}
 8002f48:	bf00      	nop
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <iapInit>:
 * @param[in,out] context Pointer to the IAP Application context to be initialized
 * @return Status code
 **/

cboot_error_t iapInit(IapContext *context, const IapSettings *settings)
{
 8002f50:	b5b0      	push	{r4, r5, r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
#if (IAP_SINGLE_BANK_SUPPORT == ENABLED)
   uint16_t newImgIdx;
#endif

   //Check Parameters validity
   if(context == NULL || settings == NULL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d002      	beq.n	8002f66 <iapInit+0x16>
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d102      	bne.n	8002f6c <iapInit+0x1c>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8002f66:	f240 234d 	movw	r3, #589	; 0x24d
 8002f6a:	e073      	b.n	8003054 <iapInit+0x104>

   //Debug message
   TRACE_INFO("Initializing IAP...\r\n");

   //Clear the IAP context
   memset(context, 0, sizeof(IapContext));
 8002f6c:	f640 0204 	movw	r2, #2052	; 0x804
 8002f70:	2100      	movs	r1, #0
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f00d f883 	bl	801007e <memset>

    //Save user settings
   context->settings = *settings;
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	4614      	mov	r4, r2
 8002f7e:	461d      	mov	r5, r3
 8002f80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f88:	682b      	ldr	r3, [r5, #0]
 8002f8a:	6023      	str	r3, [r4, #0]

   //Initialize primary (internal flash) memory driver
   error = iapInitPrimaryMemory(&context->settings,context);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f000 f9b4 	bl	80032fe <iapInitPrimaryMemory>
 8002f96:	4603      	mov	r3, r0
 8002f98:	81fb      	strh	r3, [r7, #14]
   //Is any error?
   if(error)
 8002f9a:	89fb      	ldrh	r3, [r7, #14]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d002      	beq.n	8002fa6 <iapInit+0x56>
      return CBOOT_ERROR_FAILURE;
 8002fa0:	f44f 7313 	mov.w	r3, #588	; 0x24c
 8002fa4:	e056      	b.n	8003054 <iapInit+0x104>

#if (IAP_SINGLE_BANK_SUPPORT == ENABLED)
   //Initialize secondary (external) memory driver
   error = iapInitSecondaryMemory(&context->settings,context);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 fa03 	bl	80033b6 <iapInitSecondaryMemory>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	81fb      	strh	r3, [r7, #14]
   //Is any error?
   if(error)
 8002fb4:	89fb      	ldrh	r3, [r7, #14]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d002      	beq.n	8002fc0 <iapInit+0x70>
      return CBOOT_ERROR_FAILURE;
 8002fba:	f44f 7313 	mov.w	r3, #588	; 0x24c
 8002fbe:	e049      	b.n	8003054 <iapInit+0x104>
#endif

   //Initialize image input context (will process received update image)
   error = iapInitInputImage(&context->settings,context);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 fa55 	bl	8003474 <iapInitInputImage>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	81fb      	strh	r3, [r7, #14]
   //Is any error?
   if(error)
 8002fce:	89fb      	ldrh	r3, [r7, #14]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d002      	beq.n	8002fda <iapInit+0x8a>
      return CBOOT_ERROR_FAILURE;
 8002fd4:	f44f 7313 	mov.w	r3, #588	; 0x24c
 8002fd8:	e03c      	b.n	8003054 <iapInit+0x104>

   //Initialize image output context (will process the output binary or image)
   error = iapInitOutputImage(&context->settings,context);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 fab6 	bl	8003550 <iapInitOutputImage>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	81fb      	strh	r3, [r7, #14]
   //Is any error?
   if(error)
 8002fe8:	89fb      	ldrh	r3, [r7, #14]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d002      	beq.n	8002ff4 <iapInit+0xa4>
      return CBOOT_ERROR_FAILURE;
 8002fee:	f44f 7313 	mov.w	r3, #588	; 0x24c
 8002ff2:	e02f      	b.n	8003054 <iapInit+0x104>

#if IAP_SINGLE_BANK_SUPPORT == ENABLED
   // Set index of output image
   error = iapCalculateOutputImageIdx(context, &newImgIdx);
 8002ff4:	f107 030c 	add.w	r3, r7, #12
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f93d 	bl	800327a <iapCalculateOutputImageIdx>
 8003000:	4603      	mov	r3, r0
 8003002:	81fb      	strh	r3, [r7, #14]
   //Is any error?
   if(error)
 8003004:	89fb      	ldrh	r3, [r7, #14]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d002      	beq.n	8003010 <iapInit+0xc0>
      return CBOOT_ERROR_FAILURE;
 800300a:	f44f 7313 	mov.w	r3, #588	; 0x24c
 800300e:	e021      	b.n	8003054 <iapInit+0x104>

   context->imageOutput.imgIdx = newImgIdx;
 8003010:	89ba      	ldrh	r2, [r7, #12]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f8a3 2430 	strh.w	r2, [r3, #1072]	; 0x430
#endif

   //Get slot to store output update image
   error = iapGetUpdateSlot(context, &context->imageOutput.slotInfo);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800301e:	4619      	mov	r1, r3
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 f957 	bl	80032d4 <iapGetUpdateSlot>
 8003026:	4603      	mov	r3, r0
 8003028:	81fb      	strh	r3, [r7, #14]
   //Is any error?
   if(error)
 800302a:	89fb      	ldrh	r3, [r7, #14]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d002      	beq.n	8003036 <iapInit+0xe6>
      return CBOOT_ERROR_FAILURE;
 8003030:	f44f 7313 	mov.w	r3, #588	; 0x24c
 8003034:	e00e      	b.n	8003054 <iapInit+0x104>

   //Get external flash memory start address
   context->imageOutput.firmwareAddr = context->imageOutput.slotInfo->addr;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438

   //Initialize memory position to flash bank start addresse
   context->imageOutput.pos = context->imageOutput.firmwareAddr;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f8d3 2438 	ldr.w	r2, [r3, #1080]	; 0x438
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440

   //Successful process
   return CBOOT_NO_ERROR;
 8003050:	f240 234b 	movw	r3, #587	; 0x24b
}
 8003054:	4618      	mov	r0, r3
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bdb0      	pop	{r4, r5, r7, pc}

0800305c <iapUpdate>:
 * @param[in] length Length of the firmware chunck of data to be written
 * @return Status code
 **/

cboot_error_t iapUpdate(IapContext *context, const void *data, size_t length)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b088      	sub	sp, #32
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
   error_t error;
   uint_t n;
   uint8_t *pData;

   //Check parameters validity
   if (context == NULL || data == NULL || length == 0)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d005      	beq.n	800307a <iapUpdate+0x1e>
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d002      	beq.n	800307a <iapUpdate+0x1e>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d102      	bne.n	8003080 <iapUpdate+0x24>
      return CBOOT_ERROR_INVALID_PARAMETERS;//ERROR_INVALID_PARAMETER;
 800307a:	f240 234d 	movw	r3, #589	; 0x24d
 800307e:	e065      	b.n	800314c <iapUpdate+0xf0>

   //Initialize variables
   n = 0;
 8003080:	2300      	movs	r3, #0
 8003082:	617b      	str	r3, [r7, #20]
   error = NO_ERROR;
 8003084:	2300      	movs	r3, #0
 8003086:	83fb      	strh	r3, [r7, #30]

   //Point to the beginning of the data
   pData = (uint8_t*)data;
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	61bb      	str	r3, [r7, #24]

   //Process the incoming data
   while(length > 0)
 800308c:	e053      	b.n	8003136 <iapUpdate+0xda>
   {
      //Still room in buffer?
      if(context->imageInput.bufferLen < sizeof(context->imageInput.buffer))
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8003094:	2b7f      	cmp	r3, #127	; 0x7f
 8003096:	d83e      	bhi.n	8003116 <iapUpdate+0xba>
      {
         //Fill buffer with input data
         n = MIN(length, sizeof(context->imageInput.buffer) - context->imageInput.bufferLen);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800309e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	4293      	cmp	r3, r2
 80030a6:	bf28      	it	cs
 80030a8:	4613      	movcs	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]
         memcpy(context->imageInput.bufferPos, pData, n);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	69b9      	ldr	r1, [r7, #24]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f00c ffb9 	bl	801002e <memcpy>

         //Update buffer position and length
         context->imageInput.bufferPos += n;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	441a      	add	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
         context->imageInput.bufferLen += n;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	441a      	add	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

         //Update input data postion and length
         pData += n;
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	4413      	add	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
         length -= n;
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	607b      	str	r3, [r7, #4]

         //Process received image input data
         error = iapProcessInputImage(&context->imageInput);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	335c      	adds	r3, #92	; 0x5c
 80030f0:	4618      	mov	r0, r3
 80030f2:	f000 fb8b 	bl	800380c <iapProcessInputImage>
 80030f6:	4603      	mov	r3, r0
 80030f8:	83fb      	strh	r3, [r7, #30]
         //Is any error?
         if(error)
 80030fa:	8bfb      	ldrh	r3, [r7, #30]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d01a      	beq.n	8003136 <iapUpdate+0xda>
         {
#if (IAP_SINGLE_BANK_SUPPORT == ENABLED)
            //Erase output image slot first bytes to make sure bootloader doesn't
            //consider it as a new valid update image if a reboot occurs
            context->secondaryMem.driver->erase(
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003104:	695b      	ldr	r3, [r3, #20]
               context->imageOutput.slotInfo->addr, sizeof(ImageHeader));
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	f8d2 2800 	ldr.w	r2, [r2, #2048]	; 0x800
            context->secondaryMem.driver->erase(
 800310c:	6812      	ldr	r2, [r2, #0]
 800310e:	2140      	movs	r1, #64	; 0x40
 8003110:	4610      	mov	r0, r2
 8003112:	4798      	blx	r3
#endif
            break;
 8003114:	e012      	b.n	800313c <iapUpdate+0xe0>
         }
      }
      else
      {
         //Debug message
         TRACE_ERROR("Buffer would overflow!\r\n");
 8003116:	f7fd ffd2 	bl	80010be <osSuspendAllTasks>
 800311a:	4b0e      	ldr	r3, [pc, #56]	; (8003154 <iapUpdate+0xf8>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	2218      	movs	r2, #24
 8003122:	2101      	movs	r1, #1
 8003124:	480c      	ldr	r0, [pc, #48]	; (8003158 <iapUpdate+0xfc>)
 8003126:	f00c ff3d 	bl	800ffa4 <fwrite>
 800312a:	f7fd ffd3 	bl	80010d4 <osResumeAllTasks>
         error = ERROR_BUFFER_OVERFLOW;
 800312e:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8003132:	83fb      	strh	r3, [r7, #30]
         break;
 8003134:	e002      	b.n	800313c <iapUpdate+0xe0>
   while(length > 0)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1a8      	bne.n	800308e <iapUpdate+0x32>
      }
   }

   //Return error code
   if(error) {
 800313c:	8bfb      	ldrh	r3, [r7, #30]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d002      	beq.n	8003148 <iapUpdate+0xec>
      return CBOOT_ERROR_FAILURE;
 8003142:	f44f 7313 	mov.w	r3, #588	; 0x24c
 8003146:	e001      	b.n	800314c <iapUpdate+0xf0>
   } else {
      return CBOOT_NO_ERROR;
 8003148:	f240 234b 	movw	r3, #587	; 0x24b
   }
}
 800314c:	4618      	mov	r0, r3
 800314e:	3720      	adds	r7, #32
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	20000094 	.word	0x20000094
 8003158:	080125f4 	.word	0x080125f4

0800315c <iapFinalize>:
 * @param[in,out] context Pointer to the IAP application context
 * @return Error code
 **/

cboot_error_t iapFinalize(IapContext* context)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
   IAP_EXT_MEM_ENCRYPTION_SUPPORT == ENABLED)
   BootMailBox bMsg;
#endif

   //Check parameters validity
   if (context == NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d102      	bne.n	8003170 <iapFinalize+0x14>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 800316a:	f240 234d 	movw	r3, #589	; 0x24d
 800316e:	e051      	b.n	8003214 <iapFinalize+0xb8>

   //Debug message
   TRACE_INFO("Finalizing firmware update...\r\n");

   //Ready to verify firmware image validity?
   if (context->imageInput.state == IAP_STATE_VALIDATE_APP)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003176:	2b04      	cmp	r3, #4
 8003178:	d134      	bne.n	80031e4 <iapFinalize+0x88>
   {
      //Verify firmware image validity (could integrity tag or
      //authentification tag or signature)
      error = verifyConfirm(&context->imageInput.verifyContext, context->imageInput.checkData, context->imageInput.checkDataLen);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f503 7108 	add.w	r1, r3, #544	; 0x220
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 800318c:	461a      	mov	r2, r3
 800318e:	f001 fab1 	bl	80046f4 <verifyConfirm>
 8003192:	4603      	mov	r3, r0
 8003194:	81fb      	strh	r3, [r7, #14]
      //Is any error?
      if (error)
 8003196:	89fb      	ldrh	r3, [r7, #14]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d01c      	beq.n	80031d6 <iapFinalize+0x7a>
      {
         //Debug message
         TRACE_ERROR("Firmware image is invalid!\r\n");
 800319c:	f7fd ff8f 	bl	80010be <osSuspendAllTasks>
 80031a0:	4b1e      	ldr	r3, [pc, #120]	; (800321c <iapFinalize+0xc0>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	221c      	movs	r2, #28
 80031a8:	2101      	movs	r1, #1
 80031aa:	481d      	ldr	r0, [pc, #116]	; (8003220 <iapFinalize+0xc4>)
 80031ac:	f00c fefa 	bl	800ffa4 <fwrite>
 80031b0:	f7fd ff90 	bl	80010d4 <osResumeAllTasks>

#if (IAP_SINGLE_BANK_SUPPORT == ENABLED)
            //Erase output image slot first bytes to make sure bootloader doesn't
            //consider it as a new valid update image if a reboot occurs
            context->secondaryMem.driver->erase(
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	695b      	ldr	r3, [r3, #20]
               context->imageOutput.slotInfo->addr, sizeof(ImageHeader));
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	f8d2 2800 	ldr.w	r2, [r2, #2048]	; 0x800
            context->secondaryMem.driver->erase(
 80031c0:	6812      	ldr	r2, [r2, #0]
 80031c2:	2140      	movs	r1, #64	; 0x40
 80031c4:	4610      	mov	r0, r2
 80031c6:	4798      	blx	r3
#endif

         //Return to IAP idle state
         context->imageInput.state = IAP_STATE_IDLE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
         //Return error code
         return CBOOT_ERROR_INVALID_IMAGE_APP;
 80031d0:	f44f 7315 	mov.w	r3, #596	; 0x254
 80031d4:	e01e      	b.n	8003214 <iapFinalize+0xb8>
         if(error)
            return CBOOT_ERROR_FAILURE;
      }
#endif
      //Change IAP state
      context->imageInput.state = IAP_STATE_APP_REBOOT;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2205      	movs	r2, #5
 80031da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      return CBOOT_ERROR_IMAGE_NOT_READY;
   }

   //Successful process
   return CBOOT_NO_ERROR;
 80031de:	f240 234b 	movw	r3, #587	; 0x24b
 80031e2:	e017      	b.n	8003214 <iapFinalize+0xb8>
      TRACE_ERROR("Firmware image is not ready for verification!\r\n");
 80031e4:	f7fd ff6b 	bl	80010be <osSuspendAllTasks>
 80031e8:	4b0c      	ldr	r3, [pc, #48]	; (800321c <iapFinalize+0xc0>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	222f      	movs	r2, #47	; 0x2f
 80031f0:	2101      	movs	r1, #1
 80031f2:	480c      	ldr	r0, [pc, #48]	; (8003224 <iapFinalize+0xc8>)
 80031f4:	f00c fed6 	bl	800ffa4 <fwrite>
 80031f8:	f7fd ff6c 	bl	80010d4 <osResumeAllTasks>
            context->secondaryMem.driver->erase(
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	695b      	ldr	r3, [r3, #20]
               context->imageOutput.slotInfo->addr, sizeof(ImageHeader));
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	f8d2 2800 	ldr.w	r2, [r2, #2048]	; 0x800
            context->secondaryMem.driver->erase(
 8003208:	6812      	ldr	r2, [r2, #0]
 800320a:	2140      	movs	r1, #64	; 0x40
 800320c:	4610      	mov	r0, r2
 800320e:	4798      	blx	r3
      return CBOOT_ERROR_IMAGE_NOT_READY;
 8003210:	f240 2355 	movw	r3, #597	; 0x255
}
 8003214:	4618      	mov	r0, r3
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	20000094 	.word	0x20000094
 8003220:	08012610 	.word	0x08012610
 8003224:	08012630 	.word	0x08012630

08003228 <iapReboot>:
 * @param[in] context Pointer to the IAP context
 * @return Error code.
 **/

cboot_error_t iapReboot(IapContext* context)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]

   //Debug message
   TRACE_INFO("Rebooting device to finalize update...\r\n");

   //Check parameter validity
   if (context == NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d102      	bne.n	800323c <iapReboot+0x14>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 8003236:	f240 234d 	movw	r3, #589	; 0x24d
 800323a:	e01a      	b.n	8003272 <iapReboot+0x4a>

   if (context->imageInput.state == IAP_STATE_APP_REBOOT)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003242:	2b05      	cmp	r3, #5
 8003244:	d113      	bne.n	800326e <iapReboot+0x46>
   {
      //Get flash info
      error = context->primaryMem.driver->getInfo(&memInfo);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f107 0208 	add.w	r2, r7, #8
 8003250:	4610      	mov	r0, r2
 8003252:	4798      	blx	r3
 8003254:	4603      	mov	r3, r0
 8003256:	81fb      	strh	r3, [r7, #14]
      //Is any error?
      if(error)
 8003258:	89fb      	ldrh	r3, [r7, #14]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d002      	beq.n	8003264 <iapReboot+0x3c>
         return CBOOT_ERROR_FAILURE;
 800325e:	f44f 7313 	mov.w	r3, #588	; 0x24c
 8003262:	e006      	b.n	8003272 <iapReboot+0x4a>

#if (IAP_SINGLE_BANK_SUPPORT == ENABLED)
      //Reboot system to complete firmware update procedure
      mcuSystemReset();
 8003264:	f001 f9a0 	bl	80045a8 <mcuSystemReset>
      //Wrong state
      return CBOOT_ERROR_INVALID_STATE;
   }

   //Successful process
   return CBOOT_NO_ERROR;
 8003268:	f240 234b 	movw	r3, #587	; 0x24b
 800326c:	e001      	b.n	8003272 <iapReboot+0x4a>
      return CBOOT_ERROR_INVALID_STATE;
 800326e:	f240 2356 	movw	r3, #598	; 0x256
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <iapCalculateOutputImageIdx>:
 * @param[out] imgIdx Calculated value of the output image index.
 * @return Error code.
 **/

error_t iapCalculateOutputImageIdx(IapContext *context, uint16_t *imgIdx)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b094      	sub	sp, #80	; 0x50
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
 8003282:	6039      	str	r1, [r7, #0]
   ImageHeader imgHeader;
   uint32_t curIdx;
   error_t error;

   //Check paramter validity
   if(context == NULL || imgIdx == NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d002      	beq.n	8003290 <iapCalculateOutputImageIdx+0x16>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <iapCalculateOutputImageIdx+0x1a>
      return ERROR_INVALID_PARAMETER;
 8003290:	2302      	movs	r3, #2
 8003292:	e01b      	b.n	80032cc <iapCalculateOutputImageIdx+0x52>

   //Get image header from primary flash memory first slot
   error = iapGetImageHeaderFromSlot(&context->primaryMem.slots[0], &imgHeader);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3328      	adds	r3, #40	; 0x28
 8003298:	f107 0208 	add.w	r2, r7, #8
 800329c:	4611      	mov	r1, r2
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 fa76 	bl	8003790 <iapGetImageHeaderFromSlot>
 80032a4:	4603      	mov	r3, r0
 80032a6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
   //Is any error?
   if(error)
 80032aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d002      	beq.n	80032b8 <iapCalculateOutputImageIdx+0x3e>
      return error;
 80032b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032b6:	e009      	b.n	80032cc <iapCalculateOutputImageIdx+0x52>

   //Get image index from header
   curIdx = imgHeader.imgIndex;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	64bb      	str	r3, [r7, #72]	; 0x48
   //Save incremented image index
   *imgIdx = ++curIdx;
 80032bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032be:	3301      	adds	r3, #1
 80032c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80032c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	801a      	strh	r2, [r3, #0]

   //Successful process
   return NO_ERROR;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3750      	adds	r7, #80	; 0x50
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <iapGetUpdateSlot>:
 * @param[out] slot Pointer to the slot that will be used to hold output image.
 * @return
 **/

error_t iapGetUpdateSlot(IapContext *context, SlotDesc **slot)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
   SlotDesc *tempSlot;
   ImageHeader header;
#endif

   //Check parameters validity
   if(context == NULL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <iapGetUpdateSlot+0x14>
      return ERROR_INVALID_PARAMETER;
 80032e4:	2302      	movs	r3, #2
 80032e6:	e005      	b.n	80032f4 <iapGetUpdateSlot+0x20>
   //Select the second slot of primary flash memory that match the second flash bank
   *slot = (SlotDesc*)&context->primaryMem.slots[1];
#else
#if (IAP_FALLBACK_SUPPORT == DISABLED)
   //In single bank mode without fallback support only one
   *slot = (SlotDesc*)&context->secondaryMem.slots[0];
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f103 0244 	add.w	r2, r3, #68	; 0x44
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	601a      	str	r2, [r3, #0]
   }
#endif
#endif

   //Successful process
   return NO_ERROR;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bc80      	pop	{r7}
 80032fc:	4770      	bx	lr

080032fe <iapInitPrimaryMemory>:
 * @param[in,out] context Pointer to the IAP context.
 * @return Error code
 **/

error_t iapInitPrimaryMemory(IapSettings *settings, IapContext *context)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b086      	sub	sp, #24
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
 8003306:	6039      	str	r1, [r7, #0]
   uint32_t nextSector;
#endif
   error_t error;

   //Check parameters validity
   if(context == NULL || settings == NULL)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d002      	beq.n	8003314 <iapInitPrimaryMemory+0x16>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <iapInitPrimaryMemory+0x1a>
      return ERROR_INVALID_PARAMETER;
 8003314:	2302      	movs	r3, #2
 8003316:	e04a      	b.n	80033ae <iapInitPrimaryMemory+0xb0>

   //Check primary flash memory driver is valid
   if(settings->primaryFlashDriver == NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <iapInitPrimaryMemory+0x26>
      return ERROR_INVALID_PARAMETER;
 8003320:	2302      	movs	r3, #2
 8003322:	e044      	b.n	80033ae <iapInitPrimaryMemory+0xb0>

   //Save primary flash memory driver
   context->primaryMem.driver = (FlashDriver*)settings->primaryFlashDriver;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	625a      	str	r2, [r3, #36]	; 0x24

   //Point to the memory driver
   flashDriver = (FlashDriver*)context->primaryMem.driver;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003330:	617b      	str	r3, [r7, #20]

   //Initialize primary (internal) memory flash driver
   error = flashDriver->init();
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4798      	blx	r3
 8003338:	4603      	mov	r3, r0
 800333a:	827b      	strh	r3, [r7, #18]
   //Is any error?
   if(error)
 800333c:	8a7b      	ldrh	r3, [r7, #18]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <iapInitPrimaryMemory+0x48>
      return error;
 8003342:	8a7b      	ldrh	r3, [r7, #18]
 8003344:	e033      	b.n	80033ae <iapInitPrimaryMemory+0xb0>

   //Get memory driver informations
   error = flashDriver->getInfo(&memInfo);
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f107 020c 	add.w	r2, r7, #12
 800334e:	4610      	mov	r0, r2
 8003350:	4798      	blx	r3
 8003352:	4603      	mov	r3, r0
 8003354:	827b      	strh	r3, [r7, #18]
   //Is any error?
   if(error)
 8003356:	8a7b      	ldrh	r3, [r7, #18]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <iapInitPrimaryMemory+0x62>
      return error;
 800335c:	8a7b      	ldrh	r3, [r7, #18]
 800335e:	e026      	b.n	80033ae <iapInitPrimaryMemory+0xb0>
#if IAP_SINGLE_BANK_SUPPORT == ENABLED
   //Debug message
   TRACE_DEBUG("Primary flash addr = 0x%08lX | Bootloader size = 0x%08X\r\n", (unsigned long) memInfo->flashAddr, BOOTLOADER_SIZE);

   // Get the address of the next sector available after the bootloader
   error = context->primaryMem.driver->getNextSectorAddr(memInfo->flashAddr + BOOTLOADER_SIZE, &nextSector);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	68d2      	ldr	r2, [r2, #12]
 800336a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800336e:	f107 0108 	add.w	r1, r7, #8
 8003372:	4610      	mov	r0, r2
 8003374:	4798      	blx	r3
 8003376:	4603      	mov	r3, r0
 8003378:	827b      	strh	r3, [r7, #18]
   //Is any error?
   if(error)
 800337a:	8a7b      	ldrh	r3, [r7, #18]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <iapInitPrimaryMemory+0x86>
      return error;
 8003380:	8a7b      	ldrh	r3, [r7, #18]
 8003382:	e014      	b.n	80033ae <iapInitPrimaryMemory+0xb0>
   //Debug message
   TRACE_DEBUG("Primary slot 1 addr = 0x%08lX\r\n", (unsigned long) nextSector);

   //Set primary flash memory slot which hold current running application
   //This slot is located after the bootloader at the beginning of the next available flash sector
   context->primaryMem.slots[0].addr = nextSector;
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	629a      	str	r2, [r3, #40]	; 0x28
   context->primaryMem.slots[0].size = (memInfo->flashAddr + memInfo->flashSize) - (nextSector + settings->sizeSlot1);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	68da      	ldr	r2, [r3, #12]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	441a      	add	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a19      	ldr	r1, [r3, #32]
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	440b      	add	r3, r1
 800339c:	1ad2      	subs	r2, r2, r3
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	62da      	str	r2, [r3, #44]	; 0x2c
   context->primaryMem.slots[0].flash =  (FlashDesc*)&context->primaryMem;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	631a      	str	r2, [r3, #48]	; 0x30
   context->primaryMem.slots[1].size = memInfo->bankSize;
   context->primaryMem.slots[1].flash = (FlashDesc*)&context->primaryMem;
#endif

   //Succesful process
   return NO_ERROR;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <iapInitSecondaryMemory>:
 * @param[in,out] context Pointer to the IAP context.
 * @return Error code
 **/

error_t iapInitSecondaryMemory(IapSettings *settings, IapContext *context)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b086      	sub	sp, #24
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
 80033be:	6039      	str	r1, [r7, #0]
   FlashDriver *flashDriver;
   const FlashInfo *memInfo;
   bool_t ret;

   //Check parameters validity
   if(context == NULL || settings == NULL)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d002      	beq.n	80033cc <iapInitSecondaryMemory+0x16>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <iapInitSecondaryMemory+0x1a>
      return ERROR_INVALID_PARAMETER;
 80033cc:	2302      	movs	r3, #2
 80033ce:	e04d      	b.n	800346c <iapInitSecondaryMemory+0xb6>

   //Check secondary flash memory driver is valid
   if(settings->secondaryFlashDriver == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <iapInitSecondaryMemory+0x26>
      return ERROR_INVALID_PARAMETER;
 80033d8:	2302      	movs	r3, #2
 80033da:	e047      	b.n	800346c <iapInitSecondaryMemory+0xb6>

   //Save secondary flash memory driver
   context->secondaryMem.driver = (FlashDriver*)settings->secondaryFlashDriver;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	691a      	ldr	r2, [r3, #16]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	641a      	str	r2, [r3, #64]	; 0x40

   //Point to the secondary flash memory driver
   flashDriver = (FlashDriver*)context->secondaryMem.driver;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e8:	617b      	str	r3, [r7, #20]

   //Initialize secondary flash memory driver
   error = flashDriver->init();
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4798      	blx	r3
 80033f0:	4603      	mov	r3, r0
 80033f2:	827b      	strh	r3, [r7, #18]
   //Is any error?
   if(error)
 80033f4:	8a7b      	ldrh	r3, [r7, #18]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <iapInitSecondaryMemory+0x48>
      return error;
 80033fa:	8a7b      	ldrh	r3, [r7, #18]
 80033fc:	e036      	b.n	800346c <iapInitSecondaryMemory+0xb6>

   //Get secondary flash memory driver informations
   error = flashDriver->getInfo(&memInfo);
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f107 0208 	add.w	r2, r7, #8
 8003406:	4610      	mov	r0, r2
 8003408:	4798      	blx	r3
 800340a:	4603      	mov	r3, r0
 800340c:	827b      	strh	r3, [r7, #18]
   //Is any error?
   if(error)
 800340e:	8a7b      	ldrh	r3, [r7, #18]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <iapInitSecondaryMemory+0x62>
      return error;
 8003414:	8a7b      	ldrh	r3, [r7, #18]
 8003416:	e029      	b.n	800346c <iapInitSecondaryMemory+0xb6>
   //Debug message
   TRACE_DEBUG("Secondary flash addr = 0x%08lX\r\n", (unsigned long) memInfo->flashAddr);
   TRACE_DEBUG("Secondary slot 1 addr = 0x%08lX\r\n", (unsigned long) settings->addrSlot1);

   //Check if user slot 1 address match a secondary flash memory sector address
   ret = flashDriver->isSectorAddr(settings->addrSlot1);
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	8b92      	ldrh	r2, [r2, #28]
 8003420:	4610      	mov	r0, r2
 8003422:	4798      	blx	r3
 8003424:	60f8      	str	r0, [r7, #12]
   if(!ret)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d101      	bne.n	8003430 <iapInitSecondaryMemory+0x7a>
      return ERROR_INVALID_VALUE;
 800342c:	23f1      	movs	r3, #241	; 0xf1
 800342e:	e01d      	b.n	800346c <iapInitSecondaryMemory+0xb6>

   //Check if user slot 1 fits in secondary flash memory
   if(settings->addrSlot1 + settings->sizeSlot1 > memInfo->flashAddr + memInfo->flashSize)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	8b9b      	ldrh	r3, [r3, #28]
 8003434:	461a      	mov	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	441a      	add	r2, r3
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	68d9      	ldr	r1, [r3, #12]
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	440b      	add	r3, r1
 8003446:	429a      	cmp	r2, r3
 8003448:	d901      	bls.n	800344e <iapInitSecondaryMemory+0x98>
      return ERROR_FAILURE;
 800344a:	2301      	movs	r3, #1
 800344c:	e00e      	b.n	800346c <iapInitSecondaryMemory+0xb6>

   //Set secondary flash memory slot 1 which will hold the new encrypted update image
   //If fallback support is enabled the slot 1 could also hold the
   //backup encrypted image of the current running application
   context->secondaryMem.slots[0].addr = settings->addrSlot1;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	8b9b      	ldrh	r3, [r3, #28]
 8003452:	461a      	mov	r2, r3
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	645a      	str	r2, [r3, #68]	; 0x44
   context->secondaryMem.slots[0].size = settings->sizeSlot1;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a1a      	ldr	r2, [r3, #32]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	649a      	str	r2, [r3, #72]	; 0x48
   context->secondaryMem.slots[0].flash = (FlashDesc*)&context->secondaryMem;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	64da      	str	r2, [r3, #76]	; 0x4c
   context->secondaryMem.slots[1].flash = (FlashDriver*)&context->secondaryMem;
#endif
#endif

   //Succesful process
   return NO_ERROR;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3718      	adds	r7, #24
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <iapInitInputImage>:
 * @param[in,out] context Pointer to the IAP context.
 * @return Error code
 **/

error_t iapInitInputImage(IapSettings *settings, IapContext *context)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
   error_t error;
   ImageContext *imageIn;

   //Initialize status code
   error = NO_ERROR;
 800347e:	2300      	movs	r3, #0
 8003480:	81fb      	strh	r3, [r7, #14]

   //Check parameters validity
   if(context == NULL || settings == NULL)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d002      	beq.n	800348e <iapInitInputImage+0x1a>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <iapInitInputImage+0x1e>
      return ERROR_INVALID_PARAMETER;
 800348e:	2302      	movs	r3, #2
 8003490:	e055      	b.n	800353e <iapInitInputImage+0xca>

   //Check image verification method settings
   if(settings->imageInCrypto.verifySettings.verifyMethod == VERIFY_METHOD_INTEGRITY)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	7a1b      	ldrb	r3, [r3, #8]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d105      	bne.n	80034a6 <iapInitInputImage+0x32>
   {
#if VERIFY_INTEGRITY_SUPPORT == ENABLED
      //Check image integrity verification settings
      if(settings->imageInCrypto.verifySettings.integrityAlgo == NULL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d11b      	bne.n	80034da <iapInitInputImage+0x66>
         return ERROR_INVALID_PARAMETER;
 80034a2:	2302      	movs	r3, #2
 80034a4:	e04b      	b.n	800353e <iapInitInputImage+0xca>
#else
      //Image integrity verification support is not activated
      return ERROR_INVALID_PARAMETER;
#endif
   }
   else if(settings->imageInCrypto.verifySettings.verifyMethod == VERIFY_METHOD_AUTHENTICATION)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	7a1b      	ldrb	r3, [r3, #8]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d101      	bne.n	80034b2 <iapInitInputImage+0x3e>
      //Force authentication algorythm to HMAC
      if(settings->imageInCrypto.verifySettings.authAlgo != VERIFY_AUTH_HMAC)
         return ERROR_UNSUPPORTED_ALGO;
#else
      //Image authentication verification support is not activated
      return ERROR_INVALID_PARAMETER;
 80034ae:	2302      	movs	r3, #2
 80034b0:	e045      	b.n	800353e <iapInitInputImage+0xca>
#endif
   }
   else if(settings->imageInCrypto.verifySettings.verifyMethod == VERIFY_METHOD_SIGNATURE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	7a1b      	ldrb	r3, [r3, #8]
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d101      	bne.n	80034be <iapInitInputImage+0x4a>
      if(settings->imageInCrypto.verifySettings.signAlgo != VERIFY_SIGN_RSA &&
         settings->imageInCrypto.verifySettings.signAlgo != VERIFY_SIGN_ECDSA)
         return ERROR_UNSUPPORTED_SIGNATURE_ALGO;
#else
      //Image signature verification support is not activated
      return ERROR_INVALID_PARAMETER;
 80034ba:	2302      	movs	r3, #2
 80034bc:	e03f      	b.n	800353e <iapInitInputImage+0xca>
#endif
   }
   else
   {
      //Debug message
      TRACE_ERROR("Image verification mode not supported!\r\n");
 80034be:	f7fd fdfe 	bl	80010be <osSuspendAllTasks>
 80034c2:	4b21      	ldr	r3, [pc, #132]	; (8003548 <iapInitInputImage+0xd4>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	2228      	movs	r2, #40	; 0x28
 80034ca:	2101      	movs	r1, #1
 80034cc:	481f      	ldr	r0, [pc, #124]	; (800354c <iapInitInputImage+0xd8>)
 80034ce:	f00c fd69 	bl	800ffa4 <fwrite>
 80034d2:	f7fd fdff 	bl	80010d4 <osResumeAllTasks>
      return ERROR_NOT_IMPLEMENTED;
 80034d6:	2367      	movs	r3, #103	; 0x67
 80034d8:	e031      	b.n	800353e <iapInitInputImage+0xca>
   if(settings->imageInCrypto.cipherMode != CIPHER_MODE_CBC)
      return ERROR_UNSUPPORTED_CIPHER_MODE;
#endif

   //Point to the input image context
   imageIn = (ImageContext*)&context->imageInput;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	335c      	adds	r3, #92	; 0x5c
 80034de:	60bb      	str	r3, [r7, #8]

   //Clear input image context
   memset(imageIn, 0x00, sizeof(ImageContext));
 80034e0:	f44f 7275 	mov.w	r2, #980	; 0x3d4
 80034e4:	2100      	movs	r1, #0
 80034e6:	68b8      	ldr	r0, [r7, #8]
 80034e8:	f00c fdc9 	bl	801007e <memset>

   //Set pointer to IAP context
   imageIn->iapContext = (IapContext*)context;
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	605a      	str	r2, [r3, #4]
   //Initialize buffer position to buffer start addresse
   imageIn->bufferPos = imageIn->buffer;
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	f103 0219 	add.w	r2, r3, #25
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
   //Initialize check data position to check data start addresse
   imageIn->checkDataPos = imageIn->checkData;
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	f503 72e2 	add.w	r2, r3, #452	; 0x1c4
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

   //Initialize image input process state
   imageIn->state = IAP_STATE_RECV_APP_HEADER;
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	2201      	movs	r2, #1
 800350e:	761a      	strb	r2, [r3, #24]
         return error;
   }
#endif

   //Initialize verification module
   error = verifyInit(&imageIn->verifyContext, &settings->imageInCrypto.verifySettings);
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	f103 02a4 	add.w	r2, r3, #164	; 0xa4
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	3308      	adds	r3, #8
 800351a:	4619      	mov	r1, r3
 800351c:	4610      	mov	r0, r2
 800351e:	f001 f847 	bl	80045b0 <verifyInit>
 8003522:	4603      	mov	r3, r0
 8003524:	81fb      	strh	r3, [r7, #14]
   //Is any error ?
   if (error)
 8003526:	89fb      	ldrh	r3, [r7, #14]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <iapInitInputImage+0xbc>
      return error;
 800352c:	89fb      	ldrh	r3, [r7, #14]
 800352e:	e006      	b.n	800353e <iapInitInputImage+0xca>

   //Get exepecting image check data size
   imageIn->checkDataSize = imageIn->verifyContext.checkDataSize;
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

   //Successful process
   return NO_ERROR;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	20000094 	.word	0x20000094
 800354c:	08012660 	.word	0x08012660

08003550 <iapInitOutputImage>:
 * @param[in,out] context Pointer to the IAP context.
 * @return Error code
 **/

error_t iapInitOutputImage(IapSettings *settings, IapContext *context)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
   error_t error;
   ImageContext *imageOut;
   VerifySettings verifySettings;

   //Initialize status code
   error = NO_ERROR;
 800355a:	2300      	movs	r3, #0
 800355c:	82fb      	strh	r3, [r7, #22]

   //Initialize verify settings structure
   memset(&verifySettings, 0, sizeof(VerifySettings));
 800355e:	f107 0308 	add.w	r3, r7, #8
 8003562:	2208      	movs	r2, #8
 8003564:	2100      	movs	r1, #0
 8003566:	4618      	mov	r0, r3
 8003568:	f00c fd89 	bl	801007e <memset>

   //Check parameters validty
   if(context == NULL || settings == NULL)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d002      	beq.n	8003578 <iapInitOutputImage+0x28>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <iapInitOutputImage+0x2c>
      return ERROR_INVALID_PARAMETER;
 8003578:	2302      	movs	r3, #2
 800357a:	e02f      	b.n	80035dc <iapInitOutputImage+0x8c>

   //Point to the output image context
   imageOut = (ImageContext*)&context->imageOutput;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 8003582:	613b      	str	r3, [r7, #16]

   //Clear output image context
   memset(imageOut, 0x00, sizeof(ImageContext));
 8003584:	f44f 7275 	mov.w	r2, #980	; 0x3d4
 8003588:	2100      	movs	r1, #0
 800358a:	6938      	ldr	r0, [r7, #16]
 800358c:	f00c fd77 	bl	801007e <memset>

   //Set pointer to IAP context
   imageOut->iapContext = (IapContext*)context;
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	605a      	str	r2, [r3, #4]
   //Initialize buffer position to buffer start addresse
   imageOut->bufferPos = imageOut->buffer;
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f103 0219 	add.w	r2, r3, #25
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

   //Initialize image output process state
   imageOut->state = 0;
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	2200      	movs	r2, #0
 80035a6:	761a      	strb	r2, [r3, #24]
   if (error)
      return error;
#endif

   //Initialize check data position to check data start addresse
   imageOut->checkDataPos = imageOut->checkData;
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	f503 72e2 	add.w	r2, r3, #452	; 0x1c4
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

   //Set verification module settings
   verifySettings.verifyMethod = VERIFY_METHOD_INTEGRITY;
 80035b4:	2300      	movs	r3, #0
 80035b6:	723b      	strb	r3, [r7, #8]
   verifySettings.integrityAlgo = CRC32_HASH_ALGO;
 80035b8:	4b0a      	ldr	r3, [pc, #40]	; (80035e4 <iapInitOutputImage+0x94>)
 80035ba:	60fb      	str	r3, [r7, #12]

   //Initialize verification module
   error = verifyInit(&imageOut->verifyContext, &verifySettings);
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	33a4      	adds	r3, #164	; 0xa4
 80035c0:	f107 0208 	add.w	r2, r7, #8
 80035c4:	4611      	mov	r1, r2
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 fff2 	bl	80045b0 <verifyInit>
 80035cc:	4603      	mov	r3, r0
 80035ce:	82fb      	strh	r3, [r7, #22]
   //Is any error ?
   if (error)
 80035d0:	8afb      	ldrh	r3, [r7, #22]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <iapInitOutputImage+0x8a>
      return error;
 80035d6:	8afb      	ldrh	r3, [r7, #22]
 80035d8:	e000      	b.n	80035dc <iapInitOutputImage+0x8c>
#endif

   //Return status code
   return error;
 80035da:	8afb      	ldrh	r3, [r7, #22]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	08012e80 	.word	0x08012e80

080035e8 <iapWrite>:
 * @param[in] length Length of the firmware data bloc to be written
 * @return Error code
 **/

error_t iapWrite(ImageContext *context, const uint8_t *data, size_t length, uint8_t flag)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08a      	sub	sp, #40	; 0x28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
 80035f4:	70fb      	strb	r3, [r7, #3]
   size_t writeBlockSize;
   const FlashInfo *memInfo;
   const FlashDriver *flashDriver;

   //Check parameters validity
   if(context == NULL || data == NULL || length == 0)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d005      	beq.n	8003608 <iapWrite+0x20>
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d002      	beq.n	8003608 <iapWrite+0x20>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d101      	bne.n	800360c <iapWrite+0x24>
      return ERROR_INVALID_PARAMETER;
 8003608:	2302      	movs	r3, #2
 800360a:	e0b2      	b.n	8003772 <iapWrite+0x18a>

   //Get memory driver
   flashDriver = ((FlashDesc*)context->slotInfo->flash)->driver;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	627b      	str	r3, [r7, #36]	; 0x24

   //Get memory driver informations
   error = flashDriver->getInfo(&memInfo);
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f107 0214 	add.w	r2, r7, #20
 8003620:	4610      	mov	r0, r2
 8003622:	4798      	blx	r3
 8003624:	4603      	mov	r3, r0
 8003626:	847b      	strh	r3, [r7, #34]	; 0x22
   //Is any error?
   if(error)
 8003628:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <iapWrite+0x4a>
      return error;
 800362e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003630:	e09f      	b.n	8003772 <iapWrite+0x18a>

   //Get memory driver write block size
   writeBlockSize = memInfo->writeSize;
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	61fb      	str	r3, [r7, #28]

   //Temporary data flush required?
   if(flag == 2)
 8003638:	78fb      	ldrb	r3, [r7, #3]
 800363a:	2b02      	cmp	r3, #2
 800363c:	d15c      	bne.n	80036f8 <iapWrite+0x110>
   {
      //Reset temporary buffer data
      memset(tempBuffer, 0x00, sizeof(tempBuffer));
 800363e:	2240      	movs	r2, #64	; 0x40
 8003640:	2100      	movs	r1, #0
 8003642:	484e      	ldr	r0, [pc, #312]	; (800377c <iapWrite+0x194>)
 8003644:	f00c fd1b 	bl	801007e <memset>
      //Reset temporary buffer position
      tempBufferPos = tempBuffer;
 8003648:	4b4d      	ldr	r3, [pc, #308]	; (8003780 <iapWrite+0x198>)
 800364a:	4a4c      	ldr	r2, [pc, #304]	; (800377c <iapWrite+0x194>)
 800364c:	601a      	str	r2, [r3, #0]
      //Reset temporary buffer length
      tempBufferLen = 0;
 800364e:	4b4d      	ldr	r3, [pc, #308]	; (8003784 <iapWrite+0x19c>)
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]
   }

   //Process incomming data
   while(length > 0)
 8003654:	e050      	b.n	80036f8 <iapWrite+0x110>
   {
      //Fill temporary buffer to reach allowed flash memory write block size
      n = MIN(length, writeBlockSize - tempBufferLen);
 8003656:	4b4b      	ldr	r3, [pc, #300]	; (8003784 <iapWrite+0x19c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	69fa      	ldr	r2, [r7, #28]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	4293      	cmp	r3, r2
 8003662:	bf28      	it	cs
 8003664:	4613      	movcs	r3, r2
 8003666:	61bb      	str	r3, [r7, #24]

      //Fill buffer
      memcpy(tempBufferPos, data, n);
 8003668:	4b45      	ldr	r3, [pc, #276]	; (8003780 <iapWrite+0x198>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	68b9      	ldr	r1, [r7, #8]
 8003670:	4618      	mov	r0, r3
 8003672:	f00c fcdc 	bl	801002e <memcpy>
      //Update temporary buffer position
      tempBufferPos += n;
 8003676:	4b42      	ldr	r3, [pc, #264]	; (8003780 <iapWrite+0x198>)
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	4413      	add	r3, r2
 800367e:	4a40      	ldr	r2, [pc, #256]	; (8003780 <iapWrite+0x198>)
 8003680:	6013      	str	r3, [r2, #0]
      //Update temporary buffer length
      tempBufferLen += n;
 8003682:	4b40      	ldr	r3, [pc, #256]	; (8003784 <iapWrite+0x19c>)
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	4413      	add	r3, r2
 800368a:	4a3e      	ldr	r2, [pc, #248]	; (8003784 <iapWrite+0x19c>)
 800368c:	6013      	str	r3, [r2, #0]
      //Advance data pointer
      data += n;
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	4413      	add	r3, r2
 8003694:	60bb      	str	r3, [r7, #8]
      //Remaining bytes to process
      length -= n;
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	607b      	str	r3, [r7, #4]

      //Enought data to be write?
      if(tempBufferLen == writeBlockSize)
 800369e:	4b39      	ldr	r3, [pc, #228]	; (8003784 <iapWrite+0x19c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	69fa      	ldr	r2, [r7, #28]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d127      	bne.n	80036f8 <iapWrite+0x110>
      {
         //Write image data into memory
#if IAP_SINGLE_BANK_SUPPORT == ENABLED
     error = context->iapContext->secondaryMem.driver->write(context->pos, (uint8_t*)tempBuffer, writeBlockSize);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	6910      	ldr	r0, [r2, #16]
 80036b4:	69fa      	ldr	r2, [r7, #28]
 80036b6:	4931      	ldr	r1, [pc, #196]	; (800377c <iapWrite+0x194>)
 80036b8:	4798      	blx	r3
 80036ba:	4603      	mov	r3, r0
 80036bc:	847b      	strh	r3, [r7, #34]	; 0x22
#elif IAP_DUAL_BANK_SUPPORT == ENABLED
     error = context->iapContext->primaryMem.driver->write(context->pos, (uint8_t*)tempBuffer, writeBlockSize);
#endif
         //Is any error?
         if(error)
 80036be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00d      	beq.n	80036e0 <iapWrite+0xf8>
         {
            //Debug message
            TRACE_ERROR("Failed to write image data into external flash memory!\r\n");
 80036c4:	f7fd fcfb 	bl	80010be <osSuspendAllTasks>
 80036c8:	4b2f      	ldr	r3, [pc, #188]	; (8003788 <iapWrite+0x1a0>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	2238      	movs	r2, #56	; 0x38
 80036d0:	2101      	movs	r1, #1
 80036d2:	482e      	ldr	r0, [pc, #184]	; (800378c <iapWrite+0x1a4>)
 80036d4:	f00c fc66 	bl	800ffa4 <fwrite>
 80036d8:	f7fd fcfc 	bl	80010d4 <osResumeAllTasks>
            return error;
 80036dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80036de:	e048      	b.n	8003772 <iapWrite+0x18a>
         }

         //Advance memory write address
         context->pos += writeBlockSize;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	691a      	ldr	r2, [r3, #16]
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	441a      	add	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	611a      	str	r2, [r3, #16]
         //Reset temporary buffer position
         tempBufferPos = tempBuffer;
 80036ec:	4b24      	ldr	r3, [pc, #144]	; (8003780 <iapWrite+0x198>)
 80036ee:	4a23      	ldr	r2, [pc, #140]	; (800377c <iapWrite+0x194>)
 80036f0:	601a      	str	r2, [r3, #0]
         //Reset temporary buffer length
         tempBufferLen = 0;
 80036f2:	4b24      	ldr	r3, [pc, #144]	; (8003784 <iapWrite+0x19c>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]
   while(length > 0)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1ab      	bne.n	8003656 <iapWrite+0x6e>
      }
   }

   //Temporary data write required?
   if(tempBufferLen != 0 && flag == 1)
 80036fe:	4b21      	ldr	r3, [pc, #132]	; (8003784 <iapWrite+0x19c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d034      	beq.n	8003770 <iapWrite+0x188>
 8003706:	78fb      	ldrb	r3, [r7, #3]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d131      	bne.n	8003770 <iapWrite+0x188>
   {
      //Complete buffer with padding to reach minimum allowed write block size
      memset(tempBufferPos, 0x00, writeBlockSize - tempBufferLen);
 800370c:	4b1c      	ldr	r3, [pc, #112]	; (8003780 <iapWrite+0x198>)
 800370e:	6818      	ldr	r0, [r3, #0]
 8003710:	4b1c      	ldr	r3, [pc, #112]	; (8003784 <iapWrite+0x19c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	69fa      	ldr	r2, [r7, #28]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	461a      	mov	r2, r3
 800371a:	2100      	movs	r1, #0
 800371c:	f00c fcaf 	bl	801007e <memset>

      //Write image data into memory
#if IAP_SINGLE_BANK_SUPPORT == ENABLED
      error = context->iapContext->secondaryMem.driver->write(context->pos, (uint8_t*)tempBuffer, writeBlockSize);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	6910      	ldr	r0, [r2, #16]
 800372c:	69fa      	ldr	r2, [r7, #28]
 800372e:	4913      	ldr	r1, [pc, #76]	; (800377c <iapWrite+0x194>)
 8003730:	4798      	blx	r3
 8003732:	4603      	mov	r3, r0
 8003734:	847b      	strh	r3, [r7, #34]	; 0x22
#elif IAP_DUAL_BANK_SUPPORT == ENABLED
      error = context->iapContext->primaryMem.driver->write(context->pos, (uint8_t*)tempBuffer, writeBlockSize);
#endif
      //Is any error?
      if(error)
 8003736:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00d      	beq.n	8003758 <iapWrite+0x170>
      {
         //Debug message
         TRACE_ERROR("Failed to write image data into external flash memory!\r\n");
 800373c:	f7fd fcbf 	bl	80010be <osSuspendAllTasks>
 8003740:	4b11      	ldr	r3, [pc, #68]	; (8003788 <iapWrite+0x1a0>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	2238      	movs	r2, #56	; 0x38
 8003748:	2101      	movs	r1, #1
 800374a:	4810      	ldr	r0, [pc, #64]	; (800378c <iapWrite+0x1a4>)
 800374c:	f00c fc2a 	bl	800ffa4 <fwrite>
 8003750:	f7fd fcc0 	bl	80010d4 <osResumeAllTasks>
         return error;
 8003754:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003756:	e00c      	b.n	8003772 <iapWrite+0x18a>
      }

      //Advance memory write address
      context->pos += writeBlockSize;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	691a      	ldr	r2, [r3, #16]
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	441a      	add	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	611a      	str	r2, [r3, #16]
      //Reset temporary buffer position
      tempBufferPos = tempBuffer;
 8003764:	4b06      	ldr	r3, [pc, #24]	; (8003780 <iapWrite+0x198>)
 8003766:	4a05      	ldr	r2, [pc, #20]	; (800377c <iapWrite+0x194>)
 8003768:	601a      	str	r2, [r3, #0]
      //Reset temporary buffer length
      tempBufferLen = 0;
 800376a:	4b06      	ldr	r3, [pc, #24]	; (8003784 <iapWrite+0x19c>)
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]
   }

   //Successful process
   return NO_ERROR;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3728      	adds	r7, #40	; 0x28
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	20001870 	.word	0x20001870
 8003780:	20000084 	.word	0x20000084
 8003784:	200018b0 	.word	0x200018b0
 8003788:	20000094 	.word	0x20000094
 800378c:	0801268c 	.word	0x0801268c

08003790 <iapGetImageHeaderFromSlot>:
 * @param[out] header Pointer to store the extracted image header.
 * @return Error code.
 **/

error_t iapGetImageHeaderFromSlot(SlotDesc *slot, ImageHeader *header)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b096      	sub	sp, #88	; 0x58
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
   FlashDriver *flashDriver;
   ImageHeader *imgHeader;
   uint8_t buffer[sizeof(ImageHeader)];

   //Check parameter validity
   if(slot == NULL || header == NULL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d002      	beq.n	80037a6 <iapGetImageHeaderFromSlot+0x16>
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <iapGetImageHeaderFromSlot+0x1a>
      return ERROR_INVALID_PARAMETER;
 80037a6:	2302      	movs	r3, #2
 80037a8:	e02c      	b.n	8003804 <iapGetImageHeaderFromSlot+0x74>

   //Point to the slot memory driver
   flashDriver = (FlashDriver*)((FlashDesc*)slot->flash)->driver;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	657b      	str	r3, [r7, #84]	; 0x54

   //Read first slot 64 bytes
   error = flashDriver->read(slot->addr, buffer, sizeof(ImageHeader));
 80037b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6810      	ldr	r0, [r2, #0]
 80037ba:	f107 010c 	add.w	r1, r7, #12
 80037be:	2240      	movs	r2, #64	; 0x40
 80037c0:	4798      	blx	r3
 80037c2:	4603      	mov	r3, r0
 80037c4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
   //Is any error?
   if(error)
 80037c8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <iapGetImageHeaderFromSlot+0x44>
      return ERROR_FAILURE;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e017      	b.n	8003804 <iapGetImageHeaderFromSlot+0x74>

   //Get image header from above buffer
   error = imageGetHeader(buffer, sizeof(ImageHeader), &imgHeader);
 80037d4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80037d8:	f107 030c 	add.w	r3, r7, #12
 80037dc:	2140      	movs	r1, #64	; 0x40
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 fba0 	bl	8003f24 <imageGetHeader>
 80037e4:	4603      	mov	r3, r0
 80037e6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
   //Is any error?
   if(error)
 80037ea:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <iapGetImageHeaderFromSlot+0x66>
      return ERROR_INVALID_HEADER;
 80037f2:	23d4      	movs	r3, #212	; 0xd4
 80037f4:	e006      	b.n	8003804 <iapGetImageHeaderFromSlot+0x74>

   //Save image header
   memcpy(header, imgHeader, sizeof(ImageHeader));
 80037f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037f8:	2240      	movs	r2, #64	; 0x40
 80037fa:	4619      	mov	r1, r3
 80037fc:	6838      	ldr	r0, [r7, #0]
 80037fe:	f00c fc16 	bl	801002e <memcpy>

   //Successful process
   return NO_ERROR;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3758      	adds	r7, #88	; 0x58
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <iapProcessInputImage>:
 * @param[in,out] context Pointer to the Input image context
 * @return Status code
 **/

error_t iapProcessInputImage(ImageContext *context)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
   error_t error;

   //IAP receiving image header state?
   if(context->state == IAP_STATE_RECV_APP_HEADER)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	7e1b      	ldrb	r3, [r3, #24]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d109      	bne.n	8003830 <iapProcessInputImage+0x24>
   {
      //Process image header
      error = iapProcessAppHeader(context);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f967 	bl	8003af0 <iapProcessAppHeader>
 8003822:	4603      	mov	r3, r0
 8003824:	81fb      	strh	r3, [r7, #14]
      //Is any error?
      if(error)
 8003826:	89fb      	ldrh	r3, [r7, #14]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d020      	beq.n	800386e <iapProcessInputImage+0x62>
         return error;
 800382c:	89fb      	ldrh	r3, [r7, #14]
 800382e:	e01f      	b.n	8003870 <iapProcessInputImage+0x64>
   }
   //IAP receiving image data state?
   else if(context->state == IAP_STATE_RECV_APP_DATA)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	7e1b      	ldrb	r3, [r3, #24]
 8003834:	2b02      	cmp	r3, #2
 8003836:	d109      	bne.n	800384c <iapProcessInputImage+0x40>
   {
      //Process image data
      error = iapProcessAppData(context);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 fa1b 	bl	8003c74 <iapProcessAppData>
 800383e:	4603      	mov	r3, r0
 8003840:	81fb      	strh	r3, [r7, #14]
      //Is any error?
      if(error)
 8003842:	89fb      	ldrh	r3, [r7, #14]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d012      	beq.n	800386e <iapProcessInputImage+0x62>
         return error;
 8003848:	89fb      	ldrh	r3, [r7, #14]
 800384a:	e011      	b.n	8003870 <iapProcessInputImage+0x64>
   }
   //IAP receiving image check data state?
   else if(context->state == IAP_STATE_RECV_APP_CHECK)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	7e1b      	ldrb	r3, [r3, #24]
 8003850:	2b03      	cmp	r3, #3
 8003852:	d109      	bne.n	8003868 <iapProcessInputImage+0x5c>
   {
      //Process image check data
      error = iapProcessAppCheck(context);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 fabf 	bl	8003dd8 <iapProcessAppCheck>
 800385a:	4603      	mov	r3, r0
 800385c:	81fb      	strh	r3, [r7, #14]
      //Is any error?
      if(error)
 800385e:	89fb      	ldrh	r3, [r7, #14]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d004      	beq.n	800386e <iapProcessInputImage+0x62>
         return error;
 8003864:	89fb      	ldrh	r3, [r7, #14]
 8003866:	e003      	b.n	8003870 <iapProcessInputImage+0x64>
   }
   else
   {
      //Wrong state
      error = ERROR_WRONG_STATE;
 8003868:	f240 13ff 	movw	r3, #511	; 0x1ff
 800386c:	81fb      	strh	r3, [r7, #14]
   }

   //Successful process
   return NO_ERROR;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <iapProcessOutputImageSingleBank>:
 * @param[in] length Length of the output data chunk.
 * @return Status code
 **/

error_t iapProcessOutputImageSingleBank(ImageContext *context, uint8_t *data, size_t length)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b088      	sub	sp, #32
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
   error_t error;
   size_t n;
   ImageHeader *imgHeader;

   //Check parameters validity
   if(context == NULL || data == NULL || length == 0)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d006      	beq.n	8003898 <iapProcessOutputImageSingleBank+0x20>
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <iapProcessOutputImageSingleBank+0x20>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	f040 8111 	bne.w	8003aba <iapProcessOutputImageSingleBank+0x242>
      return ERROR_INVALID_PARAMETER;
 8003898:	2302      	movs	r3, #2
 800389a:	e113      	b.n	8003ac4 <iapProcessOutputImageSingleBank+0x24c>

   //Process the incoming data
   while(length > 0)
   {
      //The buffer can hold at most it size
      n = MIN(length, sizeof(context->buffer) - context->bufferLen);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80038a2:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	4293      	cmp	r3, r2
 80038aa:	bf28      	it	cs
 80038ac:	4613      	movcs	r3, r2
 80038ae:	61fb      	str	r3, [r7, #28]

      //Copy the data to the buffer
      memcpy(context->bufferPos, data, n);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038b6:	69fa      	ldr	r2, [r7, #28]
 80038b8:	68b9      	ldr	r1, [r7, #8]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f00c fbb7 	bl	801002e <memcpy>

      //Advance the data pointer
      data += n;
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	4413      	add	r3, r2
 80038c6:	60bb      	str	r3, [r7, #8]
      //Remaining bytes to process
      length -= n;
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	607b      	str	r3, [r7, #4]
      //Update buffer data length
      context->bufferLen += n;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	441a      	add	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
      //Update buffer data free position
      context->bufferPos += n;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	441a      	add	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      //Format new Header
      if(context->state == 0)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	7e1b      	ldrb	r3, [r3, #24]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d14f      	bne.n	8003998 <iapProcessOutputImageSingleBank+0x120>
      {
         //Point to image header
         imgHeader = (ImageHeader*)context->buffer;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	3319      	adds	r3, #25
 80038fc:	617b      	str	r3, [r7, #20]

         //Debug message
         TRACE_DEBUG_ARRAY("HEADER: ", (uint8_t*)imgHeader, sizeof(ImageHeader));

         //Set new header image index
         imgHeader->imgIndex = context->imgIdx;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	881b      	ldrh	r3, [r3, #0]
 8003902:	461a      	mov	r2, r3
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	605a      	str	r2, [r3, #4]

         //Save original image data size
         context->firmwareLength = imgHeader->dataSize;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	f8d3 200d 	ldr.w	r2, [r3, #13]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	60da      	str	r2, [r3, #12]
         if(imgHeader->dataSize % context->cipherEngine.ivLen != 0)
            imgHeader->dataSize += context->cipherEngine.ivLen - (imgHeader->dataSize % context->cipherEngine.ivLen);
#endif

         //Compute new image header crc
         CRC32_HASH_ALGO->compute((uint8_t*)imgHeader, sizeof(ImageHeader) - CRC32_DIGEST_SIZE, (uint8_t*)&imgHeader->headCrc);
 8003912:	4b6e      	ldr	r3, [pc, #440]	; (8003acc <iapProcessOutputImageSingleBank+0x254>)
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	323c      	adds	r2, #60	; 0x3c
 800391a:	213c      	movs	r1, #60	; 0x3c
 800391c:	6978      	ldr	r0, [r7, #20]
 800391e:	4798      	blx	r3

         //Update application check computation tag (could be integrity tag or
         //authentification tag or hash signature tag)
         error = verifyProcess(&context->verifyContext, (uint8_t*)&imgHeader->headCrc, CRC32_DIGEST_SIZE);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f103 00a4 	add.w	r0, r3, #164	; 0xa4
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	333c      	adds	r3, #60	; 0x3c
 800392a:	2204      	movs	r2, #4
 800392c:	4619      	mov	r1, r3
 800392e:	f000 fe99 	bl	8004664 <verifyProcess>
 8003932:	4603      	mov	r3, r0
 8003934:	837b      	strh	r3, [r7, #26]
         //Is any error?
         if(error)
 8003936:	8b7b      	ldrh	r3, [r7, #26]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <iapProcessOutputImageSingleBank+0xc8>
            return error;
 800393c:	8b7b      	ldrh	r3, [r7, #26]
 800393e:	e0c1      	b.n	8003ac4 <iapProcessOutputImageSingleBank+0x24c>

         //Set external memory start write address (selected slot start address)
         context->firmwareAddr = context->slotInfo->addr;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	609a      	str	r2, [r3, #8]
         context->pos = context->firmwareAddr;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	611a      	str	r2, [r3, #16]

         //Write new image header (with flush)
         error = iapWrite(context, (uint8_t*)imgHeader, sizeof(ImageHeader), 2);
 8003954:	2302      	movs	r3, #2
 8003956:	2240      	movs	r2, #64	; 0x40
 8003958:	6979      	ldr	r1, [r7, #20]
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f7ff fe44 	bl	80035e8 <iapWrite>
 8003960:	4603      	mov	r3, r0
 8003962:	837b      	strh	r3, [r7, #26]
         if(error)
 8003964:	8b7b      	ldrh	r3, [r7, #26]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <iapProcessOutputImageSingleBank+0xf6>
            return error;
 800396a:	8b7b      	ldrh	r3, [r7, #26]
 800396c:	e0aa      	b.n	8003ac4 <iapProcessOutputImageSingleBank+0x24c>
         if(error)
            return error;
#endif

         //Reset buffer position
         context->bufferPos = context->buffer;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f103 0219 	add.w	r2, r3, #25
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
         //Reset buffer data
         memset(context->buffer, 0x00, sizeof(context->buffer));
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	3319      	adds	r3, #25
 800397e:	2280      	movs	r2, #128	; 0x80
 8003980:	2100      	movs	r1, #0
 8003982:	4618      	mov	r0, r3
 8003984:	f00c fb7b 	bl	801007e <memset>
         //Reset buffer data length
         context->bufferLen = 0;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

         //Change state
         context->state = 1;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2201      	movs	r2, #1
 8003994:	761a      	strb	r2, [r3, #24]
 8003996:	e090      	b.n	8003aba <iapProcessOutputImageSingleBank+0x242>
      }
      //Encrypt data
      else
      {
         //Reached end of image firmware binary section?
         if(context->written + context->bufferLen == context->firmwareLength)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	695a      	ldr	r2, [r3, #20]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80039a2:	441a      	add	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d149      	bne.n	8003a40 <iapProcessOutputImageSingleBank+0x1c8>
            error = iapWrite(context, context->buffer, context->bufferLen, 1);
            if(error)
               return error;
#else
            //Update image check data computation tag (crc tag)
            error = verifyProcess(&context->verifyContext, context->buffer, context->bufferLen);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f103 00a4 	add.w	r0, r3, #164	; 0xa4
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f103 0119 	add.w	r1, r3, #25
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80039be:	461a      	mov	r2, r3
 80039c0:	f000 fe50 	bl	8004664 <verifyProcess>
 80039c4:	4603      	mov	r3, r0
 80039c6:	837b      	strh	r3, [r7, #26]
            if(error)
 80039c8:	8b7b      	ldrh	r3, [r7, #26]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <iapProcessOutputImageSingleBank+0x15a>
               return error;
 80039ce:	8b7b      	ldrh	r3, [r7, #26]
 80039d0:	e078      	b.n	8003ac4 <iapProcessOutputImageSingleBank+0x24c>

            //Write image data block into memory
            error = iapWrite(context, context->buffer, context->bufferLen, 0);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f103 0119 	add.w	r1, r3, #25
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80039de:	2300      	movs	r3, #0
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f7ff fe01 	bl	80035e8 <iapWrite>
 80039e6:	4603      	mov	r3, r0
 80039e8:	837b      	strh	r3, [r7, #26]
            if(error)
 80039ea:	8b7b      	ldrh	r3, [r7, #26]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <iapProcessOutputImageSingleBank+0x17c>
               return error;
 80039f0:	8b7b      	ldrh	r3, [r7, #26]
 80039f2:	e067      	b.n	8003ac4 <iapProcessOutputImageSingleBank+0x24c>
#endif

            //Update written data
            context->written += n;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	695a      	ldr	r2, [r3, #20]
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	441a      	add	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	615a      	str	r2, [r3, #20]

            //Finalize image check data computation tag (crc tag)
            error = verifyGenerateCheckData(&context->verifyContext, context->buffer,
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f103 00a4 	add.w	r0, r3, #164	; 0xa4
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f103 0119 	add.w	r1, r3, #25
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f8d3 21c0 	ldr.w	r2, [r3, #448]	; 0x1c0
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	33a0      	adds	r3, #160	; 0xa0
 8003a16:	f000 fec7 	bl	80047a8 <verifyGenerateCheckData>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	837b      	strh	r3, [r7, #26]
               context->verifyContext.imageCheckDigestSize, &context->bufferLen);

            //Write new image check data tag (crc tag)
            error = iapWrite(context, context->buffer, context->bufferLen, 1);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f103 0119 	add.w	r1, r3, #25
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f7ff fddb 	bl	80035e8 <iapWrite>
 8003a32:	4603      	mov	r3, r0
 8003a34:	837b      	strh	r3, [r7, #26]
            if(error)
 8003a36:	8b7b      	ldrh	r3, [r7, #26]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d03e      	beq.n	8003aba <iapProcessOutputImageSingleBank+0x242>
               return error;
 8003a3c:	8b7b      	ldrh	r3, [r7, #26]
 8003a3e:	e041      	b.n	8003ac4 <iapProcessOutputImageSingleBank+0x24c>
            memcpy(context->buffer, context->bufferPos, context->bufferLen);
            //Reset buffer position
            context->bufferPos = context->buffer + context->bufferLen;
#else
            //Update image check data computation tag (crc tag)
            error = verifyProcess(&context->verifyContext, context->buffer, context->bufferLen);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f103 00a4 	add.w	r0, r3, #164	; 0xa4
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f103 0119 	add.w	r1, r3, #25
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003a52:	461a      	mov	r2, r3
 8003a54:	f000 fe06 	bl	8004664 <verifyProcess>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	837b      	strh	r3, [r7, #26]
            if(error)
 8003a5c:	8b7b      	ldrh	r3, [r7, #26]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <iapProcessOutputImageSingleBank+0x1ee>
               return error;
 8003a62:	8b7b      	ldrh	r3, [r7, #26]
 8003a64:	e02e      	b.n	8003ac4 <iapProcessOutputImageSingleBank+0x24c>

            //Write encrypted image data into memory
            error = iapWrite(context, context->buffer, context->bufferLen, 0);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f103 0119 	add.w	r1, r3, #25
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003a72:	2300      	movs	r3, #0
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f7ff fdb7 	bl	80035e8 <iapWrite>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	837b      	strh	r3, [r7, #26]
            if(error)
 8003a7e:	8b7b      	ldrh	r3, [r7, #26]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <iapProcessOutputImageSingleBank+0x210>
               return error;
 8003a84:	8b7b      	ldrh	r3, [r7, #26]
 8003a86:	e01d      	b.n	8003ac4 <iapProcessOutputImageSingleBank+0x24c>

            //Update context buffer length
            context->written += context->bufferLen;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	695a      	ldr	r2, [r3, #20]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003a92:	441a      	add	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	615a      	str	r2, [r3, #20]

            //Update buffer data length
            context->bufferLen = 0;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
            //Reset buffer position
            context->bufferPos = context->buffer;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f103 0219 	add.w	r2, r3, #25
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
            //Reset buffer
            memset(context->buffer, 0, sizeof(context->buffer));
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	3319      	adds	r3, #25
 8003ab0:	2280      	movs	r2, #128	; 0x80
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f00c fae2 	bl	801007e <memset>
   while(length > 0)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f47f aeed 	bne.w	800389c <iapProcessOutputImageSingleBank+0x24>
         }
      }
   }

   //Successful process
   return NO_ERROR;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3720      	adds	r7, #32
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	08012e80 	.word	0x08012e80

08003ad0 <iapProcessOutputImage>:
 * @param[in] length Length of the output data chunk.
 * @return Status code
 **/

error_t iapProcessOutputImage(ImageContext *context, uint8_t *data, size_t length)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
#if (IAP_SINGLE_BANK_SUPPORT == ENABLED)
   return iapProcessOutputImageSingleBank(context, data, length);
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	68b9      	ldr	r1, [r7, #8]
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f7ff fec9 	bl	8003878 <iapProcessOutputImageSingleBank>
 8003ae6:	4603      	mov	r3, r0
#else
   return iapProcessOutputImageDualBank(context, data, length);
#endif
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <iapProcessAppHeader>:
 * @param[in,out] context Pointer to the IAP context
 * @return Error code.
 **/

error_t iapProcessAppHeader(ImageContext *context)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b088      	sub	sp, #32
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
   const FlashInfo *memInfo;
   ImageContext *outputImg;
   uint_t n;

   //Check parameter validity
   if (context == NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <iapProcessAppHeader+0x12>
      return ERROR_INVALID_PARAMETER;
 8003afe:	2302      	movs	r3, #2
 8003b00:	e0ad      	b.n	8003c5e <iapProcessAppHeader+0x16e>

   //Initialize variable
   imgHeader = NULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	613b      	str	r3, [r7, #16]
   n = 0;
 8003b06:	2300      	movs	r3, #0
 8003b08:	61fb      	str	r3, [r7, #28]

   //Is buffer full enough to contains IAP image header?
   if (context->bufferLen >= sizeof(ImageHeader))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003b10:	2b3f      	cmp	r3, #63	; 0x3f
 8003b12:	f240 80a3 	bls.w	8003c5c <iapProcessAppHeader+0x16c>
   {
      //Debug message
      TRACE_DEBUG("Processing firmware image header...\r\n");

      //Get input image header
      error = imageGetHeader(context->buffer, context->bufferLen, &imgHeader);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f103 0019 	add.w	r0, r3, #25
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003b22:	f107 0210 	add.w	r2, r7, #16
 8003b26:	4619      	mov	r1, r3
 8003b28:	f000 f9fc 	bl	8003f24 <imageGetHeader>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	837b      	strh	r3, [r7, #26]
      //Is any error?
      if(error)
 8003b30:	8b7b      	ldrh	r3, [r7, #26]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <iapProcessAppHeader+0x4a>
      {
         //Debug message
         TRACE_INFO("Input image header is invalid!\r\n");
         //Forward error
         return error;
 8003b36:	8b7b      	ldrh	r3, [r7, #26]
 8003b38:	e091      	b.n	8003c5e <iapProcessAppHeader+0x16e>
         return ERROR_FAILURE;
     }
#endif

      //Check header image type
      if(imgHeader->imgType != IMAGE_TYPE_APP)
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	7a1b      	ldrb	r3, [r3, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00d      	beq.n	8003b5e <iapProcessAppHeader+0x6e>
      {
         //Debug message
         TRACE_ERROR("Invalid header image type!\r\n");
 8003b42:	f7fd fabc 	bl	80010be <osSuspendAllTasks>
 8003b46:	4b48      	ldr	r3, [pc, #288]	; (8003c68 <iapProcessAppHeader+0x178>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	221c      	movs	r2, #28
 8003b4e:	2101      	movs	r1, #1
 8003b50:	4846      	ldr	r0, [pc, #280]	; (8003c6c <iapProcessAppHeader+0x17c>)
 8003b52:	f00c fa27 	bl	800ffa4 <fwrite>
 8003b56:	f7fd fabd 	bl	80010d4 <osResumeAllTasks>
         return ERROR_FAILURE;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e07f      	b.n	8003c5e <iapProcessAppHeader+0x16e>
      }

      //Get memory driver infos
      error = context->iapContext->primaryMem.driver->getInfo(&memInfo);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f107 020c 	add.w	r2, r7, #12
 8003b6a:	4610      	mov	r0, r2
 8003b6c:	4798      	blx	r3
 8003b6e:	4603      	mov	r3, r0
 8003b70:	837b      	strh	r3, [r7, #26]
      //Is any error?
      if(error)
 8003b72:	8b7b      	ldrh	r3, [r7, #26]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <iapProcessAppHeader+0x8c>
         return error;
 8003b78:	8b7b      	ldrh	r3, [r7, #26]
 8003b7a:	e070      	b.n	8003c5e <iapProcessAppHeader+0x16e>

      //Point to output image context
      outputImg = (ImageContext*)&context->iapContext->imageOutput;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 8003b84:	617b      	str	r3, [r7, #20]

#if (IAP_SINGLE_BANK_SUPPORT == ENABLED)
      //Would firmware overcome the external flash memory slot size?
      if (imgHeader->dataSize + sizeof(ImageHeader) + outputImg->verifyContext.verifySettings.integrityAlgo->digestSize > outputImg->slotInfo->size)
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	f8d3 200d 	ldr.w	r2, [r3, #13]
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	4413      	add	r3, r2
 8003b96:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d90e      	bls.n	8003bc4 <iapProcessAppHeader+0xd4>
      //Would firmware overcome the flash bank 2 size?
      if (imgHeader->dataSize > context->iapContext->imageOutput.slotInfo->size)
#endif
      {
         //Debug message
         TRACE_ERROR("Image is bigger than the flash memory slot!\r\n");
 8003ba6:	f7fd fa8a 	bl	80010be <osSuspendAllTasks>
 8003baa:	4b2f      	ldr	r3, [pc, #188]	; (8003c68 <iapProcessAppHeader+0x178>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	222d      	movs	r2, #45	; 0x2d
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	482e      	ldr	r0, [pc, #184]	; (8003c70 <iapProcessAppHeader+0x180>)
 8003bb6:	f00c f9f5 	bl	800ffa4 <fwrite>
 8003bba:	f7fd fa8b 	bl	80010d4 <osResumeAllTasks>
         //Forward error
         return ERROR_BUFFER_OVERFLOW;
 8003bbe:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8003bc2:	e04c      	b.n	8003c5e <iapProcessAppHeader+0x16e>
      }

      //Save application firmware length
      context->firmwareLength = imgHeader->dataSize;
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	f8d3 200d 	ldr.w	r2, [r3, #13]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	60da      	str	r2, [r3, #12]
      outputImg->firmwareLength = imgHeader->dataSize;
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	f8d3 200d 	ldr.w	r2, [r3, #13]
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	60da      	str	r2, [r3, #12]

#if (IAP_SINGLE_BANK_SUPPORT == ENABLED)
      //Process parsed image input header for later output image generation
      error = iapProcessOutputImage(&context->iapContext->imageOutput, (uint8_t*)imgHeader, sizeof(ImageHeader));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 8003be0:	6939      	ldr	r1, [r7, #16]
 8003be2:	2240      	movs	r2, #64	; 0x40
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7ff ff73 	bl	8003ad0 <iapProcessOutputImage>
 8003bea:	4603      	mov	r3, r0
 8003bec:	837b      	strh	r3, [r7, #26]
      if(error)
 8003bee:	8b7b      	ldrh	r3, [r7, #26]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <iapProcessAppHeader+0x108>
         return error;
 8003bf4:	8b7b      	ldrh	r3, [r7, #26]
 8003bf6:	e032      	b.n	8003c5e <iapProcessAppHeader+0x16e>
#endif

      //Update application check computation tag (could be integrity tag or
      //authentification tag or hash signature tag)
      error = verifyProcess(&context->verifyContext, (uint8_t*)&imgHeader->headCrc, CRC32_DIGEST_SIZE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f103 00a4 	add.w	r0, r3, #164	; 0xa4
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	333c      	adds	r3, #60	; 0x3c
 8003c02:	2204      	movs	r2, #4
 8003c04:	4619      	mov	r1, r3
 8003c06:	f000 fd2d 	bl	8004664 <verifyProcess>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	837b      	strh	r3, [r7, #26]
      //Is any error?
      if(error)
 8003c0e:	8b7b      	ldrh	r3, [r7, #26]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <iapProcessAppHeader+0x128>
         return error;
 8003c14:	8b7b      	ldrh	r3, [r7, #26]
 8003c16:	e022      	b.n	8003c5e <iapProcessAppHeader+0x16e>


      //Remove header from buffer
      n = context->bufferLen - sizeof(ImageHeader);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003c1e:	3b40      	subs	r3, #64	; 0x40
 8003c20:	61fb      	str	r3, [r7, #28]
      memcpy(context->buffer, context->buffer + sizeof(ImageHeader), n);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f103 0019 	add.w	r0, r3, #25
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3319      	adds	r3, #25
 8003c2c:	3340      	adds	r3, #64	; 0x40
 8003c2e:	69fa      	ldr	r2, [r7, #28]
 8003c30:	4619      	mov	r1, r3
 8003c32:	f00c f9fc 	bl	801002e <memcpy>
      context->bufferPos -= sizeof(ImageHeader);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c3c:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      context->bufferLen -= sizeof(ImageHeader);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003c4c:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

      //Change IAP state
      context->state = IAP_STATE_RECV_APP_DATA;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2202      	movs	r2, #2
 8003c5a:	761a      	strb	r2, [r3, #24]
   }

   //Successful process
   return NO_ERROR;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3720      	adds	r7, #32
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	20000094 	.word	0x20000094
 8003c6c:	080126c8 	.word	0x080126c8
 8003c70:	080126e8 	.word	0x080126e8

08003c74 <iapProcessAppData>:
 * @param[in,out] context Pointer to the IAP context
 * @return Error code.
 **/

error_t iapProcessAppData(ImageContext *context)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
   error_t error;
   uint_t dataLength;
   static ImageContext *imgOutput;

   //Check parameter validity
   if (context == NULL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <iapProcessAppData+0x12>
      return ERROR_INVALID_PARAMETER;
 8003c82:	2302      	movs	r3, #2
 8003c84:	e0a2      	b.n	8003dcc <iapProcessAppData+0x158>

   //Point to image output context
   imgOutput = (ImageContext*) &context->iapContext->imageOutput;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 8003c8e:	4a51      	ldr	r2, [pc, #324]	; (8003dd4 <iapProcessAppData+0x160>)
 8003c90:	6013      	str	r3, [r2, #0]
   //Receiving image firmware data?
   if(1)
   {
#endif
      //Is buffer full or full enought to contain last application data?
      if ((context->bufferLen == sizeof(context->buffer)) ||
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003c98:	2b80      	cmp	r3, #128	; 0x80
 8003c9a:	d00a      	beq.n	8003cb2 <iapProcessAppData+0x3e>
         (context->written + context->bufferLen >= context->firmwareLength))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	695a      	ldr	r2, [r3, #20]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003ca6:	441a      	add	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
      if ((context->bufferLen == sizeof(context->buffer)) ||
 8003cac:	429a      	cmp	r2, r3
 8003cae:	f0c0 808c 	bcc.w	8003dca <iapProcessAppData+0x156>
      {
         //We must not process more data than the firmware length
         dataLength = MIN(context->bufferLen, context->firmwareLength - context->written);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68da      	ldr	r2, [r3, #12]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	1ad2      	subs	r2, r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	bf28      	it	cs
 8003cc6:	4613      	movcs	r3, r2
 8003cc8:	60fb      	str	r3, [r7, #12]

         //Update application check computation tag (could be integrity tag or
         //authentification tag or hash signature tag)
         error = verifyProcess(&context->verifyContext, context->buffer, dataLength);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f103 00a4 	add.w	r0, r3, #164	; 0xa4
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3319      	adds	r3, #25
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	f000 fcc4 	bl	8004664 <verifyProcess>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	817b      	strh	r3, [r7, #10]
         //Is any error?
         if (error)
 8003ce0:	897b      	ldrh	r3, [r7, #10]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <iapProcessAppData+0x76>
            return error;
 8003ce6:	897b      	ldrh	r3, [r7, #10]
 8003ce8:	e070      	b.n	8003dcc <iapProcessAppData+0x158>
               return error;
         }
#endif

         //Process output image data
         error = iapProcessOutputImage(imgOutput, context->buffer, dataLength);
 8003cea:	4b3a      	ldr	r3, [pc, #232]	; (8003dd4 <iapProcessAppData+0x160>)
 8003cec:	6818      	ldr	r0, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	3319      	adds	r3, #25
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	f7ff feeb 	bl	8003ad0 <iapProcessOutputImage>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	817b      	strh	r3, [r7, #10]
         //Is any error?
         if(error)
 8003cfe:	897b      	ldrh	r3, [r7, #10]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <iapProcessAppData+0x94>
            return error;
 8003d04:	897b      	ldrh	r3, [r7, #10]
 8003d06:	e061      	b.n	8003dcc <iapProcessAppData+0x158>

         context->written += dataLength;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	695a      	ldr	r2, [r3, #20]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	441a      	add	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	615a      	str	r2, [r3, #20]

         //Is buffer contains remaining data?
         if (context->bufferLen != dataLength)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d02b      	beq.n	8003d78 <iapProcessAppData+0x104>
         {
            //Discard already processed data
            memset(context->buffer, 0, dataLength);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	3319      	adds	r3, #25
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	2100      	movs	r1, #0
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f00c f9a8 	bl	801007e <memset>

            //Put remaining data at buffer start
            memcpy(context->buffer, context->buffer + dataLength,
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f103 0019 	add.w	r0, r3, #25
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f103 0219 	add.w	r2, r3, #25
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	18d1      	adds	r1, r2, r3
               context->bufferLen - dataLength);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
            memcpy(context->buffer, context->buffer + dataLength,
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	461a      	mov	r2, r3
 8003d4a:	f00c f970 	bl	801002e <memcpy>
            //Update buffer position and length
            context->bufferPos = context->buffer + (context->bufferLen - dataLength);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f103 0219 	add.w	r2, r3, #25
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	1acb      	subs	r3, r1, r3
 8003d5e:	441a      	add	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
            context->bufferLen = context->bufferLen - dataLength;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	1ad2      	subs	r2, r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8003d76:	e010      	b.n	8003d9a <iapProcessAppData+0x126>
         }
         else
         {
            //Reset buffer
            memset(context->buffer, 0, sizeof(context->buffer));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3319      	adds	r3, #25
 8003d7c:	2280      	movs	r2, #128	; 0x80
 8003d7e:	2100      	movs	r1, #0
 8003d80:	4618      	mov	r0, r3
 8003d82:	f00c f97c 	bl	801007e <memset>
            context->bufferPos = context->buffer;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f103 0219 	add.w	r2, r3, #25
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
            context->bufferLen = 0;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
         }

         //Is application data all received?
         if (context->written == context->firmwareLength)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	695a      	ldr	r2, [r3, #20]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d111      	bne.n	8003dca <iapProcessAppData+0x156>
         {
            //Change IAP state
            context->state = IAP_STATE_RECV_APP_CHECK;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2203      	movs	r2, #3
 8003daa:	761a      	strb	r2, [r3, #24]

            //Still data to process?
            if (context->bufferLen > 0)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d009      	beq.n	8003dca <iapProcessAppData+0x156>
            {
               //Process IAP check app data
               error = iapProcessAppCheck(context);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f80e 	bl	8003dd8 <iapProcessAppCheck>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	817b      	strh	r3, [r7, #10]
               //Is any error?
               if (error)
 8003dc0:	897b      	ldrh	r3, [r7, #10]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <iapProcessAppData+0x156>
                  return error;
 8003dc6:	897b      	ldrh	r3, [r7, #10]
 8003dc8:	e000      	b.n	8003dcc <iapProcessAppData+0x158>
         }
      }
   }

   //Successfull process
   return NO_ERROR;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	200018b4 	.word	0x200018b4

08003dd8 <iapProcessAppCheck>:
 * @param[in,out] context Pointer to the IAP context
 * @return Error code.
 **/

error_t iapProcessAppCheck(ImageContext *context)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
   //Check parameter validity
   if (context == NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <iapProcessAppCheck+0x12>
      return ERROR_INVALID_PARAMETER;
 8003de6:	2302      	movs	r3, #2
 8003de8:	e058      	b.n	8003e9c <iapProcessAppCheck+0xc4>

   //Is buffer full enough to contains IAP image check data?
   //(could be integrity/authentification tag or signature)
   if (context->checkDataLen + context->bufferLen <= context->checkDataSize)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f8d3 23c8 	ldr.w	r2, [r3, #968]	; 0x3c8
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003df6:	441a      	add	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d83c      	bhi.n	8003e7c <iapProcessAppCheck+0xa4>
   {
      //Save image check data block
      memcpy(context->checkDataPos, context->buffer, context->bufferLen);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f103 0119 	add.w	r1, r3, #25
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e14:	461a      	mov	r2, r3
 8003e16:	f00c f90a 	bl	801002e <memcpy>
      context->checkDataPos += context->bufferLen;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e26:	441a      	add	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
      context->checkDataLen += context->bufferLen;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f8d3 23c8 	ldr.w	r2, [r3, #968]	; 0x3c8
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e3a:	441a      	add	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

      //Reset buffer
      memset(context->buffer, 0, sizeof(context->buffer));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	3319      	adds	r3, #25
 8003e46:	2280      	movs	r2, #128	; 0x80
 8003e48:	2100      	movs	r1, #0
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f00c f917 	bl	801007e <memset>
      context->bufferPos = context->buffer;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f103 0219 	add.w	r2, r3, #25
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      context->bufferLen = 0;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

      //Is image check data fully received?
      if (context->checkDataLen == context->checkDataSize)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f8d3 23c8 	ldr.w	r2, [r3, #968]	; 0x3c8
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d112      	bne.n	8003e9a <iapProcessAppCheck+0xc2>
      {
         //Change IAP state
         context->state = IAP_STATE_VALIDATE_APP;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2204      	movs	r2, #4
 8003e78:	761a      	strb	r2, [r3, #24]
 8003e7a:	e00e      	b.n	8003e9a <iapProcessAppCheck+0xc2>
      }
   }
   else
   {
      //Debug message
      TRACE_ERROR("Image check data is bigger than expected!\r\n");
 8003e7c:	f7fd f91f 	bl	80010be <osSuspendAllTasks>
 8003e80:	4b08      	ldr	r3, [pc, #32]	; (8003ea4 <iapProcessAppCheck+0xcc>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	222b      	movs	r2, #43	; 0x2b
 8003e88:	2101      	movs	r1, #1
 8003e8a:	4807      	ldr	r0, [pc, #28]	; (8003ea8 <iapProcessAppCheck+0xd0>)
 8003e8c:	f00c f88a 	bl	800ffa4 <fwrite>
 8003e90:	f7fd f920 	bl	80010d4 <osResumeAllTasks>
      return ERROR_BUFFER_OVERFLOW;
 8003e94:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8003e98:	e000      	b.n	8003e9c <iapProcessAppCheck+0xc4>
   }

   //Successful process
   return NO_ERROR;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	20000094 	.word	0x20000094
 8003ea8:	08012718 	.word	0x08012718

08003eac <imageCheckHeader>:
 * @param[in] header Pointeur to the internal image header to be checked
 * @return Status code
 **/

error_t imageCheckHeader(ImageHeader *header)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
   error_t error;
   uint32_t computedCrc;

   //Check parameter vailidty
   if(header == NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <imageCheckHeader+0x12>
      return ERROR_INVALID_PARAMETER;
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e028      	b.n	8003f10 <imageCheckHeader+0x64>

   //Compute image header crc
   error = CRC32_HASH_ALGO->compute((uint8_t*)header, sizeof(ImageHeader) - CRC32_DIGEST_SIZE, (uint8_t*)&computedCrc);
 8003ebe:	4b16      	ldr	r3, [pc, #88]	; (8003f18 <imageCheckHeader+0x6c>)
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	f107 0208 	add.w	r2, r7, #8
 8003ec6:	213c      	movs	r1, #60	; 0x3c
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	4798      	blx	r3
 8003ecc:	4603      	mov	r3, r0
 8003ece:	81fb      	strh	r3, [r7, #14]
   if(error)
 8003ed0:	89fb      	ldrh	r3, [r7, #14]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00d      	beq.n	8003ef2 <imageCheckHeader+0x46>
   {
      //Debug message
      TRACE_ERROR("Failed to compute image header crc!\r\n");
 8003ed6:	f7fd f8f2 	bl	80010be <osSuspendAllTasks>
 8003eda:	4b10      	ldr	r3, [pc, #64]	; (8003f1c <imageCheckHeader+0x70>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	2225      	movs	r2, #37	; 0x25
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	480e      	ldr	r0, [pc, #56]	; (8003f20 <imageCheckHeader+0x74>)
 8003ee6:	f00c f85d 	bl	800ffa4 <fwrite>
 8003eea:	f7fd f8f3 	bl	80010d4 <osResumeAllTasks>
      return error;
 8003eee:	89fb      	ldrh	r3, [r7, #14]
 8003ef0:	e00e      	b.n	8003f10 <imageCheckHeader+0x64>
   }

   //Check image header integrity
   if(header->headCrc != computedCrc)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d001      	beq.n	8003f00 <imageCheckHeader+0x54>
      return ERROR_INVALID_HEADER;
 8003efc:	23d4      	movs	r3, #212	; 0xd4
 8003efe:	e007      	b.n	8003f10 <imageCheckHeader+0x64>

   //Check image header version
   if(header->headVers != IMAGE_HEADER_VERSION)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f08:	d001      	beq.n	8003f0e <imageCheckHeader+0x62>
      return ERROR_INVALID_VERSION;
 8003f0a:	23f3      	movs	r3, #243	; 0xf3
 8003f0c:	e000      	b.n	8003f10 <imageCheckHeader+0x64>

   //Successful process
   return NO_ERROR;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	08012e80 	.word	0x08012e80
 8003f1c:	20000094 	.word	0x20000094
 8003f20:	08012744 	.word	0x08012744

08003f24 <imageGetHeader>:
 * @param[out] header Pointeur to the header structure to be returned
 * @return Status code
 **/

error_t imageGetHeader(uint8_t *buffer, size_t bufferLen, ImageHeader **header)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
   error_t error;
   ImageHeader *tempHeader;

   //Check parameters validity
   if(buffer == NULL || bufferLen == 0)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d002      	beq.n	8003f3c <imageGetHeader+0x18>
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d101      	bne.n	8003f40 <imageGetHeader+0x1c>
      return ERROR_INVALID_PARAMETER;
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	e014      	b.n	8003f6a <imageGetHeader+0x46>

   if(bufferLen < sizeof(ImageHeader))
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2b3f      	cmp	r3, #63	; 0x3f
 8003f44:	d801      	bhi.n	8003f4a <imageGetHeader+0x26>
      return ERROR_INVALID_LENGTH;
 8003f46:	23ec      	movs	r3, #236	; 0xec
 8003f48:	e00f      	b.n	8003f6a <imageGetHeader+0x46>

   //Point to the image header
   tempHeader = (ImageHeader *)buffer;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	617b      	str	r3, [r7, #20]

   //Check image header
   error = imageCheckHeader(tempHeader);
 8003f4e:	6978      	ldr	r0, [r7, #20]
 8003f50:	f7ff ffac 	bl	8003eac <imageCheckHeader>
 8003f54:	4603      	mov	r3, r0
 8003f56:	827b      	strh	r3, [r7, #18]
   //Is any error?
   if(error)
 8003f58:	8a7b      	ldrh	r3, [r7, #18]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <imageGetHeader+0x3e>
      return error;
 8003f5e:	8a7b      	ldrh	r3, [r7, #18]
 8003f60:	e003      	b.n	8003f6a <imageGetHeader+0x46>

   //Save image header
   *header = (ImageHeader*) tempHeader;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	601a      	str	r2, [r3, #0]

   //Successful process
   return NO_ERROR;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
	...

08003f74 <stm32wlxxFlashDriverInit>:
 * @brief Initialize Flash Memory.
 * @return Error code
 **/

error_t stm32wlxxFlashDriverInit(void)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	af00      	add	r7, sp, #0
   //Debug message
   TRACE_INFO("Initializing %s memory...\r\n", STM32WLxx_FLASH_NAME);

   //Wait for last flash operation on flash
   FLASH_WaitForLastOperation(50);
 8003f78:	2032      	movs	r0, #50	; 0x32
 8003f7a:	f002 f823 	bl	8005fc4 <FLASH_WaitForLastOperation>
   //Clear all flash error flags
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8003f7e:	4b06      	ldr	r3, [pc, #24]	; (8003f98 <stm32wlxxFlashDriverInit+0x24>)
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	4a05      	ldr	r2, [pc, #20]	; (8003f98 <stm32wlxxFlashDriverInit+0x24>)
 8003f84:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003f88:	6193      	str	r3, [r2, #24]
 8003f8a:	4b03      	ldr	r3, [pc, #12]	; (8003f98 <stm32wlxxFlashDriverInit+0x24>)
 8003f8c:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8003f90:	611a      	str	r2, [r3, #16]

   //Successfull process
   return NO_ERROR;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	58004000 	.word	0x58004000

08003f9c <stm32wlxxFlashDriverGetInfo>:
 * @param[in,out] info Pointeur to the Memory information structure to be returned
 * @return Error code
 **/

error_t stm32wlxxFlashDriverGetInfo(const FlashInfo **info)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
   //Set Memory information pointeur
   *info = (const FlashInfo*) &stm32wlxxFlashDriverInfo;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a04      	ldr	r2, [pc, #16]	; (8003fb8 <stm32wlxxFlashDriverGetInfo+0x1c>)
 8003fa8:	601a      	str	r2, [r3, #0]

   //Successfull process
   return NO_ERROR;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bc80      	pop	{r7}
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	08012ec0 	.word	0x08012ec0

08003fbc <stm32wlxxFlashDriverGetStatus>:
 * @param[in,out] status Pointeur to the Memory status to be returned
 * @return Error code
 **/

error_t stm32wlxxFlashDriverGetStatus(FlashStatus *status)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
   uint32_t flag;

   //Check parameter vailidity
   if(status == NULL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <stm32wlxxFlashDriverGetStatus+0x12>
      return ERROR_INVALID_PARAMETER;
 8003fca:	2302      	movs	r3, #2
 8003fcc:	e027      	b.n	800401e <stm32wlxxFlashDriverGetStatus+0x62>

   do
   {
      //Get Flash Memory error flags status
      flag = __HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS);
 8003fce:	4b16      	ldr	r3, [pc, #88]	; (8004028 <stm32wlxxFlashDriverGetStatus+0x6c>)
 8003fd0:	699a      	ldr	r2, [r3, #24]
 8003fd2:	4b16      	ldr	r3, [pc, #88]	; (800402c <stm32wlxxFlashDriverGetStatus+0x70>)
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	4a15      	ldr	r2, [pc, #84]	; (800402c <stm32wlxxFlashDriverGetStatus+0x70>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	bf0c      	ite	eq
 8003fdc:	2301      	moveq	r3, #1
 8003fde:	2300      	movne	r3, #0
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	60fb      	str	r3, [r7, #12]
      //Is any error flag set?
      if(flag != RESET)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <stm32wlxxFlashDriverGetStatus+0x36>
      {
         //Set Flash memory status
         *status = FLASH_STATUS_ERR;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2202      	movs	r2, #2
 8003fee:	701a      	strb	r2, [r3, #0]
         break;
 8003ff0:	e014      	b.n	800401c <stm32wlxxFlashDriverGetStatus+0x60>
      }

      //Get Flash Memory busy flags
      flag = __HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY);
 8003ff2:	4b0d      	ldr	r3, [pc, #52]	; (8004028 <stm32wlxxFlashDriverGetStatus+0x6c>)
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ffa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ffe:	bf0c      	ite	eq
 8004000:	2301      	moveq	r3, #1
 8004002:	2300      	movne	r3, #0
 8004004:	b2db      	uxtb	r3, r3
 8004006:	60fb      	str	r3, [r7, #12]
      //Is busy flag set?
      if(flag != RESET)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <stm32wlxxFlashDriverGetStatus+0x5a>
      {
         //Set Flash memory status
         *status = FLASH_STATUS_BUSY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	701a      	strb	r2, [r3, #0]
         break;
 8004014:	e002      	b.n	800401c <stm32wlxxFlashDriverGetStatus+0x60>
      }

      //Set Flash memory status
      *status = FLASH_STATUS_OK;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	701a      	strb	r2, [r3, #0]
   }while(0);

   //Successfull process
   return NO_ERROR;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	bc80      	pop	{r7}
 8004026:	4770      	bx	lr
 8004028:	58004000 	.word	0x58004000
 800402c:	c000c3fa 	.word	0xc000c3fa

08004030 <stm32wlxxFlashDriverWrite>:
 * @param[in] length Number of data bytes to write in
 * @return Error code
 **/

error_t stm32wlxxFlashDriverWrite(uint32_t address, uint8_t* data, size_t length)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b08a      	sub	sp, #40	; 0x28
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
   const uint8_t *p;
   uint8_t word[STM32WLxx_FLASH_WRITE_SIZE];
   size_t n;

   //Precompute the top address
   topAddress = STM32WLxx_FLASH_ADDR + STM32WLxx_FLASH_SIZE;
 800403c:	4b30      	ldr	r3, [pc, #192]	; (8004100 <stm32wlxxFlashDriverWrite+0xd0>)
 800403e:	623b      	str	r3, [r7, #32]

   //Check address validity
   if((address < STM32WLxx_FLASH_ADDR || address >= topAddress) ||
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004046:	d308      	bcc.n	800405a <stm32wlxxFlashDriverWrite+0x2a>
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	6a3b      	ldr	r3, [r7, #32]
 800404c:	429a      	cmp	r2, r3
 800404e:	d204      	bcs.n	800405a <stm32wlxxFlashDriverWrite+0x2a>
      (address % sizeof(uint32_t) != 0))
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f003 0303 	and.w	r3, r3, #3
   if((address < STM32WLxx_FLASH_ADDR || address >= topAddress) ||
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <stm32wlxxFlashDriverWrite+0x2e>
      return ERROR_INVALID_PARAMETER;
 800405a:	2302      	movs	r3, #2
 800405c:	e04c      	b.n	80040f8 <stm32wlxxFlashDriverWrite+0xc8>

   //Check parameters validity (is data in flash)
   if(data == NULL || address + length > topAddress)
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d005      	beq.n	8004070 <stm32wlxxFlashDriverWrite+0x40>
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4413      	add	r3, r2
 800406a:	6a3a      	ldr	r2, [r7, #32]
 800406c:	429a      	cmp	r2, r3
 800406e:	d201      	bcs.n	8004074 <stm32wlxxFlashDriverWrite+0x44>
      return ERROR_INVALID_PARAMETER;
 8004070:	2302      	movs	r3, #2
 8004072:	e041      	b.n	80040f8 <stm32wlxxFlashDriverWrite+0xc8>
   TRACE_INFO("Writing data (%d bytes) at 0x%08X\r\n", length, address);
   TRACE_DEBUG_ARRAY("WRITE DATA: ", data, length);


   //Cast data pointer
   p = (const uint8_t*) data;
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	627b      	str	r3, [r7, #36]	; 0x24

   //Perform write operation
   while(length > 0)
 8004078:	e03a      	b.n	80040f0 <stm32wlxxFlashDriverWrite+0xc0>
   {
      //Prevent to write more than allowed flash write bytes at a time
      n = MIN(sizeof(word), length);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b08      	cmp	r3, #8
 800407e:	bf28      	it	cs
 8004080:	2308      	movcs	r3, #8
 8004082:	61fb      	str	r3, [r7, #28]

      //Check if remaining bytes is less than required flash write size
      if(n < sizeof(word))
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	2b07      	cmp	r3, #7
 8004088:	d806      	bhi.n	8004098 <stm32wlxxFlashDriverWrite+0x68>
         memset(word, 0, sizeof(word));
 800408a:	f107 0310 	add.w	r3, r7, #16
 800408e:	2208      	movs	r2, #8
 8004090:	2100      	movs	r1, #0
 8004092:	4618      	mov	r0, r3
 8004094:	f00b fff3 	bl	801007e <memset>

      //Copy n bytes
      memcpy(word, p, n);
 8004098:	f107 0310 	add.w	r3, r7, #16
 800409c:	69fa      	ldr	r2, [r7, #28]
 800409e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040a0:	4618      	mov	r0, r3
 80040a2:	f00b ffc4 	bl	801002e <memcpy>

      //Program 32-bit word in flash memory
      error = stm32wlxxFlashDriverWriteWord(address, (uint32_t)word);
 80040a6:	f107 0310 	add.w	r3, r7, #16
 80040aa:	4619      	mov	r1, r3
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f000 f9b7 	bl	8004420 <stm32wlxxFlashDriverWriteWord>
 80040b2:	4603      	mov	r3, r0
 80040b4:	837b      	strh	r3, [r7, #26]
      if(error)
 80040b6:	8b7b      	ldrh	r3, [r7, #26]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00d      	beq.n	80040d8 <stm32wlxxFlashDriverWrite+0xa8>
      {
         TRACE_ERROR("Failed to write in flash memory!\r\n");
 80040bc:	f7fc ffff 	bl	80010be <osSuspendAllTasks>
 80040c0:	4b10      	ldr	r3, [pc, #64]	; (8004104 <stm32wlxxFlashDriverWrite+0xd4>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	2222      	movs	r2, #34	; 0x22
 80040c8:	2101      	movs	r1, #1
 80040ca:	480f      	ldr	r0, [pc, #60]	; (8004108 <stm32wlxxFlashDriverWrite+0xd8>)
 80040cc:	f00b ff6a 	bl	800ffa4 <fwrite>
 80040d0:	f7fd f800 	bl	80010d4 <osResumeAllTasks>
         return error;
 80040d4:	8b7b      	ldrh	r3, [r7, #26]
 80040d6:	e00f      	b.n	80040f8 <stm32wlxxFlashDriverWrite+0xc8>
      }

      //Advance data pointer
      p += n;
 80040d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	4413      	add	r3, r2
 80040de:	627b      	str	r3, [r7, #36]	; 0x24
      //Increment word address
      address += n;
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	4413      	add	r3, r2
 80040e6:	60fb      	str	r3, [r7, #12]
      //Remaining bytes to be written
      length -= n;
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	607b      	str	r3, [r7, #4]
   while(length > 0)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1c1      	bne.n	800407a <stm32wlxxFlashDriverWrite+0x4a>
   }

   //Successful process
   return NO_ERROR;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3728      	adds	r7, #40	; 0x28
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	08040000 	.word	0x08040000
 8004104:	20000094 	.word	0x20000094
 8004108:	08012788 	.word	0x08012788

0800410c <stm32wlxxFlashDriverRead>:
 * @param[in] length Number of data bytes to read out
 * @return Error code
 **/

error_t stm32wlxxFlashDriverRead(uint32_t address, uint8_t* data, size_t length)
{
 800410c:	b480      	push	{r7}
 800410e:	b087      	sub	sp, #28
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
   uint_t i;
   uint32_t topAddress;

   //Precompute the top address
   topAddress = STM32WLxx_FLASH_ADDR + STM32WLxx_FLASH_SIZE;
 8004118:	4b17      	ldr	r3, [pc, #92]	; (8004178 <stm32wlxxFlashDriverRead+0x6c>)
 800411a:	613b      	str	r3, [r7, #16]

   //Check address validity
   if(address < STM32WLxx_FLASH_ADDR || address >= topAddress)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004122:	d303      	bcc.n	800412c <stm32wlxxFlashDriverRead+0x20>
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	429a      	cmp	r2, r3
 800412a:	d301      	bcc.n	8004130 <stm32wlxxFlashDriverRead+0x24>
      return ERROR_INVALID_PARAMETER;
 800412c:	2302      	movs	r3, #2
 800412e:	e01e      	b.n	800416e <stm32wlxxFlashDriverRead+0x62>

   //Check parameters validity (is data in flash)
   if(data == NULL || address + length > topAddress)
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d005      	beq.n	8004142 <stm32wlxxFlashDriverRead+0x36>
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4413      	add	r3, r2
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	429a      	cmp	r2, r3
 8004140:	d201      	bcs.n	8004146 <stm32wlxxFlashDriverRead+0x3a>
      return ERROR_INVALID_PARAMETER;
 8004142:	2302      	movs	r3, #2
 8004144:	e013      	b.n	800416e <stm32wlxxFlashDriverRead+0x62>

   //Perform read operation
   for(i = 0; i < length; i++)
 8004146:	2300      	movs	r3, #0
 8004148:	617b      	str	r3, [r7, #20]
 800414a:	e00b      	b.n	8004164 <stm32wlxxFlashDriverRead+0x58>
   {
      *((uint8_t *)data + i) = *(uint8_t*)address;
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	68b9      	ldr	r1, [r7, #8]
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	440b      	add	r3, r1
 8004154:	7812      	ldrb	r2, [r2, #0]
 8004156:	701a      	strb	r2, [r3, #0]
      address++;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	3301      	adds	r3, #1
 800415c:	60fb      	str	r3, [r7, #12]
   for(i = 0; i < length; i++)
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	3301      	adds	r3, #1
 8004162:	617b      	str	r3, [r7, #20]
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	429a      	cmp	r2, r3
 800416a:	d3ef      	bcc.n	800414c <stm32wlxxFlashDriverRead+0x40>
   }

   //Successfull process
   return NO_ERROR;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	371c      	adds	r7, #28
 8004172:	46bd      	mov	sp, r7
 8004174:	bc80      	pop	{r7}
 8004176:	4770      	bx	lr
 8004178:	08040000 	.word	0x08040000

0800417c <stm32wlxxFlashDriverErase>:
 * @param[in] address Address in Memory to start erasing from
 * @param[in] length Number of data bytes to be erased
 * @return Error code
 **/
error_t stm32wlxxFlashDriverErase(uint32_t address, size_t length)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b088      	sub	sp, #32
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
   uint32_t topAddress;
   int_t firstSectorNumber;
   uint32_t lastSectorAddr;
   int_t lastSectorNumber;

   error = NO_ERROR;
 8004186:	2300      	movs	r3, #0
 8004188:	837b      	strh	r3, [r7, #26]

   //Precompute the top address
   topAddress = STM32WLxx_FLASH_ADDR + STM32WLxx_FLASH_SIZE;
 800418a:	4b29      	ldr	r3, [pc, #164]	; (8004230 <stm32wlxxFlashDriverErase+0xb4>)
 800418c:	617b      	str	r3, [r7, #20]

   //Check address validity
   if((address < STM32WLxx_FLASH_ADDR || address >= topAddress) ||
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004194:	d308      	bcc.n	80041a8 <stm32wlxxFlashDriverErase+0x2c>
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	429a      	cmp	r2, r3
 800419c:	d204      	bcs.n	80041a8 <stm32wlxxFlashDriverErase+0x2c>
      (address % sizeof(uint32_t) != 0))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f003 0303 	and.w	r3, r3, #3
   if((address < STM32WLxx_FLASH_ADDR || address >= topAddress) ||
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <stm32wlxxFlashDriverErase+0x30>
      return ERROR_INVALID_PARAMETER;
 80041a8:	2302      	movs	r3, #2
 80041aa:	e03c      	b.n	8004226 <stm32wlxxFlashDriverErase+0xaa>

   //Check parameters validity (is data in flash)
   if((length == 0) || (address + length > topAddress))
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d005      	beq.n	80041be <stm32wlxxFlashDriverErase+0x42>
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	4413      	add	r3, r2
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d201      	bcs.n	80041c2 <stm32wlxxFlashDriverErase+0x46>
      return ERROR_INVALID_PARAMETER;
 80041be:	2302      	movs	r3, #2
 80041c0:	e031      	b.n	8004226 <stm32wlxxFlashDriverErase+0xaa>

   //Get the number of the first sector to erase
   firstSectorNumber = stm32wlxxFlashGetSector(address);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f9a0 	bl	8004508 <stm32wlxxFlashGetSector>
 80041c8:	6138      	str	r0, [r7, #16]

   if(address + length == topAddress)
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	4413      	add	r3, r2
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d102      	bne.n	80041dc <stm32wlxxFlashDriverErase+0x60>
   {
      //Set last sector number as the flash sector total number
      lastSectorNumber = STM32WLxx_FLASH_SECTOR_NUMBER;
 80041d6:	2380      	movs	r3, #128	; 0x80
 80041d8:	61fb      	str	r3, [r7, #28]
 80041da:	e014      	b.n	8004206 <stm32wlxxFlashDriverErase+0x8a>
   }
   else
   {
      //Get the address of the boundary sector (not to be erased)
      error = stm32wlxxFlashDriverGetNextSector(address+length, &lastSectorAddr);
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	4413      	add	r3, r2
 80041e2:	f107 020c 	add.w	r2, r7, #12
 80041e6:	4611      	mov	r1, r2
 80041e8:	4618      	mov	r0, r3
 80041ea:	f000 f823 	bl	8004234 <stm32wlxxFlashDriverGetNextSector>
 80041ee:	4603      	mov	r3, r0
 80041f0:	837b      	strh	r3, [r7, #26]
      //Is any error?
      if(error)
 80041f2:	8b7b      	ldrh	r3, [r7, #26]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <stm32wlxxFlashDriverErase+0x80>
         return error;
 80041f8:	8b7b      	ldrh	r3, [r7, #26]
 80041fa:	e014      	b.n	8004226 <stm32wlxxFlashDriverErase+0xaa>

      //The last sector to erase is the last flash bank 1 sector
      lastSectorNumber = stm32wlxxFlashGetSector(lastSectorAddr);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 f982 	bl	8004508 <stm32wlxxFlashGetSector>
 8004204:	61f8      	str	r0, [r7, #28]
   }

   //Erase sectors of the flash bank 1 (the only one flash bank)
   error = stm32wlxxFlashDriverEraseSector(STM32WLxx_FLASH_BANK1_ID, firstSectorNumber, lastSectorNumber-firstSectorNumber);
 8004206:	6939      	ldr	r1, [r7, #16]
 8004208:	69fa      	ldr	r2, [r7, #28]
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	461a      	mov	r2, r3
 8004210:	2001      	movs	r0, #1
 8004212:	f000 f88d 	bl	8004330 <stm32wlxxFlashDriverEraseSector>
 8004216:	4603      	mov	r3, r0
 8004218:	837b      	strh	r3, [r7, #26]
   //Is any error?
   if(error)
 800421a:	8b7b      	ldrh	r3, [r7, #26]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <stm32wlxxFlashDriverErase+0xa8>
      return error;
 8004220:	8b7b      	ldrh	r3, [r7, #26]
 8004222:	e000      	b.n	8004226 <stm32wlxxFlashDriverErase+0xaa>

   //Successful process
   return NO_ERROR;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3720      	adds	r7, #32
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	08040000 	.word	0x08040000

08004234 <stm32wlxxFlashDriverGetNextSector>:
 * @brief Get address of the neighbouring sector
 * @return Error code
 **/

error_t stm32wlxxFlashDriverGetNextSector(uint32_t address, uint32_t *sectorAddr)
{
 8004234:	b480      	push	{r7}
 8004236:	b089      	sub	sp, #36	; 0x24
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
   uint_t i;
   uint_t j;
   SectorsGroup *sg;
   uint32_t sAddr = 0xFFFFFFFF;
 800423e:	f04f 33ff 	mov.w	r3, #4294967295
 8004242:	617b      	str	r3, [r7, #20]
   uint32_t lastSectorAddr;

   lastSectorAddr = sectorsList[SECTORS_LIST_LEN-1].addr +
 8004244:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
      (sectorsList[SECTORS_LIST_LEN-1].size * (sectorsList[SECTORS_LIST_LEN-1].nb - 1));
 8004248:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800424c:	2380      	movs	r3, #128	; 0x80
 800424e:	3b01      	subs	r3, #1
 8004250:	fb01 f303 	mul.w	r3, r1, r3
   lastSectorAddr = sectorsList[SECTORS_LIST_LEN-1].addr +
 8004254:	4413      	add	r3, r2
 8004256:	613b      	str	r3, [r7, #16]

   //Check parameters validity
   if(address < STM32WLxx_FLASH_ADDR || address > lastSectorAddr || sectorAddr == NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800425e:	d306      	bcc.n	800426e <stm32wlxxFlashDriverGetNextSector+0x3a>
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	429a      	cmp	r2, r3
 8004266:	d802      	bhi.n	800426e <stm32wlxxFlashDriverGetNextSector+0x3a>
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <stm32wlxxFlashDriverGetNextSector+0x3e>
      return ERROR_INVALID_PARAMETER;
 800426e:	2302      	movs	r3, #2
 8004270:	e044      	b.n	80042fc <stm32wlxxFlashDriverGetNextSector+0xc8>

   //Loop through sectors list
   for(i = 0; i < SECTORS_LIST_LEN && sAddr == 0xFFFFFFFF; i++)
 8004272:	2300      	movs	r3, #0
 8004274:	61fb      	str	r3, [r7, #28]
 8004276:	e036      	b.n	80042e6 <stm32wlxxFlashDriverGetNextSector+0xb2>
   {
      //Point to the current sectors group
      sg = (SectorsGroup *) &sectorsList[i];
 8004278:	69fa      	ldr	r2, [r7, #28]
 800427a:	4613      	mov	r3, r2
 800427c:	005b      	lsls	r3, r3, #1
 800427e:	4413      	add	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4a21      	ldr	r2, [pc, #132]	; (8004308 <stm32wlxxFlashDriverGetNextSector+0xd4>)
 8004284:	4413      	add	r3, r2
 8004286:	60fb      	str	r3, [r7, #12]

      //Is address in current sector group
      if(address <= sg->addr + sg->size*sg->nb)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	68f9      	ldr	r1, [r7, #12]
 8004292:	6889      	ldr	r1, [r1, #8]
 8004294:	fb01 f303 	mul.w	r3, r1, r3
 8004298:	4413      	add	r3, r2
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	429a      	cmp	r2, r3
 800429e:	d81f      	bhi.n	80042e0 <stm32wlxxFlashDriverGetNextSector+0xac>
      {
         //Loop through sectors group list
         for(j = 0; j < sg->nb; j++)
 80042a0:	2300      	movs	r3, #0
 80042a2:	61bb      	str	r3, [r7, #24]
 80042a4:	e017      	b.n	80042d6 <stm32wlxxFlashDriverGetNextSector+0xa2>
         {
            //Is address located in current sector?
            if(address <= sg->addr + j*sg->size)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	69b9      	ldr	r1, [r7, #24]
 80042b0:	fb01 f303 	mul.w	r3, r1, r3
 80042b4:	4413      	add	r3, r2
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d809      	bhi.n	80042d0 <stm32wlxxFlashDriverGetNextSector+0x9c>
            {
               //Set next sector address
               sAddr = sg->addr + j*sg->size;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	69b9      	ldr	r1, [r7, #24]
 80042c6:	fb01 f303 	mul.w	r3, r1, r3
 80042ca:	4413      	add	r3, r2
 80042cc:	617b      	str	r3, [r7, #20]
               break;
 80042ce:	e007      	b.n	80042e0 <stm32wlxxFlashDriverGetNextSector+0xac>
         for(j = 0; j < sg->nb; j++)
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	3301      	adds	r3, #1
 80042d4:	61bb      	str	r3, [r7, #24]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	69ba      	ldr	r2, [r7, #24]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d3e2      	bcc.n	80042a6 <stm32wlxxFlashDriverGetNextSector+0x72>
   for(i = 0; i < SECTORS_LIST_LEN && sAddr == 0xFFFFFFFF; i++)
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	3301      	adds	r3, #1
 80042e4:	61fb      	str	r3, [r7, #28]
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d103      	bne.n	80042f4 <stm32wlxxFlashDriverGetNextSector+0xc0>
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f2:	d0c1      	beq.n	8004278 <stm32wlxxFlashDriverGetNextSector+0x44>
         }
      }
   }

   //Save next sector addr
   *sectorAddr = sAddr;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	601a      	str	r2, [r3, #0]

   //Succesfull process
   return NO_ERROR;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3724      	adds	r7, #36	; 0x24
 8004300:	46bd      	mov	sp, r7
 8004302:	bc80      	pop	{r7}
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	08012eb4 	.word	0x08012eb4

0800430c <stm32wlxxFlashDriverIsSectorAddr>:
 * @brief Determine if a given address is contained within a sector
 * @return boolean
 **/

bool_t stm32wlxxFlashDriverIsSectorAddr(uint32_t address)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
   int_t sector;

   //Get Flash memory sector number
   sector = stm32wlxxFlashGetSector(address);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 f8f7 	bl	8004508 <stm32wlxxFlashGetSector>
 800431a:	60f8      	str	r0, [r7, #12]

   //Is given address match a sector start address?
   if(sector >= 0)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2b00      	cmp	r3, #0
 8004320:	db01      	blt.n	8004326 <stm32wlxxFlashDriverIsSectorAddr+0x1a>
      return TRUE;
 8004322:	2301      	movs	r3, #1
 8004324:	e000      	b.n	8004328 <stm32wlxxFlashDriverIsSectorAddr+0x1c>
   else
      return FALSE;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <stm32wlxxFlashDriverEraseSector>:
 * @param[in] nbSectors Number of Flash memory sector to be erased
 * @return Error code
 **/

error_t stm32wlxxFlashDriverEraseSector(uint32_t bankID, uint32_t firstSector, size_t nbSectors)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b08a      	sub	sp, #40	; 0x28
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
   HAL_StatusTypeDef status;
   FLASH_EraseInitTypeDef EraseInitStruct;
   uint32_t sectorError;

   //Check parameter validity
   if((firstSector >= STM32WLxx_FLASH_SECTOR_NUMBER) || (nbSectors == 0) ||
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	2b7f      	cmp	r3, #127	; 0x7f
 8004340:	d80b      	bhi.n	800435a <stm32wlxxFlashDriverEraseSector+0x2a>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d008      	beq.n	800435a <stm32wlxxFlashDriverEraseSector+0x2a>
      ((firstSector + nbSectors - 1) >= STM32WLxx_FLASH_SECTOR_NUMBER) ||
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4413      	add	r3, r2
 800434e:	3b01      	subs	r3, #1
   if((firstSector >= STM32WLxx_FLASH_SECTOR_NUMBER) || (nbSectors == 0) ||
 8004350:	2b7f      	cmp	r3, #127	; 0x7f
 8004352:	d802      	bhi.n	800435a <stm32wlxxFlashDriverEraseSector+0x2a>
      ((firstSector + nbSectors - 1) >= STM32WLxx_FLASH_SECTOR_NUMBER) ||
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d001      	beq.n	800435e <stm32wlxxFlashDriverEraseSector+0x2e>
      (bankID != STM32WLxx_FLASH_BANK1_ID))
      return ERROR_INVALID_PARAMETER;
 800435a:	2302      	movs	r3, #2
 800435c:	e054      	b.n	8004408 <stm32wlxxFlashDriverEraseSector+0xd8>

   //Start of exception handling block
   do
   {
      //Allow access to Flash control registers and user False
      status = HAL_FLASH_Unlock();
 800435e:	f001 fdf5 	bl	8005f4c <HAL_FLASH_Unlock>
 8004362:	4603      	mov	r3, r0
 8004364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      //Is any error?
      if (status != HAL_OK)
 8004368:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00c      	beq.n	800438a <stm32wlxxFlashDriverEraseSector+0x5a>
      {
         //Debug message
         TRACE_ERROR("Flash Control Register unlock failed!\r\n");
 8004370:	f7fc fea5 	bl	80010be <osSuspendAllTasks>
 8004374:	4b26      	ldr	r3, [pc, #152]	; (8004410 <stm32wlxxFlashDriverEraseSector+0xe0>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	2227      	movs	r2, #39	; 0x27
 800437c:	2101      	movs	r1, #1
 800437e:	4825      	ldr	r0, [pc, #148]	; (8004414 <stm32wlxxFlashDriverEraseSector+0xe4>)
 8004380:	f00b fe10 	bl	800ffa4 <fwrite>
 8004384:	f7fc fea6 	bl	80010d4 <osResumeAllTasks>
         break;
 8004388:	e036      	b.n	80043f8 <stm32wlxxFlashDriverEraseSector+0xc8>
      }

      //Set flash erase settings
      EraseInitStruct.TypeErase    = FLASH_TYPEERASE_PAGES;
 800438a:	2302      	movs	r3, #2
 800438c:	61bb      	str	r3, [r7, #24]
      EraseInitStruct.Page       = firstSector;
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	61fb      	str	r3, [r7, #28]
      EraseInitStruct.NbPages    = nbSectors;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	623b      	str	r3, [r7, #32]

      //Wait for the last flash operation
      FLASH_WaitForLastOperation((uint32_t)5000U);
 8004396:	f241 3088 	movw	r0, #5000	; 0x1388
 800439a:	f001 fe13 	bl	8005fc4 <FLASH_WaitForLastOperation>

      //Erase the specified Flash sector(s)
      status = HAL_FLASHEx_Erase(&EraseInitStruct, &sectorError);
 800439e:	f107 0214 	add.w	r2, r7, #20
 80043a2:	f107 0318 	add.w	r3, r7, #24
 80043a6:	4611      	mov	r1, r2
 80043a8:	4618      	mov	r0, r3
 80043aa:	f001 fed1 	bl	8006150 <HAL_FLASHEx_Erase>
 80043ae:	4603      	mov	r3, r0
 80043b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

      //Is any error?
      if(status != HAL_OK)
 80043b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00b      	beq.n	80043d4 <stm32wlxxFlashDriverEraseSector+0xa4>
      {
         //Debug message
         TRACE_ERROR("Failed to erase flash sector(s) %ld, error = 0x%08lX!\r\n", firstSector, sectorError);
 80043bc:	f7fc fe7f 	bl	80010be <osSuspendAllTasks>
 80043c0:	4b13      	ldr	r3, [pc, #76]	; (8004410 <stm32wlxxFlashDriverEraseSector+0xe0>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68d8      	ldr	r0, [r3, #12]
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	68ba      	ldr	r2, [r7, #8]
 80043ca:	4913      	ldr	r1, [pc, #76]	; (8004418 <stm32wlxxFlashDriverEraseSector+0xe8>)
 80043cc:	f00b fd58 	bl	800fe80 <fiprintf>
 80043d0:	f7fc fe80 	bl	80010d4 <osResumeAllTasks>
      }

      //Disable the Flash option control register access (recommended to protect
      //the option Bytes against possible unwanted operations)
      if(HAL_FLASH_Lock() != HAL_OK)
 80043d4:	f001 fddc 	bl	8005f90 <HAL_FLASH_Lock>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00c      	beq.n	80043f8 <stm32wlxxFlashDriverEraseSector+0xc8>
      {
         //Debug message
         TRACE_ERROR("Flash Control Register lock failed!\r\n");
 80043de:	f7fc fe6e 	bl	80010be <osSuspendAllTasks>
 80043e2:	4b0b      	ldr	r3, [pc, #44]	; (8004410 <stm32wlxxFlashDriverEraseSector+0xe0>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	2225      	movs	r2, #37	; 0x25
 80043ea:	2101      	movs	r1, #1
 80043ec:	480b      	ldr	r0, [pc, #44]	; (800441c <stm32wlxxFlashDriverEraseSector+0xec>)
 80043ee:	f00b fdd9 	bl	800ffa4 <fwrite>
 80043f2:	f7fc fe6f 	bl	80010d4 <osResumeAllTasks>
         break;
 80043f6:	bf00      	nop
      }
   }while(0);

   //Return status code
   return (status == HAL_OK) ? NO_ERROR : ERROR_WRITE_FAILED;
 80043f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <stm32wlxxFlashDriverEraseSector+0xd4>
 8004400:	2300      	movs	r3, #0
 8004402:	e001      	b.n	8004408 <stm32wlxxFlashDriverEraseSector+0xd8>
 8004404:	f240 2309 	movw	r3, #521	; 0x209
}
 8004408:	4618      	mov	r0, r3
 800440a:	3728      	adds	r7, #40	; 0x28
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	20000094 	.word	0x20000094
 8004414:	080127ac 	.word	0x080127ac
 8004418:	080127d4 	.word	0x080127d4
 800441c:	0801280c 	.word	0x0801280c

08004420 <stm32wlxxFlashDriverWriteWord>:
 * @param[in] word 32-bit word to write in Flash memory
 * @return Error code
 **/

error_t stm32wlxxFlashDriverWriteWord(uint32_t address, uint32_t word)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b08a      	sub	sp, #40	; 0x28
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
   uint32_t topAddress;
   HAL_StatusTypeDef status;
   FLASH_EraseInitTypeDef EraseInitStruct;

   //Precompute the top address
   topAddress = STM32WLxx_FLASH_ADDR + STM32WLxx_FLASH_SIZE;
 800442a:	4b33      	ldr	r3, [pc, #204]	; (80044f8 <stm32wlxxFlashDriverWriteWord+0xd8>)
 800442c:	623b      	str	r3, [r7, #32]

   //Check parameters validity (is data in flash)
   if((address + sizeof(uint32_t) >= topAddress) ||
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	3304      	adds	r3, #4
 8004432:	6a3a      	ldr	r2, [r7, #32]
 8004434:	429a      	cmp	r2, r3
 8004436:	d904      	bls.n	8004442 <stm32wlxxFlashDriverWriteWord+0x22>
      (address % sizeof(uint32_t) != 0))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f003 0303 	and.w	r3, r3, #3
   if((address + sizeof(uint32_t) >= topAddress) ||
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <stm32wlxxFlashDriverWriteWord+0x26>
      return ERROR_INVALID_PARAMETER;
 8004442:	2302      	movs	r3, #2
 8004444:	e053      	b.n	80044ee <stm32wlxxFlashDriverWriteWord+0xce>

   //Unlock FLASH
   HAL_FLASH_Unlock();
 8004446:	f001 fd81 	bl	8005f4c <HAL_FLASH_Unlock>

   do
   {
      //Get flash sector number according to the given wirte address
      // (-1 if it doesn't match a flash sector start address)
      flashSector = stm32wlxxFlashGetSector(address);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f85c 	bl	8004508 <stm32wlxxFlashGetSector>
 8004450:	61f8      	str	r0, [r7, #28]

      //Is write address match a flash sector start address?
      if(flashSector >= 0)
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	2b00      	cmp	r3, #0
 8004456:	db25      	blt.n	80044a4 <stm32wlxxFlashDriverWriteWord+0x84>
      {
         //Set flash erase settings
         EraseInitStruct.TypeErase    = FLASH_TYPEERASE_PAGES;
 8004458:	2302      	movs	r3, #2
 800445a:	60fb      	str	r3, [r7, #12]
         EraseInitStruct.Page       = flashSector;
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	613b      	str	r3, [r7, #16]
         EraseInitStruct.NbPages    = 1;
 8004460:	2301      	movs	r3, #1
 8004462:	617b      	str	r3, [r7, #20]

         //Wait for the last flash operation
         FLASH_WaitForLastOperation((uint32_t)5000U);
 8004464:	f241 3088 	movw	r0, #5000	; 0x1388
 8004468:	f001 fdac 	bl	8005fc4 <FLASH_WaitForLastOperation>

         //Erase the sector
         status = HAL_FLASHEx_Erase(&EraseInitStruct, &sectorError);
 800446c:	f107 0218 	add.w	r2, r7, #24
 8004470:	f107 030c 	add.w	r3, r7, #12
 8004474:	4611      	mov	r1, r2
 8004476:	4618      	mov	r0, r3
 8004478:	f001 fe6a 	bl	8006150 <HAL_FLASHEx_Erase>
 800447c:	4603      	mov	r3, r0
 800447e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
         if(status != HAL_OK)
 8004482:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00c      	beq.n	80044a4 <stm32wlxxFlashDriverWriteWord+0x84>
         {
            //Debug message
            TRACE_ERROR("Flash erase failed!\r\n");
 800448a:	f7fc fe18 	bl	80010be <osSuspendAllTasks>
 800448e:	4b1b      	ldr	r3, [pc, #108]	; (80044fc <stm32wlxxFlashDriverWriteWord+0xdc>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	2215      	movs	r2, #21
 8004496:	2101      	movs	r1, #1
 8004498:	4819      	ldr	r0, [pc, #100]	; (8004500 <stm32wlxxFlashDriverWriteWord+0xe0>)
 800449a:	f00b fd83 	bl	800ffa4 <fwrite>
 800449e:	f7fc fe19 	bl	80010d4 <osResumeAllTasks>
            break;
 80044a2:	e01a      	b.n	80044da <stm32wlxxFlashDriverWriteWord+0xba>

      //Write word (64bits) into flash
      // Becareful !!!
      // - If FLASH_TYPEPROGRAM_DOUBLEWORD type program -> Data parameter MUST be the 64bits data value
      // - If FLASH_TYPEPROGRAM_FAST type program -> Data parameter MUST be the the address of data
      status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, *((uint64_t*)word));
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044aa:	6879      	ldr	r1, [r7, #4]
 80044ac:	2001      	movs	r0, #1
 80044ae:	f001 fd09 	bl	8005ec4 <HAL_FLASH_Program>
 80044b2:	4603      	mov	r3, r0
 80044b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      if(status != HAL_OK)
 80044b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00c      	beq.n	80044da <stm32wlxxFlashDriverWriteWord+0xba>
      {
         //Debug message
         TRACE_ERROR("Flash program failed!\r\n");
 80044c0:	f7fc fdfd 	bl	80010be <osSuspendAllTasks>
 80044c4:	4b0d      	ldr	r3, [pc, #52]	; (80044fc <stm32wlxxFlashDriverWriteWord+0xdc>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	2217      	movs	r2, #23
 80044cc:	2101      	movs	r1, #1
 80044ce:	480d      	ldr	r0, [pc, #52]	; (8004504 <stm32wlxxFlashDriverWriteWord+0xe4>)
 80044d0:	f00b fd68 	bl	800ffa4 <fwrite>
 80044d4:	f7fc fdfe 	bl	80010d4 <osResumeAllTasks>
         break;
 80044d8:	bf00      	nop
      }
   }while(0);

   //Lock FLASH
   HAL_FLASH_Lock();
 80044da:	f001 fd59 	bl	8005f90 <HAL_FLASH_Lock>

   //Return error code
   return (status != HAL_OK)? ERROR_FAILURE : NO_ERROR;
 80044de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	bf14      	ite	ne
 80044e6:	2301      	movne	r3, #1
 80044e8:	2300      	moveq	r3, #0
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	b29b      	uxth	r3, r3
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3728      	adds	r7, #40	; 0x28
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	08040000 	.word	0x08040000
 80044fc:	20000094 	.word	0x20000094
 8004500:	08012834 	.word	0x08012834
 8004504:	0801284c 	.word	0x0801284c

08004508 <stm32wlxxFlashGetSector>:
 * @param[in] address Given Flash Memory address
 * @return Sector number or -1
 **/

int_t stm32wlxxFlashGetSector(uint32_t address)
{
 8004508:	b480      	push	{r7}
 800450a:	b087      	sub	sp, #28
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
    uint_t j;
    int_t sector;
    SectorsGroup* sGroup;

    //Initialize sector number
    sector = -1;
 8004510:	f04f 33ff 	mov.w	r3, #4294967295
 8004514:	60fb      	str	r3, [r7, #12]

    //Loop through flash sector group list
    for(i = 0; i < SECTORS_LIST_LEN; i++)
 8004516:	2300      	movs	r3, #0
 8004518:	617b      	str	r3, [r7, #20]
 800451a:	e024      	b.n	8004566 <stm32wlxxFlashGetSector+0x5e>
    {
        //Point to the current sector group
        sGroup = (SectorsGroup*) &sectorsList[i];
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	4613      	mov	r3, r2
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	4413      	add	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4a14      	ldr	r2, [pc, #80]	; (8004578 <stm32wlxxFlashGetSector+0x70>)
 8004528:	4413      	add	r3, r2
 800452a:	60bb      	str	r3, [r7, #8]

        //Loop through sector group sectors list
        for(j = 0; j < sGroup->nb; j++)
 800452c:	2300      	movs	r3, #0
 800452e:	613b      	str	r3, [r7, #16]
 8004530:	e011      	b.n	8004556 <stm32wlxxFlashGetSector+0x4e>
        {
            //Is current sector address matches given address?
            if(sGroup->addr + sGroup->size*j == address)
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	6939      	ldr	r1, [r7, #16]
 800453c:	fb01 f303 	mul.w	r3, r1, r3
 8004540:	4413      	add	r3, r2
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	429a      	cmp	r2, r3
 8004546:	d103      	bne.n	8004550 <stm32wlxxFlashGetSector+0x48>
            {
                sector = j;
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	60fb      	str	r3, [r7, #12]
                return sector;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	e00e      	b.n	800456e <stm32wlxxFlashGetSector+0x66>
        for(j = 0; j < sGroup->nb; j++)
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	3301      	adds	r3, #1
 8004554:	613b      	str	r3, [r7, #16]
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	429a      	cmp	r2, r3
 800455e:	d3e8      	bcc.n	8004532 <stm32wlxxFlashGetSector+0x2a>
    for(i = 0; i < SECTORS_LIST_LEN; i++)
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	3301      	adds	r3, #1
 8004564:	617b      	str	r3, [r7, #20]
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d0d7      	beq.n	800451c <stm32wlxxFlashGetSector+0x14>
            }
        }
    }

    return sector;
 800456c:	68fb      	ldr	r3, [r7, #12]
}
 800456e:	4618      	mov	r0, r3
 8004570:	371c      	adds	r7, #28
 8004572:	46bd      	mov	sp, r7
 8004574:	bc80      	pop	{r7}
 8004576:	4770      	bx	lr
 8004578:	08012eb4 	.word	0x08012eb4

0800457c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004580:	f3bf 8f4f 	dsb	sy
}
 8004584:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004586:	4b06      	ldr	r3, [pc, #24]	; (80045a0 <__NVIC_SystemReset+0x24>)
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800458e:	4904      	ldr	r1, [pc, #16]	; (80045a0 <__NVIC_SystemReset+0x24>)
 8004590:	4b04      	ldr	r3, [pc, #16]	; (80045a4 <__NVIC_SystemReset+0x28>)
 8004592:	4313      	orrs	r3, r2
 8004594:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004596:	f3bf 8f4f 	dsb	sy
}
 800459a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800459c:	bf00      	nop
 800459e:	e7fd      	b.n	800459c <__NVIC_SystemReset+0x20>
 80045a0:	e000ed00 	.word	0xe000ed00
 80045a4:	05fa0004 	.word	0x05fa0004

080045a8 <mcuSystemReset>:
/**
 * @brief Reset MCU system
 **/

void mcuSystemReset(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
   NVIC_SystemReset();
 80045ac:	f7ff ffe6 	bl	800457c <__NVIC_SystemReset>

080045b0 <verifyInit>:
 * @param[in] settings Image Verification specific settings
 * @return
 **/

error_t verifyInit(VerifyContext *context, VerifySettings *settings)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
   //Check parameters
   if (context == NULL || settings == NULL)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d002      	beq.n	80045c6 <verifyInit+0x16>
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <verifyInit+0x1a>
      return ERROR_INVALID_PARAMETER;
 80045c6:	2302      	movs	r3, #2
 80045c8:	e043      	b.n	8004652 <verifyInit+0xa2>

   //Save verify settings
   memcpy(&context->verifySettings, settings, sizeof(VerifySettings));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2208      	movs	r2, #8
 80045ce:	6839      	ldr	r1, [r7, #0]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f00b fd2c 	bl	801002e <memcpy>

   //Save verification module user settings
   memcpy(&context->verifySettings, settings, sizeof(VerifySettings));
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2208      	movs	r2, #8
 80045da:	6839      	ldr	r1, [r7, #0]
 80045dc:	4618      	mov	r0, r3
 80045de:	f00b fd26 	bl	801002e <memcpy>

   //Initialize verification context for integrity method
   if(context->verifySettings.verifyMethod == VERIFY_METHOD_INTEGRITY)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d11a      	bne.n	8004620 <verifyInit+0x70>
   {
#if (VERIFY_INTEGRITY_SUPPORT == ENABLED)
      //Is user require integrity check?
      if (context->verifySettings.integrityAlgo != NULL)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d014      	beq.n	800461c <verifyInit+0x6c>
      {
         //Initialize integrity algo context
         context->verifySettings.integrityAlgo->init(context->checkContext);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	3208      	adds	r2, #8
 80045fc:	4610      	mov	r0, r2
 80045fe:	4798      	blx	r3

         //Set image check digest size
         context->imageCheckDigestSize = context->verifySettings.integrityAlgo->digestSize;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	695a      	ldr	r2, [r3, #20]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

         //Set check data (integrity tag) size
         context->checkDataSize = context->imageCheckDigestSize;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

         //Successful process
         return NO_ERROR;
 8004618:	2300      	movs	r3, #0
 800461a:	e01a      	b.n	8004652 <verifyInit+0xa2>
      }
      else
      {
         return ERROR_INVALID_PARAMETER;
 800461c:	2302      	movs	r3, #2
 800461e:	e018      	b.n	8004652 <verifyInit+0xa2>
#else
      return ERROR_INVALID_PARAMETER;
#endif
   }
   //Initialize verification context for authentication method
   else if(context->verifySettings.verifyMethod == VERIFY_METHOD_AUTHENTICATION)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d101      	bne.n	800462c <verifyInit+0x7c>
   {
#if (VERIFY_AUTHENTICATION_SUPPORT == ENABLED)
      //Initialize authentication algorithm
      return authInit(context);
#else
      return ERROR_INVALID_PARAMETER;
 8004628:	2302      	movs	r3, #2
 800462a:	e012      	b.n	8004652 <verifyInit+0xa2>
#endif
   }
   //Initialize verification context for signature method
   else if(context->verifySettings.verifyMethod == VERIFY_METHOD_SIGNATURE)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	2b02      	cmp	r3, #2
 8004632:	d101      	bne.n	8004638 <verifyInit+0x88>
   {
#if (VERIFY_SIGNATURE_SUPPORT == ENABLED)
      //Initialize signature algorithm
      return signInit(context);
#else
      return ERROR_INVALID_PARAMETER;
 8004634:	2302      	movs	r3, #2
 8004636:	e00c      	b.n	8004652 <verifyInit+0xa2>
#endif
   }
   else
   {
      // Debug message
      TRACE_ERROR("Verification mode not supported!\r\n");
 8004638:	f7fc fd41 	bl	80010be <osSuspendAllTasks>
 800463c:	4b07      	ldr	r3, [pc, #28]	; (800465c <verifyInit+0xac>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	2222      	movs	r2, #34	; 0x22
 8004644:	2101      	movs	r1, #1
 8004646:	4806      	ldr	r0, [pc, #24]	; (8004660 <verifyInit+0xb0>)
 8004648:	f00b fcac 	bl	800ffa4 <fwrite>
 800464c:	f7fc fd42 	bl	80010d4 <osResumeAllTasks>
      return ERROR_NOT_IMPLEMENTED;
 8004650:	2367      	movs	r3, #103	; 0x67
   }
}
 8004652:	4618      	mov	r0, r3
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	20000094 	.word	0x20000094
 8004660:	08012864 	.word	0x08012864

08004664 <verifyProcess>:
 * @param[in] length Length og the image data block
 * @return Error code
 **/

error_t verifyProcess(VerifyContext *context, uint8_t *data, size_t length)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
   //Check parameters
   if (context == NULL || (data == NULL || length == 0))
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d005      	beq.n	8004682 <verifyProcess+0x1e>
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d002      	beq.n	8004682 <verifyProcess+0x1e>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <verifyProcess+0x22>
      return ERROR_INVALID_PARAMETER;
 8004682:	2302      	movs	r3, #2
 8004684:	e02d      	b.n	80046e2 <verifyProcess+0x7e>

   //Process image data block integrity hash tag calculation
   if(context->verifySettings.verifyMethod == VERIFY_METHOD_INTEGRITY)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d110      	bne.n	80046b0 <verifyProcess+0x4c>
   {
#if (VERIFY_INTEGRITY_SUPPORT == ENABLED)
      //Is user require integrity check?
      if (context->verifySettings.integrityAlgo != NULL)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00a      	beq.n	80046ac <verifyProcess+0x48>
      {
         //Update integrity hash tag
         context->verifySettings.integrityAlgo->update(context->checkContext, data, length);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	f102 0008 	add.w	r0, r2, #8
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	68b9      	ldr	r1, [r7, #8]
 80046a6:	4798      	blx	r3
      TRACE_ERROR("Verification mode not supported!\r\n");
      return ERROR_NOT_IMPLEMENTED;
   }

   //Successful process
   return NO_ERROR;
 80046a8:	2300      	movs	r3, #0
 80046aa:	e01a      	b.n	80046e2 <verifyProcess+0x7e>
         return ERROR_INVALID_PARAMETER;
 80046ac:	2302      	movs	r3, #2
 80046ae:	e018      	b.n	80046e2 <verifyProcess+0x7e>
   else if(context->verifySettings.verifyMethod == VERIFY_METHOD_AUTHENTICATION)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d101      	bne.n	80046bc <verifyProcess+0x58>
      return ERROR_INVALID_PARAMETER;
 80046b8:	2302      	movs	r3, #2
 80046ba:	e012      	b.n	80046e2 <verifyProcess+0x7e>
   else if(context->verifySettings.verifyMethod == VERIFY_METHOD_SIGNATURE)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d101      	bne.n	80046c8 <verifyProcess+0x64>
      return ERROR_INVALID_PARAMETER;
 80046c4:	2302      	movs	r3, #2
 80046c6:	e00c      	b.n	80046e2 <verifyProcess+0x7e>
      TRACE_ERROR("Verification mode not supported!\r\n");
 80046c8:	f7fc fcf9 	bl	80010be <osSuspendAllTasks>
 80046cc:	4b07      	ldr	r3, [pc, #28]	; (80046ec <verifyProcess+0x88>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	2222      	movs	r2, #34	; 0x22
 80046d4:	2101      	movs	r1, #1
 80046d6:	4806      	ldr	r0, [pc, #24]	; (80046f0 <verifyProcess+0x8c>)
 80046d8:	f00b fc64 	bl	800ffa4 <fwrite>
 80046dc:	f7fc fcfa 	bl	80010d4 <osResumeAllTasks>
      return ERROR_NOT_IMPLEMENTED;
 80046e0:	2367      	movs	r3, #103	; 0x67
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	20000094 	.word	0x20000094
 80046f0:	08012864 	.word	0x08012864

080046f4 <verifyConfirm>:
 * @param[in] verifyDataLength Length of the image check data
 * @return Error code
 **/

error_t verifyConfirm(VerifyContext *context, uint8_t *verifyData, size_t verifyDataLength)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
   error_t error;

   //Initialize error code
   error = NO_ERROR;
 8004700:	2300      	movs	r3, #0
 8004702:	82fb      	strh	r3, [r7, #22]

   //Check parameters
   if (context == NULL || verifyData == NULL || verifyDataLength == 0)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d005      	beq.n	8004716 <verifyConfirm+0x22>
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d002      	beq.n	8004716 <verifyConfirm+0x22>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <verifyConfirm+0x26>
      return ERROR_INVALID_PARAMETER;
 8004716:	2302      	movs	r3, #2
 8004718:	e03e      	b.n	8004798 <verifyConfirm+0xa4>

   //Check image check data using integrity method
   if(context->verifySettings.verifyMethod == VERIFY_METHOD_INTEGRITY)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d11f      	bne.n	8004762 <verifyConfirm+0x6e>
   {
#if (VERIFY_INTEGRITY_SUPPORT == ENABLED)
      //Is user require integrity check?
      if (context->verifySettings.integrityAlgo != NULL)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d019      	beq.n	800475e <verifyConfirm+0x6a>
      {
         //Finalize interity tag computation
         context->verifySettings.integrityAlgo->final(context->checkContext, context->imageCheckDigest);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	f102 0008 	add.w	r0, r2, #8
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	32dc      	adds	r2, #220	; 0xdc
 800473a:	4611      	mov	r1, r2
 800473c:	4798      	blx	r3
         TRACE_DEBUG("Computed integrity tag (%d bytes)\r\n", context->imageCheckDigestSize);
         TRACE_DEBUG_ARRAY("  ", context->imageCheckDigest, context->imageCheckDigestSize);
         TRACE_DEBUG("\r\n");

         //Compare computed integrity digest with the one received in the image
         if (osMemcmp(verifyData, context->imageCheckDigest, context->imageCheckDigestSize) != 0)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f103 01dc 	add.w	r1, r3, #220	; 0xdc
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800474a:	461a      	mov	r2, r3
 800474c:	68b8      	ldr	r0, [r7, #8]
 800474e:	f00b fc5e 	bl	801000e <memcmp>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d01e      	beq.n	8004796 <verifyConfirm+0xa2>
         {
            //Debug message
            TRACE_INFO("Firmware integrity tag is not valid!\r\n");
            error = ERROR_ABORTED;
 8004758:	230f      	movs	r3, #15
 800475a:	82fb      	strh	r3, [r7, #22]
 800475c:	e01b      	b.n	8004796 <verifyConfirm+0xa2>
         }
      }
      else
      {
         return ERROR_INVALID_PARAMETER;
 800475e:	2302      	movs	r3, #2
 8004760:	e01a      	b.n	8004798 <verifyConfirm+0xa4>
#else
      return ERROR_INVALID_PARAMETER;
#endif
   }
   //Check image check data using authentification method
   else if(context->verifySettings.verifyMethod == VERIFY_METHOD_AUTHENTICATION)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d101      	bne.n	800476e <verifyConfirm+0x7a>
      else
      {
         return ERROR_INVALID_PARAMETER;
      }
#else
      return ERROR_INVALID_PARAMETER;
 800476a:	2302      	movs	r3, #2
 800476c:	e014      	b.n	8004798 <verifyConfirm+0xa4>
#endif
   }
   //Check image check data using signature method
   else if(context->verifySettings.verifyMethod == VERIFY_METHOD_SIGNATURE)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	2b02      	cmp	r3, #2
 8004774:	d101      	bne.n	800477a <verifyConfirm+0x86>
      else
      {
         return ERROR_INVALID_PARAMETER;
      }
#else
      return ERROR_INVALID_PARAMETER;
 8004776:	2302      	movs	r3, #2
 8004778:	e00e      	b.n	8004798 <verifyConfirm+0xa4>
#endif
   }
   else
   {
      // Debug message
      TRACE_ERROR("Verification mode not supported!\r\n");
 800477a:	f7fc fca0 	bl	80010be <osSuspendAllTasks>
 800477e:	4b08      	ldr	r3, [pc, #32]	; (80047a0 <verifyConfirm+0xac>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	2222      	movs	r2, #34	; 0x22
 8004786:	2101      	movs	r1, #1
 8004788:	4806      	ldr	r0, [pc, #24]	; (80047a4 <verifyConfirm+0xb0>)
 800478a:	f00b fc0b 	bl	800ffa4 <fwrite>
 800478e:	f7fc fca1 	bl	80010d4 <osResumeAllTasks>
      return ERROR_NOT_IMPLEMENTED;
 8004792:	2367      	movs	r3, #103	; 0x67
 8004794:	e000      	b.n	8004798 <verifyConfirm+0xa4>
   }

   //Successful process
   return error;
 8004796:	8afb      	ldrh	r3, [r7, #22]
}
 8004798:	4618      	mov	r0, r3
 800479a:	3718      	adds	r7, #24
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	20000094 	.word	0x20000094
 80047a4:	08012864 	.word	0x08012864

080047a8 <verifyGenerateCheckData>:
 * @param[out] checkDataLength Length of the image check data buffer tag
 * @return Error code
 **/

error_t verifyGenerateCheckData(VerifyContext *context, uint8_t *checkData, size_t checkDataSize, size_t *checkDataLength)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
 80047b4:	603b      	str	r3, [r7, #0]
   VerifySettings *settings;

   //Check parameters
   if (context == NULL || checkData == NULL || checkDataLength == NULL)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d005      	beq.n	80047c8 <verifyGenerateCheckData+0x20>
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d002      	beq.n	80047c8 <verifyGenerateCheckData+0x20>
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <verifyGenerateCheckData+0x24>
      return ERROR_INVALID_PARAMETER;
 80047c8:	2302      	movs	r3, #2
 80047ca:	e03c      	b.n	8004846 <verifyGenerateCheckData+0x9e>

   //Point to the verify settings
   settings = (VerifySettings *)&context->verifySettings;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	617b      	str	r3, [r7, #20]

   //Generate image check integrity tag
   if(context->verifySettings.verifyMethod == VERIFY_METHOD_INTEGRITY)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d129      	bne.n	800482c <verifyGenerateCheckData+0x84>
   {
#if (VERIFY_INTEGRITY_SUPPORT == ENABLED)
      //Is user require integrity check?
      if (context->verifySettings.integrityAlgo != NULL)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d023      	beq.n	8004828 <verifyGenerateCheckData+0x80>
      {
         //Finalize interity tag check computation
         settings->integrityAlgo->final(context->checkContext, context->imageCheckDigest);
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	f102 0008 	add.w	r0, r2, #8
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	32dc      	adds	r2, #220	; 0xdc
 80047f0:	4611      	mov	r1, r2
 80047f2:	4798      	blx	r3

         if(checkDataSize >= context->imageCheckDigestSize)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d310      	bcc.n	8004822 <verifyGenerateCheckData+0x7a>
         {
            //Save interity tag check data length
            *checkDataLength = context->imageCheckDigestSize;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	601a      	str	r2, [r3, #0]
            //Save interity tag check data
            memcpy(checkData, context->imageCheckDigest, context->imageCheckDigestSize);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f103 01dc 	add.w	r1, r3, #220	; 0xdc
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8004816:	461a      	mov	r2, r3
 8004818:	68b8      	ldr	r0, [r7, #8]
 800481a:	f00b fc08 	bl	801002e <memcpy>
      TRACE_ERROR("Check data generation method missing or unsupported!!!\r\n");
      return ERROR_ABORTED;
   }

   //Successfull process
   return NO_ERROR;
 800481e:	2300      	movs	r3, #0
 8004820:	e011      	b.n	8004846 <verifyGenerateCheckData+0x9e>
            return ERROR_BUFFER_OVERFLOW;
 8004822:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8004826:	e00e      	b.n	8004846 <verifyGenerateCheckData+0x9e>
         return ERROR_INVALID_PARAMETER;
 8004828:	2302      	movs	r3, #2
 800482a:	e00c      	b.n	8004846 <verifyGenerateCheckData+0x9e>
      TRACE_ERROR("Check data generation method missing or unsupported!!!\r\n");
 800482c:	f7fc fc47 	bl	80010be <osSuspendAllTasks>
 8004830:	4b07      	ldr	r3, [pc, #28]	; (8004850 <verifyGenerateCheckData+0xa8>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	2238      	movs	r2, #56	; 0x38
 8004838:	2101      	movs	r1, #1
 800483a:	4806      	ldr	r0, [pc, #24]	; (8004854 <verifyGenerateCheckData+0xac>)
 800483c:	f00b fbb2 	bl	800ffa4 <fwrite>
 8004840:	f7fc fc48 	bl	80010d4 <osResumeAllTasks>
      return ERROR_ABORTED;
 8004844:	230f      	movs	r3, #15
}
 8004846:	4618      	mov	r0, r3
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	20000094 	.word	0x20000094
 8004854:	08012888 	.word	0x08012888

08004858 <w25q80dvFlashDriverInit>:
 * @brief Initialize Flash Memory.
 * @return Error code
 **/

error_t w25q80dvFlashDriverInit(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
	bool_t status;

   //Debug message
   TRACE_INFO("Initializing %s memory...\r\n", W25Q80DV_NAME);

   status = Flash__Init();
 800485e:	f007 fd7d 	bl	800c35c <Flash__Init>
 8004862:	4603      	mov	r3, r0
 8004864:	607b      	str	r3, [r7, #4]
   if(!status)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d101      	bne.n	8004870 <w25q80dvFlashDriverInit+0x18>
   {
      TRACE_ERROR("Failed to initialize SPI External Flash!\r\n");
      return ERROR_FAILURE;
 800486c:	2301      	movs	r3, #1
 800486e:	e000      	b.n	8004872 <w25q80dvFlashDriverInit+0x1a>
   }

   //Successfull process
   return NO_ERROR;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
	...

0800487c <w25q80dvFlashDriverGetInfo>:
 * @param[in,out] info Pointeur to the Memory information structure to be returned
 * @return Error code
 **/

error_t w25q80dvFlashDriverGetInfo(const FlashInfo **info)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
   //Set Memory information pointeur
   *info = (const FlashInfo*) &w25q80dvFlashDriverInfo;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a04      	ldr	r2, [pc, #16]	; (8004898 <w25q80dvFlashDriverGetInfo+0x1c>)
 8004888:	601a      	str	r2, [r3, #0]

   //Successfull process
   return NO_ERROR;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	bc80      	pop	{r7}
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	08012f14 	.word	0x08012f14

0800489c <w25q80dvFlashDriverGetStatus>:
 * @param[in,out] status Pointeur to the Memory status to be returned
 * @return Error code
 **/

error_t w25q80dvFlashDriverGetStatus(FlashStatus *status)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
   uint16_t statusReg;

   //Check parameter vailidity
   if(status == NULL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <w25q80dvFlashDriverGetStatus+0x12>
      return ERROR_INVALID_PARAMETER;
 80048aa:	2302      	movs	r3, #2
 80048ac:	e010      	b.n	80048d0 <w25q80dvFlashDriverGetStatus+0x34>

   //TODO: Get SPI Flash Memory error flags status

   //Read w25q80dv status register 1 & 2
   statusReg = Flash__ReadDeviceStatus();
 80048ae:	f007 fde8 	bl	800c482 <Flash__ReadDeviceStatus>
 80048b2:	4603      	mov	r3, r0
 80048b4:	81fb      	strh	r3, [r7, #14]

   if(statusReg & STATUS_REG_BUSY)
 80048b6:	89fb      	ldrh	r3, [r7, #14]
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d003      	beq.n	80048c8 <w25q80dvFlashDriverGetStatus+0x2c>
   {
	   //Set Flash memory status
	   *status = FLASH_STATUS_BUSY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	701a      	strb	r2, [r3, #0]
 80048c6:	e002      	b.n	80048ce <w25q80dvFlashDriverGetStatus+0x32>
   }
   else
   {
	   //Set Flash memory status
	   *status = FLASH_STATUS_OK;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	701a      	strb	r2, [r3, #0]
   }

   //Successfull process
   return NO_ERROR;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <w25q80dvFlashDriverWrite>:
 * @param[in] length Number of data bytes to write in
 * @return Error code
 **/

error_t w25q80dvFlashDriverWrite(uint32_t address, uint8_t* data, size_t length)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b088      	sub	sp, #32
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
   const uint8_t *p;
   uint8_t word[4];
   size_t n;

   //Precompute the top address
   topAddress = W25Q80DV_ADDR + W25Q80DV_SIZE;
 80048e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80048e8:	61bb      	str	r3, [r7, #24]

   //Check address validity
   if((address < W25Q80DV_ADDR || address >= topAddress) ||
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d204      	bcs.n	80048fc <w25q80dvFlashDriverWrite+0x24>
      (address % sizeof(uint32_t) != 0))
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f003 0303 	and.w	r3, r3, #3
   if((address < W25Q80DV_ADDR || address >= topAddress) ||
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d001      	beq.n	8004900 <w25q80dvFlashDriverWrite+0x28>
      return ERROR_INVALID_PARAMETER;
 80048fc:	2302      	movs	r3, #2
 80048fe:	e042      	b.n	8004986 <w25q80dvFlashDriverWrite+0xae>

   //Check parameters validity (is data in flash)
   if(data == NULL || address + length > topAddress)
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d005      	beq.n	8004912 <w25q80dvFlashDriverWrite+0x3a>
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4413      	add	r3, r2
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	429a      	cmp	r2, r3
 8004910:	d201      	bcs.n	8004916 <w25q80dvFlashDriverWrite+0x3e>
      return ERROR_INVALID_PARAMETER;
 8004912:	2302      	movs	r3, #2
 8004914:	e037      	b.n	8004986 <w25q80dvFlashDriverWrite+0xae>

   //Cast data pointer
   p = (const uint8_t*) data;
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	61fb      	str	r3, [r7, #28]

   //Perform write operation
   while(length > 0)
 800491a:	e030      	b.n	800497e <w25q80dvFlashDriverWrite+0xa6>
   {
      //Prevent to write more than 4 bytes at a time
      n = MIN(sizeof(word), length);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b04      	cmp	r3, #4
 8004920:	bf28      	it	cs
 8004922:	2304      	movcs	r3, #4
 8004924:	617b      	str	r3, [r7, #20]

      //Check if remaining bytes is less than 4 (32bits word)
      if(n < sizeof(uint32_t))
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	2b03      	cmp	r3, #3
 800492a:	d806      	bhi.n	800493a <w25q80dvFlashDriverWrite+0x62>
         memset(word, 0, sizeof(word));
 800492c:	f107 0310 	add.w	r3, r7, #16
 8004930:	2204      	movs	r2, #4
 8004932:	2100      	movs	r1, #0
 8004934:	4618      	mov	r0, r3
 8004936:	f00b fba2 	bl	801007e <memset>

      //Copy n bytes
      memcpy(word, p, n);
 800493a:	f107 0310 	add.w	r3, r7, #16
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	69f9      	ldr	r1, [r7, #28]
 8004942:	4618      	mov	r0, r3
 8004944:	f00b fb73 	bl	801002e <memcpy>

      //Is address match sector start address?
      if(address % W25Q80DV_SUBSECTORS_SIZE == 0)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800494e:	2b00      	cmp	r3, #0
 8004950:	d102      	bne.n	8004958 <w25q80dvFlashDriverWrite+0x80>
      {
         //Erases the specified block
    	 Flash__SectorErase4k(address);
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f007 fe4a 	bl	800c5ec <Flash__SectorErase4k>
      }

      //Program 32-bit word in flash memory
      Flash__PageProgram(address, word, sizeof(uint32_t));
 8004958:	f107 0310 	add.w	r3, r7, #16
 800495c:	2204      	movs	r2, #4
 800495e:	4619      	mov	r1, r3
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f007 fdf6 	bl	800c552 <Flash__PageProgram>

      //Advance data pointer
      p += n;
 8004966:	69fa      	ldr	r2, [r7, #28]
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	4413      	add	r3, r2
 800496c:	61fb      	str	r3, [r7, #28]
      //Increment word address
      address += n;
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	4413      	add	r3, r2
 8004974:	60fb      	str	r3, [r7, #12]
      //Remaining bytes to be written
      length -= n;
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	607b      	str	r3, [r7, #4]
   while(length > 0)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1cb      	bne.n	800491c <w25q80dvFlashDriverWrite+0x44>
   }

   //Successful process
   return NO_ERROR;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3720      	adds	r7, #32
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <w25q80dvFlashDriverRead>:
 * @param[in] length Number of data bytes to read out
 * @return Error code
 **/

error_t w25q80dvFlashDriverRead(uint32_t address, uint8_t* data, size_t length)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b086      	sub	sp, #24
 8004992:	af00      	add	r7, sp, #0
 8004994:	60f8      	str	r0, [r7, #12]
 8004996:	60b9      	str	r1, [r7, #8]
 8004998:	607a      	str	r2, [r7, #4]
   uint32_t topAddress;

   //Precompute the top address
   topAddress = W25Q80DV_ADDR + W25Q80DV_SIZE;
 800499a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800499e:	617b      	str	r3, [r7, #20]

   //Check address validity
   if(address < W25Q80DV_ADDR || address >= topAddress)
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d301      	bcc.n	80049ac <w25q80dvFlashDriverRead+0x1e>
      return ERROR_INVALID_PARAMETER;
 80049a8:	2302      	movs	r3, #2
 80049aa:	e010      	b.n	80049ce <w25q80dvFlashDriverRead+0x40>

   //Check parameters validity (is data in flash)
   if(data == NULL || address + length > topAddress)
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d005      	beq.n	80049be <w25q80dvFlashDriverRead+0x30>
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4413      	add	r3, r2
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d201      	bcs.n	80049c2 <w25q80dvFlashDriverRead+0x34>
      return ERROR_INVALID_PARAMETER;
 80049be:	2302      	movs	r3, #2
 80049c0:	e005      	b.n	80049ce <w25q80dvFlashDriverRead+0x40>

   //Perform read operation
   Flash__ReadBuffer(address, data, length);
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	68b9      	ldr	r1, [r7, #8]
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f007 fd73 	bl	800c4b2 <Flash__ReadBuffer>

   //Successfull process
   return NO_ERROR;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3718      	adds	r7, #24
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <w25q80dvFlashDriverErase>:
 * @param[in] length Number of data bytes to be erased
 * @return Error code
 **/

error_t w25q80dvFlashDriverErase(uint32_t address, size_t length)
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b084      	sub	sp, #16
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
 80049de:	6039      	str	r1, [r7, #0]
   uint32_t topAddress;

   //Precompute the top address
   topAddress = W25Q80DV_ADDR + W25Q80DV_SIZE;
 80049e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80049e4:	60fb      	str	r3, [r7, #12]

   //Check address validity
   if(address < W25Q80DV_ADDR || address >= topAddress)
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d301      	bcc.n	80049f2 <w25q80dvFlashDriverErase+0x1c>
      return ERROR_INVALID_PARAMETER;
 80049ee:	2302      	movs	r3, #2
 80049f0:	e02d      	b.n	8004a4e <w25q80dvFlashDriverErase+0x78>

   //Check parameters validity (is data in flash)
   if(address + length > topAddress)
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	4413      	add	r3, r2
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d201      	bcs.n	8004a02 <w25q80dvFlashDriverErase+0x2c>
      return ERROR_INVALID_PARAMETER;
 80049fe:	2302      	movs	r3, #2
 8004a00:	e025      	b.n	8004a4e <w25q80dvFlashDriverErase+0x78>

   //Be sure address match a memory flash subsector start address
   if(address % W25Q80DV_SUBSECTORS_SIZE != 0)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d01c      	beq.n	8004a46 <w25q80dvFlashDriverErase+0x70>
   {
      length += address % W25Q80DV_SUBSECTORS_SIZE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	4413      	add	r3, r2
 8004a16:	603b      	str	r3, [r7, #0]
      address -= address % W25Q80DV_SUBSECTORS_SIZE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004a1e:	f023 030f 	bic.w	r3, r3, #15
 8004a22:	607b      	str	r3, [r7, #4]
   }

   //Perform erase operation
   while(length > 0)
 8004a24:	e00f      	b.n	8004a46 <w25q80dvFlashDriverErase+0x70>
   {
      //Erases the specified block
	  Flash__SectorErase4k(address);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f007 fde0 	bl	800c5ec <Flash__SectorErase4k>

      //Increment word address
      address += W25Q80DV_SUBSECTORS_SIZE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a32:	607b      	str	r3, [r7, #4]
      //Remaining bytes to be erased
      length -= MIN(length, W25Q80DV_SUBSECTORS_SIZE);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a3a:	bf28      	it	cs
 8004a3c:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	603b      	str	r3, [r7, #0]
   while(length > 0)
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1ec      	bne.n	8004a26 <w25q80dvFlashDriverErase+0x50>
   }

   //Successful process
   return NO_ERROR;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <w25q80dvFlashDriverIsSectorAddr>:
 * @brief Determine if a given address match a sector tart address
 * @return boolean
 **/

bool_t w25q80dvFlashDriverIsSectorAddr(uint32_t address)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b083      	sub	sp, #12
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
   //Is given address match a sector start address?
   if((address % W25Q80DV_SUBSECTORS_SIZE) == 0)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <w25q80dvFlashDriverIsSectorAddr+0x16>
      return TRUE;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e000      	b.n	8004a6e <w25q80dvFlashDriverIsSectorAddr+0x18>
   else
      return FALSE;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bc80      	pop	{r7}
 8004a76:	4770      	bx	lr

08004a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a82:	2003      	movs	r0, #3
 8004a84:	f001 f920 	bl	8005cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004a88:	f002 ff90 	bl	80079ac <HAL_RCC_GetHCLKFreq>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	4a09      	ldr	r2, [pc, #36]	; (8004ab4 <HAL_Init+0x3c>)
 8004a90:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a92:	200f      	movs	r0, #15
 8004a94:	f7fd fbda 	bl	800224c <HAL_InitTick>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d002      	beq.n	8004aa4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	71fb      	strb	r3, [r7, #7]
 8004aa2:	e001      	b.n	8004aa8 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004aa4:	f7fd f9f7 	bl	8001e96 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004aa8:	79fb      	ldrb	r3, [r7, #7]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	20000080 	.word	0x20000080

08004ab8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004abc:	4b05      	ldr	r3, [pc, #20]	; (8004ad4 <HAL_IncTick+0x1c>)
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	4b05      	ldr	r3, [pc, #20]	; (8004ad8 <HAL_IncTick+0x20>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	4a03      	ldr	r2, [pc, #12]	; (8004ad8 <HAL_IncTick+0x20>)
 8004aca:	6013      	str	r3, [r2, #0]
}
 8004acc:	bf00      	nop
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bc80      	pop	{r7}
 8004ad2:	4770      	bx	lr
 8004ad4:	2000008c 	.word	0x2000008c
 8004ad8:	200018b8 	.word	0x200018b8

08004adc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004adc:	b480      	push	{r7}
 8004ade:	af00      	add	r7, sp, #0
  return uwTick;
 8004ae0:	4b02      	ldr	r3, [pc, #8]	; (8004aec <HAL_GetTick+0x10>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bc80      	pop	{r7}
 8004aea:	4770      	bx	lr
 8004aec:	200018b8 	.word	0x200018b8

08004af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004af8:	f7ff fff0 	bl	8004adc <HAL_GetTick>
 8004afc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b08:	d005      	beq.n	8004b16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b0a:	4b0a      	ldr	r3, [pc, #40]	; (8004b34 <HAL_Delay+0x44>)
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	461a      	mov	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4413      	add	r3, r2
 8004b14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004b16:	bf00      	nop
 8004b18:	f7ff ffe0 	bl	8004adc <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d8f7      	bhi.n	8004b18 <HAL_Delay+0x28>
  {
  }
}
 8004b28:	bf00      	nop
 8004b2a:	bf00      	nop
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	2000008c 	.word	0x2000008c

08004b38 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8004b3c:	4b02      	ldr	r3, [pc, #8]	; (8004b48 <HAL_GetUIDw0+0x10>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bc80      	pop	{r7}
 8004b46:	4770      	bx	lr
 8004b48:	1fff7590 	.word	0x1fff7590

08004b4c <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8004b50:	4b02      	ldr	r3, [pc, #8]	; (8004b5c <HAL_GetUIDw1+0x10>)
 8004b52:	681b      	ldr	r3, [r3, #0]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bc80      	pop	{r7}
 8004b5a:	4770      	bx	lr
 8004b5c:	1fff7594 	.word	0x1fff7594

08004b60 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8004b60:	b480      	push	{r7}
 8004b62:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8004b64:	4b02      	ldr	r3, [pc, #8]	; (8004b70 <HAL_GetUIDw2+0x10>)
 8004b66:	681b      	ldr	r3, [r3, #0]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bc80      	pop	{r7}
 8004b6e:	4770      	bx	lr
 8004b70:	1fff7598 	.word	0x1fff7598

08004b74 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	601a      	str	r2, [r3, #0]
}
 8004b8e:	bf00      	nop
 8004b90:	370c      	adds	r7, #12
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bc80      	pop	{r7}
 8004b96:	4770      	bx	lr

08004b98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bc80      	pop	{r7}
 8004bb0:	4770      	bx	lr

08004bb2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b085      	sub	sp, #20
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	60f8      	str	r0, [r7, #12]
 8004bba:	60b9      	str	r1, [r7, #8]
 8004bbc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	695a      	ldr	r2, [r3, #20]
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	f003 0304 	and.w	r3, r3, #4
 8004bc8:	2107      	movs	r1, #7
 8004bca:	fa01 f303 	lsl.w	r3, r1, r3
 8004bce:	43db      	mvns	r3, r3
 8004bd0:	401a      	ands	r2, r3
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	f003 0304 	and.w	r3, r3, #4
 8004bd8:	6879      	ldr	r1, [r7, #4]
 8004bda:	fa01 f303 	lsl.w	r3, r1, r3
 8004bde:	431a      	orrs	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8004be4:	bf00      	nop
 8004be6:	3714      	adds	r7, #20
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bc80      	pop	{r7}
 8004bec:	4770      	bx	lr

08004bee <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	b083      	sub	sp, #12
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
 8004bf6:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	695a      	ldr	r2, [r3, #20]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	f003 0304 	and.w	r3, r3, #4
 8004c02:	2107      	movs	r1, #7
 8004c04:	fa01 f303 	lsl.w	r3, r1, r3
 8004c08:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bc80      	pop	{r7}
 8004c1c:	4770      	bx	lr

08004c1e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b083      	sub	sp, #12
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004c32:	2301      	movs	r3, #1
 8004c34:	e000      	b.n	8004c38 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bc80      	pop	{r7}
 8004c40:	4770      	bx	lr

08004c42 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004c42:	b480      	push	{r7}
 8004c44:	b085      	sub	sp, #20
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	60f8      	str	r0, [r7, #12]
 8004c4a:	60b9      	str	r1, [r7, #8]
 8004c4c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	f003 031f 	and.w	r3, r3, #31
 8004c58:	210f      	movs	r1, #15
 8004c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c5e:	43db      	mvns	r3, r3
 8004c60:	401a      	ands	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	0e9b      	lsrs	r3, r3, #26
 8004c66:	f003 010f 	and.w	r1, r3, #15
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	f003 031f 	and.w	r3, r3, #31
 8004c70:	fa01 f303 	lsl.w	r3, r1, r3
 8004c74:	431a      	orrs	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004c7a:	bf00      	nop
 8004c7c:	3714      	adds	r7, #20
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bc80      	pop	{r7}
 8004c82:	4770      	bx	lr

08004c84 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004c9e:	bf00      	nop
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bc80      	pop	{r7}
 8004ca6:	4770      	bx	lr

08004ca8 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8004cbc:	43db      	mvns	r3, r3
 8004cbe:	401a      	ands	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bc80      	pop	{r7}
 8004ccc:	4770      	bx	lr

08004cce <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b085      	sub	sp, #20
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	60f8      	str	r0, [r7, #12]
 8004cd6:	60b9      	str	r1, [r7, #8]
 8004cd8:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	695a      	ldr	r2, [r3, #20]
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	021b      	lsls	r3, r3, #8
 8004ce2:	43db      	mvns	r3, r3
 8004ce4:	401a      	ands	r2, r3
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	0219      	lsls	r1, r3, #8
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	400b      	ands	r3, r1
 8004cee:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8004cf2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8004cfc:	bf00      	nop
 8004cfe:	3714      	adds	r7, #20
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bc80      	pop	{r7}
 8004d04:	4770      	bx	lr

08004d06 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b083      	sub	sp, #12
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004d16:	f023 0317 	bic.w	r3, r3, #23
 8004d1a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004d22:	bf00      	nop
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bc80      	pop	{r7}
 8004d2a:	4770      	bx	lr

08004d2c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d40:	d101      	bne.n	8004d46 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004d42:	2301      	movs	r3, #1
 8004d44:	e000      	b.n	8004d48 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bc80      	pop	{r7}
 8004d50:	4770      	bx	lr

08004d52 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b083      	sub	sp, #12
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d62:	f023 0317 	bic.w	r3, r3, #23
 8004d66:	f043 0201 	orr.w	r2, r3, #1
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004d6e:	bf00      	nop
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bc80      	pop	{r7}
 8004d76:	4770      	bx	lr

08004d78 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d88:	f023 0317 	bic.w	r3, r3, #23
 8004d8c:	f043 0202 	orr.w	r2, r3, #2
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bc80      	pop	{r7}
 8004d9c:	4770      	bx	lr

08004d9e <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b083      	sub	sp, #12
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d101      	bne.n	8004db6 <LL_ADC_IsEnabled+0x18>
 8004db2:	2301      	movs	r3, #1
 8004db4:	e000      	b.n	8004db8 <LL_ADC_IsEnabled+0x1a>
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bc80      	pop	{r7}
 8004dc0:	4770      	bx	lr

08004dc2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b083      	sub	sp, #12
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d101      	bne.n	8004dda <LL_ADC_IsDisableOngoing+0x18>
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e000      	b.n	8004ddc <LL_ADC_IsDisableOngoing+0x1a>
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bc80      	pop	{r7}
 8004de4:	4770      	bx	lr

08004de6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004df6:	f023 0317 	bic.w	r3, r3, #23
 8004dfa:	f043 0204 	orr.w	r2, r3, #4
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004e02:	bf00      	nop
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bc80      	pop	{r7}
 8004e0a:	4770      	bx	lr

08004e0c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e1c:	f023 0317 	bic.w	r3, r3, #23
 8004e20:	f043 0210 	orr.w	r2, r3, #16
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bc80      	pop	{r7}
 8004e30:	4770      	bx	lr

08004e32 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b083      	sub	sp, #12
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f003 0304 	and.w	r3, r3, #4
 8004e42:	2b04      	cmp	r3, #4
 8004e44:	d101      	bne.n	8004e4a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004e46:	2301      	movs	r3, #1
 8004e48:	e000      	b.n	8004e4c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bc80      	pop	{r7}
 8004e54:	4770      	bx	lr
	...

08004e58 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b088      	sub	sp, #32
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e60:	2300      	movs	r3, #0
 8004e62:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8004e64:	2300      	movs	r3, #0
 8004e66:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e17e      	b.n	8005178 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d109      	bne.n	8004e9c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f7fd f80f 	bl	8001eac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7ff ff43 	bl	8004d2c <LL_ADC_IsInternalRegulatorEnabled>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d115      	bne.n	8004ed8 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7ff ff28 	bl	8004d06 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004eb6:	4b9e      	ldr	r3, [pc, #632]	; (8005130 <HAL_ADC_Init+0x2d8>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	099b      	lsrs	r3, r3, #6
 8004ebc:	4a9d      	ldr	r2, [pc, #628]	; (8005134 <HAL_ADC_Init+0x2dc>)
 8004ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec2:	099b      	lsrs	r3, r3, #6
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004eca:	e002      	b.n	8004ed2 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1f9      	bne.n	8004ecc <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7ff ff25 	bl	8004d2c <LL_ADC_IsInternalRegulatorEnabled>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10d      	bne.n	8004f04 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eec:	f043 0210 	orr.w	r2, r3, #16
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ef8:	f043 0201 	orr.w	r2, r3, #1
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7ff ff92 	bl	8004e32 <LL_ADC_REG_IsConversionOngoing>
 8004f0e:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f14:	f003 0310 	and.w	r3, r3, #16
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f040 8124 	bne.w	8005166 <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f040 8120 	bne.w	8005166 <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f2a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004f2e:	f043 0202 	orr.w	r2, r3, #2
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7ff ff2f 	bl	8004d9e <LL_ADC_IsEnabled>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f040 80a7 	bne.w	8005096 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	7e1b      	ldrb	r3, [r3, #24]
 8004f50:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004f52:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	7e5b      	ldrb	r3, [r3, #25]
 8004f58:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004f5a:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	7e9b      	ldrb	r3, [r3, #26]
 8004f60:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004f62:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004f68:	2a00      	cmp	r2, #0
 8004f6a:	d002      	beq.n	8004f72 <HAL_ADC_Init+0x11a>
 8004f6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004f70:	e000      	b.n	8004f74 <HAL_ADC_Init+0x11c>
 8004f72:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004f74:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004f7a:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	da04      	bge.n	8004f8e <HAL_ADC_Init+0x136>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f8c:	e001      	b.n	8004f92 <HAL_ADC_Init+0x13a>
 8004f8e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8004f92:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004f9a:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004f9c:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004f9e:	69ba      	ldr	r2, [r7, #24]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d114      	bne.n	8004fd8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	7e9b      	ldrb	r3, [r3, #26]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d104      	bne.n	8004fc0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fbc:	61bb      	str	r3, [r7, #24]
 8004fbe:	e00b      	b.n	8004fd8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc4:	f043 0220 	orr.w	r2, r3, #32
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd0:	f043 0201 	orr.w	r2, r3, #1
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d009      	beq.n	8004ff4 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe4:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004fec:	4313      	orrs	r3, r2
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8004ffe:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	6812      	ldr	r2, [r2, #0]
 8005006:	69b9      	ldr	r1, [r7, #24]
 8005008:	430b      	orrs	r3, r1
 800500a:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005018:	4313      	orrs	r3, r2
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	4313      	orrs	r3, r2
 800501e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005026:	2b01      	cmp	r3, #1
 8005028:	d111      	bne.n	800504e <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005036:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800503c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8005042:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	4313      	orrs	r3, r2
 8005048:	f043 0301 	orr.w	r3, r3, #1
 800504c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	691a      	ldr	r2, [r3, #16]
 8005054:	4b38      	ldr	r3, [pc, #224]	; (8005138 <HAL_ADC_Init+0x2e0>)
 8005056:	4013      	ands	r3, r2
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	6812      	ldr	r2, [r2, #0]
 800505c:	6979      	ldr	r1, [r7, #20]
 800505e:	430b      	orrs	r3, r1
 8005060:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800506a:	d014      	beq.n	8005096 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005074:	d00f      	beq.n	8005096 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800507a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800507e:	d00a      	beq.n	8005096 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8005080:	4b2e      	ldr	r3, [pc, #184]	; (800513c <HAL_ADC_Init+0x2e4>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005090:	492a      	ldr	r1, [pc, #168]	; (800513c <HAL_ADC_Init+0x2e4>)
 8005092:	4313      	orrs	r3, r2
 8005094:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6818      	ldr	r0, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800509e:	461a      	mov	r2, r3
 80050a0:	2100      	movs	r1, #0
 80050a2:	f7ff fd86 	bl	8004bb2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6818      	ldr	r0, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ae:	461a      	mov	r2, r3
 80050b0:	4923      	ldr	r1, [pc, #140]	; (8005140 <HAL_ADC_Init+0x2e8>)
 80050b2:	f7ff fd7e 	bl	8004bb2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d108      	bne.n	80050d0 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f062 020f 	orn	r2, r2, #15
 80050cc:	629a      	str	r2, [r3, #40]	; 0x28
 80050ce:	e017      	b.n	8005100 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050d8:	d112      	bne.n	8005100 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	69db      	ldr	r3, [r3, #28]
 80050e4:	3b01      	subs	r3, #1
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	f003 031c 	and.w	r3, r3, #28
 80050ec:	f06f 020f 	mvn.w	r2, #15
 80050f0:	fa02 f103 	lsl.w	r1, r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2100      	movs	r1, #0
 8005106:	4618      	mov	r0, r3
 8005108:	f7ff fd71 	bl	8004bee <LL_ADC_GetSamplingTimeCommonChannels>
 800510c:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005112:	429a      	cmp	r2, r3
 8005114:	d116      	bne.n	8005144 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005120:	f023 0303 	bic.w	r3, r3, #3
 8005124:	f043 0201 	orr.w	r2, r3, #1
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800512c:	e023      	b.n	8005176 <HAL_ADC_Init+0x31e>
 800512e:	bf00      	nop
 8005130:	20000080 	.word	0x20000080
 8005134:	053e2d63 	.word	0x053e2d63
 8005138:	1ffffc02 	.word	0x1ffffc02
 800513c:	40012708 	.word	0x40012708
 8005140:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005148:	f023 0312 	bic.w	r3, r3, #18
 800514c:	f043 0210 	orr.w	r2, r3, #16
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005158:	f043 0201 	orr.w	r2, r3, #1
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005164:	e007      	b.n	8005176 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800516a:	f043 0210 	orr.w	r2, r3, #16
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8005176:	7ffb      	ldrb	r3, [r7, #31]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3720      	adds	r7, #32
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4618      	mov	r0, r3
 800518e:	f7ff fe50 	bl	8004e32 <LL_ADC_REG_IsConversionOngoing>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d132      	bne.n	80051fe <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d101      	bne.n	80051a6 <HAL_ADC_Start+0x26>
 80051a2:	2302      	movs	r3, #2
 80051a4:	e02e      	b.n	8005204 <HAL_ADC_Start+0x84>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 fa8a 	bl	80056c8 <ADC_Enable>
 80051b4:	4603      	mov	r3, r0
 80051b6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80051b8:	7bfb      	ldrb	r3, [r7, #15]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d11a      	bne.n	80051f4 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80051c6:	f023 0301 	bic.w	r3, r3, #1
 80051ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	221c      	movs	r2, #28
 80051de:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7ff fdfa 	bl	8004de6 <LL_ADC_REG_StartConversion>
 80051f2:	e006      	b.n	8005202 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80051fc:	e001      	b.n	8005202 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80051fe:	2302      	movs	r3, #2
 8005200:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8005202:	7bfb      	ldrb	r3, [r7, #15]
}
 8005204:	4618      	mov	r0, r3
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800521a:	2b01      	cmp	r3, #1
 800521c:	d101      	bne.n	8005222 <HAL_ADC_Stop+0x16>
 800521e:	2302      	movs	r3, #2
 8005220:	e022      	b.n	8005268 <HAL_ADC_Stop+0x5c>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 fa07 	bl	800563e <ADC_ConversionStop>
 8005230:	4603      	mov	r3, r0
 8005232:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8005234:	7bfb      	ldrb	r3, [r7, #15]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d111      	bne.n	800525e <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 faca 	bl	80057d4 <ADC_Disable>
 8005240:	4603      	mov	r3, r0
 8005242:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8005244:	7bfb      	ldrb	r3, [r7, #15]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d109      	bne.n	800525e <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800524e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005252:	f023 0301 	bic.w	r3, r3, #1
 8005256:	f043 0201 	orr.w	r2, r3, #1
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8005266:	7bfb      	ldrb	r3, [r7, #15]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	2b08      	cmp	r3, #8
 8005280:	d102      	bne.n	8005288 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8005282:	2308      	movs	r3, #8
 8005284:	60fb      	str	r3, [r7, #12]
 8005286:	e010      	b.n	80052aa <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b00      	cmp	r3, #0
 8005294:	d007      	beq.n	80052a6 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800529a:	f043 0220 	orr.w	r2, r3, #32
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e077      	b.n	8005396 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80052a6:	2304      	movs	r3, #4
 80052a8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80052aa:	f7ff fc17 	bl	8004adc <HAL_GetTick>
 80052ae:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80052b0:	e021      	b.n	80052f6 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b8:	d01d      	beq.n	80052f6 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80052ba:	f7ff fc0f 	bl	8004adc <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d302      	bcc.n	80052d0 <HAL_ADC_PollForConversion+0x60>
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d112      	bne.n	80052f6 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	4013      	ands	r3, r2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10b      	bne.n	80052f6 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e2:	f043 0204 	orr.w	r2, r3, #4
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e04f      	b.n	8005396 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4013      	ands	r3, r2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d0d6      	beq.n	80052b2 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005308:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4618      	mov	r0, r3
 8005316:	f7ff fc82 	bl	8004c1e <LL_ADC_REG_IsTriggerSourceSWStart>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d031      	beq.n	8005384 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	7e9b      	ldrb	r3, [r3, #26]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d12d      	bne.n	8005384 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0308 	and.w	r3, r3, #8
 8005332:	2b08      	cmp	r3, #8
 8005334:	d126      	bne.n	8005384 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4618      	mov	r0, r3
 800533c:	f7ff fd79 	bl	8004e32 <LL_ADC_REG_IsConversionOngoing>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d112      	bne.n	800536c <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f022 020c 	bic.w	r2, r2, #12
 8005354:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800535a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800535e:	f023 0301 	bic.w	r3, r3, #1
 8005362:	f043 0201 	orr.w	r2, r3, #1
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	659a      	str	r2, [r3, #88]	; 0x58
 800536a:	e00b      	b.n	8005384 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005370:	f043 0220 	orr.w	r2, r3, #32
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800537c:	f043 0201 	orr.w	r2, r3, #1
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	7e1b      	ldrb	r3, [r3, #24]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d103      	bne.n	8005394 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	220c      	movs	r2, #12
 8005392:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800539e:	b480      	push	{r7}
 80053a0:	b083      	sub	sp, #12
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bc80      	pop	{r7}
 80053b4:	4770      	bx	lr
	...

080053b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b088      	sub	sp, #32
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053c2:	2300      	movs	r3, #0
 80053c4:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80053c6:	2300      	movs	r3, #0
 80053c8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d101      	bne.n	80053e0 <HAL_ADC_ConfigChannel+0x28>
 80053dc:	2302      	movs	r3, #2
 80053de:	e110      	b.n	8005602 <HAL_ADC_ConfigChannel+0x24a>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7ff fd20 	bl	8004e32 <LL_ADC_REG_IsConversionOngoing>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f040 80f7 	bne.w	80055e8 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	2b02      	cmp	r3, #2
 8005400:	f000 80b1 	beq.w	8005566 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800540c:	d004      	beq.n	8005418 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005412:	4a7e      	ldr	r2, [pc, #504]	; (800560c <HAL_ADC_ConfigChannel+0x254>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d108      	bne.n	800542a <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4619      	mov	r1, r3
 8005422:	4610      	mov	r0, r2
 8005424:	f7ff fc2e 	bl	8004c84 <LL_ADC_REG_SetSequencerChAdd>
 8005428:	e041      	b.n	80054ae <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f003 031f 	and.w	r3, r3, #31
 8005436:	210f      	movs	r1, #15
 8005438:	fa01 f303 	lsl.w	r3, r1, r3
 800543c:	43db      	mvns	r3, r3
 800543e:	401a      	ands	r2, r3
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8005448:	2b00      	cmp	r3, #0
 800544a:	d105      	bne.n	8005458 <HAL_ADC_ConfigChannel+0xa0>
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	0e9b      	lsrs	r3, r3, #26
 8005452:	f003 031f 	and.w	r3, r3, #31
 8005456:	e011      	b.n	800547c <HAL_ADC_ConfigChannel+0xc4>
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	fa93 f3a3 	rbit	r3, r3
 8005464:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d101      	bne.n	8005474 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8005470:	2320      	movs	r3, #32
 8005472:	e003      	b.n	800547c <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	fab3 f383 	clz	r3, r3
 800547a:	b2db      	uxtb	r3, r3
 800547c:	6839      	ldr	r1, [r7, #0]
 800547e:	6849      	ldr	r1, [r1, #4]
 8005480:	f001 011f 	and.w	r1, r1, #31
 8005484:	408b      	lsls	r3, r1
 8005486:	431a      	orrs	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	089b      	lsrs	r3, r3, #2
 8005492:	1c5a      	adds	r2, r3, #1
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	69db      	ldr	r3, [r3, #28]
 8005498:	429a      	cmp	r2, r3
 800549a:	d808      	bhi.n	80054ae <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6818      	ldr	r0, [r3, #0]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	6859      	ldr	r1, [r3, #4]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	461a      	mov	r2, r3
 80054aa:	f7ff fbca 	bl	8004c42 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6818      	ldr	r0, [r3, #0]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	6819      	ldr	r1, [r3, #0]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	461a      	mov	r2, r3
 80054bc:	f7ff fc07 	bl	8004cce <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f280 8097 	bge.w	80055f8 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80054ca:	4851      	ldr	r0, [pc, #324]	; (8005610 <HAL_ADC_ConfigChannel+0x258>)
 80054cc:	f7ff fb64 	bl	8004b98 <LL_ADC_GetCommonPathInternalCh>
 80054d0:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a4f      	ldr	r2, [pc, #316]	; (8005614 <HAL_ADC_ConfigChannel+0x25c>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d120      	bne.n	800551e <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d11b      	bne.n	800551e <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80054ec:	4619      	mov	r1, r3
 80054ee:	4848      	ldr	r0, [pc, #288]	; (8005610 <HAL_ADC_ConfigChannel+0x258>)
 80054f0:	f7ff fb40 	bl	8004b74 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80054f4:	4b48      	ldr	r3, [pc, #288]	; (8005618 <HAL_ADC_ConfigChannel+0x260>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	099b      	lsrs	r3, r3, #6
 80054fa:	4a48      	ldr	r2, [pc, #288]	; (800561c <HAL_ADC_ConfigChannel+0x264>)
 80054fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005500:	099b      	lsrs	r3, r3, #6
 8005502:	1c5a      	adds	r2, r3, #1
 8005504:	4613      	mov	r3, r2
 8005506:	005b      	lsls	r3, r3, #1
 8005508:	4413      	add	r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800550e:	e002      	b.n	8005516 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	3b01      	subs	r3, #1
 8005514:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1f9      	bne.n	8005510 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800551c:	e06c      	b.n	80055f8 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a3f      	ldr	r2, [pc, #252]	; (8005620 <HAL_ADC_ConfigChannel+0x268>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d10c      	bne.n	8005542 <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d107      	bne.n	8005542 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005538:	4619      	mov	r1, r3
 800553a:	4835      	ldr	r0, [pc, #212]	; (8005610 <HAL_ADC_ConfigChannel+0x258>)
 800553c:	f7ff fb1a 	bl	8004b74 <LL_ADC_SetCommonPathInternalCh>
 8005540:	e05a      	b.n	80055f8 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a37      	ldr	r2, [pc, #220]	; (8005624 <HAL_ADC_ConfigChannel+0x26c>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d155      	bne.n	80055f8 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005552:	2b00      	cmp	r3, #0
 8005554:	d150      	bne.n	80055f8 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800555c:	4619      	mov	r1, r3
 800555e:	482c      	ldr	r0, [pc, #176]	; (8005610 <HAL_ADC_ConfigChannel+0x258>)
 8005560:	f7ff fb08 	bl	8004b74 <LL_ADC_SetCommonPathInternalCh>
 8005564:	e048      	b.n	80055f8 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800556e:	d004      	beq.n	800557a <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005574:	4a25      	ldr	r2, [pc, #148]	; (800560c <HAL_ADC_ConfigChannel+0x254>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d107      	bne.n	800558a <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4619      	mov	r1, r3
 8005584:	4610      	mov	r0, r2
 8005586:	f7ff fb8f 	bl	8004ca8 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	da32      	bge.n	80055f8 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005592:	481f      	ldr	r0, [pc, #124]	; (8005610 <HAL_ADC_ConfigChannel+0x258>)
 8005594:	f7ff fb00 	bl	8004b98 <LL_ADC_GetCommonPathInternalCh>
 8005598:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a1d      	ldr	r2, [pc, #116]	; (8005614 <HAL_ADC_ConfigChannel+0x25c>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d107      	bne.n	80055b4 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80055aa:	4619      	mov	r1, r3
 80055ac:	4818      	ldr	r0, [pc, #96]	; (8005610 <HAL_ADC_ConfigChannel+0x258>)
 80055ae:	f7ff fae1 	bl	8004b74 <LL_ADC_SetCommonPathInternalCh>
 80055b2:	e021      	b.n	80055f8 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a19      	ldr	r2, [pc, #100]	; (8005620 <HAL_ADC_ConfigChannel+0x268>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d107      	bne.n	80055ce <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055c4:	4619      	mov	r1, r3
 80055c6:	4812      	ldr	r0, [pc, #72]	; (8005610 <HAL_ADC_ConfigChannel+0x258>)
 80055c8:	f7ff fad4 	bl	8004b74 <LL_ADC_SetCommonPathInternalCh>
 80055cc:	e014      	b.n	80055f8 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a14      	ldr	r2, [pc, #80]	; (8005624 <HAL_ADC_ConfigChannel+0x26c>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d10f      	bne.n	80055f8 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80055de:	4619      	mov	r1, r3
 80055e0:	480b      	ldr	r0, [pc, #44]	; (8005610 <HAL_ADC_ConfigChannel+0x258>)
 80055e2:	f7ff fac7 	bl	8004b74 <LL_ADC_SetCommonPathInternalCh>
 80055e6:	e007      	b.n	80055f8 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ec:	f043 0220 	orr.w	r2, r3, #32
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8005600:	7ffb      	ldrb	r3, [r7, #31]
}
 8005602:	4618      	mov	r0, r3
 8005604:	3720      	adds	r7, #32
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	80000004 	.word	0x80000004
 8005610:	40012708 	.word	0x40012708
 8005614:	b0001000 	.word	0xb0001000
 8005618:	20000080 	.word	0x20000080
 800561c:	053e2d63 	.word	0x053e2d63
 8005620:	b8004000 	.word	0xb8004000
 8005624:	b4002000 	.word	0xb4002000

08005628 <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005634:	4618      	mov	r0, r3
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	bc80      	pop	{r7}
 800563c:	4770      	bx	lr

0800563e <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b084      	sub	sp, #16
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4618      	mov	r0, r3
 800564c:	f7ff fbf1 	bl	8004e32 <LL_ADC_REG_IsConversionOngoing>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d033      	beq.n	80056be <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4618      	mov	r0, r3
 800565c:	f7ff fbb1 	bl	8004dc2 <LL_ADC_IsDisableOngoing>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d104      	bne.n	8005670 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4618      	mov	r0, r3
 800566c:	f7ff fbce 	bl	8004e0c <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005670:	f7ff fa34 	bl	8004adc <HAL_GetTick>
 8005674:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8005676:	e01b      	b.n	80056b0 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005678:	f7ff fa30 	bl	8004adc <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	2b02      	cmp	r3, #2
 8005684:	d914      	bls.n	80056b0 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f003 0304 	and.w	r3, r3, #4
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00d      	beq.n	80056b0 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005698:	f043 0210 	orr.w	r2, r3, #16
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056a4:	f043 0201 	orr.w	r2, r3, #1
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e007      	b.n	80056c0 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f003 0304 	and.w	r3, r3, #4
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1dc      	bne.n	8005678 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3710      	adds	r7, #16
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80056d0:	2300      	movs	r3, #0
 80056d2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4618      	mov	r0, r3
 80056da:	f7ff fb60 	bl	8004d9e <LL_ADC_IsEnabled>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d169      	bne.n	80057b8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	689a      	ldr	r2, [r3, #8]
 80056ea:	4b36      	ldr	r3, [pc, #216]	; (80057c4 <ADC_Enable+0xfc>)
 80056ec:	4013      	ands	r3, r2
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00d      	beq.n	800570e <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f6:	f043 0210 	orr.w	r2, r3, #16
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005702:	f043 0201 	orr.w	r2, r3, #1
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e055      	b.n	80057ba <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4618      	mov	r0, r3
 8005714:	f7ff fb1d 	bl	8004d52 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8005718:	482b      	ldr	r0, [pc, #172]	; (80057c8 <ADC_Enable+0x100>)
 800571a:	f7ff fa3d 	bl	8004b98 <LL_ADC_GetCommonPathInternalCh>
 800571e:	4603      	mov	r3, r0
 8005720:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00f      	beq.n	8005748 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005728:	4b28      	ldr	r3, [pc, #160]	; (80057cc <ADC_Enable+0x104>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	099b      	lsrs	r3, r3, #6
 800572e:	4a28      	ldr	r2, [pc, #160]	; (80057d0 <ADC_Enable+0x108>)
 8005730:	fba2 2303 	umull	r2, r3, r2, r3
 8005734:	099b      	lsrs	r3, r3, #6
 8005736:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8005738:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800573a:	e002      	b.n	8005742 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	3b01      	subs	r3, #1
 8005740:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1f9      	bne.n	800573c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	7e5b      	ldrb	r3, [r3, #25]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d033      	beq.n	80057b8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8005750:	f7ff f9c4 	bl	8004adc <HAL_GetTick>
 8005754:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005756:	e028      	b.n	80057aa <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4618      	mov	r0, r3
 800575e:	f7ff fb1e 	bl	8004d9e <LL_ADC_IsEnabled>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d104      	bne.n	8005772 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4618      	mov	r0, r3
 800576e:	f7ff faf0 	bl	8004d52 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005772:	f7ff f9b3 	bl	8004adc <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	2b02      	cmp	r3, #2
 800577e:	d914      	bls.n	80057aa <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b01      	cmp	r3, #1
 800578c:	d00d      	beq.n	80057aa <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005792:	f043 0210 	orr.w	r2, r3, #16
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800579e:	f043 0201 	orr.w	r2, r3, #1
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e007      	b.n	80057ba <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d1cf      	bne.n	8005758 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	80000017 	.word	0x80000017
 80057c8:	40012708 	.word	0x40012708
 80057cc:	20000080 	.word	0x20000080
 80057d0:	053e2d63 	.word	0x053e2d63

080057d4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7ff faee 	bl	8004dc2 <LL_ADC_IsDisableOngoing>
 80057e6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7ff fad6 	bl	8004d9e <LL_ADC_IsEnabled>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d047      	beq.n	8005888 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d144      	bne.n	8005888 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f003 0305 	and.w	r3, r3, #5
 8005808:	2b01      	cmp	r3, #1
 800580a:	d10c      	bne.n	8005826 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4618      	mov	r0, r3
 8005812:	f7ff fab1 	bl	8004d78 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2203      	movs	r2, #3
 800581c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800581e:	f7ff f95d 	bl	8004adc <HAL_GetTick>
 8005822:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005824:	e029      	b.n	800587a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800582a:	f043 0210 	orr.w	r2, r3, #16
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005836:	f043 0201 	orr.w	r2, r3, #1
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e023      	b.n	800588a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005842:	f7ff f94b 	bl	8004adc <HAL_GetTick>
 8005846:	4602      	mov	r2, r0
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	2b02      	cmp	r3, #2
 800584e:	d914      	bls.n	800587a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00d      	beq.n	800587a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005862:	f043 0210 	orr.w	r2, r3, #16
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800586e:	f043 0201 	orr.w	r2, r3, #1
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e007      	b.n	800588a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f003 0301 	and.w	r3, r3, #1
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1dc      	bne.n	8005842 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <LL_ADC_SetCalibrationFactor>:
{
 8005892:	b480      	push	{r7}
 8005894:	b083      	sub	sp, #12
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
 800589a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80058a2:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	431a      	orrs	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bc80      	pop	{r7}
 80058b8:	4770      	bx	lr

080058ba <LL_ADC_GetCalibrationFactor>:
{
 80058ba:	b480      	push	{r7}
 80058bc:	b083      	sub	sp, #12
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80058c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bc80      	pop	{r7}
 80058d4:	4770      	bx	lr

080058d6 <LL_ADC_Enable>:
{
 80058d6:	b480      	push	{r7}
 80058d8:	b083      	sub	sp, #12
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058e6:	f023 0317 	bic.w	r3, r3, #23
 80058ea:	f043 0201 	orr.w	r2, r3, #1
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	609a      	str	r2, [r3, #8]
}
 80058f2:	bf00      	nop
 80058f4:	370c      	adds	r7, #12
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bc80      	pop	{r7}
 80058fa:	4770      	bx	lr

080058fc <LL_ADC_Disable>:
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800590c:	f023 0317 	bic.w	r3, r3, #23
 8005910:	f043 0202 	orr.w	r2, r3, #2
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	609a      	str	r2, [r3, #8]
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	bc80      	pop	{r7}
 8005920:	4770      	bx	lr

08005922 <LL_ADC_IsEnabled>:
{
 8005922:	b480      	push	{r7}
 8005924:	b083      	sub	sp, #12
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	2b01      	cmp	r3, #1
 8005934:	d101      	bne.n	800593a <LL_ADC_IsEnabled+0x18>
 8005936:	2301      	movs	r3, #1
 8005938:	e000      	b.n	800593c <LL_ADC_IsEnabled+0x1a>
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	bc80      	pop	{r7}
 8005944:	4770      	bx	lr

08005946 <LL_ADC_StartCalibration>:
{
 8005946:	b480      	push	{r7}
 8005948:	b083      	sub	sp, #12
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005956:	f023 0317 	bic.w	r3, r3, #23
 800595a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	609a      	str	r2, [r3, #8]
}
 8005962:	bf00      	nop
 8005964:	370c      	adds	r7, #12
 8005966:	46bd      	mov	sp, r7
 8005968:	bc80      	pop	{r7}
 800596a:	4770      	bx	lr

0800596c <LL_ADC_IsCalibrationOnGoing>:
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800597c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005980:	d101      	bne.n	8005986 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005982:	2301      	movs	r3, #1
 8005984:	e000      	b.n	8005988 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	bc80      	pop	{r7}
 8005990:	4770      	bx	lr

08005992 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b088      	sub	sp, #32
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800599a:	2300      	movs	r3, #0
 800599c:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 800599e:	2300      	movs	r3, #0
 80059a0:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d101      	bne.n	80059b0 <HAL_ADCEx_Calibration_Start+0x1e>
 80059ac:	2302      	movs	r3, #2
 80059ae:	e0b9      	b.n	8005b24 <HAL_ADCEx_Calibration_Start+0x192>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f7ff ff0b 	bl	80057d4 <ADC_Disable>
 80059be:	4603      	mov	r3, r0
 80059c0:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7ff ffab 	bl	8005922 <LL_ADC_IsEnabled>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f040 809d 	bne.w	8005b0e <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059d8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80059dc:	f043 0202 	orr.w	r2, r3, #2
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68da      	ldr	r2, [r3, #12]
 80059ea:	f248 0303 	movw	r3, #32771	; 0x8003
 80059ee:	4013      	ands	r3, r2
 80059f0:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	6812      	ldr	r2, [r2, #0]
 80059fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a00:	f023 0303 	bic.w	r3, r3, #3
 8005a04:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8005a06:	2300      	movs	r3, #0
 8005a08:	61fb      	str	r3, [r7, #28]
 8005a0a:	e02e      	b.n	8005a6a <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7ff ff98 	bl	8005946 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005a16:	e014      	b.n	8005a42 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8005a24:	d30d      	bcc.n	8005a42 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a2a:	f023 0312 	bic.w	r3, r3, #18
 8005a2e:	f043 0210 	orr.w	r2, r3, #16
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e070      	b.n	8005b24 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7ff ff90 	bl	800596c <LL_ADC_IsCalibrationOnGoing>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1e2      	bne.n	8005a18 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7ff ff2f 	bl	80058ba <LL_ADC_GetCalibrationFactor>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	4413      	add	r3, r2
 8005a62:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	3301      	adds	r3, #1
 8005a68:	61fb      	str	r3, [r7, #28]
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	2b07      	cmp	r3, #7
 8005a6e:	d9cd      	bls.n	8005a0c <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a78:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7ff ff29 	bl	80058d6 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	69b9      	ldr	r1, [r7, #24]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f7ff ff01 	bl	8005892 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4618      	mov	r0, r3
 8005a96:	f7ff ff31 	bl	80058fc <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005a9a:	f7ff f81f 	bl	8004adc <HAL_GetTick>
 8005a9e:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005aa0:	e01c      	b.n	8005adc <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005aa2:	f7ff f81b 	bl	8004adc <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d915      	bls.n	8005adc <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7ff ff34 	bl	8005922 <LL_ADC_IsEnabled>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00d      	beq.n	8005adc <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ac4:	f043 0210 	orr.w	r2, r3, #16
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ad0:	f043 0201 	orr.w	r2, r3, #1
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e023      	b.n	8005b24 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7ff ff1e 	bl	8005922 <LL_ADC_IsEnabled>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1da      	bne.n	8005aa2 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68d9      	ldr	r1, [r3, #12]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	430a      	orrs	r2, r1
 8005afa:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b00:	f023 0303 	bic.w	r3, r3, #3
 8005b04:	f043 0201 	orr.w	r2, r3, #1
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	659a      	str	r2, [r3, #88]	; 0x58
 8005b0c:	e005      	b.n	8005b1a <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b12:	f043 0210 	orr.w	r2, r3, #16
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8005b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3720      	adds	r7, #32
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <__NVIC_SetPriorityGrouping>:
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f003 0307 	and.w	r3, r3, #7
 8005b3a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b3c:	4b0c      	ldr	r3, [pc, #48]	; (8005b70 <__NVIC_SetPriorityGrouping+0x44>)
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005b48:	4013      	ands	r3, r2
 8005b4a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b5e:	4a04      	ldr	r2, [pc, #16]	; (8005b70 <__NVIC_SetPriorityGrouping+0x44>)
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	60d3      	str	r3, [r2, #12]
}
 8005b64:	bf00      	nop
 8005b66:	3714      	adds	r7, #20
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bc80      	pop	{r7}
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	e000ed00 	.word	0xe000ed00

08005b74 <__NVIC_GetPriorityGrouping>:
{
 8005b74:	b480      	push	{r7}
 8005b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b78:	4b04      	ldr	r3, [pc, #16]	; (8005b8c <__NVIC_GetPriorityGrouping+0x18>)
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	0a1b      	lsrs	r3, r3, #8
 8005b7e:	f003 0307 	and.w	r3, r3, #7
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bc80      	pop	{r7}
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	e000ed00 	.word	0xe000ed00

08005b90 <__NVIC_EnableIRQ>:
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	4603      	mov	r3, r0
 8005b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	db0b      	blt.n	8005bba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ba2:	79fb      	ldrb	r3, [r7, #7]
 8005ba4:	f003 021f 	and.w	r2, r3, #31
 8005ba8:	4906      	ldr	r1, [pc, #24]	; (8005bc4 <__NVIC_EnableIRQ+0x34>)
 8005baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bae:	095b      	lsrs	r3, r3, #5
 8005bb0:	2001      	movs	r0, #1
 8005bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8005bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005bba:	bf00      	nop
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bc80      	pop	{r7}
 8005bc2:	4770      	bx	lr
 8005bc4:	e000e100 	.word	0xe000e100

08005bc8 <__NVIC_DisableIRQ>:
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	4603      	mov	r3, r0
 8005bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	db12      	blt.n	8005c00 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005bda:	79fb      	ldrb	r3, [r7, #7]
 8005bdc:	f003 021f 	and.w	r2, r3, #31
 8005be0:	490a      	ldr	r1, [pc, #40]	; (8005c0c <__NVIC_DisableIRQ+0x44>)
 8005be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005be6:	095b      	lsrs	r3, r3, #5
 8005be8:	2001      	movs	r0, #1
 8005bea:	fa00 f202 	lsl.w	r2, r0, r2
 8005bee:	3320      	adds	r3, #32
 8005bf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005bf4:	f3bf 8f4f 	dsb	sy
}
 8005bf8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005bfa:	f3bf 8f6f 	isb	sy
}
 8005bfe:	bf00      	nop
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bc80      	pop	{r7}
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	e000e100 	.word	0xe000e100

08005c10 <__NVIC_SetPriority>:
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	4603      	mov	r3, r0
 8005c18:	6039      	str	r1, [r7, #0]
 8005c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	db0a      	blt.n	8005c3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	490c      	ldr	r1, [pc, #48]	; (8005c5c <__NVIC_SetPriority+0x4c>)
 8005c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c2e:	0112      	lsls	r2, r2, #4
 8005c30:	b2d2      	uxtb	r2, r2
 8005c32:	440b      	add	r3, r1
 8005c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005c38:	e00a      	b.n	8005c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	b2da      	uxtb	r2, r3
 8005c3e:	4908      	ldr	r1, [pc, #32]	; (8005c60 <__NVIC_SetPriority+0x50>)
 8005c40:	79fb      	ldrb	r3, [r7, #7]
 8005c42:	f003 030f 	and.w	r3, r3, #15
 8005c46:	3b04      	subs	r3, #4
 8005c48:	0112      	lsls	r2, r2, #4
 8005c4a:	b2d2      	uxtb	r2, r2
 8005c4c:	440b      	add	r3, r1
 8005c4e:	761a      	strb	r2, [r3, #24]
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bc80      	pop	{r7}
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	e000e100 	.word	0xe000e100
 8005c60:	e000ed00 	.word	0xe000ed00

08005c64 <NVIC_EncodePriority>:
{
 8005c64:	b480      	push	{r7}
 8005c66:	b089      	sub	sp, #36	; 0x24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f003 0307 	and.w	r3, r3, #7
 8005c76:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	f1c3 0307 	rsb	r3, r3, #7
 8005c7e:	2b04      	cmp	r3, #4
 8005c80:	bf28      	it	cs
 8005c82:	2304      	movcs	r3, #4
 8005c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	3304      	adds	r3, #4
 8005c8a:	2b06      	cmp	r3, #6
 8005c8c:	d902      	bls.n	8005c94 <NVIC_EncodePriority+0x30>
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	3b03      	subs	r3, #3
 8005c92:	e000      	b.n	8005c96 <NVIC_EncodePriority+0x32>
 8005c94:	2300      	movs	r3, #0
 8005c96:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c98:	f04f 32ff 	mov.w	r2, #4294967295
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca2:	43da      	mvns	r2, r3
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	401a      	ands	r2, r3
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005cac:	f04f 31ff 	mov.w	r1, #4294967295
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8005cb6:	43d9      	mvns	r1, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cbc:	4313      	orrs	r3, r2
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3724      	adds	r7, #36	; 0x24
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bc80      	pop	{r7}
 8005cc6:	4770      	bx	lr

08005cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f7ff ff2b 	bl	8005b2c <__NVIC_SetPriorityGrouping>
}
 8005cd6:	bf00      	nop
 8005cd8:	3708      	adds	r7, #8
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b086      	sub	sp, #24
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	60b9      	str	r1, [r7, #8]
 8005ce8:	607a      	str	r2, [r7, #4]
 8005cea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005cec:	f7ff ff42 	bl	8005b74 <__NVIC_GetPriorityGrouping>
 8005cf0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	68b9      	ldr	r1, [r7, #8]
 8005cf6:	6978      	ldr	r0, [r7, #20]
 8005cf8:	f7ff ffb4 	bl	8005c64 <NVIC_EncodePriority>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d02:	4611      	mov	r1, r2
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7ff ff83 	bl	8005c10 <__NVIC_SetPriority>
}
 8005d0a:	bf00      	nop
 8005d0c:	3718      	adds	r7, #24
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b082      	sub	sp, #8
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	4603      	mov	r3, r0
 8005d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d20:	4618      	mov	r0, r3
 8005d22:	f7ff ff35 	bl	8005b90 <__NVIC_EnableIRQ>
}
 8005d26:	bf00      	nop
 8005d28:	3708      	adds	r7, #8
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b082      	sub	sp, #8
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	4603      	mov	r3, r0
 8005d36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7ff ff43 	bl	8005bc8 <__NVIC_DisableIRQ>
}
 8005d42:	bf00      	nop
 8005d44:	3708      	adds	r7, #8
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	b083      	sub	sp, #12
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d101      	bne.n	8005d5c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e04f      	b.n	8005dfc <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d008      	beq.n	8005d7a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2204      	movs	r2, #4
 8005d6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e040      	b.n	8005dfc <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f022 020e 	bic.w	r2, r2, #14
 8005d88:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 0201 	bic.w	r2, r2, #1
 8005da8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dae:	f003 021c 	and.w	r2, r3, #28
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db6:	2101      	movs	r1, #1
 8005db8:	fa01 f202 	lsl.w	r2, r1, r2
 8005dbc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005dc6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00c      	beq.n	8005dea <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005dde:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005de8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bc80      	pop	{r7}
 8005e04:	4770      	bx	lr

08005e06 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b084      	sub	sp, #16
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d005      	beq.n	8005e2a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2204      	movs	r2, #4
 8005e22:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	73fb      	strb	r3, [r7, #15]
 8005e28:	e047      	b.n	8005eba <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f022 020e 	bic.w	r2, r2, #14
 8005e38:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f022 0201 	bic.w	r2, r2, #1
 8005e48:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e5e:	f003 021c 	and.w	r2, r3, #28
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e66:	2101      	movs	r1, #1
 8005e68:	fa01 f202 	lsl.w	r2, r1, r2
 8005e6c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005e76:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d00c      	beq.n	8005e9a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e8e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005e98:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d003      	beq.n	8005eba <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	4798      	blx	r3
    }
  }
  return status;
 8005eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3710      	adds	r7, #16
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005ed2:	4b1c      	ldr	r3, [pc, #112]	; (8005f44 <HAL_FLASH_Program+0x80>)
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d101      	bne.n	8005ede <HAL_FLASH_Program+0x1a>
 8005eda:	2302      	movs	r3, #2
 8005edc:	e02d      	b.n	8005f3a <HAL_FLASH_Program+0x76>
 8005ede:	4b19      	ldr	r3, [pc, #100]	; (8005f44 <HAL_FLASH_Program+0x80>)
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005ee4:	4b17      	ldr	r3, [pc, #92]	; (8005f44 <HAL_FLASH_Program+0x80>)
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005eea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005eee:	f000 f869 	bl	8005fc4 <FLASH_WaitForLastOperation>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8005ef6:	7dfb      	ldrb	r3, [r7, #23]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d11a      	bne.n	8005f32 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d105      	bne.n	8005f0e <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8005f02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f06:	68b8      	ldr	r0, [r7, #8]
 8005f08:	f000 f8be 	bl	8006088 <FLASH_Program_DoubleWord>
 8005f0c:	e004      	b.n	8005f18 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	4619      	mov	r1, r3
 8005f12:	68b8      	ldr	r0, [r7, #8]
 8005f14:	f000 f8de 	bl	80060d4 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005f18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005f1c:	f000 f852 	bl	8005fc4 <FLASH_WaitForLastOperation>
 8005f20:	4603      	mov	r3, r0
 8005f22:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8005f24:	4b08      	ldr	r3, [pc, #32]	; (8005f48 <HAL_FLASH_Program+0x84>)
 8005f26:	695a      	ldr	r2, [r3, #20]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	43db      	mvns	r3, r3
 8005f2c:	4906      	ldr	r1, [pc, #24]	; (8005f48 <HAL_FLASH_Program+0x84>)
 8005f2e:	4013      	ands	r3, r2
 8005f30:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005f32:	4b04      	ldr	r3, [pc, #16]	; (8005f44 <HAL_FLASH_Program+0x80>)
 8005f34:	2200      	movs	r2, #0
 8005f36:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8005f38:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3718      	adds	r7, #24
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	200018bc 	.word	0x200018bc
 8005f48:	58004000 	.word	0x58004000

08005f4c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005f52:	2300      	movs	r3, #0
 8005f54:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005f56:	4b0b      	ldr	r3, [pc, #44]	; (8005f84 <HAL_FLASH_Unlock+0x38>)
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	da0b      	bge.n	8005f76 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005f5e:	4b09      	ldr	r3, [pc, #36]	; (8005f84 <HAL_FLASH_Unlock+0x38>)
 8005f60:	4a09      	ldr	r2, [pc, #36]	; (8005f88 <HAL_FLASH_Unlock+0x3c>)
 8005f62:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005f64:	4b07      	ldr	r3, [pc, #28]	; (8005f84 <HAL_FLASH_Unlock+0x38>)
 8005f66:	4a09      	ldr	r2, [pc, #36]	; (8005f8c <HAL_FLASH_Unlock+0x40>)
 8005f68:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005f6a:	4b06      	ldr	r3, [pc, #24]	; (8005f84 <HAL_FLASH_Unlock+0x38>)
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	da01      	bge.n	8005f76 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005f76:	79fb      	ldrb	r3, [r7, #7]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bc80      	pop	{r7}
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	58004000 	.word	0x58004000
 8005f88:	45670123 	.word	0x45670123
 8005f8c:	cdef89ab 	.word	0xcdef89ab

08005f90 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005f96:	2300      	movs	r3, #0
 8005f98:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005f9a:	4b09      	ldr	r3, [pc, #36]	; (8005fc0 <HAL_FLASH_Lock+0x30>)
 8005f9c:	695b      	ldr	r3, [r3, #20]
 8005f9e:	4a08      	ldr	r2, [pc, #32]	; (8005fc0 <HAL_FLASH_Lock+0x30>)
 8005fa0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fa4:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8005fa6:	4b06      	ldr	r3, [pc, #24]	; (8005fc0 <HAL_FLASH_Lock+0x30>)
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	db01      	blt.n	8005fb2 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005fb2:	79fb      	ldrb	r3, [r7, #7]
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bc80      	pop	{r7}
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	58004000 	.word	0x58004000

08005fc4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8005fcc:	f7fe fd86 	bl	8004adc <HAL_GetTick>
 8005fd0:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005fd2:	e009      	b.n	8005fe8 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005fd4:	f7fe fd82 	bl	8004adc <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d801      	bhi.n	8005fe8 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e047      	b.n	8006078 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005fe8:	4b25      	ldr	r3, [pc, #148]	; (8006080 <FLASH_WaitForLastOperation+0xbc>)
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ff4:	d0ee      	beq.n	8005fd4 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8005ff6:	4b22      	ldr	r3, [pc, #136]	; (8006080 <FLASH_WaitForLastOperation+0xbc>)
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	2b00      	cmp	r3, #0
 8006004:	d002      	beq.n	800600c <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006006:	4b1e      	ldr	r3, [pc, #120]	; (8006080 <FLASH_WaitForLastOperation+0xbc>)
 8006008:	2201      	movs	r2, #1
 800600a:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8006012:	4013      	ands	r3, r2
 8006014:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d007      	beq.n	8006030 <FLASH_WaitForLastOperation+0x6c>
 8006020:	4b17      	ldr	r3, [pc, #92]	; (8006080 <FLASH_WaitForLastOperation+0xbc>)
 8006022:	699a      	ldr	r2, [r3, #24]
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800602a:	4915      	ldr	r1, [pc, #84]	; (8006080 <FLASH_WaitForLastOperation+0xbc>)
 800602c:	4313      	orrs	r3, r2
 800602e:	618b      	str	r3, [r1, #24]
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d004      	beq.n	8006044 <FLASH_WaitForLastOperation+0x80>
 800603a:	4a11      	ldr	r2, [pc, #68]	; (8006080 <FLASH_WaitForLastOperation+0xbc>)
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006042:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00e      	beq.n	8006068 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800604a:	4a0e      	ldr	r2, [pc, #56]	; (8006084 <FLASH_WaitForLastOperation+0xc0>)
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e011      	b.n	8006078 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8006054:	f7fe fd42 	bl	8004adc <HAL_GetTick>
 8006058:	4602      	mov	r2, r0
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	429a      	cmp	r2, r3
 8006062:	d801      	bhi.n	8006068 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 8006064:	2303      	movs	r3, #3
 8006066:	e007      	b.n	8006078 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8006068:	4b05      	ldr	r3, [pc, #20]	; (8006080 <FLASH_WaitForLastOperation+0xbc>)
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006070:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006074:	d0ee      	beq.n	8006054 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	58004000 	.word	0x58004000
 8006084:	200018bc 	.word	0x200018bc

08006088 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006094:	4b0e      	ldr	r3, [pc, #56]	; (80060d0 <FLASH_Program_DoubleWord+0x48>)
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	4a0d      	ldr	r2, [pc, #52]	; (80060d0 <FLASH_Program_DoubleWord+0x48>)
 800609a:	f043 0301 	orr.w	r3, r3, #1
 800609e:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80060a6:	f3bf 8f6f 	isb	sy
}
 80060aa:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80060ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060b0:	f04f 0200 	mov.w	r2, #0
 80060b4:	f04f 0300 	mov.w	r3, #0
 80060b8:	000a      	movs	r2, r1
 80060ba:	2300      	movs	r3, #0
 80060bc:	68f9      	ldr	r1, [r7, #12]
 80060be:	3104      	adds	r1, #4
 80060c0:	4613      	mov	r3, r2
 80060c2:	600b      	str	r3, [r1, #0]
}
 80060c4:	bf00      	nop
 80060c6:	3714      	adds	r7, #20
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bc80      	pop	{r7}
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	58004000 	.word	0x58004000

080060d4 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 80060d4:	b480      	push	{r7}
 80060d6:	b089      	sub	sp, #36	; 0x24
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80060de:	2340      	movs	r3, #64	; 0x40
 80060e0:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80060ea:	4b18      	ldr	r3, [pc, #96]	; (800614c <FLASH_Program_Fast+0x78>)
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	4a17      	ldr	r2, [pc, #92]	; (800614c <FLASH_Program_Fast+0x78>)
 80060f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060f4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060f6:	f3ef 8310 	mrs	r3, PRIMASK
 80060fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80060fc:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 80060fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006100:	b672      	cpsid	i
}
 8006102:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	3304      	adds	r3, #4
 8006110:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	3304      	adds	r3, #4
 8006116:	617b      	str	r3, [r7, #20]
    row_index--;
 8006118:	7ffb      	ldrb	r3, [r7, #31]
 800611a:	3b01      	subs	r3, #1
 800611c:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 800611e:	7ffb      	ldrb	r3, [r7, #31]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d1ef      	bne.n	8006104 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8006124:	bf00      	nop
 8006126:	4b09      	ldr	r3, [pc, #36]	; (800614c <FLASH_Program_Fast+0x78>)
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800612e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006132:	d0f8      	beq.n	8006126 <FLASH_Program_Fast+0x52>
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	f383 8810 	msr	PRIMASK, r3
}
 800613e:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8006140:	bf00      	nop
 8006142:	3724      	adds	r7, #36	; 0x24
 8006144:	46bd      	mov	sp, r7
 8006146:	bc80      	pop	{r7}
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	58004000 	.word	0x58004000

08006150 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800615a:	4b28      	ldr	r3, [pc, #160]	; (80061fc <HAL_FLASHEx_Erase+0xac>)
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	2b01      	cmp	r3, #1
 8006160:	d101      	bne.n	8006166 <HAL_FLASHEx_Erase+0x16>
 8006162:	2302      	movs	r3, #2
 8006164:	e046      	b.n	80061f4 <HAL_FLASHEx_Erase+0xa4>
 8006166:	4b25      	ldr	r3, [pc, #148]	; (80061fc <HAL_FLASHEx_Erase+0xac>)
 8006168:	2201      	movs	r2, #1
 800616a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800616c:	4b23      	ldr	r3, [pc, #140]	; (80061fc <HAL_FLASHEx_Erase+0xac>)
 800616e:	2200      	movs	r2, #0
 8006170:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006172:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006176:	f7ff ff25 	bl	8005fc4 <FLASH_WaitForLastOperation>
 800617a:	4603      	mov	r3, r0
 800617c:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800617e:	7bfb      	ldrb	r3, [r7, #15]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d133      	bne.n	80061ec <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2b04      	cmp	r3, #4
 800618a:	d108      	bne.n	800619e <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 800618c:	f000 f838 	bl	8006200 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006190:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006194:	f7ff ff16 	bl	8005fc4 <FLASH_WaitForLastOperation>
 8006198:	4603      	mov	r3, r0
 800619a:	73fb      	strb	r3, [r7, #15]
 800619c:	e024      	b.n	80061e8 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	f04f 32ff 	mov.w	r2, #4294967295
 80061a4:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	60bb      	str	r3, [r7, #8]
 80061ac:	e012      	b.n	80061d4 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 80061ae:	68b8      	ldr	r0, [r7, #8]
 80061b0:	f000 f836 	bl	8006220 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80061b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80061b8:	f7ff ff04 	bl	8005fc4 <FLASH_WaitForLastOperation>
 80061bc:	4603      	mov	r3, r0
 80061be:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 80061c0:	7bfb      	ldrb	r3, [r7, #15]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	68ba      	ldr	r2, [r7, #8]
 80061ca:	601a      	str	r2, [r3, #0]
          break;
 80061cc:	e00a      	b.n	80061e4 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	3301      	adds	r3, #1
 80061d2:	60bb      	str	r3, [r7, #8]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685a      	ldr	r2, [r3, #4]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	4413      	add	r3, r2
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d3e4      	bcc.n	80061ae <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 80061e4:	f000 f878 	bl	80062d8 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80061e8:	f000 f832 	bl	8006250 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80061ec:	4b03      	ldr	r3, [pc, #12]	; (80061fc <HAL_FLASHEx_Erase+0xac>)
 80061ee:	2200      	movs	r2, #0
 80061f0:	701a      	strb	r2, [r3, #0]

  return status;
 80061f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	200018bc 	.word	0x200018bc

08006200 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8006200:	b480      	push	{r7}
 8006202:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8006204:	4b05      	ldr	r3, [pc, #20]	; (800621c <FLASH_MassErase+0x1c>)
 8006206:	695b      	ldr	r3, [r3, #20]
 8006208:	4a04      	ldr	r2, [pc, #16]	; (800621c <FLASH_MassErase+0x1c>)
 800620a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800620e:	f043 0304 	orr.w	r3, r3, #4
 8006212:	6153      	str	r3, [r2, #20]
#endif
}
 8006214:	bf00      	nop
 8006216:	46bd      	mov	sp, r7
 8006218:	bc80      	pop	{r7}
 800621a:	4770      	bx	lr
 800621c:	58004000 	.word	0x58004000

08006220 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8006228:	4b08      	ldr	r3, [pc, #32]	; (800624c <FLASH_PageErase+0x2c>)
 800622a:	695b      	ldr	r3, [r3, #20]
 800622c:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	00db      	lsls	r3, r3, #3
 8006234:	4313      	orrs	r3, r2
 8006236:	4a05      	ldr	r2, [pc, #20]	; (800624c <FLASH_PageErase+0x2c>)
 8006238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800623c:	f043 0302 	orr.w	r3, r3, #2
 8006240:	6153      	str	r3, [r2, #20]
#endif
}
 8006242:	bf00      	nop
 8006244:	370c      	adds	r7, #12
 8006246:	46bd      	mov	sp, r7
 8006248:	bc80      	pop	{r7}
 800624a:	4770      	bx	lr
 800624c:	58004000 	.word	0x58004000

08006250 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006250:	b480      	push	{r7}
 8006252:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8006254:	4b1f      	ldr	r3, [pc, #124]	; (80062d4 <FLASH_FlushCaches+0x84>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800625c:	2b01      	cmp	r3, #1
 800625e:	d117      	bne.n	8006290 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006260:	4b1c      	ldr	r3, [pc, #112]	; (80062d4 <FLASH_FlushCaches+0x84>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a1b      	ldr	r2, [pc, #108]	; (80062d4 <FLASH_FlushCaches+0x84>)
 8006266:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800626a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800626c:	4b19      	ldr	r3, [pc, #100]	; (80062d4 <FLASH_FlushCaches+0x84>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a18      	ldr	r2, [pc, #96]	; (80062d4 <FLASH_FlushCaches+0x84>)
 8006272:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006276:	6013      	str	r3, [r2, #0]
 8006278:	4b16      	ldr	r3, [pc, #88]	; (80062d4 <FLASH_FlushCaches+0x84>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a15      	ldr	r2, [pc, #84]	; (80062d4 <FLASH_FlushCaches+0x84>)
 800627e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006282:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006284:	4b13      	ldr	r3, [pc, #76]	; (80062d4 <FLASH_FlushCaches+0x84>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a12      	ldr	r2, [pc, #72]	; (80062d4 <FLASH_FlushCaches+0x84>)
 800628a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800628e:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8006290:	4b10      	ldr	r3, [pc, #64]	; (80062d4 <FLASH_FlushCaches+0x84>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006298:	2b01      	cmp	r3, #1
 800629a:	d117      	bne.n	80062cc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800629c:	4b0d      	ldr	r3, [pc, #52]	; (80062d4 <FLASH_FlushCaches+0x84>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a0c      	ldr	r2, [pc, #48]	; (80062d4 <FLASH_FlushCaches+0x84>)
 80062a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062a6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80062a8:	4b0a      	ldr	r3, [pc, #40]	; (80062d4 <FLASH_FlushCaches+0x84>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a09      	ldr	r2, [pc, #36]	; (80062d4 <FLASH_FlushCaches+0x84>)
 80062ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80062b2:	6013      	str	r3, [r2, #0]
 80062b4:	4b07      	ldr	r3, [pc, #28]	; (80062d4 <FLASH_FlushCaches+0x84>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a06      	ldr	r2, [pc, #24]	; (80062d4 <FLASH_FlushCaches+0x84>)
 80062ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062be:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80062c0:	4b04      	ldr	r3, [pc, #16]	; (80062d4 <FLASH_FlushCaches+0x84>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a03      	ldr	r2, [pc, #12]	; (80062d4 <FLASH_FlushCaches+0x84>)
 80062c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80062ca:	6013      	str	r3, [r2, #0]
  }
#endif
}
 80062cc:	bf00      	nop
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bc80      	pop	{r7}
 80062d2:	4770      	bx	lr
 80062d4:	58004000 	.word	0x58004000

080062d8 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 80062d8:	b480      	push	{r7}
 80062da:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80062dc:	4b05      	ldr	r3, [pc, #20]	; (80062f4 <FLASH_AcknowledgePageErase+0x1c>)
 80062de:	695b      	ldr	r3, [r3, #20]
 80062e0:	4a04      	ldr	r2, [pc, #16]	; (80062f4 <FLASH_AcknowledgePageErase+0x1c>)
 80062e2:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80062e6:	f023 0302 	bic.w	r3, r3, #2
 80062ea:	6153      	str	r3, [r2, #20]
#endif
}
 80062ec:	bf00      	nop
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bc80      	pop	{r7}
 80062f2:	4770      	bx	lr
 80062f4:	58004000 	.word	0x58004000

080062f8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b087      	sub	sp, #28
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006302:	2300      	movs	r3, #0
 8006304:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006306:	e140      	b.n	800658a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	2101      	movs	r1, #1
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	fa01 f303 	lsl.w	r3, r1, r3
 8006314:	4013      	ands	r3, r2
 8006316:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2b00      	cmp	r3, #0
 800631c:	f000 8132 	beq.w	8006584 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	f003 0303 	and.w	r3, r3, #3
 8006328:	2b01      	cmp	r3, #1
 800632a:	d005      	beq.n	8006338 <HAL_GPIO_Init+0x40>
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	f003 0303 	and.w	r3, r3, #3
 8006334:	2b02      	cmp	r3, #2
 8006336:	d130      	bne.n	800639a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	005b      	lsls	r3, r3, #1
 8006342:	2203      	movs	r2, #3
 8006344:	fa02 f303 	lsl.w	r3, r2, r3
 8006348:	43db      	mvns	r3, r3
 800634a:	693a      	ldr	r2, [r7, #16]
 800634c:	4013      	ands	r3, r2
 800634e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	68da      	ldr	r2, [r3, #12]
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	005b      	lsls	r3, r3, #1
 8006358:	fa02 f303 	lsl.w	r3, r2, r3
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	4313      	orrs	r3, r2
 8006360:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800636e:	2201      	movs	r2, #1
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	fa02 f303 	lsl.w	r3, r2, r3
 8006376:	43db      	mvns	r3, r3
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	4013      	ands	r3, r2
 800637c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	091b      	lsrs	r3, r3, #4
 8006384:	f003 0201 	and.w	r2, r3, #1
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	fa02 f303 	lsl.w	r3, r2, r3
 800638e:	693a      	ldr	r2, [r7, #16]
 8006390:	4313      	orrs	r3, r2
 8006392:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f003 0303 	and.w	r3, r3, #3
 80063a2:	2b03      	cmp	r3, #3
 80063a4:	d017      	beq.n	80063d6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	005b      	lsls	r3, r3, #1
 80063b0:	2203      	movs	r2, #3
 80063b2:	fa02 f303 	lsl.w	r3, r2, r3
 80063b6:	43db      	mvns	r3, r3
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	4013      	ands	r3, r2
 80063bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	689a      	ldr	r2, [r3, #8]
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	005b      	lsls	r3, r3, #1
 80063c6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ca:	693a      	ldr	r2, [r7, #16]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	693a      	ldr	r2, [r7, #16]
 80063d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f003 0303 	and.w	r3, r3, #3
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d123      	bne.n	800642a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	08da      	lsrs	r2, r3, #3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	3208      	adds	r2, #8
 80063ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	f003 0307 	and.w	r3, r3, #7
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	220f      	movs	r2, #15
 80063fa:	fa02 f303 	lsl.w	r3, r2, r3
 80063fe:	43db      	mvns	r3, r3
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	4013      	ands	r3, r2
 8006404:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	691a      	ldr	r2, [r3, #16]
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	f003 0307 	and.w	r3, r3, #7
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	fa02 f303 	lsl.w	r3, r2, r3
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	4313      	orrs	r3, r2
 800641a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	08da      	lsrs	r2, r3, #3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	3208      	adds	r2, #8
 8006424:	6939      	ldr	r1, [r7, #16]
 8006426:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	005b      	lsls	r3, r3, #1
 8006434:	2203      	movs	r2, #3
 8006436:	fa02 f303 	lsl.w	r3, r2, r3
 800643a:	43db      	mvns	r3, r3
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	4013      	ands	r3, r2
 8006440:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	f003 0203 	and.w	r2, r3, #3
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	005b      	lsls	r3, r3, #1
 800644e:	fa02 f303 	lsl.w	r3, r2, r3
 8006452:	693a      	ldr	r2, [r7, #16]
 8006454:	4313      	orrs	r3, r2
 8006456:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006466:	2b00      	cmp	r3, #0
 8006468:	f000 808c 	beq.w	8006584 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800646c:	4a4e      	ldr	r2, [pc, #312]	; (80065a8 <HAL_GPIO_Init+0x2b0>)
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	089b      	lsrs	r3, r3, #2
 8006472:	3302      	adds	r3, #2
 8006474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006478:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	f003 0303 	and.w	r3, r3, #3
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	2207      	movs	r2, #7
 8006484:	fa02 f303 	lsl.w	r3, r2, r3
 8006488:	43db      	mvns	r3, r3
 800648a:	693a      	ldr	r2, [r7, #16]
 800648c:	4013      	ands	r3, r2
 800648e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006496:	d00d      	beq.n	80064b4 <HAL_GPIO_Init+0x1bc>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a44      	ldr	r2, [pc, #272]	; (80065ac <HAL_GPIO_Init+0x2b4>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d007      	beq.n	80064b0 <HAL_GPIO_Init+0x1b8>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a43      	ldr	r2, [pc, #268]	; (80065b0 <HAL_GPIO_Init+0x2b8>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d101      	bne.n	80064ac <HAL_GPIO_Init+0x1b4>
 80064a8:	2302      	movs	r3, #2
 80064aa:	e004      	b.n	80064b6 <HAL_GPIO_Init+0x1be>
 80064ac:	2307      	movs	r3, #7
 80064ae:	e002      	b.n	80064b6 <HAL_GPIO_Init+0x1be>
 80064b0:	2301      	movs	r3, #1
 80064b2:	e000      	b.n	80064b6 <HAL_GPIO_Init+0x1be>
 80064b4:	2300      	movs	r3, #0
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	f002 0203 	and.w	r2, r2, #3
 80064bc:	0092      	lsls	r2, r2, #2
 80064be:	4093      	lsls	r3, r2
 80064c0:	693a      	ldr	r2, [r7, #16]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80064c6:	4938      	ldr	r1, [pc, #224]	; (80065a8 <HAL_GPIO_Init+0x2b0>)
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	089b      	lsrs	r3, r3, #2
 80064cc:	3302      	adds	r3, #2
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80064d4:	4b37      	ldr	r3, [pc, #220]	; (80065b4 <HAL_GPIO_Init+0x2bc>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	43db      	mvns	r3, r3
 80064de:	693a      	ldr	r2, [r7, #16]
 80064e0:	4013      	ands	r3, r2
 80064e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d003      	beq.n	80064f8 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80064f0:	693a      	ldr	r2, [r7, #16]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80064f8:	4a2e      	ldr	r2, [pc, #184]	; (80065b4 <HAL_GPIO_Init+0x2bc>)
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80064fe:	4b2d      	ldr	r3, [pc, #180]	; (80065b4 <HAL_GPIO_Init+0x2bc>)
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	43db      	mvns	r3, r3
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	4013      	ands	r3, r2
 800650c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d003      	beq.n	8006522 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800651a:	693a      	ldr	r2, [r7, #16]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	4313      	orrs	r3, r2
 8006520:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006522:	4a24      	ldr	r2, [pc, #144]	; (80065b4 <HAL_GPIO_Init+0x2bc>)
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8006528:	4b22      	ldr	r3, [pc, #136]	; (80065b4 <HAL_GPIO_Init+0x2bc>)
 800652a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800652e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	43db      	mvns	r3, r3
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	4013      	ands	r3, r2
 8006538:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	4313      	orrs	r3, r2
 800654c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800654e:	4a19      	ldr	r2, [pc, #100]	; (80065b4 <HAL_GPIO_Init+0x2bc>)
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8006556:	4b17      	ldr	r3, [pc, #92]	; (80065b4 <HAL_GPIO_Init+0x2bc>)
 8006558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800655c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	43db      	mvns	r3, r3
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	4013      	ands	r3, r2
 8006566:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006570:	2b00      	cmp	r3, #0
 8006572:	d003      	beq.n	800657c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	4313      	orrs	r3, r2
 800657a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800657c:	4a0d      	ldr	r2, [pc, #52]	; (80065b4 <HAL_GPIO_Init+0x2bc>)
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	3301      	adds	r3, #1
 8006588:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	fa22 f303 	lsr.w	r3, r2, r3
 8006594:	2b00      	cmp	r3, #0
 8006596:	f47f aeb7 	bne.w	8006308 <HAL_GPIO_Init+0x10>
  }
}
 800659a:	bf00      	nop
 800659c:	bf00      	nop
 800659e:	371c      	adds	r7, #28
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bc80      	pop	{r7}
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	40010000 	.word	0x40010000
 80065ac:	48000400 	.word	0x48000400
 80065b0:	48000800 	.word	0x48000800
 80065b4:	58000800 	.word	0x58000800

080065b8 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b087      	sub	sp, #28
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80065c2:	2300      	movs	r3, #0
 80065c4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80065c6:	e0af      	b.n	8006728 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80065c8:	2201      	movs	r2, #1
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	fa02 f303 	lsl.w	r3, r2, r3
 80065d0:	683a      	ldr	r2, [r7, #0]
 80065d2:	4013      	ands	r3, r2
 80065d4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f000 80a2 	beq.w	8006722 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80065de:	4a59      	ldr	r2, [pc, #356]	; (8006744 <HAL_GPIO_DeInit+0x18c>)
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	089b      	lsrs	r3, r3, #2
 80065e4:	3302      	adds	r3, #2
 80065e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065ea:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f003 0303 	and.w	r3, r3, #3
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	2207      	movs	r2, #7
 80065f6:	fa02 f303 	lsl.w	r3, r2, r3
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	4013      	ands	r3, r2
 80065fe:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006606:	d00d      	beq.n	8006624 <HAL_GPIO_DeInit+0x6c>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a4f      	ldr	r2, [pc, #316]	; (8006748 <HAL_GPIO_DeInit+0x190>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d007      	beq.n	8006620 <HAL_GPIO_DeInit+0x68>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a4e      	ldr	r2, [pc, #312]	; (800674c <HAL_GPIO_DeInit+0x194>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d101      	bne.n	800661c <HAL_GPIO_DeInit+0x64>
 8006618:	2302      	movs	r3, #2
 800661a:	e004      	b.n	8006626 <HAL_GPIO_DeInit+0x6e>
 800661c:	2307      	movs	r3, #7
 800661e:	e002      	b.n	8006626 <HAL_GPIO_DeInit+0x6e>
 8006620:	2301      	movs	r3, #1
 8006622:	e000      	b.n	8006626 <HAL_GPIO_DeInit+0x6e>
 8006624:	2300      	movs	r3, #0
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	f002 0203 	and.w	r2, r2, #3
 800662c:	0092      	lsls	r2, r2, #2
 800662e:	4093      	lsls	r3, r2
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	429a      	cmp	r2, r3
 8006634:	d136      	bne.n	80066a4 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8006636:	4b46      	ldr	r3, [pc, #280]	; (8006750 <HAL_GPIO_DeInit+0x198>)
 8006638:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	43db      	mvns	r3, r3
 8006640:	4943      	ldr	r1, [pc, #268]	; (8006750 <HAL_GPIO_DeInit+0x198>)
 8006642:	4013      	ands	r3, r2
 8006644:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8006648:	4b41      	ldr	r3, [pc, #260]	; (8006750 <HAL_GPIO_DeInit+0x198>)
 800664a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	43db      	mvns	r3, r3
 8006652:	493f      	ldr	r1, [pc, #252]	; (8006750 <HAL_GPIO_DeInit+0x198>)
 8006654:	4013      	ands	r3, r2
 8006656:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800665a:	4b3d      	ldr	r3, [pc, #244]	; (8006750 <HAL_GPIO_DeInit+0x198>)
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	43db      	mvns	r3, r3
 8006662:	493b      	ldr	r1, [pc, #236]	; (8006750 <HAL_GPIO_DeInit+0x198>)
 8006664:	4013      	ands	r3, r2
 8006666:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8006668:	4b39      	ldr	r3, [pc, #228]	; (8006750 <HAL_GPIO_DeInit+0x198>)
 800666a:	685a      	ldr	r2, [r3, #4]
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	43db      	mvns	r3, r3
 8006670:	4937      	ldr	r1, [pc, #220]	; (8006750 <HAL_GPIO_DeInit+0x198>)
 8006672:	4013      	ands	r3, r2
 8006674:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f003 0303 	and.w	r3, r3, #3
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	2207      	movs	r2, #7
 8006680:	fa02 f303 	lsl.w	r3, r2, r3
 8006684:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8006686:	4a2f      	ldr	r2, [pc, #188]	; (8006744 <HAL_GPIO_DeInit+0x18c>)
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	089b      	lsrs	r3, r3, #2
 800668c:	3302      	adds	r3, #2
 800668e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	43da      	mvns	r2, r3
 8006696:	482b      	ldr	r0, [pc, #172]	; (8006744 <HAL_GPIO_DeInit+0x18c>)
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	089b      	lsrs	r3, r3, #2
 800669c:	400a      	ands	r2, r1
 800669e:	3302      	adds	r3, #2
 80066a0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	005b      	lsls	r3, r3, #1
 80066ac:	2103      	movs	r1, #3
 80066ae:	fa01 f303 	lsl.w	r3, r1, r3
 80066b2:	431a      	orrs	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	08da      	lsrs	r2, r3, #3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	3208      	adds	r2, #8
 80066c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	f003 0307 	and.w	r3, r3, #7
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	220f      	movs	r2, #15
 80066ce:	fa02 f303 	lsl.w	r3, r2, r3
 80066d2:	43db      	mvns	r3, r3
 80066d4:	697a      	ldr	r2, [r7, #20]
 80066d6:	08d2      	lsrs	r2, r2, #3
 80066d8:	4019      	ands	r1, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	3208      	adds	r2, #8
 80066de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	689a      	ldr	r2, [r3, #8]
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	005b      	lsls	r3, r3, #1
 80066ea:	2103      	movs	r1, #3
 80066ec:	fa01 f303 	lsl.w	r3, r1, r3
 80066f0:	43db      	mvns	r3, r3
 80066f2:	401a      	ands	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	685a      	ldr	r2, [r3, #4]
 80066fc:	2101      	movs	r1, #1
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	fa01 f303 	lsl.w	r3, r1, r3
 8006704:	43db      	mvns	r3, r3
 8006706:	401a      	ands	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	68da      	ldr	r2, [r3, #12]
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	005b      	lsls	r3, r3, #1
 8006714:	2103      	movs	r1, #3
 8006716:	fa01 f303 	lsl.w	r3, r1, r3
 800671a:	43db      	mvns	r3, r3
 800671c:	401a      	ands	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	60da      	str	r2, [r3, #12]
    }

    position++;
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	3301      	adds	r3, #1
 8006726:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8006728:	683a      	ldr	r2, [r7, #0]
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	fa22 f303 	lsr.w	r3, r2, r3
 8006730:	2b00      	cmp	r3, #0
 8006732:	f47f af49 	bne.w	80065c8 <HAL_GPIO_DeInit+0x10>
  }
}
 8006736:	bf00      	nop
 8006738:	bf00      	nop
 800673a:	371c      	adds	r7, #28
 800673c:	46bd      	mov	sp, r7
 800673e:	bc80      	pop	{r7}
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	40010000 	.word	0x40010000
 8006748:	48000400 	.word	0x48000400
 800674c:	48000800 	.word	0x48000800
 8006750:	58000800 	.word	0x58000800

08006754 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	460b      	mov	r3, r1
 800675e:	807b      	strh	r3, [r7, #2]
 8006760:	4613      	mov	r3, r2
 8006762:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006764:	787b      	ldrb	r3, [r7, #1]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d003      	beq.n	8006772 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800676a:	887a      	ldrh	r2, [r7, #2]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006770:	e002      	b.n	8006778 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006772:	887a      	ldrh	r2, [r7, #2]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006778:	bf00      	nop
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	bc80      	pop	{r7}
 8006780:	4770      	bx	lr

08006782 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b082      	sub	sp, #8
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d101      	bne.n	8006794 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e081      	b.n	8006898 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800679a:	b2db      	uxtb	r3, r3
 800679c:	2b00      	cmp	r3, #0
 800679e:	d106      	bne.n	80067ae <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f7fb fbab 	bl	8001f04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2224      	movs	r2, #36	; 0x24
 80067b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f022 0201 	bic.w	r2, r2, #1
 80067c4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685a      	ldr	r2, [r3, #4]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80067d2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	689a      	ldr	r2, [r3, #8]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80067e2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d107      	bne.n	80067fc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	689a      	ldr	r2, [r3, #8]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067f8:	609a      	str	r2, [r3, #8]
 80067fa:	e006      	b.n	800680a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	689a      	ldr	r2, [r3, #8]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006808:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	2b02      	cmp	r3, #2
 8006810:	d104      	bne.n	800681c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800681a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	6812      	ldr	r2, [r2, #0]
 8006826:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800682a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800682e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68da      	ldr	r2, [r3, #12]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800683e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	691a      	ldr	r2, [r3, #16]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	695b      	ldr	r3, [r3, #20]
 8006848:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	430a      	orrs	r2, r1
 8006858:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	69d9      	ldr	r1, [r3, #28]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a1a      	ldr	r2, [r3, #32]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	430a      	orrs	r2, r1
 8006868:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f042 0201 	orr.w	r2, r2, #1
 8006878:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2220      	movs	r2, #32
 8006884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3708      	adds	r7, #8
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b20      	cmp	r3, #32
 80068b4:	d138      	bne.n	8006928 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d101      	bne.n	80068c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80068c0:	2302      	movs	r3, #2
 80068c2:	e032      	b.n	800692a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2224      	movs	r2, #36	; 0x24
 80068d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f022 0201 	bic.w	r2, r2, #1
 80068e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80068f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	6819      	ldr	r1, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	683a      	ldr	r2, [r7, #0]
 8006900:	430a      	orrs	r2, r1
 8006902:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f042 0201 	orr.w	r2, r2, #1
 8006912:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2220      	movs	r2, #32
 8006918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006924:	2300      	movs	r3, #0
 8006926:	e000      	b.n	800692a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006928:	2302      	movs	r3, #2
  }
}
 800692a:	4618      	mov	r0, r3
 800692c:	370c      	adds	r7, #12
 800692e:	46bd      	mov	sp, r7
 8006930:	bc80      	pop	{r7}
 8006932:	4770      	bx	lr

08006934 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006944:	b2db      	uxtb	r3, r3
 8006946:	2b20      	cmp	r3, #32
 8006948:	d139      	bne.n	80069be <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006950:	2b01      	cmp	r3, #1
 8006952:	d101      	bne.n	8006958 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006954:	2302      	movs	r3, #2
 8006956:	e033      	b.n	80069c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2224      	movs	r2, #36	; 0x24
 8006964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f022 0201 	bic.w	r2, r2, #1
 8006976:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006986:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	021b      	lsls	r3, r3, #8
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	4313      	orrs	r3, r2
 8006990:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f042 0201 	orr.w	r2, r2, #1
 80069a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2220      	movs	r2, #32
 80069ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80069ba:	2300      	movs	r3, #0
 80069bc:	e000      	b.n	80069c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80069be:	2302      	movs	r3, #2
  }
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3714      	adds	r7, #20
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bc80      	pop	{r7}
 80069c8:	4770      	bx	lr
	...

080069cc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80069cc:	b480      	push	{r7}
 80069ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069d0:	4b04      	ldr	r3, [pc, #16]	; (80069e4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a03      	ldr	r2, [pc, #12]	; (80069e4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80069d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069da:	6013      	str	r3, [r2, #0]
}
 80069dc:	bf00      	nop
 80069de:	46bd      	mov	sp, r7
 80069e0:	bc80      	pop	{r7}
 80069e2:	4770      	bx	lr
 80069e4:	58000400 	.word	0x58000400

080069e8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80069e8:	b480      	push	{r7}
 80069ea:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80069ec:	4b03      	ldr	r3, [pc, #12]	; (80069fc <HAL_PWREx_GetVoltageRange+0x14>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bc80      	pop	{r7}
 80069fa:	4770      	bx	lr
 80069fc:	58000400 	.word	0x58000400

08006a00 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8006a00:	b480      	push	{r7}
 8006a02:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8006a04:	4b06      	ldr	r3, [pc, #24]	; (8006a20 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a10:	d101      	bne.n	8006a16 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8006a12:	2301      	movs	r3, #1
 8006a14:	e000      	b.n	8006a18 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bc80      	pop	{r7}
 8006a1e:	4770      	bx	lr
 8006a20:	58000400 	.word	0x58000400

08006a24 <LL_RCC_HSE_EnableTcxo>:
{
 8006a24:	b480      	push	{r7}
 8006a26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8006a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a36:	6013      	str	r3, [r2, #0]
}
 8006a38:	bf00      	nop
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bc80      	pop	{r7}
 8006a3e:	4770      	bx	lr

08006a40 <LL_RCC_HSE_DisableTcxo>:
{
 8006a40:	b480      	push	{r7}
 8006a42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8006a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a52:	6013      	str	r3, [r2, #0]
}
 8006a54:	bf00      	nop
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bc80      	pop	{r7}
 8006a5a:	4770      	bx	lr

08006a5c <LL_RCC_HSE_IsEnabledDiv2>:
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a6e:	d101      	bne.n	8006a74 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006a70:	2301      	movs	r3, #1
 8006a72:	e000      	b.n	8006a76 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bc80      	pop	{r7}
 8006a7c:	4770      	bx	lr

08006a7e <LL_RCC_HSE_Enable>:
{
 8006a7e:	b480      	push	{r7}
 8006a80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a90:	6013      	str	r3, [r2, #0]
}
 8006a92:	bf00      	nop
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bc80      	pop	{r7}
 8006a98:	4770      	bx	lr

08006a9a <LL_RCC_HSE_Disable>:
{
 8006a9a:	b480      	push	{r7}
 8006a9c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8006a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006aa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006aac:	6013      	str	r3, [r2, #0]
}
 8006aae:	bf00      	nop
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bc80      	pop	{r7}
 8006ab4:	4770      	bx	lr

08006ab6 <LL_RCC_HSE_IsReady>:
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ac4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ac8:	d101      	bne.n	8006ace <LL_RCC_HSE_IsReady+0x18>
 8006aca:	2301      	movs	r3, #1
 8006acc:	e000      	b.n	8006ad0 <LL_RCC_HSE_IsReady+0x1a>
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bc80      	pop	{r7}
 8006ad6:	4770      	bx	lr

08006ad8 <LL_RCC_HSI_Enable>:
{
 8006ad8:	b480      	push	{r7}
 8006ada:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aea:	6013      	str	r3, [r2, #0]
}
 8006aec:	bf00      	nop
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bc80      	pop	{r7}
 8006af2:	4770      	bx	lr

08006af4 <LL_RCC_HSI_Disable>:
{
 8006af4:	b480      	push	{r7}
 8006af6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b06:	6013      	str	r3, [r2, #0]
}
 8006b08:	bf00      	nop
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bc80      	pop	{r7}
 8006b0e:	4770      	bx	lr

08006b10 <LL_RCC_HSI_IsReady>:
{
 8006b10:	b480      	push	{r7}
 8006b12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b22:	d101      	bne.n	8006b28 <LL_RCC_HSI_IsReady+0x18>
 8006b24:	2301      	movs	r3, #1
 8006b26:	e000      	b.n	8006b2a <LL_RCC_HSI_IsReady+0x1a>
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bc80      	pop	{r7}
 8006b30:	4770      	bx	lr

08006b32 <LL_RCC_HSI_SetCalibTrimming>:
{
 8006b32:	b480      	push	{r7}
 8006b34:	b083      	sub	sp, #12
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	061b      	lsls	r3, r3, #24
 8006b48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	604b      	str	r3, [r1, #4]
}
 8006b50:	bf00      	nop
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bc80      	pop	{r7}
 8006b58:	4770      	bx	lr

08006b5a <LL_RCC_LSE_IsReady>:
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b66:	f003 0302 	and.w	r3, r3, #2
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d101      	bne.n	8006b72 <LL_RCC_LSE_IsReady+0x18>
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e000      	b.n	8006b74 <LL_RCC_LSE_IsReady+0x1a>
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bc80      	pop	{r7}
 8006b7a:	4770      	bx	lr

08006b7c <LL_RCC_LSI_Enable>:
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8006b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b8c:	f043 0301 	orr.w	r3, r3, #1
 8006b90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006b94:	bf00      	nop
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bc80      	pop	{r7}
 8006b9a:	4770      	bx	lr

08006b9c <LL_RCC_LSI_Disable>:
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8006ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ba4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ba8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006bac:	f023 0301 	bic.w	r3, r3, #1
 8006bb0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006bb4:	bf00      	nop
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bc80      	pop	{r7}
 8006bba:	4770      	bx	lr

08006bbc <LL_RCC_LSI_IsReady>:
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8006bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bc8:	f003 0302 	and.w	r3, r3, #2
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d101      	bne.n	8006bd4 <LL_RCC_LSI_IsReady+0x18>
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e000      	b.n	8006bd6 <LL_RCC_LSI_IsReady+0x1a>
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bc80      	pop	{r7}
 8006bdc:	4770      	bx	lr

08006bde <LL_RCC_MSI_Enable>:
{
 8006bde:	b480      	push	{r7}
 8006be0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006bec:	f043 0301 	orr.w	r3, r3, #1
 8006bf0:	6013      	str	r3, [r2, #0]
}
 8006bf2:	bf00      	nop
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bc80      	pop	{r7}
 8006bf8:	4770      	bx	lr

08006bfa <LL_RCC_MSI_Disable>:
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c08:	f023 0301 	bic.w	r3, r3, #1
 8006c0c:	6013      	str	r3, [r2, #0]
}
 8006c0e:	bf00      	nop
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bc80      	pop	{r7}
 8006c14:	4770      	bx	lr

08006c16 <LL_RCC_MSI_IsReady>:
{
 8006c16:	b480      	push	{r7}
 8006c18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0302 	and.w	r3, r3, #2
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	d101      	bne.n	8006c2c <LL_RCC_MSI_IsReady+0x16>
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e000      	b.n	8006c2e <LL_RCC_MSI_IsReady+0x18>
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bc80      	pop	{r7}
 8006c34:	4770      	bx	lr

08006c36 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8006c36:	b480      	push	{r7}
 8006c38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8006c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 0308 	and.w	r3, r3, #8
 8006c44:	2b08      	cmp	r3, #8
 8006c46:	d101      	bne.n	8006c4c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e000      	b.n	8006c4e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bc80      	pop	{r7}
 8006c54:	4770      	bx	lr

08006c56 <LL_RCC_MSI_GetRange>:
{
 8006c56:	b480      	push	{r7}
 8006c58:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8006c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bc80      	pop	{r7}
 8006c6a:	4770      	bx	lr

08006c6c <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8006c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c78:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bc80      	pop	{r7}
 8006c82:	4770      	bx	lr

08006c84 <LL_RCC_MSI_SetCalibTrimming>:
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	021b      	lsls	r3, r3, #8
 8006c9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	604b      	str	r3, [r1, #4]
}
 8006ca2:	bf00      	nop
 8006ca4:	370c      	adds	r7, #12
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bc80      	pop	{r7}
 8006caa:	4770      	bx	lr

08006cac <LL_RCC_SetSysClkSource>:
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	f023 0203 	bic.w	r2, r3, #3
 8006cbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	608b      	str	r3, [r1, #8]
}
 8006cc8:	bf00      	nop
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bc80      	pop	{r7}
 8006cd0:	4770      	bx	lr

08006cd2 <LL_RCC_GetSysClkSource>:
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f003 030c 	and.w	r3, r3, #12
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bc80      	pop	{r7}
 8006ce6:	4770      	bx	lr

08006ce8 <LL_RCC_SetAHBPrescaler>:
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006cfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	608b      	str	r3, [r1, #8]
}
 8006d04:	bf00      	nop
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bc80      	pop	{r7}
 8006d0c:	4770      	bx	lr

08006d0e <LL_RCC_SetAHB3Prescaler>:
{
 8006d0e:	b480      	push	{r7}
 8006d10:	b083      	sub	sp, #12
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d1a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006d1e:	f023 020f 	bic.w	r2, r3, #15
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	091b      	lsrs	r3, r3, #4
 8006d26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bc80      	pop	{r7}
 8006d38:	4770      	bx	lr

08006d3a <LL_RCC_SetAPB1Prescaler>:
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b083      	sub	sp, #12
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006d4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	608b      	str	r3, [r1, #8]
}
 8006d56:	bf00      	nop
 8006d58:	370c      	adds	r7, #12
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bc80      	pop	{r7}
 8006d5e:	4770      	bx	lr

08006d60 <LL_RCC_SetAPB2Prescaler>:
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006d68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006d72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	608b      	str	r3, [r1, #8]
}
 8006d7c:	bf00      	nop
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bc80      	pop	{r7}
 8006d84:	4770      	bx	lr

08006d86 <LL_RCC_GetAHBPrescaler>:
{
 8006d86:	b480      	push	{r7}
 8006d88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006d8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bc80      	pop	{r7}
 8006d9a:	4770      	bx	lr

08006d9c <LL_RCC_GetAHB3Prescaler>:
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006da4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006da8:	011b      	lsls	r3, r3, #4
 8006daa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bc80      	pop	{r7}
 8006db4:	4770      	bx	lr

08006db6 <LL_RCC_GetAPB1Prescaler>:
{
 8006db6:	b480      	push	{r7}
 8006db8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bc80      	pop	{r7}
 8006dca:	4770      	bx	lr

08006dcc <LL_RCC_GetAPB2Prescaler>:
{
 8006dcc:	b480      	push	{r7}
 8006dce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bc80      	pop	{r7}
 8006de0:	4770      	bx	lr

08006de2 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006de2:	b480      	push	{r7}
 8006de4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006df0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006df4:	6013      	str	r3, [r2, #0]
}
 8006df6:	bf00      	nop
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bc80      	pop	{r7}
 8006dfc:	4770      	bx	lr

08006dfe <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006e02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e10:	6013      	str	r3, [r2, #0]
}
 8006e12:	bf00      	nop
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bc80      	pop	{r7}
 8006e18:	4770      	bx	lr

08006e1a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8006e1a:	b480      	push	{r7}
 8006e1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e2c:	d101      	bne.n	8006e32 <LL_RCC_PLL_IsReady+0x18>
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e000      	b.n	8006e34 <LL_RCC_PLL_IsReady+0x1a>
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bc80      	pop	{r7}
 8006e3a:	4770      	bx	lr

08006e3c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	0a1b      	lsrs	r3, r3, #8
 8006e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bc80      	pop	{r7}
 8006e52:	4770      	bx	lr

08006e54 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006e54:	b480      	push	{r7}
 8006e56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bc80      	pop	{r7}
 8006e68:	4770      	bx	lr

08006e6a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bc80      	pop	{r7}
 8006e7e:	4770      	bx	lr

08006e80 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006e80:	b480      	push	{r7}
 8006e82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	f003 0303 	and.w	r3, r3, #3
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bc80      	pop	{r7}
 8006e94:	4770      	bx	lr

08006e96 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8006e96:	b480      	push	{r7}
 8006e98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ea8:	d101      	bne.n	8006eae <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e000      	b.n	8006eb0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bc80      	pop	{r7}
 8006eb6:	4770      	bx	lr

08006eb8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ec0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ecc:	d101      	bne.n	8006ed2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e000      	b.n	8006ed4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bc80      	pop	{r7}
 8006eda:	4770      	bx	lr

08006edc <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006edc:	b480      	push	{r7}
 8006ede:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006eee:	d101      	bne.n	8006ef4 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e000      	b.n	8006ef6 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bc80      	pop	{r7}
 8006efc:	4770      	bx	lr

08006efe <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8006efe:	b480      	push	{r7}
 8006f00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f10:	d101      	bne.n	8006f16 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006f12:	2301      	movs	r3, #1
 8006f14:	e000      	b.n	8006f18 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bc80      	pop	{r7}
 8006f1e:	4770      	bx	lr

08006f20 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b088      	sub	sp, #32
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d101      	bne.n	8006f32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e36f      	b.n	8007612 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f32:	f7ff fece 	bl	8006cd2 <LL_RCC_GetSysClkSource>
 8006f36:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f38:	f7ff ffa2 	bl	8006e80 <LL_RCC_PLL_GetMainSource>
 8006f3c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 0320 	and.w	r3, r3, #32
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	f000 80c4 	beq.w	80070d4 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d005      	beq.n	8006f5e <HAL_RCC_OscConfig+0x3e>
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	2b0c      	cmp	r3, #12
 8006f56:	d176      	bne.n	8007046 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d173      	bne.n	8007046 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a1b      	ldr	r3, [r3, #32]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d101      	bne.n	8006f6a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e353      	b.n	8007612 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 0308 	and.w	r3, r3, #8
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d005      	beq.n	8006f88 <HAL_RCC_OscConfig+0x68>
 8006f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f86:	e006      	b.n	8006f96 <HAL_RCC_OscConfig+0x76>
 8006f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f90:	091b      	lsrs	r3, r3, #4
 8006f92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d222      	bcs.n	8006fe0 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f000 fd7a 	bl	8007a98 <RCC_SetFlashLatencyFromMSIRange>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d001      	beq.n	8006fae <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	e331      	b.n	8007612 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006fb8:	f043 0308 	orr.w	r3, r3, #8
 8006fbc:	6013      	str	r3, [r2, #0]
 8006fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7ff fe53 	bl	8006c84 <LL_RCC_MSI_SetCalibTrimming>
 8006fde:	e021      	b.n	8007024 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006fea:	f043 0308 	orr.w	r3, r3, #8
 8006fee:	6013      	str	r3, [r2, #0]
 8006ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007002:	4313      	orrs	r3, r2
 8007004:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700a:	4618      	mov	r0, r3
 800700c:	f7ff fe3a 	bl	8006c84 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007014:	4618      	mov	r0, r3
 8007016:	f000 fd3f 	bl	8007a98 <RCC_SetFlashLatencyFromMSIRange>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d001      	beq.n	8007024 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	e2f6      	b.n	8007612 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007024:	f000 fcc2 	bl	80079ac <HAL_RCC_GetHCLKFreq>
 8007028:	4603      	mov	r3, r0
 800702a:	4aa7      	ldr	r2, [pc, #668]	; (80072c8 <HAL_RCC_OscConfig+0x3a8>)
 800702c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800702e:	4ba7      	ldr	r3, [pc, #668]	; (80072cc <HAL_RCC_OscConfig+0x3ac>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4618      	mov	r0, r3
 8007034:	f7fb f90a 	bl	800224c <HAL_InitTick>
 8007038:	4603      	mov	r3, r0
 800703a:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800703c:	7cfb      	ldrb	r3, [r7, #19]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d047      	beq.n	80070d2 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8007042:	7cfb      	ldrb	r3, [r7, #19]
 8007044:	e2e5      	b.n	8007612 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a1b      	ldr	r3, [r3, #32]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d02c      	beq.n	80070a8 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800704e:	f7ff fdc6 	bl	8006bde <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007052:	f7fd fd43 	bl	8004adc <HAL_GetTick>
 8007056:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8007058:	e008      	b.n	800706c <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800705a:	f7fd fd3f 	bl	8004adc <HAL_GetTick>
 800705e:	4602      	mov	r2, r0
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	2b02      	cmp	r3, #2
 8007066:	d901      	bls.n	800706c <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8007068:	2303      	movs	r3, #3
 800706a:	e2d2      	b.n	8007612 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 800706c:	f7ff fdd3 	bl	8006c16 <LL_RCC_MSI_IsReady>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d0f1      	beq.n	800705a <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007080:	f043 0308 	orr.w	r3, r3, #8
 8007084:	6013      	str	r3, [r2, #0]
 8007086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007094:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007098:	4313      	orrs	r3, r2
 800709a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7ff fdef 	bl	8006c84 <LL_RCC_MSI_SetCalibTrimming>
 80070a6:	e015      	b.n	80070d4 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80070a8:	f7ff fda7 	bl	8006bfa <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80070ac:	f7fd fd16 	bl	8004adc <HAL_GetTick>
 80070b0:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80070b2:	e008      	b.n	80070c6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80070b4:	f7fd fd12 	bl	8004adc <HAL_GetTick>
 80070b8:	4602      	mov	r2, r0
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	1ad3      	subs	r3, r2, r3
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d901      	bls.n	80070c6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80070c2:	2303      	movs	r3, #3
 80070c4:	e2a5      	b.n	8007612 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80070c6:	f7ff fda6 	bl	8006c16 <LL_RCC_MSI_IsReady>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d1f1      	bne.n	80070b4 <HAL_RCC_OscConfig+0x194>
 80070d0:	e000      	b.n	80070d4 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80070d2:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0301 	and.w	r3, r3, #1
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d058      	beq.n	8007192 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	2b08      	cmp	r3, #8
 80070e4:	d005      	beq.n	80070f2 <HAL_RCC_OscConfig+0x1d2>
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	2b0c      	cmp	r3, #12
 80070ea:	d108      	bne.n	80070fe <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	2b03      	cmp	r3, #3
 80070f0:	d105      	bne.n	80070fe <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d14b      	bne.n	8007192 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	e289      	b.n	8007612 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80070fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007110:	4313      	orrs	r3, r2
 8007112:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800711c:	d102      	bne.n	8007124 <HAL_RCC_OscConfig+0x204>
 800711e:	f7ff fcae 	bl	8006a7e <LL_RCC_HSE_Enable>
 8007122:	e00d      	b.n	8007140 <HAL_RCC_OscConfig+0x220>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800712c:	d104      	bne.n	8007138 <HAL_RCC_OscConfig+0x218>
 800712e:	f7ff fc79 	bl	8006a24 <LL_RCC_HSE_EnableTcxo>
 8007132:	f7ff fca4 	bl	8006a7e <LL_RCC_HSE_Enable>
 8007136:	e003      	b.n	8007140 <HAL_RCC_OscConfig+0x220>
 8007138:	f7ff fcaf 	bl	8006a9a <LL_RCC_HSE_Disable>
 800713c:	f7ff fc80 	bl	8006a40 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d012      	beq.n	800716e <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007148:	f7fd fcc8 	bl	8004adc <HAL_GetTick>
 800714c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800714e:	e008      	b.n	8007162 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007150:	f7fd fcc4 	bl	8004adc <HAL_GetTick>
 8007154:	4602      	mov	r2, r0
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	2b64      	cmp	r3, #100	; 0x64
 800715c:	d901      	bls.n	8007162 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	e257      	b.n	8007612 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8007162:	f7ff fca8 	bl	8006ab6 <LL_RCC_HSE_IsReady>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d0f1      	beq.n	8007150 <HAL_RCC_OscConfig+0x230>
 800716c:	e011      	b.n	8007192 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800716e:	f7fd fcb5 	bl	8004adc <HAL_GetTick>
 8007172:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8007174:	e008      	b.n	8007188 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007176:	f7fd fcb1 	bl	8004adc <HAL_GetTick>
 800717a:	4602      	mov	r2, r0
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	1ad3      	subs	r3, r2, r3
 8007180:	2b64      	cmp	r3, #100	; 0x64
 8007182:	d901      	bls.n	8007188 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8007184:	2303      	movs	r3, #3
 8007186:	e244      	b.n	8007612 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8007188:	f7ff fc95 	bl	8006ab6 <LL_RCC_HSE_IsReady>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1f1      	bne.n	8007176 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 0302 	and.w	r3, r3, #2
 800719a:	2b00      	cmp	r3, #0
 800719c:	d046      	beq.n	800722c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	2b04      	cmp	r3, #4
 80071a2:	d005      	beq.n	80071b0 <HAL_RCC_OscConfig+0x290>
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	2b0c      	cmp	r3, #12
 80071a8:	d10e      	bne.n	80071c8 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d10b      	bne.n	80071c8 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d101      	bne.n	80071bc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e22a      	b.n	8007612 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	695b      	ldr	r3, [r3, #20]
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7ff fcb6 	bl	8006b32 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80071c6:	e031      	b.n	800722c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d019      	beq.n	8007204 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071d0:	f7ff fc82 	bl	8006ad8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071d4:	f7fd fc82 	bl	8004adc <HAL_GetTick>
 80071d8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80071da:	e008      	b.n	80071ee <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071dc:	f7fd fc7e 	bl	8004adc <HAL_GetTick>
 80071e0:	4602      	mov	r2, r0
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	1ad3      	subs	r3, r2, r3
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	d901      	bls.n	80071ee <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80071ea:	2303      	movs	r3, #3
 80071ec:	e211      	b.n	8007612 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80071ee:	f7ff fc8f 	bl	8006b10 <LL_RCC_HSI_IsReady>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d0f1      	beq.n	80071dc <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	695b      	ldr	r3, [r3, #20]
 80071fc:	4618      	mov	r0, r3
 80071fe:	f7ff fc98 	bl	8006b32 <LL_RCC_HSI_SetCalibTrimming>
 8007202:	e013      	b.n	800722c <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007204:	f7ff fc76 	bl	8006af4 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007208:	f7fd fc68 	bl	8004adc <HAL_GetTick>
 800720c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800720e:	e008      	b.n	8007222 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007210:	f7fd fc64 	bl	8004adc <HAL_GetTick>
 8007214:	4602      	mov	r2, r0
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	1ad3      	subs	r3, r2, r3
 800721a:	2b02      	cmp	r3, #2
 800721c:	d901      	bls.n	8007222 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e1f7      	b.n	8007612 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8007222:	f7ff fc75 	bl	8006b10 <LL_RCC_HSI_IsReady>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1f1      	bne.n	8007210 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0308 	and.w	r3, r3, #8
 8007234:	2b00      	cmp	r3, #0
 8007236:	d06e      	beq.n	8007316 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d056      	beq.n	80072ee <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8007240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007244:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007248:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	69da      	ldr	r2, [r3, #28]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f003 0310 	and.w	r3, r3, #16
 8007254:	429a      	cmp	r2, r3
 8007256:	d031      	beq.n	80072bc <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f003 0302 	and.w	r3, r3, #2
 800725e:	2b00      	cmp	r3, #0
 8007260:	d006      	beq.n	8007270 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007268:	2b00      	cmp	r3, #0
 800726a:	d101      	bne.n	8007270 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	e1d0      	b.n	8007612 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f003 0301 	and.w	r3, r3, #1
 8007276:	2b00      	cmp	r3, #0
 8007278:	d013      	beq.n	80072a2 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 800727a:	f7ff fc8f 	bl	8006b9c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800727e:	f7fd fc2d 	bl	8004adc <HAL_GetTick>
 8007282:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8007284:	e008      	b.n	8007298 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007286:	f7fd fc29 	bl	8004adc <HAL_GetTick>
 800728a:	4602      	mov	r2, r0
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	1ad3      	subs	r3, r2, r3
 8007290:	2b11      	cmp	r3, #17
 8007292:	d901      	bls.n	8007298 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8007294:	2303      	movs	r3, #3
 8007296:	e1bc      	b.n	8007612 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8007298:	f7ff fc90 	bl	8006bbc <LL_RCC_LSI_IsReady>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1f1      	bne.n	8007286 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80072a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072aa:	f023 0210 	bic.w	r2, r3, #16
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	69db      	ldr	r3, [r3, #28]
 80072b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80072b6:	4313      	orrs	r3, r2
 80072b8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072bc:	f7ff fc5e 	bl	8006b7c <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072c0:	f7fd fc0c 	bl	8004adc <HAL_GetTick>
 80072c4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80072c6:	e00c      	b.n	80072e2 <HAL_RCC_OscConfig+0x3c2>
 80072c8:	20000080 	.word	0x20000080
 80072cc:	20000088 	.word	0x20000088
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072d0:	f7fd fc04 	bl	8004adc <HAL_GetTick>
 80072d4:	4602      	mov	r2, r0
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	2b11      	cmp	r3, #17
 80072dc:	d901      	bls.n	80072e2 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80072de:	2303      	movs	r3, #3
 80072e0:	e197      	b.n	8007612 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80072e2:	f7ff fc6b 	bl	8006bbc <LL_RCC_LSI_IsReady>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d0f1      	beq.n	80072d0 <HAL_RCC_OscConfig+0x3b0>
 80072ec:	e013      	b.n	8007316 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072ee:	f7ff fc55 	bl	8006b9c <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072f2:	f7fd fbf3 	bl	8004adc <HAL_GetTick>
 80072f6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80072f8:	e008      	b.n	800730c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072fa:	f7fd fbef 	bl	8004adc <HAL_GetTick>
 80072fe:	4602      	mov	r2, r0
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	1ad3      	subs	r3, r2, r3
 8007304:	2b11      	cmp	r3, #17
 8007306:	d901      	bls.n	800730c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8007308:	2303      	movs	r3, #3
 800730a:	e182      	b.n	8007612 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 800730c:	f7ff fc56 	bl	8006bbc <LL_RCC_LSI_IsReady>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1f1      	bne.n	80072fa <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 0304 	and.w	r3, r3, #4
 800731e:	2b00      	cmp	r3, #0
 8007320:	f000 80d8 	beq.w	80074d4 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007324:	f7ff fb6c 	bl	8006a00 <LL_PWR_IsEnabledBkUpAccess>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d113      	bne.n	8007356 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800732e:	f7ff fb4d 	bl	80069cc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007332:	f7fd fbd3 	bl	8004adc <HAL_GetTick>
 8007336:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007338:	e008      	b.n	800734c <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800733a:	f7fd fbcf 	bl	8004adc <HAL_GetTick>
 800733e:	4602      	mov	r2, r0
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	2b02      	cmp	r3, #2
 8007346:	d901      	bls.n	800734c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8007348:	2303      	movs	r3, #3
 800734a:	e162      	b.n	8007612 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800734c:	f7ff fb58 	bl	8006a00 <LL_PWR_IsEnabledBkUpAccess>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d0f1      	beq.n	800733a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d07b      	beq.n	8007456 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	2b85      	cmp	r3, #133	; 0x85
 8007364:	d003      	beq.n	800736e <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	2b05      	cmp	r3, #5
 800736c:	d109      	bne.n	8007382 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800736e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007376:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800737a:	f043 0304 	orr.w	r3, r3, #4
 800737e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007382:	f7fd fbab 	bl	8004adc <HAL_GetTick>
 8007386:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800738c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007390:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007394:	f043 0301 	orr.w	r3, r3, #1
 8007398:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800739c:	e00a      	b.n	80073b4 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800739e:	f7fd fb9d 	bl	8004adc <HAL_GetTick>
 80073a2:	4602      	mov	r2, r0
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d901      	bls.n	80073b4 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80073b0:	2303      	movs	r3, #3
 80073b2:	e12e      	b.n	8007612 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80073b4:	f7ff fbd1 	bl	8006b5a <LL_RCC_LSE_IsReady>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d0ef      	beq.n	800739e <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	2b81      	cmp	r3, #129	; 0x81
 80073c4:	d003      	beq.n	80073ce <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	2b85      	cmp	r3, #133	; 0x85
 80073cc:	d121      	bne.n	8007412 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073ce:	f7fd fb85 	bl	8004adc <HAL_GetTick>
 80073d2:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80073d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80073e8:	e00a      	b.n	8007400 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073ea:	f7fd fb77 	bl	8004adc <HAL_GetTick>
 80073ee:	4602      	mov	r2, r0
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d901      	bls.n	8007400 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80073fc:	2303      	movs	r3, #3
 80073fe:	e108      	b.n	8007612 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007408:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800740c:	2b00      	cmp	r3, #0
 800740e:	d0ec      	beq.n	80073ea <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8007410:	e060      	b.n	80074d4 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007412:	f7fd fb63 	bl	8004adc <HAL_GetTick>
 8007416:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800741c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007420:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007424:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800742c:	e00a      	b.n	8007444 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800742e:	f7fd fb55 	bl	8004adc <HAL_GetTick>
 8007432:	4602      	mov	r2, r0
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	1ad3      	subs	r3, r2, r3
 8007438:	f241 3288 	movw	r2, #5000	; 0x1388
 800743c:	4293      	cmp	r3, r2
 800743e:	d901      	bls.n	8007444 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8007440:	2303      	movs	r3, #3
 8007442:	e0e6      	b.n	8007612 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800744c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007450:	2b00      	cmp	r3, #0
 8007452:	d1ec      	bne.n	800742e <HAL_RCC_OscConfig+0x50e>
 8007454:	e03e      	b.n	80074d4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007456:	f7fd fb41 	bl	8004adc <HAL_GetTick>
 800745a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800745c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007464:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007468:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800746c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007470:	e00a      	b.n	8007488 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007472:	f7fd fb33 	bl	8004adc <HAL_GetTick>
 8007476:	4602      	mov	r2, r0
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	1ad3      	subs	r3, r2, r3
 800747c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007480:	4293      	cmp	r3, r2
 8007482:	d901      	bls.n	8007488 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e0c4      	b.n	8007612 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800748c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007490:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007494:	2b00      	cmp	r3, #0
 8007496:	d1ec      	bne.n	8007472 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007498:	f7fd fb20 	bl	8004adc <HAL_GetTick>
 800749c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800749e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074aa:	f023 0301 	bic.w	r3, r3, #1
 80074ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80074b2:	e00a      	b.n	80074ca <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074b4:	f7fd fb12 	bl	8004adc <HAL_GetTick>
 80074b8:	4602      	mov	r2, r0
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	f241 3288 	movw	r2, #5000	; 0x1388
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d901      	bls.n	80074ca <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80074c6:	2303      	movs	r3, #3
 80074c8:	e0a3      	b.n	8007612 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80074ca:	f7ff fb46 	bl	8006b5a <LL_RCC_LSE_IsReady>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1ef      	bne.n	80074b4 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d8:	2b00      	cmp	r3, #0
 80074da:	f000 8099 	beq.w	8007610 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	2b0c      	cmp	r3, #12
 80074e2:	d06c      	beq.n	80075be <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d14b      	bne.n	8007584 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074ec:	f7ff fc87 	bl	8006dfe <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074f0:	f7fd faf4 	bl	8004adc <HAL_GetTick>
 80074f4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80074f6:	e008      	b.n	800750a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074f8:	f7fd faf0 	bl	8004adc <HAL_GetTick>
 80074fc:	4602      	mov	r2, r0
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	2b0a      	cmp	r3, #10
 8007504:	d901      	bls.n	800750a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8007506:	2303      	movs	r3, #3
 8007508:	e083      	b.n	8007612 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800750a:	f7ff fc86 	bl	8006e1a <LL_RCC_PLL_IsReady>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d1f1      	bne.n	80074f8 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007514:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007518:	68da      	ldr	r2, [r3, #12]
 800751a:	4b40      	ldr	r3, [pc, #256]	; (800761c <HAL_RCC_OscConfig+0x6fc>)
 800751c:	4013      	ands	r3, r2
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007526:	4311      	orrs	r1, r2
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800752c:	0212      	lsls	r2, r2, #8
 800752e:	4311      	orrs	r1, r2
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007534:	4311      	orrs	r1, r2
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800753a:	4311      	orrs	r1, r2
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007540:	430a      	orrs	r2, r1
 8007542:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007546:	4313      	orrs	r3, r2
 8007548:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800754a:	f7ff fc4a 	bl	8006de2 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800754e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800755c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800755e:	f7fd fabd 	bl	8004adc <HAL_GetTick>
 8007562:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8007564:	e008      	b.n	8007578 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007566:	f7fd fab9 	bl	8004adc <HAL_GetTick>
 800756a:	4602      	mov	r2, r0
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	1ad3      	subs	r3, r2, r3
 8007570:	2b0a      	cmp	r3, #10
 8007572:	d901      	bls.n	8007578 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8007574:	2303      	movs	r3, #3
 8007576:	e04c      	b.n	8007612 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8007578:	f7ff fc4f 	bl	8006e1a <LL_RCC_PLL_IsReady>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d0f1      	beq.n	8007566 <HAL_RCC_OscConfig+0x646>
 8007582:	e045      	b.n	8007610 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007584:	f7ff fc3b 	bl	8006dfe <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007588:	f7fd faa8 	bl	8004adc <HAL_GetTick>
 800758c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800758e:	e008      	b.n	80075a2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007590:	f7fd faa4 	bl	8004adc <HAL_GetTick>
 8007594:	4602      	mov	r2, r0
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	2b0a      	cmp	r3, #10
 800759c:	d901      	bls.n	80075a2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800759e:	2303      	movs	r3, #3
 80075a0:	e037      	b.n	8007612 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80075a2:	f7ff fc3a 	bl	8006e1a <LL_RCC_PLL_IsReady>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d1f1      	bne.n	8007590 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80075ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075b0:	68da      	ldr	r2, [r3, #12]
 80075b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80075b6:	4b1a      	ldr	r3, [pc, #104]	; (8007620 <HAL_RCC_OscConfig+0x700>)
 80075b8:	4013      	ands	r3, r2
 80075ba:	60cb      	str	r3, [r1, #12]
 80075bc:	e028      	b.n	8007610 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d101      	bne.n	80075ca <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	e023      	b.n	8007612 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80075ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	f003 0203 	and.w	r2, r3, #3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075dc:	429a      	cmp	r2, r3
 80075de:	d115      	bne.n	800760c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80075e0:	69bb      	ldr	r3, [r7, #24]
 80075e2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d10e      	bne.n	800760c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f8:	021b      	lsls	r3, r3, #8
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d106      	bne.n	800760c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007608:	429a      	cmp	r2, r3
 800760a:	d001      	beq.n	8007610 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e000      	b.n	8007612 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3720      	adds	r7, #32
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	11c1808c 	.word	0x11c1808c
 8007620:	eefefffc 	.word	0xeefefffc

08007624 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d101      	bne.n	8007638 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e10f      	b.n	8007858 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007638:	4b89      	ldr	r3, [pc, #548]	; (8007860 <HAL_RCC_ClockConfig+0x23c>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 0307 	and.w	r3, r3, #7
 8007640:	683a      	ldr	r2, [r7, #0]
 8007642:	429a      	cmp	r2, r3
 8007644:	d91b      	bls.n	800767e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007646:	4b86      	ldr	r3, [pc, #536]	; (8007860 <HAL_RCC_ClockConfig+0x23c>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f023 0207 	bic.w	r2, r3, #7
 800764e:	4984      	ldr	r1, [pc, #528]	; (8007860 <HAL_RCC_ClockConfig+0x23c>)
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	4313      	orrs	r3, r2
 8007654:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007656:	f7fd fa41 	bl	8004adc <HAL_GetTick>
 800765a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800765c:	e008      	b.n	8007670 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800765e:	f7fd fa3d 	bl	8004adc <HAL_GetTick>
 8007662:	4602      	mov	r2, r0
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	2b02      	cmp	r3, #2
 800766a:	d901      	bls.n	8007670 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800766c:	2303      	movs	r3, #3
 800766e:	e0f3      	b.n	8007858 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007670:	4b7b      	ldr	r3, [pc, #492]	; (8007860 <HAL_RCC_ClockConfig+0x23c>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 0307 	and.w	r3, r3, #7
 8007678:	683a      	ldr	r2, [r7, #0]
 800767a:	429a      	cmp	r2, r3
 800767c:	d1ef      	bne.n	800765e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 0302 	and.w	r3, r3, #2
 8007686:	2b00      	cmp	r3, #0
 8007688:	d016      	beq.n	80076b8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	4618      	mov	r0, r3
 8007690:	f7ff fb2a 	bl	8006ce8 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007694:	f7fd fa22 	bl	8004adc <HAL_GetTick>
 8007698:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800769a:	e008      	b.n	80076ae <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800769c:	f7fd fa1e 	bl	8004adc <HAL_GetTick>
 80076a0:	4602      	mov	r2, r0
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	1ad3      	subs	r3, r2, r3
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	d901      	bls.n	80076ae <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80076aa:	2303      	movs	r3, #3
 80076ac:	e0d4      	b.n	8007858 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80076ae:	f7ff fbf2 	bl	8006e96 <LL_RCC_IsActiveFlag_HPRE>
 80076b2:	4603      	mov	r3, r0
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d0f1      	beq.n	800769c <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d016      	beq.n	80076f2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	695b      	ldr	r3, [r3, #20]
 80076c8:	4618      	mov	r0, r3
 80076ca:	f7ff fb20 	bl	8006d0e <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80076ce:	f7fd fa05 	bl	8004adc <HAL_GetTick>
 80076d2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80076d4:	e008      	b.n	80076e8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80076d6:	f7fd fa01 	bl	8004adc <HAL_GetTick>
 80076da:	4602      	mov	r2, r0
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	1ad3      	subs	r3, r2, r3
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	d901      	bls.n	80076e8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80076e4:	2303      	movs	r3, #3
 80076e6:	e0b7      	b.n	8007858 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80076e8:	f7ff fbe6 	bl	8006eb8 <LL_RCC_IsActiveFlag_SHDHPRE>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d0f1      	beq.n	80076d6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f003 0304 	and.w	r3, r3, #4
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d016      	beq.n	800772c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	4618      	mov	r0, r3
 8007704:	f7ff fb19 	bl	8006d3a <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007708:	f7fd f9e8 	bl	8004adc <HAL_GetTick>
 800770c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800770e:	e008      	b.n	8007722 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007710:	f7fd f9e4 	bl	8004adc <HAL_GetTick>
 8007714:	4602      	mov	r2, r0
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	1ad3      	subs	r3, r2, r3
 800771a:	2b02      	cmp	r3, #2
 800771c:	d901      	bls.n	8007722 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800771e:	2303      	movs	r3, #3
 8007720:	e09a      	b.n	8007858 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007722:	f7ff fbdb 	bl	8006edc <LL_RCC_IsActiveFlag_PPRE1>
 8007726:	4603      	mov	r3, r0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d0f1      	beq.n	8007710 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 0308 	and.w	r3, r3, #8
 8007734:	2b00      	cmp	r3, #0
 8007736:	d017      	beq.n	8007768 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	00db      	lsls	r3, r3, #3
 800773e:	4618      	mov	r0, r3
 8007740:	f7ff fb0e 	bl	8006d60 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007744:	f7fd f9ca 	bl	8004adc <HAL_GetTick>
 8007748:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800774a:	e008      	b.n	800775e <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800774c:	f7fd f9c6 	bl	8004adc <HAL_GetTick>
 8007750:	4602      	mov	r2, r0
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	2b02      	cmp	r3, #2
 8007758:	d901      	bls.n	800775e <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 800775a:	2303      	movs	r3, #3
 800775c:	e07c      	b.n	8007858 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800775e:	f7ff fbce 	bl	8006efe <LL_RCC_IsActiveFlag_PPRE2>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d0f1      	beq.n	800774c <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 0301 	and.w	r3, r3, #1
 8007770:	2b00      	cmp	r3, #0
 8007772:	d043      	beq.n	80077fc <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	2b02      	cmp	r3, #2
 800777a:	d106      	bne.n	800778a <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800777c:	f7ff f99b 	bl	8006ab6 <LL_RCC_HSE_IsReady>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d11e      	bne.n	80077c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	e066      	b.n	8007858 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	2b03      	cmp	r3, #3
 8007790:	d106      	bne.n	80077a0 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8007792:	f7ff fb42 	bl	8006e1a <LL_RCC_PLL_IsReady>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d113      	bne.n	80077c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	e05b      	b.n	8007858 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d106      	bne.n	80077b6 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80077a8:	f7ff fa35 	bl	8006c16 <LL_RCC_MSI_IsReady>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d108      	bne.n	80077c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e050      	b.n	8007858 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80077b6:	f7ff f9ab 	bl	8006b10 <LL_RCC_HSI_IsReady>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d101      	bne.n	80077c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	e049      	b.n	8007858 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	4618      	mov	r0, r3
 80077ca:	f7ff fa6f 	bl	8006cac <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80077ce:	f7fd f985 	bl	8004adc <HAL_GetTick>
 80077d2:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077d4:	e00a      	b.n	80077ec <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077d6:	f7fd f981 	bl	8004adc <HAL_GetTick>
 80077da:	4602      	mov	r2, r0
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	1ad3      	subs	r3, r2, r3
 80077e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d901      	bls.n	80077ec <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80077e8:	2303      	movs	r3, #3
 80077ea:	e035      	b.n	8007858 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077ec:	f7ff fa71 	bl	8006cd2 <LL_RCC_GetSysClkSource>
 80077f0:	4602      	mov	r2, r0
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d1ec      	bne.n	80077d6 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80077fc:	4b18      	ldr	r3, [pc, #96]	; (8007860 <HAL_RCC_ClockConfig+0x23c>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 0307 	and.w	r3, r3, #7
 8007804:	683a      	ldr	r2, [r7, #0]
 8007806:	429a      	cmp	r2, r3
 8007808:	d21b      	bcs.n	8007842 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800780a:	4b15      	ldr	r3, [pc, #84]	; (8007860 <HAL_RCC_ClockConfig+0x23c>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f023 0207 	bic.w	r2, r3, #7
 8007812:	4913      	ldr	r1, [pc, #76]	; (8007860 <HAL_RCC_ClockConfig+0x23c>)
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	4313      	orrs	r3, r2
 8007818:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800781a:	f7fd f95f 	bl	8004adc <HAL_GetTick>
 800781e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007820:	e008      	b.n	8007834 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007822:	f7fd f95b 	bl	8004adc <HAL_GetTick>
 8007826:	4602      	mov	r2, r0
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	1ad3      	subs	r3, r2, r3
 800782c:	2b02      	cmp	r3, #2
 800782e:	d901      	bls.n	8007834 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8007830:	2303      	movs	r3, #3
 8007832:	e011      	b.n	8007858 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007834:	4b0a      	ldr	r3, [pc, #40]	; (8007860 <HAL_RCC_ClockConfig+0x23c>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 0307 	and.w	r3, r3, #7
 800783c:	683a      	ldr	r2, [r7, #0]
 800783e:	429a      	cmp	r2, r3
 8007840:	d1ef      	bne.n	8007822 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007842:	f000 f8b3 	bl	80079ac <HAL_RCC_GetHCLKFreq>
 8007846:	4603      	mov	r3, r0
 8007848:	4a06      	ldr	r2, [pc, #24]	; (8007864 <HAL_RCC_ClockConfig+0x240>)
 800784a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800784c:	4b06      	ldr	r3, [pc, #24]	; (8007868 <HAL_RCC_ClockConfig+0x244>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4618      	mov	r0, r3
 8007852:	f7fa fcfb 	bl	800224c <HAL_InitTick>
 8007856:	4603      	mov	r3, r0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	58004000 	.word	0x58004000
 8007864:	20000080 	.word	0x20000080
 8007868:	20000088 	.word	0x20000088

0800786c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800786c:	b590      	push	{r4, r7, lr}
 800786e:	b087      	sub	sp, #28
 8007870:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8007872:	2300      	movs	r3, #0
 8007874:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8007876:	2300      	movs	r3, #0
 8007878:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800787a:	f7ff fa2a 	bl	8006cd2 <LL_RCC_GetSysClkSource>
 800787e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007880:	f7ff fafe 	bl	8006e80 <LL_RCC_PLL_GetMainSource>
 8007884:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d005      	beq.n	8007898 <HAL_RCC_GetSysClockFreq+0x2c>
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	2b0c      	cmp	r3, #12
 8007890:	d139      	bne.n	8007906 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2b01      	cmp	r3, #1
 8007896:	d136      	bne.n	8007906 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8007898:	f7ff f9cd 	bl	8006c36 <LL_RCC_MSI_IsEnabledRangeSelect>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d115      	bne.n	80078ce <HAL_RCC_GetSysClockFreq+0x62>
 80078a2:	f7ff f9c8 	bl	8006c36 <LL_RCC_MSI_IsEnabledRangeSelect>
 80078a6:	4603      	mov	r3, r0
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d106      	bne.n	80078ba <HAL_RCC_GetSysClockFreq+0x4e>
 80078ac:	f7ff f9d3 	bl	8006c56 <LL_RCC_MSI_GetRange>
 80078b0:	4603      	mov	r3, r0
 80078b2:	0a1b      	lsrs	r3, r3, #8
 80078b4:	f003 030f 	and.w	r3, r3, #15
 80078b8:	e005      	b.n	80078c6 <HAL_RCC_GetSysClockFreq+0x5a>
 80078ba:	f7ff f9d7 	bl	8006c6c <LL_RCC_MSI_GetRangeAfterStandby>
 80078be:	4603      	mov	r3, r0
 80078c0:	0a1b      	lsrs	r3, r3, #8
 80078c2:	f003 030f 	and.w	r3, r3, #15
 80078c6:	4a36      	ldr	r2, [pc, #216]	; (80079a0 <HAL_RCC_GetSysClockFreq+0x134>)
 80078c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078cc:	e014      	b.n	80078f8 <HAL_RCC_GetSysClockFreq+0x8c>
 80078ce:	f7ff f9b2 	bl	8006c36 <LL_RCC_MSI_IsEnabledRangeSelect>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d106      	bne.n	80078e6 <HAL_RCC_GetSysClockFreq+0x7a>
 80078d8:	f7ff f9bd 	bl	8006c56 <LL_RCC_MSI_GetRange>
 80078dc:	4603      	mov	r3, r0
 80078de:	091b      	lsrs	r3, r3, #4
 80078e0:	f003 030f 	and.w	r3, r3, #15
 80078e4:	e005      	b.n	80078f2 <HAL_RCC_GetSysClockFreq+0x86>
 80078e6:	f7ff f9c1 	bl	8006c6c <LL_RCC_MSI_GetRangeAfterStandby>
 80078ea:	4603      	mov	r3, r0
 80078ec:	091b      	lsrs	r3, r3, #4
 80078ee:	f003 030f 	and.w	r3, r3, #15
 80078f2:	4a2b      	ldr	r2, [pc, #172]	; (80079a0 <HAL_RCC_GetSysClockFreq+0x134>)
 80078f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078f8:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d115      	bne.n	800792c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007904:	e012      	b.n	800792c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	2b04      	cmp	r3, #4
 800790a:	d102      	bne.n	8007912 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800790c:	4b25      	ldr	r3, [pc, #148]	; (80079a4 <HAL_RCC_GetSysClockFreq+0x138>)
 800790e:	617b      	str	r3, [r7, #20]
 8007910:	e00c      	b.n	800792c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	2b08      	cmp	r3, #8
 8007916:	d109      	bne.n	800792c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007918:	f7ff f8a0 	bl	8006a5c <LL_RCC_HSE_IsEnabledDiv2>
 800791c:	4603      	mov	r3, r0
 800791e:	2b01      	cmp	r3, #1
 8007920:	d102      	bne.n	8007928 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8007922:	4b20      	ldr	r3, [pc, #128]	; (80079a4 <HAL_RCC_GetSysClockFreq+0x138>)
 8007924:	617b      	str	r3, [r7, #20]
 8007926:	e001      	b.n	800792c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8007928:	4b1f      	ldr	r3, [pc, #124]	; (80079a8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800792a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800792c:	f7ff f9d1 	bl	8006cd2 <LL_RCC_GetSysClkSource>
 8007930:	4603      	mov	r3, r0
 8007932:	2b0c      	cmp	r3, #12
 8007934:	d12f      	bne.n	8007996 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8007936:	f7ff faa3 	bl	8006e80 <LL_RCC_PLL_GetMainSource>
 800793a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2b02      	cmp	r3, #2
 8007940:	d003      	beq.n	800794a <HAL_RCC_GetSysClockFreq+0xde>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2b03      	cmp	r3, #3
 8007946:	d003      	beq.n	8007950 <HAL_RCC_GetSysClockFreq+0xe4>
 8007948:	e00d      	b.n	8007966 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800794a:	4b16      	ldr	r3, [pc, #88]	; (80079a4 <HAL_RCC_GetSysClockFreq+0x138>)
 800794c:	60fb      	str	r3, [r7, #12]
        break;
 800794e:	e00d      	b.n	800796c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007950:	f7ff f884 	bl	8006a5c <LL_RCC_HSE_IsEnabledDiv2>
 8007954:	4603      	mov	r3, r0
 8007956:	2b01      	cmp	r3, #1
 8007958:	d102      	bne.n	8007960 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800795a:	4b12      	ldr	r3, [pc, #72]	; (80079a4 <HAL_RCC_GetSysClockFreq+0x138>)
 800795c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800795e:	e005      	b.n	800796c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8007960:	4b11      	ldr	r3, [pc, #68]	; (80079a8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8007962:	60fb      	str	r3, [r7, #12]
        break;
 8007964:	e002      	b.n	800796c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	60fb      	str	r3, [r7, #12]
        break;
 800796a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800796c:	f7ff fa66 	bl	8006e3c <LL_RCC_PLL_GetN>
 8007970:	4602      	mov	r2, r0
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	fb03 f402 	mul.w	r4, r3, r2
 8007978:	f7ff fa77 	bl	8006e6a <LL_RCC_PLL_GetDivider>
 800797c:	4603      	mov	r3, r0
 800797e:	091b      	lsrs	r3, r3, #4
 8007980:	3301      	adds	r3, #1
 8007982:	fbb4 f4f3 	udiv	r4, r4, r3
 8007986:	f7ff fa65 	bl	8006e54 <LL_RCC_PLL_GetR>
 800798a:	4603      	mov	r3, r0
 800798c:	0f5b      	lsrs	r3, r3, #29
 800798e:	3301      	adds	r3, #1
 8007990:	fbb4 f3f3 	udiv	r3, r4, r3
 8007994:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8007996:	697b      	ldr	r3, [r7, #20]
}
 8007998:	4618      	mov	r0, r3
 800799a:	371c      	adds	r7, #28
 800799c:	46bd      	mov	sp, r7
 800799e:	bd90      	pop	{r4, r7, pc}
 80079a0:	08012a40 	.word	0x08012a40
 80079a4:	00f42400 	.word	0x00f42400
 80079a8:	01e84800 	.word	0x01e84800

080079ac <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079ac:	b598      	push	{r3, r4, r7, lr}
 80079ae:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80079b0:	f7ff ff5c 	bl	800786c <HAL_RCC_GetSysClockFreq>
 80079b4:	4604      	mov	r4, r0
 80079b6:	f7ff f9e6 	bl	8006d86 <LL_RCC_GetAHBPrescaler>
 80079ba:	4603      	mov	r3, r0
 80079bc:	091b      	lsrs	r3, r3, #4
 80079be:	f003 030f 	and.w	r3, r3, #15
 80079c2:	4a03      	ldr	r2, [pc, #12]	; (80079d0 <HAL_RCC_GetHCLKFreq+0x24>)
 80079c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079c8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	bd98      	pop	{r3, r4, r7, pc}
 80079d0:	080129e0 	.word	0x080129e0

080079d4 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079d4:	b598      	push	{r3, r4, r7, lr}
 80079d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80079d8:	f7ff ffe8 	bl	80079ac <HAL_RCC_GetHCLKFreq>
 80079dc:	4604      	mov	r4, r0
 80079de:	f7ff f9ea 	bl	8006db6 <LL_RCC_GetAPB1Prescaler>
 80079e2:	4603      	mov	r3, r0
 80079e4:	0a1b      	lsrs	r3, r3, #8
 80079e6:	4a03      	ldr	r2, [pc, #12]	; (80079f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80079e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079ec:	fa24 f303 	lsr.w	r3, r4, r3
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	bd98      	pop	{r3, r4, r7, pc}
 80079f4:	08012a20 	.word	0x08012a20

080079f8 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079f8:	b598      	push	{r3, r4, r7, lr}
 80079fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80079fc:	f7ff ffd6 	bl	80079ac <HAL_RCC_GetHCLKFreq>
 8007a00:	4604      	mov	r4, r0
 8007a02:	f7ff f9e3 	bl	8006dcc <LL_RCC_GetAPB2Prescaler>
 8007a06:	4603      	mov	r3, r0
 8007a08:	0adb      	lsrs	r3, r3, #11
 8007a0a:	4a03      	ldr	r2, [pc, #12]	; (8007a18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a10:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	bd98      	pop	{r3, r4, r7, pc}
 8007a18:	08012a20 	.word	0x08012a20

08007a1c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer to the Flash Latency variable.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  uint32_t regvalue;

  /* Check the parameters */
  if ((RCC_ClkInitStruct != NULL) && (pFLatency != NULL))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d02d      	beq.n	8007a88 <HAL_RCC_GetClockConfig+0x6c>
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d02a      	beq.n	8007a88 <HAL_RCC_GetClockConfig+0x6c>
  {
    /* Set all possible values for the Clock type parameter --------------------*/
    RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 \
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	224f      	movs	r2, #79	; 0x4f
 8007a36:	601a      	str	r2, [r3, #0]
#if defined(DUAL_CORE)
    RCC_ClkInitStruct->ClockType |= RCC_CLOCKTYPE_HCLK2;
#endif  /* DUAL_CORE */

    /* Get Clock Configuration Register */
    regvalue = RCC->CFGR;
 8007a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	60fb      	str	r3, [r7, #12]

    /* Get the SYSCLK configuration --------------------------------------------*/
    RCC_ClkInitStruct->SYSCLKSource = (regvalue & RCC_CFGR_SWS);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f003 020c 	and.w	r2, r3, #12
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	605a      	str	r2, [r3, #4]

    /* Get the HCLK configuration ----------------------------------------------*/
    RCC_ClkInitStruct->AHBCLKDivider = (regvalue & RCC_CFGR_HPRE);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	609a      	str	r2, [r3, #8]

    /* Get the APB1 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB1CLKDivider = (regvalue & RCC_CFGR_PPRE1);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	60da      	str	r2, [r3, #12]

    /* Get the APB2 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB2CLKDivider = (regvalue & RCC_CFGR_PPRE2);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	611a      	str	r2, [r3, #16]

    /* Get Extended Clock Recovery Register */
    regvalue = RCC->EXTCFGR;
 8007a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a6c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007a70:	60fb      	str	r3, [r7, #12]
    /* Get the AHBCLK2Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK2Divider =  (regvalue & RCC_EXTCFGR_C2HPRE);
#endif  /* DUAL_CORE */

    /* Get the AHBCLK3Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK3Divider = ((regvalue & RCC_EXTCFGR_SHDHPRE) << 4);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	011b      	lsls	r3, r3, #4
 8007a76:	b2da      	uxtb	r2, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	615a      	str	r2, [r3, #20]

    /* Get the Flash Wait State (Latency) configuration ------------------------*/
    *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007a7c:	4b05      	ldr	r3, [pc, #20]	; (8007a94 <HAL_RCC_GetClockConfig+0x78>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 0207 	and.w	r2, r3, #7
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	601a      	str	r2, [r3, #0]
  }
}
 8007a88:	bf00      	nop
 8007a8a:	3714      	adds	r7, #20
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bc80      	pop	{r7}
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	58004000 	.word	0x58004000

08007a98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8007a98:	b590      	push	{r4, r7, lr}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	091b      	lsrs	r3, r3, #4
 8007aa4:	f003 030f 	and.w	r3, r3, #15
 8007aa8:	4a10      	ldr	r2, [pc, #64]	; (8007aec <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8007aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aae:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8007ab0:	f7ff f974 	bl	8006d9c <LL_RCC_GetAHB3Prescaler>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	091b      	lsrs	r3, r3, #4
 8007ab8:	f003 030f 	and.w	r3, r3, #15
 8007abc:	4a0c      	ldr	r2, [pc, #48]	; (8007af0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8007abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ac8:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	4a09      	ldr	r2, [pc, #36]	; (8007af4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8007ace:	fba2 2303 	umull	r2, r3, r2, r3
 8007ad2:	0c9c      	lsrs	r4, r3, #18
 8007ad4:	f7fe ff88 	bl	80069e8 <HAL_PWREx_GetVoltageRange>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	4619      	mov	r1, r3
 8007adc:	4620      	mov	r0, r4
 8007ade:	f000 f80b 	bl	8007af8 <RCC_SetFlashLatency>
 8007ae2:	4603      	mov	r3, r0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3714      	adds	r7, #20
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd90      	pop	{r4, r7, pc}
 8007aec:	08012a40 	.word	0x08012a40
 8007af0:	080129e0 	.word	0x080129e0
 8007af4:	431bde83 	.word	0x431bde83

08007af8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b08e      	sub	sp, #56	; 0x38
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8007b02:	4a3a      	ldr	r2, [pc, #232]	; (8007bec <RCC_SetFlashLatency+0xf4>)
 8007b04:	f107 0320 	add.w	r3, r7, #32
 8007b08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007b0c:	6018      	str	r0, [r3, #0]
 8007b0e:	3304      	adds	r3, #4
 8007b10:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8007b12:	4a37      	ldr	r2, [pc, #220]	; (8007bf0 <RCC_SetFlashLatency+0xf8>)
 8007b14:	f107 0318 	add.w	r3, r7, #24
 8007b18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007b1c:	6018      	str	r0, [r3, #0]
 8007b1e:	3304      	adds	r3, #4
 8007b20:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8007b22:	4a34      	ldr	r2, [pc, #208]	; (8007bf4 <RCC_SetFlashLatency+0xfc>)
 8007b24:	f107 030c 	add.w	r3, r7, #12
 8007b28:	ca07      	ldmia	r2, {r0, r1, r2}
 8007b2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007b2e:	2300      	movs	r3, #0
 8007b30:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b38:	d11b      	bne.n	8007b72 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	633b      	str	r3, [r7, #48]	; 0x30
 8007b3e:	e014      	b.n	8007b6a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b42:	005b      	lsls	r3, r3, #1
 8007b44:	3338      	adds	r3, #56	; 0x38
 8007b46:	443b      	add	r3, r7
 8007b48:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d807      	bhi.n	8007b64 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	3338      	adds	r3, #56	; 0x38
 8007b5a:	443b      	add	r3, r7
 8007b5c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007b60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b62:	e021      	b.n	8007ba8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b66:	3301      	adds	r3, #1
 8007b68:	633b      	str	r3, [r7, #48]	; 0x30
 8007b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6c:	2b02      	cmp	r3, #2
 8007b6e:	d9e7      	bls.n	8007b40 <RCC_SetFlashLatency+0x48>
 8007b70:	e01a      	b.n	8007ba8 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007b72:	2300      	movs	r3, #0
 8007b74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b76:	e014      	b.n	8007ba2 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b7a:	005b      	lsls	r3, r3, #1
 8007b7c:	3338      	adds	r3, #56	; 0x38
 8007b7e:	443b      	add	r3, r7
 8007b80:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8007b84:	461a      	mov	r2, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d807      	bhi.n	8007b9c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	3338      	adds	r3, #56	; 0x38
 8007b92:	443b      	add	r3, r7
 8007b94:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007b98:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b9a:	e005      	b.n	8007ba8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d9e7      	bls.n	8007b78 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007ba8:	4b13      	ldr	r3, [pc, #76]	; (8007bf8 <RCC_SetFlashLatency+0x100>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f023 0207 	bic.w	r2, r3, #7
 8007bb0:	4911      	ldr	r1, [pc, #68]	; (8007bf8 <RCC_SetFlashLatency+0x100>)
 8007bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007bb8:	f7fc ff90 	bl	8004adc <HAL_GetTick>
 8007bbc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007bbe:	e008      	b.n	8007bd2 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007bc0:	f7fc ff8c 	bl	8004adc <HAL_GetTick>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc8:	1ad3      	subs	r3, r2, r3
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	d901      	bls.n	8007bd2 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8007bce:	2303      	movs	r3, #3
 8007bd0:	e007      	b.n	8007be2 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007bd2:	4b09      	ldr	r3, [pc, #36]	; (8007bf8 <RCC_SetFlashLatency+0x100>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f003 0307 	and.w	r3, r3, #7
 8007bda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d1ef      	bne.n	8007bc0 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3738      	adds	r7, #56	; 0x38
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	080128e8 	.word	0x080128e8
 8007bf0:	080128f0 	.word	0x080128f0
 8007bf4:	080128f8 	.word	0x080128f8
 8007bf8:	58004000 	.word	0x58004000

08007bfc <LL_RCC_LSE_IsReady>:
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c08:	f003 0302 	and.w	r3, r3, #2
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	d101      	bne.n	8007c14 <LL_RCC_LSE_IsReady+0x18>
 8007c10:	2301      	movs	r3, #1
 8007c12:	e000      	b.n	8007c16 <LL_RCC_LSE_IsReady+0x1a>
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bc80      	pop	{r7}
 8007c1c:	4770      	bx	lr

08007c1e <LL_RCC_SetUSARTClockSource>:
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b083      	sub	sp, #12
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8007c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c2a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	0c1b      	lsrs	r3, r3, #16
 8007c32:	43db      	mvns	r3, r3
 8007c34:	401a      	ands	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007c44:	bf00      	nop
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bc80      	pop	{r7}
 8007c4c:	4770      	bx	lr

08007c4e <LL_RCC_SetI2SClockSource>:
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b083      	sub	sp, #12
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8007c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007c6e:	bf00      	nop
 8007c70:	370c      	adds	r7, #12
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bc80      	pop	{r7}
 8007c76:	4770      	bx	lr

08007c78 <LL_RCC_SetLPUARTClockSource>:
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c88:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007c8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4313      	orrs	r3, r2
 8007c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007c98:	bf00      	nop
 8007c9a:	370c      	adds	r7, #12
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bc80      	pop	{r7}
 8007ca0:	4770      	bx	lr

08007ca2 <LL_RCC_SetI2CClockSource>:
{
 8007ca2:	b480      	push	{r7}
 8007ca4:	b083      	sub	sp, #12
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	091b      	lsrs	r3, r3, #4
 8007cb6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007cba:	43db      	mvns	r3, r3
 8007cbc:	401a      	ands	r2, r3
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	011b      	lsls	r3, r3, #4
 8007cc2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007cc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007cd0:	bf00      	nop
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bc80      	pop	{r7}
 8007cd8:	4770      	bx	lr

08007cda <LL_RCC_SetLPTIMClockSource>:
{
 8007cda:	b480      	push	{r7}
 8007cdc:	b083      	sub	sp, #12
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ce6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	0c1b      	lsrs	r3, r3, #16
 8007cee:	041b      	lsls	r3, r3, #16
 8007cf0:	43db      	mvns	r3, r3
 8007cf2:	401a      	ands	r2, r3
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	041b      	lsls	r3, r3, #16
 8007cf8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007d02:	bf00      	nop
 8007d04:	370c      	adds	r7, #12
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bc80      	pop	{r7}
 8007d0a:	4770      	bx	lr

08007d0c <LL_RCC_SetRNGClockSource>:
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d1c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007d20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4313      	orrs	r3, r2
 8007d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007d2c:	bf00      	nop
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bc80      	pop	{r7}
 8007d34:	4770      	bx	lr

08007d36 <LL_RCC_SetADCClockSource>:
{
 8007d36:	b480      	push	{r7}
 8007d38:	b083      	sub	sp, #12
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d46:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007d4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007d56:	bf00      	nop
 8007d58:	370c      	adds	r7, #12
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bc80      	pop	{r7}
 8007d5e:	4770      	bx	lr

08007d60 <LL_RCC_SetRTCClockSource>:
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007d68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bc80      	pop	{r7}
 8007d88:	4770      	bx	lr

08007d8a <LL_RCC_GetRTCClockSource>:
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bc80      	pop	{r7}
 8007da0:	4770      	bx	lr

08007da2 <LL_RCC_ForceBackupDomainReset>:
{
 8007da2:	b480      	push	{r7}
 8007da4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007db2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007db6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007dba:	bf00      	nop
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bc80      	pop	{r7}
 8007dc0:	4770      	bx	lr

08007dc2 <LL_RCC_ReleaseBackupDomainReset>:
{
 8007dc2:	b480      	push	{r7}
 8007dc4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007dd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007dda:	bf00      	nop
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bc80      	pop	{r7}
 8007de0:	4770      	bx	lr
	...

08007de4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b086      	sub	sp, #24
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8007dec:	2300      	movs	r3, #0
 8007dee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8007df0:	2300      	movs	r3, #0
 8007df2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007df4:	2300      	movs	r3, #0
 8007df6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d058      	beq.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8007e04:	f7fe fde2 	bl	80069cc <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007e08:	f7fc fe68 	bl	8004adc <HAL_GetTick>
 8007e0c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8007e0e:	e009      	b.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e10:	f7fc fe64 	bl	8004adc <HAL_GetTick>
 8007e14:	4602      	mov	r2, r0
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	1ad3      	subs	r3, r2, r3
 8007e1a:	2b02      	cmp	r3, #2
 8007e1c:	d902      	bls.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	74fb      	strb	r3, [r7, #19]
        break;
 8007e22:	e006      	b.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8007e24:	4b7b      	ldr	r3, [pc, #492]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e30:	d1ee      	bne.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8007e32:	7cfb      	ldrb	r3, [r7, #19]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d13c      	bne.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8007e38:	f7ff ffa7 	bl	8007d8a <LL_RCC_GetRTCClockSource>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d00f      	beq.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007e46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e52:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007e54:	f7ff ffa5 	bl	8007da2 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007e58:	f7ff ffb3 	bl	8007dc2 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007e5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	f003 0302 	and.w	r3, r3, #2
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d014      	beq.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e70:	f7fc fe34 	bl	8004adc <HAL_GetTick>
 8007e74:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8007e76:	e00b      	b.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e78:	f7fc fe30 	bl	8004adc <HAL_GetTick>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d902      	bls.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8007e8a:	2303      	movs	r3, #3
 8007e8c:	74fb      	strb	r3, [r7, #19]
            break;
 8007e8e:	e004      	b.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8007e90:	f7ff feb4 	bl	8007bfc <LL_RCC_LSE_IsReady>
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d1ee      	bne.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8007e9a:	7cfb      	ldrb	r3, [r7, #19]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d105      	bne.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f7ff ff5b 	bl	8007d60 <LL_RCC_SetRTCClockSource>
 8007eaa:	e004      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007eac:	7cfb      	ldrb	r3, [r7, #19]
 8007eae:	74bb      	strb	r3, [r7, #18]
 8007eb0:	e001      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eb2:	7cfb      	ldrb	r3, [r7, #19]
 8007eb4:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f003 0301 	and.w	r3, r3, #1
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d004      	beq.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7ff fea9 	bl	8007c1e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f003 0302 	and.w	r3, r3, #2
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d004      	beq.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7ff fe9e 	bl	8007c1e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f003 0320 	and.w	r3, r3, #32
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d004      	beq.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7ff fec0 	bl	8007c78 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d004      	beq.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6a1b      	ldr	r3, [r3, #32]
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f7ff fee6 	bl	8007cda <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d004      	beq.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7ff fedb 	bl	8007cda <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d004      	beq.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f34:	4618      	mov	r0, r3
 8007f36:	f7ff fed0 	bl	8007cda <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d004      	beq.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	695b      	ldr	r3, [r3, #20]
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7ff fea9 	bl	8007ca2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d004      	beq.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	699b      	ldr	r3, [r3, #24]
 8007f60:	4618      	mov	r0, r3
 8007f62:	f7ff fe9e 	bl	8007ca2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d004      	beq.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	69db      	ldr	r3, [r3, #28]
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7ff fe93 	bl	8007ca2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f003 0310 	and.w	r3, r3, #16
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d011      	beq.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7ff fe5e 	bl	8007c4e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f9a:	d107      	bne.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8007f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007faa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d010      	beq.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7ff fea5 	bl	8007d0c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d107      	bne.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007fd8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d011      	beq.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7ff fea3 	bl	8007d36 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ff8:	d107      	bne.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008008:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800800a:	7cbb      	ldrb	r3, [r7, #18]
}
 800800c:	4618      	mov	r0, r3
 800800e:	3718      	adds	r7, #24
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}
 8008014:	58000400 	.word	0x58000400

08008018 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d071      	beq.n	800810e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008030:	b2db      	uxtb	r3, r3
 8008032:	2b00      	cmp	r3, #0
 8008034:	d106      	bne.n	8008044 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f7fa f864 	bl	800210c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2202      	movs	r2, #2
 8008048:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800804c:	4b32      	ldr	r3, [pc, #200]	; (8008118 <HAL_RTC_Init+0x100>)
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	f003 0310 	and.w	r3, r3, #16
 8008054:	2b10      	cmp	r3, #16
 8008056:	d051      	beq.n	80080fc <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008058:	4b2f      	ldr	r3, [pc, #188]	; (8008118 <HAL_RTC_Init+0x100>)
 800805a:	22ca      	movs	r2, #202	; 0xca
 800805c:	625a      	str	r2, [r3, #36]	; 0x24
 800805e:	4b2e      	ldr	r3, [pc, #184]	; (8008118 <HAL_RTC_Init+0x100>)
 8008060:	2253      	movs	r2, #83	; 0x53
 8008062:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 faa3 	bl	80085b0 <RTC_EnterInitMode>
 800806a:	4603      	mov	r3, r0
 800806c:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800806e:	7bfb      	ldrb	r3, [r7, #15]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d13f      	bne.n	80080f4 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8008074:	4b28      	ldr	r3, [pc, #160]	; (8008118 <HAL_RTC_Init+0x100>)
 8008076:	699b      	ldr	r3, [r3, #24]
 8008078:	4a27      	ldr	r2, [pc, #156]	; (8008118 <HAL_RTC_Init+0x100>)
 800807a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800807e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008082:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8008084:	4b24      	ldr	r3, [pc, #144]	; (8008118 <HAL_RTC_Init+0x100>)
 8008086:	699a      	ldr	r2, [r3, #24]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6859      	ldr	r1, [r3, #4]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	691b      	ldr	r3, [r3, #16]
 8008090:	4319      	orrs	r1, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	699b      	ldr	r3, [r3, #24]
 8008096:	430b      	orrs	r3, r1
 8008098:	491f      	ldr	r1, [pc, #124]	; (8008118 <HAL_RTC_Init+0x100>)
 800809a:	4313      	orrs	r3, r2
 800809c:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	68da      	ldr	r2, [r3, #12]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	041b      	lsls	r3, r3, #16
 80080a8:	491b      	ldr	r1, [pc, #108]	; (8008118 <HAL_RTC_Init+0x100>)
 80080aa:	4313      	orrs	r3, r2
 80080ac:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80080ae:	4b1a      	ldr	r3, [pc, #104]	; (8008118 <HAL_RTC_Init+0x100>)
 80080b0:	68db      	ldr	r3, [r3, #12]
 80080b2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080be:	430b      	orrs	r3, r1
 80080c0:	4915      	ldr	r1, [pc, #84]	; (8008118 <HAL_RTC_Init+0x100>)
 80080c2:	4313      	orrs	r3, r2
 80080c4:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 faa6 	bl	8008618 <RTC_ExitInitMode>
 80080cc:	4603      	mov	r3, r0
 80080ce:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 80080d0:	7bfb      	ldrb	r3, [r7, #15]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d10e      	bne.n	80080f4 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 80080d6:	4b10      	ldr	r3, [pc, #64]	; (8008118 <HAL_RTC_Init+0x100>)
 80080d8:	699b      	ldr	r3, [r3, #24]
 80080da:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a19      	ldr	r1, [r3, #32]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	69db      	ldr	r3, [r3, #28]
 80080e6:	4319      	orrs	r1, r3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	695b      	ldr	r3, [r3, #20]
 80080ec:	430b      	orrs	r3, r1
 80080ee:	490a      	ldr	r1, [pc, #40]	; (8008118 <HAL_RTC_Init+0x100>)
 80080f0:	4313      	orrs	r3, r2
 80080f2:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080f4:	4b08      	ldr	r3, [pc, #32]	; (8008118 <HAL_RTC_Init+0x100>)
 80080f6:	22ff      	movs	r2, #255	; 0xff
 80080f8:	625a      	str	r2, [r3, #36]	; 0x24
 80080fa:	e001      	b.n	8008100 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 80080fc:	2300      	movs	r3, #0
 80080fe:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008100:	7bfb      	ldrb	r3, [r7, #15]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d103      	bne.n	800810e <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2201      	movs	r2, #1
 800810a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 800810e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008110:	4618      	mov	r0, r3
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	40002800 	.word	0x40002800

0800811c <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800811c:	b590      	push	{r4, r7, lr}
 800811e:	b087      	sub	sp, #28
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800812e:	2b01      	cmp	r3, #1
 8008130:	d101      	bne.n	8008136 <HAL_RTC_SetTime+0x1a>
 8008132:	2302      	movs	r3, #2
 8008134:	e088      	b.n	8008248 <HAL_RTC_SetTime+0x12c>
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2201      	movs	r2, #1
 800813a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2202      	movs	r2, #2
 8008142:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008146:	4b42      	ldr	r3, [pc, #264]	; (8008250 <HAL_RTC_SetTime+0x134>)
 8008148:	22ca      	movs	r2, #202	; 0xca
 800814a:	625a      	str	r2, [r3, #36]	; 0x24
 800814c:	4b40      	ldr	r3, [pc, #256]	; (8008250 <HAL_RTC_SetTime+0x134>)
 800814e:	2253      	movs	r2, #83	; 0x53
 8008150:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	f000 fa2c 	bl	80085b0 <RTC_EnterInitMode>
 8008158:	4603      	mov	r3, r0
 800815a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800815c:	7cfb      	ldrb	r3, [r7, #19]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d15e      	bne.n	8008220 <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8008162:	4b3b      	ldr	r3, [pc, #236]	; (8008250 <HAL_RTC_SetTime+0x134>)
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800816a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800816e:	d057      	beq.n	8008220 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d125      	bne.n	80081c2 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008176:	4b36      	ldr	r3, [pc, #216]	; (8008250 <HAL_RTC_SetTime+0x134>)
 8008178:	699b      	ldr	r3, [r3, #24]
 800817a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800817e:	2b00      	cmp	r3, #0
 8008180:	d102      	bne.n	8008188 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	2200      	movs	r2, #0
 8008186:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	4618      	mov	r0, r3
 800818e:	f000 fa81 	bl	8008694 <RTC_ByteToBcd2>
 8008192:	4603      	mov	r3, r0
 8008194:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	785b      	ldrb	r3, [r3, #1]
 800819a:	4618      	mov	r0, r3
 800819c:	f000 fa7a 	bl	8008694 <RTC_ByteToBcd2>
 80081a0:	4603      	mov	r3, r0
 80081a2:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80081a4:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	789b      	ldrb	r3, [r3, #2]
 80081aa:	4618      	mov	r0, r3
 80081ac:	f000 fa72 	bl	8008694 <RTC_ByteToBcd2>
 80081b0:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80081b2:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	78db      	ldrb	r3, [r3, #3]
 80081ba:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80081bc:	4313      	orrs	r3, r2
 80081be:	617b      	str	r3, [r7, #20]
 80081c0:	e017      	b.n	80081f2 <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80081c2:	4b23      	ldr	r3, [pc, #140]	; (8008250 <HAL_RTC_SetTime+0x134>)
 80081c4:	699b      	ldr	r3, [r3, #24]
 80081c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d102      	bne.n	80081d4 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	2200      	movs	r2, #0
 80081d2:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	785b      	ldrb	r3, [r3, #1]
 80081de:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80081e0:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80081e2:	68ba      	ldr	r2, [r7, #8]
 80081e4:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80081e6:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	78db      	ldrb	r3, [r3, #3]
 80081ec:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80081ee:	4313      	orrs	r3, r2
 80081f0:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 80081f2:	4a17      	ldr	r2, [pc, #92]	; (8008250 <HAL_RTC_SetTime+0x134>)
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80081fa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80081fe:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8008200:	4b13      	ldr	r3, [pc, #76]	; (8008250 <HAL_RTC_SetTime+0x134>)
 8008202:	699b      	ldr	r3, [r3, #24]
 8008204:	4a12      	ldr	r2, [pc, #72]	; (8008250 <HAL_RTC_SetTime+0x134>)
 8008206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800820a:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800820c:	4b10      	ldr	r3, [pc, #64]	; (8008250 <HAL_RTC_SetTime+0x134>)
 800820e:	699a      	ldr	r2, [r3, #24]
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	68d9      	ldr	r1, [r3, #12]
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	691b      	ldr	r3, [r3, #16]
 8008218:	430b      	orrs	r3, r1
 800821a:	490d      	ldr	r1, [pc, #52]	; (8008250 <HAL_RTC_SetTime+0x134>)
 800821c:	4313      	orrs	r3, r2
 800821e:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 8008220:	68f8      	ldr	r0, [r7, #12]
 8008222:	f000 f9f9 	bl	8008618 <RTC_ExitInitMode>
 8008226:	4603      	mov	r3, r0
 8008228:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800822a:	4b09      	ldr	r3, [pc, #36]	; (8008250 <HAL_RTC_SetTime+0x134>)
 800822c:	22ff      	movs	r2, #255	; 0xff
 800822e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008230:	7cfb      	ldrb	r3, [r7, #19]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d103      	bne.n	800823e <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2201      	movs	r2, #1
 800823a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2200      	movs	r2, #0
 8008242:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8008246:	7cfb      	ldrb	r3, [r7, #19]
}
 8008248:	4618      	mov	r0, r3
 800824a:	371c      	adds	r7, #28
 800824c:	46bd      	mov	sp, r7
 800824e:	bd90      	pop	{r4, r7, pc}
 8008250:	40002800 	.word	0x40002800

08008254 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008254:	b590      	push	{r4, r7, lr}
 8008256:	b087      	sub	sp, #28
 8008258:	af00      	add	r7, sp, #0
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008266:	2b01      	cmp	r3, #1
 8008268:	d101      	bne.n	800826e <HAL_RTC_SetDate+0x1a>
 800826a:	2302      	movs	r3, #2
 800826c:	e071      	b.n	8008352 <HAL_RTC_SetDate+0xfe>
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2202      	movs	r2, #2
 800827a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d10e      	bne.n	80082a2 <HAL_RTC_SetDate+0x4e>
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	785b      	ldrb	r3, [r3, #1]
 8008288:	f003 0310 	and.w	r3, r3, #16
 800828c:	2b00      	cmp	r3, #0
 800828e:	d008      	beq.n	80082a2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	785b      	ldrb	r3, [r3, #1]
 8008294:	f023 0310 	bic.w	r3, r3, #16
 8008298:	b2db      	uxtb	r3, r3
 800829a:	330a      	adds	r3, #10
 800829c:	b2da      	uxtb	r2, r3
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d11c      	bne.n	80082e2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	78db      	ldrb	r3, [r3, #3]
 80082ac:	4618      	mov	r0, r3
 80082ae:	f000 f9f1 	bl	8008694 <RTC_ByteToBcd2>
 80082b2:	4603      	mov	r3, r0
 80082b4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	785b      	ldrb	r3, [r3, #1]
 80082ba:	4618      	mov	r0, r3
 80082bc:	f000 f9ea 	bl	8008694 <RTC_ByteToBcd2>
 80082c0:	4603      	mov	r3, r0
 80082c2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80082c4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	789b      	ldrb	r3, [r3, #2]
 80082ca:	4618      	mov	r0, r3
 80082cc:	f000 f9e2 	bl	8008694 <RTC_ByteToBcd2>
 80082d0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80082d2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80082dc:	4313      	orrs	r3, r2
 80082de:	617b      	str	r3, [r7, #20]
 80082e0:	e00e      	b.n	8008300 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	78db      	ldrb	r3, [r3, #3]
 80082e6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	785b      	ldrb	r3, [r3, #1]
 80082ec:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80082ee:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80082f0:	68ba      	ldr	r2, [r7, #8]
 80082f2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80082f4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80082fc:	4313      	orrs	r3, r2
 80082fe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008300:	4b16      	ldr	r3, [pc, #88]	; (800835c <HAL_RTC_SetDate+0x108>)
 8008302:	22ca      	movs	r2, #202	; 0xca
 8008304:	625a      	str	r2, [r3, #36]	; 0x24
 8008306:	4b15      	ldr	r3, [pc, #84]	; (800835c <HAL_RTC_SetDate+0x108>)
 8008308:	2253      	movs	r2, #83	; 0x53
 800830a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	f000 f94f 	bl	80085b0 <RTC_EnterInitMode>
 8008312:	4603      	mov	r3, r0
 8008314:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008316:	7cfb      	ldrb	r3, [r7, #19]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d10b      	bne.n	8008334 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800831c:	4a0f      	ldr	r2, [pc, #60]	; (800835c <HAL_RTC_SetDate+0x108>)
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008324:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008328:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800832a:	68f8      	ldr	r0, [r7, #12]
 800832c:	f000 f974 	bl	8008618 <RTC_ExitInitMode>
 8008330:	4603      	mov	r3, r0
 8008332:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008334:	4b09      	ldr	r3, [pc, #36]	; (800835c <HAL_RTC_SetDate+0x108>)
 8008336:	22ff      	movs	r2, #255	; 0xff
 8008338:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800833a:	7cfb      	ldrb	r3, [r7, #19]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d103      	bne.n	8008348 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2200      	movs	r2, #0
 800834c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8008350:	7cfb      	ldrb	r3, [r7, #19]
}
 8008352:	4618      	mov	r0, r3
 8008354:	371c      	adds	r7, #28
 8008356:	46bd      	mov	sp, r7
 8008358:	bd90      	pop	{r4, r7, pc}
 800835a:	bf00      	nop
 800835c:	40002800 	.word	0x40002800

08008360 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008360:	b590      	push	{r4, r7, lr}
 8008362:	b087      	sub	sp, #28
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800836c:	2300      	movs	r3, #0
 800836e:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  __HAL_LOCK(hrtc);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008376:	2b01      	cmp	r3, #1
 8008378:	d101      	bne.n	800837e <HAL_RTC_SetAlarm+0x1e>
 800837a:	2302      	movs	r3, #2
 800837c:	e0eb      	b.n	8008556 <HAL_RTC_SetAlarm+0x1f6>
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2201      	movs	r2, #1
 8008382:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2202      	movs	r2, #2
 800838a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800838e:	4b74      	ldr	r3, [pc, #464]	; (8008560 <HAL_RTC_SetAlarm+0x200>)
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008396:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800839e:	d06a      	beq.n	8008476 <HAL_RTC_SetAlarm+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d13a      	bne.n	800841c <HAL_RTC_SetAlarm+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80083a6:	4b6e      	ldr	r3, [pc, #440]	; (8008560 <HAL_RTC_SetAlarm+0x200>)
 80083a8:	699b      	ldr	r3, [r3, #24]
 80083aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d102      	bne.n	80083b8 <HAL_RTC_SetAlarm+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	2200      	movs	r2, #0
 80083b6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	695b      	ldr	r3, [r3, #20]
 80083bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	4618      	mov	r0, r3
 80083c6:	f000 f965 	bl	8008694 <RTC_ByteToBcd2>
 80083ca:	4603      	mov	r3, r0
 80083cc:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	785b      	ldrb	r3, [r3, #1]
 80083d2:	4618      	mov	r0, r3
 80083d4:	f000 f95e 	bl	8008694 <RTC_ByteToBcd2>
 80083d8:	4603      	mov	r3, r0
 80083da:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80083dc:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	789b      	ldrb	r3, [r3, #2]
 80083e2:	4618      	mov	r0, r3
 80083e4:	f000 f956 	bl	8008694 <RTC_ByteToBcd2>
 80083e8:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80083ea:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	78db      	ldrb	r3, [r3, #3]
 80083f2:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80083f4:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80083fe:	4618      	mov	r0, r3
 8008400:	f000 f948 	bl	8008694 <RTC_ByteToBcd2>
 8008404:	4603      	mov	r3, r0
 8008406:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008408:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008410:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008416:	4313      	orrs	r3, r2
 8008418:	617b      	str	r3, [r7, #20]
 800841a:	e02c      	b.n	8008476 <HAL_RTC_SetAlarm+0x116>
    }
    else /* format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	695b      	ldr	r3, [r3, #20]
 8008420:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8008424:	d00d      	beq.n	8008442 <HAL_RTC_SetAlarm+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	695b      	ldr	r3, [r3, #20]
 800842a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800842e:	d008      	beq.n	8008442 <HAL_RTC_SetAlarm+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008430:	4b4b      	ldr	r3, [pc, #300]	; (8008560 <HAL_RTC_SetAlarm+0x200>)
 8008432:	699b      	ldr	r3, [r3, #24]
 8008434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008438:	2b00      	cmp	r3, #0
 800843a:	d102      	bne.n	8008442 <HAL_RTC_SetAlarm+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	2200      	movs	r2, #0
 8008440:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	785b      	ldrb	r3, [r3, #1]
 800844c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800844e:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008450:	68ba      	ldr	r2, [r7, #8]
 8008452:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008454:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	78db      	ldrb	r3, [r3, #3]
 800845a:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800845c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008464:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008466:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800846c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008472:	4313      	orrs	r3, r2
 8008474:	617b      	str	r3, [r7, #20]
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008476:	4b3a      	ldr	r3, [pc, #232]	; (8008560 <HAL_RTC_SetAlarm+0x200>)
 8008478:	22ca      	movs	r2, #202	; 0xca
 800847a:	625a      	str	r2, [r3, #36]	; 0x24
 800847c:	4b38      	ldr	r3, [pc, #224]	; (8008560 <HAL_RTC_SetAlarm+0x200>)
 800847e:	2253      	movs	r2, #83	; 0x53
 8008480:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800848a:	d12c      	bne.n	80084e6 <HAL_RTC_SetAlarm+0x186>
  {
    /* Disable the Alarm A interrupt */
    /* In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRAE | RTC_CR_ALRAIE));
 800848c:	4b34      	ldr	r3, [pc, #208]	; (8008560 <HAL_RTC_SetAlarm+0x200>)
 800848e:	699b      	ldr	r3, [r3, #24]
 8008490:	4a33      	ldr	r2, [pc, #204]	; (8008560 <HAL_RTC_SetAlarm+0x200>)
 8008492:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008496:	6193      	str	r3, [r2, #24]

    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8008498:	4b31      	ldr	r3, [pc, #196]	; (8008560 <HAL_RTC_SetAlarm+0x200>)
 800849a:	2201      	movs	r2, #1
 800849c:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084a4:	d107      	bne.n	80084b6 <HAL_RTC_SetAlarm+0x156>
    {
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	699a      	ldr	r2, [r3, #24]
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	69db      	ldr	r3, [r3, #28]
 80084ae:	492c      	ldr	r1, [pc, #176]	; (8008560 <HAL_RTC_SetAlarm+0x200>)
 80084b0:	4313      	orrs	r3, r2
 80084b2:	644b      	str	r3, [r1, #68]	; 0x44
 80084b4:	e006      	b.n	80084c4 <HAL_RTC_SetAlarm+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80084b6:	4a2a      	ldr	r2, [pc, #168]	; (8008560 <HAL_RTC_SetAlarm+0x200>)
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80084bc:	4a28      	ldr	r2, [pc, #160]	; (8008560 <HAL_RTC_SetAlarm+0x200>)
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	699b      	ldr	r3, [r3, #24]
 80084c2:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80084c4:	4a26      	ldr	r2, [pc, #152]	; (8008560 <HAL_RTC_SetAlarm+0x200>)
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d0:	f043 0201 	orr.w	r2, r3, #1
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm state: Enable Alarm */
    SET_BIT(RTC->CR, RTC_CR_ALRAE);
 80084d8:	4b21      	ldr	r3, [pc, #132]	; (8008560 <HAL_RTC_SetAlarm+0x200>)
 80084da:	699b      	ldr	r3, [r3, #24]
 80084dc:	4a20      	ldr	r2, [pc, #128]	; (8008560 <HAL_RTC_SetAlarm+0x200>)
 80084de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084e2:	6193      	str	r3, [r2, #24]
 80084e4:	e02b      	b.n	800853e <HAL_RTC_SetAlarm+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    /* In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRBE | RTC_CR_ALRBIE));
 80084e6:	4b1e      	ldr	r3, [pc, #120]	; (8008560 <HAL_RTC_SetAlarm+0x200>)
 80084e8:	699b      	ldr	r3, [r3, #24]
 80084ea:	4a1d      	ldr	r2, [pc, #116]	; (8008560 <HAL_RTC_SetAlarm+0x200>)
 80084ec:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80084f0:	6193      	str	r3, [r2, #24]

    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80084f2:	4b1b      	ldr	r3, [pc, #108]	; (8008560 <HAL_RTC_SetAlarm+0x200>)
 80084f4:	2202      	movs	r2, #2
 80084f6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084fe:	d107      	bne.n	8008510 <HAL_RTC_SetAlarm+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	699a      	ldr	r2, [r3, #24]
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	69db      	ldr	r3, [r3, #28]
 8008508:	4915      	ldr	r1, [pc, #84]	; (8008560 <HAL_RTC_SetAlarm+0x200>)
 800850a:	4313      	orrs	r3, r2
 800850c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800850e:	e006      	b.n	800851e <HAL_RTC_SetAlarm+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8008510:	4a13      	ldr	r2, [pc, #76]	; (8008560 <HAL_RTC_SetAlarm+0x200>)
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8008516:	4a12      	ldr	r2, [pc, #72]	; (8008560 <HAL_RTC_SetAlarm+0x200>)
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	699b      	ldr	r3, [r3, #24]
 800851c:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800851e:	4a10      	ldr	r2, [pc, #64]	; (8008560 <HAL_RTC_SetAlarm+0x200>)
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800852a:	f043 0202 	orr.w	r2, r3, #2
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm state: Enable Alarm */
    SET_BIT(RTC->CR, RTC_CR_ALRBE);
 8008532:	4b0b      	ldr	r3, [pc, #44]	; (8008560 <HAL_RTC_SetAlarm+0x200>)
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	4a0a      	ldr	r2, [pc, #40]	; (8008560 <HAL_RTC_SetAlarm+0x200>)
 8008538:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800853c:	6193      	str	r3, [r2, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800853e:	4b08      	ldr	r3, [pc, #32]	; (8008560 <HAL_RTC_SetAlarm+0x200>)
 8008540:	22ff      	movs	r2, #255	; 0xff
 8008542:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2201      	movs	r2, #1
 8008548:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2200      	movs	r2, #0
 8008550:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	371c      	adds	r7, #28
 800855a:	46bd      	mov	sp, r7
 800855c:	bd90      	pop	{r4, r7, pc}
 800855e:	bf00      	nop
 8008560:	40002800 	.word	0x40002800

08008564 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b084      	sub	sp, #16
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800856c:	4b0f      	ldr	r3, [pc, #60]	; (80085ac <HAL_RTC_WaitForSynchro+0x48>)
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	4a0e      	ldr	r2, [pc, #56]	; (80085ac <HAL_RTC_WaitForSynchro+0x48>)
 8008572:	f023 0320 	bic.w	r3, r3, #32
 8008576:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8008578:	f7fc fab0 	bl	8004adc <HAL_GetTick>
 800857c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800857e:	e009      	b.n	8008594 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008580:	f7fc faac 	bl	8004adc <HAL_GetTick>
 8008584:	4602      	mov	r2, r0
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	1ad3      	subs	r3, r2, r3
 800858a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800858e:	d901      	bls.n	8008594 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8008590:	2303      	movs	r3, #3
 8008592:	e006      	b.n	80085a2 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008594:	4b05      	ldr	r3, [pc, #20]	; (80085ac <HAL_RTC_WaitForSynchro+0x48>)
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	f003 0320 	and.w	r3, r3, #32
 800859c:	2b00      	cmp	r3, #0
 800859e:	d0ef      	beq.n	8008580 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	40002800 	.word	0x40002800

080085b0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80085b8:	2300      	movs	r3, #0
 80085ba:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80085bc:	4b15      	ldr	r3, [pc, #84]	; (8008614 <RTC_EnterInitMode+0x64>)
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d120      	bne.n	800860a <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80085c8:	4b12      	ldr	r3, [pc, #72]	; (8008614 <RTC_EnterInitMode+0x64>)
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	4a11      	ldr	r2, [pc, #68]	; (8008614 <RTC_EnterInitMode+0x64>)
 80085ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085d2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80085d4:	f7fc fa82 	bl	8004adc <HAL_GetTick>
 80085d8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80085da:	e00d      	b.n	80085f8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80085dc:	f7fc fa7e 	bl	8004adc <HAL_GetTick>
 80085e0:	4602      	mov	r2, r0
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	1ad3      	subs	r3, r2, r3
 80085e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80085ea:	d905      	bls.n	80085f8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80085ec:	2303      	movs	r3, #3
 80085ee:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2203      	movs	r2, #3
 80085f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80085f8:	4b06      	ldr	r3, [pc, #24]	; (8008614 <RTC_EnterInitMode+0x64>)
 80085fa:	68db      	ldr	r3, [r3, #12]
 80085fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008600:	2b00      	cmp	r3, #0
 8008602:	d102      	bne.n	800860a <RTC_EnterInitMode+0x5a>
 8008604:	7bfb      	ldrb	r3, [r7, #15]
 8008606:	2b03      	cmp	r3, #3
 8008608:	d1e8      	bne.n	80085dc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800860a:	7bfb      	ldrb	r3, [r7, #15]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3710      	adds	r7, #16
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	40002800 	.word	0x40002800

08008618 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008620:	2300      	movs	r3, #0
 8008622:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008624:	4b1a      	ldr	r3, [pc, #104]	; (8008690 <RTC_ExitInitMode+0x78>)
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	4a19      	ldr	r2, [pc, #100]	; (8008690 <RTC_ExitInitMode+0x78>)
 800862a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800862e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008630:	4b17      	ldr	r3, [pc, #92]	; (8008690 <RTC_ExitInitMode+0x78>)
 8008632:	699b      	ldr	r3, [r3, #24]
 8008634:	f003 0320 	and.w	r3, r3, #32
 8008638:	2b00      	cmp	r3, #0
 800863a:	d10c      	bne.n	8008656 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f7ff ff91 	bl	8008564 <HAL_RTC_WaitForSynchro>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d01e      	beq.n	8008686 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2203      	movs	r2, #3
 800864c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8008650:	2303      	movs	r3, #3
 8008652:	73fb      	strb	r3, [r7, #15]
 8008654:	e017      	b.n	8008686 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008656:	4b0e      	ldr	r3, [pc, #56]	; (8008690 <RTC_ExitInitMode+0x78>)
 8008658:	699b      	ldr	r3, [r3, #24]
 800865a:	4a0d      	ldr	r2, [pc, #52]	; (8008690 <RTC_ExitInitMode+0x78>)
 800865c:	f023 0320 	bic.w	r3, r3, #32
 8008660:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f7ff ff7e 	bl	8008564 <HAL_RTC_WaitForSynchro>
 8008668:	4603      	mov	r3, r0
 800866a:	2b00      	cmp	r3, #0
 800866c:	d005      	beq.n	800867a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2203      	movs	r2, #3
 8008672:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8008676:	2303      	movs	r3, #3
 8008678:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800867a:	4b05      	ldr	r3, [pc, #20]	; (8008690 <RTC_ExitInitMode+0x78>)
 800867c:	699b      	ldr	r3, [r3, #24]
 800867e:	4a04      	ldr	r2, [pc, #16]	; (8008690 <RTC_ExitInitMode+0x78>)
 8008680:	f043 0320 	orr.w	r3, r3, #32
 8008684:	6193      	str	r3, [r2, #24]
  }

  return status;
 8008686:	7bfb      	ldrb	r3, [r7, #15]
}
 8008688:	4618      	mov	r0, r3
 800868a:	3710      	adds	r7, #16
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}
 8008690:	40002800 	.word	0x40002800

08008694 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008694:	b480      	push	{r7}
 8008696:	b085      	sub	sp, #20
 8008698:	af00      	add	r7, sp, #0
 800869a:	4603      	mov	r3, r0
 800869c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800869e:	2300      	movs	r3, #0
 80086a0:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80086a2:	79fb      	ldrb	r3, [r7, #7]
 80086a4:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80086a6:	e005      	b.n	80086b4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	3301      	adds	r3, #1
 80086ac:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80086ae:	7afb      	ldrb	r3, [r7, #11]
 80086b0:	3b0a      	subs	r3, #10
 80086b2:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80086b4:	7afb      	ldrb	r3, [r7, #11]
 80086b6:	2b09      	cmp	r3, #9
 80086b8:	d8f6      	bhi.n	80086a8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	011b      	lsls	r3, r3, #4
 80086c0:	b2da      	uxtb	r2, r3
 80086c2:	7afb      	ldrb	r3, [r7, #11]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	b2db      	uxtb	r3, r3
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3714      	adds	r7, #20
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bc80      	pop	{r7}
 80086d0:	4770      	bx	lr

080086d2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80086d2:	b580      	push	{r7, lr}
 80086d4:	b084      	sub	sp, #16
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d101      	bne.n	80086e4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80086e0:	2301      	movs	r3, #1
 80086e2:	e0c6      	b.n	8008872 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d108      	bne.n	80086fe <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086f4:	d009      	beq.n	800870a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	61da      	str	r2, [r3, #28]
 80086fc:	e005      	b.n	800870a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2200      	movs	r2, #0
 8008708:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008710:	b2db      	uxtb	r3, r3
 8008712:	2b00      	cmp	r3, #0
 8008714:	d106      	bne.n	8008724 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2200      	movs	r2, #0
 800871a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f7f9 fd20 	bl	8002164 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2202      	movs	r2, #2
 8008728:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800873a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008744:	d902      	bls.n	800874c <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008746:	2300      	movs	r3, #0
 8008748:	60fb      	str	r3, [r7, #12]
 800874a:	e002      	b.n	8008752 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800874c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008750:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800875a:	d007      	beq.n	800876c <HAL_SPI_Init+0x9a>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008764:	d002      	beq.n	800876c <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800877c:	431a      	orrs	r2, r3
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	691b      	ldr	r3, [r3, #16]
 8008782:	f003 0302 	and.w	r3, r3, #2
 8008786:	431a      	orrs	r2, r3
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	695b      	ldr	r3, [r3, #20]
 800878c:	f003 0301 	and.w	r3, r3, #1
 8008790:	431a      	orrs	r2, r3
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	699b      	ldr	r3, [r3, #24]
 8008796:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800879a:	431a      	orrs	r2, r3
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	69db      	ldr	r3, [r3, #28]
 80087a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087a4:	431a      	orrs	r2, r3
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6a1b      	ldr	r3, [r3, #32]
 80087aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087ae:	ea42 0103 	orr.w	r1, r2, r3
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087b6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	430a      	orrs	r2, r1
 80087c0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087ca:	d11b      	bne.n	8008804 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d10b      	bne.n	80087ec <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80087dc:	d903      	bls.n	80087e6 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2202      	movs	r2, #2
 80087e2:	631a      	str	r2, [r3, #48]	; 0x30
 80087e4:	e002      	b.n	80087ec <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2201      	movs	r2, #1
 80087ea:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f0:	2b02      	cmp	r3, #2
 80087f2:	d107      	bne.n	8008804 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008802:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	699b      	ldr	r3, [r3, #24]
 8008808:	0c1b      	lsrs	r3, r3, #16
 800880a:	f003 0204 	and.w	r2, r3, #4
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008812:	f003 0310 	and.w	r3, r3, #16
 8008816:	431a      	orrs	r2, r3
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800881c:	f003 0308 	and.w	r3, r3, #8
 8008820:	431a      	orrs	r2, r3
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800882a:	ea42 0103 	orr.w	r1, r2, r3
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	430a      	orrs	r2, r1
 800883a:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008844:	d105      	bne.n	8008852 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	b292      	uxth	r2, r2
 8008850:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	69da      	ldr	r2, [r3, #28]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008860:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b088      	sub	sp, #32
 800887e:	af00      	add	r7, sp, #0
 8008880:	60f8      	str	r0, [r7, #12]
 8008882:	60b9      	str	r1, [r7, #8]
 8008884:	603b      	str	r3, [r7, #0]
 8008886:	4613      	mov	r3, r2
 8008888:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800888a:	2300      	movs	r3, #0
 800888c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008894:	2b01      	cmp	r3, #1
 8008896:	d101      	bne.n	800889c <HAL_SPI_Transmit+0x22>
 8008898:	2302      	movs	r3, #2
 800889a:	e17a      	b.n	8008b92 <HAL_SPI_Transmit+0x318>
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2201      	movs	r2, #1
 80088a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80088a4:	f7fc f91a 	bl	8004adc <HAL_GetTick>
 80088a8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80088aa:	88fb      	ldrh	r3, [r7, #6]
 80088ac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d002      	beq.n	80088c0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80088ba:	2302      	movs	r3, #2
 80088bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80088be:	e15f      	b.n	8008b80 <HAL_SPI_Transmit+0x306>
  }

  if ((pData == NULL) || (Size == 0U))
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d002      	beq.n	80088cc <HAL_SPI_Transmit+0x52>
 80088c6:	88fb      	ldrh	r3, [r7, #6]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d102      	bne.n	80088d2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80088d0:	e156      	b.n	8008b80 <HAL_SPI_Transmit+0x306>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2203      	movs	r2, #3
 80088d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2200      	movs	r2, #0
 80088de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	68ba      	ldr	r2, [r7, #8]
 80088e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	88fa      	ldrh	r2, [r7, #6]
 80088ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	88fa      	ldrh	r2, [r7, #6]
 80088f0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2200      	movs	r2, #0
 80088f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2200      	movs	r2, #0
 8008904:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2200      	movs	r2, #0
 800890c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2200      	movs	r2, #0
 8008912:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800891c:	d10f      	bne.n	800893e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800892c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800893c:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008946:	d10f      	bne.n	8008968 <HAL_SPI_Transmit+0xee>
  {
    SPI_RESET_CRC(hspi);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008956:	601a      	str	r2, [r3, #0]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008966:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008972:	2b40      	cmp	r3, #64	; 0x40
 8008974:	d007      	beq.n	8008986 <HAL_SPI_Transmit+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008984:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800898e:	d94b      	bls.n	8008a28 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d002      	beq.n	800899e <HAL_SPI_Transmit+0x124>
 8008998:	8afb      	ldrh	r3, [r7, #22]
 800899a:	2b01      	cmp	r3, #1
 800899c:	d13e      	bne.n	8008a1c <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a2:	881a      	ldrh	r2, [r3, #0]
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ae:	1c9a      	adds	r2, r3, #2
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	3b01      	subs	r3, #1
 80089bc:	b29a      	uxth	r2, r3
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80089c2:	e02b      	b.n	8008a1c <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	f003 0302 	and.w	r3, r3, #2
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	d112      	bne.n	80089f8 <HAL_SPI_Transmit+0x17e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d6:	881a      	ldrh	r2, [r3, #0]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e2:	1c9a      	adds	r2, r3, #2
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	3b01      	subs	r3, #1
 80089f0:	b29a      	uxth	r2, r3
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80089f6:	e011      	b.n	8008a1c <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089f8:	f7fc f870 	bl	8004adc <HAL_GetTick>
 80089fc:	4602      	mov	r2, r0
 80089fe:	69bb      	ldr	r3, [r7, #24]
 8008a00:	1ad3      	subs	r3, r2, r3
 8008a02:	683a      	ldr	r2, [r7, #0]
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d803      	bhi.n	8008a10 <HAL_SPI_Transmit+0x196>
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a0e:	d102      	bne.n	8008a16 <HAL_SPI_Transmit+0x19c>
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d102      	bne.n	8008a1c <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8008a16:	2303      	movs	r3, #3
 8008a18:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008a1a:	e0b1      	b.n	8008b80 <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d1ce      	bne.n	80089c4 <HAL_SPI_Transmit+0x14a>
 8008a26:	e07c      	b.n	8008b22 <HAL_SPI_Transmit+0x2a8>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d002      	beq.n	8008a36 <HAL_SPI_Transmit+0x1bc>
 8008a30:	8afb      	ldrh	r3, [r7, #22]
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	d170      	bne.n	8008b18 <HAL_SPI_Transmit+0x29e>
    {
      if (hspi->TxXferCount > 1U)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d912      	bls.n	8008a66 <HAL_SPI_Transmit+0x1ec>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a44:	881a      	ldrh	r2, [r3, #0]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a50:	1c9a      	adds	r2, r3, #2
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	3b02      	subs	r3, #2
 8008a5e:	b29a      	uxth	r2, r3
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008a64:	e058      	b.n	8008b18 <HAL_SPI_Transmit+0x29e>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	330c      	adds	r3, #12
 8008a70:	7812      	ldrb	r2, [r2, #0]
 8008a72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a78:	1c5a      	adds	r2, r3, #1
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	3b01      	subs	r3, #1
 8008a86:	b29a      	uxth	r2, r3
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008a8c:	e044      	b.n	8008b18 <HAL_SPI_Transmit+0x29e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	f003 0302 	and.w	r3, r3, #2
 8008a98:	2b02      	cmp	r3, #2
 8008a9a:	d12b      	bne.n	8008af4 <HAL_SPI_Transmit+0x27a>
      {
        if (hspi->TxXferCount > 1U)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d912      	bls.n	8008acc <HAL_SPI_Transmit+0x252>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aaa:	881a      	ldrh	r2, [r3, #0]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab6:	1c9a      	adds	r2, r3, #2
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	3b02      	subs	r3, #2
 8008ac4:	b29a      	uxth	r2, r3
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008aca:	e025      	b.n	8008b18 <HAL_SPI_Transmit+0x29e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	330c      	adds	r3, #12
 8008ad6:	7812      	ldrb	r2, [r2, #0]
 8008ad8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ade:	1c5a      	adds	r2, r3, #1
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	3b01      	subs	r3, #1
 8008aec:	b29a      	uxth	r2, r3
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008af2:	e011      	b.n	8008b18 <HAL_SPI_Transmit+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008af4:	f7fb fff2 	bl	8004adc <HAL_GetTick>
 8008af8:	4602      	mov	r2, r0
 8008afa:	69bb      	ldr	r3, [r7, #24]
 8008afc:	1ad3      	subs	r3, r2, r3
 8008afe:	683a      	ldr	r2, [r7, #0]
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d803      	bhi.n	8008b0c <HAL_SPI_Transmit+0x292>
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b0a:	d102      	bne.n	8008b12 <HAL_SPI_Transmit+0x298>
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d102      	bne.n	8008b18 <HAL_SPI_Transmit+0x29e>
        {
          errorcode = HAL_TIMEOUT;
 8008b12:	2303      	movs	r3, #3
 8008b14:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008b16:	e033      	b.n	8008b80 <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d1b5      	bne.n	8008a8e <HAL_SPI_Transmit+0x214>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b2a:	d107      	bne.n	8008b3c <HAL_SPI_Transmit+0x2c2>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008b3a:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008b3c:	69ba      	ldr	r2, [r7, #24]
 8008b3e:	6839      	ldr	r1, [r7, #0]
 8008b40:	68f8      	ldr	r0, [r7, #12]
 8008b42:	f000 fe6d 	bl	8009820 <SPI_EndRxTxTransaction>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d002      	beq.n	8008b52 <HAL_SPI_Transmit+0x2d8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2220      	movs	r2, #32
 8008b50:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d10a      	bne.n	8008b70 <HAL_SPI_Transmit+0x2f6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	613b      	str	r3, [r7, #16]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	613b      	str	r3, [r7, #16]
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	613b      	str	r3, [r7, #16]
 8008b6e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d002      	beq.n	8008b7e <HAL_SPI_Transmit+0x304>
  {
    errorcode = HAL_ERROR;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	77fb      	strb	r3, [r7, #31]
 8008b7c:	e000      	b.n	8008b80 <HAL_SPI_Transmit+0x306>
  }

error:
 8008b7e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2201      	movs	r2, #1
 8008b84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008b90:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3720      	adds	r7, #32
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b08c      	sub	sp, #48	; 0x30
 8008b9e:	af02      	add	r7, sp, #8
 8008ba0:	60f8      	str	r0, [r7, #12]
 8008ba2:	60b9      	str	r1, [r7, #8]
 8008ba4:	603b      	str	r3, [r7, #0]
 8008ba6:	4613      	mov	r3, r2
 8008ba8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8008baa:	2300      	movs	r3, #0
 8008bac:	61bb      	str	r3, [r7, #24]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008bc0:	d112      	bne.n	8008be8 <HAL_SPI_Receive+0x4e>
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d10e      	bne.n	8008be8 <HAL_SPI_Receive+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2204      	movs	r2, #4
 8008bce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008bd2:	88fa      	ldrh	r2, [r7, #6]
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	9300      	str	r3, [sp, #0]
 8008bd8:	4613      	mov	r3, r2
 8008bda:	68ba      	ldr	r2, [r7, #8]
 8008bdc:	68b9      	ldr	r1, [r7, #8]
 8008bde:	68f8      	ldr	r0, [r7, #12]
 8008be0:	f000 f9c4 	bl	8008f6c <HAL_SPI_TransmitReceive>
 8008be4:	4603      	mov	r3, r0
 8008be6:	e1bd      	b.n	8008f64 <HAL_SPI_Receive+0x3ca>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	d101      	bne.n	8008bf6 <HAL_SPI_Receive+0x5c>
 8008bf2:	2302      	movs	r3, #2
 8008bf4:	e1b6      	b.n	8008f64 <HAL_SPI_Receive+0x3ca>
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008bfe:	f7fb ff6d 	bl	8004adc <HAL_GetTick>
 8008c02:	6238      	str	r0, [r7, #32]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008c0a:	b2db      	uxtb	r3, r3
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d003      	beq.n	8008c18 <HAL_SPI_Receive+0x7e>
  {
    errorcode = HAL_BUSY;
 8008c10:	2302      	movs	r3, #2
 8008c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8008c16:	e19b      	b.n	8008f50 <HAL_SPI_Receive+0x3b6>
  }

  if ((pData == NULL) || (Size == 0U))
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d002      	beq.n	8008c24 <HAL_SPI_Receive+0x8a>
 8008c1e:	88fb      	ldrh	r3, [r7, #6]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d103      	bne.n	8008c2c <HAL_SPI_Receive+0x92>
  {
    errorcode = HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8008c2a:	e191      	b.n	8008f50 <HAL_SPI_Receive+0x3b6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2204      	movs	r2, #4
 8008c30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2200      	movs	r2, #0
 8008c38:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	68ba      	ldr	r2, [r7, #8]
 8008c3e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	88fa      	ldrh	r2, [r7, #6]
 8008c44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	88fa      	ldrh	r2, [r7, #6]
 8008c4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2200      	movs	r2, #0
 8008c54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2200      	movs	r2, #0
 8008c66:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c76:	d118      	bne.n	8008caa <HAL_SPI_Receive+0x110>
  {
    SPI_RESET_CRC(hspi);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c86:	601a      	str	r2, [r3, #0]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c96:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	3b01      	subs	r3, #1
 8008ca2:	b29a      	uxth	r2, r3
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008cb2:	d908      	bls.n	8008cc6 <HAL_SPI_Receive+0x12c>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	685a      	ldr	r2, [r3, #4]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008cc2:	605a      	str	r2, [r3, #4]
 8008cc4:	e007      	b.n	8008cd6 <HAL_SPI_Receive+0x13c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	685a      	ldr	r2, [r3, #4]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008cd4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cde:	d10f      	bne.n	8008d00 <HAL_SPI_Receive+0x166>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008cee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008cfe:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d0a:	2b40      	cmp	r3, #64	; 0x40
 8008d0c:	d007      	beq.n	8008d1e <HAL_SPI_Receive+0x184>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d1c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	68db      	ldr	r3, [r3, #12]
 8008d22:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008d26:	d869      	bhi.n	8008dfc <HAL_SPI_Receive+0x262>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008d28:	e031      	b.n	8008d8e <HAL_SPI_Receive+0x1f4>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	689b      	ldr	r3, [r3, #8]
 8008d30:	f003 0301 	and.w	r3, r3, #1
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d117      	bne.n	8008d68 <HAL_SPI_Receive+0x1ce>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f103 020c 	add.w	r2, r3, #12
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d44:	7812      	ldrb	r2, [r2, #0]
 8008d46:	b2d2      	uxtb	r2, r2
 8008d48:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d4e:	1c5a      	adds	r2, r3, #1
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	3b01      	subs	r3, #1
 8008d5e:	b29a      	uxth	r2, r3
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008d66:	e012      	b.n	8008d8e <HAL_SPI_Receive+0x1f4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d68:	f7fb feb8 	bl	8004adc <HAL_GetTick>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	6a3b      	ldr	r3, [r7, #32]
 8008d70:	1ad3      	subs	r3, r2, r3
 8008d72:	683a      	ldr	r2, [r7, #0]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d803      	bhi.n	8008d80 <HAL_SPI_Receive+0x1e6>
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d7e:	d102      	bne.n	8008d86 <HAL_SPI_Receive+0x1ec>
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d103      	bne.n	8008d8e <HAL_SPI_Receive+0x1f4>
        {
          errorcode = HAL_TIMEOUT;
 8008d86:	2303      	movs	r3, #3
 8008d88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8008d8c:	e0e0      	b.n	8008f50 <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d1c7      	bne.n	8008d2a <HAL_SPI_Receive+0x190>
 8008d9a:	e035      	b.n	8008e08 <HAL_SPI_Receive+0x26e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	f003 0301 	and.w	r3, r3, #1
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d115      	bne.n	8008dd6 <HAL_SPI_Receive+0x23c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	68da      	ldr	r2, [r3, #12]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008db4:	b292      	uxth	r2, r2
 8008db6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dbc:	1c9a      	adds	r2, r3, #2
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	3b01      	subs	r3, #1
 8008dcc:	b29a      	uxth	r2, r3
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008dd4:	e012      	b.n	8008dfc <HAL_SPI_Receive+0x262>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008dd6:	f7fb fe81 	bl	8004adc <HAL_GetTick>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	6a3b      	ldr	r3, [r7, #32]
 8008dde:	1ad3      	subs	r3, r2, r3
 8008de0:	683a      	ldr	r2, [r7, #0]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d803      	bhi.n	8008dee <HAL_SPI_Receive+0x254>
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dec:	d102      	bne.n	8008df4 <HAL_SPI_Receive+0x25a>
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d103      	bne.n	8008dfc <HAL_SPI_Receive+0x262>
        {
          errorcode = HAL_TIMEOUT;
 8008df4:	2303      	movs	r3, #3
 8008df6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8008dfa:	e0a9      	b.n	8008f50 <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d1c9      	bne.n	8008d9c <HAL_SPI_Receive+0x202>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e10:	d178      	bne.n	8008f04 <HAL_SPI_Receive+0x36a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008e20:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8008e22:	6a3b      	ldr	r3, [r7, #32]
 8008e24:	9300      	str	r3, [sp, #0]
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	2201      	movs	r2, #1
 8008e2a:	2101      	movs	r1, #1
 8008e2c:	68f8      	ldr	r0, [r7, #12]
 8008e2e:	f000 fb81 	bl	8009534 <SPI_WaitFlagStateUntilTimeout>
 8008e32:	4603      	mov	r3, r0
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d003      	beq.n	8008e40 <HAL_SPI_Receive+0x2a6>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8008e38:	2303      	movs	r3, #3
 8008e3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 8008e3e:	e087      	b.n	8008f50 <HAL_SPI_Receive+0x3b6>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e48:	d907      	bls.n	8008e5a <HAL_SPI_Receive+0x2c0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	68da      	ldr	r2, [r3, #12]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e54:	b292      	uxth	r2, r2
 8008e56:	801a      	strh	r2, [r3, #0]
 8008e58:	e008      	b.n	8008e6c <HAL_SPI_Receive+0x2d2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f103 020c 	add.w	r2, r3, #12
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e66:	7812      	ldrb	r2, [r2, #0]
 8008e68:	b2d2      	uxtb	r2, r2
 8008e6a:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8008e6c:	6a3b      	ldr	r3, [r7, #32]
 8008e6e:	9300      	str	r3, [sp, #0]
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	2201      	movs	r2, #1
 8008e74:	2101      	movs	r1, #1
 8008e76:	68f8      	ldr	r0, [r7, #12]
 8008e78:	f000 fb5c 	bl	8009534 <SPI_WaitFlagStateUntilTimeout>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d009      	beq.n	8008e96 <HAL_SPI_Receive+0x2fc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e86:	f043 0202 	orr.w	r2, r3, #2
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8008e8e:	2303      	movs	r3, #3
 8008e90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 8008e94:	e05c      	b.n	8008f50 <HAL_SPI_Receive+0x3b6>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008e9e:	d105      	bne.n	8008eac <HAL_SPI_Receive+0x312>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	68db      	ldr	r3, [r3, #12]
 8008ea6:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8008ea8:	69bb      	ldr	r3, [r7, #24]
 8008eaa:	e02b      	b.n	8008f04 <HAL_SPI_Receive+0x36a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	330c      	adds	r3, #12
 8008eb2:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8008eb4:	69fb      	ldr	r3, [r7, #28]
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008ebc:	7dfb      	ldrb	r3, [r7, #23]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008ec6:	d11d      	bne.n	8008f04 <HAL_SPI_Receive+0x36a>
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ecc:	2b02      	cmp	r3, #2
 8008ece:	d119      	bne.n	8008f04 <HAL_SPI_Receive+0x36a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8008ed0:	6a3b      	ldr	r3, [r7, #32]
 8008ed2:	9300      	str	r3, [sp, #0]
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	2101      	movs	r1, #1
 8008eda:	68f8      	ldr	r0, [r7, #12]
 8008edc:	f000 fb2a 	bl	8009534 <SPI_WaitFlagStateUntilTimeout>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d009      	beq.n	8008efa <HAL_SPI_Receive+0x360>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008eea:	f043 0202 	orr.w	r2, r3, #2
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8008ef2:	2303      	movs	r3, #3
 8008ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8008ef8:	e02a      	b.n	8008f50 <HAL_SPI_Receive+0x3b6>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8008efa:	69fb      	ldr	r3, [r7, #28]
 8008efc:	781b      	ldrb	r3, [r3, #0]
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8008f02:	7dfb      	ldrb	r3, [r7, #23]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008f04:	6a3a      	ldr	r2, [r7, #32]
 8008f06:	6839      	ldr	r1, [r7, #0]
 8008f08:	68f8      	ldr	r0, [r7, #12]
 8008f0a:	f000 fc31 	bl	8009770 <SPI_EndRxTransaction>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d002      	beq.n	8008f1a <HAL_SPI_Receive+0x380>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2220      	movs	r2, #32
 8008f18:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	f003 0310 	and.w	r3, r3, #16
 8008f24:	2b10      	cmp	r3, #16
 8008f26:	d10a      	bne.n	8008f3e <HAL_SPI_Receive+0x3a4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f2c:	f043 0202 	orr.w	r2, r3, #2
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8008f3c:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d003      	beq.n	8008f4e <HAL_SPI_Receive+0x3b4>
  {
    errorcode = HAL_ERROR;
 8008f46:	2301      	movs	r3, #1
 8008f48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008f4c:	e000      	b.n	8008f50 <HAL_SPI_Receive+0x3b6>
  }

error :
 8008f4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008f60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3728      	adds	r7, #40	; 0x28
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b092      	sub	sp, #72	; 0x48
 8008f70:	af02      	add	r7, sp, #8
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	607a      	str	r2, [r7, #4]
 8008f78:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008f82:	2301      	movs	r3, #1
 8008f84:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008f86:	2300      	movs	r3, #0
 8008f88:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d101      	bne.n	8008f9a <HAL_SPI_TransmitReceive+0x2e>
 8008f96:	2302      	movs	r3, #2
 8008f98:	e2c8      	b.n	800952c <HAL_SPI_TransmitReceive+0x5c0>
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008fa2:	f7fb fd9b 	bl	8004adc <HAL_GetTick>
 8008fa6:	6378      	str	r0, [r7, #52]	; 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008fae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  tmp_mode            = hspi->Init.Mode;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  initial_TxXferCount = Size;
 8008fb8:	887b      	ldrh	r3, [r7, #2]
 8008fba:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 8008fbc:	887b      	ldrh	r3, [r7, #2]
 8008fbe:	853b      	strh	r3, [r7, #40]	; 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	627b      	str	r3, [r7, #36]	; 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008fd0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d00f      	beq.n	8008ff8 <HAL_SPI_TransmitReceive+0x8c>
 8008fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008fde:	d107      	bne.n	8008ff0 <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d103      	bne.n	8008ff0 <HAL_SPI_TransmitReceive+0x84>
 8008fe8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008fec:	2b04      	cmp	r3, #4
 8008fee:	d003      	beq.n	8008ff8 <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 8008ff0:	2302      	movs	r3, #2
 8008ff2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 8008ff6:	e28f      	b.n	8009518 <HAL_SPI_TransmitReceive+0x5ac>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d005      	beq.n	800900a <HAL_SPI_TransmitReceive+0x9e>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d002      	beq.n	800900a <HAL_SPI_TransmitReceive+0x9e>
 8009004:	887b      	ldrh	r3, [r7, #2]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d103      	bne.n	8009012 <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 800900a:	2301      	movs	r3, #1
 800900c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 8009010:	e282      	b.n	8009518 <HAL_SPI_TransmitReceive+0x5ac>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009018:	b2db      	uxtb	r3, r3
 800901a:	2b04      	cmp	r3, #4
 800901c:	d003      	beq.n	8009026 <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2205      	movs	r2, #5
 8009022:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2200      	movs	r2, #0
 800902a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	687a      	ldr	r2, [r7, #4]
 8009030:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	887a      	ldrh	r2, [r7, #2]
 8009036:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	887a      	ldrh	r2, [r7, #2]
 800903e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	68ba      	ldr	r2, [r7, #8]
 8009046:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	887a      	ldrh	r2, [r7, #2]
 800904c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	887a      	ldrh	r2, [r7, #2]
 8009052:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2200      	movs	r2, #0
 8009058:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2200      	movs	r2, #0
 800905e:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009064:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009068:	d10f      	bne.n	800908a <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009078:	601a      	str	r2, [r3, #0]
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009088:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009092:	d802      	bhi.n	800909a <HAL_SPI_TransmitReceive+0x12e>
 8009094:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009096:	2b01      	cmp	r3, #1
 8009098:	d908      	bls.n	80090ac <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	685a      	ldr	r2, [r3, #4]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80090a8:	605a      	str	r2, [r3, #4]
 80090aa:	e007      	b.n	80090bc <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	685a      	ldr	r2, [r3, #4]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80090ba:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090c6:	2b40      	cmp	r3, #64	; 0x40
 80090c8:	d007      	beq.n	80090da <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80090e2:	f240 80a4 	bls.w	800922e <HAL_SPI_TransmitReceive+0x2c2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d003      	beq.n	80090f6 <HAL_SPI_TransmitReceive+0x18a>
 80090ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	f040 808e 	bne.w	8009212 <HAL_SPI_TransmitReceive+0x2a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090fa:	881a      	ldrh	r2, [r3, #0]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009106:	1c9a      	adds	r2, r3, #2
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009110:	b29b      	uxth	r3, r3
 8009112:	3b01      	subs	r3, #1
 8009114:	b29a      	uxth	r2, r3
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800911a:	e07a      	b.n	8009212 <HAL_SPI_TransmitReceive+0x2a6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	f003 0302 	and.w	r3, r3, #2
 8009126:	2b02      	cmp	r3, #2
 8009128:	d13f      	bne.n	80091aa <HAL_SPI_TransmitReceive+0x23e>
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800912e:	b29b      	uxth	r3, r3
 8009130:	2b00      	cmp	r3, #0
 8009132:	d03a      	beq.n	80091aa <HAL_SPI_TransmitReceive+0x23e>
 8009134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009136:	2b01      	cmp	r3, #1
 8009138:	d137      	bne.n	80091aa <HAL_SPI_TransmitReceive+0x23e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800913e:	881a      	ldrh	r2, [r3, #0]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800914a:	1c9a      	adds	r2, r3, #2
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009154:	b29b      	uxth	r3, r3
 8009156:	3b01      	subs	r3, #1
 8009158:	b29a      	uxth	r2, r3
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800915e:	2300      	movs	r3, #0
 8009160:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009166:	b29b      	uxth	r3, r3
 8009168:	2b00      	cmp	r3, #0
 800916a:	d11e      	bne.n	80091aa <HAL_SPI_TransmitReceive+0x23e>
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009170:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009174:	d119      	bne.n	80091aa <HAL_SPI_TransmitReceive+0x23e>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8009176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009178:	f003 0304 	and.w	r3, r3, #4
 800917c:	2b00      	cmp	r3, #0
 800917e:	d10c      	bne.n	800919a <HAL_SPI_TransmitReceive+0x22e>
 8009180:	6a3b      	ldr	r3, [r7, #32]
 8009182:	f003 0308 	and.w	r3, r3, #8
 8009186:	2b00      	cmp	r3, #0
 8009188:	d007      	beq.n	800919a <HAL_SPI_TransmitReceive+0x22e>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009198:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80091a8:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	f003 0301 	and.w	r3, r3, #1
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d11c      	bne.n	80091f2 <HAL_SPI_TransmitReceive+0x286>
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80091be:	b29b      	uxth	r3, r3
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d016      	beq.n	80091f2 <HAL_SPI_TransmitReceive+0x286>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	68da      	ldr	r2, [r3, #12]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ce:	b292      	uxth	r2, r2
 80091d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d6:	1c9a      	adds	r2, r3, #2
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	3b01      	subs	r3, #1
 80091e6:	b29a      	uxth	r2, r3
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80091ee:	2301      	movs	r3, #1
 80091f0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80091f2:	f7fb fc73 	bl	8004adc <HAL_GetTick>
 80091f6:	4602      	mov	r2, r0
 80091f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091fa:	1ad3      	subs	r3, r2, r3
 80091fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091fe:	429a      	cmp	r2, r3
 8009200:	d807      	bhi.n	8009212 <HAL_SPI_TransmitReceive+0x2a6>
 8009202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009208:	d003      	beq.n	8009212 <HAL_SPI_TransmitReceive+0x2a6>
      {
        errorcode = HAL_TIMEOUT;
 800920a:	2303      	movs	r3, #3
 800920c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 8009210:	e182      	b.n	8009518 <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009216:	b29b      	uxth	r3, r3
 8009218:	2b00      	cmp	r3, #0
 800921a:	f47f af7f 	bne.w	800911c <HAL_SPI_TransmitReceive+0x1b0>
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009224:	b29b      	uxth	r3, r3
 8009226:	2b00      	cmp	r3, #0
 8009228:	f47f af78 	bne.w	800911c <HAL_SPI_TransmitReceive+0x1b0>
 800922c:	e103      	b.n	8009436 <HAL_SPI_TransmitReceive+0x4ca>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d003      	beq.n	800923e <HAL_SPI_TransmitReceive+0x2d2>
 8009236:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009238:	2b01      	cmp	r3, #1
 800923a:	f040 80ef 	bne.w	800941c <HAL_SPI_TransmitReceive+0x4b0>
    {
      if (hspi->TxXferCount > 1U)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009242:	b29b      	uxth	r3, r3
 8009244:	2b01      	cmp	r3, #1
 8009246:	d912      	bls.n	800926e <HAL_SPI_TransmitReceive+0x302>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800924c:	881a      	ldrh	r2, [r3, #0]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009258:	1c9a      	adds	r2, r3, #2
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009262:	b29b      	uxth	r3, r3
 8009264:	3b02      	subs	r3, #2
 8009266:	b29a      	uxth	r2, r3
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800926c:	e0d6      	b.n	800941c <HAL_SPI_TransmitReceive+0x4b0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	330c      	adds	r3, #12
 8009278:	7812      	ldrb	r2, [r2, #0]
 800927a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009280:	1c5a      	adds	r2, r3, #1
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800928a:	b29b      	uxth	r3, r3
 800928c:	3b01      	subs	r3, #1
 800928e:	b29a      	uxth	r2, r3
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009294:	e0c2      	b.n	800941c <HAL_SPI_TransmitReceive+0x4b0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	f003 0302 	and.w	r3, r3, #2
 80092a0:	2b02      	cmp	r3, #2
 80092a2:	d158      	bne.n	8009356 <HAL_SPI_TransmitReceive+0x3ea>
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d053      	beq.n	8009356 <HAL_SPI_TransmitReceive+0x3ea>
 80092ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d150      	bne.n	8009356 <HAL_SPI_TransmitReceive+0x3ea>
      {
        if (hspi->TxXferCount > 1U)
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d912      	bls.n	80092e4 <HAL_SPI_TransmitReceive+0x378>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c2:	881a      	ldrh	r2, [r3, #0]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ce:	1c9a      	adds	r2, r3, #2
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092d8:	b29b      	uxth	r3, r3
 80092da:	3b02      	subs	r3, #2
 80092dc:	b29a      	uxth	r2, r3
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80092e2:	e012      	b.n	800930a <HAL_SPI_TransmitReceive+0x39e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	330c      	adds	r3, #12
 80092ee:	7812      	ldrb	r2, [r2, #0]
 80092f0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092f6:	1c5a      	adds	r2, r3, #1
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009300:	b29b      	uxth	r3, r3
 8009302:	3b01      	subs	r3, #1
 8009304:	b29a      	uxth	r2, r3
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800930a:	2300      	movs	r3, #0
 800930c:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009312:	b29b      	uxth	r3, r3
 8009314:	2b00      	cmp	r3, #0
 8009316:	d11e      	bne.n	8009356 <HAL_SPI_TransmitReceive+0x3ea>
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800931c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009320:	d119      	bne.n	8009356 <HAL_SPI_TransmitReceive+0x3ea>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8009322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009324:	f003 0304 	and.w	r3, r3, #4
 8009328:	2b00      	cmp	r3, #0
 800932a:	d10c      	bne.n	8009346 <HAL_SPI_TransmitReceive+0x3da>
 800932c:	6a3b      	ldr	r3, [r7, #32]
 800932e:	f003 0308 	and.w	r3, r3, #8
 8009332:	2b00      	cmp	r3, #0
 8009334:	d007      	beq.n	8009346 <HAL_SPI_TransmitReceive+0x3da>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009344:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009354:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	689b      	ldr	r3, [r3, #8]
 800935c:	f003 0301 	and.w	r3, r3, #1
 8009360:	2b01      	cmp	r3, #1
 8009362:	d148      	bne.n	80093f6 <HAL_SPI_TransmitReceive+0x48a>
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800936a:	b29b      	uxth	r3, r3
 800936c:	2b00      	cmp	r3, #0
 800936e:	d042      	beq.n	80093f6 <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->RxXferCount > 1U)
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009376:	b29b      	uxth	r3, r3
 8009378:	2b01      	cmp	r3, #1
 800937a:	d923      	bls.n	80093c4 <HAL_SPI_TransmitReceive+0x458>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	68da      	ldr	r2, [r3, #12]
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009386:	b292      	uxth	r2, r2
 8009388:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800938e:	1c9a      	adds	r2, r3, #2
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800939a:	b29b      	uxth	r3, r3
 800939c:	3b02      	subs	r3, #2
 800939e:	b29a      	uxth	r2, r3
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d81f      	bhi.n	80093f2 <HAL_SPI_TransmitReceive+0x486>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	685a      	ldr	r2, [r3, #4]
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80093c0:	605a      	str	r2, [r3, #4]
 80093c2:	e016      	b.n	80093f2 <HAL_SPI_TransmitReceive+0x486>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f103 020c 	add.w	r2, r3, #12
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d0:	7812      	ldrb	r2, [r2, #0]
 80093d2:	b2d2      	uxtb	r2, r2
 80093d4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093da:	1c5a      	adds	r2, r3, #1
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	3b01      	subs	r3, #1
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80093f2:	2301      	movs	r3, #1
 80093f4:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80093f6:	f7fb fb71 	bl	8004adc <HAL_GetTick>
 80093fa:	4602      	mov	r2, r0
 80093fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093fe:	1ad3      	subs	r3, r2, r3
 8009400:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009402:	429a      	cmp	r2, r3
 8009404:	d803      	bhi.n	800940e <HAL_SPI_TransmitReceive+0x4a2>
 8009406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800940c:	d102      	bne.n	8009414 <HAL_SPI_TransmitReceive+0x4a8>
 800940e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009410:	2b00      	cmp	r3, #0
 8009412:	d103      	bne.n	800941c <HAL_SPI_TransmitReceive+0x4b0>
      {
        errorcode = HAL_TIMEOUT;
 8009414:	2303      	movs	r3, #3
 8009416:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 800941a:	e07d      	b.n	8009518 <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009420:	b29b      	uxth	r3, r3
 8009422:	2b00      	cmp	r3, #0
 8009424:	f47f af37 	bne.w	8009296 <HAL_SPI_TransmitReceive+0x32a>
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800942e:	b29b      	uxth	r3, r3
 8009430:	2b00      	cmp	r3, #0
 8009432:	f47f af30 	bne.w	8009296 <HAL_SPI_TransmitReceive+0x32a>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800943a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800943e:	d146      	bne.n	80094ce <HAL_SPI_TransmitReceive+0x562>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8009440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009442:	9300      	str	r3, [sp, #0]
 8009444:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009446:	2201      	movs	r2, #1
 8009448:	2101      	movs	r1, #1
 800944a:	68f8      	ldr	r0, [r7, #12]
 800944c:	f000 f872 	bl	8009534 <SPI_WaitFlagStateUntilTimeout>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d009      	beq.n	800946a <HAL_SPI_TransmitReceive+0x4fe>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800945a:	f043 0202 	orr.w	r2, r3, #2
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8009462:	2303      	movs	r3, #3
 8009464:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      goto error;
 8009468:	e056      	b.n	8009518 <HAL_SPI_TransmitReceive+0x5ac>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	68db      	ldr	r3, [r3, #12]
 800946e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009472:	d105      	bne.n	8009480 <HAL_SPI_TransmitReceive+0x514>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800947c:	69bb      	ldr	r3, [r7, #24]
 800947e:	e026      	b.n	80094ce <HAL_SPI_TransmitReceive+0x562>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	330c      	adds	r3, #12
 8009486:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8009488:	69fb      	ldr	r3, [r7, #28]
 800948a:	781b      	ldrb	r3, [r3, #0]
 800948c:	b2db      	uxtb	r3, r3
 800948e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009490:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009496:	2b02      	cmp	r3, #2
 8009498:	d119      	bne.n	80094ce <HAL_SPI_TransmitReceive+0x562>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800949a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800949c:	9300      	str	r3, [sp, #0]
 800949e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094a0:	2201      	movs	r2, #1
 80094a2:	2101      	movs	r1, #1
 80094a4:	68f8      	ldr	r0, [r7, #12]
 80094a6:	f000 f845 	bl	8009534 <SPI_WaitFlagStateUntilTimeout>
 80094aa:	4603      	mov	r3, r0
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d009      	beq.n	80094c4 <HAL_SPI_TransmitReceive+0x558>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094b4:	f043 0202 	orr.w	r2, r3, #2
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 80094bc:	2303      	movs	r3, #3
 80094be:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          goto error;
 80094c2:	e029      	b.n	8009518 <HAL_SPI_TransmitReceive+0x5ac>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 80094c4:	69fb      	ldr	r3, [r7, #28]
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	b2db      	uxtb	r3, r3
 80094ca:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 80094cc:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	f003 0310 	and.w	r3, r3, #16
 80094d8:	2b10      	cmp	r3, #16
 80094da:	d10d      	bne.n	80094f8 <HAL_SPI_TransmitReceive+0x58c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094e0:	f043 0202 	orr.w	r2, r3, #2
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80094f0:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 80094f2:	2301      	movs	r3, #1
 80094f4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80094f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094fa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80094fc:	68f8      	ldr	r0, [r7, #12]
 80094fe:	f000 f98f 	bl	8009820 <SPI_EndRxTxTransaction>
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	d006      	beq.n	8009516 <HAL_SPI_TransmitReceive+0x5aa>
  {
    errorcode = HAL_ERROR;
 8009508:	2301      	movs	r3, #1
 800950a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2220      	movs	r2, #32
 8009512:	661a      	str	r2, [r3, #96]	; 0x60
 8009514:	e000      	b.n	8009518 <HAL_SPI_TransmitReceive+0x5ac>
  }

error :
 8009516:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2201      	movs	r2, #1
 800951c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2200      	movs	r2, #0
 8009524:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009528:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 800952c:	4618      	mov	r0, r3
 800952e:	3740      	adds	r7, #64	; 0x40
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b088      	sub	sp, #32
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	603b      	str	r3, [r7, #0]
 8009540:	4613      	mov	r3, r2
 8009542:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009544:	f7fb faca 	bl	8004adc <HAL_GetTick>
 8009548:	4602      	mov	r2, r0
 800954a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800954c:	1a9b      	subs	r3, r3, r2
 800954e:	683a      	ldr	r2, [r7, #0]
 8009550:	4413      	add	r3, r2
 8009552:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009554:	f7fb fac2 	bl	8004adc <HAL_GetTick>
 8009558:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800955a:	4b39      	ldr	r3, [pc, #228]	; (8009640 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	015b      	lsls	r3, r3, #5
 8009560:	0d1b      	lsrs	r3, r3, #20
 8009562:	69fa      	ldr	r2, [r7, #28]
 8009564:	fb02 f303 	mul.w	r3, r2, r3
 8009568:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800956a:	e054      	b.n	8009616 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009572:	d050      	beq.n	8009616 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009574:	f7fb fab2 	bl	8004adc <HAL_GetTick>
 8009578:	4602      	mov	r2, r0
 800957a:	69bb      	ldr	r3, [r7, #24]
 800957c:	1ad3      	subs	r3, r2, r3
 800957e:	69fa      	ldr	r2, [r7, #28]
 8009580:	429a      	cmp	r2, r3
 8009582:	d902      	bls.n	800958a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009584:	69fb      	ldr	r3, [r7, #28]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d13d      	bne.n	8009606 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	685a      	ldr	r2, [r3, #4]
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009598:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80095a2:	d111      	bne.n	80095c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	689b      	ldr	r3, [r3, #8]
 80095a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095ac:	d004      	beq.n	80095b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	689b      	ldr	r3, [r3, #8]
 80095b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095b6:	d107      	bne.n	80095c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095d0:	d10f      	bne.n	80095f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80095e0:	601a      	str	r2, [r3, #0]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80095f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2201      	movs	r2, #1
 80095f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2200      	movs	r2, #0
 80095fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009602:	2303      	movs	r3, #3
 8009604:	e017      	b.n	8009636 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d101      	bne.n	8009610 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800960c:	2300      	movs	r3, #0
 800960e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	3b01      	subs	r3, #1
 8009614:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	689a      	ldr	r2, [r3, #8]
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	4013      	ands	r3, r2
 8009620:	68ba      	ldr	r2, [r7, #8]
 8009622:	429a      	cmp	r2, r3
 8009624:	bf0c      	ite	eq
 8009626:	2301      	moveq	r3, #1
 8009628:	2300      	movne	r3, #0
 800962a:	b2db      	uxtb	r3, r3
 800962c:	461a      	mov	r2, r3
 800962e:	79fb      	ldrb	r3, [r7, #7]
 8009630:	429a      	cmp	r2, r3
 8009632:	d19b      	bne.n	800956c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009634:	2300      	movs	r3, #0
}
 8009636:	4618      	mov	r0, r3
 8009638:	3720      	adds	r7, #32
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
 800963e:	bf00      	nop
 8009640:	20000080 	.word	0x20000080

08009644 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b08a      	sub	sp, #40	; 0x28
 8009648:	af00      	add	r7, sp, #0
 800964a:	60f8      	str	r0, [r7, #12]
 800964c:	60b9      	str	r1, [r7, #8]
 800964e:	607a      	str	r2, [r7, #4]
 8009650:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009652:	2300      	movs	r3, #0
 8009654:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009656:	f7fb fa41 	bl	8004adc <HAL_GetTick>
 800965a:	4602      	mov	r2, r0
 800965c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800965e:	1a9b      	subs	r3, r3, r2
 8009660:	683a      	ldr	r2, [r7, #0]
 8009662:	4413      	add	r3, r2
 8009664:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009666:	f7fb fa39 	bl	8004adc <HAL_GetTick>
 800966a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	330c      	adds	r3, #12
 8009672:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009674:	4b3d      	ldr	r3, [pc, #244]	; (800976c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009676:	681a      	ldr	r2, [r3, #0]
 8009678:	4613      	mov	r3, r2
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	4413      	add	r3, r2
 800967e:	00da      	lsls	r2, r3, #3
 8009680:	1ad3      	subs	r3, r2, r3
 8009682:	0d1b      	lsrs	r3, r3, #20
 8009684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009686:	fb02 f303 	mul.w	r3, r2, r3
 800968a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800968c:	e060      	b.n	8009750 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009694:	d107      	bne.n	80096a6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d104      	bne.n	80096a6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800969c:	69fb      	ldr	r3, [r7, #28]
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80096a4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ac:	d050      	beq.n	8009750 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80096ae:	f7fb fa15 	bl	8004adc <HAL_GetTick>
 80096b2:	4602      	mov	r2, r0
 80096b4:	6a3b      	ldr	r3, [r7, #32]
 80096b6:	1ad3      	subs	r3, r2, r3
 80096b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d902      	bls.n	80096c4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80096be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d13d      	bne.n	8009740 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	685a      	ldr	r2, [r3, #4]
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80096d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80096dc:	d111      	bne.n	8009702 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096e6:	d004      	beq.n	80096f2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096f0:	d107      	bne.n	8009702 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	681a      	ldr	r2, [r3, #0]
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009700:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800970a:	d10f      	bne.n	800972c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800971a:	601a      	str	r2, [r3, #0]
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	681a      	ldr	r2, [r3, #0]
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800972a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2201      	movs	r2, #1
 8009730:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2200      	movs	r2, #0
 8009738:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800973c:	2303      	movs	r3, #3
 800973e:	e010      	b.n	8009762 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009740:	69bb      	ldr	r3, [r7, #24]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d101      	bne.n	800974a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009746:	2300      	movs	r3, #0
 8009748:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800974a:	69bb      	ldr	r3, [r7, #24]
 800974c:	3b01      	subs	r3, #1
 800974e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	689a      	ldr	r2, [r3, #8]
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	4013      	ands	r3, r2
 800975a:	687a      	ldr	r2, [r7, #4]
 800975c:	429a      	cmp	r2, r3
 800975e:	d196      	bne.n	800968e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009760:	2300      	movs	r3, #0
}
 8009762:	4618      	mov	r0, r3
 8009764:	3728      	adds	r7, #40	; 0x28
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	20000080 	.word	0x20000080

08009770 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b086      	sub	sp, #24
 8009774:	af02      	add	r7, sp, #8
 8009776:	60f8      	str	r0, [r7, #12]
 8009778:	60b9      	str	r1, [r7, #8]
 800977a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009784:	d111      	bne.n	80097aa <SPI_EndRxTransaction+0x3a>
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800978e:	d004      	beq.n	800979a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009798:	d107      	bne.n	80097aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097a8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	9300      	str	r3, [sp, #0]
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	2200      	movs	r2, #0
 80097b2:	2180      	movs	r1, #128	; 0x80
 80097b4:	68f8      	ldr	r0, [r7, #12]
 80097b6:	f7ff febd 	bl	8009534 <SPI_WaitFlagStateUntilTimeout>
 80097ba:	4603      	mov	r3, r0
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d007      	beq.n	80097d0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097c4:	f043 0220 	orr.w	r2, r3, #32
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80097cc:	2303      	movs	r3, #3
 80097ce:	e023      	b.n	8009818 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80097d8:	d11d      	bne.n	8009816 <SPI_EndRxTransaction+0xa6>
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097e2:	d004      	beq.n	80097ee <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097ec:	d113      	bne.n	8009816 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	9300      	str	r3, [sp, #0]
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	2200      	movs	r2, #0
 80097f6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80097fa:	68f8      	ldr	r0, [r7, #12]
 80097fc:	f7ff ff22 	bl	8009644 <SPI_WaitFifoStateUntilTimeout>
 8009800:	4603      	mov	r3, r0
 8009802:	2b00      	cmp	r3, #0
 8009804:	d007      	beq.n	8009816 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800980a:	f043 0220 	orr.w	r2, r3, #32
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009812:	2303      	movs	r3, #3
 8009814:	e000      	b.n	8009818 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8009816:	2300      	movs	r3, #0
}
 8009818:	4618      	mov	r0, r3
 800981a:	3710      	adds	r7, #16
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b086      	sub	sp, #24
 8009824:	af02      	add	r7, sp, #8
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	60b9      	str	r1, [r7, #8]
 800982a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	9300      	str	r3, [sp, #0]
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	2200      	movs	r2, #0
 8009834:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009838:	68f8      	ldr	r0, [r7, #12]
 800983a:	f7ff ff03 	bl	8009644 <SPI_WaitFifoStateUntilTimeout>
 800983e:	4603      	mov	r3, r0
 8009840:	2b00      	cmp	r3, #0
 8009842:	d007      	beq.n	8009854 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009848:	f043 0220 	orr.w	r2, r3, #32
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009850:	2303      	movs	r3, #3
 8009852:	e027      	b.n	80098a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	9300      	str	r3, [sp, #0]
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	2200      	movs	r2, #0
 800985c:	2180      	movs	r1, #128	; 0x80
 800985e:	68f8      	ldr	r0, [r7, #12]
 8009860:	f7ff fe68 	bl	8009534 <SPI_WaitFlagStateUntilTimeout>
 8009864:	4603      	mov	r3, r0
 8009866:	2b00      	cmp	r3, #0
 8009868:	d007      	beq.n	800987a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800986e:	f043 0220 	orr.w	r2, r3, #32
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009876:	2303      	movs	r3, #3
 8009878:	e014      	b.n	80098a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	9300      	str	r3, [sp, #0]
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	2200      	movs	r2, #0
 8009882:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009886:	68f8      	ldr	r0, [r7, #12]
 8009888:	f7ff fedc 	bl	8009644 <SPI_WaitFifoStateUntilTimeout>
 800988c:	4603      	mov	r3, r0
 800988e:	2b00      	cmp	r3, #0
 8009890:	d007      	beq.n	80098a2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009896:	f043 0220 	orr.w	r2, r3, #32
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800989e:	2303      	movs	r3, #3
 80098a0:	e000      	b.n	80098a4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80098a2:	2300      	movs	r3, #0
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3710      	adds	r7, #16
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d101      	bne.n	80098be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80098ba:	2301      	movs	r3, #1
 80098bc:	e049      	b.n	8009952 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098c4:	b2db      	uxtb	r3, r3
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d106      	bne.n	80098d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2200      	movs	r2, #0
 80098ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 f841 	bl	800995a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2202      	movs	r2, #2
 80098dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681a      	ldr	r2, [r3, #0]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	3304      	adds	r3, #4
 80098e8:	4619      	mov	r1, r3
 80098ea:	4610      	mov	r0, r2
 80098ec:	f000 f9ce 	bl	8009c8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2201      	movs	r2, #1
 80098f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2201      	movs	r2, #1
 80098fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2201      	movs	r2, #1
 8009904:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2201      	movs	r2, #1
 800990c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2201      	movs	r2, #1
 8009914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2201      	movs	r2, #1
 800991c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2201      	movs	r2, #1
 8009924:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2201      	movs	r2, #1
 800992c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2201      	movs	r2, #1
 8009934:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2201      	movs	r2, #1
 800993c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2201      	movs	r2, #1
 8009944:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2201      	movs	r2, #1
 800994c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009950:	2300      	movs	r3, #0
}
 8009952:	4618      	mov	r0, r3
 8009954:	3708      	adds	r7, #8
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}

0800995a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800995a:	b480      	push	{r7}
 800995c:	b083      	sub	sp, #12
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009962:	bf00      	nop
 8009964:	370c      	adds	r7, #12
 8009966:	46bd      	mov	sp, r7
 8009968:	bc80      	pop	{r7}
 800996a:	4770      	bx	lr

0800996c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800996c:	b480      	push	{r7}
 800996e:	b085      	sub	sp, #20
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800997a:	b2db      	uxtb	r3, r3
 800997c:	2b01      	cmp	r3, #1
 800997e:	d001      	beq.n	8009984 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009980:	2301      	movs	r3, #1
 8009982:	e036      	b.n	80099f2 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2202      	movs	r2, #2
 8009988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	68da      	ldr	r2, [r3, #12]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f042 0201 	orr.w	r2, r2, #1
 800999a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a16      	ldr	r2, [pc, #88]	; (80099fc <HAL_TIM_Base_Start_IT+0x90>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d004      	beq.n	80099b0 <HAL_TIM_Base_Start_IT+0x44>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099ae:	d115      	bne.n	80099dc <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	689a      	ldr	r2, [r3, #8]
 80099b6:	4b12      	ldr	r3, [pc, #72]	; (8009a00 <HAL_TIM_Base_Start_IT+0x94>)
 80099b8:	4013      	ands	r3, r2
 80099ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2b06      	cmp	r3, #6
 80099c0:	d015      	beq.n	80099ee <HAL_TIM_Base_Start_IT+0x82>
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099c8:	d011      	beq.n	80099ee <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f042 0201 	orr.w	r2, r2, #1
 80099d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099da:	e008      	b.n	80099ee <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	681a      	ldr	r2, [r3, #0]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f042 0201 	orr.w	r2, r2, #1
 80099ea:	601a      	str	r2, [r3, #0]
 80099ec:	e000      	b.n	80099f0 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80099f0:	2300      	movs	r3, #0
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3714      	adds	r7, #20
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bc80      	pop	{r7}
 80099fa:	4770      	bx	lr
 80099fc:	40012c00 	.word	0x40012c00
 8009a00:	00010007 	.word	0x00010007

08009a04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b082      	sub	sp, #8
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	691b      	ldr	r3, [r3, #16]
 8009a12:	f003 0302 	and.w	r3, r3, #2
 8009a16:	2b02      	cmp	r3, #2
 8009a18:	d122      	bne.n	8009a60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	68db      	ldr	r3, [r3, #12]
 8009a20:	f003 0302 	and.w	r3, r3, #2
 8009a24:	2b02      	cmp	r3, #2
 8009a26:	d11b      	bne.n	8009a60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f06f 0202 	mvn.w	r2, #2
 8009a30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2201      	movs	r2, #1
 8009a36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	699b      	ldr	r3, [r3, #24]
 8009a3e:	f003 0303 	and.w	r3, r3, #3
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d003      	beq.n	8009a4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 f904 	bl	8009c54 <HAL_TIM_IC_CaptureCallback>
 8009a4c:	e005      	b.n	8009a5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 f8f7 	bl	8009c42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f000 f906 	bl	8009c66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	691b      	ldr	r3, [r3, #16]
 8009a66:	f003 0304 	and.w	r3, r3, #4
 8009a6a:	2b04      	cmp	r3, #4
 8009a6c:	d122      	bne.n	8009ab4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	68db      	ldr	r3, [r3, #12]
 8009a74:	f003 0304 	and.w	r3, r3, #4
 8009a78:	2b04      	cmp	r3, #4
 8009a7a:	d11b      	bne.n	8009ab4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f06f 0204 	mvn.w	r2, #4
 8009a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2202      	movs	r2, #2
 8009a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	699b      	ldr	r3, [r3, #24]
 8009a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d003      	beq.n	8009aa2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 f8da 	bl	8009c54 <HAL_TIM_IC_CaptureCallback>
 8009aa0:	e005      	b.n	8009aae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f000 f8cd 	bl	8009c42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 f8dc 	bl	8009c66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	691b      	ldr	r3, [r3, #16]
 8009aba:	f003 0308 	and.w	r3, r3, #8
 8009abe:	2b08      	cmp	r3, #8
 8009ac0:	d122      	bne.n	8009b08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	68db      	ldr	r3, [r3, #12]
 8009ac8:	f003 0308 	and.w	r3, r3, #8
 8009acc:	2b08      	cmp	r3, #8
 8009ace:	d11b      	bne.n	8009b08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f06f 0208 	mvn.w	r2, #8
 8009ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2204      	movs	r2, #4
 8009ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	69db      	ldr	r3, [r3, #28]
 8009ae6:	f003 0303 	and.w	r3, r3, #3
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d003      	beq.n	8009af6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 f8b0 	bl	8009c54 <HAL_TIM_IC_CaptureCallback>
 8009af4:	e005      	b.n	8009b02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 f8a3 	bl	8009c42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 f8b2 	bl	8009c66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2200      	movs	r2, #0
 8009b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	691b      	ldr	r3, [r3, #16]
 8009b0e:	f003 0310 	and.w	r3, r3, #16
 8009b12:	2b10      	cmp	r3, #16
 8009b14:	d122      	bne.n	8009b5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	f003 0310 	and.w	r3, r3, #16
 8009b20:	2b10      	cmp	r3, #16
 8009b22:	d11b      	bne.n	8009b5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f06f 0210 	mvn.w	r2, #16
 8009b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2208      	movs	r2, #8
 8009b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	69db      	ldr	r3, [r3, #28]
 8009b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d003      	beq.n	8009b4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 f886 	bl	8009c54 <HAL_TIM_IC_CaptureCallback>
 8009b48:	e005      	b.n	8009b56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 f879 	bl	8009c42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 f888 	bl	8009c66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	691b      	ldr	r3, [r3, #16]
 8009b62:	f003 0301 	and.w	r3, r3, #1
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d10e      	bne.n	8009b88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	68db      	ldr	r3, [r3, #12]
 8009b70:	f003 0301 	and.w	r3, r3, #1
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d107      	bne.n	8009b88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f06f 0201 	mvn.w	r2, #1
 8009b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f7f8 f8dc 	bl	8001d40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	691b      	ldr	r3, [r3, #16]
 8009b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b92:	2b80      	cmp	r3, #128	; 0x80
 8009b94:	d10e      	bne.n	8009bb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	68db      	ldr	r3, [r3, #12]
 8009b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ba0:	2b80      	cmp	r3, #128	; 0x80
 8009ba2:	d107      	bne.n	8009bb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 f8d7 	bl	8009d62 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	691b      	ldr	r3, [r3, #16]
 8009bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bc2:	d10e      	bne.n	8009be2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	68db      	ldr	r3, [r3, #12]
 8009bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bce:	2b80      	cmp	r3, #128	; 0x80
 8009bd0:	d107      	bne.n	8009be2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 f8c9 	bl	8009d74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	691b      	ldr	r3, [r3, #16]
 8009be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bec:	2b40      	cmp	r3, #64	; 0x40
 8009bee:	d10e      	bne.n	8009c0e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	68db      	ldr	r3, [r3, #12]
 8009bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bfa:	2b40      	cmp	r3, #64	; 0x40
 8009bfc:	d107      	bne.n	8009c0e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f000 f835 	bl	8009c78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	691b      	ldr	r3, [r3, #16]
 8009c14:	f003 0320 	and.w	r3, r3, #32
 8009c18:	2b20      	cmp	r3, #32
 8009c1a:	d10e      	bne.n	8009c3a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	68db      	ldr	r3, [r3, #12]
 8009c22:	f003 0320 	and.w	r3, r3, #32
 8009c26:	2b20      	cmp	r3, #32
 8009c28:	d107      	bne.n	8009c3a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f06f 0220 	mvn.w	r2, #32
 8009c32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f000 f88b 	bl	8009d50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009c3a:	bf00      	nop
 8009c3c:	3708      	adds	r7, #8
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c42:	b480      	push	{r7}
 8009c44:	b083      	sub	sp, #12
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c4a:	bf00      	nop
 8009c4c:	370c      	adds	r7, #12
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bc80      	pop	{r7}
 8009c52:	4770      	bx	lr

08009c54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b083      	sub	sp, #12
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009c5c:	bf00      	nop
 8009c5e:	370c      	adds	r7, #12
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bc80      	pop	{r7}
 8009c64:	4770      	bx	lr

08009c66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c66:	b480      	push	{r7}
 8009c68:	b083      	sub	sp, #12
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c6e:	bf00      	nop
 8009c70:	370c      	adds	r7, #12
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bc80      	pop	{r7}
 8009c76:	4770      	bx	lr

08009c78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b083      	sub	sp, #12
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c80:	bf00      	nop
 8009c82:	370c      	adds	r7, #12
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bc80      	pop	{r7}
 8009c88:	4770      	bx	lr
	...

08009c8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b085      	sub	sp, #20
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	4a29      	ldr	r2, [pc, #164]	; (8009d44 <TIM_Base_SetConfig+0xb8>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d003      	beq.n	8009cac <TIM_Base_SetConfig+0x20>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009caa:	d108      	bne.n	8009cbe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	68fa      	ldr	r2, [r7, #12]
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	4a20      	ldr	r2, [pc, #128]	; (8009d44 <TIM_Base_SetConfig+0xb8>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d00b      	beq.n	8009cde <TIM_Base_SetConfig+0x52>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ccc:	d007      	beq.n	8009cde <TIM_Base_SetConfig+0x52>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	4a1d      	ldr	r2, [pc, #116]	; (8009d48 <TIM_Base_SetConfig+0xbc>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d003      	beq.n	8009cde <TIM_Base_SetConfig+0x52>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	4a1c      	ldr	r2, [pc, #112]	; (8009d4c <TIM_Base_SetConfig+0xc0>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d108      	bne.n	8009cf0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ce4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	68db      	ldr	r3, [r3, #12]
 8009cea:	68fa      	ldr	r2, [r7, #12]
 8009cec:	4313      	orrs	r3, r2
 8009cee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	695b      	ldr	r3, [r3, #20]
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	68fa      	ldr	r2, [r7, #12]
 8009d02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	689a      	ldr	r2, [r3, #8]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	4a0b      	ldr	r2, [pc, #44]	; (8009d44 <TIM_Base_SetConfig+0xb8>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d007      	beq.n	8009d2c <TIM_Base_SetConfig+0xa0>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	4a0a      	ldr	r2, [pc, #40]	; (8009d48 <TIM_Base_SetConfig+0xbc>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d003      	beq.n	8009d2c <TIM_Base_SetConfig+0xa0>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a09      	ldr	r2, [pc, #36]	; (8009d4c <TIM_Base_SetConfig+0xc0>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d103      	bne.n	8009d34 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	691a      	ldr	r2, [r3, #16]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2201      	movs	r2, #1
 8009d38:	615a      	str	r2, [r3, #20]
}
 8009d3a:	bf00      	nop
 8009d3c:	3714      	adds	r7, #20
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bc80      	pop	{r7}
 8009d42:	4770      	bx	lr
 8009d44:	40012c00 	.word	0x40012c00
 8009d48:	40014400 	.word	0x40014400
 8009d4c:	40014800 	.word	0x40014800

08009d50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d50:	b480      	push	{r7}
 8009d52:	b083      	sub	sp, #12
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d58:	bf00      	nop
 8009d5a:	370c      	adds	r7, #12
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bc80      	pop	{r7}
 8009d60:	4770      	bx	lr

08009d62 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d62:	b480      	push	{r7}
 8009d64:	b083      	sub	sp, #12
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d6a:	bf00      	nop
 8009d6c:	370c      	adds	r7, #12
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bc80      	pop	{r7}
 8009d72:	4770      	bx	lr

08009d74 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009d7c:	bf00      	nop
 8009d7e:	370c      	adds	r7, #12
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bc80      	pop	{r7}
 8009d84:	4770      	bx	lr

08009d86 <LL_RCC_GetUSARTClockSource>:
{
 8009d86:	b480      	push	{r7}
 8009d88:	b083      	sub	sp, #12
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8009d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d92:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	401a      	ands	r2, r3
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	041b      	lsls	r3, r3, #16
 8009d9e:	4313      	orrs	r3, r2
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	370c      	adds	r7, #12
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bc80      	pop	{r7}
 8009da8:	4770      	bx	lr

08009daa <LL_RCC_GetLPUARTClockSource>:
{
 8009daa:	b480      	push	{r7}
 8009dac:	b083      	sub	sp, #12
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8009db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009db6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	4013      	ands	r3, r2
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	370c      	adds	r7, #12
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bc80      	pop	{r7}
 8009dc6:	4770      	bx	lr

08009dc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d101      	bne.n	8009dda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	e042      	b.n	8009e60 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d106      	bne.n	8009df2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2200      	movs	r2, #0
 8009de8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f7f8 f8e5 	bl	8001fbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2224      	movs	r2, #36	; 0x24
 8009df6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f022 0201 	bic.w	r2, r2, #1
 8009e08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 fd5c 	bl	800a8c8 <UART_SetConfig>
 8009e10:	4603      	mov	r3, r0
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d101      	bne.n	8009e1a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009e16:	2301      	movs	r3, #1
 8009e18:	e022      	b.n	8009e60 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d002      	beq.n	8009e28 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f000 ffc4 	bl	800adb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	685a      	ldr	r2, [r3, #4]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009e36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	689a      	ldr	r2, [r3, #8]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009e46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f042 0201 	orr.w	r2, r2, #1
 8009e56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f001 f84a 	bl	800aef2 <UART_CheckIdleState>
 8009e5e:	4603      	mov	r3, r0
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3708      	adds	r7, #8
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d101      	bne.n	8009e7a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8009e76:	2301      	movs	r3, #1
 8009e78:	e04a      	b.n	8009f10 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d106      	bne.n	8009e92 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2200      	movs	r2, #0
 8009e88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f7f8 f895 	bl	8001fbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2224      	movs	r2, #36	; 0x24
 8009e96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	681a      	ldr	r2, [r3, #0]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f022 0201 	bic.w	r2, r2, #1
 8009ea8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 fd0c 	bl	800a8c8 <UART_SetConfig>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d101      	bne.n	8009eba <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	e02a      	b.n	8009f10 <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d002      	beq.n	8009ec8 <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 ff74 	bl	800adb0 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	685a      	ldr	r2, [r3, #4]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009ed6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	689a      	ldr	r2, [r3, #8]
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8009ee6:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	689a      	ldr	r2, [r3, #8]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f042 0208 	orr.w	r2, r2, #8
 8009ef6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f042 0201 	orr.w	r2, r2, #1
 8009f06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 fff2 	bl	800aef2 <UART_CheckIdleState>
 8009f0e:	4603      	mov	r3, r0
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3708      	adds	r7, #8
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b08a      	sub	sp, #40	; 0x28
 8009f1c:	af02      	add	r7, sp, #8
 8009f1e:	60f8      	str	r0, [r7, #12]
 8009f20:	60b9      	str	r1, [r7, #8]
 8009f22:	603b      	str	r3, [r7, #0]
 8009f24:	4613      	mov	r3, r2
 8009f26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f2e:	2b20      	cmp	r3, #32
 8009f30:	d173      	bne.n	800a01a <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d002      	beq.n	8009f3e <HAL_UART_Transmit+0x26>
 8009f38:	88fb      	ldrh	r3, [r7, #6]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d101      	bne.n	8009f42 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	e06c      	b.n	800a01c <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2200      	movs	r2, #0
 8009f46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	2221      	movs	r2, #33	; 0x21
 8009f4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009f52:	f7fa fdc3 	bl	8004adc <HAL_GetTick>
 8009f56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	88fa      	ldrh	r2, [r7, #6]
 8009f5c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	88fa      	ldrh	r2, [r7, #6]
 8009f64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	689b      	ldr	r3, [r3, #8]
 8009f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f70:	d108      	bne.n	8009f84 <HAL_UART_Transmit+0x6c>
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	691b      	ldr	r3, [r3, #16]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d104      	bne.n	8009f84 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	61bb      	str	r3, [r7, #24]
 8009f82:	e003      	b.n	8009f8c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009f8c:	e02c      	b.n	8009fe8 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	9300      	str	r3, [sp, #0]
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	2200      	movs	r2, #0
 8009f96:	2180      	movs	r1, #128	; 0x80
 8009f98:	68f8      	ldr	r0, [r7, #12]
 8009f9a:	f000 fff8 	bl	800af8e <UART_WaitOnFlagUntilTimeout>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d001      	beq.n	8009fa8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8009fa4:	2303      	movs	r3, #3
 8009fa6:	e039      	b.n	800a01c <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8009fa8:	69fb      	ldr	r3, [r7, #28]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d10b      	bne.n	8009fc6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009fae:	69bb      	ldr	r3, [r7, #24]
 8009fb0:	881b      	ldrh	r3, [r3, #0]
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009fbc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009fbe:	69bb      	ldr	r3, [r7, #24]
 8009fc0:	3302      	adds	r3, #2
 8009fc2:	61bb      	str	r3, [r7, #24]
 8009fc4:	e007      	b.n	8009fd6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009fc6:	69fb      	ldr	r3, [r7, #28]
 8009fc8:	781a      	ldrb	r2, [r3, #0]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009fd0:	69fb      	ldr	r3, [r7, #28]
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	3b01      	subs	r3, #1
 8009fe0:	b29a      	uxth	r2, r3
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d1cc      	bne.n	8009f8e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	9300      	str	r3, [sp, #0]
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	2140      	movs	r1, #64	; 0x40
 8009ffe:	68f8      	ldr	r0, [r7, #12]
 800a000:	f000 ffc5 	bl	800af8e <UART_WaitOnFlagUntilTimeout>
 800a004:	4603      	mov	r3, r0
 800a006:	2b00      	cmp	r3, #0
 800a008:	d001      	beq.n	800a00e <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 800a00a:	2303      	movs	r3, #3
 800a00c:	e006      	b.n	800a01c <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2220      	movs	r2, #32
 800a012:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800a016:	2300      	movs	r3, #0
 800a018:	e000      	b.n	800a01c <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 800a01a:	2302      	movs	r3, #2
  }
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3720      	adds	r7, #32
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b08a      	sub	sp, #40	; 0x28
 800a028:	af02      	add	r7, sp, #8
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	60b9      	str	r1, [r7, #8]
 800a02e:	603b      	str	r3, [r7, #0]
 800a030:	4613      	mov	r3, r2
 800a032:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a03a:	2b20      	cmp	r3, #32
 800a03c:	f040 80b1 	bne.w	800a1a2 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d002      	beq.n	800a04c <HAL_UART_Receive+0x28>
 800a046:	88fb      	ldrh	r3, [r7, #6]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d101      	bne.n	800a050 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800a04c:	2301      	movs	r3, #1
 800a04e:	e0a9      	b.n	800a1a4 <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2200      	movs	r2, #0
 800a054:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2222      	movs	r2, #34	; 0x22
 800a05c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2200      	movs	r2, #0
 800a064:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a066:	f7fa fd39 	bl	8004adc <HAL_GetTick>
 800a06a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	88fa      	ldrh	r2, [r7, #6]
 800a070:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	88fa      	ldrh	r2, [r7, #6]
 800a078:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	689b      	ldr	r3, [r3, #8]
 800a080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a084:	d10e      	bne.n	800a0a4 <HAL_UART_Receive+0x80>
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	691b      	ldr	r3, [r3, #16]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d105      	bne.n	800a09a <HAL_UART_Receive+0x76>
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a094:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a098:	e02d      	b.n	800a0f6 <HAL_UART_Receive+0xd2>
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	22ff      	movs	r2, #255	; 0xff
 800a09e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a0a2:	e028      	b.n	800a0f6 <HAL_UART_Receive+0xd2>
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	689b      	ldr	r3, [r3, #8]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d10d      	bne.n	800a0c8 <HAL_UART_Receive+0xa4>
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	691b      	ldr	r3, [r3, #16]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d104      	bne.n	800a0be <HAL_UART_Receive+0x9a>
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	22ff      	movs	r2, #255	; 0xff
 800a0b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a0bc:	e01b      	b.n	800a0f6 <HAL_UART_Receive+0xd2>
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	227f      	movs	r2, #127	; 0x7f
 800a0c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a0c6:	e016      	b.n	800a0f6 <HAL_UART_Receive+0xd2>
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a0d0:	d10d      	bne.n	800a0ee <HAL_UART_Receive+0xca>
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	691b      	ldr	r3, [r3, #16]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d104      	bne.n	800a0e4 <HAL_UART_Receive+0xc0>
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	227f      	movs	r2, #127	; 0x7f
 800a0de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a0e2:	e008      	b.n	800a0f6 <HAL_UART_Receive+0xd2>
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	223f      	movs	r2, #63	; 0x3f
 800a0e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a0ec:	e003      	b.n	800a0f6 <HAL_UART_Receive+0xd2>
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a0fc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	689b      	ldr	r3, [r3, #8]
 800a102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a106:	d108      	bne.n	800a11a <HAL_UART_Receive+0xf6>
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	691b      	ldr	r3, [r3, #16]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d104      	bne.n	800a11a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800a110:	2300      	movs	r3, #0
 800a112:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	61bb      	str	r3, [r7, #24]
 800a118:	e003      	b.n	800a122 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a11e:	2300      	movs	r3, #0
 800a120:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800a122:	e032      	b.n	800a18a <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	9300      	str	r3, [sp, #0]
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	2200      	movs	r2, #0
 800a12c:	2120      	movs	r1, #32
 800a12e:	68f8      	ldr	r0, [r7, #12]
 800a130:	f000 ff2d 	bl	800af8e <UART_WaitOnFlagUntilTimeout>
 800a134:	4603      	mov	r3, r0
 800a136:	2b00      	cmp	r3, #0
 800a138:	d001      	beq.n	800a13e <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 800a13a:	2303      	movs	r3, #3
 800a13c:	e032      	b.n	800a1a4 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800a13e:	69fb      	ldr	r3, [r7, #28]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d10c      	bne.n	800a15e <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a14a:	b29a      	uxth	r2, r3
 800a14c:	8a7b      	ldrh	r3, [r7, #18]
 800a14e:	4013      	ands	r3, r2
 800a150:	b29a      	uxth	r2, r3
 800a152:	69bb      	ldr	r3, [r7, #24]
 800a154:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a156:	69bb      	ldr	r3, [r7, #24]
 800a158:	3302      	adds	r3, #2
 800a15a:	61bb      	str	r3, [r7, #24]
 800a15c:	e00c      	b.n	800a178 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a164:	b2da      	uxtb	r2, r3
 800a166:	8a7b      	ldrh	r3, [r7, #18]
 800a168:	b2db      	uxtb	r3, r3
 800a16a:	4013      	ands	r3, r2
 800a16c:	b2da      	uxtb	r2, r3
 800a16e:	69fb      	ldr	r3, [r7, #28]
 800a170:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800a172:	69fb      	ldr	r3, [r7, #28]
 800a174:	3301      	adds	r3, #1
 800a176:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a17e:	b29b      	uxth	r3, r3
 800a180:	3b01      	subs	r3, #1
 800a182:	b29a      	uxth	r2, r3
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a190:	b29b      	uxth	r3, r3
 800a192:	2b00      	cmp	r3, #0
 800a194:	d1c6      	bne.n	800a124 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2220      	movs	r2, #32
 800a19a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	e000      	b.n	800a1a4 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 800a1a2:	2302      	movs	r3, #2
  }
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3720      	adds	r7, #32
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b08a      	sub	sp, #40	; 0x28
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	4613      	mov	r3, r2
 800a1b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1c0:	2b20      	cmp	r3, #32
 800a1c2:	d137      	bne.n	800a234 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d002      	beq.n	800a1d0 <HAL_UART_Receive_IT+0x24>
 800a1ca:	88fb      	ldrh	r3, [r7, #6]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d101      	bne.n	800a1d4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	e030      	b.n	800a236 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a18      	ldr	r2, [pc, #96]	; (800a240 <HAL_UART_Receive_IT+0x94>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d01f      	beq.n	800a224 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d018      	beq.n	800a224 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	e853 3f00 	ldrex	r3, [r3]
 800a1fe:	613b      	str	r3, [r7, #16]
   return(result);
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a206:	627b      	str	r3, [r7, #36]	; 0x24
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	461a      	mov	r2, r3
 800a20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a210:	623b      	str	r3, [r7, #32]
 800a212:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a214:	69f9      	ldr	r1, [r7, #28]
 800a216:	6a3a      	ldr	r2, [r7, #32]
 800a218:	e841 2300 	strex	r3, r2, [r1]
 800a21c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a21e:	69bb      	ldr	r3, [r7, #24]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d1e6      	bne.n	800a1f2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a224:	88fb      	ldrh	r3, [r7, #6]
 800a226:	461a      	mov	r2, r3
 800a228:	68b9      	ldr	r1, [r7, #8]
 800a22a:	68f8      	ldr	r0, [r7, #12]
 800a22c:	f000 ff78 	bl	800b120 <UART_Start_Receive_IT>
 800a230:	4603      	mov	r3, r0
 800a232:	e000      	b.n	800a236 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a234:	2302      	movs	r3, #2
  }
}
 800a236:	4618      	mov	r0, r3
 800a238:	3728      	adds	r7, #40	; 0x28
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	40008000 	.word	0x40008000

0800a244 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b0ba      	sub	sp, #232	; 0xe8
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	69db      	ldr	r3, [r3, #28]
 800a252:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	689b      	ldr	r3, [r3, #8]
 800a266:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a26a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a26e:	f640 030f 	movw	r3, #2063	; 0x80f
 800a272:	4013      	ands	r3, r2
 800a274:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a278:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d11b      	bne.n	800a2b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a284:	f003 0320 	and.w	r3, r3, #32
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d015      	beq.n	800a2b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a28c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a290:	f003 0320 	and.w	r3, r3, #32
 800a294:	2b00      	cmp	r3, #0
 800a296:	d105      	bne.n	800a2a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a298:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a29c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d009      	beq.n	800a2b8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	f000 82e3 	beq.w	800a874 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	4798      	blx	r3
      }
      return;
 800a2b6:	e2dd      	b.n	800a874 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a2b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	f000 8123 	beq.w	800a508 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a2c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a2c6:	4b8d      	ldr	r3, [pc, #564]	; (800a4fc <HAL_UART_IRQHandler+0x2b8>)
 800a2c8:	4013      	ands	r3, r2
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d106      	bne.n	800a2dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a2ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a2d2:	4b8b      	ldr	r3, [pc, #556]	; (800a500 <HAL_UART_IRQHandler+0x2bc>)
 800a2d4:	4013      	ands	r3, r2
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	f000 8116 	beq.w	800a508 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a2dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2e0:	f003 0301 	and.w	r3, r3, #1
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d011      	beq.n	800a30c <HAL_UART_IRQHandler+0xc8>
 800a2e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d00b      	beq.n	800a30c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a302:	f043 0201 	orr.w	r2, r3, #1
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a30c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a310:	f003 0302 	and.w	r3, r3, #2
 800a314:	2b00      	cmp	r3, #0
 800a316:	d011      	beq.n	800a33c <HAL_UART_IRQHandler+0xf8>
 800a318:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a31c:	f003 0301 	and.w	r3, r3, #1
 800a320:	2b00      	cmp	r3, #0
 800a322:	d00b      	beq.n	800a33c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	2202      	movs	r2, #2
 800a32a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a332:	f043 0204 	orr.w	r2, r3, #4
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a33c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a340:	f003 0304 	and.w	r3, r3, #4
 800a344:	2b00      	cmp	r3, #0
 800a346:	d011      	beq.n	800a36c <HAL_UART_IRQHandler+0x128>
 800a348:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a34c:	f003 0301 	and.w	r3, r3, #1
 800a350:	2b00      	cmp	r3, #0
 800a352:	d00b      	beq.n	800a36c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	2204      	movs	r2, #4
 800a35a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a362:	f043 0202 	orr.w	r2, r3, #2
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a36c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a370:	f003 0308 	and.w	r3, r3, #8
 800a374:	2b00      	cmp	r3, #0
 800a376:	d017      	beq.n	800a3a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a37c:	f003 0320 	and.w	r3, r3, #32
 800a380:	2b00      	cmp	r3, #0
 800a382:	d105      	bne.n	800a390 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a384:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a388:	4b5c      	ldr	r3, [pc, #368]	; (800a4fc <HAL_UART_IRQHandler+0x2b8>)
 800a38a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d00b      	beq.n	800a3a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	2208      	movs	r2, #8
 800a396:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a39e:	f043 0208 	orr.w	r2, r3, #8
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a3a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d012      	beq.n	800a3da <HAL_UART_IRQHandler+0x196>
 800a3b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d00c      	beq.n	800a3da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a3c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3d0:	f043 0220 	orr.w	r2, r3, #32
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	f000 8249 	beq.w	800a878 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a3e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3ea:	f003 0320 	and.w	r3, r3, #32
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d013      	beq.n	800a41a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a3f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3f6:	f003 0320 	and.w	r3, r3, #32
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d105      	bne.n	800a40a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a3fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a406:	2b00      	cmp	r3, #0
 800a408:	d007      	beq.n	800a41a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d003      	beq.n	800a41a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a420:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	689b      	ldr	r3, [r3, #8]
 800a42a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a42e:	2b40      	cmp	r3, #64	; 0x40
 800a430:	d005      	beq.n	800a43e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a432:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a436:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d054      	beq.n	800a4e8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 ff8e 	bl	800b360 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	689b      	ldr	r3, [r3, #8]
 800a44a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a44e:	2b40      	cmp	r3, #64	; 0x40
 800a450:	d146      	bne.n	800a4e0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	3308      	adds	r3, #8
 800a458:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a45c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a460:	e853 3f00 	ldrex	r3, [r3]
 800a464:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a468:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a46c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a470:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	3308      	adds	r3, #8
 800a47a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a47e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a482:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a486:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a48a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a48e:	e841 2300 	strex	r3, r2, [r1]
 800a492:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a496:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d1d9      	bne.n	800a452 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d017      	beq.n	800a4d8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4ae:	4a15      	ldr	r2, [pc, #84]	; (800a504 <HAL_UART_IRQHandler+0x2c0>)
 800a4b0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f7fb fca4 	bl	8005e06 <HAL_DMA_Abort_IT>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d019      	beq.n	800a4f8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4cc:	687a      	ldr	r2, [r7, #4]
 800a4ce:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800a4d2:	4610      	mov	r0, r2
 800a4d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4d6:	e00f      	b.n	800a4f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f000 f9e0 	bl	800a89e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4de:	e00b      	b.n	800a4f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f000 f9dc 	bl	800a89e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4e6:	e007      	b.n	800a4f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f000 f9d8 	bl	800a89e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800a4f6:	e1bf      	b.n	800a878 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4f8:	bf00      	nop
    return;
 800a4fa:	e1bd      	b.n	800a878 <HAL_UART_IRQHandler+0x634>
 800a4fc:	10000001 	.word	0x10000001
 800a500:	04000120 	.word	0x04000120
 800a504:	0800b42b 	.word	0x0800b42b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a50c:	2b01      	cmp	r3, #1
 800a50e:	f040 8153 	bne.w	800a7b8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a516:	f003 0310 	and.w	r3, r3, #16
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	f000 814c 	beq.w	800a7b8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a524:	f003 0310 	and.w	r3, r3, #16
 800a528:	2b00      	cmp	r3, #0
 800a52a:	f000 8145 	beq.w	800a7b8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	2210      	movs	r2, #16
 800a534:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	689b      	ldr	r3, [r3, #8]
 800a53c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a540:	2b40      	cmp	r3, #64	; 0x40
 800a542:	f040 80bb 	bne.w	800a6bc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a554:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a558:	2b00      	cmp	r3, #0
 800a55a:	f000 818f 	beq.w	800a87c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a564:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a568:	429a      	cmp	r2, r3
 800a56a:	f080 8187 	bcs.w	800a87c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a574:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f003 0320 	and.w	r3, r3, #32
 800a586:	2b00      	cmp	r3, #0
 800a588:	f040 8087 	bne.w	800a69a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a594:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a598:	e853 3f00 	ldrex	r3, [r3]
 800a59c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a5a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a5a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a5a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	461a      	mov	r2, r3
 800a5b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a5b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a5ba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a5c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a5c6:	e841 2300 	strex	r3, r2, [r1]
 800a5ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a5ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d1da      	bne.n	800a58c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	3308      	adds	r3, #8
 800a5dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a5e0:	e853 3f00 	ldrex	r3, [r3]
 800a5e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a5e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a5e8:	f023 0301 	bic.w	r3, r3, #1
 800a5ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	3308      	adds	r3, #8
 800a5f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a5fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a5fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a600:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a602:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a606:	e841 2300 	strex	r3, r2, [r1]
 800a60a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a60c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d1e1      	bne.n	800a5d6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	3308      	adds	r3, #8
 800a618:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a61a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a61c:	e853 3f00 	ldrex	r3, [r3]
 800a620:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a622:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a624:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a628:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	3308      	adds	r3, #8
 800a632:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a636:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a638:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a63a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a63c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a63e:	e841 2300 	strex	r3, r2, [r1]
 800a642:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a644:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a646:	2b00      	cmp	r3, #0
 800a648:	d1e3      	bne.n	800a612 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2220      	movs	r2, #32
 800a64e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2200      	movs	r2, #0
 800a656:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a65e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a660:	e853 3f00 	ldrex	r3, [r3]
 800a664:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a666:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a668:	f023 0310 	bic.w	r3, r3, #16
 800a66c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	461a      	mov	r2, r3
 800a676:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a67a:	65bb      	str	r3, [r7, #88]	; 0x58
 800a67c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a67e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a680:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a682:	e841 2300 	strex	r3, r2, [r1]
 800a686:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a688:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d1e4      	bne.n	800a658 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a694:	4618      	mov	r0, r3
 800a696:	f7fb fb58 	bl	8005d4a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2202      	movs	r2, #2
 800a69e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	1ad3      	subs	r3, r2, r3
 800a6b0:	b29b      	uxth	r3, r3
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f000 f8fb 	bl	800a8b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a6ba:	e0df      	b.n	800a87c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a6c8:	b29b      	uxth	r3, r3
 800a6ca:	1ad3      	subs	r3, r2, r3
 800a6cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	f000 80d1 	beq.w	800a880 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800a6de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	f000 80cc 	beq.w	800a880 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f0:	e853 3f00 	ldrex	r3, [r3]
 800a6f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a6f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a6fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	461a      	mov	r2, r3
 800a706:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a70a:	647b      	str	r3, [r7, #68]	; 0x44
 800a70c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a70e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a710:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a712:	e841 2300 	strex	r3, r2, [r1]
 800a716:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d1e4      	bne.n	800a6e8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	3308      	adds	r3, #8
 800a724:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a728:	e853 3f00 	ldrex	r3, [r3]
 800a72c:	623b      	str	r3, [r7, #32]
   return(result);
 800a72e:	6a3b      	ldr	r3, [r7, #32]
 800a730:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a734:	f023 0301 	bic.w	r3, r3, #1
 800a738:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	3308      	adds	r3, #8
 800a742:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a746:	633a      	str	r2, [r7, #48]	; 0x30
 800a748:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a74a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a74c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a74e:	e841 2300 	strex	r3, r2, [r1]
 800a752:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a756:	2b00      	cmp	r3, #0
 800a758:	d1e1      	bne.n	800a71e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2220      	movs	r2, #32
 800a75e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2200      	movs	r2, #0
 800a766:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2200      	movs	r2, #0
 800a76c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	e853 3f00 	ldrex	r3, [r3]
 800a77a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f023 0310 	bic.w	r3, r3, #16
 800a782:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	461a      	mov	r2, r3
 800a78c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a790:	61fb      	str	r3, [r7, #28]
 800a792:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a794:	69b9      	ldr	r1, [r7, #24]
 800a796:	69fa      	ldr	r2, [r7, #28]
 800a798:	e841 2300 	strex	r3, r2, [r1]
 800a79c:	617b      	str	r3, [r7, #20]
   return(result);
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d1e4      	bne.n	800a76e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2202      	movs	r2, #2
 800a7a8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a7aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f000 f87d 	bl	800a8b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a7b6:	e063      	b.n	800a880 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a7b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d00e      	beq.n	800a7e2 <HAL_UART_IRQHandler+0x59e>
 800a7c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a7c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d008      	beq.n	800a7e2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a7d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f001 fb82 	bl	800bee4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a7e0:	e051      	b.n	800a886 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a7e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d014      	beq.n	800a818 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a7ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d105      	bne.n	800a806 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a7fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a7fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a802:	2b00      	cmp	r3, #0
 800a804:	d008      	beq.n	800a818 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d03a      	beq.n	800a884 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	4798      	blx	r3
    }
    return;
 800a816:	e035      	b.n	800a884 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a81c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a820:	2b00      	cmp	r3, #0
 800a822:	d009      	beq.n	800a838 <HAL_UART_IRQHandler+0x5f4>
 800a824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d003      	beq.n	800a838 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f000 fe10 	bl	800b456 <UART_EndTransmit_IT>
    return;
 800a836:	e026      	b.n	800a886 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a83c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a840:	2b00      	cmp	r3, #0
 800a842:	d009      	beq.n	800a858 <HAL_UART_IRQHandler+0x614>
 800a844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a848:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d003      	beq.n	800a858 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f001 fb59 	bl	800bf08 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a856:	e016      	b.n	800a886 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a85c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a860:	2b00      	cmp	r3, #0
 800a862:	d010      	beq.n	800a886 <HAL_UART_IRQHandler+0x642>
 800a864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a868:	2b00      	cmp	r3, #0
 800a86a:	da0c      	bge.n	800a886 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f001 fb42 	bl	800bef6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a872:	e008      	b.n	800a886 <HAL_UART_IRQHandler+0x642>
      return;
 800a874:	bf00      	nop
 800a876:	e006      	b.n	800a886 <HAL_UART_IRQHandler+0x642>
    return;
 800a878:	bf00      	nop
 800a87a:	e004      	b.n	800a886 <HAL_UART_IRQHandler+0x642>
      return;
 800a87c:	bf00      	nop
 800a87e:	e002      	b.n	800a886 <HAL_UART_IRQHandler+0x642>
      return;
 800a880:	bf00      	nop
 800a882:	e000      	b.n	800a886 <HAL_UART_IRQHandler+0x642>
    return;
 800a884:	bf00      	nop
  }
}
 800a886:	37e8      	adds	r7, #232	; 0xe8
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b083      	sub	sp, #12
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a894:	bf00      	nop
 800a896:	370c      	adds	r7, #12
 800a898:	46bd      	mov	sp, r7
 800a89a:	bc80      	pop	{r7}
 800a89c:	4770      	bx	lr

0800a89e <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a89e:	b480      	push	{r7}
 800a8a0:	b083      	sub	sp, #12
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a8a6:	bf00      	nop
 800a8a8:	370c      	adds	r7, #12
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bc80      	pop	{r7}
 800a8ae:	4770      	bx	lr

0800a8b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b083      	sub	sp, #12
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	460b      	mov	r3, r1
 800a8ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a8bc:	bf00      	nop
 800a8be:	370c      	adds	r7, #12
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bc80      	pop	{r7}
 800a8c4:	4770      	bx	lr
	...

0800a8c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a8c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a8cc:	b08c      	sub	sp, #48	; 0x30
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	689a      	ldr	r2, [r3, #8]
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	691b      	ldr	r3, [r3, #16]
 800a8e0:	431a      	orrs	r2, r3
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	695b      	ldr	r3, [r3, #20]
 800a8e6:	431a      	orrs	r2, r3
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	69db      	ldr	r3, [r3, #28]
 800a8ec:	4313      	orrs	r3, r2
 800a8ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	681a      	ldr	r2, [r3, #0]
 800a8f6:	4b94      	ldr	r3, [pc, #592]	; (800ab48 <UART_SetConfig+0x280>)
 800a8f8:	4013      	ands	r3, r2
 800a8fa:	697a      	ldr	r2, [r7, #20]
 800a8fc:	6812      	ldr	r2, [r2, #0]
 800a8fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a900:	430b      	orrs	r3, r1
 800a902:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	68da      	ldr	r2, [r3, #12]
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	430a      	orrs	r2, r1
 800a918:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	699b      	ldr	r3, [r3, #24]
 800a91e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4a89      	ldr	r2, [pc, #548]	; (800ab4c <UART_SetConfig+0x284>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d004      	beq.n	800a934 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	6a1b      	ldr	r3, [r3, #32]
 800a92e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a930:	4313      	orrs	r3, r2
 800a932:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	689b      	ldr	r3, [r3, #8]
 800a93a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800a93e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a942:	697a      	ldr	r2, [r7, #20]
 800a944:	6812      	ldr	r2, [r2, #0]
 800a946:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a948:	430b      	orrs	r3, r1
 800a94a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a952:	f023 010f 	bic.w	r1, r3, #15
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	430a      	orrs	r2, r1
 800a960:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4a7a      	ldr	r2, [pc, #488]	; (800ab50 <UART_SetConfig+0x288>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d127      	bne.n	800a9bc <UART_SetConfig+0xf4>
 800a96c:	2003      	movs	r0, #3
 800a96e:	f7ff fa0a 	bl	8009d86 <LL_RCC_GetUSARTClockSource>
 800a972:	4603      	mov	r3, r0
 800a974:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800a978:	2b03      	cmp	r3, #3
 800a97a:	d81b      	bhi.n	800a9b4 <UART_SetConfig+0xec>
 800a97c:	a201      	add	r2, pc, #4	; (adr r2, 800a984 <UART_SetConfig+0xbc>)
 800a97e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a982:	bf00      	nop
 800a984:	0800a995 	.word	0x0800a995
 800a988:	0800a9a5 	.word	0x0800a9a5
 800a98c:	0800a99d 	.word	0x0800a99d
 800a990:	0800a9ad 	.word	0x0800a9ad
 800a994:	2301      	movs	r3, #1
 800a996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a99a:	e080      	b.n	800aa9e <UART_SetConfig+0x1d6>
 800a99c:	2302      	movs	r3, #2
 800a99e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9a2:	e07c      	b.n	800aa9e <UART_SetConfig+0x1d6>
 800a9a4:	2304      	movs	r3, #4
 800a9a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9aa:	e078      	b.n	800aa9e <UART_SetConfig+0x1d6>
 800a9ac:	2308      	movs	r3, #8
 800a9ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9b2:	e074      	b.n	800aa9e <UART_SetConfig+0x1d6>
 800a9b4:	2310      	movs	r3, #16
 800a9b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9ba:	e070      	b.n	800aa9e <UART_SetConfig+0x1d6>
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4a64      	ldr	r2, [pc, #400]	; (800ab54 <UART_SetConfig+0x28c>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d138      	bne.n	800aa38 <UART_SetConfig+0x170>
 800a9c6:	200c      	movs	r0, #12
 800a9c8:	f7ff f9dd 	bl	8009d86 <LL_RCC_GetUSARTClockSource>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800a9d2:	2b0c      	cmp	r3, #12
 800a9d4:	d82c      	bhi.n	800aa30 <UART_SetConfig+0x168>
 800a9d6:	a201      	add	r2, pc, #4	; (adr r2, 800a9dc <UART_SetConfig+0x114>)
 800a9d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9dc:	0800aa11 	.word	0x0800aa11
 800a9e0:	0800aa31 	.word	0x0800aa31
 800a9e4:	0800aa31 	.word	0x0800aa31
 800a9e8:	0800aa31 	.word	0x0800aa31
 800a9ec:	0800aa21 	.word	0x0800aa21
 800a9f0:	0800aa31 	.word	0x0800aa31
 800a9f4:	0800aa31 	.word	0x0800aa31
 800a9f8:	0800aa31 	.word	0x0800aa31
 800a9fc:	0800aa19 	.word	0x0800aa19
 800aa00:	0800aa31 	.word	0x0800aa31
 800aa04:	0800aa31 	.word	0x0800aa31
 800aa08:	0800aa31 	.word	0x0800aa31
 800aa0c:	0800aa29 	.word	0x0800aa29
 800aa10:	2300      	movs	r3, #0
 800aa12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa16:	e042      	b.n	800aa9e <UART_SetConfig+0x1d6>
 800aa18:	2302      	movs	r3, #2
 800aa1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa1e:	e03e      	b.n	800aa9e <UART_SetConfig+0x1d6>
 800aa20:	2304      	movs	r3, #4
 800aa22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa26:	e03a      	b.n	800aa9e <UART_SetConfig+0x1d6>
 800aa28:	2308      	movs	r3, #8
 800aa2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa2e:	e036      	b.n	800aa9e <UART_SetConfig+0x1d6>
 800aa30:	2310      	movs	r3, #16
 800aa32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa36:	e032      	b.n	800aa9e <UART_SetConfig+0x1d6>
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4a43      	ldr	r2, [pc, #268]	; (800ab4c <UART_SetConfig+0x284>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d12a      	bne.n	800aa98 <UART_SetConfig+0x1d0>
 800aa42:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800aa46:	f7ff f9b0 	bl	8009daa <LL_RCC_GetLPUARTClockSource>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aa50:	d01a      	beq.n	800aa88 <UART_SetConfig+0x1c0>
 800aa52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aa56:	d81b      	bhi.n	800aa90 <UART_SetConfig+0x1c8>
 800aa58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa5c:	d00c      	beq.n	800aa78 <UART_SetConfig+0x1b0>
 800aa5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa62:	d815      	bhi.n	800aa90 <UART_SetConfig+0x1c8>
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d003      	beq.n	800aa70 <UART_SetConfig+0x1a8>
 800aa68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa6c:	d008      	beq.n	800aa80 <UART_SetConfig+0x1b8>
 800aa6e:	e00f      	b.n	800aa90 <UART_SetConfig+0x1c8>
 800aa70:	2300      	movs	r3, #0
 800aa72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa76:	e012      	b.n	800aa9e <UART_SetConfig+0x1d6>
 800aa78:	2302      	movs	r3, #2
 800aa7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa7e:	e00e      	b.n	800aa9e <UART_SetConfig+0x1d6>
 800aa80:	2304      	movs	r3, #4
 800aa82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa86:	e00a      	b.n	800aa9e <UART_SetConfig+0x1d6>
 800aa88:	2308      	movs	r3, #8
 800aa8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa8e:	e006      	b.n	800aa9e <UART_SetConfig+0x1d6>
 800aa90:	2310      	movs	r3, #16
 800aa92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa96:	e002      	b.n	800aa9e <UART_SetConfig+0x1d6>
 800aa98:	2310      	movs	r3, #16
 800aa9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	4a2a      	ldr	r2, [pc, #168]	; (800ab4c <UART_SetConfig+0x284>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	f040 80a4 	bne.w	800abf2 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aaaa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aaae:	2b08      	cmp	r3, #8
 800aab0:	d823      	bhi.n	800aafa <UART_SetConfig+0x232>
 800aab2:	a201      	add	r2, pc, #4	; (adr r2, 800aab8 <UART_SetConfig+0x1f0>)
 800aab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aab8:	0800aadd 	.word	0x0800aadd
 800aabc:	0800aafb 	.word	0x0800aafb
 800aac0:	0800aae5 	.word	0x0800aae5
 800aac4:	0800aafb 	.word	0x0800aafb
 800aac8:	0800aaeb 	.word	0x0800aaeb
 800aacc:	0800aafb 	.word	0x0800aafb
 800aad0:	0800aafb 	.word	0x0800aafb
 800aad4:	0800aafb 	.word	0x0800aafb
 800aad8:	0800aaf3 	.word	0x0800aaf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aadc:	f7fc ff7a 	bl	80079d4 <HAL_RCC_GetPCLK1Freq>
 800aae0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aae2:	e010      	b.n	800ab06 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aae4:	4b1c      	ldr	r3, [pc, #112]	; (800ab58 <UART_SetConfig+0x290>)
 800aae6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800aae8:	e00d      	b.n	800ab06 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aaea:	f7fc febf 	bl	800786c <HAL_RCC_GetSysClockFreq>
 800aaee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aaf0:	e009      	b.n	800ab06 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aaf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aaf6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800aaf8:	e005      	b.n	800ab06 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800aafa:	2300      	movs	r3, #0
 800aafc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800aafe:	2301      	movs	r3, #1
 800ab00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ab04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ab06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	f000 8137 	beq.w	800ad7c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab12:	4a12      	ldr	r2, [pc, #72]	; (800ab5c <UART_SetConfig+0x294>)
 800ab14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab18:	461a      	mov	r2, r3
 800ab1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab1c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab20:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	685a      	ldr	r2, [r3, #4]
 800ab26:	4613      	mov	r3, r2
 800ab28:	005b      	lsls	r3, r3, #1
 800ab2a:	4413      	add	r3, r2
 800ab2c:	69ba      	ldr	r2, [r7, #24]
 800ab2e:	429a      	cmp	r2, r3
 800ab30:	d305      	bcc.n	800ab3e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	685b      	ldr	r3, [r3, #4]
 800ab36:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ab38:	69ba      	ldr	r2, [r7, #24]
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d910      	bls.n	800ab60 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800ab3e:	2301      	movs	r3, #1
 800ab40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ab44:	e11a      	b.n	800ad7c <UART_SetConfig+0x4b4>
 800ab46:	bf00      	nop
 800ab48:	cfff69f3 	.word	0xcfff69f3
 800ab4c:	40008000 	.word	0x40008000
 800ab50:	40013800 	.word	0x40013800
 800ab54:	40004400 	.word	0x40004400
 800ab58:	00f42400 	.word	0x00f42400
 800ab5c:	08012f68 	.word	0x08012f68
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab62:	2200      	movs	r2, #0
 800ab64:	60bb      	str	r3, [r7, #8]
 800ab66:	60fa      	str	r2, [r7, #12]
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab6c:	4a8e      	ldr	r2, [pc, #568]	; (800ada8 <UART_SetConfig+0x4e0>)
 800ab6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab72:	b29b      	uxth	r3, r3
 800ab74:	2200      	movs	r2, #0
 800ab76:	603b      	str	r3, [r7, #0]
 800ab78:	607a      	str	r2, [r7, #4]
 800ab7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ab82:	f7f6 f90f 	bl	8000da4 <__aeabi_uldivmod>
 800ab86:	4602      	mov	r2, r0
 800ab88:	460b      	mov	r3, r1
 800ab8a:	4610      	mov	r0, r2
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	f04f 0200 	mov.w	r2, #0
 800ab92:	f04f 0300 	mov.w	r3, #0
 800ab96:	020b      	lsls	r3, r1, #8
 800ab98:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ab9c:	0202      	lsls	r2, r0, #8
 800ab9e:	6979      	ldr	r1, [r7, #20]
 800aba0:	6849      	ldr	r1, [r1, #4]
 800aba2:	0849      	lsrs	r1, r1, #1
 800aba4:	2000      	movs	r0, #0
 800aba6:	460c      	mov	r4, r1
 800aba8:	4605      	mov	r5, r0
 800abaa:	eb12 0804 	adds.w	r8, r2, r4
 800abae:	eb43 0905 	adc.w	r9, r3, r5
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	2200      	movs	r2, #0
 800abb8:	469a      	mov	sl, r3
 800abba:	4693      	mov	fp, r2
 800abbc:	4652      	mov	r2, sl
 800abbe:	465b      	mov	r3, fp
 800abc0:	4640      	mov	r0, r8
 800abc2:	4649      	mov	r1, r9
 800abc4:	f7f6 f8ee 	bl	8000da4 <__aeabi_uldivmod>
 800abc8:	4602      	mov	r2, r0
 800abca:	460b      	mov	r3, r1
 800abcc:	4613      	mov	r3, r2
 800abce:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800abd0:	6a3b      	ldr	r3, [r7, #32]
 800abd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800abd6:	d308      	bcc.n	800abea <UART_SetConfig+0x322>
 800abd8:	6a3b      	ldr	r3, [r7, #32]
 800abda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800abde:	d204      	bcs.n	800abea <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	6a3a      	ldr	r2, [r7, #32]
 800abe6:	60da      	str	r2, [r3, #12]
 800abe8:	e0c8      	b.n	800ad7c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800abea:	2301      	movs	r3, #1
 800abec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800abf0:	e0c4      	b.n	800ad7c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	69db      	ldr	r3, [r3, #28]
 800abf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abfa:	d167      	bne.n	800accc <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800abfc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ac00:	2b08      	cmp	r3, #8
 800ac02:	d828      	bhi.n	800ac56 <UART_SetConfig+0x38e>
 800ac04:	a201      	add	r2, pc, #4	; (adr r2, 800ac0c <UART_SetConfig+0x344>)
 800ac06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac0a:	bf00      	nop
 800ac0c:	0800ac31 	.word	0x0800ac31
 800ac10:	0800ac39 	.word	0x0800ac39
 800ac14:	0800ac41 	.word	0x0800ac41
 800ac18:	0800ac57 	.word	0x0800ac57
 800ac1c:	0800ac47 	.word	0x0800ac47
 800ac20:	0800ac57 	.word	0x0800ac57
 800ac24:	0800ac57 	.word	0x0800ac57
 800ac28:	0800ac57 	.word	0x0800ac57
 800ac2c:	0800ac4f 	.word	0x0800ac4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac30:	f7fc fed0 	bl	80079d4 <HAL_RCC_GetPCLK1Freq>
 800ac34:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ac36:	e014      	b.n	800ac62 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac38:	f7fc fede 	bl	80079f8 <HAL_RCC_GetPCLK2Freq>
 800ac3c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ac3e:	e010      	b.n	800ac62 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ac40:	4b5a      	ldr	r3, [pc, #360]	; (800adac <UART_SetConfig+0x4e4>)
 800ac42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ac44:	e00d      	b.n	800ac62 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac46:	f7fc fe11 	bl	800786c <HAL_RCC_GetSysClockFreq>
 800ac4a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ac4c:	e009      	b.n	800ac62 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ac54:	e005      	b.n	800ac62 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800ac56:	2300      	movs	r3, #0
 800ac58:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ac60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ac62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	f000 8089 	beq.w	800ad7c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac6e:	4a4e      	ldr	r2, [pc, #312]	; (800ada8 <UART_SetConfig+0x4e0>)
 800ac70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac74:	461a      	mov	r2, r3
 800ac76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac78:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac7c:	005a      	lsls	r2, r3, #1
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	685b      	ldr	r3, [r3, #4]
 800ac82:	085b      	lsrs	r3, r3, #1
 800ac84:	441a      	add	r2, r3
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	685b      	ldr	r3, [r3, #4]
 800ac8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac8e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac90:	6a3b      	ldr	r3, [r7, #32]
 800ac92:	2b0f      	cmp	r3, #15
 800ac94:	d916      	bls.n	800acc4 <UART_SetConfig+0x3fc>
 800ac96:	6a3b      	ldr	r3, [r7, #32]
 800ac98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac9c:	d212      	bcs.n	800acc4 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ac9e:	6a3b      	ldr	r3, [r7, #32]
 800aca0:	b29b      	uxth	r3, r3
 800aca2:	f023 030f 	bic.w	r3, r3, #15
 800aca6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aca8:	6a3b      	ldr	r3, [r7, #32]
 800acaa:	085b      	lsrs	r3, r3, #1
 800acac:	b29b      	uxth	r3, r3
 800acae:	f003 0307 	and.w	r3, r3, #7
 800acb2:	b29a      	uxth	r2, r3
 800acb4:	8bfb      	ldrh	r3, [r7, #30]
 800acb6:	4313      	orrs	r3, r2
 800acb8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	8bfa      	ldrh	r2, [r7, #30]
 800acc0:	60da      	str	r2, [r3, #12]
 800acc2:	e05b      	b.n	800ad7c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800acc4:	2301      	movs	r3, #1
 800acc6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800acca:	e057      	b.n	800ad7c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800accc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800acd0:	2b08      	cmp	r3, #8
 800acd2:	d828      	bhi.n	800ad26 <UART_SetConfig+0x45e>
 800acd4:	a201      	add	r2, pc, #4	; (adr r2, 800acdc <UART_SetConfig+0x414>)
 800acd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acda:	bf00      	nop
 800acdc:	0800ad01 	.word	0x0800ad01
 800ace0:	0800ad09 	.word	0x0800ad09
 800ace4:	0800ad11 	.word	0x0800ad11
 800ace8:	0800ad27 	.word	0x0800ad27
 800acec:	0800ad17 	.word	0x0800ad17
 800acf0:	0800ad27 	.word	0x0800ad27
 800acf4:	0800ad27 	.word	0x0800ad27
 800acf8:	0800ad27 	.word	0x0800ad27
 800acfc:	0800ad1f 	.word	0x0800ad1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad00:	f7fc fe68 	bl	80079d4 <HAL_RCC_GetPCLK1Freq>
 800ad04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ad06:	e014      	b.n	800ad32 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad08:	f7fc fe76 	bl	80079f8 <HAL_RCC_GetPCLK2Freq>
 800ad0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ad0e:	e010      	b.n	800ad32 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ad10:	4b26      	ldr	r3, [pc, #152]	; (800adac <UART_SetConfig+0x4e4>)
 800ad12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ad14:	e00d      	b.n	800ad32 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad16:	f7fc fda9 	bl	800786c <HAL_RCC_GetSysClockFreq>
 800ad1a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ad1c:	e009      	b.n	800ad32 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ad24:	e005      	b.n	800ad32 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800ad26:	2300      	movs	r3, #0
 800ad28:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ad30:	bf00      	nop
    }

    if (pclk != 0U)
 800ad32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d021      	beq.n	800ad7c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad3c:	4a1a      	ldr	r2, [pc, #104]	; (800ada8 <UART_SetConfig+0x4e0>)
 800ad3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad42:	461a      	mov	r2, r3
 800ad44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad46:	fbb3 f2f2 	udiv	r2, r3, r2
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	685b      	ldr	r3, [r3, #4]
 800ad4e:	085b      	lsrs	r3, r3, #1
 800ad50:	441a      	add	r2, r3
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	685b      	ldr	r3, [r3, #4]
 800ad56:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad5c:	6a3b      	ldr	r3, [r7, #32]
 800ad5e:	2b0f      	cmp	r3, #15
 800ad60:	d909      	bls.n	800ad76 <UART_SetConfig+0x4ae>
 800ad62:	6a3b      	ldr	r3, [r7, #32]
 800ad64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad68:	d205      	bcs.n	800ad76 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ad6a:	6a3b      	ldr	r3, [r7, #32]
 800ad6c:	b29a      	uxth	r2, r3
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	60da      	str	r2, [r3, #12]
 800ad74:	e002      	b.n	800ad7c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800ad76:	2301      	movs	r3, #1
 800ad78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	2201      	movs	r2, #1
 800ad80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	2201      	movs	r2, #1
 800ad88:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	2200      	movs	r2, #0
 800ad96:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ad98:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3730      	adds	r7, #48	; 0x30
 800ada0:	46bd      	mov	sp, r7
 800ada2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ada6:	bf00      	nop
 800ada8:	08012f68 	.word	0x08012f68
 800adac:	00f42400 	.word	0x00f42400

0800adb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b083      	sub	sp, #12
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adbc:	f003 0301 	and.w	r3, r3, #1
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d00a      	beq.n	800adda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	685b      	ldr	r3, [r3, #4]
 800adca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	430a      	orrs	r2, r1
 800add8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adde:	f003 0302 	and.w	r3, r3, #2
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d00a      	beq.n	800adfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	685b      	ldr	r3, [r3, #4]
 800adec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	430a      	orrs	r2, r1
 800adfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae00:	f003 0304 	and.w	r3, r3, #4
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d00a      	beq.n	800ae1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	430a      	orrs	r2, r1
 800ae1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae22:	f003 0308 	and.w	r3, r3, #8
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d00a      	beq.n	800ae40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	685b      	ldr	r3, [r3, #4]
 800ae30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	430a      	orrs	r2, r1
 800ae3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae44:	f003 0310 	and.w	r3, r3, #16
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d00a      	beq.n	800ae62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	689b      	ldr	r3, [r3, #8]
 800ae52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	430a      	orrs	r2, r1
 800ae60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae66:	f003 0320 	and.w	r3, r3, #32
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d00a      	beq.n	800ae84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	689b      	ldr	r3, [r3, #8]
 800ae74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	430a      	orrs	r2, r1
 800ae82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d01a      	beq.n	800aec6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	685b      	ldr	r3, [r3, #4]
 800ae96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	430a      	orrs	r2, r1
 800aea4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aeae:	d10a      	bne.n	800aec6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	430a      	orrs	r2, r1
 800aec4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d00a      	beq.n	800aee8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	430a      	orrs	r2, r1
 800aee6:	605a      	str	r2, [r3, #4]
  }
}
 800aee8:	bf00      	nop
 800aeea:	370c      	adds	r7, #12
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bc80      	pop	{r7}
 800aef0:	4770      	bx	lr

0800aef2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aef2:	b580      	push	{r7, lr}
 800aef4:	b086      	sub	sp, #24
 800aef6:	af02      	add	r7, sp, #8
 800aef8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2200      	movs	r2, #0
 800aefe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800af02:	f7f9 fdeb 	bl	8004adc <HAL_GetTick>
 800af06:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f003 0308 	and.w	r3, r3, #8
 800af12:	2b08      	cmp	r3, #8
 800af14:	d10e      	bne.n	800af34 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800af1a:	9300      	str	r3, [sp, #0]
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	2200      	movs	r2, #0
 800af20:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f000 f832 	bl	800af8e <UART_WaitOnFlagUntilTimeout>
 800af2a:	4603      	mov	r3, r0
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d001      	beq.n	800af34 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af30:	2303      	movs	r3, #3
 800af32:	e028      	b.n	800af86 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f003 0304 	and.w	r3, r3, #4
 800af3e:	2b04      	cmp	r3, #4
 800af40:	d10e      	bne.n	800af60 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af42:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800af46:	9300      	str	r3, [sp, #0]
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	2200      	movs	r2, #0
 800af4c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f000 f81c 	bl	800af8e <UART_WaitOnFlagUntilTimeout>
 800af56:	4603      	mov	r3, r0
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d001      	beq.n	800af60 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af5c:	2303      	movs	r3, #3
 800af5e:	e012      	b.n	800af86 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2220      	movs	r2, #32
 800af64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2220      	movs	r2, #32
 800af6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2200      	movs	r2, #0
 800af74:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2200      	movs	r2, #0
 800af7a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2200      	movs	r2, #0
 800af80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800af84:	2300      	movs	r3, #0
}
 800af86:	4618      	mov	r0, r3
 800af88:	3710      	adds	r7, #16
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}

0800af8e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800af8e:	b580      	push	{r7, lr}
 800af90:	b09c      	sub	sp, #112	; 0x70
 800af92:	af00      	add	r7, sp, #0
 800af94:	60f8      	str	r0, [r7, #12]
 800af96:	60b9      	str	r1, [r7, #8]
 800af98:	603b      	str	r3, [r7, #0]
 800af9a:	4613      	mov	r3, r2
 800af9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af9e:	e0a9      	b.n	800b0f4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800afa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afa6:	f000 80a5 	beq.w	800b0f4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afaa:	f7f9 fd97 	bl	8004adc <HAL_GetTick>
 800afae:	4602      	mov	r2, r0
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	1ad3      	subs	r3, r2, r3
 800afb4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800afb6:	429a      	cmp	r2, r3
 800afb8:	d302      	bcc.n	800afc0 <UART_WaitOnFlagUntilTimeout+0x32>
 800afba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d140      	bne.n	800b042 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afc8:	e853 3f00 	ldrex	r3, [r3]
 800afcc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800afce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afd0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800afd4:	667b      	str	r3, [r7, #100]	; 0x64
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	461a      	mov	r2, r3
 800afdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800afde:	65fb      	str	r3, [r7, #92]	; 0x5c
 800afe0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afe2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800afe4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800afe6:	e841 2300 	strex	r3, r2, [r1]
 800afea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800afec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d1e6      	bne.n	800afc0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	3308      	adds	r3, #8
 800aff8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800affa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800affc:	e853 3f00 	ldrex	r3, [r3]
 800b000:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b004:	f023 0301 	bic.w	r3, r3, #1
 800b008:	663b      	str	r3, [r7, #96]	; 0x60
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	3308      	adds	r3, #8
 800b010:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b012:	64ba      	str	r2, [r7, #72]	; 0x48
 800b014:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b016:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b018:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b01a:	e841 2300 	strex	r3, r2, [r1]
 800b01e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b020:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b022:	2b00      	cmp	r3, #0
 800b024:	d1e5      	bne.n	800aff2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	2220      	movs	r2, #32
 800b02a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2220      	movs	r2, #32
 800b032:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	2200      	movs	r2, #0
 800b03a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 800b03e:	2303      	movs	r3, #3
 800b040:	e069      	b.n	800b116 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f003 0304 	and.w	r3, r3, #4
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d051      	beq.n	800b0f4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	69db      	ldr	r3, [r3, #28]
 800b056:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b05a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b05e:	d149      	bne.n	800b0f4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b068:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b072:	e853 3f00 	ldrex	r3, [r3]
 800b076:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b07e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	461a      	mov	r2, r3
 800b086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b088:	637b      	str	r3, [r7, #52]	; 0x34
 800b08a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b08c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b08e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b090:	e841 2300 	strex	r3, r2, [r1]
 800b094:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d1e6      	bne.n	800b06a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	3308      	adds	r3, #8
 800b0a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	e853 3f00 	ldrex	r3, [r3]
 800b0aa:	613b      	str	r3, [r7, #16]
   return(result);
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	f023 0301 	bic.w	r3, r3, #1
 800b0b2:	66bb      	str	r3, [r7, #104]	; 0x68
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	3308      	adds	r3, #8
 800b0ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b0bc:	623a      	str	r2, [r7, #32]
 800b0be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0c0:	69f9      	ldr	r1, [r7, #28]
 800b0c2:	6a3a      	ldr	r2, [r7, #32]
 800b0c4:	e841 2300 	strex	r3, r2, [r1]
 800b0c8:	61bb      	str	r3, [r7, #24]
   return(result);
 800b0ca:	69bb      	ldr	r3, [r7, #24]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d1e5      	bne.n	800b09c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	2220      	movs	r2, #32
 800b0d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	2220      	movs	r2, #32
 800b0dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	2220      	movs	r2, #32
 800b0e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b0f0:	2303      	movs	r3, #3
 800b0f2:	e010      	b.n	800b116 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	69da      	ldr	r2, [r3, #28]
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	4013      	ands	r3, r2
 800b0fe:	68ba      	ldr	r2, [r7, #8]
 800b100:	429a      	cmp	r2, r3
 800b102:	bf0c      	ite	eq
 800b104:	2301      	moveq	r3, #1
 800b106:	2300      	movne	r3, #0
 800b108:	b2db      	uxtb	r3, r3
 800b10a:	461a      	mov	r2, r3
 800b10c:	79fb      	ldrb	r3, [r7, #7]
 800b10e:	429a      	cmp	r2, r3
 800b110:	f43f af46 	beq.w	800afa0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b114:	2300      	movs	r3, #0
}
 800b116:	4618      	mov	r0, r3
 800b118:	3770      	adds	r7, #112	; 0x70
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
	...

0800b120 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b120:	b480      	push	{r7}
 800b122:	b0a3      	sub	sp, #140	; 0x8c
 800b124:	af00      	add	r7, sp, #0
 800b126:	60f8      	str	r0, [r7, #12]
 800b128:	60b9      	str	r1, [r7, #8]
 800b12a:	4613      	mov	r3, r2
 800b12c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	68ba      	ldr	r2, [r7, #8]
 800b132:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	88fa      	ldrh	r2, [r7, #6]
 800b138:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	88fa      	ldrh	r2, [r7, #6]
 800b140:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	2200      	movs	r2, #0
 800b148:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	689b      	ldr	r3, [r3, #8]
 800b14e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b152:	d10e      	bne.n	800b172 <UART_Start_Receive_IT+0x52>
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	691b      	ldr	r3, [r3, #16]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d105      	bne.n	800b168 <UART_Start_Receive_IT+0x48>
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b162:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b166:	e02d      	b.n	800b1c4 <UART_Start_Receive_IT+0xa4>
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	22ff      	movs	r2, #255	; 0xff
 800b16c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b170:	e028      	b.n	800b1c4 <UART_Start_Receive_IT+0xa4>
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	689b      	ldr	r3, [r3, #8]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d10d      	bne.n	800b196 <UART_Start_Receive_IT+0x76>
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	691b      	ldr	r3, [r3, #16]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d104      	bne.n	800b18c <UART_Start_Receive_IT+0x6c>
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	22ff      	movs	r2, #255	; 0xff
 800b186:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b18a:	e01b      	b.n	800b1c4 <UART_Start_Receive_IT+0xa4>
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	227f      	movs	r2, #127	; 0x7f
 800b190:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b194:	e016      	b.n	800b1c4 <UART_Start_Receive_IT+0xa4>
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	689b      	ldr	r3, [r3, #8]
 800b19a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b19e:	d10d      	bne.n	800b1bc <UART_Start_Receive_IT+0x9c>
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	691b      	ldr	r3, [r3, #16]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d104      	bne.n	800b1b2 <UART_Start_Receive_IT+0x92>
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	227f      	movs	r2, #127	; 0x7f
 800b1ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b1b0:	e008      	b.n	800b1c4 <UART_Start_Receive_IT+0xa4>
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	223f      	movs	r2, #63	; 0x3f
 800b1b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b1ba:	e003      	b.n	800b1c4 <UART_Start_Receive_IT+0xa4>
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2222      	movs	r2, #34	; 0x22
 800b1d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	3308      	adds	r3, #8
 800b1da:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1de:	e853 3f00 	ldrex	r3, [r3]
 800b1e2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b1e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b1e6:	f043 0301 	orr.w	r3, r3, #1
 800b1ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	3308      	adds	r3, #8
 800b1f4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b1f8:	673a      	str	r2, [r7, #112]	; 0x70
 800b1fa:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1fc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800b1fe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b200:	e841 2300 	strex	r3, r2, [r1]
 800b204:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800b206:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d1e3      	bne.n	800b1d4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b210:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b214:	d14f      	bne.n	800b2b6 <UART_Start_Receive_IT+0x196>
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b21c:	88fa      	ldrh	r2, [r7, #6]
 800b21e:	429a      	cmp	r2, r3
 800b220:	d349      	bcc.n	800b2b6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	689b      	ldr	r3, [r3, #8]
 800b226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b22a:	d107      	bne.n	800b23c <UART_Start_Receive_IT+0x11c>
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	691b      	ldr	r3, [r3, #16]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d103      	bne.n	800b23c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	4a46      	ldr	r2, [pc, #280]	; (800b350 <UART_Start_Receive_IT+0x230>)
 800b238:	675a      	str	r2, [r3, #116]	; 0x74
 800b23a:	e002      	b.n	800b242 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	4a45      	ldr	r2, [pc, #276]	; (800b354 <UART_Start_Receive_IT+0x234>)
 800b240:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	691b      	ldr	r3, [r3, #16]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d01a      	beq.n	800b280 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b252:	e853 3f00 	ldrex	r3, [r3]
 800b256:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b25a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b25e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	461a      	mov	r2, r3
 800b268:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b26c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b26e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b270:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b272:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b274:	e841 2300 	strex	r3, r2, [r1]
 800b278:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b27a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d1e4      	bne.n	800b24a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	3308      	adds	r3, #8
 800b286:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b28a:	e853 3f00 	ldrex	r3, [r3]
 800b28e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b296:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	3308      	adds	r3, #8
 800b29e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b2a0:	64ba      	str	r2, [r7, #72]	; 0x48
 800b2a2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2a4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b2a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2a8:	e841 2300 	strex	r3, r2, [r1]
 800b2ac:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b2ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d1e5      	bne.n	800b280 <UART_Start_Receive_IT+0x160>
 800b2b4:	e046      	b.n	800b344 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	689b      	ldr	r3, [r3, #8]
 800b2ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2be:	d107      	bne.n	800b2d0 <UART_Start_Receive_IT+0x1b0>
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	691b      	ldr	r3, [r3, #16]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d103      	bne.n	800b2d0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	4a23      	ldr	r2, [pc, #140]	; (800b358 <UART_Start_Receive_IT+0x238>)
 800b2cc:	675a      	str	r2, [r3, #116]	; 0x74
 800b2ce:	e002      	b.n	800b2d6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	4a22      	ldr	r2, [pc, #136]	; (800b35c <UART_Start_Receive_IT+0x23c>)
 800b2d4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	691b      	ldr	r3, [r3, #16]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d019      	beq.n	800b312 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2e6:	e853 3f00 	ldrex	r3, [r3]
 800b2ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ee:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800b2f2:	677b      	str	r3, [r7, #116]	; 0x74
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	461a      	mov	r2, r3
 800b2fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b2fc:	637b      	str	r3, [r7, #52]	; 0x34
 800b2fe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b300:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b302:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b304:	e841 2300 	strex	r3, r2, [r1]
 800b308:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d1e6      	bne.n	800b2de <UART_Start_Receive_IT+0x1be>
 800b310:	e018      	b.n	800b344 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	e853 3f00 	ldrex	r3, [r3]
 800b31e:	613b      	str	r3, [r7, #16]
   return(result);
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	f043 0320 	orr.w	r3, r3, #32
 800b326:	67bb      	str	r3, [r7, #120]	; 0x78
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	461a      	mov	r2, r3
 800b32e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b330:	623b      	str	r3, [r7, #32]
 800b332:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b334:	69f9      	ldr	r1, [r7, #28]
 800b336:	6a3a      	ldr	r2, [r7, #32]
 800b338:	e841 2300 	strex	r3, r2, [r1]
 800b33c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b33e:	69bb      	ldr	r3, [r7, #24]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d1e6      	bne.n	800b312 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800b344:	2300      	movs	r3, #0
}
 800b346:	4618      	mov	r0, r3
 800b348:	378c      	adds	r7, #140	; 0x8c
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bc80      	pop	{r7}
 800b34e:	4770      	bx	lr
 800b350:	0800bb7d 	.word	0x0800bb7d
 800b354:	0800b81d 	.word	0x0800b81d
 800b358:	0800b665 	.word	0x0800b665
 800b35c:	0800b4ad 	.word	0x0800b4ad

0800b360 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b360:	b480      	push	{r7}
 800b362:	b095      	sub	sp, #84	; 0x54
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b36e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b370:	e853 3f00 	ldrex	r3, [r3]
 800b374:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b378:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b37c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	461a      	mov	r2, r3
 800b384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b386:	643b      	str	r3, [r7, #64]	; 0x40
 800b388:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b38a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b38c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b38e:	e841 2300 	strex	r3, r2, [r1]
 800b392:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b396:	2b00      	cmp	r3, #0
 800b398:	d1e6      	bne.n	800b368 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	3308      	adds	r3, #8
 800b3a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3a2:	6a3b      	ldr	r3, [r7, #32]
 800b3a4:	e853 3f00 	ldrex	r3, [r3]
 800b3a8:	61fb      	str	r3, [r7, #28]
   return(result);
 800b3aa:	69fb      	ldr	r3, [r7, #28]
 800b3ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b3b0:	f023 0301 	bic.w	r3, r3, #1
 800b3b4:	64bb      	str	r3, [r7, #72]	; 0x48
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	3308      	adds	r3, #8
 800b3bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b3be:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b3c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b3c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3c6:	e841 2300 	strex	r3, r2, [r1]
 800b3ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d1e3      	bne.n	800b39a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3d6:	2b01      	cmp	r3, #1
 800b3d8:	d118      	bne.n	800b40c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	e853 3f00 	ldrex	r3, [r3]
 800b3e6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	f023 0310 	bic.w	r3, r3, #16
 800b3ee:	647b      	str	r3, [r7, #68]	; 0x44
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	461a      	mov	r2, r3
 800b3f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3f8:	61bb      	str	r3, [r7, #24]
 800b3fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3fc:	6979      	ldr	r1, [r7, #20]
 800b3fe:	69ba      	ldr	r2, [r7, #24]
 800b400:	e841 2300 	strex	r3, r2, [r1]
 800b404:	613b      	str	r3, [r7, #16]
   return(result);
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d1e6      	bne.n	800b3da <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2220      	movs	r2, #32
 800b410:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2200      	movs	r2, #0
 800b418:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2200      	movs	r2, #0
 800b41e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b420:	bf00      	nop
 800b422:	3754      	adds	r7, #84	; 0x54
 800b424:	46bd      	mov	sp, r7
 800b426:	bc80      	pop	{r7}
 800b428:	4770      	bx	lr

0800b42a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b42a:	b580      	push	{r7, lr}
 800b42c:	b084      	sub	sp, #16
 800b42e:	af00      	add	r7, sp, #0
 800b430:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b436:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	2200      	movs	r2, #0
 800b43c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	2200      	movs	r2, #0
 800b444:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b448:	68f8      	ldr	r0, [r7, #12]
 800b44a:	f7ff fa28 	bl	800a89e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b44e:	bf00      	nop
 800b450:	3710      	adds	r7, #16
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}

0800b456 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b456:	b580      	push	{r7, lr}
 800b458:	b088      	sub	sp, #32
 800b45a:	af00      	add	r7, sp, #0
 800b45c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	e853 3f00 	ldrex	r3, [r3]
 800b46a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b472:	61fb      	str	r3, [r7, #28]
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	461a      	mov	r2, r3
 800b47a:	69fb      	ldr	r3, [r7, #28]
 800b47c:	61bb      	str	r3, [r7, #24]
 800b47e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b480:	6979      	ldr	r1, [r7, #20]
 800b482:	69ba      	ldr	r2, [r7, #24]
 800b484:	e841 2300 	strex	r3, r2, [r1]
 800b488:	613b      	str	r3, [r7, #16]
   return(result);
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d1e6      	bne.n	800b45e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2220      	movs	r2, #32
 800b494:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2200      	movs	r2, #0
 800b49c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f7ff f9f4 	bl	800a88c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b4a4:	bf00      	nop
 800b4a6:	3720      	adds	r7, #32
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}

0800b4ac <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b09c      	sub	sp, #112	; 0x70
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b4ba:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b4c4:	2b22      	cmp	r3, #34	; 0x22
 800b4c6:	f040 80be 	bne.w	800b646 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4d0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b4d4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b4d8:	b2d9      	uxtb	r1, r3
 800b4da:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800b4de:	b2da      	uxtb	r2, r3
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4e4:	400a      	ands	r2, r1
 800b4e6:	b2d2      	uxtb	r2, r2
 800b4e8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4ee:	1c5a      	adds	r2, r3, #1
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b4fa:	b29b      	uxth	r3, r3
 800b4fc:	3b01      	subs	r3, #1
 800b4fe:	b29a      	uxth	r2, r3
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b50c:	b29b      	uxth	r3, r3
 800b50e:	2b00      	cmp	r3, #0
 800b510:	f040 80a1 	bne.w	800b656 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b51a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b51c:	e853 3f00 	ldrex	r3, [r3]
 800b520:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b522:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b524:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b528:	66bb      	str	r3, [r7, #104]	; 0x68
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	461a      	mov	r2, r3
 800b530:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b532:	65bb      	str	r3, [r7, #88]	; 0x58
 800b534:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b536:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b538:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b53a:	e841 2300 	strex	r3, r2, [r1]
 800b53e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b540:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b542:	2b00      	cmp	r3, #0
 800b544:	d1e6      	bne.n	800b514 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	3308      	adds	r3, #8
 800b54c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b550:	e853 3f00 	ldrex	r3, [r3]
 800b554:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b558:	f023 0301 	bic.w	r3, r3, #1
 800b55c:	667b      	str	r3, [r7, #100]	; 0x64
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	3308      	adds	r3, #8
 800b564:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b566:	647a      	str	r2, [r7, #68]	; 0x44
 800b568:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b56a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b56c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b56e:	e841 2300 	strex	r3, r2, [r1]
 800b572:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b576:	2b00      	cmp	r3, #0
 800b578:	d1e5      	bne.n	800b546 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2220      	movs	r2, #32
 800b57e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2200      	movs	r2, #0
 800b586:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2200      	movs	r2, #0
 800b58c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	4a33      	ldr	r2, [pc, #204]	; (800b660 <UART_RxISR_8BIT+0x1b4>)
 800b594:	4293      	cmp	r3, r2
 800b596:	d01f      	beq.n	800b5d8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	685b      	ldr	r3, [r3, #4]
 800b59e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d018      	beq.n	800b5d8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ae:	e853 3f00 	ldrex	r3, [r3]
 800b5b2:	623b      	str	r3, [r7, #32]
   return(result);
 800b5b4:	6a3b      	ldr	r3, [r7, #32]
 800b5b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b5ba:	663b      	str	r3, [r7, #96]	; 0x60
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b5c4:	633b      	str	r3, [r7, #48]	; 0x30
 800b5c6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b5ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5cc:	e841 2300 	strex	r3, r2, [r1]
 800b5d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d1e6      	bne.n	800b5a6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	d12e      	bne.n	800b63e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	e853 3f00 	ldrex	r3, [r3]
 800b5f2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f023 0310 	bic.w	r3, r3, #16
 800b5fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	461a      	mov	r2, r3
 800b602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b604:	61fb      	str	r3, [r7, #28]
 800b606:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b608:	69b9      	ldr	r1, [r7, #24]
 800b60a:	69fa      	ldr	r2, [r7, #28]
 800b60c:	e841 2300 	strex	r3, r2, [r1]
 800b610:	617b      	str	r3, [r7, #20]
   return(result);
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d1e6      	bne.n	800b5e6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	69db      	ldr	r3, [r3, #28]
 800b61e:	f003 0310 	and.w	r3, r3, #16
 800b622:	2b10      	cmp	r3, #16
 800b624:	d103      	bne.n	800b62e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	2210      	movs	r2, #16
 800b62c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b634:	4619      	mov	r1, r3
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f7ff f93a 	bl	800a8b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b63c:	e00b      	b.n	800b656 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f001 f9ce 	bl	800c9e0 <HAL_UART_RxCpltCallback>
}
 800b644:	e007      	b.n	800b656 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	699a      	ldr	r2, [r3, #24]
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f042 0208 	orr.w	r2, r2, #8
 800b654:	619a      	str	r2, [r3, #24]
}
 800b656:	bf00      	nop
 800b658:	3770      	adds	r7, #112	; 0x70
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}
 800b65e:	bf00      	nop
 800b660:	40008000 	.word	0x40008000

0800b664 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b09c      	sub	sp, #112	; 0x70
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b672:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b67c:	2b22      	cmp	r3, #34	; 0x22
 800b67e:	f040 80be 	bne.w	800b7fe <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b688:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b690:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800b692:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800b696:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800b69a:	4013      	ands	r3, r2
 800b69c:	b29a      	uxth	r2, r3
 800b69e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b6a0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6a6:	1c9a      	adds	r2, r3, #2
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b6b2:	b29b      	uxth	r3, r3
 800b6b4:	3b01      	subs	r3, #1
 800b6b6:	b29a      	uxth	r2, r3
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b6c4:	b29b      	uxth	r3, r3
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	f040 80a1 	bne.w	800b80e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6d4:	e853 3f00 	ldrex	r3, [r3]
 800b6d8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b6da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b6e0:	667b      	str	r3, [r7, #100]	; 0x64
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b6ea:	657b      	str	r3, [r7, #84]	; 0x54
 800b6ec:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b6f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b6f2:	e841 2300 	strex	r3, r2, [r1]
 800b6f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b6f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d1e6      	bne.n	800b6cc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	3308      	adds	r3, #8
 800b704:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b708:	e853 3f00 	ldrex	r3, [r3]
 800b70c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b710:	f023 0301 	bic.w	r3, r3, #1
 800b714:	663b      	str	r3, [r7, #96]	; 0x60
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	3308      	adds	r3, #8
 800b71c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b71e:	643a      	str	r2, [r7, #64]	; 0x40
 800b720:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b722:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b724:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b726:	e841 2300 	strex	r3, r2, [r1]
 800b72a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d1e5      	bne.n	800b6fe <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2220      	movs	r2, #32
 800b736:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2200      	movs	r2, #0
 800b73e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2200      	movs	r2, #0
 800b744:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	4a33      	ldr	r2, [pc, #204]	; (800b818 <UART_RxISR_16BIT+0x1b4>)
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d01f      	beq.n	800b790 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	685b      	ldr	r3, [r3, #4]
 800b756:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d018      	beq.n	800b790 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b764:	6a3b      	ldr	r3, [r7, #32]
 800b766:	e853 3f00 	ldrex	r3, [r3]
 800b76a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b76c:	69fb      	ldr	r3, [r7, #28]
 800b76e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b772:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	461a      	mov	r2, r3
 800b77a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b77c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b77e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b780:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b784:	e841 2300 	strex	r3, r2, [r1]
 800b788:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d1e6      	bne.n	800b75e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b794:	2b01      	cmp	r3, #1
 800b796:	d12e      	bne.n	800b7f6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2200      	movs	r2, #0
 800b79c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	e853 3f00 	ldrex	r3, [r3]
 800b7aa:	60bb      	str	r3, [r7, #8]
   return(result);
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	f023 0310 	bic.w	r3, r3, #16
 800b7b2:	65bb      	str	r3, [r7, #88]	; 0x58
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b7bc:	61bb      	str	r3, [r7, #24]
 800b7be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7c0:	6979      	ldr	r1, [r7, #20]
 800b7c2:	69ba      	ldr	r2, [r7, #24]
 800b7c4:	e841 2300 	strex	r3, r2, [r1]
 800b7c8:	613b      	str	r3, [r7, #16]
   return(result);
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d1e6      	bne.n	800b79e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	69db      	ldr	r3, [r3, #28]
 800b7d6:	f003 0310 	and.w	r3, r3, #16
 800b7da:	2b10      	cmp	r3, #16
 800b7dc:	d103      	bne.n	800b7e6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	2210      	movs	r2, #16
 800b7e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b7ec:	4619      	mov	r1, r3
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f7ff f85e 	bl	800a8b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b7f4:	e00b      	b.n	800b80e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f001 f8f2 	bl	800c9e0 <HAL_UART_RxCpltCallback>
}
 800b7fc:	e007      	b.n	800b80e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	699a      	ldr	r2, [r3, #24]
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	f042 0208 	orr.w	r2, r2, #8
 800b80c:	619a      	str	r2, [r3, #24]
}
 800b80e:	bf00      	nop
 800b810:	3770      	adds	r7, #112	; 0x70
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
 800b816:	bf00      	nop
 800b818:	40008000 	.word	0x40008000

0800b81c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b0ac      	sub	sp, #176	; 0xb0
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b82a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	69db      	ldr	r3, [r3, #28]
 800b834:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	689b      	ldr	r3, [r3, #8]
 800b848:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b852:	2b22      	cmp	r3, #34	; 0x22
 800b854:	f040 8182 	bne.w	800bb5c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b85e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b862:	e125      	b.n	800bab0 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b86a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b86e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b872:	b2d9      	uxtb	r1, r3
 800b874:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800b878:	b2da      	uxtb	r2, r3
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b87e:	400a      	ands	r2, r1
 800b880:	b2d2      	uxtb	r2, r2
 800b882:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b888:	1c5a      	adds	r2, r3, #1
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b894:	b29b      	uxth	r3, r3
 800b896:	3b01      	subs	r3, #1
 800b898:	b29a      	uxth	r2, r3
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	69db      	ldr	r3, [r3, #28]
 800b8a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b8aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b8ae:	f003 0307 	and.w	r3, r3, #7
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d053      	beq.n	800b95e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b8b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b8ba:	f003 0301 	and.w	r3, r3, #1
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d011      	beq.n	800b8e6 <UART_RxISR_8BIT_FIFOEN+0xca>
 800b8c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b8c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d00b      	beq.n	800b8e6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8dc:	f043 0201 	orr.w	r2, r3, #1
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b8e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b8ea:	f003 0302 	and.w	r3, r3, #2
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d011      	beq.n	800b916 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b8f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b8f6:	f003 0301 	and.w	r3, r3, #1
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d00b      	beq.n	800b916 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	2202      	movs	r2, #2
 800b904:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b90c:	f043 0204 	orr.w	r2, r3, #4
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b916:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b91a:	f003 0304 	and.w	r3, r3, #4
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d011      	beq.n	800b946 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b922:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b926:	f003 0301 	and.w	r3, r3, #1
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d00b      	beq.n	800b946 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	2204      	movs	r2, #4
 800b934:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b93c:	f043 0202 	orr.w	r2, r3, #2
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d006      	beq.n	800b95e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f7fe ffa4 	bl	800a89e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2200      	movs	r2, #0
 800b95a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b964:	b29b      	uxth	r3, r3
 800b966:	2b00      	cmp	r3, #0
 800b968:	f040 80a2 	bne.w	800bab0 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b972:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b974:	e853 3f00 	ldrex	r3, [r3]
 800b978:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800b97a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b97c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b980:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	461a      	mov	r2, r3
 800b98a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b98e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b990:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b992:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800b994:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b996:	e841 2300 	strex	r3, r2, [r1]
 800b99a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800b99c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d1e4      	bne.n	800b96c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	3308      	adds	r3, #8
 800b9a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b9ac:	e853 3f00 	ldrex	r3, [r3]
 800b9b0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800b9b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b9b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b9b8:	f023 0301 	bic.w	r3, r3, #1
 800b9bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	3308      	adds	r3, #8
 800b9c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b9ca:	66ba      	str	r2, [r7, #104]	; 0x68
 800b9cc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ce:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b9d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b9d2:	e841 2300 	strex	r3, r2, [r1]
 800b9d6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b9d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d1e1      	bne.n	800b9a2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2220      	movs	r2, #32
 800b9e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	4a5f      	ldr	r2, [pc, #380]	; (800bb74 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d021      	beq.n	800ba40 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	685b      	ldr	r3, [r3, #4]
 800ba02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d01a      	beq.n	800ba40 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba12:	e853 3f00 	ldrex	r3, [r3]
 800ba16:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ba18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ba1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	461a      	mov	r2, r3
 800ba28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ba2c:	657b      	str	r3, [r7, #84]	; 0x54
 800ba2e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba30:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ba32:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ba34:	e841 2300 	strex	r3, r2, [r1]
 800ba38:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ba3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d1e4      	bne.n	800ba0a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba44:	2b01      	cmp	r3, #1
 800ba46:	d130      	bne.n	800baaa <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba56:	e853 3f00 	ldrex	r3, [r3]
 800ba5a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ba5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba5e:	f023 0310 	bic.w	r3, r3, #16
 800ba62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	461a      	mov	r2, r3
 800ba6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ba70:	643b      	str	r3, [r7, #64]	; 0x40
 800ba72:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ba76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ba78:	e841 2300 	strex	r3, r2, [r1]
 800ba7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ba7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d1e4      	bne.n	800ba4e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	69db      	ldr	r3, [r3, #28]
 800ba8a:	f003 0310 	and.w	r3, r3, #16
 800ba8e:	2b10      	cmp	r3, #16
 800ba90:	d103      	bne.n	800ba9a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	2210      	movs	r2, #16
 800ba98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800baa0:	4619      	mov	r1, r3
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f7fe ff04 	bl	800a8b0 <HAL_UARTEx_RxEventCallback>
 800baa8:	e002      	b.n	800bab0 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f000 ff98 	bl	800c9e0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bab0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d006      	beq.n	800bac6 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800bab8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800babc:	f003 0320 	and.w	r3, r3, #32
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	f47f aecf 	bne.w	800b864 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bacc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800bad0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d049      	beq.n	800bb6c <UART_RxISR_8BIT_FIFOEN+0x350>
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bade:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d242      	bcs.n	800bb6c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	3308      	adds	r3, #8
 800baec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baee:	6a3b      	ldr	r3, [r7, #32]
 800baf0:	e853 3f00 	ldrex	r3, [r3]
 800baf4:	61fb      	str	r3, [r7, #28]
   return(result);
 800baf6:	69fb      	ldr	r3, [r7, #28]
 800baf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bafc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	3308      	adds	r3, #8
 800bb06:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800bb0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bb0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb12:	e841 2300 	strex	r3, r2, [r1]
 800bb16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bb18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d1e3      	bne.n	800bae6 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	4a15      	ldr	r2, [pc, #84]	; (800bb78 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800bb22:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	e853 3f00 	ldrex	r3, [r3]
 800bb30:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	f043 0320 	orr.w	r3, r3, #32
 800bb38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	461a      	mov	r2, r3
 800bb42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bb46:	61bb      	str	r3, [r7, #24]
 800bb48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb4a:	6979      	ldr	r1, [r7, #20]
 800bb4c:	69ba      	ldr	r2, [r7, #24]
 800bb4e:	e841 2300 	strex	r3, r2, [r1]
 800bb52:	613b      	str	r3, [r7, #16]
   return(result);
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d1e4      	bne.n	800bb24 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bb5a:	e007      	b.n	800bb6c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	699a      	ldr	r2, [r3, #24]
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	f042 0208 	orr.w	r2, r2, #8
 800bb6a:	619a      	str	r2, [r3, #24]
}
 800bb6c:	bf00      	nop
 800bb6e:	37b0      	adds	r7, #176	; 0xb0
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}
 800bb74:	40008000 	.word	0x40008000
 800bb78:	0800b4ad 	.word	0x0800b4ad

0800bb7c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b0ae      	sub	sp, #184	; 0xb8
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bb8a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	69db      	ldr	r3, [r3, #28]
 800bb94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	689b      	ldr	r3, [r3, #8]
 800bba8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbb2:	2b22      	cmp	r3, #34	; 0x22
 800bbb4:	f040 8186 	bne.w	800bec4 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bbbe:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bbc2:	e129      	b.n	800be18 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbca:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800bbd6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800bbda:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800bbde:	4013      	ands	r3, r2
 800bbe0:	b29a      	uxth	r2, r3
 800bbe2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bbe6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbec:	1c9a      	adds	r2, r3, #2
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bbf8:	b29b      	uxth	r3, r3
 800bbfa:	3b01      	subs	r3, #1
 800bbfc:	b29a      	uxth	r2, r3
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	69db      	ldr	r3, [r3, #28]
 800bc0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800bc0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bc12:	f003 0307 	and.w	r3, r3, #7
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d053      	beq.n	800bcc2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bc1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bc1e:	f003 0301 	and.w	r3, r3, #1
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d011      	beq.n	800bc4a <UART_RxISR_16BIT_FIFOEN+0xce>
 800bc26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bc2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d00b      	beq.n	800bc4a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	2201      	movs	r2, #1
 800bc38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc40:	f043 0201 	orr.w	r2, r3, #1
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bc4e:	f003 0302 	and.w	r3, r3, #2
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d011      	beq.n	800bc7a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800bc56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bc5a:	f003 0301 	and.w	r3, r3, #1
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d00b      	beq.n	800bc7a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	2202      	movs	r2, #2
 800bc68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc70:	f043 0204 	orr.w	r2, r3, #4
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bc7e:	f003 0304 	and.w	r3, r3, #4
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d011      	beq.n	800bcaa <UART_RxISR_16BIT_FIFOEN+0x12e>
 800bc86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bc8a:	f003 0301 	and.w	r3, r3, #1
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d00b      	beq.n	800bcaa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	2204      	movs	r2, #4
 800bc98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bca0:	f043 0202 	orr.w	r2, r3, #2
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d006      	beq.n	800bcc2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f7fe fdf2 	bl	800a89e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bcc8:	b29b      	uxth	r3, r3
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	f040 80a4 	bne.w	800be18 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bcd8:	e853 3f00 	ldrex	r3, [r3]
 800bcdc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bcde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bce4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	461a      	mov	r2, r3
 800bcee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bcf2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bcf6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcf8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bcfa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bcfe:	e841 2300 	strex	r3, r2, [r1]
 800bd02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bd04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d1e2      	bne.n	800bcd0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	3308      	adds	r3, #8
 800bd10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd14:	e853 3f00 	ldrex	r3, [r3]
 800bd18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bd1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bd20:	f023 0301 	bic.w	r3, r3, #1
 800bd24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	3308      	adds	r3, #8
 800bd2e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800bd32:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bd34:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd36:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bd38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bd3a:	e841 2300 	strex	r3, r2, [r1]
 800bd3e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bd40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d1e1      	bne.n	800bd0a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2220      	movs	r2, #32
 800bd4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2200      	movs	r2, #0
 800bd52:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2200      	movs	r2, #0
 800bd58:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	4a5f      	ldr	r2, [pc, #380]	; (800bedc <UART_RxISR_16BIT_FIFOEN+0x360>)
 800bd60:	4293      	cmp	r3, r2
 800bd62:	d021      	beq.n	800bda8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	685b      	ldr	r3, [r3, #4]
 800bd6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d01a      	beq.n	800bda8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd7a:	e853 3f00 	ldrex	r3, [r3]
 800bd7e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bd80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bd86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	461a      	mov	r2, r3
 800bd90:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bd94:	65bb      	str	r3, [r7, #88]	; 0x58
 800bd96:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bd9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bd9c:	e841 2300 	strex	r3, r2, [r1]
 800bda0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bda2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d1e4      	bne.n	800bd72 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdac:	2b01      	cmp	r3, #1
 800bdae:	d130      	bne.n	800be12 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdbe:	e853 3f00 	ldrex	r3, [r3]
 800bdc2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bdc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdc6:	f023 0310 	bic.w	r3, r3, #16
 800bdca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	461a      	mov	r2, r3
 800bdd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bdd8:	647b      	str	r3, [r7, #68]	; 0x44
 800bdda:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bddc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bdde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bde0:	e841 2300 	strex	r3, r2, [r1]
 800bde4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bde6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d1e4      	bne.n	800bdb6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	69db      	ldr	r3, [r3, #28]
 800bdf2:	f003 0310 	and.w	r3, r3, #16
 800bdf6:	2b10      	cmp	r3, #16
 800bdf8:	d103      	bne.n	800be02 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	2210      	movs	r2, #16
 800be00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800be08:	4619      	mov	r1, r3
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f7fe fd50 	bl	800a8b0 <HAL_UARTEx_RxEventCallback>
 800be10:	e002      	b.n	800be18 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f000 fde4 	bl	800c9e0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800be18:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d006      	beq.n	800be2e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800be20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800be24:	f003 0320 	and.w	r3, r3, #32
 800be28:	2b00      	cmp	r3, #0
 800be2a:	f47f aecb 	bne.w	800bbc4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800be34:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800be38:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d049      	beq.n	800bed4 <UART_RxISR_16BIT_FIFOEN+0x358>
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800be46:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800be4a:	429a      	cmp	r2, r3
 800be4c:	d242      	bcs.n	800bed4 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	3308      	adds	r3, #8
 800be54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be58:	e853 3f00 	ldrex	r3, [r3]
 800be5c:	623b      	str	r3, [r7, #32]
   return(result);
 800be5e:	6a3b      	ldr	r3, [r7, #32]
 800be60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800be64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	3308      	adds	r3, #8
 800be6e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800be72:	633a      	str	r2, [r7, #48]	; 0x30
 800be74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be7a:	e841 2300 	strex	r3, r2, [r1]
 800be7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800be80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be82:	2b00      	cmp	r3, #0
 800be84:	d1e3      	bne.n	800be4e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	4a15      	ldr	r2, [pc, #84]	; (800bee0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800be8a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	e853 3f00 	ldrex	r3, [r3]
 800be98:	60fb      	str	r3, [r7, #12]
   return(result);
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	f043 0320 	orr.w	r3, r3, #32
 800bea0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	461a      	mov	r2, r3
 800beaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800beae:	61fb      	str	r3, [r7, #28]
 800beb0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beb2:	69b9      	ldr	r1, [r7, #24]
 800beb4:	69fa      	ldr	r2, [r7, #28]
 800beb6:	e841 2300 	strex	r3, r2, [r1]
 800beba:	617b      	str	r3, [r7, #20]
   return(result);
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d1e4      	bne.n	800be8c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bec2:	e007      	b.n	800bed4 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	699a      	ldr	r2, [r3, #24]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f042 0208 	orr.w	r2, r2, #8
 800bed2:	619a      	str	r2, [r3, #24]
}
 800bed4:	bf00      	nop
 800bed6:	37b8      	adds	r7, #184	; 0xb8
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}
 800bedc:	40008000 	.word	0x40008000
 800bee0:	0800b665 	.word	0x0800b665

0800bee4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b083      	sub	sp, #12
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800beec:	bf00      	nop
 800beee:	370c      	adds	r7, #12
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bc80      	pop	{r7}
 800bef4:	4770      	bx	lr

0800bef6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bef6:	b480      	push	{r7}
 800bef8:	b083      	sub	sp, #12
 800befa:	af00      	add	r7, sp, #0
 800befc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800befe:	bf00      	nop
 800bf00:	370c      	adds	r7, #12
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bc80      	pop	{r7}
 800bf06:	4770      	bx	lr

0800bf08 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b083      	sub	sp, #12
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bf10:	bf00      	nop
 800bf12:	370c      	adds	r7, #12
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bc80      	pop	{r7}
 800bf18:	4770      	bx	lr

0800bf1a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bf1a:	b480      	push	{r7}
 800bf1c:	b085      	sub	sp, #20
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bf28:	2b01      	cmp	r3, #1
 800bf2a:	d101      	bne.n	800bf30 <HAL_UARTEx_DisableFifoMode+0x16>
 800bf2c:	2302      	movs	r3, #2
 800bf2e:	e027      	b.n	800bf80 <HAL_UARTEx_DisableFifoMode+0x66>
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2201      	movs	r2, #1
 800bf34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2224      	movs	r2, #36	; 0x24
 800bf3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	681a      	ldr	r2, [r3, #0]
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f022 0201 	bic.w	r2, r2, #1
 800bf56:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bf5e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2200      	movs	r2, #0
 800bf64:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	68fa      	ldr	r2, [r7, #12]
 800bf6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2220      	movs	r2, #32
 800bf72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2200      	movs	r2, #0
 800bf7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bf7e:	2300      	movs	r3, #0
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	3714      	adds	r7, #20
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bc80      	pop	{r7}
 800bf88:	4770      	bx	lr

0800bf8a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bf8a:	b580      	push	{r7, lr}
 800bf8c:	b084      	sub	sp, #16
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	6078      	str	r0, [r7, #4]
 800bf92:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bf9a:	2b01      	cmp	r3, #1
 800bf9c:	d101      	bne.n	800bfa2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bf9e:	2302      	movs	r3, #2
 800bfa0:	e02d      	b.n	800bffe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2201      	movs	r2, #1
 800bfa6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2224      	movs	r2, #36	; 0x24
 800bfae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	681a      	ldr	r2, [r3, #0]
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	f022 0201 	bic.w	r2, r2, #1
 800bfc8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	689b      	ldr	r3, [r3, #8]
 800bfd0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	683a      	ldr	r2, [r7, #0]
 800bfda:	430a      	orrs	r2, r1
 800bfdc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f000 f850 	bl	800c084 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	68fa      	ldr	r2, [r7, #12]
 800bfea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2220      	movs	r2, #32
 800bff0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2200      	movs	r2, #0
 800bff8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bffc:	2300      	movs	r3, #0
}
 800bffe:	4618      	mov	r0, r3
 800c000:	3710      	adds	r7, #16
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}

0800c006 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c006:	b580      	push	{r7, lr}
 800c008:	b084      	sub	sp, #16
 800c00a:	af00      	add	r7, sp, #0
 800c00c:	6078      	str	r0, [r7, #4]
 800c00e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c016:	2b01      	cmp	r3, #1
 800c018:	d101      	bne.n	800c01e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c01a:	2302      	movs	r3, #2
 800c01c:	e02d      	b.n	800c07a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2201      	movs	r2, #1
 800c022:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2224      	movs	r2, #36	; 0x24
 800c02a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	681a      	ldr	r2, [r3, #0]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	f022 0201 	bic.w	r2, r2, #1
 800c044:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	689b      	ldr	r3, [r3, #8]
 800c04c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	683a      	ldr	r2, [r7, #0]
 800c056:	430a      	orrs	r2, r1
 800c058:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	f000 f812 	bl	800c084 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	68fa      	ldr	r2, [r7, #12]
 800c066:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2220      	movs	r2, #32
 800c06c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2200      	movs	r2, #0
 800c074:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c078:	2300      	movs	r3, #0
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3710      	adds	r7, #16
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}
	...

0800c084 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c084:	b480      	push	{r7}
 800c086:	b085      	sub	sp, #20
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c090:	2b00      	cmp	r3, #0
 800c092:	d108      	bne.n	800c0a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2201      	movs	r2, #1
 800c098:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2201      	movs	r2, #1
 800c0a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c0a4:	e031      	b.n	800c10a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c0a6:	2308      	movs	r3, #8
 800c0a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c0aa:	2308      	movs	r3, #8
 800c0ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	689b      	ldr	r3, [r3, #8]
 800c0b4:	0e5b      	lsrs	r3, r3, #25
 800c0b6:	b2db      	uxtb	r3, r3
 800c0b8:	f003 0307 	and.w	r3, r3, #7
 800c0bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	689b      	ldr	r3, [r3, #8]
 800c0c4:	0f5b      	lsrs	r3, r3, #29
 800c0c6:	b2db      	uxtb	r3, r3
 800c0c8:	f003 0307 	and.w	r3, r3, #7
 800c0cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c0ce:	7bbb      	ldrb	r3, [r7, #14]
 800c0d0:	7b3a      	ldrb	r2, [r7, #12]
 800c0d2:	4910      	ldr	r1, [pc, #64]	; (800c114 <UARTEx_SetNbDataToProcess+0x90>)
 800c0d4:	5c8a      	ldrb	r2, [r1, r2]
 800c0d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c0da:	7b3a      	ldrb	r2, [r7, #12]
 800c0dc:	490e      	ldr	r1, [pc, #56]	; (800c118 <UARTEx_SetNbDataToProcess+0x94>)
 800c0de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c0e0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c0e4:	b29a      	uxth	r2, r3
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c0ec:	7bfb      	ldrb	r3, [r7, #15]
 800c0ee:	7b7a      	ldrb	r2, [r7, #13]
 800c0f0:	4908      	ldr	r1, [pc, #32]	; (800c114 <UARTEx_SetNbDataToProcess+0x90>)
 800c0f2:	5c8a      	ldrb	r2, [r1, r2]
 800c0f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c0f8:	7b7a      	ldrb	r2, [r7, #13]
 800c0fa:	4907      	ldr	r1, [pc, #28]	; (800c118 <UARTEx_SetNbDataToProcess+0x94>)
 800c0fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c0fe:	fb93 f3f2 	sdiv	r3, r3, r2
 800c102:	b29a      	uxth	r2, r3
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c10a:	bf00      	nop
 800c10c:	3714      	adds	r7, #20
 800c10e:	46bd      	mov	sp, r7
 800c110:	bc80      	pop	{r7}
 800c112:	4770      	bx	lr
 800c114:	08012f80 	.word	0x08012f80
 800c118:	08012f88 	.word	0x08012f88

0800c11c <ReadADCChannel>:
#define CONVERSION_POLL_TIME 10

static uint16_t ReadADCChannel(uint32_t Channel);

static uint16_t ReadADCChannel(uint32_t Channel)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b086      	sub	sp, #24
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
	uint16_t result;
	if (HAL_ADCEx_Calibration_Start(Get_AdcHandle()) != HAL_OK) {
 800c124:	f7f5 fdda 	bl	8001cdc <Get_AdcHandle>
 800c128:	4603      	mov	r3, r0
 800c12a:	4618      	mov	r0, r3
 800c12c:	f7f9 fc31 	bl	8005992 <HAL_ADCEx_Calibration_Start>
 800c130:	4603      	mov	r3, r0
 800c132:	2b00      	cmp	r3, #0
 800c134:	d001      	beq.n	800c13a <ReadADCChannel+0x1e>
	    Error_Handler();
 800c136:	f7f5 fe15 	bl	8001d64 <Error_Handler>
	  }
	ADC_ChannelConfTypeDef sConfig = {0};
 800c13a:	f107 0308 	add.w	r3, r7, #8
 800c13e:	2200      	movs	r2, #0
 800c140:	601a      	str	r2, [r3, #0]
 800c142:	605a      	str	r2, [r3, #4]
 800c144:	609a      	str	r2, [r3, #8]
	sConfig.Channel = Channel;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800c14a:	2300      	movs	r3, #0
 800c14c:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800c14e:	2300      	movs	r3, #0
 800c150:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(Get_AdcHandle(), &sConfig) != HAL_OK) {
 800c152:	f7f5 fdc3 	bl	8001cdc <Get_AdcHandle>
 800c156:	4602      	mov	r2, r0
 800c158:	f107 0308 	add.w	r3, r7, #8
 800c15c:	4619      	mov	r1, r3
 800c15e:	4610      	mov	r0, r2
 800c160:	f7f9 f92a 	bl	80053b8 <HAL_ADC_ConfigChannel>
 800c164:	4603      	mov	r3, r0
 800c166:	2b00      	cmp	r3, #0
 800c168:	d001      	beq.n	800c16e <ReadADCChannel+0x52>
		Error_Handler();
 800c16a:	f7f5 fdfb 	bl	8001d64 <Error_Handler>
	}
	if (HAL_ADC_Start(Get_AdcHandle()) != HAL_OK) {
 800c16e:	f7f5 fdb5 	bl	8001cdc <Get_AdcHandle>
 800c172:	4603      	mov	r3, r0
 800c174:	4618      	mov	r0, r3
 800c176:	f7f9 f803 	bl	8005180 <HAL_ADC_Start>
 800c17a:	4603      	mov	r3, r0
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d001      	beq.n	800c184 <ReadADCChannel+0x68>
		Error_Handler();
 800c180:	f7f5 fdf0 	bl	8001d64 <Error_Handler>
	}
	HAL_ADC_PollForConversion(Get_AdcHandle(), HAL_MAX_DELAY);
 800c184:	f7f5 fdaa 	bl	8001cdc <Get_AdcHandle>
 800c188:	4603      	mov	r3, r0
 800c18a:	f04f 31ff 	mov.w	r1, #4294967295
 800c18e:	4618      	mov	r0, r3
 800c190:	f7f9 f86e 	bl	8005270 <HAL_ADC_PollForConversion>
	HAL_ADC_Stop(Get_AdcHandle());
 800c194:	f7f5 fda2 	bl	8001cdc <Get_AdcHandle>
 800c198:	4603      	mov	r3, r0
 800c19a:	4618      	mov	r0, r3
 800c19c:	f7f9 f836 	bl	800520c <HAL_ADC_Stop>
	if((HAL_ADC_GetState(Get_AdcHandle()) & HAL_ADC_STATE_EOC_REG) == HAL_ADC_STATE_EOC_REG)
 800c1a0:	f7f5 fd9c 	bl	8001cdc <Get_AdcHandle>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f7f9 fa3e 	bl	8005628 <HAL_ADC_GetState>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c1b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1b6:	d107      	bne.n	800c1c8 <ReadADCChannel+0xac>
	{
		/*##-5- Get the converted value of regular channel  ######################*/
		result = (uint16_t)HAL_ADC_GetValue(Get_AdcHandle());
 800c1b8:	f7f5 fd90 	bl	8001cdc <Get_AdcHandle>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f7f9 f8ed 	bl	800539e <HAL_ADC_GetValue>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	82fb      	strh	r3, [r7, #22]
	}
	return result;
 800c1c8:	8afb      	ldrh	r3, [r7, #22]
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3718      	adds	r7, #24
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}
	...

0800c1d4 <AdcRead_VBatt>:


uint16_t AdcRead_VBatt(void)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, ADC_SW_Pin, GPIO_PIN_RESET);
 800c1d8:	2200      	movs	r2, #0
 800c1da:	2180      	movs	r1, #128	; 0x80
 800c1dc:	480a      	ldr	r0, [pc, #40]	; (800c208 <AdcRead_VBatt+0x34>)
 800c1de:	f7fa fab9 	bl	8006754 <HAL_GPIO_WritePin>
	adcResult = ReadADCChannel(ADC_CHANNEL_2); // * 3.3 * 23) / (4096 * 13);
 800c1e2:	480a      	ldr	r0, [pc, #40]	; (800c20c <AdcRead_VBatt+0x38>)
 800c1e4:	f7ff ff9a 	bl	800c11c <ReadADCChannel>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f7f4 fd62 	bl	8000cb4 <__aeabi_ui2f>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	4a07      	ldr	r2, [pc, #28]	; (800c210 <AdcRead_VBatt+0x3c>)
 800c1f4:	6013      	str	r3, [r2, #0]
	return adcResult;
 800c1f6:	4b06      	ldr	r3, [pc, #24]	; (800c210 <AdcRead_VBatt+0x3c>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f7f4 fdb2 	bl	8000d64 <__aeabi_f2uiz>
 800c200:	4603      	mov	r3, r0
 800c202:	b29b      	uxth	r3, r3
}
 800c204:	4618      	mov	r0, r3
 800c206:	bd80      	pop	{r7, pc}
 800c208:	48000400 	.word	0x48000400
 800c20c:	08000004 	.word	0x08000004
 800c210:	200018d4 	.word	0x200018d4

0800c214 <commandReadDeviceId>:


char DataBuffer[200];

void commandReadDeviceId(char *data)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b096      	sub	sp, #88	; 0x58
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
  /* Read MCU Id, 32-bit access */
  uint8_t i;
  char DeviceId[50];
  uint8_t serialNumber[12]={0};
 800c21c:	2300      	movs	r3, #0
 800c21e:	61bb      	str	r3, [r7, #24]
 800c220:	f107 031c 	add.w	r3, r7, #28
 800c224:	2200      	movs	r2, #0
 800c226:	601a      	str	r2, [r3, #0]
 800c228:	605a      	str	r2, [r3, #4]
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = HAL_GetUIDw0();
 800c22a:	f7f8 fc85 	bl	8004b38 <HAL_GetUIDw0>
 800c22e:	4603      	mov	r3, r0
 800c230:	617b      	str	r3, [r7, #20]
  deviceserial1 = HAL_GetUIDw1();
 800c232:	f7f8 fc8b 	bl	8004b4c <HAL_GetUIDw1>
 800c236:	4603      	mov	r3, r0
 800c238:	613b      	str	r3, [r7, #16]
  deviceserial2 = HAL_GetUIDw2();
 800c23a:	f7f8 fc91 	bl	8004b60 <HAL_GetUIDw2>
 800c23e:	4603      	mov	r3, r0
 800c240:	60fb      	str	r3, [r7, #12]
  memset(serialNumber, 0, 12);
 800c242:	f107 0318 	add.w	r3, r7, #24
 800c246:	220c      	movs	r2, #12
 800c248:	2100      	movs	r1, #0
 800c24a:	4618      	mov	r0, r3
 800c24c:	f003 ff17 	bl	801007e <memset>
 800c250:	697b      	ldr	r3, [r7, #20]
  memcpy(&serialNumber[0], &deviceserial0, 4);
 800c252:	61bb      	str	r3, [r7, #24]
 800c254:	693b      	ldr	r3, [r7, #16]
  memcpy(&serialNumber[4], &deviceserial1, 4);
 800c256:	61fb      	str	r3, [r7, #28]
 800c258:	68fb      	ldr	r3, [r7, #12]
  memcpy(&serialNumber[8], &deviceserial2, 4);
 800c25a:	623b      	str	r3, [r7, #32]
  snprintf(DeviceId, sizeof(DeviceId), "OK,STDEVICEID,");
 800c25c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c260:	4a1e      	ldr	r2, [pc, #120]	; (800c2dc <commandReadDeviceId+0xc8>)
 800c262:	2132      	movs	r1, #50	; 0x32
 800c264:	4618      	mov	r0, r3
 800c266:	f004 fb0d 	bl	8010884 <sniprintf>
  serialPutStr(DeviceId);
 800c26a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c26e:	4618      	mov	r0, r3
 800c270:	f000 fad8 	bl	800c824 <serialPutStr>
  for(i=0; i<12; i++)
 800c274:	2300      	movs	r3, #0
 800c276:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800c27a:	e026      	b.n	800c2ca <commandReadDeviceId+0xb6>
  {
    i < 11 ? snprintf(DeviceId, sizeof(DeviceId), "%x", serialNumber[i]) : snprintf(DeviceId, sizeof(DeviceId), "%d\n", serialNumber[i]);
 800c27c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c280:	2b0a      	cmp	r3, #10
 800c282:	d80c      	bhi.n	800c29e <commandReadDeviceId+0x8a>
 800c284:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c288:	3358      	adds	r3, #88	; 0x58
 800c28a:	443b      	add	r3, r7
 800c28c:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 800c290:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c294:	4a12      	ldr	r2, [pc, #72]	; (800c2e0 <commandReadDeviceId+0xcc>)
 800c296:	2132      	movs	r1, #50	; 0x32
 800c298:	f004 faf4 	bl	8010884 <sniprintf>
 800c29c:	e00b      	b.n	800c2b6 <commandReadDeviceId+0xa2>
 800c29e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c2a2:	3358      	adds	r3, #88	; 0x58
 800c2a4:	443b      	add	r3, r7
 800c2a6:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 800c2aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c2ae:	4a0d      	ldr	r2, [pc, #52]	; (800c2e4 <commandReadDeviceId+0xd0>)
 800c2b0:	2132      	movs	r1, #50	; 0x32
 800c2b2:	f004 fae7 	bl	8010884 <sniprintf>
    serialPutStr(DeviceId);
 800c2b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f000 fab2 	bl	800c824 <serialPutStr>
  for(i=0; i<12; i++)
 800c2c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c2c4:	3301      	adds	r3, #1
 800c2c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800c2ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c2ce:	2b0b      	cmp	r3, #11
 800c2d0:	d9d4      	bls.n	800c27c <commandReadDeviceId+0x68>
  }
}
 800c2d2:	bf00      	nop
 800c2d4:	bf00      	nop
 800c2d6:	3758      	adds	r7, #88	; 0x58
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}
 800c2dc:	08012904 	.word	0x08012904
 800c2e0:	08012914 	.word	0x08012914
 800c2e4:	08012918 	.word	0x08012918

0800c2e8 <commandReadDeviceBattery>:

void commandReadDeviceBattery(char *data)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b082      	sub	sp, #8
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]

	 serialPutStr("OK,BATTREAD");
 800c2f0:	4808      	ldr	r0, [pc, #32]	; (800c314 <commandReadDeviceBattery+0x2c>)
 800c2f2:	f000 fa97 	bl	800c824 <serialPutStr>
	 sprintf(DataBuffer,"OK,BATTREAD %d",AdcRead_VBatt());
 800c2f6:	f7ff ff6d 	bl	800c1d4 <AdcRead_VBatt>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	461a      	mov	r2, r3
 800c2fe:	4906      	ldr	r1, [pc, #24]	; (800c318 <commandReadDeviceBattery+0x30>)
 800c300:	4806      	ldr	r0, [pc, #24]	; (800c31c <commandReadDeviceBattery+0x34>)
 800c302:	f004 faf3 	bl	80108ec <siprintf>
	 serialPutStr(DataBuffer);
 800c306:	4805      	ldr	r0, [pc, #20]	; (800c31c <commandReadDeviceBattery+0x34>)
 800c308:	f000 fa8c 	bl	800c824 <serialPutStr>
}
 800c30c:	bf00      	nop
 800c30e:	3708      	adds	r7, #8
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}
 800c314:	0801291c 	.word	0x0801291c
 800c318:	08012928 	.word	0x08012928
 800c31c:	200018d8 	.word	0x200018d8

0800c320 <commandGetDistance>:


char sonarBuffer[100];
void commandGetDistance(char *data)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b082      	sub	sp, #8
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(MB_PWR_GPIO_Port, MB_PWR_Pin, GPIO_PIN_SET);
 800c328:	2201      	movs	r2, #1
 800c32a:	2101      	movs	r1, #1
 800c32c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c330:	f7fa fa10 	bl	8006754 <HAL_GPIO_WritePin>
	sprintf(sonarBuffer,"OK,DISTREAD %d",getSonarDistance());
 800c334:	f000 f98c 	bl	800c650 <getSonarDistance>
 800c338:	4603      	mov	r3, r0
 800c33a:	461a      	mov	r2, r3
 800c33c:	4905      	ldr	r1, [pc, #20]	; (800c354 <commandGetDistance+0x34>)
 800c33e:	4806      	ldr	r0, [pc, #24]	; (800c358 <commandGetDistance+0x38>)
 800c340:	f004 fad4 	bl	80108ec <siprintf>
	serialPutStr(sonarBuffer);
 800c344:	4804      	ldr	r0, [pc, #16]	; (800c358 <commandGetDistance+0x38>)
 800c346:	f000 fa6d 	bl	800c824 <serialPutStr>
}
 800c34a:	bf00      	nop
 800c34c:	3708      	adds	r7, #8
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}
 800c352:	bf00      	nop
 800c354:	08012938 	.word	0x08012938
 800c358:	200019a0 	.word	0x200019a0

0800c35c <Flash__Init>:
/**
 * @brief Flash Init routine
 **/

bool Flash__Init(void)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b082      	sub	sp, #8
 800c360:	af00      	add	r7, sp, #0
	uint32_t jedecId;

	HAL_Delay(100);
 800c362:	2064      	movs	r0, #100	; 0x64
 800c364:	f7f8 fbc4 	bl	8004af0 <HAL_Delay>
	//Assert Spi CS pin
	Spi1_AssertCs();
 800c368:	f000 fa12 	bl	800c790 <Spi1_AssertCs>
	HAL_Delay(100);
 800c36c:	2064      	movs	r0, #100	; 0x64
 800c36e:	f7f8 fbbf 	bl	8004af0 <HAL_Delay>

	Flash__GetJEDEC_ID(&jedecId);
 800c372:	1d3b      	adds	r3, r7, #4
 800c374:	4618      	mov	r0, r3
 800c376:	f000 f835 	bl	800c3e4 <Flash__GetJEDEC_ID>

	if(jedecId != WINBOND_JEDEC_ID)
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	4a04      	ldr	r2, [pc, #16]	; (800c390 <Flash__Init+0x34>)
 800c37e:	4293      	cmp	r3, r2
 800c380:	d001      	beq.n	800c386 <Flash__Init+0x2a>
	{
		return false;
 800c382:	2300      	movs	r3, #0
 800c384:	e000      	b.n	800c388 <Flash__Init+0x2c>
	}
	else
	{
		return true;
 800c386:	2301      	movs	r3, #1
	}
}
 800c388:	4618      	mov	r0, r3
 800c38a:	3708      	adds	r7, #8
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}
 800c390:	00ef4014 	.word	0x00ef4014

0800c394 <Flash__SpiWrite>:
/**
 * @brief Flash Spi write routine
 **/

void Flash__SpiWrite(unsigned char data)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b082      	sub	sp, #8
 800c398:	af00      	add	r7, sp, #0
 800c39a:	4603      	mov	r3, r0
 800c39c:	71fb      	strb	r3, [r7, #7]
	Spi1_Transmit(&data, sizeof(data));
 800c39e:	1dfb      	adds	r3, r7, #7
 800c3a0:	2101      	movs	r1, #1
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f000 fa0c 	bl	800c7c0 <Spi1_Transmit>
}
 800c3a8:	bf00      	nop
 800c3aa:	3708      	adds	r7, #8
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}

0800c3b0 <Flash__SpiRead>:
/**
 * @brief Flash Spi read routine
 **/

unsigned char Flash__SpiRead(void)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b082      	sub	sp, #8
 800c3b4:	af00      	add	r7, sp, #0
	unsigned char ret = 0x00;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	71fb      	strb	r3, [r7, #7]
	Spi1_Receive(&ret, sizeof(ret));
 800c3ba:	1dfb      	adds	r3, r7, #7
 800c3bc:	2101      	movs	r1, #1
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f000 fa17 	bl	800c7f2 <Spi1_Receive>
	return ret;
 800c3c4:	79fb      	ldrb	r3, [r7, #7]
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3708      	adds	r7, #8
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}

0800c3ce <Flash__WriteEnable>:
/**
 * @brief Flash Write Enable routine
 **/

void Flash__WriteEnable(void)
{
 800c3ce:	b580      	push	{r7, lr}
 800c3d0:	af00      	add	r7, sp, #0
	//Deassert Spi CS pin
	Spi1_DeassertCs();
 800c3d2:	f000 f9e9 	bl	800c7a8 <Spi1_DeassertCs>
	//Send Write Enable Command
	Flash__SpiWrite(CMD_WREN);
 800c3d6:	2006      	movs	r0, #6
 800c3d8:	f7ff ffdc 	bl	800c394 <Flash__SpiWrite>
	//Assert Spi CS pin
	Spi1_AssertCs();
 800c3dc:	f000 f9d8 	bl	800c790 <Spi1_AssertCs>
}
 800c3e0:	bf00      	nop
 800c3e2:	bd80      	pop	{r7, pc}

0800c3e4 <Flash__GetJEDEC_ID>:
 *
 * @param[out] jdecId Flash JEDEC id to be read
 **/

void Flash__GetJEDEC_ID(uint32_t *jdecId)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b084      	sub	sp, #16
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
	uint8_t read_buff[3];

	//Deassert Spi CS pin
	Spi1_DeassertCs();
 800c3ec:	f000 f9dc 	bl	800c7a8 <Spi1_DeassertCs>
	//Send Read JEDEC ID Command
	Flash__SpiWrite(CMD_JEDEC_ID);
 800c3f0:	209f      	movs	r0, #159	; 0x9f
 800c3f2:	f7ff ffcf 	bl	800c394 <Flash__SpiWrite>
	read_buff[0] = Flash__SpiRead();
 800c3f6:	f7ff ffdb 	bl	800c3b0 <Flash__SpiRead>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	733b      	strb	r3, [r7, #12]
	read_buff[1] = Flash__SpiRead();
 800c3fe:	f7ff ffd7 	bl	800c3b0 <Flash__SpiRead>
 800c402:	4603      	mov	r3, r0
 800c404:	737b      	strb	r3, [r7, #13]
	read_buff[2] = Flash__SpiRead();
 800c406:	f7ff ffd3 	bl	800c3b0 <Flash__SpiRead>
 800c40a:	4603      	mov	r3, r0
 800c40c:	73bb      	strb	r3, [r7, #14]
	//Assert Spi CS pin
	Spi1_AssertCs();
 800c40e:	f000 f9bf 	bl	800c790 <Spi1_AssertCs>

	//Format JEDEC ID
	*jdecId = (read_buff[0] << 16) | (read_buff[1] << 8) | read_buff[2];
 800c412:	7b3b      	ldrb	r3, [r7, #12]
 800c414:	041a      	lsls	r2, r3, #16
 800c416:	7b7b      	ldrb	r3, [r7, #13]
 800c418:	021b      	lsls	r3, r3, #8
 800c41a:	4313      	orrs	r3, r2
 800c41c:	7bba      	ldrb	r2, [r7, #14]
 800c41e:	4313      	orrs	r3, r2
 800c420:	461a      	mov	r2, r3
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	601a      	str	r2, [r3, #0]
}
 800c426:	bf00      	nop
 800c428:	3710      	adds	r7, #16
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}

0800c42e <Flash__ReadDeviceStatus1>:
/**
 * @brief Flash read device status register 1 routine
 **/

uint8_t Flash__ReadDeviceStatus1(void)
{
 800c42e:	b580      	push	{r7, lr}
 800c430:	b082      	sub	sp, #8
 800c432:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 800c434:	2300      	movs	r3, #0
 800c436:	71fb      	strb	r3, [r7, #7]

	//Deassert Spi CS pin
	Spi1_DeassertCs();
 800c438:	f000 f9b6 	bl	800c7a8 <Spi1_DeassertCs>
	//Send Read Status Register 1 Command
	Flash__SpiWrite(CMD_RDSR1);
 800c43c:	2005      	movs	r0, #5
 800c43e:	f7ff ffa9 	bl	800c394 <Flash__SpiWrite>
	data = Flash__SpiRead();                     // dummy
 800c442:	f7ff ffb5 	bl	800c3b0 <Flash__SpiRead>
 800c446:	4603      	mov	r3, r0
 800c448:	71fb      	strb	r3, [r7, #7]
	//Assert Spi CS pin
	Spi1_AssertCs();
 800c44a:	f000 f9a1 	bl	800c790 <Spi1_AssertCs>

	return (data);
 800c44e:	79fb      	ldrb	r3, [r7, #7]
}
 800c450:	4618      	mov	r0, r3
 800c452:	3708      	adds	r7, #8
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}

0800c458 <Flash__ReadDeviceStatus2>:
/**
 * @brief Flash read device status register 2 routine
 **/

uint8_t Flash__ReadDeviceStatus2(void)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b082      	sub	sp, #8
 800c45c:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 800c45e:	2300      	movs	r3, #0
 800c460:	71fb      	strb	r3, [r7, #7]

	//Deassert Spi CS pin
	Spi1_DeassertCs();
 800c462:	f000 f9a1 	bl	800c7a8 <Spi1_DeassertCs>
	//Send Read Status Register 2 Command
	Flash__SpiWrite(CMD_RDSR2);
 800c466:	2035      	movs	r0, #53	; 0x35
 800c468:	f7ff ff94 	bl	800c394 <Flash__SpiWrite>
	data = Flash__SpiRead();                     // dummy
 800c46c:	f7ff ffa0 	bl	800c3b0 <Flash__SpiRead>
 800c470:	4603      	mov	r3, r0
 800c472:	71fb      	strb	r3, [r7, #7]
	//Assert Spi CS pin
	Spi1_AssertCs();
 800c474:	f000 f98c 	bl	800c790 <Spi1_AssertCs>

	return (data);
 800c478:	79fb      	ldrb	r3, [r7, #7]
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3708      	adds	r7, #8
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}

0800c482 <Flash__ReadDeviceStatus>:
/**
 * @brief Flash read device status routine
 **/

uint16_t Flash__ReadDeviceStatus(void)
{
 800c482:	b590      	push	{r4, r7, lr}
 800c484:	b083      	sub	sp, #12
 800c486:	af00      	add	r7, sp, #0
	uint16_t data = 0;
 800c488:	2300      	movs	r3, #0
 800c48a:	80fb      	strh	r3, [r7, #6]

	data = Flash__ReadDeviceStatus2();
 800c48c:	f7ff ffe4 	bl	800c458 <Flash__ReadDeviceStatus2>
 800c490:	4603      	mov	r3, r0
 800c492:	80fb      	strh	r3, [r7, #6]
	data = (data << 8) | Flash__ReadDeviceStatus1();
 800c494:	88fb      	ldrh	r3, [r7, #6]
 800c496:	021b      	lsls	r3, r3, #8
 800c498:	b21c      	sxth	r4, r3
 800c49a:	f7ff ffc8 	bl	800c42e <Flash__ReadDeviceStatus1>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	b21b      	sxth	r3, r3
 800c4a2:	4323      	orrs	r3, r4
 800c4a4:	b21b      	sxth	r3, r3
 800c4a6:	80fb      	strh	r3, [r7, #6]

	return (data);
 800c4a8:	88fb      	ldrh	r3, [r7, #6]
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	370c      	adds	r7, #12
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd90      	pop	{r4, r7, pc}

0800c4b2 <Flash__ReadBuffer>:
 * @param[in] pBuffer Pointer to the buffer that receives the data read
 * @param[in] Length Number of bytes to read
 **/

bool Flash__ReadBuffer(uint32_t addr, uint8_t *pBuffer, uint32_t length)
{
 800c4b2:	b590      	push	{r4, r7, lr}
 800c4b4:	b087      	sub	sp, #28
 800c4b6:	af00      	add	r7, sp, #0
 800c4b8:	60f8      	str	r0, [r7, #12]
 800c4ba:	60b9      	str	r1, [r7, #8]
 800c4bc:	607a      	str	r2, [r7, #4]
	//Deassert Spi CS pin
	Spi1_DeassertCs();
 800c4be:	f000 f973 	bl	800c7a8 <Spi1_DeassertCs>
#if WINBOND_USE_FAST_READ
	//Send Fast Read Command
	Flash__SpiWrite(CMD_READ_HS);               // send 0Bh
 800c4c2:	200b      	movs	r0, #11
 800c4c4:	f7ff ff66 	bl	800c394 <Flash__SpiWrite>
	Flash__SpiWrite((addr >> 16) & 0xFF);       // Send ReadAddr high nibble
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	0c1b      	lsrs	r3, r3, #16
 800c4cc:	b2db      	uxtb	r3, r3
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f7ff ff60 	bl	800c394 <Flash__SpiWrite>
	Flash__SpiWrite((addr >> 8) & 0xFF); 		// Send ReadAddr middle nibble address byte to read from
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	0a1b      	lsrs	r3, r3, #8
 800c4d8:	b2db      	uxtb	r3, r3
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f7ff ff5a 	bl	800c394 <Flash__SpiWrite>
	Flash__SpiWrite(addr & 0xFF); 				// Send ReadAddr low nibble address byte to read from
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	b2db      	uxtb	r3, r3
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f7ff ff55 	bl	800c394 <Flash__SpiWrite>
	Flash__SpiWrite(DUMMY);						// Dummy eight clocks
 800c4ea:	20ff      	movs	r0, #255	; 0xff
 800c4ec:	f7ff ff52 	bl	800c394 <Flash__SpiWrite>
	Flash__SpiWrite((addr >> 16) & 0xFF);       // Send ReadAddr high nibble
	Flash__SpiWrite((addr >> 8) & 0xFF); 		// Send ReadAddr middle nibble address byte to read from
	Flash__SpiWrite(addr & 0xFF); 				// Send ReadAddr low nibble address byte to read from
#endif
	//Read bytes
	for (uint32_t i = 0; i < length; ++i) {
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	617b      	str	r3, [r7, #20]
 800c4f4:	e009      	b.n	800c50a <Flash__ReadBuffer+0x58>
		pBuffer[i] = Flash__SpiRead();
 800c4f6:	68ba      	ldr	r2, [r7, #8]
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	18d4      	adds	r4, r2, r3
 800c4fc:	f7ff ff58 	bl	800c3b0 <Flash__SpiRead>
 800c500:	4603      	mov	r3, r0
 800c502:	7023      	strb	r3, [r4, #0]
	for (uint32_t i = 0; i < length; ++i) {
 800c504:	697b      	ldr	r3, [r7, #20]
 800c506:	3301      	adds	r3, #1
 800c508:	617b      	str	r3, [r7, #20]
 800c50a:	697a      	ldr	r2, [r7, #20]
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	429a      	cmp	r2, r3
 800c510:	d3f1      	bcc.n	800c4f6 <Flash__ReadBuffer+0x44>
	}
	//Assert Spi CS pin
	Spi1_AssertCs();
 800c512:	f000 f93d 	bl	800c790 <Spi1_AssertCs>

	return true;
 800c516:	2301      	movs	r3, #1
}
 800c518:	4618      	mov	r0, r3
 800c51a:	371c      	adds	r7, #28
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd90      	pop	{r4, r7, pc}

0800c520 <flashWaitWhileBusy>:
 * Polls the status of the write in progress (WIP) bit of the status register
 * until the write operation is completed
 **/

void flashWaitWhileBusy(void)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b082      	sub	sp, #8
 800c524:	af00      	add	r7, sp, #0
	uint8_t flash_status = 0;
 800c526:	2300      	movs	r3, #0
 800c528:	71fb      	strb	r3, [r7, #7]

	//Deassert Spi CS pin
	Spi1_DeassertCs();
 800c52a:	f000 f93d 	bl	800c7a8 <Spi1_DeassertCs>
	//Send Read Status Register 1 Command
	Flash__SpiWrite(CMD_RDSR1);   //Send RDSR command
 800c52e:	2005      	movs	r0, #5
 800c530:	f7ff ff30 	bl	800c394 <Flash__SpiWrite>
	/*Loop whiles memory is busy with a write cycle */
	do { /* Send dummy bytes to clock out data from flash */
		flash_status = Flash__SpiRead();
 800c534:	f7ff ff3c 	bl	800c3b0 <Flash__SpiRead>
 800c538:	4603      	mov	r3, r0
 800c53a:	71fb      	strb	r3, [r7, #7]
	} while (flash_status & 0x01); /* Write in progress */
 800c53c:	79fb      	ldrb	r3, [r7, #7]
 800c53e:	f003 0301 	and.w	r3, r3, #1
 800c542:	2b00      	cmp	r3, #0
 800c544:	d1f6      	bne.n	800c534 <flashWaitWhileBusy+0x14>
	//Assert Spi CS pin
	Spi1_AssertCs();
 800c546:	f000 f923 	bl	800c790 <Spi1_AssertCs>
}
 800c54a:	bf00      	nop
 800c54c:	3708      	adds	r7, #8
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}

0800c552 <Flash__PageProgram>:
 * @param[in] write_buffer Pointer to buffer containing the date to be written to flash
 * @param[in] length Number of bytes to be written
 **/

void Flash__PageProgram(uint32_t addr, uint8_t *write_buffer, uint16_t length)
{
 800c552:	b580      	push	{r7, lr}
 800c554:	b084      	sub	sp, #16
 800c556:	af00      	add	r7, sp, #0
 800c558:	60f8      	str	r0, [r7, #12]
 800c55a:	60b9      	str	r1, [r7, #8]
 800c55c:	4613      	mov	r3, r2
 800c55e:	80fb      	strh	r3, [r7, #6]
	//Wait for last operation to end
	flashWaitWhileBusy();
 800c560:	f7ff ffde 	bl	800c520 <flashWaitWhileBusy>
	//Enable write operation
	Flash__WriteEnable();
 800c564:	f7ff ff33 	bl	800c3ce <Flash__WriteEnable>

	//Deassert Spi CS pin
	Spi1_DeassertCs();
 800c568:	f000 f91e 	bl	800c7a8 <Spi1_DeassertCs>
	// Send Page Program Command
	Flash__SpiWrite(CMD_PAGEPROG);
 800c56c:	2002      	movs	r0, #2
 800c56e:	f7ff ff11 	bl	800c394 <Flash__SpiWrite>
	Flash__SpiWrite((uint8_t) (addr >> 16));
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	0c1b      	lsrs	r3, r3, #16
 800c576:	b2db      	uxtb	r3, r3
 800c578:	4618      	mov	r0, r3
 800c57a:	f7ff ff0b 	bl	800c394 <Flash__SpiWrite>
	Flash__SpiWrite((uint8_t) (addr >> 8));
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	0a1b      	lsrs	r3, r3, #8
 800c582:	b2db      	uxtb	r3, r3
 800c584:	4618      	mov	r0, r3
 800c586:	f7ff ff05 	bl	800c394 <Flash__SpiWrite>
	Flash__SpiWrite((uint8_t) addr);
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	b2db      	uxtb	r3, r3
 800c58e:	4618      	mov	r0, r3
 800c590:	f7ff ff00 	bl	800c394 <Flash__SpiWrite>


	// Check if the address match the beginning of a page
	if(addr & 0xFF)
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	b2db      	uxtb	r3, r3
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d009      	beq.n	800c5b0 <Flash__PageProgram+0x5e>
	{
		length = MIN(length, SPI_FLASH_PERWRITEPAGESIZE - (addr % SPI_FLASH_PERWRITEPAGESIZE));
 800c59c:	88fa      	ldrh	r2, [r7, #6]
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	b2db      	uxtb	r3, r3
 800c5a2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800c5a6:	4293      	cmp	r3, r2
 800c5a8:	bf28      	it	cs
 800c5aa:	4613      	movcs	r3, r2
 800c5ac:	80fb      	strh	r3, [r7, #6]
 800c5ae:	e00f      	b.n	800c5d0 <Flash__PageProgram+0x7e>
	}
	else
	{
		length = MIN(length, SPI_FLASH_PERWRITEPAGESIZE);
 800c5b0:	88fb      	ldrh	r3, [r7, #6]
 800c5b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5b6:	bf28      	it	cs
 800c5b8:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800c5bc:	80fb      	strh	r3, [r7, #6]
	}

	/* while there is data to be written on the FLASH */
	while (length--) {
 800c5be:	e007      	b.n	800c5d0 <Flash__PageProgram+0x7e>
		/* Send the current byte */
		Flash__SpiWrite(*write_buffer);
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	781b      	ldrb	r3, [r3, #0]
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f7ff fee5 	bl	800c394 <Flash__SpiWrite>
		/* Point on the next byte to be written */
		write_buffer++;
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	3301      	adds	r3, #1
 800c5ce:	60bb      	str	r3, [r7, #8]
	while (length--) {
 800c5d0:	88fb      	ldrh	r3, [r7, #6]
 800c5d2:	1e5a      	subs	r2, r3, #1
 800c5d4:	80fa      	strh	r2, [r7, #6]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d1f2      	bne.n	800c5c0 <Flash__PageProgram+0x6e>
	}
	//Assert Spi CS pin
	Spi1_AssertCs();
 800c5da:	f000 f8d9 	bl	800c790 <Spi1_AssertCs>

	// Wait for page program operation to end
	flashWaitWhileBusy();
 800c5de:	f7ff ff9f 	bl	800c520 <flashWaitWhileBusy>
}
 800c5e2:	bf00      	nop
 800c5e4:	3710      	adds	r7, #16
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}
	...

0800c5ec <Flash__SectorErase4k>:
 * @brief Flash 4kB Sector Erase routine
 * @param[in] addr Address of the sector to be erased
 **/

void Flash__SectorErase4k(uint32_t addr)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b082      	sub	sp, #8
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
	// Wait for last operation to end
	flashWaitWhileBusy();
 800c5f4:	f7ff ff94 	bl	800c520 <flashWaitWhileBusy>
	// Enable write operation
	Flash__WriteEnable();
 800c5f8:	f7ff fee9 	bl	800c3ce <Flash__WriteEnable>

	//Make sure it is a 4k sector address
	if(addr & 0xFFF)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c602:	2b00      	cmp	r3, #0
 800c604:	d003      	beq.n	800c60e <Flash__SectorErase4k+0x22>
	{
		addr = addr & 0x00FFF000;
 800c606:	687a      	ldr	r2, [r7, #4]
 800c608:	4b10      	ldr	r3, [pc, #64]	; (800c64c <Flash__SectorErase4k+0x60>)
 800c60a:	4013      	ands	r3, r2
 800c60c:	607b      	str	r3, [r7, #4]
	}

	//Deassert Spi CS pin
	Spi1_DeassertCs();
 800c60e:	f000 f8cb 	bl	800c7a8 <Spi1_DeassertCs>
	//Send Sector Erase Command
	Flash__SpiWrite(CMD_ERASE_SECTOR);
 800c612:	2020      	movs	r0, #32
 800c614:	f7ff febe 	bl	800c394 <Flash__SpiWrite>
	Flash__SpiWrite((uint8_t) (addr >> 16));
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	0c1b      	lsrs	r3, r3, #16
 800c61c:	b2db      	uxtb	r3, r3
 800c61e:	4618      	mov	r0, r3
 800c620:	f7ff feb8 	bl	800c394 <Flash__SpiWrite>
	Flash__SpiWrite((uint8_t) (addr >> 8));
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	0a1b      	lsrs	r3, r3, #8
 800c628:	b2db      	uxtb	r3, r3
 800c62a:	4618      	mov	r0, r3
 800c62c:	f7ff feb2 	bl	800c394 <Flash__SpiWrite>
	Flash__SpiWrite((uint8_t) addr);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	b2db      	uxtb	r3, r3
 800c634:	4618      	mov	r0, r3
 800c636:	f7ff fead 	bl	800c394 <Flash__SpiWrite>
	//Assert Spi CS pin
	Spi1_AssertCs();
 800c63a:	f000 f8a9 	bl	800c790 <Spi1_AssertCs>

	// Wait for sector erase 4k operation to end
	flashWaitWhileBusy();
 800c63e:	f7ff ff6f 	bl	800c520 <flashWaitWhileBusy>
}
 800c642:	bf00      	nop
 800c644:	3708      	adds	r7, #8
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}
 800c64a:	bf00      	nop
 800c64c:	00fff000 	.word	0x00fff000

0800c650 <getSonarDistance>:
 */

#include "Maxbotix.h"


uint16_t getSonarDistance(void){
 800c650:	b5b0      	push	{r4, r5, r7, lr}
 800c652:	b086      	sub	sp, #24
 800c654:	af00      	add	r7, sp, #0
	  unsigned char RxBuffer[4];
	  bool newData = false;
 800c656:	2300      	movs	r3, #0
 800c658:	75fb      	strb	r3, [r7, #23]
	  uint16_t dist_mm = 0;
 800c65a:	2300      	movs	r3, #0
 800c65c:	82bb      	strh	r3, [r7, #20]
	  unsigned char rx;
	  uint8_t tries = 0;
 800c65e:	2300      	movs	r3, #0
 800c660:	74fb      	strb	r3, [r7, #19]

	  HAL_GPIO_WritePin(MB_PWR_GPIO_Port, MB_PWR_Pin, GPIO_PIN_SET);
 800c662:	2201      	movs	r2, #1
 800c664:	2101      	movs	r1, #1
 800c666:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c66a:	f7fa f873 	bl	8006754 <HAL_GPIO_WritePin>
	  do {
	    HAL_GPIO_WritePin(MB_CTL_GPIO_Port, MB_CTL_Pin, GPIO_PIN_SET);
 800c66e:	2201      	movs	r2, #1
 800c670:	2102      	movs	r1, #2
 800c672:	4844      	ldr	r0, [pc, #272]	; (800c784 <getSonarDistance+0x134>)
 800c674:	f7fa f86e 	bl	8006754 <HAL_GPIO_WritePin>
	    HAL_Delay(1); // todo: implement HAL_Delay_Microseconds()
 800c678:	2001      	movs	r0, #1
 800c67a:	f7f8 fa39 	bl	8004af0 <HAL_Delay>
	    HAL_GPIO_WritePin(MB_CTL_GPIO_Port, MB_CTL_Pin, GPIO_PIN_RESET);
 800c67e:	2200      	movs	r2, #0
 800c680:	2102      	movs	r1, #2
 800c682:	4840      	ldr	r0, [pc, #256]	; (800c784 <getSonarDistance+0x134>)
 800c684:	f7fa f866 	bl	8006754 <HAL_GPIO_WritePin>
	    if (HAL_UART_Receive(Get_SonarHandle(), (uint8_t *)&rx, 1, 20) == HAL_OK) {
 800c688:	f7f5 fb3c 	bl	8001d04 <Get_SonarHandle>
 800c68c:	1df9      	adds	r1, r7, #7
 800c68e:	2314      	movs	r3, #20
 800c690:	2201      	movs	r2, #1
 800c692:	f7fd fcc7 	bl	800a024 <HAL_UART_Receive>
 800c696:	4603      	mov	r3, r0
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d160      	bne.n	800c75e <getSonarDistance+0x10e>
	      if ((char)rx == 'R') {
 800c69c:	79fb      	ldrb	r3, [r7, #7]
 800c69e:	2b52      	cmp	r3, #82	; 0x52
 800c6a0:	d15a      	bne.n	800c758 <getSonarDistance+0x108>
	        if (HAL_UART_Receive(Get_SonarHandle(), (uint8_t *)&RxBuffer, 4, 20) == HAL_OK) {
 800c6a2:	f7f5 fb2f 	bl	8001d04 <Get_SonarHandle>
 800c6a6:	f107 0108 	add.w	r1, r7, #8
 800c6aa:	2314      	movs	r3, #20
 800c6ac:	2204      	movs	r2, #4
 800c6ae:	f7fd fcb9 	bl	800a024 <HAL_UART_Receive>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d155      	bne.n	800c764 <getSonarDistance+0x114>
	          if (isdigit(RxBuffer[3])) {
 800c6b8:	7afb      	ldrb	r3, [r7, #11]
 800c6ba:	3301      	adds	r3, #1
 800c6bc:	4a32      	ldr	r2, [pc, #200]	; (800c788 <getSonarDistance+0x138>)
 800c6be:	4413      	add	r3, r2
 800c6c0:	781b      	ldrb	r3, [r3, #0]
 800c6c2:	f003 0304 	and.w	r3, r3, #4
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d001      	beq.n	800c6ce <getSonarDistance+0x7e>
	            newData = true;
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	75fb      	strb	r3, [r7, #23]
	          }
	          if (newData) {
 800c6ce:	7dfb      	ldrb	r3, [r7, #23]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d047      	beq.n	800c764 <getSonarDistance+0x114>
	            for (int i = 0; i < 4; i++)
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	60fb      	str	r3, [r7, #12]
 800c6d8:	e035      	b.n	800c746 <getSonarDistance+0xf6>
	              dist_mm += (RxBuffer[3 - i] - '0') * pow(10, i);
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	f1c3 0303 	rsb	r3, r3, #3
 800c6e0:	3318      	adds	r3, #24
 800c6e2:	443b      	add	r3, r7
 800c6e4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800c6e8:	3b30      	subs	r3, #48	; 0x30
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f7f3 fef2 	bl	80004d4 <__aeabi_i2d>
 800c6f0:	4604      	mov	r4, r0
 800c6f2:	460d      	mov	r5, r1
 800c6f4:	68f8      	ldr	r0, [r7, #12]
 800c6f6:	f7f3 feed 	bl	80004d4 <__aeabi_i2d>
 800c6fa:	4602      	mov	r2, r0
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	f04f 0000 	mov.w	r0, #0
 800c702:	4922      	ldr	r1, [pc, #136]	; (800c78c <getSonarDistance+0x13c>)
 800c704:	f004 fe6c 	bl	80113e0 <pow>
 800c708:	4602      	mov	r2, r0
 800c70a:	460b      	mov	r3, r1
 800c70c:	4620      	mov	r0, r4
 800c70e:	4629      	mov	r1, r5
 800c710:	f7f3 ff4a 	bl	80005a8 <__aeabi_dmul>
 800c714:	4602      	mov	r2, r0
 800c716:	460b      	mov	r3, r1
 800c718:	4614      	mov	r4, r2
 800c71a:	461d      	mov	r5, r3
 800c71c:	8abb      	ldrh	r3, [r7, #20]
 800c71e:	4618      	mov	r0, r3
 800c720:	f7f3 fed8 	bl	80004d4 <__aeabi_i2d>
 800c724:	4602      	mov	r2, r0
 800c726:	460b      	mov	r3, r1
 800c728:	4620      	mov	r0, r4
 800c72a:	4629      	mov	r1, r5
 800c72c:	f7f3 fd86 	bl	800023c <__adddf3>
 800c730:	4602      	mov	r2, r0
 800c732:	460b      	mov	r3, r1
 800c734:	4610      	mov	r0, r2
 800c736:	4619      	mov	r1, r3
 800c738:	f7f4 f9e6 	bl	8000b08 <__aeabi_d2uiz>
 800c73c:	4603      	mov	r3, r0
 800c73e:	82bb      	strh	r3, [r7, #20]
	            for (int i = 0; i < 4; i++)
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	3301      	adds	r3, #1
 800c744:	60fb      	str	r3, [r7, #12]
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	2b03      	cmp	r3, #3
 800c74a:	ddc6      	ble.n	800c6da <getSonarDistance+0x8a>
	            if (dist_mm==0)
 800c74c:	8abb      	ldrh	r3, [r7, #20]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d108      	bne.n	800c764 <getSonarDistance+0x114>
	            	newData = false;
 800c752:	2300      	movs	r3, #0
 800c754:	75fb      	strb	r3, [r7, #23]
 800c756:	e005      	b.n	800c764 <getSonarDistance+0x114>
	          }
	        }
	      } else {
	        newData = false;
 800c758:	2300      	movs	r3, #0
 800c75a:	75fb      	strb	r3, [r7, #23]
 800c75c:	e002      	b.n	800c764 <getSonarDistance+0x114>
	      }
	    } else {
	      tries++;
 800c75e:	7cfb      	ldrb	r3, [r7, #19]
 800c760:	3301      	adds	r3, #1
 800c762:	74fb      	strb	r3, [r7, #19]
	    }
	  } while (newData == false && tries < MAX_SONAR_TRIES - 1);
 800c764:	7dfb      	ldrb	r3, [r7, #23]
 800c766:	f083 0301 	eor.w	r3, r3, #1
 800c76a:	b2db      	uxtb	r3, r3
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d003      	beq.n	800c778 <getSonarDistance+0x128>
 800c770:	7cfb      	ldrb	r3, [r7, #19]
 800c772:	2b03      	cmp	r3, #3
 800c774:	f67f af7b 	bls.w	800c66e <getSonarDistance+0x1e>
	  return dist_mm;
 800c778:	8abb      	ldrh	r3, [r7, #20]
}
 800c77a:	4618      	mov	r0, r3
 800c77c:	3718      	adds	r7, #24
 800c77e:	46bd      	mov	sp, r7
 800c780:	bdb0      	pop	{r4, r5, r7, pc}
 800c782:	bf00      	nop
 800c784:	48000800 	.word	0x48000800
 800c788:	080135d0 	.word	0x080135d0
 800c78c:	40240000 	.word	0x40240000

0800c790 <Spi1_AssertCs>:
 */

#include "Spi.h"

void Spi1_AssertCs(void)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	af00      	add	r7, sp, #0
	//Assert SPI1_NSS pin
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 800c794:	2201      	movs	r2, #1
 800c796:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c79a:	4802      	ldr	r0, [pc, #8]	; (800c7a4 <Spi1_AssertCs+0x14>)
 800c79c:	f7f9 ffda 	bl	8006754 <HAL_GPIO_WritePin>
}
 800c7a0:	bf00      	nop
 800c7a2:	bd80      	pop	{r7, pc}
 800c7a4:	48000400 	.word	0x48000400

0800c7a8 <Spi1_DeassertCs>:

void Spi1_DeassertCs(void)
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	af00      	add	r7, sp, #0
	//Deassert SPI1_NSS pin
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c7b2:	4802      	ldr	r0, [pc, #8]	; (800c7bc <Spi1_DeassertCs+0x14>)
 800c7b4:	f7f9 ffce 	bl	8006754 <HAL_GPIO_WritePin>
}
 800c7b8:	bf00      	nop
 800c7ba:	bd80      	pop	{r7, pc}
 800c7bc:	48000400 	.word	0x48000400

0800c7c0 <Spi1_Transmit>:

bool Spi1_Transmit(uint8_t *buff, uint16_t size)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b084      	sub	sp, #16
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
 800c7c8:	460b      	mov	r3, r1
 800c7ca:	807b      	strh	r3, [r7, #2]
  bool status = false;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	73fb      	strb	r3, [r7, #15]
  if(HAL_SPI_Transmit(Get_SpiHandle(), buff, size, SPI_TIMEOUT) == HAL_OK)
 800c7d0:	f7f5 faa2 	bl	8001d18 <Get_SpiHandle>
 800c7d4:	887a      	ldrh	r2, [r7, #2]
 800c7d6:	2364      	movs	r3, #100	; 0x64
 800c7d8:	6879      	ldr	r1, [r7, #4]
 800c7da:	f7fc f84e 	bl	800887a <HAL_SPI_Transmit>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d101      	bne.n	800c7e8 <Spi1_Transmit+0x28>
  {
    status  = true;
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800c7e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	3710      	adds	r7, #16
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd80      	pop	{r7, pc}

0800c7f2 <Spi1_Receive>:


bool Spi1_Receive(uint8_t *buff, uint16_t size)
{
 800c7f2:	b580      	push	{r7, lr}
 800c7f4:	b084      	sub	sp, #16
 800c7f6:	af00      	add	r7, sp, #0
 800c7f8:	6078      	str	r0, [r7, #4]
 800c7fa:	460b      	mov	r3, r1
 800c7fc:	807b      	strh	r3, [r7, #2]
  bool status = false;
 800c7fe:	2300      	movs	r3, #0
 800c800:	73fb      	strb	r3, [r7, #15]
  if(HAL_SPI_Receive(Get_SpiHandle(), buff, size, SPI_TIMEOUT) == HAL_OK)
 800c802:	f7f5 fa89 	bl	8001d18 <Get_SpiHandle>
 800c806:	887a      	ldrh	r2, [r7, #2]
 800c808:	2364      	movs	r3, #100	; 0x64
 800c80a:	6879      	ldr	r1, [r7, #4]
 800c80c:	f7fc f9c5 	bl	8008b9a <HAL_SPI_Receive>
 800c810:	4603      	mov	r3, r0
 800c812:	2b00      	cmp	r3, #0
 800c814:	d101      	bne.n	800c81a <Spi1_Receive+0x28>
  {
    status = true;
 800c816:	2301      	movs	r3, #1
 800c818:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c81a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3710      	adds	r7, #16
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}

0800c824 <serialPutStr>:

#include "Uart.h"


void serialPutStr(const char *data)
{
 800c824:	b590      	push	{r4, r7, lr}
 800c826:	b083      	sub	sp, #12
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
   //Get exclusive access
  //osAcquireMutex(&uartMutex);
  HAL_UART_Transmit(Get_DebugHandle(),(uint8_t *)data, strlen(data),DEBUG_UART_TIMEOUT);
 800c82c:	f7f5 fa60 	bl	8001cf0 <Get_DebugHandle>
 800c830:	4604      	mov	r4, r0
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	f7f3 fca4 	bl	8000180 <strlen>
 800c838:	4603      	mov	r3, r0
 800c83a:	b29a      	uxth	r2, r3
 800c83c:	230a      	movs	r3, #10
 800c83e:	6879      	ldr	r1, [r7, #4]
 800c840:	4620      	mov	r0, r4
 800c842:	f7fd fb69 	bl	8009f18 <HAL_UART_Transmit>
  //osReleaseMutex(&uartMutex);

}
 800c846:	bf00      	nop
 800c848:	370c      	adds	r7, #12
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd90      	pop	{r4, r7, pc}
	...

0800c850 <terminalTaskHandler>:



/* USER CODE END Header_terminalTaskHandler */
void terminalTaskHandler(void const * argument)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b084      	sub	sp, #16
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	int tCommandReady = 0;
 800c858:	2300      	movs	r3, #0
 800c85a:	60fb      	str	r3, [r7, #12]
	char tRxedChar;



	HAL_UART_Receive_IT(Get_DebugHandle(),(uint8_t*)uartData,UART_RECEIVE_SIZE);
 800c85c:	f7f5 fa48 	bl	8001cf0 <Get_DebugHandle>
 800c860:	4603      	mov	r3, r0
 800c862:	2201      	movs	r2, #1
 800c864:	4911      	ldr	r1, [pc, #68]	; (800c8ac <terminalTaskHandler+0x5c>)
 800c866:	4618      	mov	r0, r3
 800c868:	f7fd fca0 	bl	800a1ac <HAL_UART_Receive_IT>
	/* Infinite loop */
	serialPutStr("Terminal Thread Initialized");
 800c86c:	4810      	ldr	r0, [pc, #64]	; (800c8b0 <terminalTaskHandler+0x60>)
 800c86e:	f7ff ffd9 	bl	800c824 <serialPutStr>
	for(;;)
	{
		/* Process Terminal Commands */
		if(xQueueReceive(Get_TerminalQueueHandle(),&tRxedChar,QUEUE_TIMEOUT))
 800c872:	f7f5 fa5b 	bl	8001d2c <Get_TerminalQueueHandle>
 800c876:	f107 030b 	add.w	r3, r7, #11
 800c87a:	220a      	movs	r2, #10
 800c87c:	4619      	mov	r1, r3
 800c87e:	f000 fe9d 	bl	800d5bc <xQueueReceive>
 800c882:	4603      	mov	r3, r0
 800c884:	2b00      	cmp	r3, #0
 800c886:	d00c      	beq.n	800c8a2 <terminalTaskHandler+0x52>
		{
			tCommandReady = CommandLineBuildCommand(tRxedChar);
 800c888:	7afb      	ldrb	r3, [r7, #11]
 800c88a:	4618      	mov	r0, r3
 800c88c:	f000 f814 	bl	800c8b8 <CommandLineBuildCommand>
 800c890:	60f8      	str	r0, [r7, #12]
			if(tCommandReady)
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d004      	beq.n	800c8a2 <terminalTaskHandler+0x52>
			{
				CommandLineProcessCommand(gCommandBuffer);
 800c898:	4806      	ldr	r0, [pc, #24]	; (800c8b4 <terminalTaskHandler+0x64>)
 800c89a:	f000 f855 	bl	800c948 <CommandLineProcessCommand>
				tCommandReady = 0;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	60fb      	str	r3, [r7, #12]
			}
		}
		osDelay(1);
 800c8a2:	2001      	movs	r0, #1
 800c8a4:	f000 f93f 	bl	800cb26 <osDelay>
		if(xQueueReceive(Get_TerminalQueueHandle(),&tRxedChar,QUEUE_TIMEOUT))
 800c8a8:	e7e3      	b.n	800c872 <terminalTaskHandler+0x22>
 800c8aa:	bf00      	nop
 800c8ac:	20001a08 	.word	0x20001a08
 800c8b0:	0801298c 	.word	0x0801298c
 800c8b4:	20001a0c 	.word	0x20001a0c

0800c8b8 <CommandLineBuildCommand>:
}


static uint16_t commandBuilderIdx = 0;
int CommandLineBuildCommand(char nextChar)
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b083      	sub	sp, #12
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	4603      	mov	r3, r0
 800c8c0:	71fb      	strb	r3, [r7, #7]
	/* Don't store any new line characters or spaces. */
	if ((nextChar == '\n') || (nextChar == ' ') || (nextChar == '\t'))
 800c8c2:	79fb      	ldrb	r3, [r7, #7]
 800c8c4:	2b0a      	cmp	r3, #10
 800c8c6:	d005      	beq.n	800c8d4 <CommandLineBuildCommand+0x1c>
 800c8c8:	79fb      	ldrb	r3, [r7, #7]
 800c8ca:	2b20      	cmp	r3, #32
 800c8cc:	d002      	beq.n	800c8d4 <CommandLineBuildCommand+0x1c>
 800c8ce:	79fb      	ldrb	r3, [r7, #7]
 800c8d0:	2b09      	cmp	r3, #9
 800c8d2:	d101      	bne.n	800c8d8 <CommandLineBuildCommand+0x20>
	{
		return false;
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	e02d      	b.n	800c934 <CommandLineBuildCommand+0x7c>
	}
	/* The completed command has been received. Replace the final carriage
	 * return character with a NULL character to help with processing the
	 * command. */
	if (nextChar == '\r')
 800c8d8:	79fb      	ldrb	r3, [r7, #7]
 800c8da:	2b0d      	cmp	r3, #13
 800c8dc:	d10a      	bne.n	800c8f4 <CommandLineBuildCommand+0x3c>
	{
		gCommandBuffer[commandBuilderIdx] = '\0';
 800c8de:	4b18      	ldr	r3, [pc, #96]	; (800c940 <CommandLineBuildCommand+0x88>)
 800c8e0:	881b      	ldrh	r3, [r3, #0]
 800c8e2:	461a      	mov	r2, r3
 800c8e4:	4b17      	ldr	r3, [pc, #92]	; (800c944 <CommandLineBuildCommand+0x8c>)
 800c8e6:	2100      	movs	r1, #0
 800c8e8:	5499      	strb	r1, [r3, r2]
		commandBuilderIdx = 0;
 800c8ea:	4b15      	ldr	r3, [pc, #84]	; (800c940 <CommandLineBuildCommand+0x88>)
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	801a      	strh	r2, [r3, #0]
		return true;
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	e01f      	b.n	800c934 <CommandLineBuildCommand+0x7c>
	}
	/* Convert the incoming character to uppercase. This matches the case
	 * of commands in the command table. Then store the received character
	 * in the command buffer. */
	gCommandBuffer[commandBuilderIdx] = TO_UPPER(nextChar);
 800c8f4:	79fb      	ldrb	r3, [r7, #7]
 800c8f6:	2b60      	cmp	r3, #96	; 0x60
 800c8f8:	d906      	bls.n	800c908 <CommandLineBuildCommand+0x50>
 800c8fa:	79fb      	ldrb	r3, [r7, #7]
 800c8fc:	2b7a      	cmp	r3, #122	; 0x7a
 800c8fe:	d803      	bhi.n	800c908 <CommandLineBuildCommand+0x50>
 800c900:	79fb      	ldrb	r3, [r7, #7]
 800c902:	3b20      	subs	r3, #32
 800c904:	b2db      	uxtb	r3, r3
 800c906:	e000      	b.n	800c90a <CommandLineBuildCommand+0x52>
 800c908:	79fb      	ldrb	r3, [r7, #7]
 800c90a:	4a0d      	ldr	r2, [pc, #52]	; (800c940 <CommandLineBuildCommand+0x88>)
 800c90c:	8812      	ldrh	r2, [r2, #0]
 800c90e:	4611      	mov	r1, r2
 800c910:	4a0c      	ldr	r2, [pc, #48]	; (800c944 <CommandLineBuildCommand+0x8c>)
 800c912:	5453      	strb	r3, [r2, r1]
	commandBuilderIdx++;
 800c914:	4b0a      	ldr	r3, [pc, #40]	; (800c940 <CommandLineBuildCommand+0x88>)
 800c916:	881b      	ldrh	r3, [r3, #0]
 800c918:	3301      	adds	r3, #1
 800c91a:	b29a      	uxth	r2, r3
 800c91c:	4b08      	ldr	r3, [pc, #32]	; (800c940 <CommandLineBuildCommand+0x88>)
 800c91e:	801a      	strh	r2, [r3, #0]
	/* If the command is too long, reset the index and process
	 * the current command buffer. */
	if (commandBuilderIdx >= MAX_COMMAND_LEN)
 800c920:	4b07      	ldr	r3, [pc, #28]	; (800c940 <CommandLineBuildCommand+0x88>)
 800c922:	881b      	ldrh	r3, [r3, #0]
 800c924:	2b77      	cmp	r3, #119	; 0x77
 800c926:	d904      	bls.n	800c932 <CommandLineBuildCommand+0x7a>
	{
		commandBuilderIdx = 0;
 800c928:	4b05      	ldr	r3, [pc, #20]	; (800c940 <CommandLineBuildCommand+0x88>)
 800c92a:	2200      	movs	r2, #0
 800c92c:	801a      	strh	r2, [r3, #0]
		return true;
 800c92e:	2301      	movs	r3, #1
 800c930:	e000      	b.n	800c934 <CommandLineBuildCommand+0x7c>
	}

	return false;
 800c932:	2300      	movs	r3, #0

}
 800c934:	4618      	mov	r0, r3
 800c936:	370c      	adds	r7, #12
 800c938:	46bd      	mov	sp, r7
 800c93a:	bc80      	pop	{r7}
 800c93c:	4770      	bx	lr
 800c93e:	bf00      	nop
 800c940:	20001af0 	.word	0x20001af0
 800c944:	20001a0c 	.word	0x20001a0c

0800c948 <CommandLineProcessCommand>:

void CommandLineProcessCommand(char * buffer)
{
 800c948:	b590      	push	{r4, r7, lr}
 800c94a:	b087      	sub	sp, #28
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]

	int idx;
	int CommandFound = false;
 800c950:	2300      	movs	r3, #0
 800c952:	613b      	str	r3, [r7, #16]
	//char *Com= strtok(buffer,"+");
	char *Arg = strtok(NULL,"+");
 800c954:	491e      	ldr	r1, [pc, #120]	; (800c9d0 <CommandLineProcessCommand+0x88>)
 800c956:	2000      	movs	r0, #0
 800c958:	f004 f840 	bl	80109dc <strtok>
 800c95c:	60f8      	str	r0, [r7, #12]

	/* Search for the command in the command table until it is found or
	 * the end of the table is reached. If the command is found, break
	 * out of the loop. */
	for (idx = 0; gCommandTable[idx].name != NULL; idx++)
 800c95e:	2300      	movs	r3, #0
 800c960:	617b      	str	r3, [r7, #20]
 800c962:	e020      	b.n	800c9a6 <CommandLineProcessCommand+0x5e>
	{
		if (strncmp(gCommandTable[idx].name, buffer,strlen(gCommandTable[idx].name)) == 0)
 800c964:	4a1b      	ldr	r2, [pc, #108]	; (800c9d4 <CommandLineProcessCommand+0x8c>)
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 800c96c:	4a19      	ldr	r2, [pc, #100]	; (800c9d4 <CommandLineProcessCommand+0x8c>)
 800c96e:	697b      	ldr	r3, [r7, #20]
 800c970:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c974:	4618      	mov	r0, r3
 800c976:	f7f3 fc03 	bl	8000180 <strlen>
 800c97a:	4603      	mov	r3, r0
 800c97c:	461a      	mov	r2, r3
 800c97e:	6879      	ldr	r1, [r7, #4]
 800c980:	4620      	mov	r0, r4
 800c982:	f004 f816 	bl	80109b2 <strncmp>
 800c986:	4603      	mov	r3, r0
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d109      	bne.n	800c9a0 <CommandLineProcessCommand+0x58>
		{
			CommandFound = true;
 800c98c:	2301      	movs	r3, #1
 800c98e:	613b      	str	r3, [r7, #16]
			(*gCommandTable[idx].function)(Arg);
 800c990:	4a10      	ldr	r2, [pc, #64]	; (800c9d4 <CommandLineProcessCommand+0x8c>)
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	00db      	lsls	r3, r3, #3
 800c996:	4413      	add	r3, r2
 800c998:	685b      	ldr	r3, [r3, #4]
 800c99a:	68f8      	ldr	r0, [r7, #12]
 800c99c:	4798      	blx	r3
			break;
 800c99e:	e008      	b.n	800c9b2 <CommandLineProcessCommand+0x6a>
	for (idx = 0; gCommandTable[idx].name != NULL; idx++)
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	3301      	adds	r3, #1
 800c9a4:	617b      	str	r3, [r7, #20]
 800c9a6:	4a0b      	ldr	r2, [pc, #44]	; (800c9d4 <CommandLineProcessCommand+0x8c>)
 800c9a8:	697b      	ldr	r3, [r7, #20]
 800c9aa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d1d8      	bne.n	800c964 <CommandLineProcessCommand+0x1c>
		}
	}
	/* If the command was found, call the command function. Otherwise,
	 * output an error message. */
	if (CommandFound==false)
 800c9b2:	693b      	ldr	r3, [r7, #16]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d107      	bne.n	800c9c8 <CommandLineProcessCommand+0x80>
	{
		snprintf(TerminalMsgBuffer, sizeof(TerminalMsgBuffer), "ERROR,Command not found\n");
 800c9b8:	4a07      	ldr	r2, [pc, #28]	; (800c9d8 <CommandLineProcessCommand+0x90>)
 800c9ba:	2164      	movs	r1, #100	; 0x64
 800c9bc:	4807      	ldr	r0, [pc, #28]	; (800c9dc <CommandLineProcessCommand+0x94>)
 800c9be:	f003 ff61 	bl	8010884 <sniprintf>
		serialPutStr(TerminalMsgBuffer);
 800c9c2:	4806      	ldr	r0, [pc, #24]	; (800c9dc <CommandLineProcessCommand+0x94>)
 800c9c4:	f7ff ff2e 	bl	800c824 <serialPutStr>
	}
}
 800c9c8:	bf00      	nop
 800c9ca:	371c      	adds	r7, #28
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd90      	pop	{r4, r7, pc}
 800c9d0:	080129a8 	.word	0x080129a8
 800c9d4:	08012f90 	.word	0x08012f90
 800c9d8:	080129ac 	.word	0x080129ac
 800c9dc:	20001a88 	.word	0x20001a88

0800c9e0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b082      	sub	sp, #8
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]

	if(huart->Instance==USART2)
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	4a0c      	ldr	r2, [pc, #48]	; (800ca20 <HAL_UART_RxCpltCallback+0x40>)
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d112      	bne.n	800ca18 <HAL_UART_RxCpltCallback+0x38>
	{
		HAL_UART_Receive_IT(Get_DebugHandle(),(uint8_t*)uartData,UART_RECEIVE_SIZE);
 800c9f2:	f7f5 f97d 	bl	8001cf0 <Get_DebugHandle>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	2201      	movs	r2, #1
 800c9fa:	490a      	ldr	r1, [pc, #40]	; (800ca24 <HAL_UART_RxCpltCallback+0x44>)
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	f7fd fbd5 	bl	800a1ac <HAL_UART_Receive_IT>
		cValuetoPost = (char)uartData[0];
 800ca02:	4b08      	ldr	r3, [pc, #32]	; (800ca24 <HAL_UART_RxCpltCallback+0x44>)
 800ca04:	781a      	ldrb	r2, [r3, #0]
 800ca06:	4b08      	ldr	r3, [pc, #32]	; (800ca28 <HAL_UART_RxCpltCallback+0x48>)
 800ca08:	701a      	strb	r2, [r3, #0]
		xQueueSendToBackFromISR(Get_TerminalQueueHandle(),(void*)&cValuetoPost,&xHigherPrioritTaskWoken);
 800ca0a:	f7f5 f98f 	bl	8001d2c <Get_TerminalQueueHandle>
 800ca0e:	2300      	movs	r3, #0
 800ca10:	4a06      	ldr	r2, [pc, #24]	; (800ca2c <HAL_UART_RxCpltCallback+0x4c>)
 800ca12:	4905      	ldr	r1, [pc, #20]	; (800ca28 <HAL_UART_RxCpltCallback+0x48>)
 800ca14:	f000 fcac 	bl	800d370 <xQueueGenericSendFromISR>
	}
}
 800ca18:	bf00      	nop
 800ca1a:	3708      	adds	r7, #8
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}
 800ca20:	40004400 	.word	0x40004400
 800ca24:	20001a08 	.word	0x20001a08
 800ca28:	20001a04 	.word	0x20001a04
 800ca2c:	20001aec 	.word	0x20001aec

0800ca30 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ca30:	b480      	push	{r7}
 800ca32:	b085      	sub	sp, #20
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	4603      	mov	r3, r0
 800ca38:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ca3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ca42:	2b84      	cmp	r3, #132	; 0x84
 800ca44:	d005      	beq.n	800ca52 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ca46:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	4413      	add	r3, r2
 800ca4e:	3303      	adds	r3, #3
 800ca50:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ca52:	68fb      	ldr	r3, [r7, #12]
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3714      	adds	r7, #20
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bc80      	pop	{r7}
 800ca5c:	4770      	bx	lr

0800ca5e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800ca5e:	b480      	push	{r7}
 800ca60:	b083      	sub	sp, #12
 800ca62:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca64:	f3ef 8305 	mrs	r3, IPSR
 800ca68:	607b      	str	r3, [r7, #4]
  return(result);
 800ca6a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	bf14      	ite	ne
 800ca70:	2301      	movne	r3, #1
 800ca72:	2300      	moveq	r3, #0
 800ca74:	b2db      	uxtb	r3, r3
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	370c      	adds	r7, #12
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bc80      	pop	{r7}
 800ca7e:	4770      	bx	lr

0800ca80 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ca84:	f001 fb70 	bl	800e168 <vTaskStartScheduler>
  
  return osOK;
 800ca88:	2300      	movs	r3, #0
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	bd80      	pop	{r7, pc}

0800ca8e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ca8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca90:	b089      	sub	sp, #36	; 0x24
 800ca92:	af04      	add	r7, sp, #16
 800ca94:	6078      	str	r0, [r7, #4]
 800ca96:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	695b      	ldr	r3, [r3, #20]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d020      	beq.n	800cae2 <osThreadCreate+0x54>
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	699b      	ldr	r3, [r3, #24]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d01c      	beq.n	800cae2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	685c      	ldr	r4, [r3, #4]
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681d      	ldr	r5, [r3, #0]
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	691e      	ldr	r6, [r3, #16]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800caba:	4618      	mov	r0, r3
 800cabc:	f7ff ffb8 	bl	800ca30 <makeFreeRtosPriority>
 800cac0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	695b      	ldr	r3, [r3, #20]
 800cac6:	687a      	ldr	r2, [r7, #4]
 800cac8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800caca:	9202      	str	r2, [sp, #8]
 800cacc:	9301      	str	r3, [sp, #4]
 800cace:	9100      	str	r1, [sp, #0]
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	4632      	mov	r2, r6
 800cad4:	4629      	mov	r1, r5
 800cad6:	4620      	mov	r0, r4
 800cad8:	f001 f960 	bl	800dd9c <xTaskCreateStatic>
 800cadc:	4603      	mov	r3, r0
 800cade:	60fb      	str	r3, [r7, #12]
 800cae0:	e01c      	b.n	800cb1c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	685c      	ldr	r4, [r3, #4]
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800caee:	b29e      	uxth	r6, r3
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800caf6:	4618      	mov	r0, r3
 800caf8:	f7ff ff9a 	bl	800ca30 <makeFreeRtosPriority>
 800cafc:	4602      	mov	r2, r0
 800cafe:	f107 030c 	add.w	r3, r7, #12
 800cb02:	9301      	str	r3, [sp, #4]
 800cb04:	9200      	str	r2, [sp, #0]
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	4632      	mov	r2, r6
 800cb0a:	4629      	mov	r1, r5
 800cb0c:	4620      	mov	r0, r4
 800cb0e:	f001 f9a2 	bl	800de56 <xTaskCreate>
 800cb12:	4603      	mov	r3, r0
 800cb14:	2b01      	cmp	r3, #1
 800cb16:	d001      	beq.n	800cb1c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	e000      	b.n	800cb1e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
}
 800cb1e:	4618      	mov	r0, r3
 800cb20:	3714      	adds	r7, #20
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cb26 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800cb26:	b580      	push	{r7, lr}
 800cb28:	b084      	sub	sp, #16
 800cb2a:	af00      	add	r7, sp, #0
 800cb2c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d001      	beq.n	800cb3c <osDelay+0x16>
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	e000      	b.n	800cb3e <osDelay+0x18>
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f001 fade 	bl	800e100 <vTaskDelay>
  
  return osOK;
 800cb44:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800cb46:	4618      	mov	r0, r3
 800cb48:	3710      	adds	r7, #16
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bd80      	pop	{r7, pc}

0800cb4e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800cb4e:	b580      	push	{r7, lr}
 800cb50:	b082      	sub	sp, #8
 800cb52:	af00      	add	r7, sp, #0
 800cb54:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	685b      	ldr	r3, [r3, #4]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d007      	beq.n	800cb6e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	685b      	ldr	r3, [r3, #4]
 800cb62:	4619      	mov	r1, r3
 800cb64:	2001      	movs	r0, #1
 800cb66:	f000 faea 	bl	800d13e <xQueueCreateMutexStatic>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	e003      	b.n	800cb76 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800cb6e:	2001      	movs	r0, #1
 800cb70:	f000 facd 	bl	800d10e <xQueueCreateMutex>
 800cb74:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3708      	adds	r7, #8
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}
	...

0800cb80 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b084      	sub	sp, #16
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
 800cb88:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d101      	bne.n	800cb98 <osMutexWait+0x18>
    return osErrorParameter;
 800cb94:	2380      	movs	r3, #128	; 0x80
 800cb96:	e03a      	b.n	800cc0e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800cb98:	2300      	movs	r3, #0
 800cb9a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cba2:	d103      	bne.n	800cbac <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800cba4:	f04f 33ff 	mov.w	r3, #4294967295
 800cba8:	60fb      	str	r3, [r7, #12]
 800cbaa:	e009      	b.n	800cbc0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d006      	beq.n	800cbc0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d101      	bne.n	800cbc0 <osMutexWait+0x40>
      ticks = 1;
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800cbc0:	f7ff ff4d 	bl	800ca5e <inHandlerMode>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d017      	beq.n	800cbfa <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800cbca:	f107 0308 	add.w	r3, r7, #8
 800cbce:	461a      	mov	r2, r3
 800cbd0:	2100      	movs	r1, #0
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f000 fede 	bl	800d994 <xQueueReceiveFromISR>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	2b01      	cmp	r3, #1
 800cbdc:	d001      	beq.n	800cbe2 <osMutexWait+0x62>
      return osErrorOS;
 800cbde:	23ff      	movs	r3, #255	; 0xff
 800cbe0:	e015      	b.n	800cc0e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d011      	beq.n	800cc0c <osMutexWait+0x8c>
 800cbe8:	4b0b      	ldr	r3, [pc, #44]	; (800cc18 <osMutexWait+0x98>)
 800cbea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbee:	601a      	str	r2, [r3, #0]
 800cbf0:	f3bf 8f4f 	dsb	sy
 800cbf4:	f3bf 8f6f 	isb	sy
 800cbf8:	e008      	b.n	800cc0c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800cbfa:	68f9      	ldr	r1, [r7, #12]
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f000 fdbd 	bl	800d77c <xQueueSemaphoreTake>
 800cc02:	4603      	mov	r3, r0
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	d001      	beq.n	800cc0c <osMutexWait+0x8c>
    return osErrorOS;
 800cc08:	23ff      	movs	r3, #255	; 0xff
 800cc0a:	e000      	b.n	800cc0e <osMutexWait+0x8e>
  }
  
  return osOK;
 800cc0c:	2300      	movs	r3, #0
}
 800cc0e:	4618      	mov	r0, r3
 800cc10:	3710      	adds	r7, #16
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}
 800cc16:	bf00      	nop
 800cc18:	e000ed04 	.word	0xe000ed04

0800cc1c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b084      	sub	sp, #16
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800cc24:	2300      	movs	r3, #0
 800cc26:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800cc2c:	f7ff ff17 	bl	800ca5e <inHandlerMode>
 800cc30:	4603      	mov	r3, r0
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d016      	beq.n	800cc64 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800cc36:	f107 0308 	add.w	r3, r7, #8
 800cc3a:	4619      	mov	r1, r3
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f000 fc2f 	bl	800d4a0 <xQueueGiveFromISR>
 800cc42:	4603      	mov	r3, r0
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	d001      	beq.n	800cc4c <osMutexRelease+0x30>
      return osErrorOS;
 800cc48:	23ff      	movs	r3, #255	; 0xff
 800cc4a:	e017      	b.n	800cc7c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d013      	beq.n	800cc7a <osMutexRelease+0x5e>
 800cc52:	4b0c      	ldr	r3, [pc, #48]	; (800cc84 <osMutexRelease+0x68>)
 800cc54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc58:	601a      	str	r2, [r3, #0]
 800cc5a:	f3bf 8f4f 	dsb	sy
 800cc5e:	f3bf 8f6f 	isb	sy
 800cc62:	e00a      	b.n	800cc7a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800cc64:	2300      	movs	r3, #0
 800cc66:	2200      	movs	r2, #0
 800cc68:	2100      	movs	r1, #0
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f000 fa82 	bl	800d174 <xQueueGenericSend>
 800cc70:	4603      	mov	r3, r0
 800cc72:	2b01      	cmp	r3, #1
 800cc74:	d001      	beq.n	800cc7a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800cc76:	23ff      	movs	r3, #255	; 0xff
 800cc78:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	3710      	adds	r7, #16
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}
 800cc84:	e000ed04 	.word	0xe000ed04

0800cc88 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800cc88:	b590      	push	{r4, r7, lr}
 800cc8a:	b085      	sub	sp, #20
 800cc8c:	af02      	add	r7, sp, #8
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	689b      	ldr	r3, [r3, #8]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d011      	beq.n	800ccbe <osMessageCreate+0x36>
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	68db      	ldr	r3, [r3, #12]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d00d      	beq.n	800ccbe <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	6818      	ldr	r0, [r3, #0]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	6859      	ldr	r1, [r3, #4]
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	689a      	ldr	r2, [r3, #8]
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	68db      	ldr	r3, [r3, #12]
 800ccb2:	2400      	movs	r4, #0
 800ccb4:	9400      	str	r4, [sp, #0]
 800ccb6:	f000 f939 	bl	800cf2c <xQueueGenericCreateStatic>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	e008      	b.n	800ccd0 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6818      	ldr	r0, [r3, #0]
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	685b      	ldr	r3, [r3, #4]
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	4619      	mov	r1, r3
 800ccca:	f000 f9a7 	bl	800d01c <xQueueGenericCreate>
 800ccce:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	370c      	adds	r7, #12
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd90      	pop	{r4, r7, pc}

0800ccd8 <osThreadSuspendAll>:
/**
* @brief  Suspend execution of a all active threads.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspendAll (void)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	af00      	add	r7, sp, #0
  vTaskSuspendAll();
 800ccdc:	f001 fab4 	bl	800e248 <vTaskSuspendAll>
  
  return osOK;
 800cce0:	2300      	movs	r3, #0
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	bd80      	pop	{r7, pc}

0800cce6 <osThreadResumeAll>:
/**
* @brief  Resume execution of a all suspended threads.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResumeAll (void)
{
 800cce6:	b580      	push	{r7, lr}
 800cce8:	af00      	add	r7, sp, #0
  if (xTaskResumeAll() == pdTRUE)
 800ccea:	f001 fabb 	bl	800e264 <xTaskResumeAll>
 800ccee:	4603      	mov	r3, r0
 800ccf0:	2b01      	cmp	r3, #1
 800ccf2:	d101      	bne.n	800ccf8 <osThreadResumeAll+0x12>
    return osOK;
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	e000      	b.n	800ccfa <osThreadResumeAll+0x14>
  else
    return osErrorOS;
 800ccf8:	23ff      	movs	r3, #255	; 0xff
  
}
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	bd80      	pop	{r7, pc}

0800ccfe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ccfe:	b480      	push	{r7}
 800cd00:	b083      	sub	sp, #12
 800cd02:	af00      	add	r7, sp, #0
 800cd04:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	f103 0208 	add.w	r2, r3, #8
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f04f 32ff 	mov.w	r2, #4294967295
 800cd16:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f103 0208 	add.w	r2, r3, #8
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f103 0208 	add.w	r2, r3, #8
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2200      	movs	r2, #0
 800cd30:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cd32:	bf00      	nop
 800cd34:	370c      	adds	r7, #12
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bc80      	pop	{r7}
 800cd3a:	4770      	bx	lr

0800cd3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	b083      	sub	sp, #12
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2200      	movs	r2, #0
 800cd48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cd4a:	bf00      	nop
 800cd4c:	370c      	adds	r7, #12
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bc80      	pop	{r7}
 800cd52:	4770      	bx	lr

0800cd54 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cd54:	b480      	push	{r7}
 800cd56:	b085      	sub	sp, #20
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
 800cd5c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	685b      	ldr	r3, [r3, #4]
 800cd62:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	68fa      	ldr	r2, [r7, #12]
 800cd68:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	689a      	ldr	r2, [r3, #8]
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	689b      	ldr	r3, [r3, #8]
 800cd76:	683a      	ldr	r2, [r7, #0]
 800cd78:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	683a      	ldr	r2, [r7, #0]
 800cd7e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	687a      	ldr	r2, [r7, #4]
 800cd84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	1c5a      	adds	r2, r3, #1
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	601a      	str	r2, [r3, #0]
}
 800cd90:	bf00      	nop
 800cd92:	3714      	adds	r7, #20
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bc80      	pop	{r7}
 800cd98:	4770      	bx	lr

0800cd9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cd9a:	b480      	push	{r7}
 800cd9c:	b085      	sub	sp, #20
 800cd9e:	af00      	add	r7, sp, #0
 800cda0:	6078      	str	r0, [r7, #4]
 800cda2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdb0:	d103      	bne.n	800cdba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	691b      	ldr	r3, [r3, #16]
 800cdb6:	60fb      	str	r3, [r7, #12]
 800cdb8:	e00c      	b.n	800cdd4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	3308      	adds	r3, #8
 800cdbe:	60fb      	str	r3, [r7, #12]
 800cdc0:	e002      	b.n	800cdc8 <vListInsert+0x2e>
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	685b      	ldr	r3, [r3, #4]
 800cdc6:	60fb      	str	r3, [r7, #12]
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	685b      	ldr	r3, [r3, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	68ba      	ldr	r2, [r7, #8]
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	d2f6      	bcs.n	800cdc2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	685a      	ldr	r2, [r3, #4]
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	685b      	ldr	r3, [r3, #4]
 800cde0:	683a      	ldr	r2, [r7, #0]
 800cde2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	68fa      	ldr	r2, [r7, #12]
 800cde8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	683a      	ldr	r2, [r7, #0]
 800cdee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	687a      	ldr	r2, [r7, #4]
 800cdf4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	1c5a      	adds	r2, r3, #1
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	601a      	str	r2, [r3, #0]
}
 800ce00:	bf00      	nop
 800ce02:	3714      	adds	r7, #20
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bc80      	pop	{r7}
 800ce08:	4770      	bx	lr

0800ce0a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ce0a:	b480      	push	{r7}
 800ce0c:	b085      	sub	sp, #20
 800ce0e:	af00      	add	r7, sp, #0
 800ce10:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	691b      	ldr	r3, [r3, #16]
 800ce16:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	685b      	ldr	r3, [r3, #4]
 800ce1c:	687a      	ldr	r2, [r7, #4]
 800ce1e:	6892      	ldr	r2, [r2, #8]
 800ce20:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	689b      	ldr	r3, [r3, #8]
 800ce26:	687a      	ldr	r2, [r7, #4]
 800ce28:	6852      	ldr	r2, [r2, #4]
 800ce2a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	685b      	ldr	r3, [r3, #4]
 800ce30:	687a      	ldr	r2, [r7, #4]
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d103      	bne.n	800ce3e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	689a      	ldr	r2, [r3, #8]
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2200      	movs	r2, #0
 800ce42:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	1e5a      	subs	r2, r3, #1
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	681b      	ldr	r3, [r3, #0]
}
 800ce52:	4618      	mov	r0, r3
 800ce54:	3714      	adds	r7, #20
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bc80      	pop	{r7}
 800ce5a:	4770      	bx	lr

0800ce5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b084      	sub	sp, #16
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
 800ce64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d10a      	bne.n	800ce86 <xQueueGenericReset+0x2a>
	__asm volatile
 800ce70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce74:	f383 8811 	msr	BASEPRI, r3
 800ce78:	f3bf 8f6f 	isb	sy
 800ce7c:	f3bf 8f4f 	dsb	sy
 800ce80:	60bb      	str	r3, [r7, #8]
}
 800ce82:	bf00      	nop
 800ce84:	e7fe      	b.n	800ce84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ce86:	f002 fc41 	bl	800f70c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	681a      	ldr	r2, [r3, #0]
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce92:	68f9      	ldr	r1, [r7, #12]
 800ce94:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ce96:	fb01 f303 	mul.w	r3, r1, r3
 800ce9a:	441a      	add	r2, r3
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	2200      	movs	r2, #0
 800cea4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	681a      	ldr	r2, [r3, #0]
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	681a      	ldr	r2, [r3, #0]
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ceb6:	3b01      	subs	r3, #1
 800ceb8:	68f9      	ldr	r1, [r7, #12]
 800ceba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cebc:	fb01 f303 	mul.w	r3, r1, r3
 800cec0:	441a      	add	r2, r3
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	22ff      	movs	r2, #255	; 0xff
 800ceca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	22ff      	movs	r2, #255	; 0xff
 800ced2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d114      	bne.n	800cf06 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	691b      	ldr	r3, [r3, #16]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d01a      	beq.n	800cf1a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	3310      	adds	r3, #16
 800cee8:	4618      	mov	r0, r3
 800ceea:	f001 fbf5 	bl	800e6d8 <xTaskRemoveFromEventList>
 800ceee:	4603      	mov	r3, r0
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d012      	beq.n	800cf1a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cef4:	4b0c      	ldr	r3, [pc, #48]	; (800cf28 <xQueueGenericReset+0xcc>)
 800cef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cefa:	601a      	str	r2, [r3, #0]
 800cefc:	f3bf 8f4f 	dsb	sy
 800cf00:	f3bf 8f6f 	isb	sy
 800cf04:	e009      	b.n	800cf1a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	3310      	adds	r3, #16
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f7ff fef7 	bl	800ccfe <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	3324      	adds	r3, #36	; 0x24
 800cf14:	4618      	mov	r0, r3
 800cf16:	f7ff fef2 	bl	800ccfe <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cf1a:	f002 fc27 	bl	800f76c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cf1e:	2301      	movs	r3, #1
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	3710      	adds	r7, #16
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}
 800cf28:	e000ed04 	.word	0xe000ed04

0800cf2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b08e      	sub	sp, #56	; 0x38
 800cf30:	af02      	add	r7, sp, #8
 800cf32:	60f8      	str	r0, [r7, #12]
 800cf34:	60b9      	str	r1, [r7, #8]
 800cf36:	607a      	str	r2, [r7, #4]
 800cf38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d10a      	bne.n	800cf56 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cf40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf44:	f383 8811 	msr	BASEPRI, r3
 800cf48:	f3bf 8f6f 	isb	sy
 800cf4c:	f3bf 8f4f 	dsb	sy
 800cf50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cf52:	bf00      	nop
 800cf54:	e7fe      	b.n	800cf54 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d10a      	bne.n	800cf72 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cf5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf60:	f383 8811 	msr	BASEPRI, r3
 800cf64:	f3bf 8f6f 	isb	sy
 800cf68:	f3bf 8f4f 	dsb	sy
 800cf6c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cf6e:	bf00      	nop
 800cf70:	e7fe      	b.n	800cf70 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d002      	beq.n	800cf7e <xQueueGenericCreateStatic+0x52>
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d001      	beq.n	800cf82 <xQueueGenericCreateStatic+0x56>
 800cf7e:	2301      	movs	r3, #1
 800cf80:	e000      	b.n	800cf84 <xQueueGenericCreateStatic+0x58>
 800cf82:	2300      	movs	r3, #0
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d10a      	bne.n	800cf9e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800cf88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf8c:	f383 8811 	msr	BASEPRI, r3
 800cf90:	f3bf 8f6f 	isb	sy
 800cf94:	f3bf 8f4f 	dsb	sy
 800cf98:	623b      	str	r3, [r7, #32]
}
 800cf9a:	bf00      	nop
 800cf9c:	e7fe      	b.n	800cf9c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d102      	bne.n	800cfaa <xQueueGenericCreateStatic+0x7e>
 800cfa4:	68bb      	ldr	r3, [r7, #8]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d101      	bne.n	800cfae <xQueueGenericCreateStatic+0x82>
 800cfaa:	2301      	movs	r3, #1
 800cfac:	e000      	b.n	800cfb0 <xQueueGenericCreateStatic+0x84>
 800cfae:	2300      	movs	r3, #0
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d10a      	bne.n	800cfca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cfb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfb8:	f383 8811 	msr	BASEPRI, r3
 800cfbc:	f3bf 8f6f 	isb	sy
 800cfc0:	f3bf 8f4f 	dsb	sy
 800cfc4:	61fb      	str	r3, [r7, #28]
}
 800cfc6:	bf00      	nop
 800cfc8:	e7fe      	b.n	800cfc8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cfca:	2348      	movs	r3, #72	; 0x48
 800cfcc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cfce:	697b      	ldr	r3, [r7, #20]
 800cfd0:	2b48      	cmp	r3, #72	; 0x48
 800cfd2:	d00a      	beq.n	800cfea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cfd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfd8:	f383 8811 	msr	BASEPRI, r3
 800cfdc:	f3bf 8f6f 	isb	sy
 800cfe0:	f3bf 8f4f 	dsb	sy
 800cfe4:	61bb      	str	r3, [r7, #24]
}
 800cfe6:	bf00      	nop
 800cfe8:	e7fe      	b.n	800cfe8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cfea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d00d      	beq.n	800d012 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff8:	2201      	movs	r2, #1
 800cffa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cffe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d004:	9300      	str	r3, [sp, #0]
 800d006:	4613      	mov	r3, r2
 800d008:	687a      	ldr	r2, [r7, #4]
 800d00a:	68b9      	ldr	r1, [r7, #8]
 800d00c:	68f8      	ldr	r0, [r7, #12]
 800d00e:	f000 f845 	bl	800d09c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d014:	4618      	mov	r0, r3
 800d016:	3730      	adds	r7, #48	; 0x30
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}

0800d01c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b08a      	sub	sp, #40	; 0x28
 800d020:	af02      	add	r7, sp, #8
 800d022:	60f8      	str	r0, [r7, #12]
 800d024:	60b9      	str	r1, [r7, #8]
 800d026:	4613      	mov	r3, r2
 800d028:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d10a      	bne.n	800d046 <xQueueGenericCreate+0x2a>
	__asm volatile
 800d030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d034:	f383 8811 	msr	BASEPRI, r3
 800d038:	f3bf 8f6f 	isb	sy
 800d03c:	f3bf 8f4f 	dsb	sy
 800d040:	613b      	str	r3, [r7, #16]
}
 800d042:	bf00      	nop
 800d044:	e7fe      	b.n	800d044 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d046:	68bb      	ldr	r3, [r7, #8]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d102      	bne.n	800d052 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d04c:	2300      	movs	r3, #0
 800d04e:	61fb      	str	r3, [r7, #28]
 800d050:	e004      	b.n	800d05c <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	68ba      	ldr	r2, [r7, #8]
 800d056:	fb02 f303 	mul.w	r3, r2, r3
 800d05a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d05c:	69fb      	ldr	r3, [r7, #28]
 800d05e:	3348      	adds	r3, #72	; 0x48
 800d060:	4618      	mov	r0, r3
 800d062:	f002 fc53 	bl	800f90c <pvPortMalloc>
 800d066:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d068:	69bb      	ldr	r3, [r7, #24]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d011      	beq.n	800d092 <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d06e:	69bb      	ldr	r3, [r7, #24]
 800d070:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	3348      	adds	r3, #72	; 0x48
 800d076:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d078:	69bb      	ldr	r3, [r7, #24]
 800d07a:	2200      	movs	r2, #0
 800d07c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d080:	79fa      	ldrb	r2, [r7, #7]
 800d082:	69bb      	ldr	r3, [r7, #24]
 800d084:	9300      	str	r3, [sp, #0]
 800d086:	4613      	mov	r3, r2
 800d088:	697a      	ldr	r2, [r7, #20]
 800d08a:	68b9      	ldr	r1, [r7, #8]
 800d08c:	68f8      	ldr	r0, [r7, #12]
 800d08e:	f000 f805 	bl	800d09c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d092:	69bb      	ldr	r3, [r7, #24]
	}
 800d094:	4618      	mov	r0, r3
 800d096:	3720      	adds	r7, #32
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd80      	pop	{r7, pc}

0800d09c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b084      	sub	sp, #16
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	60f8      	str	r0, [r7, #12]
 800d0a4:	60b9      	str	r1, [r7, #8]
 800d0a6:	607a      	str	r2, [r7, #4]
 800d0a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d103      	bne.n	800d0b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d0b0:	69bb      	ldr	r3, [r7, #24]
 800d0b2:	69ba      	ldr	r2, [r7, #24]
 800d0b4:	601a      	str	r2, [r3, #0]
 800d0b6:	e002      	b.n	800d0be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d0b8:	69bb      	ldr	r3, [r7, #24]
 800d0ba:	687a      	ldr	r2, [r7, #4]
 800d0bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d0be:	69bb      	ldr	r3, [r7, #24]
 800d0c0:	68fa      	ldr	r2, [r7, #12]
 800d0c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d0c4:	69bb      	ldr	r3, [r7, #24]
 800d0c6:	68ba      	ldr	r2, [r7, #8]
 800d0c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d0ca:	2101      	movs	r1, #1
 800d0cc:	69b8      	ldr	r0, [r7, #24]
 800d0ce:	f7ff fec5 	bl	800ce5c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d0d2:	bf00      	nop
 800d0d4:	3710      	adds	r7, #16
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bd80      	pop	{r7, pc}

0800d0da <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d0da:	b580      	push	{r7, lr}
 800d0dc:	b082      	sub	sp, #8
 800d0de:	af00      	add	r7, sp, #0
 800d0e0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d00e      	beq.n	800d106 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	2100      	movs	r1, #0
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	f000 f837 	bl	800d174 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d106:	bf00      	nop
 800d108:	3708      	adds	r7, #8
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}

0800d10e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d10e:	b580      	push	{r7, lr}
 800d110:	b086      	sub	sp, #24
 800d112:	af00      	add	r7, sp, #0
 800d114:	4603      	mov	r3, r0
 800d116:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d118:	2301      	movs	r3, #1
 800d11a:	617b      	str	r3, [r7, #20]
 800d11c:	2300      	movs	r3, #0
 800d11e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d120:	79fb      	ldrb	r3, [r7, #7]
 800d122:	461a      	mov	r2, r3
 800d124:	6939      	ldr	r1, [r7, #16]
 800d126:	6978      	ldr	r0, [r7, #20]
 800d128:	f7ff ff78 	bl	800d01c <xQueueGenericCreate>
 800d12c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d12e:	68f8      	ldr	r0, [r7, #12]
 800d130:	f7ff ffd3 	bl	800d0da <prvInitialiseMutex>

		return xNewQueue;
 800d134:	68fb      	ldr	r3, [r7, #12]
	}
 800d136:	4618      	mov	r0, r3
 800d138:	3718      	adds	r7, #24
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}

0800d13e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d13e:	b580      	push	{r7, lr}
 800d140:	b088      	sub	sp, #32
 800d142:	af02      	add	r7, sp, #8
 800d144:	4603      	mov	r3, r0
 800d146:	6039      	str	r1, [r7, #0]
 800d148:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d14a:	2301      	movs	r3, #1
 800d14c:	617b      	str	r3, [r7, #20]
 800d14e:	2300      	movs	r3, #0
 800d150:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d152:	79fb      	ldrb	r3, [r7, #7]
 800d154:	9300      	str	r3, [sp, #0]
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	2200      	movs	r2, #0
 800d15a:	6939      	ldr	r1, [r7, #16]
 800d15c:	6978      	ldr	r0, [r7, #20]
 800d15e:	f7ff fee5 	bl	800cf2c <xQueueGenericCreateStatic>
 800d162:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d164:	68f8      	ldr	r0, [r7, #12]
 800d166:	f7ff ffb8 	bl	800d0da <prvInitialiseMutex>

		return xNewQueue;
 800d16a:	68fb      	ldr	r3, [r7, #12]
	}
 800d16c:	4618      	mov	r0, r3
 800d16e:	3718      	adds	r7, #24
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}

0800d174 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b08e      	sub	sp, #56	; 0x38
 800d178:	af00      	add	r7, sp, #0
 800d17a:	60f8      	str	r0, [r7, #12]
 800d17c:	60b9      	str	r1, [r7, #8]
 800d17e:	607a      	str	r2, [r7, #4]
 800d180:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d182:	2300      	movs	r3, #0
 800d184:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d10a      	bne.n	800d1a6 <xQueueGenericSend+0x32>
	__asm volatile
 800d190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d194:	f383 8811 	msr	BASEPRI, r3
 800d198:	f3bf 8f6f 	isb	sy
 800d19c:	f3bf 8f4f 	dsb	sy
 800d1a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d1a2:	bf00      	nop
 800d1a4:	e7fe      	b.n	800d1a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d1a6:	68bb      	ldr	r3, [r7, #8]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d103      	bne.n	800d1b4 <xQueueGenericSend+0x40>
 800d1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d101      	bne.n	800d1b8 <xQueueGenericSend+0x44>
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	e000      	b.n	800d1ba <xQueueGenericSend+0x46>
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d10a      	bne.n	800d1d4 <xQueueGenericSend+0x60>
	__asm volatile
 800d1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1c2:	f383 8811 	msr	BASEPRI, r3
 800d1c6:	f3bf 8f6f 	isb	sy
 800d1ca:	f3bf 8f4f 	dsb	sy
 800d1ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d1d0:	bf00      	nop
 800d1d2:	e7fe      	b.n	800d1d2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	2b02      	cmp	r3, #2
 800d1d8:	d103      	bne.n	800d1e2 <xQueueGenericSend+0x6e>
 800d1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1de:	2b01      	cmp	r3, #1
 800d1e0:	d101      	bne.n	800d1e6 <xQueueGenericSend+0x72>
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	e000      	b.n	800d1e8 <xQueueGenericSend+0x74>
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d10a      	bne.n	800d202 <xQueueGenericSend+0x8e>
	__asm volatile
 800d1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1f0:	f383 8811 	msr	BASEPRI, r3
 800d1f4:	f3bf 8f6f 	isb	sy
 800d1f8:	f3bf 8f4f 	dsb	sy
 800d1fc:	623b      	str	r3, [r7, #32]
}
 800d1fe:	bf00      	nop
 800d200:	e7fe      	b.n	800d200 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d202:	f001 fc2b 	bl	800ea5c <xTaskGetSchedulerState>
 800d206:	4603      	mov	r3, r0
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d102      	bne.n	800d212 <xQueueGenericSend+0x9e>
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d101      	bne.n	800d216 <xQueueGenericSend+0xa2>
 800d212:	2301      	movs	r3, #1
 800d214:	e000      	b.n	800d218 <xQueueGenericSend+0xa4>
 800d216:	2300      	movs	r3, #0
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d10a      	bne.n	800d232 <xQueueGenericSend+0xbe>
	__asm volatile
 800d21c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d220:	f383 8811 	msr	BASEPRI, r3
 800d224:	f3bf 8f6f 	isb	sy
 800d228:	f3bf 8f4f 	dsb	sy
 800d22c:	61fb      	str	r3, [r7, #28]
}
 800d22e:	bf00      	nop
 800d230:	e7fe      	b.n	800d230 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d232:	f002 fa6b 	bl	800f70c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d23c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d23e:	429a      	cmp	r2, r3
 800d240:	d302      	bcc.n	800d248 <xQueueGenericSend+0xd4>
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	2b02      	cmp	r3, #2
 800d246:	d129      	bne.n	800d29c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d248:	683a      	ldr	r2, [r7, #0]
 800d24a:	68b9      	ldr	r1, [r7, #8]
 800d24c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d24e:	f000 fc38 	bl	800dac2 <prvCopyDataToQueue>
 800d252:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d010      	beq.n	800d27e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d25e:	3324      	adds	r3, #36	; 0x24
 800d260:	4618      	mov	r0, r3
 800d262:	f001 fa39 	bl	800e6d8 <xTaskRemoveFromEventList>
 800d266:	4603      	mov	r3, r0
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d013      	beq.n	800d294 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d26c:	4b3f      	ldr	r3, [pc, #252]	; (800d36c <xQueueGenericSend+0x1f8>)
 800d26e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d272:	601a      	str	r2, [r3, #0]
 800d274:	f3bf 8f4f 	dsb	sy
 800d278:	f3bf 8f6f 	isb	sy
 800d27c:	e00a      	b.n	800d294 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d280:	2b00      	cmp	r3, #0
 800d282:	d007      	beq.n	800d294 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d284:	4b39      	ldr	r3, [pc, #228]	; (800d36c <xQueueGenericSend+0x1f8>)
 800d286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d28a:	601a      	str	r2, [r3, #0]
 800d28c:	f3bf 8f4f 	dsb	sy
 800d290:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d294:	f002 fa6a 	bl	800f76c <vPortExitCritical>
				return pdPASS;
 800d298:	2301      	movs	r3, #1
 800d29a:	e063      	b.n	800d364 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d103      	bne.n	800d2aa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d2a2:	f002 fa63 	bl	800f76c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	e05c      	b.n	800d364 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d2aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d106      	bne.n	800d2be <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d2b0:	f107 0314 	add.w	r3, r7, #20
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	f001 fa71 	bl	800e79c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d2be:	f002 fa55 	bl	800f76c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d2c2:	f000 ffc1 	bl	800e248 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d2c6:	f002 fa21 	bl	800f70c <vPortEnterCritical>
 800d2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d2d0:	b25b      	sxtb	r3, r3
 800d2d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2d6:	d103      	bne.n	800d2e0 <xQueueGenericSend+0x16c>
 800d2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2da:	2200      	movs	r2, #0
 800d2dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d2e6:	b25b      	sxtb	r3, r3
 800d2e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2ec:	d103      	bne.n	800d2f6 <xQueueGenericSend+0x182>
 800d2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d2f6:	f002 fa39 	bl	800f76c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d2fa:	1d3a      	adds	r2, r7, #4
 800d2fc:	f107 0314 	add.w	r3, r7, #20
 800d300:	4611      	mov	r1, r2
 800d302:	4618      	mov	r0, r3
 800d304:	f001 fa60 	bl	800e7c8 <xTaskCheckForTimeOut>
 800d308:	4603      	mov	r3, r0
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d124      	bne.n	800d358 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d30e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d310:	f000 fccf 	bl	800dcb2 <prvIsQueueFull>
 800d314:	4603      	mov	r3, r0
 800d316:	2b00      	cmp	r3, #0
 800d318:	d018      	beq.n	800d34c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d31c:	3310      	adds	r3, #16
 800d31e:	687a      	ldr	r2, [r7, #4]
 800d320:	4611      	mov	r1, r2
 800d322:	4618      	mov	r0, r3
 800d324:	f001 f988 	bl	800e638 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d328:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d32a:	f000 fc5a 	bl	800dbe2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d32e:	f000 ff99 	bl	800e264 <xTaskResumeAll>
 800d332:	4603      	mov	r3, r0
 800d334:	2b00      	cmp	r3, #0
 800d336:	f47f af7c 	bne.w	800d232 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d33a:	4b0c      	ldr	r3, [pc, #48]	; (800d36c <xQueueGenericSend+0x1f8>)
 800d33c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d340:	601a      	str	r2, [r3, #0]
 800d342:	f3bf 8f4f 	dsb	sy
 800d346:	f3bf 8f6f 	isb	sy
 800d34a:	e772      	b.n	800d232 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d34c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d34e:	f000 fc48 	bl	800dbe2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d352:	f000 ff87 	bl	800e264 <xTaskResumeAll>
 800d356:	e76c      	b.n	800d232 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d358:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d35a:	f000 fc42 	bl	800dbe2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d35e:	f000 ff81 	bl	800e264 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d362:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d364:	4618      	mov	r0, r3
 800d366:	3738      	adds	r7, #56	; 0x38
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}
 800d36c:	e000ed04 	.word	0xe000ed04

0800d370 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b08e      	sub	sp, #56	; 0x38
 800d374:	af00      	add	r7, sp, #0
 800d376:	60f8      	str	r0, [r7, #12]
 800d378:	60b9      	str	r1, [r7, #8]
 800d37a:	607a      	str	r2, [r7, #4]
 800d37c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d384:	2b00      	cmp	r3, #0
 800d386:	d10a      	bne.n	800d39e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d38c:	f383 8811 	msr	BASEPRI, r3
 800d390:	f3bf 8f6f 	isb	sy
 800d394:	f3bf 8f4f 	dsb	sy
 800d398:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d39a:	bf00      	nop
 800d39c:	e7fe      	b.n	800d39c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d39e:	68bb      	ldr	r3, [r7, #8]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d103      	bne.n	800d3ac <xQueueGenericSendFromISR+0x3c>
 800d3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d101      	bne.n	800d3b0 <xQueueGenericSendFromISR+0x40>
 800d3ac:	2301      	movs	r3, #1
 800d3ae:	e000      	b.n	800d3b2 <xQueueGenericSendFromISR+0x42>
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d10a      	bne.n	800d3cc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d3b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ba:	f383 8811 	msr	BASEPRI, r3
 800d3be:	f3bf 8f6f 	isb	sy
 800d3c2:	f3bf 8f4f 	dsb	sy
 800d3c6:	623b      	str	r3, [r7, #32]
}
 800d3c8:	bf00      	nop
 800d3ca:	e7fe      	b.n	800d3ca <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	2b02      	cmp	r3, #2
 800d3d0:	d103      	bne.n	800d3da <xQueueGenericSendFromISR+0x6a>
 800d3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3d6:	2b01      	cmp	r3, #1
 800d3d8:	d101      	bne.n	800d3de <xQueueGenericSendFromISR+0x6e>
 800d3da:	2301      	movs	r3, #1
 800d3dc:	e000      	b.n	800d3e0 <xQueueGenericSendFromISR+0x70>
 800d3de:	2300      	movs	r3, #0
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d10a      	bne.n	800d3fa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3e8:	f383 8811 	msr	BASEPRI, r3
 800d3ec:	f3bf 8f6f 	isb	sy
 800d3f0:	f3bf 8f4f 	dsb	sy
 800d3f4:	61fb      	str	r3, [r7, #28]
}
 800d3f6:	bf00      	nop
 800d3f8:	e7fe      	b.n	800d3f8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d3fa:	f002 fa49 	bl	800f890 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d3fe:	f3ef 8211 	mrs	r2, BASEPRI
 800d402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d406:	f383 8811 	msr	BASEPRI, r3
 800d40a:	f3bf 8f6f 	isb	sy
 800d40e:	f3bf 8f4f 	dsb	sy
 800d412:	61ba      	str	r2, [r7, #24]
 800d414:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d416:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d418:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d41c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d422:	429a      	cmp	r2, r3
 800d424:	d302      	bcc.n	800d42c <xQueueGenericSendFromISR+0xbc>
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	2b02      	cmp	r3, #2
 800d42a:	d12c      	bne.n	800d486 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d42e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d436:	683a      	ldr	r2, [r7, #0]
 800d438:	68b9      	ldr	r1, [r7, #8]
 800d43a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d43c:	f000 fb41 	bl	800dac2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d440:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d444:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d448:	d112      	bne.n	800d470 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d44c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d016      	beq.n	800d480 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d454:	3324      	adds	r3, #36	; 0x24
 800d456:	4618      	mov	r0, r3
 800d458:	f001 f93e 	bl	800e6d8 <xTaskRemoveFromEventList>
 800d45c:	4603      	mov	r3, r0
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d00e      	beq.n	800d480 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d00b      	beq.n	800d480 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2201      	movs	r2, #1
 800d46c:	601a      	str	r2, [r3, #0]
 800d46e:	e007      	b.n	800d480 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d470:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d474:	3301      	adds	r3, #1
 800d476:	b2db      	uxtb	r3, r3
 800d478:	b25a      	sxtb	r2, r3
 800d47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d47c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d480:	2301      	movs	r3, #1
 800d482:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d484:	e001      	b.n	800d48a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d486:	2300      	movs	r3, #0
 800d488:	637b      	str	r3, [r7, #52]	; 0x34
 800d48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d48c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d48e:	693b      	ldr	r3, [r7, #16]
 800d490:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d494:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d498:	4618      	mov	r0, r3
 800d49a:	3738      	adds	r7, #56	; 0x38
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}

0800d4a0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b08e      	sub	sp, #56	; 0x38
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
 800d4a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d10a      	bne.n	800d4ca <xQueueGiveFromISR+0x2a>
	__asm volatile
 800d4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4b8:	f383 8811 	msr	BASEPRI, r3
 800d4bc:	f3bf 8f6f 	isb	sy
 800d4c0:	f3bf 8f4f 	dsb	sy
 800d4c4:	623b      	str	r3, [r7, #32]
}
 800d4c6:	bf00      	nop
 800d4c8:	e7fe      	b.n	800d4c8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d00a      	beq.n	800d4e8 <xQueueGiveFromISR+0x48>
	__asm volatile
 800d4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d6:	f383 8811 	msr	BASEPRI, r3
 800d4da:	f3bf 8f6f 	isb	sy
 800d4de:	f3bf 8f4f 	dsb	sy
 800d4e2:	61fb      	str	r3, [r7, #28]
}
 800d4e4:	bf00      	nop
 800d4e6:	e7fe      	b.n	800d4e6 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d103      	bne.n	800d4f8 <xQueueGiveFromISR+0x58>
 800d4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f2:	689b      	ldr	r3, [r3, #8]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d101      	bne.n	800d4fc <xQueueGiveFromISR+0x5c>
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	e000      	b.n	800d4fe <xQueueGiveFromISR+0x5e>
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d10a      	bne.n	800d518 <xQueueGiveFromISR+0x78>
	__asm volatile
 800d502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d506:	f383 8811 	msr	BASEPRI, r3
 800d50a:	f3bf 8f6f 	isb	sy
 800d50e:	f3bf 8f4f 	dsb	sy
 800d512:	61bb      	str	r3, [r7, #24]
}
 800d514:	bf00      	nop
 800d516:	e7fe      	b.n	800d516 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d518:	f002 f9ba 	bl	800f890 <vPortValidateInterruptPriority>
	__asm volatile
 800d51c:	f3ef 8211 	mrs	r2, BASEPRI
 800d520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d524:	f383 8811 	msr	BASEPRI, r3
 800d528:	f3bf 8f6f 	isb	sy
 800d52c:	f3bf 8f4f 	dsb	sy
 800d530:	617a      	str	r2, [r7, #20]
 800d532:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d534:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d536:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d53a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d53c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d542:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d544:	429a      	cmp	r2, r3
 800d546:	d22b      	bcs.n	800d5a0 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d54a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d54e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d554:	1c5a      	adds	r2, r3, #1
 800d556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d558:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d55a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d55e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d562:	d112      	bne.n	800d58a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d016      	beq.n	800d59a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d56e:	3324      	adds	r3, #36	; 0x24
 800d570:	4618      	mov	r0, r3
 800d572:	f001 f8b1 	bl	800e6d8 <xTaskRemoveFromEventList>
 800d576:	4603      	mov	r3, r0
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d00e      	beq.n	800d59a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d00b      	beq.n	800d59a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	2201      	movs	r2, #1
 800d586:	601a      	str	r2, [r3, #0]
 800d588:	e007      	b.n	800d59a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d58a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d58e:	3301      	adds	r3, #1
 800d590:	b2db      	uxtb	r3, r3
 800d592:	b25a      	sxtb	r2, r3
 800d594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d596:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d59a:	2301      	movs	r3, #1
 800d59c:	637b      	str	r3, [r7, #52]	; 0x34
 800d59e:	e001      	b.n	800d5a4 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	637b      	str	r3, [r7, #52]	; 0x34
 800d5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5a6:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	f383 8811 	msr	BASEPRI, r3
}
 800d5ae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d5b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	3738      	adds	r7, #56	; 0x38
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}
	...

0800d5bc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b08c      	sub	sp, #48	; 0x30
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	60f8      	str	r0, [r7, #12]
 800d5c4:	60b9      	str	r1, [r7, #8]
 800d5c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d10a      	bne.n	800d5ec <xQueueReceive+0x30>
	__asm volatile
 800d5d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5da:	f383 8811 	msr	BASEPRI, r3
 800d5de:	f3bf 8f6f 	isb	sy
 800d5e2:	f3bf 8f4f 	dsb	sy
 800d5e6:	623b      	str	r3, [r7, #32]
}
 800d5e8:	bf00      	nop
 800d5ea:	e7fe      	b.n	800d5ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d103      	bne.n	800d5fa <xQueueReceive+0x3e>
 800d5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d101      	bne.n	800d5fe <xQueueReceive+0x42>
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	e000      	b.n	800d600 <xQueueReceive+0x44>
 800d5fe:	2300      	movs	r3, #0
 800d600:	2b00      	cmp	r3, #0
 800d602:	d10a      	bne.n	800d61a <xQueueReceive+0x5e>
	__asm volatile
 800d604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d608:	f383 8811 	msr	BASEPRI, r3
 800d60c:	f3bf 8f6f 	isb	sy
 800d610:	f3bf 8f4f 	dsb	sy
 800d614:	61fb      	str	r3, [r7, #28]
}
 800d616:	bf00      	nop
 800d618:	e7fe      	b.n	800d618 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d61a:	f001 fa1f 	bl	800ea5c <xTaskGetSchedulerState>
 800d61e:	4603      	mov	r3, r0
 800d620:	2b00      	cmp	r3, #0
 800d622:	d102      	bne.n	800d62a <xQueueReceive+0x6e>
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d101      	bne.n	800d62e <xQueueReceive+0x72>
 800d62a:	2301      	movs	r3, #1
 800d62c:	e000      	b.n	800d630 <xQueueReceive+0x74>
 800d62e:	2300      	movs	r3, #0
 800d630:	2b00      	cmp	r3, #0
 800d632:	d10a      	bne.n	800d64a <xQueueReceive+0x8e>
	__asm volatile
 800d634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d638:	f383 8811 	msr	BASEPRI, r3
 800d63c:	f3bf 8f6f 	isb	sy
 800d640:	f3bf 8f4f 	dsb	sy
 800d644:	61bb      	str	r3, [r7, #24]
}
 800d646:	bf00      	nop
 800d648:	e7fe      	b.n	800d648 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d64a:	f002 f85f 	bl	800f70c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d652:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d656:	2b00      	cmp	r3, #0
 800d658:	d01f      	beq.n	800d69a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d65a:	68b9      	ldr	r1, [r7, #8]
 800d65c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d65e:	f000 fa9a 	bl	800db96 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d664:	1e5a      	subs	r2, r3, #1
 800d666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d668:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d66c:	691b      	ldr	r3, [r3, #16]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d00f      	beq.n	800d692 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d674:	3310      	adds	r3, #16
 800d676:	4618      	mov	r0, r3
 800d678:	f001 f82e 	bl	800e6d8 <xTaskRemoveFromEventList>
 800d67c:	4603      	mov	r3, r0
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d007      	beq.n	800d692 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d682:	4b3d      	ldr	r3, [pc, #244]	; (800d778 <xQueueReceive+0x1bc>)
 800d684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d688:	601a      	str	r2, [r3, #0]
 800d68a:	f3bf 8f4f 	dsb	sy
 800d68e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d692:	f002 f86b 	bl	800f76c <vPortExitCritical>
				return pdPASS;
 800d696:	2301      	movs	r3, #1
 800d698:	e069      	b.n	800d76e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d103      	bne.n	800d6a8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d6a0:	f002 f864 	bl	800f76c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	e062      	b.n	800d76e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d106      	bne.n	800d6bc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d6ae:	f107 0310 	add.w	r3, r7, #16
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f001 f872 	bl	800e79c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d6b8:	2301      	movs	r3, #1
 800d6ba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d6bc:	f002 f856 	bl	800f76c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d6c0:	f000 fdc2 	bl	800e248 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d6c4:	f002 f822 	bl	800f70c <vPortEnterCritical>
 800d6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d6ce:	b25b      	sxtb	r3, r3
 800d6d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6d4:	d103      	bne.n	800d6de <xQueueReceive+0x122>
 800d6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d8:	2200      	movs	r2, #0
 800d6da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d6e4:	b25b      	sxtb	r3, r3
 800d6e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6ea:	d103      	bne.n	800d6f4 <xQueueReceive+0x138>
 800d6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d6f4:	f002 f83a 	bl	800f76c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d6f8:	1d3a      	adds	r2, r7, #4
 800d6fa:	f107 0310 	add.w	r3, r7, #16
 800d6fe:	4611      	mov	r1, r2
 800d700:	4618      	mov	r0, r3
 800d702:	f001 f861 	bl	800e7c8 <xTaskCheckForTimeOut>
 800d706:	4603      	mov	r3, r0
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d123      	bne.n	800d754 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d70c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d70e:	f000 faba 	bl	800dc86 <prvIsQueueEmpty>
 800d712:	4603      	mov	r3, r0
 800d714:	2b00      	cmp	r3, #0
 800d716:	d017      	beq.n	800d748 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d71a:	3324      	adds	r3, #36	; 0x24
 800d71c:	687a      	ldr	r2, [r7, #4]
 800d71e:	4611      	mov	r1, r2
 800d720:	4618      	mov	r0, r3
 800d722:	f000 ff89 	bl	800e638 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d726:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d728:	f000 fa5b 	bl	800dbe2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d72c:	f000 fd9a 	bl	800e264 <xTaskResumeAll>
 800d730:	4603      	mov	r3, r0
 800d732:	2b00      	cmp	r3, #0
 800d734:	d189      	bne.n	800d64a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d736:	4b10      	ldr	r3, [pc, #64]	; (800d778 <xQueueReceive+0x1bc>)
 800d738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d73c:	601a      	str	r2, [r3, #0]
 800d73e:	f3bf 8f4f 	dsb	sy
 800d742:	f3bf 8f6f 	isb	sy
 800d746:	e780      	b.n	800d64a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d74a:	f000 fa4a 	bl	800dbe2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d74e:	f000 fd89 	bl	800e264 <xTaskResumeAll>
 800d752:	e77a      	b.n	800d64a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d756:	f000 fa44 	bl	800dbe2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d75a:	f000 fd83 	bl	800e264 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d75e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d760:	f000 fa91 	bl	800dc86 <prvIsQueueEmpty>
 800d764:	4603      	mov	r3, r0
 800d766:	2b00      	cmp	r3, #0
 800d768:	f43f af6f 	beq.w	800d64a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d76c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d76e:	4618      	mov	r0, r3
 800d770:	3730      	adds	r7, #48	; 0x30
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}
 800d776:	bf00      	nop
 800d778:	e000ed04 	.word	0xe000ed04

0800d77c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b08e      	sub	sp, #56	; 0x38
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
 800d784:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d786:	2300      	movs	r3, #0
 800d788:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d78e:	2300      	movs	r3, #0
 800d790:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d794:	2b00      	cmp	r3, #0
 800d796:	d10a      	bne.n	800d7ae <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d79c:	f383 8811 	msr	BASEPRI, r3
 800d7a0:	f3bf 8f6f 	isb	sy
 800d7a4:	f3bf 8f4f 	dsb	sy
 800d7a8:	623b      	str	r3, [r7, #32]
}
 800d7aa:	bf00      	nop
 800d7ac:	e7fe      	b.n	800d7ac <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d00a      	beq.n	800d7cc <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d7b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ba:	f383 8811 	msr	BASEPRI, r3
 800d7be:	f3bf 8f6f 	isb	sy
 800d7c2:	f3bf 8f4f 	dsb	sy
 800d7c6:	61fb      	str	r3, [r7, #28]
}
 800d7c8:	bf00      	nop
 800d7ca:	e7fe      	b.n	800d7ca <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d7cc:	f001 f946 	bl	800ea5c <xTaskGetSchedulerState>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d102      	bne.n	800d7dc <xQueueSemaphoreTake+0x60>
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d101      	bne.n	800d7e0 <xQueueSemaphoreTake+0x64>
 800d7dc:	2301      	movs	r3, #1
 800d7de:	e000      	b.n	800d7e2 <xQueueSemaphoreTake+0x66>
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d10a      	bne.n	800d7fc <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ea:	f383 8811 	msr	BASEPRI, r3
 800d7ee:	f3bf 8f6f 	isb	sy
 800d7f2:	f3bf 8f4f 	dsb	sy
 800d7f6:	61bb      	str	r3, [r7, #24]
}
 800d7f8:	bf00      	nop
 800d7fa:	e7fe      	b.n	800d7fa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d7fc:	f001 ff86 	bl	800f70c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d804:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d024      	beq.n	800d856 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d80e:	1e5a      	subs	r2, r3, #1
 800d810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d812:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d104      	bne.n	800d826 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d81c:	f001 fadc 	bl	800edd8 <pvTaskIncrementMutexHeldCount>
 800d820:	4602      	mov	r2, r0
 800d822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d824:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d828:	691b      	ldr	r3, [r3, #16]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d00f      	beq.n	800d84e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d830:	3310      	adds	r3, #16
 800d832:	4618      	mov	r0, r3
 800d834:	f000 ff50 	bl	800e6d8 <xTaskRemoveFromEventList>
 800d838:	4603      	mov	r3, r0
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d007      	beq.n	800d84e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d83e:	4b54      	ldr	r3, [pc, #336]	; (800d990 <xQueueSemaphoreTake+0x214>)
 800d840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d844:	601a      	str	r2, [r3, #0]
 800d846:	f3bf 8f4f 	dsb	sy
 800d84a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d84e:	f001 ff8d 	bl	800f76c <vPortExitCritical>
				return pdPASS;
 800d852:	2301      	movs	r3, #1
 800d854:	e097      	b.n	800d986 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d111      	bne.n	800d880 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d85c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d00a      	beq.n	800d878 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d862:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d866:	f383 8811 	msr	BASEPRI, r3
 800d86a:	f3bf 8f6f 	isb	sy
 800d86e:	f3bf 8f4f 	dsb	sy
 800d872:	617b      	str	r3, [r7, #20]
}
 800d874:	bf00      	nop
 800d876:	e7fe      	b.n	800d876 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d878:	f001 ff78 	bl	800f76c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d87c:	2300      	movs	r3, #0
 800d87e:	e082      	b.n	800d986 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d882:	2b00      	cmp	r3, #0
 800d884:	d106      	bne.n	800d894 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d886:	f107 030c 	add.w	r3, r7, #12
 800d88a:	4618      	mov	r0, r3
 800d88c:	f000 ff86 	bl	800e79c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d890:	2301      	movs	r3, #1
 800d892:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d894:	f001 ff6a 	bl	800f76c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d898:	f000 fcd6 	bl	800e248 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d89c:	f001 ff36 	bl	800f70c <vPortEnterCritical>
 800d8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d8a6:	b25b      	sxtb	r3, r3
 800d8a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8ac:	d103      	bne.n	800d8b6 <xQueueSemaphoreTake+0x13a>
 800d8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d8bc:	b25b      	sxtb	r3, r3
 800d8be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8c2:	d103      	bne.n	800d8cc <xQueueSemaphoreTake+0x150>
 800d8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d8cc:	f001 ff4e 	bl	800f76c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d8d0:	463a      	mov	r2, r7
 800d8d2:	f107 030c 	add.w	r3, r7, #12
 800d8d6:	4611      	mov	r1, r2
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f000 ff75 	bl	800e7c8 <xTaskCheckForTimeOut>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d132      	bne.n	800d94a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d8e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d8e6:	f000 f9ce 	bl	800dc86 <prvIsQueueEmpty>
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d026      	beq.n	800d93e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d109      	bne.n	800d90c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d8f8:	f001 ff08 	bl	800f70c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8fe:	689b      	ldr	r3, [r3, #8]
 800d900:	4618      	mov	r0, r3
 800d902:	f001 f8c9 	bl	800ea98 <xTaskPriorityInherit>
 800d906:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d908:	f001 ff30 	bl	800f76c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d90e:	3324      	adds	r3, #36	; 0x24
 800d910:	683a      	ldr	r2, [r7, #0]
 800d912:	4611      	mov	r1, r2
 800d914:	4618      	mov	r0, r3
 800d916:	f000 fe8f 	bl	800e638 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d91a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d91c:	f000 f961 	bl	800dbe2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d920:	f000 fca0 	bl	800e264 <xTaskResumeAll>
 800d924:	4603      	mov	r3, r0
 800d926:	2b00      	cmp	r3, #0
 800d928:	f47f af68 	bne.w	800d7fc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d92c:	4b18      	ldr	r3, [pc, #96]	; (800d990 <xQueueSemaphoreTake+0x214>)
 800d92e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d932:	601a      	str	r2, [r3, #0]
 800d934:	f3bf 8f4f 	dsb	sy
 800d938:	f3bf 8f6f 	isb	sy
 800d93c:	e75e      	b.n	800d7fc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d93e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d940:	f000 f94f 	bl	800dbe2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d944:	f000 fc8e 	bl	800e264 <xTaskResumeAll>
 800d948:	e758      	b.n	800d7fc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d94a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d94c:	f000 f949 	bl	800dbe2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d950:	f000 fc88 	bl	800e264 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d954:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d956:	f000 f996 	bl	800dc86 <prvIsQueueEmpty>
 800d95a:	4603      	mov	r3, r0
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	f43f af4d 	beq.w	800d7fc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d964:	2b00      	cmp	r3, #0
 800d966:	d00d      	beq.n	800d984 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d968:	f001 fed0 	bl	800f70c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d96c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d96e:	f000 f891 	bl	800da94 <prvGetDisinheritPriorityAfterTimeout>
 800d972:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d976:	689b      	ldr	r3, [r3, #8]
 800d978:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d97a:	4618      	mov	r0, r3
 800d97c:	f001 f992 	bl	800eca4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d980:	f001 fef4 	bl	800f76c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d984:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d986:	4618      	mov	r0, r3
 800d988:	3738      	adds	r7, #56	; 0x38
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}
 800d98e:	bf00      	nop
 800d990:	e000ed04 	.word	0xe000ed04

0800d994 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b08e      	sub	sp, #56	; 0x38
 800d998:	af00      	add	r7, sp, #0
 800d99a:	60f8      	str	r0, [r7, #12]
 800d99c:	60b9      	str	r1, [r7, #8]
 800d99e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d10a      	bne.n	800d9c0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ae:	f383 8811 	msr	BASEPRI, r3
 800d9b2:	f3bf 8f6f 	isb	sy
 800d9b6:	f3bf 8f4f 	dsb	sy
 800d9ba:	623b      	str	r3, [r7, #32]
}
 800d9bc:	bf00      	nop
 800d9be:	e7fe      	b.n	800d9be <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d103      	bne.n	800d9ce <xQueueReceiveFromISR+0x3a>
 800d9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d101      	bne.n	800d9d2 <xQueueReceiveFromISR+0x3e>
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	e000      	b.n	800d9d4 <xQueueReceiveFromISR+0x40>
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d10a      	bne.n	800d9ee <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9dc:	f383 8811 	msr	BASEPRI, r3
 800d9e0:	f3bf 8f6f 	isb	sy
 800d9e4:	f3bf 8f4f 	dsb	sy
 800d9e8:	61fb      	str	r3, [r7, #28]
}
 800d9ea:	bf00      	nop
 800d9ec:	e7fe      	b.n	800d9ec <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d9ee:	f001 ff4f 	bl	800f890 <vPortValidateInterruptPriority>
	__asm volatile
 800d9f2:	f3ef 8211 	mrs	r2, BASEPRI
 800d9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9fa:	f383 8811 	msr	BASEPRI, r3
 800d9fe:	f3bf 8f6f 	isb	sy
 800da02:	f3bf 8f4f 	dsb	sy
 800da06:	61ba      	str	r2, [r7, #24]
 800da08:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800da0a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800da0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800da0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da12:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800da14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da16:	2b00      	cmp	r3, #0
 800da18:	d02f      	beq.n	800da7a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800da1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800da20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800da24:	68b9      	ldr	r1, [r7, #8]
 800da26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da28:	f000 f8b5 	bl	800db96 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800da2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da2e:	1e5a      	subs	r2, r3, #1
 800da30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da32:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800da34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800da38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da3c:	d112      	bne.n	800da64 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da40:	691b      	ldr	r3, [r3, #16]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d016      	beq.n	800da74 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da48:	3310      	adds	r3, #16
 800da4a:	4618      	mov	r0, r3
 800da4c:	f000 fe44 	bl	800e6d8 <xTaskRemoveFromEventList>
 800da50:	4603      	mov	r3, r0
 800da52:	2b00      	cmp	r3, #0
 800da54:	d00e      	beq.n	800da74 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d00b      	beq.n	800da74 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2201      	movs	r2, #1
 800da60:	601a      	str	r2, [r3, #0]
 800da62:	e007      	b.n	800da74 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800da64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da68:	3301      	adds	r3, #1
 800da6a:	b2db      	uxtb	r3, r3
 800da6c:	b25a      	sxtb	r2, r3
 800da6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800da74:	2301      	movs	r3, #1
 800da76:	637b      	str	r3, [r7, #52]	; 0x34
 800da78:	e001      	b.n	800da7e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800da7a:	2300      	movs	r3, #0
 800da7c:	637b      	str	r3, [r7, #52]	; 0x34
 800da7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da80:	613b      	str	r3, [r7, #16]
	__asm volatile
 800da82:	693b      	ldr	r3, [r7, #16]
 800da84:	f383 8811 	msr	BASEPRI, r3
}
 800da88:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800da8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800da8c:	4618      	mov	r0, r3
 800da8e:	3738      	adds	r7, #56	; 0x38
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}

0800da94 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800da94:	b480      	push	{r7}
 800da96:	b085      	sub	sp, #20
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d006      	beq.n	800dab2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	f1c3 0307 	rsb	r3, r3, #7
 800daae:	60fb      	str	r3, [r7, #12]
 800dab0:	e001      	b.n	800dab6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800dab2:	2300      	movs	r3, #0
 800dab4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800dab6:	68fb      	ldr	r3, [r7, #12]
	}
 800dab8:	4618      	mov	r0, r3
 800daba:	3714      	adds	r7, #20
 800dabc:	46bd      	mov	sp, r7
 800dabe:	bc80      	pop	{r7}
 800dac0:	4770      	bx	lr

0800dac2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dac2:	b580      	push	{r7, lr}
 800dac4:	b086      	sub	sp, #24
 800dac6:	af00      	add	r7, sp, #0
 800dac8:	60f8      	str	r0, [r7, #12]
 800daca:	60b9      	str	r1, [r7, #8]
 800dacc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dace:	2300      	movs	r3, #0
 800dad0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dad6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d10d      	bne.n	800dafc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d14d      	bne.n	800db84 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	689b      	ldr	r3, [r3, #8]
 800daec:	4618      	mov	r0, r3
 800daee:	f001 f853 	bl	800eb98 <xTaskPriorityDisinherit>
 800daf2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	2200      	movs	r2, #0
 800daf8:	609a      	str	r2, [r3, #8]
 800dafa:	e043      	b.n	800db84 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d119      	bne.n	800db36 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	6858      	ldr	r0, [r3, #4]
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db0a:	461a      	mov	r2, r3
 800db0c:	68b9      	ldr	r1, [r7, #8]
 800db0e:	f002 fa8e 	bl	801002e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	685a      	ldr	r2, [r3, #4]
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db1a:	441a      	add	r2, r3
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	685a      	ldr	r2, [r3, #4]
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	689b      	ldr	r3, [r3, #8]
 800db28:	429a      	cmp	r2, r3
 800db2a:	d32b      	bcc.n	800db84 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	681a      	ldr	r2, [r3, #0]
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	605a      	str	r2, [r3, #4]
 800db34:	e026      	b.n	800db84 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	68d8      	ldr	r0, [r3, #12]
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db3e:	461a      	mov	r2, r3
 800db40:	68b9      	ldr	r1, [r7, #8]
 800db42:	f002 fa74 	bl	801002e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	68da      	ldr	r2, [r3, #12]
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db4e:	425b      	negs	r3, r3
 800db50:	441a      	add	r2, r3
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	68da      	ldr	r2, [r3, #12]
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	429a      	cmp	r2, r3
 800db60:	d207      	bcs.n	800db72 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	689a      	ldr	r2, [r3, #8]
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db6a:	425b      	negs	r3, r3
 800db6c:	441a      	add	r2, r3
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2b02      	cmp	r3, #2
 800db76:	d105      	bne.n	800db84 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800db78:	693b      	ldr	r3, [r7, #16]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d002      	beq.n	800db84 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800db7e:	693b      	ldr	r3, [r7, #16]
 800db80:	3b01      	subs	r3, #1
 800db82:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800db84:	693b      	ldr	r3, [r7, #16]
 800db86:	1c5a      	adds	r2, r3, #1
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800db8c:	697b      	ldr	r3, [r7, #20]
}
 800db8e:	4618      	mov	r0, r3
 800db90:	3718      	adds	r7, #24
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}

0800db96 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800db96:	b580      	push	{r7, lr}
 800db98:	b082      	sub	sp, #8
 800db9a:	af00      	add	r7, sp, #0
 800db9c:	6078      	str	r0, [r7, #4]
 800db9e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d018      	beq.n	800dbda <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	68da      	ldr	r2, [r3, #12]
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbb0:	441a      	add	r2, r3
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	68da      	ldr	r2, [r3, #12]
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	689b      	ldr	r3, [r3, #8]
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d303      	bcc.n	800dbca <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681a      	ldr	r2, [r3, #0]
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	68d9      	ldr	r1, [r3, #12]
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbd2:	461a      	mov	r2, r3
 800dbd4:	6838      	ldr	r0, [r7, #0]
 800dbd6:	f002 fa2a 	bl	801002e <memcpy>
	}
}
 800dbda:	bf00      	nop
 800dbdc:	3708      	adds	r7, #8
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd80      	pop	{r7, pc}

0800dbe2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dbe2:	b580      	push	{r7, lr}
 800dbe4:	b084      	sub	sp, #16
 800dbe6:	af00      	add	r7, sp, #0
 800dbe8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dbea:	f001 fd8f 	bl	800f70c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dbf4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dbf6:	e011      	b.n	800dc1c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d012      	beq.n	800dc26 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	3324      	adds	r3, #36	; 0x24
 800dc04:	4618      	mov	r0, r3
 800dc06:	f000 fd67 	bl	800e6d8 <xTaskRemoveFromEventList>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d001      	beq.n	800dc14 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dc10:	f000 fe3c 	bl	800e88c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dc14:	7bfb      	ldrb	r3, [r7, #15]
 800dc16:	3b01      	subs	r3, #1
 800dc18:	b2db      	uxtb	r3, r3
 800dc1a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dc1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	dce9      	bgt.n	800dbf8 <prvUnlockQueue+0x16>
 800dc24:	e000      	b.n	800dc28 <prvUnlockQueue+0x46>
					break;
 800dc26:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	22ff      	movs	r2, #255	; 0xff
 800dc2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dc30:	f001 fd9c 	bl	800f76c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dc34:	f001 fd6a 	bl	800f70c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc3e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dc40:	e011      	b.n	800dc66 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	691b      	ldr	r3, [r3, #16]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d012      	beq.n	800dc70 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	3310      	adds	r3, #16
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f000 fd42 	bl	800e6d8 <xTaskRemoveFromEventList>
 800dc54:	4603      	mov	r3, r0
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d001      	beq.n	800dc5e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dc5a:	f000 fe17 	bl	800e88c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dc5e:	7bbb      	ldrb	r3, [r7, #14]
 800dc60:	3b01      	subs	r3, #1
 800dc62:	b2db      	uxtb	r3, r3
 800dc64:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dc66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	dce9      	bgt.n	800dc42 <prvUnlockQueue+0x60>
 800dc6e:	e000      	b.n	800dc72 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dc70:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	22ff      	movs	r2, #255	; 0xff
 800dc76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dc7a:	f001 fd77 	bl	800f76c <vPortExitCritical>
}
 800dc7e:	bf00      	nop
 800dc80:	3710      	adds	r7, #16
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd80      	pop	{r7, pc}

0800dc86 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dc86:	b580      	push	{r7, lr}
 800dc88:	b084      	sub	sp, #16
 800dc8a:	af00      	add	r7, sp, #0
 800dc8c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dc8e:	f001 fd3d 	bl	800f70c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d102      	bne.n	800dca0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dc9a:	2301      	movs	r3, #1
 800dc9c:	60fb      	str	r3, [r7, #12]
 800dc9e:	e001      	b.n	800dca4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dca0:	2300      	movs	r3, #0
 800dca2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dca4:	f001 fd62 	bl	800f76c <vPortExitCritical>

	return xReturn;
 800dca8:	68fb      	ldr	r3, [r7, #12]
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	3710      	adds	r7, #16
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}

0800dcb2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dcb2:	b580      	push	{r7, lr}
 800dcb4:	b084      	sub	sp, #16
 800dcb6:	af00      	add	r7, sp, #0
 800dcb8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dcba:	f001 fd27 	bl	800f70c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	d102      	bne.n	800dcd0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dcca:	2301      	movs	r3, #1
 800dccc:	60fb      	str	r3, [r7, #12]
 800dcce:	e001      	b.n	800dcd4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dcd4:	f001 fd4a 	bl	800f76c <vPortExitCritical>

	return xReturn;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	3710      	adds	r7, #16
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}
	...

0800dce4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dce4:	b480      	push	{r7}
 800dce6:	b085      	sub	sp, #20
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
 800dcec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dcee:	2300      	movs	r3, #0
 800dcf0:	60fb      	str	r3, [r7, #12]
 800dcf2:	e014      	b.n	800dd1e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dcf4:	4a0e      	ldr	r2, [pc, #56]	; (800dd30 <vQueueAddToRegistry+0x4c>)
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d10b      	bne.n	800dd18 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dd00:	490b      	ldr	r1, [pc, #44]	; (800dd30 <vQueueAddToRegistry+0x4c>)
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	683a      	ldr	r2, [r7, #0]
 800dd06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dd0a:	4a09      	ldr	r2, [pc, #36]	; (800dd30 <vQueueAddToRegistry+0x4c>)
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	00db      	lsls	r3, r3, #3
 800dd10:	4413      	add	r3, r2
 800dd12:	687a      	ldr	r2, [r7, #4]
 800dd14:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dd16:	e006      	b.n	800dd26 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	3301      	adds	r3, #1
 800dd1c:	60fb      	str	r3, [r7, #12]
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	2b07      	cmp	r3, #7
 800dd22:	d9e7      	bls.n	800dcf4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dd24:	bf00      	nop
 800dd26:	bf00      	nop
 800dd28:	3714      	adds	r7, #20
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bc80      	pop	{r7}
 800dd2e:	4770      	bx	lr
 800dd30:	20001af4 	.word	0x20001af4

0800dd34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b086      	sub	sp, #24
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	60f8      	str	r0, [r7, #12]
 800dd3c:	60b9      	str	r1, [r7, #8]
 800dd3e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dd44:	f001 fce2 	bl	800f70c <vPortEnterCritical>
 800dd48:	697b      	ldr	r3, [r7, #20]
 800dd4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd4e:	b25b      	sxtb	r3, r3
 800dd50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd54:	d103      	bne.n	800dd5e <vQueueWaitForMessageRestricted+0x2a>
 800dd56:	697b      	ldr	r3, [r7, #20]
 800dd58:	2200      	movs	r2, #0
 800dd5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd64:	b25b      	sxtb	r3, r3
 800dd66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd6a:	d103      	bne.n	800dd74 <vQueueWaitForMessageRestricted+0x40>
 800dd6c:	697b      	ldr	r3, [r7, #20]
 800dd6e:	2200      	movs	r2, #0
 800dd70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dd74:	f001 fcfa 	bl	800f76c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dd78:	697b      	ldr	r3, [r7, #20]
 800dd7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d106      	bne.n	800dd8e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dd80:	697b      	ldr	r3, [r7, #20]
 800dd82:	3324      	adds	r3, #36	; 0x24
 800dd84:	687a      	ldr	r2, [r7, #4]
 800dd86:	68b9      	ldr	r1, [r7, #8]
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f000 fc79 	bl	800e680 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800dd8e:	6978      	ldr	r0, [r7, #20]
 800dd90:	f7ff ff27 	bl	800dbe2 <prvUnlockQueue>
	}
 800dd94:	bf00      	nop
 800dd96:	3718      	adds	r7, #24
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}

0800dd9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b08e      	sub	sp, #56	; 0x38
 800dda0:	af04      	add	r7, sp, #16
 800dda2:	60f8      	str	r0, [r7, #12]
 800dda4:	60b9      	str	r1, [r7, #8]
 800dda6:	607a      	str	r2, [r7, #4]
 800dda8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ddaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d10a      	bne.n	800ddc6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ddb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddb4:	f383 8811 	msr	BASEPRI, r3
 800ddb8:	f3bf 8f6f 	isb	sy
 800ddbc:	f3bf 8f4f 	dsb	sy
 800ddc0:	623b      	str	r3, [r7, #32]
}
 800ddc2:	bf00      	nop
 800ddc4:	e7fe      	b.n	800ddc4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ddc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d10a      	bne.n	800dde2 <xTaskCreateStatic+0x46>
	__asm volatile
 800ddcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd0:	f383 8811 	msr	BASEPRI, r3
 800ddd4:	f3bf 8f6f 	isb	sy
 800ddd8:	f3bf 8f4f 	dsb	sy
 800dddc:	61fb      	str	r3, [r7, #28]
}
 800ddde:	bf00      	nop
 800dde0:	e7fe      	b.n	800dde0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dde2:	23b4      	movs	r3, #180	; 0xb4
 800dde4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dde6:	693b      	ldr	r3, [r7, #16]
 800dde8:	2bb4      	cmp	r3, #180	; 0xb4
 800ddea:	d00a      	beq.n	800de02 <xTaskCreateStatic+0x66>
	__asm volatile
 800ddec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddf0:	f383 8811 	msr	BASEPRI, r3
 800ddf4:	f3bf 8f6f 	isb	sy
 800ddf8:	f3bf 8f4f 	dsb	sy
 800ddfc:	61bb      	str	r3, [r7, #24]
}
 800ddfe:	bf00      	nop
 800de00:	e7fe      	b.n	800de00 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800de02:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800de04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de06:	2b00      	cmp	r3, #0
 800de08:	d01e      	beq.n	800de48 <xTaskCreateStatic+0xac>
 800de0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d01b      	beq.n	800de48 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800de10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de12:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800de14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de18:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800de1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de1c:	2202      	movs	r2, #2
 800de1e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800de22:	2300      	movs	r3, #0
 800de24:	9303      	str	r3, [sp, #12]
 800de26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de28:	9302      	str	r3, [sp, #8]
 800de2a:	f107 0314 	add.w	r3, r7, #20
 800de2e:	9301      	str	r3, [sp, #4]
 800de30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de32:	9300      	str	r3, [sp, #0]
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	687a      	ldr	r2, [r7, #4]
 800de38:	68b9      	ldr	r1, [r7, #8]
 800de3a:	68f8      	ldr	r0, [r7, #12]
 800de3c:	f000 f850 	bl	800dee0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800de40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de42:	f000 f8f3 	bl	800e02c <prvAddNewTaskToReadyList>
 800de46:	e001      	b.n	800de4c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800de48:	2300      	movs	r3, #0
 800de4a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800de4c:	697b      	ldr	r3, [r7, #20]
	}
 800de4e:	4618      	mov	r0, r3
 800de50:	3728      	adds	r7, #40	; 0x28
 800de52:	46bd      	mov	sp, r7
 800de54:	bd80      	pop	{r7, pc}

0800de56 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800de56:	b580      	push	{r7, lr}
 800de58:	b08c      	sub	sp, #48	; 0x30
 800de5a:	af04      	add	r7, sp, #16
 800de5c:	60f8      	str	r0, [r7, #12]
 800de5e:	60b9      	str	r1, [r7, #8]
 800de60:	603b      	str	r3, [r7, #0]
 800de62:	4613      	mov	r3, r2
 800de64:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800de66:	88fb      	ldrh	r3, [r7, #6]
 800de68:	009b      	lsls	r3, r3, #2
 800de6a:	4618      	mov	r0, r3
 800de6c:	f001 fd4e 	bl	800f90c <pvPortMalloc>
 800de70:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d00e      	beq.n	800de96 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800de78:	20b4      	movs	r0, #180	; 0xb4
 800de7a:	f001 fd47 	bl	800f90c <pvPortMalloc>
 800de7e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800de80:	69fb      	ldr	r3, [r7, #28]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d003      	beq.n	800de8e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800de86:	69fb      	ldr	r3, [r7, #28]
 800de88:	697a      	ldr	r2, [r7, #20]
 800de8a:	631a      	str	r2, [r3, #48]	; 0x30
 800de8c:	e005      	b.n	800de9a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800de8e:	6978      	ldr	r0, [r7, #20]
 800de90:	f001 fe06 	bl	800faa0 <vPortFree>
 800de94:	e001      	b.n	800de9a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800de96:	2300      	movs	r3, #0
 800de98:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800de9a:	69fb      	ldr	r3, [r7, #28]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d017      	beq.n	800ded0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dea0:	69fb      	ldr	r3, [r7, #28]
 800dea2:	2200      	movs	r2, #0
 800dea4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dea8:	88fa      	ldrh	r2, [r7, #6]
 800deaa:	2300      	movs	r3, #0
 800deac:	9303      	str	r3, [sp, #12]
 800deae:	69fb      	ldr	r3, [r7, #28]
 800deb0:	9302      	str	r3, [sp, #8]
 800deb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deb4:	9301      	str	r3, [sp, #4]
 800deb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deb8:	9300      	str	r3, [sp, #0]
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	68b9      	ldr	r1, [r7, #8]
 800debe:	68f8      	ldr	r0, [r7, #12]
 800dec0:	f000 f80e 	bl	800dee0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dec4:	69f8      	ldr	r0, [r7, #28]
 800dec6:	f000 f8b1 	bl	800e02c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800deca:	2301      	movs	r3, #1
 800decc:	61bb      	str	r3, [r7, #24]
 800dece:	e002      	b.n	800ded6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ded0:	f04f 33ff 	mov.w	r3, #4294967295
 800ded4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ded6:	69bb      	ldr	r3, [r7, #24]
	}
 800ded8:	4618      	mov	r0, r3
 800deda:	3720      	adds	r7, #32
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd80      	pop	{r7, pc}

0800dee0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b088      	sub	sp, #32
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	60f8      	str	r0, [r7, #12]
 800dee8:	60b9      	str	r1, [r7, #8]
 800deea:	607a      	str	r2, [r7, #4]
 800deec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800deee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800def0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	009b      	lsls	r3, r3, #2
 800def6:	461a      	mov	r2, r3
 800def8:	21a5      	movs	r1, #165	; 0xa5
 800defa:	f002 f8c0 	bl	801007e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800defe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800df08:	3b01      	subs	r3, #1
 800df0a:	009b      	lsls	r3, r3, #2
 800df0c:	4413      	add	r3, r2
 800df0e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800df10:	69bb      	ldr	r3, [r7, #24]
 800df12:	f023 0307 	bic.w	r3, r3, #7
 800df16:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800df18:	69bb      	ldr	r3, [r7, #24]
 800df1a:	f003 0307 	and.w	r3, r3, #7
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d00a      	beq.n	800df38 <prvInitialiseNewTask+0x58>
	__asm volatile
 800df22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df26:	f383 8811 	msr	BASEPRI, r3
 800df2a:	f3bf 8f6f 	isb	sy
 800df2e:	f3bf 8f4f 	dsb	sy
 800df32:	617b      	str	r3, [r7, #20]
}
 800df34:	bf00      	nop
 800df36:	e7fe      	b.n	800df36 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d01f      	beq.n	800df7e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df3e:	2300      	movs	r3, #0
 800df40:	61fb      	str	r3, [r7, #28]
 800df42:	e012      	b.n	800df6a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800df44:	68ba      	ldr	r2, [r7, #8]
 800df46:	69fb      	ldr	r3, [r7, #28]
 800df48:	4413      	add	r3, r2
 800df4a:	7819      	ldrb	r1, [r3, #0]
 800df4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df4e:	69fb      	ldr	r3, [r7, #28]
 800df50:	4413      	add	r3, r2
 800df52:	3334      	adds	r3, #52	; 0x34
 800df54:	460a      	mov	r2, r1
 800df56:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800df58:	68ba      	ldr	r2, [r7, #8]
 800df5a:	69fb      	ldr	r3, [r7, #28]
 800df5c:	4413      	add	r3, r2
 800df5e:	781b      	ldrb	r3, [r3, #0]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d006      	beq.n	800df72 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df64:	69fb      	ldr	r3, [r7, #28]
 800df66:	3301      	adds	r3, #1
 800df68:	61fb      	str	r3, [r7, #28]
 800df6a:	69fb      	ldr	r3, [r7, #28]
 800df6c:	2b0f      	cmp	r3, #15
 800df6e:	d9e9      	bls.n	800df44 <prvInitialiseNewTask+0x64>
 800df70:	e000      	b.n	800df74 <prvInitialiseNewTask+0x94>
			{
				break;
 800df72:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800df74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df76:	2200      	movs	r2, #0
 800df78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800df7c:	e003      	b.n	800df86 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800df7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df80:	2200      	movs	r2, #0
 800df82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800df86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df88:	2b06      	cmp	r3, #6
 800df8a:	d901      	bls.n	800df90 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800df8c:	2306      	movs	r3, #6
 800df8e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800df90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df94:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800df96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df9a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800df9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df9e:	2200      	movs	r2, #0
 800dfa0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dfa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfa4:	3304      	adds	r3, #4
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	f7fe fec8 	bl	800cd3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dfac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfae:	3318      	adds	r3, #24
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f7fe fec3 	bl	800cd3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dfb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dfbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfbe:	f1c3 0207 	rsb	r2, r3, #7
 800dfc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfc4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dfc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dfcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfce:	2200      	movs	r2, #0
 800dfd0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dfd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800dfdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfde:	334c      	adds	r3, #76	; 0x4c
 800dfe0:	2260      	movs	r2, #96	; 0x60
 800dfe2:	2100      	movs	r1, #0
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f002 f84a 	bl	801007e <memset>
 800dfea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfec:	4a0c      	ldr	r2, [pc, #48]	; (800e020 <prvInitialiseNewTask+0x140>)
 800dfee:	651a      	str	r2, [r3, #80]	; 0x50
 800dff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff2:	4a0c      	ldr	r2, [pc, #48]	; (800e024 <prvInitialiseNewTask+0x144>)
 800dff4:	655a      	str	r2, [r3, #84]	; 0x54
 800dff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff8:	4a0b      	ldr	r2, [pc, #44]	; (800e028 <prvInitialiseNewTask+0x148>)
 800dffa:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dffc:	683a      	ldr	r2, [r7, #0]
 800dffe:	68f9      	ldr	r1, [r7, #12]
 800e000:	69b8      	ldr	r0, [r7, #24]
 800e002:	f001 fa93 	bl	800f52c <pxPortInitialiseStack>
 800e006:	4602      	mov	r2, r0
 800e008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e00a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d002      	beq.n	800e018 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e016:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e018:	bf00      	nop
 800e01a:	3720      	adds	r7, #32
 800e01c:	46bd      	mov	sp, r7
 800e01e:	bd80      	pop	{r7, pc}
 800e020:	080136f4 	.word	0x080136f4
 800e024:	08013714 	.word	0x08013714
 800e028:	080136d4 	.word	0x080136d4

0800e02c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b082      	sub	sp, #8
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e034:	f001 fb6a 	bl	800f70c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e038:	4b2a      	ldr	r3, [pc, #168]	; (800e0e4 <prvAddNewTaskToReadyList+0xb8>)
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	3301      	adds	r3, #1
 800e03e:	4a29      	ldr	r2, [pc, #164]	; (800e0e4 <prvAddNewTaskToReadyList+0xb8>)
 800e040:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e042:	4b29      	ldr	r3, [pc, #164]	; (800e0e8 <prvAddNewTaskToReadyList+0xbc>)
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d109      	bne.n	800e05e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e04a:	4a27      	ldr	r2, [pc, #156]	; (800e0e8 <prvAddNewTaskToReadyList+0xbc>)
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e050:	4b24      	ldr	r3, [pc, #144]	; (800e0e4 <prvAddNewTaskToReadyList+0xb8>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	2b01      	cmp	r3, #1
 800e056:	d110      	bne.n	800e07a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e058:	f000 fc3e 	bl	800e8d8 <prvInitialiseTaskLists>
 800e05c:	e00d      	b.n	800e07a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e05e:	4b23      	ldr	r3, [pc, #140]	; (800e0ec <prvAddNewTaskToReadyList+0xc0>)
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d109      	bne.n	800e07a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e066:	4b20      	ldr	r3, [pc, #128]	; (800e0e8 <prvAddNewTaskToReadyList+0xbc>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e070:	429a      	cmp	r2, r3
 800e072:	d802      	bhi.n	800e07a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e074:	4a1c      	ldr	r2, [pc, #112]	; (800e0e8 <prvAddNewTaskToReadyList+0xbc>)
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e07a:	4b1d      	ldr	r3, [pc, #116]	; (800e0f0 <prvAddNewTaskToReadyList+0xc4>)
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	3301      	adds	r3, #1
 800e080:	4a1b      	ldr	r2, [pc, #108]	; (800e0f0 <prvAddNewTaskToReadyList+0xc4>)
 800e082:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e088:	2201      	movs	r2, #1
 800e08a:	409a      	lsls	r2, r3
 800e08c:	4b19      	ldr	r3, [pc, #100]	; (800e0f4 <prvAddNewTaskToReadyList+0xc8>)
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	4313      	orrs	r3, r2
 800e092:	4a18      	ldr	r2, [pc, #96]	; (800e0f4 <prvAddNewTaskToReadyList+0xc8>)
 800e094:	6013      	str	r3, [r2, #0]
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e09a:	4613      	mov	r3, r2
 800e09c:	009b      	lsls	r3, r3, #2
 800e09e:	4413      	add	r3, r2
 800e0a0:	009b      	lsls	r3, r3, #2
 800e0a2:	4a15      	ldr	r2, [pc, #84]	; (800e0f8 <prvAddNewTaskToReadyList+0xcc>)
 800e0a4:	441a      	add	r2, r3
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	3304      	adds	r3, #4
 800e0aa:	4619      	mov	r1, r3
 800e0ac:	4610      	mov	r0, r2
 800e0ae:	f7fe fe51 	bl	800cd54 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e0b2:	f001 fb5b 	bl	800f76c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e0b6:	4b0d      	ldr	r3, [pc, #52]	; (800e0ec <prvAddNewTaskToReadyList+0xc0>)
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d00e      	beq.n	800e0dc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e0be:	4b0a      	ldr	r3, [pc, #40]	; (800e0e8 <prvAddNewTaskToReadyList+0xbc>)
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0c8:	429a      	cmp	r2, r3
 800e0ca:	d207      	bcs.n	800e0dc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e0cc:	4b0b      	ldr	r3, [pc, #44]	; (800e0fc <prvAddNewTaskToReadyList+0xd0>)
 800e0ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0d2:	601a      	str	r2, [r3, #0]
 800e0d4:	f3bf 8f4f 	dsb	sy
 800e0d8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e0dc:	bf00      	nop
 800e0de:	3708      	adds	r7, #8
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd80      	pop	{r7, pc}
 800e0e4:	20001c34 	.word	0x20001c34
 800e0e8:	20001b34 	.word	0x20001b34
 800e0ec:	20001c40 	.word	0x20001c40
 800e0f0:	20001c50 	.word	0x20001c50
 800e0f4:	20001c3c 	.word	0x20001c3c
 800e0f8:	20001b38 	.word	0x20001b38
 800e0fc:	e000ed04 	.word	0xe000ed04

0800e100 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e100:	b580      	push	{r7, lr}
 800e102:	b084      	sub	sp, #16
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e108:	2300      	movs	r3, #0
 800e10a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d017      	beq.n	800e142 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e112:	4b13      	ldr	r3, [pc, #76]	; (800e160 <vTaskDelay+0x60>)
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d00a      	beq.n	800e130 <vTaskDelay+0x30>
	__asm volatile
 800e11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e11e:	f383 8811 	msr	BASEPRI, r3
 800e122:	f3bf 8f6f 	isb	sy
 800e126:	f3bf 8f4f 	dsb	sy
 800e12a:	60bb      	str	r3, [r7, #8]
}
 800e12c:	bf00      	nop
 800e12e:	e7fe      	b.n	800e12e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e130:	f000 f88a 	bl	800e248 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e134:	2100      	movs	r1, #0
 800e136:	6878      	ldr	r0, [r7, #4]
 800e138:	f000 fe62 	bl	800ee00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e13c:	f000 f892 	bl	800e264 <xTaskResumeAll>
 800e140:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d107      	bne.n	800e158 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e148:	4b06      	ldr	r3, [pc, #24]	; (800e164 <vTaskDelay+0x64>)
 800e14a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e14e:	601a      	str	r2, [r3, #0]
 800e150:	f3bf 8f4f 	dsb	sy
 800e154:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e158:	bf00      	nop
 800e15a:	3710      	adds	r7, #16
 800e15c:	46bd      	mov	sp, r7
 800e15e:	bd80      	pop	{r7, pc}
 800e160:	20001c5c 	.word	0x20001c5c
 800e164:	e000ed04 	.word	0xe000ed04

0800e168 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b08a      	sub	sp, #40	; 0x28
 800e16c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e16e:	2300      	movs	r3, #0
 800e170:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e172:	2300      	movs	r3, #0
 800e174:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e176:	463a      	mov	r2, r7
 800e178:	1d39      	adds	r1, r7, #4
 800e17a:	f107 0308 	add.w	r3, r7, #8
 800e17e:	4618      	mov	r0, r3
 800e180:	f7f2 ffd4 	bl	800112c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e184:	6839      	ldr	r1, [r7, #0]
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	68ba      	ldr	r2, [r7, #8]
 800e18a:	9202      	str	r2, [sp, #8]
 800e18c:	9301      	str	r3, [sp, #4]
 800e18e:	2300      	movs	r3, #0
 800e190:	9300      	str	r3, [sp, #0]
 800e192:	2300      	movs	r3, #0
 800e194:	460a      	mov	r2, r1
 800e196:	4924      	ldr	r1, [pc, #144]	; (800e228 <vTaskStartScheduler+0xc0>)
 800e198:	4824      	ldr	r0, [pc, #144]	; (800e22c <vTaskStartScheduler+0xc4>)
 800e19a:	f7ff fdff 	bl	800dd9c <xTaskCreateStatic>
 800e19e:	4603      	mov	r3, r0
 800e1a0:	4a23      	ldr	r2, [pc, #140]	; (800e230 <vTaskStartScheduler+0xc8>)
 800e1a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e1a4:	4b22      	ldr	r3, [pc, #136]	; (800e230 <vTaskStartScheduler+0xc8>)
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d002      	beq.n	800e1b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e1ac:	2301      	movs	r3, #1
 800e1ae:	617b      	str	r3, [r7, #20]
 800e1b0:	e001      	b.n	800e1b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e1b6:	697b      	ldr	r3, [r7, #20]
 800e1b8:	2b01      	cmp	r3, #1
 800e1ba:	d102      	bne.n	800e1c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e1bc:	f000 fe86 	bl	800eecc <xTimerCreateTimerTask>
 800e1c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	2b01      	cmp	r3, #1
 800e1c6:	d11b      	bne.n	800e200 <vTaskStartScheduler+0x98>
	__asm volatile
 800e1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1cc:	f383 8811 	msr	BASEPRI, r3
 800e1d0:	f3bf 8f6f 	isb	sy
 800e1d4:	f3bf 8f4f 	dsb	sy
 800e1d8:	613b      	str	r3, [r7, #16]
}
 800e1da:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e1dc:	4b15      	ldr	r3, [pc, #84]	; (800e234 <vTaskStartScheduler+0xcc>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	334c      	adds	r3, #76	; 0x4c
 800e1e2:	4a15      	ldr	r2, [pc, #84]	; (800e238 <vTaskStartScheduler+0xd0>)
 800e1e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e1e6:	4b15      	ldr	r3, [pc, #84]	; (800e23c <vTaskStartScheduler+0xd4>)
 800e1e8:	f04f 32ff 	mov.w	r2, #4294967295
 800e1ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e1ee:	4b14      	ldr	r3, [pc, #80]	; (800e240 <vTaskStartScheduler+0xd8>)
 800e1f0:	2201      	movs	r2, #1
 800e1f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e1f4:	4b13      	ldr	r3, [pc, #76]	; (800e244 <vTaskStartScheduler+0xdc>)
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e1fa:	f001 fa15 	bl	800f628 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e1fe:	e00e      	b.n	800e21e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e206:	d10a      	bne.n	800e21e <vTaskStartScheduler+0xb6>
	__asm volatile
 800e208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e20c:	f383 8811 	msr	BASEPRI, r3
 800e210:	f3bf 8f6f 	isb	sy
 800e214:	f3bf 8f4f 	dsb	sy
 800e218:	60fb      	str	r3, [r7, #12]
}
 800e21a:	bf00      	nop
 800e21c:	e7fe      	b.n	800e21c <vTaskStartScheduler+0xb4>
}
 800e21e:	bf00      	nop
 800e220:	3718      	adds	r7, #24
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}
 800e226:	bf00      	nop
 800e228:	080129c8 	.word	0x080129c8
 800e22c:	0800e8a5 	.word	0x0800e8a5
 800e230:	20001c58 	.word	0x20001c58
 800e234:	20001b34 	.word	0x20001b34
 800e238:	20000094 	.word	0x20000094
 800e23c:	20001c54 	.word	0x20001c54
 800e240:	20001c40 	.word	0x20001c40
 800e244:	20001c38 	.word	0x20001c38

0800e248 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e248:	b480      	push	{r7}
 800e24a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e24c:	4b04      	ldr	r3, [pc, #16]	; (800e260 <vTaskSuspendAll+0x18>)
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	3301      	adds	r3, #1
 800e252:	4a03      	ldr	r2, [pc, #12]	; (800e260 <vTaskSuspendAll+0x18>)
 800e254:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800e256:	bf00      	nop
 800e258:	46bd      	mov	sp, r7
 800e25a:	bc80      	pop	{r7}
 800e25c:	4770      	bx	lr
 800e25e:	bf00      	nop
 800e260:	20001c5c 	.word	0x20001c5c

0800e264 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b084      	sub	sp, #16
 800e268:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e26a:	2300      	movs	r3, #0
 800e26c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e26e:	2300      	movs	r3, #0
 800e270:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e272:	4b41      	ldr	r3, [pc, #260]	; (800e378 <xTaskResumeAll+0x114>)
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d10a      	bne.n	800e290 <xTaskResumeAll+0x2c>
	__asm volatile
 800e27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e27e:	f383 8811 	msr	BASEPRI, r3
 800e282:	f3bf 8f6f 	isb	sy
 800e286:	f3bf 8f4f 	dsb	sy
 800e28a:	603b      	str	r3, [r7, #0]
}
 800e28c:	bf00      	nop
 800e28e:	e7fe      	b.n	800e28e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e290:	f001 fa3c 	bl	800f70c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e294:	4b38      	ldr	r3, [pc, #224]	; (800e378 <xTaskResumeAll+0x114>)
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	3b01      	subs	r3, #1
 800e29a:	4a37      	ldr	r2, [pc, #220]	; (800e378 <xTaskResumeAll+0x114>)
 800e29c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e29e:	4b36      	ldr	r3, [pc, #216]	; (800e378 <xTaskResumeAll+0x114>)
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d161      	bne.n	800e36a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e2a6:	4b35      	ldr	r3, [pc, #212]	; (800e37c <xTaskResumeAll+0x118>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d05d      	beq.n	800e36a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e2ae:	e02e      	b.n	800e30e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2b0:	4b33      	ldr	r3, [pc, #204]	; (800e380 <xTaskResumeAll+0x11c>)
 800e2b2:	68db      	ldr	r3, [r3, #12]
 800e2b4:	68db      	ldr	r3, [r3, #12]
 800e2b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	3318      	adds	r3, #24
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f7fe fda4 	bl	800ce0a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	3304      	adds	r3, #4
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f7fe fd9f 	bl	800ce0a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2d0:	2201      	movs	r2, #1
 800e2d2:	409a      	lsls	r2, r3
 800e2d4:	4b2b      	ldr	r3, [pc, #172]	; (800e384 <xTaskResumeAll+0x120>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	4313      	orrs	r3, r2
 800e2da:	4a2a      	ldr	r2, [pc, #168]	; (800e384 <xTaskResumeAll+0x120>)
 800e2dc:	6013      	str	r3, [r2, #0]
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2e2:	4613      	mov	r3, r2
 800e2e4:	009b      	lsls	r3, r3, #2
 800e2e6:	4413      	add	r3, r2
 800e2e8:	009b      	lsls	r3, r3, #2
 800e2ea:	4a27      	ldr	r2, [pc, #156]	; (800e388 <xTaskResumeAll+0x124>)
 800e2ec:	441a      	add	r2, r3
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	3304      	adds	r3, #4
 800e2f2:	4619      	mov	r1, r3
 800e2f4:	4610      	mov	r0, r2
 800e2f6:	f7fe fd2d 	bl	800cd54 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2fe:	4b23      	ldr	r3, [pc, #140]	; (800e38c <xTaskResumeAll+0x128>)
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e304:	429a      	cmp	r2, r3
 800e306:	d302      	bcc.n	800e30e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800e308:	4b21      	ldr	r3, [pc, #132]	; (800e390 <xTaskResumeAll+0x12c>)
 800e30a:	2201      	movs	r2, #1
 800e30c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e30e:	4b1c      	ldr	r3, [pc, #112]	; (800e380 <xTaskResumeAll+0x11c>)
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d1cc      	bne.n	800e2b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d001      	beq.n	800e320 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e31c:	f000 fb7e 	bl	800ea1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e320:	4b1c      	ldr	r3, [pc, #112]	; (800e394 <xTaskResumeAll+0x130>)
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d010      	beq.n	800e34e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e32c:	f000 f844 	bl	800e3b8 <xTaskIncrementTick>
 800e330:	4603      	mov	r3, r0
 800e332:	2b00      	cmp	r3, #0
 800e334:	d002      	beq.n	800e33c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800e336:	4b16      	ldr	r3, [pc, #88]	; (800e390 <xTaskResumeAll+0x12c>)
 800e338:	2201      	movs	r2, #1
 800e33a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	3b01      	subs	r3, #1
 800e340:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d1f1      	bne.n	800e32c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800e348:	4b12      	ldr	r3, [pc, #72]	; (800e394 <xTaskResumeAll+0x130>)
 800e34a:	2200      	movs	r2, #0
 800e34c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e34e:	4b10      	ldr	r3, [pc, #64]	; (800e390 <xTaskResumeAll+0x12c>)
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d009      	beq.n	800e36a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e356:	2301      	movs	r3, #1
 800e358:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e35a:	4b0f      	ldr	r3, [pc, #60]	; (800e398 <xTaskResumeAll+0x134>)
 800e35c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e360:	601a      	str	r2, [r3, #0]
 800e362:	f3bf 8f4f 	dsb	sy
 800e366:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e36a:	f001 f9ff 	bl	800f76c <vPortExitCritical>

	return xAlreadyYielded;
 800e36e:	68bb      	ldr	r3, [r7, #8]
}
 800e370:	4618      	mov	r0, r3
 800e372:	3710      	adds	r7, #16
 800e374:	46bd      	mov	sp, r7
 800e376:	bd80      	pop	{r7, pc}
 800e378:	20001c5c 	.word	0x20001c5c
 800e37c:	20001c34 	.word	0x20001c34
 800e380:	20001bf4 	.word	0x20001bf4
 800e384:	20001c3c 	.word	0x20001c3c
 800e388:	20001b38 	.word	0x20001b38
 800e38c:	20001b34 	.word	0x20001b34
 800e390:	20001c48 	.word	0x20001c48
 800e394:	20001c44 	.word	0x20001c44
 800e398:	e000ed04 	.word	0xe000ed04

0800e39c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e39c:	b480      	push	{r7}
 800e39e:	b083      	sub	sp, #12
 800e3a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e3a2:	4b04      	ldr	r3, [pc, #16]	; (800e3b4 <xTaskGetTickCount+0x18>)
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e3a8:	687b      	ldr	r3, [r7, #4]
}
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	370c      	adds	r7, #12
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bc80      	pop	{r7}
 800e3b2:	4770      	bx	lr
 800e3b4:	20001c38 	.word	0x20001c38

0800e3b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b086      	sub	sp, #24
 800e3bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3c2:	4b4e      	ldr	r3, [pc, #312]	; (800e4fc <xTaskIncrementTick+0x144>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	f040 8088 	bne.w	800e4dc <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e3cc:	4b4c      	ldr	r3, [pc, #304]	; (800e500 <xTaskIncrementTick+0x148>)
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	3301      	adds	r3, #1
 800e3d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e3d4:	4a4a      	ldr	r2, [pc, #296]	; (800e500 <xTaskIncrementTick+0x148>)
 800e3d6:	693b      	ldr	r3, [r7, #16]
 800e3d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e3da:	693b      	ldr	r3, [r7, #16]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d120      	bne.n	800e422 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e3e0:	4b48      	ldr	r3, [pc, #288]	; (800e504 <xTaskIncrementTick+0x14c>)
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d00a      	beq.n	800e400 <xTaskIncrementTick+0x48>
	__asm volatile
 800e3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ee:	f383 8811 	msr	BASEPRI, r3
 800e3f2:	f3bf 8f6f 	isb	sy
 800e3f6:	f3bf 8f4f 	dsb	sy
 800e3fa:	603b      	str	r3, [r7, #0]
}
 800e3fc:	bf00      	nop
 800e3fe:	e7fe      	b.n	800e3fe <xTaskIncrementTick+0x46>
 800e400:	4b40      	ldr	r3, [pc, #256]	; (800e504 <xTaskIncrementTick+0x14c>)
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	60fb      	str	r3, [r7, #12]
 800e406:	4b40      	ldr	r3, [pc, #256]	; (800e508 <xTaskIncrementTick+0x150>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	4a3e      	ldr	r2, [pc, #248]	; (800e504 <xTaskIncrementTick+0x14c>)
 800e40c:	6013      	str	r3, [r2, #0]
 800e40e:	4a3e      	ldr	r2, [pc, #248]	; (800e508 <xTaskIncrementTick+0x150>)
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	6013      	str	r3, [r2, #0]
 800e414:	4b3d      	ldr	r3, [pc, #244]	; (800e50c <xTaskIncrementTick+0x154>)
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	3301      	adds	r3, #1
 800e41a:	4a3c      	ldr	r2, [pc, #240]	; (800e50c <xTaskIncrementTick+0x154>)
 800e41c:	6013      	str	r3, [r2, #0]
 800e41e:	f000 fafd 	bl	800ea1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e422:	4b3b      	ldr	r3, [pc, #236]	; (800e510 <xTaskIncrementTick+0x158>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	693a      	ldr	r2, [r7, #16]
 800e428:	429a      	cmp	r2, r3
 800e42a:	d348      	bcc.n	800e4be <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e42c:	4b35      	ldr	r3, [pc, #212]	; (800e504 <xTaskIncrementTick+0x14c>)
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d104      	bne.n	800e440 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e436:	4b36      	ldr	r3, [pc, #216]	; (800e510 <xTaskIncrementTick+0x158>)
 800e438:	f04f 32ff 	mov.w	r2, #4294967295
 800e43c:	601a      	str	r2, [r3, #0]
					break;
 800e43e:	e03e      	b.n	800e4be <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e440:	4b30      	ldr	r3, [pc, #192]	; (800e504 <xTaskIncrementTick+0x14c>)
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	68db      	ldr	r3, [r3, #12]
 800e446:	68db      	ldr	r3, [r3, #12]
 800e448:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e44a:	68bb      	ldr	r3, [r7, #8]
 800e44c:	685b      	ldr	r3, [r3, #4]
 800e44e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e450:	693a      	ldr	r2, [r7, #16]
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	429a      	cmp	r2, r3
 800e456:	d203      	bcs.n	800e460 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e458:	4a2d      	ldr	r2, [pc, #180]	; (800e510 <xTaskIncrementTick+0x158>)
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e45e:	e02e      	b.n	800e4be <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e460:	68bb      	ldr	r3, [r7, #8]
 800e462:	3304      	adds	r3, #4
 800e464:	4618      	mov	r0, r3
 800e466:	f7fe fcd0 	bl	800ce0a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e46a:	68bb      	ldr	r3, [r7, #8]
 800e46c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d004      	beq.n	800e47c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e472:	68bb      	ldr	r3, [r7, #8]
 800e474:	3318      	adds	r3, #24
 800e476:	4618      	mov	r0, r3
 800e478:	f7fe fcc7 	bl	800ce0a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e47c:	68bb      	ldr	r3, [r7, #8]
 800e47e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e480:	2201      	movs	r2, #1
 800e482:	409a      	lsls	r2, r3
 800e484:	4b23      	ldr	r3, [pc, #140]	; (800e514 <xTaskIncrementTick+0x15c>)
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	4313      	orrs	r3, r2
 800e48a:	4a22      	ldr	r2, [pc, #136]	; (800e514 <xTaskIncrementTick+0x15c>)
 800e48c:	6013      	str	r3, [r2, #0]
 800e48e:	68bb      	ldr	r3, [r7, #8]
 800e490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e492:	4613      	mov	r3, r2
 800e494:	009b      	lsls	r3, r3, #2
 800e496:	4413      	add	r3, r2
 800e498:	009b      	lsls	r3, r3, #2
 800e49a:	4a1f      	ldr	r2, [pc, #124]	; (800e518 <xTaskIncrementTick+0x160>)
 800e49c:	441a      	add	r2, r3
 800e49e:	68bb      	ldr	r3, [r7, #8]
 800e4a0:	3304      	adds	r3, #4
 800e4a2:	4619      	mov	r1, r3
 800e4a4:	4610      	mov	r0, r2
 800e4a6:	f7fe fc55 	bl	800cd54 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4ae:	4b1b      	ldr	r3, [pc, #108]	; (800e51c <xTaskIncrementTick+0x164>)
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4b4:	429a      	cmp	r2, r3
 800e4b6:	d3b9      	bcc.n	800e42c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e4b8:	2301      	movs	r3, #1
 800e4ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e4bc:	e7b6      	b.n	800e42c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e4be:	4b17      	ldr	r3, [pc, #92]	; (800e51c <xTaskIncrementTick+0x164>)
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4c4:	4914      	ldr	r1, [pc, #80]	; (800e518 <xTaskIncrementTick+0x160>)
 800e4c6:	4613      	mov	r3, r2
 800e4c8:	009b      	lsls	r3, r3, #2
 800e4ca:	4413      	add	r3, r2
 800e4cc:	009b      	lsls	r3, r3, #2
 800e4ce:	440b      	add	r3, r1
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	2b01      	cmp	r3, #1
 800e4d4:	d907      	bls.n	800e4e6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800e4d6:	2301      	movs	r3, #1
 800e4d8:	617b      	str	r3, [r7, #20]
 800e4da:	e004      	b.n	800e4e6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e4dc:	4b10      	ldr	r3, [pc, #64]	; (800e520 <xTaskIncrementTick+0x168>)
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	3301      	adds	r3, #1
 800e4e2:	4a0f      	ldr	r2, [pc, #60]	; (800e520 <xTaskIncrementTick+0x168>)
 800e4e4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e4e6:	4b0f      	ldr	r3, [pc, #60]	; (800e524 <xTaskIncrementTick+0x16c>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d001      	beq.n	800e4f2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800e4ee:	2301      	movs	r3, #1
 800e4f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e4f2:	697b      	ldr	r3, [r7, #20]
}
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	3718      	adds	r7, #24
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bd80      	pop	{r7, pc}
 800e4fc:	20001c5c 	.word	0x20001c5c
 800e500:	20001c38 	.word	0x20001c38
 800e504:	20001bec 	.word	0x20001bec
 800e508:	20001bf0 	.word	0x20001bf0
 800e50c:	20001c4c 	.word	0x20001c4c
 800e510:	20001c54 	.word	0x20001c54
 800e514:	20001c3c 	.word	0x20001c3c
 800e518:	20001b38 	.word	0x20001b38
 800e51c:	20001b34 	.word	0x20001b34
 800e520:	20001c44 	.word	0x20001c44
 800e524:	20001c48 	.word	0x20001c48

0800e528 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b088      	sub	sp, #32
 800e52c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e52e:	4b3c      	ldr	r3, [pc, #240]	; (800e620 <vTaskSwitchContext+0xf8>)
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d003      	beq.n	800e53e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e536:	4b3b      	ldr	r3, [pc, #236]	; (800e624 <vTaskSwitchContext+0xfc>)
 800e538:	2201      	movs	r2, #1
 800e53a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e53c:	e06b      	b.n	800e616 <vTaskSwitchContext+0xee>
		xYieldPending = pdFALSE;
 800e53e:	4b39      	ldr	r3, [pc, #228]	; (800e624 <vTaskSwitchContext+0xfc>)
 800e540:	2200      	movs	r2, #0
 800e542:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800e544:	4b38      	ldr	r3, [pc, #224]	; (800e628 <vTaskSwitchContext+0x100>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e54a:	61fb      	str	r3, [r7, #28]
 800e54c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800e550:	61bb      	str	r3, [r7, #24]
 800e552:	69fb      	ldr	r3, [r7, #28]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	69ba      	ldr	r2, [r7, #24]
 800e558:	429a      	cmp	r2, r3
 800e55a:	d111      	bne.n	800e580 <vTaskSwitchContext+0x58>
 800e55c:	69fb      	ldr	r3, [r7, #28]
 800e55e:	3304      	adds	r3, #4
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	69ba      	ldr	r2, [r7, #24]
 800e564:	429a      	cmp	r2, r3
 800e566:	d10b      	bne.n	800e580 <vTaskSwitchContext+0x58>
 800e568:	69fb      	ldr	r3, [r7, #28]
 800e56a:	3308      	adds	r3, #8
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	69ba      	ldr	r2, [r7, #24]
 800e570:	429a      	cmp	r2, r3
 800e572:	d105      	bne.n	800e580 <vTaskSwitchContext+0x58>
 800e574:	69fb      	ldr	r3, [r7, #28]
 800e576:	330c      	adds	r3, #12
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	69ba      	ldr	r2, [r7, #24]
 800e57c:	429a      	cmp	r2, r3
 800e57e:	d008      	beq.n	800e592 <vTaskSwitchContext+0x6a>
 800e580:	4b29      	ldr	r3, [pc, #164]	; (800e628 <vTaskSwitchContext+0x100>)
 800e582:	681a      	ldr	r2, [r3, #0]
 800e584:	4b28      	ldr	r3, [pc, #160]	; (800e628 <vTaskSwitchContext+0x100>)
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	3334      	adds	r3, #52	; 0x34
 800e58a:	4619      	mov	r1, r3
 800e58c:	4610      	mov	r0, r2
 800e58e:	f7f2 fdff 	bl	8001190 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e592:	4b26      	ldr	r3, [pc, #152]	; (800e62c <vTaskSwitchContext+0x104>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	fab3 f383 	clz	r3, r3
 800e59e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e5a0:	7afb      	ldrb	r3, [r7, #11]
 800e5a2:	f1c3 031f 	rsb	r3, r3, #31
 800e5a6:	617b      	str	r3, [r7, #20]
 800e5a8:	4921      	ldr	r1, [pc, #132]	; (800e630 <vTaskSwitchContext+0x108>)
 800e5aa:	697a      	ldr	r2, [r7, #20]
 800e5ac:	4613      	mov	r3, r2
 800e5ae:	009b      	lsls	r3, r3, #2
 800e5b0:	4413      	add	r3, r2
 800e5b2:	009b      	lsls	r3, r3, #2
 800e5b4:	440b      	add	r3, r1
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d10a      	bne.n	800e5d2 <vTaskSwitchContext+0xaa>
	__asm volatile
 800e5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5c0:	f383 8811 	msr	BASEPRI, r3
 800e5c4:	f3bf 8f6f 	isb	sy
 800e5c8:	f3bf 8f4f 	dsb	sy
 800e5cc:	607b      	str	r3, [r7, #4]
}
 800e5ce:	bf00      	nop
 800e5d0:	e7fe      	b.n	800e5d0 <vTaskSwitchContext+0xa8>
 800e5d2:	697a      	ldr	r2, [r7, #20]
 800e5d4:	4613      	mov	r3, r2
 800e5d6:	009b      	lsls	r3, r3, #2
 800e5d8:	4413      	add	r3, r2
 800e5da:	009b      	lsls	r3, r3, #2
 800e5dc:	4a14      	ldr	r2, [pc, #80]	; (800e630 <vTaskSwitchContext+0x108>)
 800e5de:	4413      	add	r3, r2
 800e5e0:	613b      	str	r3, [r7, #16]
 800e5e2:	693b      	ldr	r3, [r7, #16]
 800e5e4:	685b      	ldr	r3, [r3, #4]
 800e5e6:	685a      	ldr	r2, [r3, #4]
 800e5e8:	693b      	ldr	r3, [r7, #16]
 800e5ea:	605a      	str	r2, [r3, #4]
 800e5ec:	693b      	ldr	r3, [r7, #16]
 800e5ee:	685a      	ldr	r2, [r3, #4]
 800e5f0:	693b      	ldr	r3, [r7, #16]
 800e5f2:	3308      	adds	r3, #8
 800e5f4:	429a      	cmp	r2, r3
 800e5f6:	d104      	bne.n	800e602 <vTaskSwitchContext+0xda>
 800e5f8:	693b      	ldr	r3, [r7, #16]
 800e5fa:	685b      	ldr	r3, [r3, #4]
 800e5fc:	685a      	ldr	r2, [r3, #4]
 800e5fe:	693b      	ldr	r3, [r7, #16]
 800e600:	605a      	str	r2, [r3, #4]
 800e602:	693b      	ldr	r3, [r7, #16]
 800e604:	685b      	ldr	r3, [r3, #4]
 800e606:	68db      	ldr	r3, [r3, #12]
 800e608:	4a07      	ldr	r2, [pc, #28]	; (800e628 <vTaskSwitchContext+0x100>)
 800e60a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e60c:	4b06      	ldr	r3, [pc, #24]	; (800e628 <vTaskSwitchContext+0x100>)
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	334c      	adds	r3, #76	; 0x4c
 800e612:	4a08      	ldr	r2, [pc, #32]	; (800e634 <vTaskSwitchContext+0x10c>)
 800e614:	6013      	str	r3, [r2, #0]
}
 800e616:	bf00      	nop
 800e618:	3720      	adds	r7, #32
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bd80      	pop	{r7, pc}
 800e61e:	bf00      	nop
 800e620:	20001c5c 	.word	0x20001c5c
 800e624:	20001c48 	.word	0x20001c48
 800e628:	20001b34 	.word	0x20001b34
 800e62c:	20001c3c 	.word	0x20001c3c
 800e630:	20001b38 	.word	0x20001b38
 800e634:	20000094 	.word	0x20000094

0800e638 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b084      	sub	sp, #16
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
 800e640:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d10a      	bne.n	800e65e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e64c:	f383 8811 	msr	BASEPRI, r3
 800e650:	f3bf 8f6f 	isb	sy
 800e654:	f3bf 8f4f 	dsb	sy
 800e658:	60fb      	str	r3, [r7, #12]
}
 800e65a:	bf00      	nop
 800e65c:	e7fe      	b.n	800e65c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e65e:	4b07      	ldr	r3, [pc, #28]	; (800e67c <vTaskPlaceOnEventList+0x44>)
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	3318      	adds	r3, #24
 800e664:	4619      	mov	r1, r3
 800e666:	6878      	ldr	r0, [r7, #4]
 800e668:	f7fe fb97 	bl	800cd9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e66c:	2101      	movs	r1, #1
 800e66e:	6838      	ldr	r0, [r7, #0]
 800e670:	f000 fbc6 	bl	800ee00 <prvAddCurrentTaskToDelayedList>
}
 800e674:	bf00      	nop
 800e676:	3710      	adds	r7, #16
 800e678:	46bd      	mov	sp, r7
 800e67a:	bd80      	pop	{r7, pc}
 800e67c:	20001b34 	.word	0x20001b34

0800e680 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e680:	b580      	push	{r7, lr}
 800e682:	b086      	sub	sp, #24
 800e684:	af00      	add	r7, sp, #0
 800e686:	60f8      	str	r0, [r7, #12]
 800e688:	60b9      	str	r1, [r7, #8]
 800e68a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d10a      	bne.n	800e6a8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e696:	f383 8811 	msr	BASEPRI, r3
 800e69a:	f3bf 8f6f 	isb	sy
 800e69e:	f3bf 8f4f 	dsb	sy
 800e6a2:	617b      	str	r3, [r7, #20]
}
 800e6a4:	bf00      	nop
 800e6a6:	e7fe      	b.n	800e6a6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e6a8:	4b0a      	ldr	r3, [pc, #40]	; (800e6d4 <vTaskPlaceOnEventListRestricted+0x54>)
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	3318      	adds	r3, #24
 800e6ae:	4619      	mov	r1, r3
 800e6b0:	68f8      	ldr	r0, [r7, #12]
 800e6b2:	f7fe fb4f 	bl	800cd54 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d002      	beq.n	800e6c2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e6bc:	f04f 33ff 	mov.w	r3, #4294967295
 800e6c0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e6c2:	6879      	ldr	r1, [r7, #4]
 800e6c4:	68b8      	ldr	r0, [r7, #8]
 800e6c6:	f000 fb9b 	bl	800ee00 <prvAddCurrentTaskToDelayedList>
	}
 800e6ca:	bf00      	nop
 800e6cc:	3718      	adds	r7, #24
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	bd80      	pop	{r7, pc}
 800e6d2:	bf00      	nop
 800e6d4:	20001b34 	.word	0x20001b34

0800e6d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b086      	sub	sp, #24
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	68db      	ldr	r3, [r3, #12]
 800e6e4:	68db      	ldr	r3, [r3, #12]
 800e6e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e6e8:	693b      	ldr	r3, [r7, #16]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d10a      	bne.n	800e704 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6f2:	f383 8811 	msr	BASEPRI, r3
 800e6f6:	f3bf 8f6f 	isb	sy
 800e6fa:	f3bf 8f4f 	dsb	sy
 800e6fe:	60fb      	str	r3, [r7, #12]
}
 800e700:	bf00      	nop
 800e702:	e7fe      	b.n	800e702 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e704:	693b      	ldr	r3, [r7, #16]
 800e706:	3318      	adds	r3, #24
 800e708:	4618      	mov	r0, r3
 800e70a:	f7fe fb7e 	bl	800ce0a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e70e:	4b1d      	ldr	r3, [pc, #116]	; (800e784 <xTaskRemoveFromEventList+0xac>)
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d11c      	bne.n	800e750 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e716:	693b      	ldr	r3, [r7, #16]
 800e718:	3304      	adds	r3, #4
 800e71a:	4618      	mov	r0, r3
 800e71c:	f7fe fb75 	bl	800ce0a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e720:	693b      	ldr	r3, [r7, #16]
 800e722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e724:	2201      	movs	r2, #1
 800e726:	409a      	lsls	r2, r3
 800e728:	4b17      	ldr	r3, [pc, #92]	; (800e788 <xTaskRemoveFromEventList+0xb0>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	4313      	orrs	r3, r2
 800e72e:	4a16      	ldr	r2, [pc, #88]	; (800e788 <xTaskRemoveFromEventList+0xb0>)
 800e730:	6013      	str	r3, [r2, #0]
 800e732:	693b      	ldr	r3, [r7, #16]
 800e734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e736:	4613      	mov	r3, r2
 800e738:	009b      	lsls	r3, r3, #2
 800e73a:	4413      	add	r3, r2
 800e73c:	009b      	lsls	r3, r3, #2
 800e73e:	4a13      	ldr	r2, [pc, #76]	; (800e78c <xTaskRemoveFromEventList+0xb4>)
 800e740:	441a      	add	r2, r3
 800e742:	693b      	ldr	r3, [r7, #16]
 800e744:	3304      	adds	r3, #4
 800e746:	4619      	mov	r1, r3
 800e748:	4610      	mov	r0, r2
 800e74a:	f7fe fb03 	bl	800cd54 <vListInsertEnd>
 800e74e:	e005      	b.n	800e75c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e750:	693b      	ldr	r3, [r7, #16]
 800e752:	3318      	adds	r3, #24
 800e754:	4619      	mov	r1, r3
 800e756:	480e      	ldr	r0, [pc, #56]	; (800e790 <xTaskRemoveFromEventList+0xb8>)
 800e758:	f7fe fafc 	bl	800cd54 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e75c:	693b      	ldr	r3, [r7, #16]
 800e75e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e760:	4b0c      	ldr	r3, [pc, #48]	; (800e794 <xTaskRemoveFromEventList+0xbc>)
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e766:	429a      	cmp	r2, r3
 800e768:	d905      	bls.n	800e776 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e76a:	2301      	movs	r3, #1
 800e76c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e76e:	4b0a      	ldr	r3, [pc, #40]	; (800e798 <xTaskRemoveFromEventList+0xc0>)
 800e770:	2201      	movs	r2, #1
 800e772:	601a      	str	r2, [r3, #0]
 800e774:	e001      	b.n	800e77a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800e776:	2300      	movs	r3, #0
 800e778:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e77a:	697b      	ldr	r3, [r7, #20]
}
 800e77c:	4618      	mov	r0, r3
 800e77e:	3718      	adds	r7, #24
 800e780:	46bd      	mov	sp, r7
 800e782:	bd80      	pop	{r7, pc}
 800e784:	20001c5c 	.word	0x20001c5c
 800e788:	20001c3c 	.word	0x20001c3c
 800e78c:	20001b38 	.word	0x20001b38
 800e790:	20001bf4 	.word	0x20001bf4
 800e794:	20001b34 	.word	0x20001b34
 800e798:	20001c48 	.word	0x20001c48

0800e79c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e79c:	b480      	push	{r7}
 800e79e:	b083      	sub	sp, #12
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e7a4:	4b06      	ldr	r3, [pc, #24]	; (800e7c0 <vTaskInternalSetTimeOutState+0x24>)
 800e7a6:	681a      	ldr	r2, [r3, #0]
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e7ac:	4b05      	ldr	r3, [pc, #20]	; (800e7c4 <vTaskInternalSetTimeOutState+0x28>)
 800e7ae:	681a      	ldr	r2, [r3, #0]
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	605a      	str	r2, [r3, #4]
}
 800e7b4:	bf00      	nop
 800e7b6:	370c      	adds	r7, #12
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bc80      	pop	{r7}
 800e7bc:	4770      	bx	lr
 800e7be:	bf00      	nop
 800e7c0:	20001c4c 	.word	0x20001c4c
 800e7c4:	20001c38 	.word	0x20001c38

0800e7c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b088      	sub	sp, #32
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
 800e7d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d10a      	bne.n	800e7ee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e7d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7dc:	f383 8811 	msr	BASEPRI, r3
 800e7e0:	f3bf 8f6f 	isb	sy
 800e7e4:	f3bf 8f4f 	dsb	sy
 800e7e8:	613b      	str	r3, [r7, #16]
}
 800e7ea:	bf00      	nop
 800e7ec:	e7fe      	b.n	800e7ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d10a      	bne.n	800e80a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7f8:	f383 8811 	msr	BASEPRI, r3
 800e7fc:	f3bf 8f6f 	isb	sy
 800e800:	f3bf 8f4f 	dsb	sy
 800e804:	60fb      	str	r3, [r7, #12]
}
 800e806:	bf00      	nop
 800e808:	e7fe      	b.n	800e808 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e80a:	f000 ff7f 	bl	800f70c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e80e:	4b1d      	ldr	r3, [pc, #116]	; (800e884 <xTaskCheckForTimeOut+0xbc>)
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	685b      	ldr	r3, [r3, #4]
 800e818:	69ba      	ldr	r2, [r7, #24]
 800e81a:	1ad3      	subs	r3, r2, r3
 800e81c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e81e:	683b      	ldr	r3, [r7, #0]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e826:	d102      	bne.n	800e82e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e828:	2300      	movs	r3, #0
 800e82a:	61fb      	str	r3, [r7, #28]
 800e82c:	e023      	b.n	800e876 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681a      	ldr	r2, [r3, #0]
 800e832:	4b15      	ldr	r3, [pc, #84]	; (800e888 <xTaskCheckForTimeOut+0xc0>)
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	429a      	cmp	r2, r3
 800e838:	d007      	beq.n	800e84a <xTaskCheckForTimeOut+0x82>
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	685b      	ldr	r3, [r3, #4]
 800e83e:	69ba      	ldr	r2, [r7, #24]
 800e840:	429a      	cmp	r2, r3
 800e842:	d302      	bcc.n	800e84a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e844:	2301      	movs	r3, #1
 800e846:	61fb      	str	r3, [r7, #28]
 800e848:	e015      	b.n	800e876 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	697a      	ldr	r2, [r7, #20]
 800e850:	429a      	cmp	r2, r3
 800e852:	d20b      	bcs.n	800e86c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	681a      	ldr	r2, [r3, #0]
 800e858:	697b      	ldr	r3, [r7, #20]
 800e85a:	1ad2      	subs	r2, r2, r3
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e860:	6878      	ldr	r0, [r7, #4]
 800e862:	f7ff ff9b 	bl	800e79c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e866:	2300      	movs	r3, #0
 800e868:	61fb      	str	r3, [r7, #28]
 800e86a:	e004      	b.n	800e876 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	2200      	movs	r2, #0
 800e870:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e872:	2301      	movs	r3, #1
 800e874:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e876:	f000 ff79 	bl	800f76c <vPortExitCritical>

	return xReturn;
 800e87a:	69fb      	ldr	r3, [r7, #28]
}
 800e87c:	4618      	mov	r0, r3
 800e87e:	3720      	adds	r7, #32
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}
 800e884:	20001c38 	.word	0x20001c38
 800e888:	20001c4c 	.word	0x20001c4c

0800e88c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e88c:	b480      	push	{r7}
 800e88e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e890:	4b03      	ldr	r3, [pc, #12]	; (800e8a0 <vTaskMissedYield+0x14>)
 800e892:	2201      	movs	r2, #1
 800e894:	601a      	str	r2, [r3, #0]
}
 800e896:	bf00      	nop
 800e898:	46bd      	mov	sp, r7
 800e89a:	bc80      	pop	{r7}
 800e89c:	4770      	bx	lr
 800e89e:	bf00      	nop
 800e8a0:	20001c48 	.word	0x20001c48

0800e8a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b082      	sub	sp, #8
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e8ac:	f000 f854 	bl	800e958 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e8b0:	4b07      	ldr	r3, [pc, #28]	; (800e8d0 <prvIdleTask+0x2c>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	2b01      	cmp	r3, #1
 800e8b6:	d907      	bls.n	800e8c8 <prvIdleTask+0x24>
			{
				taskYIELD();
 800e8b8:	4b06      	ldr	r3, [pc, #24]	; (800e8d4 <prvIdleTask+0x30>)
 800e8ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8be:	601a      	str	r2, [r3, #0]
 800e8c0:	f3bf 8f4f 	dsb	sy
 800e8c4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800e8c8:	f7f2 fc2a 	bl	8001120 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800e8cc:	e7ee      	b.n	800e8ac <prvIdleTask+0x8>
 800e8ce:	bf00      	nop
 800e8d0:	20001b38 	.word	0x20001b38
 800e8d4:	e000ed04 	.word	0xe000ed04

0800e8d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b082      	sub	sp, #8
 800e8dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e8de:	2300      	movs	r3, #0
 800e8e0:	607b      	str	r3, [r7, #4]
 800e8e2:	e00c      	b.n	800e8fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e8e4:	687a      	ldr	r2, [r7, #4]
 800e8e6:	4613      	mov	r3, r2
 800e8e8:	009b      	lsls	r3, r3, #2
 800e8ea:	4413      	add	r3, r2
 800e8ec:	009b      	lsls	r3, r3, #2
 800e8ee:	4a12      	ldr	r2, [pc, #72]	; (800e938 <prvInitialiseTaskLists+0x60>)
 800e8f0:	4413      	add	r3, r2
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f7fe fa03 	bl	800ccfe <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	3301      	adds	r3, #1
 800e8fc:	607b      	str	r3, [r7, #4]
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	2b06      	cmp	r3, #6
 800e902:	d9ef      	bls.n	800e8e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e904:	480d      	ldr	r0, [pc, #52]	; (800e93c <prvInitialiseTaskLists+0x64>)
 800e906:	f7fe f9fa 	bl	800ccfe <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e90a:	480d      	ldr	r0, [pc, #52]	; (800e940 <prvInitialiseTaskLists+0x68>)
 800e90c:	f7fe f9f7 	bl	800ccfe <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e910:	480c      	ldr	r0, [pc, #48]	; (800e944 <prvInitialiseTaskLists+0x6c>)
 800e912:	f7fe f9f4 	bl	800ccfe <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e916:	480c      	ldr	r0, [pc, #48]	; (800e948 <prvInitialiseTaskLists+0x70>)
 800e918:	f7fe f9f1 	bl	800ccfe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e91c:	480b      	ldr	r0, [pc, #44]	; (800e94c <prvInitialiseTaskLists+0x74>)
 800e91e:	f7fe f9ee 	bl	800ccfe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e922:	4b0b      	ldr	r3, [pc, #44]	; (800e950 <prvInitialiseTaskLists+0x78>)
 800e924:	4a05      	ldr	r2, [pc, #20]	; (800e93c <prvInitialiseTaskLists+0x64>)
 800e926:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e928:	4b0a      	ldr	r3, [pc, #40]	; (800e954 <prvInitialiseTaskLists+0x7c>)
 800e92a:	4a05      	ldr	r2, [pc, #20]	; (800e940 <prvInitialiseTaskLists+0x68>)
 800e92c:	601a      	str	r2, [r3, #0]
}
 800e92e:	bf00      	nop
 800e930:	3708      	adds	r7, #8
 800e932:	46bd      	mov	sp, r7
 800e934:	bd80      	pop	{r7, pc}
 800e936:	bf00      	nop
 800e938:	20001b38 	.word	0x20001b38
 800e93c:	20001bc4 	.word	0x20001bc4
 800e940:	20001bd8 	.word	0x20001bd8
 800e944:	20001bf4 	.word	0x20001bf4
 800e948:	20001c08 	.word	0x20001c08
 800e94c:	20001c20 	.word	0x20001c20
 800e950:	20001bec 	.word	0x20001bec
 800e954:	20001bf0 	.word	0x20001bf0

0800e958 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b082      	sub	sp, #8
 800e95c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e95e:	e019      	b.n	800e994 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e960:	f000 fed4 	bl	800f70c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e964:	4b10      	ldr	r3, [pc, #64]	; (800e9a8 <prvCheckTasksWaitingTermination+0x50>)
 800e966:	68db      	ldr	r3, [r3, #12]
 800e968:	68db      	ldr	r3, [r3, #12]
 800e96a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	3304      	adds	r3, #4
 800e970:	4618      	mov	r0, r3
 800e972:	f7fe fa4a 	bl	800ce0a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e976:	4b0d      	ldr	r3, [pc, #52]	; (800e9ac <prvCheckTasksWaitingTermination+0x54>)
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	3b01      	subs	r3, #1
 800e97c:	4a0b      	ldr	r2, [pc, #44]	; (800e9ac <prvCheckTasksWaitingTermination+0x54>)
 800e97e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e980:	4b0b      	ldr	r3, [pc, #44]	; (800e9b0 <prvCheckTasksWaitingTermination+0x58>)
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	3b01      	subs	r3, #1
 800e986:	4a0a      	ldr	r2, [pc, #40]	; (800e9b0 <prvCheckTasksWaitingTermination+0x58>)
 800e988:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e98a:	f000 feef 	bl	800f76c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e98e:	6878      	ldr	r0, [r7, #4]
 800e990:	f000 f810 	bl	800e9b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e994:	4b06      	ldr	r3, [pc, #24]	; (800e9b0 <prvCheckTasksWaitingTermination+0x58>)
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d1e1      	bne.n	800e960 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e99c:	bf00      	nop
 800e99e:	bf00      	nop
 800e9a0:	3708      	adds	r7, #8
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}
 800e9a6:	bf00      	nop
 800e9a8:	20001c08 	.word	0x20001c08
 800e9ac:	20001c34 	.word	0x20001c34
 800e9b0:	20001c1c 	.word	0x20001c1c

0800e9b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b084      	sub	sp, #16
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	334c      	adds	r3, #76	; 0x4c
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	f001 fef3 	bl	80107ac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d108      	bne.n	800e9e2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	f001 f863 	bl	800faa0 <vPortFree>
				vPortFree( pxTCB );
 800e9da:	6878      	ldr	r0, [r7, #4]
 800e9dc:	f001 f860 	bl	800faa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e9e0:	e018      	b.n	800ea14 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800e9e8:	2b01      	cmp	r3, #1
 800e9ea:	d103      	bne.n	800e9f4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e9ec:	6878      	ldr	r0, [r7, #4]
 800e9ee:	f001 f857 	bl	800faa0 <vPortFree>
	}
 800e9f2:	e00f      	b.n	800ea14 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800e9fa:	2b02      	cmp	r3, #2
 800e9fc:	d00a      	beq.n	800ea14 <prvDeleteTCB+0x60>
	__asm volatile
 800e9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea02:	f383 8811 	msr	BASEPRI, r3
 800ea06:	f3bf 8f6f 	isb	sy
 800ea0a:	f3bf 8f4f 	dsb	sy
 800ea0e:	60fb      	str	r3, [r7, #12]
}
 800ea10:	bf00      	nop
 800ea12:	e7fe      	b.n	800ea12 <prvDeleteTCB+0x5e>
	}
 800ea14:	bf00      	nop
 800ea16:	3710      	adds	r7, #16
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}

0800ea1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ea1c:	b480      	push	{r7}
 800ea1e:	b083      	sub	sp, #12
 800ea20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ea22:	4b0c      	ldr	r3, [pc, #48]	; (800ea54 <prvResetNextTaskUnblockTime+0x38>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d104      	bne.n	800ea36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ea2c:	4b0a      	ldr	r3, [pc, #40]	; (800ea58 <prvResetNextTaskUnblockTime+0x3c>)
 800ea2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ea32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ea34:	e008      	b.n	800ea48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea36:	4b07      	ldr	r3, [pc, #28]	; (800ea54 <prvResetNextTaskUnblockTime+0x38>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	68db      	ldr	r3, [r3, #12]
 800ea3c:	68db      	ldr	r3, [r3, #12]
 800ea3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	685b      	ldr	r3, [r3, #4]
 800ea44:	4a04      	ldr	r2, [pc, #16]	; (800ea58 <prvResetNextTaskUnblockTime+0x3c>)
 800ea46:	6013      	str	r3, [r2, #0]
}
 800ea48:	bf00      	nop
 800ea4a:	370c      	adds	r7, #12
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	bc80      	pop	{r7}
 800ea50:	4770      	bx	lr
 800ea52:	bf00      	nop
 800ea54:	20001bec 	.word	0x20001bec
 800ea58:	20001c54 	.word	0x20001c54

0800ea5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ea5c:	b480      	push	{r7}
 800ea5e:	b083      	sub	sp, #12
 800ea60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ea62:	4b0b      	ldr	r3, [pc, #44]	; (800ea90 <xTaskGetSchedulerState+0x34>)
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d102      	bne.n	800ea70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ea6a:	2301      	movs	r3, #1
 800ea6c:	607b      	str	r3, [r7, #4]
 800ea6e:	e008      	b.n	800ea82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea70:	4b08      	ldr	r3, [pc, #32]	; (800ea94 <xTaskGetSchedulerState+0x38>)
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d102      	bne.n	800ea7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ea78:	2302      	movs	r3, #2
 800ea7a:	607b      	str	r3, [r7, #4]
 800ea7c:	e001      	b.n	800ea82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ea7e:	2300      	movs	r3, #0
 800ea80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ea82:	687b      	ldr	r3, [r7, #4]
	}
 800ea84:	4618      	mov	r0, r3
 800ea86:	370c      	adds	r7, #12
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	bc80      	pop	{r7}
 800ea8c:	4770      	bx	lr
 800ea8e:	bf00      	nop
 800ea90:	20001c40 	.word	0x20001c40
 800ea94:	20001c5c 	.word	0x20001c5c

0800ea98 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b084      	sub	sp, #16
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d069      	beq.n	800eb82 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800eaae:	68bb      	ldr	r3, [r7, #8]
 800eab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eab2:	4b36      	ldr	r3, [pc, #216]	; (800eb8c <xTaskPriorityInherit+0xf4>)
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eab8:	429a      	cmp	r2, r3
 800eaba:	d259      	bcs.n	800eb70 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eabc:	68bb      	ldr	r3, [r7, #8]
 800eabe:	699b      	ldr	r3, [r3, #24]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	db06      	blt.n	800ead2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eac4:	4b31      	ldr	r3, [pc, #196]	; (800eb8c <xTaskPriorityInherit+0xf4>)
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaca:	f1c3 0207 	rsb	r2, r3, #7
 800eace:	68bb      	ldr	r3, [r7, #8]
 800ead0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	6959      	ldr	r1, [r3, #20]
 800ead6:	68bb      	ldr	r3, [r7, #8]
 800ead8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eada:	4613      	mov	r3, r2
 800eadc:	009b      	lsls	r3, r3, #2
 800eade:	4413      	add	r3, r2
 800eae0:	009b      	lsls	r3, r3, #2
 800eae2:	4a2b      	ldr	r2, [pc, #172]	; (800eb90 <xTaskPriorityInherit+0xf8>)
 800eae4:	4413      	add	r3, r2
 800eae6:	4299      	cmp	r1, r3
 800eae8:	d13a      	bne.n	800eb60 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eaea:	68bb      	ldr	r3, [r7, #8]
 800eaec:	3304      	adds	r3, #4
 800eaee:	4618      	mov	r0, r3
 800eaf0:	f7fe f98b 	bl	800ce0a <uxListRemove>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d115      	bne.n	800eb26 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800eafa:	68bb      	ldr	r3, [r7, #8]
 800eafc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eafe:	4924      	ldr	r1, [pc, #144]	; (800eb90 <xTaskPriorityInherit+0xf8>)
 800eb00:	4613      	mov	r3, r2
 800eb02:	009b      	lsls	r3, r3, #2
 800eb04:	4413      	add	r3, r2
 800eb06:	009b      	lsls	r3, r3, #2
 800eb08:	440b      	add	r3, r1
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d10a      	bne.n	800eb26 <xTaskPriorityInherit+0x8e>
 800eb10:	68bb      	ldr	r3, [r7, #8]
 800eb12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb14:	2201      	movs	r2, #1
 800eb16:	fa02 f303 	lsl.w	r3, r2, r3
 800eb1a:	43da      	mvns	r2, r3
 800eb1c:	4b1d      	ldr	r3, [pc, #116]	; (800eb94 <xTaskPriorityInherit+0xfc>)
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	4013      	ands	r3, r2
 800eb22:	4a1c      	ldr	r2, [pc, #112]	; (800eb94 <xTaskPriorityInherit+0xfc>)
 800eb24:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eb26:	4b19      	ldr	r3, [pc, #100]	; (800eb8c <xTaskPriorityInherit+0xf4>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb2c:	68bb      	ldr	r3, [r7, #8]
 800eb2e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800eb30:	68bb      	ldr	r3, [r7, #8]
 800eb32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb34:	2201      	movs	r2, #1
 800eb36:	409a      	lsls	r2, r3
 800eb38:	4b16      	ldr	r3, [pc, #88]	; (800eb94 <xTaskPriorityInherit+0xfc>)
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	4313      	orrs	r3, r2
 800eb3e:	4a15      	ldr	r2, [pc, #84]	; (800eb94 <xTaskPriorityInherit+0xfc>)
 800eb40:	6013      	str	r3, [r2, #0]
 800eb42:	68bb      	ldr	r3, [r7, #8]
 800eb44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb46:	4613      	mov	r3, r2
 800eb48:	009b      	lsls	r3, r3, #2
 800eb4a:	4413      	add	r3, r2
 800eb4c:	009b      	lsls	r3, r3, #2
 800eb4e:	4a10      	ldr	r2, [pc, #64]	; (800eb90 <xTaskPriorityInherit+0xf8>)
 800eb50:	441a      	add	r2, r3
 800eb52:	68bb      	ldr	r3, [r7, #8]
 800eb54:	3304      	adds	r3, #4
 800eb56:	4619      	mov	r1, r3
 800eb58:	4610      	mov	r0, r2
 800eb5a:	f7fe f8fb 	bl	800cd54 <vListInsertEnd>
 800eb5e:	e004      	b.n	800eb6a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eb60:	4b0a      	ldr	r3, [pc, #40]	; (800eb8c <xTaskPriorityInherit+0xf4>)
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb66:	68bb      	ldr	r3, [r7, #8]
 800eb68:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	60fb      	str	r3, [r7, #12]
 800eb6e:	e008      	b.n	800eb82 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800eb70:	68bb      	ldr	r3, [r7, #8]
 800eb72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eb74:	4b05      	ldr	r3, [pc, #20]	; (800eb8c <xTaskPriorityInherit+0xf4>)
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb7a:	429a      	cmp	r2, r3
 800eb7c:	d201      	bcs.n	800eb82 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800eb7e:	2301      	movs	r3, #1
 800eb80:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eb82:	68fb      	ldr	r3, [r7, #12]
	}
 800eb84:	4618      	mov	r0, r3
 800eb86:	3710      	adds	r7, #16
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}
 800eb8c:	20001b34 	.word	0x20001b34
 800eb90:	20001b38 	.word	0x20001b38
 800eb94:	20001c3c 	.word	0x20001c3c

0800eb98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b086      	sub	sp, #24
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800eba4:	2300      	movs	r3, #0
 800eba6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d06e      	beq.n	800ec8c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ebae:	4b3a      	ldr	r3, [pc, #232]	; (800ec98 <xTaskPriorityDisinherit+0x100>)
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	693a      	ldr	r2, [r7, #16]
 800ebb4:	429a      	cmp	r2, r3
 800ebb6:	d00a      	beq.n	800ebce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ebb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebbc:	f383 8811 	msr	BASEPRI, r3
 800ebc0:	f3bf 8f6f 	isb	sy
 800ebc4:	f3bf 8f4f 	dsb	sy
 800ebc8:	60fb      	str	r3, [r7, #12]
}
 800ebca:	bf00      	nop
 800ebcc:	e7fe      	b.n	800ebcc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ebce:	693b      	ldr	r3, [r7, #16]
 800ebd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d10a      	bne.n	800ebec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ebd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebda:	f383 8811 	msr	BASEPRI, r3
 800ebde:	f3bf 8f6f 	isb	sy
 800ebe2:	f3bf 8f4f 	dsb	sy
 800ebe6:	60bb      	str	r3, [r7, #8]
}
 800ebe8:	bf00      	nop
 800ebea:	e7fe      	b.n	800ebea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ebec:	693b      	ldr	r3, [r7, #16]
 800ebee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ebf0:	1e5a      	subs	r2, r3, #1
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ebf6:	693b      	ldr	r3, [r7, #16]
 800ebf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebfa:	693b      	ldr	r3, [r7, #16]
 800ebfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebfe:	429a      	cmp	r2, r3
 800ec00:	d044      	beq.n	800ec8c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ec02:	693b      	ldr	r3, [r7, #16]
 800ec04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d140      	bne.n	800ec8c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ec0a:	693b      	ldr	r3, [r7, #16]
 800ec0c:	3304      	adds	r3, #4
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f7fe f8fb 	bl	800ce0a <uxListRemove>
 800ec14:	4603      	mov	r3, r0
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d115      	bne.n	800ec46 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ec1a:	693b      	ldr	r3, [r7, #16]
 800ec1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec1e:	491f      	ldr	r1, [pc, #124]	; (800ec9c <xTaskPriorityDisinherit+0x104>)
 800ec20:	4613      	mov	r3, r2
 800ec22:	009b      	lsls	r3, r3, #2
 800ec24:	4413      	add	r3, r2
 800ec26:	009b      	lsls	r3, r3, #2
 800ec28:	440b      	add	r3, r1
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d10a      	bne.n	800ec46 <xTaskPriorityDisinherit+0xae>
 800ec30:	693b      	ldr	r3, [r7, #16]
 800ec32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec34:	2201      	movs	r2, #1
 800ec36:	fa02 f303 	lsl.w	r3, r2, r3
 800ec3a:	43da      	mvns	r2, r3
 800ec3c:	4b18      	ldr	r3, [pc, #96]	; (800eca0 <xTaskPriorityDisinherit+0x108>)
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	4013      	ands	r3, r2
 800ec42:	4a17      	ldr	r2, [pc, #92]	; (800eca0 <xTaskPriorityDisinherit+0x108>)
 800ec44:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ec46:	693b      	ldr	r3, [r7, #16]
 800ec48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ec4a:	693b      	ldr	r3, [r7, #16]
 800ec4c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec4e:	693b      	ldr	r3, [r7, #16]
 800ec50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec52:	f1c3 0207 	rsb	r2, r3, #7
 800ec56:	693b      	ldr	r3, [r7, #16]
 800ec58:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ec5a:	693b      	ldr	r3, [r7, #16]
 800ec5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec5e:	2201      	movs	r2, #1
 800ec60:	409a      	lsls	r2, r3
 800ec62:	4b0f      	ldr	r3, [pc, #60]	; (800eca0 <xTaskPriorityDisinherit+0x108>)
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	4313      	orrs	r3, r2
 800ec68:	4a0d      	ldr	r2, [pc, #52]	; (800eca0 <xTaskPriorityDisinherit+0x108>)
 800ec6a:	6013      	str	r3, [r2, #0]
 800ec6c:	693b      	ldr	r3, [r7, #16]
 800ec6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec70:	4613      	mov	r3, r2
 800ec72:	009b      	lsls	r3, r3, #2
 800ec74:	4413      	add	r3, r2
 800ec76:	009b      	lsls	r3, r3, #2
 800ec78:	4a08      	ldr	r2, [pc, #32]	; (800ec9c <xTaskPriorityDisinherit+0x104>)
 800ec7a:	441a      	add	r2, r3
 800ec7c:	693b      	ldr	r3, [r7, #16]
 800ec7e:	3304      	adds	r3, #4
 800ec80:	4619      	mov	r1, r3
 800ec82:	4610      	mov	r0, r2
 800ec84:	f7fe f866 	bl	800cd54 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ec88:	2301      	movs	r3, #1
 800ec8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ec8c:	697b      	ldr	r3, [r7, #20]
	}
 800ec8e:	4618      	mov	r0, r3
 800ec90:	3718      	adds	r7, #24
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}
 800ec96:	bf00      	nop
 800ec98:	20001b34 	.word	0x20001b34
 800ec9c:	20001b38 	.word	0x20001b38
 800eca0:	20001c3c 	.word	0x20001c3c

0800eca4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b088      	sub	sp, #32
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
 800ecac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ecb2:	2301      	movs	r3, #1
 800ecb4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	f000 8083 	beq.w	800edc4 <vTaskPriorityDisinheritAfterTimeout+0x120>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ecbe:	69bb      	ldr	r3, [r7, #24]
 800ecc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d10a      	bne.n	800ecdc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ecc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecca:	f383 8811 	msr	BASEPRI, r3
 800ecce:	f3bf 8f6f 	isb	sy
 800ecd2:	f3bf 8f4f 	dsb	sy
 800ecd6:	60fb      	str	r3, [r7, #12]
}
 800ecd8:	bf00      	nop
 800ecda:	e7fe      	b.n	800ecda <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ecdc:	69bb      	ldr	r3, [r7, #24]
 800ecde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ece0:	683a      	ldr	r2, [r7, #0]
 800ece2:	429a      	cmp	r2, r3
 800ece4:	d902      	bls.n	800ecec <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ece6:	683b      	ldr	r3, [r7, #0]
 800ece8:	61fb      	str	r3, [r7, #28]
 800ecea:	e002      	b.n	800ecf2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ecec:	69bb      	ldr	r3, [r7, #24]
 800ecee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ecf0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ecf2:	69bb      	ldr	r3, [r7, #24]
 800ecf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecf6:	69fa      	ldr	r2, [r7, #28]
 800ecf8:	429a      	cmp	r2, r3
 800ecfa:	d063      	beq.n	800edc4 <vTaskPriorityDisinheritAfterTimeout+0x120>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ecfc:	69bb      	ldr	r3, [r7, #24]
 800ecfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ed00:	697a      	ldr	r2, [r7, #20]
 800ed02:	429a      	cmp	r2, r3
 800ed04:	d15e      	bne.n	800edc4 <vTaskPriorityDisinheritAfterTimeout+0x120>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ed06:	4b31      	ldr	r3, [pc, #196]	; (800edcc <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	69ba      	ldr	r2, [r7, #24]
 800ed0c:	429a      	cmp	r2, r3
 800ed0e:	d10a      	bne.n	800ed26 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800ed10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed14:	f383 8811 	msr	BASEPRI, r3
 800ed18:	f3bf 8f6f 	isb	sy
 800ed1c:	f3bf 8f4f 	dsb	sy
 800ed20:	60bb      	str	r3, [r7, #8]
}
 800ed22:	bf00      	nop
 800ed24:	e7fe      	b.n	800ed24 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ed26:	69bb      	ldr	r3, [r7, #24]
 800ed28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed2a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ed2c:	69bb      	ldr	r3, [r7, #24]
 800ed2e:	69fa      	ldr	r2, [r7, #28]
 800ed30:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ed32:	69bb      	ldr	r3, [r7, #24]
 800ed34:	699b      	ldr	r3, [r3, #24]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	db04      	blt.n	800ed44 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed3a:	69fb      	ldr	r3, [r7, #28]
 800ed3c:	f1c3 0207 	rsb	r2, r3, #7
 800ed40:	69bb      	ldr	r3, [r7, #24]
 800ed42:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ed44:	69bb      	ldr	r3, [r7, #24]
 800ed46:	6959      	ldr	r1, [r3, #20]
 800ed48:	693a      	ldr	r2, [r7, #16]
 800ed4a:	4613      	mov	r3, r2
 800ed4c:	009b      	lsls	r3, r3, #2
 800ed4e:	4413      	add	r3, r2
 800ed50:	009b      	lsls	r3, r3, #2
 800ed52:	4a1f      	ldr	r2, [pc, #124]	; (800edd0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800ed54:	4413      	add	r3, r2
 800ed56:	4299      	cmp	r1, r3
 800ed58:	d134      	bne.n	800edc4 <vTaskPriorityDisinheritAfterTimeout+0x120>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed5a:	69bb      	ldr	r3, [r7, #24]
 800ed5c:	3304      	adds	r3, #4
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f7fe f853 	bl	800ce0a <uxListRemove>
 800ed64:	4603      	mov	r3, r0
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d115      	bne.n	800ed96 <vTaskPriorityDisinheritAfterTimeout+0xf2>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ed6a:	69bb      	ldr	r3, [r7, #24]
 800ed6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed6e:	4918      	ldr	r1, [pc, #96]	; (800edd0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800ed70:	4613      	mov	r3, r2
 800ed72:	009b      	lsls	r3, r3, #2
 800ed74:	4413      	add	r3, r2
 800ed76:	009b      	lsls	r3, r3, #2
 800ed78:	440b      	add	r3, r1
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d10a      	bne.n	800ed96 <vTaskPriorityDisinheritAfterTimeout+0xf2>
 800ed80:	69bb      	ldr	r3, [r7, #24]
 800ed82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed84:	2201      	movs	r2, #1
 800ed86:	fa02 f303 	lsl.w	r3, r2, r3
 800ed8a:	43da      	mvns	r2, r3
 800ed8c:	4b11      	ldr	r3, [pc, #68]	; (800edd4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	4013      	ands	r3, r2
 800ed92:	4a10      	ldr	r2, [pc, #64]	; (800edd4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ed94:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ed96:	69bb      	ldr	r3, [r7, #24]
 800ed98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed9a:	2201      	movs	r2, #1
 800ed9c:	409a      	lsls	r2, r3
 800ed9e:	4b0d      	ldr	r3, [pc, #52]	; (800edd4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	4313      	orrs	r3, r2
 800eda4:	4a0b      	ldr	r2, [pc, #44]	; (800edd4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800eda6:	6013      	str	r3, [r2, #0]
 800eda8:	69bb      	ldr	r3, [r7, #24]
 800edaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edac:	4613      	mov	r3, r2
 800edae:	009b      	lsls	r3, r3, #2
 800edb0:	4413      	add	r3, r2
 800edb2:	009b      	lsls	r3, r3, #2
 800edb4:	4a06      	ldr	r2, [pc, #24]	; (800edd0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800edb6:	441a      	add	r2, r3
 800edb8:	69bb      	ldr	r3, [r7, #24]
 800edba:	3304      	adds	r3, #4
 800edbc:	4619      	mov	r1, r3
 800edbe:	4610      	mov	r0, r2
 800edc0:	f7fd ffc8 	bl	800cd54 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800edc4:	bf00      	nop
 800edc6:	3720      	adds	r7, #32
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}
 800edcc:	20001b34 	.word	0x20001b34
 800edd0:	20001b38 	.word	0x20001b38
 800edd4:	20001c3c 	.word	0x20001c3c

0800edd8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800edd8:	b480      	push	{r7}
 800edda:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800eddc:	4b07      	ldr	r3, [pc, #28]	; (800edfc <pvTaskIncrementMutexHeldCount+0x24>)
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d004      	beq.n	800edee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ede4:	4b05      	ldr	r3, [pc, #20]	; (800edfc <pvTaskIncrementMutexHeldCount+0x24>)
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800edea:	3201      	adds	r2, #1
 800edec:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800edee:	4b03      	ldr	r3, [pc, #12]	; (800edfc <pvTaskIncrementMutexHeldCount+0x24>)
 800edf0:	681b      	ldr	r3, [r3, #0]
	}
 800edf2:	4618      	mov	r0, r3
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bc80      	pop	{r7}
 800edf8:	4770      	bx	lr
 800edfa:	bf00      	nop
 800edfc:	20001b34 	.word	0x20001b34

0800ee00 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b084      	sub	sp, #16
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
 800ee08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ee0a:	4b29      	ldr	r3, [pc, #164]	; (800eeb0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee10:	4b28      	ldr	r3, [pc, #160]	; (800eeb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	3304      	adds	r3, #4
 800ee16:	4618      	mov	r0, r3
 800ee18:	f7fd fff7 	bl	800ce0a <uxListRemove>
 800ee1c:	4603      	mov	r3, r0
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d10b      	bne.n	800ee3a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ee22:	4b24      	ldr	r3, [pc, #144]	; (800eeb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee28:	2201      	movs	r2, #1
 800ee2a:	fa02 f303 	lsl.w	r3, r2, r3
 800ee2e:	43da      	mvns	r2, r3
 800ee30:	4b21      	ldr	r3, [pc, #132]	; (800eeb8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	4013      	ands	r3, r2
 800ee36:	4a20      	ldr	r2, [pc, #128]	; (800eeb8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ee38:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee40:	d10a      	bne.n	800ee58 <prvAddCurrentTaskToDelayedList+0x58>
 800ee42:	683b      	ldr	r3, [r7, #0]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d007      	beq.n	800ee58 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee48:	4b1a      	ldr	r3, [pc, #104]	; (800eeb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	3304      	adds	r3, #4
 800ee4e:	4619      	mov	r1, r3
 800ee50:	481a      	ldr	r0, [pc, #104]	; (800eebc <prvAddCurrentTaskToDelayedList+0xbc>)
 800ee52:	f7fd ff7f 	bl	800cd54 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ee56:	e026      	b.n	800eea6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ee58:	68fa      	ldr	r2, [r7, #12]
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	4413      	add	r3, r2
 800ee5e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ee60:	4b14      	ldr	r3, [pc, #80]	; (800eeb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	68ba      	ldr	r2, [r7, #8]
 800ee66:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ee68:	68ba      	ldr	r2, [r7, #8]
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	429a      	cmp	r2, r3
 800ee6e:	d209      	bcs.n	800ee84 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee70:	4b13      	ldr	r3, [pc, #76]	; (800eec0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ee72:	681a      	ldr	r2, [r3, #0]
 800ee74:	4b0f      	ldr	r3, [pc, #60]	; (800eeb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	3304      	adds	r3, #4
 800ee7a:	4619      	mov	r1, r3
 800ee7c:	4610      	mov	r0, r2
 800ee7e:	f7fd ff8c 	bl	800cd9a <vListInsert>
}
 800ee82:	e010      	b.n	800eea6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee84:	4b0f      	ldr	r3, [pc, #60]	; (800eec4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ee86:	681a      	ldr	r2, [r3, #0]
 800ee88:	4b0a      	ldr	r3, [pc, #40]	; (800eeb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	3304      	adds	r3, #4
 800ee8e:	4619      	mov	r1, r3
 800ee90:	4610      	mov	r0, r2
 800ee92:	f7fd ff82 	bl	800cd9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ee96:	4b0c      	ldr	r3, [pc, #48]	; (800eec8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	68ba      	ldr	r2, [r7, #8]
 800ee9c:	429a      	cmp	r2, r3
 800ee9e:	d202      	bcs.n	800eea6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800eea0:	4a09      	ldr	r2, [pc, #36]	; (800eec8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800eea2:	68bb      	ldr	r3, [r7, #8]
 800eea4:	6013      	str	r3, [r2, #0]
}
 800eea6:	bf00      	nop
 800eea8:	3710      	adds	r7, #16
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}
 800eeae:	bf00      	nop
 800eeb0:	20001c38 	.word	0x20001c38
 800eeb4:	20001b34 	.word	0x20001b34
 800eeb8:	20001c3c 	.word	0x20001c3c
 800eebc:	20001c20 	.word	0x20001c20
 800eec0:	20001bf0 	.word	0x20001bf0
 800eec4:	20001bec 	.word	0x20001bec
 800eec8:	20001c54 	.word	0x20001c54

0800eecc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b08a      	sub	sp, #40	; 0x28
 800eed0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800eed2:	2300      	movs	r3, #0
 800eed4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800eed6:	f000 fae9 	bl	800f4ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800eeda:	4b1c      	ldr	r3, [pc, #112]	; (800ef4c <xTimerCreateTimerTask+0x80>)
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d021      	beq.n	800ef26 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800eee2:	2300      	movs	r3, #0
 800eee4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800eee6:	2300      	movs	r3, #0
 800eee8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800eeea:	1d3a      	adds	r2, r7, #4
 800eeec:	f107 0108 	add.w	r1, r7, #8
 800eef0:	f107 030c 	add.w	r3, r7, #12
 800eef4:	4618      	mov	r0, r3
 800eef6:	f7f2 f931 	bl	800115c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800eefa:	6879      	ldr	r1, [r7, #4]
 800eefc:	68bb      	ldr	r3, [r7, #8]
 800eefe:	68fa      	ldr	r2, [r7, #12]
 800ef00:	9202      	str	r2, [sp, #8]
 800ef02:	9301      	str	r3, [sp, #4]
 800ef04:	2302      	movs	r3, #2
 800ef06:	9300      	str	r3, [sp, #0]
 800ef08:	2300      	movs	r3, #0
 800ef0a:	460a      	mov	r2, r1
 800ef0c:	4910      	ldr	r1, [pc, #64]	; (800ef50 <xTimerCreateTimerTask+0x84>)
 800ef0e:	4811      	ldr	r0, [pc, #68]	; (800ef54 <xTimerCreateTimerTask+0x88>)
 800ef10:	f7fe ff44 	bl	800dd9c <xTaskCreateStatic>
 800ef14:	4603      	mov	r3, r0
 800ef16:	4a10      	ldr	r2, [pc, #64]	; (800ef58 <xTimerCreateTimerTask+0x8c>)
 800ef18:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ef1a:	4b0f      	ldr	r3, [pc, #60]	; (800ef58 <xTimerCreateTimerTask+0x8c>)
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d001      	beq.n	800ef26 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ef22:	2301      	movs	r3, #1
 800ef24:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ef26:	697b      	ldr	r3, [r7, #20]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d10a      	bne.n	800ef42 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ef2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef30:	f383 8811 	msr	BASEPRI, r3
 800ef34:	f3bf 8f6f 	isb	sy
 800ef38:	f3bf 8f4f 	dsb	sy
 800ef3c:	613b      	str	r3, [r7, #16]
}
 800ef3e:	bf00      	nop
 800ef40:	e7fe      	b.n	800ef40 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ef42:	697b      	ldr	r3, [r7, #20]
}
 800ef44:	4618      	mov	r0, r3
 800ef46:	3718      	adds	r7, #24
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}
 800ef4c:	20001c90 	.word	0x20001c90
 800ef50:	080129d0 	.word	0x080129d0
 800ef54:	0800f091 	.word	0x0800f091
 800ef58:	20001c94 	.word	0x20001c94

0800ef5c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b08a      	sub	sp, #40	; 0x28
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	60f8      	str	r0, [r7, #12]
 800ef64:	60b9      	str	r1, [r7, #8]
 800ef66:	607a      	str	r2, [r7, #4]
 800ef68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d10a      	bne.n	800ef8a <xTimerGenericCommand+0x2e>
	__asm volatile
 800ef74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef78:	f383 8811 	msr	BASEPRI, r3
 800ef7c:	f3bf 8f6f 	isb	sy
 800ef80:	f3bf 8f4f 	dsb	sy
 800ef84:	623b      	str	r3, [r7, #32]
}
 800ef86:	bf00      	nop
 800ef88:	e7fe      	b.n	800ef88 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ef8a:	4b1a      	ldr	r3, [pc, #104]	; (800eff4 <xTimerGenericCommand+0x98>)
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d02a      	beq.n	800efe8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ef92:	68bb      	ldr	r3, [r7, #8]
 800ef94:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ef9e:	68bb      	ldr	r3, [r7, #8]
 800efa0:	2b05      	cmp	r3, #5
 800efa2:	dc18      	bgt.n	800efd6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800efa4:	f7ff fd5a 	bl	800ea5c <xTaskGetSchedulerState>
 800efa8:	4603      	mov	r3, r0
 800efaa:	2b02      	cmp	r3, #2
 800efac:	d109      	bne.n	800efc2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800efae:	4b11      	ldr	r3, [pc, #68]	; (800eff4 <xTimerGenericCommand+0x98>)
 800efb0:	6818      	ldr	r0, [r3, #0]
 800efb2:	f107 0114 	add.w	r1, r7, #20
 800efb6:	2300      	movs	r3, #0
 800efb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800efba:	f7fe f8db 	bl	800d174 <xQueueGenericSend>
 800efbe:	6278      	str	r0, [r7, #36]	; 0x24
 800efc0:	e012      	b.n	800efe8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800efc2:	4b0c      	ldr	r3, [pc, #48]	; (800eff4 <xTimerGenericCommand+0x98>)
 800efc4:	6818      	ldr	r0, [r3, #0]
 800efc6:	f107 0114 	add.w	r1, r7, #20
 800efca:	2300      	movs	r3, #0
 800efcc:	2200      	movs	r2, #0
 800efce:	f7fe f8d1 	bl	800d174 <xQueueGenericSend>
 800efd2:	6278      	str	r0, [r7, #36]	; 0x24
 800efd4:	e008      	b.n	800efe8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800efd6:	4b07      	ldr	r3, [pc, #28]	; (800eff4 <xTimerGenericCommand+0x98>)
 800efd8:	6818      	ldr	r0, [r3, #0]
 800efda:	f107 0114 	add.w	r1, r7, #20
 800efde:	2300      	movs	r3, #0
 800efe0:	683a      	ldr	r2, [r7, #0]
 800efe2:	f7fe f9c5 	bl	800d370 <xQueueGenericSendFromISR>
 800efe6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800efe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800efea:	4618      	mov	r0, r3
 800efec:	3728      	adds	r7, #40	; 0x28
 800efee:	46bd      	mov	sp, r7
 800eff0:	bd80      	pop	{r7, pc}
 800eff2:	bf00      	nop
 800eff4:	20001c90 	.word	0x20001c90

0800eff8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b088      	sub	sp, #32
 800effc:	af02      	add	r7, sp, #8
 800effe:	6078      	str	r0, [r7, #4]
 800f000:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f002:	4b22      	ldr	r3, [pc, #136]	; (800f08c <prvProcessExpiredTimer+0x94>)
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	68db      	ldr	r3, [r3, #12]
 800f008:	68db      	ldr	r3, [r3, #12]
 800f00a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	3304      	adds	r3, #4
 800f010:	4618      	mov	r0, r3
 800f012:	f7fd fefa 	bl	800ce0a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f016:	697b      	ldr	r3, [r7, #20]
 800f018:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f01c:	f003 0304 	and.w	r3, r3, #4
 800f020:	2b00      	cmp	r3, #0
 800f022:	d022      	beq.n	800f06a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f024:	697b      	ldr	r3, [r7, #20]
 800f026:	699a      	ldr	r2, [r3, #24]
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	18d1      	adds	r1, r2, r3
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	683a      	ldr	r2, [r7, #0]
 800f030:	6978      	ldr	r0, [r7, #20]
 800f032:	f000 f8cf 	bl	800f1d4 <prvInsertTimerInActiveList>
 800f036:	4603      	mov	r3, r0
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d01f      	beq.n	800f07c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f03c:	2300      	movs	r3, #0
 800f03e:	9300      	str	r3, [sp, #0]
 800f040:	2300      	movs	r3, #0
 800f042:	687a      	ldr	r2, [r7, #4]
 800f044:	2100      	movs	r1, #0
 800f046:	6978      	ldr	r0, [r7, #20]
 800f048:	f7ff ff88 	bl	800ef5c <xTimerGenericCommand>
 800f04c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f04e:	693b      	ldr	r3, [r7, #16]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d113      	bne.n	800f07c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f058:	f383 8811 	msr	BASEPRI, r3
 800f05c:	f3bf 8f6f 	isb	sy
 800f060:	f3bf 8f4f 	dsb	sy
 800f064:	60fb      	str	r3, [r7, #12]
}
 800f066:	bf00      	nop
 800f068:	e7fe      	b.n	800f068 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f06a:	697b      	ldr	r3, [r7, #20]
 800f06c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f070:	f023 0301 	bic.w	r3, r3, #1
 800f074:	b2da      	uxtb	r2, r3
 800f076:	697b      	ldr	r3, [r7, #20]
 800f078:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f07c:	697b      	ldr	r3, [r7, #20]
 800f07e:	6a1b      	ldr	r3, [r3, #32]
 800f080:	6978      	ldr	r0, [r7, #20]
 800f082:	4798      	blx	r3
}
 800f084:	bf00      	nop
 800f086:	3718      	adds	r7, #24
 800f088:	46bd      	mov	sp, r7
 800f08a:	bd80      	pop	{r7, pc}
 800f08c:	20001c88 	.word	0x20001c88

0800f090 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b084      	sub	sp, #16
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f098:	f107 0308 	add.w	r3, r7, #8
 800f09c:	4618      	mov	r0, r3
 800f09e:	f000 f857 	bl	800f150 <prvGetNextExpireTime>
 800f0a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f0a4:	68bb      	ldr	r3, [r7, #8]
 800f0a6:	4619      	mov	r1, r3
 800f0a8:	68f8      	ldr	r0, [r7, #12]
 800f0aa:	f000 f803 	bl	800f0b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f0ae:	f000 f8d3 	bl	800f258 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f0b2:	e7f1      	b.n	800f098 <prvTimerTask+0x8>

0800f0b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b084      	sub	sp, #16
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
 800f0bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f0be:	f7ff f8c3 	bl	800e248 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f0c2:	f107 0308 	add.w	r3, r7, #8
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f000 f864 	bl	800f194 <prvSampleTimeNow>
 800f0cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f0ce:	68bb      	ldr	r3, [r7, #8]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d130      	bne.n	800f136 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d10a      	bne.n	800f0f0 <prvProcessTimerOrBlockTask+0x3c>
 800f0da:	687a      	ldr	r2, [r7, #4]
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	429a      	cmp	r2, r3
 800f0e0:	d806      	bhi.n	800f0f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f0e2:	f7ff f8bf 	bl	800e264 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f0e6:	68f9      	ldr	r1, [r7, #12]
 800f0e8:	6878      	ldr	r0, [r7, #4]
 800f0ea:	f7ff ff85 	bl	800eff8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f0ee:	e024      	b.n	800f13a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d008      	beq.n	800f108 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f0f6:	4b13      	ldr	r3, [pc, #76]	; (800f144 <prvProcessTimerOrBlockTask+0x90>)
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d101      	bne.n	800f104 <prvProcessTimerOrBlockTask+0x50>
 800f100:	2301      	movs	r3, #1
 800f102:	e000      	b.n	800f106 <prvProcessTimerOrBlockTask+0x52>
 800f104:	2300      	movs	r3, #0
 800f106:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f108:	4b0f      	ldr	r3, [pc, #60]	; (800f148 <prvProcessTimerOrBlockTask+0x94>)
 800f10a:	6818      	ldr	r0, [r3, #0]
 800f10c:	687a      	ldr	r2, [r7, #4]
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	1ad3      	subs	r3, r2, r3
 800f112:	683a      	ldr	r2, [r7, #0]
 800f114:	4619      	mov	r1, r3
 800f116:	f7fe fe0d 	bl	800dd34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f11a:	f7ff f8a3 	bl	800e264 <xTaskResumeAll>
 800f11e:	4603      	mov	r3, r0
 800f120:	2b00      	cmp	r3, #0
 800f122:	d10a      	bne.n	800f13a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f124:	4b09      	ldr	r3, [pc, #36]	; (800f14c <prvProcessTimerOrBlockTask+0x98>)
 800f126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f12a:	601a      	str	r2, [r3, #0]
 800f12c:	f3bf 8f4f 	dsb	sy
 800f130:	f3bf 8f6f 	isb	sy
}
 800f134:	e001      	b.n	800f13a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f136:	f7ff f895 	bl	800e264 <xTaskResumeAll>
}
 800f13a:	bf00      	nop
 800f13c:	3710      	adds	r7, #16
 800f13e:	46bd      	mov	sp, r7
 800f140:	bd80      	pop	{r7, pc}
 800f142:	bf00      	nop
 800f144:	20001c8c 	.word	0x20001c8c
 800f148:	20001c90 	.word	0x20001c90
 800f14c:	e000ed04 	.word	0xe000ed04

0800f150 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f150:	b480      	push	{r7}
 800f152:	b085      	sub	sp, #20
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f158:	4b0d      	ldr	r3, [pc, #52]	; (800f190 <prvGetNextExpireTime+0x40>)
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d101      	bne.n	800f166 <prvGetNextExpireTime+0x16>
 800f162:	2201      	movs	r2, #1
 800f164:	e000      	b.n	800f168 <prvGetNextExpireTime+0x18>
 800f166:	2200      	movs	r2, #0
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d105      	bne.n	800f180 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f174:	4b06      	ldr	r3, [pc, #24]	; (800f190 <prvGetNextExpireTime+0x40>)
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	68db      	ldr	r3, [r3, #12]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	60fb      	str	r3, [r7, #12]
 800f17e:	e001      	b.n	800f184 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f180:	2300      	movs	r3, #0
 800f182:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f184:	68fb      	ldr	r3, [r7, #12]
}
 800f186:	4618      	mov	r0, r3
 800f188:	3714      	adds	r7, #20
 800f18a:	46bd      	mov	sp, r7
 800f18c:	bc80      	pop	{r7}
 800f18e:	4770      	bx	lr
 800f190:	20001c88 	.word	0x20001c88

0800f194 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b084      	sub	sp, #16
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f19c:	f7ff f8fe 	bl	800e39c <xTaskGetTickCount>
 800f1a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f1a2:	4b0b      	ldr	r3, [pc, #44]	; (800f1d0 <prvSampleTimeNow+0x3c>)
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	68fa      	ldr	r2, [r7, #12]
 800f1a8:	429a      	cmp	r2, r3
 800f1aa:	d205      	bcs.n	800f1b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f1ac:	f000 f91a 	bl	800f3e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	2201      	movs	r2, #1
 800f1b4:	601a      	str	r2, [r3, #0]
 800f1b6:	e002      	b.n	800f1be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f1be:	4a04      	ldr	r2, [pc, #16]	; (800f1d0 <prvSampleTimeNow+0x3c>)
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f1c4:	68fb      	ldr	r3, [r7, #12]
}
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	3710      	adds	r7, #16
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	bd80      	pop	{r7, pc}
 800f1ce:	bf00      	nop
 800f1d0:	20001c98 	.word	0x20001c98

0800f1d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b086      	sub	sp, #24
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	60f8      	str	r0, [r7, #12]
 800f1dc:	60b9      	str	r1, [r7, #8]
 800f1de:	607a      	str	r2, [r7, #4]
 800f1e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	68ba      	ldr	r2, [r7, #8]
 800f1ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	68fa      	ldr	r2, [r7, #12]
 800f1f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f1f2:	68ba      	ldr	r2, [r7, #8]
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	429a      	cmp	r2, r3
 800f1f8:	d812      	bhi.n	800f220 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f1fa:	687a      	ldr	r2, [r7, #4]
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	1ad2      	subs	r2, r2, r3
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	699b      	ldr	r3, [r3, #24]
 800f204:	429a      	cmp	r2, r3
 800f206:	d302      	bcc.n	800f20e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f208:	2301      	movs	r3, #1
 800f20a:	617b      	str	r3, [r7, #20]
 800f20c:	e01b      	b.n	800f246 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f20e:	4b10      	ldr	r3, [pc, #64]	; (800f250 <prvInsertTimerInActiveList+0x7c>)
 800f210:	681a      	ldr	r2, [r3, #0]
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	3304      	adds	r3, #4
 800f216:	4619      	mov	r1, r3
 800f218:	4610      	mov	r0, r2
 800f21a:	f7fd fdbe 	bl	800cd9a <vListInsert>
 800f21e:	e012      	b.n	800f246 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f220:	687a      	ldr	r2, [r7, #4]
 800f222:	683b      	ldr	r3, [r7, #0]
 800f224:	429a      	cmp	r2, r3
 800f226:	d206      	bcs.n	800f236 <prvInsertTimerInActiveList+0x62>
 800f228:	68ba      	ldr	r2, [r7, #8]
 800f22a:	683b      	ldr	r3, [r7, #0]
 800f22c:	429a      	cmp	r2, r3
 800f22e:	d302      	bcc.n	800f236 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f230:	2301      	movs	r3, #1
 800f232:	617b      	str	r3, [r7, #20]
 800f234:	e007      	b.n	800f246 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f236:	4b07      	ldr	r3, [pc, #28]	; (800f254 <prvInsertTimerInActiveList+0x80>)
 800f238:	681a      	ldr	r2, [r3, #0]
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	3304      	adds	r3, #4
 800f23e:	4619      	mov	r1, r3
 800f240:	4610      	mov	r0, r2
 800f242:	f7fd fdaa 	bl	800cd9a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f246:	697b      	ldr	r3, [r7, #20]
}
 800f248:	4618      	mov	r0, r3
 800f24a:	3718      	adds	r7, #24
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bd80      	pop	{r7, pc}
 800f250:	20001c8c 	.word	0x20001c8c
 800f254:	20001c88 	.word	0x20001c88

0800f258 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b08c      	sub	sp, #48	; 0x30
 800f25c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f25e:	e0ae      	b.n	800f3be <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	2b00      	cmp	r3, #0
 800f264:	f2c0 80aa 	blt.w	800f3bc <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f268:	693b      	ldr	r3, [r7, #16]
 800f26a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f26e:	695b      	ldr	r3, [r3, #20]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d004      	beq.n	800f27e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f276:	3304      	adds	r3, #4
 800f278:	4618      	mov	r0, r3
 800f27a:	f7fd fdc6 	bl	800ce0a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f27e:	1d3b      	adds	r3, r7, #4
 800f280:	4618      	mov	r0, r3
 800f282:	f7ff ff87 	bl	800f194 <prvSampleTimeNow>
 800f286:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800f288:	68bb      	ldr	r3, [r7, #8]
 800f28a:	2b09      	cmp	r3, #9
 800f28c:	f200 8097 	bhi.w	800f3be <prvProcessReceivedCommands+0x166>
 800f290:	a201      	add	r2, pc, #4	; (adr r2, 800f298 <prvProcessReceivedCommands+0x40>)
 800f292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f296:	bf00      	nop
 800f298:	0800f2c1 	.word	0x0800f2c1
 800f29c:	0800f2c1 	.word	0x0800f2c1
 800f2a0:	0800f2c1 	.word	0x0800f2c1
 800f2a4:	0800f335 	.word	0x0800f335
 800f2a8:	0800f349 	.word	0x0800f349
 800f2ac:	0800f393 	.word	0x0800f393
 800f2b0:	0800f2c1 	.word	0x0800f2c1
 800f2b4:	0800f2c1 	.word	0x0800f2c1
 800f2b8:	0800f335 	.word	0x0800f335
 800f2bc:	0800f349 	.word	0x0800f349
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f2c6:	f043 0301 	orr.w	r3, r3, #1
 800f2ca:	b2da      	uxtb	r2, r3
 800f2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f2d2:	68fa      	ldr	r2, [r7, #12]
 800f2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2d6:	699b      	ldr	r3, [r3, #24]
 800f2d8:	18d1      	adds	r1, r2, r3
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	6a3a      	ldr	r2, [r7, #32]
 800f2de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f2e0:	f7ff ff78 	bl	800f1d4 <prvInsertTimerInActiveList>
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d069      	beq.n	800f3be <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ec:	6a1b      	ldr	r3, [r3, #32]
 800f2ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f2f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f2f8:	f003 0304 	and.w	r3, r3, #4
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d05e      	beq.n	800f3be <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f300:	68fa      	ldr	r2, [r7, #12]
 800f302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f304:	699b      	ldr	r3, [r3, #24]
 800f306:	441a      	add	r2, r3
 800f308:	2300      	movs	r3, #0
 800f30a:	9300      	str	r3, [sp, #0]
 800f30c:	2300      	movs	r3, #0
 800f30e:	2100      	movs	r1, #0
 800f310:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f312:	f7ff fe23 	bl	800ef5c <xTimerGenericCommand>
 800f316:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800f318:	69fb      	ldr	r3, [r7, #28]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d14f      	bne.n	800f3be <prvProcessReceivedCommands+0x166>
	__asm volatile
 800f31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f322:	f383 8811 	msr	BASEPRI, r3
 800f326:	f3bf 8f6f 	isb	sy
 800f32a:	f3bf 8f4f 	dsb	sy
 800f32e:	61bb      	str	r3, [r7, #24]
}
 800f330:	bf00      	nop
 800f332:	e7fe      	b.n	800f332 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f336:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f33a:	f023 0301 	bic.w	r3, r3, #1
 800f33e:	b2da      	uxtb	r2, r3
 800f340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f342:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800f346:	e03a      	b.n	800f3be <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f34a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f34e:	f043 0301 	orr.w	r3, r3, #1
 800f352:	b2da      	uxtb	r2, r3
 800f354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f356:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f35a:	68fa      	ldr	r2, [r7, #12]
 800f35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f35e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f362:	699b      	ldr	r3, [r3, #24]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d10a      	bne.n	800f37e <prvProcessReceivedCommands+0x126>
	__asm volatile
 800f368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f36c:	f383 8811 	msr	BASEPRI, r3
 800f370:	f3bf 8f6f 	isb	sy
 800f374:	f3bf 8f4f 	dsb	sy
 800f378:	617b      	str	r3, [r7, #20]
}
 800f37a:	bf00      	nop
 800f37c:	e7fe      	b.n	800f37c <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f380:	699a      	ldr	r2, [r3, #24]
 800f382:	6a3b      	ldr	r3, [r7, #32]
 800f384:	18d1      	adds	r1, r2, r3
 800f386:	6a3b      	ldr	r3, [r7, #32]
 800f388:	6a3a      	ldr	r2, [r7, #32]
 800f38a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f38c:	f7ff ff22 	bl	800f1d4 <prvInsertTimerInActiveList>
					break;
 800f390:	e015      	b.n	800f3be <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f394:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f398:	f003 0302 	and.w	r3, r3, #2
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d103      	bne.n	800f3a8 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800f3a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f3a2:	f000 fb7d 	bl	800faa0 <vPortFree>
 800f3a6:	e00a      	b.n	800f3be <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f3ae:	f023 0301 	bic.w	r3, r3, #1
 800f3b2:	b2da      	uxtb	r2, r3
 800f3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f3ba:	e000      	b.n	800f3be <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f3bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f3be:	4b08      	ldr	r3, [pc, #32]	; (800f3e0 <prvProcessReceivedCommands+0x188>)
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	f107 0108 	add.w	r1, r7, #8
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	f7fe f8f7 	bl	800d5bc <xQueueReceive>
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	f47f af45 	bne.w	800f260 <prvProcessReceivedCommands+0x8>
	}
}
 800f3d6:	bf00      	nop
 800f3d8:	bf00      	nop
 800f3da:	3728      	adds	r7, #40	; 0x28
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	bd80      	pop	{r7, pc}
 800f3e0:	20001c90 	.word	0x20001c90

0800f3e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b088      	sub	sp, #32
 800f3e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f3ea:	e048      	b.n	800f47e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f3ec:	4b2d      	ldr	r3, [pc, #180]	; (800f4a4 <prvSwitchTimerLists+0xc0>)
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	68db      	ldr	r3, [r3, #12]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f3f6:	4b2b      	ldr	r3, [pc, #172]	; (800f4a4 <prvSwitchTimerLists+0xc0>)
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	68db      	ldr	r3, [r3, #12]
 800f3fc:	68db      	ldr	r3, [r3, #12]
 800f3fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	3304      	adds	r3, #4
 800f404:	4618      	mov	r0, r3
 800f406:	f7fd fd00 	bl	800ce0a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	6a1b      	ldr	r3, [r3, #32]
 800f40e:	68f8      	ldr	r0, [r7, #12]
 800f410:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f418:	f003 0304 	and.w	r3, r3, #4
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d02e      	beq.n	800f47e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	699b      	ldr	r3, [r3, #24]
 800f424:	693a      	ldr	r2, [r7, #16]
 800f426:	4413      	add	r3, r2
 800f428:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f42a:	68ba      	ldr	r2, [r7, #8]
 800f42c:	693b      	ldr	r3, [r7, #16]
 800f42e:	429a      	cmp	r2, r3
 800f430:	d90e      	bls.n	800f450 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	68ba      	ldr	r2, [r7, #8]
 800f436:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	68fa      	ldr	r2, [r7, #12]
 800f43c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f43e:	4b19      	ldr	r3, [pc, #100]	; (800f4a4 <prvSwitchTimerLists+0xc0>)
 800f440:	681a      	ldr	r2, [r3, #0]
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	3304      	adds	r3, #4
 800f446:	4619      	mov	r1, r3
 800f448:	4610      	mov	r0, r2
 800f44a:	f7fd fca6 	bl	800cd9a <vListInsert>
 800f44e:	e016      	b.n	800f47e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f450:	2300      	movs	r3, #0
 800f452:	9300      	str	r3, [sp, #0]
 800f454:	2300      	movs	r3, #0
 800f456:	693a      	ldr	r2, [r7, #16]
 800f458:	2100      	movs	r1, #0
 800f45a:	68f8      	ldr	r0, [r7, #12]
 800f45c:	f7ff fd7e 	bl	800ef5c <xTimerGenericCommand>
 800f460:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d10a      	bne.n	800f47e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f46c:	f383 8811 	msr	BASEPRI, r3
 800f470:	f3bf 8f6f 	isb	sy
 800f474:	f3bf 8f4f 	dsb	sy
 800f478:	603b      	str	r3, [r7, #0]
}
 800f47a:	bf00      	nop
 800f47c:	e7fe      	b.n	800f47c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f47e:	4b09      	ldr	r3, [pc, #36]	; (800f4a4 <prvSwitchTimerLists+0xc0>)
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d1b1      	bne.n	800f3ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f488:	4b06      	ldr	r3, [pc, #24]	; (800f4a4 <prvSwitchTimerLists+0xc0>)
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f48e:	4b06      	ldr	r3, [pc, #24]	; (800f4a8 <prvSwitchTimerLists+0xc4>)
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	4a04      	ldr	r2, [pc, #16]	; (800f4a4 <prvSwitchTimerLists+0xc0>)
 800f494:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f496:	4a04      	ldr	r2, [pc, #16]	; (800f4a8 <prvSwitchTimerLists+0xc4>)
 800f498:	697b      	ldr	r3, [r7, #20]
 800f49a:	6013      	str	r3, [r2, #0]
}
 800f49c:	bf00      	nop
 800f49e:	3718      	adds	r7, #24
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	bd80      	pop	{r7, pc}
 800f4a4:	20001c88 	.word	0x20001c88
 800f4a8:	20001c8c 	.word	0x20001c8c

0800f4ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b082      	sub	sp, #8
 800f4b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f4b2:	f000 f92b 	bl	800f70c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f4b6:	4b15      	ldr	r3, [pc, #84]	; (800f50c <prvCheckForValidListAndQueue+0x60>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d120      	bne.n	800f500 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f4be:	4814      	ldr	r0, [pc, #80]	; (800f510 <prvCheckForValidListAndQueue+0x64>)
 800f4c0:	f7fd fc1d 	bl	800ccfe <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f4c4:	4813      	ldr	r0, [pc, #76]	; (800f514 <prvCheckForValidListAndQueue+0x68>)
 800f4c6:	f7fd fc1a 	bl	800ccfe <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f4ca:	4b13      	ldr	r3, [pc, #76]	; (800f518 <prvCheckForValidListAndQueue+0x6c>)
 800f4cc:	4a10      	ldr	r2, [pc, #64]	; (800f510 <prvCheckForValidListAndQueue+0x64>)
 800f4ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f4d0:	4b12      	ldr	r3, [pc, #72]	; (800f51c <prvCheckForValidListAndQueue+0x70>)
 800f4d2:	4a10      	ldr	r2, [pc, #64]	; (800f514 <prvCheckForValidListAndQueue+0x68>)
 800f4d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	9300      	str	r3, [sp, #0]
 800f4da:	4b11      	ldr	r3, [pc, #68]	; (800f520 <prvCheckForValidListAndQueue+0x74>)
 800f4dc:	4a11      	ldr	r2, [pc, #68]	; (800f524 <prvCheckForValidListAndQueue+0x78>)
 800f4de:	210c      	movs	r1, #12
 800f4e0:	200a      	movs	r0, #10
 800f4e2:	f7fd fd23 	bl	800cf2c <xQueueGenericCreateStatic>
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	4a08      	ldr	r2, [pc, #32]	; (800f50c <prvCheckForValidListAndQueue+0x60>)
 800f4ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f4ec:	4b07      	ldr	r3, [pc, #28]	; (800f50c <prvCheckForValidListAndQueue+0x60>)
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d005      	beq.n	800f500 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f4f4:	4b05      	ldr	r3, [pc, #20]	; (800f50c <prvCheckForValidListAndQueue+0x60>)
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	490b      	ldr	r1, [pc, #44]	; (800f528 <prvCheckForValidListAndQueue+0x7c>)
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	f7fe fbf2 	bl	800dce4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f500:	f000 f934 	bl	800f76c <vPortExitCritical>
}
 800f504:	bf00      	nop
 800f506:	46bd      	mov	sp, r7
 800f508:	bd80      	pop	{r7, pc}
 800f50a:	bf00      	nop
 800f50c:	20001c90 	.word	0x20001c90
 800f510:	20001c60 	.word	0x20001c60
 800f514:	20001c74 	.word	0x20001c74
 800f518:	20001c88 	.word	0x20001c88
 800f51c:	20001c8c 	.word	0x20001c8c
 800f520:	20001d14 	.word	0x20001d14
 800f524:	20001c9c 	.word	0x20001c9c
 800f528:	080129d8 	.word	0x080129d8

0800f52c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f52c:	b480      	push	{r7}
 800f52e:	b085      	sub	sp, #20
 800f530:	af00      	add	r7, sp, #0
 800f532:	60f8      	str	r0, [r7, #12]
 800f534:	60b9      	str	r1, [r7, #8]
 800f536:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	3b04      	subs	r3, #4
 800f53c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f544:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	3b04      	subs	r3, #4
 800f54a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	f023 0201 	bic.w	r2, r3, #1
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	3b04      	subs	r3, #4
 800f55a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f55c:	4a08      	ldr	r2, [pc, #32]	; (800f580 <pxPortInitialiseStack+0x54>)
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	3b14      	subs	r3, #20
 800f566:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f568:	687a      	ldr	r2, [r7, #4]
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	3b20      	subs	r3, #32
 800f572:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f574:	68fb      	ldr	r3, [r7, #12]
}
 800f576:	4618      	mov	r0, r3
 800f578:	3714      	adds	r7, #20
 800f57a:	46bd      	mov	sp, r7
 800f57c:	bc80      	pop	{r7}
 800f57e:	4770      	bx	lr
 800f580:	0800f585 	.word	0x0800f585

0800f584 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f584:	b480      	push	{r7}
 800f586:	b085      	sub	sp, #20
 800f588:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800f58a:	2300      	movs	r3, #0
 800f58c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f58e:	4b12      	ldr	r3, [pc, #72]	; (800f5d8 <prvTaskExitError+0x54>)
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f596:	d00a      	beq.n	800f5ae <prvTaskExitError+0x2a>
	__asm volatile
 800f598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f59c:	f383 8811 	msr	BASEPRI, r3
 800f5a0:	f3bf 8f6f 	isb	sy
 800f5a4:	f3bf 8f4f 	dsb	sy
 800f5a8:	60fb      	str	r3, [r7, #12]
}
 800f5aa:	bf00      	nop
 800f5ac:	e7fe      	b.n	800f5ac <prvTaskExitError+0x28>
	__asm volatile
 800f5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5b2:	f383 8811 	msr	BASEPRI, r3
 800f5b6:	f3bf 8f6f 	isb	sy
 800f5ba:	f3bf 8f4f 	dsb	sy
 800f5be:	60bb      	str	r3, [r7, #8]
}
 800f5c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f5c2:	bf00      	nop
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d0fc      	beq.n	800f5c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f5ca:	bf00      	nop
 800f5cc:	bf00      	nop
 800f5ce:	3714      	adds	r7, #20
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	bc80      	pop	{r7}
 800f5d4:	4770      	bx	lr
 800f5d6:	bf00      	nop
 800f5d8:	20000090 	.word	0x20000090
 800f5dc:	00000000 	.word	0x00000000

0800f5e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f5e0:	4b07      	ldr	r3, [pc, #28]	; (800f600 <pxCurrentTCBConst2>)
 800f5e2:	6819      	ldr	r1, [r3, #0]
 800f5e4:	6808      	ldr	r0, [r1, #0]
 800f5e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800f5ea:	f380 8809 	msr	PSP, r0
 800f5ee:	f3bf 8f6f 	isb	sy
 800f5f2:	f04f 0000 	mov.w	r0, #0
 800f5f6:	f380 8811 	msr	BASEPRI, r0
 800f5fa:	f04e 0e0d 	orr.w	lr, lr, #13
 800f5fe:	4770      	bx	lr

0800f600 <pxCurrentTCBConst2>:
 800f600:	20001b34 	.word	0x20001b34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f604:	bf00      	nop
 800f606:	bf00      	nop

0800f608 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800f608:	4806      	ldr	r0, [pc, #24]	; (800f624 <prvPortStartFirstTask+0x1c>)
 800f60a:	6800      	ldr	r0, [r0, #0]
 800f60c:	6800      	ldr	r0, [r0, #0]
 800f60e:	f380 8808 	msr	MSP, r0
 800f612:	b662      	cpsie	i
 800f614:	b661      	cpsie	f
 800f616:	f3bf 8f4f 	dsb	sy
 800f61a:	f3bf 8f6f 	isb	sy
 800f61e:	df00      	svc	0
 800f620:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f622:	bf00      	nop
 800f624:	e000ed08 	.word	0xe000ed08

0800f628 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b084      	sub	sp, #16
 800f62c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f62e:	4b32      	ldr	r3, [pc, #200]	; (800f6f8 <xPortStartScheduler+0xd0>)
 800f630:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	781b      	ldrb	r3, [r3, #0]
 800f636:	b2db      	uxtb	r3, r3
 800f638:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	22ff      	movs	r2, #255	; 0xff
 800f63e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	781b      	ldrb	r3, [r3, #0]
 800f644:	b2db      	uxtb	r3, r3
 800f646:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f648:	78fb      	ldrb	r3, [r7, #3]
 800f64a:	b2db      	uxtb	r3, r3
 800f64c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f650:	b2da      	uxtb	r2, r3
 800f652:	4b2a      	ldr	r3, [pc, #168]	; (800f6fc <xPortStartScheduler+0xd4>)
 800f654:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f656:	4b2a      	ldr	r3, [pc, #168]	; (800f700 <xPortStartScheduler+0xd8>)
 800f658:	2207      	movs	r2, #7
 800f65a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f65c:	e009      	b.n	800f672 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800f65e:	4b28      	ldr	r3, [pc, #160]	; (800f700 <xPortStartScheduler+0xd8>)
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	3b01      	subs	r3, #1
 800f664:	4a26      	ldr	r2, [pc, #152]	; (800f700 <xPortStartScheduler+0xd8>)
 800f666:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f668:	78fb      	ldrb	r3, [r7, #3]
 800f66a:	b2db      	uxtb	r3, r3
 800f66c:	005b      	lsls	r3, r3, #1
 800f66e:	b2db      	uxtb	r3, r3
 800f670:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f672:	78fb      	ldrb	r3, [r7, #3]
 800f674:	b2db      	uxtb	r3, r3
 800f676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f67a:	2b80      	cmp	r3, #128	; 0x80
 800f67c:	d0ef      	beq.n	800f65e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f67e:	4b20      	ldr	r3, [pc, #128]	; (800f700 <xPortStartScheduler+0xd8>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	f1c3 0307 	rsb	r3, r3, #7
 800f686:	2b04      	cmp	r3, #4
 800f688:	d00a      	beq.n	800f6a0 <xPortStartScheduler+0x78>
	__asm volatile
 800f68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f68e:	f383 8811 	msr	BASEPRI, r3
 800f692:	f3bf 8f6f 	isb	sy
 800f696:	f3bf 8f4f 	dsb	sy
 800f69a:	60bb      	str	r3, [r7, #8]
}
 800f69c:	bf00      	nop
 800f69e:	e7fe      	b.n	800f69e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f6a0:	4b17      	ldr	r3, [pc, #92]	; (800f700 <xPortStartScheduler+0xd8>)
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	021b      	lsls	r3, r3, #8
 800f6a6:	4a16      	ldr	r2, [pc, #88]	; (800f700 <xPortStartScheduler+0xd8>)
 800f6a8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f6aa:	4b15      	ldr	r3, [pc, #84]	; (800f700 <xPortStartScheduler+0xd8>)
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f6b2:	4a13      	ldr	r2, [pc, #76]	; (800f700 <xPortStartScheduler+0xd8>)
 800f6b4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	b2da      	uxtb	r2, r3
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f6be:	4b11      	ldr	r3, [pc, #68]	; (800f704 <xPortStartScheduler+0xdc>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	4a10      	ldr	r2, [pc, #64]	; (800f704 <xPortStartScheduler+0xdc>)
 800f6c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f6c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f6ca:	4b0e      	ldr	r3, [pc, #56]	; (800f704 <xPortStartScheduler+0xdc>)
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	4a0d      	ldr	r2, [pc, #52]	; (800f704 <xPortStartScheduler+0xdc>)
 800f6d0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f6d4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f6d6:	f000 f8b9 	bl	800f84c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f6da:	4b0b      	ldr	r3, [pc, #44]	; (800f708 <xPortStartScheduler+0xe0>)
 800f6dc:	2200      	movs	r2, #0
 800f6de:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f6e0:	f7ff ff92 	bl	800f608 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f6e4:	f7fe ff20 	bl	800e528 <vTaskSwitchContext>
	prvTaskExitError();
 800f6e8:	f7ff ff4c 	bl	800f584 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f6ec:	2300      	movs	r3, #0
}
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	3710      	adds	r7, #16
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}
 800f6f6:	bf00      	nop
 800f6f8:	e000e400 	.word	0xe000e400
 800f6fc:	20001d5c 	.word	0x20001d5c
 800f700:	20001d60 	.word	0x20001d60
 800f704:	e000ed20 	.word	0xe000ed20
 800f708:	20000090 	.word	0x20000090

0800f70c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f70c:	b480      	push	{r7}
 800f70e:	b083      	sub	sp, #12
 800f710:	af00      	add	r7, sp, #0
	__asm volatile
 800f712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f716:	f383 8811 	msr	BASEPRI, r3
 800f71a:	f3bf 8f6f 	isb	sy
 800f71e:	f3bf 8f4f 	dsb	sy
 800f722:	607b      	str	r3, [r7, #4]
}
 800f724:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f726:	4b0f      	ldr	r3, [pc, #60]	; (800f764 <vPortEnterCritical+0x58>)
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	3301      	adds	r3, #1
 800f72c:	4a0d      	ldr	r2, [pc, #52]	; (800f764 <vPortEnterCritical+0x58>)
 800f72e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f730:	4b0c      	ldr	r3, [pc, #48]	; (800f764 <vPortEnterCritical+0x58>)
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	2b01      	cmp	r3, #1
 800f736:	d10f      	bne.n	800f758 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f738:	4b0b      	ldr	r3, [pc, #44]	; (800f768 <vPortEnterCritical+0x5c>)
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	b2db      	uxtb	r3, r3
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d00a      	beq.n	800f758 <vPortEnterCritical+0x4c>
	__asm volatile
 800f742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f746:	f383 8811 	msr	BASEPRI, r3
 800f74a:	f3bf 8f6f 	isb	sy
 800f74e:	f3bf 8f4f 	dsb	sy
 800f752:	603b      	str	r3, [r7, #0]
}
 800f754:	bf00      	nop
 800f756:	e7fe      	b.n	800f756 <vPortEnterCritical+0x4a>
	}
}
 800f758:	bf00      	nop
 800f75a:	370c      	adds	r7, #12
 800f75c:	46bd      	mov	sp, r7
 800f75e:	bc80      	pop	{r7}
 800f760:	4770      	bx	lr
 800f762:	bf00      	nop
 800f764:	20000090 	.word	0x20000090
 800f768:	e000ed04 	.word	0xe000ed04

0800f76c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f76c:	b480      	push	{r7}
 800f76e:	b083      	sub	sp, #12
 800f770:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f772:	4b11      	ldr	r3, [pc, #68]	; (800f7b8 <vPortExitCritical+0x4c>)
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d10a      	bne.n	800f790 <vPortExitCritical+0x24>
	__asm volatile
 800f77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f77e:	f383 8811 	msr	BASEPRI, r3
 800f782:	f3bf 8f6f 	isb	sy
 800f786:	f3bf 8f4f 	dsb	sy
 800f78a:	607b      	str	r3, [r7, #4]
}
 800f78c:	bf00      	nop
 800f78e:	e7fe      	b.n	800f78e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f790:	4b09      	ldr	r3, [pc, #36]	; (800f7b8 <vPortExitCritical+0x4c>)
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	3b01      	subs	r3, #1
 800f796:	4a08      	ldr	r2, [pc, #32]	; (800f7b8 <vPortExitCritical+0x4c>)
 800f798:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f79a:	4b07      	ldr	r3, [pc, #28]	; (800f7b8 <vPortExitCritical+0x4c>)
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d105      	bne.n	800f7ae <vPortExitCritical+0x42>
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f7a6:	683b      	ldr	r3, [r7, #0]
 800f7a8:	f383 8811 	msr	BASEPRI, r3
}
 800f7ac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f7ae:	bf00      	nop
 800f7b0:	370c      	adds	r7, #12
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	bc80      	pop	{r7}
 800f7b6:	4770      	bx	lr
 800f7b8:	20000090 	.word	0x20000090
 800f7bc:	00000000 	.word	0x00000000

0800f7c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f7c0:	f3ef 8009 	mrs	r0, PSP
 800f7c4:	f3bf 8f6f 	isb	sy
 800f7c8:	4b0d      	ldr	r3, [pc, #52]	; (800f800 <pxCurrentTCBConst>)
 800f7ca:	681a      	ldr	r2, [r3, #0]
 800f7cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800f7d0:	6010      	str	r0, [r2, #0]
 800f7d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800f7d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f7da:	f380 8811 	msr	BASEPRI, r0
 800f7de:	f7fe fea3 	bl	800e528 <vTaskSwitchContext>
 800f7e2:	f04f 0000 	mov.w	r0, #0
 800f7e6:	f380 8811 	msr	BASEPRI, r0
 800f7ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f7ee:	6819      	ldr	r1, [r3, #0]
 800f7f0:	6808      	ldr	r0, [r1, #0]
 800f7f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800f7f6:	f380 8809 	msr	PSP, r0
 800f7fa:	f3bf 8f6f 	isb	sy
 800f7fe:	4770      	bx	lr

0800f800 <pxCurrentTCBConst>:
 800f800:	20001b34 	.word	0x20001b34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f804:	bf00      	nop
 800f806:	bf00      	nop

0800f808 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b082      	sub	sp, #8
 800f80c:	af00      	add	r7, sp, #0
	__asm volatile
 800f80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f812:	f383 8811 	msr	BASEPRI, r3
 800f816:	f3bf 8f6f 	isb	sy
 800f81a:	f3bf 8f4f 	dsb	sy
 800f81e:	607b      	str	r3, [r7, #4]
}
 800f820:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f822:	f7fe fdc9 	bl	800e3b8 <xTaskIncrementTick>
 800f826:	4603      	mov	r3, r0
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d003      	beq.n	800f834 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f82c:	4b06      	ldr	r3, [pc, #24]	; (800f848 <SysTick_Handler+0x40>)
 800f82e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f832:	601a      	str	r2, [r3, #0]
 800f834:	2300      	movs	r3, #0
 800f836:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f838:	683b      	ldr	r3, [r7, #0]
 800f83a:	f383 8811 	msr	BASEPRI, r3
}
 800f83e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f840:	bf00      	nop
 800f842:	3708      	adds	r7, #8
 800f844:	46bd      	mov	sp, r7
 800f846:	bd80      	pop	{r7, pc}
 800f848:	e000ed04 	.word	0xe000ed04

0800f84c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f84c:	b480      	push	{r7}
 800f84e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f850:	4b0a      	ldr	r3, [pc, #40]	; (800f87c <vPortSetupTimerInterrupt+0x30>)
 800f852:	2200      	movs	r2, #0
 800f854:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f856:	4b0a      	ldr	r3, [pc, #40]	; (800f880 <vPortSetupTimerInterrupt+0x34>)
 800f858:	2200      	movs	r2, #0
 800f85a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f85c:	4b09      	ldr	r3, [pc, #36]	; (800f884 <vPortSetupTimerInterrupt+0x38>)
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	4a09      	ldr	r2, [pc, #36]	; (800f888 <vPortSetupTimerInterrupt+0x3c>)
 800f862:	fba2 2303 	umull	r2, r3, r2, r3
 800f866:	099b      	lsrs	r3, r3, #6
 800f868:	4a08      	ldr	r2, [pc, #32]	; (800f88c <vPortSetupTimerInterrupt+0x40>)
 800f86a:	3b01      	subs	r3, #1
 800f86c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f86e:	4b03      	ldr	r3, [pc, #12]	; (800f87c <vPortSetupTimerInterrupt+0x30>)
 800f870:	2207      	movs	r2, #7
 800f872:	601a      	str	r2, [r3, #0]
}
 800f874:	bf00      	nop
 800f876:	46bd      	mov	sp, r7
 800f878:	bc80      	pop	{r7}
 800f87a:	4770      	bx	lr
 800f87c:	e000e010 	.word	0xe000e010
 800f880:	e000e018 	.word	0xe000e018
 800f884:	20000080 	.word	0x20000080
 800f888:	10624dd3 	.word	0x10624dd3
 800f88c:	e000e014 	.word	0xe000e014

0800f890 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f890:	b480      	push	{r7}
 800f892:	b085      	sub	sp, #20
 800f894:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f896:	f3ef 8305 	mrs	r3, IPSR
 800f89a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	2b0f      	cmp	r3, #15
 800f8a0:	d914      	bls.n	800f8cc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f8a2:	4a16      	ldr	r2, [pc, #88]	; (800f8fc <vPortValidateInterruptPriority+0x6c>)
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	4413      	add	r3, r2
 800f8a8:	781b      	ldrb	r3, [r3, #0]
 800f8aa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f8ac:	4b14      	ldr	r3, [pc, #80]	; (800f900 <vPortValidateInterruptPriority+0x70>)
 800f8ae:	781b      	ldrb	r3, [r3, #0]
 800f8b0:	7afa      	ldrb	r2, [r7, #11]
 800f8b2:	429a      	cmp	r2, r3
 800f8b4:	d20a      	bcs.n	800f8cc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8ba:	f383 8811 	msr	BASEPRI, r3
 800f8be:	f3bf 8f6f 	isb	sy
 800f8c2:	f3bf 8f4f 	dsb	sy
 800f8c6:	607b      	str	r3, [r7, #4]
}
 800f8c8:	bf00      	nop
 800f8ca:	e7fe      	b.n	800f8ca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f8cc:	4b0d      	ldr	r3, [pc, #52]	; (800f904 <vPortValidateInterruptPriority+0x74>)
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f8d4:	4b0c      	ldr	r3, [pc, #48]	; (800f908 <vPortValidateInterruptPriority+0x78>)
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	429a      	cmp	r2, r3
 800f8da:	d90a      	bls.n	800f8f2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8e0:	f383 8811 	msr	BASEPRI, r3
 800f8e4:	f3bf 8f6f 	isb	sy
 800f8e8:	f3bf 8f4f 	dsb	sy
 800f8ec:	603b      	str	r3, [r7, #0]
}
 800f8ee:	bf00      	nop
 800f8f0:	e7fe      	b.n	800f8f0 <vPortValidateInterruptPriority+0x60>
	}
 800f8f2:	bf00      	nop
 800f8f4:	3714      	adds	r7, #20
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	bc80      	pop	{r7}
 800f8fa:	4770      	bx	lr
 800f8fc:	e000e3f0 	.word	0xe000e3f0
 800f900:	20001d5c 	.word	0x20001d5c
 800f904:	e000ed0c 	.word	0xe000ed0c
 800f908:	20001d60 	.word	0x20001d60

0800f90c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b08a      	sub	sp, #40	; 0x28
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f914:	2300      	movs	r3, #0
 800f916:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f918:	f7fe fc96 	bl	800e248 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f91c:	4b5b      	ldr	r3, [pc, #364]	; (800fa8c <pvPortMalloc+0x180>)
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d101      	bne.n	800f928 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f924:	f000 f916 	bl	800fb54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f928:	4b59      	ldr	r3, [pc, #356]	; (800fa90 <pvPortMalloc+0x184>)
 800f92a:	681a      	ldr	r2, [r3, #0]
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	4013      	ands	r3, r2
 800f930:	2b00      	cmp	r3, #0
 800f932:	f040 808e 	bne.w	800fa52 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d01d      	beq.n	800f978 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f93c:	2208      	movs	r2, #8
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	4413      	add	r3, r2
 800f942:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	f003 0307 	and.w	r3, r3, #7
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d014      	beq.n	800f978 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	f023 0307 	bic.w	r3, r3, #7
 800f954:	3308      	adds	r3, #8
 800f956:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	f003 0307 	and.w	r3, r3, #7
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d00a      	beq.n	800f978 <pvPortMalloc+0x6c>
	__asm volatile
 800f962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f966:	f383 8811 	msr	BASEPRI, r3
 800f96a:	f3bf 8f6f 	isb	sy
 800f96e:	f3bf 8f4f 	dsb	sy
 800f972:	617b      	str	r3, [r7, #20]
}
 800f974:	bf00      	nop
 800f976:	e7fe      	b.n	800f976 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d069      	beq.n	800fa52 <pvPortMalloc+0x146>
 800f97e:	4b45      	ldr	r3, [pc, #276]	; (800fa94 <pvPortMalloc+0x188>)
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	687a      	ldr	r2, [r7, #4]
 800f984:	429a      	cmp	r2, r3
 800f986:	d864      	bhi.n	800fa52 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f988:	4b43      	ldr	r3, [pc, #268]	; (800fa98 <pvPortMalloc+0x18c>)
 800f98a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f98c:	4b42      	ldr	r3, [pc, #264]	; (800fa98 <pvPortMalloc+0x18c>)
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f992:	e004      	b.n	800f99e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f996:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9a0:	685b      	ldr	r3, [r3, #4]
 800f9a2:	687a      	ldr	r2, [r7, #4]
 800f9a4:	429a      	cmp	r2, r3
 800f9a6:	d903      	bls.n	800f9b0 <pvPortMalloc+0xa4>
 800f9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d1f1      	bne.n	800f994 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f9b0:	4b36      	ldr	r3, [pc, #216]	; (800fa8c <pvPortMalloc+0x180>)
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9b6:	429a      	cmp	r2, r3
 800f9b8:	d04b      	beq.n	800fa52 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f9ba:	6a3b      	ldr	r3, [r7, #32]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	2208      	movs	r2, #8
 800f9c0:	4413      	add	r3, r2
 800f9c2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9c6:	681a      	ldr	r2, [r3, #0]
 800f9c8:	6a3b      	ldr	r3, [r7, #32]
 800f9ca:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ce:	685a      	ldr	r2, [r3, #4]
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	1ad2      	subs	r2, r2, r3
 800f9d4:	2308      	movs	r3, #8
 800f9d6:	005b      	lsls	r3, r3, #1
 800f9d8:	429a      	cmp	r2, r3
 800f9da:	d91f      	bls.n	800fa1c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f9dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	4413      	add	r3, r2
 800f9e2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f9e4:	69bb      	ldr	r3, [r7, #24]
 800f9e6:	f003 0307 	and.w	r3, r3, #7
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d00a      	beq.n	800fa04 <pvPortMalloc+0xf8>
	__asm volatile
 800f9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9f2:	f383 8811 	msr	BASEPRI, r3
 800f9f6:	f3bf 8f6f 	isb	sy
 800f9fa:	f3bf 8f4f 	dsb	sy
 800f9fe:	613b      	str	r3, [r7, #16]
}
 800fa00:	bf00      	nop
 800fa02:	e7fe      	b.n	800fa02 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fa04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa06:	685a      	ldr	r2, [r3, #4]
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	1ad2      	subs	r2, r2, r3
 800fa0c:	69bb      	ldr	r3, [r7, #24]
 800fa0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fa10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa12:	687a      	ldr	r2, [r7, #4]
 800fa14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fa16:	69b8      	ldr	r0, [r7, #24]
 800fa18:	f000 f8fe 	bl	800fc18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fa1c:	4b1d      	ldr	r3, [pc, #116]	; (800fa94 <pvPortMalloc+0x188>)
 800fa1e:	681a      	ldr	r2, [r3, #0]
 800fa20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa22:	685b      	ldr	r3, [r3, #4]
 800fa24:	1ad3      	subs	r3, r2, r3
 800fa26:	4a1b      	ldr	r2, [pc, #108]	; (800fa94 <pvPortMalloc+0x188>)
 800fa28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fa2a:	4b1a      	ldr	r3, [pc, #104]	; (800fa94 <pvPortMalloc+0x188>)
 800fa2c:	681a      	ldr	r2, [r3, #0]
 800fa2e:	4b1b      	ldr	r3, [pc, #108]	; (800fa9c <pvPortMalloc+0x190>)
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	429a      	cmp	r2, r3
 800fa34:	d203      	bcs.n	800fa3e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fa36:	4b17      	ldr	r3, [pc, #92]	; (800fa94 <pvPortMalloc+0x188>)
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	4a18      	ldr	r2, [pc, #96]	; (800fa9c <pvPortMalloc+0x190>)
 800fa3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fa3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa40:	685a      	ldr	r2, [r3, #4]
 800fa42:	4b13      	ldr	r3, [pc, #76]	; (800fa90 <pvPortMalloc+0x184>)
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	431a      	orrs	r2, r3
 800fa48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fa4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa4e:	2200      	movs	r2, #0
 800fa50:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fa52:	f7fe fc07 	bl	800e264 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800fa56:	69fb      	ldr	r3, [r7, #28]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d101      	bne.n	800fa60 <pvPortMalloc+0x154>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800fa5c:	f7f1 fbb4 	bl	80011c8 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fa60:	69fb      	ldr	r3, [r7, #28]
 800fa62:	f003 0307 	and.w	r3, r3, #7
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d00a      	beq.n	800fa80 <pvPortMalloc+0x174>
	__asm volatile
 800fa6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa6e:	f383 8811 	msr	BASEPRI, r3
 800fa72:	f3bf 8f6f 	isb	sy
 800fa76:	f3bf 8f4f 	dsb	sy
 800fa7a:	60fb      	str	r3, [r7, #12]
}
 800fa7c:	bf00      	nop
 800fa7e:	e7fe      	b.n	800fa7e <pvPortMalloc+0x172>
	return pvReturn;
 800fa80:	69fb      	ldr	r3, [r7, #28]
}
 800fa82:	4618      	mov	r0, r3
 800fa84:	3728      	adds	r7, #40	; 0x28
 800fa86:	46bd      	mov	sp, r7
 800fa88:	bd80      	pop	{r7, pc}
 800fa8a:	bf00      	nop
 800fa8c:	20004d6c 	.word	0x20004d6c
 800fa90:	20004d78 	.word	0x20004d78
 800fa94:	20004d70 	.word	0x20004d70
 800fa98:	20004d64 	.word	0x20004d64
 800fa9c:	20004d74 	.word	0x20004d74

0800faa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b086      	sub	sp, #24
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d048      	beq.n	800fb44 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fab2:	2308      	movs	r3, #8
 800fab4:	425b      	negs	r3, r3
 800fab6:	697a      	ldr	r2, [r7, #20]
 800fab8:	4413      	add	r3, r2
 800faba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fabc:	697b      	ldr	r3, [r7, #20]
 800fabe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fac0:	693b      	ldr	r3, [r7, #16]
 800fac2:	685a      	ldr	r2, [r3, #4]
 800fac4:	4b21      	ldr	r3, [pc, #132]	; (800fb4c <vPortFree+0xac>)
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	4013      	ands	r3, r2
 800faca:	2b00      	cmp	r3, #0
 800facc:	d10a      	bne.n	800fae4 <vPortFree+0x44>
	__asm volatile
 800face:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fad2:	f383 8811 	msr	BASEPRI, r3
 800fad6:	f3bf 8f6f 	isb	sy
 800fada:	f3bf 8f4f 	dsb	sy
 800fade:	60fb      	str	r3, [r7, #12]
}
 800fae0:	bf00      	nop
 800fae2:	e7fe      	b.n	800fae2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fae4:	693b      	ldr	r3, [r7, #16]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d00a      	beq.n	800fb02 <vPortFree+0x62>
	__asm volatile
 800faec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faf0:	f383 8811 	msr	BASEPRI, r3
 800faf4:	f3bf 8f6f 	isb	sy
 800faf8:	f3bf 8f4f 	dsb	sy
 800fafc:	60bb      	str	r3, [r7, #8]
}
 800fafe:	bf00      	nop
 800fb00:	e7fe      	b.n	800fb00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fb02:	693b      	ldr	r3, [r7, #16]
 800fb04:	685a      	ldr	r2, [r3, #4]
 800fb06:	4b11      	ldr	r3, [pc, #68]	; (800fb4c <vPortFree+0xac>)
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	4013      	ands	r3, r2
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d019      	beq.n	800fb44 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fb10:	693b      	ldr	r3, [r7, #16]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d115      	bne.n	800fb44 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fb18:	693b      	ldr	r3, [r7, #16]
 800fb1a:	685a      	ldr	r2, [r3, #4]
 800fb1c:	4b0b      	ldr	r3, [pc, #44]	; (800fb4c <vPortFree+0xac>)
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	43db      	mvns	r3, r3
 800fb22:	401a      	ands	r2, r3
 800fb24:	693b      	ldr	r3, [r7, #16]
 800fb26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fb28:	f7fe fb8e 	bl	800e248 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fb2c:	693b      	ldr	r3, [r7, #16]
 800fb2e:	685a      	ldr	r2, [r3, #4]
 800fb30:	4b07      	ldr	r3, [pc, #28]	; (800fb50 <vPortFree+0xb0>)
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	4413      	add	r3, r2
 800fb36:	4a06      	ldr	r2, [pc, #24]	; (800fb50 <vPortFree+0xb0>)
 800fb38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fb3a:	6938      	ldr	r0, [r7, #16]
 800fb3c:	f000 f86c 	bl	800fc18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800fb40:	f7fe fb90 	bl	800e264 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fb44:	bf00      	nop
 800fb46:	3718      	adds	r7, #24
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	bd80      	pop	{r7, pc}
 800fb4c:	20004d78 	.word	0x20004d78
 800fb50:	20004d70 	.word	0x20004d70

0800fb54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fb54:	b480      	push	{r7}
 800fb56:	b085      	sub	sp, #20
 800fb58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fb5a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800fb5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fb60:	4b27      	ldr	r3, [pc, #156]	; (800fc00 <prvHeapInit+0xac>)
 800fb62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	f003 0307 	and.w	r3, r3, #7
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d00c      	beq.n	800fb88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	3307      	adds	r3, #7
 800fb72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	f023 0307 	bic.w	r3, r3, #7
 800fb7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fb7c:	68ba      	ldr	r2, [r7, #8]
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	1ad3      	subs	r3, r2, r3
 800fb82:	4a1f      	ldr	r2, [pc, #124]	; (800fc00 <prvHeapInit+0xac>)
 800fb84:	4413      	add	r3, r2
 800fb86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fb8c:	4a1d      	ldr	r2, [pc, #116]	; (800fc04 <prvHeapInit+0xb0>)
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fb92:	4b1c      	ldr	r3, [pc, #112]	; (800fc04 <prvHeapInit+0xb0>)
 800fb94:	2200      	movs	r2, #0
 800fb96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	68ba      	ldr	r2, [r7, #8]
 800fb9c:	4413      	add	r3, r2
 800fb9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fba0:	2208      	movs	r2, #8
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	1a9b      	subs	r3, r3, r2
 800fba6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	f023 0307 	bic.w	r3, r3, #7
 800fbae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	4a15      	ldr	r2, [pc, #84]	; (800fc08 <prvHeapInit+0xb4>)
 800fbb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fbb6:	4b14      	ldr	r3, [pc, #80]	; (800fc08 <prvHeapInit+0xb4>)
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	2200      	movs	r2, #0
 800fbbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fbbe:	4b12      	ldr	r3, [pc, #72]	; (800fc08 <prvHeapInit+0xb4>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	2200      	movs	r2, #0
 800fbc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fbca:	683b      	ldr	r3, [r7, #0]
 800fbcc:	68fa      	ldr	r2, [r7, #12]
 800fbce:	1ad2      	subs	r2, r2, r3
 800fbd0:	683b      	ldr	r3, [r7, #0]
 800fbd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fbd4:	4b0c      	ldr	r3, [pc, #48]	; (800fc08 <prvHeapInit+0xb4>)
 800fbd6:	681a      	ldr	r2, [r3, #0]
 800fbd8:	683b      	ldr	r3, [r7, #0]
 800fbda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fbdc:	683b      	ldr	r3, [r7, #0]
 800fbde:	685b      	ldr	r3, [r3, #4]
 800fbe0:	4a0a      	ldr	r2, [pc, #40]	; (800fc0c <prvHeapInit+0xb8>)
 800fbe2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	685b      	ldr	r3, [r3, #4]
 800fbe8:	4a09      	ldr	r2, [pc, #36]	; (800fc10 <prvHeapInit+0xbc>)
 800fbea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fbec:	4b09      	ldr	r3, [pc, #36]	; (800fc14 <prvHeapInit+0xc0>)
 800fbee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fbf2:	601a      	str	r2, [r3, #0]
}
 800fbf4:	bf00      	nop
 800fbf6:	3714      	adds	r7, #20
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	bc80      	pop	{r7}
 800fbfc:	4770      	bx	lr
 800fbfe:	bf00      	nop
 800fc00:	20001d64 	.word	0x20001d64
 800fc04:	20004d64 	.word	0x20004d64
 800fc08:	20004d6c 	.word	0x20004d6c
 800fc0c:	20004d74 	.word	0x20004d74
 800fc10:	20004d70 	.word	0x20004d70
 800fc14:	20004d78 	.word	0x20004d78

0800fc18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fc18:	b480      	push	{r7}
 800fc1a:	b085      	sub	sp, #20
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fc20:	4b27      	ldr	r3, [pc, #156]	; (800fcc0 <prvInsertBlockIntoFreeList+0xa8>)
 800fc22:	60fb      	str	r3, [r7, #12]
 800fc24:	e002      	b.n	800fc2c <prvInsertBlockIntoFreeList+0x14>
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	60fb      	str	r3, [r7, #12]
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	687a      	ldr	r2, [r7, #4]
 800fc32:	429a      	cmp	r2, r3
 800fc34:	d8f7      	bhi.n	800fc26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	685b      	ldr	r3, [r3, #4]
 800fc3e:	68ba      	ldr	r2, [r7, #8]
 800fc40:	4413      	add	r3, r2
 800fc42:	687a      	ldr	r2, [r7, #4]
 800fc44:	429a      	cmp	r2, r3
 800fc46:	d108      	bne.n	800fc5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	685a      	ldr	r2, [r3, #4]
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	685b      	ldr	r3, [r3, #4]
 800fc50:	441a      	add	r2, r3
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	685b      	ldr	r3, [r3, #4]
 800fc62:	68ba      	ldr	r2, [r7, #8]
 800fc64:	441a      	add	r2, r3
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	429a      	cmp	r2, r3
 800fc6c:	d118      	bne.n	800fca0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	681a      	ldr	r2, [r3, #0]
 800fc72:	4b14      	ldr	r3, [pc, #80]	; (800fcc4 <prvInsertBlockIntoFreeList+0xac>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	429a      	cmp	r2, r3
 800fc78:	d00d      	beq.n	800fc96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	685a      	ldr	r2, [r3, #4]
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	685b      	ldr	r3, [r3, #4]
 800fc84:	441a      	add	r2, r3
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	681a      	ldr	r2, [r3, #0]
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	601a      	str	r2, [r3, #0]
 800fc94:	e008      	b.n	800fca8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fc96:	4b0b      	ldr	r3, [pc, #44]	; (800fcc4 <prvInsertBlockIntoFreeList+0xac>)
 800fc98:	681a      	ldr	r2, [r3, #0]
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	601a      	str	r2, [r3, #0]
 800fc9e:	e003      	b.n	800fca8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	681a      	ldr	r2, [r3, #0]
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fca8:	68fa      	ldr	r2, [r7, #12]
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	429a      	cmp	r2, r3
 800fcae:	d002      	beq.n	800fcb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	687a      	ldr	r2, [r7, #4]
 800fcb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fcb6:	bf00      	nop
 800fcb8:	3714      	adds	r7, #20
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	bc80      	pop	{r7}
 800fcbe:	4770      	bx	lr
 800fcc0:	20004d64 	.word	0x20004d64
 800fcc4:	20004d6c 	.word	0x20004d6c

0800fcc8 <__errno>:
 800fcc8:	4b01      	ldr	r3, [pc, #4]	; (800fcd0 <__errno+0x8>)
 800fcca:	6818      	ldr	r0, [r3, #0]
 800fccc:	4770      	bx	lr
 800fcce:	bf00      	nop
 800fcd0:	20000094 	.word	0x20000094

0800fcd4 <std>:
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	b510      	push	{r4, lr}
 800fcd8:	4604      	mov	r4, r0
 800fcda:	e9c0 3300 	strd	r3, r3, [r0]
 800fcde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fce2:	6083      	str	r3, [r0, #8]
 800fce4:	8181      	strh	r1, [r0, #12]
 800fce6:	6643      	str	r3, [r0, #100]	; 0x64
 800fce8:	81c2      	strh	r2, [r0, #14]
 800fcea:	6183      	str	r3, [r0, #24]
 800fcec:	4619      	mov	r1, r3
 800fcee:	2208      	movs	r2, #8
 800fcf0:	305c      	adds	r0, #92	; 0x5c
 800fcf2:	f000 f9c4 	bl	801007e <memset>
 800fcf6:	4b05      	ldr	r3, [pc, #20]	; (800fd0c <std+0x38>)
 800fcf8:	6263      	str	r3, [r4, #36]	; 0x24
 800fcfa:	4b05      	ldr	r3, [pc, #20]	; (800fd10 <std+0x3c>)
 800fcfc:	62a3      	str	r3, [r4, #40]	; 0x28
 800fcfe:	4b05      	ldr	r3, [pc, #20]	; (800fd14 <std+0x40>)
 800fd00:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fd02:	4b05      	ldr	r3, [pc, #20]	; (800fd18 <std+0x44>)
 800fd04:	6224      	str	r4, [r4, #32]
 800fd06:	6323      	str	r3, [r4, #48]	; 0x30
 800fd08:	bd10      	pop	{r4, pc}
 800fd0a:	bf00      	nop
 800fd0c:	0801092d 	.word	0x0801092d
 800fd10:	0801094f 	.word	0x0801094f
 800fd14:	08010987 	.word	0x08010987
 800fd18:	080109ab 	.word	0x080109ab

0800fd1c <_cleanup_r>:
 800fd1c:	4901      	ldr	r1, [pc, #4]	; (800fd24 <_cleanup_r+0x8>)
 800fd1e:	f000 b8c1 	b.w	800fea4 <_fwalk_reent>
 800fd22:	bf00      	nop
 800fd24:	08010d99 	.word	0x08010d99

0800fd28 <__sfmoreglue>:
 800fd28:	b570      	push	{r4, r5, r6, lr}
 800fd2a:	2268      	movs	r2, #104	; 0x68
 800fd2c:	1e4d      	subs	r5, r1, #1
 800fd2e:	4355      	muls	r5, r2
 800fd30:	460e      	mov	r6, r1
 800fd32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fd36:	f000 f9cb 	bl	80100d0 <_malloc_r>
 800fd3a:	4604      	mov	r4, r0
 800fd3c:	b140      	cbz	r0, 800fd50 <__sfmoreglue+0x28>
 800fd3e:	2100      	movs	r1, #0
 800fd40:	e9c0 1600 	strd	r1, r6, [r0]
 800fd44:	300c      	adds	r0, #12
 800fd46:	60a0      	str	r0, [r4, #8]
 800fd48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fd4c:	f000 f997 	bl	801007e <memset>
 800fd50:	4620      	mov	r0, r4
 800fd52:	bd70      	pop	{r4, r5, r6, pc}

0800fd54 <__sfp_lock_acquire>:
 800fd54:	4801      	ldr	r0, [pc, #4]	; (800fd5c <__sfp_lock_acquire+0x8>)
 800fd56:	f000 b958 	b.w	801000a <__retarget_lock_acquire_recursive>
 800fd5a:	bf00      	nop
 800fd5c:	20004d7d 	.word	0x20004d7d

0800fd60 <__sfp_lock_release>:
 800fd60:	4801      	ldr	r0, [pc, #4]	; (800fd68 <__sfp_lock_release+0x8>)
 800fd62:	f000 b953 	b.w	801000c <__retarget_lock_release_recursive>
 800fd66:	bf00      	nop
 800fd68:	20004d7d 	.word	0x20004d7d

0800fd6c <__sinit_lock_acquire>:
 800fd6c:	4801      	ldr	r0, [pc, #4]	; (800fd74 <__sinit_lock_acquire+0x8>)
 800fd6e:	f000 b94c 	b.w	801000a <__retarget_lock_acquire_recursive>
 800fd72:	bf00      	nop
 800fd74:	20004d7e 	.word	0x20004d7e

0800fd78 <__sinit_lock_release>:
 800fd78:	4801      	ldr	r0, [pc, #4]	; (800fd80 <__sinit_lock_release+0x8>)
 800fd7a:	f000 b947 	b.w	801000c <__retarget_lock_release_recursive>
 800fd7e:	bf00      	nop
 800fd80:	20004d7e 	.word	0x20004d7e

0800fd84 <__sinit>:
 800fd84:	b510      	push	{r4, lr}
 800fd86:	4604      	mov	r4, r0
 800fd88:	f7ff fff0 	bl	800fd6c <__sinit_lock_acquire>
 800fd8c:	69a3      	ldr	r3, [r4, #24]
 800fd8e:	b11b      	cbz	r3, 800fd98 <__sinit+0x14>
 800fd90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd94:	f7ff bff0 	b.w	800fd78 <__sinit_lock_release>
 800fd98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fd9c:	6523      	str	r3, [r4, #80]	; 0x50
 800fd9e:	4b13      	ldr	r3, [pc, #76]	; (800fdec <__sinit+0x68>)
 800fda0:	4a13      	ldr	r2, [pc, #76]	; (800fdf0 <__sinit+0x6c>)
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	62a2      	str	r2, [r4, #40]	; 0x28
 800fda6:	42a3      	cmp	r3, r4
 800fda8:	bf04      	itt	eq
 800fdaa:	2301      	moveq	r3, #1
 800fdac:	61a3      	streq	r3, [r4, #24]
 800fdae:	4620      	mov	r0, r4
 800fdb0:	f000 f820 	bl	800fdf4 <__sfp>
 800fdb4:	6060      	str	r0, [r4, #4]
 800fdb6:	4620      	mov	r0, r4
 800fdb8:	f000 f81c 	bl	800fdf4 <__sfp>
 800fdbc:	60a0      	str	r0, [r4, #8]
 800fdbe:	4620      	mov	r0, r4
 800fdc0:	f000 f818 	bl	800fdf4 <__sfp>
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	60e0      	str	r0, [r4, #12]
 800fdc8:	2104      	movs	r1, #4
 800fdca:	6860      	ldr	r0, [r4, #4]
 800fdcc:	f7ff ff82 	bl	800fcd4 <std>
 800fdd0:	68a0      	ldr	r0, [r4, #8]
 800fdd2:	2201      	movs	r2, #1
 800fdd4:	2109      	movs	r1, #9
 800fdd6:	f7ff ff7d 	bl	800fcd4 <std>
 800fdda:	68e0      	ldr	r0, [r4, #12]
 800fddc:	2202      	movs	r2, #2
 800fdde:	2112      	movs	r1, #18
 800fde0:	f7ff ff78 	bl	800fcd4 <std>
 800fde4:	2301      	movs	r3, #1
 800fde6:	61a3      	str	r3, [r4, #24]
 800fde8:	e7d2      	b.n	800fd90 <__sinit+0xc>
 800fdea:	bf00      	nop
 800fdec:	08013734 	.word	0x08013734
 800fdf0:	0800fd1d 	.word	0x0800fd1d

0800fdf4 <__sfp>:
 800fdf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdf6:	4607      	mov	r7, r0
 800fdf8:	f7ff ffac 	bl	800fd54 <__sfp_lock_acquire>
 800fdfc:	4b1e      	ldr	r3, [pc, #120]	; (800fe78 <__sfp+0x84>)
 800fdfe:	681e      	ldr	r6, [r3, #0]
 800fe00:	69b3      	ldr	r3, [r6, #24]
 800fe02:	b913      	cbnz	r3, 800fe0a <__sfp+0x16>
 800fe04:	4630      	mov	r0, r6
 800fe06:	f7ff ffbd 	bl	800fd84 <__sinit>
 800fe0a:	3648      	adds	r6, #72	; 0x48
 800fe0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fe10:	3b01      	subs	r3, #1
 800fe12:	d503      	bpl.n	800fe1c <__sfp+0x28>
 800fe14:	6833      	ldr	r3, [r6, #0]
 800fe16:	b30b      	cbz	r3, 800fe5c <__sfp+0x68>
 800fe18:	6836      	ldr	r6, [r6, #0]
 800fe1a:	e7f7      	b.n	800fe0c <__sfp+0x18>
 800fe1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fe20:	b9d5      	cbnz	r5, 800fe58 <__sfp+0x64>
 800fe22:	4b16      	ldr	r3, [pc, #88]	; (800fe7c <__sfp+0x88>)
 800fe24:	60e3      	str	r3, [r4, #12]
 800fe26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fe2a:	6665      	str	r5, [r4, #100]	; 0x64
 800fe2c:	f000 f8ec 	bl	8010008 <__retarget_lock_init_recursive>
 800fe30:	f7ff ff96 	bl	800fd60 <__sfp_lock_release>
 800fe34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fe38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fe3c:	6025      	str	r5, [r4, #0]
 800fe3e:	61a5      	str	r5, [r4, #24]
 800fe40:	2208      	movs	r2, #8
 800fe42:	4629      	mov	r1, r5
 800fe44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fe48:	f000 f919 	bl	801007e <memset>
 800fe4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fe50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fe54:	4620      	mov	r0, r4
 800fe56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe58:	3468      	adds	r4, #104	; 0x68
 800fe5a:	e7d9      	b.n	800fe10 <__sfp+0x1c>
 800fe5c:	2104      	movs	r1, #4
 800fe5e:	4638      	mov	r0, r7
 800fe60:	f7ff ff62 	bl	800fd28 <__sfmoreglue>
 800fe64:	4604      	mov	r4, r0
 800fe66:	6030      	str	r0, [r6, #0]
 800fe68:	2800      	cmp	r0, #0
 800fe6a:	d1d5      	bne.n	800fe18 <__sfp+0x24>
 800fe6c:	f7ff ff78 	bl	800fd60 <__sfp_lock_release>
 800fe70:	230c      	movs	r3, #12
 800fe72:	603b      	str	r3, [r7, #0]
 800fe74:	e7ee      	b.n	800fe54 <__sfp+0x60>
 800fe76:	bf00      	nop
 800fe78:	08013734 	.word	0x08013734
 800fe7c:	ffff0001 	.word	0xffff0001

0800fe80 <fiprintf>:
 800fe80:	b40e      	push	{r1, r2, r3}
 800fe82:	b503      	push	{r0, r1, lr}
 800fe84:	4601      	mov	r1, r0
 800fe86:	ab03      	add	r3, sp, #12
 800fe88:	4805      	ldr	r0, [pc, #20]	; (800fea0 <fiprintf+0x20>)
 800fe8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe8e:	6800      	ldr	r0, [r0, #0]
 800fe90:	9301      	str	r3, [sp, #4]
 800fe92:	f000 f9b9 	bl	8010208 <_vfiprintf_r>
 800fe96:	b002      	add	sp, #8
 800fe98:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe9c:	b003      	add	sp, #12
 800fe9e:	4770      	bx	lr
 800fea0:	20000094 	.word	0x20000094

0800fea4 <_fwalk_reent>:
 800fea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fea8:	4606      	mov	r6, r0
 800feaa:	4688      	mov	r8, r1
 800feac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800feb0:	2700      	movs	r7, #0
 800feb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800feb6:	f1b9 0901 	subs.w	r9, r9, #1
 800feba:	d505      	bpl.n	800fec8 <_fwalk_reent+0x24>
 800febc:	6824      	ldr	r4, [r4, #0]
 800febe:	2c00      	cmp	r4, #0
 800fec0:	d1f7      	bne.n	800feb2 <_fwalk_reent+0xe>
 800fec2:	4638      	mov	r0, r7
 800fec4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fec8:	89ab      	ldrh	r3, [r5, #12]
 800feca:	2b01      	cmp	r3, #1
 800fecc:	d907      	bls.n	800fede <_fwalk_reent+0x3a>
 800fece:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fed2:	3301      	adds	r3, #1
 800fed4:	d003      	beq.n	800fede <_fwalk_reent+0x3a>
 800fed6:	4629      	mov	r1, r5
 800fed8:	4630      	mov	r0, r6
 800feda:	47c0      	blx	r8
 800fedc:	4307      	orrs	r7, r0
 800fede:	3568      	adds	r5, #104	; 0x68
 800fee0:	e7e9      	b.n	800feb6 <_fwalk_reent+0x12>
	...

0800fee4 <_fwrite_r>:
 800fee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fee8:	9c08      	ldr	r4, [sp, #32]
 800feea:	468a      	mov	sl, r1
 800feec:	4690      	mov	r8, r2
 800feee:	fb02 f903 	mul.w	r9, r2, r3
 800fef2:	4605      	mov	r5, r0
 800fef4:	b118      	cbz	r0, 800fefe <_fwrite_r+0x1a>
 800fef6:	6983      	ldr	r3, [r0, #24]
 800fef8:	b90b      	cbnz	r3, 800fefe <_fwrite_r+0x1a>
 800fefa:	f7ff ff43 	bl	800fd84 <__sinit>
 800fefe:	4b26      	ldr	r3, [pc, #152]	; (800ff98 <_fwrite_r+0xb4>)
 800ff00:	429c      	cmp	r4, r3
 800ff02:	d123      	bne.n	800ff4c <_fwrite_r+0x68>
 800ff04:	686c      	ldr	r4, [r5, #4]
 800ff06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ff08:	07de      	lsls	r6, r3, #31
 800ff0a:	d405      	bmi.n	800ff18 <_fwrite_r+0x34>
 800ff0c:	89a3      	ldrh	r3, [r4, #12]
 800ff0e:	0598      	lsls	r0, r3, #22
 800ff10:	d402      	bmi.n	800ff18 <_fwrite_r+0x34>
 800ff12:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff14:	f000 f879 	bl	801000a <__retarget_lock_acquire_recursive>
 800ff18:	89a3      	ldrh	r3, [r4, #12]
 800ff1a:	0719      	lsls	r1, r3, #28
 800ff1c:	d520      	bpl.n	800ff60 <_fwrite_r+0x7c>
 800ff1e:	6923      	ldr	r3, [r4, #16]
 800ff20:	b1f3      	cbz	r3, 800ff60 <_fwrite_r+0x7c>
 800ff22:	2600      	movs	r6, #0
 800ff24:	454e      	cmp	r6, r9
 800ff26:	d029      	beq.n	800ff7c <_fwrite_r+0x98>
 800ff28:	68a7      	ldr	r7, [r4, #8]
 800ff2a:	f81a 1006 	ldrb.w	r1, [sl, r6]
 800ff2e:	3f01      	subs	r7, #1
 800ff30:	2f00      	cmp	r7, #0
 800ff32:	60a7      	str	r7, [r4, #8]
 800ff34:	da04      	bge.n	800ff40 <_fwrite_r+0x5c>
 800ff36:	69a3      	ldr	r3, [r4, #24]
 800ff38:	429f      	cmp	r7, r3
 800ff3a:	db19      	blt.n	800ff70 <_fwrite_r+0x8c>
 800ff3c:	290a      	cmp	r1, #10
 800ff3e:	d017      	beq.n	800ff70 <_fwrite_r+0x8c>
 800ff40:	6823      	ldr	r3, [r4, #0]
 800ff42:	1c5a      	adds	r2, r3, #1
 800ff44:	6022      	str	r2, [r4, #0]
 800ff46:	7019      	strb	r1, [r3, #0]
 800ff48:	3601      	adds	r6, #1
 800ff4a:	e7eb      	b.n	800ff24 <_fwrite_r+0x40>
 800ff4c:	4b13      	ldr	r3, [pc, #76]	; (800ff9c <_fwrite_r+0xb8>)
 800ff4e:	429c      	cmp	r4, r3
 800ff50:	d101      	bne.n	800ff56 <_fwrite_r+0x72>
 800ff52:	68ac      	ldr	r4, [r5, #8]
 800ff54:	e7d7      	b.n	800ff06 <_fwrite_r+0x22>
 800ff56:	4b12      	ldr	r3, [pc, #72]	; (800ffa0 <_fwrite_r+0xbc>)
 800ff58:	429c      	cmp	r4, r3
 800ff5a:	bf08      	it	eq
 800ff5c:	68ec      	ldreq	r4, [r5, #12]
 800ff5e:	e7d2      	b.n	800ff06 <_fwrite_r+0x22>
 800ff60:	4621      	mov	r1, r4
 800ff62:	4628      	mov	r0, r5
 800ff64:	f000 fdfa 	bl	8010b5c <__swsetup_r>
 800ff68:	2800      	cmp	r0, #0
 800ff6a:	d0da      	beq.n	800ff22 <_fwrite_r+0x3e>
 800ff6c:	2600      	movs	r6, #0
 800ff6e:	e005      	b.n	800ff7c <_fwrite_r+0x98>
 800ff70:	4622      	mov	r2, r4
 800ff72:	4628      	mov	r0, r5
 800ff74:	f000 fd8e 	bl	8010a94 <__swbuf_r>
 800ff78:	3001      	adds	r0, #1
 800ff7a:	d1e5      	bne.n	800ff48 <_fwrite_r+0x64>
 800ff7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ff7e:	07da      	lsls	r2, r3, #31
 800ff80:	d405      	bmi.n	800ff8e <_fwrite_r+0xaa>
 800ff82:	89a3      	ldrh	r3, [r4, #12]
 800ff84:	059b      	lsls	r3, r3, #22
 800ff86:	d402      	bmi.n	800ff8e <_fwrite_r+0xaa>
 800ff88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff8a:	f000 f83f 	bl	801000c <__retarget_lock_release_recursive>
 800ff8e:	fbb6 f0f8 	udiv	r0, r6, r8
 800ff92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff96:	bf00      	nop
 800ff98:	080136f4 	.word	0x080136f4
 800ff9c:	08013714 	.word	0x08013714
 800ffa0:	080136d4 	.word	0x080136d4

0800ffa4 <fwrite>:
 800ffa4:	b507      	push	{r0, r1, r2, lr}
 800ffa6:	9300      	str	r3, [sp, #0]
 800ffa8:	4613      	mov	r3, r2
 800ffaa:	460a      	mov	r2, r1
 800ffac:	4601      	mov	r1, r0
 800ffae:	4803      	ldr	r0, [pc, #12]	; (800ffbc <fwrite+0x18>)
 800ffb0:	6800      	ldr	r0, [r0, #0]
 800ffb2:	f7ff ff97 	bl	800fee4 <_fwrite_r>
 800ffb6:	b003      	add	sp, #12
 800ffb8:	f85d fb04 	ldr.w	pc, [sp], #4
 800ffbc:	20000094 	.word	0x20000094

0800ffc0 <__libc_init_array>:
 800ffc0:	b570      	push	{r4, r5, r6, lr}
 800ffc2:	4d0d      	ldr	r5, [pc, #52]	; (800fff8 <__libc_init_array+0x38>)
 800ffc4:	4c0d      	ldr	r4, [pc, #52]	; (800fffc <__libc_init_array+0x3c>)
 800ffc6:	1b64      	subs	r4, r4, r5
 800ffc8:	10a4      	asrs	r4, r4, #2
 800ffca:	2600      	movs	r6, #0
 800ffcc:	42a6      	cmp	r6, r4
 800ffce:	d109      	bne.n	800ffe4 <__libc_init_array+0x24>
 800ffd0:	4d0b      	ldr	r5, [pc, #44]	; (8010000 <__libc_init_array+0x40>)
 800ffd2:	4c0c      	ldr	r4, [pc, #48]	; (8010004 <__libc_init_array+0x44>)
 800ffd4:	f002 f8e6 	bl	80121a4 <_init>
 800ffd8:	1b64      	subs	r4, r4, r5
 800ffda:	10a4      	asrs	r4, r4, #2
 800ffdc:	2600      	movs	r6, #0
 800ffde:	42a6      	cmp	r6, r4
 800ffe0:	d105      	bne.n	800ffee <__libc_init_array+0x2e>
 800ffe2:	bd70      	pop	{r4, r5, r6, pc}
 800ffe4:	f855 3b04 	ldr.w	r3, [r5], #4
 800ffe8:	4798      	blx	r3
 800ffea:	3601      	adds	r6, #1
 800ffec:	e7ee      	b.n	800ffcc <__libc_init_array+0xc>
 800ffee:	f855 3b04 	ldr.w	r3, [r5], #4
 800fff2:	4798      	blx	r3
 800fff4:	3601      	adds	r6, #1
 800fff6:	e7f2      	b.n	800ffde <__libc_init_array+0x1e>
 800fff8:	08013858 	.word	0x08013858
 800fffc:	08013858 	.word	0x08013858
 8010000:	08013858 	.word	0x08013858
 8010004:	0801385c 	.word	0x0801385c

08010008 <__retarget_lock_init_recursive>:
 8010008:	4770      	bx	lr

0801000a <__retarget_lock_acquire_recursive>:
 801000a:	4770      	bx	lr

0801000c <__retarget_lock_release_recursive>:
 801000c:	4770      	bx	lr

0801000e <memcmp>:
 801000e:	b510      	push	{r4, lr}
 8010010:	3901      	subs	r1, #1
 8010012:	4402      	add	r2, r0
 8010014:	4290      	cmp	r0, r2
 8010016:	d101      	bne.n	801001c <memcmp+0xe>
 8010018:	2000      	movs	r0, #0
 801001a:	e005      	b.n	8010028 <memcmp+0x1a>
 801001c:	7803      	ldrb	r3, [r0, #0]
 801001e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010022:	42a3      	cmp	r3, r4
 8010024:	d001      	beq.n	801002a <memcmp+0x1c>
 8010026:	1b18      	subs	r0, r3, r4
 8010028:	bd10      	pop	{r4, pc}
 801002a:	3001      	adds	r0, #1
 801002c:	e7f2      	b.n	8010014 <memcmp+0x6>

0801002e <memcpy>:
 801002e:	440a      	add	r2, r1
 8010030:	4291      	cmp	r1, r2
 8010032:	f100 33ff 	add.w	r3, r0, #4294967295
 8010036:	d100      	bne.n	801003a <memcpy+0xc>
 8010038:	4770      	bx	lr
 801003a:	b510      	push	{r4, lr}
 801003c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010040:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010044:	4291      	cmp	r1, r2
 8010046:	d1f9      	bne.n	801003c <memcpy+0xe>
 8010048:	bd10      	pop	{r4, pc}

0801004a <memmove>:
 801004a:	4288      	cmp	r0, r1
 801004c:	b510      	push	{r4, lr}
 801004e:	eb01 0402 	add.w	r4, r1, r2
 8010052:	d902      	bls.n	801005a <memmove+0x10>
 8010054:	4284      	cmp	r4, r0
 8010056:	4623      	mov	r3, r4
 8010058:	d807      	bhi.n	801006a <memmove+0x20>
 801005a:	1e43      	subs	r3, r0, #1
 801005c:	42a1      	cmp	r1, r4
 801005e:	d008      	beq.n	8010072 <memmove+0x28>
 8010060:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010064:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010068:	e7f8      	b.n	801005c <memmove+0x12>
 801006a:	4402      	add	r2, r0
 801006c:	4601      	mov	r1, r0
 801006e:	428a      	cmp	r2, r1
 8010070:	d100      	bne.n	8010074 <memmove+0x2a>
 8010072:	bd10      	pop	{r4, pc}
 8010074:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010078:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801007c:	e7f7      	b.n	801006e <memmove+0x24>

0801007e <memset>:
 801007e:	4402      	add	r2, r0
 8010080:	4603      	mov	r3, r0
 8010082:	4293      	cmp	r3, r2
 8010084:	d100      	bne.n	8010088 <memset+0xa>
 8010086:	4770      	bx	lr
 8010088:	f803 1b01 	strb.w	r1, [r3], #1
 801008c:	e7f9      	b.n	8010082 <memset+0x4>
	...

08010090 <sbrk_aligned>:
 8010090:	b570      	push	{r4, r5, r6, lr}
 8010092:	4e0e      	ldr	r6, [pc, #56]	; (80100cc <sbrk_aligned+0x3c>)
 8010094:	460c      	mov	r4, r1
 8010096:	6831      	ldr	r1, [r6, #0]
 8010098:	4605      	mov	r5, r0
 801009a:	b911      	cbnz	r1, 80100a2 <sbrk_aligned+0x12>
 801009c:	f000 fbe2 	bl	8010864 <_sbrk_r>
 80100a0:	6030      	str	r0, [r6, #0]
 80100a2:	4621      	mov	r1, r4
 80100a4:	4628      	mov	r0, r5
 80100a6:	f000 fbdd 	bl	8010864 <_sbrk_r>
 80100aa:	1c43      	adds	r3, r0, #1
 80100ac:	d00a      	beq.n	80100c4 <sbrk_aligned+0x34>
 80100ae:	1cc4      	adds	r4, r0, #3
 80100b0:	f024 0403 	bic.w	r4, r4, #3
 80100b4:	42a0      	cmp	r0, r4
 80100b6:	d007      	beq.n	80100c8 <sbrk_aligned+0x38>
 80100b8:	1a21      	subs	r1, r4, r0
 80100ba:	4628      	mov	r0, r5
 80100bc:	f000 fbd2 	bl	8010864 <_sbrk_r>
 80100c0:	3001      	adds	r0, #1
 80100c2:	d101      	bne.n	80100c8 <sbrk_aligned+0x38>
 80100c4:	f04f 34ff 	mov.w	r4, #4294967295
 80100c8:	4620      	mov	r0, r4
 80100ca:	bd70      	pop	{r4, r5, r6, pc}
 80100cc:	20004d84 	.word	0x20004d84

080100d0 <_malloc_r>:
 80100d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100d4:	1ccd      	adds	r5, r1, #3
 80100d6:	f025 0503 	bic.w	r5, r5, #3
 80100da:	3508      	adds	r5, #8
 80100dc:	2d0c      	cmp	r5, #12
 80100de:	bf38      	it	cc
 80100e0:	250c      	movcc	r5, #12
 80100e2:	2d00      	cmp	r5, #0
 80100e4:	4607      	mov	r7, r0
 80100e6:	db01      	blt.n	80100ec <_malloc_r+0x1c>
 80100e8:	42a9      	cmp	r1, r5
 80100ea:	d905      	bls.n	80100f8 <_malloc_r+0x28>
 80100ec:	230c      	movs	r3, #12
 80100ee:	603b      	str	r3, [r7, #0]
 80100f0:	2600      	movs	r6, #0
 80100f2:	4630      	mov	r0, r6
 80100f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100f8:	4e2e      	ldr	r6, [pc, #184]	; (80101b4 <_malloc_r+0xe4>)
 80100fa:	f000 ff09 	bl	8010f10 <__malloc_lock>
 80100fe:	6833      	ldr	r3, [r6, #0]
 8010100:	461c      	mov	r4, r3
 8010102:	bb34      	cbnz	r4, 8010152 <_malloc_r+0x82>
 8010104:	4629      	mov	r1, r5
 8010106:	4638      	mov	r0, r7
 8010108:	f7ff ffc2 	bl	8010090 <sbrk_aligned>
 801010c:	1c43      	adds	r3, r0, #1
 801010e:	4604      	mov	r4, r0
 8010110:	d14d      	bne.n	80101ae <_malloc_r+0xde>
 8010112:	6834      	ldr	r4, [r6, #0]
 8010114:	4626      	mov	r6, r4
 8010116:	2e00      	cmp	r6, #0
 8010118:	d140      	bne.n	801019c <_malloc_r+0xcc>
 801011a:	6823      	ldr	r3, [r4, #0]
 801011c:	4631      	mov	r1, r6
 801011e:	4638      	mov	r0, r7
 8010120:	eb04 0803 	add.w	r8, r4, r3
 8010124:	f000 fb9e 	bl	8010864 <_sbrk_r>
 8010128:	4580      	cmp	r8, r0
 801012a:	d13a      	bne.n	80101a2 <_malloc_r+0xd2>
 801012c:	6821      	ldr	r1, [r4, #0]
 801012e:	3503      	adds	r5, #3
 8010130:	1a6d      	subs	r5, r5, r1
 8010132:	f025 0503 	bic.w	r5, r5, #3
 8010136:	3508      	adds	r5, #8
 8010138:	2d0c      	cmp	r5, #12
 801013a:	bf38      	it	cc
 801013c:	250c      	movcc	r5, #12
 801013e:	4629      	mov	r1, r5
 8010140:	4638      	mov	r0, r7
 8010142:	f7ff ffa5 	bl	8010090 <sbrk_aligned>
 8010146:	3001      	adds	r0, #1
 8010148:	d02b      	beq.n	80101a2 <_malloc_r+0xd2>
 801014a:	6823      	ldr	r3, [r4, #0]
 801014c:	442b      	add	r3, r5
 801014e:	6023      	str	r3, [r4, #0]
 8010150:	e00e      	b.n	8010170 <_malloc_r+0xa0>
 8010152:	6822      	ldr	r2, [r4, #0]
 8010154:	1b52      	subs	r2, r2, r5
 8010156:	d41e      	bmi.n	8010196 <_malloc_r+0xc6>
 8010158:	2a0b      	cmp	r2, #11
 801015a:	d916      	bls.n	801018a <_malloc_r+0xba>
 801015c:	1961      	adds	r1, r4, r5
 801015e:	42a3      	cmp	r3, r4
 8010160:	6025      	str	r5, [r4, #0]
 8010162:	bf18      	it	ne
 8010164:	6059      	strne	r1, [r3, #4]
 8010166:	6863      	ldr	r3, [r4, #4]
 8010168:	bf08      	it	eq
 801016a:	6031      	streq	r1, [r6, #0]
 801016c:	5162      	str	r2, [r4, r5]
 801016e:	604b      	str	r3, [r1, #4]
 8010170:	4638      	mov	r0, r7
 8010172:	f104 060b 	add.w	r6, r4, #11
 8010176:	f000 fed1 	bl	8010f1c <__malloc_unlock>
 801017a:	f026 0607 	bic.w	r6, r6, #7
 801017e:	1d23      	adds	r3, r4, #4
 8010180:	1af2      	subs	r2, r6, r3
 8010182:	d0b6      	beq.n	80100f2 <_malloc_r+0x22>
 8010184:	1b9b      	subs	r3, r3, r6
 8010186:	50a3      	str	r3, [r4, r2]
 8010188:	e7b3      	b.n	80100f2 <_malloc_r+0x22>
 801018a:	6862      	ldr	r2, [r4, #4]
 801018c:	42a3      	cmp	r3, r4
 801018e:	bf0c      	ite	eq
 8010190:	6032      	streq	r2, [r6, #0]
 8010192:	605a      	strne	r2, [r3, #4]
 8010194:	e7ec      	b.n	8010170 <_malloc_r+0xa0>
 8010196:	4623      	mov	r3, r4
 8010198:	6864      	ldr	r4, [r4, #4]
 801019a:	e7b2      	b.n	8010102 <_malloc_r+0x32>
 801019c:	4634      	mov	r4, r6
 801019e:	6876      	ldr	r6, [r6, #4]
 80101a0:	e7b9      	b.n	8010116 <_malloc_r+0x46>
 80101a2:	230c      	movs	r3, #12
 80101a4:	603b      	str	r3, [r7, #0]
 80101a6:	4638      	mov	r0, r7
 80101a8:	f000 feb8 	bl	8010f1c <__malloc_unlock>
 80101ac:	e7a1      	b.n	80100f2 <_malloc_r+0x22>
 80101ae:	6025      	str	r5, [r4, #0]
 80101b0:	e7de      	b.n	8010170 <_malloc_r+0xa0>
 80101b2:	bf00      	nop
 80101b4:	20004d80 	.word	0x20004d80

080101b8 <__sfputc_r>:
 80101b8:	6893      	ldr	r3, [r2, #8]
 80101ba:	3b01      	subs	r3, #1
 80101bc:	2b00      	cmp	r3, #0
 80101be:	b410      	push	{r4}
 80101c0:	6093      	str	r3, [r2, #8]
 80101c2:	da07      	bge.n	80101d4 <__sfputc_r+0x1c>
 80101c4:	6994      	ldr	r4, [r2, #24]
 80101c6:	42a3      	cmp	r3, r4
 80101c8:	db01      	blt.n	80101ce <__sfputc_r+0x16>
 80101ca:	290a      	cmp	r1, #10
 80101cc:	d102      	bne.n	80101d4 <__sfputc_r+0x1c>
 80101ce:	bc10      	pop	{r4}
 80101d0:	f000 bc60 	b.w	8010a94 <__swbuf_r>
 80101d4:	6813      	ldr	r3, [r2, #0]
 80101d6:	1c58      	adds	r0, r3, #1
 80101d8:	6010      	str	r0, [r2, #0]
 80101da:	7019      	strb	r1, [r3, #0]
 80101dc:	4608      	mov	r0, r1
 80101de:	bc10      	pop	{r4}
 80101e0:	4770      	bx	lr

080101e2 <__sfputs_r>:
 80101e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101e4:	4606      	mov	r6, r0
 80101e6:	460f      	mov	r7, r1
 80101e8:	4614      	mov	r4, r2
 80101ea:	18d5      	adds	r5, r2, r3
 80101ec:	42ac      	cmp	r4, r5
 80101ee:	d101      	bne.n	80101f4 <__sfputs_r+0x12>
 80101f0:	2000      	movs	r0, #0
 80101f2:	e007      	b.n	8010204 <__sfputs_r+0x22>
 80101f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101f8:	463a      	mov	r2, r7
 80101fa:	4630      	mov	r0, r6
 80101fc:	f7ff ffdc 	bl	80101b8 <__sfputc_r>
 8010200:	1c43      	adds	r3, r0, #1
 8010202:	d1f3      	bne.n	80101ec <__sfputs_r+0xa>
 8010204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010208 <_vfiprintf_r>:
 8010208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801020c:	460d      	mov	r5, r1
 801020e:	b09d      	sub	sp, #116	; 0x74
 8010210:	4614      	mov	r4, r2
 8010212:	4698      	mov	r8, r3
 8010214:	4606      	mov	r6, r0
 8010216:	b118      	cbz	r0, 8010220 <_vfiprintf_r+0x18>
 8010218:	6983      	ldr	r3, [r0, #24]
 801021a:	b90b      	cbnz	r3, 8010220 <_vfiprintf_r+0x18>
 801021c:	f7ff fdb2 	bl	800fd84 <__sinit>
 8010220:	4b89      	ldr	r3, [pc, #548]	; (8010448 <_vfiprintf_r+0x240>)
 8010222:	429d      	cmp	r5, r3
 8010224:	d11b      	bne.n	801025e <_vfiprintf_r+0x56>
 8010226:	6875      	ldr	r5, [r6, #4]
 8010228:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801022a:	07d9      	lsls	r1, r3, #31
 801022c:	d405      	bmi.n	801023a <_vfiprintf_r+0x32>
 801022e:	89ab      	ldrh	r3, [r5, #12]
 8010230:	059a      	lsls	r2, r3, #22
 8010232:	d402      	bmi.n	801023a <_vfiprintf_r+0x32>
 8010234:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010236:	f7ff fee8 	bl	801000a <__retarget_lock_acquire_recursive>
 801023a:	89ab      	ldrh	r3, [r5, #12]
 801023c:	071b      	lsls	r3, r3, #28
 801023e:	d501      	bpl.n	8010244 <_vfiprintf_r+0x3c>
 8010240:	692b      	ldr	r3, [r5, #16]
 8010242:	b9eb      	cbnz	r3, 8010280 <_vfiprintf_r+0x78>
 8010244:	4629      	mov	r1, r5
 8010246:	4630      	mov	r0, r6
 8010248:	f000 fc88 	bl	8010b5c <__swsetup_r>
 801024c:	b1c0      	cbz	r0, 8010280 <_vfiprintf_r+0x78>
 801024e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010250:	07dc      	lsls	r4, r3, #31
 8010252:	d50e      	bpl.n	8010272 <_vfiprintf_r+0x6a>
 8010254:	f04f 30ff 	mov.w	r0, #4294967295
 8010258:	b01d      	add	sp, #116	; 0x74
 801025a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801025e:	4b7b      	ldr	r3, [pc, #492]	; (801044c <_vfiprintf_r+0x244>)
 8010260:	429d      	cmp	r5, r3
 8010262:	d101      	bne.n	8010268 <_vfiprintf_r+0x60>
 8010264:	68b5      	ldr	r5, [r6, #8]
 8010266:	e7df      	b.n	8010228 <_vfiprintf_r+0x20>
 8010268:	4b79      	ldr	r3, [pc, #484]	; (8010450 <_vfiprintf_r+0x248>)
 801026a:	429d      	cmp	r5, r3
 801026c:	bf08      	it	eq
 801026e:	68f5      	ldreq	r5, [r6, #12]
 8010270:	e7da      	b.n	8010228 <_vfiprintf_r+0x20>
 8010272:	89ab      	ldrh	r3, [r5, #12]
 8010274:	0598      	lsls	r0, r3, #22
 8010276:	d4ed      	bmi.n	8010254 <_vfiprintf_r+0x4c>
 8010278:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801027a:	f7ff fec7 	bl	801000c <__retarget_lock_release_recursive>
 801027e:	e7e9      	b.n	8010254 <_vfiprintf_r+0x4c>
 8010280:	2300      	movs	r3, #0
 8010282:	9309      	str	r3, [sp, #36]	; 0x24
 8010284:	2320      	movs	r3, #32
 8010286:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801028a:	f8cd 800c 	str.w	r8, [sp, #12]
 801028e:	2330      	movs	r3, #48	; 0x30
 8010290:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010454 <_vfiprintf_r+0x24c>
 8010294:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010298:	f04f 0901 	mov.w	r9, #1
 801029c:	4623      	mov	r3, r4
 801029e:	469a      	mov	sl, r3
 80102a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102a4:	b10a      	cbz	r2, 80102aa <_vfiprintf_r+0xa2>
 80102a6:	2a25      	cmp	r2, #37	; 0x25
 80102a8:	d1f9      	bne.n	801029e <_vfiprintf_r+0x96>
 80102aa:	ebba 0b04 	subs.w	fp, sl, r4
 80102ae:	d00b      	beq.n	80102c8 <_vfiprintf_r+0xc0>
 80102b0:	465b      	mov	r3, fp
 80102b2:	4622      	mov	r2, r4
 80102b4:	4629      	mov	r1, r5
 80102b6:	4630      	mov	r0, r6
 80102b8:	f7ff ff93 	bl	80101e2 <__sfputs_r>
 80102bc:	3001      	adds	r0, #1
 80102be:	f000 80aa 	beq.w	8010416 <_vfiprintf_r+0x20e>
 80102c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80102c4:	445a      	add	r2, fp
 80102c6:	9209      	str	r2, [sp, #36]	; 0x24
 80102c8:	f89a 3000 	ldrb.w	r3, [sl]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	f000 80a2 	beq.w	8010416 <_vfiprintf_r+0x20e>
 80102d2:	2300      	movs	r3, #0
 80102d4:	f04f 32ff 	mov.w	r2, #4294967295
 80102d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80102dc:	f10a 0a01 	add.w	sl, sl, #1
 80102e0:	9304      	str	r3, [sp, #16]
 80102e2:	9307      	str	r3, [sp, #28]
 80102e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80102e8:	931a      	str	r3, [sp, #104]	; 0x68
 80102ea:	4654      	mov	r4, sl
 80102ec:	2205      	movs	r2, #5
 80102ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102f2:	4858      	ldr	r0, [pc, #352]	; (8010454 <_vfiprintf_r+0x24c>)
 80102f4:	f7ef ff4c 	bl	8000190 <memchr>
 80102f8:	9a04      	ldr	r2, [sp, #16]
 80102fa:	b9d8      	cbnz	r0, 8010334 <_vfiprintf_r+0x12c>
 80102fc:	06d1      	lsls	r1, r2, #27
 80102fe:	bf44      	itt	mi
 8010300:	2320      	movmi	r3, #32
 8010302:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010306:	0713      	lsls	r3, r2, #28
 8010308:	bf44      	itt	mi
 801030a:	232b      	movmi	r3, #43	; 0x2b
 801030c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010310:	f89a 3000 	ldrb.w	r3, [sl]
 8010314:	2b2a      	cmp	r3, #42	; 0x2a
 8010316:	d015      	beq.n	8010344 <_vfiprintf_r+0x13c>
 8010318:	9a07      	ldr	r2, [sp, #28]
 801031a:	4654      	mov	r4, sl
 801031c:	2000      	movs	r0, #0
 801031e:	f04f 0c0a 	mov.w	ip, #10
 8010322:	4621      	mov	r1, r4
 8010324:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010328:	3b30      	subs	r3, #48	; 0x30
 801032a:	2b09      	cmp	r3, #9
 801032c:	d94e      	bls.n	80103cc <_vfiprintf_r+0x1c4>
 801032e:	b1b0      	cbz	r0, 801035e <_vfiprintf_r+0x156>
 8010330:	9207      	str	r2, [sp, #28]
 8010332:	e014      	b.n	801035e <_vfiprintf_r+0x156>
 8010334:	eba0 0308 	sub.w	r3, r0, r8
 8010338:	fa09 f303 	lsl.w	r3, r9, r3
 801033c:	4313      	orrs	r3, r2
 801033e:	9304      	str	r3, [sp, #16]
 8010340:	46a2      	mov	sl, r4
 8010342:	e7d2      	b.n	80102ea <_vfiprintf_r+0xe2>
 8010344:	9b03      	ldr	r3, [sp, #12]
 8010346:	1d19      	adds	r1, r3, #4
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	9103      	str	r1, [sp, #12]
 801034c:	2b00      	cmp	r3, #0
 801034e:	bfbb      	ittet	lt
 8010350:	425b      	neglt	r3, r3
 8010352:	f042 0202 	orrlt.w	r2, r2, #2
 8010356:	9307      	strge	r3, [sp, #28]
 8010358:	9307      	strlt	r3, [sp, #28]
 801035a:	bfb8      	it	lt
 801035c:	9204      	strlt	r2, [sp, #16]
 801035e:	7823      	ldrb	r3, [r4, #0]
 8010360:	2b2e      	cmp	r3, #46	; 0x2e
 8010362:	d10c      	bne.n	801037e <_vfiprintf_r+0x176>
 8010364:	7863      	ldrb	r3, [r4, #1]
 8010366:	2b2a      	cmp	r3, #42	; 0x2a
 8010368:	d135      	bne.n	80103d6 <_vfiprintf_r+0x1ce>
 801036a:	9b03      	ldr	r3, [sp, #12]
 801036c:	1d1a      	adds	r2, r3, #4
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	9203      	str	r2, [sp, #12]
 8010372:	2b00      	cmp	r3, #0
 8010374:	bfb8      	it	lt
 8010376:	f04f 33ff 	movlt.w	r3, #4294967295
 801037a:	3402      	adds	r4, #2
 801037c:	9305      	str	r3, [sp, #20]
 801037e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8010458 <_vfiprintf_r+0x250>
 8010382:	7821      	ldrb	r1, [r4, #0]
 8010384:	2203      	movs	r2, #3
 8010386:	4650      	mov	r0, sl
 8010388:	f7ef ff02 	bl	8000190 <memchr>
 801038c:	b140      	cbz	r0, 80103a0 <_vfiprintf_r+0x198>
 801038e:	2340      	movs	r3, #64	; 0x40
 8010390:	eba0 000a 	sub.w	r0, r0, sl
 8010394:	fa03 f000 	lsl.w	r0, r3, r0
 8010398:	9b04      	ldr	r3, [sp, #16]
 801039a:	4303      	orrs	r3, r0
 801039c:	3401      	adds	r4, #1
 801039e:	9304      	str	r3, [sp, #16]
 80103a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103a4:	482d      	ldr	r0, [pc, #180]	; (801045c <_vfiprintf_r+0x254>)
 80103a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80103aa:	2206      	movs	r2, #6
 80103ac:	f7ef fef0 	bl	8000190 <memchr>
 80103b0:	2800      	cmp	r0, #0
 80103b2:	d03f      	beq.n	8010434 <_vfiprintf_r+0x22c>
 80103b4:	4b2a      	ldr	r3, [pc, #168]	; (8010460 <_vfiprintf_r+0x258>)
 80103b6:	bb1b      	cbnz	r3, 8010400 <_vfiprintf_r+0x1f8>
 80103b8:	9b03      	ldr	r3, [sp, #12]
 80103ba:	3307      	adds	r3, #7
 80103bc:	f023 0307 	bic.w	r3, r3, #7
 80103c0:	3308      	adds	r3, #8
 80103c2:	9303      	str	r3, [sp, #12]
 80103c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103c6:	443b      	add	r3, r7
 80103c8:	9309      	str	r3, [sp, #36]	; 0x24
 80103ca:	e767      	b.n	801029c <_vfiprintf_r+0x94>
 80103cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80103d0:	460c      	mov	r4, r1
 80103d2:	2001      	movs	r0, #1
 80103d4:	e7a5      	b.n	8010322 <_vfiprintf_r+0x11a>
 80103d6:	2300      	movs	r3, #0
 80103d8:	3401      	adds	r4, #1
 80103da:	9305      	str	r3, [sp, #20]
 80103dc:	4619      	mov	r1, r3
 80103de:	f04f 0c0a 	mov.w	ip, #10
 80103e2:	4620      	mov	r0, r4
 80103e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80103e8:	3a30      	subs	r2, #48	; 0x30
 80103ea:	2a09      	cmp	r2, #9
 80103ec:	d903      	bls.n	80103f6 <_vfiprintf_r+0x1ee>
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d0c5      	beq.n	801037e <_vfiprintf_r+0x176>
 80103f2:	9105      	str	r1, [sp, #20]
 80103f4:	e7c3      	b.n	801037e <_vfiprintf_r+0x176>
 80103f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80103fa:	4604      	mov	r4, r0
 80103fc:	2301      	movs	r3, #1
 80103fe:	e7f0      	b.n	80103e2 <_vfiprintf_r+0x1da>
 8010400:	ab03      	add	r3, sp, #12
 8010402:	9300      	str	r3, [sp, #0]
 8010404:	462a      	mov	r2, r5
 8010406:	4b17      	ldr	r3, [pc, #92]	; (8010464 <_vfiprintf_r+0x25c>)
 8010408:	a904      	add	r1, sp, #16
 801040a:	4630      	mov	r0, r6
 801040c:	f3af 8000 	nop.w
 8010410:	4607      	mov	r7, r0
 8010412:	1c78      	adds	r0, r7, #1
 8010414:	d1d6      	bne.n	80103c4 <_vfiprintf_r+0x1bc>
 8010416:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010418:	07d9      	lsls	r1, r3, #31
 801041a:	d405      	bmi.n	8010428 <_vfiprintf_r+0x220>
 801041c:	89ab      	ldrh	r3, [r5, #12]
 801041e:	059a      	lsls	r2, r3, #22
 8010420:	d402      	bmi.n	8010428 <_vfiprintf_r+0x220>
 8010422:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010424:	f7ff fdf2 	bl	801000c <__retarget_lock_release_recursive>
 8010428:	89ab      	ldrh	r3, [r5, #12]
 801042a:	065b      	lsls	r3, r3, #25
 801042c:	f53f af12 	bmi.w	8010254 <_vfiprintf_r+0x4c>
 8010430:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010432:	e711      	b.n	8010258 <_vfiprintf_r+0x50>
 8010434:	ab03      	add	r3, sp, #12
 8010436:	9300      	str	r3, [sp, #0]
 8010438:	462a      	mov	r2, r5
 801043a:	4b0a      	ldr	r3, [pc, #40]	; (8010464 <_vfiprintf_r+0x25c>)
 801043c:	a904      	add	r1, sp, #16
 801043e:	4630      	mov	r0, r6
 8010440:	f000 f880 	bl	8010544 <_printf_i>
 8010444:	e7e4      	b.n	8010410 <_vfiprintf_r+0x208>
 8010446:	bf00      	nop
 8010448:	080136f4 	.word	0x080136f4
 801044c:	08013714 	.word	0x08013714
 8010450:	080136d4 	.word	0x080136d4
 8010454:	08013738 	.word	0x08013738
 8010458:	0801373e 	.word	0x0801373e
 801045c:	08013742 	.word	0x08013742
 8010460:	00000000 	.word	0x00000000
 8010464:	080101e3 	.word	0x080101e3

08010468 <_printf_common>:
 8010468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801046c:	4616      	mov	r6, r2
 801046e:	4699      	mov	r9, r3
 8010470:	688a      	ldr	r2, [r1, #8]
 8010472:	690b      	ldr	r3, [r1, #16]
 8010474:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010478:	4293      	cmp	r3, r2
 801047a:	bfb8      	it	lt
 801047c:	4613      	movlt	r3, r2
 801047e:	6033      	str	r3, [r6, #0]
 8010480:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010484:	4607      	mov	r7, r0
 8010486:	460c      	mov	r4, r1
 8010488:	b10a      	cbz	r2, 801048e <_printf_common+0x26>
 801048a:	3301      	adds	r3, #1
 801048c:	6033      	str	r3, [r6, #0]
 801048e:	6823      	ldr	r3, [r4, #0]
 8010490:	0699      	lsls	r1, r3, #26
 8010492:	bf42      	ittt	mi
 8010494:	6833      	ldrmi	r3, [r6, #0]
 8010496:	3302      	addmi	r3, #2
 8010498:	6033      	strmi	r3, [r6, #0]
 801049a:	6825      	ldr	r5, [r4, #0]
 801049c:	f015 0506 	ands.w	r5, r5, #6
 80104a0:	d106      	bne.n	80104b0 <_printf_common+0x48>
 80104a2:	f104 0a19 	add.w	sl, r4, #25
 80104a6:	68e3      	ldr	r3, [r4, #12]
 80104a8:	6832      	ldr	r2, [r6, #0]
 80104aa:	1a9b      	subs	r3, r3, r2
 80104ac:	42ab      	cmp	r3, r5
 80104ae:	dc26      	bgt.n	80104fe <_printf_common+0x96>
 80104b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80104b4:	1e13      	subs	r3, r2, #0
 80104b6:	6822      	ldr	r2, [r4, #0]
 80104b8:	bf18      	it	ne
 80104ba:	2301      	movne	r3, #1
 80104bc:	0692      	lsls	r2, r2, #26
 80104be:	d42b      	bmi.n	8010518 <_printf_common+0xb0>
 80104c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80104c4:	4649      	mov	r1, r9
 80104c6:	4638      	mov	r0, r7
 80104c8:	47c0      	blx	r8
 80104ca:	3001      	adds	r0, #1
 80104cc:	d01e      	beq.n	801050c <_printf_common+0xa4>
 80104ce:	6823      	ldr	r3, [r4, #0]
 80104d0:	68e5      	ldr	r5, [r4, #12]
 80104d2:	6832      	ldr	r2, [r6, #0]
 80104d4:	f003 0306 	and.w	r3, r3, #6
 80104d8:	2b04      	cmp	r3, #4
 80104da:	bf08      	it	eq
 80104dc:	1aad      	subeq	r5, r5, r2
 80104de:	68a3      	ldr	r3, [r4, #8]
 80104e0:	6922      	ldr	r2, [r4, #16]
 80104e2:	bf0c      	ite	eq
 80104e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80104e8:	2500      	movne	r5, #0
 80104ea:	4293      	cmp	r3, r2
 80104ec:	bfc4      	itt	gt
 80104ee:	1a9b      	subgt	r3, r3, r2
 80104f0:	18ed      	addgt	r5, r5, r3
 80104f2:	2600      	movs	r6, #0
 80104f4:	341a      	adds	r4, #26
 80104f6:	42b5      	cmp	r5, r6
 80104f8:	d11a      	bne.n	8010530 <_printf_common+0xc8>
 80104fa:	2000      	movs	r0, #0
 80104fc:	e008      	b.n	8010510 <_printf_common+0xa8>
 80104fe:	2301      	movs	r3, #1
 8010500:	4652      	mov	r2, sl
 8010502:	4649      	mov	r1, r9
 8010504:	4638      	mov	r0, r7
 8010506:	47c0      	blx	r8
 8010508:	3001      	adds	r0, #1
 801050a:	d103      	bne.n	8010514 <_printf_common+0xac>
 801050c:	f04f 30ff 	mov.w	r0, #4294967295
 8010510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010514:	3501      	adds	r5, #1
 8010516:	e7c6      	b.n	80104a6 <_printf_common+0x3e>
 8010518:	18e1      	adds	r1, r4, r3
 801051a:	1c5a      	adds	r2, r3, #1
 801051c:	2030      	movs	r0, #48	; 0x30
 801051e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010522:	4422      	add	r2, r4
 8010524:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010528:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801052c:	3302      	adds	r3, #2
 801052e:	e7c7      	b.n	80104c0 <_printf_common+0x58>
 8010530:	2301      	movs	r3, #1
 8010532:	4622      	mov	r2, r4
 8010534:	4649      	mov	r1, r9
 8010536:	4638      	mov	r0, r7
 8010538:	47c0      	blx	r8
 801053a:	3001      	adds	r0, #1
 801053c:	d0e6      	beq.n	801050c <_printf_common+0xa4>
 801053e:	3601      	adds	r6, #1
 8010540:	e7d9      	b.n	80104f6 <_printf_common+0x8e>
	...

08010544 <_printf_i>:
 8010544:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010548:	7e0f      	ldrb	r7, [r1, #24]
 801054a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801054c:	2f78      	cmp	r7, #120	; 0x78
 801054e:	4691      	mov	r9, r2
 8010550:	4680      	mov	r8, r0
 8010552:	460c      	mov	r4, r1
 8010554:	469a      	mov	sl, r3
 8010556:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801055a:	d807      	bhi.n	801056c <_printf_i+0x28>
 801055c:	2f62      	cmp	r7, #98	; 0x62
 801055e:	d80a      	bhi.n	8010576 <_printf_i+0x32>
 8010560:	2f00      	cmp	r7, #0
 8010562:	f000 80d8 	beq.w	8010716 <_printf_i+0x1d2>
 8010566:	2f58      	cmp	r7, #88	; 0x58
 8010568:	f000 80a3 	beq.w	80106b2 <_printf_i+0x16e>
 801056c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010570:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010574:	e03a      	b.n	80105ec <_printf_i+0xa8>
 8010576:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801057a:	2b15      	cmp	r3, #21
 801057c:	d8f6      	bhi.n	801056c <_printf_i+0x28>
 801057e:	a101      	add	r1, pc, #4	; (adr r1, 8010584 <_printf_i+0x40>)
 8010580:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010584:	080105dd 	.word	0x080105dd
 8010588:	080105f1 	.word	0x080105f1
 801058c:	0801056d 	.word	0x0801056d
 8010590:	0801056d 	.word	0x0801056d
 8010594:	0801056d 	.word	0x0801056d
 8010598:	0801056d 	.word	0x0801056d
 801059c:	080105f1 	.word	0x080105f1
 80105a0:	0801056d 	.word	0x0801056d
 80105a4:	0801056d 	.word	0x0801056d
 80105a8:	0801056d 	.word	0x0801056d
 80105ac:	0801056d 	.word	0x0801056d
 80105b0:	080106fd 	.word	0x080106fd
 80105b4:	08010621 	.word	0x08010621
 80105b8:	080106df 	.word	0x080106df
 80105bc:	0801056d 	.word	0x0801056d
 80105c0:	0801056d 	.word	0x0801056d
 80105c4:	0801071f 	.word	0x0801071f
 80105c8:	0801056d 	.word	0x0801056d
 80105cc:	08010621 	.word	0x08010621
 80105d0:	0801056d 	.word	0x0801056d
 80105d4:	0801056d 	.word	0x0801056d
 80105d8:	080106e7 	.word	0x080106e7
 80105dc:	682b      	ldr	r3, [r5, #0]
 80105de:	1d1a      	adds	r2, r3, #4
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	602a      	str	r2, [r5, #0]
 80105e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80105e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80105ec:	2301      	movs	r3, #1
 80105ee:	e0a3      	b.n	8010738 <_printf_i+0x1f4>
 80105f0:	6820      	ldr	r0, [r4, #0]
 80105f2:	6829      	ldr	r1, [r5, #0]
 80105f4:	0606      	lsls	r6, r0, #24
 80105f6:	f101 0304 	add.w	r3, r1, #4
 80105fa:	d50a      	bpl.n	8010612 <_printf_i+0xce>
 80105fc:	680e      	ldr	r6, [r1, #0]
 80105fe:	602b      	str	r3, [r5, #0]
 8010600:	2e00      	cmp	r6, #0
 8010602:	da03      	bge.n	801060c <_printf_i+0xc8>
 8010604:	232d      	movs	r3, #45	; 0x2d
 8010606:	4276      	negs	r6, r6
 8010608:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801060c:	485e      	ldr	r0, [pc, #376]	; (8010788 <_printf_i+0x244>)
 801060e:	230a      	movs	r3, #10
 8010610:	e019      	b.n	8010646 <_printf_i+0x102>
 8010612:	680e      	ldr	r6, [r1, #0]
 8010614:	602b      	str	r3, [r5, #0]
 8010616:	f010 0f40 	tst.w	r0, #64	; 0x40
 801061a:	bf18      	it	ne
 801061c:	b236      	sxthne	r6, r6
 801061e:	e7ef      	b.n	8010600 <_printf_i+0xbc>
 8010620:	682b      	ldr	r3, [r5, #0]
 8010622:	6820      	ldr	r0, [r4, #0]
 8010624:	1d19      	adds	r1, r3, #4
 8010626:	6029      	str	r1, [r5, #0]
 8010628:	0601      	lsls	r1, r0, #24
 801062a:	d501      	bpl.n	8010630 <_printf_i+0xec>
 801062c:	681e      	ldr	r6, [r3, #0]
 801062e:	e002      	b.n	8010636 <_printf_i+0xf2>
 8010630:	0646      	lsls	r6, r0, #25
 8010632:	d5fb      	bpl.n	801062c <_printf_i+0xe8>
 8010634:	881e      	ldrh	r6, [r3, #0]
 8010636:	4854      	ldr	r0, [pc, #336]	; (8010788 <_printf_i+0x244>)
 8010638:	2f6f      	cmp	r7, #111	; 0x6f
 801063a:	bf0c      	ite	eq
 801063c:	2308      	moveq	r3, #8
 801063e:	230a      	movne	r3, #10
 8010640:	2100      	movs	r1, #0
 8010642:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010646:	6865      	ldr	r5, [r4, #4]
 8010648:	60a5      	str	r5, [r4, #8]
 801064a:	2d00      	cmp	r5, #0
 801064c:	bfa2      	ittt	ge
 801064e:	6821      	ldrge	r1, [r4, #0]
 8010650:	f021 0104 	bicge.w	r1, r1, #4
 8010654:	6021      	strge	r1, [r4, #0]
 8010656:	b90e      	cbnz	r6, 801065c <_printf_i+0x118>
 8010658:	2d00      	cmp	r5, #0
 801065a:	d04d      	beq.n	80106f8 <_printf_i+0x1b4>
 801065c:	4615      	mov	r5, r2
 801065e:	fbb6 f1f3 	udiv	r1, r6, r3
 8010662:	fb03 6711 	mls	r7, r3, r1, r6
 8010666:	5dc7      	ldrb	r7, [r0, r7]
 8010668:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801066c:	4637      	mov	r7, r6
 801066e:	42bb      	cmp	r3, r7
 8010670:	460e      	mov	r6, r1
 8010672:	d9f4      	bls.n	801065e <_printf_i+0x11a>
 8010674:	2b08      	cmp	r3, #8
 8010676:	d10b      	bne.n	8010690 <_printf_i+0x14c>
 8010678:	6823      	ldr	r3, [r4, #0]
 801067a:	07de      	lsls	r6, r3, #31
 801067c:	d508      	bpl.n	8010690 <_printf_i+0x14c>
 801067e:	6923      	ldr	r3, [r4, #16]
 8010680:	6861      	ldr	r1, [r4, #4]
 8010682:	4299      	cmp	r1, r3
 8010684:	bfde      	ittt	le
 8010686:	2330      	movle	r3, #48	; 0x30
 8010688:	f805 3c01 	strble.w	r3, [r5, #-1]
 801068c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010690:	1b52      	subs	r2, r2, r5
 8010692:	6122      	str	r2, [r4, #16]
 8010694:	f8cd a000 	str.w	sl, [sp]
 8010698:	464b      	mov	r3, r9
 801069a:	aa03      	add	r2, sp, #12
 801069c:	4621      	mov	r1, r4
 801069e:	4640      	mov	r0, r8
 80106a0:	f7ff fee2 	bl	8010468 <_printf_common>
 80106a4:	3001      	adds	r0, #1
 80106a6:	d14c      	bne.n	8010742 <_printf_i+0x1fe>
 80106a8:	f04f 30ff 	mov.w	r0, #4294967295
 80106ac:	b004      	add	sp, #16
 80106ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106b2:	4835      	ldr	r0, [pc, #212]	; (8010788 <_printf_i+0x244>)
 80106b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80106b8:	6829      	ldr	r1, [r5, #0]
 80106ba:	6823      	ldr	r3, [r4, #0]
 80106bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80106c0:	6029      	str	r1, [r5, #0]
 80106c2:	061d      	lsls	r5, r3, #24
 80106c4:	d514      	bpl.n	80106f0 <_printf_i+0x1ac>
 80106c6:	07df      	lsls	r7, r3, #31
 80106c8:	bf44      	itt	mi
 80106ca:	f043 0320 	orrmi.w	r3, r3, #32
 80106ce:	6023      	strmi	r3, [r4, #0]
 80106d0:	b91e      	cbnz	r6, 80106da <_printf_i+0x196>
 80106d2:	6823      	ldr	r3, [r4, #0]
 80106d4:	f023 0320 	bic.w	r3, r3, #32
 80106d8:	6023      	str	r3, [r4, #0]
 80106da:	2310      	movs	r3, #16
 80106dc:	e7b0      	b.n	8010640 <_printf_i+0xfc>
 80106de:	6823      	ldr	r3, [r4, #0]
 80106e0:	f043 0320 	orr.w	r3, r3, #32
 80106e4:	6023      	str	r3, [r4, #0]
 80106e6:	2378      	movs	r3, #120	; 0x78
 80106e8:	4828      	ldr	r0, [pc, #160]	; (801078c <_printf_i+0x248>)
 80106ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80106ee:	e7e3      	b.n	80106b8 <_printf_i+0x174>
 80106f0:	0659      	lsls	r1, r3, #25
 80106f2:	bf48      	it	mi
 80106f4:	b2b6      	uxthmi	r6, r6
 80106f6:	e7e6      	b.n	80106c6 <_printf_i+0x182>
 80106f8:	4615      	mov	r5, r2
 80106fa:	e7bb      	b.n	8010674 <_printf_i+0x130>
 80106fc:	682b      	ldr	r3, [r5, #0]
 80106fe:	6826      	ldr	r6, [r4, #0]
 8010700:	6961      	ldr	r1, [r4, #20]
 8010702:	1d18      	adds	r0, r3, #4
 8010704:	6028      	str	r0, [r5, #0]
 8010706:	0635      	lsls	r5, r6, #24
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	d501      	bpl.n	8010710 <_printf_i+0x1cc>
 801070c:	6019      	str	r1, [r3, #0]
 801070e:	e002      	b.n	8010716 <_printf_i+0x1d2>
 8010710:	0670      	lsls	r0, r6, #25
 8010712:	d5fb      	bpl.n	801070c <_printf_i+0x1c8>
 8010714:	8019      	strh	r1, [r3, #0]
 8010716:	2300      	movs	r3, #0
 8010718:	6123      	str	r3, [r4, #16]
 801071a:	4615      	mov	r5, r2
 801071c:	e7ba      	b.n	8010694 <_printf_i+0x150>
 801071e:	682b      	ldr	r3, [r5, #0]
 8010720:	1d1a      	adds	r2, r3, #4
 8010722:	602a      	str	r2, [r5, #0]
 8010724:	681d      	ldr	r5, [r3, #0]
 8010726:	6862      	ldr	r2, [r4, #4]
 8010728:	2100      	movs	r1, #0
 801072a:	4628      	mov	r0, r5
 801072c:	f7ef fd30 	bl	8000190 <memchr>
 8010730:	b108      	cbz	r0, 8010736 <_printf_i+0x1f2>
 8010732:	1b40      	subs	r0, r0, r5
 8010734:	6060      	str	r0, [r4, #4]
 8010736:	6863      	ldr	r3, [r4, #4]
 8010738:	6123      	str	r3, [r4, #16]
 801073a:	2300      	movs	r3, #0
 801073c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010740:	e7a8      	b.n	8010694 <_printf_i+0x150>
 8010742:	6923      	ldr	r3, [r4, #16]
 8010744:	462a      	mov	r2, r5
 8010746:	4649      	mov	r1, r9
 8010748:	4640      	mov	r0, r8
 801074a:	47d0      	blx	sl
 801074c:	3001      	adds	r0, #1
 801074e:	d0ab      	beq.n	80106a8 <_printf_i+0x164>
 8010750:	6823      	ldr	r3, [r4, #0]
 8010752:	079b      	lsls	r3, r3, #30
 8010754:	d413      	bmi.n	801077e <_printf_i+0x23a>
 8010756:	68e0      	ldr	r0, [r4, #12]
 8010758:	9b03      	ldr	r3, [sp, #12]
 801075a:	4298      	cmp	r0, r3
 801075c:	bfb8      	it	lt
 801075e:	4618      	movlt	r0, r3
 8010760:	e7a4      	b.n	80106ac <_printf_i+0x168>
 8010762:	2301      	movs	r3, #1
 8010764:	4632      	mov	r2, r6
 8010766:	4649      	mov	r1, r9
 8010768:	4640      	mov	r0, r8
 801076a:	47d0      	blx	sl
 801076c:	3001      	adds	r0, #1
 801076e:	d09b      	beq.n	80106a8 <_printf_i+0x164>
 8010770:	3501      	adds	r5, #1
 8010772:	68e3      	ldr	r3, [r4, #12]
 8010774:	9903      	ldr	r1, [sp, #12]
 8010776:	1a5b      	subs	r3, r3, r1
 8010778:	42ab      	cmp	r3, r5
 801077a:	dcf2      	bgt.n	8010762 <_printf_i+0x21e>
 801077c:	e7eb      	b.n	8010756 <_printf_i+0x212>
 801077e:	2500      	movs	r5, #0
 8010780:	f104 0619 	add.w	r6, r4, #25
 8010784:	e7f5      	b.n	8010772 <_printf_i+0x22e>
 8010786:	bf00      	nop
 8010788:	08013749 	.word	0x08013749
 801078c:	0801375a 	.word	0x0801375a

08010790 <cleanup_glue>:
 8010790:	b538      	push	{r3, r4, r5, lr}
 8010792:	460c      	mov	r4, r1
 8010794:	6809      	ldr	r1, [r1, #0]
 8010796:	4605      	mov	r5, r0
 8010798:	b109      	cbz	r1, 801079e <cleanup_glue+0xe>
 801079a:	f7ff fff9 	bl	8010790 <cleanup_glue>
 801079e:	4621      	mov	r1, r4
 80107a0:	4628      	mov	r0, r5
 80107a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80107a6:	f000 bbbf 	b.w	8010f28 <_free_r>
	...

080107ac <_reclaim_reent>:
 80107ac:	4b2c      	ldr	r3, [pc, #176]	; (8010860 <_reclaim_reent+0xb4>)
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	4283      	cmp	r3, r0
 80107b2:	b570      	push	{r4, r5, r6, lr}
 80107b4:	4604      	mov	r4, r0
 80107b6:	d051      	beq.n	801085c <_reclaim_reent+0xb0>
 80107b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80107ba:	b143      	cbz	r3, 80107ce <_reclaim_reent+0x22>
 80107bc:	68db      	ldr	r3, [r3, #12]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d14a      	bne.n	8010858 <_reclaim_reent+0xac>
 80107c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80107c4:	6819      	ldr	r1, [r3, #0]
 80107c6:	b111      	cbz	r1, 80107ce <_reclaim_reent+0x22>
 80107c8:	4620      	mov	r0, r4
 80107ca:	f000 fbad 	bl	8010f28 <_free_r>
 80107ce:	6961      	ldr	r1, [r4, #20]
 80107d0:	b111      	cbz	r1, 80107d8 <_reclaim_reent+0x2c>
 80107d2:	4620      	mov	r0, r4
 80107d4:	f000 fba8 	bl	8010f28 <_free_r>
 80107d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80107da:	b111      	cbz	r1, 80107e2 <_reclaim_reent+0x36>
 80107dc:	4620      	mov	r0, r4
 80107de:	f000 fba3 	bl	8010f28 <_free_r>
 80107e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80107e4:	b111      	cbz	r1, 80107ec <_reclaim_reent+0x40>
 80107e6:	4620      	mov	r0, r4
 80107e8:	f000 fb9e 	bl	8010f28 <_free_r>
 80107ec:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80107ee:	b111      	cbz	r1, 80107f6 <_reclaim_reent+0x4a>
 80107f0:	4620      	mov	r0, r4
 80107f2:	f000 fb99 	bl	8010f28 <_free_r>
 80107f6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80107f8:	b111      	cbz	r1, 8010800 <_reclaim_reent+0x54>
 80107fa:	4620      	mov	r0, r4
 80107fc:	f000 fb94 	bl	8010f28 <_free_r>
 8010800:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8010802:	b111      	cbz	r1, 801080a <_reclaim_reent+0x5e>
 8010804:	4620      	mov	r0, r4
 8010806:	f000 fb8f 	bl	8010f28 <_free_r>
 801080a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801080c:	b111      	cbz	r1, 8010814 <_reclaim_reent+0x68>
 801080e:	4620      	mov	r0, r4
 8010810:	f000 fb8a 	bl	8010f28 <_free_r>
 8010814:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010816:	b111      	cbz	r1, 801081e <_reclaim_reent+0x72>
 8010818:	4620      	mov	r0, r4
 801081a:	f000 fb85 	bl	8010f28 <_free_r>
 801081e:	69a3      	ldr	r3, [r4, #24]
 8010820:	b1e3      	cbz	r3, 801085c <_reclaim_reent+0xb0>
 8010822:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010824:	4620      	mov	r0, r4
 8010826:	4798      	blx	r3
 8010828:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801082a:	b1b9      	cbz	r1, 801085c <_reclaim_reent+0xb0>
 801082c:	4620      	mov	r0, r4
 801082e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010832:	f7ff bfad 	b.w	8010790 <cleanup_glue>
 8010836:	5949      	ldr	r1, [r1, r5]
 8010838:	b941      	cbnz	r1, 801084c <_reclaim_reent+0xa0>
 801083a:	3504      	adds	r5, #4
 801083c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801083e:	2d80      	cmp	r5, #128	; 0x80
 8010840:	68d9      	ldr	r1, [r3, #12]
 8010842:	d1f8      	bne.n	8010836 <_reclaim_reent+0x8a>
 8010844:	4620      	mov	r0, r4
 8010846:	f000 fb6f 	bl	8010f28 <_free_r>
 801084a:	e7ba      	b.n	80107c2 <_reclaim_reent+0x16>
 801084c:	680e      	ldr	r6, [r1, #0]
 801084e:	4620      	mov	r0, r4
 8010850:	f000 fb6a 	bl	8010f28 <_free_r>
 8010854:	4631      	mov	r1, r6
 8010856:	e7ef      	b.n	8010838 <_reclaim_reent+0x8c>
 8010858:	2500      	movs	r5, #0
 801085a:	e7ef      	b.n	801083c <_reclaim_reent+0x90>
 801085c:	bd70      	pop	{r4, r5, r6, pc}
 801085e:	bf00      	nop
 8010860:	20000094 	.word	0x20000094

08010864 <_sbrk_r>:
 8010864:	b538      	push	{r3, r4, r5, lr}
 8010866:	4d06      	ldr	r5, [pc, #24]	; (8010880 <_sbrk_r+0x1c>)
 8010868:	2300      	movs	r3, #0
 801086a:	4604      	mov	r4, r0
 801086c:	4608      	mov	r0, r1
 801086e:	602b      	str	r3, [r5, #0]
 8010870:	f7f1 fe06 	bl	8002480 <_sbrk>
 8010874:	1c43      	adds	r3, r0, #1
 8010876:	d102      	bne.n	801087e <_sbrk_r+0x1a>
 8010878:	682b      	ldr	r3, [r5, #0]
 801087a:	b103      	cbz	r3, 801087e <_sbrk_r+0x1a>
 801087c:	6023      	str	r3, [r4, #0]
 801087e:	bd38      	pop	{r3, r4, r5, pc}
 8010880:	20004d88 	.word	0x20004d88

08010884 <sniprintf>:
 8010884:	b40c      	push	{r2, r3}
 8010886:	b530      	push	{r4, r5, lr}
 8010888:	4b17      	ldr	r3, [pc, #92]	; (80108e8 <sniprintf+0x64>)
 801088a:	1e0c      	subs	r4, r1, #0
 801088c:	681d      	ldr	r5, [r3, #0]
 801088e:	b09d      	sub	sp, #116	; 0x74
 8010890:	da08      	bge.n	80108a4 <sniprintf+0x20>
 8010892:	238b      	movs	r3, #139	; 0x8b
 8010894:	602b      	str	r3, [r5, #0]
 8010896:	f04f 30ff 	mov.w	r0, #4294967295
 801089a:	b01d      	add	sp, #116	; 0x74
 801089c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80108a0:	b002      	add	sp, #8
 80108a2:	4770      	bx	lr
 80108a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80108a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80108ac:	bf14      	ite	ne
 80108ae:	f104 33ff 	addne.w	r3, r4, #4294967295
 80108b2:	4623      	moveq	r3, r4
 80108b4:	9304      	str	r3, [sp, #16]
 80108b6:	9307      	str	r3, [sp, #28]
 80108b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80108bc:	9002      	str	r0, [sp, #8]
 80108be:	9006      	str	r0, [sp, #24]
 80108c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80108c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80108c6:	ab21      	add	r3, sp, #132	; 0x84
 80108c8:	a902      	add	r1, sp, #8
 80108ca:	4628      	mov	r0, r5
 80108cc:	9301      	str	r3, [sp, #4]
 80108ce:	f000 fbff 	bl	80110d0 <_svfiprintf_r>
 80108d2:	1c43      	adds	r3, r0, #1
 80108d4:	bfbc      	itt	lt
 80108d6:	238b      	movlt	r3, #139	; 0x8b
 80108d8:	602b      	strlt	r3, [r5, #0]
 80108da:	2c00      	cmp	r4, #0
 80108dc:	d0dd      	beq.n	801089a <sniprintf+0x16>
 80108de:	9b02      	ldr	r3, [sp, #8]
 80108e0:	2200      	movs	r2, #0
 80108e2:	701a      	strb	r2, [r3, #0]
 80108e4:	e7d9      	b.n	801089a <sniprintf+0x16>
 80108e6:	bf00      	nop
 80108e8:	20000094 	.word	0x20000094

080108ec <siprintf>:
 80108ec:	b40e      	push	{r1, r2, r3}
 80108ee:	b500      	push	{lr}
 80108f0:	b09c      	sub	sp, #112	; 0x70
 80108f2:	ab1d      	add	r3, sp, #116	; 0x74
 80108f4:	9002      	str	r0, [sp, #8]
 80108f6:	9006      	str	r0, [sp, #24]
 80108f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80108fc:	4809      	ldr	r0, [pc, #36]	; (8010924 <siprintf+0x38>)
 80108fe:	9107      	str	r1, [sp, #28]
 8010900:	9104      	str	r1, [sp, #16]
 8010902:	4909      	ldr	r1, [pc, #36]	; (8010928 <siprintf+0x3c>)
 8010904:	f853 2b04 	ldr.w	r2, [r3], #4
 8010908:	9105      	str	r1, [sp, #20]
 801090a:	6800      	ldr	r0, [r0, #0]
 801090c:	9301      	str	r3, [sp, #4]
 801090e:	a902      	add	r1, sp, #8
 8010910:	f000 fbde 	bl	80110d0 <_svfiprintf_r>
 8010914:	9b02      	ldr	r3, [sp, #8]
 8010916:	2200      	movs	r2, #0
 8010918:	701a      	strb	r2, [r3, #0]
 801091a:	b01c      	add	sp, #112	; 0x70
 801091c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010920:	b003      	add	sp, #12
 8010922:	4770      	bx	lr
 8010924:	20000094 	.word	0x20000094
 8010928:	ffff0208 	.word	0xffff0208

0801092c <__sread>:
 801092c:	b510      	push	{r4, lr}
 801092e:	460c      	mov	r4, r1
 8010930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010934:	f000 fccc 	bl	80112d0 <_read_r>
 8010938:	2800      	cmp	r0, #0
 801093a:	bfab      	itete	ge
 801093c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801093e:	89a3      	ldrhlt	r3, [r4, #12]
 8010940:	181b      	addge	r3, r3, r0
 8010942:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010946:	bfac      	ite	ge
 8010948:	6563      	strge	r3, [r4, #84]	; 0x54
 801094a:	81a3      	strhlt	r3, [r4, #12]
 801094c:	bd10      	pop	{r4, pc}

0801094e <__swrite>:
 801094e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010952:	461f      	mov	r7, r3
 8010954:	898b      	ldrh	r3, [r1, #12]
 8010956:	05db      	lsls	r3, r3, #23
 8010958:	4605      	mov	r5, r0
 801095a:	460c      	mov	r4, r1
 801095c:	4616      	mov	r6, r2
 801095e:	d505      	bpl.n	801096c <__swrite+0x1e>
 8010960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010964:	2302      	movs	r3, #2
 8010966:	2200      	movs	r2, #0
 8010968:	f000 fa52 	bl	8010e10 <_lseek_r>
 801096c:	89a3      	ldrh	r3, [r4, #12]
 801096e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010972:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010976:	81a3      	strh	r3, [r4, #12]
 8010978:	4632      	mov	r2, r6
 801097a:	463b      	mov	r3, r7
 801097c:	4628      	mov	r0, r5
 801097e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010982:	f000 b8d9 	b.w	8010b38 <_write_r>

08010986 <__sseek>:
 8010986:	b510      	push	{r4, lr}
 8010988:	460c      	mov	r4, r1
 801098a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801098e:	f000 fa3f 	bl	8010e10 <_lseek_r>
 8010992:	1c43      	adds	r3, r0, #1
 8010994:	89a3      	ldrh	r3, [r4, #12]
 8010996:	bf15      	itete	ne
 8010998:	6560      	strne	r0, [r4, #84]	; 0x54
 801099a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801099e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80109a2:	81a3      	strheq	r3, [r4, #12]
 80109a4:	bf18      	it	ne
 80109a6:	81a3      	strhne	r3, [r4, #12]
 80109a8:	bd10      	pop	{r4, pc}

080109aa <__sclose>:
 80109aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109ae:	f000 b961 	b.w	8010c74 <_close_r>

080109b2 <strncmp>:
 80109b2:	b510      	push	{r4, lr}
 80109b4:	4603      	mov	r3, r0
 80109b6:	b172      	cbz	r2, 80109d6 <strncmp+0x24>
 80109b8:	3901      	subs	r1, #1
 80109ba:	1884      	adds	r4, r0, r2
 80109bc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80109c0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80109c4:	4290      	cmp	r0, r2
 80109c6:	d101      	bne.n	80109cc <strncmp+0x1a>
 80109c8:	42a3      	cmp	r3, r4
 80109ca:	d101      	bne.n	80109d0 <strncmp+0x1e>
 80109cc:	1a80      	subs	r0, r0, r2
 80109ce:	bd10      	pop	{r4, pc}
 80109d0:	2800      	cmp	r0, #0
 80109d2:	d1f3      	bne.n	80109bc <strncmp+0xa>
 80109d4:	e7fa      	b.n	80109cc <strncmp+0x1a>
 80109d6:	4610      	mov	r0, r2
 80109d8:	e7f9      	b.n	80109ce <strncmp+0x1c>
	...

080109dc <strtok>:
 80109dc:	4b16      	ldr	r3, [pc, #88]	; (8010a38 <strtok+0x5c>)
 80109de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109e2:	681f      	ldr	r7, [r3, #0]
 80109e4:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80109e6:	4605      	mov	r5, r0
 80109e8:	460e      	mov	r6, r1
 80109ea:	b9ec      	cbnz	r4, 8010a28 <strtok+0x4c>
 80109ec:	2050      	movs	r0, #80	; 0x50
 80109ee:	f000 fa87 	bl	8010f00 <malloc>
 80109f2:	4602      	mov	r2, r0
 80109f4:	65b8      	str	r0, [r7, #88]	; 0x58
 80109f6:	b920      	cbnz	r0, 8010a02 <strtok+0x26>
 80109f8:	4b10      	ldr	r3, [pc, #64]	; (8010a3c <strtok+0x60>)
 80109fa:	4811      	ldr	r0, [pc, #68]	; (8010a40 <strtok+0x64>)
 80109fc:	2157      	movs	r1, #87	; 0x57
 80109fe:	f000 f91b 	bl	8010c38 <__assert_func>
 8010a02:	e9c0 4400 	strd	r4, r4, [r0]
 8010a06:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8010a0a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8010a0e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8010a12:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8010a16:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8010a1a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8010a1e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8010a22:	6184      	str	r4, [r0, #24]
 8010a24:	7704      	strb	r4, [r0, #28]
 8010a26:	6244      	str	r4, [r0, #36]	; 0x24
 8010a28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010a2a:	4631      	mov	r1, r6
 8010a2c:	4628      	mov	r0, r5
 8010a2e:	2301      	movs	r3, #1
 8010a30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010a34:	f000 b806 	b.w	8010a44 <__strtok_r>
 8010a38:	20000094 	.word	0x20000094
 8010a3c:	0801376b 	.word	0x0801376b
 8010a40:	08013782 	.word	0x08013782

08010a44 <__strtok_r>:
 8010a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a46:	b908      	cbnz	r0, 8010a4c <__strtok_r+0x8>
 8010a48:	6810      	ldr	r0, [r2, #0]
 8010a4a:	b188      	cbz	r0, 8010a70 <__strtok_r+0x2c>
 8010a4c:	4604      	mov	r4, r0
 8010a4e:	4620      	mov	r0, r4
 8010a50:	f814 5b01 	ldrb.w	r5, [r4], #1
 8010a54:	460f      	mov	r7, r1
 8010a56:	f817 6b01 	ldrb.w	r6, [r7], #1
 8010a5a:	b91e      	cbnz	r6, 8010a64 <__strtok_r+0x20>
 8010a5c:	b965      	cbnz	r5, 8010a78 <__strtok_r+0x34>
 8010a5e:	6015      	str	r5, [r2, #0]
 8010a60:	4628      	mov	r0, r5
 8010a62:	e005      	b.n	8010a70 <__strtok_r+0x2c>
 8010a64:	42b5      	cmp	r5, r6
 8010a66:	d1f6      	bne.n	8010a56 <__strtok_r+0x12>
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d1f0      	bne.n	8010a4e <__strtok_r+0xa>
 8010a6c:	6014      	str	r4, [r2, #0]
 8010a6e:	7003      	strb	r3, [r0, #0]
 8010a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a72:	461c      	mov	r4, r3
 8010a74:	e00c      	b.n	8010a90 <__strtok_r+0x4c>
 8010a76:	b915      	cbnz	r5, 8010a7e <__strtok_r+0x3a>
 8010a78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010a7c:	460e      	mov	r6, r1
 8010a7e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8010a82:	42ab      	cmp	r3, r5
 8010a84:	d1f7      	bne.n	8010a76 <__strtok_r+0x32>
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d0f3      	beq.n	8010a72 <__strtok_r+0x2e>
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8010a90:	6014      	str	r4, [r2, #0]
 8010a92:	e7ed      	b.n	8010a70 <__strtok_r+0x2c>

08010a94 <__swbuf_r>:
 8010a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a96:	460e      	mov	r6, r1
 8010a98:	4614      	mov	r4, r2
 8010a9a:	4605      	mov	r5, r0
 8010a9c:	b118      	cbz	r0, 8010aa6 <__swbuf_r+0x12>
 8010a9e:	6983      	ldr	r3, [r0, #24]
 8010aa0:	b90b      	cbnz	r3, 8010aa6 <__swbuf_r+0x12>
 8010aa2:	f7ff f96f 	bl	800fd84 <__sinit>
 8010aa6:	4b21      	ldr	r3, [pc, #132]	; (8010b2c <__swbuf_r+0x98>)
 8010aa8:	429c      	cmp	r4, r3
 8010aaa:	d12b      	bne.n	8010b04 <__swbuf_r+0x70>
 8010aac:	686c      	ldr	r4, [r5, #4]
 8010aae:	69a3      	ldr	r3, [r4, #24]
 8010ab0:	60a3      	str	r3, [r4, #8]
 8010ab2:	89a3      	ldrh	r3, [r4, #12]
 8010ab4:	071a      	lsls	r2, r3, #28
 8010ab6:	d52f      	bpl.n	8010b18 <__swbuf_r+0x84>
 8010ab8:	6923      	ldr	r3, [r4, #16]
 8010aba:	b36b      	cbz	r3, 8010b18 <__swbuf_r+0x84>
 8010abc:	6923      	ldr	r3, [r4, #16]
 8010abe:	6820      	ldr	r0, [r4, #0]
 8010ac0:	1ac0      	subs	r0, r0, r3
 8010ac2:	6963      	ldr	r3, [r4, #20]
 8010ac4:	b2f6      	uxtb	r6, r6
 8010ac6:	4283      	cmp	r3, r0
 8010ac8:	4637      	mov	r7, r6
 8010aca:	dc04      	bgt.n	8010ad6 <__swbuf_r+0x42>
 8010acc:	4621      	mov	r1, r4
 8010ace:	4628      	mov	r0, r5
 8010ad0:	f000 f962 	bl	8010d98 <_fflush_r>
 8010ad4:	bb30      	cbnz	r0, 8010b24 <__swbuf_r+0x90>
 8010ad6:	68a3      	ldr	r3, [r4, #8]
 8010ad8:	3b01      	subs	r3, #1
 8010ada:	60a3      	str	r3, [r4, #8]
 8010adc:	6823      	ldr	r3, [r4, #0]
 8010ade:	1c5a      	adds	r2, r3, #1
 8010ae0:	6022      	str	r2, [r4, #0]
 8010ae2:	701e      	strb	r6, [r3, #0]
 8010ae4:	6963      	ldr	r3, [r4, #20]
 8010ae6:	3001      	adds	r0, #1
 8010ae8:	4283      	cmp	r3, r0
 8010aea:	d004      	beq.n	8010af6 <__swbuf_r+0x62>
 8010aec:	89a3      	ldrh	r3, [r4, #12]
 8010aee:	07db      	lsls	r3, r3, #31
 8010af0:	d506      	bpl.n	8010b00 <__swbuf_r+0x6c>
 8010af2:	2e0a      	cmp	r6, #10
 8010af4:	d104      	bne.n	8010b00 <__swbuf_r+0x6c>
 8010af6:	4621      	mov	r1, r4
 8010af8:	4628      	mov	r0, r5
 8010afa:	f000 f94d 	bl	8010d98 <_fflush_r>
 8010afe:	b988      	cbnz	r0, 8010b24 <__swbuf_r+0x90>
 8010b00:	4638      	mov	r0, r7
 8010b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b04:	4b0a      	ldr	r3, [pc, #40]	; (8010b30 <__swbuf_r+0x9c>)
 8010b06:	429c      	cmp	r4, r3
 8010b08:	d101      	bne.n	8010b0e <__swbuf_r+0x7a>
 8010b0a:	68ac      	ldr	r4, [r5, #8]
 8010b0c:	e7cf      	b.n	8010aae <__swbuf_r+0x1a>
 8010b0e:	4b09      	ldr	r3, [pc, #36]	; (8010b34 <__swbuf_r+0xa0>)
 8010b10:	429c      	cmp	r4, r3
 8010b12:	bf08      	it	eq
 8010b14:	68ec      	ldreq	r4, [r5, #12]
 8010b16:	e7ca      	b.n	8010aae <__swbuf_r+0x1a>
 8010b18:	4621      	mov	r1, r4
 8010b1a:	4628      	mov	r0, r5
 8010b1c:	f000 f81e 	bl	8010b5c <__swsetup_r>
 8010b20:	2800      	cmp	r0, #0
 8010b22:	d0cb      	beq.n	8010abc <__swbuf_r+0x28>
 8010b24:	f04f 37ff 	mov.w	r7, #4294967295
 8010b28:	e7ea      	b.n	8010b00 <__swbuf_r+0x6c>
 8010b2a:	bf00      	nop
 8010b2c:	080136f4 	.word	0x080136f4
 8010b30:	08013714 	.word	0x08013714
 8010b34:	080136d4 	.word	0x080136d4

08010b38 <_write_r>:
 8010b38:	b538      	push	{r3, r4, r5, lr}
 8010b3a:	4d07      	ldr	r5, [pc, #28]	; (8010b58 <_write_r+0x20>)
 8010b3c:	4604      	mov	r4, r0
 8010b3e:	4608      	mov	r0, r1
 8010b40:	4611      	mov	r1, r2
 8010b42:	2200      	movs	r2, #0
 8010b44:	602a      	str	r2, [r5, #0]
 8010b46:	461a      	mov	r2, r3
 8010b48:	f7f1 fc4e 	bl	80023e8 <_write>
 8010b4c:	1c43      	adds	r3, r0, #1
 8010b4e:	d102      	bne.n	8010b56 <_write_r+0x1e>
 8010b50:	682b      	ldr	r3, [r5, #0]
 8010b52:	b103      	cbz	r3, 8010b56 <_write_r+0x1e>
 8010b54:	6023      	str	r3, [r4, #0]
 8010b56:	bd38      	pop	{r3, r4, r5, pc}
 8010b58:	20004d88 	.word	0x20004d88

08010b5c <__swsetup_r>:
 8010b5c:	4b32      	ldr	r3, [pc, #200]	; (8010c28 <__swsetup_r+0xcc>)
 8010b5e:	b570      	push	{r4, r5, r6, lr}
 8010b60:	681d      	ldr	r5, [r3, #0]
 8010b62:	4606      	mov	r6, r0
 8010b64:	460c      	mov	r4, r1
 8010b66:	b125      	cbz	r5, 8010b72 <__swsetup_r+0x16>
 8010b68:	69ab      	ldr	r3, [r5, #24]
 8010b6a:	b913      	cbnz	r3, 8010b72 <__swsetup_r+0x16>
 8010b6c:	4628      	mov	r0, r5
 8010b6e:	f7ff f909 	bl	800fd84 <__sinit>
 8010b72:	4b2e      	ldr	r3, [pc, #184]	; (8010c2c <__swsetup_r+0xd0>)
 8010b74:	429c      	cmp	r4, r3
 8010b76:	d10f      	bne.n	8010b98 <__swsetup_r+0x3c>
 8010b78:	686c      	ldr	r4, [r5, #4]
 8010b7a:	89a3      	ldrh	r3, [r4, #12]
 8010b7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010b80:	0719      	lsls	r1, r3, #28
 8010b82:	d42c      	bmi.n	8010bde <__swsetup_r+0x82>
 8010b84:	06dd      	lsls	r5, r3, #27
 8010b86:	d411      	bmi.n	8010bac <__swsetup_r+0x50>
 8010b88:	2309      	movs	r3, #9
 8010b8a:	6033      	str	r3, [r6, #0]
 8010b8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010b90:	81a3      	strh	r3, [r4, #12]
 8010b92:	f04f 30ff 	mov.w	r0, #4294967295
 8010b96:	e03e      	b.n	8010c16 <__swsetup_r+0xba>
 8010b98:	4b25      	ldr	r3, [pc, #148]	; (8010c30 <__swsetup_r+0xd4>)
 8010b9a:	429c      	cmp	r4, r3
 8010b9c:	d101      	bne.n	8010ba2 <__swsetup_r+0x46>
 8010b9e:	68ac      	ldr	r4, [r5, #8]
 8010ba0:	e7eb      	b.n	8010b7a <__swsetup_r+0x1e>
 8010ba2:	4b24      	ldr	r3, [pc, #144]	; (8010c34 <__swsetup_r+0xd8>)
 8010ba4:	429c      	cmp	r4, r3
 8010ba6:	bf08      	it	eq
 8010ba8:	68ec      	ldreq	r4, [r5, #12]
 8010baa:	e7e6      	b.n	8010b7a <__swsetup_r+0x1e>
 8010bac:	0758      	lsls	r0, r3, #29
 8010bae:	d512      	bpl.n	8010bd6 <__swsetup_r+0x7a>
 8010bb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010bb2:	b141      	cbz	r1, 8010bc6 <__swsetup_r+0x6a>
 8010bb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010bb8:	4299      	cmp	r1, r3
 8010bba:	d002      	beq.n	8010bc2 <__swsetup_r+0x66>
 8010bbc:	4630      	mov	r0, r6
 8010bbe:	f000 f9b3 	bl	8010f28 <_free_r>
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	6363      	str	r3, [r4, #52]	; 0x34
 8010bc6:	89a3      	ldrh	r3, [r4, #12]
 8010bc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010bcc:	81a3      	strh	r3, [r4, #12]
 8010bce:	2300      	movs	r3, #0
 8010bd0:	6063      	str	r3, [r4, #4]
 8010bd2:	6923      	ldr	r3, [r4, #16]
 8010bd4:	6023      	str	r3, [r4, #0]
 8010bd6:	89a3      	ldrh	r3, [r4, #12]
 8010bd8:	f043 0308 	orr.w	r3, r3, #8
 8010bdc:	81a3      	strh	r3, [r4, #12]
 8010bde:	6923      	ldr	r3, [r4, #16]
 8010be0:	b94b      	cbnz	r3, 8010bf6 <__swsetup_r+0x9a>
 8010be2:	89a3      	ldrh	r3, [r4, #12]
 8010be4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010bec:	d003      	beq.n	8010bf6 <__swsetup_r+0x9a>
 8010bee:	4621      	mov	r1, r4
 8010bf0:	4630      	mov	r0, r6
 8010bf2:	f000 f945 	bl	8010e80 <__smakebuf_r>
 8010bf6:	89a0      	ldrh	r0, [r4, #12]
 8010bf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010bfc:	f010 0301 	ands.w	r3, r0, #1
 8010c00:	d00a      	beq.n	8010c18 <__swsetup_r+0xbc>
 8010c02:	2300      	movs	r3, #0
 8010c04:	60a3      	str	r3, [r4, #8]
 8010c06:	6963      	ldr	r3, [r4, #20]
 8010c08:	425b      	negs	r3, r3
 8010c0a:	61a3      	str	r3, [r4, #24]
 8010c0c:	6923      	ldr	r3, [r4, #16]
 8010c0e:	b943      	cbnz	r3, 8010c22 <__swsetup_r+0xc6>
 8010c10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010c14:	d1ba      	bne.n	8010b8c <__swsetup_r+0x30>
 8010c16:	bd70      	pop	{r4, r5, r6, pc}
 8010c18:	0781      	lsls	r1, r0, #30
 8010c1a:	bf58      	it	pl
 8010c1c:	6963      	ldrpl	r3, [r4, #20]
 8010c1e:	60a3      	str	r3, [r4, #8]
 8010c20:	e7f4      	b.n	8010c0c <__swsetup_r+0xb0>
 8010c22:	2000      	movs	r0, #0
 8010c24:	e7f7      	b.n	8010c16 <__swsetup_r+0xba>
 8010c26:	bf00      	nop
 8010c28:	20000094 	.word	0x20000094
 8010c2c:	080136f4 	.word	0x080136f4
 8010c30:	08013714 	.word	0x08013714
 8010c34:	080136d4 	.word	0x080136d4

08010c38 <__assert_func>:
 8010c38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010c3a:	4614      	mov	r4, r2
 8010c3c:	461a      	mov	r2, r3
 8010c3e:	4b09      	ldr	r3, [pc, #36]	; (8010c64 <__assert_func+0x2c>)
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	4605      	mov	r5, r0
 8010c44:	68d8      	ldr	r0, [r3, #12]
 8010c46:	b14c      	cbz	r4, 8010c5c <__assert_func+0x24>
 8010c48:	4b07      	ldr	r3, [pc, #28]	; (8010c68 <__assert_func+0x30>)
 8010c4a:	9100      	str	r1, [sp, #0]
 8010c4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010c50:	4906      	ldr	r1, [pc, #24]	; (8010c6c <__assert_func+0x34>)
 8010c52:	462b      	mov	r3, r5
 8010c54:	f7ff f914 	bl	800fe80 <fiprintf>
 8010c58:	f000 fb4c 	bl	80112f4 <abort>
 8010c5c:	4b04      	ldr	r3, [pc, #16]	; (8010c70 <__assert_func+0x38>)
 8010c5e:	461c      	mov	r4, r3
 8010c60:	e7f3      	b.n	8010c4a <__assert_func+0x12>
 8010c62:	bf00      	nop
 8010c64:	20000094 	.word	0x20000094
 8010c68:	080137df 	.word	0x080137df
 8010c6c:	080137ec 	.word	0x080137ec
 8010c70:	0801381a 	.word	0x0801381a

08010c74 <_close_r>:
 8010c74:	b538      	push	{r3, r4, r5, lr}
 8010c76:	4d06      	ldr	r5, [pc, #24]	; (8010c90 <_close_r+0x1c>)
 8010c78:	2300      	movs	r3, #0
 8010c7a:	4604      	mov	r4, r0
 8010c7c:	4608      	mov	r0, r1
 8010c7e:	602b      	str	r3, [r5, #0]
 8010c80:	f7f1 fbce 	bl	8002420 <_close>
 8010c84:	1c43      	adds	r3, r0, #1
 8010c86:	d102      	bne.n	8010c8e <_close_r+0x1a>
 8010c88:	682b      	ldr	r3, [r5, #0]
 8010c8a:	b103      	cbz	r3, 8010c8e <_close_r+0x1a>
 8010c8c:	6023      	str	r3, [r4, #0]
 8010c8e:	bd38      	pop	{r3, r4, r5, pc}
 8010c90:	20004d88 	.word	0x20004d88

08010c94 <__sflush_r>:
 8010c94:	898a      	ldrh	r2, [r1, #12]
 8010c96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c98:	4605      	mov	r5, r0
 8010c9a:	0710      	lsls	r0, r2, #28
 8010c9c:	460c      	mov	r4, r1
 8010c9e:	d457      	bmi.n	8010d50 <__sflush_r+0xbc>
 8010ca0:	684b      	ldr	r3, [r1, #4]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	dc04      	bgt.n	8010cb0 <__sflush_r+0x1c>
 8010ca6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	dc01      	bgt.n	8010cb0 <__sflush_r+0x1c>
 8010cac:	2000      	movs	r0, #0
 8010cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010cb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010cb2:	2e00      	cmp	r6, #0
 8010cb4:	d0fa      	beq.n	8010cac <__sflush_r+0x18>
 8010cb6:	2300      	movs	r3, #0
 8010cb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010cbc:	682f      	ldr	r7, [r5, #0]
 8010cbe:	602b      	str	r3, [r5, #0]
 8010cc0:	d032      	beq.n	8010d28 <__sflush_r+0x94>
 8010cc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010cc4:	89a3      	ldrh	r3, [r4, #12]
 8010cc6:	075a      	lsls	r2, r3, #29
 8010cc8:	d505      	bpl.n	8010cd6 <__sflush_r+0x42>
 8010cca:	6863      	ldr	r3, [r4, #4]
 8010ccc:	1ac0      	subs	r0, r0, r3
 8010cce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010cd0:	b10b      	cbz	r3, 8010cd6 <__sflush_r+0x42>
 8010cd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010cd4:	1ac0      	subs	r0, r0, r3
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	4602      	mov	r2, r0
 8010cda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010cdc:	6a21      	ldr	r1, [r4, #32]
 8010cde:	4628      	mov	r0, r5
 8010ce0:	47b0      	blx	r6
 8010ce2:	1c43      	adds	r3, r0, #1
 8010ce4:	89a3      	ldrh	r3, [r4, #12]
 8010ce6:	d106      	bne.n	8010cf6 <__sflush_r+0x62>
 8010ce8:	6829      	ldr	r1, [r5, #0]
 8010cea:	291d      	cmp	r1, #29
 8010cec:	d82c      	bhi.n	8010d48 <__sflush_r+0xb4>
 8010cee:	4a29      	ldr	r2, [pc, #164]	; (8010d94 <__sflush_r+0x100>)
 8010cf0:	40ca      	lsrs	r2, r1
 8010cf2:	07d6      	lsls	r6, r2, #31
 8010cf4:	d528      	bpl.n	8010d48 <__sflush_r+0xb4>
 8010cf6:	2200      	movs	r2, #0
 8010cf8:	6062      	str	r2, [r4, #4]
 8010cfa:	04d9      	lsls	r1, r3, #19
 8010cfc:	6922      	ldr	r2, [r4, #16]
 8010cfe:	6022      	str	r2, [r4, #0]
 8010d00:	d504      	bpl.n	8010d0c <__sflush_r+0x78>
 8010d02:	1c42      	adds	r2, r0, #1
 8010d04:	d101      	bne.n	8010d0a <__sflush_r+0x76>
 8010d06:	682b      	ldr	r3, [r5, #0]
 8010d08:	b903      	cbnz	r3, 8010d0c <__sflush_r+0x78>
 8010d0a:	6560      	str	r0, [r4, #84]	; 0x54
 8010d0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010d0e:	602f      	str	r7, [r5, #0]
 8010d10:	2900      	cmp	r1, #0
 8010d12:	d0cb      	beq.n	8010cac <__sflush_r+0x18>
 8010d14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010d18:	4299      	cmp	r1, r3
 8010d1a:	d002      	beq.n	8010d22 <__sflush_r+0x8e>
 8010d1c:	4628      	mov	r0, r5
 8010d1e:	f000 f903 	bl	8010f28 <_free_r>
 8010d22:	2000      	movs	r0, #0
 8010d24:	6360      	str	r0, [r4, #52]	; 0x34
 8010d26:	e7c2      	b.n	8010cae <__sflush_r+0x1a>
 8010d28:	6a21      	ldr	r1, [r4, #32]
 8010d2a:	2301      	movs	r3, #1
 8010d2c:	4628      	mov	r0, r5
 8010d2e:	47b0      	blx	r6
 8010d30:	1c41      	adds	r1, r0, #1
 8010d32:	d1c7      	bne.n	8010cc4 <__sflush_r+0x30>
 8010d34:	682b      	ldr	r3, [r5, #0]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d0c4      	beq.n	8010cc4 <__sflush_r+0x30>
 8010d3a:	2b1d      	cmp	r3, #29
 8010d3c:	d001      	beq.n	8010d42 <__sflush_r+0xae>
 8010d3e:	2b16      	cmp	r3, #22
 8010d40:	d101      	bne.n	8010d46 <__sflush_r+0xb2>
 8010d42:	602f      	str	r7, [r5, #0]
 8010d44:	e7b2      	b.n	8010cac <__sflush_r+0x18>
 8010d46:	89a3      	ldrh	r3, [r4, #12]
 8010d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d4c:	81a3      	strh	r3, [r4, #12]
 8010d4e:	e7ae      	b.n	8010cae <__sflush_r+0x1a>
 8010d50:	690f      	ldr	r7, [r1, #16]
 8010d52:	2f00      	cmp	r7, #0
 8010d54:	d0aa      	beq.n	8010cac <__sflush_r+0x18>
 8010d56:	0793      	lsls	r3, r2, #30
 8010d58:	680e      	ldr	r6, [r1, #0]
 8010d5a:	bf08      	it	eq
 8010d5c:	694b      	ldreq	r3, [r1, #20]
 8010d5e:	600f      	str	r7, [r1, #0]
 8010d60:	bf18      	it	ne
 8010d62:	2300      	movne	r3, #0
 8010d64:	1bf6      	subs	r6, r6, r7
 8010d66:	608b      	str	r3, [r1, #8]
 8010d68:	2e00      	cmp	r6, #0
 8010d6a:	dd9f      	ble.n	8010cac <__sflush_r+0x18>
 8010d6c:	6a21      	ldr	r1, [r4, #32]
 8010d6e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8010d72:	4633      	mov	r3, r6
 8010d74:	463a      	mov	r2, r7
 8010d76:	4628      	mov	r0, r5
 8010d78:	47e0      	blx	ip
 8010d7a:	2800      	cmp	r0, #0
 8010d7c:	dc06      	bgt.n	8010d8c <__sflush_r+0xf8>
 8010d7e:	89a3      	ldrh	r3, [r4, #12]
 8010d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d84:	81a3      	strh	r3, [r4, #12]
 8010d86:	f04f 30ff 	mov.w	r0, #4294967295
 8010d8a:	e790      	b.n	8010cae <__sflush_r+0x1a>
 8010d8c:	4407      	add	r7, r0
 8010d8e:	1a36      	subs	r6, r6, r0
 8010d90:	e7ea      	b.n	8010d68 <__sflush_r+0xd4>
 8010d92:	bf00      	nop
 8010d94:	20400001 	.word	0x20400001

08010d98 <_fflush_r>:
 8010d98:	b538      	push	{r3, r4, r5, lr}
 8010d9a:	690b      	ldr	r3, [r1, #16]
 8010d9c:	4605      	mov	r5, r0
 8010d9e:	460c      	mov	r4, r1
 8010da0:	b913      	cbnz	r3, 8010da8 <_fflush_r+0x10>
 8010da2:	2500      	movs	r5, #0
 8010da4:	4628      	mov	r0, r5
 8010da6:	bd38      	pop	{r3, r4, r5, pc}
 8010da8:	b118      	cbz	r0, 8010db2 <_fflush_r+0x1a>
 8010daa:	6983      	ldr	r3, [r0, #24]
 8010dac:	b90b      	cbnz	r3, 8010db2 <_fflush_r+0x1a>
 8010dae:	f7fe ffe9 	bl	800fd84 <__sinit>
 8010db2:	4b14      	ldr	r3, [pc, #80]	; (8010e04 <_fflush_r+0x6c>)
 8010db4:	429c      	cmp	r4, r3
 8010db6:	d11b      	bne.n	8010df0 <_fflush_r+0x58>
 8010db8:	686c      	ldr	r4, [r5, #4]
 8010dba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d0ef      	beq.n	8010da2 <_fflush_r+0xa>
 8010dc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010dc4:	07d0      	lsls	r0, r2, #31
 8010dc6:	d404      	bmi.n	8010dd2 <_fflush_r+0x3a>
 8010dc8:	0599      	lsls	r1, r3, #22
 8010dca:	d402      	bmi.n	8010dd2 <_fflush_r+0x3a>
 8010dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010dce:	f7ff f91c 	bl	801000a <__retarget_lock_acquire_recursive>
 8010dd2:	4628      	mov	r0, r5
 8010dd4:	4621      	mov	r1, r4
 8010dd6:	f7ff ff5d 	bl	8010c94 <__sflush_r>
 8010dda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010ddc:	07da      	lsls	r2, r3, #31
 8010dde:	4605      	mov	r5, r0
 8010de0:	d4e0      	bmi.n	8010da4 <_fflush_r+0xc>
 8010de2:	89a3      	ldrh	r3, [r4, #12]
 8010de4:	059b      	lsls	r3, r3, #22
 8010de6:	d4dd      	bmi.n	8010da4 <_fflush_r+0xc>
 8010de8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010dea:	f7ff f90f 	bl	801000c <__retarget_lock_release_recursive>
 8010dee:	e7d9      	b.n	8010da4 <_fflush_r+0xc>
 8010df0:	4b05      	ldr	r3, [pc, #20]	; (8010e08 <_fflush_r+0x70>)
 8010df2:	429c      	cmp	r4, r3
 8010df4:	d101      	bne.n	8010dfa <_fflush_r+0x62>
 8010df6:	68ac      	ldr	r4, [r5, #8]
 8010df8:	e7df      	b.n	8010dba <_fflush_r+0x22>
 8010dfa:	4b04      	ldr	r3, [pc, #16]	; (8010e0c <_fflush_r+0x74>)
 8010dfc:	429c      	cmp	r4, r3
 8010dfe:	bf08      	it	eq
 8010e00:	68ec      	ldreq	r4, [r5, #12]
 8010e02:	e7da      	b.n	8010dba <_fflush_r+0x22>
 8010e04:	080136f4 	.word	0x080136f4
 8010e08:	08013714 	.word	0x08013714
 8010e0c:	080136d4 	.word	0x080136d4

08010e10 <_lseek_r>:
 8010e10:	b538      	push	{r3, r4, r5, lr}
 8010e12:	4d07      	ldr	r5, [pc, #28]	; (8010e30 <_lseek_r+0x20>)
 8010e14:	4604      	mov	r4, r0
 8010e16:	4608      	mov	r0, r1
 8010e18:	4611      	mov	r1, r2
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	602a      	str	r2, [r5, #0]
 8010e1e:	461a      	mov	r2, r3
 8010e20:	f7f1 fb22 	bl	8002468 <_lseek>
 8010e24:	1c43      	adds	r3, r0, #1
 8010e26:	d102      	bne.n	8010e2e <_lseek_r+0x1e>
 8010e28:	682b      	ldr	r3, [r5, #0]
 8010e2a:	b103      	cbz	r3, 8010e2e <_lseek_r+0x1e>
 8010e2c:	6023      	str	r3, [r4, #0]
 8010e2e:	bd38      	pop	{r3, r4, r5, pc}
 8010e30:	20004d88 	.word	0x20004d88

08010e34 <__swhatbuf_r>:
 8010e34:	b570      	push	{r4, r5, r6, lr}
 8010e36:	460e      	mov	r6, r1
 8010e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e3c:	2900      	cmp	r1, #0
 8010e3e:	b096      	sub	sp, #88	; 0x58
 8010e40:	4614      	mov	r4, r2
 8010e42:	461d      	mov	r5, r3
 8010e44:	da08      	bge.n	8010e58 <__swhatbuf_r+0x24>
 8010e46:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	602a      	str	r2, [r5, #0]
 8010e4e:	061a      	lsls	r2, r3, #24
 8010e50:	d410      	bmi.n	8010e74 <__swhatbuf_r+0x40>
 8010e52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010e56:	e00e      	b.n	8010e76 <__swhatbuf_r+0x42>
 8010e58:	466a      	mov	r2, sp
 8010e5a:	f000 fa53 	bl	8011304 <_fstat_r>
 8010e5e:	2800      	cmp	r0, #0
 8010e60:	dbf1      	blt.n	8010e46 <__swhatbuf_r+0x12>
 8010e62:	9a01      	ldr	r2, [sp, #4]
 8010e64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010e68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010e6c:	425a      	negs	r2, r3
 8010e6e:	415a      	adcs	r2, r3
 8010e70:	602a      	str	r2, [r5, #0]
 8010e72:	e7ee      	b.n	8010e52 <__swhatbuf_r+0x1e>
 8010e74:	2340      	movs	r3, #64	; 0x40
 8010e76:	2000      	movs	r0, #0
 8010e78:	6023      	str	r3, [r4, #0]
 8010e7a:	b016      	add	sp, #88	; 0x58
 8010e7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08010e80 <__smakebuf_r>:
 8010e80:	898b      	ldrh	r3, [r1, #12]
 8010e82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010e84:	079d      	lsls	r5, r3, #30
 8010e86:	4606      	mov	r6, r0
 8010e88:	460c      	mov	r4, r1
 8010e8a:	d507      	bpl.n	8010e9c <__smakebuf_r+0x1c>
 8010e8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010e90:	6023      	str	r3, [r4, #0]
 8010e92:	6123      	str	r3, [r4, #16]
 8010e94:	2301      	movs	r3, #1
 8010e96:	6163      	str	r3, [r4, #20]
 8010e98:	b002      	add	sp, #8
 8010e9a:	bd70      	pop	{r4, r5, r6, pc}
 8010e9c:	ab01      	add	r3, sp, #4
 8010e9e:	466a      	mov	r2, sp
 8010ea0:	f7ff ffc8 	bl	8010e34 <__swhatbuf_r>
 8010ea4:	9900      	ldr	r1, [sp, #0]
 8010ea6:	4605      	mov	r5, r0
 8010ea8:	4630      	mov	r0, r6
 8010eaa:	f7ff f911 	bl	80100d0 <_malloc_r>
 8010eae:	b948      	cbnz	r0, 8010ec4 <__smakebuf_r+0x44>
 8010eb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010eb4:	059a      	lsls	r2, r3, #22
 8010eb6:	d4ef      	bmi.n	8010e98 <__smakebuf_r+0x18>
 8010eb8:	f023 0303 	bic.w	r3, r3, #3
 8010ebc:	f043 0302 	orr.w	r3, r3, #2
 8010ec0:	81a3      	strh	r3, [r4, #12]
 8010ec2:	e7e3      	b.n	8010e8c <__smakebuf_r+0xc>
 8010ec4:	4b0d      	ldr	r3, [pc, #52]	; (8010efc <__smakebuf_r+0x7c>)
 8010ec6:	62b3      	str	r3, [r6, #40]	; 0x28
 8010ec8:	89a3      	ldrh	r3, [r4, #12]
 8010eca:	6020      	str	r0, [r4, #0]
 8010ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ed0:	81a3      	strh	r3, [r4, #12]
 8010ed2:	9b00      	ldr	r3, [sp, #0]
 8010ed4:	6163      	str	r3, [r4, #20]
 8010ed6:	9b01      	ldr	r3, [sp, #4]
 8010ed8:	6120      	str	r0, [r4, #16]
 8010eda:	b15b      	cbz	r3, 8010ef4 <__smakebuf_r+0x74>
 8010edc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010ee0:	4630      	mov	r0, r6
 8010ee2:	f000 fa21 	bl	8011328 <_isatty_r>
 8010ee6:	b128      	cbz	r0, 8010ef4 <__smakebuf_r+0x74>
 8010ee8:	89a3      	ldrh	r3, [r4, #12]
 8010eea:	f023 0303 	bic.w	r3, r3, #3
 8010eee:	f043 0301 	orr.w	r3, r3, #1
 8010ef2:	81a3      	strh	r3, [r4, #12]
 8010ef4:	89a0      	ldrh	r0, [r4, #12]
 8010ef6:	4305      	orrs	r5, r0
 8010ef8:	81a5      	strh	r5, [r4, #12]
 8010efa:	e7cd      	b.n	8010e98 <__smakebuf_r+0x18>
 8010efc:	0800fd1d 	.word	0x0800fd1d

08010f00 <malloc>:
 8010f00:	4b02      	ldr	r3, [pc, #8]	; (8010f0c <malloc+0xc>)
 8010f02:	4601      	mov	r1, r0
 8010f04:	6818      	ldr	r0, [r3, #0]
 8010f06:	f7ff b8e3 	b.w	80100d0 <_malloc_r>
 8010f0a:	bf00      	nop
 8010f0c:	20000094 	.word	0x20000094

08010f10 <__malloc_lock>:
 8010f10:	4801      	ldr	r0, [pc, #4]	; (8010f18 <__malloc_lock+0x8>)
 8010f12:	f7ff b87a 	b.w	801000a <__retarget_lock_acquire_recursive>
 8010f16:	bf00      	nop
 8010f18:	20004d7c 	.word	0x20004d7c

08010f1c <__malloc_unlock>:
 8010f1c:	4801      	ldr	r0, [pc, #4]	; (8010f24 <__malloc_unlock+0x8>)
 8010f1e:	f7ff b875 	b.w	801000c <__retarget_lock_release_recursive>
 8010f22:	bf00      	nop
 8010f24:	20004d7c 	.word	0x20004d7c

08010f28 <_free_r>:
 8010f28:	b538      	push	{r3, r4, r5, lr}
 8010f2a:	4605      	mov	r5, r0
 8010f2c:	2900      	cmp	r1, #0
 8010f2e:	d041      	beq.n	8010fb4 <_free_r+0x8c>
 8010f30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010f34:	1f0c      	subs	r4, r1, #4
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	bfb8      	it	lt
 8010f3a:	18e4      	addlt	r4, r4, r3
 8010f3c:	f7ff ffe8 	bl	8010f10 <__malloc_lock>
 8010f40:	4a1d      	ldr	r2, [pc, #116]	; (8010fb8 <_free_r+0x90>)
 8010f42:	6813      	ldr	r3, [r2, #0]
 8010f44:	b933      	cbnz	r3, 8010f54 <_free_r+0x2c>
 8010f46:	6063      	str	r3, [r4, #4]
 8010f48:	6014      	str	r4, [r2, #0]
 8010f4a:	4628      	mov	r0, r5
 8010f4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f50:	f7ff bfe4 	b.w	8010f1c <__malloc_unlock>
 8010f54:	42a3      	cmp	r3, r4
 8010f56:	d908      	bls.n	8010f6a <_free_r+0x42>
 8010f58:	6820      	ldr	r0, [r4, #0]
 8010f5a:	1821      	adds	r1, r4, r0
 8010f5c:	428b      	cmp	r3, r1
 8010f5e:	bf01      	itttt	eq
 8010f60:	6819      	ldreq	r1, [r3, #0]
 8010f62:	685b      	ldreq	r3, [r3, #4]
 8010f64:	1809      	addeq	r1, r1, r0
 8010f66:	6021      	streq	r1, [r4, #0]
 8010f68:	e7ed      	b.n	8010f46 <_free_r+0x1e>
 8010f6a:	461a      	mov	r2, r3
 8010f6c:	685b      	ldr	r3, [r3, #4]
 8010f6e:	b10b      	cbz	r3, 8010f74 <_free_r+0x4c>
 8010f70:	42a3      	cmp	r3, r4
 8010f72:	d9fa      	bls.n	8010f6a <_free_r+0x42>
 8010f74:	6811      	ldr	r1, [r2, #0]
 8010f76:	1850      	adds	r0, r2, r1
 8010f78:	42a0      	cmp	r0, r4
 8010f7a:	d10b      	bne.n	8010f94 <_free_r+0x6c>
 8010f7c:	6820      	ldr	r0, [r4, #0]
 8010f7e:	4401      	add	r1, r0
 8010f80:	1850      	adds	r0, r2, r1
 8010f82:	4283      	cmp	r3, r0
 8010f84:	6011      	str	r1, [r2, #0]
 8010f86:	d1e0      	bne.n	8010f4a <_free_r+0x22>
 8010f88:	6818      	ldr	r0, [r3, #0]
 8010f8a:	685b      	ldr	r3, [r3, #4]
 8010f8c:	6053      	str	r3, [r2, #4]
 8010f8e:	4401      	add	r1, r0
 8010f90:	6011      	str	r1, [r2, #0]
 8010f92:	e7da      	b.n	8010f4a <_free_r+0x22>
 8010f94:	d902      	bls.n	8010f9c <_free_r+0x74>
 8010f96:	230c      	movs	r3, #12
 8010f98:	602b      	str	r3, [r5, #0]
 8010f9a:	e7d6      	b.n	8010f4a <_free_r+0x22>
 8010f9c:	6820      	ldr	r0, [r4, #0]
 8010f9e:	1821      	adds	r1, r4, r0
 8010fa0:	428b      	cmp	r3, r1
 8010fa2:	bf04      	itt	eq
 8010fa4:	6819      	ldreq	r1, [r3, #0]
 8010fa6:	685b      	ldreq	r3, [r3, #4]
 8010fa8:	6063      	str	r3, [r4, #4]
 8010faa:	bf04      	itt	eq
 8010fac:	1809      	addeq	r1, r1, r0
 8010fae:	6021      	streq	r1, [r4, #0]
 8010fb0:	6054      	str	r4, [r2, #4]
 8010fb2:	e7ca      	b.n	8010f4a <_free_r+0x22>
 8010fb4:	bd38      	pop	{r3, r4, r5, pc}
 8010fb6:	bf00      	nop
 8010fb8:	20004d80 	.word	0x20004d80

08010fbc <_realloc_r>:
 8010fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fc0:	4680      	mov	r8, r0
 8010fc2:	4614      	mov	r4, r2
 8010fc4:	460e      	mov	r6, r1
 8010fc6:	b921      	cbnz	r1, 8010fd2 <_realloc_r+0x16>
 8010fc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010fcc:	4611      	mov	r1, r2
 8010fce:	f7ff b87f 	b.w	80100d0 <_malloc_r>
 8010fd2:	b92a      	cbnz	r2, 8010fe0 <_realloc_r+0x24>
 8010fd4:	f7ff ffa8 	bl	8010f28 <_free_r>
 8010fd8:	4625      	mov	r5, r4
 8010fda:	4628      	mov	r0, r5
 8010fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fe0:	f000 f9b2 	bl	8011348 <_malloc_usable_size_r>
 8010fe4:	4284      	cmp	r4, r0
 8010fe6:	4607      	mov	r7, r0
 8010fe8:	d802      	bhi.n	8010ff0 <_realloc_r+0x34>
 8010fea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010fee:	d812      	bhi.n	8011016 <_realloc_r+0x5a>
 8010ff0:	4621      	mov	r1, r4
 8010ff2:	4640      	mov	r0, r8
 8010ff4:	f7ff f86c 	bl	80100d0 <_malloc_r>
 8010ff8:	4605      	mov	r5, r0
 8010ffa:	2800      	cmp	r0, #0
 8010ffc:	d0ed      	beq.n	8010fda <_realloc_r+0x1e>
 8010ffe:	42bc      	cmp	r4, r7
 8011000:	4622      	mov	r2, r4
 8011002:	4631      	mov	r1, r6
 8011004:	bf28      	it	cs
 8011006:	463a      	movcs	r2, r7
 8011008:	f7ff f811 	bl	801002e <memcpy>
 801100c:	4631      	mov	r1, r6
 801100e:	4640      	mov	r0, r8
 8011010:	f7ff ff8a 	bl	8010f28 <_free_r>
 8011014:	e7e1      	b.n	8010fda <_realloc_r+0x1e>
 8011016:	4635      	mov	r5, r6
 8011018:	e7df      	b.n	8010fda <_realloc_r+0x1e>

0801101a <__ssputs_r>:
 801101a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801101e:	688e      	ldr	r6, [r1, #8]
 8011020:	429e      	cmp	r6, r3
 8011022:	4682      	mov	sl, r0
 8011024:	460c      	mov	r4, r1
 8011026:	4690      	mov	r8, r2
 8011028:	461f      	mov	r7, r3
 801102a:	d838      	bhi.n	801109e <__ssputs_r+0x84>
 801102c:	898a      	ldrh	r2, [r1, #12]
 801102e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011032:	d032      	beq.n	801109a <__ssputs_r+0x80>
 8011034:	6825      	ldr	r5, [r4, #0]
 8011036:	6909      	ldr	r1, [r1, #16]
 8011038:	eba5 0901 	sub.w	r9, r5, r1
 801103c:	6965      	ldr	r5, [r4, #20]
 801103e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011042:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011046:	3301      	adds	r3, #1
 8011048:	444b      	add	r3, r9
 801104a:	106d      	asrs	r5, r5, #1
 801104c:	429d      	cmp	r5, r3
 801104e:	bf38      	it	cc
 8011050:	461d      	movcc	r5, r3
 8011052:	0553      	lsls	r3, r2, #21
 8011054:	d531      	bpl.n	80110ba <__ssputs_r+0xa0>
 8011056:	4629      	mov	r1, r5
 8011058:	f7ff f83a 	bl	80100d0 <_malloc_r>
 801105c:	4606      	mov	r6, r0
 801105e:	b950      	cbnz	r0, 8011076 <__ssputs_r+0x5c>
 8011060:	230c      	movs	r3, #12
 8011062:	f8ca 3000 	str.w	r3, [sl]
 8011066:	89a3      	ldrh	r3, [r4, #12]
 8011068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801106c:	81a3      	strh	r3, [r4, #12]
 801106e:	f04f 30ff 	mov.w	r0, #4294967295
 8011072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011076:	6921      	ldr	r1, [r4, #16]
 8011078:	464a      	mov	r2, r9
 801107a:	f7fe ffd8 	bl	801002e <memcpy>
 801107e:	89a3      	ldrh	r3, [r4, #12]
 8011080:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011088:	81a3      	strh	r3, [r4, #12]
 801108a:	6126      	str	r6, [r4, #16]
 801108c:	6165      	str	r5, [r4, #20]
 801108e:	444e      	add	r6, r9
 8011090:	eba5 0509 	sub.w	r5, r5, r9
 8011094:	6026      	str	r6, [r4, #0]
 8011096:	60a5      	str	r5, [r4, #8]
 8011098:	463e      	mov	r6, r7
 801109a:	42be      	cmp	r6, r7
 801109c:	d900      	bls.n	80110a0 <__ssputs_r+0x86>
 801109e:	463e      	mov	r6, r7
 80110a0:	6820      	ldr	r0, [r4, #0]
 80110a2:	4632      	mov	r2, r6
 80110a4:	4641      	mov	r1, r8
 80110a6:	f7fe ffd0 	bl	801004a <memmove>
 80110aa:	68a3      	ldr	r3, [r4, #8]
 80110ac:	1b9b      	subs	r3, r3, r6
 80110ae:	60a3      	str	r3, [r4, #8]
 80110b0:	6823      	ldr	r3, [r4, #0]
 80110b2:	4433      	add	r3, r6
 80110b4:	6023      	str	r3, [r4, #0]
 80110b6:	2000      	movs	r0, #0
 80110b8:	e7db      	b.n	8011072 <__ssputs_r+0x58>
 80110ba:	462a      	mov	r2, r5
 80110bc:	f7ff ff7e 	bl	8010fbc <_realloc_r>
 80110c0:	4606      	mov	r6, r0
 80110c2:	2800      	cmp	r0, #0
 80110c4:	d1e1      	bne.n	801108a <__ssputs_r+0x70>
 80110c6:	6921      	ldr	r1, [r4, #16]
 80110c8:	4650      	mov	r0, sl
 80110ca:	f7ff ff2d 	bl	8010f28 <_free_r>
 80110ce:	e7c7      	b.n	8011060 <__ssputs_r+0x46>

080110d0 <_svfiprintf_r>:
 80110d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110d4:	4698      	mov	r8, r3
 80110d6:	898b      	ldrh	r3, [r1, #12]
 80110d8:	061b      	lsls	r3, r3, #24
 80110da:	b09d      	sub	sp, #116	; 0x74
 80110dc:	4607      	mov	r7, r0
 80110de:	460d      	mov	r5, r1
 80110e0:	4614      	mov	r4, r2
 80110e2:	d50e      	bpl.n	8011102 <_svfiprintf_r+0x32>
 80110e4:	690b      	ldr	r3, [r1, #16]
 80110e6:	b963      	cbnz	r3, 8011102 <_svfiprintf_r+0x32>
 80110e8:	2140      	movs	r1, #64	; 0x40
 80110ea:	f7fe fff1 	bl	80100d0 <_malloc_r>
 80110ee:	6028      	str	r0, [r5, #0]
 80110f0:	6128      	str	r0, [r5, #16]
 80110f2:	b920      	cbnz	r0, 80110fe <_svfiprintf_r+0x2e>
 80110f4:	230c      	movs	r3, #12
 80110f6:	603b      	str	r3, [r7, #0]
 80110f8:	f04f 30ff 	mov.w	r0, #4294967295
 80110fc:	e0d1      	b.n	80112a2 <_svfiprintf_r+0x1d2>
 80110fe:	2340      	movs	r3, #64	; 0x40
 8011100:	616b      	str	r3, [r5, #20]
 8011102:	2300      	movs	r3, #0
 8011104:	9309      	str	r3, [sp, #36]	; 0x24
 8011106:	2320      	movs	r3, #32
 8011108:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801110c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011110:	2330      	movs	r3, #48	; 0x30
 8011112:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80112bc <_svfiprintf_r+0x1ec>
 8011116:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801111a:	f04f 0901 	mov.w	r9, #1
 801111e:	4623      	mov	r3, r4
 8011120:	469a      	mov	sl, r3
 8011122:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011126:	b10a      	cbz	r2, 801112c <_svfiprintf_r+0x5c>
 8011128:	2a25      	cmp	r2, #37	; 0x25
 801112a:	d1f9      	bne.n	8011120 <_svfiprintf_r+0x50>
 801112c:	ebba 0b04 	subs.w	fp, sl, r4
 8011130:	d00b      	beq.n	801114a <_svfiprintf_r+0x7a>
 8011132:	465b      	mov	r3, fp
 8011134:	4622      	mov	r2, r4
 8011136:	4629      	mov	r1, r5
 8011138:	4638      	mov	r0, r7
 801113a:	f7ff ff6e 	bl	801101a <__ssputs_r>
 801113e:	3001      	adds	r0, #1
 8011140:	f000 80aa 	beq.w	8011298 <_svfiprintf_r+0x1c8>
 8011144:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011146:	445a      	add	r2, fp
 8011148:	9209      	str	r2, [sp, #36]	; 0x24
 801114a:	f89a 3000 	ldrb.w	r3, [sl]
 801114e:	2b00      	cmp	r3, #0
 8011150:	f000 80a2 	beq.w	8011298 <_svfiprintf_r+0x1c8>
 8011154:	2300      	movs	r3, #0
 8011156:	f04f 32ff 	mov.w	r2, #4294967295
 801115a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801115e:	f10a 0a01 	add.w	sl, sl, #1
 8011162:	9304      	str	r3, [sp, #16]
 8011164:	9307      	str	r3, [sp, #28]
 8011166:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801116a:	931a      	str	r3, [sp, #104]	; 0x68
 801116c:	4654      	mov	r4, sl
 801116e:	2205      	movs	r2, #5
 8011170:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011174:	4851      	ldr	r0, [pc, #324]	; (80112bc <_svfiprintf_r+0x1ec>)
 8011176:	f7ef f80b 	bl	8000190 <memchr>
 801117a:	9a04      	ldr	r2, [sp, #16]
 801117c:	b9d8      	cbnz	r0, 80111b6 <_svfiprintf_r+0xe6>
 801117e:	06d0      	lsls	r0, r2, #27
 8011180:	bf44      	itt	mi
 8011182:	2320      	movmi	r3, #32
 8011184:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011188:	0711      	lsls	r1, r2, #28
 801118a:	bf44      	itt	mi
 801118c:	232b      	movmi	r3, #43	; 0x2b
 801118e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011192:	f89a 3000 	ldrb.w	r3, [sl]
 8011196:	2b2a      	cmp	r3, #42	; 0x2a
 8011198:	d015      	beq.n	80111c6 <_svfiprintf_r+0xf6>
 801119a:	9a07      	ldr	r2, [sp, #28]
 801119c:	4654      	mov	r4, sl
 801119e:	2000      	movs	r0, #0
 80111a0:	f04f 0c0a 	mov.w	ip, #10
 80111a4:	4621      	mov	r1, r4
 80111a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80111aa:	3b30      	subs	r3, #48	; 0x30
 80111ac:	2b09      	cmp	r3, #9
 80111ae:	d94e      	bls.n	801124e <_svfiprintf_r+0x17e>
 80111b0:	b1b0      	cbz	r0, 80111e0 <_svfiprintf_r+0x110>
 80111b2:	9207      	str	r2, [sp, #28]
 80111b4:	e014      	b.n	80111e0 <_svfiprintf_r+0x110>
 80111b6:	eba0 0308 	sub.w	r3, r0, r8
 80111ba:	fa09 f303 	lsl.w	r3, r9, r3
 80111be:	4313      	orrs	r3, r2
 80111c0:	9304      	str	r3, [sp, #16]
 80111c2:	46a2      	mov	sl, r4
 80111c4:	e7d2      	b.n	801116c <_svfiprintf_r+0x9c>
 80111c6:	9b03      	ldr	r3, [sp, #12]
 80111c8:	1d19      	adds	r1, r3, #4
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	9103      	str	r1, [sp, #12]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	bfbb      	ittet	lt
 80111d2:	425b      	neglt	r3, r3
 80111d4:	f042 0202 	orrlt.w	r2, r2, #2
 80111d8:	9307      	strge	r3, [sp, #28]
 80111da:	9307      	strlt	r3, [sp, #28]
 80111dc:	bfb8      	it	lt
 80111de:	9204      	strlt	r2, [sp, #16]
 80111e0:	7823      	ldrb	r3, [r4, #0]
 80111e2:	2b2e      	cmp	r3, #46	; 0x2e
 80111e4:	d10c      	bne.n	8011200 <_svfiprintf_r+0x130>
 80111e6:	7863      	ldrb	r3, [r4, #1]
 80111e8:	2b2a      	cmp	r3, #42	; 0x2a
 80111ea:	d135      	bne.n	8011258 <_svfiprintf_r+0x188>
 80111ec:	9b03      	ldr	r3, [sp, #12]
 80111ee:	1d1a      	adds	r2, r3, #4
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	9203      	str	r2, [sp, #12]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	bfb8      	it	lt
 80111f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80111fc:	3402      	adds	r4, #2
 80111fe:	9305      	str	r3, [sp, #20]
 8011200:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80112c0 <_svfiprintf_r+0x1f0>
 8011204:	7821      	ldrb	r1, [r4, #0]
 8011206:	2203      	movs	r2, #3
 8011208:	4650      	mov	r0, sl
 801120a:	f7ee ffc1 	bl	8000190 <memchr>
 801120e:	b140      	cbz	r0, 8011222 <_svfiprintf_r+0x152>
 8011210:	2340      	movs	r3, #64	; 0x40
 8011212:	eba0 000a 	sub.w	r0, r0, sl
 8011216:	fa03 f000 	lsl.w	r0, r3, r0
 801121a:	9b04      	ldr	r3, [sp, #16]
 801121c:	4303      	orrs	r3, r0
 801121e:	3401      	adds	r4, #1
 8011220:	9304      	str	r3, [sp, #16]
 8011222:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011226:	4827      	ldr	r0, [pc, #156]	; (80112c4 <_svfiprintf_r+0x1f4>)
 8011228:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801122c:	2206      	movs	r2, #6
 801122e:	f7ee ffaf 	bl	8000190 <memchr>
 8011232:	2800      	cmp	r0, #0
 8011234:	d038      	beq.n	80112a8 <_svfiprintf_r+0x1d8>
 8011236:	4b24      	ldr	r3, [pc, #144]	; (80112c8 <_svfiprintf_r+0x1f8>)
 8011238:	bb1b      	cbnz	r3, 8011282 <_svfiprintf_r+0x1b2>
 801123a:	9b03      	ldr	r3, [sp, #12]
 801123c:	3307      	adds	r3, #7
 801123e:	f023 0307 	bic.w	r3, r3, #7
 8011242:	3308      	adds	r3, #8
 8011244:	9303      	str	r3, [sp, #12]
 8011246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011248:	4433      	add	r3, r6
 801124a:	9309      	str	r3, [sp, #36]	; 0x24
 801124c:	e767      	b.n	801111e <_svfiprintf_r+0x4e>
 801124e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011252:	460c      	mov	r4, r1
 8011254:	2001      	movs	r0, #1
 8011256:	e7a5      	b.n	80111a4 <_svfiprintf_r+0xd4>
 8011258:	2300      	movs	r3, #0
 801125a:	3401      	adds	r4, #1
 801125c:	9305      	str	r3, [sp, #20]
 801125e:	4619      	mov	r1, r3
 8011260:	f04f 0c0a 	mov.w	ip, #10
 8011264:	4620      	mov	r0, r4
 8011266:	f810 2b01 	ldrb.w	r2, [r0], #1
 801126a:	3a30      	subs	r2, #48	; 0x30
 801126c:	2a09      	cmp	r2, #9
 801126e:	d903      	bls.n	8011278 <_svfiprintf_r+0x1a8>
 8011270:	2b00      	cmp	r3, #0
 8011272:	d0c5      	beq.n	8011200 <_svfiprintf_r+0x130>
 8011274:	9105      	str	r1, [sp, #20]
 8011276:	e7c3      	b.n	8011200 <_svfiprintf_r+0x130>
 8011278:	fb0c 2101 	mla	r1, ip, r1, r2
 801127c:	4604      	mov	r4, r0
 801127e:	2301      	movs	r3, #1
 8011280:	e7f0      	b.n	8011264 <_svfiprintf_r+0x194>
 8011282:	ab03      	add	r3, sp, #12
 8011284:	9300      	str	r3, [sp, #0]
 8011286:	462a      	mov	r2, r5
 8011288:	4b10      	ldr	r3, [pc, #64]	; (80112cc <_svfiprintf_r+0x1fc>)
 801128a:	a904      	add	r1, sp, #16
 801128c:	4638      	mov	r0, r7
 801128e:	f3af 8000 	nop.w
 8011292:	1c42      	adds	r2, r0, #1
 8011294:	4606      	mov	r6, r0
 8011296:	d1d6      	bne.n	8011246 <_svfiprintf_r+0x176>
 8011298:	89ab      	ldrh	r3, [r5, #12]
 801129a:	065b      	lsls	r3, r3, #25
 801129c:	f53f af2c 	bmi.w	80110f8 <_svfiprintf_r+0x28>
 80112a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80112a2:	b01d      	add	sp, #116	; 0x74
 80112a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112a8:	ab03      	add	r3, sp, #12
 80112aa:	9300      	str	r3, [sp, #0]
 80112ac:	462a      	mov	r2, r5
 80112ae:	4b07      	ldr	r3, [pc, #28]	; (80112cc <_svfiprintf_r+0x1fc>)
 80112b0:	a904      	add	r1, sp, #16
 80112b2:	4638      	mov	r0, r7
 80112b4:	f7ff f946 	bl	8010544 <_printf_i>
 80112b8:	e7eb      	b.n	8011292 <_svfiprintf_r+0x1c2>
 80112ba:	bf00      	nop
 80112bc:	08013738 	.word	0x08013738
 80112c0:	0801373e 	.word	0x0801373e
 80112c4:	08013742 	.word	0x08013742
 80112c8:	00000000 	.word	0x00000000
 80112cc:	0801101b 	.word	0x0801101b

080112d0 <_read_r>:
 80112d0:	b538      	push	{r3, r4, r5, lr}
 80112d2:	4d07      	ldr	r5, [pc, #28]	; (80112f0 <_read_r+0x20>)
 80112d4:	4604      	mov	r4, r0
 80112d6:	4608      	mov	r0, r1
 80112d8:	4611      	mov	r1, r2
 80112da:	2200      	movs	r2, #0
 80112dc:	602a      	str	r2, [r5, #0]
 80112de:	461a      	mov	r2, r3
 80112e0:	f7f1 f865 	bl	80023ae <_read>
 80112e4:	1c43      	adds	r3, r0, #1
 80112e6:	d102      	bne.n	80112ee <_read_r+0x1e>
 80112e8:	682b      	ldr	r3, [r5, #0]
 80112ea:	b103      	cbz	r3, 80112ee <_read_r+0x1e>
 80112ec:	6023      	str	r3, [r4, #0]
 80112ee:	bd38      	pop	{r3, r4, r5, pc}
 80112f0:	20004d88 	.word	0x20004d88

080112f4 <abort>:
 80112f4:	b508      	push	{r3, lr}
 80112f6:	2006      	movs	r0, #6
 80112f8:	f000 f856 	bl	80113a8 <raise>
 80112fc:	2001      	movs	r0, #1
 80112fe:	f7f1 f84c 	bl	800239a <_exit>
	...

08011304 <_fstat_r>:
 8011304:	b538      	push	{r3, r4, r5, lr}
 8011306:	4d07      	ldr	r5, [pc, #28]	; (8011324 <_fstat_r+0x20>)
 8011308:	2300      	movs	r3, #0
 801130a:	4604      	mov	r4, r0
 801130c:	4608      	mov	r0, r1
 801130e:	4611      	mov	r1, r2
 8011310:	602b      	str	r3, [r5, #0]
 8011312:	f7f1 f890 	bl	8002436 <_fstat>
 8011316:	1c43      	adds	r3, r0, #1
 8011318:	d102      	bne.n	8011320 <_fstat_r+0x1c>
 801131a:	682b      	ldr	r3, [r5, #0]
 801131c:	b103      	cbz	r3, 8011320 <_fstat_r+0x1c>
 801131e:	6023      	str	r3, [r4, #0]
 8011320:	bd38      	pop	{r3, r4, r5, pc}
 8011322:	bf00      	nop
 8011324:	20004d88 	.word	0x20004d88

08011328 <_isatty_r>:
 8011328:	b538      	push	{r3, r4, r5, lr}
 801132a:	4d06      	ldr	r5, [pc, #24]	; (8011344 <_isatty_r+0x1c>)
 801132c:	2300      	movs	r3, #0
 801132e:	4604      	mov	r4, r0
 8011330:	4608      	mov	r0, r1
 8011332:	602b      	str	r3, [r5, #0]
 8011334:	f7f1 f88e 	bl	8002454 <_isatty>
 8011338:	1c43      	adds	r3, r0, #1
 801133a:	d102      	bne.n	8011342 <_isatty_r+0x1a>
 801133c:	682b      	ldr	r3, [r5, #0]
 801133e:	b103      	cbz	r3, 8011342 <_isatty_r+0x1a>
 8011340:	6023      	str	r3, [r4, #0]
 8011342:	bd38      	pop	{r3, r4, r5, pc}
 8011344:	20004d88 	.word	0x20004d88

08011348 <_malloc_usable_size_r>:
 8011348:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801134c:	1f18      	subs	r0, r3, #4
 801134e:	2b00      	cmp	r3, #0
 8011350:	bfbc      	itt	lt
 8011352:	580b      	ldrlt	r3, [r1, r0]
 8011354:	18c0      	addlt	r0, r0, r3
 8011356:	4770      	bx	lr

08011358 <_raise_r>:
 8011358:	291f      	cmp	r1, #31
 801135a:	b538      	push	{r3, r4, r5, lr}
 801135c:	4604      	mov	r4, r0
 801135e:	460d      	mov	r5, r1
 8011360:	d904      	bls.n	801136c <_raise_r+0x14>
 8011362:	2316      	movs	r3, #22
 8011364:	6003      	str	r3, [r0, #0]
 8011366:	f04f 30ff 	mov.w	r0, #4294967295
 801136a:	bd38      	pop	{r3, r4, r5, pc}
 801136c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801136e:	b112      	cbz	r2, 8011376 <_raise_r+0x1e>
 8011370:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011374:	b94b      	cbnz	r3, 801138a <_raise_r+0x32>
 8011376:	4620      	mov	r0, r4
 8011378:	f000 f830 	bl	80113dc <_getpid_r>
 801137c:	462a      	mov	r2, r5
 801137e:	4601      	mov	r1, r0
 8011380:	4620      	mov	r0, r4
 8011382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011386:	f000 b817 	b.w	80113b8 <_kill_r>
 801138a:	2b01      	cmp	r3, #1
 801138c:	d00a      	beq.n	80113a4 <_raise_r+0x4c>
 801138e:	1c59      	adds	r1, r3, #1
 8011390:	d103      	bne.n	801139a <_raise_r+0x42>
 8011392:	2316      	movs	r3, #22
 8011394:	6003      	str	r3, [r0, #0]
 8011396:	2001      	movs	r0, #1
 8011398:	e7e7      	b.n	801136a <_raise_r+0x12>
 801139a:	2400      	movs	r4, #0
 801139c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80113a0:	4628      	mov	r0, r5
 80113a2:	4798      	blx	r3
 80113a4:	2000      	movs	r0, #0
 80113a6:	e7e0      	b.n	801136a <_raise_r+0x12>

080113a8 <raise>:
 80113a8:	4b02      	ldr	r3, [pc, #8]	; (80113b4 <raise+0xc>)
 80113aa:	4601      	mov	r1, r0
 80113ac:	6818      	ldr	r0, [r3, #0]
 80113ae:	f7ff bfd3 	b.w	8011358 <_raise_r>
 80113b2:	bf00      	nop
 80113b4:	20000094 	.word	0x20000094

080113b8 <_kill_r>:
 80113b8:	b538      	push	{r3, r4, r5, lr}
 80113ba:	4d07      	ldr	r5, [pc, #28]	; (80113d8 <_kill_r+0x20>)
 80113bc:	2300      	movs	r3, #0
 80113be:	4604      	mov	r4, r0
 80113c0:	4608      	mov	r0, r1
 80113c2:	4611      	mov	r1, r2
 80113c4:	602b      	str	r3, [r5, #0]
 80113c6:	f7f0 ffd8 	bl	800237a <_kill>
 80113ca:	1c43      	adds	r3, r0, #1
 80113cc:	d102      	bne.n	80113d4 <_kill_r+0x1c>
 80113ce:	682b      	ldr	r3, [r5, #0]
 80113d0:	b103      	cbz	r3, 80113d4 <_kill_r+0x1c>
 80113d2:	6023      	str	r3, [r4, #0]
 80113d4:	bd38      	pop	{r3, r4, r5, pc}
 80113d6:	bf00      	nop
 80113d8:	20004d88 	.word	0x20004d88

080113dc <_getpid_r>:
 80113dc:	f7f0 bfc6 	b.w	800236c <_getpid>

080113e0 <pow>:
 80113e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113e4:	4614      	mov	r4, r2
 80113e6:	461d      	mov	r5, r3
 80113e8:	4680      	mov	r8, r0
 80113ea:	4689      	mov	r9, r1
 80113ec:	f000 f860 	bl	80114b0 <__ieee754_pow>
 80113f0:	4622      	mov	r2, r4
 80113f2:	4606      	mov	r6, r0
 80113f4:	460f      	mov	r7, r1
 80113f6:	462b      	mov	r3, r5
 80113f8:	4620      	mov	r0, r4
 80113fa:	4629      	mov	r1, r5
 80113fc:	f7ef fb6e 	bl	8000adc <__aeabi_dcmpun>
 8011400:	bbc8      	cbnz	r0, 8011476 <pow+0x96>
 8011402:	2200      	movs	r2, #0
 8011404:	2300      	movs	r3, #0
 8011406:	4640      	mov	r0, r8
 8011408:	4649      	mov	r1, r9
 801140a:	f7ef fb35 	bl	8000a78 <__aeabi_dcmpeq>
 801140e:	b1b8      	cbz	r0, 8011440 <pow+0x60>
 8011410:	2200      	movs	r2, #0
 8011412:	2300      	movs	r3, #0
 8011414:	4620      	mov	r0, r4
 8011416:	4629      	mov	r1, r5
 8011418:	f7ef fb2e 	bl	8000a78 <__aeabi_dcmpeq>
 801141c:	2800      	cmp	r0, #0
 801141e:	d141      	bne.n	80114a4 <pow+0xc4>
 8011420:	4620      	mov	r0, r4
 8011422:	4629      	mov	r1, r5
 8011424:	f000 fe37 	bl	8012096 <finite>
 8011428:	b328      	cbz	r0, 8011476 <pow+0x96>
 801142a:	2200      	movs	r2, #0
 801142c:	2300      	movs	r3, #0
 801142e:	4620      	mov	r0, r4
 8011430:	4629      	mov	r1, r5
 8011432:	f7ef fb2b 	bl	8000a8c <__aeabi_dcmplt>
 8011436:	b1f0      	cbz	r0, 8011476 <pow+0x96>
 8011438:	f7fe fc46 	bl	800fcc8 <__errno>
 801143c:	2322      	movs	r3, #34	; 0x22
 801143e:	e019      	b.n	8011474 <pow+0x94>
 8011440:	4630      	mov	r0, r6
 8011442:	4639      	mov	r1, r7
 8011444:	f000 fe27 	bl	8012096 <finite>
 8011448:	b9c8      	cbnz	r0, 801147e <pow+0x9e>
 801144a:	4640      	mov	r0, r8
 801144c:	4649      	mov	r1, r9
 801144e:	f000 fe22 	bl	8012096 <finite>
 8011452:	b1a0      	cbz	r0, 801147e <pow+0x9e>
 8011454:	4620      	mov	r0, r4
 8011456:	4629      	mov	r1, r5
 8011458:	f000 fe1d 	bl	8012096 <finite>
 801145c:	b178      	cbz	r0, 801147e <pow+0x9e>
 801145e:	4632      	mov	r2, r6
 8011460:	463b      	mov	r3, r7
 8011462:	4630      	mov	r0, r6
 8011464:	4639      	mov	r1, r7
 8011466:	f7ef fb39 	bl	8000adc <__aeabi_dcmpun>
 801146a:	2800      	cmp	r0, #0
 801146c:	d0e4      	beq.n	8011438 <pow+0x58>
 801146e:	f7fe fc2b 	bl	800fcc8 <__errno>
 8011472:	2321      	movs	r3, #33	; 0x21
 8011474:	6003      	str	r3, [r0, #0]
 8011476:	4630      	mov	r0, r6
 8011478:	4639      	mov	r1, r7
 801147a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801147e:	2200      	movs	r2, #0
 8011480:	2300      	movs	r3, #0
 8011482:	4630      	mov	r0, r6
 8011484:	4639      	mov	r1, r7
 8011486:	f7ef faf7 	bl	8000a78 <__aeabi_dcmpeq>
 801148a:	2800      	cmp	r0, #0
 801148c:	d0f3      	beq.n	8011476 <pow+0x96>
 801148e:	4640      	mov	r0, r8
 8011490:	4649      	mov	r1, r9
 8011492:	f000 fe00 	bl	8012096 <finite>
 8011496:	2800      	cmp	r0, #0
 8011498:	d0ed      	beq.n	8011476 <pow+0x96>
 801149a:	4620      	mov	r0, r4
 801149c:	4629      	mov	r1, r5
 801149e:	f000 fdfa 	bl	8012096 <finite>
 80114a2:	e7c8      	b.n	8011436 <pow+0x56>
 80114a4:	4f01      	ldr	r7, [pc, #4]	; (80114ac <pow+0xcc>)
 80114a6:	2600      	movs	r6, #0
 80114a8:	e7e5      	b.n	8011476 <pow+0x96>
 80114aa:	bf00      	nop
 80114ac:	3ff00000 	.word	0x3ff00000

080114b0 <__ieee754_pow>:
 80114b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114b4:	b093      	sub	sp, #76	; 0x4c
 80114b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80114ba:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 80114be:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80114c2:	4689      	mov	r9, r1
 80114c4:	ea56 0102 	orrs.w	r1, r6, r2
 80114c8:	4680      	mov	r8, r0
 80114ca:	d111      	bne.n	80114f0 <__ieee754_pow+0x40>
 80114cc:	1803      	adds	r3, r0, r0
 80114ce:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 80114d2:	4152      	adcs	r2, r2
 80114d4:	4299      	cmp	r1, r3
 80114d6:	4b82      	ldr	r3, [pc, #520]	; (80116e0 <__ieee754_pow+0x230>)
 80114d8:	4193      	sbcs	r3, r2
 80114da:	f080 84b9 	bcs.w	8011e50 <__ieee754_pow+0x9a0>
 80114de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80114e2:	4640      	mov	r0, r8
 80114e4:	4649      	mov	r1, r9
 80114e6:	f7ee fea9 	bl	800023c <__adddf3>
 80114ea:	4683      	mov	fp, r0
 80114ec:	468c      	mov	ip, r1
 80114ee:	e06f      	b.n	80115d0 <__ieee754_pow+0x120>
 80114f0:	4b7c      	ldr	r3, [pc, #496]	; (80116e4 <__ieee754_pow+0x234>)
 80114f2:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 80114f6:	429c      	cmp	r4, r3
 80114f8:	464d      	mov	r5, r9
 80114fa:	4682      	mov	sl, r0
 80114fc:	dc06      	bgt.n	801150c <__ieee754_pow+0x5c>
 80114fe:	d101      	bne.n	8011504 <__ieee754_pow+0x54>
 8011500:	2800      	cmp	r0, #0
 8011502:	d1ec      	bne.n	80114de <__ieee754_pow+0x2e>
 8011504:	429e      	cmp	r6, r3
 8011506:	dc01      	bgt.n	801150c <__ieee754_pow+0x5c>
 8011508:	d10f      	bne.n	801152a <__ieee754_pow+0x7a>
 801150a:	b172      	cbz	r2, 801152a <__ieee754_pow+0x7a>
 801150c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8011510:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8011514:	ea55 050a 	orrs.w	r5, r5, sl
 8011518:	d1e1      	bne.n	80114de <__ieee754_pow+0x2e>
 801151a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801151e:	18db      	adds	r3, r3, r3
 8011520:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8011524:	4152      	adcs	r2, r2
 8011526:	429d      	cmp	r5, r3
 8011528:	e7d5      	b.n	80114d6 <__ieee754_pow+0x26>
 801152a:	2d00      	cmp	r5, #0
 801152c:	da39      	bge.n	80115a2 <__ieee754_pow+0xf2>
 801152e:	4b6e      	ldr	r3, [pc, #440]	; (80116e8 <__ieee754_pow+0x238>)
 8011530:	429e      	cmp	r6, r3
 8011532:	dc52      	bgt.n	80115da <__ieee754_pow+0x12a>
 8011534:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8011538:	429e      	cmp	r6, r3
 801153a:	f340 849c 	ble.w	8011e76 <__ieee754_pow+0x9c6>
 801153e:	1533      	asrs	r3, r6, #20
 8011540:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011544:	2b14      	cmp	r3, #20
 8011546:	dd0f      	ble.n	8011568 <__ieee754_pow+0xb8>
 8011548:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801154c:	fa22 f103 	lsr.w	r1, r2, r3
 8011550:	fa01 f303 	lsl.w	r3, r1, r3
 8011554:	4293      	cmp	r3, r2
 8011556:	f040 848e 	bne.w	8011e76 <__ieee754_pow+0x9c6>
 801155a:	f001 0101 	and.w	r1, r1, #1
 801155e:	f1c1 0302 	rsb	r3, r1, #2
 8011562:	9300      	str	r3, [sp, #0]
 8011564:	b182      	cbz	r2, 8011588 <__ieee754_pow+0xd8>
 8011566:	e05d      	b.n	8011624 <__ieee754_pow+0x174>
 8011568:	2a00      	cmp	r2, #0
 801156a:	d159      	bne.n	8011620 <__ieee754_pow+0x170>
 801156c:	f1c3 0314 	rsb	r3, r3, #20
 8011570:	fa46 f103 	asr.w	r1, r6, r3
 8011574:	fa01 f303 	lsl.w	r3, r1, r3
 8011578:	42b3      	cmp	r3, r6
 801157a:	f040 8479 	bne.w	8011e70 <__ieee754_pow+0x9c0>
 801157e:	f001 0101 	and.w	r1, r1, #1
 8011582:	f1c1 0302 	rsb	r3, r1, #2
 8011586:	9300      	str	r3, [sp, #0]
 8011588:	4b58      	ldr	r3, [pc, #352]	; (80116ec <__ieee754_pow+0x23c>)
 801158a:	429e      	cmp	r6, r3
 801158c:	d132      	bne.n	80115f4 <__ieee754_pow+0x144>
 801158e:	2f00      	cmp	r7, #0
 8011590:	f280 846a 	bge.w	8011e68 <__ieee754_pow+0x9b8>
 8011594:	4955      	ldr	r1, [pc, #340]	; (80116ec <__ieee754_pow+0x23c>)
 8011596:	4642      	mov	r2, r8
 8011598:	464b      	mov	r3, r9
 801159a:	2000      	movs	r0, #0
 801159c:	f7ef f92e 	bl	80007fc <__aeabi_ddiv>
 80115a0:	e7a3      	b.n	80114ea <__ieee754_pow+0x3a>
 80115a2:	2300      	movs	r3, #0
 80115a4:	9300      	str	r3, [sp, #0]
 80115a6:	2a00      	cmp	r2, #0
 80115a8:	d13c      	bne.n	8011624 <__ieee754_pow+0x174>
 80115aa:	4b4e      	ldr	r3, [pc, #312]	; (80116e4 <__ieee754_pow+0x234>)
 80115ac:	429e      	cmp	r6, r3
 80115ae:	d1eb      	bne.n	8011588 <__ieee754_pow+0xd8>
 80115b0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80115b4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80115b8:	ea53 030a 	orrs.w	r3, r3, sl
 80115bc:	f000 8448 	beq.w	8011e50 <__ieee754_pow+0x9a0>
 80115c0:	4b4b      	ldr	r3, [pc, #300]	; (80116f0 <__ieee754_pow+0x240>)
 80115c2:	429c      	cmp	r4, r3
 80115c4:	dd0b      	ble.n	80115de <__ieee754_pow+0x12e>
 80115c6:	2f00      	cmp	r7, #0
 80115c8:	f2c0 8448 	blt.w	8011e5c <__ieee754_pow+0x9ac>
 80115cc:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80115d0:	4658      	mov	r0, fp
 80115d2:	4661      	mov	r1, ip
 80115d4:	b013      	add	sp, #76	; 0x4c
 80115d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115da:	2302      	movs	r3, #2
 80115dc:	e7e2      	b.n	80115a4 <__ieee754_pow+0xf4>
 80115de:	2f00      	cmp	r7, #0
 80115e0:	f04f 0b00 	mov.w	fp, #0
 80115e4:	f04f 0c00 	mov.w	ip, #0
 80115e8:	daf2      	bge.n	80115d0 <__ieee754_pow+0x120>
 80115ea:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80115ee:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80115f2:	e7ed      	b.n	80115d0 <__ieee754_pow+0x120>
 80115f4:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80115f8:	d106      	bne.n	8011608 <__ieee754_pow+0x158>
 80115fa:	4642      	mov	r2, r8
 80115fc:	464b      	mov	r3, r9
 80115fe:	4640      	mov	r0, r8
 8011600:	4649      	mov	r1, r9
 8011602:	f7ee ffd1 	bl	80005a8 <__aeabi_dmul>
 8011606:	e770      	b.n	80114ea <__ieee754_pow+0x3a>
 8011608:	4b3a      	ldr	r3, [pc, #232]	; (80116f4 <__ieee754_pow+0x244>)
 801160a:	429f      	cmp	r7, r3
 801160c:	d10a      	bne.n	8011624 <__ieee754_pow+0x174>
 801160e:	2d00      	cmp	r5, #0
 8011610:	db08      	blt.n	8011624 <__ieee754_pow+0x174>
 8011612:	4640      	mov	r0, r8
 8011614:	4649      	mov	r1, r9
 8011616:	b013      	add	sp, #76	; 0x4c
 8011618:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801161c:	f000 bc5e 	b.w	8011edc <__ieee754_sqrt>
 8011620:	2300      	movs	r3, #0
 8011622:	9300      	str	r3, [sp, #0]
 8011624:	4640      	mov	r0, r8
 8011626:	4649      	mov	r1, r9
 8011628:	f000 fd32 	bl	8012090 <fabs>
 801162c:	4683      	mov	fp, r0
 801162e:	468c      	mov	ip, r1
 8011630:	f1ba 0f00 	cmp.w	sl, #0
 8011634:	d128      	bne.n	8011688 <__ieee754_pow+0x1d8>
 8011636:	b124      	cbz	r4, 8011642 <__ieee754_pow+0x192>
 8011638:	4b2c      	ldr	r3, [pc, #176]	; (80116ec <__ieee754_pow+0x23c>)
 801163a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801163e:	429a      	cmp	r2, r3
 8011640:	d122      	bne.n	8011688 <__ieee754_pow+0x1d8>
 8011642:	2f00      	cmp	r7, #0
 8011644:	da07      	bge.n	8011656 <__ieee754_pow+0x1a6>
 8011646:	465a      	mov	r2, fp
 8011648:	4663      	mov	r3, ip
 801164a:	4928      	ldr	r1, [pc, #160]	; (80116ec <__ieee754_pow+0x23c>)
 801164c:	2000      	movs	r0, #0
 801164e:	f7ef f8d5 	bl	80007fc <__aeabi_ddiv>
 8011652:	4683      	mov	fp, r0
 8011654:	468c      	mov	ip, r1
 8011656:	2d00      	cmp	r5, #0
 8011658:	daba      	bge.n	80115d0 <__ieee754_pow+0x120>
 801165a:	9b00      	ldr	r3, [sp, #0]
 801165c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011660:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011664:	4323      	orrs	r3, r4
 8011666:	d108      	bne.n	801167a <__ieee754_pow+0x1ca>
 8011668:	465a      	mov	r2, fp
 801166a:	4663      	mov	r3, ip
 801166c:	4658      	mov	r0, fp
 801166e:	4661      	mov	r1, ip
 8011670:	f7ee fde2 	bl	8000238 <__aeabi_dsub>
 8011674:	4602      	mov	r2, r0
 8011676:	460b      	mov	r3, r1
 8011678:	e790      	b.n	801159c <__ieee754_pow+0xec>
 801167a:	9b00      	ldr	r3, [sp, #0]
 801167c:	2b01      	cmp	r3, #1
 801167e:	d1a7      	bne.n	80115d0 <__ieee754_pow+0x120>
 8011680:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8011684:	469c      	mov	ip, r3
 8011686:	e7a3      	b.n	80115d0 <__ieee754_pow+0x120>
 8011688:	0feb      	lsrs	r3, r5, #31
 801168a:	3b01      	subs	r3, #1
 801168c:	930c      	str	r3, [sp, #48]	; 0x30
 801168e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011690:	9b00      	ldr	r3, [sp, #0]
 8011692:	4313      	orrs	r3, r2
 8011694:	d104      	bne.n	80116a0 <__ieee754_pow+0x1f0>
 8011696:	4642      	mov	r2, r8
 8011698:	464b      	mov	r3, r9
 801169a:	4640      	mov	r0, r8
 801169c:	4649      	mov	r1, r9
 801169e:	e7e7      	b.n	8011670 <__ieee754_pow+0x1c0>
 80116a0:	4b15      	ldr	r3, [pc, #84]	; (80116f8 <__ieee754_pow+0x248>)
 80116a2:	429e      	cmp	r6, r3
 80116a4:	f340 80f6 	ble.w	8011894 <__ieee754_pow+0x3e4>
 80116a8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80116ac:	429e      	cmp	r6, r3
 80116ae:	4b10      	ldr	r3, [pc, #64]	; (80116f0 <__ieee754_pow+0x240>)
 80116b0:	dd09      	ble.n	80116c6 <__ieee754_pow+0x216>
 80116b2:	429c      	cmp	r4, r3
 80116b4:	dc0c      	bgt.n	80116d0 <__ieee754_pow+0x220>
 80116b6:	2f00      	cmp	r7, #0
 80116b8:	da0c      	bge.n	80116d4 <__ieee754_pow+0x224>
 80116ba:	2000      	movs	r0, #0
 80116bc:	b013      	add	sp, #76	; 0x4c
 80116be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116c2:	f000 bce0 	b.w	8012086 <__math_oflow>
 80116c6:	429c      	cmp	r4, r3
 80116c8:	dbf5      	blt.n	80116b6 <__ieee754_pow+0x206>
 80116ca:	4b08      	ldr	r3, [pc, #32]	; (80116ec <__ieee754_pow+0x23c>)
 80116cc:	429c      	cmp	r4, r3
 80116ce:	dd15      	ble.n	80116fc <__ieee754_pow+0x24c>
 80116d0:	2f00      	cmp	r7, #0
 80116d2:	dcf2      	bgt.n	80116ba <__ieee754_pow+0x20a>
 80116d4:	2000      	movs	r0, #0
 80116d6:	b013      	add	sp, #76	; 0x4c
 80116d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116dc:	f000 bcce 	b.w	801207c <__math_uflow>
 80116e0:	fff00000 	.word	0xfff00000
 80116e4:	7ff00000 	.word	0x7ff00000
 80116e8:	433fffff 	.word	0x433fffff
 80116ec:	3ff00000 	.word	0x3ff00000
 80116f0:	3fefffff 	.word	0x3fefffff
 80116f4:	3fe00000 	.word	0x3fe00000
 80116f8:	41e00000 	.word	0x41e00000
 80116fc:	4661      	mov	r1, ip
 80116fe:	4b60      	ldr	r3, [pc, #384]	; (8011880 <__ieee754_pow+0x3d0>)
 8011700:	2200      	movs	r2, #0
 8011702:	4658      	mov	r0, fp
 8011704:	f7ee fd98 	bl	8000238 <__aeabi_dsub>
 8011708:	a355      	add	r3, pc, #340	; (adr r3, 8011860 <__ieee754_pow+0x3b0>)
 801170a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801170e:	4604      	mov	r4, r0
 8011710:	460d      	mov	r5, r1
 8011712:	f7ee ff49 	bl	80005a8 <__aeabi_dmul>
 8011716:	a354      	add	r3, pc, #336	; (adr r3, 8011868 <__ieee754_pow+0x3b8>)
 8011718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801171c:	4606      	mov	r6, r0
 801171e:	460f      	mov	r7, r1
 8011720:	4620      	mov	r0, r4
 8011722:	4629      	mov	r1, r5
 8011724:	f7ee ff40 	bl	80005a8 <__aeabi_dmul>
 8011728:	4b56      	ldr	r3, [pc, #344]	; (8011884 <__ieee754_pow+0x3d4>)
 801172a:	4682      	mov	sl, r0
 801172c:	468b      	mov	fp, r1
 801172e:	2200      	movs	r2, #0
 8011730:	4620      	mov	r0, r4
 8011732:	4629      	mov	r1, r5
 8011734:	f7ee ff38 	bl	80005a8 <__aeabi_dmul>
 8011738:	4602      	mov	r2, r0
 801173a:	460b      	mov	r3, r1
 801173c:	a14c      	add	r1, pc, #304	; (adr r1, 8011870 <__ieee754_pow+0x3c0>)
 801173e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011742:	f7ee fd79 	bl	8000238 <__aeabi_dsub>
 8011746:	4622      	mov	r2, r4
 8011748:	462b      	mov	r3, r5
 801174a:	f7ee ff2d 	bl	80005a8 <__aeabi_dmul>
 801174e:	4602      	mov	r2, r0
 8011750:	460b      	mov	r3, r1
 8011752:	2000      	movs	r0, #0
 8011754:	494c      	ldr	r1, [pc, #304]	; (8011888 <__ieee754_pow+0x3d8>)
 8011756:	f7ee fd6f 	bl	8000238 <__aeabi_dsub>
 801175a:	4622      	mov	r2, r4
 801175c:	462b      	mov	r3, r5
 801175e:	4680      	mov	r8, r0
 8011760:	4689      	mov	r9, r1
 8011762:	4620      	mov	r0, r4
 8011764:	4629      	mov	r1, r5
 8011766:	f7ee ff1f 	bl	80005a8 <__aeabi_dmul>
 801176a:	4602      	mov	r2, r0
 801176c:	460b      	mov	r3, r1
 801176e:	4640      	mov	r0, r8
 8011770:	4649      	mov	r1, r9
 8011772:	f7ee ff19 	bl	80005a8 <__aeabi_dmul>
 8011776:	a340      	add	r3, pc, #256	; (adr r3, 8011878 <__ieee754_pow+0x3c8>)
 8011778:	e9d3 2300 	ldrd	r2, r3, [r3]
 801177c:	f7ee ff14 	bl	80005a8 <__aeabi_dmul>
 8011780:	4602      	mov	r2, r0
 8011782:	460b      	mov	r3, r1
 8011784:	4650      	mov	r0, sl
 8011786:	4659      	mov	r1, fp
 8011788:	f7ee fd56 	bl	8000238 <__aeabi_dsub>
 801178c:	4602      	mov	r2, r0
 801178e:	460b      	mov	r3, r1
 8011790:	4604      	mov	r4, r0
 8011792:	460d      	mov	r5, r1
 8011794:	4630      	mov	r0, r6
 8011796:	4639      	mov	r1, r7
 8011798:	f7ee fd50 	bl	800023c <__adddf3>
 801179c:	f04f 0a00 	mov.w	sl, #0
 80117a0:	4632      	mov	r2, r6
 80117a2:	463b      	mov	r3, r7
 80117a4:	4650      	mov	r0, sl
 80117a6:	468b      	mov	fp, r1
 80117a8:	f7ee fd46 	bl	8000238 <__aeabi_dsub>
 80117ac:	4602      	mov	r2, r0
 80117ae:	460b      	mov	r3, r1
 80117b0:	4620      	mov	r0, r4
 80117b2:	4629      	mov	r1, r5
 80117b4:	f7ee fd40 	bl	8000238 <__aeabi_dsub>
 80117b8:	9b00      	ldr	r3, [sp, #0]
 80117ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80117bc:	3b01      	subs	r3, #1
 80117be:	4313      	orrs	r3, r2
 80117c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80117c4:	bf0c      	ite	eq
 80117c6:	4b31      	ldreq	r3, [pc, #196]	; (801188c <__ieee754_pow+0x3dc>)
 80117c8:	4b2d      	ldrne	r3, [pc, #180]	; (8011880 <__ieee754_pow+0x3d0>)
 80117ca:	2600      	movs	r6, #0
 80117cc:	2200      	movs	r2, #0
 80117ce:	e9cd 2300 	strd	r2, r3, [sp]
 80117d2:	4604      	mov	r4, r0
 80117d4:	460d      	mov	r5, r1
 80117d6:	4632      	mov	r2, r6
 80117d8:	463b      	mov	r3, r7
 80117da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80117de:	f7ee fd2b 	bl	8000238 <__aeabi_dsub>
 80117e2:	4652      	mov	r2, sl
 80117e4:	465b      	mov	r3, fp
 80117e6:	f7ee fedf 	bl	80005a8 <__aeabi_dmul>
 80117ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80117ee:	4680      	mov	r8, r0
 80117f0:	4689      	mov	r9, r1
 80117f2:	4620      	mov	r0, r4
 80117f4:	4629      	mov	r1, r5
 80117f6:	f7ee fed7 	bl	80005a8 <__aeabi_dmul>
 80117fa:	4602      	mov	r2, r0
 80117fc:	460b      	mov	r3, r1
 80117fe:	4640      	mov	r0, r8
 8011800:	4649      	mov	r1, r9
 8011802:	f7ee fd1b 	bl	800023c <__adddf3>
 8011806:	4632      	mov	r2, r6
 8011808:	463b      	mov	r3, r7
 801180a:	4680      	mov	r8, r0
 801180c:	4689      	mov	r9, r1
 801180e:	4650      	mov	r0, sl
 8011810:	4659      	mov	r1, fp
 8011812:	f7ee fec9 	bl	80005a8 <__aeabi_dmul>
 8011816:	460b      	mov	r3, r1
 8011818:	4604      	mov	r4, r0
 801181a:	460d      	mov	r5, r1
 801181c:	4602      	mov	r2, r0
 801181e:	4649      	mov	r1, r9
 8011820:	4640      	mov	r0, r8
 8011822:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8011826:	f7ee fd09 	bl	800023c <__adddf3>
 801182a:	4b19      	ldr	r3, [pc, #100]	; (8011890 <__ieee754_pow+0x3e0>)
 801182c:	4299      	cmp	r1, r3
 801182e:	4682      	mov	sl, r0
 8011830:	460f      	mov	r7, r1
 8011832:	460e      	mov	r6, r1
 8011834:	f340 82e7 	ble.w	8011e06 <__ieee754_pow+0x956>
 8011838:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801183c:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8011840:	4303      	orrs	r3, r0
 8011842:	f000 81e1 	beq.w	8011c08 <__ieee754_pow+0x758>
 8011846:	e9dd 0100 	ldrd	r0, r1, [sp]
 801184a:	2200      	movs	r2, #0
 801184c:	2300      	movs	r3, #0
 801184e:	f7ef f91d 	bl	8000a8c <__aeabi_dcmplt>
 8011852:	3800      	subs	r0, #0
 8011854:	bf18      	it	ne
 8011856:	2001      	movne	r0, #1
 8011858:	e730      	b.n	80116bc <__ieee754_pow+0x20c>
 801185a:	bf00      	nop
 801185c:	f3af 8000 	nop.w
 8011860:	60000000 	.word	0x60000000
 8011864:	3ff71547 	.word	0x3ff71547
 8011868:	f85ddf44 	.word	0xf85ddf44
 801186c:	3e54ae0b 	.word	0x3e54ae0b
 8011870:	55555555 	.word	0x55555555
 8011874:	3fd55555 	.word	0x3fd55555
 8011878:	652b82fe 	.word	0x652b82fe
 801187c:	3ff71547 	.word	0x3ff71547
 8011880:	3ff00000 	.word	0x3ff00000
 8011884:	3fd00000 	.word	0x3fd00000
 8011888:	3fe00000 	.word	0x3fe00000
 801188c:	bff00000 	.word	0xbff00000
 8011890:	408fffff 	.word	0x408fffff
 8011894:	4bd2      	ldr	r3, [pc, #840]	; (8011be0 <__ieee754_pow+0x730>)
 8011896:	402b      	ands	r3, r5
 8011898:	2200      	movs	r2, #0
 801189a:	b943      	cbnz	r3, 80118ae <__ieee754_pow+0x3fe>
 801189c:	4658      	mov	r0, fp
 801189e:	4bd1      	ldr	r3, [pc, #836]	; (8011be4 <__ieee754_pow+0x734>)
 80118a0:	4661      	mov	r1, ip
 80118a2:	f7ee fe81 	bl	80005a8 <__aeabi_dmul>
 80118a6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80118aa:	4683      	mov	fp, r0
 80118ac:	460c      	mov	r4, r1
 80118ae:	1523      	asrs	r3, r4, #20
 80118b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80118b4:	4413      	add	r3, r2
 80118b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80118b8:	4bcb      	ldr	r3, [pc, #812]	; (8011be8 <__ieee754_pow+0x738>)
 80118ba:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80118be:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80118c2:	429c      	cmp	r4, r3
 80118c4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80118c8:	dd08      	ble.n	80118dc <__ieee754_pow+0x42c>
 80118ca:	4bc8      	ldr	r3, [pc, #800]	; (8011bec <__ieee754_pow+0x73c>)
 80118cc:	429c      	cmp	r4, r3
 80118ce:	f340 8199 	ble.w	8011c04 <__ieee754_pow+0x754>
 80118d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80118d4:	3301      	adds	r3, #1
 80118d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80118d8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80118dc:	2600      	movs	r6, #0
 80118de:	00f3      	lsls	r3, r6, #3
 80118e0:	930d      	str	r3, [sp, #52]	; 0x34
 80118e2:	4bc3      	ldr	r3, [pc, #780]	; (8011bf0 <__ieee754_pow+0x740>)
 80118e4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80118e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80118ec:	4658      	mov	r0, fp
 80118ee:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80118f2:	461a      	mov	r2, r3
 80118f4:	4629      	mov	r1, r5
 80118f6:	4623      	mov	r3, r4
 80118f8:	f7ee fc9e 	bl	8000238 <__aeabi_dsub>
 80118fc:	46da      	mov	sl, fp
 80118fe:	4652      	mov	r2, sl
 8011900:	462b      	mov	r3, r5
 8011902:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8011906:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801190a:	f7ee fc97 	bl	800023c <__adddf3>
 801190e:	4602      	mov	r2, r0
 8011910:	460b      	mov	r3, r1
 8011912:	2000      	movs	r0, #0
 8011914:	49b7      	ldr	r1, [pc, #732]	; (8011bf4 <__ieee754_pow+0x744>)
 8011916:	f7ee ff71 	bl	80007fc <__aeabi_ddiv>
 801191a:	4602      	mov	r2, r0
 801191c:	460b      	mov	r3, r1
 801191e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8011922:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8011926:	f7ee fe3f 	bl	80005a8 <__aeabi_dmul>
 801192a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801192e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8011932:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8011936:	2300      	movs	r3, #0
 8011938:	9304      	str	r3, [sp, #16]
 801193a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801193e:	46ab      	mov	fp, r5
 8011940:	106d      	asrs	r5, r5, #1
 8011942:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011946:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801194a:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 801194e:	2200      	movs	r2, #0
 8011950:	4640      	mov	r0, r8
 8011952:	4649      	mov	r1, r9
 8011954:	4614      	mov	r4, r2
 8011956:	461d      	mov	r5, r3
 8011958:	f7ee fe26 	bl	80005a8 <__aeabi_dmul>
 801195c:	4602      	mov	r2, r0
 801195e:	460b      	mov	r3, r1
 8011960:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8011964:	f7ee fc68 	bl	8000238 <__aeabi_dsub>
 8011968:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801196c:	4606      	mov	r6, r0
 801196e:	460f      	mov	r7, r1
 8011970:	4620      	mov	r0, r4
 8011972:	4629      	mov	r1, r5
 8011974:	f7ee fc60 	bl	8000238 <__aeabi_dsub>
 8011978:	4602      	mov	r2, r0
 801197a:	460b      	mov	r3, r1
 801197c:	4650      	mov	r0, sl
 801197e:	4659      	mov	r1, fp
 8011980:	f7ee fc5a 	bl	8000238 <__aeabi_dsub>
 8011984:	4642      	mov	r2, r8
 8011986:	464b      	mov	r3, r9
 8011988:	f7ee fe0e 	bl	80005a8 <__aeabi_dmul>
 801198c:	4602      	mov	r2, r0
 801198e:	460b      	mov	r3, r1
 8011990:	4630      	mov	r0, r6
 8011992:	4639      	mov	r1, r7
 8011994:	f7ee fc50 	bl	8000238 <__aeabi_dsub>
 8011998:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801199c:	f7ee fe04 	bl	80005a8 <__aeabi_dmul>
 80119a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80119a4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80119a8:	4610      	mov	r0, r2
 80119aa:	4619      	mov	r1, r3
 80119ac:	f7ee fdfc 	bl	80005a8 <__aeabi_dmul>
 80119b0:	a379      	add	r3, pc, #484	; (adr r3, 8011b98 <__ieee754_pow+0x6e8>)
 80119b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119b6:	4604      	mov	r4, r0
 80119b8:	460d      	mov	r5, r1
 80119ba:	f7ee fdf5 	bl	80005a8 <__aeabi_dmul>
 80119be:	a378      	add	r3, pc, #480	; (adr r3, 8011ba0 <__ieee754_pow+0x6f0>)
 80119c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119c4:	f7ee fc3a 	bl	800023c <__adddf3>
 80119c8:	4622      	mov	r2, r4
 80119ca:	462b      	mov	r3, r5
 80119cc:	f7ee fdec 	bl	80005a8 <__aeabi_dmul>
 80119d0:	a375      	add	r3, pc, #468	; (adr r3, 8011ba8 <__ieee754_pow+0x6f8>)
 80119d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119d6:	f7ee fc31 	bl	800023c <__adddf3>
 80119da:	4622      	mov	r2, r4
 80119dc:	462b      	mov	r3, r5
 80119de:	f7ee fde3 	bl	80005a8 <__aeabi_dmul>
 80119e2:	a373      	add	r3, pc, #460	; (adr r3, 8011bb0 <__ieee754_pow+0x700>)
 80119e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119e8:	f7ee fc28 	bl	800023c <__adddf3>
 80119ec:	4622      	mov	r2, r4
 80119ee:	462b      	mov	r3, r5
 80119f0:	f7ee fdda 	bl	80005a8 <__aeabi_dmul>
 80119f4:	a370      	add	r3, pc, #448	; (adr r3, 8011bb8 <__ieee754_pow+0x708>)
 80119f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119fa:	f7ee fc1f 	bl	800023c <__adddf3>
 80119fe:	4622      	mov	r2, r4
 8011a00:	462b      	mov	r3, r5
 8011a02:	f7ee fdd1 	bl	80005a8 <__aeabi_dmul>
 8011a06:	a36e      	add	r3, pc, #440	; (adr r3, 8011bc0 <__ieee754_pow+0x710>)
 8011a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a0c:	f7ee fc16 	bl	800023c <__adddf3>
 8011a10:	4622      	mov	r2, r4
 8011a12:	4606      	mov	r6, r0
 8011a14:	460f      	mov	r7, r1
 8011a16:	462b      	mov	r3, r5
 8011a18:	4620      	mov	r0, r4
 8011a1a:	4629      	mov	r1, r5
 8011a1c:	f7ee fdc4 	bl	80005a8 <__aeabi_dmul>
 8011a20:	4602      	mov	r2, r0
 8011a22:	460b      	mov	r3, r1
 8011a24:	4630      	mov	r0, r6
 8011a26:	4639      	mov	r1, r7
 8011a28:	f7ee fdbe 	bl	80005a8 <__aeabi_dmul>
 8011a2c:	4642      	mov	r2, r8
 8011a2e:	4604      	mov	r4, r0
 8011a30:	460d      	mov	r5, r1
 8011a32:	464b      	mov	r3, r9
 8011a34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011a38:	f7ee fc00 	bl	800023c <__adddf3>
 8011a3c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011a40:	f7ee fdb2 	bl	80005a8 <__aeabi_dmul>
 8011a44:	4622      	mov	r2, r4
 8011a46:	462b      	mov	r3, r5
 8011a48:	f7ee fbf8 	bl	800023c <__adddf3>
 8011a4c:	4642      	mov	r2, r8
 8011a4e:	4606      	mov	r6, r0
 8011a50:	460f      	mov	r7, r1
 8011a52:	464b      	mov	r3, r9
 8011a54:	4640      	mov	r0, r8
 8011a56:	4649      	mov	r1, r9
 8011a58:	f7ee fda6 	bl	80005a8 <__aeabi_dmul>
 8011a5c:	4b66      	ldr	r3, [pc, #408]	; (8011bf8 <__ieee754_pow+0x748>)
 8011a5e:	2200      	movs	r2, #0
 8011a60:	4682      	mov	sl, r0
 8011a62:	468b      	mov	fp, r1
 8011a64:	f7ee fbea 	bl	800023c <__adddf3>
 8011a68:	4632      	mov	r2, r6
 8011a6a:	463b      	mov	r3, r7
 8011a6c:	f7ee fbe6 	bl	800023c <__adddf3>
 8011a70:	2400      	movs	r4, #0
 8011a72:	460d      	mov	r5, r1
 8011a74:	4622      	mov	r2, r4
 8011a76:	460b      	mov	r3, r1
 8011a78:	4640      	mov	r0, r8
 8011a7a:	4649      	mov	r1, r9
 8011a7c:	f7ee fd94 	bl	80005a8 <__aeabi_dmul>
 8011a80:	4b5d      	ldr	r3, [pc, #372]	; (8011bf8 <__ieee754_pow+0x748>)
 8011a82:	4680      	mov	r8, r0
 8011a84:	4689      	mov	r9, r1
 8011a86:	2200      	movs	r2, #0
 8011a88:	4620      	mov	r0, r4
 8011a8a:	4629      	mov	r1, r5
 8011a8c:	f7ee fbd4 	bl	8000238 <__aeabi_dsub>
 8011a90:	4652      	mov	r2, sl
 8011a92:	465b      	mov	r3, fp
 8011a94:	f7ee fbd0 	bl	8000238 <__aeabi_dsub>
 8011a98:	4602      	mov	r2, r0
 8011a9a:	460b      	mov	r3, r1
 8011a9c:	4630      	mov	r0, r6
 8011a9e:	4639      	mov	r1, r7
 8011aa0:	f7ee fbca 	bl	8000238 <__aeabi_dsub>
 8011aa4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011aa8:	f7ee fd7e 	bl	80005a8 <__aeabi_dmul>
 8011aac:	4622      	mov	r2, r4
 8011aae:	4606      	mov	r6, r0
 8011ab0:	460f      	mov	r7, r1
 8011ab2:	462b      	mov	r3, r5
 8011ab4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011ab8:	f7ee fd76 	bl	80005a8 <__aeabi_dmul>
 8011abc:	4602      	mov	r2, r0
 8011abe:	460b      	mov	r3, r1
 8011ac0:	4630      	mov	r0, r6
 8011ac2:	4639      	mov	r1, r7
 8011ac4:	f7ee fbba 	bl	800023c <__adddf3>
 8011ac8:	4606      	mov	r6, r0
 8011aca:	460f      	mov	r7, r1
 8011acc:	4602      	mov	r2, r0
 8011ace:	460b      	mov	r3, r1
 8011ad0:	4640      	mov	r0, r8
 8011ad2:	4649      	mov	r1, r9
 8011ad4:	f7ee fbb2 	bl	800023c <__adddf3>
 8011ad8:	2400      	movs	r4, #0
 8011ada:	a33b      	add	r3, pc, #236	; (adr r3, 8011bc8 <__ieee754_pow+0x718>)
 8011adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ae0:	4620      	mov	r0, r4
 8011ae2:	460d      	mov	r5, r1
 8011ae4:	f7ee fd60 	bl	80005a8 <__aeabi_dmul>
 8011ae8:	4642      	mov	r2, r8
 8011aea:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011aee:	464b      	mov	r3, r9
 8011af0:	4620      	mov	r0, r4
 8011af2:	4629      	mov	r1, r5
 8011af4:	f7ee fba0 	bl	8000238 <__aeabi_dsub>
 8011af8:	4602      	mov	r2, r0
 8011afa:	460b      	mov	r3, r1
 8011afc:	4630      	mov	r0, r6
 8011afe:	4639      	mov	r1, r7
 8011b00:	f7ee fb9a 	bl	8000238 <__aeabi_dsub>
 8011b04:	a332      	add	r3, pc, #200	; (adr r3, 8011bd0 <__ieee754_pow+0x720>)
 8011b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b0a:	f7ee fd4d 	bl	80005a8 <__aeabi_dmul>
 8011b0e:	a332      	add	r3, pc, #200	; (adr r3, 8011bd8 <__ieee754_pow+0x728>)
 8011b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b14:	4606      	mov	r6, r0
 8011b16:	460f      	mov	r7, r1
 8011b18:	4620      	mov	r0, r4
 8011b1a:	4629      	mov	r1, r5
 8011b1c:	f7ee fd44 	bl	80005a8 <__aeabi_dmul>
 8011b20:	4602      	mov	r2, r0
 8011b22:	460b      	mov	r3, r1
 8011b24:	4630      	mov	r0, r6
 8011b26:	4639      	mov	r1, r7
 8011b28:	f7ee fb88 	bl	800023c <__adddf3>
 8011b2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011b2e:	4b33      	ldr	r3, [pc, #204]	; (8011bfc <__ieee754_pow+0x74c>)
 8011b30:	4413      	add	r3, r2
 8011b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b36:	f7ee fb81 	bl	800023c <__adddf3>
 8011b3a:	4680      	mov	r8, r0
 8011b3c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8011b3e:	4689      	mov	r9, r1
 8011b40:	f7ee fcc8 	bl	80004d4 <__aeabi_i2d>
 8011b44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011b46:	4b2e      	ldr	r3, [pc, #184]	; (8011c00 <__ieee754_pow+0x750>)
 8011b48:	4413      	add	r3, r2
 8011b4a:	e9d3 6700 	ldrd	r6, r7, [r3]
 8011b4e:	4604      	mov	r4, r0
 8011b50:	460d      	mov	r5, r1
 8011b52:	4642      	mov	r2, r8
 8011b54:	464b      	mov	r3, r9
 8011b56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011b5a:	f7ee fb6f 	bl	800023c <__adddf3>
 8011b5e:	4632      	mov	r2, r6
 8011b60:	463b      	mov	r3, r7
 8011b62:	f7ee fb6b 	bl	800023c <__adddf3>
 8011b66:	4622      	mov	r2, r4
 8011b68:	462b      	mov	r3, r5
 8011b6a:	f7ee fb67 	bl	800023c <__adddf3>
 8011b6e:	f04f 0a00 	mov.w	sl, #0
 8011b72:	4622      	mov	r2, r4
 8011b74:	462b      	mov	r3, r5
 8011b76:	4650      	mov	r0, sl
 8011b78:	468b      	mov	fp, r1
 8011b7a:	f7ee fb5d 	bl	8000238 <__aeabi_dsub>
 8011b7e:	4632      	mov	r2, r6
 8011b80:	463b      	mov	r3, r7
 8011b82:	f7ee fb59 	bl	8000238 <__aeabi_dsub>
 8011b86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011b8a:	f7ee fb55 	bl	8000238 <__aeabi_dsub>
 8011b8e:	4602      	mov	r2, r0
 8011b90:	460b      	mov	r3, r1
 8011b92:	4640      	mov	r0, r8
 8011b94:	4649      	mov	r1, r9
 8011b96:	e60d      	b.n	80117b4 <__ieee754_pow+0x304>
 8011b98:	4a454eef 	.word	0x4a454eef
 8011b9c:	3fca7e28 	.word	0x3fca7e28
 8011ba0:	93c9db65 	.word	0x93c9db65
 8011ba4:	3fcd864a 	.word	0x3fcd864a
 8011ba8:	a91d4101 	.word	0xa91d4101
 8011bac:	3fd17460 	.word	0x3fd17460
 8011bb0:	518f264d 	.word	0x518f264d
 8011bb4:	3fd55555 	.word	0x3fd55555
 8011bb8:	db6fabff 	.word	0xdb6fabff
 8011bbc:	3fdb6db6 	.word	0x3fdb6db6
 8011bc0:	33333303 	.word	0x33333303
 8011bc4:	3fe33333 	.word	0x3fe33333
 8011bc8:	e0000000 	.word	0xe0000000
 8011bcc:	3feec709 	.word	0x3feec709
 8011bd0:	dc3a03fd 	.word	0xdc3a03fd
 8011bd4:	3feec709 	.word	0x3feec709
 8011bd8:	145b01f5 	.word	0x145b01f5
 8011bdc:	be3e2fe0 	.word	0xbe3e2fe0
 8011be0:	7ff00000 	.word	0x7ff00000
 8011be4:	43400000 	.word	0x43400000
 8011be8:	0003988e 	.word	0x0003988e
 8011bec:	000bb679 	.word	0x000bb679
 8011bf0:	08013820 	.word	0x08013820
 8011bf4:	3ff00000 	.word	0x3ff00000
 8011bf8:	40080000 	.word	0x40080000
 8011bfc:	08013840 	.word	0x08013840
 8011c00:	08013830 	.word	0x08013830
 8011c04:	2601      	movs	r6, #1
 8011c06:	e66a      	b.n	80118de <__ieee754_pow+0x42e>
 8011c08:	a39d      	add	r3, pc, #628	; (adr r3, 8011e80 <__ieee754_pow+0x9d0>)
 8011c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c0e:	4640      	mov	r0, r8
 8011c10:	4649      	mov	r1, r9
 8011c12:	f7ee fb13 	bl	800023c <__adddf3>
 8011c16:	4622      	mov	r2, r4
 8011c18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011c1c:	462b      	mov	r3, r5
 8011c1e:	4650      	mov	r0, sl
 8011c20:	4639      	mov	r1, r7
 8011c22:	f7ee fb09 	bl	8000238 <__aeabi_dsub>
 8011c26:	4602      	mov	r2, r0
 8011c28:	460b      	mov	r3, r1
 8011c2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011c2e:	f7ee ff4b 	bl	8000ac8 <__aeabi_dcmpgt>
 8011c32:	2800      	cmp	r0, #0
 8011c34:	f47f ae07 	bne.w	8011846 <__ieee754_pow+0x396>
 8011c38:	4aa3      	ldr	r2, [pc, #652]	; (8011ec8 <__ieee754_pow+0xa18>)
 8011c3a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8011c3e:	4293      	cmp	r3, r2
 8011c40:	f340 8101 	ble.w	8011e46 <__ieee754_pow+0x996>
 8011c44:	151b      	asrs	r3, r3, #20
 8011c46:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011c4a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011c4e:	fa4a f303 	asr.w	r3, sl, r3
 8011c52:	4433      	add	r3, r6
 8011c54:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011c58:	4f9c      	ldr	r7, [pc, #624]	; (8011ecc <__ieee754_pow+0xa1c>)
 8011c5a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011c5e:	4117      	asrs	r7, r2
 8011c60:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8011c64:	2000      	movs	r0, #0
 8011c66:	ea23 0107 	bic.w	r1, r3, r7
 8011c6a:	f1c2 0214 	rsb	r2, r2, #20
 8011c6e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011c72:	fa4a fa02 	asr.w	sl, sl, r2
 8011c76:	2e00      	cmp	r6, #0
 8011c78:	4602      	mov	r2, r0
 8011c7a:	460b      	mov	r3, r1
 8011c7c:	4620      	mov	r0, r4
 8011c7e:	4629      	mov	r1, r5
 8011c80:	bfb8      	it	lt
 8011c82:	f1ca 0a00 	rsblt	sl, sl, #0
 8011c86:	f7ee fad7 	bl	8000238 <__aeabi_dsub>
 8011c8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011c8e:	4642      	mov	r2, r8
 8011c90:	464b      	mov	r3, r9
 8011c92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011c96:	f7ee fad1 	bl	800023c <__adddf3>
 8011c9a:	2400      	movs	r4, #0
 8011c9c:	a37a      	add	r3, pc, #488	; (adr r3, 8011e88 <__ieee754_pow+0x9d8>)
 8011c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ca2:	4620      	mov	r0, r4
 8011ca4:	460d      	mov	r5, r1
 8011ca6:	f7ee fc7f 	bl	80005a8 <__aeabi_dmul>
 8011caa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011cae:	4606      	mov	r6, r0
 8011cb0:	460f      	mov	r7, r1
 8011cb2:	4620      	mov	r0, r4
 8011cb4:	4629      	mov	r1, r5
 8011cb6:	f7ee fabf 	bl	8000238 <__aeabi_dsub>
 8011cba:	4602      	mov	r2, r0
 8011cbc:	460b      	mov	r3, r1
 8011cbe:	4640      	mov	r0, r8
 8011cc0:	4649      	mov	r1, r9
 8011cc2:	f7ee fab9 	bl	8000238 <__aeabi_dsub>
 8011cc6:	a372      	add	r3, pc, #456	; (adr r3, 8011e90 <__ieee754_pow+0x9e0>)
 8011cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ccc:	f7ee fc6c 	bl	80005a8 <__aeabi_dmul>
 8011cd0:	a371      	add	r3, pc, #452	; (adr r3, 8011e98 <__ieee754_pow+0x9e8>)
 8011cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cd6:	4680      	mov	r8, r0
 8011cd8:	4689      	mov	r9, r1
 8011cda:	4620      	mov	r0, r4
 8011cdc:	4629      	mov	r1, r5
 8011cde:	f7ee fc63 	bl	80005a8 <__aeabi_dmul>
 8011ce2:	4602      	mov	r2, r0
 8011ce4:	460b      	mov	r3, r1
 8011ce6:	4640      	mov	r0, r8
 8011ce8:	4649      	mov	r1, r9
 8011cea:	f7ee faa7 	bl	800023c <__adddf3>
 8011cee:	4604      	mov	r4, r0
 8011cf0:	460d      	mov	r5, r1
 8011cf2:	4602      	mov	r2, r0
 8011cf4:	460b      	mov	r3, r1
 8011cf6:	4630      	mov	r0, r6
 8011cf8:	4639      	mov	r1, r7
 8011cfa:	f7ee fa9f 	bl	800023c <__adddf3>
 8011cfe:	4632      	mov	r2, r6
 8011d00:	463b      	mov	r3, r7
 8011d02:	4680      	mov	r8, r0
 8011d04:	4689      	mov	r9, r1
 8011d06:	f7ee fa97 	bl	8000238 <__aeabi_dsub>
 8011d0a:	4602      	mov	r2, r0
 8011d0c:	460b      	mov	r3, r1
 8011d0e:	4620      	mov	r0, r4
 8011d10:	4629      	mov	r1, r5
 8011d12:	f7ee fa91 	bl	8000238 <__aeabi_dsub>
 8011d16:	4642      	mov	r2, r8
 8011d18:	4606      	mov	r6, r0
 8011d1a:	460f      	mov	r7, r1
 8011d1c:	464b      	mov	r3, r9
 8011d1e:	4640      	mov	r0, r8
 8011d20:	4649      	mov	r1, r9
 8011d22:	f7ee fc41 	bl	80005a8 <__aeabi_dmul>
 8011d26:	a35e      	add	r3, pc, #376	; (adr r3, 8011ea0 <__ieee754_pow+0x9f0>)
 8011d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d2c:	4604      	mov	r4, r0
 8011d2e:	460d      	mov	r5, r1
 8011d30:	f7ee fc3a 	bl	80005a8 <__aeabi_dmul>
 8011d34:	a35c      	add	r3, pc, #368	; (adr r3, 8011ea8 <__ieee754_pow+0x9f8>)
 8011d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d3a:	f7ee fa7d 	bl	8000238 <__aeabi_dsub>
 8011d3e:	4622      	mov	r2, r4
 8011d40:	462b      	mov	r3, r5
 8011d42:	f7ee fc31 	bl	80005a8 <__aeabi_dmul>
 8011d46:	a35a      	add	r3, pc, #360	; (adr r3, 8011eb0 <__ieee754_pow+0xa00>)
 8011d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d4c:	f7ee fa76 	bl	800023c <__adddf3>
 8011d50:	4622      	mov	r2, r4
 8011d52:	462b      	mov	r3, r5
 8011d54:	f7ee fc28 	bl	80005a8 <__aeabi_dmul>
 8011d58:	a357      	add	r3, pc, #348	; (adr r3, 8011eb8 <__ieee754_pow+0xa08>)
 8011d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d5e:	f7ee fa6b 	bl	8000238 <__aeabi_dsub>
 8011d62:	4622      	mov	r2, r4
 8011d64:	462b      	mov	r3, r5
 8011d66:	f7ee fc1f 	bl	80005a8 <__aeabi_dmul>
 8011d6a:	a355      	add	r3, pc, #340	; (adr r3, 8011ec0 <__ieee754_pow+0xa10>)
 8011d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d70:	f7ee fa64 	bl	800023c <__adddf3>
 8011d74:	4622      	mov	r2, r4
 8011d76:	462b      	mov	r3, r5
 8011d78:	f7ee fc16 	bl	80005a8 <__aeabi_dmul>
 8011d7c:	4602      	mov	r2, r0
 8011d7e:	460b      	mov	r3, r1
 8011d80:	4640      	mov	r0, r8
 8011d82:	4649      	mov	r1, r9
 8011d84:	f7ee fa58 	bl	8000238 <__aeabi_dsub>
 8011d88:	4604      	mov	r4, r0
 8011d8a:	460d      	mov	r5, r1
 8011d8c:	4602      	mov	r2, r0
 8011d8e:	460b      	mov	r3, r1
 8011d90:	4640      	mov	r0, r8
 8011d92:	4649      	mov	r1, r9
 8011d94:	f7ee fc08 	bl	80005a8 <__aeabi_dmul>
 8011d98:	2200      	movs	r2, #0
 8011d9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011d9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011da2:	4620      	mov	r0, r4
 8011da4:	4629      	mov	r1, r5
 8011da6:	f7ee fa47 	bl	8000238 <__aeabi_dsub>
 8011daa:	4602      	mov	r2, r0
 8011dac:	460b      	mov	r3, r1
 8011dae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011db2:	f7ee fd23 	bl	80007fc <__aeabi_ddiv>
 8011db6:	4632      	mov	r2, r6
 8011db8:	4604      	mov	r4, r0
 8011dba:	460d      	mov	r5, r1
 8011dbc:	463b      	mov	r3, r7
 8011dbe:	4640      	mov	r0, r8
 8011dc0:	4649      	mov	r1, r9
 8011dc2:	f7ee fbf1 	bl	80005a8 <__aeabi_dmul>
 8011dc6:	4632      	mov	r2, r6
 8011dc8:	463b      	mov	r3, r7
 8011dca:	f7ee fa37 	bl	800023c <__adddf3>
 8011dce:	4602      	mov	r2, r0
 8011dd0:	460b      	mov	r3, r1
 8011dd2:	4620      	mov	r0, r4
 8011dd4:	4629      	mov	r1, r5
 8011dd6:	f7ee fa2f 	bl	8000238 <__aeabi_dsub>
 8011dda:	4642      	mov	r2, r8
 8011ddc:	464b      	mov	r3, r9
 8011dde:	f7ee fa2b 	bl	8000238 <__aeabi_dsub>
 8011de2:	4602      	mov	r2, r0
 8011de4:	460b      	mov	r3, r1
 8011de6:	2000      	movs	r0, #0
 8011de8:	4939      	ldr	r1, [pc, #228]	; (8011ed0 <__ieee754_pow+0xa20>)
 8011dea:	f7ee fa25 	bl	8000238 <__aeabi_dsub>
 8011dee:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8011df2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8011df6:	da29      	bge.n	8011e4c <__ieee754_pow+0x99c>
 8011df8:	4652      	mov	r2, sl
 8011dfa:	f000 f955 	bl	80120a8 <scalbn>
 8011dfe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011e02:	f7ff bbfe 	b.w	8011602 <__ieee754_pow+0x152>
 8011e06:	4b33      	ldr	r3, [pc, #204]	; (8011ed4 <__ieee754_pow+0xa24>)
 8011e08:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8011e0c:	429f      	cmp	r7, r3
 8011e0e:	f77f af13 	ble.w	8011c38 <__ieee754_pow+0x788>
 8011e12:	4b31      	ldr	r3, [pc, #196]	; (8011ed8 <__ieee754_pow+0xa28>)
 8011e14:	440b      	add	r3, r1
 8011e16:	4303      	orrs	r3, r0
 8011e18:	d009      	beq.n	8011e2e <__ieee754_pow+0x97e>
 8011e1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011e1e:	2200      	movs	r2, #0
 8011e20:	2300      	movs	r3, #0
 8011e22:	f7ee fe33 	bl	8000a8c <__aeabi_dcmplt>
 8011e26:	3800      	subs	r0, #0
 8011e28:	bf18      	it	ne
 8011e2a:	2001      	movne	r0, #1
 8011e2c:	e453      	b.n	80116d6 <__ieee754_pow+0x226>
 8011e2e:	4622      	mov	r2, r4
 8011e30:	462b      	mov	r3, r5
 8011e32:	f7ee fa01 	bl	8000238 <__aeabi_dsub>
 8011e36:	4642      	mov	r2, r8
 8011e38:	464b      	mov	r3, r9
 8011e3a:	f7ee fe3b 	bl	8000ab4 <__aeabi_dcmpge>
 8011e3e:	2800      	cmp	r0, #0
 8011e40:	f43f aefa 	beq.w	8011c38 <__ieee754_pow+0x788>
 8011e44:	e7e9      	b.n	8011e1a <__ieee754_pow+0x96a>
 8011e46:	f04f 0a00 	mov.w	sl, #0
 8011e4a:	e720      	b.n	8011c8e <__ieee754_pow+0x7de>
 8011e4c:	4621      	mov	r1, r4
 8011e4e:	e7d6      	b.n	8011dfe <__ieee754_pow+0x94e>
 8011e50:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011ed0 <__ieee754_pow+0xa20>
 8011e54:	f04f 0b00 	mov.w	fp, #0
 8011e58:	f7ff bbba 	b.w	80115d0 <__ieee754_pow+0x120>
 8011e5c:	f04f 0b00 	mov.w	fp, #0
 8011e60:	f04f 0c00 	mov.w	ip, #0
 8011e64:	f7ff bbb4 	b.w	80115d0 <__ieee754_pow+0x120>
 8011e68:	4640      	mov	r0, r8
 8011e6a:	4649      	mov	r1, r9
 8011e6c:	f7ff bb3d 	b.w	80114ea <__ieee754_pow+0x3a>
 8011e70:	9200      	str	r2, [sp, #0]
 8011e72:	f7ff bb89 	b.w	8011588 <__ieee754_pow+0xd8>
 8011e76:	2300      	movs	r3, #0
 8011e78:	f7ff bb73 	b.w	8011562 <__ieee754_pow+0xb2>
 8011e7c:	f3af 8000 	nop.w
 8011e80:	652b82fe 	.word	0x652b82fe
 8011e84:	3c971547 	.word	0x3c971547
 8011e88:	00000000 	.word	0x00000000
 8011e8c:	3fe62e43 	.word	0x3fe62e43
 8011e90:	fefa39ef 	.word	0xfefa39ef
 8011e94:	3fe62e42 	.word	0x3fe62e42
 8011e98:	0ca86c39 	.word	0x0ca86c39
 8011e9c:	be205c61 	.word	0xbe205c61
 8011ea0:	72bea4d0 	.word	0x72bea4d0
 8011ea4:	3e663769 	.word	0x3e663769
 8011ea8:	c5d26bf1 	.word	0xc5d26bf1
 8011eac:	3ebbbd41 	.word	0x3ebbbd41
 8011eb0:	af25de2c 	.word	0xaf25de2c
 8011eb4:	3f11566a 	.word	0x3f11566a
 8011eb8:	16bebd93 	.word	0x16bebd93
 8011ebc:	3f66c16c 	.word	0x3f66c16c
 8011ec0:	5555553e 	.word	0x5555553e
 8011ec4:	3fc55555 	.word	0x3fc55555
 8011ec8:	3fe00000 	.word	0x3fe00000
 8011ecc:	000fffff 	.word	0x000fffff
 8011ed0:	3ff00000 	.word	0x3ff00000
 8011ed4:	4090cbff 	.word	0x4090cbff
 8011ed8:	3f6f3400 	.word	0x3f6f3400

08011edc <__ieee754_sqrt>:
 8011edc:	f8df c154 	ldr.w	ip, [pc, #340]	; 8012034 <__ieee754_sqrt+0x158>
 8011ee0:	ea3c 0c01 	bics.w	ip, ip, r1
 8011ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ee8:	460a      	mov	r2, r1
 8011eea:	4606      	mov	r6, r0
 8011eec:	460d      	mov	r5, r1
 8011eee:	460c      	mov	r4, r1
 8011ef0:	4607      	mov	r7, r0
 8011ef2:	4603      	mov	r3, r0
 8011ef4:	d10f      	bne.n	8011f16 <__ieee754_sqrt+0x3a>
 8011ef6:	4602      	mov	r2, r0
 8011ef8:	460b      	mov	r3, r1
 8011efa:	f7ee fb55 	bl	80005a8 <__aeabi_dmul>
 8011efe:	4602      	mov	r2, r0
 8011f00:	460b      	mov	r3, r1
 8011f02:	4630      	mov	r0, r6
 8011f04:	4629      	mov	r1, r5
 8011f06:	f7ee f999 	bl	800023c <__adddf3>
 8011f0a:	4606      	mov	r6, r0
 8011f0c:	460d      	mov	r5, r1
 8011f0e:	4630      	mov	r0, r6
 8011f10:	4629      	mov	r1, r5
 8011f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f16:	2900      	cmp	r1, #0
 8011f18:	dc0e      	bgt.n	8011f38 <__ieee754_sqrt+0x5c>
 8011f1a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8011f1e:	ea5c 0707 	orrs.w	r7, ip, r7
 8011f22:	d0f4      	beq.n	8011f0e <__ieee754_sqrt+0x32>
 8011f24:	b141      	cbz	r1, 8011f38 <__ieee754_sqrt+0x5c>
 8011f26:	4602      	mov	r2, r0
 8011f28:	460b      	mov	r3, r1
 8011f2a:	f7ee f985 	bl	8000238 <__aeabi_dsub>
 8011f2e:	4602      	mov	r2, r0
 8011f30:	460b      	mov	r3, r1
 8011f32:	f7ee fc63 	bl	80007fc <__aeabi_ddiv>
 8011f36:	e7e8      	b.n	8011f0a <__ieee754_sqrt+0x2e>
 8011f38:	1521      	asrs	r1, r4, #20
 8011f3a:	d074      	beq.n	8012026 <__ieee754_sqrt+0x14a>
 8011f3c:	07cc      	lsls	r4, r1, #31
 8011f3e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8011f42:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8011f46:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8011f4a:	bf5e      	ittt	pl
 8011f4c:	0fd9      	lsrpl	r1, r3, #31
 8011f4e:	005b      	lslpl	r3, r3, #1
 8011f50:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8011f54:	2400      	movs	r4, #0
 8011f56:	0fd9      	lsrs	r1, r3, #31
 8011f58:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8011f5c:	107f      	asrs	r7, r7, #1
 8011f5e:	005b      	lsls	r3, r3, #1
 8011f60:	2516      	movs	r5, #22
 8011f62:	4620      	mov	r0, r4
 8011f64:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011f68:	1846      	adds	r6, r0, r1
 8011f6a:	4296      	cmp	r6, r2
 8011f6c:	bfde      	ittt	le
 8011f6e:	1b92      	suble	r2, r2, r6
 8011f70:	1870      	addle	r0, r6, r1
 8011f72:	1864      	addle	r4, r4, r1
 8011f74:	0052      	lsls	r2, r2, #1
 8011f76:	3d01      	subs	r5, #1
 8011f78:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8011f7c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8011f80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011f84:	d1f0      	bne.n	8011f68 <__ieee754_sqrt+0x8c>
 8011f86:	4629      	mov	r1, r5
 8011f88:	f04f 0e20 	mov.w	lr, #32
 8011f8c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8011f90:	4282      	cmp	r2, r0
 8011f92:	eb06 0c05 	add.w	ip, r6, r5
 8011f96:	dc02      	bgt.n	8011f9e <__ieee754_sqrt+0xc2>
 8011f98:	d113      	bne.n	8011fc2 <__ieee754_sqrt+0xe6>
 8011f9a:	459c      	cmp	ip, r3
 8011f9c:	d811      	bhi.n	8011fc2 <__ieee754_sqrt+0xe6>
 8011f9e:	f1bc 0f00 	cmp.w	ip, #0
 8011fa2:	eb0c 0506 	add.w	r5, ip, r6
 8011fa6:	da43      	bge.n	8012030 <__ieee754_sqrt+0x154>
 8011fa8:	2d00      	cmp	r5, #0
 8011faa:	db41      	blt.n	8012030 <__ieee754_sqrt+0x154>
 8011fac:	f100 0801 	add.w	r8, r0, #1
 8011fb0:	1a12      	subs	r2, r2, r0
 8011fb2:	459c      	cmp	ip, r3
 8011fb4:	bf88      	it	hi
 8011fb6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8011fba:	eba3 030c 	sub.w	r3, r3, ip
 8011fbe:	4431      	add	r1, r6
 8011fc0:	4640      	mov	r0, r8
 8011fc2:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8011fc6:	f1be 0e01 	subs.w	lr, lr, #1
 8011fca:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8011fce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011fd2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8011fd6:	d1db      	bne.n	8011f90 <__ieee754_sqrt+0xb4>
 8011fd8:	4313      	orrs	r3, r2
 8011fda:	d006      	beq.n	8011fea <__ieee754_sqrt+0x10e>
 8011fdc:	1c48      	adds	r0, r1, #1
 8011fde:	bf13      	iteet	ne
 8011fe0:	3101      	addne	r1, #1
 8011fe2:	3401      	addeq	r4, #1
 8011fe4:	4671      	moveq	r1, lr
 8011fe6:	f021 0101 	bicne.w	r1, r1, #1
 8011fea:	1063      	asrs	r3, r4, #1
 8011fec:	0849      	lsrs	r1, r1, #1
 8011fee:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8011ff2:	07e2      	lsls	r2, r4, #31
 8011ff4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8011ff8:	bf48      	it	mi
 8011ffa:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8011ffe:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8012002:	460e      	mov	r6, r1
 8012004:	e783      	b.n	8011f0e <__ieee754_sqrt+0x32>
 8012006:	0ada      	lsrs	r2, r3, #11
 8012008:	3815      	subs	r0, #21
 801200a:	055b      	lsls	r3, r3, #21
 801200c:	2a00      	cmp	r2, #0
 801200e:	d0fa      	beq.n	8012006 <__ieee754_sqrt+0x12a>
 8012010:	02d5      	lsls	r5, r2, #11
 8012012:	d50a      	bpl.n	801202a <__ieee754_sqrt+0x14e>
 8012014:	f1c1 0420 	rsb	r4, r1, #32
 8012018:	fa23 f404 	lsr.w	r4, r3, r4
 801201c:	1e4d      	subs	r5, r1, #1
 801201e:	408b      	lsls	r3, r1
 8012020:	4322      	orrs	r2, r4
 8012022:	1b41      	subs	r1, r0, r5
 8012024:	e78a      	b.n	8011f3c <__ieee754_sqrt+0x60>
 8012026:	4608      	mov	r0, r1
 8012028:	e7f0      	b.n	801200c <__ieee754_sqrt+0x130>
 801202a:	0052      	lsls	r2, r2, #1
 801202c:	3101      	adds	r1, #1
 801202e:	e7ef      	b.n	8012010 <__ieee754_sqrt+0x134>
 8012030:	4680      	mov	r8, r0
 8012032:	e7bd      	b.n	8011fb0 <__ieee754_sqrt+0xd4>
 8012034:	7ff00000 	.word	0x7ff00000

08012038 <with_errno>:
 8012038:	b570      	push	{r4, r5, r6, lr}
 801203a:	4604      	mov	r4, r0
 801203c:	460d      	mov	r5, r1
 801203e:	4616      	mov	r6, r2
 8012040:	f7fd fe42 	bl	800fcc8 <__errno>
 8012044:	4629      	mov	r1, r5
 8012046:	6006      	str	r6, [r0, #0]
 8012048:	4620      	mov	r0, r4
 801204a:	bd70      	pop	{r4, r5, r6, pc}

0801204c <xflow>:
 801204c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801204e:	4615      	mov	r5, r2
 8012050:	461c      	mov	r4, r3
 8012052:	b180      	cbz	r0, 8012076 <xflow+0x2a>
 8012054:	4610      	mov	r0, r2
 8012056:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801205a:	e9cd 0100 	strd	r0, r1, [sp]
 801205e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012062:	4628      	mov	r0, r5
 8012064:	4621      	mov	r1, r4
 8012066:	f7ee fa9f 	bl	80005a8 <__aeabi_dmul>
 801206a:	2222      	movs	r2, #34	; 0x22
 801206c:	b003      	add	sp, #12
 801206e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012072:	f7ff bfe1 	b.w	8012038 <with_errno>
 8012076:	4610      	mov	r0, r2
 8012078:	4619      	mov	r1, r3
 801207a:	e7ee      	b.n	801205a <xflow+0xe>

0801207c <__math_uflow>:
 801207c:	2200      	movs	r2, #0
 801207e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8012082:	f7ff bfe3 	b.w	801204c <xflow>

08012086 <__math_oflow>:
 8012086:	2200      	movs	r2, #0
 8012088:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801208c:	f7ff bfde 	b.w	801204c <xflow>

08012090 <fabs>:
 8012090:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012094:	4770      	bx	lr

08012096 <finite>:
 8012096:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 801209a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801209e:	0fc0      	lsrs	r0, r0, #31
 80120a0:	4770      	bx	lr
 80120a2:	0000      	movs	r0, r0
 80120a4:	0000      	movs	r0, r0
	...

080120a8 <scalbn>:
 80120a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120aa:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80120ae:	4604      	mov	r4, r0
 80120b0:	460d      	mov	r5, r1
 80120b2:	4617      	mov	r7, r2
 80120b4:	460b      	mov	r3, r1
 80120b6:	b996      	cbnz	r6, 80120de <scalbn+0x36>
 80120b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80120bc:	4303      	orrs	r3, r0
 80120be:	d039      	beq.n	8012134 <scalbn+0x8c>
 80120c0:	4b33      	ldr	r3, [pc, #204]	; (8012190 <scalbn+0xe8>)
 80120c2:	2200      	movs	r2, #0
 80120c4:	f7ee fa70 	bl	80005a8 <__aeabi_dmul>
 80120c8:	4b32      	ldr	r3, [pc, #200]	; (8012194 <scalbn+0xec>)
 80120ca:	429f      	cmp	r7, r3
 80120cc:	4604      	mov	r4, r0
 80120ce:	460d      	mov	r5, r1
 80120d0:	da0f      	bge.n	80120f2 <scalbn+0x4a>
 80120d2:	a32b      	add	r3, pc, #172	; (adr r3, 8012180 <scalbn+0xd8>)
 80120d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120d8:	f7ee fa66 	bl	80005a8 <__aeabi_dmul>
 80120dc:	e006      	b.n	80120ec <scalbn+0x44>
 80120de:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80120e2:	4296      	cmp	r6, r2
 80120e4:	d10a      	bne.n	80120fc <scalbn+0x54>
 80120e6:	4602      	mov	r2, r0
 80120e8:	f7ee f8a8 	bl	800023c <__adddf3>
 80120ec:	4604      	mov	r4, r0
 80120ee:	460d      	mov	r5, r1
 80120f0:	e020      	b.n	8012134 <scalbn+0x8c>
 80120f2:	460b      	mov	r3, r1
 80120f4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80120f8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80120fc:	19b9      	adds	r1, r7, r6
 80120fe:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8012102:	4291      	cmp	r1, r2
 8012104:	dd0e      	ble.n	8012124 <scalbn+0x7c>
 8012106:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 801210a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 801210e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8012112:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8012116:	a31c      	add	r3, pc, #112	; (adr r3, 8012188 <scalbn+0xe0>)
 8012118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801211c:	481e      	ldr	r0, [pc, #120]	; (8012198 <scalbn+0xf0>)
 801211e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8012122:	e7d9      	b.n	80120d8 <scalbn+0x30>
 8012124:	2900      	cmp	r1, #0
 8012126:	dd08      	ble.n	801213a <scalbn+0x92>
 8012128:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801212c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012130:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8012134:	4620      	mov	r0, r4
 8012136:	4629      	mov	r1, r5
 8012138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801213a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 801213e:	da12      	bge.n	8012166 <scalbn+0xbe>
 8012140:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012144:	429f      	cmp	r7, r3
 8012146:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 801214a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 801214e:	dcdc      	bgt.n	801210a <scalbn+0x62>
 8012150:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8012154:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8012158:	a309      	add	r3, pc, #36	; (adr r3, 8012180 <scalbn+0xd8>)
 801215a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801215e:	480f      	ldr	r0, [pc, #60]	; (801219c <scalbn+0xf4>)
 8012160:	f041 011f 	orr.w	r1, r1, #31
 8012164:	e7b8      	b.n	80120d8 <scalbn+0x30>
 8012166:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801216a:	3136      	adds	r1, #54	; 0x36
 801216c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012170:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8012174:	4620      	mov	r0, r4
 8012176:	4b0a      	ldr	r3, [pc, #40]	; (80121a0 <scalbn+0xf8>)
 8012178:	4629      	mov	r1, r5
 801217a:	2200      	movs	r2, #0
 801217c:	e7ac      	b.n	80120d8 <scalbn+0x30>
 801217e:	bf00      	nop
 8012180:	c2f8f359 	.word	0xc2f8f359
 8012184:	01a56e1f 	.word	0x01a56e1f
 8012188:	8800759c 	.word	0x8800759c
 801218c:	7e37e43c 	.word	0x7e37e43c
 8012190:	43500000 	.word	0x43500000
 8012194:	ffff3cb0 	.word	0xffff3cb0
 8012198:	8800759c 	.word	0x8800759c
 801219c:	c2f8f359 	.word	0xc2f8f359
 80121a0:	3c900000 	.word	0x3c900000

080121a4 <_init>:
 80121a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121a6:	bf00      	nop
 80121a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80121aa:	bc08      	pop	{r3}
 80121ac:	469e      	mov	lr, r3
 80121ae:	4770      	bx	lr

080121b0 <_fini>:
 80121b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121b2:	bf00      	nop
 80121b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80121b6:	bc08      	pop	{r3}
 80121b8:	469e      	mov	lr, r3
 80121ba:	4770      	bx	lr

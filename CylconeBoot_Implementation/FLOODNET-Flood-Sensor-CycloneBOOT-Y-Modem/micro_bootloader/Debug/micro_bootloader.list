
micro_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059f0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .code_in_ram  000000a8  08005b30  08005b30  00015b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000076c  08005bd8  08005bd8  00015bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08006344  08006344  000200e8  2**0
                  CONTENTS
  5 .ARM          00000008  08006344  08006344  00016344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800634c  0800634c  000200e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800634c  0800634c  0001634c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08006350  08006350  00016350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000068  20000080  08006354  00020080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000338  200000e8  080063bc  000200e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000420  080063bc  00020420  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020112  2**0
                  CONTENTS, READONLY
 14 .debug_info   00024de7  00000000  00000000  00020155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005667  00000000  00000000  00044f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 0000b0aa  00000000  00000000  0004a5a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000012f8  00000000  00000000  00055650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001093  00000000  00000000  00056948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0000693f  00000000  00000000  000579db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000289ef  00000000  00000000  0005e31a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000b2a65  00000000  00000000  00086d09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00003920  00000000  00000000  00139770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 000000ba  00000000  00000000  0013d090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000e8 	.word	0x200000e8
 800015c:	00000000 	.word	0x00000000
 8000160:	08005b18 	.word	0x08005b18

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000ec 	.word	0x200000ec
 800017c:	08005b18 	.word	0x08005b18

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002a4:	f080 811b 	bcs.w	80004de <__udivmoddi4+0x28e>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8118 	bls.w	80004de <__udivmoddi4+0x28e>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d2:	f080 8106 	bcs.w	80004e2 <__udivmoddi4+0x292>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8103 	bls.w	80004e2 <__udivmoddi4+0x292>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ec 	beq.w	80004d8 <__udivmoddi4+0x288>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f7 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 808f 	bne.w	800045e <__udivmoddi4+0x20e>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80ca 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80ba 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	4323      	orrs	r3, r4
 80003c2:	fa00 f901 	lsl.w	r9, r0, r1
 80003c6:	ea4f 401c 	mov.w	r0, ip, lsr #16
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fbb5 f8f0 	udiv	r8, r5, r0
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	fb00 5518 	mls	r5, r0, r8, r5
 80003d8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003dc:	fb08 f50e 	mul.w	r5, r8, lr
 80003e0:	42a5      	cmp	r5, r4
 80003e2:	fa02 f201 	lsl.w	r2, r2, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f0 	udiv	r3, r4, r0
 8000408:	fb00 4413 	mls	r4, r0, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800042e:	fba0 8302 	umull	r8, r3, r0, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	429c      	cmp	r4, r3
 8000438:	46c6      	mov	lr, r8
 800043a:	461d      	mov	r5, r3
 800043c:	d355      	bcc.n	80004ea <__udivmoddi4+0x29a>
 800043e:	d052      	beq.n	80004e6 <__udivmoddi4+0x296>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb9 030e 	subs.w	r3, r9, lr
 8000446:	eb64 0405 	sbc.w	r4, r4, r5
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40cb      	lsrs	r3, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	431f      	orrs	r7, r3
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	2100      	movs	r1, #0
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c3 0120 	rsb	r1, r3, #32
 8000462:	fa02 fc03 	lsl.w	ip, r2, r3
 8000466:	fa20 f201 	lsr.w	r2, r0, r1
 800046a:	fa25 f101 	lsr.w	r1, r5, r1
 800046e:	409d      	lsls	r5, r3
 8000470:	432a      	orrs	r2, r5
 8000472:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000476:	fa1f fe8c 	uxth.w	lr, ip
 800047a:	fbb1 f0f7 	udiv	r0, r1, r7
 800047e:	fb07 1510 	mls	r5, r7, r0, r1
 8000482:	0c11      	lsrs	r1, r2, #16
 8000484:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000488:	fb00 f50e 	mul.w	r5, r0, lr
 800048c:	428d      	cmp	r5, r1
 800048e:	fa04 f403 	lsl.w	r4, r4, r3
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428d      	cmp	r5, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3802      	subs	r0, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1b49      	subs	r1, r1, r5
 80004a8:	b292      	uxth	r2, r2
 80004aa:	fbb1 f5f7 	udiv	r5, r1, r7
 80004ae:	fb07 1115 	mls	r1, r7, r5, r1
 80004b2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b6:	fb05 f10e 	mul.w	r1, r5, lr
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x280>
 80004be:	eb1c 0202 	adds.w	r2, ip, r2
 80004c2:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c6:	d216      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c8:	4291      	cmp	r1, r2
 80004ca:	d914      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004cc:	3d02      	subs	r5, #2
 80004ce:	4462      	add	r2, ip
 80004d0:	1a52      	subs	r2, r2, r1
 80004d2:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d6:	e739      	b.n	800034c <__udivmoddi4+0xfc>
 80004d8:	4631      	mov	r1, r6
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004de:	4639      	mov	r1, r7
 80004e0:	e6e7      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e2:	4610      	mov	r0, r2
 80004e4:	e6fc      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e6:	45c1      	cmp	r9, r8
 80004e8:	d2aa      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ea:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ee:	eb63 050c 	sbc.w	r5, r3, ip
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4645      	mov	r5, r8
 80004f8:	e7ea      	b.n	80004d0 <__udivmoddi4+0x280>
 80004fa:	4603      	mov	r3, r0
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4640      	mov	r0, r8
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	46d0      	mov	r8, sl
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3d02      	subs	r5, #2
 8000508:	4462      	add	r2, ip
 800050a:	e733      	b.n	8000374 <__udivmoddi4+0x124>
 800050c:	4608      	mov	r0, r1
 800050e:	e70b      	b.n	8000328 <__udivmoddi4+0xd8>
 8000510:	4464      	add	r4, ip
 8000512:	3802      	subs	r0, #2
 8000514:	e743      	b.n	800039e <__udivmoddi4+0x14e>
 8000516:	bf00      	nop

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <osSuspendAllTasks>:
 **/

void osSuspendAllTasks(void)
{
   //Not implemented
}
 800051c:	4770      	bx	lr

0800051e <osResumeAllTasks>:
 **/

void osResumeAllTasks(void)
{
   //Not implemented
}
 800051e:	4770      	bx	lr

08000520 <osAllocMem>:
 * @return A pointer to the allocated memory block or NULL if
 *   there is insufficient memory available
 **/

__weak_func void *osAllocMem(size_t size)
{
 8000520:	b508      	push	{r3, lr}
   void *p;

   //Allocate a memory block
   p = malloc(size);
 8000522:	f004 fb57 	bl	8004bd4 <malloc>
   TRACE_DEBUG("Allocating %" PRIuSIZE " bytes at 0x%08" PRIXPTR "\r\n",
      size, (uintptr_t) p);

   //Return a pointer to the newly allocated memory block
   return p;
}
 8000526:	bd08      	pop	{r3, pc}

08000528 <osFreeMem>:
 **/

__weak_func void osFreeMem(void *p)
{
   //Make sure the pointer is valid
   if(p != NULL)
 8000528:	b118      	cbz	r0, 8000532 <osFreeMem+0xa>
{
 800052a:	b508      	push	{r3, lr}
   {
      //Debug message
      TRACE_DEBUG("Freeing memory at 0x%08" PRIXPTR "\r\n", (uintptr_t) p);

      //Free memory block
      free(p);
 800052c:	f004 fb5a 	bl	8004be4 <free>
   }
}
 8000530:	bd08      	pop	{r3, pc}
 8000532:	4770      	bx	lr

08000534 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 8000534:	b510      	push	{r4, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	4604      	mov	r4, r0
	uint8_t c;

	c = (uint8_t) ch;
 800053a:	f88d 0007 	strb.w	r0, [sp, #7]

	if (HAL_UART_Transmit(&huart2, &c, 1, 100) == HAL_OK)
 800053e:	2364      	movs	r3, #100	; 0x64
 8000540:	2201      	movs	r2, #1
 8000542:	f10d 0107 	add.w	r1, sp, #7
 8000546:	4805      	ldr	r0, [pc, #20]	; (800055c <__io_putchar+0x28>)
 8000548:	f004 f8a4 	bl	8004694 <HAL_UART_Transmit>
		return ch;
	else
		return -1;
 800054c:	2800      	cmp	r0, #0
	return -1;
}
 800054e:	bf0c      	ite	eq
 8000550:	4620      	moveq	r0, r4
 8000552:	f04f 30ff 	movne.w	r0, #4294967295
 8000556:	b002      	add	sp, #8
 8000558:	bd10      	pop	{r4, pc}
 800055a:	bf00      	nop
 800055c:	20000210 	.word	0x20000210

08000560 <ledTask>:

/**
 * @brief Led task routine (for debug purpose)
 **/

void ledTask(void) {
 8000560:	b508      	push	{r3, lr}
	if ((uint32_t) (systemTicks - ledTimestamp) >= ledDelay) {
 8000562:	4b12      	ldr	r3, [pc, #72]	; (80005ac <ledTask+0x4c>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4a12      	ldr	r2, [pc, #72]	; (80005b0 <ledTask+0x50>)
 8000568:	6812      	ldr	r2, [r2, #0]
 800056a:	1a9b      	subs	r3, r3, r2
 800056c:	4a11      	ldr	r2, [pc, #68]	; (80005b4 <ledTask+0x54>)
 800056e:	6812      	ldr	r2, [r2, #0]
 8000570:	4293      	cmp	r3, r2
 8000572:	d311      	bcc.n	8000598 <ledTask+0x38>
		//Toggle LED state
		if (ledState == 0) {
 8000574:	4b10      	ldr	r3, [pc, #64]	; (80005b8 <ledTask+0x58>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	b97b      	cbnz	r3, 800059a <ledTask+0x3a>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800057a:	2201      	movs	r2, #1
 800057c:	2140      	movs	r1, #64	; 0x40
 800057e:	480f      	ldr	r0, [pc, #60]	; (80005bc <ledTask+0x5c>)
 8000580:	f001 fcc0 	bl	8001f04 <HAL_GPIO_WritePin>
			ledState = 1;
			ledDelay = 100;
 8000584:	2101      	movs	r1, #1
 8000586:	2264      	movs	r2, #100	; 0x64
			ledState = 1;
 8000588:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <ledTask+0x58>)
 800058a:	6019      	str	r1, [r3, #0]
			ledDelay = 100;
 800058c:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <ledTask+0x54>)
 800058e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
			ledState = 0;
			ledDelay = 900;
		}

		ledTimestamp = systemTicks;
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <ledTask+0x4c>)
 8000592:	681a      	ldr	r2, [r3, #0]
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <ledTask+0x50>)
 8000596:	601a      	str	r2, [r3, #0]
	}
}
 8000598:	bd08      	pop	{r3, pc}
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	2140      	movs	r1, #64	; 0x40
 800059e:	4807      	ldr	r0, [pc, #28]	; (80005bc <ledTask+0x5c>)
 80005a0:	f001 fcb0 	bl	8001f04 <HAL_GPIO_WritePin>
 80005a4:	2100      	movs	r1, #0
 80005a6:	f44f 7261 	mov.w	r2, #900	; 0x384
 80005aa:	e7ed      	b.n	8000588 <ledTask+0x28>
 80005ac:	20000104 	.word	0x20000104
 80005b0:	200002ac 	.word	0x200002ac
 80005b4:	200002a4 	.word	0x200002a4
 80005b8:	200002a8 	.word	0x200002a8
 80005bc:	48000400 	.word	0x48000400

080005c0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005c0:	b510      	push	{r4, lr}
 80005c2:	b09a      	sub	sp, #104	; 0x68
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005c4:	2248      	movs	r2, #72	; 0x48
 80005c6:	2100      	movs	r1, #0
 80005c8:	a808      	add	r0, sp, #32
 80005ca:	f004 fdc3 	bl	8005154 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005ce:	2400      	movs	r4, #0
 80005d0:	9402      	str	r4, [sp, #8]
 80005d2:	9403      	str	r4, [sp, #12]
 80005d4:	9404      	str	r4, [sp, #16]
 80005d6:	9405      	str	r4, [sp, #20]
 80005d8:	9406      	str	r4, [sp, #24]
 80005da:	9407      	str	r4, [sp, #28]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80005dc:	f001 fc98 	bl	8001f10 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80005e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80005e4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80005e8:	f023 0318 	bic.w	r3, r3, #24
 80005ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80005f4:	6813      	ldr	r3, [r2, #0]
 80005f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80005fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005fe:	6013      	str	r3, [r2, #0]
 8000600:	6813      	ldr	r3, [r2, #0]
 8000602:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000606:	9301      	str	r3, [sp, #4]
 8000608:	9b01      	ldr	r3, [sp, #4]

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 800060a:	232e      	movs	r3, #46	; 0x2e
 800060c:	9308      	str	r3, [sp, #32]
			| RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800060e:	2381      	movs	r3, #129	; 0x81
 8000610:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000612:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000616:	930c      	str	r3, [sp, #48]	; 0x30
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000618:	2301      	movs	r3, #1
 800061a:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061c:	2240      	movs	r2, #64	; 0x40
 800061e:	920d      	str	r2, [sp, #52]	; 0x34
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000620:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000622:	22b0      	movs	r2, #176	; 0xb0
 8000624:	9212      	str	r2, [sp, #72]	; 0x48
	RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8000626:	940f      	str	r4, [sp, #60]	; 0x3c
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000628:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800062a:	9413      	str	r4, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800062c:	a808      	add	r0, sp, #32
 800062e:	f001 fd95 	bl	800215c <HAL_RCC_OscConfig>
 8000632:	b970      	cbnz	r0, 8000652 <SystemClock_Config+0x92>
		Error_Handler();
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3 | RCC_CLOCKTYPE_HCLK
 8000634:	234f      	movs	r3, #79	; 0x4f
 8000636:	9302      	str	r3, [sp, #8]
			| RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000638:	2300      	movs	r3, #0
 800063a:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063c:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800063e:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000640:	9306      	str	r3, [sp, #24]
	RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000642:	9307      	str	r3, [sp, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000644:	2102      	movs	r1, #2
 8000646:	a802      	add	r0, sp, #8
 8000648:	f002 f8b4 	bl	80027b4 <HAL_RCC_ClockConfig>
 800064c:	b918      	cbnz	r0, 8000656 <SystemClock_Config+0x96>
		Error_Handler();
	}
}
 800064e:	b01a      	add	sp, #104	; 0x68
 8000650:	bd10      	pop	{r4, pc}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000652:	b672      	cpsid	i
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000654:	e7fe      	b.n	8000654 <SystemClock_Config+0x94>
 8000656:	b672      	cpsid	i
 8000658:	e7fe      	b.n	8000658 <SystemClock_Config+0x98>
	...

0800065c <main>:
int main(void) {
 800065c:	b570      	push	{r4, r5, r6, lr}
 800065e:	b094      	sub	sp, #80	; 0x50
	HAL_Init();
 8000660:	f001 f966 	bl	8001930 <HAL_Init>
	SystemClock_Config();
 8000664:	f7ff ffac 	bl	80005c0 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000668:	2400      	movs	r4, #0
 800066a:	9409      	str	r4, [sp, #36]	; 0x24
 800066c:	940a      	str	r4, [sp, #40]	; 0x28
 800066e:	940b      	str	r4, [sp, #44]	; 0x2c
 8000670:	940c      	str	r4, [sp, #48]	; 0x30
 8000672:	940d      	str	r4, [sp, #52]	; 0x34
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000674:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000678:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800067a:	f042 0201 	orr.w	r2, r2, #1
 800067e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000680:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000682:	f002 0201 	and.w	r2, r2, #1
 8000686:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000688:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800068a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800068c:	f042 0204 	orr.w	r2, r2, #4
 8000690:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000692:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000694:	f002 0204 	and.w	r2, r2, #4
 8000698:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800069a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800069c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800069e:	f042 0202 	orr.w	r2, r2, #2
 80006a2:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	f003 0302 	and.w	r3, r3, #2
 80006aa:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 80006ac:	9b03      	ldr	r3, [sp, #12]
	HAL_GPIO_WritePin(GPIOB, FLASH_CS_Pin | LED_Pin, GPIO_PIN_RESET);
 80006ae:	4e88      	ldr	r6, [pc, #544]	; (80008d0 <main+0x274>)
 80006b0:	4622      	mov	r2, r4
 80006b2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80006b6:	4630      	mov	r0, r6
 80006b8:	f001 fc24 	bl	8001f04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EXT_PWR_GPIO_Port, EXT_PWR_Pin, GPIO_PIN_RESET);
 80006bc:	4622      	mov	r2, r4
 80006be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c6:	f001 fc1d 	bl	8001f04 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = FLASH_CS_Pin | LED_Pin;
 80006ca:	f44f 7310 	mov.w	r3, #576	; 0x240
 80006ce:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d0:	2501      	movs	r5, #1
 80006d2:	950a      	str	r5, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	940b      	str	r4, [sp, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d6:	940c      	str	r4, [sp, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d8:	a909      	add	r1, sp, #36	; 0x24
 80006da:	4630      	mov	r0, r6
 80006dc:	f001 fb4a 	bl	8001d74 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = EXT_PWR_Pin;
 80006e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006e4:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e6:	950a      	str	r5, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	940b      	str	r4, [sp, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ea:	940c      	str	r4, [sp, #48]	; 0x30
	HAL_GPIO_Init(EXT_PWR_GPIO_Port, &GPIO_InitStruct);
 80006ec:	a909      	add	r1, sp, #36	; 0x24
 80006ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f2:	f001 fb3f 	bl	8001d74 <HAL_GPIO_Init>
	huart2.Instance = USART2;
 80006f6:	4877      	ldr	r0, [pc, #476]	; (80008d4 <main+0x278>)
 80006f8:	4b77      	ldr	r3, [pc, #476]	; (80008d8 <main+0x27c>)
 80006fa:	6003      	str	r3, [r0, #0]
	huart2.Init.BaudRate = 115200;
 80006fc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000700:	6043      	str	r3, [r0, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000702:	6084      	str	r4, [r0, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000704:	60c4      	str	r4, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000706:	6104      	str	r4, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000708:	230c      	movs	r3, #12
 800070a:	6143      	str	r3, [r0, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070c:	6184      	str	r4, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800070e:	61c4      	str	r4, [r0, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000710:	6204      	str	r4, [r0, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000712:	6244      	str	r4, [r0, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000714:	6284      	str	r4, [r0, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000716:	f004 f861 	bl	80047dc <HAL_UART_Init>
 800071a:	2800      	cmp	r0, #0
 800071c:	f040 80b8 	bne.w	8000890 <main+0x234>
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8000720:	2100      	movs	r1, #0
 8000722:	486c      	ldr	r0, [pc, #432]	; (80008d4 <main+0x278>)
 8000724:	f004 f8d6 	bl	80048d4 <HAL_UARTEx_SetTxFifoThreshold>
 8000728:	2800      	cmp	r0, #0
 800072a:	f040 80b3 	bne.w	8000894 <main+0x238>
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 800072e:	2100      	movs	r1, #0
 8000730:	4868      	ldr	r0, [pc, #416]	; (80008d4 <main+0x278>)
 8000732:	f004 f8f4 	bl	800491e <HAL_UARTEx_SetRxFifoThreshold>
 8000736:	2800      	cmp	r0, #0
 8000738:	f040 80ae 	bne.w	8000898 <main+0x23c>
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 800073c:	4865      	ldr	r0, [pc, #404]	; (80008d4 <main+0x278>)
 800073e:	f004 f8aa 	bl	8004896 <HAL_UARTEx_DisableFifoMode>
 8000742:	2800      	cmp	r0, #0
 8000744:	f040 80aa 	bne.w	800089c <main+0x240>
	RTC_TimeTypeDef sTime = { 0 };
 8000748:	2400      	movs	r4, #0
 800074a:	9404      	str	r4, [sp, #16]
 800074c:	9405      	str	r4, [sp, #20]
 800074e:	9406      	str	r4, [sp, #24]
 8000750:	9407      	str	r4, [sp, #28]
 8000752:	9408      	str	r4, [sp, #32]
	RTC_DateTypeDef sDate = { 0 };
 8000754:	9400      	str	r4, [sp, #0]
	RTC_AlarmTypeDef sAlarm = { 0 };
 8000756:	222c      	movs	r2, #44	; 0x2c
 8000758:	4621      	mov	r1, r4
 800075a:	a809      	add	r0, sp, #36	; 0x24
 800075c:	f004 fcfa 	bl	8005154 <memset>
	hrtc.Instance = RTC;
 8000760:	485e      	ldr	r0, [pc, #376]	; (80008dc <main+0x280>)
 8000762:	4b5f      	ldr	r3, [pc, #380]	; (80008e0 <main+0x284>)
 8000764:	6003      	str	r3, [r0, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000766:	6044      	str	r4, [r0, #4]
	hrtc.Init.AsynchPrediv = 127;
 8000768:	237f      	movs	r3, #127	; 0x7f
 800076a:	6083      	str	r3, [r0, #8]
	hrtc.Init.SynchPrediv = 255;
 800076c:	23ff      	movs	r3, #255	; 0xff
 800076e:	60c3      	str	r3, [r0, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000770:	6104      	str	r4, [r0, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000772:	6144      	str	r4, [r0, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000774:	6184      	str	r4, [r0, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000776:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800077a:	61c3      	str	r3, [r0, #28]
	hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800077c:	6204      	str	r4, [r0, #32]
	hrtc.Init.BinMode = RTC_BINARY_NONE;
 800077e:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8000780:	f002 faf4 	bl	8002d6c <HAL_RTC_Init>
 8000784:	2800      	cmp	r0, #0
 8000786:	f040 808b 	bne.w	80008a0 <main+0x244>
	sTime.Hours = 0x0;
 800078a:	2300      	movs	r3, #0
 800078c:	f88d 3010 	strb.w	r3, [sp, #16]
	sTime.Minutes = 0x0;
 8000790:	f88d 3011 	strb.w	r3, [sp, #17]
	sTime.Seconds = 0x0;
 8000794:	f88d 3012 	strb.w	r3, [sp, #18]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000798:	9307      	str	r3, [sp, #28]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800079a:	9308      	str	r3, [sp, #32]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 800079c:	2201      	movs	r2, #1
 800079e:	a904      	add	r1, sp, #16
 80007a0:	484e      	ldr	r0, [pc, #312]	; (80008dc <main+0x280>)
 80007a2:	f002 fb4b 	bl	8002e3c <HAL_RTC_SetTime>
 80007a6:	2800      	cmp	r0, #0
 80007a8:	d17c      	bne.n	80008a4 <main+0x248>
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80007aa:	2201      	movs	r2, #1
 80007ac:	f88d 2000 	strb.w	r2, [sp]
	sDate.Month = RTC_MONTH_JANUARY;
 80007b0:	f88d 2001 	strb.w	r2, [sp, #1]
	sDate.Date = 0x1;
 80007b4:	f88d 2002 	strb.w	r2, [sp, #2]
	sDate.Year = 0x0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	f88d 3003 	strb.w	r3, [sp, #3]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 80007be:	4669      	mov	r1, sp
 80007c0:	4846      	ldr	r0, [pc, #280]	; (80008dc <main+0x280>)
 80007c2:	f002 fba9 	bl	8002f18 <HAL_RTC_SetDate>
 80007c6:	2800      	cmp	r0, #0
 80007c8:	d16e      	bne.n	80008a8 <main+0x24c>
	sAlarm.AlarmTime.Hours = 0x0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	sAlarm.AlarmTime.Minutes = 0x0;
 80007d0:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	sAlarm.AlarmTime.Seconds = 0x0;
 80007d4:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	sAlarm.AlarmTime.SubSeconds = 0x0;
 80007d8:	930a      	str	r3, [sp, #40]	; 0x28
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007da:	930c      	str	r3, [sp, #48]	; 0x30
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007dc:	930d      	str	r3, [sp, #52]	; 0x34
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80007de:	930e      	str	r3, [sp, #56]	; 0x38
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80007e0:	930f      	str	r3, [sp, #60]	; 0x3c
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80007e2:	9311      	str	r3, [sp, #68]	; 0x44
	sAlarm.AlarmDateWeekDay = 0x1;
 80007e4:	2201      	movs	r2, #1
 80007e6:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	sAlarm.Alarm = RTC_ALARM_A;
 80007ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007ee:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK) {
 80007f0:	a909      	add	r1, sp, #36	; 0x24
 80007f2:	483a      	ldr	r0, [pc, #232]	; (80008dc <main+0x280>)
 80007f4:	f002 fbe8 	bl	8002fc8 <HAL_RTC_SetAlarm>
 80007f8:	2800      	cmp	r0, #0
 80007fa:	d157      	bne.n	80008ac <main+0x250>
	hspi2.Instance = SPI2;
 80007fc:	4839      	ldr	r0, [pc, #228]	; (80008e4 <main+0x288>)
 80007fe:	4b3a      	ldr	r3, [pc, #232]	; (80008e8 <main+0x28c>)
 8000800:	6003      	str	r3, [r0, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000802:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000806:	6043      	str	r3, [r0, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000808:	2300      	movs	r3, #0
 800080a:	6083      	str	r3, [r0, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800080c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000810:	60c2      	str	r2, [r0, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000812:	6103      	str	r3, [r0, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000814:	6143      	str	r3, [r0, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8000816:	f44f 7200 	mov.w	r2, #512	; 0x200
 800081a:	6182      	str	r2, [r0, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800081c:	61c3      	str	r3, [r0, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800081e:	6203      	str	r3, [r0, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000820:	6243      	str	r3, [r0, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000822:	6283      	str	r3, [r0, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 8000824:	2207      	movs	r2, #7
 8000826:	62c2      	str	r2, [r0, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000828:	6303      	str	r3, [r0, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800082a:	6343      	str	r3, [r0, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 800082c:	f002 fdea 	bl	8003404 <HAL_SPI_Init>
 8000830:	2800      	cmp	r0, #0
 8000832:	d13d      	bne.n	80008b0 <main+0x254>
    bootGetDefaultSettings(&bootSettings);
 8000834:	4c2d      	ldr	r4, [pc, #180]	; (80008ec <main+0x290>)
 8000836:	4620      	mov	r0, r4
 8000838:	f000 f9df 	bl	8000bfa <bootGetDefaultSettings>
    bootSettings.prmFlashDrv = &stm32wlxxFlashDriver;
 800083c:	4b2c      	ldr	r3, [pc, #176]	; (80008f0 <main+0x294>)
 800083e:	6023      	str	r3, [r4, #0]
    bootSettings.sndFlashDrv = &w25q80dvFlashDriver;
 8000840:	4b2c      	ldr	r3, [pc, #176]	; (80008f4 <main+0x298>)
 8000842:	6063      	str	r3, [r4, #4]
    bootSettings.prmFlashSlotAddr = 0x08008000;
 8000844:	4b2c      	ldr	r3, [pc, #176]	; (80008f8 <main+0x29c>)
 8000846:	60a3      	str	r3, [r4, #8]
    bootSettings.prmFlashSlotSize = 0x38000;
 8000848:	f44f 3360 	mov.w	r3, #229376	; 0x38000
 800084c:	60e3      	str	r3, [r4, #12]
    bootSettings.sndFlashSlot1Addr = 0x00000000;
 800084e:	2300      	movs	r3, #0
 8000850:	6123      	str	r3, [r4, #16]
    bootSettings.sndFlashSlot1Size = 0x40000;
 8000852:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000856:	6163      	str	r3, [r4, #20]
    error = bootInit(&bootContext, &bootSettings);
 8000858:	4621      	mov	r1, r4
 800085a:	4828      	ldr	r0, [pc, #160]	; (80008fc <main+0x2a0>)
 800085c:	f000 f9d5 	bl	8000c0a <bootInit>
    if(error)
 8000860:	bb40      	cbnz	r0, 80008b4 <main+0x258>
		error = bootTask(&bootContext);
 8000862:	4c26      	ldr	r4, [pc, #152]	; (80008fc <main+0x2a0>)
		ledTask();
 8000864:	f7ff fe7c 	bl	8000560 <ledTask>
		error = bootTask(&bootContext);
 8000868:	4620      	mov	r0, r4
 800086a:	f000 f9f9 	bl	8000c60 <bootTask>
		if(error)
 800086e:	2800      	cmp	r0, #0
 8000870:	d0f8      	beq.n	8000864 <main+0x208>
			TRACE_ERROR("Bootloader failure!\r\n");
 8000872:	f7ff fe53 	bl	800051c <osSuspendAllTasks>
 8000876:	4b22      	ldr	r3, [pc, #136]	; (8000900 <main+0x2a4>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	2215      	movs	r2, #21
 800087e:	2101      	movs	r1, #1
 8000880:	4820      	ldr	r0, [pc, #128]	; (8000904 <main+0x2a8>)
 8000882:	f004 fb71 	bl	8004f68 <fwrite>
 8000886:	f7ff fe4a 	bl	800051e <osResumeAllTasks>
}
 800088a:	2000      	movs	r0, #0
 800088c:	b014      	add	sp, #80	; 0x50
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	b672      	cpsid	i
	while (1) {
 8000892:	e7fe      	b.n	8000892 <main+0x236>
 8000894:	b672      	cpsid	i
 8000896:	e7fe      	b.n	8000896 <main+0x23a>
 8000898:	b672      	cpsid	i
 800089a:	e7fe      	b.n	800089a <main+0x23e>
 800089c:	b672      	cpsid	i
 800089e:	e7fe      	b.n	800089e <main+0x242>
 80008a0:	b672      	cpsid	i
 80008a2:	e7fe      	b.n	80008a2 <main+0x246>
 80008a4:	b672      	cpsid	i
 80008a6:	e7fe      	b.n	80008a6 <main+0x24a>
 80008a8:	b672      	cpsid	i
 80008aa:	e7fe      	b.n	80008aa <main+0x24e>
 80008ac:	b672      	cpsid	i
 80008ae:	e7fe      	b.n	80008ae <main+0x252>
 80008b0:	b672      	cpsid	i
 80008b2:	e7fe      	b.n	80008b2 <main+0x256>
    	TRACE_ERROR("Bootloader configuration failed!\r\n");
 80008b4:	f7ff fe32 	bl	800051c <osSuspendAllTasks>
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <main+0x2a4>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	68db      	ldr	r3, [r3, #12]
 80008be:	2222      	movs	r2, #34	; 0x22
 80008c0:	2101      	movs	r1, #1
 80008c2:	4811      	ldr	r0, [pc, #68]	; (8000908 <main+0x2ac>)
 80008c4:	f004 fb50 	bl	8004f68 <fwrite>
 80008c8:	f7ff fe29 	bl	800051e <osResumeAllTasks>
    	while(1);
 80008cc:	e7fe      	b.n	80008cc <main+0x270>
 80008ce:	bf00      	nop
 80008d0:	48000400 	.word	0x48000400
 80008d4:	20000210 	.word	0x20000210
 80008d8:	40004400 	.word	0x40004400
 80008dc:	20000174 	.word	0x20000174
 80008e0:	40002800 	.word	0x40002800
 80008e4:	200001ac 	.word	0x200001ac
 80008e8:	40003800 	.word	0x40003800
 80008ec:	2000015c 	.word	0x2000015c
 80008f0:	0800621c 	.word	0x0800621c
 80008f4:	08006294 	.word	0x08006294
 80008f8:	08008000 	.word	0x08008000
 80008fc:	20000108 	.word	0x20000108
 8000900:	200000e4 	.word	0x200000e4
 8000904:	08005c08 	.word	0x08005c08
 8000908:	08005be4 	.word	0x08005be4

0800090c <Get_SpiHandle>:
}
 800090c:	4800      	ldr	r0, [pc, #0]	; (8000910 <Get_SpiHandle+0x4>)
 800090e:	4770      	bx	lr
 8000910:	200001ac 	.word	0x200001ac

08000914 <Error_Handler>:
 8000914:	b672      	cpsid	i
	while (1) {
 8000916:	e7fe      	b.n	8000916 <Error_Handler+0x2>

08000918 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000918:	4770      	bx	lr
	...

0800091c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800091c:	b510      	push	{r4, lr}
 800091e:	b090      	sub	sp, #64	; 0x40
 8000920:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000922:	2238      	movs	r2, #56	; 0x38
 8000924:	2100      	movs	r1, #0
 8000926:	a802      	add	r0, sp, #8
 8000928:	f004 fc14 	bl	8005154 <memset>
  if(hrtc->Instance==RTC)
 800092c:	6822      	ldr	r2, [r4, #0]
 800092e:	4b12      	ldr	r3, [pc, #72]	; (8000978 <HAL_RTC_MspInit+0x5c>)
 8000930:	429a      	cmp	r2, r3
 8000932:	d001      	beq.n	8000938 <HAL_RTC_MspInit+0x1c>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000934:	b010      	add	sp, #64	; 0x40
 8000936:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000938:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800093c:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800093e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000942:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000944:	a802      	add	r0, sp, #8
 8000946:	f002 f869 	bl	8002a1c <HAL_RCCEx_PeriphCLKConfig>
 800094a:	b988      	cbnz	r0, 8000970 <HAL_RTC_MspInit+0x54>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800094c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000950:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000954:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000958:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800095c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800095e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000962:	659a      	str	r2, [r3, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000966:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800096a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800096c:	9b01      	ldr	r3, [sp, #4]
}
 800096e:	e7e1      	b.n	8000934 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8000970:	f7ff ffd0 	bl	8000914 <Error_Handler>
 8000974:	e7ea      	b.n	800094c <HAL_RTC_MspInit+0x30>
 8000976:	bf00      	nop
 8000978:	40002800 	.word	0x40002800

0800097c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800097c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800097e:	b097      	sub	sp, #92	; 0x5c
 8000980:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000982:	2100      	movs	r1, #0
 8000984:	9111      	str	r1, [sp, #68]	; 0x44
 8000986:	9112      	str	r1, [sp, #72]	; 0x48
 8000988:	9113      	str	r1, [sp, #76]	; 0x4c
 800098a:	9114      	str	r1, [sp, #80]	; 0x50
 800098c:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800098e:	2238      	movs	r2, #56	; 0x38
 8000990:	a803      	add	r0, sp, #12
 8000992:	f004 fbdf 	bl	8005154 <memset>
  if(hspi->Instance==SPI2)
 8000996:	6822      	ldr	r2, [r4, #0]
 8000998:	4b25      	ldr	r3, [pc, #148]	; (8000a30 <HAL_SPI_MspInit+0xb4>)
 800099a:	429a      	cmp	r2, r3
 800099c:	d001      	beq.n	80009a2 <HAL_SPI_MspInit+0x26>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800099e:	b017      	add	sp, #92	; 0x5c
 80009a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 80009a2:	2310      	movs	r3, #16
 80009a4:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 80009a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009aa:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009ac:	a803      	add	r0, sp, #12
 80009ae:	f002 f835 	bl	8002a1c <HAL_RCCEx_PeriphCLKConfig>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	d138      	bne.n	8000a28 <HAL_SPI_MspInit+0xac>
  SET_BIT(RCC->APB1ENR1, Periphs);
 80009b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80009bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80009c0:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80009c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80009c4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80009c8:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80009ca:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80009cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009ce:	f042 0202 	orr.w	r2, r2, #2
 80009d2:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80009d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009d6:	f002 0202 	and.w	r2, r2, #2
 80009da:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80009dc:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80009de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009e0:	f042 0201 	orr.w	r2, r2, #1
 80009e4:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80009e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80009ee:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 80009f0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80009f4:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2702      	movs	r7, #2
 80009f8:	9712      	str	r7, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009fa:	2601      	movs	r6, #1
 80009fc:	9613      	str	r6, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2500      	movs	r5, #0
 8000a00:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a02:	2405      	movs	r4, #5
 8000a04:	9415      	str	r4, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a06:	a911      	add	r1, sp, #68	; 0x44
 8000a08:	480a      	ldr	r0, [pc, #40]	; (8000a34 <HAL_SPI_MspInit+0xb8>)
 8000a0a:	f001 f9b3 	bl	8001d74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a12:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	9712      	str	r7, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a16:	9613      	str	r6, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a1a:	9415      	str	r4, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1c:	a911      	add	r1, sp, #68	; 0x44
 8000a1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a22:	f001 f9a7 	bl	8001d74 <HAL_GPIO_Init>
}
 8000a26:	e7ba      	b.n	800099e <HAL_SPI_MspInit+0x22>
      Error_Handler();
 8000a28:	f7ff ff74 	bl	8000914 <Error_Handler>
 8000a2c:	e7c3      	b.n	80009b6 <HAL_SPI_MspInit+0x3a>
 8000a2e:	bf00      	nop
 8000a30:	40003800 	.word	0x40003800
 8000a34:	48000400 	.word	0x48000400

08000a38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a38:	b510      	push	{r4, lr}
 8000a3a:	b096      	sub	sp, #88	; 0x58
 8000a3c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3e:	2100      	movs	r1, #0
 8000a40:	9111      	str	r1, [sp, #68]	; 0x44
 8000a42:	9112      	str	r1, [sp, #72]	; 0x48
 8000a44:	9113      	str	r1, [sp, #76]	; 0x4c
 8000a46:	9114      	str	r1, [sp, #80]	; 0x50
 8000a48:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a4a:	2238      	movs	r2, #56	; 0x38
 8000a4c:	a803      	add	r0, sp, #12
 8000a4e:	f004 fb81 	bl	8005154 <memset>
  if(huart->Instance==USART2)
 8000a52:	6822      	ldr	r2, [r4, #0]
 8000a54:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <HAL_UART_MspInit+0x94>)
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d001      	beq.n	8000a5e <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a5a:	b016      	add	sp, #88	; 0x58
 8000a5c:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a62:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000a66:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a68:	a803      	add	r0, sp, #12
 8000a6a:	f001 ffd7 	bl	8002a1c <HAL_RCCEx_PeriphCLKConfig>
 8000a6e:	bb50      	cbnz	r0, 8000ac6 <HAL_UART_MspInit+0x8e>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a76:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000a7a:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000a7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a7e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000a82:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000a84:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a88:	f042 0201 	orr.w	r2, r2, #1
 8000a8c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a90:	f003 0301 	and.w	r3, r3, #1
 8000a94:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000a96:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8000a98:	230c      	movs	r3, #12
 8000a9a:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2400      	movs	r4, #0
 8000aa2:	9413      	str	r4, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	9414      	str	r4, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aa6:	2307      	movs	r3, #7
 8000aa8:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aaa:	a911      	add	r1, sp, #68	; 0x44
 8000aac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab0:	f001 f960 	bl	8001d74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ab4:	4622      	mov	r2, r4
 8000ab6:	4621      	mov	r1, r4
 8000ab8:	2025      	movs	r0, #37	; 0x25
 8000aba:	f000 ff87 	bl	80019cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000abe:	2025      	movs	r0, #37	; 0x25
 8000ac0:	f000 ffba 	bl	8001a38 <HAL_NVIC_EnableIRQ>
}
 8000ac4:	e7c9      	b.n	8000a5a <HAL_UART_MspInit+0x22>
      Error_Handler();
 8000ac6:	f7ff ff25 	bl	8000914 <Error_Handler>
 8000aca:	e7d1      	b.n	8000a70 <HAL_UART_MspInit+0x38>
 8000acc:	40004400 	.word	0x40004400

08000ad0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <NMI_Handler>

08000ad2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <HardFault_Handler>

08000ad4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <MemManage_Handler>

08000ad6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <BusFault_Handler>

08000ad8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <UsageFault_Handler>

08000ada <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ada:	4770      	bx	lr

08000adc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000adc:	4770      	bx	lr

08000ade <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ade:	4770      	bx	lr

08000ae0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae2:	f000 ff3b 	bl	800195c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  systemTicks++;
 8000ae6:	4a02      	ldr	r2, [pc, #8]	; (8000af0 <SysTick_Handler+0x10>)
 8000ae8:	6813      	ldr	r3, [r2, #0]
 8000aea:	3301      	adds	r3, #1
 8000aec:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8000aee:	bd08      	pop	{r3, pc}
 8000af0:	20000104 	.word	0x20000104

08000af4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000af4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000af6:	4802      	ldr	r0, [pc, #8]	; (8000b00 <USART2_IRQHandler+0xc>)
 8000af8:	f003 f9c8 	bl	8003e8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000afc:	bd08      	pop	{r3, pc}
 8000afe:	bf00      	nop
 8000b00:	20000210 	.word	0x20000210

08000b04 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b04:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b06:	1e16      	subs	r6, r2, #0
 8000b08:	dd07      	ble.n	8000b1a <_read+0x16>
 8000b0a:	460c      	mov	r4, r1
 8000b0c:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8000b0e:	f3af 8000 	nop.w
 8000b12:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b16:	42a5      	cmp	r5, r4
 8000b18:	d1f9      	bne.n	8000b0e <_read+0xa>
  }

  return len;
}
 8000b1a:	4630      	mov	r0, r6
 8000b1c:	bd70      	pop	{r4, r5, r6, pc}

08000b1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b1e:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b20:	1e16      	subs	r6, r2, #0
 8000b22:	dd07      	ble.n	8000b34 <_write+0x16>
 8000b24:	460c      	mov	r4, r1
 8000b26:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8000b28:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000b2c:	f7ff fd02 	bl	8000534 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b30:	42a5      	cmp	r5, r4
 8000b32:	d1f9      	bne.n	8000b28 <_write+0xa>
  }
  return len;
}
 8000b34:	4630      	mov	r0, r6
 8000b36:	bd70      	pop	{r4, r5, r6, pc}

08000b38 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	4770      	bx	lr

08000b3e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000b3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b42:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000b44:	2000      	movs	r0, #0
 8000b46:	4770      	bx	lr

08000b48 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000b48:	2001      	movs	r0, #1
 8000b4a:	4770      	bx	lr

08000b4c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	4770      	bx	lr

08000b50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b50:	b508      	push	{r3, lr}
 8000b52:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b54:	4a0c      	ldr	r2, [pc, #48]	; (8000b88 <_sbrk+0x38>)
 8000b56:	6812      	ldr	r2, [r2, #0]
 8000b58:	b152      	cbz	r2, 8000b70 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b5a:	4a0b      	ldr	r2, [pc, #44]	; (8000b88 <_sbrk+0x38>)
 8000b5c:	6810      	ldr	r0, [r2, #0]
 8000b5e:	4403      	add	r3, r0
 8000b60:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <_sbrk+0x3c>)
 8000b62:	490b      	ldr	r1, [pc, #44]	; (8000b90 <_sbrk+0x40>)
 8000b64:	1a52      	subs	r2, r2, r1
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d806      	bhi.n	8000b78 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000b6a:	4a07      	ldr	r2, [pc, #28]	; (8000b88 <_sbrk+0x38>)
 8000b6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000b6e:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8000b70:	4a05      	ldr	r2, [pc, #20]	; (8000b88 <_sbrk+0x38>)
 8000b72:	4908      	ldr	r1, [pc, #32]	; (8000b94 <_sbrk+0x44>)
 8000b74:	6011      	str	r1, [r2, #0]
 8000b76:	e7f0      	b.n	8000b5a <_sbrk+0xa>
    errno = ENOMEM;
 8000b78:	f004 fb4a 	bl	8005210 <__errno>
 8000b7c:	230c      	movs	r3, #12
 8000b7e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	e7f3      	b.n	8000b6e <_sbrk+0x1e>
 8000b86:	bf00      	nop
 8000b88:	200002b0 	.word	0x200002b0
 8000b8c:	20010000 	.word	0x20010000
 8000b90:	00000400 	.word	0x00000400
 8000b94:	20000420 	.word	0x20000420

08000b98 <SystemInit>:
  */
void SystemInit(void)
{
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location add offset address ------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 8000b98:	4b02      	ldr	r3, [pc, #8]	; (8000ba4 <SystemInit+0xc>)
 8000b9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b9e:	609a      	str	r2, [r3, #8]

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ba8:	480d      	ldr	r0, [pc, #52]	; (8000be0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000baa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bac:	f7ff fff4 	bl	8000b98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb0:	480c      	ldr	r0, [pc, #48]	; (8000be4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bb2:	490d      	ldr	r1, [pc, #52]	; (8000be8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bb4:	4a0d      	ldr	r2, [pc, #52]	; (8000bec <LoopForever+0xe>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb8:	e002      	b.n	8000bc0 <LoopCopyDataInit>

08000bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bbe:	3304      	adds	r3, #4

08000bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc4:	d3f9      	bcc.n	8000bba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bc8:	4c0a      	ldr	r4, [pc, #40]	; (8000bf4 <LoopForever+0x16>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bcc:	e001      	b.n	8000bd2 <LoopFillZerobss>

08000bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd0:	3204      	adds	r2, #4

08000bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd4:	d3fb      	bcc.n	8000bce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bd6:	f004 fb21 	bl	800521c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bda:	f7ff fd3f 	bl	800065c <main>

08000bde <LoopForever>:

LoopForever:
    b LoopForever
 8000bde:	e7fe      	b.n	8000bde <LoopForever>
  ldr   r0, =_estack
 8000be0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000be4:	20000080 	.word	0x20000080
  ldr r1, =_edata
 8000be8:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8000bec:	08006354 	.word	0x08006354
  ldr r2, =_sbss
 8000bf0:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8000bf4:	20000420 	.word	0x20000420

08000bf8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bf8:	e7fe      	b.n	8000bf8 <ADC_IRQHandler>

08000bfa <bootGetDefaultSettings>:
**/

void bootGetDefaultSettings(BootSettings *settings)
{
   //Clear bootloader user settings structure
   memset(settings, 0x00, sizeof(BootSettings));
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	6003      	str	r3, [r0, #0]
 8000bfe:	6043      	str	r3, [r0, #4]
 8000c00:	6083      	str	r3, [r0, #8]
 8000c02:	60c3      	str	r3, [r0, #12]
 8000c04:	6103      	str	r3, [r0, #16]
 8000c06:	6143      	str	r3, [r0, #20]
   //Secondary flash cipher key settings
   settings->psk = NULL;
   settings->pskSize = 0;
#endif
#endif
}
 8000c08:	4770      	bx	lr

08000c0a <bootInit>:
 * @param[in] settings Bootloader user settings
 * @return Status code
 **/

error_t bootInit(BootContext *context, BootSettings *settings)
{
 8000c0a:	b538      	push	{r3, r4, r5, lr}
   error_t error;

   //Check parameter validity
   if(context == NULL || settings == NULL)
 8000c0c:	b318      	cbz	r0, 8000c56 <bootInit+0x4c>
 8000c0e:	460c      	mov	r4, r1
 8000c10:	4605      	mov	r5, r0
 8000c12:	b311      	cbz	r1, 8000c5a <bootInit+0x50>
      return ERROR_INVALID_PARAMETER;

   //Set context fields to zero
   memset(context, 0, sizeof(BootContext));
 8000c14:	2254      	movs	r2, #84	; 0x54
 8000c16:	2100      	movs	r1, #0
 8000c18:	f004 fa9c 	bl	8005154 <memset>

   //Save bootloader user settings
   context->settings = *settings;
 8000c1c:	f105 0c04 	add.w	ip, r5, #4
 8000c20:	46a6      	mov	lr, r4
 8000c22:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000c26:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000c2a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8000c2e:	e88c 0003 	stmia.w	ip, {r0, r1}

   //Initialize primary flash driver and slots
   error = bootInitPrimaryFlash(context, settings);
 8000c32:	4621      	mov	r1, r4
 8000c34:	4628      	mov	r0, r5
 8000c36:	f000 f86f 	bl	8000d18 <bootInitPrimaryFlash>
   //Is any error?
   if(error)
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	b108      	cbz	r0, 8000c42 <bootInit+0x38>
   //Set bootloader state
   context->state = BOOT_STATE_IDLE;

   //Successful process
   return NO_ERROR;
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	bd38      	pop	{r3, r4, r5, pc}
   error = bootInitSecondaryFlash(context, settings);
 8000c42:	4621      	mov	r1, r4
 8000c44:	4628      	mov	r0, r5
 8000c46:	f000 f89e 	bl	8000d86 <bootInitSecondaryFlash>
   if(error)
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2800      	cmp	r0, #0
 8000c4e:	d1f6      	bne.n	8000c3e <bootInit+0x34>
   context->state = BOOT_STATE_IDLE;
 8000c50:	2200      	movs	r2, #0
 8000c52:	702a      	strb	r2, [r5, #0]
   return NO_ERROR;
 8000c54:	e7f3      	b.n	8000c3e <bootInit+0x34>
      return ERROR_INVALID_PARAMETER;
 8000c56:	2302      	movs	r3, #2
 8000c58:	e7f1      	b.n	8000c3e <bootInit+0x34>
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	e7ef      	b.n	8000c3e <bootInit+0x34>
	...

08000c60 <bootTask>:
 * @param[in] context Pointer to Bootloader context
 * @return None
 **/

error_t bootTask(BootContext *context)
{
 8000c60:	b538      	push	{r3, r4, r5, lr}
 8000c62:	4604      	mov	r4, r0

   //Initialize bootloader error status
   error = NO_ERROR;

   //Bootloader IDLE state
   if(context->state == BOOT_STATE_IDLE)
 8000c64:	7803      	ldrb	r3, [r0, #0]
 8000c66:	b133      	cbz	r3, 8000c76 <bootTask+0x16>
            }
         }
      }
   }
   //Bootloader RUN APP state
   else if(context->state == BOOT_STATE_RUN_APP)
 8000c68:	3b01      	subs	r3, #1
 8000c6a:	2b03      	cmp	r3, #3
 8000c6c:	d814      	bhi.n	8000c98 <bootTask+0x38>
 8000c6e:	e8df f003 	tbb	[pc, r3]
 8000c72:	3115      	.short	0x3115
 8000c74:	4f47      	.short	0x4f47
            error = bootSelectUpdateImageSlot(context, &selectedSlot);
 8000c76:	4927      	ldr	r1, [pc, #156]	; (8000d14 <bootTask+0xb4>)
 8000c78:	f000 fa14 	bl	80010a4 <bootSelectUpdateImageSlot>
            if(error || selectedSlot == NULL)
 8000c7c:	4605      	mov	r5, r0
 8000c7e:	b948      	cbnz	r0, 8000c94 <bootTask+0x34>
 8000c80:	4b24      	ldr	r3, [pc, #144]	; (8000d14 <bootTask+0xb4>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	b133      	cbz	r3, 8000c94 <bootTask+0x34>
               if(selectedSlot != &context->primaryFlash.slots[0])
 8000c86:	f104 0220 	add.w	r2, r4, #32
 8000c8a:	4293      	cmp	r3, r2
                  context->state = BOOT_STATE_UPDATE_APP;
 8000c8c:	bf14      	ite	ne
 8000c8e:	2302      	movne	r3, #2
                  context->state = BOOT_STATE_RUN_APP;
 8000c90:	2301      	moveq	r3, #1
 8000c92:	7023      	strb	r3, [r4, #0]
      return ERROR_INVALID_VALUE;
   }

   //Return bootloader status
   return error;
}
 8000c94:	4628      	mov	r0, r5
 8000c96:	bd38      	pop	{r3, r4, r5, pc}
   if(context->state == BOOT_STATE_IDLE)
 8000c98:	25f1      	movs	r5, #241	; 0xf1
 8000c9a:	e7fb      	b.n	8000c94 <bootTask+0x34>
      selectedSlot = &context->primaryFlash.slots[0];
 8000c9c:	3020      	adds	r0, #32
 8000c9e:	4b1d      	ldr	r3, [pc, #116]	; (8000d14 <bootTask+0xb4>)
 8000ca0:	6018      	str	r0, [r3, #0]
      error = bootCheckImage(selectedSlot);
 8000ca2:	f000 f965 	bl	8000f70 <bootCheckImage>
      if(error)
 8000ca6:	4605      	mov	r5, r0
 8000ca8:	b110      	cbz	r0, 8000cb0 <bootTask+0x50>
         context->state = BOOT_STATE_ERROR;
 8000caa:	2304      	movs	r3, #4
 8000cac:	7023      	strb	r3, [r4, #0]
 8000cae:	e7f1      	b.n	8000c94 <bootTask+0x34>
         error = bootCheckSlotAppResetVector(selectedSlot);
 8000cb0:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <bootTask+0xb4>)
 8000cb2:	6818      	ldr	r0, [r3, #0]
 8000cb4:	f000 fa1a 	bl	80010ec <bootCheckSlotAppResetVector>
         if(!error)
 8000cb8:	4605      	mov	r5, r0
 8000cba:	b110      	cbz	r0, 8000cc2 <bootTask+0x62>
            context->state = BOOT_STATE_ERROR;
 8000cbc:	2304      	movs	r3, #4
 8000cbe:	7023      	strb	r3, [r4, #0]
 8000cc0:	e7e8      	b.n	8000c94 <bootTask+0x34>
            appStartAddr = selectedSlot->addr + mcuGetVtorOffset();
 8000cc2:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <bootTask+0xb4>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	681c      	ldr	r4, [r3, #0]
 8000cc8:	f000 fd4e 	bl	8001768 <mcuGetVtorOffset>
            mcuJumpToApplication(appStartAddr);
 8000ccc:	4420      	add	r0, r4
 8000cce:	f004 ff2f 	bl	8005b30 <_etext>
 8000cd2:	e7df      	b.n	8000c94 <bootTask+0x34>
      error = bootCheckImage(selectedSlot);
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <bootTask+0xb4>)
 8000cd6:	6818      	ldr	r0, [r3, #0]
 8000cd8:	f000 f94a 	bl	8000f70 <bootCheckImage>
      if(error)
 8000cdc:	b118      	cbz	r0, 8000ce6 <bootTask+0x86>
         context->state = BOOT_STATE_RUN_APP;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	7023      	strb	r3, [r4, #0]
         error = NO_ERROR;
 8000ce2:	2500      	movs	r5, #0
 8000ce4:	e7d6      	b.n	8000c94 <bootTask+0x34>
            error = bootUpdateApp(context, selectedSlot);
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <bootTask+0xb4>)
 8000ce8:	6819      	ldr	r1, [r3, #0]
 8000cea:	4620      	mov	r0, r4
 8000cec:	f000 f882 	bl	8000df4 <bootUpdateApp>
            if(error)
 8000cf0:	4605      	mov	r5, r0
 8000cf2:	b110      	cbz	r0, 8000cfa <bootTask+0x9a>
               context->state = BOOT_STATE_ERROR;
 8000cf4:	2304      	movs	r3, #4
 8000cf6:	7023      	strb	r3, [r4, #0]
 8000cf8:	e7cc      	b.n	8000c94 <bootTask+0x34>
               mcuSystemReset();
 8000cfa:	f000 fd39 	bl	8001770 <mcuSystemReset>
 8000cfe:	e7c9      	b.n	8000c94 <bootTask+0x34>
      error = fallbackTask(context);
 8000d00:	f000 fa71 	bl	80011e6 <fallbackTask>
      if(error)
 8000d04:	4605      	mov	r5, r0
 8000d06:	2800      	cmp	r0, #0
 8000d08:	d0c4      	beq.n	8000c94 <bootTask+0x34>
         context->state = BOOT_STATE_RUN_APP;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	7023      	strb	r3, [r4, #0]
 8000d0e:	e7c1      	b.n	8000c94 <bootTask+0x34>
   if(context->state == BOOT_STATE_IDLE)
 8000d10:	2500      	movs	r5, #0
 8000d12:	e7bf      	b.n	8000c94 <bootTask+0x34>
 8000d14:	200002b4 	.word	0x200002b4

08000d18 <bootInitPrimaryFlash>:
 * @param[in] settings Bootloader user settings used to initialize primary flash.
 * @return Error code
 **/

error_t bootInitPrimaryFlash(BootContext *context, BootSettings *settings)
{
 8000d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d1a:	b083      	sub	sp, #12
   FlashDriver *flashDriver;
   const FlashInfo *flashInfo;
   bool_t ret;

   //Check parameters validity
   if(context == NULL || settings == NULL)
 8000d1c:	b338      	cbz	r0, 8000d6e <bootInitPrimaryFlash+0x56>
 8000d1e:	460c      	mov	r4, r1
 8000d20:	4607      	mov	r7, r0
 8000d22:	b331      	cbz	r1, 8000d72 <bootInitPrimaryFlash+0x5a>
      return ERROR_INVALID_PARAMETER;

   //Check primary flash driver is valid
   if(settings->prmFlashDrv == NULL || settings->sndFlashDrv == settings->prmFlashDrv)
 8000d24:	680d      	ldr	r5, [r1, #0]
 8000d26:	b335      	cbz	r5, 8000d76 <bootInitPrimaryFlash+0x5e>
 8000d28:	684b      	ldr	r3, [r1, #4]
 8000d2a:	429d      	cmp	r5, r3
 8000d2c:	d025      	beq.n	8000d7a <bootInitPrimaryFlash+0x62>
      return ERROR_INVALID_PARAMETER;

   //Set primary flash memory driver
   context->primaryFlash.driver = settings->prmFlashDrv;
 8000d2e:	61c5      	str	r5, [r0, #28]

   //Point to memory driver
   flashDriver = (FlashDriver*)context->primaryFlash.driver;

   //Initialize primary (internal) memory flash driver
   error = flashDriver->init();
 8000d30:	682b      	ldr	r3, [r5, #0]
 8000d32:	4798      	blx	r3
   //Is any error?
   if(error)
 8000d34:	4606      	mov	r6, r0
 8000d36:	b9b8      	cbnz	r0, 8000d68 <bootInitPrimaryFlash+0x50>
      return error;

   //Get memory driver informations
   error = flashDriver->getInfo(&flashInfo);
 8000d38:	686b      	ldr	r3, [r5, #4]
 8000d3a:	a801      	add	r0, sp, #4
 8000d3c:	4798      	blx	r3
   //Is any error?
   if(error)
 8000d3e:	4606      	mov	r6, r0
 8000d40:	b990      	cbnz	r0, 8000d68 <bootInitPrimaryFlash+0x50>
      return error;

   //Check if user primary flash slot address match a flash sector address
   ret = flashDriver->isSectorAddr(settings->prmFlashSlotAddr);
 8000d42:	6a2b      	ldr	r3, [r5, #32]
 8000d44:	68a0      	ldr	r0, [r4, #8]
 8000d46:	4798      	blx	r3
   if(!ret)
 8000d48:	b1c8      	cbz	r0, 8000d7e <bootInitPrimaryFlash+0x66>
      return ERROR_INVALID_PARAMETER;

   //Check primary flash slot fits in primary flash
   if((settings->prmFlashSlotAddr + settings->prmFlashSlotSize) >
 8000d4a:	68a0      	ldr	r0, [r4, #8]
      (flashInfo->flashAddr + flashInfo->flashSize))
 8000d4c:	9901      	ldr	r1, [sp, #4]
   if((settings->prmFlashSlotAddr + settings->prmFlashSlotSize) >
 8000d4e:	68e3      	ldr	r3, [r4, #12]
 8000d50:	18c2      	adds	r2, r0, r3
      (flashInfo->flashAddr + flashInfo->flashSize))
 8000d52:	68cb      	ldr	r3, [r1, #12]
 8000d54:	6909      	ldr	r1, [r1, #16]
 8000d56:	440b      	add	r3, r1
   if((settings->prmFlashSlotAddr + settings->prmFlashSlotSize) >
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d812      	bhi.n	8000d82 <bootInitPrimaryFlash+0x6a>
      return ERROR_INVALID_PARAMETER;

   //Set primary flash memory slot which hold current running application
   //This slot MUST be located after the bootloader at the beginning of the next available flash sector
   context->primaryFlash.slots[0].addr = settings->prmFlashSlotAddr;
 8000d5c:	6238      	str	r0, [r7, #32]
   context->primaryFlash.slots[0].size = settings->prmFlashSlotSize;
 8000d5e:	68e3      	ldr	r3, [r4, #12]
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
   context->primaryFlash.slots[0].flash = (FlashDesc*)&context->primaryFlash;
 8000d62:	f107 031c 	add.w	r3, r7, #28
 8000d66:	62bb      	str	r3, [r7, #40]	; 0x28

   //Successful process
   return NO_ERROR;
}
 8000d68:	4630      	mov	r0, r6
 8000d6a:	b003      	add	sp, #12
 8000d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return ERROR_INVALID_PARAMETER;
 8000d6e:	2602      	movs	r6, #2
 8000d70:	e7fa      	b.n	8000d68 <bootInitPrimaryFlash+0x50>
 8000d72:	2602      	movs	r6, #2
 8000d74:	e7f8      	b.n	8000d68 <bootInitPrimaryFlash+0x50>
      return ERROR_INVALID_PARAMETER;
 8000d76:	2602      	movs	r6, #2
 8000d78:	e7f6      	b.n	8000d68 <bootInitPrimaryFlash+0x50>
 8000d7a:	2602      	movs	r6, #2
 8000d7c:	e7f4      	b.n	8000d68 <bootInitPrimaryFlash+0x50>
      return ERROR_INVALID_PARAMETER;
 8000d7e:	2602      	movs	r6, #2
 8000d80:	e7f2      	b.n	8000d68 <bootInitPrimaryFlash+0x50>
      return ERROR_INVALID_PARAMETER;
 8000d82:	2602      	movs	r6, #2
 8000d84:	e7f0      	b.n	8000d68 <bootInitPrimaryFlash+0x50>

08000d86 <bootInitSecondaryFlash>:
 * @param[in] settings Bootloader user settings used to initialize secondary flash.
 * @return Error code
 **/

error_t bootInitSecondaryFlash(BootContext *context, BootSettings *settings)
{
 8000d86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d88:	b083      	sub	sp, #12
   FlashDriver *flashDriver;
   const FlashInfo *flashInfo;
   bool_t ret;

   //Check parameters validity
   if(context == NULL || settings == NULL)
 8000d8a:	b338      	cbz	r0, 8000ddc <bootInitSecondaryFlash+0x56>
 8000d8c:	460c      	mov	r4, r1
 8000d8e:	4607      	mov	r7, r0
 8000d90:	b331      	cbz	r1, 8000de0 <bootInitSecondaryFlash+0x5a>
      return ERROR_INVALID_PARAMETER;

   //Check secondary flash driver is valid
   if(settings->sndFlashDrv == NULL || settings->sndFlashDrv == settings->prmFlashDrv)
 8000d92:	684d      	ldr	r5, [r1, #4]
 8000d94:	b335      	cbz	r5, 8000de4 <bootInitSecondaryFlash+0x5e>
 8000d96:	680b      	ldr	r3, [r1, #0]
 8000d98:	429d      	cmp	r5, r3
 8000d9a:	d025      	beq.n	8000de8 <bootInitSecondaryFlash+0x62>
      return ERROR_INVALID_PARAMETER;

   //Set secondary flash memory driver
   context->secondaryFlash.driver = settings->sndFlashDrv;
 8000d9c:	6385      	str	r5, [r0, #56]	; 0x38

   //Point to memory driver
   flashDriver = (FlashDriver*)context->secondaryFlash.driver;

   //Initialize secondary (internal) memory flash driver
   error = flashDriver->init();
 8000d9e:	682b      	ldr	r3, [r5, #0]
 8000da0:	4798      	blx	r3
   //Is any error?
   if(error)
 8000da2:	4606      	mov	r6, r0
 8000da4:	b9b8      	cbnz	r0, 8000dd6 <bootInitSecondaryFlash+0x50>
      return error;

   //Get memory driver informations
   error = flashDriver->getInfo(&flashInfo);
 8000da6:	686b      	ldr	r3, [r5, #4]
 8000da8:	a801      	add	r0, sp, #4
 8000daa:	4798      	blx	r3
   //Is any error?
   if(error)
 8000dac:	4606      	mov	r6, r0
 8000dae:	b990      	cbnz	r0, 8000dd6 <bootInitSecondaryFlash+0x50>
      return error;

   //Check if user secondary flash slot 1 address match a flash sector address
   ret = flashDriver->isSectorAddr(settings->sndFlashSlot1Addr);
 8000db0:	6a2b      	ldr	r3, [r5, #32]
 8000db2:	6920      	ldr	r0, [r4, #16]
 8000db4:	4798      	blx	r3
   if(!ret)
 8000db6:	b1c8      	cbz	r0, 8000dec <bootInitSecondaryFlash+0x66>
      return ERROR_INVALID_PARAMETER;

   //Check secondary flash slot 2 fits in secondary flash
   if((settings->sndFlashSlot1Addr + settings->sndFlashSlot1Size) >
 8000db8:	6920      	ldr	r0, [r4, #16]
      (flashInfo->flashAddr + flashInfo->flashSize))
 8000dba:	9901      	ldr	r1, [sp, #4]
   if((settings->sndFlashSlot1Addr + settings->sndFlashSlot1Size) >
 8000dbc:	6963      	ldr	r3, [r4, #20]
 8000dbe:	18c2      	adds	r2, r0, r3
      (flashInfo->flashAddr + flashInfo->flashSize))
 8000dc0:	68cb      	ldr	r3, [r1, #12]
 8000dc2:	6909      	ldr	r1, [r1, #16]
 8000dc4:	440b      	add	r3, r1
   if((settings->sndFlashSlot1Addr + settings->sndFlashSlot1Size) >
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d812      	bhi.n	8000df0 <bootInitSecondaryFlash+0x6a>
      return ERROR_INVALID_PARAMETER;

   //Set secondary flash memory slot 1 which will hold the new update image
   //If fallback support is enabled the slot 1 could also hold the
   //backup image of the current running application
   context->secondaryFlash.slots[0].addr = settings->sndFlashSlot1Addr;
 8000dca:	63f8      	str	r0, [r7, #60]	; 0x3c
   context->secondaryFlash.slots[0].size = settings->sndFlashSlot1Size;
 8000dcc:	6963      	ldr	r3, [r4, #20]
 8000dce:	643b      	str	r3, [r7, #64]	; 0x40
   context->secondaryFlash.slots[0].flash = (FlashDesc*)&context->secondaryFlash;
 8000dd0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000dd4:	647b      	str	r3, [r7, #68]	; 0x44
   context->secondaryFlash.slots[1].flash = (FlashDesc*)&context->secondaryFlash;
#endif

   //Successful process
   return NO_ERROR;
}
 8000dd6:	4630      	mov	r0, r6
 8000dd8:	b003      	add	sp, #12
 8000dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return ERROR_INVALID_PARAMETER;
 8000ddc:	2602      	movs	r6, #2
 8000dde:	e7fa      	b.n	8000dd6 <bootInitSecondaryFlash+0x50>
 8000de0:	2602      	movs	r6, #2
 8000de2:	e7f8      	b.n	8000dd6 <bootInitSecondaryFlash+0x50>
      return ERROR_INVALID_PARAMETER;
 8000de4:	2602      	movs	r6, #2
 8000de6:	e7f6      	b.n	8000dd6 <bootInitSecondaryFlash+0x50>
 8000de8:	2602      	movs	r6, #2
 8000dea:	e7f4      	b.n	8000dd6 <bootInitSecondaryFlash+0x50>
      return ERROR_INVALID_PARAMETER;
 8000dec:	2602      	movs	r6, #2
 8000dee:	e7f2      	b.n	8000dd6 <bootInitSecondaryFlash+0x50>
      return ERROR_INVALID_PARAMETER;
 8000df0:	2602      	movs	r6, #2
 8000df2:	e7f0      	b.n	8000dd6 <bootInitSecondaryFlash+0x50>

08000df4 <bootUpdateApp>:
   uint8_t iv[INIT_VECT_SIZE];
#endif
   uint8_t buffer[512];

   //Check paramters validity?
   if(context == NULL || slot == NULL)
 8000df4:	2800      	cmp	r0, #0
 8000df6:	f000 80ad 	beq.w	8000f54 <bootUpdateApp+0x160>
{
 8000dfa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000dfe:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 8000e02:	460d      	mov	r5, r1
 8000e04:	4607      	mov	r7, r0
   if(context == NULL || slot == NULL)
 8000e06:	2900      	cmp	r1, #0
 8000e08:	f000 80a7 	beq.w	8000f5a <bootUpdateApp+0x166>
   //Prepare update process

   //Point to the internal slot memory descriptor
   intMem = &context->primaryFlash;
   //Point to the slot memory descriptor
   extMem = slot->flash;
 8000e0c:	f8d1 a008 	ldr.w	sl, [r1, #8]

   //Get slot start address
   readAddr = slot->addr;
 8000e10:	680c      	ldr	r4, [r1, #0]
   //Get internal stlot address
   writeAddr = intMem->slots[0].addr;
 8000e12:	6a06      	ldr	r6, [r0, #32]

   //Select CRC32 integrity algo
   integrityAlgo = CRC32_HASH_ALGO;

   //Get internal flash memory info
   error = intMem->driver->getInfo(&intMemInfo);
 8000e14:	69c3      	ldr	r3, [r0, #28]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	a881      	add	r0, sp, #516	; 0x204
 8000e1a:	4798      	blx	r3
   //Is any error?
   if(error)
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	b940      	cbnz	r0, 8000e32 <bootUpdateApp+0x3e>

   ////////////////////////////////////////////////////////////////////////////
   //Format header of the image containing the new application firmware

   //Read update image slot for secondary (external) memory slot
   error = extMem->driver->read(readAddr, buffer, sizeof(ImageHeader));
 8000e20:	f8da 3000 	ldr.w	r3, [sl]
 8000e24:	691b      	ldr	r3, [r3, #16]
 8000e26:	2240      	movs	r2, #64	; 0x40
 8000e28:	4669      	mov	r1, sp
 8000e2a:	4620      	mov	r0, r4
 8000e2c:	4798      	blx	r3
   //Is any error?
   if(error)
 8000e2e:	4603      	mov	r3, r0
 8000e30:	b120      	cbz	r0, 8000e3c <bootUpdateApp+0x48>
   if(error)
      return error;

   //Successful process
   return NO_ERROR;
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	f50d 7d03 	add.w	sp, sp, #524	; 0x20c
 8000e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   header->dataPadding = mcuGetVtorOffset() - sizeof(ImageHeader);
 8000e3c:	f000 fc94 	bl	8001768 <mcuGetVtorOffset>
 8000e40:	3840      	subs	r0, #64	; 0x40
 8000e42:	f8cd 0009 	str.w	r0, [sp, #9]
   error = integrityAlgo->compute((uint8_t*)header, sizeof(ImageHeader) - CRC32_DIGEST_SIZE, (uint8_t*)&header->headCrc);
 8000e46:	4b49      	ldr	r3, [pc, #292]	; (8000f6c <bootUpdateApp+0x178>)
 8000e48:	6a1b      	ldr	r3, [r3, #32]
 8000e4a:	aa0f      	add	r2, sp, #60	; 0x3c
 8000e4c:	213c      	movs	r1, #60	; 0x3c
 8000e4e:	4668      	mov	r0, sp
 8000e50:	4798      	blx	r3
   if(error)
 8000e52:	4603      	mov	r3, r0
 8000e54:	2800      	cmp	r0, #0
 8000e56:	d1ec      	bne.n	8000e32 <bootUpdateApp+0x3e>
   error = intMem->driver->write(writeAddr, (uint8_t*)header, sizeof(ImageHeader));
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	2240      	movs	r2, #64	; 0x40
 8000e5e:	4669      	mov	r1, sp
 8000e60:	4630      	mov	r0, r6
 8000e62:	4798      	blx	r3
   if(error)
 8000e64:	4603      	mov	r3, r0
 8000e66:	2800      	cmp	r0, #0
 8000e68:	d1e3      	bne.n	8000e32 <bootUpdateApp+0x3e>
   imgDataPaddingSize = header->dataPadding;
 8000e6a:	f8dd 8009 	ldr.w	r8, [sp, #9]
   imgAppSize = header->dataSize;
 8000e6e:	f8dd 900d 	ldr.w	r9, [sp, #13]
   integrityAlgo->init(&integrityContext);
 8000e72:	4c3e      	ldr	r4, [pc, #248]	; (8000f6c <bootUpdateApp+0x178>)
 8000e74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e76:	a880      	add	r0, sp, #512	; 0x200
 8000e78:	4798      	blx	r3
   integrityAlgo->update(&integrityContext,
 8000e7a:	f8d4 b028 	ldr.w	fp, [r4, #40]	; 0x28
 8000e7e:	2204      	movs	r2, #4
 8000e80:	a90f      	add	r1, sp, #60	; 0x3c
 8000e82:	a880      	add	r0, sp, #512	; 0x200
 8000e84:	47d8      	blx	fp
   writeAddr += sizeof(ImageHeader);
 8000e86:	3640      	adds	r6, #64	; 0x40
   memset(buffer, 0, sizeof(buffer));
 8000e88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4668      	mov	r0, sp
 8000e90:	f004 f960 	bl	8005154 <memset>
   while(imgDataPaddingSize > 0)
 8000e94:	f1b8 0f00 	cmp.w	r8, #0
 8000e98:	d061      	beq.n	8000f5e <bootUpdateApp+0x16a>
      n = MIN(sizeof(buffer), imgDataPaddingSize);
 8000e9a:	4644      	mov	r4, r8
 8000e9c:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
 8000ea0:	bf28      	it	cs
 8000ea2:	f44f 7400 	movcs.w	r4, #512	; 0x200
      error = intMem->driver->write(writeAddr, buffer, n);
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	4622      	mov	r2, r4
 8000eac:	4669      	mov	r1, sp
 8000eae:	4630      	mov	r0, r6
 8000eb0:	4798      	blx	r3
      if(error)
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2800      	cmp	r0, #0
 8000eb6:	d1bc      	bne.n	8000e32 <bootUpdateApp+0x3e>
      writeAddr += n;
 8000eb8:	4426      	add	r6, r4
   while(imgDataPaddingSize > 0)
 8000eba:	ebb8 0804 	subs.w	r8, r8, r4
 8000ebe:	d1ec      	bne.n	8000e9a <bootUpdateApp+0xa6>
   readAddr = slot->addr + sizeof(ImageHeader);
 8000ec0:	682d      	ldr	r5, [r5, #0]
 8000ec2:	3540      	adds	r5, #64	; 0x40
   while(imgAppSize > 0)
 8000ec4:	f1b9 0f00 	cmp.w	r9, #0
 8000ec8:	d11c      	bne.n	8000f04 <bootUpdateApp+0x110>
   if((n > 0) && ((n % intMemInfo->writeSize) == 0))
 8000eca:	b144      	cbz	r4, 8000ede <bootUpdateApp+0xea>
 8000ecc:	9b81      	ldr	r3, [sp, #516]	; 0x204
 8000ece:	695a      	ldr	r2, [r3, #20]
 8000ed0:	fbb4 f3f2 	udiv	r3, r4, r2
 8000ed4:	fb02 4313 	mls	r3, r2, r3, r4
	  n = 0;
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	bf08      	it	eq
 8000edc:	461c      	moveq	r4, r3
   integrityAlgo->final(&integrityContext, buffer+n);
 8000ede:	4d23      	ldr	r5, [pc, #140]	; (8000f6c <bootUpdateApp+0x178>)
 8000ee0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000ee2:	eb0d 0104 	add.w	r1, sp, r4
 8000ee6:	a880      	add	r0, sp, #512	; 0x200
 8000ee8:	4798      	blx	r3
   error = intMem->driver->write(writeAddr, buffer, n+integrityAlgo->digestSize);
 8000eea:	696a      	ldr	r2, [r5, #20]
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	4422      	add	r2, r4
 8000ef2:	4669      	mov	r1, sp
 8000ef4:	4630      	mov	r0, r6
 8000ef6:	4798      	blx	r3
 8000ef8:	4603      	mov	r3, r0
   if(error)
 8000efa:	e79a      	b.n	8000e32 <bootUpdateApp+0x3e>
      readAddr += n;
 8000efc:	4425      	add	r5, r4
   while(imgAppSize > 0)
 8000efe:	ebb9 0904 	subs.w	r9, r9, r4
 8000f02:	d0e2      	beq.n	8000eca <bootUpdateApp+0xd6>
      n = MIN(sizeof(buffer), imgAppSize);
 8000f04:	464c      	mov	r4, r9
 8000f06:	f5b9 7f00 	cmp.w	r9, #512	; 0x200
 8000f0a:	bf28      	it	cs
 8000f0c:	f44f 7400 	movcs.w	r4, #512	; 0x200
      error = extMem->driver->read(readAddr, buffer, n);
 8000f10:	f8da 3000 	ldr.w	r3, [sl]
 8000f14:	691b      	ldr	r3, [r3, #16]
 8000f16:	4622      	mov	r2, r4
 8000f18:	4669      	mov	r1, sp
 8000f1a:	4628      	mov	r0, r5
 8000f1c:	4798      	blx	r3
      if(error)
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2800      	cmp	r0, #0
 8000f22:	d186      	bne.n	8000e32 <bootUpdateApp+0x3e>
      integrityAlgo->update(&integrityContext, buffer, n);
 8000f24:	4622      	mov	r2, r4
 8000f26:	4669      	mov	r1, sp
 8000f28:	a880      	add	r0, sp, #512	; 0x200
 8000f2a:	47d8      	blx	fp
	  if((n % intMemInfo->writeSize) == 0)
 8000f2c:	9b81      	ldr	r3, [sp, #516]	; 0x204
 8000f2e:	695a      	ldr	r2, [r3, #20]
 8000f30:	fbb4 f3f2 	udiv	r3, r4, r2
 8000f34:	fb02 4313 	mls	r3, r2, r3, r4
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d1df      	bne.n	8000efc <bootUpdateApp+0x108>
	     error = intMem->driver->write(writeAddr, buffer, n);
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	4622      	mov	r2, r4
 8000f42:	4669      	mov	r1, sp
 8000f44:	4630      	mov	r0, r6
 8000f46:	4798      	blx	r3
	     if(error)
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2800      	cmp	r0, #0
 8000f4c:	f47f af71 	bne.w	8000e32 <bootUpdateApp+0x3e>
	     writeAddr += n;
 8000f50:	4426      	add	r6, r4
 8000f52:	e7d3      	b.n	8000efc <bootUpdateApp+0x108>
      return ERROR_INVALID_PARAMETER;
 8000f54:	2302      	movs	r3, #2
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	4770      	bx	lr
      return ERROR_INVALID_PARAMETER;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	e769      	b.n	8000e32 <bootUpdateApp+0x3e>
   readAddr = slot->addr + sizeof(ImageHeader);
 8000f5e:	682d      	ldr	r5, [r5, #0]
 8000f60:	3540      	adds	r5, #64	; 0x40
   while(imgAppSize > 0)
 8000f62:	464c      	mov	r4, r9
 8000f64:	f1b9 0f00 	cmp.w	r9, #0
 8000f68:	d1cc      	bne.n	8000f04 <bootUpdateApp+0x110>
 8000f6a:	e7b8      	b.n	8000ede <bootUpdateApp+0xea>
 8000f6c:	08005cc8 	.word	0x08005cc8

08000f70 <bootCheckImage>:
   Crc32Context crcContext;
   uint8_t digest[CRC32_DIGEST_SIZE];
   uint8_t buffer[sizeof(ImageHeader)];

   //Check parameter validty
   if(slot == NULL)
 8000f70:	2800      	cmp	r0, #0
 8000f72:	d062      	beq.n	800103a <bootCheckImage+0xca>
{
 8000f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f78:	b094      	sub	sp, #80	; 0x50
 8000f7a:	4604      	mov	r4, r0
      return ERROR_INVALID_PARAMETER;

   //Point to slot memory descriptor
   flash = (FlashDesc*)slot->flash;
 8000f7c:	6887      	ldr	r7, [r0, #8]

   //Get memory info
   error = flash->driver->getInfo(&info);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	a813      	add	r0, sp, #76	; 0x4c
 8000f84:	4798      	blx	r3
   //Is any error?
   if(error)
 8000f86:	4603      	mov	r3, r0
 8000f88:	b938      	cbnz	r0, 8000f9a <bootCheckImage+0x2a>
      return error;

   //Read slot data
   error = flash->driver->read(slot->addr, buffer, sizeof(buffer));
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	691b      	ldr	r3, [r3, #16]
 8000f8e:	2240      	movs	r2, #64	; 0x40
 8000f90:	a901      	add	r1, sp, #4
 8000f92:	6820      	ldr	r0, [r4, #0]
 8000f94:	4798      	blx	r3
   //Is any error?
   if(error)
 8000f96:	4603      	mov	r3, r0
 8000f98:	b118      	cbz	r0, 8000fa2 <bootCheckImage+0x32>
      return ERROR_FAILURE;
   }

   //Successfull process
   return NO_ERROR;
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	b014      	add	sp, #80	; 0x50
 8000f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   error = imageCheckHeader(header);
 8000fa2:	a801      	add	r0, sp, #4
 8000fa4:	f000 f9a8 	bl	80012f8 <imageCheckHeader>
   if(error)
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2800      	cmp	r0, #0
 8000fac:	d1f5      	bne.n	8000f9a <bootCheckImage+0x2a>
   length = header->dataSize;
 8000fae:	f8dd 5011 	ldr.w	r5, [sp, #17]
   if(length + sizeof(ImageHeader) + header->dataPadding > slot->size)
 8000fb2:	f8dd 300d 	ldr.w	r3, [sp, #13]
 8000fb6:	442b      	add	r3, r5
 8000fb8:	3340      	adds	r3, #64	; 0x40
 8000fba:	6862      	ldr	r2, [r4, #4]
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d83f      	bhi.n	8001040 <bootCheckImage+0xd0>
   crcAlgo->init(&crcContext);
 8000fc0:	4e20      	ldr	r6, [pc, #128]	; (8001044 <bootCheckImage+0xd4>)
 8000fc2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000fc4:	a812      	add	r0, sp, #72	; 0x48
 8000fc6:	4798      	blx	r3
   crcAlgo->update(&crcContext, (uint8_t*)&header->headCrc, CRC32_DIGEST_SIZE);
 8000fc8:	f8d6 8028 	ldr.w	r8, [r6, #40]	; 0x28
 8000fcc:	2204      	movs	r2, #4
 8000fce:	a910      	add	r1, sp, #64	; 0x40
 8000fd0:	a812      	add	r0, sp, #72	; 0x48
 8000fd2:	47c0      	blx	r8
   addr = slot->addr + sizeof(ImageHeader) + header->dataPadding;
 8000fd4:	f8dd 600d 	ldr.w	r6, [sp, #13]
 8000fd8:	3640      	adds	r6, #64	; 0x40
 8000fda:	6823      	ldr	r3, [r4, #0]
 8000fdc:	441e      	add	r6, r3
   while(length > 0)
 8000fde:	b19d      	cbz	r5, 8001008 <bootCheckImage+0x98>
      n = MIN(sizeof(buffer), length);
 8000fe0:	462c      	mov	r4, r5
 8000fe2:	2d40      	cmp	r5, #64	; 0x40
 8000fe4:	bf28      	it	cs
 8000fe6:	2440      	movcs	r4, #64	; 0x40
      error = flash->driver->read(addr, buffer, n);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	691b      	ldr	r3, [r3, #16]
 8000fec:	4622      	mov	r2, r4
 8000fee:	a901      	add	r1, sp, #4
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	4798      	blx	r3
      if(error)
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2800      	cmp	r0, #0
 8000ff8:	d1cf      	bne.n	8000f9a <bootCheckImage+0x2a>
      crcAlgo->update(&crcContext, buffer, n);
 8000ffa:	4622      	mov	r2, r4
 8000ffc:	a901      	add	r1, sp, #4
 8000ffe:	a812      	add	r0, sp, #72	; 0x48
 8001000:	47c0      	blx	r8
      addr += n;
 8001002:	4426      	add	r6, r4
   while(length > 0)
 8001004:	1b2d      	subs	r5, r5, r4
 8001006:	d1eb      	bne.n	8000fe0 <bootCheckImage+0x70>
   crcAlgo->final(&crcContext, digest);
 8001008:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <bootCheckImage+0xd4>)
 800100a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800100c:	a911      	add	r1, sp, #68	; 0x44
 800100e:	a812      	add	r0, sp, #72	; 0x48
 8001010:	4798      	blx	r3
   error = flash->driver->read(addr, buffer, CRC32_DIGEST_SIZE);
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	691b      	ldr	r3, [r3, #16]
 8001016:	2204      	movs	r2, #4
 8001018:	eb0d 0102 	add.w	r1, sp, r2
 800101c:	4630      	mov	r0, r6
 800101e:	4798      	blx	r3
   if(error)
 8001020:	4603      	mov	r3, r0
 8001022:	2800      	cmp	r0, #0
 8001024:	d1b9      	bne.n	8000f9a <bootCheckImage+0x2a>
   if(memcmp(buffer, digest, CRC32_DIGEST_SIZE) != 0)
 8001026:	2204      	movs	r2, #4
 8001028:	a911      	add	r1, sp, #68	; 0x44
 800102a:	eb0d 0002 	add.w	r0, sp, r2
 800102e:	f004 f881 	bl	8005134 <memcmp>
      return ERROR_INVALID_PARAMETER;
 8001032:	1e03      	subs	r3, r0, #0
 8001034:	bf18      	it	ne
 8001036:	2301      	movne	r3, #1
 8001038:	e7af      	b.n	8000f9a <bootCheckImage+0x2a>
 800103a:	2302      	movs	r3, #2
}
 800103c:	4618      	mov	r0, r3
 800103e:	4770      	bx	lr
      return ERROR_INVALID_LENGTH;
 8001040:	23ec      	movs	r3, #236	; 0xec
 8001042:	e7aa      	b.n	8000f9a <bootCheckImage+0x2a>
 8001044:	08005cc8 	.word	0x08005cc8

08001048 <bootGetSlotImgHeader>:

   //Initialize status code
   error = NO_ERROR;

   //Check parameter validity
   if(slot == NULL)
 8001048:	b348      	cbz	r0, 800109e <bootGetSlotImgHeader+0x56>
{
 800104a:	b530      	push	{r4, r5, lr}
 800104c:	b093      	sub	sp, #76	; 0x4c
 800104e:	460c      	mov	r4, r1
      return error;

   //Read first slot data that should correspond to the image header
   error = slotRead(slot, 0, buffer, sizeof(buffer));
 8001050:	2340      	movs	r3, #64	; 0x40
 8001052:	aa02      	add	r2, sp, #8
 8001054:	2100      	movs	r1, #0
 8001056:	f000 f991 	bl	800137c <slotRead>
   if(error)
 800105a:	4602      	mov	r2, r0
 800105c:	b110      	cbz	r0, 8001064 <bootGetSlotImgHeader+0x1c>
   //Save image header
   memcpy(header, tmpHeader, sizeof(ImageHeader));

   //Successful process
   return NO_ERROR;
}
 800105e:	4610      	mov	r0, r2
 8001060:	b013      	add	sp, #76	; 0x4c
 8001062:	bd30      	pop	{r4, r5, pc}
   error = imageGetHeader(buffer, sizeof(buffer), &tmpHeader);
 8001064:	aa01      	add	r2, sp, #4
 8001066:	2140      	movs	r1, #64	; 0x40
 8001068:	a802      	add	r0, sp, #8
 800106a:	f000 f975 	bl	8001358 <imageGetHeader>
   if(error)
 800106e:	4602      	mov	r2, r0
 8001070:	2800      	cmp	r0, #0
 8001072:	d1f4      	bne.n	800105e <bootGetSlotImgHeader+0x16>
   memcpy(header, tmpHeader, sizeof(ImageHeader));
 8001074:	9b01      	ldr	r3, [sp, #4]
 8001076:	4621      	mov	r1, r4
 8001078:	f103 0540 	add.w	r5, r3, #64	; 0x40
 800107c:	f8d3 e000 	ldr.w	lr, [r3]
 8001080:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8001084:	689c      	ldr	r4, [r3, #8]
 8001086:	68d8      	ldr	r0, [r3, #12]
 8001088:	f8c1 e000 	str.w	lr, [r1]
 800108c:	f8c1 c004 	str.w	ip, [r1, #4]
 8001090:	608c      	str	r4, [r1, #8]
 8001092:	60c8      	str	r0, [r1, #12]
 8001094:	3310      	adds	r3, #16
 8001096:	3110      	adds	r1, #16
 8001098:	42ab      	cmp	r3, r5
 800109a:	d1ef      	bne.n	800107c <bootGetSlotImgHeader+0x34>
 800109c:	e7df      	b.n	800105e <bootGetSlotImgHeader+0x16>
      return error;
 800109e:	2200      	movs	r2, #0
}
 80010a0:	4610      	mov	r0, r2
 80010a2:	4770      	bx	lr

080010a4 <bootSelectUpdateImageSlot>:
{
 80010a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010a8:	b090      	sub	sp, #64	; 0x40
   if(context == NULL)
 80010aa:	b1b8      	cbz	r0, 80010dc <bootSelectUpdateImageSlot+0x38>
 80010ac:	460e      	mov	r6, r1
 80010ae:	4604      	mov	r4, r0
   tmpSlot = (SlotDesc*)&context->primaryFlash.slots[0];
 80010b0:	f100 0520 	add.w	r5, r0, #32
   error = bootGetSlotImgHeader(tmpSlot, &tmpImgHeader);
 80010b4:	4669      	mov	r1, sp
 80010b6:	4628      	mov	r0, r5
 80010b8:	f7ff ffc6 	bl	8001048 <bootGetSlotImgHeader>
   if(!error)
 80010bc:	4607      	mov	r7, r0
 80010be:	b978      	cbnz	r0, 80010e0 <bootSelectUpdateImageSlot+0x3c>
      tmpImgIndex = tmpImgHeader.imgIndex;
 80010c0:	f8dd 8004 	ldr.w	r8, [sp, #4]
      *selectedSlot = tmpSlot;
 80010c4:	6035      	str	r5, [r6, #0]
         tmpSlot = (SlotDesc*)&context->secondaryFlash.slots[i];
 80010c6:	343c      	adds	r4, #60	; 0x3c
         error = bootGetSlotImgHeader(tmpSlot, &tmpImgHeader);
 80010c8:	4669      	mov	r1, sp
 80010ca:	4620      	mov	r0, r4
 80010cc:	f7ff ffbc 	bl	8001048 <bootGetSlotImgHeader>
         if(error)
 80010d0:	b940      	cbnz	r0, 80010e4 <bootSelectUpdateImageSlot+0x40>
            if(tmpImgHeader.imgIndex > tmpImgIndex)
 80010d2:	9b01      	ldr	r3, [sp, #4]
 80010d4:	4543      	cmp	r3, r8
 80010d6:	d905      	bls.n	80010e4 <bootSelectUpdateImageSlot+0x40>
               *selectedSlot = tmpSlot;
 80010d8:	6034      	str	r4, [r6, #0]
      for(i = 0; i < 1; i++)
 80010da:	e003      	b.n	80010e4 <bootSelectUpdateImageSlot+0x40>
      return ERROR_INVALID_PARAMETER;
 80010dc:	2702      	movs	r7, #2
 80010de:	e001      	b.n	80010e4 <bootSelectUpdateImageSlot+0x40>
      *selectedSlot = NULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	6033      	str	r3, [r6, #0]
}
 80010e4:	4638      	mov	r0, r7
 80010e6:	b010      	add	sp, #64	; 0x40
 80010e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080010ec <bootCheckSlotAppResetVector>:
 * @param[in] slot Pointer to the slot that contains the application firmware binary.
 * @return Error code.
 **/

error_t bootCheckSlotAppResetVector(SlotDesc *slot)
{
 80010ec:	b510      	push	{r4, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	4604      	mov	r4, r0

   //Initialize status code
   error = NO_ERROR;

   //Compute reset vector address offset (slot app start address offset + 4)
   resetVectorAddrOffset = mcuGetVtorOffset() + 0x4;
 80010f2:	f000 fb39 	bl	8001768 <mcuGetVtorOffset>

   //Check reset vector of the current application
   error = slotRead(slot, resetVectorAddrOffset, (uint8_t*)&resetVector, sizeof(resetVector));
 80010f6:	2304      	movs	r3, #4
 80010f8:	eb0d 0203 	add.w	r2, sp, r3
 80010fc:	18c1      	adds	r1, r0, r3
 80010fe:	4620      	mov	r0, r4
 8001100:	f000 f93c 	bl	800137c <slotRead>

   //Check there is no error?
   if(!error)
 8001104:	b970      	cbnz	r0, 8001124 <bootCheckSlotAppResetVector+0x38>
   {
      //Is reset vector invalid (wrong value or outside of memory)?
      if((resetVector == 0xFFFFFFFF) || !(slot->addr <= resetVector && resetVector <= slot->addr + slot->size))
 8001106:	9801      	ldr	r0, [sp, #4]
 8001108:	f1b0 3fff 	cmp.w	r0, #4294967295
 800110c:	d009      	beq.n	8001122 <bootCheckSlotAppResetVector+0x36>
 800110e:	6823      	ldr	r3, [r4, #0]
 8001110:	4298      	cmp	r0, r3
 8001112:	d309      	bcc.n	8001128 <bootCheckSlotAppResetVector+0x3c>
 8001114:	6862      	ldr	r2, [r4, #4]
 8001116:	4413      	add	r3, r2
   error = slotRead(slot, resetVectorAddrOffset, (uint8_t*)&resetVector, sizeof(resetVector));
 8001118:	4298      	cmp	r0, r3
 800111a:	bf94      	ite	ls
 800111c:	2000      	movls	r0, #0
 800111e:	2001      	movhi	r0, #1
 8001120:	e000      	b.n	8001124 <bootCheckSlotAppResetVector+0x38>
    	 TRACE_DEBUG("   The reset vector address should be within the internal flash slot boundaries\r\n");
    	 TRACE_DEBUG("   that holds the current boot-able application image.\r\n");
    	 TRACE_DEBUG("   In other words reset vector address should be between 0x%08lx and 0x%08lx\r\n", slot->addr, slot->addr + slot->size);
    	 TRACE_DEBUG("   but its value is 0x%08lx\r\n", resetVector);
         //Raised an error
         error = ERROR_FAILURE; //ERROR INVALID RESET VECTOR
 8001122:	2001      	movs	r0, #1
      }
   }

   //Return status code
   return error;
}
 8001124:	b002      	add	sp, #8
 8001126:	bd10      	pop	{r4, pc}
         error = ERROR_FAILURE; //ERROR INVALID RESET VECTOR
 8001128:	2001      	movs	r0, #1
 800112a:	e7fb      	b.n	8001124 <bootCheckSlotAppResetVector+0x38>

0800112c <fallbackDeleteSlot>:
 * @param[in] slot Pointer to the slot to be deleted.
 * @return Error code.
 **/

error_t fallbackDeleteSlot(SlotDesc *slot)
{
 800112c:	b508      	push	{r3, lr}
   const FlashDriver *flashDrv;

   //Point to the slot flash driver
   flashDrv = ((FlashDesc*)slot->flash)->driver;
 800112e:	6883      	ldr	r3, [r0, #8]

   //Erase slot data
   return flashDrv->erase(slot->addr, slot->size);
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	695b      	ldr	r3, [r3, #20]
 8001134:	6841      	ldr	r1, [r0, #4]
 8001136:	6800      	ldr	r0, [r0, #0]
 8001138:	4798      	blx	r3
}
 800113a:	bd08      	pop	{r3, pc}

0800113c <fallbackCompareSlots>:

   //Initialize status code
   error = NO_ERROR;

   //Check paramters validity
   if(slot1 == NULL || slot2 == NULL || res == NULL)
 800113c:	b1f0      	cbz	r0, 800117c <fallbackCompareSlots+0x40>
{
 800113e:	b570      	push	{r4, r5, r6, lr}
 8001140:	b090      	sub	sp, #64	; 0x40
 8001142:	460c      	mov	r4, r1
 8001144:	4615      	mov	r5, r2
   if(slot1 == NULL || slot2 == NULL || res == NULL)
 8001146:	b1d9      	cbz	r1, 8001180 <fallbackCompareSlots+0x44>
 8001148:	b1e2      	cbz	r2, 8001184 <fallbackCompareSlots+0x48>
      return ERROR_INVALID_PARAMETER;

   //Get image header from the first slot.
   error = bootGetSlotImgHeader(slot1, &imgHeader);
 800114a:	4669      	mov	r1, sp
 800114c:	f7ff ff7c 	bl	8001048 <bootGetSlotImgHeader>
   //Check there is no error
   if(!error)
 8001150:	b108      	cbz	r0, 8001156 <fallbackCompareSlots+0x1a>
      }
   }

   //Return state code
   return error;
}
 8001152:	b010      	add	sp, #64	; 0x40
 8001154:	bd70      	pop	{r4, r5, r6, pc}
      saveImgIdx = imgHeader.imgIndex;
 8001156:	9e01      	ldr	r6, [sp, #4]
      error = bootGetSlotImgHeader(slot2, &imgHeader);
 8001158:	4669      	mov	r1, sp
 800115a:	4620      	mov	r0, r4
 800115c:	f7ff ff74 	bl	8001048 <bootGetSlotImgHeader>
      if(!error)
 8001160:	2800      	cmp	r0, #0
 8001162:	d1f6      	bne.n	8001152 <fallbackCompareSlots+0x16>
         if(saveImgIdx < imgHeader.imgIndex)
 8001164:	9b01      	ldr	r3, [sp, #4]
 8001166:	42b3      	cmp	r3, r6
 8001168:	d902      	bls.n	8001170 <fallbackCompareSlots+0x34>
            *res = -1;
 800116a:	23ff      	movs	r3, #255	; 0xff
 800116c:	702b      	strb	r3, [r5, #0]
 800116e:	e7f0      	b.n	8001152 <fallbackCompareSlots+0x16>
         else if(saveImgIdx == imgHeader.imgIndex)
 8001170:	42b3      	cmp	r3, r6
            *res = 0;
 8001172:	bf0c      	ite	eq
 8001174:	2300      	moveq	r3, #0
            *res = 1;
 8001176:	2301      	movne	r3, #1
 8001178:	702b      	strb	r3, [r5, #0]
 800117a:	e7ea      	b.n	8001152 <fallbackCompareSlots+0x16>
      return ERROR_INVALID_PARAMETER;
 800117c:	2002      	movs	r0, #2
}
 800117e:	4770      	bx	lr
      return ERROR_INVALID_PARAMETER;
 8001180:	2002      	movs	r0, #2
 8001182:	e7e6      	b.n	8001152 <fallbackCompareSlots+0x16>
 8001184:	2002      	movs	r0, #2
 8001186:	e7e4      	b.n	8001152 <fallbackCompareSlots+0x16>

08001188 <fallbackFindSlotWithEquivImg>:
 * @param[out] slotEquivImg Pointer to the slot that holding the equivalent image.
 * @return Error code.
 **/

error_t fallbackFindSlotWithEquivImg(BootContext *context, SlotDesc **slotEquivImg)
{
 8001188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800118c:	b090      	sub	sp, #64	; 0x40

   error = NO_ERROR;
   foundSlot = FALSE;

   //Check parameters validity
   if(context == NULL)
 800118e:	b340      	cbz	r0, 80011e2 <fallbackFindSlotWithEquivImg+0x5a>
 8001190:	460d      	mov	r5, r1
 8001192:	4606      	mov	r6, r0
      return ERROR_INVALID_PARAMETER;

   //Get image header from the internal flash memory slot.
   error = bootGetSlotImgHeader(&context->primaryFlash.slots[0], &imgHeader);
 8001194:	4669      	mov	r1, sp
 8001196:	3020      	adds	r0, #32
 8001198:	f7ff ff56 	bl	8001048 <bootGetSlotImgHeader>
   //Check there is no error
   if(!error)
 800119c:	4604      	mov	r4, r0
 800119e:	b9c0      	cbnz	r0, 80011d2 <fallbackFindSlotWithEquivImg+0x4a>
   {
      //Save index of the current image in internal flash
      currImgIdx = imgHeader.imgIndex;
 80011a0:	f8dd 8004 	ldr.w	r8, [sp, #4]

      //Loop through the external flash slot list
      for(i = 0; i < FLASH_SLOTS_NUMBER; i++)
      {
         //Get image header from the listed slot
         error = bootGetSlotImgHeader(&context->secondaryFlash.slots[i], &imgHeader);
 80011a4:	f106 073c 	add.w	r7, r6, #60	; 0x3c
 80011a8:	4669      	mov	r1, sp
 80011aa:	4638      	mov	r0, r7
 80011ac:	f7ff ff4c 	bl	8001048 <bootGetSlotImgHeader>
         //Check there is no error
         if(error)
 80011b0:	4604      	mov	r4, r0
 80011b2:	b990      	cbnz	r0, 80011da <fallbackFindSlotWithEquivImg+0x52>
            break;
         }
         else
         {
            //Is index of the current image is equal to the index of the image from the listed slot?
            if(imgHeader.imgIndex == currImgIdx)
 80011b4:	9b01      	ldr	r3, [sp, #4]
 80011b6:	4598      	cmp	r8, r3
 80011b8:	d011      	beq.n	80011de <fallbackFindSlotWithEquivImg+0x56>
         error = bootGetSlotImgHeader(&context->secondaryFlash.slots[i], &imgHeader);
 80011ba:	f106 0748 	add.w	r7, r6, #72	; 0x48
 80011be:	4669      	mov	r1, sp
 80011c0:	4638      	mov	r0, r7
 80011c2:	f7ff ff41 	bl	8001048 <bootGetSlotImgHeader>
         if(error)
 80011c6:	b940      	cbnz	r0, 80011da <fallbackFindSlotWithEquivImg+0x52>
            if(imgHeader.imgIndex == currImgIdx)
 80011c8:	9b01      	ldr	r3, [sp, #4]
 80011ca:	4543      	cmp	r3, r8

      //Is equivalent slot not found?
      if(!foundSlot)
      {
         //Raise an error
         error = ERROR_FAILURE;
 80011cc:	bf18      	it	ne
 80011ce:	2401      	movne	r4, #1
            if(imgHeader.imgIndex == currImgIdx)
 80011d0:	d005      	beq.n	80011de <fallbackFindSlotWithEquivImg+0x56>
      }
   }

   //Return status code
   return error;
}
 80011d2:	4620      	mov	r0, r4
 80011d4:	b010      	add	sp, #64	; 0x40
 80011d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
         error = ERROR_FAILURE;
 80011da:	2401      	movs	r4, #1
 80011dc:	e7f9      	b.n	80011d2 <fallbackFindSlotWithEquivImg+0x4a>
               *slotEquivImg = &context->secondaryFlash.slots[i];
 80011de:	602f      	str	r7, [r5, #0]
      if(!foundSlot)
 80011e0:	e7f7      	b.n	80011d2 <fallbackFindSlotWithEquivImg+0x4a>
      return ERROR_INVALID_PARAMETER;
 80011e2:	2402      	movs	r4, #2
 80011e4:	e7f5      	b.n	80011d2 <fallbackFindSlotWithEquivImg+0x4a>

080011e6 <fallbackTask>:
{
 80011e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	4604      	mov	r4, r0
   slotEquivImg = NULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	9301      	str	r3, [sp, #4]
      error = bootCheckImage(&context->primaryFlash.slots[0]);
 80011f2:	f100 0620 	add.w	r6, r0, #32
 80011f6:	4630      	mov	r0, r6
 80011f8:	f7ff feba 	bl	8000f70 <bootCheckImage>
      if(error)
 80011fc:	4605      	mov	r5, r0
 80011fe:	b118      	cbz	r0, 8001208 <fallbackTask+0x22>
}
 8001200:	4628      	mov	r0, r5
 8001202:	b002      	add	sp, #8
 8001204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      error = bootCheckImage(&context->secondaryFlash.slots[0]);
 8001208:	f104 073c 	add.w	r7, r4, #60	; 0x3c
 800120c:	4638      	mov	r0, r7
 800120e:	f7ff feaf 	bl	8000f70 <bootCheckImage>
      if(error)
 8001212:	4605      	mov	r5, r0
 8001214:	2800      	cmp	r0, #0
 8001216:	d1f3      	bne.n	8001200 <fallbackTask+0x1a>
      error = bootCheckImage(&context->secondaryFlash.slots[1]);
 8001218:	f104 0848 	add.w	r8, r4, #72	; 0x48
 800121c:	4640      	mov	r0, r8
 800121e:	f7ff fea7 	bl	8000f70 <bootCheckImage>
      if(error)
 8001222:	4605      	mov	r5, r0
 8001224:	2800      	cmp	r0, #0
 8001226:	d1eb      	bne.n	8001200 <fallbackTask+0x1a>
      error = fallbackFindSlotWithEquivImg(context, &slotEquivImg);
 8001228:	a901      	add	r1, sp, #4
 800122a:	4620      	mov	r0, r4
 800122c:	f7ff ffac 	bl	8001188 <fallbackFindSlotWithEquivImg>
      if(error || slotEquivImg == NULL)
 8001230:	bb08      	cbnz	r0, 8001276 <fallbackTask+0x90>
 8001232:	9d01      	ldr	r5, [sp, #4]
 8001234:	b30d      	cbz	r5, 800127a <fallbackTask+0x94>
         slotBackupImg = &context->secondaryFlash.slots[1];
 8001236:	42af      	cmp	r7, r5
 8001238:	bf08      	it	eq
 800123a:	4647      	moveq	r7, r8
      error = fallbackCompareSlots(slotBackupImg, &context->primaryFlash.slots[0], &res);
 800123c:	f10d 0203 	add.w	r2, sp, #3
 8001240:	4631      	mov	r1, r6
 8001242:	4638      	mov	r0, r7
 8001244:	f7ff ff7a 	bl	800113c <fallbackCompareSlots>
      if(error || res >= 0)
 8001248:	b9c8      	cbnz	r0, 800127e <fallbackTask+0x98>
 800124a:	f99d 3003 	ldrsb.w	r3, [sp, #3]
 800124e:	2b00      	cmp	r3, #0
 8001250:	db01      	blt.n	8001256 <fallbackTask+0x70>
         error = ERROR_ABORTED;
 8001252:	250f      	movs	r5, #15
 8001254:	e7d4      	b.n	8001200 <fallbackTask+0x1a>
      error = fallbackDeleteSlot(slotEquivImg);
 8001256:	4628      	mov	r0, r5
 8001258:	f7ff ff68 	bl	800112c <fallbackDeleteSlot>
      if(error)
 800125c:	4605      	mov	r5, r0
 800125e:	2800      	cmp	r0, #0
 8001260:	d1ce      	bne.n	8001200 <fallbackTask+0x1a>
   return bootUpdateApp(context, slot);
 8001262:	4639      	mov	r1, r7
 8001264:	4620      	mov	r0, r4
 8001266:	f7ff fdc5 	bl	8000df4 <bootUpdateApp>
      if(error)
 800126a:	4605      	mov	r5, r0
 800126c:	2800      	cmp	r0, #0
 800126e:	d1c7      	bne.n	8001200 <fallbackTask+0x1a>
      mcuSystemReset();
 8001270:	f000 fa7e 	bl	8001770 <mcuSystemReset>
 8001274:	e7c4      	b.n	8001200 <fallbackTask+0x1a>
         error = ERROR_ABORTED;
 8001276:	250f      	movs	r5, #15
 8001278:	e7c2      	b.n	8001200 <fallbackTask+0x1a>
 800127a:	250f      	movs	r5, #15
 800127c:	e7c0      	b.n	8001200 <fallbackTask+0x1a>
         error = ERROR_ABORTED;
 800127e:	250f      	movs	r5, #15
 8001280:	e7be      	b.n	8001200 <fallbackTask+0x1a>

08001282 <crc32Init>:
 **/

void crc32Init(Crc32Context *context)
{
   //CRC (digest) preset value
   context->digest = 0xFFFFFFFF;
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
 8001286:	6003      	str	r3, [r0, #0]
}
 8001288:	4770      	bx	lr
	...

0800128c <crc32Update>:
 * @param[in] data Pointer to the buffer being hashed
 * @param[in] length Length of the buffer
 **/

void crc32Update(Crc32Context *context, const void *data, size_t length)
{
 800128c:	b430      	push	{r4, r5}
   size_t i;
   const uint8_t *p;
   uint32_t crc;

   //Restaure last crc
   crc = (uint32_t)context->digest;
 800128e:	6804      	ldr	r4, [r0, #0]

   //Point to the data over which to calculate the CRC
   p = (uint8_t *) data;

   //Process the incoming data
   for(i = 0; i < length; i++)
 8001290:	b17a      	cbz	r2, 80012b2 <crc32Update+0x26>
 8001292:	4613      	mov	r3, r2
 8001294:	1e4a      	subs	r2, r1, #1
 8001296:	3b01      	subs	r3, #1
 8001298:	4419      	add	r1, r3
   {
      //The message is processed byte by byte
      crc = (crc >> 8) ^ crc32Table[(crc & 0xFF) ^ p[i]];
 800129a:	4d07      	ldr	r5, [pc, #28]	; (80012b8 <crc32Update+0x2c>)
 800129c:	b2e3      	uxtb	r3, r4
 800129e:	f812 cf01 	ldrb.w	ip, [r2, #1]!
 80012a2:	ea83 030c 	eor.w	r3, r3, ip
 80012a6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80012aa:	ea83 2414 	eor.w	r4, r3, r4, lsr #8
   for(i = 0; i < length; i++)
 80012ae:	428a      	cmp	r2, r1
 80012b0:	d1f4      	bne.n	800129c <crc32Update+0x10>
   }

   //Save updated crc
   context->digest = crc;
 80012b2:	6004      	str	r4, [r0, #0]
}
 80012b4:	bc30      	pop	{r4, r5}
 80012b6:	4770      	bx	lr
 80012b8:	08005cfc 	.word	0x08005cfc

080012bc <crc32Final>:
 **/

void crc32Final(Crc32Context *context, uint8_t *digest)
{
   //Copy the resulting digest
   if(digest != NULL)
 80012bc:	b109      	cbz	r1, 80012c2 <crc32Final+0x6>
      osMemcpy(digest, (uint8_t*)&context->digest, CRC32_DIGEST_SIZE);
 80012be:	6802      	ldr	r2, [r0, #0]
 80012c0:	600a      	str	r2, [r1, #0]
}
 80012c2:	4770      	bx	lr

080012c4 <crc32Compute>:
{
 80012c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012c6:	4606      	mov	r6, r0
 80012c8:	460f      	mov	r7, r1
 80012ca:	4614      	mov	r4, r2
   Crc32Context *context = cryptoAllocMem(sizeof(Crc32Context));
 80012cc:	2004      	movs	r0, #4
 80012ce:	f7ff f927 	bl	8000520 <osAllocMem>
   if(context == NULL)
 80012d2:	b178      	cbz	r0, 80012f4 <crc32Compute+0x30>
 80012d4:	4605      	mov	r5, r0
   context->digest = 0xFFFFFFFF;
 80012d6:	f04f 33ff 	mov.w	r3, #4294967295
 80012da:	6003      	str	r3, [r0, #0]
   crc32Update(context, data, length);
 80012dc:	463a      	mov	r2, r7
 80012de:	4631      	mov	r1, r6
 80012e0:	f7ff ffd4 	bl	800128c <crc32Update>
   if(digest != NULL)
 80012e4:	b10c      	cbz	r4, 80012ea <crc32Compute+0x26>
      osMemcpy(digest, (uint8_t*)&context->digest, CRC32_DIGEST_SIZE);
 80012e6:	682b      	ldr	r3, [r5, #0]
 80012e8:	6023      	str	r3, [r4, #0]
   cryptoFreeMem(context);
 80012ea:	4628      	mov	r0, r5
 80012ec:	f7ff f91c 	bl	8000528 <osFreeMem>
   return NO_ERROR;
 80012f0:	2000      	movs	r0, #0
}
 80012f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return ERROR_OUT_OF_MEMORY;
 80012f4:	2064      	movs	r0, #100	; 0x64
 80012f6:	e7fc      	b.n	80012f2 <crc32Compute+0x2e>

080012f8 <imageCheckHeader>:
 * @param[in] header Pointeur to the internal image header to be checked
 * @return Status code
 **/

error_t imageCheckHeader(ImageHeader *header)
{
 80012f8:	b530      	push	{r4, r5, lr}
 80012fa:	b083      	sub	sp, #12
   error_t error;
   uint32_t computedCrc;

   //Check parameter vailidty
   if(header == NULL)
 80012fc:	b308      	cbz	r0, 8001342 <imageCheckHeader+0x4a>
 80012fe:	4605      	mov	r5, r0
      return ERROR_INVALID_PARAMETER;

   //Compute image header crc
   error = CRC32_HASH_ALGO->compute((uint8_t*)header, sizeof(ImageHeader) - CRC32_DIGEST_SIZE, (uint8_t*)&computedCrc);
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <imageCheckHeader+0x54>)
 8001302:	6a1b      	ldr	r3, [r3, #32]
 8001304:	aa01      	add	r2, sp, #4
 8001306:	213c      	movs	r1, #60	; 0x3c
 8001308:	4798      	blx	r3
   if(error)
 800130a:	4604      	mov	r4, r0
 800130c:	b960      	cbnz	r0, 8001328 <imageCheckHeader+0x30>
      TRACE_ERROR("Failed to compute image header crc!\r\n");
      return error;
   }

   //Check image header integrity
   if(header->headCrc != computedCrc)
 800130e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001310:	9b01      	ldr	r3, [sp, #4]
 8001312:	429a      	cmp	r2, r3
 8001314:	d117      	bne.n	8001346 <imageCheckHeader+0x4e>
      return ERROR_INVALID_HEADER;

   //Check image header version
   if(header->headVers != IMAGE_HEADER_VERSION)
 8001316:	682b      	ldr	r3, [r5, #0]
      return ERROR_INVALID_VERSION;
 8001318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800131c:	bf0c      	ite	eq
 800131e:	4604      	moveq	r4, r0
 8001320:	24f3      	movne	r4, #243	; 0xf3

   //Successful process
   return NO_ERROR;
}
 8001322:	4620      	mov	r0, r4
 8001324:	b003      	add	sp, #12
 8001326:	bd30      	pop	{r4, r5, pc}
      TRACE_ERROR("Failed to compute image header crc!\r\n");
 8001328:	f7ff f8f8 	bl	800051c <osSuspendAllTasks>
 800132c:	4b08      	ldr	r3, [pc, #32]	; (8001350 <imageCheckHeader+0x58>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	2225      	movs	r2, #37	; 0x25
 8001334:	2101      	movs	r1, #1
 8001336:	4807      	ldr	r0, [pc, #28]	; (8001354 <imageCheckHeader+0x5c>)
 8001338:	f003 fe16 	bl	8004f68 <fwrite>
 800133c:	f7ff f8ef 	bl	800051e <osResumeAllTasks>
      return error;
 8001340:	e7ef      	b.n	8001322 <imageCheckHeader+0x2a>
      return ERROR_INVALID_PARAMETER;
 8001342:	2402      	movs	r4, #2
 8001344:	e7ed      	b.n	8001322 <imageCheckHeader+0x2a>
      return ERROR_INVALID_HEADER;
 8001346:	24d4      	movs	r4, #212	; 0xd4
 8001348:	e7eb      	b.n	8001322 <imageCheckHeader+0x2a>
 800134a:	bf00      	nop
 800134c:	08005cc8 	.word	0x08005cc8
 8001350:	200000e4 	.word	0x200000e4
 8001354:	080060fc 	.word	0x080060fc

08001358 <imageGetHeader>:
{
   error_t error;
   ImageHeader *tempHeader;

   //Check parameters validity
   if(buffer == NULL || bufferLen == 0)
 8001358:	b150      	cbz	r0, 8001370 <imageGetHeader+0x18>
{
 800135a:	b538      	push	{r3, r4, r5, lr}
 800135c:	4614      	mov	r4, r2
 800135e:	4605      	mov	r5, r0
   if(buffer == NULL || bufferLen == 0)
 8001360:	b141      	cbz	r1, 8001374 <imageGetHeader+0x1c>
      return ERROR_INVALID_PARAMETER;

   if(bufferLen < sizeof(ImageHeader))
 8001362:	293f      	cmp	r1, #63	; 0x3f
 8001364:	d908      	bls.n	8001378 <imageGetHeader+0x20>

   //Point to the image header
   tempHeader = (ImageHeader *)buffer;

   //Check image header
   error = imageCheckHeader(tempHeader);
 8001366:	f7ff ffc7 	bl	80012f8 <imageCheckHeader>
   //Is any error?
   if(error)
 800136a:	b900      	cbnz	r0, 800136e <imageGetHeader+0x16>
      return error;

   //Save image header
   *header = (ImageHeader*) tempHeader;
 800136c:	6025      	str	r5, [r4, #0]

   //Successful process
   return NO_ERROR;
}
 800136e:	bd38      	pop	{r3, r4, r5, pc}
      return ERROR_INVALID_PARAMETER;
 8001370:	2002      	movs	r0, #2
}
 8001372:	4770      	bx	lr
      return ERROR_INVALID_PARAMETER;
 8001374:	2002      	movs	r0, #2
 8001376:	e7fa      	b.n	800136e <imageGetHeader+0x16>
      return ERROR_INVALID_LENGTH;
 8001378:	20ec      	movs	r0, #236	; 0xec
 800137a:	e7f8      	b.n	800136e <imageGetHeader+0x16>

0800137c <slotRead>:
   readAddr = slot->addr + offset;
   //Compute slot top address
   topAddress = slot->addr + slot->size;

   //Check parameter validity
   if(slot == NULL || buffer == NULL || length == 0 ||
 800137c:	b1aa      	cbz	r2, 80013aa <slotRead+0x2e>
{
 800137e:	b510      	push	{r4, lr}
 8001380:	4684      	mov	ip, r0
 8001382:	4696      	mov	lr, r2
   if(slot == NULL || buffer == NULL || length == 0 ||
 8001384:	b19b      	cbz	r3, 80013ae <slotRead+0x32>
   readAddr = slot->addr + offset;
 8001386:	6802      	ldr	r2, [r0, #0]
 8001388:	1850      	adds	r0, r2, r1
   topAddress = slot->addr + slot->size;
 800138a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800138e:	440a      	add	r2, r1
   if(slot == NULL || buffer == NULL || length == 0 ||
 8001390:	4290      	cmp	r0, r2
 8001392:	d20e      	bcs.n	80013b2 <slotRead+0x36>
      (readAddr >= topAddress) ||
      (readAddr + length > topAddress))
 8001394:	18c1      	adds	r1, r0, r3
      (readAddr >= topAddress) ||
 8001396:	4291      	cmp	r1, r2
 8001398:	d80d      	bhi.n	80013b6 <slotRead+0x3a>
      return ERROR_INVALID_PARAMETER;

   //Get memory driver
   flashDriver = ((FlashDesc*)slot->flash)->driver;
 800139a:	f8dc 2008 	ldr.w	r2, [ip, #8]

   //Read slot memory
   error = flashDriver->read(readAddr, buffer, length);
 800139e:	6812      	ldr	r2, [r2, #0]
 80013a0:	6914      	ldr	r4, [r2, #16]
 80013a2:	461a      	mov	r2, r3
 80013a4:	4671      	mov	r1, lr
 80013a6:	47a0      	blx	r4
   if(error)
      return error;

   //Successful process
   return NO_ERROR;
}
 80013a8:	bd10      	pop	{r4, pc}
      return ERROR_INVALID_PARAMETER;
 80013aa:	2002      	movs	r0, #2
}
 80013ac:	4770      	bx	lr
      return ERROR_INVALID_PARAMETER;
 80013ae:	2002      	movs	r0, #2
 80013b0:	e7fa      	b.n	80013a8 <slotRead+0x2c>
 80013b2:	2002      	movs	r0, #2
 80013b4:	e7f8      	b.n	80013a8 <slotRead+0x2c>
 80013b6:	2002      	movs	r0, #2
 80013b8:	e7f6      	b.n	80013a8 <slotRead+0x2c>
	...

080013bc <stm32wlxxFlashDriverGetInfo>:
 **/

error_t stm32wlxxFlashDriverGetInfo(const FlashInfo **info)
{
   //Set Memory information pointeur
   *info = (const FlashInfo*) &stm32wlxxFlashDriverInfo;
 80013bc:	4b01      	ldr	r3, [pc, #4]	; (80013c4 <stm32wlxxFlashDriverGetInfo+0x8>)
 80013be:	6003      	str	r3, [r0, #0]

   //Successfull process
   return NO_ERROR;
}
 80013c0:	2000      	movs	r0, #0
 80013c2:	4770      	bx	lr
 80013c4:	08006240 	.word	0x08006240

080013c8 <stm32wlxxFlashDriverGetStatus>:
error_t stm32wlxxFlashDriverGetStatus(FlashStatus *status)
{
   uint32_t flag;

   //Check parameter vailidity
   if(status == NULL)
 80013c8:	4602      	mov	r2, r0
 80013ca:	b1a0      	cbz	r0, 80013f6 <stm32wlxxFlashDriverGetStatus+0x2e>
      return ERROR_INVALID_PARAMETER;

   do
   {
      //Get Flash Memory error flags status
      flag = __HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS);
 80013cc:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <stm32wlxxFlashDriverGetStatus+0x34>)
 80013ce:	6999      	ldr	r1, [r3, #24]
      //Is any error flag set?
      if(flag != RESET)
 80013d0:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <stm32wlxxFlashDriverGetStatus+0x38>)
 80013d2:	438b      	bics	r3, r1
 80013d4:	d008      	beq.n	80013e8 <stm32wlxxFlashDriverGetStatus+0x20>
         *status = FLASH_STATUS_ERR;
         break;
      }

      //Get Flash Memory busy flags
      flag = __HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY);
 80013d6:	4b09      	ldr	r3, [pc, #36]	; (80013fc <stm32wlxxFlashDriverGetStatus+0x34>)
 80013d8:	691b      	ldr	r3, [r3, #16]
      //Is busy flag set?
      if(flag != RESET)
 80013da:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80013de:	d007      	beq.n	80013f0 <stm32wlxxFlashDriverGetStatus+0x28>
      {
         //Set Flash memory status
         *status = FLASH_STATUS_BUSY;
 80013e0:	2301      	movs	r3, #1
 80013e2:	7003      	strb	r3, [r0, #0]
      //Set Flash memory status
      *status = FLASH_STATUS_OK;
   }while(0);

   //Successfull process
   return NO_ERROR;
 80013e4:	2000      	movs	r0, #0
         break;
 80013e6:	4770      	bx	lr
         *status = FLASH_STATUS_ERR;
 80013e8:	2302      	movs	r3, #2
 80013ea:	7003      	strb	r3, [r0, #0]
   return NO_ERROR;
 80013ec:	2000      	movs	r0, #0
         break;
 80013ee:	4770      	bx	lr
      *status = FLASH_STATUS_OK;
 80013f0:	2000      	movs	r0, #0
 80013f2:	7010      	strb	r0, [r2, #0]
 80013f4:	4770      	bx	lr
      return ERROR_INVALID_PARAMETER;
 80013f6:	2002      	movs	r0, #2
}
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	58004000 	.word	0x58004000
 8001400:	c000c3fa 	.word	0xc000c3fa

08001404 <stm32wlxxFlashDriverRead>:

   //Precompute the top address
   topAddress = STM32WLxx_FLASH_ADDR + STM32WLxx_FLASH_SIZE;

   //Check address validity
   if(address < STM32WLxx_FLASH_ADDR || address >= topAddress)
 8001404:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 8001408:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800140c:	d213      	bcs.n	8001436 <stm32wlxxFlashDriverRead+0x32>
      return ERROR_INVALID_PARAMETER;

   //Check parameters validity (is data in flash)
   if(data == NULL || address + length > topAddress)
 800140e:	b1a1      	cbz	r1, 800143a <stm32wlxxFlashDriverRead+0x36>
 8001410:	eb00 0c02 	add.w	ip, r0, r2
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <stm32wlxxFlashDriverRead+0x44>)
 8001416:	459c      	cmp	ip, r3
 8001418:	d811      	bhi.n	800143e <stm32wlxxFlashDriverRead+0x3a>
      return ERROR_INVALID_PARAMETER;

   //Perform read operation
   for(i = 0; i < length; i++)
 800141a:	b192      	cbz	r2, 8001442 <stm32wlxxFlashDriverRead+0x3e>
 800141c:	1e4b      	subs	r3, r1, #1
 800141e:	3a01      	subs	r2, #1
 8001420:	eb01 0c02 	add.w	ip, r1, r2
   {
      *((uint8_t *)data + i) = *(uint8_t*)address;
 8001424:	3001      	adds	r0, #1
 8001426:	1a42      	subs	r2, r0, r1
 8001428:	5cd1      	ldrb	r1, [r2, r3]
 800142a:	f803 1f01 	strb.w	r1, [r3, #1]!
   for(i = 0; i < length; i++)
 800142e:	4563      	cmp	r3, ip
 8001430:	d1fa      	bne.n	8001428 <stm32wlxxFlashDriverRead+0x24>
      address++;
   }

   //Successfull process
   return NO_ERROR;
 8001432:	2000      	movs	r0, #0
 8001434:	4770      	bx	lr
      return ERROR_INVALID_PARAMETER;
 8001436:	2002      	movs	r0, #2
 8001438:	4770      	bx	lr
      return ERROR_INVALID_PARAMETER;
 800143a:	2002      	movs	r0, #2
 800143c:	4770      	bx	lr
 800143e:	2002      	movs	r0, #2
 8001440:	4770      	bx	lr
   return NO_ERROR;
 8001442:	2000      	movs	r0, #0
}
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	08040000 	.word	0x08040000

0800144c <stm32wlxxFlashDriverGetNextSector>:

   lastSectorAddr = sectorsList[SECTORS_LIST_LEN-1].addr +
      (sectorsList[SECTORS_LIST_LEN-1].size * (sectorsList[SECTORS_LIST_LEN-1].nb - 1));

   //Check parameters validity
   if(address < STM32WLxx_FLASH_ADDR || address > lastSectorAddr || sectorAddr == NULL)
 800144c:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 8001450:	f5b3 3f7e 	cmp.w	r3, #260096	; 0x3f800
 8001454:	d80f      	bhi.n	8001476 <stm32wlxxFlashDriverGetNextSector+0x2a>
 8001456:	b181      	cbz	r1, 800147a <stm32wlxxFlashDriverGetNextSector+0x2e>
      {
         //Loop through sectors group list
         for(j = 0; j < sg->nb; j++)
         {
            //Is address located in current sector?
            if(address <= sg->addr + j*sg->size)
 8001458:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 800145c:	d906      	bls.n	800146c <stm32wlxxFlashDriverGetNextSector+0x20>
 800145e:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
 8001462:	4283      	cmp	r3, r0
 8001464:	d204      	bcs.n	8001470 <stm32wlxxFlashDriverGetNextSector+0x24>
         for(j = 0; j < sg->nb; j++)
 8001466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800146a:	e7fa      	b.n	8001462 <stm32wlxxFlashDriverGetNextSector+0x16>
            if(address <= sg->addr + j*sg->size)
 800146c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
         }
      }
   }

   //Save next sector addr
   *sectorAddr = sAddr;
 8001470:	600b      	str	r3, [r1, #0]

   //Succesfull process
   return NO_ERROR;
 8001472:	2000      	movs	r0, #0
 8001474:	4770      	bx	lr
      return ERROR_INVALID_PARAMETER;
 8001476:	2002      	movs	r0, #2
 8001478:	4770      	bx	lr
 800147a:	2002      	movs	r0, #2
}
 800147c:	4770      	bx	lr
	...

08001480 <stm32wlxxFlashDriverInit>:
{
 8001480:	b508      	push	{r3, lr}
   FLASH_WaitForLastOperation(50);
 8001482:	2032      	movs	r0, #50	; 0x32
 8001484:	f000 fbaa 	bl	8001bdc <FLASH_WaitForLastOperation>
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001488:	4b04      	ldr	r3, [pc, #16]	; (800149c <stm32wlxxFlashDriverInit+0x1c>)
 800148a:	699a      	ldr	r2, [r3, #24]
 800148c:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8001490:	619a      	str	r2, [r3, #24]
 8001492:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8001496:	611a      	str	r2, [r3, #16]
}
 8001498:	2000      	movs	r0, #0
 800149a:	bd08      	pop	{r3, pc}
 800149c:	58004000 	.word	0x58004000

080014a0 <stm32wlxxFlashDriverEraseSector>:
   HAL_StatusTypeDef status;
   FLASH_EraseInitTypeDef EraseInitStruct;
   uint32_t sectorError;

   //Check parameter validity
   if((firstSector >= STM32WLxx_FLASH_SECTOR_NUMBER) || (nbSectors == 0) ||
 80014a0:	2a00      	cmp	r2, #0
 80014a2:	d05f      	beq.n	8001564 <stm32wlxxFlashDriverEraseSector+0xc4>
{
 80014a4:	b530      	push	{r4, r5, lr}
 80014a6:	b085      	sub	sp, #20
 80014a8:	460c      	mov	r4, r1
 80014aa:	4615      	mov	r5, r2
      ((firstSector + nbSectors - 1) >= STM32WLxx_FLASH_SECTOR_NUMBER) ||
 80014ac:	1e53      	subs	r3, r2, #1
 80014ae:	440b      	add	r3, r1
   if((firstSector >= STM32WLxx_FLASH_SECTOR_NUMBER) || (nbSectors == 0) ||
 80014b0:	430b      	orrs	r3, r1
 80014b2:	2b7f      	cmp	r3, #127	; 0x7f
 80014b4:	d858      	bhi.n	8001568 <stm32wlxxFlashDriverEraseSector+0xc8>
      ((firstSector + nbSectors - 1) >= STM32WLxx_FLASH_SECTOR_NUMBER) ||
 80014b6:	2801      	cmp	r0, #1
 80014b8:	d002      	beq.n	80014c0 <stm32wlxxFlashDriverEraseSector+0x20>
      (bankID != STM32WLxx_FLASH_BANK1_ID))
      return ERROR_INVALID_PARAMETER;
 80014ba:	2002      	movs	r0, #2
      }
   }while(0);

   //Return status code
   return (status == HAL_OK) ? NO_ERROR : ERROR_WRITE_FAILED;
}
 80014bc:	b005      	add	sp, #20
 80014be:	bd30      	pop	{r4, r5, pc}
      status = HAL_FLASH_Unlock();
 80014c0:	f000 fb6c 	bl	8001b9c <HAL_FLASH_Unlock>
      if (status != HAL_OK)
 80014c4:	b170      	cbz	r0, 80014e4 <stm32wlxxFlashDriverEraseSector+0x44>
         TRACE_ERROR("Flash Control Register unlock failed!\r\n");
 80014c6:	f7ff f829 	bl	800051c <osSuspendAllTasks>
 80014ca:	4b28      	ldr	r3, [pc, #160]	; (800156c <stm32wlxxFlashDriverEraseSector+0xcc>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	2227      	movs	r2, #39	; 0x27
 80014d2:	2101      	movs	r1, #1
 80014d4:	4826      	ldr	r0, [pc, #152]	; (8001570 <stm32wlxxFlashDriverEraseSector+0xd0>)
 80014d6:	f003 fd47 	bl	8004f68 <fwrite>
 80014da:	f7ff f820 	bl	800051e <osResumeAllTasks>
   return (status == HAL_OK) ? NO_ERROR : ERROR_WRITE_FAILED;
 80014de:	f240 2009 	movw	r0, #521	; 0x209
 80014e2:	e7eb      	b.n	80014bc <stm32wlxxFlashDriverEraseSector+0x1c>
      EraseInitStruct.TypeErase    = FLASH_TYPEERASE_PAGES;
 80014e4:	2302      	movs	r3, #2
 80014e6:	9301      	str	r3, [sp, #4]
      EraseInitStruct.Page       = firstSector;
 80014e8:	9402      	str	r4, [sp, #8]
      EraseInitStruct.NbPages    = nbSectors;
 80014ea:	9503      	str	r5, [sp, #12]
      FLASH_WaitForLastOperation((uint32_t)5000U);
 80014ec:	f241 3088 	movw	r0, #5000	; 0x1388
 80014f0:	f000 fb74 	bl	8001bdc <FLASH_WaitForLastOperation>
      status = HAL_FLASHEx_Erase(&EraseInitStruct, &sectorError);
 80014f4:	4669      	mov	r1, sp
 80014f6:	a801      	add	r0, sp, #4
 80014f8:	f000 fbea 	bl	8001cd0 <HAL_FLASHEx_Erase>
      if(status != HAL_OK)
 80014fc:	b988      	cbnz	r0, 8001522 <stm32wlxxFlashDriverEraseSector+0x82>
      if(HAL_FLASH_Lock() != HAL_OK)
 80014fe:	f000 fb61 	bl	8001bc4 <HAL_FLASH_Lock>
 8001502:	2800      	cmp	r0, #0
 8001504:	d0da      	beq.n	80014bc <stm32wlxxFlashDriverEraseSector+0x1c>
         TRACE_ERROR("Flash Control Register lock failed!\r\n");
 8001506:	f7ff f809 	bl	800051c <osSuspendAllTasks>
 800150a:	4b18      	ldr	r3, [pc, #96]	; (800156c <stm32wlxxFlashDriverEraseSector+0xcc>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	2225      	movs	r2, #37	; 0x25
 8001512:	2101      	movs	r1, #1
 8001514:	4817      	ldr	r0, [pc, #92]	; (8001574 <stm32wlxxFlashDriverEraseSector+0xd4>)
 8001516:	f003 fd27 	bl	8004f68 <fwrite>
 800151a:	f7ff f800 	bl	800051e <osResumeAllTasks>
   return (status == HAL_OK) ? NO_ERROR : ERROR_WRITE_FAILED;
 800151e:	2000      	movs	r0, #0
 8001520:	e7cc      	b.n	80014bc <stm32wlxxFlashDriverEraseSector+0x1c>
         TRACE_ERROR("Failed to erase flash sector(s) %ld, error = 0x%08lX!\r\n", firstSector, sectorError);
 8001522:	f7fe fffb 	bl	800051c <osSuspendAllTasks>
 8001526:	4b11      	ldr	r3, [pc, #68]	; (800156c <stm32wlxxFlashDriverEraseSector+0xcc>)
 8001528:	6818      	ldr	r0, [r3, #0]
 800152a:	9b00      	ldr	r3, [sp, #0]
 800152c:	4622      	mov	r2, r4
 800152e:	4912      	ldr	r1, [pc, #72]	; (8001578 <stm32wlxxFlashDriverEraseSector+0xd8>)
 8001530:	68c0      	ldr	r0, [r0, #12]
 8001532:	f003 fc9d 	bl	8004e70 <fiprintf>
 8001536:	f7fe fff2 	bl	800051e <osResumeAllTasks>
      if(HAL_FLASH_Lock() != HAL_OK)
 800153a:	f000 fb43 	bl	8001bc4 <HAL_FLASH_Lock>
 800153e:	b170      	cbz	r0, 800155e <stm32wlxxFlashDriverEraseSector+0xbe>
         TRACE_ERROR("Flash Control Register lock failed!\r\n");
 8001540:	f7fe ffec 	bl	800051c <osSuspendAllTasks>
 8001544:	4b09      	ldr	r3, [pc, #36]	; (800156c <stm32wlxxFlashDriverEraseSector+0xcc>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	2225      	movs	r2, #37	; 0x25
 800154c:	2101      	movs	r1, #1
 800154e:	4809      	ldr	r0, [pc, #36]	; (8001574 <stm32wlxxFlashDriverEraseSector+0xd4>)
 8001550:	f003 fd0a 	bl	8004f68 <fwrite>
 8001554:	f7fe ffe3 	bl	800051e <osResumeAllTasks>
   return (status == HAL_OK) ? NO_ERROR : ERROR_WRITE_FAILED;
 8001558:	f240 2009 	movw	r0, #521	; 0x209
 800155c:	e7ae      	b.n	80014bc <stm32wlxxFlashDriverEraseSector+0x1c>
 800155e:	f240 2009 	movw	r0, #521	; 0x209
 8001562:	e7ab      	b.n	80014bc <stm32wlxxFlashDriverEraseSector+0x1c>
      return ERROR_INVALID_PARAMETER;
 8001564:	2002      	movs	r0, #2
}
 8001566:	4770      	bx	lr
      return ERROR_INVALID_PARAMETER;
 8001568:	2002      	movs	r0, #2
 800156a:	e7a7      	b.n	80014bc <stm32wlxxFlashDriverEraseSector+0x1c>
 800156c:	200000e4 	.word	0x200000e4
 8001570:	08006124 	.word	0x08006124
 8001574:	08006184 	.word	0x08006184
 8001578:	0800614c 	.word	0x0800614c

0800157c <stm32wlxxFlashGetSector>:

        //Loop through sector group sectors list
        for(j = 0; j < sGroup->nb; j++)
        {
            //Is current sector address matches given address?
            if(sGroup->addr + sGroup->size*j == address)
 800157c:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 8001580:	d00c      	beq.n	800159c <stm32wlxxFlashGetSector+0x20>
 8001582:	f04f 2208 	mov.w	r2, #134219776	; 0x8000800
        for(j = 0; j < sGroup->nb; j++)
 8001586:	2301      	movs	r3, #1
            if(sGroup->addr + sGroup->size*j == address)
 8001588:	4282      	cmp	r2, r0
 800158a:	d008      	beq.n	800159e <stm32wlxxFlashGetSector+0x22>
        for(j = 0; j < sGroup->nb; j++)
 800158c:	3301      	adds	r3, #1
 800158e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001592:	2b80      	cmp	r3, #128	; 0x80
 8001594:	d1f8      	bne.n	8001588 <stm32wlxxFlashGetSector+0xc>
                return sector;
            }
        }
    }

    return sector;
 8001596:	f04f 30ff 	mov.w	r0, #4294967295
}
 800159a:	4770      	bx	lr
        for(j = 0; j < sGroup->nb; j++)
 800159c:	2300      	movs	r3, #0
                sector = j;
 800159e:	4618      	mov	r0, r3
                return sector;
 80015a0:	4770      	bx	lr
	...

080015a4 <stm32wlxxFlashDriverErase>:
   if((address < STM32WLxx_FLASH_ADDR || address >= topAddress) ||
 80015a4:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 80015a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80015ac:	d21f      	bcs.n	80015ee <stm32wlxxFlashDriverErase+0x4a>
{
 80015ae:	b530      	push	{r4, r5, lr}
 80015b0:	b083      	sub	sp, #12
 80015b2:	4604      	mov	r4, r0
   if((address < STM32WLxx_FLASH_ADDR || address >= topAddress) ||
 80015b4:	f010 0f03 	tst.w	r0, #3
 80015b8:	d11b      	bne.n	80015f2 <stm32wlxxFlashDriverErase+0x4e>
   if((length == 0) || (address + length > topAddress))
 80015ba:	b1e1      	cbz	r1, 80015f6 <stm32wlxxFlashDriverErase+0x52>
 80015bc:	4408      	add	r0, r1
 80015be:	4b10      	ldr	r3, [pc, #64]	; (8001600 <stm32wlxxFlashDriverErase+0x5c>)
 80015c0:	4298      	cmp	r0, r3
 80015c2:	d81a      	bhi.n	80015fa <stm32wlxxFlashDriverErase+0x56>
   if(address + length == topAddress)
 80015c4:	d008      	beq.n	80015d8 <stm32wlxxFlashDriverErase+0x34>
      error = stm32wlxxFlashDriverGetNextSector(address+length, &lastSectorAddr);
 80015c6:	a901      	add	r1, sp, #4
 80015c8:	f7ff ff40 	bl	800144c <stm32wlxxFlashDriverGetNextSector>
      if(error)
 80015cc:	b968      	cbnz	r0, 80015ea <stm32wlxxFlashDriverErase+0x46>
      lastSectorNumber = stm32wlxxFlashGetSector(lastSectorAddr);
 80015ce:	9801      	ldr	r0, [sp, #4]
 80015d0:	f7ff ffd4 	bl	800157c <stm32wlxxFlashGetSector>
 80015d4:	4605      	mov	r5, r0
 80015d6:	e000      	b.n	80015da <stm32wlxxFlashDriverErase+0x36>
      lastSectorNumber = STM32WLxx_FLASH_SECTOR_NUMBER;
 80015d8:	2580      	movs	r5, #128	; 0x80
   firstSectorNumber = stm32wlxxFlashGetSector(address);
 80015da:	4620      	mov	r0, r4
 80015dc:	f7ff ffce 	bl	800157c <stm32wlxxFlashGetSector>
 80015e0:	4601      	mov	r1, r0
   error = stm32wlxxFlashDriverEraseSector(STM32WLxx_FLASH_BANK1_ID, firstSectorNumber, lastSectorNumber-firstSectorNumber);
 80015e2:	1a2a      	subs	r2, r5, r0
 80015e4:	2001      	movs	r0, #1
 80015e6:	f7ff ff5b 	bl	80014a0 <stm32wlxxFlashDriverEraseSector>
}
 80015ea:	b003      	add	sp, #12
 80015ec:	bd30      	pop	{r4, r5, pc}
      return ERROR_INVALID_PARAMETER;
 80015ee:	2002      	movs	r0, #2
}
 80015f0:	4770      	bx	lr
      return ERROR_INVALID_PARAMETER;
 80015f2:	2002      	movs	r0, #2
 80015f4:	e7f9      	b.n	80015ea <stm32wlxxFlashDriverErase+0x46>
      return ERROR_INVALID_PARAMETER;
 80015f6:	2002      	movs	r0, #2
 80015f8:	e7f7      	b.n	80015ea <stm32wlxxFlashDriverErase+0x46>
 80015fa:	2002      	movs	r0, #2
 80015fc:	e7f5      	b.n	80015ea <stm32wlxxFlashDriverErase+0x46>
 80015fe:	bf00      	nop
 8001600:	08040000 	.word	0x08040000

08001604 <stm32wlxxFlashDriverIsSectorAddr>:
{
 8001604:	b508      	push	{r3, lr}
   sector = stm32wlxxFlashGetSector(address);
 8001606:	f7ff ffb9 	bl	800157c <stm32wlxxFlashGetSector>
}
 800160a:	43c0      	mvns	r0, r0
 800160c:	0fc0      	lsrs	r0, r0, #31
 800160e:	bd08      	pop	{r3, pc}

08001610 <stm32wlxxFlashDriverWriteWord>:
   if((address + sizeof(uint32_t) >= topAddress) ||
 8001610:	1d02      	adds	r2, r0, #4
 8001612:	4b26      	ldr	r3, [pc, #152]	; (80016ac <stm32wlxxFlashDriverWriteWord+0x9c>)
 8001614:	429a      	cmp	r2, r3
 8001616:	d845      	bhi.n	80016a4 <stm32wlxxFlashDriverWriteWord+0x94>
{
 8001618:	b570      	push	{r4, r5, r6, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	4604      	mov	r4, r0
 800161e:	460e      	mov	r6, r1
   if((address + sizeof(uint32_t) >= topAddress) ||
 8001620:	f010 0f03 	tst.w	r0, #3
 8001624:	d140      	bne.n	80016a8 <stm32wlxxFlashDriverWriteWord+0x98>
   HAL_FLASH_Unlock();
 8001626:	f000 fab9 	bl	8001b9c <HAL_FLASH_Unlock>
      flashSector = stm32wlxxFlashGetSector(address);
 800162a:	4620      	mov	r0, r4
 800162c:	f7ff ffa6 	bl	800157c <stm32wlxxFlashGetSector>
      if(flashSector >= 0)
 8001630:	2800      	cmp	r0, #0
 8001632:	db0e      	blt.n	8001652 <stm32wlxxFlashDriverWriteWord+0x42>
         EraseInitStruct.TypeErase    = FLASH_TYPEERASE_PAGES;
 8001634:	2302      	movs	r3, #2
 8001636:	9300      	str	r3, [sp, #0]
         EraseInitStruct.Page       = flashSector;
 8001638:	9001      	str	r0, [sp, #4]
         EraseInitStruct.NbPages    = 1;
 800163a:	2301      	movs	r3, #1
 800163c:	9302      	str	r3, [sp, #8]
         FLASH_WaitForLastOperation((uint32_t)5000U);
 800163e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001642:	f000 facb 	bl	8001bdc <FLASH_WaitForLastOperation>
         status = HAL_FLASHEx_Erase(&EraseInitStruct, &sectorError);
 8001646:	a903      	add	r1, sp, #12
 8001648:	4668      	mov	r0, sp
 800164a:	f000 fb41 	bl	8001cd0 <HAL_FLASHEx_Erase>
         if(status != HAL_OK)
 800164e:	4605      	mov	r5, r0
 8001650:	b970      	cbnz	r0, 8001670 <stm32wlxxFlashDriverWriteWord+0x60>
      status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, *((uint64_t*)word));
 8001652:	e9d6 2300 	ldrd	r2, r3, [r6]
 8001656:	4621      	mov	r1, r4
 8001658:	2001      	movs	r0, #1
 800165a:	f000 faf5 	bl	8001c48 <HAL_FLASH_Program>
      if(status != HAL_OK)
 800165e:	4605      	mov	r5, r0
 8001660:	b998      	cbnz	r0, 800168a <stm32wlxxFlashDriverWriteWord+0x7a>
   HAL_FLASH_Lock();
 8001662:	f000 faaf 	bl	8001bc4 <HAL_FLASH_Lock>
   return (status != HAL_OK)? ERROR_FAILURE : NO_ERROR;
 8001666:	1e28      	subs	r0, r5, #0
 8001668:	bf18      	it	ne
 800166a:	2001      	movne	r0, #1
}
 800166c:	b004      	add	sp, #16
 800166e:	bd70      	pop	{r4, r5, r6, pc}
            TRACE_ERROR("Flash erase failed!\r\n");
 8001670:	f7fe ff54 	bl	800051c <osSuspendAllTasks>
 8001674:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <stm32wlxxFlashDriverWriteWord+0xa0>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	2215      	movs	r2, #21
 800167c:	2101      	movs	r1, #1
 800167e:	480d      	ldr	r0, [pc, #52]	; (80016b4 <stm32wlxxFlashDriverWriteWord+0xa4>)
 8001680:	f003 fc72 	bl	8004f68 <fwrite>
 8001684:	f7fe ff4b 	bl	800051e <osResumeAllTasks>
            break;
 8001688:	e7eb      	b.n	8001662 <stm32wlxxFlashDriverWriteWord+0x52>
         TRACE_ERROR("Flash program failed!\r\n");
 800168a:	f7fe ff47 	bl	800051c <osSuspendAllTasks>
 800168e:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <stm32wlxxFlashDriverWriteWord+0xa0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	2217      	movs	r2, #23
 8001696:	2101      	movs	r1, #1
 8001698:	4807      	ldr	r0, [pc, #28]	; (80016b8 <stm32wlxxFlashDriverWriteWord+0xa8>)
 800169a:	f003 fc65 	bl	8004f68 <fwrite>
 800169e:	f7fe ff3e 	bl	800051e <osResumeAllTasks>
         break;
 80016a2:	e7de      	b.n	8001662 <stm32wlxxFlashDriverWriteWord+0x52>
      return ERROR_INVALID_PARAMETER;
 80016a4:	2002      	movs	r0, #2
}
 80016a6:	4770      	bx	lr
      return ERROR_INVALID_PARAMETER;
 80016a8:	2002      	movs	r0, #2
 80016aa:	e7df      	b.n	800166c <stm32wlxxFlashDriverWriteWord+0x5c>
 80016ac:	0803ffff 	.word	0x0803ffff
 80016b0:	200000e4 	.word	0x200000e4
 80016b4:	080061ac 	.word	0x080061ac
 80016b8:	080061c4 	.word	0x080061c4

080016bc <stm32wlxxFlashDriverWrite>:
{
 80016bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016c0:	b083      	sub	sp, #12
   if((address < STM32WLxx_FLASH_ADDR || address >= topAddress) ||
 80016c2:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 80016c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80016ca:	d234      	bcs.n	8001736 <stm32wlxxFlashDriverWrite+0x7a>
 80016cc:	4606      	mov	r6, r0
 80016ce:	460f      	mov	r7, r1
 80016d0:	4614      	mov	r4, r2
 80016d2:	f010 0f03 	tst.w	r0, #3
 80016d6:	d134      	bne.n	8001742 <stm32wlxxFlashDriverWrite+0x86>
   if(data == NULL || address + length > topAddress)
 80016d8:	b3b1      	cbz	r1, 8001748 <stm32wlxxFlashDriverWrite+0x8c>
 80016da:	1882      	adds	r2, r0, r2
 80016dc:	4b1f      	ldr	r3, [pc, #124]	; (800175c <stm32wlxxFlashDriverWrite+0xa0>)
 80016de:	429a      	cmp	r2, r3
 80016e0:	d835      	bhi.n	800174e <stm32wlxxFlashDriverWrite+0x92>
   while(length > 0)
 80016e2:	b3bc      	cbz	r4, 8001754 <stm32wlxxFlashDriverWrite+0x98>
         memset(word, 0, sizeof(word));
 80016e4:	f04f 0900 	mov.w	r9, #0
      n = MIN(sizeof(word), length);
 80016e8:	4625      	mov	r5, r4
 80016ea:	2c08      	cmp	r4, #8
 80016ec:	bf28      	it	cs
 80016ee:	2508      	movcs	r5, #8
      if(n < sizeof(word))
 80016f0:	2c07      	cmp	r4, #7
         memset(word, 0, sizeof(word));
 80016f2:	bf9c      	itt	ls
 80016f4:	f8cd 9000 	strls.w	r9, [sp]
 80016f8:	f8cd 9004 	strls.w	r9, [sp, #4]
      memcpy(word, p, n);
 80016fc:	462a      	mov	r2, r5
 80016fe:	4639      	mov	r1, r7
 8001700:	4668      	mov	r0, sp
 8001702:	f003 fdb1 	bl	8005268 <memcpy>
      error = stm32wlxxFlashDriverWriteWord(address, (uint32_t)word);
 8001706:	4669      	mov	r1, sp
 8001708:	4630      	mov	r0, r6
 800170a:	f7ff ff81 	bl	8001610 <stm32wlxxFlashDriverWriteWord>
      if(error)
 800170e:	4680      	mov	r8, r0
 8001710:	b920      	cbnz	r0, 800171c <stm32wlxxFlashDriverWrite+0x60>
      p += n;
 8001712:	442f      	add	r7, r5
      address += n;
 8001714:	442e      	add	r6, r5
   while(length > 0)
 8001716:	1b64      	subs	r4, r4, r5
 8001718:	d1e6      	bne.n	80016e8 <stm32wlxxFlashDriverWrite+0x2c>
 800171a:	e00e      	b.n	800173a <stm32wlxxFlashDriverWrite+0x7e>
         TRACE_ERROR("Failed to write in flash memory!\r\n");
 800171c:	f7fe fefe 	bl	800051c <osSuspendAllTasks>
 8001720:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <stm32wlxxFlashDriverWrite+0xa4>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	2222      	movs	r2, #34	; 0x22
 8001728:	2101      	movs	r1, #1
 800172a:	480e      	ldr	r0, [pc, #56]	; (8001764 <stm32wlxxFlashDriverWrite+0xa8>)
 800172c:	f003 fc1c 	bl	8004f68 <fwrite>
 8001730:	f7fe fef5 	bl	800051e <osResumeAllTasks>
         return error;
 8001734:	e001      	b.n	800173a <stm32wlxxFlashDriverWrite+0x7e>
      return ERROR_INVALID_PARAMETER;
 8001736:	f04f 0802 	mov.w	r8, #2
}
 800173a:	4640      	mov	r0, r8
 800173c:	b003      	add	sp, #12
 800173e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return ERROR_INVALID_PARAMETER;
 8001742:	f04f 0802 	mov.w	r8, #2
 8001746:	e7f8      	b.n	800173a <stm32wlxxFlashDriverWrite+0x7e>
      return ERROR_INVALID_PARAMETER;
 8001748:	f04f 0802 	mov.w	r8, #2
 800174c:	e7f5      	b.n	800173a <stm32wlxxFlashDriverWrite+0x7e>
 800174e:	f04f 0802 	mov.w	r8, #2
 8001752:	e7f2      	b.n	800173a <stm32wlxxFlashDriverWrite+0x7e>
   return NO_ERROR;
 8001754:	f04f 0800 	mov.w	r8, #0
 8001758:	e7ef      	b.n	800173a <stm32wlxxFlashDriverWrite+0x7e>
 800175a:	bf00      	nop
 800175c:	08040000 	.word	0x08040000
 8001760:	200000e4 	.word	0x200000e4
 8001764:	080061dc 	.word	0x080061dc

08001768 <mcuGetVtorOffset>:
 **/

uint32_t mcuGetVtorOffset(void)
{
   return MCU_VTOR_OFFSET;
}
 8001768:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800176c:	4770      	bx	lr
	...

08001770 <mcuSystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001770:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001774:	4905      	ldr	r1, [pc, #20]	; (800178c <mcuSystemReset+0x1c>)
 8001776:	68ca      	ldr	r2, [r1, #12]
 8001778:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800177c:	4b04      	ldr	r3, [pc, #16]	; (8001790 <mcuSystemReset+0x20>)
 800177e:	4313      	orrs	r3, r2
 8001780:	60cb      	str	r3, [r1, #12]
 8001782:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001786:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8001788:	e7fd      	b.n	8001786 <mcuSystemReset+0x16>
 800178a:	bf00      	nop
 800178c:	e000ed00 	.word	0xe000ed00
 8001790:	05fa0004 	.word	0x05fa0004

08001794 <mcuBootAppImageAsm>:
 **/

#if defined(__GNUC__)
__attribute__((naked, noreturn)) void mcuBootAppImageAsm(uint32_t sp, uint32_t rh)
{
   __asm("MSR  MSP, r0");
 8001794:	f380 8808 	msr	MSP, r0
   __asm("BX   r1");
 8001798:	4708      	bx	r1
	...

0800179c <w25q80dvFlashDriverGetInfo>:
 **/

error_t w25q80dvFlashDriverGetInfo(const FlashInfo **info)
{
   //Set Memory information pointeur
   *info = (const FlashInfo*) &w25q80dvFlashDriverInfo;
 800179c:	4b01      	ldr	r3, [pc, #4]	; (80017a4 <w25q80dvFlashDriverGetInfo+0x8>)
 800179e:	6003      	str	r3, [r0, #0]

   //Successfull process
   return NO_ERROR;
}
 80017a0:	2000      	movs	r0, #0
 80017a2:	4770      	bx	lr
 80017a4:	080062b8 	.word	0x080062b8

080017a8 <w25q80dvFlashDriverIsSectorAddr>:
 **/

bool_t w25q80dvFlashDriverIsSectorAddr(uint32_t address)
{
   //Is given address match a sector start address?
   if((address % W25Q80DV_SUBSECTORS_SIZE) == 0)
 80017a8:	f3c0 000b 	ubfx	r0, r0, #0, #12
      return TRUE;
   else
      return FALSE;
}
 80017ac:	fab0 f080 	clz	r0, r0
 80017b0:	0940      	lsrs	r0, r0, #5
 80017b2:	4770      	bx	lr

080017b4 <w25q80dvFlashDriverInit>:
{
 80017b4:	b508      	push	{r3, lr}
   status = Flash__Init();
 80017b6:	f003 f913 	bl	80049e0 <Flash__Init>
   if(!status)
 80017ba:	f080 0001 	eor.w	r0, r0, #1
}
 80017be:	b2c0      	uxtb	r0, r0
 80017c0:	bd08      	pop	{r3, pc}

080017c2 <w25q80dvFlashDriverGetStatus>:
   if(status == NULL)
 80017c2:	b168      	cbz	r0, 80017e0 <w25q80dvFlashDriverGetStatus+0x1e>
{
 80017c4:	b510      	push	{r4, lr}
 80017c6:	4604      	mov	r4, r0
   statusReg = Flash__ReadDeviceStatus();
 80017c8:	f003 f93c 	bl	8004a44 <Flash__ReadDeviceStatus>
   if(statusReg & STATUS_REG_BUSY)
 80017cc:	f010 0001 	ands.w	r0, r0, #1
 80017d0:	d003      	beq.n	80017da <w25q80dvFlashDriverGetStatus+0x18>
	   *status = FLASH_STATUS_BUSY;
 80017d2:	2301      	movs	r3, #1
 80017d4:	7023      	strb	r3, [r4, #0]
   return NO_ERROR;
 80017d6:	2000      	movs	r0, #0
}
 80017d8:	bd10      	pop	{r4, pc}
	   *status = FLASH_STATUS_OK;
 80017da:	2300      	movs	r3, #0
 80017dc:	7023      	strb	r3, [r4, #0]
 80017de:	e7fb      	b.n	80017d8 <w25q80dvFlashDriverGetStatus+0x16>
      return ERROR_INVALID_PARAMETER;
 80017e0:	2002      	movs	r0, #2
}
 80017e2:	4770      	bx	lr

080017e4 <w25q80dvFlashDriverErase>:
   if(address < W25Q80DV_ADDR || address >= topAddress)
 80017e4:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 80017e8:	d21e      	bcs.n	8001828 <w25q80dvFlashDriverErase+0x44>
{
 80017ea:	b538      	push	{r3, r4, r5, lr}
 80017ec:	4605      	mov	r5, r0
 80017ee:	460c      	mov	r4, r1
   if(address + length > topAddress)
 80017f0:	1843      	adds	r3, r0, r1
 80017f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80017f6:	d819      	bhi.n	800182c <w25q80dvFlashDriverErase+0x48>
   if(address % W25Q80DV_SUBSECTORS_SIZE != 0)
 80017f8:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80017fc:	b123      	cbz	r3, 8001808 <w25q80dvFlashDriverErase+0x24>
      length += address % W25Q80DV_SUBSECTORS_SIZE;
 80017fe:	441c      	add	r4, r3
      address -= address % W25Q80DV_SUBSECTORS_SIZE;
 8001800:	f420 657f 	bic.w	r5, r0, #4080	; 0xff0
 8001804:	f025 050f 	bic.w	r5, r5, #15
   while(length > 0)
 8001808:	b194      	cbz	r4, 8001830 <w25q80dvFlashDriverErase+0x4c>
	  Flash__SectorErase4k(address);
 800180a:	4628      	mov	r0, r5
 800180c:	f003 f98d 	bl	8004b2a <Flash__SectorErase4k>
      address += W25Q80DV_SUBSECTORS_SIZE;
 8001810:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
      length -= MIN(length, W25Q80DV_SUBSECTORS_SIZE);
 8001814:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8001818:	bf94      	ite	ls
 800181a:	1b24      	subls	r4, r4, r4
 800181c:	f5a4 5480 	subhi.w	r4, r4, #4096	; 0x1000
   while(length > 0)
 8001820:	2c00      	cmp	r4, #0
 8001822:	d1f2      	bne.n	800180a <w25q80dvFlashDriverErase+0x26>
   return NO_ERROR;
 8001824:	2000      	movs	r0, #0
}
 8001826:	bd38      	pop	{r3, r4, r5, pc}
      return ERROR_INVALID_PARAMETER;
 8001828:	2002      	movs	r0, #2
}
 800182a:	4770      	bx	lr
      return ERROR_INVALID_PARAMETER;
 800182c:	2002      	movs	r0, #2
 800182e:	e7fa      	b.n	8001826 <w25q80dvFlashDriverErase+0x42>
   return NO_ERROR;
 8001830:	2000      	movs	r0, #0
 8001832:	e7f8      	b.n	8001826 <w25q80dvFlashDriverErase+0x42>

08001834 <w25q80dvFlashDriverWrite>:
   if((address < W25Q80DV_ADDR || address >= topAddress) ||
 8001834:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 8001838:	d235      	bcs.n	80018a6 <w25q80dvFlashDriverWrite+0x72>
{
 800183a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800183e:	b083      	sub	sp, #12
 8001840:	4606      	mov	r6, r0
 8001842:	460f      	mov	r7, r1
 8001844:	4614      	mov	r4, r2
   if((address < W25Q80DV_ADDR || address >= topAddress) ||
 8001846:	f010 0f03 	tst.w	r0, #3
 800184a:	d12e      	bne.n	80018aa <w25q80dvFlashDriverWrite+0x76>
   if(data == NULL || address + length > topAddress)
 800184c:	b379      	cbz	r1, 80018ae <w25q80dvFlashDriverWrite+0x7a>
 800184e:	1883      	adds	r3, r0, r2
 8001850:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001854:	d82d      	bhi.n	80018b2 <w25q80dvFlashDriverWrite+0x7e>
   while(length > 0)
 8001856:	b372      	cbz	r2, 80018b6 <w25q80dvFlashDriverWrite+0x82>
         memset(word, 0, sizeof(word));
 8001858:	f04f 0900 	mov.w	r9, #0
      Flash__PageProgram(address, word, sizeof(uint32_t));
 800185c:	f04f 0804 	mov.w	r8, #4
 8001860:	e008      	b.n	8001874 <w25q80dvFlashDriverWrite+0x40>
 8001862:	4642      	mov	r2, r8
 8001864:	a901      	add	r1, sp, #4
 8001866:	4630      	mov	r0, r6
 8001868:	f003 f929 	bl	8004abe <Flash__PageProgram>
      p += n;
 800186c:	442f      	add	r7, r5
      address += n;
 800186e:	442e      	add	r6, r5
   while(length > 0)
 8001870:	1b64      	subs	r4, r4, r5
 8001872:	d014      	beq.n	800189e <w25q80dvFlashDriverWrite+0x6a>
      n = MIN(sizeof(word), length);
 8001874:	4625      	mov	r5, r4
 8001876:	2c04      	cmp	r4, #4
 8001878:	bf28      	it	cs
 800187a:	2504      	movcs	r5, #4
      if(n < sizeof(uint32_t))
 800187c:	2c03      	cmp	r4, #3
         memset(word, 0, sizeof(word));
 800187e:	bf98      	it	ls
 8001880:	f8cd 9004 	strls.w	r9, [sp, #4]
      memcpy(word, p, n);
 8001884:	462a      	mov	r2, r5
 8001886:	4639      	mov	r1, r7
 8001888:	a801      	add	r0, sp, #4
 800188a:	f003 fced 	bl	8005268 <memcpy>
      if(address % W25Q80DV_SUBSECTORS_SIZE == 0)
 800188e:	f3c6 030b 	ubfx	r3, r6, #0, #12
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1e5      	bne.n	8001862 <w25q80dvFlashDriverWrite+0x2e>
    	 Flash__SectorErase4k(address);
 8001896:	4630      	mov	r0, r6
 8001898:	f003 f947 	bl	8004b2a <Flash__SectorErase4k>
 800189c:	e7e1      	b.n	8001862 <w25q80dvFlashDriverWrite+0x2e>
   return NO_ERROR;
 800189e:	2000      	movs	r0, #0
}
 80018a0:	b003      	add	sp, #12
 80018a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return ERROR_INVALID_PARAMETER;
 80018a6:	2002      	movs	r0, #2
}
 80018a8:	4770      	bx	lr
      return ERROR_INVALID_PARAMETER;
 80018aa:	2002      	movs	r0, #2
 80018ac:	e7f8      	b.n	80018a0 <w25q80dvFlashDriverWrite+0x6c>
      return ERROR_INVALID_PARAMETER;
 80018ae:	2002      	movs	r0, #2
 80018b0:	e7f6      	b.n	80018a0 <w25q80dvFlashDriverWrite+0x6c>
 80018b2:	2002      	movs	r0, #2
 80018b4:	e7f4      	b.n	80018a0 <w25q80dvFlashDriverWrite+0x6c>
   return NO_ERROR;
 80018b6:	2000      	movs	r0, #0
 80018b8:	e7f2      	b.n	80018a0 <w25q80dvFlashDriverWrite+0x6c>

080018ba <w25q80dvFlashDriverRead>:
   if(address < W25Q80DV_ADDR || address >= topAddress)
 80018ba:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 80018be:	d209      	bcs.n	80018d4 <w25q80dvFlashDriverRead+0x1a>
   if(data == NULL || address + length > topAddress)
 80018c0:	b151      	cbz	r1, 80018d8 <w25q80dvFlashDriverRead+0x1e>
{
 80018c2:	b508      	push	{r3, lr}
   if(data == NULL || address + length > topAddress)
 80018c4:	1883      	adds	r3, r0, r2
 80018c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018ca:	d807      	bhi.n	80018dc <w25q80dvFlashDriverRead+0x22>
   Flash__ReadBuffer(address, data, length);
 80018cc:	f003 f8c4 	bl	8004a58 <Flash__ReadBuffer>
   return NO_ERROR;
 80018d0:	2000      	movs	r0, #0
}
 80018d2:	bd08      	pop	{r3, pc}
      return ERROR_INVALID_PARAMETER;
 80018d4:	2002      	movs	r0, #2
 80018d6:	4770      	bx	lr
      return ERROR_INVALID_PARAMETER;
 80018d8:	2002      	movs	r0, #2
}
 80018da:	4770      	bx	lr
      return ERROR_INVALID_PARAMETER;
 80018dc:	2002      	movs	r0, #2
 80018de:	e7f8      	b.n	80018d2 <w25q80dvFlashDriverRead+0x18>

080018e0 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <HAL_InitTick+0x48>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	b90b      	cbnz	r3, 80018ea <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80018e6:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80018e8:	4770      	bx	lr
{
 80018ea:	b510      	push	{r4, lr}
 80018ec:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018ee:	f000 fc25 	bl	800213c <HAL_RCC_GetHCLKFreq>
 80018f2:	4b0d      	ldr	r3, [pc, #52]	; (8001928 <HAL_InitTick+0x48>)
 80018f4:	781a      	ldrb	r2, [r3, #0]
 80018f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80018fe:	fbb0 f0f3 	udiv	r0, r0, r3
 8001902:	f000 f8a7 	bl	8001a54 <HAL_SYSTICK_Config>
 8001906:	b968      	cbnz	r0, 8001924 <HAL_InitTick+0x44>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001908:	2c0f      	cmp	r4, #15
 800190a:	d901      	bls.n	8001910 <HAL_InitTick+0x30>
        status = HAL_ERROR;
 800190c:	2001      	movs	r0, #1
 800190e:	e00a      	b.n	8001926 <HAL_InitTick+0x46>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001910:	2200      	movs	r2, #0
 8001912:	4621      	mov	r1, r4
 8001914:	f04f 30ff 	mov.w	r0, #4294967295
 8001918:	f000 f858 	bl	80019cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800191c:	4b03      	ldr	r3, [pc, #12]	; (800192c <HAL_InitTick+0x4c>)
 800191e:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8001920:	2000      	movs	r0, #0
 8001922:	e000      	b.n	8001926 <HAL_InitTick+0x46>
      status = HAL_ERROR;
 8001924:	2001      	movs	r0, #1
}
 8001926:	bd10      	pop	{r4, pc}
 8001928:	20000084 	.word	0x20000084
 800192c:	20000088 	.word	0x20000088

08001930 <HAL_Init>:
{
 8001930:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001932:	2003      	movs	r0, #3
 8001934:	f000 f838 	bl	80019a8 <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001938:	f000 fc00 	bl	800213c <HAL_RCC_GetHCLKFreq>
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_Init+0x28>)
 800193e:	6018      	str	r0, [r3, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001940:	200f      	movs	r0, #15
 8001942:	f7ff ffcd 	bl	80018e0 <HAL_InitTick>
 8001946:	b110      	cbz	r0, 800194e <HAL_Init+0x1e>
    status = HAL_ERROR;
 8001948:	2401      	movs	r4, #1
}
 800194a:	4620      	mov	r0, r4
 800194c:	bd10      	pop	{r4, pc}
 800194e:	4604      	mov	r4, r0
    HAL_MspInit();
 8001950:	f7fe ffe2 	bl	8000918 <HAL_MspInit>
 8001954:	e7f9      	b.n	800194a <HAL_Init+0x1a>
 8001956:	bf00      	nop
 8001958:	20000080 	.word	0x20000080

0800195c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800195c:	4a03      	ldr	r2, [pc, #12]	; (800196c <HAL_IncTick+0x10>)
 800195e:	6811      	ldr	r1, [r2, #0]
 8001960:	4b03      	ldr	r3, [pc, #12]	; (8001970 <HAL_IncTick+0x14>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	440b      	add	r3, r1
 8001966:	6013      	str	r3, [r2, #0]
}
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	200002b8 	.word	0x200002b8
 8001970:	20000084 	.word	0x20000084

08001974 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001974:	4b01      	ldr	r3, [pc, #4]	; (800197c <HAL_GetTick+0x8>)
 8001976:	6818      	ldr	r0, [r3, #0]
}
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	200002b8 	.word	0x200002b8

08001980 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001980:	b538      	push	{r3, r4, r5, lr}
 8001982:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001984:	f7ff fff6 	bl	8001974 <HAL_GetTick>
 8001988:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800198a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800198e:	d002      	beq.n	8001996 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001990:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <HAL_Delay+0x24>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001996:	f7ff ffed 	bl	8001974 <HAL_GetTick>
 800199a:	1b40      	subs	r0, r0, r5
 800199c:	42a0      	cmp	r0, r4
 800199e:	d3fa      	bcc.n	8001996 <HAL_Delay+0x16>
  {
  }
}
 80019a0:	bd38      	pop	{r3, r4, r5, pc}
 80019a2:	bf00      	nop
 80019a4:	20000084 	.word	0x20000084

080019a8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a8:	4907      	ldr	r1, [pc, #28]	; (80019c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80019aa:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019ac:	0203      	lsls	r3, r0, #8
 80019ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80019b6:	0412      	lsls	r2, r2, #16
 80019b8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80019c4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80019c6:	4770      	bx	lr
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019cc:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019ce:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <HAL_NVIC_SetPriority+0x64>)
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d6:	f1c3 0c07 	rsb	ip, r3, #7
 80019da:	f1bc 0f04 	cmp.w	ip, #4
 80019de:	bf28      	it	cs
 80019e0:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019e4:	f103 0e04 	add.w	lr, r3, #4
 80019e8:	f1be 0f06 	cmp.w	lr, #6
 80019ec:	bf8c      	ite	hi
 80019ee:	3b03      	subhi	r3, #3
 80019f0:	2300      	movls	r3, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f2:	f04f 3eff 	mov.w	lr, #4294967295
 80019f6:	fa0e fc0c 	lsl.w	ip, lr, ip
 80019fa:	ea21 010c 	bic.w	r1, r1, ip
 80019fe:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a00:	fa0e fe03 	lsl.w	lr, lr, r3
 8001a04:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001a0a:	2800      	cmp	r0, #0
 8001a0c:	db09      	blt.n	8001a22 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0e:	0109      	lsls	r1, r1, #4
 8001a10:	b2c9      	uxtb	r1, r1
 8001a12:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001a16:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001a1a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001a1e:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a22:	f000 000f 	and.w	r0, r0, #15
 8001a26:	0109      	lsls	r1, r1, #4
 8001a28:	b2c9      	uxtb	r1, r1
 8001a2a:	4b02      	ldr	r3, [pc, #8]	; (8001a34 <HAL_NVIC_SetPriority+0x68>)
 8001a2c:	5419      	strb	r1, [r3, r0]
 8001a2e:	e7f6      	b.n	8001a1e <HAL_NVIC_SetPriority+0x52>
 8001a30:	e000ed00 	.word	0xe000ed00
 8001a34:	e000ed14 	.word	0xe000ed14

08001a38 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001a38:	2800      	cmp	r0, #0
 8001a3a:	db07      	blt.n	8001a4c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a3c:	0941      	lsrs	r1, r0, #5
 8001a3e:	f000 001f 	and.w	r0, r0, #31
 8001a42:	2301      	movs	r3, #1
 8001a44:	4083      	lsls	r3, r0
 8001a46:	4a02      	ldr	r2, [pc, #8]	; (8001a50 <HAL_NVIC_EnableIRQ+0x18>)
 8001a48:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	e000e100 	.word	0xe000e100

08001a54 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a54:	3801      	subs	r0, #1
 8001a56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001a5a:	d20b      	bcs.n	8001a74 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a5c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001a60:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a62:	4a05      	ldr	r2, [pc, #20]	; (8001a78 <HAL_SYSTICK_Config+0x24>)
 8001a64:	21f0      	movs	r1, #240	; 0xf0
 8001a66:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a6e:	2207      	movs	r2, #7
 8001a70:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a72:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001a74:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8001a76:	4770      	bx	lr
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <HAL_DMA_Abort>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2800      	cmp	r0, #0
 8001a80:	d034      	beq.n	8001aec <HAL_DMA_Abort+0x70>
  {
    return HAL_ERROR;
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001a82:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	2a02      	cmp	r2, #2
 8001a8a:	d006      	beq.n	8001a9a <HAL_DMA_Abort+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a8c:	2204      	movs	r2, #4
 8001a8e:	63c2      	str	r2, [r0, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a90:	2200      	movs	r2, #0
 8001a92:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001a96:	2001      	movs	r0, #1
 8001a98:	4770      	bx	lr
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a9a:	6801      	ldr	r1, [r0, #0]
 8001a9c:	680a      	ldr	r2, [r1, #0]
 8001a9e:	f022 020e 	bic.w	r2, r2, #14
 8001aa2:	600a      	str	r2, [r1, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001aa4:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001aa6:	680a      	ldr	r2, [r1, #0]
 8001aa8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001aac:	600a      	str	r2, [r1, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001aae:	6801      	ldr	r1, [r0, #0]
 8001ab0:	680a      	ldr	r2, [r1, #0]
 8001ab2:	f022 0201 	bic.w	r2, r2, #1
 8001ab6:	600a      	str	r2, [r1, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ab8:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8001aba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001abc:	f002 011c 	and.w	r1, r2, #28
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	408a      	lsls	r2, r1
 8001ac4:	6042      	str	r2, [r0, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ac6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ac8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001aca:	6051      	str	r1, [r2, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001acc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001ace:	b132      	cbz	r2, 8001ade <HAL_DMA_Abort+0x62>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ad0:	6811      	ldr	r1, [r2, #0]
 8001ad2:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001ad6:	6011      	str	r1, [r2, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ad8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ada:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8001adc:	6051      	str	r1, [r2, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001aea:	4770      	bx	lr
    return HAL_ERROR;
 8001aec:	2001      	movs	r0, #1
}
 8001aee:	4770      	bx	lr

08001af0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001af0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001af2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d003      	beq.n	8001b04 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001afc:	2304      	movs	r3, #4
 8001afe:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8001b00:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8001b02:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b04:	6802      	ldr	r2, [r0, #0]
 8001b06:	6813      	ldr	r3, [r2, #0]
 8001b08:	f023 030e 	bic.w	r3, r3, #14
 8001b0c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001b0e:	6802      	ldr	r2, [r0, #0]
 8001b10:	6813      	ldr	r3, [r2, #0]
 8001b12:	f023 0301 	bic.w	r3, r3, #1
 8001b16:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b18:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8001b1a:	6813      	ldr	r3, [r2, #0]
 8001b1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b20:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b22:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001b24:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001b26:	f003 021c 	and.w	r2, r3, #28
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	4093      	lsls	r3, r2
 8001b2e:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b30:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001b32:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001b34:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8001b36:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001b38:	b133      	cbz	r3, 8001b48 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b40:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b42:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001b44:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001b46:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8001b54:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001b56:	b113      	cbz	r3, 8001b5e <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8001b58:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	e7d1      	b.n	8001b02 <HAL_DMA_Abort_IT+0x12>
 8001b5e:	2000      	movs	r0, #0
 8001b60:	e7cf      	b.n	8001b02 <HAL_DMA_Abort_IT+0x12>
	...

08001b64 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8001b64:	b510      	push	{r4, lr}
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8001b66:	460b      	mov	r3, r1

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8001b68:	4c0b      	ldr	r4, [pc, #44]	; (8001b98 <FLASH_Program_Fast+0x34>)
 8001b6a:	6962      	ldr	r2, [r4, #20]
 8001b6c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001b70:	6162      	str	r2, [r4, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b72:	f3ef 8e10 	mrs	lr, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001b76:	b672      	cpsid	i
 8001b78:	f501 7c80 	add.w	ip, r1, #256	; 0x100
 8001b7c:	1a41      	subs	r1, r0, r1
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	505a      	str	r2, [r3, r1]
    dest_addr++;
    src_addr++;
 8001b82:	3304      	adds	r3, #4
    row_index--;
  }
  while (row_index != 0U);
 8001b84:	4563      	cmp	r3, ip
 8001b86:	d1fa      	bne.n	8001b7e <FLASH_Program_Fast+0x1a>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8001b88:	4a03      	ldr	r2, [pc, #12]	; (8001b98 <FLASH_Program_Fast+0x34>)
 8001b8a:	6913      	ldr	r3, [r2, #16]
 8001b8c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001b90:	d1fb      	bne.n	8001b8a <FLASH_Program_Fast+0x26>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b92:	f38e 8810 	msr	PRIMASK, lr
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8001b96:	bd10      	pop	{r4, pc}
 8001b98:	58004000 	.word	0x58004000

08001b9c <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001b9c:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <HAL_FLASH_Unlock+0x20>)
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	db01      	blt.n	8001ba8 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8001ba4:	2000      	movs	r0, #0
}
 8001ba6:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001ba8:	4b04      	ldr	r3, [pc, #16]	; (8001bbc <HAL_FLASH_Unlock+0x20>)
 8001baa:	4a05      	ldr	r2, [pc, #20]	; (8001bc0 <HAL_FLASH_Unlock+0x24>)
 8001bac:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001bae:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8001bb2:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001bb4:	6958      	ldr	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb6:	0fc0      	lsrs	r0, r0, #31
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	58004000 	.word	0x58004000
 8001bc0:	45670123 	.word	0x45670123

08001bc4 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001bc4:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <HAL_FLASH_Lock+0x14>)
 8001bc6:	695a      	ldr	r2, [r3, #20]
 8001bc8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001bcc:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8001bce:	6958      	ldr	r0, [r3, #20]
}
 8001bd0:	43c0      	mvns	r0, r0
 8001bd2:	0fc0      	lsrs	r0, r0, #31
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	58004000 	.word	0x58004000

08001bdc <FLASH_WaitForLastOperation>:
{
 8001bdc:	b570      	push	{r4, r5, r6, lr}
 8001bde:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8001be0:	f7ff fec8 	bl	8001974 <HAL_GetTick>
 8001be4:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001be6:	4e16      	ldr	r6, [pc, #88]	; (8001c40 <FLASH_WaitForLastOperation+0x64>)
 8001be8:	6933      	ldr	r3, [r6, #16]
 8001bea:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001bee:	d006      	beq.n	8001bfe <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8001bf0:	f7ff fec0 	bl	8001974 <HAL_GetTick>
 8001bf4:	1b00      	subs	r0, r0, r4
 8001bf6:	42a8      	cmp	r0, r5
 8001bf8:	d3f6      	bcc.n	8001be8 <FLASH_WaitForLastOperation+0xc>
      return HAL_TIMEOUT;
 8001bfa:	2003      	movs	r0, #3
}
 8001bfc:	bd70      	pop	{r4, r5, r6, pc}
  error = FLASH->SR;
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <FLASH_WaitForLastOperation+0x64>)
 8001c00:	691b      	ldr	r3, [r3, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 8001c02:	f013 0f01 	tst.w	r3, #1
 8001c06:	d002      	beq.n	8001c0e <FLASH_WaitForLastOperation+0x32>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001c08:	4a0d      	ldr	r2, [pc, #52]	; (8001c40 <FLASH_WaitForLastOperation+0x64>)
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	6111      	str	r1, [r2, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 8001c0e:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  __HAL_FLASH_CLEAR_FLAG(error);
 8001c12:	4013      	ands	r3, r2
 8001c14:	d10b      	bne.n	8001c2e <FLASH_WaitForLastOperation+0x52>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8001c16:	4e0a      	ldr	r6, [pc, #40]	; (8001c40 <FLASH_WaitForLastOperation+0x64>)
 8001c18:	6933      	ldr	r3, [r6, #16]
 8001c1a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001c1e:	d00c      	beq.n	8001c3a <FLASH_WaitForLastOperation+0x5e>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8001c20:	f7ff fea8 	bl	8001974 <HAL_GetTick>
 8001c24:	1b00      	subs	r0, r0, r4
 8001c26:	42a8      	cmp	r0, r5
 8001c28:	d3f6      	bcc.n	8001c18 <FLASH_WaitForLastOperation+0x3c>
      return HAL_TIMEOUT;
 8001c2a:	2003      	movs	r0, #3
 8001c2c:	e7e6      	b.n	8001bfc <FLASH_WaitForLastOperation+0x20>
  __HAL_FLASH_CLEAR_FLAG(error);
 8001c2e:	4a04      	ldr	r2, [pc, #16]	; (8001c40 <FLASH_WaitForLastOperation+0x64>)
 8001c30:	6113      	str	r3, [r2, #16]
    pFlash.ErrorCode = error;
 8001c32:	4a04      	ldr	r2, [pc, #16]	; (8001c44 <FLASH_WaitForLastOperation+0x68>)
 8001c34:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 8001c36:	2001      	movs	r0, #1
 8001c38:	e7e0      	b.n	8001bfc <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	e7de      	b.n	8001bfc <FLASH_WaitForLastOperation+0x20>
 8001c3e:	bf00      	nop
 8001c40:	58004000 	.word	0x58004000
 8001c44:	200002bc 	.word	0x200002bc

08001c48 <HAL_FLASH_Program>:
{
 8001c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c4a:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8001c4c:	4b17      	ldr	r3, [pc, #92]	; (8001cac <HAL_FLASH_Program+0x64>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d029      	beq.n	8001ca8 <HAL_FLASH_Program+0x60>
 8001c54:	4604      	mov	r4, r0
 8001c56:	460d      	mov	r5, r1
 8001c58:	4616      	mov	r6, r2
 8001c5a:	4b14      	ldr	r3, [pc, #80]	; (8001cac <HAL_FLASH_Program+0x64>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001c60:	2200      	movs	r2, #0
 8001c62:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001c64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c68:	f7ff ffb8 	bl	8001bdc <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8001c6c:	b970      	cbnz	r0, 8001c8c <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8001c6e:	2c01      	cmp	r4, #1
 8001c70:	d010      	beq.n	8001c94 <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8001c72:	4631      	mov	r1, r6
 8001c74:	4628      	mov	r0, r5
 8001c76:	f7ff ff75 	bl	8001b64 <FLASH_Program_Fast>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001c7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c7e:	f7ff ffad 	bl	8001bdc <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8001c82:	4a0b      	ldr	r2, [pc, #44]	; (8001cb0 <HAL_FLASH_Program+0x68>)
 8001c84:	6953      	ldr	r3, [r2, #20]
 8001c86:	ea23 0304 	bic.w	r3, r3, r4
 8001c8a:	6153      	str	r3, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 8001c8c:	4b07      	ldr	r3, [pc, #28]	; (8001cac <HAL_FLASH_Program+0x64>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	701a      	strb	r2, [r3, #0]
}
 8001c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001c94:	4a06      	ldr	r2, [pc, #24]	; (8001cb0 <HAL_FLASH_Program+0x68>)
 8001c96:	6953      	ldr	r3, [r2, #20]
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	6153      	str	r3, [r2, #20]
  *(uint32_t *)Address = (uint32_t)Data;
 8001c9e:	602e      	str	r6, [r5, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001ca0:	f3bf 8f6f 	isb	sy
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8001ca4:	606f      	str	r7, [r5, #4]
}
 8001ca6:	e7e8      	b.n	8001c7a <HAL_FLASH_Program+0x32>
  __HAL_LOCK(&pFlash);
 8001ca8:	2002      	movs	r0, #2
 8001caa:	e7f2      	b.n	8001c92 <HAL_FLASH_Program+0x4a>
 8001cac:	200002bc 	.word	0x200002bc
 8001cb0:	58004000 	.word	0x58004000

08001cb4 <FLASH_PageErase>:

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8001cb4:	4a05      	ldr	r2, [pc, #20]	; (8001ccc <FLASH_PageErase+0x18>)
 8001cb6:	6953      	ldr	r3, [r2, #20]
 8001cb8:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8001cbc:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 8001cc0:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8001cc4:	f040 0002 	orr.w	r0, r0, #2
 8001cc8:	6150      	str	r0, [r2, #20]
#endif
}
 8001cca:	4770      	bx	lr
 8001ccc:	58004000 	.word	0x58004000

08001cd0 <HAL_FLASHEx_Erase>:
{
 8001cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8001cd2:	4b26      	ldr	r3, [pc, #152]	; (8001d6c <HAL_FLASHEx_Erase+0x9c>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d046      	beq.n	8001d68 <HAL_FLASHEx_Erase+0x98>
 8001cda:	4605      	mov	r5, r0
 8001cdc:	460e      	mov	r6, r1
 8001cde:	4b23      	ldr	r3, [pc, #140]	; (8001d6c <HAL_FLASHEx_Erase+0x9c>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001ce8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cec:	f7ff ff76 	bl	8001bdc <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8001cf0:	4601      	mov	r1, r0
 8001cf2:	2800      	cmp	r0, #0
 8001cf4:	d133      	bne.n	8001d5e <HAL_FLASHEx_Erase+0x8e>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001cf6:	682b      	ldr	r3, [r5, #0]
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	d018      	beq.n	8001d2e <HAL_FLASHEx_Erase+0x5e>
      *PageError = 0xFFFFFFFFU;
 8001cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8001d00:	6033      	str	r3, [r6, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8001d02:	686c      	ldr	r4, [r5, #4]
 8001d04:	68ab      	ldr	r3, [r5, #8]
 8001d06:	4423      	add	r3, r4
 8001d08:	429c      	cmp	r4, r3
 8001d0a:	d21e      	bcs.n	8001d4a <HAL_FLASHEx_Erase+0x7a>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001d0c:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
        FLASH_PageErase(index);
 8001d10:	4620      	mov	r0, r4
 8001d12:	f7ff ffcf 	bl	8001cb4 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001d16:	4638      	mov	r0, r7
 8001d18:	f7ff ff60 	bl	8001bdc <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 8001d1c:	4601      	mov	r1, r0
 8001d1e:	b998      	cbnz	r0, 8001d48 <HAL_FLASHEx_Erase+0x78>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8001d20:	3401      	adds	r4, #1
 8001d22:	686b      	ldr	r3, [r5, #4]
 8001d24:	68aa      	ldr	r2, [r5, #8]
 8001d26:	4413      	add	r3, r2
 8001d28:	42a3      	cmp	r3, r4
 8001d2a:	d8f1      	bhi.n	8001d10 <HAL_FLASHEx_Erase+0x40>
 8001d2c:	e00d      	b.n	8001d4a <HAL_FLASHEx_Erase+0x7a>
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8001d2e:	4a10      	ldr	r2, [pc, #64]	; (8001d70 <HAL_FLASHEx_Erase+0xa0>)
 8001d30:	6953      	ldr	r3, [r2, #20]
 8001d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d36:	f043 0304 	orr.w	r3, r3, #4
 8001d3a:	6153      	str	r3, [r2, #20]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001d3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d40:	f7ff ff4c 	bl	8001bdc <FLASH_WaitForLastOperation>
 8001d44:	4601      	mov	r1, r0
 8001d46:	e007      	b.n	8001d58 <HAL_FLASHEx_Erase+0x88>
          *PageError = index;
 8001d48:	6034      	str	r4, [r6, #0]
static void FLASH_AcknowledgePageErase(void)
{
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8001d4a:	4a09      	ldr	r2, [pc, #36]	; (8001d70 <HAL_FLASHEx_Erase+0xa0>)
 8001d4c:	6953      	ldr	r3, [r2, #20]
 8001d4e:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8001d52:	f023 0302 	bic.w	r3, r3, #2
 8001d56:	6153      	str	r3, [r2, #20]
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8001d58:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <HAL_FLASHEx_Erase+0xa0>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8001d5c:	681b      	ldr	r3, [r3, #0]
  __HAL_UNLOCK(&pFlash);
 8001d5e:	4b03      	ldr	r3, [pc, #12]	; (8001d6c <HAL_FLASHEx_Erase+0x9c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
}
 8001d64:	4608      	mov	r0, r1
 8001d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8001d68:	2102      	movs	r1, #2
 8001d6a:	e7fb      	b.n	8001d64 <HAL_FLASHEx_Erase+0x94>
 8001d6c:	200002bc 	.word	0x200002bc
 8001d70:	58004000 	.word	0x58004000

08001d74 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d74:	680b      	ldr	r3, [r1, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 80bf 	beq.w	8001efa <HAL_GPIO_Init+0x186>
{
 8001d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d80:	f04f 0c00 	mov.w	ip, #0
  uint32_t position = 0x00u;
 8001d84:	4662      	mov	r2, ip
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d86:	2501      	movs	r5, #1
        GPIOx->AFR[position >> 3u] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d88:	f04f 0e03 	mov.w	lr, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001d8c:	2607      	movs	r6, #7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d8e:	4c5b      	ldr	r4, [pc, #364]	; (8001efc <HAL_GPIO_Init+0x188>)
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d90:	f04f 080f 	mov.w	r8, #15
 8001d94:	e04f      	b.n	8001e36 <HAL_GPIO_Init+0xc2>
        temp = GPIOx->OSPEEDR;
 8001d96:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d98:	fa0e fa0c 	lsl.w	sl, lr, ip
 8001d9c:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001da0:	68cb      	ldr	r3, [r1, #12]
 8001da2:	fa03 f30c 	lsl.w	r3, r3, ip
 8001da6:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 8001daa:	6083      	str	r3, [r0, #8]
        temp = GPIOx->OTYPER;
 8001dac:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dae:	ea23 0707 	bic.w	r7, r3, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001db2:	684b      	ldr	r3, [r1, #4]
 8001db4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001db8:	4093      	lsls	r3, r2
 8001dba:	433b      	orrs	r3, r7
        GPIOx->OTYPER = temp;
 8001dbc:	6043      	str	r3, [r0, #4]
 8001dbe:	e045      	b.n	8001e4c <HAL_GPIO_Init+0xd8>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001dc0:	2700      	movs	r7, #0
 8001dc2:	fa07 f70b 	lsl.w	r7, r7, fp
 8001dc6:	ea47 070a 	orr.w	r7, r7, sl
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dca:	609f      	str	r7, [r3, #8]
        temp = EXTI->RTSR1;
 8001dcc:	6823      	ldr	r3, [r4, #0]
        temp &= ~(iocurrent);
 8001dce:	ea6f 0709 	mvn.w	r7, r9
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dd2:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001dd6:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8001dda:	bf0c      	ite	eq
 8001ddc:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 8001dde:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->RTSR1 = temp;
 8001de2:	6023      	str	r3, [r4, #0]

        temp = EXTI->FTSR1;
 8001de4:	6863      	ldr	r3, [r4, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001de6:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001dea:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8001dee:	bf0c      	ite	eq
 8001df0:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 8001df2:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->FTSR1 = temp;
 8001df6:	6063      	str	r3, [r4, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001df8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dfc:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001e00:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
        temp &= ~(iocurrent);
 8001e04:	bf0c      	ite	eq
 8001e06:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 8001e08:	ea49 0303 	orrne.w	r3, r9, r3
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001e0c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001e10:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e14:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001e18:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
        temp &= ~(iocurrent);
 8001e1c:	bf0c      	ite	eq
 8001e1e:	401f      	andeq	r7, r3
        {
          temp |= iocurrent;
 8001e20:	ea49 0703 	orrne.w	r7, r9, r3
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001e24:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001e28:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e2a:	680b      	ldr	r3, [r1, #0]
 8001e2c:	f10c 0c02 	add.w	ip, ip, #2
 8001e30:	fa33 f702 	lsrs.w	r7, r3, r2
 8001e34:	d05f      	beq.n	8001ef6 <HAL_GPIO_Init+0x182>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e36:	fa05 f702 	lsl.w	r7, r5, r2
    if (iocurrent != 0x00u)
 8001e3a:	ea17 0903 	ands.w	r9, r7, r3
 8001e3e:	d0f3      	beq.n	8001e28 <HAL_GPIO_Init+0xb4>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e40:	684b      	ldr	r3, [r1, #4]
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	3b01      	subs	r3, #1
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d9a4      	bls.n	8001d96 <HAL_GPIO_Init+0x22>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e4c:	684b      	ldr	r3, [r1, #4]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	2b03      	cmp	r3, #3
 8001e54:	d020      	beq.n	8001e98 <HAL_GPIO_Init+0x124>
        temp = GPIOx->PUPDR;
 8001e56:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e58:	fa0e f30c 	lsl.w	r3, lr, ip
 8001e5c:	ea27 0703 	bic.w	r7, r7, r3
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e60:	688b      	ldr	r3, [r1, #8]
 8001e62:	fa03 f30c 	lsl.w	r3, r3, ip
 8001e66:	433b      	orrs	r3, r7
        GPIOx->PUPDR = temp;
 8001e68:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e6a:	684b      	ldr	r3, [r1, #4]
 8001e6c:	f003 0303 	and.w	r3, r3, #3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d111      	bne.n	8001e98 <HAL_GPIO_Init+0x124>
        temp = GPIOx->AFR[position >> 3U];
 8001e74:	08d7      	lsrs	r7, r2, #3
 8001e76:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8001e7a:	6a3b      	ldr	r3, [r7, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e7c:	f002 0b07 	and.w	fp, r2, #7
 8001e80:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001e84:	fa08 fa0b 	lsl.w	sl, r8, fp
 8001e88:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e8c:	690b      	ldr	r3, [r1, #16]
 8001e8e:	fa03 f30b 	lsl.w	r3, r3, fp
 8001e92:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3u] = temp;
 8001e96:	623b      	str	r3, [r7, #32]
      temp = GPIOx->MODER;
 8001e98:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e9a:	fa0e f30c 	lsl.w	r3, lr, ip
 8001e9e:	ea27 0703 	bic.w	r7, r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ea2:	684b      	ldr	r3, [r1, #4]
 8001ea4:	f003 0303 	and.w	r3, r3, #3
 8001ea8:	fa03 f30c 	lsl.w	r3, r3, ip
 8001eac:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 8001eae:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001eb0:	684b      	ldr	r3, [r1, #4]
 8001eb2:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8001eb6:	d0b7      	beq.n	8001e28 <HAL_GPIO_Init+0xb4>
        temp = SYSCFG->EXTICR[position >> 2u];
 8001eb8:	f022 0303 	bic.w	r3, r2, #3
 8001ebc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ec0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001ec4:	689f      	ldr	r7, [r3, #8]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001ec6:	f002 0b03 	and.w	fp, r2, #3
 8001eca:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001ece:	fa06 fa0b 	lsl.w	sl, r6, fp
 8001ed2:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ed6:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8001eda:	f43f af71 	beq.w	8001dc0 <HAL_GPIO_Init+0x4c>
 8001ede:	4f08      	ldr	r7, [pc, #32]	; (8001f00 <HAL_GPIO_Init+0x18c>)
 8001ee0:	42b8      	cmp	r0, r7
 8001ee2:	d006      	beq.n	8001ef2 <HAL_GPIO_Init+0x17e>
 8001ee4:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001ee8:	42b8      	cmp	r0, r7
 8001eea:	bf0c      	ite	eq
 8001eec:	2702      	moveq	r7, #2
 8001eee:	2707      	movne	r7, #7
 8001ef0:	e767      	b.n	8001dc2 <HAL_GPIO_Init+0x4e>
 8001ef2:	462f      	mov	r7, r5
 8001ef4:	e765      	b.n	8001dc2 <HAL_GPIO_Init+0x4e>
  }
}
 8001ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001efa:	4770      	bx	lr
 8001efc:	58000800 	.word	0x58000800
 8001f00:	48000400 	.word	0x48000400

08001f04 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f04:	b10a      	cbz	r2, 8001f0a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f06:	6181      	str	r1, [r0, #24]
 8001f08:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f0a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001f0c:	4770      	bx	lr
	...

08001f10 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f10:	4a02      	ldr	r2, [pc, #8]	; (8001f1c <HAL_PWR_EnableBkUpAccess+0xc>)
 8001f12:	6813      	ldr	r3, [r2, #0]
 8001f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f18:	6013      	str	r3, [r2, #0]
}
 8001f1a:	4770      	bx	lr
 8001f1c:	58000400 	.word	0x58000400

08001f20 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8001f20:	4b02      	ldr	r3, [pc, #8]	; (8001f2c <HAL_PWREx_GetVoltageRange+0xc>)
 8001f22:	6818      	ldr	r0, [r3, #0]
}
 8001f24:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	58000400 	.word	0x58000400

08001f30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001f30:	b570      	push	{r4, r5, r6, lr}
 8001f32:	b084      	sub	sp, #16
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f38:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8001f3c:	f3c0 1003 	ubfx	r0, r0, #4, #4
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8001f40:	f003 030f 	and.w	r3, r3, #15
 8001f44:	4a30      	ldr	r2, [pc, #192]	; (8002008 <RCC_SetFlashLatencyFromMSIRange+0xd8>)
 8001f46:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
 8001f4a:	4a30      	ldr	r2, [pc, #192]	; (800200c <RCC_SetFlashLatencyFromMSIRange+0xdc>)
 8001f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f50:	fbb4 f4f3 	udiv	r4, r4, r3

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001f54:	f7ff ffe4 	bl	8001f20 <HAL_PWREx_GetVoltageRange>
 8001f58:	4605      	mov	r5, r0

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8001f5a:	4b2d      	ldr	r3, [pc, #180]	; (8002010 <RCC_SetFlashLatencyFromMSIRange+0xe0>)
 8001f5c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001f60:	ab04      	add	r3, sp, #16
 8001f62:	e903 0007 	stmdb	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f66:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8001f6a:	d027      	beq.n	8001fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001f6c:	4b29      	ldr	r3, [pc, #164]	; (8002014 <RCC_SetFlashLatencyFromMSIRange+0xe4>)
 8001f6e:	429c      	cmp	r4, r3
 8001f70:	d33d      	bcc.n	8001fee <RCC_SetFlashLatencyFromMSIRange+0xbe>
 8001f72:	f503 03b7 	add.w	r3, r3, #5996544	; 0x5b8000
 8001f76:	f603 537f 	addw	r3, r3, #3455	; 0xd7f
 8001f7a:	429c      	cmp	r4, r3
 8001f7c:	d93e      	bls.n	8001ffc <RCC_SetFlashLatencyFromMSIRange+0xcc>
 8001f7e:	f503 1374 	add.w	r3, r3, #3997696	; 0x3d0000
 8001f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f86:	429c      	cmp	r4, r3
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001f88:	bf98      	it	ls
 8001f8a:	2302      	movls	r3, #2
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001f8c:	d930      	bls.n	8001ff0 <RCC_SetFlashLatencyFromMSIRange+0xc0>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001f8e:	2500      	movs	r5, #0
        break;
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f90:	4a21      	ldr	r2, [pc, #132]	; (8002018 <RCC_SetFlashLatencyFromMSIRange+0xe8>)
 8001f92:	6813      	ldr	r3, [r2, #0]
 8001f94:	f023 0307 	bic.w	r3, r3, #7
 8001f98:	432b      	orrs	r3, r5
 8001f9a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001f9c:	f7ff fcea 	bl	8001974 <HAL_GetTick>
 8001fa0:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001fa2:	4e1d      	ldr	r6, [pc, #116]	; (8002018 <RCC_SetFlashLatencyFromMSIRange+0xe8>)
 8001fa4:	6833      	ldr	r3, [r6, #0]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	429d      	cmp	r5, r3
 8001fac:	d028      	beq.n	8002000 <RCC_SetFlashLatencyFromMSIRange+0xd0>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001fae:	f7ff fce1 	bl	8001974 <HAL_GetTick>
 8001fb2:	1b00      	subs	r0, r0, r4
 8001fb4:	2802      	cmp	r0, #2
 8001fb6:	d9f5      	bls.n	8001fa4 <RCC_SetFlashLatencyFromMSIRange+0x74>
    {
      return HAL_TIMEOUT;
 8001fb8:	2003      	movs	r0, #3
 8001fba:	e022      	b.n	8002002 <RCC_SetFlashLatencyFromMSIRange+0xd2>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001fbc:	4b17      	ldr	r3, [pc, #92]	; (800201c <RCC_SetFlashLatencyFromMSIRange+0xec>)
 8001fbe:	429c      	cmp	r4, r3
 8001fc0:	d90c      	bls.n	8001fdc <RCC_SetFlashLatencyFromMSIRange+0xac>
 8001fc2:	4b17      	ldr	r3, [pc, #92]	; (8002020 <RCC_SetFlashLatencyFromMSIRange+0xf0>)
 8001fc4:	429c      	cmp	r4, r3
 8001fc6:	d910      	bls.n	8001fea <RCC_SetFlashLatencyFromMSIRange+0xba>
 8001fc8:	f503 0337 	add.w	r3, r3, #11993088	; 0xb70000
 8001fcc:	f503 53d8 	add.w	r3, r3, #6912	; 0x1b00
 8001fd0:	429c      	cmp	r4, r3
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001fd2:	bf98      	it	ls
 8001fd4:	2302      	movls	r3, #2
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001fd6:	d902      	bls.n	8001fde <RCC_SetFlashLatencyFromMSIRange+0xae>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001fd8:	2500      	movs	r5, #0
 8001fda:	e7d9      	b.n	8001f90 <RCC_SetFlashLatencyFromMSIRange+0x60>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001fdc:	2300      	movs	r3, #0
        latency = FLASH_LATENCY_RANGE[index];
 8001fde:	aa04      	add	r2, sp, #16
 8001fe0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001fe4:	f853 5c0c 	ldr.w	r5, [r3, #-12]
        break;
 8001fe8:	e7d2      	b.n	8001f90 <RCC_SetFlashLatencyFromMSIRange+0x60>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001fea:	2301      	movs	r3, #1
 8001fec:	e7f7      	b.n	8001fde <RCC_SetFlashLatencyFromMSIRange+0xae>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001fee:	2300      	movs	r3, #0
        latency = FLASH_LATENCY_RANGE[index];
 8001ff0:	aa04      	add	r2, sp, #16
 8001ff2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001ff6:	f853 5c0c 	ldr.w	r5, [r3, #-12]
        break;
 8001ffa:	e7c9      	b.n	8001f90 <RCC_SetFlashLatencyFromMSIRange+0x60>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e7f7      	b.n	8001ff0 <RCC_SetFlashLatencyFromMSIRange+0xc0>
    }
  }
  return HAL_OK;
 8002000:	2000      	movs	r0, #0
}
 8002002:	b004      	add	sp, #16
 8002004:	bd70      	pop	{r4, r5, r6, pc}
 8002006:	bf00      	nop
 8002008:	08005c80 	.word	0x08005c80
 800200c:	08005c20 	.word	0x08005c20
 8002010:	08005bd8 	.word	0x08005bd8
 8002014:	006acfc0 	.word	0x006acfc0
 8002018:	58004000 	.word	0x58004000
 800201c:	0121eabf 	.word	0x0121eabf
 8002020:	0234933f 	.word	0x0234933f

08002024 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002024:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002028:	6893      	ldr	r3, [r2, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800202a:	68d2      	ldr	r2, [r2, #12]
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800202c:	f013 030c 	ands.w	r3, r3, #12
 8002030:	d015      	beq.n	800205e <HAL_RCC_GetSysClockFreq+0x3a>
 8002032:	2b0c      	cmp	r3, #12
 8002034:	d00c      	beq.n	8002050 <HAL_RCC_GetSysClockFreq+0x2c>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002036:	2b04      	cmp	r3, #4
 8002038:	d04a      	beq.n	80020d0 <HAL_RCC_GetSysClockFreq+0xac>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800203a:	2b08      	cmp	r3, #8
 800203c:	d14b      	bne.n	80020d6 <HAL_RCC_GetSysClockFreq+0xb2>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800203e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	f412 1280 	ands.w	r2, r2, #1048576	; 0x100000
 8002048:	d048      	beq.n	80020dc <HAL_RCC_GetSysClockFreq+0xb8>
  uint32_t msifreq = 0U;
 800204a:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 800204c:	4838      	ldr	r0, [pc, #224]	; (8002130 <HAL_RCC_GetSysClockFreq+0x10c>)
 800204e:	e02d      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0x88>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002050:	f002 0203 	and.w	r2, r2, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002054:	2a01      	cmp	r2, #1
 8002056:	d002      	beq.n	800205e <HAL_RCC_GetSysClockFreq+0x3a>
  uint32_t msifreq = 0U;
 8002058:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 800205a:	4610      	mov	r0, r2
 800205c:	e026      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0x88>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800205e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002062:	6812      	ldr	r2, [r2, #0]
 8002064:	f012 0208 	ands.w	r2, r2, #8
 8002068:	d00d      	beq.n	8002086 <HAL_RCC_GetSysClockFreq+0x62>
 800206a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800206e:	6812      	ldr	r2, [r2, #0]
 8002070:	f012 0208 	ands.w	r2, r2, #8
 8002074:	d126      	bne.n	80020c4 <HAL_RCC_GetSysClockFreq+0xa0>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002076:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800207a:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800207e:	492d      	ldr	r1, [pc, #180]	; (8002134 <HAL_RCC_GetSysClockFreq+0x110>)
 8002080:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002084:	e00e      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0x80>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002086:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800208a:	6809      	ldr	r1, [r1, #0]
 800208c:	f011 0f08 	tst.w	r1, #8
 8002090:	d114      	bne.n	80020bc <HAL_RCC_GetSysClockFreq+0x98>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002092:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002096:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 800209a:	f3c2 2203 	ubfx	r2, r2, #8, #4
 800209e:	4925      	ldr	r1, [pc, #148]	; (8002134 <HAL_RCC_GetSysClockFreq+0x110>)
 80020a0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
      sysclockfreq = msifreq;
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	bf0c      	ite	eq
 80020a8:	4610      	moveq	r0, r2
 80020aa:	2000      	movne	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80020ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020b6:	2b0c      	cmp	r3, #12
 80020b8:	d012      	beq.n	80020e0 <HAL_RCC_GetSysClockFreq+0xbc>
}
 80020ba:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80020bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020c0:	6809      	ldr	r1, [r1, #0]
 80020c2:	e7ec      	b.n	800209e <HAL_RCC_GetSysClockFreq+0x7a>
 80020c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020c8:	6812      	ldr	r2, [r2, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80020ca:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80020ce:	e7d6      	b.n	800207e <HAL_RCC_GetSysClockFreq+0x5a>
  uint32_t msifreq = 0U;
 80020d0:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 80020d2:	4817      	ldr	r0, [pc, #92]	; (8002130 <HAL_RCC_GetSysClockFreq+0x10c>)
 80020d4:	e7ea      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t msifreq = 0U;
 80020d6:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 80020d8:	4610      	mov	r0, r2
 80020da:	e7e7      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0x88>
      sysclockfreq = HSE_VALUE;
 80020dc:	4816      	ldr	r0, [pc, #88]	; (8002138 <HAL_RCC_GetSysClockFreq+0x114>)
 80020de:	e7e5      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0x88>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80020e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d01d      	beq.n	800212a <HAL_RCC_GetSysClockFreq+0x106>
 80020ee:	2b03      	cmp	r3, #3
 80020f0:	d108      	bne.n	8002104 <HAL_RCC_GetSysClockFreq+0xe0>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80020f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f6:	681b      	ldr	r3, [r3, #0]
          pllinputfreq = HSE_VALUE / 2U;
 80020f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80020fc:	4a0e      	ldr	r2, [pc, #56]	; (8002138 <HAL_RCC_GetSysClockFreq+0x114>)
 80020fe:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002100:	bf18      	it	ne
 8002102:	461a      	movne	r2, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002108:	68d8      	ldr	r0, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800210a:	68d9      	ldr	r1, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800210c:	68db      	ldr	r3, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800210e:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002112:	fb02 f000 	mul.w	r0, r2, r0
 8002116:	f3c1 1202 	ubfx	r2, r1, #4, #3
 800211a:	3201      	adds	r2, #1
 800211c:	fbb0 f0f2 	udiv	r0, r0, r2
 8002120:	0f5b      	lsrs	r3, r3, #29
 8002122:	3301      	adds	r3, #1
 8002124:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8002128:	e7c7      	b.n	80020ba <HAL_RCC_GetSysClockFreq+0x96>
        pllinputfreq = HSI_VALUE;
 800212a:	4a01      	ldr	r2, [pc, #4]	; (8002130 <HAL_RCC_GetSysClockFreq+0x10c>)
 800212c:	e7ea      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0xe0>
 800212e:	bf00      	nop
 8002130:	00f42400 	.word	0x00f42400
 8002134:	08005c80 	.word	0x08005c80
 8002138:	01e84800 	.word	0x01e84800

0800213c <HAL_RCC_GetHCLKFreq>:
{
 800213c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800213e:	f7ff ff71 	bl	8002024 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800214c:	4a02      	ldr	r2, [pc, #8]	; (8002158 <HAL_RCC_GetHCLKFreq+0x1c>)
 800214e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8002152:	fbb0 f0f3 	udiv	r0, r0, r3
 8002156:	bd08      	pop	{r3, pc}
 8002158:	08005c20 	.word	0x08005c20

0800215c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800215c:	2800      	cmp	r0, #0
 800215e:	f000 830b 	beq.w	8002778 <HAL_RCC_OscConfig+0x61c>
{
 8002162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002166:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800216c:	689d      	ldr	r5, [r3, #8]
 800216e:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002172:	68de      	ldr	r6, [r3, #12]
 8002174:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002178:	6803      	ldr	r3, [r0, #0]
 800217a:	f013 0f20 	tst.w	r3, #32
 800217e:	d02b      	beq.n	80021d8 <HAL_RCC_OscConfig+0x7c>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002180:	2d00      	cmp	r5, #0
 8002182:	d067      	beq.n	8002254 <HAL_RCC_OscConfig+0xf8>
 8002184:	2d0c      	cmp	r5, #12
 8002186:	d063      	beq.n	8002250 <HAL_RCC_OscConfig+0xf4>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002188:	6a23      	ldr	r3, [r4, #32]
 800218a:	2b00      	cmp	r3, #0
 800218c:	f000 80bc 	beq.w	8002308 <HAL_RCC_OscConfig+0x1ac>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002190:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002194:	6813      	ldr	r3, [r2, #0]
 8002196:	f043 0301 	orr.w	r3, r3, #1
 800219a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800219c:	f7ff fbea 	bl	8001974 <HAL_GetTick>
 80021a0:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80021a2:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
 80021a6:	f8d8 3000 	ldr.w	r3, [r8]
 80021aa:	f013 0f02 	tst.w	r3, #2
 80021ae:	f000 80a3 	beq.w	80022f8 <HAL_RCC_OscConfig+0x19c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	f042 0208 	orr.w	r2, r2, #8
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80021c4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80021c6:	430a      	orrs	r2, r1
 80021c8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80021ce:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80021d2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80021d6:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021d8:	6823      	ldr	r3, [r4, #0]
 80021da:	f013 0f01 	tst.w	r3, #1
 80021de:	f000 80b2 	beq.w	8002346 <HAL_RCC_OscConfig+0x1ea>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80021e2:	2d08      	cmp	r5, #8
 80021e4:	f000 80ab 	beq.w	800233e <HAL_RCC_OscConfig+0x1e2>
 80021e8:	2d0c      	cmp	r5, #12
 80021ea:	f000 80a5 	beq.w	8002338 <HAL_RCC_OscConfig+0x1dc>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80021ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021f2:	6813      	ldr	r3, [r2, #0]
 80021f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80021f8:	68a1      	ldr	r1, [r4, #8]
 80021fa:	430b      	orrs	r3, r1
 80021fc:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021fe:	6863      	ldr	r3, [r4, #4]
 8002200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002204:	f000 80c1 	beq.w	800238a <HAL_RCC_OscConfig+0x22e>
 8002208:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800220c:	f000 80c2 	beq.w	8002394 <HAL_RCC_OscConfig+0x238>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800221a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002222:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002224:	6863      	ldr	r3, [r4, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 80bf 	beq.w	80023aa <HAL_RCC_OscConfig+0x24e>
        tickstart = HAL_GetTick();
 800222c:	f7ff fba2 	bl	8001974 <HAL_GetTick>
 8002230:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002232:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
 8002236:	f8d8 3000 	ldr.w	r3, [r8]
 800223a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800223e:	f040 8082 	bne.w	8002346 <HAL_RCC_OscConfig+0x1ea>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002242:	f7ff fb97 	bl	8001974 <HAL_GetTick>
 8002246:	1bc0      	subs	r0, r0, r7
 8002248:	2864      	cmp	r0, #100	; 0x64
 800224a:	d9f4      	bls.n	8002236 <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
 800224c:	2003      	movs	r0, #3
 800224e:	e2a0      	b.n	8002792 <HAL_RCC_OscConfig+0x636>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002250:	2e01      	cmp	r6, #1
 8002252:	d199      	bne.n	8002188 <HAL_RCC_OscConfig+0x2c>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002254:	6a23      	ldr	r3, [r4, #32]
 8002256:	2b00      	cmp	r3, #0
 8002258:	f000 8290 	beq.w	800277c <HAL_RCC_OscConfig+0x620>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800225c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800225e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f013 0f08 	tst.w	r3, #8
 8002268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800226c:	bf12      	itee	ne
 800226e:	681b      	ldrne	r3, [r3, #0]
 8002270:	f8d3 3094 	ldreq.w	r3, [r3, #148]	; 0x94
 8002274:	091b      	lsreq	r3, r3, #4
 8002276:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800227a:	4298      	cmp	r0, r3
 800227c:	d922      	bls.n	80022c4 <HAL_RCC_OscConfig+0x168>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800227e:	f7ff fe57 	bl	8001f30 <RCC_SetFlashLatencyFromMSIRange>
 8002282:	2800      	cmp	r0, #0
 8002284:	f040 827c 	bne.w	8002780 <HAL_RCC_OscConfig+0x624>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	f042 0208 	orr.w	r2, r2, #8
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800229a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800229c:	430a      	orrs	r2, r1
 800229e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80022a4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80022a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80022ac:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80022ae:	f7ff ff45 	bl	800213c <HAL_RCC_GetHCLKFreq>
 80022b2:	4bb6      	ldr	r3, [pc, #728]	; (800258c <HAL_RCC_OscConfig+0x430>)
 80022b4:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80022b6:	4bb6      	ldr	r3, [pc, #728]	; (8002590 <HAL_RCC_OscConfig+0x434>)
 80022b8:	6818      	ldr	r0, [r3, #0]
 80022ba:	f7ff fb11 	bl	80018e0 <HAL_InitTick>
        if (status != HAL_OK)
 80022be:	2800      	cmp	r0, #0
 80022c0:	d08a      	beq.n	80021d8 <HAL_RCC_OscConfig+0x7c>
 80022c2:	e266      	b.n	8002792 <HAL_RCC_OscConfig+0x636>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	f042 0208 	orr.w	r2, r2, #8
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80022d6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80022d8:	430a      	orrs	r2, r1
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80022e0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80022e4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80022e8:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022ea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80022ec:	f7ff fe20 	bl	8001f30 <RCC_SetFlashLatencyFromMSIRange>
 80022f0:	2800      	cmp	r0, #0
 80022f2:	d0dc      	beq.n	80022ae <HAL_RCC_OscConfig+0x152>
            return HAL_ERROR;
 80022f4:	2001      	movs	r0, #1
 80022f6:	e24c      	b.n	8002792 <HAL_RCC_OscConfig+0x636>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022f8:	f7ff fb3c 	bl	8001974 <HAL_GetTick>
 80022fc:	1bc0      	subs	r0, r0, r7
 80022fe:	2802      	cmp	r0, #2
 8002300:	f67f af51 	bls.w	80021a6 <HAL_RCC_OscConfig+0x4a>
            return HAL_TIMEOUT;
 8002304:	2003      	movs	r0, #3
 8002306:	e244      	b.n	8002792 <HAL_RCC_OscConfig+0x636>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002308:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800230c:	6813      	ldr	r3, [r2, #0]
 800230e:	f023 0301 	bic.w	r3, r3, #1
 8002312:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002314:	f7ff fb2e 	bl	8001974 <HAL_GetTick>
 8002318:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800231a:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
 800231e:	f8d8 3000 	ldr.w	r3, [r8]
 8002322:	f013 0f02 	tst.w	r3, #2
 8002326:	f43f af57 	beq.w	80021d8 <HAL_RCC_OscConfig+0x7c>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800232a:	f7ff fb23 	bl	8001974 <HAL_GetTick>
 800232e:	1bc0      	subs	r0, r0, r7
 8002330:	2802      	cmp	r0, #2
 8002332:	d9f4      	bls.n	800231e <HAL_RCC_OscConfig+0x1c2>
            return HAL_TIMEOUT;
 8002334:	2003      	movs	r0, #3
 8002336:	e22c      	b.n	8002792 <HAL_RCC_OscConfig+0x636>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002338:	2e03      	cmp	r6, #3
 800233a:	f47f af58 	bne.w	80021ee <HAL_RCC_OscConfig+0x92>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800233e:	6863      	ldr	r3, [r4, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 821f 	beq.w	8002784 <HAL_RCC_OscConfig+0x628>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002346:	6823      	ldr	r3, [r4, #0]
 8002348:	f013 0f02 	tst.w	r3, #2
 800234c:	d057      	beq.n	80023fe <HAL_RCC_OscConfig+0x2a2>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800234e:	2d04      	cmp	r5, #4
 8002350:	d03e      	beq.n	80023d0 <HAL_RCC_OscConfig+0x274>
 8002352:	2d0c      	cmp	r5, #12
 8002354:	d03a      	beq.n	80023cc <HAL_RCC_OscConfig+0x270>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002356:	6923      	ldr	r3, [r4, #16]
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 808b 	beq.w	8002474 <HAL_RCC_OscConfig+0x318>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800235e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002362:	6813      	ldr	r3, [r2, #0]
 8002364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002368:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800236a:	f7ff fb03 	bl	8001974 <HAL_GetTick>
 800236e:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002370:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800237a:	d137      	bne.n	80023ec <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800237c:	f7ff fafa 	bl	8001974 <HAL_GetTick>
 8002380:	1b80      	subs	r0, r0, r6
 8002382:	2802      	cmp	r0, #2
 8002384:	d9f6      	bls.n	8002374 <HAL_RCC_OscConfig+0x218>
            return HAL_TIMEOUT;
 8002386:	2003      	movs	r0, #3
 8002388:	e203      	b.n	8002792 <HAL_RCC_OscConfig+0x636>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800238a:	6813      	ldr	r3, [r2, #0]
 800238c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002390:	6013      	str	r3, [r2, #0]
}
 8002392:	e747      	b.n	8002224 <HAL_RCC_OscConfig+0xc8>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800239e:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80023a6:	601a      	str	r2, [r3, #0]
}
 80023a8:	e73c      	b.n	8002224 <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 80023aa:	f7ff fae3 	bl	8001974 <HAL_GetTick>
 80023ae:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80023b0:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
 80023b4:	f8d8 3000 	ldr.w	r3, [r8]
 80023b8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80023bc:	d0c3      	beq.n	8002346 <HAL_RCC_OscConfig+0x1ea>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023be:	f7ff fad9 	bl	8001974 <HAL_GetTick>
 80023c2:	1bc0      	subs	r0, r0, r7
 80023c4:	2864      	cmp	r0, #100	; 0x64
 80023c6:	d9f5      	bls.n	80023b4 <HAL_RCC_OscConfig+0x258>
            return HAL_TIMEOUT;
 80023c8:	2003      	movs	r0, #3
 80023ca:	e1e2      	b.n	8002792 <HAL_RCC_OscConfig+0x636>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023cc:	2e02      	cmp	r6, #2
 80023ce:	d1c2      	bne.n	8002356 <HAL_RCC_OscConfig+0x1fa>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80023d0:	6923      	ldr	r3, [r4, #16]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 81d8 	beq.w	8002788 <HAL_RCC_OscConfig+0x62c>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80023d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023dc:	6853      	ldr	r3, [r2, #4]
 80023de:	6961      	ldr	r1, [r4, #20]
 80023e0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80023e4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80023e8:	6053      	str	r3, [r2, #4]
}
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0x2a2>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80023ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023f0:	6853      	ldr	r3, [r2, #4]
 80023f2:	6961      	ldr	r1, [r4, #20]
 80023f4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80023f8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80023fc:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023fe:	6823      	ldr	r3, [r4, #0]
 8002400:	f013 0f08 	tst.w	r3, #8
 8002404:	d07e      	beq.n	8002504 <HAL_RCC_OscConfig+0x3a8>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002406:	69a3      	ldr	r3, [r4, #24]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d062      	beq.n	80024d2 <HAL_RCC_OscConfig+0x376>
      uint32_t csr_temp = RCC->CSR;
 800240c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002410:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002414:	f003 0210 	and.w	r2, r3, #16
 8002418:	69e1      	ldr	r1, [r4, #28]
 800241a:	4291      	cmp	r1, r2
 800241c:	d011      	beq.n	8002442 <HAL_RCC_OscConfig+0x2e6>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800241e:	f003 0203 	and.w	r2, r3, #3
 8002422:	2a02      	cmp	r2, #2
 8002424:	f000 81b2 	beq.w	800278c <HAL_RCC_OscConfig+0x630>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002428:	f013 0f01 	tst.w	r3, #1
 800242c:	d138      	bne.n	80024a0 <HAL_RCC_OscConfig+0x344>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800242e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002432:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002436:	f023 0310 	bic.w	r3, r3, #16
 800243a:	69e1      	ldr	r1, [r4, #28]
 800243c:	430b      	orrs	r3, r1
 800243e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002442:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002446:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002452:	f7ff fa8f 	bl	8001974 <HAL_GetTick>
 8002456:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002458:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 800245c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002460:	f013 0f02 	tst.w	r3, #2
 8002464:	d14e      	bne.n	8002504 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002466:	f7ff fa85 	bl	8001974 <HAL_GetTick>
 800246a:	1b80      	subs	r0, r0, r6
 800246c:	2811      	cmp	r0, #17
 800246e:	d9f5      	bls.n	800245c <HAL_RCC_OscConfig+0x300>
          return HAL_TIMEOUT;
 8002470:	2003      	movs	r0, #3
 8002472:	e18e      	b.n	8002792 <HAL_RCC_OscConfig+0x636>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002474:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002478:	6813      	ldr	r3, [r2, #0]
 800247a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800247e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002480:	f7ff fa78 	bl	8001974 <HAL_GetTick>
 8002484:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002486:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002490:	d0b5      	beq.n	80023fe <HAL_RCC_OscConfig+0x2a2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002492:	f7ff fa6f 	bl	8001974 <HAL_GetTick>
 8002496:	1b80      	subs	r0, r0, r6
 8002498:	2802      	cmp	r0, #2
 800249a:	d9f6      	bls.n	800248a <HAL_RCC_OscConfig+0x32e>
            return HAL_TIMEOUT;
 800249c:	2003      	movs	r0, #3
 800249e:	e178      	b.n	8002792 <HAL_RCC_OscConfig+0x636>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80024a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024a4:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80024a8:	f023 0301 	bic.w	r3, r3, #1
 80024ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 80024b0:	f7ff fa60 	bl	8001974 <HAL_GetTick>
 80024b4:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80024b6:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 80024ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024be:	f013 0f02 	tst.w	r3, #2
 80024c2:	d0b4      	beq.n	800242e <HAL_RCC_OscConfig+0x2d2>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024c4:	f7ff fa56 	bl	8001974 <HAL_GetTick>
 80024c8:	1b80      	subs	r0, r0, r6
 80024ca:	2811      	cmp	r0, #17
 80024cc:	d9f5      	bls.n	80024ba <HAL_RCC_OscConfig+0x35e>
              return HAL_TIMEOUT;
 80024ce:	2003      	movs	r0, #3
 80024d0:	e15f      	b.n	8002792 <HAL_RCC_OscConfig+0x636>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80024d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024d6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80024da:	f023 0301 	bic.w	r3, r3, #1
 80024de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80024e2:	f7ff fa47 	bl	8001974 <HAL_GetTick>
 80024e6:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80024e8:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 80024ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024f0:	f013 0f02 	tst.w	r3, #2
 80024f4:	d006      	beq.n	8002504 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024f6:	f7ff fa3d 	bl	8001974 <HAL_GetTick>
 80024fa:	1b80      	subs	r0, r0, r6
 80024fc:	2811      	cmp	r0, #17
 80024fe:	d9f5      	bls.n	80024ec <HAL_RCC_OscConfig+0x390>
          return HAL_TIMEOUT;
 8002500:	2003      	movs	r0, #3
 8002502:	e146      	b.n	8002792 <HAL_RCC_OscConfig+0x636>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002504:	6823      	ldr	r3, [r4, #0]
 8002506:	f013 0f04 	tst.w	r3, #4
 800250a:	f000 80b2 	beq.w	8002672 <HAL_RCC_OscConfig+0x516>
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800250e:	4b21      	ldr	r3, [pc, #132]	; (8002594 <HAL_RCC_OscConfig+0x438>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002516:	d110      	bne.n	800253a <HAL_RCC_OscConfig+0x3de>
      HAL_PWR_EnableBkUpAccess();
 8002518:	f7ff fcfa 	bl	8001f10 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 800251c:	f7ff fa2a 	bl	8001974 <HAL_GetTick>
 8002520:	4606      	mov	r6, r0
 8002522:	4f1c      	ldr	r7, [pc, #112]	; (8002594 <HAL_RCC_OscConfig+0x438>)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	f413 7f80 	tst.w	r3, #256	; 0x100
 800252a:	d106      	bne.n	800253a <HAL_RCC_OscConfig+0x3de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800252c:	f7ff fa22 	bl	8001974 <HAL_GetTick>
 8002530:	1b80      	subs	r0, r0, r6
 8002532:	2802      	cmp	r0, #2
 8002534:	d9f6      	bls.n	8002524 <HAL_RCC_OscConfig+0x3c8>
          return HAL_TIMEOUT;
 8002536:	2003      	movs	r0, #3
 8002538:	e12b      	b.n	8002792 <HAL_RCC_OscConfig+0x636>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800253a:	68e3      	ldr	r3, [r4, #12]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d064      	beq.n	800260a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002540:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002544:	2b05      	cmp	r3, #5
 8002546:	d107      	bne.n	8002558 <HAL_RCC_OscConfig+0x3fc>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002548:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800254c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002550:	f043 0304 	orr.w	r3, r3, #4
 8002554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8002558:	f7ff fa0c 	bl	8001974 <HAL_GetTick>
 800255c:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800255e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002562:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002566:	f043 0301 	orr.w	r3, r3, #1
 800256a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800256e:	4617      	mov	r7, r2
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002570:	f241 3888 	movw	r8, #5000	; 0x1388
 8002574:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002578:	f013 0f02 	tst.w	r3, #2
 800257c:	d10c      	bne.n	8002598 <HAL_RCC_OscConfig+0x43c>
 800257e:	f7ff f9f9 	bl	8001974 <HAL_GetTick>
 8002582:	1b80      	subs	r0, r0, r6
 8002584:	4540      	cmp	r0, r8
 8002586:	d9f5      	bls.n	8002574 <HAL_RCC_OscConfig+0x418>
          return HAL_TIMEOUT;
 8002588:	2003      	movs	r0, #3
 800258a:	e102      	b.n	8002792 <HAL_RCC_OscConfig+0x636>
 800258c:	20000080 	.word	0x20000080
 8002590:	20000088 	.word	0x20000088
 8002594:	58000400 	.word	0x58000400
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002598:	68e3      	ldr	r3, [r4, #12]
 800259a:	f023 0304 	bic.w	r3, r3, #4
 800259e:	2b81      	cmp	r3, #129	; 0x81
 80025a0:	d019      	beq.n	80025d6 <HAL_RCC_OscConfig+0x47a>
        tickstart = HAL_GetTick();
 80025a2:	f7ff f9e7 	bl	8001974 <HAL_GetTick>
 80025a6:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80025a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025ac:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80025b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80025b8:	4617      	mov	r7, r2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ba:	f241 3888 	movw	r8, #5000	; 0x1388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80025be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025c2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80025c6:	d054      	beq.n	8002672 <HAL_RCC_OscConfig+0x516>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c8:	f7ff f9d4 	bl	8001974 <HAL_GetTick>
 80025cc:	1b80      	subs	r0, r0, r6
 80025ce:	4540      	cmp	r0, r8
 80025d0:	d9f5      	bls.n	80025be <HAL_RCC_OscConfig+0x462>
            return HAL_TIMEOUT;
 80025d2:	2003      	movs	r0, #3
 80025d4:	e0dd      	b.n	8002792 <HAL_RCC_OscConfig+0x636>
        tickstart = HAL_GetTick();
 80025d6:	f7ff f9cd 	bl	8001974 <HAL_GetTick>
 80025da:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80025dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025e0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80025e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80025ec:	4617      	mov	r7, r2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ee:	f241 3888 	movw	r8, #5000	; 0x1388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80025f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025f6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80025fa:	d13a      	bne.n	8002672 <HAL_RCC_OscConfig+0x516>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025fc:	f7ff f9ba 	bl	8001974 <HAL_GetTick>
 8002600:	1b80      	subs	r0, r0, r6
 8002602:	4540      	cmp	r0, r8
 8002604:	d9f5      	bls.n	80025f2 <HAL_RCC_OscConfig+0x496>
            return HAL_TIMEOUT;
 8002606:	2003      	movs	r0, #3
 8002608:	e0c3      	b.n	8002792 <HAL_RCC_OscConfig+0x636>
      tickstart = HAL_GetTick();
 800260a:	f7ff f9b3 	bl	8001974 <HAL_GetTick>
 800260e:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002610:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002614:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002618:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800261c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002620:	4617      	mov	r7, r2
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002622:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002626:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800262a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800262e:	d006      	beq.n	800263e <HAL_RCC_OscConfig+0x4e2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002630:	f7ff f9a0 	bl	8001974 <HAL_GetTick>
 8002634:	1b80      	subs	r0, r0, r6
 8002636:	4540      	cmp	r0, r8
 8002638:	d9f5      	bls.n	8002626 <HAL_RCC_OscConfig+0x4ca>
          return HAL_TIMEOUT;
 800263a:	2003      	movs	r0, #3
 800263c:	e0a9      	b.n	8002792 <HAL_RCC_OscConfig+0x636>
      tickstart = HAL_GetTick();
 800263e:	f7ff f999 	bl	8001974 <HAL_GetTick>
 8002642:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002644:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002648:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800264c:	f023 0301 	bic.w	r3, r3, #1
 8002650:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002654:	4617      	mov	r7, r2
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002656:	f241 3888 	movw	r8, #5000	; 0x1388
 800265a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800265e:	f013 0f02 	tst.w	r3, #2
 8002662:	d006      	beq.n	8002672 <HAL_RCC_OscConfig+0x516>
 8002664:	f7ff f986 	bl	8001974 <HAL_GetTick>
 8002668:	1b80      	subs	r0, r0, r6
 800266a:	4540      	cmp	r0, r8
 800266c:	d9f5      	bls.n	800265a <HAL_RCC_OscConfig+0x4fe>
          return HAL_TIMEOUT;
 800266e:	2003      	movs	r0, #3
 8002670:	e08f      	b.n	8002792 <HAL_RCC_OscConfig+0x636>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002672:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 808b 	beq.w	8002790 <HAL_RCC_OscConfig+0x634>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800267a:	2d0c      	cmp	r5, #12
 800267c:	d060      	beq.n	8002740 <HAL_RCC_OscConfig+0x5e4>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800267e:	2b02      	cmp	r3, #2
 8002680:	d016      	beq.n	80026b0 <HAL_RCC_OscConfig+0x554>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002682:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002686:	6813      	ldr	r3, [r2, #0]
 8002688:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800268c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800268e:	f7ff f971 	bl	8001974 <HAL_GetTick>
 8002692:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002694:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002698:	682b      	ldr	r3, [r5, #0]
 800269a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800269e:	d148      	bne.n	8002732 <HAL_RCC_OscConfig+0x5d6>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80026a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026a4:	68d1      	ldr	r1, [r2, #12]
 80026a6:	4b41      	ldr	r3, [pc, #260]	; (80027ac <HAL_RCC_OscConfig+0x650>)
 80026a8:	400b      	ands	r3, r1
 80026aa:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 80026ac:	2000      	movs	r0, #0
 80026ae:	e070      	b.n	8002792 <HAL_RCC_OscConfig+0x636>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80026b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026b4:	6813      	ldr	r3, [r2, #0]
 80026b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026ba:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80026bc:	f7ff f95a 	bl	8001974 <HAL_GetTick>
 80026c0:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80026c2:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80026c6:	6833      	ldr	r3, [r6, #0]
 80026c8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80026cc:	d12a      	bne.n	8002724 <HAL_RCC_OscConfig+0x5c8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026d2:	68d0      	ldr	r0, [r2, #12]
 80026d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80026d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80026d8:	430b      	orrs	r3, r1
 80026da:	4935      	ldr	r1, [pc, #212]	; (80027b0 <HAL_RCC_OscConfig+0x654>)
 80026dc:	4001      	ands	r1, r0
 80026de:	430b      	orrs	r3, r1
 80026e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80026e2:	430b      	orrs	r3, r1
 80026e4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80026e6:	430b      	orrs	r3, r1
 80026e8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80026ea:	430b      	orrs	r3, r1
 80026ec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80026ee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80026f2:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80026f4:	6813      	ldr	r3, [r2, #0]
 80026f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026fa:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026fc:	68d3      	ldr	r3, [r2, #12]
 80026fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002702:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8002704:	f7ff f936 	bl	8001974 <HAL_GetTick>
 8002708:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800270a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800270e:	682b      	ldr	r3, [r5, #0]
 8002710:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002714:	d13f      	bne.n	8002796 <HAL_RCC_OscConfig+0x63a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002716:	f7ff f92d 	bl	8001974 <HAL_GetTick>
 800271a:	1b00      	subs	r0, r0, r4
 800271c:	280a      	cmp	r0, #10
 800271e:	d9f6      	bls.n	800270e <HAL_RCC_OscConfig+0x5b2>
            return HAL_TIMEOUT;
 8002720:	2003      	movs	r0, #3
 8002722:	e036      	b.n	8002792 <HAL_RCC_OscConfig+0x636>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002724:	f7ff f926 	bl	8001974 <HAL_GetTick>
 8002728:	1b40      	subs	r0, r0, r5
 800272a:	280a      	cmp	r0, #10
 800272c:	d9cb      	bls.n	80026c6 <HAL_RCC_OscConfig+0x56a>
            return HAL_TIMEOUT;
 800272e:	2003      	movs	r0, #3
 8002730:	e02f      	b.n	8002792 <HAL_RCC_OscConfig+0x636>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002732:	f7ff f91f 	bl	8001974 <HAL_GetTick>
 8002736:	1b00      	subs	r0, r0, r4
 8002738:	280a      	cmp	r0, #10
 800273a:	d9ad      	bls.n	8002698 <HAL_RCC_OscConfig+0x53c>
            return HAL_TIMEOUT;
 800273c:	2003      	movs	r0, #3
 800273e:	e028      	b.n	8002792 <HAL_RCC_OscConfig+0x636>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002740:	2b01      	cmp	r3, #1
 8002742:	d02a      	beq.n	800279a <HAL_RCC_OscConfig+0x63e>
        pll_config = RCC->PLLCFGR;
 8002744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002748:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800274a:	f003 0103 	and.w	r1, r3, #3
 800274e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002750:	4291      	cmp	r1, r2
 8002752:	d124      	bne.n	800279e <HAL_RCC_OscConfig+0x642>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002754:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002758:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800275a:	428a      	cmp	r2, r1
 800275c:	d121      	bne.n	80027a2 <HAL_RCC_OscConfig+0x646>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800275e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002762:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002764:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002768:	d11d      	bne.n	80027a6 <HAL_RCC_OscConfig+0x64a>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800276a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 800276e:	6c60      	ldr	r0, [r4, #68]	; 0x44
    return HAL_ERROR;
 8002770:	1a18      	subs	r0, r3, r0
 8002772:	bf18      	it	ne
 8002774:	2001      	movne	r0, #1
 8002776:	e00c      	b.n	8002792 <HAL_RCC_OscConfig+0x636>
 8002778:	2001      	movs	r0, #1
}
 800277a:	4770      	bx	lr
        return HAL_ERROR;
 800277c:	2001      	movs	r0, #1
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x636>
            return HAL_ERROR;
 8002780:	2001      	movs	r0, #1
 8002782:	e006      	b.n	8002792 <HAL_RCC_OscConfig+0x636>
        return HAL_ERROR;
 8002784:	2001      	movs	r0, #1
 8002786:	e004      	b.n	8002792 <HAL_RCC_OscConfig+0x636>
        return HAL_ERROR;
 8002788:	2001      	movs	r0, #1
 800278a:	e002      	b.n	8002792 <HAL_RCC_OscConfig+0x636>
          return HAL_ERROR;
 800278c:	2001      	movs	r0, #1
 800278e:	e000      	b.n	8002792 <HAL_RCC_OscConfig+0x636>
  return HAL_OK;
 8002790:	2000      	movs	r0, #0
}
 8002792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8002796:	2000      	movs	r0, #0
 8002798:	e7fb      	b.n	8002792 <HAL_RCC_OscConfig+0x636>
        return HAL_ERROR;
 800279a:	2001      	movs	r0, #1
 800279c:	e7f9      	b.n	8002792 <HAL_RCC_OscConfig+0x636>
          return HAL_ERROR;
 800279e:	2001      	movs	r0, #1
 80027a0:	e7f7      	b.n	8002792 <HAL_RCC_OscConfig+0x636>
 80027a2:	2001      	movs	r0, #1
 80027a4:	e7f5      	b.n	8002792 <HAL_RCC_OscConfig+0x636>
 80027a6:	2001      	movs	r0, #1
 80027a8:	e7f3      	b.n	8002792 <HAL_RCC_OscConfig+0x636>
 80027aa:	bf00      	nop
 80027ac:	eefefffc 	.word	0xeefefffc
 80027b0:	11c1808c 	.word	0x11c1808c

080027b4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80027b4:	2800      	cmp	r0, #0
 80027b6:	f000 8106 	beq.w	80029c6 <HAL_RCC_ClockConfig+0x212>
{
 80027ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027be:	460c      	mov	r4, r1
 80027c0:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027c2:	4b83      	ldr	r3, [pc, #524]	; (80029d0 <HAL_RCC_ClockConfig+0x21c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	428b      	cmp	r3, r1
 80027cc:	d327      	bcc.n	800281e <HAL_RCC_ClockConfig+0x6a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ce:	682b      	ldr	r3, [r5, #0]
 80027d0:	f013 0f02 	tst.w	r3, #2
 80027d4:	d139      	bne.n	800284a <HAL_RCC_ClockConfig+0x96>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80027d6:	682b      	ldr	r3, [r5, #0]
 80027d8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80027dc:	d14d      	bne.n	800287a <HAL_RCC_ClockConfig+0xc6>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027de:	682b      	ldr	r3, [r5, #0]
 80027e0:	f013 0f04 	tst.w	r3, #4
 80027e4:	d165      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xfe>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e6:	682b      	ldr	r3, [r5, #0]
 80027e8:	f013 0f08 	tst.w	r3, #8
 80027ec:	d179      	bne.n	80028e2 <HAL_RCC_ClockConfig+0x12e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ee:	682b      	ldr	r3, [r5, #0]
 80027f0:	f013 0f01 	tst.w	r3, #1
 80027f4:	f000 80c1 	beq.w	800297a <HAL_RCC_ClockConfig+0x1c6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027f8:	686b      	ldr	r3, [r5, #4]
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	f000 808b 	beq.w	8002916 <HAL_RCC_ClockConfig+0x162>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002800:	2b03      	cmp	r3, #3
 8002802:	f000 8090 	beq.w	8002926 <HAL_RCC_ClockConfig+0x172>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002806:	2b00      	cmp	r3, #0
 8002808:	f040 8095 	bne.w	8002936 <HAL_RCC_ClockConfig+0x182>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800280c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002810:	6812      	ldr	r2, [r2, #0]
 8002812:	f012 0f02 	tst.w	r2, #2
 8002816:	f040 8094 	bne.w	8002942 <HAL_RCC_ClockConfig+0x18e>
        return HAL_ERROR;
 800281a:	2001      	movs	r0, #1
 800281c:	e0d1      	b.n	80029c2 <HAL_RCC_ClockConfig+0x20e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281e:	4a6c      	ldr	r2, [pc, #432]	; (80029d0 <HAL_RCC_ClockConfig+0x21c>)
 8002820:	6813      	ldr	r3, [r2, #0]
 8002822:	f023 0307 	bic.w	r3, r3, #7
 8002826:	430b      	orrs	r3, r1
 8002828:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800282a:	f7ff f8a3 	bl	8001974 <HAL_GetTick>
 800282e:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002830:	4f67      	ldr	r7, [pc, #412]	; (80029d0 <HAL_RCC_ClockConfig+0x21c>)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	42a3      	cmp	r3, r4
 800283a:	d0c8      	beq.n	80027ce <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800283c:	f7ff f89a 	bl	8001974 <HAL_GetTick>
 8002840:	1b80      	subs	r0, r0, r6
 8002842:	2802      	cmp	r0, #2
 8002844:	d9f5      	bls.n	8002832 <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8002846:	2003      	movs	r0, #3
 8002848:	e0bb      	b.n	80029c2 <HAL_RCC_ClockConfig+0x20e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800284a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800284e:	6893      	ldr	r3, [r2, #8]
 8002850:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002854:	68a9      	ldr	r1, [r5, #8]
 8002856:	430b      	orrs	r3, r1
 8002858:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 800285a:	f7ff f88b 	bl	8001974 <HAL_GetTick>
 800285e:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002860:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800286a:	d1b4      	bne.n	80027d6 <HAL_RCC_ClockConfig+0x22>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800286c:	f7ff f882 	bl	8001974 <HAL_GetTick>
 8002870:	1b80      	subs	r0, r0, r6
 8002872:	2802      	cmp	r0, #2
 8002874:	d9f6      	bls.n	8002864 <HAL_RCC_ClockConfig+0xb0>
        return HAL_TIMEOUT;
 8002876:	2003      	movs	r0, #3
 8002878:	e0a3      	b.n	80029c2 <HAL_RCC_ClockConfig+0x20e>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800287a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800287e:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8002882:	6969      	ldr	r1, [r5, #20]
 8002884:	f023 030f 	bic.w	r3, r3, #15
 8002888:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 800288c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 8002890:	f7ff f870 	bl	8001974 <HAL_GetTick>
 8002894:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002896:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 800289a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800289e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80028a2:	d19c      	bne.n	80027de <HAL_RCC_ClockConfig+0x2a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80028a4:	f7ff f866 	bl	8001974 <HAL_GetTick>
 80028a8:	1b80      	subs	r0, r0, r6
 80028aa:	2802      	cmp	r0, #2
 80028ac:	d9f5      	bls.n	800289a <HAL_RCC_ClockConfig+0xe6>
        return HAL_TIMEOUT;
 80028ae:	2003      	movs	r0, #3
 80028b0:	e087      	b.n	80029c2 <HAL_RCC_ClockConfig+0x20e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80028b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028b6:	6893      	ldr	r3, [r2, #8]
 80028b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80028bc:	68e9      	ldr	r1, [r5, #12]
 80028be:	430b      	orrs	r3, r1
 80028c0:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80028c2:	f7ff f857 	bl	8001974 <HAL_GetTick>
 80028c6:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80028c8:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80028d2:	d188      	bne.n	80027e6 <HAL_RCC_ClockConfig+0x32>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80028d4:	f7ff f84e 	bl	8001974 <HAL_GetTick>
 80028d8:	1b80      	subs	r0, r0, r6
 80028da:	2802      	cmp	r0, #2
 80028dc:	d9f6      	bls.n	80028cc <HAL_RCC_ClockConfig+0x118>
        return HAL_TIMEOUT;
 80028de:	2003      	movs	r0, #3
 80028e0:	e06f      	b.n	80029c2 <HAL_RCC_ClockConfig+0x20e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80028e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028e6:	6893      	ldr	r3, [r2, #8]
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80028e8:	6929      	ldr	r1, [r5, #16]
 80028ea:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80028ee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80028f2:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80028f4:	f7ff f83e 	bl	8001974 <HAL_GetTick>
 80028f8:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80028fa:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002904:	f47f af73 	bne.w	80027ee <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002908:	f7ff f834 	bl	8001974 <HAL_GetTick>
 800290c:	1b80      	subs	r0, r0, r6
 800290e:	2802      	cmp	r0, #2
 8002910:	d9f5      	bls.n	80028fe <HAL_RCC_ClockConfig+0x14a>
        return HAL_TIMEOUT;
 8002912:	2003      	movs	r0, #3
 8002914:	e055      	b.n	80029c2 <HAL_RCC_ClockConfig+0x20e>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002916:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800291a:	6812      	ldr	r2, [r2, #0]
 800291c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002920:	d10f      	bne.n	8002942 <HAL_RCC_ClockConfig+0x18e>
        return HAL_ERROR;
 8002922:	2001      	movs	r0, #1
 8002924:	e04d      	b.n	80029c2 <HAL_RCC_ClockConfig+0x20e>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002926:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800292a:	6812      	ldr	r2, [r2, #0]
 800292c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002930:	d107      	bne.n	8002942 <HAL_RCC_ClockConfig+0x18e>
        return HAL_ERROR;
 8002932:	2001      	movs	r0, #1
 8002934:	e045      	b.n	80029c2 <HAL_RCC_ClockConfig+0x20e>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002936:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800293a:	6812      	ldr	r2, [r2, #0]
 800293c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002940:	d043      	beq.n	80029ca <HAL_RCC_ClockConfig+0x216>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002942:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002946:	688a      	ldr	r2, [r1, #8]
 8002948:	f022 0203 	bic.w	r2, r2, #3
 800294c:	4313      	orrs	r3, r2
 800294e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002950:	f7ff f810 	bl	8001974 <HAL_GetTick>
 8002954:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002956:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800295a:	f241 3888 	movw	r8, #5000	; 0x1388
 800295e:	68bb      	ldr	r3, [r7, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002960:	686a      	ldr	r2, [r5, #4]
 8002962:	f003 030c 	and.w	r3, r3, #12
 8002966:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800296a:	d006      	beq.n	800297a <HAL_RCC_ClockConfig+0x1c6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800296c:	f7ff f802 	bl	8001974 <HAL_GetTick>
 8002970:	1b80      	subs	r0, r0, r6
 8002972:	4540      	cmp	r0, r8
 8002974:	d9f3      	bls.n	800295e <HAL_RCC_ClockConfig+0x1aa>
        return HAL_TIMEOUT;
 8002976:	2003      	movs	r0, #3
 8002978:	e023      	b.n	80029c2 <HAL_RCC_ClockConfig+0x20e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800297a:	4b15      	ldr	r3, [pc, #84]	; (80029d0 <HAL_RCC_ClockConfig+0x21c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	42a3      	cmp	r3, r4
 8002984:	d915      	bls.n	80029b2 <HAL_RCC_ClockConfig+0x1fe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002986:	4a12      	ldr	r2, [pc, #72]	; (80029d0 <HAL_RCC_ClockConfig+0x21c>)
 8002988:	6813      	ldr	r3, [r2, #0]
 800298a:	f023 0307 	bic.w	r3, r3, #7
 800298e:	4323      	orrs	r3, r4
 8002990:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002992:	f7fe ffef 	bl	8001974 <HAL_GetTick>
 8002996:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002998:	4e0d      	ldr	r6, [pc, #52]	; (80029d0 <HAL_RCC_ClockConfig+0x21c>)
 800299a:	6833      	ldr	r3, [r6, #0]
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	42a3      	cmp	r3, r4
 80029a2:	d006      	beq.n	80029b2 <HAL_RCC_ClockConfig+0x1fe>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80029a4:	f7fe ffe6 	bl	8001974 <HAL_GetTick>
 80029a8:	1b40      	subs	r0, r0, r5
 80029aa:	2802      	cmp	r0, #2
 80029ac:	d9f5      	bls.n	800299a <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 80029ae:	2003      	movs	r0, #3
 80029b0:	e007      	b.n	80029c2 <HAL_RCC_ClockConfig+0x20e>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80029b2:	f7ff fbc3 	bl	800213c <HAL_RCC_GetHCLKFreq>
 80029b6:	4b07      	ldr	r3, [pc, #28]	; (80029d4 <HAL_RCC_ClockConfig+0x220>)
 80029b8:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80029ba:	4b07      	ldr	r3, [pc, #28]	; (80029d8 <HAL_RCC_ClockConfig+0x224>)
 80029bc:	6818      	ldr	r0, [r3, #0]
 80029be:	f7fe ff8f 	bl	80018e0 <HAL_InitTick>
}
 80029c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80029c6:	2001      	movs	r0, #1
}
 80029c8:	4770      	bx	lr
        return HAL_ERROR;
 80029ca:	2001      	movs	r0, #1
 80029cc:	e7f9      	b.n	80029c2 <HAL_RCC_ClockConfig+0x20e>
 80029ce:	bf00      	nop
 80029d0:	58004000 	.word	0x58004000
 80029d4:	20000080 	.word	0x20000080
 80029d8:	20000088 	.word	0x20000088

080029dc <HAL_RCC_GetPCLK1Freq>:
{
 80029dc:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80029de:	f7ff fbad 	bl	800213c <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80029e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80029ec:	4a02      	ldr	r2, [pc, #8]	; (80029f8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80029ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80029f2:	40d8      	lsrs	r0, r3
 80029f4:	bd08      	pop	{r3, pc}
 80029f6:	bf00      	nop
 80029f8:	08005c60 	.word	0x08005c60

080029fc <HAL_RCC_GetPCLK2Freq>:
{
 80029fc:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80029fe:	f7ff fb9d 	bl	800213c <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002a02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002a0c:	4a02      	ldr	r2, [pc, #8]	; (8002a18 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8002a12:	40d8      	lsrs	r0, r3
 8002a14:	bd08      	pop	{r3, pc}
 8002a16:	bf00      	nop
 8002a18:	08005c60 	.word	0x08005c60

08002a1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a1e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a20:	6803      	ldr	r3, [r0, #0]
 8002a22:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002a26:	f040 80a5 	bne.w	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x158>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002a2a:	2000      	movs	r0, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a2c:	6823      	ldr	r3, [r4, #0]
 8002a2e:	f013 0f01 	tst.w	r3, #1
 8002a32:	d00a      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a34:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002a36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a3a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002a3e:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8002a42:	b292      	uxth	r2, r2
 8002a44:	4313      	orrs	r3, r2
 8002a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a4a:	6823      	ldr	r3, [r4, #0]
 8002a4c:	f013 0f02 	tst.w	r3, #2
 8002a50:	d00a      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a52:	68a2      	ldr	r2, [r4, #8]
 8002a54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a58:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002a5c:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8002a60:	b292      	uxth	r2, r2
 8002a62:	4313      	orrs	r3, r2
 8002a64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a68:	6823      	ldr	r3, [r4, #0]
 8002a6a:	f013 0f20 	tst.w	r3, #32
 8002a6e:	d009      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x68>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002a70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a74:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002a78:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002a7c:	6921      	ldr	r1, [r4, #16]
 8002a7e:	430b      	orrs	r3, r1
 8002a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a84:	6823      	ldr	r3, [r4, #0]
 8002a86:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002a8a:	d00c      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a8c:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002a8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a92:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002a96:	0c2a      	lsrs	r2, r5, #16
 8002a98:	0412      	lsls	r2, r2, #16
 8002a9a:	ea23 0302 	bic.w	r3, r3, r2
 8002a9e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8002aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002aa6:	6823      	ldr	r3, [r4, #0]
 8002aa8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002aac:	d00c      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002aae:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002ab0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ab4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002ab8:	0c2a      	lsrs	r2, r5, #16
 8002aba:	0412      	lsls	r2, r2, #16
 8002abc:	ea23 0302 	bic.w	r3, r3, r2
 8002ac0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8002ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002ac8:	6823      	ldr	r3, [r4, #0]
 8002aca:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002ace:	d00c      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002ad0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8002ad2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ad6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002ada:	0c2a      	lsrs	r2, r5, #16
 8002adc:	0412      	lsls	r2, r2, #16
 8002ade:	ea23 0302 	bic.w	r3, r3, r2
 8002ae2:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8002ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002aea:	6823      	ldr	r3, [r4, #0]
 8002aec:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002af0:	d151      	bne.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x17a>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002af2:	6823      	ldr	r3, [r4, #0]
 8002af4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002af8:	d15e      	bne.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002afa:	6823      	ldr	r3, [r4, #0]
 8002afc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002b00:	d16b      	bne.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x1be>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002b02:	6823      	ldr	r3, [r4, #0]
 8002b04:	f013 0f10 	tst.w	r3, #16
 8002b08:	d00d      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002b0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b0e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002b12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b16:	68e1      	ldr	r1, [r4, #12]
 8002b18:	430b      	orrs	r3, r1
 8002b1a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002b1e:	68e3      	ldr	r3, [r4, #12]
 8002b20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b24:	d06a      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b26:	6823      	ldr	r3, [r4, #0]
 8002b28:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002b2c:	d00f      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x132>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002b2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b32:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002b36:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002b3a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002b3c:	430b      	orrs	r3, r1
 8002b3e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b42:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b44:	b91b      	cbnz	r3, 8002b4e <HAL_RCCEx_PeriphCLKConfig+0x132>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002b46:	68d3      	ldr	r3, [r2, #12]
 8002b48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b4c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b4e:	6823      	ldr	r3, [r4, #0]
 8002b50:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002b54:	d00d      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x156>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002b56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b5a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002b5e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002b62:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002b64:	430b      	orrs	r3, r1
 8002b66:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002b6a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b70:	d049      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 8002b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_PWR_EnableBkUpAccess();
 8002b74:	f7ff f9cc 	bl	8001f10 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 8002b78:	f7fe fefc 	bl	8001974 <HAL_GetTick>
 8002b7c:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002b7e:	4e44      	ldr	r6, [pc, #272]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8002b80:	6833      	ldr	r3, [r6, #0]
 8002b82:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002b86:	d14f      	bne.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x20c>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b88:	f7fe fef4 	bl	8001974 <HAL_GetTick>
 8002b8c:	1b40      	subs	r0, r0, r5
 8002b8e:	2802      	cmp	r0, #2
 8002b90:	d9f6      	bls.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x164>
        ret = HAL_TIMEOUT;
 8002b92:	2003      	movs	r0, #3
 8002b94:	e74a      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x10>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b96:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002b98:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002b9c:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 8002ba0:	0919      	lsrs	r1, r3, #4
 8002ba2:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8002ba6:	ea22 0201 	bic.w	r2, r2, r1
 8002baa:	011b      	lsls	r3, r3, #4
 8002bac:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
}
 8002bb6:	e79c      	b.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bb8:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002bba:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002bbe:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 8002bc2:	0919      	lsrs	r1, r3, #4
 8002bc4:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8002bc8:	ea22 0201 	bic.w	r2, r2, r1
 8002bcc:	011b      	lsls	r3, r3, #4
 8002bce:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
}
 8002bd8:	e78f      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bda:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002bdc:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002be0:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 8002be4:	0919      	lsrs	r1, r3, #4
 8002be6:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8002bea:	ea22 0201 	bic.w	r2, r2, r1
 8002bee:	011b      	lsls	r3, r3, #4
 8002bf0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
}
 8002bfa:	e782      	b.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002bfc:	68d3      	ldr	r3, [r2, #12]
 8002bfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c02:	60d3      	str	r3, [r2, #12]
 8002c04:	e78f      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x10a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c06:	68d3      	ldr	r3, [r2, #12]
 8002c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c0c:	60d3      	str	r3, [r2, #12]
  return status;
 8002c0e:	e7b0      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x156>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002c10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c14:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002c18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c1e:	430b      	orrs	r3, r1
 8002c20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002c24:	2000      	movs	r0, #0
}
 8002c26:	e701      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c30:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002c34:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d0ea      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c3e:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8002c42:	f421 7040 	bic.w	r0, r1, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002c46:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002c4a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002c4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002c52:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002c56:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8002c5e:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002c62:	f011 0f02 	tst.w	r1, #2
 8002c66:	d0d3      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
        tickstart = HAL_GetTick();
 8002c68:	f7fe fe84 	bl	8001974 <HAL_GetTick>
 8002c6c:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002c6e:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c72:	f241 3788 	movw	r7, #5000	; 0x1388
 8002c76:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8002c7a:	f013 0f02 	tst.w	r3, #2
 8002c7e:	d1c7      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
 8002c80:	f7fe fe78 	bl	8001974 <HAL_GetTick>
 8002c84:	1b40      	subs	r0, r0, r5
 8002c86:	42b8      	cmp	r0, r7
 8002c88:	d9f5      	bls.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            ret = HAL_TIMEOUT;
 8002c8a:	2003      	movs	r0, #3
 8002c8c:	e6ce      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x10>
 8002c8e:	bf00      	nop
 8002c90:	58000400 	.word	0x58000400

08002c94 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002c94:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8002c96:	4a0b      	ldr	r2, [pc, #44]	; (8002cc4 <HAL_RTC_WaitForSynchro+0x30>)
 8002c98:	68d3      	ldr	r3, [r2, #12]
 8002c9a:	f023 0320 	bic.w	r3, r3, #32
 8002c9e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8002ca0:	f7fe fe68 	bl	8001974 <HAL_GetTick>
 8002ca4:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8002ca6:	4d07      	ldr	r5, [pc, #28]	; (8002cc4 <HAL_RTC_WaitForSynchro+0x30>)
 8002ca8:	68eb      	ldr	r3, [r5, #12]
 8002caa:	f013 0f20 	tst.w	r3, #32
 8002cae:	d107      	bne.n	8002cc0 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002cb0:	f7fe fe60 	bl	8001974 <HAL_GetTick>
 8002cb4:	1b00      	subs	r0, r0, r4
 8002cb6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002cba:	d9f5      	bls.n	8002ca8 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8002cbc:	2003      	movs	r0, #3
 8002cbe:	e000      	b.n	8002cc2 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002cc0:	2000      	movs	r0, #0
}
 8002cc2:	bd38      	pop	{r3, r4, r5, pc}
 8002cc4:	40002800 	.word	0x40002800

08002cc8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8002ccc:	4b13      	ldr	r3, [pc, #76]	; (8002d1c <RTC_EnterInitMode+0x54>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002cd4:	d003      	beq.n	8002cde <RTC_EnterInitMode+0x16>
  HAL_StatusTypeDef status = HAL_OK;
 8002cd6:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 8002cd8:	4620      	mov	r0, r4
 8002cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cde:	4607      	mov	r7, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002ce0:	4a0e      	ldr	r2, [pc, #56]	; (8002d1c <RTC_EnterInitMode+0x54>)
 8002ce2:	68d3      	ldr	r3, [r2, #12]
 8002ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ce8:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8002cea:	f7fe fe43 	bl	8001974 <HAL_GetTick>
 8002cee:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 8002cf0:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002cf2:	4e0a      	ldr	r6, [pc, #40]	; (8002d1c <RTC_EnterInitMode+0x54>)
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002cf4:	f04f 0803 	mov.w	r8, #3
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002cf8:	e008      	b.n	8002d0c <RTC_EnterInitMode+0x44>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002cfa:	f7fe fe3b 	bl	8001974 <HAL_GetTick>
 8002cfe:	1b43      	subs	r3, r0, r5
 8002d00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d04:	bf84      	itt	hi
 8002d06:	f887 802d 	strbhi.w	r8, [r7, #45]	; 0x2d
        status = HAL_TIMEOUT;
 8002d0a:	4644      	movhi	r4, r8
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002d0c:	68f3      	ldr	r3, [r6, #12]
 8002d0e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002d12:	d1e1      	bne.n	8002cd8 <RTC_EnterInitMode+0x10>
 8002d14:	2c03      	cmp	r4, #3
 8002d16:	d1f0      	bne.n	8002cfa <RTC_EnterInitMode+0x32>
 8002d18:	e7de      	b.n	8002cd8 <RTC_EnterInitMode+0x10>
 8002d1a:	bf00      	nop
 8002d1c:	40002800 	.word	0x40002800

08002d20 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002d20:	b510      	push	{r4, lr}
 8002d22:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002d24:	4b10      	ldr	r3, [pc, #64]	; (8002d68 <RTC_ExitInitMode+0x48>)
 8002d26:	68da      	ldr	r2, [r3, #12]
 8002d28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d2c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	f013 0f20 	tst.w	r3, #32
 8002d34:	d106      	bne.n	8002d44 <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d36:	f7ff ffad 	bl	8002c94 <HAL_RTC_WaitForSynchro>
 8002d3a:	b198      	cbz	r0, 8002d64 <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d3c:	2003      	movs	r0, #3
 8002d3e:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8002d42:	e00f      	b.n	8002d64 <RTC_ExitInitMode+0x44>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002d44:	4a08      	ldr	r2, [pc, #32]	; (8002d68 <RTC_ExitInitMode+0x48>)
 8002d46:	6993      	ldr	r3, [r2, #24]
 8002d48:	f023 0320 	bic.w	r3, r3, #32
 8002d4c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d4e:	f7ff ffa1 	bl	8002c94 <HAL_RTC_WaitForSynchro>
 8002d52:	b110      	cbz	r0, 8002d5a <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d54:	2003      	movs	r0, #3
 8002d56:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002d5a:	4a03      	ldr	r2, [pc, #12]	; (8002d68 <RTC_ExitInitMode+0x48>)
 8002d5c:	6993      	ldr	r3, [r2, #24]
 8002d5e:	f043 0320 	orr.w	r3, r3, #32
 8002d62:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 8002d64:	bd10      	pop	{r4, pc}
 8002d66:	bf00      	nop
 8002d68:	40002800 	.word	0x40002800

08002d6c <HAL_RTC_Init>:
  if (hrtc != NULL)
 8002d6c:	2800      	cmp	r0, #0
 8002d6e:	d052      	beq.n	8002e16 <HAL_RTC_Init+0xaa>
{
 8002d70:	b510      	push	{r4, lr}
 8002d72:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002d74:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8002d78:	b163      	cbz	r3, 8002d94 <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002d80:	4b26      	ldr	r3, [pc, #152]	; (8002e1c <HAL_RTC_Init+0xb0>)
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f013 0f10 	tst.w	r3, #16
 8002d88:	d009      	beq.n	8002d9e <HAL_RTC_Init+0x32>
      hrtc->State = HAL_RTC_STATE_READY;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8002d90:	2000      	movs	r0, #0
}
 8002d92:	bd10      	pop	{r4, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8002d94:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 8002d98:	f7fd fdc0 	bl	800091c <HAL_RTC_MspInit>
 8002d9c:	e7ed      	b.n	8002d7a <HAL_RTC_Init+0xe>
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d9e:	4b1f      	ldr	r3, [pc, #124]	; (8002e1c <HAL_RTC_Init+0xb0>)
 8002da0:	22ca      	movs	r2, #202	; 0xca
 8002da2:	625a      	str	r2, [r3, #36]	; 0x24
 8002da4:	2253      	movs	r2, #83	; 0x53
 8002da6:	625a      	str	r2, [r3, #36]	; 0x24
      status = RTC_EnterInitMode(hrtc);
 8002da8:	4620      	mov	r0, r4
 8002daa:	f7ff ff8d 	bl	8002cc8 <RTC_EnterInitMode>
      if (status == HAL_OK)
 8002dae:	b118      	cbz	r0, 8002db8 <HAL_RTC_Init+0x4c>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002db0:	4b1a      	ldr	r3, [pc, #104]	; (8002e1c <HAL_RTC_Init+0xb0>)
 8002db2:	22ff      	movs	r2, #255	; 0xff
 8002db4:	625a      	str	r2, [r3, #36]	; 0x24
  return status;
 8002db6:	e7ec      	b.n	8002d92 <HAL_RTC_Init+0x26>
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8002db8:	4b18      	ldr	r3, [pc, #96]	; (8002e1c <HAL_RTC_Init+0xb0>)
 8002dba:	699a      	ldr	r2, [r3, #24]
 8002dbc:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 8002dc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dc4:	619a      	str	r2, [r3, #24]
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8002dc6:	6999      	ldr	r1, [r3, #24]
 8002dc8:	6862      	ldr	r2, [r4, #4]
 8002dca:	6920      	ldr	r0, [r4, #16]
 8002dcc:	4302      	orrs	r2, r0
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	69a1      	ldr	r1, [r4, #24]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	619a      	str	r2, [r3, #24]
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8002dd6:	68a1      	ldr	r1, [r4, #8]
 8002dd8:	68e2      	ldr	r2, [r4, #12]
 8002dda:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002dde:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8002de0:	68d9      	ldr	r1, [r3, #12]
 8002de2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002de4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002de6:	4302      	orrs	r2, r0
 8002de8:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
 8002dec:	430a      	orrs	r2, r1
 8002dee:	60da      	str	r2, [r3, #12]
        status = RTC_ExitInitMode(hrtc);
 8002df0:	4620      	mov	r0, r4
 8002df2:	f7ff ff95 	bl	8002d20 <RTC_ExitInitMode>
        if (status == HAL_OK)
 8002df6:	2800      	cmp	r0, #0
 8002df8:	d1da      	bne.n	8002db0 <HAL_RTC_Init+0x44>
          MODIFY_REG(RTC->CR, \
 8002dfa:	4a08      	ldr	r2, [pc, #32]	; (8002e1c <HAL_RTC_Init+0xb0>)
 8002dfc:	6991      	ldr	r1, [r2, #24]
 8002dfe:	6a23      	ldr	r3, [r4, #32]
 8002e00:	69e0      	ldr	r0, [r4, #28]
 8002e02:	4303      	orrs	r3, r0
 8002e04:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8002e08:	430b      	orrs	r3, r1
 8002e0a:	6961      	ldr	r1, [r4, #20]
 8002e0c:	430b      	orrs	r3, r1
 8002e0e:	6193      	str	r3, [r2, #24]
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e10:	23ff      	movs	r3, #255	; 0xff
 8002e12:	6253      	str	r3, [r2, #36]	; 0x24
    if (status == HAL_OK)
 8002e14:	e7b9      	b.n	8002d8a <HAL_RTC_Init+0x1e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8002e16:	2001      	movs	r0, #1
}
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	40002800 	.word	0x40002800

08002e20 <RTC_ByteToBcd2>:
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 8002e20:	2809      	cmp	r0, #9
 8002e22:	d909      	bls.n	8002e38 <RTC_ByteToBcd2+0x18>
  uint32_t bcdhigh = 0U;
 8002e24:	2300      	movs	r3, #0
  {
    bcdhigh++;
 8002e26:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 8002e28:	380a      	subs	r0, #10
 8002e2a:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 8002e2c:	2809      	cmp	r0, #9
 8002e2e:	d8fa      	bhi.n	8002e26 <RTC_ByteToBcd2+0x6>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8002e30:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8002e34:	b2c0      	uxtb	r0, r0
 8002e36:	4770      	bx	lr
  uint32_t bcdhigh = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	e7f9      	b.n	8002e30 <RTC_ByteToBcd2+0x10>

08002e3c <HAL_RTC_SetTime>:
{
 8002e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8002e3e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d063      	beq.n	8002f0e <HAL_RTC_SetTime+0xd2>
 8002e46:	4604      	mov	r4, r0
 8002e48:	460d      	mov	r5, r1
 8002e4a:	4616      	mov	r6, r2
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e52:	2302      	movs	r3, #2
 8002e54:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e58:	4b2e      	ldr	r3, [pc, #184]	; (8002f14 <HAL_RTC_SetTime+0xd8>)
 8002e5a:	22ca      	movs	r2, #202	; 0xca
 8002e5c:	625a      	str	r2, [r3, #36]	; 0x24
 8002e5e:	2253      	movs	r2, #83	; 0x53
 8002e60:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8002e62:	f7ff ff31 	bl	8002cc8 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8002e66:	2800      	cmp	r0, #0
 8002e68:	d131      	bne.n	8002ece <HAL_RTC_SetTime+0x92>
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8002e6a:	4b2a      	ldr	r3, [pc, #168]	; (8002f14 <HAL_RTC_SetTime+0xd8>)
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e76:	d02a      	beq.n	8002ece <HAL_RTC_SetTime+0x92>
      if (Format == RTC_FORMAT_BIN)
 8002e78:	2e00      	cmp	r6, #0
 8002e7a:	d136      	bne.n	8002eea <HAL_RTC_SetTime+0xae>
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8002e7c:	4b25      	ldr	r3, [pc, #148]	; (8002f14 <HAL_RTC_SetTime+0xd8>)
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	f013 0f40 	tst.w	r3, #64	; 0x40
          sTime->TimeFormat = 0x00U;
 8002e84:	bf04      	itt	eq
 8002e86:	2300      	moveq	r3, #0
 8002e88:	70eb      	strbeq	r3, [r5, #3]
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002e8a:	7828      	ldrb	r0, [r5, #0]
 8002e8c:	f7ff ffc8 	bl	8002e20 <RTC_ByteToBcd2>
 8002e90:	4607      	mov	r7, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002e92:	7868      	ldrb	r0, [r5, #1]
 8002e94:	f7ff ffc4 	bl	8002e20 <RTC_ByteToBcd2>
 8002e98:	4606      	mov	r6, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002e9a:	78a8      	ldrb	r0, [r5, #2]
 8002e9c:	f7ff ffc0 	bl	8002e20 <RTC_ByteToBcd2>
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002ea0:	78eb      	ldrb	r3, [r5, #3]
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002ea2:	ea40 5383 	orr.w	r3, r0, r3, lsl #22
 8002ea6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8002eaa:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8002eae:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002eb2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002eb6:	4a17      	ldr	r2, [pc, #92]	; (8002f14 <HAL_RTC_SetTime+0xd8>)
 8002eb8:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8002eba:	6993      	ldr	r3, [r2, #24]
 8002ebc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ec0:	6193      	str	r3, [r2, #24]
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8002ec2:	6991      	ldr	r1, [r2, #24]
 8002ec4:	68eb      	ldr	r3, [r5, #12]
 8002ec6:	6928      	ldr	r0, [r5, #16]
 8002ec8:	4303      	orrs	r3, r0
 8002eca:	430b      	orrs	r3, r1
 8002ecc:	6193      	str	r3, [r2, #24]
  status = RTC_ExitInitMode(hrtc);
 8002ece:	4620      	mov	r0, r4
 8002ed0:	f7ff ff26 	bl	8002d20 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ed4:	4a0f      	ldr	r2, [pc, #60]	; (8002f14 <HAL_RTC_SetTime+0xd8>)
 8002ed6:	21ff      	movs	r1, #255	; 0xff
 8002ed8:	6251      	str	r1, [r2, #36]	; 0x24
  if (status == HAL_OK)
 8002eda:	b910      	cbnz	r0, 8002ee2 <HAL_RTC_SetTime+0xa6>
    hrtc->State = HAL_RTC_STATE_READY;
 8002edc:	2301      	movs	r3, #1
 8002ede:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8002ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8002eea:	4b0a      	ldr	r3, [pc, #40]	; (8002f14 <HAL_RTC_SetTime+0xd8>)
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	f013 0f40 	tst.w	r3, #64	; 0x40
          sTime->TimeFormat = 0x00U;
 8002ef2:	bf04      	itt	eq
 8002ef4:	2300      	moveq	r3, #0
 8002ef6:	70eb      	strbeq	r3, [r5, #3]
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002ef8:	782a      	ldrb	r2, [r5, #0]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002efa:	786b      	ldrb	r3, [r5, #1]
 8002efc:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002efe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002f02:	78aa      	ldrb	r2, [r5, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f04:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002f06:	78ea      	ldrb	r2, [r5, #3]
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002f08:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 8002f0c:	e7cf      	b.n	8002eae <HAL_RTC_SetTime+0x72>
  __HAL_LOCK(hrtc);
 8002f0e:	2002      	movs	r0, #2
 8002f10:	e7ea      	b.n	8002ee8 <HAL_RTC_SetTime+0xac>
 8002f12:	bf00      	nop
 8002f14:	40002800 	.word	0x40002800

08002f18 <HAL_RTC_SetDate>:
{
 8002f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8002f1a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d033      	beq.n	8002f8a <HAL_RTC_SetDate+0x72>
 8002f22:	4605      	mov	r5, r0
 8002f24:	460c      	mov	r4, r1
 8002f26:	2301      	movs	r3, #1
 8002f28:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002f32:	bb62      	cbnz	r2, 8002f8e <HAL_RTC_SetDate+0x76>
 8002f34:	784b      	ldrb	r3, [r1, #1]
 8002f36:	f013 0f10 	tst.w	r3, #16
 8002f3a:	d003      	beq.n	8002f44 <HAL_RTC_SetDate+0x2c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002f3c:	f023 0310 	bic.w	r3, r3, #16
 8002f40:	330a      	adds	r3, #10
 8002f42:	704b      	strb	r3, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002f44:	78e0      	ldrb	r0, [r4, #3]
 8002f46:	f7ff ff6b 	bl	8002e20 <RTC_ByteToBcd2>
 8002f4a:	4607      	mov	r7, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002f4c:	7860      	ldrb	r0, [r4, #1]
 8002f4e:	f7ff ff67 	bl	8002e20 <RTC_ByteToBcd2>
 8002f52:	4606      	mov	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8002f54:	78a0      	ldrb	r0, [r4, #2]
 8002f56:	f7ff ff63 	bl	8002e20 <RTC_ByteToBcd2>
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002f5a:	7823      	ldrb	r3, [r4, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002f5c:	ea40 3343 	orr.w	r3, r0, r3, lsl #13
 8002f60:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8002f64:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
 8002f68:	e01b      	b.n	8002fa2 <HAL_RTC_SetDate+0x8a>
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8002f6a:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
 8002f6e:	f026 06c0 	bic.w	r6, r6, #192	; 0xc0
 8002f72:	4c14      	ldr	r4, [pc, #80]	; (8002fc4 <HAL_RTC_SetDate+0xac>)
 8002f74:	6066      	str	r6, [r4, #4]
    status = RTC_ExitInitMode(hrtc);
 8002f76:	4628      	mov	r0, r5
 8002f78:	f7ff fed2 	bl	8002d20 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f7c:	22ff      	movs	r2, #255	; 0xff
 8002f7e:	6262      	str	r2, [r4, #36]	; 0x24
  if (status == HAL_OK)
 8002f80:	b9e0      	cbnz	r0, 8002fbc <HAL_RTC_SetDate+0xa4>
    hrtc->State = HAL_RTC_STATE_READY ;
 8002f82:	2301      	movs	r3, #1
 8002f84:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
 8002f88:	e018      	b.n	8002fbc <HAL_RTC_SetDate+0xa4>
  __HAL_LOCK(hrtc);
 8002f8a:	2002      	movs	r0, #2
 8002f8c:	e019      	b.n	8002fc2 <HAL_RTC_SetDate+0xaa>
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002f8e:	78ca      	ldrb	r2, [r1, #3]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002f90:	784b      	ldrb	r3, [r1, #1]
 8002f92:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002f94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8002f98:	788a      	ldrb	r2, [r1, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002f9a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002f9c:	780a      	ldrb	r2, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002f9e:	ea43 3642 	orr.w	r6, r3, r2, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002fa2:	4b08      	ldr	r3, [pc, #32]	; (8002fc4 <HAL_RTC_SetDate+0xac>)
 8002fa4:	22ca      	movs	r2, #202	; 0xca
 8002fa6:	625a      	str	r2, [r3, #36]	; 0x24
 8002fa8:	2253      	movs	r2, #83	; 0x53
 8002faa:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8002fac:	4628      	mov	r0, r5
 8002fae:	f7ff fe8b 	bl	8002cc8 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8002fb2:	2800      	cmp	r0, #0
 8002fb4:	d0d9      	beq.n	8002f6a <HAL_RTC_SetDate+0x52>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fb6:	4b03      	ldr	r3, [pc, #12]	; (8002fc4 <HAL_RTC_SetDate+0xac>)
 8002fb8:	22ff      	movs	r2, #255	; 0xff
 8002fba:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
}
 8002fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fc4:	40002800 	.word	0x40002800

08002fc8 <HAL_RTC_SetAlarm>:
  __HAL_LOCK(hrtc);
 8002fc8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	f000 808e 	beq.w	80030ee <HAL_RTC_SetAlarm+0x126>
{
 8002fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fd6:	4605      	mov	r5, r0
 8002fd8:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 8002fda:	2301      	movs	r3, #1
 8002fdc:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8002fe6:	4b58      	ldr	r3, [pc, #352]	; (8003148 <HAL_RTC_SetAlarm+0x180>)
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 8002fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ff2:	f000 8094 	beq.w	800311e <HAL_RTC_SetAlarm+0x156>
    if (Format == RTC_FORMAT_BIN)
 8002ff6:	2a00      	cmp	r2, #0
 8002ff8:	d14d      	bne.n	8003096 <HAL_RTC_SetAlarm+0xce>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8002ffa:	4b53      	ldr	r3, [pc, #332]	; (8003148 <HAL_RTC_SetAlarm+0x180>)
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	f013 0f40 	tst.w	r3, #64	; 0x40
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003002:	bf04      	itt	eq
 8003004:	2300      	moveq	r3, #0
 8003006:	70cb      	strbeq	r3, [r1, #3]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003008:	7808      	ldrb	r0, [r1, #0]
 800300a:	f7ff ff09 	bl	8002e20 <RTC_ByteToBcd2>
 800300e:	4607      	mov	r7, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003010:	7860      	ldrb	r0, [r4, #1]
 8003012:	f7ff ff05 	bl	8002e20 <RTC_ByteToBcd2>
 8003016:	4606      	mov	r6, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003018:	78a0      	ldrb	r0, [r4, #2]
 800301a:	f7ff ff01 	bl	8002e20 <RTC_ByteToBcd2>
 800301e:	4680      	mov	r8, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003020:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8003024:	f7ff fefc 	bl	8002e20 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003028:	6963      	ldr	r3, [r4, #20]
 800302a:	6a22      	ldr	r2, [r4, #32]
 800302c:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800302e:	78e2      	ldrb	r2, [r4, #3]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003030:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 8003034:	ea43 0308 	orr.w	r3, r3, r8
 8003038:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800303c:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8003040:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003044:	4b40      	ldr	r3, [pc, #256]	; (8003148 <HAL_RTC_SetAlarm+0x180>)
 8003046:	22ca      	movs	r2, #202	; 0xca
 8003048:	625a      	str	r2, [r3, #36]	; 0x24
 800304a:	2253      	movs	r2, #83	; 0x53
 800304c:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 800304e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003050:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003054:	d04d      	beq.n	80030f2 <HAL_RTC_SetAlarm+0x12a>
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRBE | RTC_CR_ALRBIE));
 8003056:	4b3c      	ldr	r3, [pc, #240]	; (8003148 <HAL_RTC_SetAlarm+0x180>)
 8003058:	699a      	ldr	r2, [r3, #24]
 800305a:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 800305e:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8003060:	2202      	movs	r2, #2
 8003062:	65da      	str	r2, [r3, #92]	; 0x5c
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8003064:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8003066:	69a2      	ldr	r2, [r4, #24]
 8003068:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800306a:	6862      	ldr	r2, [r4, #4]
 800306c:	4b36      	ldr	r3, [pc, #216]	; (8003148 <HAL_RTC_SetAlarm+0x180>)
 800306e:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8003070:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8003072:	f042 0202 	orr.w	r2, r2, #2
 8003076:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE);
 8003078:	699a      	ldr	r2, [r3, #24]
 800307a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800307e:	619a      	str	r2, [r3, #24]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003080:	4b31      	ldr	r3, [pc, #196]	; (8003148 <HAL_RTC_SetAlarm+0x180>)
 8003082:	22ff      	movs	r2, #255	; 0xff
 8003084:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8003086:	2301      	movs	r3, #1
 8003088:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 800308c:	2000      	movs	r0, #0
 800308e:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 8003092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8003096:	6948      	ldr	r0, [r1, #20]
 8003098:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 800309c:	d009      	beq.n	80030b2 <HAL_RTC_SetAlarm+0xea>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800309e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80030a2:	d006      	beq.n	80030b2 <HAL_RTC_SetAlarm+0xea>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80030a4:	4a28      	ldr	r2, [pc, #160]	; (8003148 <HAL_RTC_SetAlarm+0x180>)
 80030a6:	6992      	ldr	r2, [r2, #24]
 80030a8:	f012 0f40 	tst.w	r2, #64	; 0x40
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80030ac:	bf04      	itt	eq
 80030ae:	2200      	moveq	r2, #0
 80030b0:	70ca      	strbeq	r2, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80030b2:	6a22      	ldr	r2, [r4, #32]
 80030b4:	4310      	orrs	r0, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80030b6:	78a3      	ldrb	r3, [r4, #2]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80030b8:	4318      	orrs	r0, r3
 80030ba:	7823      	ldrb	r3, [r4, #0]
 80030bc:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80030c0:	7863      	ldrb	r3, [r4, #1]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80030c2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80030c6:	78e3      	ldrb	r3, [r4, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80030c8:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80030cc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80030d0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80030d4:	e7b6      	b.n	8003044 <HAL_RTC_SetAlarm+0x7c>
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRAE | RTC_CR_ALRAIE));
 80030d6:	4b1c      	ldr	r3, [pc, #112]	; (8003148 <HAL_RTC_SetAlarm+0x180>)
 80030d8:	699a      	ldr	r2, [r3, #24]
 80030da:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80030de:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80030e0:	2201      	movs	r2, #1
 80030e2:	65da      	str	r2, [r3, #92]	; 0x5c
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80030e4:	69a2      	ldr	r2, [r4, #24]
 80030e6:	69e1      	ldr	r1, [r4, #28]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	645a      	str	r2, [r3, #68]	; 0x44
 80030ec:	e00b      	b.n	8003106 <HAL_RTC_SetAlarm+0x13e>
  __HAL_LOCK(hrtc);
 80030ee:	2002      	movs	r0, #2
}
 80030f0:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRAE | RTC_CR_ALRAIE));
 80030f2:	4b15      	ldr	r3, [pc, #84]	; (8003148 <HAL_RTC_SetAlarm+0x180>)
 80030f4:	699a      	ldr	r2, [r3, #24]
 80030f6:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80030fa:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80030fc:	2201      	movs	r2, #1
 80030fe:	65da      	str	r2, [r3, #92]	; 0x5c
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8003100:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8003102:	69a2      	ldr	r2, [r4, #24]
 8003104:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8003106:	6862      	ldr	r2, [r4, #4]
 8003108:	4b0f      	ldr	r3, [pc, #60]	; (8003148 <HAL_RTC_SetAlarm+0x180>)
 800310a:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800310c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800310e:	f042 0201 	orr.w	r2, r2, #1
 8003112:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE);
 8003114:	699a      	ldr	r2, [r3, #24]
 8003116:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800311a:	619a      	str	r2, [r3, #24]
 800311c:	e7b0      	b.n	8003080 <HAL_RTC_SetAlarm+0xb8>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800311e:	4b0a      	ldr	r3, [pc, #40]	; (8003148 <HAL_RTC_SetAlarm+0x180>)
 8003120:	22ca      	movs	r2, #202	; 0xca
 8003122:	625a      	str	r2, [r3, #36]	; 0x24
 8003124:	2253      	movs	r2, #83	; 0x53
 8003126:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003128:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800312a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800312e:	d0d2      	beq.n	80030d6 <HAL_RTC_SetAlarm+0x10e>
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRBE | RTC_CR_ALRBIE));
 8003130:	4b05      	ldr	r3, [pc, #20]	; (8003148 <HAL_RTC_SetAlarm+0x180>)
 8003132:	699a      	ldr	r2, [r3, #24]
 8003134:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8003138:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800313a:	2202      	movs	r2, #2
 800313c:	65da      	str	r2, [r3, #92]	; 0x5c
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800313e:	69a2      	ldr	r2, [r4, #24]
 8003140:	69e1      	ldr	r1, [r4, #28]
 8003142:	430a      	orrs	r2, r1
 8003144:	64da      	str	r2, [r3, #76]	; 0x4c
 8003146:	e790      	b.n	800306a <HAL_RTC_SetAlarm+0xa2>
 8003148:	40002800 	.word	0x40002800

0800314c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800314c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003150:	b082      	sub	sp, #8
 8003152:	4681      	mov	r9, r0
 8003154:	460f      	mov	r7, r1
 8003156:	4616      	mov	r6, r2
 8003158:	461d      	mov	r5, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800315a:	f7fe fc0b 	bl	8001974 <HAL_GetTick>
 800315e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003160:	442b      	add	r3, r5
 8003162:	eba3 0800 	sub.w	r8, r3, r0
  tmp_tickstart = HAL_GetTick();
 8003166:	f7fe fc05 	bl	8001974 <HAL_GetTick>
 800316a:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800316c:	4b2c      	ldr	r3, [pc, #176]	; (8003220 <SPI_WaitFlagStateUntilTimeout+0xd4>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8003174:	fb08 f303 	mul.w	r3, r8, r3
 8003178:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800317a:	f8d9 2000 	ldr.w	r2, [r9]
 800317e:	6894      	ldr	r4, [r2, #8]
 8003180:	ea37 0404 	bics.w	r4, r7, r4
 8003184:	bf0c      	ite	eq
 8003186:	2301      	moveq	r3, #1
 8003188:	2300      	movne	r3, #0
 800318a:	42b3      	cmp	r3, r6
 800318c:	d044      	beq.n	8003218 <SPI_WaitFlagStateUntilTimeout+0xcc>
  {
    if (Timeout != HAL_MAX_DELAY)
 800318e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003192:	d0f4      	beq.n	800317e <SPI_WaitFlagStateUntilTimeout+0x32>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003194:	f7fe fbee 	bl	8001974 <HAL_GetTick>
 8003198:	eba0 000a 	sub.w	r0, r0, sl
 800319c:	4540      	cmp	r0, r8
 800319e:	d207      	bcs.n	80031b0 <SPI_WaitFlagStateUntilTimeout+0x64>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80031a0:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	bf08      	it	eq
 80031a6:	4698      	moveq	r8, r3
      }
      count--;
 80031a8:	9b01      	ldr	r3, [sp, #4]
 80031aa:	3b01      	subs	r3, #1
 80031ac:	9301      	str	r3, [sp, #4]
 80031ae:	e7e4      	b.n	800317a <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031b0:	f8d9 2000 	ldr.w	r2, [r9]
 80031b4:	6853      	ldr	r3, [r2, #4]
 80031b6:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80031ba:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031bc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80031c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031c4:	d00c      	beq.n	80031e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031c6:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 80031ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ce:	d016      	beq.n	80031fe <SPI_WaitFlagStateUntilTimeout+0xb2>
        hspi->State = HAL_SPI_STATE_READY;
 80031d0:	2301      	movs	r3, #1
 80031d2:	f889 305d 	strb.w	r3, [r9, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80031d6:	2300      	movs	r3, #0
 80031d8:	f889 305c 	strb.w	r3, [r9, #92]	; 0x5c
        return HAL_TIMEOUT;
 80031dc:	2003      	movs	r0, #3
 80031de:	e01c      	b.n	800321a <SPI_WaitFlagStateUntilTimeout+0xce>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031e0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80031e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031e8:	d002      	beq.n	80031f0 <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ee:	d1ea      	bne.n	80031c6 <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 80031f0:	f8d9 2000 	ldr.w	r2, [r9]
 80031f4:	6813      	ldr	r3, [r2, #0]
 80031f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031fa:	6013      	str	r3, [r2, #0]
 80031fc:	e7e3      	b.n	80031c6 <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 80031fe:	f8d9 2000 	ldr.w	r2, [r9]
 8003202:	6813      	ldr	r3, [r2, #0]
 8003204:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003208:	6013      	str	r3, [r2, #0]
 800320a:	f8d9 2000 	ldr.w	r2, [r9]
 800320e:	6813      	ldr	r3, [r2, #0]
 8003210:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003214:	6013      	str	r3, [r2, #0]
 8003216:	e7db      	b.n	80031d0 <SPI_WaitFlagStateUntilTimeout+0x84>
    }
  }

  return HAL_OK;
 8003218:	2000      	movs	r0, #0
}
 800321a:	b002      	add	sp, #8
 800321c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003220:	20000080 	.word	0x20000080

08003224 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003228:	b082      	sub	sp, #8
 800322a:	4680      	mov	r8, r0
 800322c:	460c      	mov	r4, r1
 800322e:	4615      	mov	r5, r2
 8003230:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003232:	2300      	movs	r3, #0
 8003234:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003238:	f7fe fb9c 	bl	8001974 <HAL_GetTick>
 800323c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800323e:	4437      	add	r7, r6
 8003240:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 8003242:	f7fe fb97 	bl	8001974 <HAL_GetTick>
 8003246:	4681      	mov	r9, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003248:	f8d8 a000 	ldr.w	sl, [r8]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800324c:	4b33      	ldr	r3, [pc, #204]	; (800331c <SPI_WaitFifoStateUntilTimeout+0xf8>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003254:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003258:	0d1b      	lsrs	r3, r3, #20
 800325a:	fb07 f303 	mul.w	r3, r7, r3
 800325e:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8003260:	f8d8 2000 	ldr.w	r2, [r8]
 8003264:	e002      	b.n	800326c <SPI_WaitFifoStateUntilTimeout+0x48>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8003266:	f1b6 3fff 	cmp.w	r6, #4294967295
 800326a:	d111      	bne.n	8003290 <SPI_WaitFifoStateUntilTimeout+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 800326c:	6893      	ldr	r3, [r2, #8]
 800326e:	ea03 0c04 	and.w	ip, r3, r4
 8003272:	45ac      	cmp	ip, r5
 8003274:	d04e      	beq.n	8003314 <SPI_WaitFifoStateUntilTimeout+0xf0>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003276:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 800327a:	d1f4      	bne.n	8003266 <SPI_WaitFifoStateUntilTimeout+0x42>
 800327c:	2d00      	cmp	r5, #0
 800327e:	d1f2      	bne.n	8003266 <SPI_WaitFifoStateUntilTimeout+0x42>
      tmpreg8 = *ptmpreg8;
 8003280:	f89a 300c 	ldrb.w	r3, [sl, #12]
 8003284:	b2db      	uxtb	r3, r3
 8003286:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 800328a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800328e:	e7ea      	b.n	8003266 <SPI_WaitFifoStateUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003290:	f7fe fb70 	bl	8001974 <HAL_GetTick>
 8003294:	eba0 0009 	sub.w	r0, r0, r9
 8003298:	42b8      	cmp	r0, r7
 800329a:	d207      	bcs.n	80032ac <SPI_WaitFifoStateUntilTimeout+0x88>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800329c:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 800329e:	2b00      	cmp	r3, #0
 80032a0:	bf08      	it	eq
 80032a2:	461f      	moveq	r7, r3
      }
      count--;
 80032a4:	9b01      	ldr	r3, [sp, #4]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	9301      	str	r3, [sp, #4]
 80032aa:	e7d9      	b.n	8003260 <SPI_WaitFifoStateUntilTimeout+0x3c>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032ac:	f8d8 2000 	ldr.w	r2, [r8]
 80032b0:	6853      	ldr	r3, [r2, #4]
 80032b2:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80032b6:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80032bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032c0:	d00c      	beq.n	80032dc <SPI_WaitFifoStateUntilTimeout+0xb8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032c2:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 80032c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ca:	d016      	beq.n	80032fa <SPI_WaitFifoStateUntilTimeout+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 80032cc:	2301      	movs	r3, #1
 80032ce:	f888 305d 	strb.w	r3, [r8, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80032d2:	2300      	movs	r3, #0
 80032d4:	f888 305c 	strb.w	r3, [r8, #92]	; 0x5c
        return HAL_TIMEOUT;
 80032d8:	2003      	movs	r0, #3
 80032da:	e01c      	b.n	8003316 <SPI_WaitFifoStateUntilTimeout+0xf2>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032dc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80032e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032e4:	d002      	beq.n	80032ec <SPI_WaitFifoStateUntilTimeout+0xc8>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ea:	d1ea      	bne.n	80032c2 <SPI_WaitFifoStateUntilTimeout+0x9e>
          __HAL_SPI_DISABLE(hspi);
 80032ec:	f8d8 2000 	ldr.w	r2, [r8]
 80032f0:	6813      	ldr	r3, [r2, #0]
 80032f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032f6:	6013      	str	r3, [r2, #0]
 80032f8:	e7e3      	b.n	80032c2 <SPI_WaitFifoStateUntilTimeout+0x9e>
          SPI_RESET_CRC(hspi);
 80032fa:	f8d8 2000 	ldr.w	r2, [r8]
 80032fe:	6813      	ldr	r3, [r2, #0]
 8003300:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003304:	6013      	str	r3, [r2, #0]
 8003306:	f8d8 2000 	ldr.w	r2, [r8]
 800330a:	6813      	ldr	r3, [r2, #0]
 800330c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	e7db      	b.n	80032cc <SPI_WaitFifoStateUntilTimeout+0xa8>
    }
  }

  return HAL_OK;
 8003314:	2000      	movs	r0, #0
}
 8003316:	b002      	add	sp, #8
 8003318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800331c:	20000080 	.word	0x20000080

08003320 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003320:	b570      	push	{r4, r5, r6, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	4604      	mov	r4, r0
 8003326:	460d      	mov	r5, r1
 8003328:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800332a:	9200      	str	r2, [sp, #0]
 800332c:	460b      	mov	r3, r1
 800332e:	2200      	movs	r2, #0
 8003330:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003334:	f7ff ff76 	bl	8003224 <SPI_WaitFifoStateUntilTimeout>
 8003338:	b9b0      	cbnz	r0, 8003368 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800333a:	9600      	str	r6, [sp, #0]
 800333c:	462b      	mov	r3, r5
 800333e:	2200      	movs	r2, #0
 8003340:	2180      	movs	r1, #128	; 0x80
 8003342:	4620      	mov	r0, r4
 8003344:	f7ff ff02 	bl	800314c <SPI_WaitFlagStateUntilTimeout>
 8003348:	b9a8      	cbnz	r0, 8003376 <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800334a:	9600      	str	r6, [sp, #0]
 800334c:	462b      	mov	r3, r5
 800334e:	2200      	movs	r2, #0
 8003350:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003354:	4620      	mov	r0, r4
 8003356:	f7ff ff65 	bl	8003224 <SPI_WaitFifoStateUntilTimeout>
 800335a:	b150      	cbz	r0, 8003372 <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800335c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800335e:	f043 0320 	orr.w	r3, r3, #32
 8003362:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003364:	2003      	movs	r0, #3
 8003366:	e004      	b.n	8003372 <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003368:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800336a:	f043 0320 	orr.w	r3, r3, #32
 800336e:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003370:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8003372:	b002      	add	sp, #8
 8003374:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003376:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003378:	f043 0320 	orr.w	r3, r3, #32
 800337c:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800337e:	2003      	movs	r0, #3
 8003380:	e7f7      	b.n	8003372 <SPI_EndRxTxTransaction+0x52>

08003382 <SPI_EndRxTransaction>:
{
 8003382:	b570      	push	{r4, r5, r6, lr}
 8003384:	b082      	sub	sp, #8
 8003386:	4604      	mov	r4, r0
 8003388:	460d      	mov	r5, r1
 800338a:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800338c:	6843      	ldr	r3, [r0, #4]
 800338e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003392:	d00d      	beq.n	80033b0 <SPI_EndRxTransaction+0x2e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003394:	9600      	str	r6, [sp, #0]
 8003396:	462b      	mov	r3, r5
 8003398:	2200      	movs	r2, #0
 800339a:	2180      	movs	r1, #128	; 0x80
 800339c:	4620      	mov	r0, r4
 800339e:	f7ff fed5 	bl	800314c <SPI_WaitFlagStateUntilTimeout>
 80033a2:	b990      	cbnz	r0, 80033ca <SPI_EndRxTransaction+0x48>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033a4:	6863      	ldr	r3, [r4, #4]
 80033a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033aa:	d014      	beq.n	80033d6 <SPI_EndRxTransaction+0x54>
}
 80033ac:	b002      	add	sp, #8
 80033ae:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033b0:	6883      	ldr	r3, [r0, #8]
 80033b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033b6:	d002      	beq.n	80033be <SPI_EndRxTransaction+0x3c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033bc:	d1ea      	bne.n	8003394 <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 80033be:	6822      	ldr	r2, [r4, #0]
 80033c0:	6813      	ldr	r3, [r2, #0]
 80033c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	e7e4      	b.n	8003394 <SPI_EndRxTransaction+0x12>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033ca:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80033cc:	f043 0320 	orr.w	r3, r3, #32
 80033d0:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80033d2:	2003      	movs	r0, #3
 80033d4:	e7ea      	b.n	80033ac <SPI_EndRxTransaction+0x2a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033d6:	68a3      	ldr	r3, [r4, #8]
 80033d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033dc:	d002      	beq.n	80033e4 <SPI_EndRxTransaction+0x62>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033e2:	d1e3      	bne.n	80033ac <SPI_EndRxTransaction+0x2a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80033e4:	9600      	str	r6, [sp, #0]
 80033e6:	462b      	mov	r3, r5
 80033e8:	2200      	movs	r2, #0
 80033ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80033ee:	4620      	mov	r0, r4
 80033f0:	f7ff ff18 	bl	8003224 <SPI_WaitFifoStateUntilTimeout>
 80033f4:	2800      	cmp	r0, #0
 80033f6:	d0d9      	beq.n	80033ac <SPI_EndRxTransaction+0x2a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033f8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80033fa:	f043 0320 	orr.w	r3, r3, #32
 80033fe:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8003400:	2003      	movs	r0, #3
 8003402:	e7d3      	b.n	80033ac <SPI_EndRxTransaction+0x2a>

08003404 <HAL_SPI_Init>:
  if (hspi == NULL)
 8003404:	2800      	cmp	r0, #0
 8003406:	f000 808c 	beq.w	8003522 <HAL_SPI_Init+0x11e>
{
 800340a:	b510      	push	{r4, lr}
 800340c:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800340e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003410:	b933      	cbnz	r3, 8003420 <HAL_SPI_Init+0x1c>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003412:	6843      	ldr	r3, [r0, #4]
 8003414:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003418:	d005      	beq.n	8003426 <HAL_SPI_Init+0x22>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800341a:	2300      	movs	r3, #0
 800341c:	61c3      	str	r3, [r0, #28]
 800341e:	e002      	b.n	8003426 <HAL_SPI_Init+0x22>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003420:	2300      	movs	r3, #0
 8003422:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003424:	6143      	str	r3, [r0, #20]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003426:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800342a:	2b00      	cmp	r3, #0
 800342c:	d05b      	beq.n	80034e6 <HAL_SPI_Init+0xe2>
  hspi->State = HAL_SPI_STATE_BUSY;
 800342e:	2302      	movs	r3, #2
 8003430:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8003434:	6822      	ldr	r2, [r4, #0]
 8003436:	6813      	ldr	r3, [r2, #0]
 8003438:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800343c:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800343e:	68e3      	ldr	r3, [r4, #12]
 8003440:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003444:	bf8c      	ite	hi
 8003446:	2100      	movhi	r1, #0
 8003448:	2101      	movls	r1, #1
 800344a:	0309      	lsls	r1, r1, #12
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800344c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003450:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003454:	bf1c      	itt	ne
 8003456:	2300      	movne	r3, #0
 8003458:	62a3      	strne	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800345a:	6822      	ldr	r2, [r4, #0]
 800345c:	6863      	ldr	r3, [r4, #4]
 800345e:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8003462:	68a0      	ldr	r0, [r4, #8]
 8003464:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8003468:	4303      	orrs	r3, r0
 800346a:	6920      	ldr	r0, [r4, #16]
 800346c:	f000 0002 	and.w	r0, r0, #2
 8003470:	4303      	orrs	r3, r0
 8003472:	6960      	ldr	r0, [r4, #20]
 8003474:	f000 0001 	and.w	r0, r0, #1
 8003478:	4303      	orrs	r3, r0
 800347a:	69a0      	ldr	r0, [r4, #24]
 800347c:	f400 7000 	and.w	r0, r0, #512	; 0x200
 8003480:	4303      	orrs	r3, r0
 8003482:	69e0      	ldr	r0, [r4, #28]
 8003484:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8003488:	4303      	orrs	r3, r0
 800348a:	6a20      	ldr	r0, [r4, #32]
 800348c:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8003490:	4303      	orrs	r3, r0
 8003492:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003494:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8003498:	4303      	orrs	r3, r0
 800349a:	6013      	str	r3, [r2, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800349c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800349e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034a2:	d026      	beq.n	80034f2 <HAL_SPI_Init+0xee>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80034a4:	6822      	ldr	r2, [r4, #0]
 80034a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034a8:	f003 0310 	and.w	r3, r3, #16
 80034ac:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80034ae:	f000 0008 	and.w	r0, r0, #8
 80034b2:	4303      	orrs	r3, r0
 80034b4:	68e0      	ldr	r0, [r4, #12]
 80034b6:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
 80034ba:	4303      	orrs	r3, r0
 80034bc:	8b60      	ldrh	r0, [r4, #26]
 80034be:	f000 0004 	and.w	r0, r0, #4
 80034c2:	4303      	orrs	r3, r0
 80034c4:	430b      	orrs	r3, r1
 80034c6:	6053      	str	r3, [r2, #4]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80034ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034ce:	d024      	beq.n	800351a <HAL_SPI_Init+0x116>
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034d0:	6822      	ldr	r2, [r4, #0]
 80034d2:	69d3      	ldr	r3, [r2, #28]
 80034d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034d8:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034da:	2000      	movs	r0, #0
 80034dc:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80034de:	2301      	movs	r3, #1
 80034e0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 80034e4:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80034e6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80034ea:	4620      	mov	r0, r4
 80034ec:	f7fd fa46 	bl	800097c <HAL_SPI_MspInit>
 80034f0:	e79d      	b.n	800342e <HAL_SPI_Init+0x2a>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80034f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80034f4:	b973      	cbnz	r3, 8003514 <HAL_SPI_Init+0x110>
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034f6:	68e3      	ldr	r3, [r4, #12]
 80034f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034fc:	d907      	bls.n	800350e <HAL_SPI_Init+0x10a>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80034fe:	2302      	movs	r3, #2
 8003500:	6323      	str	r3, [r4, #48]	; 0x30
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8003502:	6822      	ldr	r2, [r4, #0]
 8003504:	6813      	ldr	r3, [r2, #0]
 8003506:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800350a:	6013      	str	r3, [r2, #0]
 800350c:	e7ca      	b.n	80034a4 <HAL_SPI_Init+0xa0>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800350e:	2301      	movs	r3, #1
 8003510:	6323      	str	r3, [r4, #48]	; 0x30
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8003512:	e7c7      	b.n	80034a4 <HAL_SPI_Init+0xa0>
 8003514:	2b02      	cmp	r3, #2
 8003516:	d1c5      	bne.n	80034a4 <HAL_SPI_Init+0xa0>
 8003518:	e7f3      	b.n	8003502 <HAL_SPI_Init+0xfe>
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 800351a:	6823      	ldr	r3, [r4, #0]
 800351c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800351e:	611a      	str	r2, [r3, #16]
 8003520:	e7d6      	b.n	80034d0 <HAL_SPI_Init+0xcc>
    return HAL_ERROR;
 8003522:	2001      	movs	r0, #1
}
 8003524:	4770      	bx	lr

08003526 <HAL_SPI_Transmit>:
{
 8003526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 800352e:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8003532:	2b01      	cmp	r3, #1
 8003534:	f000 8109 	beq.w	800374a <HAL_SPI_Transmit+0x224>
 8003538:	4604      	mov	r4, r0
 800353a:	4688      	mov	r8, r1
 800353c:	4617      	mov	r7, r2
 800353e:	2301      	movs	r3, #1
 8003540:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003544:	f7fe fa16 	bl	8001974 <HAL_GetTick>
 8003548:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800354a:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 800354e:	b2c0      	uxtb	r0, r0
 8003550:	2801      	cmp	r0, #1
 8003552:	f040 80ee 	bne.w	8003732 <HAL_SPI_Transmit+0x20c>
  if ((pData == NULL) || (Size == 0U))
 8003556:	f1b8 0f00 	cmp.w	r8, #0
 800355a:	f000 80eb 	beq.w	8003734 <HAL_SPI_Transmit+0x20e>
 800355e:	2f00      	cmp	r7, #0
 8003560:	f000 80e8 	beq.w	8003734 <HAL_SPI_Transmit+0x20e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003564:	2303      	movs	r3, #3
 8003566:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800356a:	2300      	movs	r3, #0
 800356c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800356e:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003572:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003574:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003576:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003578:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800357c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003580:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003582:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003584:	68a3      	ldr	r3, [r4, #8]
 8003586:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800358a:	d03e      	beq.n	800360a <HAL_SPI_Transmit+0xe4>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800358c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800358e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003592:	d045      	beq.n	8003620 <HAL_SPI_Transmit+0xfa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003594:	6823      	ldr	r3, [r4, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	f012 0f40 	tst.w	r2, #64	; 0x40
 800359c:	d103      	bne.n	80035a6 <HAL_SPI_Transmit+0x80>
    __HAL_SPI_ENABLE(hspi);
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035a4:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035a6:	68e3      	ldr	r3, [r4, #12]
 80035a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035ac:	d967      	bls.n	800367e <HAL_SPI_Transmit+0x158>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035ae:	6863      	ldr	r3, [r4, #4]
 80035b0:	b10b      	cbz	r3, 80035b6 <HAL_SPI_Transmit+0x90>
 80035b2:	2f01      	cmp	r7, #1
 80035b4:	d10a      	bne.n	80035cc <HAL_SPI_Transmit+0xa6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035b6:	6823      	ldr	r3, [r4, #0]
 80035b8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80035ba:	8812      	ldrh	r2, [r2, #0]
 80035bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80035c0:	3302      	adds	r3, #2
 80035c2:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80035c4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80035c6:	3b01      	subs	r3, #1
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 80035cc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d13c      	bne.n	800364e <HAL_SPI_Transmit+0x128>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80035d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035da:	f000 80a4 	beq.w	8003726 <HAL_SPI_Transmit+0x200>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035de:	4632      	mov	r2, r6
 80035e0:	4629      	mov	r1, r5
 80035e2:	4620      	mov	r0, r4
 80035e4:	f7ff fe9c 	bl	8003320 <SPI_EndRxTxTransaction>
 80035e8:	b108      	cbz	r0, 80035ee <HAL_SPI_Transmit+0xc8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035ea:	2320      	movs	r3, #32
 80035ec:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035ee:	68a3      	ldr	r3, [r4, #8]
 80035f0:	b933      	cbnz	r3, 8003600 <HAL_SPI_Transmit+0xda>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035f2:	9301      	str	r3, [sp, #4]
 80035f4:	6823      	ldr	r3, [r4, #0]
 80035f6:	68da      	ldr	r2, [r3, #12]
 80035f8:	9201      	str	r2, [sp, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	9301      	str	r3, [sp, #4]
 80035fe:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003600:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8003602:	3800      	subs	r0, #0
 8003604:	bf18      	it	ne
 8003606:	2001      	movne	r0, #1
error:
 8003608:	e094      	b.n	8003734 <HAL_SPI_Transmit+0x20e>
    __HAL_SPI_DISABLE(hspi);
 800360a:	6822      	ldr	r2, [r4, #0]
 800360c:	6813      	ldr	r3, [r2, #0]
 800360e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003612:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8003614:	6822      	ldr	r2, [r4, #0]
 8003616:	6813      	ldr	r3, [r2, #0]
 8003618:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800361c:	6013      	str	r3, [r2, #0]
 800361e:	e7b5      	b.n	800358c <HAL_SPI_Transmit+0x66>
    SPI_RESET_CRC(hspi);
 8003620:	6822      	ldr	r2, [r4, #0]
 8003622:	6813      	ldr	r3, [r2, #0]
 8003624:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003628:	6013      	str	r3, [r2, #0]
 800362a:	6822      	ldr	r2, [r4, #0]
 800362c:	6813      	ldr	r3, [r2, #0]
 800362e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003632:	6013      	str	r3, [r2, #0]
 8003634:	e7ae      	b.n	8003594 <HAL_SPI_Transmit+0x6e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003636:	f7fe f99d 	bl	8001974 <HAL_GetTick>
 800363a:	1b80      	subs	r0, r0, r6
 800363c:	42a8      	cmp	r0, r5
 800363e:	d31a      	bcc.n	8003676 <HAL_SPI_Transmit+0x150>
 8003640:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003644:	d17f      	bne.n	8003746 <HAL_SPI_Transmit+0x220>
    while (hspi->TxXferCount > 0U)
 8003646:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003648:	b29b      	uxth	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0c2      	beq.n	80035d4 <HAL_SPI_Transmit+0xae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800364e:	6823      	ldr	r3, [r4, #0]
 8003650:	689a      	ldr	r2, [r3, #8]
 8003652:	f012 0f02 	tst.w	r2, #2
 8003656:	d0ee      	beq.n	8003636 <HAL_SPI_Transmit+0x110>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003658:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800365a:	8812      	ldrh	r2, [r2, #0]
 800365c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800365e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003660:	3302      	adds	r3, #2
 8003662:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003664:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 8003668:	f10c 3cff 	add.w	ip, ip, #4294967295
 800366c:	fa1f fc8c 	uxth.w	ip, ip
 8003670:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 8003674:	e7e7      	b.n	8003646 <HAL_SPI_Transmit+0x120>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003676:	2d00      	cmp	r5, #0
 8003678:	d1e5      	bne.n	8003646 <HAL_SPI_Transmit+0x120>
          errorcode = HAL_TIMEOUT;
 800367a:	2003      	movs	r0, #3
 800367c:	e05a      	b.n	8003734 <HAL_SPI_Transmit+0x20e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800367e:	6863      	ldr	r3, [r4, #4]
 8003680:	b10b      	cbz	r3, 8003686 <HAL_SPI_Transmit+0x160>
 8003682:	2f01      	cmp	r7, #1
 8003684:	d10e      	bne.n	80036a4 <HAL_SPI_Transmit+0x17e>
      if (hspi->TxXferCount > 1U)
 8003686:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003688:	b29b      	uxth	r3, r3
 800368a:	2b01      	cmp	r3, #1
 800368c:	d90e      	bls.n	80036ac <HAL_SPI_Transmit+0x186>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800368e:	6823      	ldr	r3, [r4, #0]
 8003690:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003692:	8812      	ldrh	r2, [r2, #0]
 8003694:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003696:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003698:	3302      	adds	r3, #2
 800369a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800369c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800369e:	3b02      	subs	r3, #2
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 80036a4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	b9db      	cbnz	r3, 80036e2 <HAL_SPI_Transmit+0x1bc>
 80036aa:	e793      	b.n	80035d4 <HAL_SPI_Transmit+0xae>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036ac:	6823      	ldr	r3, [r4, #0]
 80036ae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80036b0:	7812      	ldrb	r2, [r2, #0]
 80036b2:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 80036b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80036b6:	3301      	adds	r3, #1
 80036b8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80036ba:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29b      	uxth	r3, r3
 80036c0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80036c2:	e7ef      	b.n	80036a4 <HAL_SPI_Transmit+0x17e>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 80036ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80036cc:	3301      	adds	r3, #1
 80036ce:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80036d0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80036d2:	3b01      	subs	r3, #1
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 80036d8:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80036da:	b289      	uxth	r1, r1
 80036dc:	2900      	cmp	r1, #0
 80036de:	f43f af79 	beq.w	80035d4 <HAL_SPI_Transmit+0xae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036e2:	6822      	ldr	r2, [r4, #0]
 80036e4:	6893      	ldr	r3, [r2, #8]
 80036e6:	f013 0f02 	tst.w	r3, #2
 80036ea:	d00e      	beq.n	800370a <HAL_SPI_Transmit+0x1e4>
        if (hspi->TxXferCount > 1U)
 80036ec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d9e7      	bls.n	80036c4 <HAL_SPI_Transmit+0x19e>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80036f6:	881b      	ldrh	r3, [r3, #0]
 80036f8:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80036fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80036fc:	3302      	adds	r3, #2
 80036fe:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003700:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003702:	3b02      	subs	r3, #2
 8003704:	b29b      	uxth	r3, r3
 8003706:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003708:	e7e6      	b.n	80036d8 <HAL_SPI_Transmit+0x1b2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800370a:	f7fe f933 	bl	8001974 <HAL_GetTick>
 800370e:	1b80      	subs	r0, r0, r6
 8003710:	42a8      	cmp	r0, r5
 8003712:	d304      	bcc.n	800371e <HAL_SPI_Transmit+0x1f8>
 8003714:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003718:	d0de      	beq.n	80036d8 <HAL_SPI_Transmit+0x1b2>
          errorcode = HAL_TIMEOUT;
 800371a:	2003      	movs	r0, #3
 800371c:	e00a      	b.n	8003734 <HAL_SPI_Transmit+0x20e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800371e:	2d00      	cmp	r5, #0
 8003720:	d1da      	bne.n	80036d8 <HAL_SPI_Transmit+0x1b2>
          errorcode = HAL_TIMEOUT;
 8003722:	2003      	movs	r0, #3
 8003724:	e006      	b.n	8003734 <HAL_SPI_Transmit+0x20e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003726:	6822      	ldr	r2, [r4, #0]
 8003728:	6813      	ldr	r3, [r2, #0]
 800372a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800372e:	6013      	str	r3, [r2, #0]
 8003730:	e755      	b.n	80035de <HAL_SPI_Transmit+0xb8>
    errorcode = HAL_BUSY;
 8003732:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8003734:	2301      	movs	r3, #1
 8003736:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800373a:	2300      	movs	r3, #0
 800373c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8003740:	b002      	add	sp, #8
 8003742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          errorcode = HAL_TIMEOUT;
 8003746:	2003      	movs	r0, #3
 8003748:	e7f4      	b.n	8003734 <HAL_SPI_Transmit+0x20e>
  __HAL_LOCK(hspi);
 800374a:	2002      	movs	r0, #2
 800374c:	e7f8      	b.n	8003740 <HAL_SPI_Transmit+0x21a>

0800374e <HAL_SPI_TransmitReceive>:
{
 800374e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	461f      	mov	r7, r3
 8003756:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  __IO uint32_t tmpreg = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	9303      	str	r3, [sp, #12]
  __IO uint8_t  tmpreg8 = 0;
 800375c:	f88d 300b 	strb.w	r3, [sp, #11]
  __HAL_LOCK(hspi);
 8003760:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8003764:	2b01      	cmp	r3, #1
 8003766:	f000 81fc 	beq.w	8003b62 <HAL_SPI_TransmitReceive+0x414>
 800376a:	4604      	mov	r4, r0
 800376c:	4689      	mov	r9, r1
 800376e:	4692      	mov	sl, r2
 8003770:	2301      	movs	r3, #1
 8003772:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003776:	f7fe f8fd 	bl	8001974 <HAL_GetTick>
 800377a:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 800377c:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8003780:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 8003782:	6862      	ldr	r2, [r4, #4]
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8003784:	6823      	ldr	r3, [r4, #0]
 8003786:	f8d3 c000 	ldr.w	ip, [r3]
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 800378a:	6859      	ldr	r1, [r3, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800378c:	2801      	cmp	r0, #1
 800378e:	d00a      	beq.n	80037a6 <HAL_SPI_TransmitReceive+0x58>
 8003790:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003794:	f040 81cc 	bne.w	8003b30 <HAL_SPI_TransmitReceive+0x3e2>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003798:	68a2      	ldr	r2, [r4, #8]
 800379a:	2a00      	cmp	r2, #0
 800379c:	f040 81d3 	bne.w	8003b46 <HAL_SPI_TransmitReceive+0x3f8>
 80037a0:	2804      	cmp	r0, #4
 80037a2:	f040 81d2 	bne.w	8003b4a <HAL_SPI_TransmitReceive+0x3fc>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037a6:	f1b9 0f00 	cmp.w	r9, #0
 80037aa:	f000 81d0 	beq.w	8003b4e <HAL_SPI_TransmitReceive+0x400>
 80037ae:	f1ba 0f00 	cmp.w	sl, #0
 80037b2:	f000 81ce 	beq.w	8003b52 <HAL_SPI_TransmitReceive+0x404>
 80037b6:	2f00      	cmp	r7, #0
 80037b8:	f000 81cd 	beq.w	8003b56 <HAL_SPI_TransmitReceive+0x408>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037bc:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
 80037c0:	b2d2      	uxtb	r2, r2
 80037c2:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037c4:	bf1c      	itt	ne
 80037c6:	2205      	movne	r2, #5
 80037c8:	f884 205d 	strbne.w	r2, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037cc:	2200      	movs	r2, #0
 80037ce:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037d0:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 80037d4:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80037d8:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80037dc:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80037e0:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80037e2:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 80037e4:	64e2      	str	r2, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80037e6:	6522      	str	r2, [r4, #80]	; 0x50
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037e8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80037ea:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80037ee:	d030      	beq.n	8003852 <HAL_SPI_TransmitReceive+0x104>
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80037f0:	68e3      	ldr	r3, [r4, #12]
 80037f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037f6:	d801      	bhi.n	80037fc <HAL_SPI_TransmitReceive+0xae>
 80037f8:	2f01      	cmp	r7, #1
 80037fa:	d934      	bls.n	8003866 <HAL_SPI_TransmitReceive+0x118>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037fc:	6822      	ldr	r2, [r4, #0]
 80037fe:	6853      	ldr	r3, [r2, #4]
 8003800:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003804:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003806:	6823      	ldr	r3, [r4, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800380e:	d103      	bne.n	8003818 <HAL_SPI_TransmitReceive+0xca>
    __HAL_SPI_ENABLE(hspi);
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003816:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003818:	68e3      	ldr	r3, [r4, #12]
 800381a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800381e:	f240 8081 	bls.w	8003924 <HAL_SPI_TransmitReceive+0x1d6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003822:	6863      	ldr	r3, [r4, #4]
 8003824:	b10b      	cbz	r3, 800382a <HAL_SPI_TransmitReceive+0xdc>
 8003826:	2f01      	cmp	r7, #1
 8003828:	d10a      	bne.n	8003840 <HAL_SPI_TransmitReceive+0xf2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800382a:	6823      	ldr	r3, [r4, #0]
 800382c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800382e:	8812      	ldrh	r2, [r2, #0]
 8003830:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003832:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003834:	3302      	adds	r3, #2
 8003836:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003838:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800383a:	3b01      	subs	r3, #1
 800383c:	b29b      	uxth	r3, r3
 800383e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003840:	f04f 0901 	mov.w	r9, #1
        txallowed = 0U;
 8003844:	f04f 0a00 	mov.w	sl, #0
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8003848:	f00c 0704 	and.w	r7, ip, #4
 800384c:	f001 0808 	and.w	r8, r1, #8
 8003850:	e03f      	b.n	80038d2 <HAL_SPI_TransmitReceive+0x184>
    SPI_RESET_CRC(hspi);
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	6822      	ldr	r2, [r4, #0]
 800385c:	6813      	ldr	r3, [r2, #0]
 800385e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003862:	6013      	str	r3, [r2, #0]
 8003864:	e7c4      	b.n	80037f0 <HAL_SPI_TransmitReceive+0xa2>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003866:	6822      	ldr	r2, [r4, #0]
 8003868:	6853      	ldr	r3, [r2, #4]
 800386a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800386e:	6053      	str	r3, [r2, #4]
 8003870:	e7c9      	b.n	8003806 <HAL_SPI_TransmitReceive+0xb8>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8003872:	b93f      	cbnz	r7, 8003884 <HAL_SPI_TransmitReceive+0x136>
 8003874:	f1b8 0f00 	cmp.w	r8, #0
 8003878:	d004      	beq.n	8003884 <HAL_SPI_TransmitReceive+0x136>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 800387a:	6822      	ldr	r2, [r4, #0]
 800387c:	6813      	ldr	r3, [r2, #0]
 800387e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003882:	6013      	str	r3, [r2, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003884:	6822      	ldr	r2, [r4, #0]
 8003886:	6813      	ldr	r3, [r2, #0]
 8003888:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800388c:	6013      	str	r3, [r2, #0]
        txallowed = 0U;
 800388e:	46d1      	mov	r9, sl
 8003890:	e000      	b.n	8003894 <HAL_SPI_TransmitReceive+0x146>
 8003892:	46d1      	mov	r9, sl
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003894:	6822      	ldr	r2, [r4, #0]
 8003896:	6893      	ldr	r3, [r2, #8]
 8003898:	f013 0301 	ands.w	r3, r3, #1
 800389c:	d010      	beq.n	80038c0 <HAL_SPI_TransmitReceive+0x172>
 800389e:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80038a2:	b289      	uxth	r1, r1
 80038a4:	b161      	cbz	r1, 80038c0 <HAL_SPI_TransmitReceive+0x172>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038a6:	68d1      	ldr	r1, [r2, #12]
 80038a8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80038aa:	8011      	strh	r1, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038ac:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80038ae:	3202      	adds	r2, #2
 80038b0:	6422      	str	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80038b2:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80038b6:	3a01      	subs	r2, #1
 80038b8:	b292      	uxth	r2, r2
 80038ba:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
        txallowed = 1U;
 80038be:	4699      	mov	r9, r3
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80038c0:	f7fe f858 	bl	8001974 <HAL_GetTick>
 80038c4:	1b80      	subs	r0, r0, r6
 80038c6:	42a8      	cmp	r0, r5
 80038c8:	d303      	bcc.n	80038d2 <HAL_SPI_TransmitReceive+0x184>
 80038ca:	f1b5 3fff 	cmp.w	r5, #4294967295
 80038ce:	f040 8144 	bne.w	8003b5a <HAL_SPI_TransmitReceive+0x40c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038d2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	b92b      	cbnz	r3, 80038e4 <HAL_SPI_TransmitReceive+0x196>
 80038d8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80038dc:	b29b      	uxth	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 80d2 	beq.w	8003a88 <HAL_SPI_TransmitReceive+0x33a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038e4:	6823      	ldr	r3, [r4, #0]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	f012 0f02 	tst.w	r2, #2
 80038ec:	d0d2      	beq.n	8003894 <HAL_SPI_TransmitReceive+0x146>
 80038ee:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80038f0:	b292      	uxth	r2, r2
 80038f2:	2a00      	cmp	r2, #0
 80038f4:	d0ce      	beq.n	8003894 <HAL_SPI_TransmitReceive+0x146>
 80038f6:	f1b9 0f00 	cmp.w	r9, #0
 80038fa:	d0cb      	beq.n	8003894 <HAL_SPI_TransmitReceive+0x146>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038fc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80038fe:	8812      	ldrh	r2, [r2, #0]
 8003900:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003902:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003904:	3302      	adds	r3, #2
 8003906:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003908:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800390a:	3b01      	subs	r3, #1
 800390c:	b29b      	uxth	r3, r3
 800390e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8003910:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003912:	b29b      	uxth	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1bc      	bne.n	8003892 <HAL_SPI_TransmitReceive+0x144>
 8003918:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800391a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800391e:	d0a8      	beq.n	8003872 <HAL_SPI_TransmitReceive+0x124>
        txallowed = 0U;
 8003920:	46d1      	mov	r9, sl
 8003922:	e7b7      	b.n	8003894 <HAL_SPI_TransmitReceive+0x146>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003924:	6863      	ldr	r3, [r4, #4]
 8003926:	b10b      	cbz	r3, 800392c <HAL_SPI_TransmitReceive+0x1de>
 8003928:	2f01      	cmp	r7, #1
 800392a:	d10e      	bne.n	800394a <HAL_SPI_TransmitReceive+0x1fc>
      if (hspi->TxXferCount > 1U)
 800392c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800392e:	b29b      	uxth	r3, r3
 8003930:	2b01      	cmp	r3, #1
 8003932:	d913      	bls.n	800395c <HAL_SPI_TransmitReceive+0x20e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003934:	6823      	ldr	r3, [r4, #0]
 8003936:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003938:	8812      	ldrh	r2, [r2, #0]
 800393a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800393c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800393e:	3302      	adds	r3, #2
 8003940:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003942:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003944:	3b02      	subs	r3, #2
 8003946:	b29b      	uxth	r3, r3
 8003948:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800394a:	f04f 0901 	mov.w	r9, #1
        txallowed = 0U;
 800394e:	f04f 0a00 	mov.w	sl, #0
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8003952:	f00c 0704 	and.w	r7, ip, #4
 8003956:	f001 0808 	and.w	r8, r1, #8
 800395a:	e05c      	b.n	8003a16 <HAL_SPI_TransmitReceive+0x2c8>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800395c:	6823      	ldr	r3, [r4, #0]
 800395e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003960:	7812      	ldrb	r2, [r2, #0]
 8003962:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8003964:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003966:	3301      	adds	r3, #1
 8003968:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800396a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800396c:	3b01      	subs	r3, #1
 800396e:	b29b      	uxth	r3, r3
 8003970:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003972:	e7ea      	b.n	800394a <HAL_SPI_TransmitReceive+0x1fc>
        if (hspi->TxXferCount > 1U)
 8003974:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003976:	b292      	uxth	r2, r2
 8003978:	2a01      	cmp	r2, #1
 800397a:	d912      	bls.n	80039a2 <HAL_SPI_TransmitReceive+0x254>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800397c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800397e:	8812      	ldrh	r2, [r2, #0]
 8003980:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003982:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003984:	3302      	adds	r3, #2
 8003986:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003988:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800398a:	3b02      	subs	r3, #2
 800398c:	b29b      	uxth	r3, r3
 800398e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8003990:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003992:	b29b      	uxth	r3, r3
 8003994:	bb03      	cbnz	r3, 80039d8 <HAL_SPI_TransmitReceive+0x28a>
 8003996:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003998:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800399c:	d00c      	beq.n	80039b8 <HAL_SPI_TransmitReceive+0x26a>
        txallowed = 0U;
 800399e:	46d1      	mov	r9, sl
 80039a0:	e04c      	b.n	8003a3c <HAL_SPI_TransmitReceive+0x2ee>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80039a2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80039a4:	7812      	ldrb	r2, [r2, #0]
 80039a6:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 80039a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80039aa:	3301      	adds	r3, #1
 80039ac:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80039ae:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80039b6:	e7eb      	b.n	8003990 <HAL_SPI_TransmitReceive+0x242>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80039b8:	b93f      	cbnz	r7, 80039ca <HAL_SPI_TransmitReceive+0x27c>
 80039ba:	f1b8 0f00 	cmp.w	r8, #0
 80039be:	d004      	beq.n	80039ca <HAL_SPI_TransmitReceive+0x27c>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80039c0:	6822      	ldr	r2, [r4, #0]
 80039c2:	6813      	ldr	r3, [r2, #0]
 80039c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039c8:	6013      	str	r3, [r2, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80039ca:	6822      	ldr	r2, [r4, #0]
 80039cc:	6813      	ldr	r3, [r2, #0]
 80039ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039d2:	6013      	str	r3, [r2, #0]
        txallowed = 0U;
 80039d4:	46d1      	mov	r9, sl
 80039d6:	e031      	b.n	8003a3c <HAL_SPI_TransmitReceive+0x2ee>
 80039d8:	46d1      	mov	r9, sl
 80039da:	e02f      	b.n	8003a3c <HAL_SPI_TransmitReceive+0x2ee>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039dc:	6821      	ldr	r1, [r4, #0]
 80039de:	684a      	ldr	r2, [r1, #4]
 80039e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80039e4:	604a      	str	r2, [r1, #4]
        txallowed = 1U;
 80039e6:	4699      	mov	r9, r3
 80039e8:	e00c      	b.n	8003a04 <HAL_SPI_TransmitReceive+0x2b6>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80039ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80039ec:	7b12      	ldrb	r2, [r2, #12]
 80039ee:	700a      	strb	r2, [r1, #0]
          hspi->pRxBuffPtr++;
 80039f0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80039f2:	3201      	adds	r2, #1
 80039f4:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 80039f6:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80039fa:	3a01      	subs	r2, #1
 80039fc:	b292      	uxth	r2, r2
 80039fe:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
        txallowed = 1U;
 8003a02:	4699      	mov	r9, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a04:	f7fd ffb6 	bl	8001974 <HAL_GetTick>
 8003a08:	1b80      	subs	r0, r0, r6
 8003a0a:	42a8      	cmp	r0, r5
 8003a0c:	d338      	bcc.n	8003a80 <HAL_SPI_TransmitReceive+0x332>
 8003a0e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003a12:	f040 80a4 	bne.w	8003b5e <HAL_SPI_TransmitReceive+0x410>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a16:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	b923      	cbnz	r3, 8003a26 <HAL_SPI_TransmitReceive+0x2d8>
 8003a1c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d030      	beq.n	8003a88 <HAL_SPI_TransmitReceive+0x33a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a26:	6823      	ldr	r3, [r4, #0]
 8003a28:	689a      	ldr	r2, [r3, #8]
 8003a2a:	f012 0f02 	tst.w	r2, #2
 8003a2e:	d005      	beq.n	8003a3c <HAL_SPI_TransmitReceive+0x2ee>
 8003a30:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003a32:	b292      	uxth	r2, r2
 8003a34:	b112      	cbz	r2, 8003a3c <HAL_SPI_TransmitReceive+0x2ee>
 8003a36:	f1b9 0f01 	cmp.w	r9, #1
 8003a3a:	d09b      	beq.n	8003974 <HAL_SPI_TransmitReceive+0x226>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a3c:	6822      	ldr	r2, [r4, #0]
 8003a3e:	6893      	ldr	r3, [r2, #8]
 8003a40:	f013 0301 	ands.w	r3, r3, #1
 8003a44:	d0de      	beq.n	8003a04 <HAL_SPI_TransmitReceive+0x2b6>
 8003a46:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8003a4a:	b289      	uxth	r1, r1
 8003a4c:	2900      	cmp	r1, #0
 8003a4e:	d0d9      	beq.n	8003a04 <HAL_SPI_TransmitReceive+0x2b6>
        if (hspi->RxXferCount > 1U)
 8003a50:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8003a54:	b289      	uxth	r1, r1
 8003a56:	2901      	cmp	r1, #1
 8003a58:	d9c7      	bls.n	80039ea <HAL_SPI_TransmitReceive+0x29c>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a5a:	68d1      	ldr	r1, [r2, #12]
 8003a5c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003a5e:	8011      	strh	r1, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a60:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003a62:	3202      	adds	r2, #2
 8003a64:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003a66:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003a6a:	3a02      	subs	r2, #2
 8003a6c:	b292      	uxth	r2, r2
 8003a6e:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003a72:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003a76:	b292      	uxth	r2, r2
 8003a78:	2a01      	cmp	r2, #1
 8003a7a:	d9af      	bls.n	80039dc <HAL_SPI_TransmitReceive+0x28e>
        txallowed = 1U;
 8003a7c:	4699      	mov	r9, r3
 8003a7e:	e7c1      	b.n	8003a04 <HAL_SPI_TransmitReceive+0x2b6>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a80:	2d00      	cmp	r5, #0
 8003a82:	d1c8      	bne.n	8003a16 <HAL_SPI_TransmitReceive+0x2c8>
        errorcode = HAL_TIMEOUT;
 8003a84:	2703      	movs	r7, #3
 8003a86:	e054      	b.n	8003b32 <HAL_SPI_TransmitReceive+0x3e4>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003a8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a8e:	d017      	beq.n	8003ac0 <HAL_SPI_TransmitReceive+0x372>
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8003a90:	6823      	ldr	r3, [r4, #0]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	f012 0f10 	tst.w	r2, #16
 8003a98:	d048      	beq.n	8003b2c <HAL_SPI_TransmitReceive+0x3de>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003a9a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003a9c:	f042 0202 	orr.w	r2, r2, #2
 8003aa0:	6622      	str	r2, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8003aa2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8003aa6:	609a      	str	r2, [r3, #8]
    errorcode = HAL_ERROR;
 8003aa8:	2701      	movs	r7, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003aaa:	4632      	mov	r2, r6
 8003aac:	4629      	mov	r1, r5
 8003aae:	4620      	mov	r0, r4
 8003ab0:	f7ff fc36 	bl	8003320 <SPI_EndRxTxTransaction>
 8003ab4:	2800      	cmp	r0, #0
 8003ab6:	d03c      	beq.n	8003b32 <HAL_SPI_TransmitReceive+0x3e4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ab8:	2320      	movs	r3, #32
 8003aba:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8003abc:	2701      	movs	r7, #1
 8003abe:	e038      	b.n	8003b32 <HAL_SPI_TransmitReceive+0x3e4>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8003ac0:	9600      	str	r6, [sp, #0]
 8003ac2:	462b      	mov	r3, r5
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	4620      	mov	r0, r4
 8003aca:	f7ff fb3f 	bl	800314c <SPI_WaitFlagStateUntilTimeout>
 8003ace:	b9e0      	cbnz	r0, 8003b0a <HAL_SPI_TransmitReceive+0x3bc>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ad0:	68e3      	ldr	r3, [r4, #12]
 8003ad2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003ad6:	d01e      	beq.n	8003b16 <HAL_SPI_TransmitReceive+0x3c8>
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003ad8:	6827      	ldr	r7, [r4, #0]
      tmpreg8 = *ptmpreg8;
 8003ada:	7b3b      	ldrb	r3, [r7, #12]
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	f88d 300b 	strb.w	r3, [sp, #11]
      UNUSED(tmpreg8);
 8003ae2:	f89d 300b 	ldrb.w	r3, [sp, #11]
      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8003ae6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d1d1      	bne.n	8003a90 <HAL_SPI_TransmitReceive+0x342>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8003aec:	9600      	str	r6, [sp, #0]
 8003aee:	462b      	mov	r3, r5
 8003af0:	2201      	movs	r2, #1
 8003af2:	4611      	mov	r1, r2
 8003af4:	4620      	mov	r0, r4
 8003af6:	f7ff fb29 	bl	800314c <SPI_WaitFlagStateUntilTimeout>
 8003afa:	b988      	cbnz	r0, 8003b20 <HAL_SPI_TransmitReceive+0x3d2>
        tmpreg8 = *ptmpreg8;
 8003afc:	7b3b      	ldrb	r3, [r7, #12]
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	f88d 300b 	strb.w	r3, [sp, #11]
        UNUSED(tmpreg8);
 8003b04:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003b08:	e7c2      	b.n	8003a90 <HAL_SPI_TransmitReceive+0x342>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003b0a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003b0c:	f043 0302 	orr.w	r3, r3, #2
 8003b10:	6623      	str	r3, [r4, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8003b12:	2703      	movs	r7, #3
      goto error;
 8003b14:	e00d      	b.n	8003b32 <HAL_SPI_TransmitReceive+0x3e4>
      tmpreg = READ_REG(hspi->Instance->DR);
 8003b16:	6823      	ldr	r3, [r4, #0]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	9303      	str	r3, [sp, #12]
      UNUSED(tmpreg);
 8003b1c:	9b03      	ldr	r3, [sp, #12]
 8003b1e:	e7b7      	b.n	8003a90 <HAL_SPI_TransmitReceive+0x342>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003b20:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003b22:	f043 0302 	orr.w	r3, r3, #2
 8003b26:	6623      	str	r3, [r4, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8003b28:	2703      	movs	r7, #3
          goto error;
 8003b2a:	e002      	b.n	8003b32 <HAL_SPI_TransmitReceive+0x3e4>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003b2c:	2700      	movs	r7, #0
 8003b2e:	e7bc      	b.n	8003aaa <HAL_SPI_TransmitReceive+0x35c>
    errorcode = HAL_BUSY;
 8003b30:	2702      	movs	r7, #2
  hspi->State = HAL_SPI_STATE_READY;
 8003b32:	2301      	movs	r3, #1
 8003b34:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003b38:	2300      	movs	r3, #0
 8003b3a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8003b3e:	4638      	mov	r0, r7
 8003b40:	b004      	add	sp, #16
 8003b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    errorcode = HAL_BUSY;
 8003b46:	2702      	movs	r7, #2
 8003b48:	e7f3      	b.n	8003b32 <HAL_SPI_TransmitReceive+0x3e4>
 8003b4a:	2702      	movs	r7, #2
 8003b4c:	e7f1      	b.n	8003b32 <HAL_SPI_TransmitReceive+0x3e4>
    errorcode = HAL_ERROR;
 8003b4e:	2701      	movs	r7, #1
 8003b50:	e7ef      	b.n	8003b32 <HAL_SPI_TransmitReceive+0x3e4>
 8003b52:	2701      	movs	r7, #1
 8003b54:	e7ed      	b.n	8003b32 <HAL_SPI_TransmitReceive+0x3e4>
 8003b56:	2701      	movs	r7, #1
 8003b58:	e7eb      	b.n	8003b32 <HAL_SPI_TransmitReceive+0x3e4>
        errorcode = HAL_TIMEOUT;
 8003b5a:	2703      	movs	r7, #3
 8003b5c:	e7e9      	b.n	8003b32 <HAL_SPI_TransmitReceive+0x3e4>
        errorcode = HAL_TIMEOUT;
 8003b5e:	2703      	movs	r7, #3
 8003b60:	e7e7      	b.n	8003b32 <HAL_SPI_TransmitReceive+0x3e4>
  __HAL_LOCK(hspi);
 8003b62:	2702      	movs	r7, #2
 8003b64:	e7eb      	b.n	8003b3e <HAL_SPI_TransmitReceive+0x3f0>

08003b66 <HAL_SPI_Receive>:
{
 8003b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	4604      	mov	r4, r0
 8003b6e:	4688      	mov	r8, r1
 8003b70:	4617      	mov	r7, r2
 8003b72:	461d      	mov	r5, r3
  __IO uint32_t tmpreg = 0U;
 8003b74:	2300      	movs	r3, #0
 8003b76:	9303      	str	r3, [sp, #12]
  __IO uint8_t  tmpreg8 = 0;
 8003b78:	f88d 300b 	strb.w	r3, [sp, #11]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003b7c:	6843      	ldr	r3, [r0, #4]
 8003b7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b82:	d06a      	beq.n	8003c5a <HAL_SPI_Receive+0xf4>
  __HAL_LOCK(hspi);
 8003b84:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	f000 8144 	beq.w	8003e16 <HAL_SPI_Receive+0x2b0>
 8003b8e:	2301      	movs	r3, #1
 8003b90:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003b94:	f7fd feee 	bl	8001974 <HAL_GetTick>
 8003b98:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003b9a:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8003b9e:	b2c0      	uxtb	r0, r0
 8003ba0:	2801      	cmp	r0, #1
 8003ba2:	f040 8128 	bne.w	8003df6 <HAL_SPI_Receive+0x290>
  if ((pData == NULL) || (Size == 0U))
 8003ba6:	f1b8 0f00 	cmp.w	r8, #0
 8003baa:	f000 8125 	beq.w	8003df8 <HAL_SPI_Receive+0x292>
 8003bae:	2f00      	cmp	r7, #0
 8003bb0:	f000 8122 	beq.w	8003df8 <HAL_SPI_Receive+0x292>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003bb4:	2304      	movs	r3, #4
 8003bb6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003bbe:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003bc2:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003bc6:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003bca:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003bcc:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003bce:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003bd0:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003bd2:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bd4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003bd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bda:	d04a      	beq.n	8003c72 <HAL_SPI_Receive+0x10c>
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bdc:	68e3      	ldr	r3, [r4, #12]
 8003bde:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003be2:	6822      	ldr	r2, [r4, #0]
 8003be4:	6853      	ldr	r3, [r2, #4]
 8003be6:	bf8c      	ite	hi
 8003be8:	f423 5380 	bichi.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003bec:	f443 5380 	orrls.w	r3, r3, #4096	; 0x1000
 8003bf0:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bf2:	68a3      	ldr	r3, [r4, #8]
 8003bf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bf8:	d04c      	beq.n	8003c94 <HAL_SPI_Receive+0x12e>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bfa:	6823      	ldr	r3, [r4, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003c02:	d103      	bne.n	8003c0c <HAL_SPI_Receive+0xa6>
    __HAL_SPI_ENABLE(hspi);
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c0a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003c0c:	68e3      	ldr	r3, [r4, #12]
 8003c0e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c12:	d94a      	bls.n	8003caa <HAL_SPI_Receive+0x144>
    while (hspi->RxXferCount > 0U)
 8003c14:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d17d      	bne.n	8003d1a <HAL_SPI_Receive+0x1b4>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003c20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c24:	f000 8091 	beq.w	8003d4a <HAL_SPI_Receive+0x1e4>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c28:	4632      	mov	r2, r6
 8003c2a:	4629      	mov	r1, r5
 8003c2c:	4620      	mov	r0, r4
 8003c2e:	f7ff fba8 	bl	8003382 <SPI_EndRxTransaction>
 8003c32:	b108      	cbz	r0, 8003c38 <HAL_SPI_Receive+0xd2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c34:	2320      	movs	r3, #32
 8003c36:	6623      	str	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8003c38:	6823      	ldr	r3, [r4, #0]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	f012 0f10 	tst.w	r2, #16
 8003c40:	d006      	beq.n	8003c50 <HAL_SPI_Receive+0xea>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003c42:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003c44:	f042 0202 	orr.w	r2, r2, #2
 8003c48:	6622      	str	r2, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8003c4a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8003c4e:	609a      	str	r2, [r3, #8]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c50:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8003c52:	3800      	subs	r0, #0
 8003c54:	bf18      	it	ne
 8003c56:	2001      	movne	r0, #1
error :
 8003c58:	e0ce      	b.n	8003df8 <HAL_SPI_Receive+0x292>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003c5a:	6883      	ldr	r3, [r0, #8]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d191      	bne.n	8003b84 <HAL_SPI_Receive+0x1e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003c60:	2304      	movs	r3, #4
 8003c62:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003c66:	9500      	str	r5, [sp, #0]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	460a      	mov	r2, r1
 8003c6c:	f7ff fd6f 	bl	800374e <HAL_SPI_TransmitReceive>
 8003c70:	e0c8      	b.n	8003e04 <HAL_SPI_Receive+0x29e>
    SPI_RESET_CRC(hspi);
 8003c72:	6822      	ldr	r2, [r4, #0]
 8003c74:	6813      	ldr	r3, [r2, #0]
 8003c76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c7a:	6013      	str	r3, [r2, #0]
 8003c7c:	6822      	ldr	r2, [r4, #0]
 8003c7e:	6813      	ldr	r3, [r2, #0]
 8003c80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c84:	6013      	str	r3, [r2, #0]
    hspi->RxXferCount--;
 8003c86:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8003c92:	e7a3      	b.n	8003bdc <HAL_SPI_Receive+0x76>
    __HAL_SPI_DISABLE(hspi);
 8003c94:	6822      	ldr	r2, [r4, #0]
 8003c96:	6813      	ldr	r3, [r2, #0]
 8003c98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c9c:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 8003c9e:	6822      	ldr	r2, [r4, #0]
 8003ca0:	6813      	ldr	r3, [r2, #0]
 8003ca2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ca6:	6013      	str	r3, [r2, #0]
 8003ca8:	e7a7      	b.n	8003bfa <HAL_SPI_Receive+0x94>
    while (hspi->RxXferCount > 0U)
 8003caa:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	b973      	cbnz	r3, 8003cd0 <HAL_SPI_Receive+0x16a>
 8003cb2:	e7b4      	b.n	8003c1e <HAL_SPI_Receive+0xb8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cb4:	f7fd fe5e 	bl	8001974 <HAL_GetTick>
 8003cb8:	1b80      	subs	r0, r0, r6
 8003cba:	42a8      	cmp	r0, r5
 8003cbc:	d31c      	bcc.n	8003cf8 <HAL_SPI_Receive+0x192>
 8003cbe:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003cc2:	f040 80a2 	bne.w	8003e0a <HAL_SPI_Receive+0x2a4>
    while (hspi->RxXferCount > 0U)
 8003cc6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d0a6      	beq.n	8003c1e <HAL_SPI_Receive+0xb8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003cd0:	6823      	ldr	r3, [r4, #0]
 8003cd2:	689a      	ldr	r2, [r3, #8]
 8003cd4:	f012 0f01 	tst.w	r2, #1
 8003cd8:	d0ec      	beq.n	8003cb4 <HAL_SPI_Receive+0x14e>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003cda:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003cdc:	7b1b      	ldrb	r3, [r3, #12]
 8003cde:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003ce0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003ce6:	f8b4 c046 	ldrh.w	ip, [r4, #70]	; 0x46
 8003cea:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003cee:	fa1f fc8c 	uxth.w	ip, ip
 8003cf2:	f8a4 c046 	strh.w	ip, [r4, #70]	; 0x46
 8003cf6:	e7e6      	b.n	8003cc6 <HAL_SPI_Receive+0x160>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cf8:	2d00      	cmp	r5, #0
 8003cfa:	d1e4      	bne.n	8003cc6 <HAL_SPI_Receive+0x160>
          errorcode = HAL_TIMEOUT;
 8003cfc:	2003      	movs	r0, #3
 8003cfe:	e07b      	b.n	8003df8 <HAL_SPI_Receive+0x292>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d00:	f7fd fe38 	bl	8001974 <HAL_GetTick>
 8003d04:	1b80      	subs	r0, r0, r6
 8003d06:	42a8      	cmp	r0, r5
 8003d08:	d31b      	bcc.n	8003d42 <HAL_SPI_Receive+0x1dc>
 8003d0a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003d0e:	d17e      	bne.n	8003e0e <HAL_SPI_Receive+0x2a8>
    while (hspi->RxXferCount > 0U)
 8003d10:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d081      	beq.n	8003c1e <HAL_SPI_Receive+0xb8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d1a:	6823      	ldr	r3, [r4, #0]
 8003d1c:	689a      	ldr	r2, [r3, #8]
 8003d1e:	f012 0f01 	tst.w	r2, #1
 8003d22:	d0ed      	beq.n	8003d00 <HAL_SPI_Receive+0x19a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d24:	68da      	ldr	r2, [r3, #12]
 8003d26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d28:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d2c:	3302      	adds	r3, #2
 8003d2e:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003d30:	f8b4 c046 	ldrh.w	ip, [r4, #70]	; 0x46
 8003d34:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003d38:	fa1f fc8c 	uxth.w	ip, ip
 8003d3c:	f8a4 c046 	strh.w	ip, [r4, #70]	; 0x46
 8003d40:	e7e6      	b.n	8003d10 <HAL_SPI_Receive+0x1aa>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d42:	2d00      	cmp	r5, #0
 8003d44:	d1e4      	bne.n	8003d10 <HAL_SPI_Receive+0x1aa>
          errorcode = HAL_TIMEOUT;
 8003d46:	2003      	movs	r0, #3
 8003d48:	e056      	b.n	8003df8 <HAL_SPI_Receive+0x292>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003d4a:	6822      	ldr	r2, [r4, #0]
 8003d4c:	6813      	ldr	r3, [r2, #0]
 8003d4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d52:	6013      	str	r3, [r2, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8003d54:	9600      	str	r6, [sp, #0]
 8003d56:	462b      	mov	r3, r5
 8003d58:	2201      	movs	r2, #1
 8003d5a:	4611      	mov	r1, r2
 8003d5c:	4620      	mov	r0, r4
 8003d5e:	f7ff f9f5 	bl	800314c <SPI_WaitFlagStateUntilTimeout>
 8003d62:	2800      	cmp	r0, #0
 8003d64:	d155      	bne.n	8003e12 <HAL_SPI_Receive+0x2ac>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d66:	68e3      	ldr	r3, [r4, #12]
 8003d68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d6c:	d92d      	bls.n	8003dca <HAL_SPI_Receive+0x264>
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d6e:	6823      	ldr	r3, [r4, #0]
 8003d70:	68da      	ldr	r2, [r3, #12]
 8003d72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d74:	801a      	strh	r2, [r3, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8003d76:	9600      	str	r6, [sp, #0]
 8003d78:	462b      	mov	r3, r5
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	4611      	mov	r1, r2
 8003d7e:	4620      	mov	r0, r4
 8003d80:	f7ff f9e4 	bl	800314c <SPI_WaitFlagStateUntilTimeout>
 8003d84:	bb30      	cbnz	r0, 8003dd4 <HAL_SPI_Receive+0x26e>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d86:	68e2      	ldr	r2, [r4, #12]
 8003d88:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 8003d8c:	d028      	beq.n	8003de0 <HAL_SPI_Receive+0x27a>
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003d8e:	6827      	ldr	r7, [r4, #0]
      tmpreg8 = *ptmpreg8;
 8003d90:	7b3b      	ldrb	r3, [r7, #12]
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	f88d 300b 	strb.w	r3, [sp, #11]
      UNUSED(tmpreg8);
 8003d98:	f89d 300b 	ldrb.w	r3, [sp, #11]
      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8003d9c:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 8003da0:	f47f af42 	bne.w	8003c28 <HAL_SPI_Receive+0xc2>
 8003da4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	f47f af3e 	bne.w	8003c28 <HAL_SPI_Receive+0xc2>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8003dac:	9600      	str	r6, [sp, #0]
 8003dae:	462b      	mov	r3, r5
 8003db0:	2201      	movs	r2, #1
 8003db2:	4611      	mov	r1, r2
 8003db4:	4620      	mov	r0, r4
 8003db6:	f7ff f9c9 	bl	800314c <SPI_WaitFlagStateUntilTimeout>
 8003dba:	b9b0      	cbnz	r0, 8003dea <HAL_SPI_Receive+0x284>
        tmpreg8 = *ptmpreg8;
 8003dbc:	7b3b      	ldrb	r3, [r7, #12]
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	f88d 300b 	strb.w	r3, [sp, #11]
        UNUSED(tmpreg8);
 8003dc4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003dc8:	e72e      	b.n	8003c28 <HAL_SPI_Receive+0xc2>
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003dca:	6822      	ldr	r2, [r4, #0]
 8003dcc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003dce:	7b12      	ldrb	r2, [r2, #12]
 8003dd0:	701a      	strb	r2, [r3, #0]
 8003dd2:	e7d0      	b.n	8003d76 <HAL_SPI_Receive+0x210>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003dd4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003dd6:	f043 0302 	orr.w	r3, r3, #2
 8003dda:	6623      	str	r3, [r4, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8003ddc:	2003      	movs	r0, #3
      goto error;
 8003dde:	e00b      	b.n	8003df8 <HAL_SPI_Receive+0x292>
      tmpreg = READ_REG(hspi->Instance->DR);
 8003de0:	6823      	ldr	r3, [r4, #0]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	9303      	str	r3, [sp, #12]
      UNUSED(tmpreg);
 8003de6:	9b03      	ldr	r3, [sp, #12]
 8003de8:	e71e      	b.n	8003c28 <HAL_SPI_Receive+0xc2>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003dea:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003dec:	f043 0302 	orr.w	r3, r3, #2
 8003df0:	6623      	str	r3, [r4, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8003df2:	2003      	movs	r0, #3
          goto error;
 8003df4:	e000      	b.n	8003df8 <HAL_SPI_Receive+0x292>
    errorcode = HAL_BUSY;
 8003df6:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003dfe:	2300      	movs	r3, #0
 8003e00:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8003e04:	b004      	add	sp, #16
 8003e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          errorcode = HAL_TIMEOUT;
 8003e0a:	2003      	movs	r0, #3
 8003e0c:	e7f4      	b.n	8003df8 <HAL_SPI_Receive+0x292>
          errorcode = HAL_TIMEOUT;
 8003e0e:	2003      	movs	r0, #3
 8003e10:	e7f2      	b.n	8003df8 <HAL_SPI_Receive+0x292>
      errorcode = HAL_TIMEOUT;
 8003e12:	2003      	movs	r0, #3
 8003e14:	e7f0      	b.n	8003df8 <HAL_SPI_Receive+0x292>
  __HAL_LOCK(hspi);
 8003e16:	2002      	movs	r0, #2
 8003e18:	e7f4      	b.n	8003e04 <HAL_SPI_Receive+0x29e>

08003e1a <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e1a:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1c:	e852 3f00 	ldrex	r3, [r2]
 8003e20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e24:	e842 3100 	strex	r1, r3, [r2]
 8003e28:	2900      	cmp	r1, #0
 8003e2a:	d1f6      	bne.n	8003e1a <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003e2c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2e:	f102 0308 	add.w	r3, r2, #8
 8003e32:	e853 3f00 	ldrex	r3, [r3]
 8003e36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e3a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3e:	3208      	adds	r2, #8
 8003e40:	e842 3100 	strex	r1, r3, [r2]
 8003e44:	2900      	cmp	r1, #0
 8003e46:	d1f1      	bne.n	8003e2c <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e48:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d006      	beq.n	8003e5c <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e4e:	2320      	movs	r3, #32
 8003e50:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e54:	2300      	movs	r3, #0
 8003e56:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e58:	6743      	str	r3, [r0, #116]	; 0x74
}
 8003e5a:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e5c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5e:	e852 3f00 	ldrex	r3, [r2]
 8003e62:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e66:	e842 3100 	strex	r1, r3, [r2]
 8003e6a:	2900      	cmp	r1, #0
 8003e6c:	d1f6      	bne.n	8003e5c <UART_EndRxTransfer+0x42>
 8003e6e:	e7ee      	b.n	8003e4e <UART_EndRxTransfer+0x34>

08003e70 <HAL_UART_TxCpltCallback>:
}
 8003e70:	4770      	bx	lr

08003e72 <HAL_UART_ErrorCallback>:
}
 8003e72:	4770      	bx	lr

08003e74 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e74:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e76:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003e7e:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e82:	f7ff fff6 	bl	8003e72 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e86:	bd08      	pop	{r3, pc}

08003e88 <HAL_UARTEx_RxEventCallback>:
}
 8003e88:	4770      	bx	lr
	...

08003e8c <HAL_UART_IRQHandler>:
{
 8003e8c:	b570      	push	{r4, r5, r6, lr}
 8003e8e:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003e90:	6802      	ldr	r2, [r0, #0]
 8003e92:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e94:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e96:	6890      	ldr	r0, [r2, #8]
  if (errorflags == 0U)
 8003e98:	f640 0c0f 	movw	ip, #2063	; 0x80f
 8003e9c:	ea13 0f0c 	tst.w	r3, ip
 8003ea0:	d10e      	bne.n	8003ec0 <HAL_UART_IRQHandler+0x34>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003ea2:	f013 0f20 	tst.w	r3, #32
 8003ea6:	d014      	beq.n	8003ed2 <HAL_UART_IRQHandler+0x46>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003ea8:	f001 0c20 	and.w	ip, r1, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003eac:	f000 5580 	and.w	r5, r0, #268435456	; 0x10000000
 8003eb0:	ea5c 0c05 	orrs.w	ip, ip, r5
 8003eb4:	d00d      	beq.n	8003ed2 <HAL_UART_IRQHandler+0x46>
      if (huart->RxISR != NULL)
 8003eb6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8003eb8:	b3a3      	cbz	r3, 8003f24 <HAL_UART_IRQHandler+0x98>
        huart->RxISR(huart);
 8003eba:	4620      	mov	r0, r4
 8003ebc:	4798      	blx	r3
 8003ebe:	e031      	b.n	8003f24 <HAL_UART_IRQHandler+0x98>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003ec0:	4db6      	ldr	r5, [pc, #728]	; (800419c <HAL_UART_IRQHandler+0x310>)
 8003ec2:	4005      	ands	r5, r0
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003ec4:	f8df c2d8 	ldr.w	ip, [pc, #728]	; 80041a0 <HAL_UART_IRQHandler+0x314>
 8003ec8:	ea01 0c0c 	and.w	ip, r1, ip
 8003ecc:	ea5c 0c05 	orrs.w	ip, ip, r5
 8003ed0:	d129      	bne.n	8003f26 <HAL_UART_IRQHandler+0x9a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ed2:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8003ed4:	2d01      	cmp	r5, #1
 8003ed6:	f000 80c3 	beq.w	8004060 <HAL_UART_IRQHandler+0x1d4>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003eda:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003ede:	d003      	beq.n	8003ee8 <HAL_UART_IRQHandler+0x5c>
 8003ee0:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8003ee4:	f040 8160 	bne.w	80041a8 <HAL_UART_IRQHandler+0x31c>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003ee8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003eec:	d006      	beq.n	8003efc <HAL_UART_IRQHandler+0x70>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003eee:	f001 0280 	and.w	r2, r1, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003ef2:	f400 0000 	and.w	r0, r0, #8388608	; 0x800000
 8003ef6:	4302      	orrs	r2, r0
 8003ef8:	f040 815d 	bne.w	80041b6 <HAL_UART_IRQHandler+0x32a>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003efc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003f00:	d003      	beq.n	8003f0a <HAL_UART_IRQHandler+0x7e>
 8003f02:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003f06:	f040 815d 	bne.w	80041c4 <HAL_UART_IRQHandler+0x338>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003f0a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8003f0e:	d003      	beq.n	8003f18 <HAL_UART_IRQHandler+0x8c>
 8003f10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8003f14:	f040 8168 	bne.w	80041e8 <HAL_UART_IRQHandler+0x35c>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003f18:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003f1c:	d002      	beq.n	8003f24 <HAL_UART_IRQHandler+0x98>
 8003f1e:	2900      	cmp	r1, #0
 8003f20:	f2c0 8166 	blt.w	80041f0 <HAL_UART_IRQHandler+0x364>
}
 8003f24:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f26:	f013 0f01 	tst.w	r3, #1
 8003f2a:	d009      	beq.n	8003f40 <HAL_UART_IRQHandler+0xb4>
 8003f2c:	f411 7f80 	tst.w	r1, #256	; 0x100
 8003f30:	d006      	beq.n	8003f40 <HAL_UART_IRQHandler+0xb4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f32:	2601      	movs	r6, #1
 8003f34:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f36:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8003f3a:	4332      	orrs	r2, r6
 8003f3c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f40:	f013 0f02 	tst.w	r3, #2
 8003f44:	d00f      	beq.n	8003f66 <HAL_UART_IRQHandler+0xda>
 8003f46:	f010 0f01 	tst.w	r0, #1
 8003f4a:	d01b      	beq.n	8003f84 <HAL_UART_IRQHandler+0xf8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f4c:	6822      	ldr	r2, [r4, #0]
 8003f4e:	2602      	movs	r6, #2
 8003f50:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f52:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8003f56:	f042 0204 	orr.w	r2, r2, #4
 8003f5a:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f5e:	f013 0f04 	tst.w	r3, #4
 8003f62:	d106      	bne.n	8003f72 <HAL_UART_IRQHandler+0xe6>
 8003f64:	e00e      	b.n	8003f84 <HAL_UART_IRQHandler+0xf8>
 8003f66:	f013 0f04 	tst.w	r3, #4
 8003f6a:	d00b      	beq.n	8003f84 <HAL_UART_IRQHandler+0xf8>
 8003f6c:	f010 0f01 	tst.w	r0, #1
 8003f70:	d008      	beq.n	8003f84 <HAL_UART_IRQHandler+0xf8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f72:	6822      	ldr	r2, [r4, #0]
 8003f74:	2604      	movs	r6, #4
 8003f76:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f78:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8003f7c:	f042 0202 	orr.w	r2, r2, #2
 8003f80:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003f84:	f013 0f08 	tst.w	r3, #8
 8003f88:	d00b      	beq.n	8003fa2 <HAL_UART_IRQHandler+0x116>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003f8a:	f001 0220 	and.w	r2, r1, #32
 8003f8e:	432a      	orrs	r2, r5
 8003f90:	d007      	beq.n	8003fa2 <HAL_UART_IRQHandler+0x116>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f92:	6822      	ldr	r2, [r4, #0]
 8003f94:	2508      	movs	r5, #8
 8003f96:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f98:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8003f9c:	432a      	orrs	r2, r5
 8003f9e:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003fa2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003fa6:	d00c      	beq.n	8003fc2 <HAL_UART_IRQHandler+0x136>
 8003fa8:	f011 6f80 	tst.w	r1, #67108864	; 0x4000000
 8003fac:	d009      	beq.n	8003fc2 <HAL_UART_IRQHandler+0x136>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fae:	6822      	ldr	r2, [r4, #0]
 8003fb0:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8003fb4:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003fb6:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8003fba:	f042 0220 	orr.w	r2, r2, #32
 8003fbe:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fc2:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8003fc6:	2a00      	cmp	r2, #0
 8003fc8:	d0ac      	beq.n	8003f24 <HAL_UART_IRQHandler+0x98>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003fca:	f013 0f20 	tst.w	r3, #32
 8003fce:	d009      	beq.n	8003fe4 <HAL_UART_IRQHandler+0x158>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003fd0:	f001 0120 	and.w	r1, r1, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003fd4:	f000 5080 	and.w	r0, r0, #268435456	; 0x10000000
 8003fd8:	4301      	orrs	r1, r0
 8003fda:	d003      	beq.n	8003fe4 <HAL_UART_IRQHandler+0x158>
        if (huart->RxISR != NULL)
 8003fdc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8003fde:	b10b      	cbz	r3, 8003fe4 <HAL_UART_IRQHandler+0x158>
          huart->RxISR(huart);
 8003fe0:	4620      	mov	r0, r4
 8003fe2:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8003fe4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003fe8:	6823      	ldr	r3, [r4, #0]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003ff0:	f002 0228 	and.w	r2, r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	d02c      	beq.n	8004052 <HAL_UART_IRQHandler+0x1c6>
        UART_EndRxTransfer(huart);
 8003ff8:	4620      	mov	r0, r4
 8003ffa:	f7ff ff0e 	bl	8003e1a <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ffe:	6823      	ldr	r3, [r4, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004006:	d020      	beq.n	800404a <HAL_UART_IRQHandler+0x1be>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004008:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400a:	f102 0308 	add.w	r3, r2, #8
 800400e:	e853 3f00 	ldrex	r3, [r3]
 8004012:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004016:	3208      	adds	r2, #8
 8004018:	e842 3100 	strex	r1, r3, [r2]
 800401c:	2900      	cmp	r1, #0
 800401e:	d1f3      	bne.n	8004008 <HAL_UART_IRQHandler+0x17c>
          if (huart->hdmarx != NULL)
 8004020:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004024:	b16b      	cbz	r3, 8004042 <HAL_UART_IRQHandler+0x1b6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004026:	4a5f      	ldr	r2, [pc, #380]	; (80041a4 <HAL_UART_IRQHandler+0x318>)
 8004028:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800402a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800402e:	f7fd fd5f 	bl	8001af0 <HAL_DMA_Abort_IT>
 8004032:	2800      	cmp	r0, #0
 8004034:	f43f af76 	beq.w	8003f24 <HAL_UART_IRQHandler+0x98>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004038:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800403c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800403e:	4798      	blx	r3
 8004040:	e770      	b.n	8003f24 <HAL_UART_IRQHandler+0x98>
            HAL_UART_ErrorCallback(huart);
 8004042:	4620      	mov	r0, r4
 8004044:	f7ff ff15 	bl	8003e72 <HAL_UART_ErrorCallback>
 8004048:	e76c      	b.n	8003f24 <HAL_UART_IRQHandler+0x98>
          HAL_UART_ErrorCallback(huart);
 800404a:	4620      	mov	r0, r4
 800404c:	f7ff ff11 	bl	8003e72 <HAL_UART_ErrorCallback>
 8004050:	e768      	b.n	8003f24 <HAL_UART_IRQHandler+0x98>
        HAL_UART_ErrorCallback(huart);
 8004052:	4620      	mov	r0, r4
 8004054:	f7ff ff0d 	bl	8003e72 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004058:	2300      	movs	r3, #0
 800405a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800405e:	e761      	b.n	8003f24 <HAL_UART_IRQHandler+0x98>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004060:	f013 0f10 	tst.w	r3, #16
 8004064:	f43f af39 	beq.w	8003eda <HAL_UART_IRQHandler+0x4e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004068:	f011 0f10 	tst.w	r1, #16
 800406c:	f43f af35 	beq.w	8003eda <HAL_UART_IRQHandler+0x4e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004070:	2310      	movs	r3, #16
 8004072:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004074:	6823      	ldr	r3, [r4, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f013 0f40 	tst.w	r3, #64	; 0x40
 800407c:	d052      	beq.n	8004124 <HAL_UART_IRQHandler+0x298>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800407e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8004082:	6813      	ldr	r3, [r2, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8004088:	2b00      	cmp	r3, #0
 800408a:	f43f af4b 	beq.w	8003f24 <HAL_UART_IRQHandler+0x98>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800408e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8004092:	4299      	cmp	r1, r3
 8004094:	f67f af46 	bls.w	8003f24 <HAL_UART_IRQHandler+0x98>
        huart->RxXferCount = nb_remaining_rx_data;
 8004098:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800409c:	6813      	ldr	r3, [r2, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f013 0f20 	tst.w	r3, #32
 80040a4:	d132      	bne.n	800410c <HAL_UART_IRQHandler+0x280>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040a6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a8:	e852 3f00 	ldrex	r3, [r2]
 80040ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b0:	e842 3100 	strex	r1, r3, [r2]
 80040b4:	2900      	cmp	r1, #0
 80040b6:	d1f6      	bne.n	80040a6 <HAL_UART_IRQHandler+0x21a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040b8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ba:	f102 0308 	add.w	r3, r2, #8
 80040be:	e853 3f00 	ldrex	r3, [r3]
 80040c2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c6:	3208      	adds	r2, #8
 80040c8:	e842 3100 	strex	r1, r3, [r2]
 80040cc:	2900      	cmp	r1, #0
 80040ce:	d1f3      	bne.n	80040b8 <HAL_UART_IRQHandler+0x22c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040d0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d2:	f102 0308 	add.w	r3, r2, #8
 80040d6:	e853 3f00 	ldrex	r3, [r3]
 80040da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040de:	3208      	adds	r2, #8
 80040e0:	e842 3100 	strex	r1, r3, [r2]
 80040e4:	2900      	cmp	r1, #0
 80040e6:	d1f3      	bne.n	80040d0 <HAL_UART_IRQHandler+0x244>
          huart->RxState = HAL_UART_STATE_READY;
 80040e8:	2320      	movs	r3, #32
 80040ea:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ee:	2300      	movs	r3, #0
 80040f0:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040f2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f4:	e852 3f00 	ldrex	r3, [r2]
 80040f8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fc:	e842 3100 	strex	r1, r3, [r2]
 8004100:	2900      	cmp	r1, #0
 8004102:	d1f6      	bne.n	80040f2 <HAL_UART_IRQHandler+0x266>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004104:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8004108:	f7fd fcb8 	bl	8001a7c <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800410c:	2302      	movs	r3, #2
 800410e:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004110:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8004114:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8004118:	1ac9      	subs	r1, r1, r3
 800411a:	b289      	uxth	r1, r1
 800411c:	4620      	mov	r0, r4
 800411e:	f7ff feb3 	bl	8003e88 <HAL_UARTEx_RxEventCallback>
 8004122:	e6ff      	b.n	8003f24 <HAL_UART_IRQHandler+0x98>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004124:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8004128:	b29a      	uxth	r2, r3
      if ((huart->RxXferCount > 0U)
 800412a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800412e:	b29b      	uxth	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	f43f aef7 	beq.w	8003f24 <HAL_UART_IRQHandler+0x98>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004136:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800413a:	1a89      	subs	r1, r1, r2
 800413c:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800413e:	2900      	cmp	r1, #0
 8004140:	f43f aef0 	beq.w	8003f24 <HAL_UART_IRQHandler+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004144:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004146:	e852 3f00 	ldrex	r3, [r2]
 800414a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414e:	e842 3000 	strex	r0, r3, [r2]
 8004152:	2800      	cmp	r0, #0
 8004154:	d1f6      	bne.n	8004144 <HAL_UART_IRQHandler+0x2b8>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004156:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004158:	f102 0308 	add.w	r3, r2, #8
 800415c:	e853 3f00 	ldrex	r3, [r3]
 8004160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004164:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004168:	3208      	adds	r2, #8
 800416a:	e842 3000 	strex	r0, r3, [r2]
 800416e:	2800      	cmp	r0, #0
 8004170:	d1f1      	bne.n	8004156 <HAL_UART_IRQHandler+0x2ca>
        huart->RxState = HAL_UART_STATE_READY;
 8004172:	2320      	movs	r3, #32
 8004174:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004178:	2300      	movs	r3, #0
 800417a:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 800417c:	6763      	str	r3, [r4, #116]	; 0x74
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800417e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004180:	e852 3f00 	ldrex	r3, [r2]
 8004184:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004188:	e842 3000 	strex	r0, r3, [r2]
 800418c:	2800      	cmp	r0, #0
 800418e:	d1f6      	bne.n	800417e <HAL_UART_IRQHandler+0x2f2>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004190:	2302      	movs	r3, #2
 8004192:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004194:	4620      	mov	r0, r4
 8004196:	f7ff fe77 	bl	8003e88 <HAL_UARTEx_RxEventCallback>
 800419a:	e6c3      	b.n	8003f24 <HAL_UART_IRQHandler+0x98>
 800419c:	10000001 	.word	0x10000001
 80041a0:	04000120 	.word	0x04000120
 80041a4:	08003e75 	.word	0x08003e75
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80041a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80041ac:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80041ae:	4620      	mov	r0, r4
 80041b0:	f000 fb6e 	bl	8004890 <HAL_UARTEx_WakeupCallback>
    return;
 80041b4:	e6b6      	b.n	8003f24 <HAL_UART_IRQHandler+0x98>
    if (huart->TxISR != NULL)
 80041b6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f43f aeb3 	beq.w	8003f24 <HAL_UART_IRQHandler+0x98>
      huart->TxISR(huart);
 80041be:	4620      	mov	r0, r4
 80041c0:	4798      	blx	r3
 80041c2:	e6af      	b.n	8003f24 <HAL_UART_IRQHandler+0x98>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041c4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c6:	e852 3f00 	ldrex	r3, [r2]
 80041ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ce:	e842 3100 	strex	r1, r3, [r2]
 80041d2:	2900      	cmp	r1, #0
 80041d4:	d1f6      	bne.n	80041c4 <HAL_UART_IRQHandler+0x338>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041d6:	2320      	movs	r3, #32
 80041d8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80041dc:	2300      	movs	r3, #0
 80041de:	67a3      	str	r3, [r4, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041e0:	4620      	mov	r0, r4
 80041e2:	f7ff fe45 	bl	8003e70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041e6:	e69d      	b.n	8003f24 <HAL_UART_IRQHandler+0x98>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80041e8:	4620      	mov	r0, r4
 80041ea:	f000 fb53 	bl	8004894 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 80041ee:	e699      	b.n	8003f24 <HAL_UART_IRQHandler+0x98>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80041f0:	4620      	mov	r0, r4
 80041f2:	f000 fb4e 	bl	8004892 <HAL_UARTEx_RxFifoFullCallback>
    return;
 80041f6:	e695      	b.n	8003f24 <HAL_UART_IRQHandler+0x98>

080041f8 <UART_SetConfig>:
{
 80041f8:	b570      	push	{r4, r5, r6, lr}
 80041fa:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 80041fc:	6801      	ldr	r1, [r0, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041fe:	6808      	ldr	r0, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004200:	68a3      	ldr	r3, [r4, #8]
 8004202:	6922      	ldr	r2, [r4, #16]
 8004204:	4313      	orrs	r3, r2
 8004206:	6962      	ldr	r2, [r4, #20]
 8004208:	4313      	orrs	r3, r2
 800420a:	69e2      	ldr	r2, [r4, #28]
 800420c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800420e:	4aaa      	ldr	r2, [pc, #680]	; (80044b8 <UART_SetConfig+0x2c0>)
 8004210:	4002      	ands	r2, r0
 8004212:	4313      	orrs	r3, r2
 8004214:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004216:	6822      	ldr	r2, [r4, #0]
 8004218:	6853      	ldr	r3, [r2, #4]
 800421a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800421e:	68e1      	ldr	r1, [r4, #12]
 8004220:	430b      	orrs	r3, r1
 8004222:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004224:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004226:	6822      	ldr	r2, [r4, #0]
 8004228:	4ba4      	ldr	r3, [pc, #656]	; (80044bc <UART_SetConfig+0x2c4>)
 800422a:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 800422c:	bf1c      	itt	ne
 800422e:	6a23      	ldrne	r3, [r4, #32]
 8004230:	4319      	orrne	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004232:	6893      	ldr	r3, [r2, #8]
 8004234:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004238:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800423c:	430b      	orrs	r3, r1
 800423e:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004240:	6822      	ldr	r2, [r4, #0]
 8004242:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004244:	f023 030f 	bic.w	r3, r3, #15
 8004248:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800424a:	430b      	orrs	r3, r1
 800424c:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800424e:	6823      	ldr	r3, [r4, #0]
 8004250:	4a9b      	ldr	r2, [pc, #620]	; (80044c0 <UART_SetConfig+0x2c8>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d019      	beq.n	800428a <UART_SetConfig+0x92>
 8004256:	4a9b      	ldr	r2, [pc, #620]	; (80044c4 <UART_SetConfig+0x2cc>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d02c      	beq.n	80042b6 <UART_SetConfig+0xbe>
 800425c:	4a97      	ldr	r2, [pc, #604]	; (80044bc <UART_SetConfig+0x2c4>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d04a      	beq.n	80042f8 <UART_SetConfig+0x100>
 8004262:	2210      	movs	r2, #16
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004264:	69e0      	ldr	r0, [r4, #28]
 8004266:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800426a:	f000 80b8 	beq.w	80043de <UART_SetConfig+0x1e6>
    switch (clocksource)
 800426e:	2a08      	cmp	r2, #8
 8004270:	f200 8130 	bhi.w	80044d4 <UART_SetConfig+0x2dc>
 8004274:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004278:	010900e7 	.word	0x010900e7
 800427c:	012e010f 	.word	0x012e010f
 8004280:	012e010c 	.word	0x012e010c
 8004284:	012e012e 	.word	0x012e012e
 8004288:	00e4      	.short	0x00e4
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800428a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800428e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8004292:	f002 0203 	and.w	r2, r2, #3
 8004296:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 800429a:	f5a2 3240 	sub.w	r2, r2, #196608	; 0x30000
 800429e:	2a03      	cmp	r2, #3
 80042a0:	d807      	bhi.n	80042b2 <UART_SetConfig+0xba>
 80042a2:	e8df f012 	tbh	[pc, r2, lsl #1]
 80042a6:	0070      	.short	0x0070
 80042a8:	011d0004 	.word	0x011d0004
 80042ac:	011f      	.short	0x011f
 80042ae:	2204      	movs	r2, #4
 80042b0:	e7d8      	b.n	8004264 <UART_SetConfig+0x6c>
 80042b2:	2210      	movs	r2, #16
 80042b4:	e7d6      	b.n	8004264 <UART_SetConfig+0x6c>
 80042b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042ba:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80042be:	f002 020c 	and.w	r2, r2, #12
 80042c2:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 80042c6:	f5a2 2240 	sub.w	r2, r2, #786432	; 0xc0000
 80042ca:	2a0c      	cmp	r2, #12
 80042cc:	d812      	bhi.n	80042f4 <UART_SetConfig+0xfc>
 80042ce:	e8df f012 	tbh	[pc, r2, lsl #1]
 80042d2:	0077      	.short	0x0077
 80042d4:	00110011 	.word	0x00110011
 80042d8:	000d0011 	.word	0x000d0011
 80042dc:	00110011 	.word	0x00110011
 80042e0:	010b0011 	.word	0x010b0011
 80042e4:	00110011 	.word	0x00110011
 80042e8:	000f0011 	.word	0x000f0011
 80042ec:	2204      	movs	r2, #4
 80042ee:	e7b9      	b.n	8004264 <UART_SetConfig+0x6c>
 80042f0:	2208      	movs	r2, #8
 80042f2:	e7b7      	b.n	8004264 <UART_SetConfig+0x6c>
 80042f4:	2210      	movs	r2, #16
 80042f6:	e7b5      	b.n	8004264 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80042f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004300:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004304:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004308:	d064      	beq.n	80043d4 <UART_SetConfig+0x1dc>
 800430a:	d80a      	bhi.n	8004322 <UART_SetConfig+0x12a>
 800430c:	2b00      	cmp	r3, #0
 800430e:	d05b      	beq.n	80043c8 <UART_SetConfig+0x1d0>
 8004310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004314:	bf18      	it	ne
 8004316:	2001      	movne	r0, #1
 8004318:	f040 80ae 	bne.w	8004478 <UART_SetConfig+0x280>
        pclk = HAL_RCC_GetSysClockFreq();
 800431c:	f7fd fe82 	bl	8002024 <HAL_RCC_GetSysClockFreq>
        break;
 8004320:	e054      	b.n	80043cc <UART_SetConfig+0x1d4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004322:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004326:	d12c      	bne.n	8004382 <UART_SetConfig+0x18a>
 8004328:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800432c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800432e:	4b66      	ldr	r3, [pc, #408]	; (80044c8 <UART_SetConfig+0x2d0>)
 8004330:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8004334:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004338:	6865      	ldr	r5, [r4, #4]
 800433a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800433e:	4299      	cmp	r1, r3
 8004340:	f200 80ad 	bhi.w	800449e <UART_SetConfig+0x2a6>
 8004344:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8004348:	f200 80ab 	bhi.w	80044a2 <UART_SetConfig+0x2aa>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800434c:	2600      	movs	r6, #0
 800434e:	4633      	mov	r3, r6
 8004350:	4631      	mov	r1, r6
 8004352:	f7fb ff65 	bl	8000220 <__aeabi_uldivmod>
 8004356:	0209      	lsls	r1, r1, #8
 8004358:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800435c:	0200      	lsls	r0, r0, #8
 800435e:	086b      	lsrs	r3, r5, #1
 8004360:	18c0      	adds	r0, r0, r3
 8004362:	462a      	mov	r2, r5
 8004364:	4633      	mov	r3, r6
 8004366:	f141 0100 	adc.w	r1, r1, #0
 800436a:	f7fb ff59 	bl	8000220 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800436e:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8004372:	4b56      	ldr	r3, [pc, #344]	; (80044cc <UART_SetConfig+0x2d4>)
 8004374:	429a      	cmp	r2, r3
 8004376:	f200 8096 	bhi.w	80044a6 <UART_SetConfig+0x2ae>
          huart->Instance->BRR = usartdiv;
 800437a:	6823      	ldr	r3, [r4, #0]
 800437c:	60d8      	str	r0, [r3, #12]
 800437e:	4630      	mov	r0, r6
 8004380:	e07a      	b.n	8004478 <UART_SetConfig+0x280>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004382:	2001      	movs	r0, #1
 8004384:	e078      	b.n	8004478 <UART_SetConfig+0x280>
 8004386:	2201      	movs	r2, #1
  if (UART_INSTANCE_LOWPOWER(huart))
 8004388:	494c      	ldr	r1, [pc, #304]	; (80044bc <UART_SetConfig+0x2c4>)
 800438a:	428b      	cmp	r3, r1
 800438c:	f47f af6a 	bne.w	8004264 <UART_SetConfig+0x6c>
    switch (clocksource)
 8004390:	2a08      	cmp	r2, #8
 8004392:	f200 8082 	bhi.w	800449a <UART_SetConfig+0x2a2>
 8004396:	a301      	add	r3, pc, #4	; (adr r3, 800439c <UART_SetConfig+0x1a4>)
 8004398:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800439c:	080043c9 	.word	0x080043c9
 80043a0:	0800449b 	.word	0x0800449b
 80043a4:	080043c5 	.word	0x080043c5
 80043a8:	0800449b 	.word	0x0800449b
 80043ac:	0800431d 	.word	0x0800431d
 80043b0:	0800449b 	.word	0x0800449b
 80043b4:	0800449b 	.word	0x0800449b
 80043b8:	0800449b 	.word	0x0800449b
 80043bc:	080043d9 	.word	0x080043d9
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043c0:	2200      	movs	r2, #0
 80043c2:	e7e1      	b.n	8004388 <UART_SetConfig+0x190>
    switch (clocksource)
 80043c4:	4842      	ldr	r0, [pc, #264]	; (80044d0 <UART_SetConfig+0x2d8>)
 80043c6:	e7b1      	b.n	800432c <UART_SetConfig+0x134>
        pclk = HAL_RCC_GetPCLK1Freq();
 80043c8:	f7fe fb08 	bl	80029dc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80043cc:	2800      	cmp	r0, #0
 80043ce:	d1ad      	bne.n	800432c <UART_SetConfig+0x134>
 80043d0:	2000      	movs	r0, #0
 80043d2:	e051      	b.n	8004478 <UART_SetConfig+0x280>
        pclk = (uint32_t) HSI_VALUE;
 80043d4:	483e      	ldr	r0, [pc, #248]	; (80044d0 <UART_SetConfig+0x2d8>)
 80043d6:	e7a9      	b.n	800432c <UART_SetConfig+0x134>
        pclk = (uint32_t) LSE_VALUE;
 80043d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80043dc:	e7a6      	b.n	800432c <UART_SetConfig+0x134>
    switch (clocksource)
 80043de:	2a08      	cmp	r2, #8
 80043e0:	d863      	bhi.n	80044aa <UART_SetConfig+0x2b2>
 80043e2:	e8df f002 	tbb	[pc, r2]
 80043e6:	2505      	.short	0x2505
 80043e8:	6228622b 	.word	0x6228622b
 80043ec:	6262      	.short	0x6262
 80043ee:	09          	.byte	0x09
 80043ef:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 80043f0:	f7fe faf4 	bl	80029dc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80043f4:	2800      	cmp	r0, #0
 80043f6:	d05a      	beq.n	80044ae <UART_SetConfig+0x2b6>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043f8:	6862      	ldr	r2, [r4, #4]
 80043fa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80043fc:	4b32      	ldr	r3, [pc, #200]	; (80044c8 <UART_SetConfig+0x2d0>)
 80043fe:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8004402:	fbb0 f0f3 	udiv	r0, r0, r3
 8004406:	0853      	lsrs	r3, r2, #1
 8004408:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800440c:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004410:	f1a3 0110 	sub.w	r1, r3, #16
 8004414:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8004418:	4291      	cmp	r1, r2
 800441a:	d84a      	bhi.n	80044b2 <UART_SetConfig+0x2ba>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800441c:	f023 020f 	bic.w	r2, r3, #15
 8004420:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8004422:	6821      	ldr	r1, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004424:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8004428:	4313      	orrs	r3, r2
 800442a:	60cb      	str	r3, [r1, #12]
 800442c:	2000      	movs	r0, #0
 800442e:	e023      	b.n	8004478 <UART_SetConfig+0x280>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004430:	f7fe fae4 	bl	80029fc <HAL_RCC_GetPCLK2Freq>
        break;
 8004434:	e7de      	b.n	80043f4 <UART_SetConfig+0x1fc>
        pclk = HAL_RCC_GetSysClockFreq();
 8004436:	f7fd fdf5 	bl	8002024 <HAL_RCC_GetSysClockFreq>
        break;
 800443a:	e7db      	b.n	80043f4 <UART_SetConfig+0x1fc>
        pclk = (uint32_t) HSI_VALUE;
 800443c:	4824      	ldr	r0, [pc, #144]	; (80044d0 <UART_SetConfig+0x2d8>)
 800443e:	e7db      	b.n	80043f8 <UART_SetConfig+0x200>
    switch (clocksource)
 8004440:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004444:	e003      	b.n	800444e <UART_SetConfig+0x256>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004446:	f7fe fac9 	bl	80029dc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800444a:	2800      	cmp	r0, #0
 800444c:	d044      	beq.n	80044d8 <UART_SetConfig+0x2e0>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800444e:	6863      	ldr	r3, [r4, #4]
 8004450:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004452:	4a1d      	ldr	r2, [pc, #116]	; (80044c8 <UART_SetConfig+0x2d0>)
 8004454:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8004458:	fbb0 f0f2 	udiv	r0, r0, r2
 800445c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004460:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004464:	f1a0 0210 	sub.w	r2, r0, #16
 8004468:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800446c:	429a      	cmp	r2, r3
 800446e:	d835      	bhi.n	80044dc <UART_SetConfig+0x2e4>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004470:	6823      	ldr	r3, [r4, #0]
 8004472:	b280      	uxth	r0, r0
 8004474:	60d8      	str	r0, [r3, #12]
 8004476:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8004478:	2301      	movs	r3, #1
 800447a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800447e:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8004482:	2300      	movs	r3, #0
 8004484:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8004486:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8004488:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 800448a:	f7fe fab7 	bl	80029fc <HAL_RCC_GetPCLK2Freq>
        break;
 800448e:	e7dc      	b.n	800444a <UART_SetConfig+0x252>
        pclk = HAL_RCC_GetSysClockFreq();
 8004490:	f7fd fdc8 	bl	8002024 <HAL_RCC_GetSysClockFreq>
        break;
 8004494:	e7d9      	b.n	800444a <UART_SetConfig+0x252>
        pclk = (uint32_t) HSI_VALUE;
 8004496:	480e      	ldr	r0, [pc, #56]	; (80044d0 <UART_SetConfig+0x2d8>)
 8004498:	e7d9      	b.n	800444e <UART_SetConfig+0x256>
    switch (clocksource)
 800449a:	2001      	movs	r0, #1
 800449c:	e7ec      	b.n	8004478 <UART_SetConfig+0x280>
        ret = HAL_ERROR;
 800449e:	2001      	movs	r0, #1
 80044a0:	e7ea      	b.n	8004478 <UART_SetConfig+0x280>
 80044a2:	2001      	movs	r0, #1
 80044a4:	e7e8      	b.n	8004478 <UART_SetConfig+0x280>
          ret = HAL_ERROR;
 80044a6:	2001      	movs	r0, #1
 80044a8:	e7e6      	b.n	8004478 <UART_SetConfig+0x280>
    switch (clocksource)
 80044aa:	2001      	movs	r0, #1
 80044ac:	e7e4      	b.n	8004478 <UART_SetConfig+0x280>
 80044ae:	2000      	movs	r0, #0
 80044b0:	e7e2      	b.n	8004478 <UART_SetConfig+0x280>
        ret = HAL_ERROR;
 80044b2:	2001      	movs	r0, #1
 80044b4:	e7e0      	b.n	8004478 <UART_SetConfig+0x280>
 80044b6:	bf00      	nop
 80044b8:	cfff69f3 	.word	0xcfff69f3
 80044bc:	40008000 	.word	0x40008000
 80044c0:	40013800 	.word	0x40013800
 80044c4:	40004400 	.word	0x40004400
 80044c8:	080062e8 	.word	0x080062e8
 80044cc:	000ffcff 	.word	0x000ffcff
 80044d0:	00f42400 	.word	0x00f42400
    switch (clocksource)
 80044d4:	2001      	movs	r0, #1
 80044d6:	e7cf      	b.n	8004478 <UART_SetConfig+0x280>
 80044d8:	2000      	movs	r0, #0
 80044da:	e7cd      	b.n	8004478 <UART_SetConfig+0x280>
        ret = HAL_ERROR;
 80044dc:	2001      	movs	r0, #1
 80044de:	e7cb      	b.n	8004478 <UART_SetConfig+0x280>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044e0:	2202      	movs	r2, #2
 80044e2:	e6bf      	b.n	8004264 <UART_SetConfig+0x6c>
 80044e4:	2208      	movs	r2, #8
 80044e6:	e6bd      	b.n	8004264 <UART_SetConfig+0x6c>
 80044e8:	2202      	movs	r2, #2
 80044ea:	e6bb      	b.n	8004264 <UART_SetConfig+0x6c>

080044ec <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044ec:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80044ee:	f013 0f01 	tst.w	r3, #1
 80044f2:	d006      	beq.n	8004502 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044f4:	6802      	ldr	r2, [r0, #0]
 80044f6:	6853      	ldr	r3, [r2, #4]
 80044f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80044fc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80044fe:	430b      	orrs	r3, r1
 8004500:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004502:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004504:	f013 0f02 	tst.w	r3, #2
 8004508:	d006      	beq.n	8004518 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800450a:	6802      	ldr	r2, [r0, #0]
 800450c:	6853      	ldr	r3, [r2, #4]
 800450e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004512:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004514:	430b      	orrs	r3, r1
 8004516:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004518:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800451a:	f013 0f04 	tst.w	r3, #4
 800451e:	d006      	beq.n	800452e <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004520:	6802      	ldr	r2, [r0, #0]
 8004522:	6853      	ldr	r3, [r2, #4]
 8004524:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004528:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800452a:	430b      	orrs	r3, r1
 800452c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800452e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004530:	f013 0f08 	tst.w	r3, #8
 8004534:	d006      	beq.n	8004544 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004536:	6802      	ldr	r2, [r0, #0]
 8004538:	6853      	ldr	r3, [r2, #4]
 800453a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800453e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8004540:	430b      	orrs	r3, r1
 8004542:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004544:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004546:	f013 0f10 	tst.w	r3, #16
 800454a:	d006      	beq.n	800455a <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800454c:	6802      	ldr	r2, [r0, #0]
 800454e:	6893      	ldr	r3, [r2, #8]
 8004550:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004554:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8004556:	430b      	orrs	r3, r1
 8004558:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800455a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800455c:	f013 0f20 	tst.w	r3, #32
 8004560:	d006      	beq.n	8004570 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004562:	6802      	ldr	r2, [r0, #0]
 8004564:	6893      	ldr	r3, [r2, #8]
 8004566:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800456a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800456c:	430b      	orrs	r3, r1
 800456e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004570:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004572:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004576:	d00a      	beq.n	800458e <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004578:	6802      	ldr	r2, [r0, #0]
 800457a:	6853      	ldr	r3, [r2, #4]
 800457c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004580:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8004582:	430b      	orrs	r3, r1
 8004584:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004586:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004588:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800458c:	d00b      	beq.n	80045a6 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800458e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004590:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004594:	d006      	beq.n	80045a4 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004596:	6802      	ldr	r2, [r0, #0]
 8004598:	6853      	ldr	r3, [r2, #4]
 800459a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800459e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80045a0:	430b      	orrs	r3, r1
 80045a2:	6053      	str	r3, [r2, #4]
}
 80045a4:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045a6:	6802      	ldr	r2, [r0, #0]
 80045a8:	6853      	ldr	r3, [r2, #4]
 80045aa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80045ae:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80045b0:	430b      	orrs	r3, r1
 80045b2:	6053      	str	r3, [r2, #4]
 80045b4:	e7eb      	b.n	800458e <UART_AdvFeatureConfig+0xa2>

080045b6 <UART_WaitOnFlagUntilTimeout>:
{
 80045b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045ba:	4680      	mov	r8, r0
 80045bc:	460e      	mov	r6, r1
 80045be:	4615      	mov	r5, r2
 80045c0:	4699      	mov	r9, r3
 80045c2:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045c4:	f8d8 3000 	ldr.w	r3, [r8]
 80045c8:	69dc      	ldr	r4, [r3, #28]
 80045ca:	ea36 0404 	bics.w	r4, r6, r4
 80045ce:	bf0c      	ite	eq
 80045d0:	2401      	moveq	r4, #1
 80045d2:	2400      	movne	r4, #0
 80045d4:	42ac      	cmp	r4, r5
 80045d6:	d15a      	bne.n	800468e <UART_WaitOnFlagUntilTimeout+0xd8>
    if (Timeout != HAL_MAX_DELAY)
 80045d8:	f1b7 3fff 	cmp.w	r7, #4294967295
 80045dc:	d0f4      	beq.n	80045c8 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045de:	f7fd f9c9 	bl	8001974 <HAL_GetTick>
 80045e2:	eba0 0009 	sub.w	r0, r0, r9
 80045e6:	42b8      	cmp	r0, r7
 80045e8:	d830      	bhi.n	800464c <UART_WaitOnFlagUntilTimeout+0x96>
 80045ea:	b37f      	cbz	r7, 800464c <UART_WaitOnFlagUntilTimeout+0x96>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045ec:	f8d8 3000 	ldr.w	r3, [r8]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	f012 0f04 	tst.w	r2, #4
 80045f6:	d0e5      	beq.n	80045c4 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045f8:	69da      	ldr	r2, [r3, #28]
 80045fa:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80045fe:	d0e1      	beq.n	80045c4 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004600:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004604:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004606:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460a:	e852 3f00 	ldrex	r3, [r2]
 800460e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004612:	e842 3100 	strex	r1, r3, [r2]
 8004616:	2900      	cmp	r1, #0
 8004618:	d1f5      	bne.n	8004606 <UART_WaitOnFlagUntilTimeout+0x50>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800461a:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461e:	f102 0308 	add.w	r3, r2, #8
 8004622:	e853 3f00 	ldrex	r3, [r3]
 8004626:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462a:	3208      	adds	r2, #8
 800462c:	e842 3100 	strex	r1, r3, [r2]
 8004630:	2900      	cmp	r1, #0
 8004632:	d1f2      	bne.n	800461a <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 8004634:	2320      	movs	r3, #32
 8004636:	f8c8 3088 	str.w	r3, [r8, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800463a:	f8c8 308c 	str.w	r3, [r8, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800463e:	f8c8 3090 	str.w	r3, [r8, #144]	; 0x90
          __HAL_UNLOCK(huart);
 8004642:	2300      	movs	r3, #0
 8004644:	f888 3084 	strb.w	r3, [r8, #132]	; 0x84
          return HAL_TIMEOUT;
 8004648:	2003      	movs	r0, #3
 800464a:	e021      	b.n	8004690 <UART_WaitOnFlagUntilTimeout+0xda>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800464c:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004650:	e852 3f00 	ldrex	r3, [r2]
 8004654:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004658:	e842 3100 	strex	r1, r3, [r2]
 800465c:	2900      	cmp	r1, #0
 800465e:	d1f5      	bne.n	800464c <UART_WaitOnFlagUntilTimeout+0x96>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004660:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004664:	f102 0308 	add.w	r3, r2, #8
 8004668:	e853 3f00 	ldrex	r3, [r3]
 800466c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004670:	3208      	adds	r2, #8
 8004672:	e842 3100 	strex	r1, r3, [r2]
 8004676:	2900      	cmp	r1, #0
 8004678:	d1f2      	bne.n	8004660 <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 800467a:	2320      	movs	r3, #32
 800467c:	f8c8 3088 	str.w	r3, [r8, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8004680:	f8c8 308c 	str.w	r3, [r8, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 8004684:	2300      	movs	r3, #0
 8004686:	f888 3084 	strb.w	r3, [r8, #132]	; 0x84
        return HAL_TIMEOUT;
 800468a:	2003      	movs	r0, #3
 800468c:	e000      	b.n	8004690 <UART_WaitOnFlagUntilTimeout+0xda>
  return HAL_OK;
 800468e:	2000      	movs	r0, #0
}
 8004690:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004694 <HAL_UART_Transmit>:
{
 8004694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004698:	b082      	sub	sp, #8
 800469a:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800469c:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80046a0:	2b20      	cmp	r3, #32
 80046a2:	d156      	bne.n	8004752 <HAL_UART_Transmit+0xbe>
 80046a4:	4604      	mov	r4, r0
 80046a6:	460d      	mov	r5, r1
 80046a8:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80046aa:	2900      	cmp	r1, #0
 80046ac:	d055      	beq.n	800475a <HAL_UART_Transmit+0xc6>
 80046ae:	b90a      	cbnz	r2, 80046b4 <HAL_UART_Transmit+0x20>
      return  HAL_ERROR;
 80046b0:	2001      	movs	r0, #1
 80046b2:	e04f      	b.n	8004754 <HAL_UART_Transmit+0xc0>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b4:	2300      	movs	r3, #0
 80046b6:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046ba:	2321      	movs	r3, #33	; 0x21
 80046bc:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    tickstart = HAL_GetTick();
 80046c0:	f7fd f958 	bl	8001974 <HAL_GetTick>
 80046c4:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 80046c6:	f8a4 8054 	strh.w	r8, [r4, #84]	; 0x54
    huart->TxXferCount = Size;
 80046ca:	f8a4 8056 	strh.w	r8, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046ce:	68a3      	ldr	r3, [r4, #8]
 80046d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d4:	d00a      	beq.n	80046ec <HAL_UART_Transmit+0x58>
      pdata16bits = NULL;
 80046d6:	f04f 0a00 	mov.w	sl, #0
    while (huart->TxXferCount > 0U)
 80046da:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 80046de:	b29b      	uxth	r3, r3
 80046e0:	b35b      	cbz	r3, 800473a <HAL_UART_Transmit+0xa6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046e2:	f04f 0900 	mov.w	r9, #0
 80046e6:	f04f 0880 	mov.w	r8, #128	; 0x80
 80046ea:	e017      	b.n	800471c <HAL_UART_Transmit+0x88>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046ec:	6923      	ldr	r3, [r4, #16]
 80046ee:	b913      	cbnz	r3, 80046f6 <HAL_UART_Transmit+0x62>
      pdata16bits = (const uint16_t *) pData;
 80046f0:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 80046f2:	2500      	movs	r5, #0
 80046f4:	e7f1      	b.n	80046da <HAL_UART_Transmit+0x46>
      pdata16bits = NULL;
 80046f6:	f04f 0a00 	mov.w	sl, #0
 80046fa:	e7ee      	b.n	80046da <HAL_UART_Transmit+0x46>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046fc:	6822      	ldr	r2, [r4, #0]
 80046fe:	f83a 3b02 	ldrh.w	r3, [sl], #2
 8004702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004706:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8004708:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 800470c:	3a01      	subs	r2, #1
 800470e:	b292      	uxth	r2, r2
 8004710:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004714:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8004718:	b29b      	uxth	r3, r3
 800471a:	b173      	cbz	r3, 800473a <HAL_UART_Transmit+0xa6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800471c:	9600      	str	r6, [sp, #0]
 800471e:	463b      	mov	r3, r7
 8004720:	464a      	mov	r2, r9
 8004722:	4641      	mov	r1, r8
 8004724:	4620      	mov	r0, r4
 8004726:	f7ff ff46 	bl	80045b6 <UART_WaitOnFlagUntilTimeout>
 800472a:	b9c0      	cbnz	r0, 800475e <HAL_UART_Transmit+0xca>
      if (pdata8bits == NULL)
 800472c:	2d00      	cmp	r5, #0
 800472e:	d0e5      	beq.n	80046fc <HAL_UART_Transmit+0x68>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004730:	6823      	ldr	r3, [r4, #0]
 8004732:	f815 2b01 	ldrb.w	r2, [r5], #1
 8004736:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004738:	e7e6      	b.n	8004708 <HAL_UART_Transmit+0x74>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800473a:	9600      	str	r6, [sp, #0]
 800473c:	463b      	mov	r3, r7
 800473e:	2200      	movs	r2, #0
 8004740:	2140      	movs	r1, #64	; 0x40
 8004742:	4620      	mov	r0, r4
 8004744:	f7ff ff37 	bl	80045b6 <UART_WaitOnFlagUntilTimeout>
 8004748:	b958      	cbnz	r0, 8004762 <HAL_UART_Transmit+0xce>
    huart->gState = HAL_UART_STATE_READY;
 800474a:	2320      	movs	r3, #32
 800474c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    return HAL_OK;
 8004750:	e000      	b.n	8004754 <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 8004752:	2002      	movs	r0, #2
}
 8004754:	b002      	add	sp, #8
 8004756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 800475a:	2001      	movs	r0, #1
 800475c:	e7fa      	b.n	8004754 <HAL_UART_Transmit+0xc0>
        return HAL_TIMEOUT;
 800475e:	2003      	movs	r0, #3
 8004760:	e7f8      	b.n	8004754 <HAL_UART_Transmit+0xc0>
      return HAL_TIMEOUT;
 8004762:	2003      	movs	r0, #3
 8004764:	e7f6      	b.n	8004754 <HAL_UART_Transmit+0xc0>

08004766 <UART_CheckIdleState>:
{
 8004766:	b530      	push	{r4, r5, lr}
 8004768:	b083      	sub	sp, #12
 800476a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800476c:	2300      	movs	r3, #0
 800476e:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 8004772:	f7fd f8ff 	bl	8001974 <HAL_GetTick>
 8004776:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004778:	6822      	ldr	r2, [r4, #0]
 800477a:	6812      	ldr	r2, [r2, #0]
 800477c:	f012 0f08 	tst.w	r2, #8
 8004780:	d110      	bne.n	80047a4 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004782:	6823      	ldr	r3, [r4, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f013 0f04 	tst.w	r3, #4
 800478a:	d119      	bne.n	80047c0 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 800478c:	2320      	movs	r3, #32
 800478e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004792:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004796:	2000      	movs	r0, #0
 8004798:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800479a:	6720      	str	r0, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 800479c:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 80047a0:	b003      	add	sp, #12
 80047a2:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	4603      	mov	r3, r0
 80047ac:	2200      	movs	r2, #0
 80047ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80047b2:	4620      	mov	r0, r4
 80047b4:	f7ff feff 	bl	80045b6 <UART_WaitOnFlagUntilTimeout>
 80047b8:	2800      	cmp	r0, #0
 80047ba:	d0e2      	beq.n	8004782 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 80047bc:	2003      	movs	r0, #3
 80047be:	e7ef      	b.n	80047a0 <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047c4:	9300      	str	r3, [sp, #0]
 80047c6:	462b      	mov	r3, r5
 80047c8:	2200      	movs	r2, #0
 80047ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047ce:	4620      	mov	r0, r4
 80047d0:	f7ff fef1 	bl	80045b6 <UART_WaitOnFlagUntilTimeout>
 80047d4:	2800      	cmp	r0, #0
 80047d6:	d0d9      	beq.n	800478c <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 80047d8:	2003      	movs	r0, #3
 80047da:	e7e1      	b.n	80047a0 <UART_CheckIdleState+0x3a>

080047dc <HAL_UART_Init>:
  if (huart == NULL)
 80047dc:	b378      	cbz	r0, 800483e <HAL_UART_Init+0x62>
{
 80047de:	b510      	push	{r4, lr}
 80047e0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80047e2:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80047e6:	b30b      	cbz	r3, 800482c <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80047e8:	2324      	movs	r3, #36	; 0x24
 80047ea:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 80047ee:	6822      	ldr	r2, [r4, #0]
 80047f0:	6813      	ldr	r3, [r2, #0]
 80047f2:	f023 0301 	bic.w	r3, r3, #1
 80047f6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047f8:	4620      	mov	r0, r4
 80047fa:	f7ff fcfd 	bl	80041f8 <UART_SetConfig>
 80047fe:	2801      	cmp	r0, #1
 8004800:	d013      	beq.n	800482a <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004802:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004804:	b9bb      	cbnz	r3, 8004836 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004806:	6822      	ldr	r2, [r4, #0]
 8004808:	6853      	ldr	r3, [r2, #4]
 800480a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800480e:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004810:	6822      	ldr	r2, [r4, #0]
 8004812:	6893      	ldr	r3, [r2, #8]
 8004814:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004818:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800481a:	6822      	ldr	r2, [r4, #0]
 800481c:	6813      	ldr	r3, [r2, #0]
 800481e:	f043 0301 	orr.w	r3, r3, #1
 8004822:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8004824:	4620      	mov	r0, r4
 8004826:	f7ff ff9e 	bl	8004766 <UART_CheckIdleState>
}
 800482a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800482c:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 8004830:	f7fc f902 	bl	8000a38 <HAL_UART_MspInit>
 8004834:	e7d8      	b.n	80047e8 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8004836:	4620      	mov	r0, r4
 8004838:	f7ff fe58 	bl	80044ec <UART_AdvFeatureConfig>
 800483c:	e7e3      	b.n	8004806 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800483e:	2001      	movs	r0, #1
}
 8004840:	4770      	bx	lr
	...

08004844 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004844:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8004846:	b92b      	cbnz	r3, 8004854 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8004848:	2301      	movs	r3, #1
 800484a:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800484e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8004852:	4770      	bx	lr
{
 8004854:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004856:	6803      	ldr	r3, [r0, #0]
 8004858:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800485a:	6899      	ldr	r1, [r3, #8]
 800485c:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800485e:	4d0a      	ldr	r5, [pc, #40]	; (8004888 <UARTEx_SetNbDataToProcess+0x44>)
 8004860:	5c6b      	ldrb	r3, [r5, r1]
 8004862:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004864:	4c09      	ldr	r4, [pc, #36]	; (800488c <UARTEx_SetNbDataToProcess+0x48>)
 8004866:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004868:	fb93 f3f1 	sdiv	r3, r3, r1
 800486c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004870:	f3c2 6242 	ubfx	r2, r2, #25, #3
 8004874:	5cab      	ldrb	r3, [r5, r2]
 8004876:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004878:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800487a:	fb93 f3f2 	sdiv	r3, r3, r2
    huart->NbRxDataToProcess = 1U;
 800487e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8004882:	bc30      	pop	{r4, r5}
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	08006308 	.word	0x08006308
 800488c:	08006300 	.word	0x08006300

08004890 <HAL_UARTEx_WakeupCallback>:
}
 8004890:	4770      	bx	lr

08004892 <HAL_UARTEx_RxFifoFullCallback>:
}
 8004892:	4770      	bx	lr

08004894 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8004894:	4770      	bx	lr

08004896 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8004896:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 800489a:	2b01      	cmp	r3, #1
 800489c:	d018      	beq.n	80048d0 <HAL_UARTEx_DisableFifoMode+0x3a>
 800489e:	2301      	movs	r3, #1
 80048a0:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80048a4:	2324      	movs	r3, #36	; 0x24
 80048a6:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048aa:	6803      	ldr	r3, [r0, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80048ae:	6819      	ldr	r1, [r3, #0]
 80048b0:	f021 0101 	bic.w	r1, r1, #1
 80048b4:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80048b6:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80048ba:	2300      	movs	r3, #0
 80048bc:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048be:	6801      	ldr	r1, [r0, #0]
 80048c0:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 80048c2:	2220      	movs	r2, #32
 80048c4:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  __HAL_UNLOCK(huart);
 80048c8:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  return HAL_OK;
 80048cc:	4618      	mov	r0, r3
 80048ce:	4770      	bx	lr
  __HAL_LOCK(huart);
 80048d0:	2002      	movs	r0, #2
}
 80048d2:	4770      	bx	lr

080048d4 <HAL_UARTEx_SetTxFifoThreshold>:
{
 80048d4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80048d6:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d01d      	beq.n	800491a <HAL_UARTEx_SetTxFifoThreshold+0x46>
 80048de:	4604      	mov	r4, r0
 80048e0:	2301      	movs	r3, #1
 80048e2:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80048e6:	2324      	movs	r3, #36	; 0x24
 80048e8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048ec:	6803      	ldr	r3, [r0, #0]
 80048ee:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	f022 0201 	bic.w	r2, r2, #1
 80048f6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80048f8:	6802      	ldr	r2, [r0, #0]
 80048fa:	6893      	ldr	r3, [r2, #8]
 80048fc:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8004900:	4319      	orrs	r1, r3
 8004902:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8004904:	f7ff ff9e 	bl	8004844 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004908:	6823      	ldr	r3, [r4, #0]
 800490a:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800490c:	2320      	movs	r3, #32
 800490e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8004912:	2000      	movs	r0, #0
 8004914:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8004918:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800491a:	2002      	movs	r0, #2
 800491c:	e7fc      	b.n	8004918 <HAL_UARTEx_SetTxFifoThreshold+0x44>

0800491e <HAL_UARTEx_SetRxFifoThreshold>:
{
 800491e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8004920:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8004924:	2b01      	cmp	r3, #1
 8004926:	d01d      	beq.n	8004964 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8004928:	4604      	mov	r4, r0
 800492a:	2301      	movs	r3, #1
 800492c:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8004930:	2324      	movs	r3, #36	; 0x24
 8004932:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004936:	6803      	ldr	r3, [r0, #0]
 8004938:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	f022 0201 	bic.w	r2, r2, #1
 8004940:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004942:	6802      	ldr	r2, [r0, #0]
 8004944:	6893      	ldr	r3, [r2, #8]
 8004946:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800494a:	4319      	orrs	r1, r3
 800494c:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800494e:	f7ff ff79 	bl	8004844 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004952:	6823      	ldr	r3, [r4, #0]
 8004954:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004956:	2320      	movs	r3, #32
 8004958:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800495c:	2000      	movs	r0, #0
 800495e:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8004962:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8004964:	2002      	movs	r0, #2
 8004966:	e7fc      	b.n	8004962 <HAL_UARTEx_SetRxFifoThreshold+0x44>

08004968 <Flash__SpiWrite>:
/**
 * @brief Flash Spi write routine
 **/

void Flash__SpiWrite(unsigned char data)
{
 8004968:	b500      	push	{lr}
 800496a:	b083      	sub	sp, #12
 800496c:	f88d 0007 	strb.w	r0, [sp, #7]
	Spi1_Transmit(&data, sizeof(data));
 8004970:	2101      	movs	r1, #1
 8004972:	f10d 0007 	add.w	r0, sp, #7
 8004976:	f000 f911 	bl	8004b9c <Spi1_Transmit>
}
 800497a:	b003      	add	sp, #12
 800497c:	f85d fb04 	ldr.w	pc, [sp], #4

08004980 <Flash__SpiRead>:
/**
 * @brief Flash Spi read routine
 **/

unsigned char Flash__SpiRead(void)
{
 8004980:	b500      	push	{lr}
 8004982:	b083      	sub	sp, #12
	unsigned char ret = 0x00;
 8004984:	2300      	movs	r3, #0
 8004986:	f88d 3007 	strb.w	r3, [sp, #7]
	Spi1_Receive(&ret, sizeof(ret));
 800498a:	2101      	movs	r1, #1
 800498c:	f10d 0007 	add.w	r0, sp, #7
 8004990:	f000 f912 	bl	8004bb8 <Spi1_Receive>
	return ret;
}
 8004994:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8004998:	b003      	add	sp, #12
 800499a:	f85d fb04 	ldr.w	pc, [sp], #4

0800499e <Flash__WriteEnable>:
/**
 * @brief Flash Write Enable routine
 **/

void Flash__WriteEnable(void)
{
 800499e:	b508      	push	{r3, lr}
	//Deassert Spi CS pin
	Spi1_DeassertCs();
 80049a0:	f000 f8f2 	bl	8004b88 <Spi1_DeassertCs>
	//Send Write Enable Command
	Flash__SpiWrite(CMD_WREN);
 80049a4:	2006      	movs	r0, #6
 80049a6:	f7ff ffdf 	bl	8004968 <Flash__SpiWrite>
	//Assert Spi CS pin
	Spi1_AssertCs();
 80049aa:	f000 f8e3 	bl	8004b74 <Spi1_AssertCs>
}
 80049ae:	bd08      	pop	{r3, pc}

080049b0 <Flash__GetJEDEC_ID>:
 *
 * @param[out] jdecId Flash JEDEC id to be read
 **/

void Flash__GetJEDEC_ID(uint32_t *jdecId)
{
 80049b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049b2:	4605      	mov	r5, r0
	uint8_t read_buff[3];

	//Deassert Spi CS pin
	Spi1_DeassertCs();
 80049b4:	f000 f8e8 	bl	8004b88 <Spi1_DeassertCs>
	//Send Read JEDEC ID Command
	Flash__SpiWrite(CMD_JEDEC_ID);
 80049b8:	209f      	movs	r0, #159	; 0x9f
 80049ba:	f7ff ffd5 	bl	8004968 <Flash__SpiWrite>
	read_buff[0] = Flash__SpiRead();
 80049be:	f7ff ffdf 	bl	8004980 <Flash__SpiRead>
 80049c2:	4607      	mov	r7, r0
	read_buff[1] = Flash__SpiRead();
 80049c4:	f7ff ffdc 	bl	8004980 <Flash__SpiRead>
 80049c8:	4604      	mov	r4, r0
	read_buff[2] = Flash__SpiRead();
 80049ca:	f7ff ffd9 	bl	8004980 <Flash__SpiRead>
 80049ce:	4606      	mov	r6, r0
	//Assert Spi CS pin
	Spi1_AssertCs();
 80049d0:	f000 f8d0 	bl	8004b74 <Spi1_AssertCs>

	//Format JEDEC ID
	*jdecId = (read_buff[0] << 16) | (read_buff[1] << 8) | read_buff[2];
 80049d4:	0224      	lsls	r4, r4, #8
 80049d6:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 80049da:	4334      	orrs	r4, r6
 80049dc:	602c      	str	r4, [r5, #0]
}
 80049de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080049e0 <Flash__Init>:
{
 80049e0:	b500      	push	{lr}
 80049e2:	b083      	sub	sp, #12
	HAL_Delay(100);
 80049e4:	2064      	movs	r0, #100	; 0x64
 80049e6:	f7fc ffcb 	bl	8001980 <HAL_Delay>
	Spi1_AssertCs();
 80049ea:	f000 f8c3 	bl	8004b74 <Spi1_AssertCs>
	HAL_Delay(100);
 80049ee:	2064      	movs	r0, #100	; 0x64
 80049f0:	f7fc ffc6 	bl	8001980 <HAL_Delay>
	Flash__GetJEDEC_ID(&jedecId);
 80049f4:	a801      	add	r0, sp, #4
 80049f6:	f7ff ffdb 	bl	80049b0 <Flash__GetJEDEC_ID>
}
 80049fa:	9801      	ldr	r0, [sp, #4]
 80049fc:	4b03      	ldr	r3, [pc, #12]	; (8004a0c <Flash__Init+0x2c>)
 80049fe:	4298      	cmp	r0, r3
 8004a00:	bf14      	ite	ne
 8004a02:	2000      	movne	r0, #0
 8004a04:	2001      	moveq	r0, #1
 8004a06:	b003      	add	sp, #12
 8004a08:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a0c:	00ef4017 	.word	0x00ef4017

08004a10 <Flash__ReadDeviceStatus1>:
/**
 * @brief Flash read device status register 1 routine
 **/

uint8_t Flash__ReadDeviceStatus1(void)
{
 8004a10:	b510      	push	{r4, lr}
	uint8_t data = 0;

	//Deassert Spi CS pin
	Spi1_DeassertCs();
 8004a12:	f000 f8b9 	bl	8004b88 <Spi1_DeassertCs>
	//Send Read Status Register 1 Command
	Flash__SpiWrite(CMD_RDSR1);
 8004a16:	2005      	movs	r0, #5
 8004a18:	f7ff ffa6 	bl	8004968 <Flash__SpiWrite>
	data = Flash__SpiRead();                     // dummy
 8004a1c:	f7ff ffb0 	bl	8004980 <Flash__SpiRead>
 8004a20:	4604      	mov	r4, r0
	//Assert Spi CS pin
	Spi1_AssertCs();
 8004a22:	f000 f8a7 	bl	8004b74 <Spi1_AssertCs>

	return (data);
}
 8004a26:	4620      	mov	r0, r4
 8004a28:	bd10      	pop	{r4, pc}

08004a2a <Flash__ReadDeviceStatus2>:
/**
 * @brief Flash read device status register 2 routine
 **/

uint8_t Flash__ReadDeviceStatus2(void)
{
 8004a2a:	b510      	push	{r4, lr}
	uint8_t data = 0;

	//Deassert Spi CS pin
	Spi1_DeassertCs();
 8004a2c:	f000 f8ac 	bl	8004b88 <Spi1_DeassertCs>
	//Send Read Status Register 2 Command
	Flash__SpiWrite(CMD_RDSR2);
 8004a30:	2035      	movs	r0, #53	; 0x35
 8004a32:	f7ff ff99 	bl	8004968 <Flash__SpiWrite>
	data = Flash__SpiRead();                     // dummy
 8004a36:	f7ff ffa3 	bl	8004980 <Flash__SpiRead>
 8004a3a:	4604      	mov	r4, r0
	//Assert Spi CS pin
	Spi1_AssertCs();
 8004a3c:	f000 f89a 	bl	8004b74 <Spi1_AssertCs>

	return (data);
}
 8004a40:	4620      	mov	r0, r4
 8004a42:	bd10      	pop	{r4, pc}

08004a44 <Flash__ReadDeviceStatus>:
/**
 * @brief Flash read device status routine
 **/

uint16_t Flash__ReadDeviceStatus(void)
{
 8004a44:	b510      	push	{r4, lr}
	uint16_t data = 0;

	data = Flash__ReadDeviceStatus2();
 8004a46:	f7ff fff0 	bl	8004a2a <Flash__ReadDeviceStatus2>
 8004a4a:	4604      	mov	r4, r0
	data = (data << 8) | Flash__ReadDeviceStatus1();
 8004a4c:	f7ff ffe0 	bl	8004a10 <Flash__ReadDeviceStatus1>
 8004a50:	ea40 2004 	orr.w	r0, r0, r4, lsl #8

	return (data);
}
 8004a54:	b280      	uxth	r0, r0
 8004a56:	bd10      	pop	{r4, pc}

08004a58 <Flash__ReadBuffer>:
 * @param[in] pBuffer Pointer to the buffer that receives the data read
 * @param[in] Length Number of bytes to read
 **/

bool Flash__ReadBuffer(uint32_t addr, uint8_t *pBuffer, uint32_t length)
{
 8004a58:	b570      	push	{r4, r5, r6, lr}
 8004a5a:	4604      	mov	r4, r0
 8004a5c:	460d      	mov	r5, r1
 8004a5e:	4616      	mov	r6, r2
	//Deassert Spi CS pin
	Spi1_DeassertCs();
 8004a60:	f000 f892 	bl	8004b88 <Spi1_DeassertCs>
#if WINBOND_USE_FAST_READ
	//Send Fast Read Command
	Flash__SpiWrite(CMD_READ_HS);               // send 0Bh
 8004a64:	200b      	movs	r0, #11
 8004a66:	f7ff ff7f 	bl	8004968 <Flash__SpiWrite>
	Flash__SpiWrite((addr >> 16) & 0xFF);       // Send ReadAddr high nibble
 8004a6a:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8004a6e:	f7ff ff7b 	bl	8004968 <Flash__SpiWrite>
	Flash__SpiWrite((addr >> 8) & 0xFF); 		// Send ReadAddr middle nibble address byte to read from
 8004a72:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8004a76:	f7ff ff77 	bl	8004968 <Flash__SpiWrite>
	Flash__SpiWrite(addr & 0xFF); 				// Send ReadAddr low nibble address byte to read from
 8004a7a:	b2e0      	uxtb	r0, r4
 8004a7c:	f7ff ff74 	bl	8004968 <Flash__SpiWrite>
	Flash__SpiWrite(DUMMY);						// Dummy eight clocks
 8004a80:	20ff      	movs	r0, #255	; 0xff
 8004a82:	f7ff ff71 	bl	8004968 <Flash__SpiWrite>
	Flash__SpiWrite((addr >> 16) & 0xFF);       // Send ReadAddr high nibble
	Flash__SpiWrite((addr >> 8) & 0xFF); 		// Send ReadAddr middle nibble address byte to read from
	Flash__SpiWrite(addr & 0xFF); 				// Send ReadAddr low nibble address byte to read from
#endif
	//Read bytes
	for (uint32_t i = 0; i < length; ++i) {
 8004a86:	b146      	cbz	r6, 8004a9a <Flash__ReadBuffer+0x42>
 8004a88:	1e6c      	subs	r4, r5, #1
 8004a8a:	4435      	add	r5, r6
 8004a8c:	3d01      	subs	r5, #1
		pBuffer[i] = Flash__SpiRead();
 8004a8e:	f7ff ff77 	bl	8004980 <Flash__SpiRead>
 8004a92:	f804 0f01 	strb.w	r0, [r4, #1]!
	for (uint32_t i = 0; i < length; ++i) {
 8004a96:	42ac      	cmp	r4, r5
 8004a98:	d1f9      	bne.n	8004a8e <Flash__ReadBuffer+0x36>
	}
	//Assert Spi CS pin
	Spi1_AssertCs();
 8004a9a:	f000 f86b 	bl	8004b74 <Spi1_AssertCs>

	return true;
}
 8004a9e:	2001      	movs	r0, #1
 8004aa0:	bd70      	pop	{r4, r5, r6, pc}

08004aa2 <flashWaitWhileBusy>:
 * Polls the status of the write in progress (WIP) bit of the status register
 * until the write operation is completed
 **/

void flashWaitWhileBusy(void)
{
 8004aa2:	b508      	push	{r3, lr}
	uint8_t flash_status = 0;

	//Deassert Spi CS pin
	Spi1_DeassertCs();
 8004aa4:	f000 f870 	bl	8004b88 <Spi1_DeassertCs>
	//Send Read Status Register 1 Command
	Flash__SpiWrite(CMD_RDSR1);   //Send RDSR command
 8004aa8:	2005      	movs	r0, #5
 8004aaa:	f7ff ff5d 	bl	8004968 <Flash__SpiWrite>
	/*Loop whiles memory is busy with a write cycle */
	do { /* Send dummy bytes to clock out data from flash */
		flash_status = Flash__SpiRead();
 8004aae:	f7ff ff67 	bl	8004980 <Flash__SpiRead>
	} while (flash_status & 0x01); /* Write in progress */
 8004ab2:	f010 0f01 	tst.w	r0, #1
 8004ab6:	d1fa      	bne.n	8004aae <flashWaitWhileBusy+0xc>
	//Assert Spi CS pin
	Spi1_AssertCs();
 8004ab8:	f000 f85c 	bl	8004b74 <Spi1_AssertCs>
}
 8004abc:	bd08      	pop	{r3, pc}

08004abe <Flash__PageProgram>:
 * @param[in] write_buffer Pointer to buffer containing the date to be written to flash
 * @param[in] length Number of bytes to be written
 **/

void Flash__PageProgram(uint32_t addr, uint8_t *write_buffer, uint16_t length)
{
 8004abe:	b570      	push	{r4, r5, r6, lr}
 8004ac0:	4605      	mov	r5, r0
 8004ac2:	460c      	mov	r4, r1
 8004ac4:	4616      	mov	r6, r2
	//Wait for last operation to end
	flashWaitWhileBusy();
 8004ac6:	f7ff ffec 	bl	8004aa2 <flashWaitWhileBusy>
	//Enable write operation
	Flash__WriteEnable();
 8004aca:	f7ff ff68 	bl	800499e <Flash__WriteEnable>

	//Deassert Spi CS pin
	Spi1_DeassertCs();
 8004ace:	f000 f85b 	bl	8004b88 <Spi1_DeassertCs>
	// Send Page Program Command
	Flash__SpiWrite(CMD_PAGEPROG);
 8004ad2:	2002      	movs	r0, #2
 8004ad4:	f7ff ff48 	bl	8004968 <Flash__SpiWrite>
	Flash__SpiWrite((uint8_t) (addr >> 16));
 8004ad8:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8004adc:	f7ff ff44 	bl	8004968 <Flash__SpiWrite>
	Flash__SpiWrite((uint8_t) (addr >> 8));
 8004ae0:	f3c5 2007 	ubfx	r0, r5, #8, #8
 8004ae4:	f7ff ff40 	bl	8004968 <Flash__SpiWrite>
	Flash__SpiWrite((uint8_t) addr);
 8004ae8:	b2ed      	uxtb	r5, r5
 8004aea:	4628      	mov	r0, r5
 8004aec:	f7ff ff3c 	bl	8004968 <Flash__SpiWrite>


	// Check if the address match the beginning of a page
	if(addr & 0xFF)
 8004af0:	b1ad      	cbz	r5, 8004b1e <Flash__PageProgram+0x60>
	{
		length = MIN(length, SPI_FLASH_PERWRITEPAGESIZE - (addr % SPI_FLASH_PERWRITEPAGESIZE));
 8004af2:	f5c5 7580 	rsb	r5, r5, #256	; 0x100
 8004af6:	42b5      	cmp	r5, r6
 8004af8:	bf28      	it	cs
 8004afa:	4635      	movcs	r5, r6
 8004afc:	b2ae      	uxth	r6, r5
	{
		length = MIN(length, SPI_FLASH_PERWRITEPAGESIZE);
	}

	/* while there is data to be written on the FLASH */
	while (length--) {
 8004afe:	1e75      	subs	r5, r6, #1
 8004b00:	b2ad      	uxth	r5, r5
 8004b02:	b13e      	cbz	r6, 8004b14 <Flash__PageProgram+0x56>
 8004b04:	3501      	adds	r5, #1
 8004b06:	4425      	add	r5, r4
		/* Send the current byte */
		Flash__SpiWrite(*write_buffer);
 8004b08:	f814 0b01 	ldrb.w	r0, [r4], #1
 8004b0c:	f7ff ff2c 	bl	8004968 <Flash__SpiWrite>
	while (length--) {
 8004b10:	42ac      	cmp	r4, r5
 8004b12:	d1f9      	bne.n	8004b08 <Flash__PageProgram+0x4a>
		/* Point on the next byte to be written */
		write_buffer++;
	}
	//Assert Spi CS pin
	Spi1_AssertCs();
 8004b14:	f000 f82e 	bl	8004b74 <Spi1_AssertCs>

	// Wait for page program operation to end
	flashWaitWhileBusy();
 8004b18:	f7ff ffc3 	bl	8004aa2 <flashWaitWhileBusy>
}
 8004b1c:	bd70      	pop	{r4, r5, r6, pc}
		length = MIN(length, SPI_FLASH_PERWRITEPAGESIZE);
 8004b1e:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8004b22:	bf28      	it	cs
 8004b24:	f44f 7680 	movcs.w	r6, #256	; 0x100
 8004b28:	e7e9      	b.n	8004afe <Flash__PageProgram+0x40>

08004b2a <Flash__SectorErase4k>:
 * @brief Flash 4kB Sector Erase routine
 * @param[in] addr Address of the sector to be erased
 **/

void Flash__SectorErase4k(uint32_t addr)
{
 8004b2a:	b510      	push	{r4, lr}
 8004b2c:	4604      	mov	r4, r0
	// Wait for last operation to end
	flashWaitWhileBusy();
 8004b2e:	f7ff ffb8 	bl	8004aa2 <flashWaitWhileBusy>
	// Enable write operation
	Flash__WriteEnable();
 8004b32:	f7ff ff34 	bl	800499e <Flash__WriteEnable>

	//Make sure it is a 4k sector address
	if(addr & 0xFFF)
 8004b36:	f3c4 030b 	ubfx	r3, r4, #0, #12
 8004b3a:	b12b      	cbz	r3, 8004b48 <Flash__SectorErase4k+0x1e>
	{
		addr = addr & 0x00FFF000;
 8004b3c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8004b40:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8004b44:	f024 040f 	bic.w	r4, r4, #15
	}

	//Deassert Spi CS pin
	Spi1_DeassertCs();
 8004b48:	f000 f81e 	bl	8004b88 <Spi1_DeassertCs>
	//Send Sector Erase Command
	Flash__SpiWrite(CMD_ERASE_SECTOR);
 8004b4c:	2020      	movs	r0, #32
 8004b4e:	f7ff ff0b 	bl	8004968 <Flash__SpiWrite>
	Flash__SpiWrite((uint8_t) (addr >> 16));
 8004b52:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8004b56:	f7ff ff07 	bl	8004968 <Flash__SpiWrite>
	Flash__SpiWrite((uint8_t) (addr >> 8));
 8004b5a:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8004b5e:	f7ff ff03 	bl	8004968 <Flash__SpiWrite>
	Flash__SpiWrite((uint8_t) addr);
 8004b62:	b2e0      	uxtb	r0, r4
 8004b64:	f7ff ff00 	bl	8004968 <Flash__SpiWrite>
	//Assert Spi CS pin
	Spi1_AssertCs();
 8004b68:	f000 f804 	bl	8004b74 <Spi1_AssertCs>

	// Wait for sector erase 4k operation to end
	flashWaitWhileBusy();
 8004b6c:	f7ff ff99 	bl	8004aa2 <flashWaitWhileBusy>
}
 8004b70:	bd10      	pop	{r4, pc}
	...

08004b74 <Spi1_AssertCs>:
 */

#include "Spi.h"

void Spi1_AssertCs(void)
{
 8004b74:	b508      	push	{r3, lr}
	//Assert SPI1_NSS pin
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8004b76:	2201      	movs	r2, #1
 8004b78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b7c:	4801      	ldr	r0, [pc, #4]	; (8004b84 <Spi1_AssertCs+0x10>)
 8004b7e:	f7fd f9c1 	bl	8001f04 <HAL_GPIO_WritePin>
}
 8004b82:	bd08      	pop	{r3, pc}
 8004b84:	48000400 	.word	0x48000400

08004b88 <Spi1_DeassertCs>:

void Spi1_DeassertCs(void)
{
 8004b88:	b508      	push	{r3, lr}
	//Deassert SPI1_NSS pin
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b90:	4801      	ldr	r0, [pc, #4]	; (8004b98 <Spi1_DeassertCs+0x10>)
 8004b92:	f7fd f9b7 	bl	8001f04 <HAL_GPIO_WritePin>
}
 8004b96:	bd08      	pop	{r3, pc}
 8004b98:	48000400 	.word	0x48000400

08004b9c <Spi1_Transmit>:

bool Spi1_Transmit(uint8_t *buff, uint16_t size)
{
 8004b9c:	b538      	push	{r3, r4, r5, lr}
 8004b9e:	4604      	mov	r4, r0
 8004ba0:	460d      	mov	r5, r1
  bool status = false;
  if(HAL_SPI_Transmit(Get_SpiHandle(), buff, size, SPI_TIMEOUT) == HAL_OK)
 8004ba2:	f7fb feb3 	bl	800090c <Get_SpiHandle>
 8004ba6:	2364      	movs	r3, #100	; 0x64
 8004ba8:	462a      	mov	r2, r5
 8004baa:	4621      	mov	r1, r4
 8004bac:	f7fe fcbb 	bl	8003526 <HAL_SPI_Transmit>
  {
    status  = true;
  }
  return status;
}
 8004bb0:	fab0 f080 	clz	r0, r0
 8004bb4:	0940      	lsrs	r0, r0, #5
 8004bb6:	bd38      	pop	{r3, r4, r5, pc}

08004bb8 <Spi1_Receive>:


bool Spi1_Receive(uint8_t *buff, uint16_t size)
{
 8004bb8:	b538      	push	{r3, r4, r5, lr}
 8004bba:	4604      	mov	r4, r0
 8004bbc:	460d      	mov	r5, r1
  bool status = false;
  if(HAL_SPI_Receive(Get_SpiHandle(), buff, size, SPI_TIMEOUT) == HAL_OK)
 8004bbe:	f7fb fea5 	bl	800090c <Get_SpiHandle>
 8004bc2:	2364      	movs	r3, #100	; 0x64
 8004bc4:	462a      	mov	r2, r5
 8004bc6:	4621      	mov	r1, r4
 8004bc8:	f7fe ffcd 	bl	8003b66 <HAL_SPI_Receive>
  {
    status = true;
  }

  return status;
}
 8004bcc:	fab0 f080 	clz	r0, r0
 8004bd0:	0940      	lsrs	r0, r0, #5
 8004bd2:	bd38      	pop	{r3, r4, r5, pc}

08004bd4 <malloc>:
 8004bd4:	4b02      	ldr	r3, [pc, #8]	; (8004be0 <malloc+0xc>)
 8004bd6:	4601      	mov	r1, r0
 8004bd8:	6818      	ldr	r0, [r3, #0]
 8004bda:	f000 b82b 	b.w	8004c34 <_malloc_r>
 8004bde:	bf00      	nop
 8004be0:	200000e4 	.word	0x200000e4

08004be4 <free>:
 8004be4:	4b02      	ldr	r3, [pc, #8]	; (8004bf0 <free+0xc>)
 8004be6:	4601      	mov	r1, r0
 8004be8:	6818      	ldr	r0, [r3, #0]
 8004bea:	f000 bb4b 	b.w	8005284 <_free_r>
 8004bee:	bf00      	nop
 8004bf0:	200000e4 	.word	0x200000e4

08004bf4 <sbrk_aligned>:
 8004bf4:	b570      	push	{r4, r5, r6, lr}
 8004bf6:	4e0e      	ldr	r6, [pc, #56]	; (8004c30 <sbrk_aligned+0x3c>)
 8004bf8:	460c      	mov	r4, r1
 8004bfa:	6831      	ldr	r1, [r6, #0]
 8004bfc:	4605      	mov	r5, r0
 8004bfe:	b911      	cbnz	r1, 8004c06 <sbrk_aligned+0x12>
 8004c00:	f000 fae4 	bl	80051cc <_sbrk_r>
 8004c04:	6030      	str	r0, [r6, #0]
 8004c06:	4621      	mov	r1, r4
 8004c08:	4628      	mov	r0, r5
 8004c0a:	f000 fadf 	bl	80051cc <_sbrk_r>
 8004c0e:	1c43      	adds	r3, r0, #1
 8004c10:	d00a      	beq.n	8004c28 <sbrk_aligned+0x34>
 8004c12:	1cc4      	adds	r4, r0, #3
 8004c14:	f024 0403 	bic.w	r4, r4, #3
 8004c18:	42a0      	cmp	r0, r4
 8004c1a:	d007      	beq.n	8004c2c <sbrk_aligned+0x38>
 8004c1c:	1a21      	subs	r1, r4, r0
 8004c1e:	4628      	mov	r0, r5
 8004c20:	f000 fad4 	bl	80051cc <_sbrk_r>
 8004c24:	3001      	adds	r0, #1
 8004c26:	d101      	bne.n	8004c2c <sbrk_aligned+0x38>
 8004c28:	f04f 34ff 	mov.w	r4, #4294967295
 8004c2c:	4620      	mov	r0, r4
 8004c2e:	bd70      	pop	{r4, r5, r6, pc}
 8004c30:	200002d8 	.word	0x200002d8

08004c34 <_malloc_r>:
 8004c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c38:	1ccd      	adds	r5, r1, #3
 8004c3a:	f025 0503 	bic.w	r5, r5, #3
 8004c3e:	3508      	adds	r5, #8
 8004c40:	2d0c      	cmp	r5, #12
 8004c42:	bf38      	it	cc
 8004c44:	250c      	movcc	r5, #12
 8004c46:	2d00      	cmp	r5, #0
 8004c48:	4607      	mov	r7, r0
 8004c4a:	db01      	blt.n	8004c50 <_malloc_r+0x1c>
 8004c4c:	42a9      	cmp	r1, r5
 8004c4e:	d905      	bls.n	8004c5c <_malloc_r+0x28>
 8004c50:	230c      	movs	r3, #12
 8004c52:	603b      	str	r3, [r7, #0]
 8004c54:	2600      	movs	r6, #0
 8004c56:	4630      	mov	r0, r6
 8004c58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004d30 <_malloc_r+0xfc>
 8004c60:	f000 f868 	bl	8004d34 <__malloc_lock>
 8004c64:	f8d8 3000 	ldr.w	r3, [r8]
 8004c68:	461c      	mov	r4, r3
 8004c6a:	bb5c      	cbnz	r4, 8004cc4 <_malloc_r+0x90>
 8004c6c:	4629      	mov	r1, r5
 8004c6e:	4638      	mov	r0, r7
 8004c70:	f7ff ffc0 	bl	8004bf4 <sbrk_aligned>
 8004c74:	1c43      	adds	r3, r0, #1
 8004c76:	4604      	mov	r4, r0
 8004c78:	d155      	bne.n	8004d26 <_malloc_r+0xf2>
 8004c7a:	f8d8 4000 	ldr.w	r4, [r8]
 8004c7e:	4626      	mov	r6, r4
 8004c80:	2e00      	cmp	r6, #0
 8004c82:	d145      	bne.n	8004d10 <_malloc_r+0xdc>
 8004c84:	2c00      	cmp	r4, #0
 8004c86:	d048      	beq.n	8004d1a <_malloc_r+0xe6>
 8004c88:	6823      	ldr	r3, [r4, #0]
 8004c8a:	4631      	mov	r1, r6
 8004c8c:	4638      	mov	r0, r7
 8004c8e:	eb04 0903 	add.w	r9, r4, r3
 8004c92:	f000 fa9b 	bl	80051cc <_sbrk_r>
 8004c96:	4581      	cmp	r9, r0
 8004c98:	d13f      	bne.n	8004d1a <_malloc_r+0xe6>
 8004c9a:	6821      	ldr	r1, [r4, #0]
 8004c9c:	1a6d      	subs	r5, r5, r1
 8004c9e:	4629      	mov	r1, r5
 8004ca0:	4638      	mov	r0, r7
 8004ca2:	f7ff ffa7 	bl	8004bf4 <sbrk_aligned>
 8004ca6:	3001      	adds	r0, #1
 8004ca8:	d037      	beq.n	8004d1a <_malloc_r+0xe6>
 8004caa:	6823      	ldr	r3, [r4, #0]
 8004cac:	442b      	add	r3, r5
 8004cae:	6023      	str	r3, [r4, #0]
 8004cb0:	f8d8 3000 	ldr.w	r3, [r8]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d038      	beq.n	8004d2a <_malloc_r+0xf6>
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	42a2      	cmp	r2, r4
 8004cbc:	d12b      	bne.n	8004d16 <_malloc_r+0xe2>
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	605a      	str	r2, [r3, #4]
 8004cc2:	e00f      	b.n	8004ce4 <_malloc_r+0xb0>
 8004cc4:	6822      	ldr	r2, [r4, #0]
 8004cc6:	1b52      	subs	r2, r2, r5
 8004cc8:	d41f      	bmi.n	8004d0a <_malloc_r+0xd6>
 8004cca:	2a0b      	cmp	r2, #11
 8004ccc:	d917      	bls.n	8004cfe <_malloc_r+0xca>
 8004cce:	1961      	adds	r1, r4, r5
 8004cd0:	42a3      	cmp	r3, r4
 8004cd2:	6025      	str	r5, [r4, #0]
 8004cd4:	bf18      	it	ne
 8004cd6:	6059      	strne	r1, [r3, #4]
 8004cd8:	6863      	ldr	r3, [r4, #4]
 8004cda:	bf08      	it	eq
 8004cdc:	f8c8 1000 	streq.w	r1, [r8]
 8004ce0:	5162      	str	r2, [r4, r5]
 8004ce2:	604b      	str	r3, [r1, #4]
 8004ce4:	4638      	mov	r0, r7
 8004ce6:	f104 060b 	add.w	r6, r4, #11
 8004cea:	f000 f829 	bl	8004d40 <__malloc_unlock>
 8004cee:	f026 0607 	bic.w	r6, r6, #7
 8004cf2:	1d23      	adds	r3, r4, #4
 8004cf4:	1af2      	subs	r2, r6, r3
 8004cf6:	d0ae      	beq.n	8004c56 <_malloc_r+0x22>
 8004cf8:	1b9b      	subs	r3, r3, r6
 8004cfa:	50a3      	str	r3, [r4, r2]
 8004cfc:	e7ab      	b.n	8004c56 <_malloc_r+0x22>
 8004cfe:	42a3      	cmp	r3, r4
 8004d00:	6862      	ldr	r2, [r4, #4]
 8004d02:	d1dd      	bne.n	8004cc0 <_malloc_r+0x8c>
 8004d04:	f8c8 2000 	str.w	r2, [r8]
 8004d08:	e7ec      	b.n	8004ce4 <_malloc_r+0xb0>
 8004d0a:	4623      	mov	r3, r4
 8004d0c:	6864      	ldr	r4, [r4, #4]
 8004d0e:	e7ac      	b.n	8004c6a <_malloc_r+0x36>
 8004d10:	4634      	mov	r4, r6
 8004d12:	6876      	ldr	r6, [r6, #4]
 8004d14:	e7b4      	b.n	8004c80 <_malloc_r+0x4c>
 8004d16:	4613      	mov	r3, r2
 8004d18:	e7cc      	b.n	8004cb4 <_malloc_r+0x80>
 8004d1a:	230c      	movs	r3, #12
 8004d1c:	603b      	str	r3, [r7, #0]
 8004d1e:	4638      	mov	r0, r7
 8004d20:	f000 f80e 	bl	8004d40 <__malloc_unlock>
 8004d24:	e797      	b.n	8004c56 <_malloc_r+0x22>
 8004d26:	6025      	str	r5, [r4, #0]
 8004d28:	e7dc      	b.n	8004ce4 <_malloc_r+0xb0>
 8004d2a:	605b      	str	r3, [r3, #4]
 8004d2c:	deff      	udf	#255	; 0xff
 8004d2e:	bf00      	nop
 8004d30:	200002d4 	.word	0x200002d4

08004d34 <__malloc_lock>:
 8004d34:	4801      	ldr	r0, [pc, #4]	; (8004d3c <__malloc_lock+0x8>)
 8004d36:	f000 ba95 	b.w	8005264 <__retarget_lock_acquire_recursive>
 8004d3a:	bf00      	nop
 8004d3c:	2000041c 	.word	0x2000041c

08004d40 <__malloc_unlock>:
 8004d40:	4801      	ldr	r0, [pc, #4]	; (8004d48 <__malloc_unlock+0x8>)
 8004d42:	f000 ba90 	b.w	8005266 <__retarget_lock_release_recursive>
 8004d46:	bf00      	nop
 8004d48:	2000041c 	.word	0x2000041c

08004d4c <std>:
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	b510      	push	{r4, lr}
 8004d50:	4604      	mov	r4, r0
 8004d52:	e9c0 3300 	strd	r3, r3, [r0]
 8004d56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d5a:	6083      	str	r3, [r0, #8]
 8004d5c:	8181      	strh	r1, [r0, #12]
 8004d5e:	6643      	str	r3, [r0, #100]	; 0x64
 8004d60:	81c2      	strh	r2, [r0, #14]
 8004d62:	6183      	str	r3, [r0, #24]
 8004d64:	4619      	mov	r1, r3
 8004d66:	2208      	movs	r2, #8
 8004d68:	305c      	adds	r0, #92	; 0x5c
 8004d6a:	f000 f9f3 	bl	8005154 <memset>
 8004d6e:	4b05      	ldr	r3, [pc, #20]	; (8004d84 <std+0x38>)
 8004d70:	6263      	str	r3, [r4, #36]	; 0x24
 8004d72:	4b05      	ldr	r3, [pc, #20]	; (8004d88 <std+0x3c>)
 8004d74:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d76:	4b05      	ldr	r3, [pc, #20]	; (8004d8c <std+0x40>)
 8004d78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d7a:	4b05      	ldr	r3, [pc, #20]	; (8004d90 <std+0x44>)
 8004d7c:	6224      	str	r4, [r4, #32]
 8004d7e:	6323      	str	r3, [r4, #48]	; 0x30
 8004d80:	bd10      	pop	{r4, pc}
 8004d82:	bf00      	nop
 8004d84:	08004f85 	.word	0x08004f85
 8004d88:	08004fa7 	.word	0x08004fa7
 8004d8c:	08004fdf 	.word	0x08004fdf
 8004d90:	08005003 	.word	0x08005003

08004d94 <stdio_exit_handler>:
 8004d94:	4a02      	ldr	r2, [pc, #8]	; (8004da0 <stdio_exit_handler+0xc>)
 8004d96:	4903      	ldr	r1, [pc, #12]	; (8004da4 <stdio_exit_handler+0x10>)
 8004d98:	4803      	ldr	r0, [pc, #12]	; (8004da8 <stdio_exit_handler+0x14>)
 8004d9a:	f000 b87b 	b.w	8004e94 <_fwalk_sglue>
 8004d9e:	bf00      	nop
 8004da0:	2000008c 	.word	0x2000008c
 8004da4:	080059c1 	.word	0x080059c1
 8004da8:	20000098 	.word	0x20000098

08004dac <cleanup_stdio>:
 8004dac:	6841      	ldr	r1, [r0, #4]
 8004dae:	4b0c      	ldr	r3, [pc, #48]	; (8004de0 <cleanup_stdio+0x34>)
 8004db0:	4299      	cmp	r1, r3
 8004db2:	b510      	push	{r4, lr}
 8004db4:	4604      	mov	r4, r0
 8004db6:	d001      	beq.n	8004dbc <cleanup_stdio+0x10>
 8004db8:	f000 fe02 	bl	80059c0 <_fflush_r>
 8004dbc:	68a1      	ldr	r1, [r4, #8]
 8004dbe:	4b09      	ldr	r3, [pc, #36]	; (8004de4 <cleanup_stdio+0x38>)
 8004dc0:	4299      	cmp	r1, r3
 8004dc2:	d002      	beq.n	8004dca <cleanup_stdio+0x1e>
 8004dc4:	4620      	mov	r0, r4
 8004dc6:	f000 fdfb 	bl	80059c0 <_fflush_r>
 8004dca:	68e1      	ldr	r1, [r4, #12]
 8004dcc:	4b06      	ldr	r3, [pc, #24]	; (8004de8 <cleanup_stdio+0x3c>)
 8004dce:	4299      	cmp	r1, r3
 8004dd0:	d004      	beq.n	8004ddc <cleanup_stdio+0x30>
 8004dd2:	4620      	mov	r0, r4
 8004dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dd8:	f000 bdf2 	b.w	80059c0 <_fflush_r>
 8004ddc:	bd10      	pop	{r4, pc}
 8004dde:	bf00      	nop
 8004de0:	200002dc 	.word	0x200002dc
 8004de4:	20000344 	.word	0x20000344
 8004de8:	200003ac 	.word	0x200003ac

08004dec <global_stdio_init.part.0>:
 8004dec:	b510      	push	{r4, lr}
 8004dee:	4b0b      	ldr	r3, [pc, #44]	; (8004e1c <global_stdio_init.part.0+0x30>)
 8004df0:	4c0b      	ldr	r4, [pc, #44]	; (8004e20 <global_stdio_init.part.0+0x34>)
 8004df2:	4a0c      	ldr	r2, [pc, #48]	; (8004e24 <global_stdio_init.part.0+0x38>)
 8004df4:	601a      	str	r2, [r3, #0]
 8004df6:	4620      	mov	r0, r4
 8004df8:	2200      	movs	r2, #0
 8004dfa:	2104      	movs	r1, #4
 8004dfc:	f7ff ffa6 	bl	8004d4c <std>
 8004e00:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004e04:	2201      	movs	r2, #1
 8004e06:	2109      	movs	r1, #9
 8004e08:	f7ff ffa0 	bl	8004d4c <std>
 8004e0c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004e10:	2202      	movs	r2, #2
 8004e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e16:	2112      	movs	r1, #18
 8004e18:	f7ff bf98 	b.w	8004d4c <std>
 8004e1c:	20000414 	.word	0x20000414
 8004e20:	200002dc 	.word	0x200002dc
 8004e24:	08004d95 	.word	0x08004d95

08004e28 <__sfp_lock_acquire>:
 8004e28:	4801      	ldr	r0, [pc, #4]	; (8004e30 <__sfp_lock_acquire+0x8>)
 8004e2a:	f000 ba1b 	b.w	8005264 <__retarget_lock_acquire_recursive>
 8004e2e:	bf00      	nop
 8004e30:	2000041d 	.word	0x2000041d

08004e34 <__sfp_lock_release>:
 8004e34:	4801      	ldr	r0, [pc, #4]	; (8004e3c <__sfp_lock_release+0x8>)
 8004e36:	f000 ba16 	b.w	8005266 <__retarget_lock_release_recursive>
 8004e3a:	bf00      	nop
 8004e3c:	2000041d 	.word	0x2000041d

08004e40 <__sinit>:
 8004e40:	b510      	push	{r4, lr}
 8004e42:	4604      	mov	r4, r0
 8004e44:	f7ff fff0 	bl	8004e28 <__sfp_lock_acquire>
 8004e48:	6a23      	ldr	r3, [r4, #32]
 8004e4a:	b11b      	cbz	r3, 8004e54 <__sinit+0x14>
 8004e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e50:	f7ff bff0 	b.w	8004e34 <__sfp_lock_release>
 8004e54:	4b04      	ldr	r3, [pc, #16]	; (8004e68 <__sinit+0x28>)
 8004e56:	6223      	str	r3, [r4, #32]
 8004e58:	4b04      	ldr	r3, [pc, #16]	; (8004e6c <__sinit+0x2c>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1f5      	bne.n	8004e4c <__sinit+0xc>
 8004e60:	f7ff ffc4 	bl	8004dec <global_stdio_init.part.0>
 8004e64:	e7f2      	b.n	8004e4c <__sinit+0xc>
 8004e66:	bf00      	nop
 8004e68:	08004dad 	.word	0x08004dad
 8004e6c:	20000414 	.word	0x20000414

08004e70 <fiprintf>:
 8004e70:	b40e      	push	{r1, r2, r3}
 8004e72:	b503      	push	{r0, r1, lr}
 8004e74:	4601      	mov	r1, r0
 8004e76:	ab03      	add	r3, sp, #12
 8004e78:	4805      	ldr	r0, [pc, #20]	; (8004e90 <fiprintf+0x20>)
 8004e7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e7e:	6800      	ldr	r0, [r0, #0]
 8004e80:	9301      	str	r3, [sp, #4]
 8004e82:	f000 fa71 	bl	8005368 <_vfiprintf_r>
 8004e86:	b002      	add	sp, #8
 8004e88:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e8c:	b003      	add	sp, #12
 8004e8e:	4770      	bx	lr
 8004e90:	200000e4 	.word	0x200000e4

08004e94 <_fwalk_sglue>:
 8004e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e98:	4607      	mov	r7, r0
 8004e9a:	4688      	mov	r8, r1
 8004e9c:	4614      	mov	r4, r2
 8004e9e:	2600      	movs	r6, #0
 8004ea0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ea4:	f1b9 0901 	subs.w	r9, r9, #1
 8004ea8:	d505      	bpl.n	8004eb6 <_fwalk_sglue+0x22>
 8004eaa:	6824      	ldr	r4, [r4, #0]
 8004eac:	2c00      	cmp	r4, #0
 8004eae:	d1f7      	bne.n	8004ea0 <_fwalk_sglue+0xc>
 8004eb0:	4630      	mov	r0, r6
 8004eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004eb6:	89ab      	ldrh	r3, [r5, #12]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d907      	bls.n	8004ecc <_fwalk_sglue+0x38>
 8004ebc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	d003      	beq.n	8004ecc <_fwalk_sglue+0x38>
 8004ec4:	4629      	mov	r1, r5
 8004ec6:	4638      	mov	r0, r7
 8004ec8:	47c0      	blx	r8
 8004eca:	4306      	orrs	r6, r0
 8004ecc:	3568      	adds	r5, #104	; 0x68
 8004ece:	e7e9      	b.n	8004ea4 <_fwalk_sglue+0x10>

08004ed0 <_fwrite_r>:
 8004ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ed4:	9c08      	ldr	r4, [sp, #32]
 8004ed6:	468a      	mov	sl, r1
 8004ed8:	4690      	mov	r8, r2
 8004eda:	fb02 f903 	mul.w	r9, r2, r3
 8004ede:	4606      	mov	r6, r0
 8004ee0:	b118      	cbz	r0, 8004eea <_fwrite_r+0x1a>
 8004ee2:	6a03      	ldr	r3, [r0, #32]
 8004ee4:	b90b      	cbnz	r3, 8004eea <_fwrite_r+0x1a>
 8004ee6:	f7ff ffab 	bl	8004e40 <__sinit>
 8004eea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004eec:	07dd      	lsls	r5, r3, #31
 8004eee:	d405      	bmi.n	8004efc <_fwrite_r+0x2c>
 8004ef0:	89a3      	ldrh	r3, [r4, #12]
 8004ef2:	0598      	lsls	r0, r3, #22
 8004ef4:	d402      	bmi.n	8004efc <_fwrite_r+0x2c>
 8004ef6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ef8:	f000 f9b4 	bl	8005264 <__retarget_lock_acquire_recursive>
 8004efc:	89a3      	ldrh	r3, [r4, #12]
 8004efe:	0719      	lsls	r1, r3, #28
 8004f00:	d516      	bpl.n	8004f30 <_fwrite_r+0x60>
 8004f02:	6923      	ldr	r3, [r4, #16]
 8004f04:	b1a3      	cbz	r3, 8004f30 <_fwrite_r+0x60>
 8004f06:	2500      	movs	r5, #0
 8004f08:	454d      	cmp	r5, r9
 8004f0a:	d01f      	beq.n	8004f4c <_fwrite_r+0x7c>
 8004f0c:	68a7      	ldr	r7, [r4, #8]
 8004f0e:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8004f12:	3f01      	subs	r7, #1
 8004f14:	2f00      	cmp	r7, #0
 8004f16:	60a7      	str	r7, [r4, #8]
 8004f18:	da04      	bge.n	8004f24 <_fwrite_r+0x54>
 8004f1a:	69a3      	ldr	r3, [r4, #24]
 8004f1c:	429f      	cmp	r7, r3
 8004f1e:	db0f      	blt.n	8004f40 <_fwrite_r+0x70>
 8004f20:	290a      	cmp	r1, #10
 8004f22:	d00d      	beq.n	8004f40 <_fwrite_r+0x70>
 8004f24:	6823      	ldr	r3, [r4, #0]
 8004f26:	1c5a      	adds	r2, r3, #1
 8004f28:	6022      	str	r2, [r4, #0]
 8004f2a:	7019      	strb	r1, [r3, #0]
 8004f2c:	3501      	adds	r5, #1
 8004f2e:	e7eb      	b.n	8004f08 <_fwrite_r+0x38>
 8004f30:	4621      	mov	r1, r4
 8004f32:	4630      	mov	r0, r6
 8004f34:	f000 f8a6 	bl	8005084 <__swsetup_r>
 8004f38:	2800      	cmp	r0, #0
 8004f3a:	d0e4      	beq.n	8004f06 <_fwrite_r+0x36>
 8004f3c:	2500      	movs	r5, #0
 8004f3e:	e005      	b.n	8004f4c <_fwrite_r+0x7c>
 8004f40:	4622      	mov	r2, r4
 8004f42:	4630      	mov	r0, r6
 8004f44:	f000 f861 	bl	800500a <__swbuf_r>
 8004f48:	3001      	adds	r0, #1
 8004f4a:	d1ef      	bne.n	8004f2c <_fwrite_r+0x5c>
 8004f4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f4e:	07da      	lsls	r2, r3, #31
 8004f50:	d405      	bmi.n	8004f5e <_fwrite_r+0x8e>
 8004f52:	89a3      	ldrh	r3, [r4, #12]
 8004f54:	059b      	lsls	r3, r3, #22
 8004f56:	d402      	bmi.n	8004f5e <_fwrite_r+0x8e>
 8004f58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f5a:	f000 f984 	bl	8005266 <__retarget_lock_release_recursive>
 8004f5e:	fbb5 f0f8 	udiv	r0, r5, r8
 8004f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08004f68 <fwrite>:
 8004f68:	b507      	push	{r0, r1, r2, lr}
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	460a      	mov	r2, r1
 8004f70:	4601      	mov	r1, r0
 8004f72:	4803      	ldr	r0, [pc, #12]	; (8004f80 <fwrite+0x18>)
 8004f74:	6800      	ldr	r0, [r0, #0]
 8004f76:	f7ff ffab 	bl	8004ed0 <_fwrite_r>
 8004f7a:	b003      	add	sp, #12
 8004f7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f80:	200000e4 	.word	0x200000e4

08004f84 <__sread>:
 8004f84:	b510      	push	{r4, lr}
 8004f86:	460c      	mov	r4, r1
 8004f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f8c:	f000 f90c 	bl	80051a8 <_read_r>
 8004f90:	2800      	cmp	r0, #0
 8004f92:	bfab      	itete	ge
 8004f94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f96:	89a3      	ldrhlt	r3, [r4, #12]
 8004f98:	181b      	addge	r3, r3, r0
 8004f9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f9e:	bfac      	ite	ge
 8004fa0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004fa2:	81a3      	strhlt	r3, [r4, #12]
 8004fa4:	bd10      	pop	{r4, pc}

08004fa6 <__swrite>:
 8004fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004faa:	461f      	mov	r7, r3
 8004fac:	898b      	ldrh	r3, [r1, #12]
 8004fae:	05db      	lsls	r3, r3, #23
 8004fb0:	4605      	mov	r5, r0
 8004fb2:	460c      	mov	r4, r1
 8004fb4:	4616      	mov	r6, r2
 8004fb6:	d505      	bpl.n	8004fc4 <__swrite+0x1e>
 8004fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f000 f8e0 	bl	8005184 <_lseek_r>
 8004fc4:	89a3      	ldrh	r3, [r4, #12]
 8004fc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fce:	81a3      	strh	r3, [r4, #12]
 8004fd0:	4632      	mov	r2, r6
 8004fd2:	463b      	mov	r3, r7
 8004fd4:	4628      	mov	r0, r5
 8004fd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fda:	f000 b907 	b.w	80051ec <_write_r>

08004fde <__sseek>:
 8004fde:	b510      	push	{r4, lr}
 8004fe0:	460c      	mov	r4, r1
 8004fe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fe6:	f000 f8cd 	bl	8005184 <_lseek_r>
 8004fea:	1c43      	adds	r3, r0, #1
 8004fec:	89a3      	ldrh	r3, [r4, #12]
 8004fee:	bf15      	itete	ne
 8004ff0:	6560      	strne	r0, [r4, #84]	; 0x54
 8004ff2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ff6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ffa:	81a3      	strheq	r3, [r4, #12]
 8004ffc:	bf18      	it	ne
 8004ffe:	81a3      	strhne	r3, [r4, #12]
 8005000:	bd10      	pop	{r4, pc}

08005002 <__sclose>:
 8005002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005006:	f000 b8ad 	b.w	8005164 <_close_r>

0800500a <__swbuf_r>:
 800500a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800500c:	460e      	mov	r6, r1
 800500e:	4614      	mov	r4, r2
 8005010:	4605      	mov	r5, r0
 8005012:	b118      	cbz	r0, 800501c <__swbuf_r+0x12>
 8005014:	6a03      	ldr	r3, [r0, #32]
 8005016:	b90b      	cbnz	r3, 800501c <__swbuf_r+0x12>
 8005018:	f7ff ff12 	bl	8004e40 <__sinit>
 800501c:	69a3      	ldr	r3, [r4, #24]
 800501e:	60a3      	str	r3, [r4, #8]
 8005020:	89a3      	ldrh	r3, [r4, #12]
 8005022:	071a      	lsls	r2, r3, #28
 8005024:	d525      	bpl.n	8005072 <__swbuf_r+0x68>
 8005026:	6923      	ldr	r3, [r4, #16]
 8005028:	b31b      	cbz	r3, 8005072 <__swbuf_r+0x68>
 800502a:	6823      	ldr	r3, [r4, #0]
 800502c:	6922      	ldr	r2, [r4, #16]
 800502e:	1a98      	subs	r0, r3, r2
 8005030:	6963      	ldr	r3, [r4, #20]
 8005032:	b2f6      	uxtb	r6, r6
 8005034:	4283      	cmp	r3, r0
 8005036:	4637      	mov	r7, r6
 8005038:	dc04      	bgt.n	8005044 <__swbuf_r+0x3a>
 800503a:	4621      	mov	r1, r4
 800503c:	4628      	mov	r0, r5
 800503e:	f000 fcbf 	bl	80059c0 <_fflush_r>
 8005042:	b9e0      	cbnz	r0, 800507e <__swbuf_r+0x74>
 8005044:	68a3      	ldr	r3, [r4, #8]
 8005046:	3b01      	subs	r3, #1
 8005048:	60a3      	str	r3, [r4, #8]
 800504a:	6823      	ldr	r3, [r4, #0]
 800504c:	1c5a      	adds	r2, r3, #1
 800504e:	6022      	str	r2, [r4, #0]
 8005050:	701e      	strb	r6, [r3, #0]
 8005052:	6962      	ldr	r2, [r4, #20]
 8005054:	1c43      	adds	r3, r0, #1
 8005056:	429a      	cmp	r2, r3
 8005058:	d004      	beq.n	8005064 <__swbuf_r+0x5a>
 800505a:	89a3      	ldrh	r3, [r4, #12]
 800505c:	07db      	lsls	r3, r3, #31
 800505e:	d506      	bpl.n	800506e <__swbuf_r+0x64>
 8005060:	2e0a      	cmp	r6, #10
 8005062:	d104      	bne.n	800506e <__swbuf_r+0x64>
 8005064:	4621      	mov	r1, r4
 8005066:	4628      	mov	r0, r5
 8005068:	f000 fcaa 	bl	80059c0 <_fflush_r>
 800506c:	b938      	cbnz	r0, 800507e <__swbuf_r+0x74>
 800506e:	4638      	mov	r0, r7
 8005070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005072:	4621      	mov	r1, r4
 8005074:	4628      	mov	r0, r5
 8005076:	f000 f805 	bl	8005084 <__swsetup_r>
 800507a:	2800      	cmp	r0, #0
 800507c:	d0d5      	beq.n	800502a <__swbuf_r+0x20>
 800507e:	f04f 37ff 	mov.w	r7, #4294967295
 8005082:	e7f4      	b.n	800506e <__swbuf_r+0x64>

08005084 <__swsetup_r>:
 8005084:	b538      	push	{r3, r4, r5, lr}
 8005086:	4b2a      	ldr	r3, [pc, #168]	; (8005130 <__swsetup_r+0xac>)
 8005088:	4605      	mov	r5, r0
 800508a:	6818      	ldr	r0, [r3, #0]
 800508c:	460c      	mov	r4, r1
 800508e:	b118      	cbz	r0, 8005098 <__swsetup_r+0x14>
 8005090:	6a03      	ldr	r3, [r0, #32]
 8005092:	b90b      	cbnz	r3, 8005098 <__swsetup_r+0x14>
 8005094:	f7ff fed4 	bl	8004e40 <__sinit>
 8005098:	89a3      	ldrh	r3, [r4, #12]
 800509a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800509e:	0718      	lsls	r0, r3, #28
 80050a0:	d422      	bmi.n	80050e8 <__swsetup_r+0x64>
 80050a2:	06d9      	lsls	r1, r3, #27
 80050a4:	d407      	bmi.n	80050b6 <__swsetup_r+0x32>
 80050a6:	2309      	movs	r3, #9
 80050a8:	602b      	str	r3, [r5, #0]
 80050aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80050ae:	81a3      	strh	r3, [r4, #12]
 80050b0:	f04f 30ff 	mov.w	r0, #4294967295
 80050b4:	e034      	b.n	8005120 <__swsetup_r+0x9c>
 80050b6:	0758      	lsls	r0, r3, #29
 80050b8:	d512      	bpl.n	80050e0 <__swsetup_r+0x5c>
 80050ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050bc:	b141      	cbz	r1, 80050d0 <__swsetup_r+0x4c>
 80050be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050c2:	4299      	cmp	r1, r3
 80050c4:	d002      	beq.n	80050cc <__swsetup_r+0x48>
 80050c6:	4628      	mov	r0, r5
 80050c8:	f000 f8dc 	bl	8005284 <_free_r>
 80050cc:	2300      	movs	r3, #0
 80050ce:	6363      	str	r3, [r4, #52]	; 0x34
 80050d0:	89a3      	ldrh	r3, [r4, #12]
 80050d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80050d6:	81a3      	strh	r3, [r4, #12]
 80050d8:	2300      	movs	r3, #0
 80050da:	6063      	str	r3, [r4, #4]
 80050dc:	6923      	ldr	r3, [r4, #16]
 80050de:	6023      	str	r3, [r4, #0]
 80050e0:	89a3      	ldrh	r3, [r4, #12]
 80050e2:	f043 0308 	orr.w	r3, r3, #8
 80050e6:	81a3      	strh	r3, [r4, #12]
 80050e8:	6923      	ldr	r3, [r4, #16]
 80050ea:	b94b      	cbnz	r3, 8005100 <__swsetup_r+0x7c>
 80050ec:	89a3      	ldrh	r3, [r4, #12]
 80050ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80050f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050f6:	d003      	beq.n	8005100 <__swsetup_r+0x7c>
 80050f8:	4621      	mov	r1, r4
 80050fa:	4628      	mov	r0, r5
 80050fc:	f000 fcae 	bl	8005a5c <__smakebuf_r>
 8005100:	89a0      	ldrh	r0, [r4, #12]
 8005102:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005106:	f010 0301 	ands.w	r3, r0, #1
 800510a:	d00a      	beq.n	8005122 <__swsetup_r+0x9e>
 800510c:	2300      	movs	r3, #0
 800510e:	60a3      	str	r3, [r4, #8]
 8005110:	6963      	ldr	r3, [r4, #20]
 8005112:	425b      	negs	r3, r3
 8005114:	61a3      	str	r3, [r4, #24]
 8005116:	6923      	ldr	r3, [r4, #16]
 8005118:	b943      	cbnz	r3, 800512c <__swsetup_r+0xa8>
 800511a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800511e:	d1c4      	bne.n	80050aa <__swsetup_r+0x26>
 8005120:	bd38      	pop	{r3, r4, r5, pc}
 8005122:	0781      	lsls	r1, r0, #30
 8005124:	bf58      	it	pl
 8005126:	6963      	ldrpl	r3, [r4, #20]
 8005128:	60a3      	str	r3, [r4, #8]
 800512a:	e7f4      	b.n	8005116 <__swsetup_r+0x92>
 800512c:	2000      	movs	r0, #0
 800512e:	e7f7      	b.n	8005120 <__swsetup_r+0x9c>
 8005130:	200000e4 	.word	0x200000e4

08005134 <memcmp>:
 8005134:	b510      	push	{r4, lr}
 8005136:	3901      	subs	r1, #1
 8005138:	4402      	add	r2, r0
 800513a:	4290      	cmp	r0, r2
 800513c:	d101      	bne.n	8005142 <memcmp+0xe>
 800513e:	2000      	movs	r0, #0
 8005140:	e005      	b.n	800514e <memcmp+0x1a>
 8005142:	7803      	ldrb	r3, [r0, #0]
 8005144:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005148:	42a3      	cmp	r3, r4
 800514a:	d001      	beq.n	8005150 <memcmp+0x1c>
 800514c:	1b18      	subs	r0, r3, r4
 800514e:	bd10      	pop	{r4, pc}
 8005150:	3001      	adds	r0, #1
 8005152:	e7f2      	b.n	800513a <memcmp+0x6>

08005154 <memset>:
 8005154:	4402      	add	r2, r0
 8005156:	4603      	mov	r3, r0
 8005158:	4293      	cmp	r3, r2
 800515a:	d100      	bne.n	800515e <memset+0xa>
 800515c:	4770      	bx	lr
 800515e:	f803 1b01 	strb.w	r1, [r3], #1
 8005162:	e7f9      	b.n	8005158 <memset+0x4>

08005164 <_close_r>:
 8005164:	b538      	push	{r3, r4, r5, lr}
 8005166:	4d06      	ldr	r5, [pc, #24]	; (8005180 <_close_r+0x1c>)
 8005168:	2300      	movs	r3, #0
 800516a:	4604      	mov	r4, r0
 800516c:	4608      	mov	r0, r1
 800516e:	602b      	str	r3, [r5, #0]
 8005170:	f7fb fce2 	bl	8000b38 <_close>
 8005174:	1c43      	adds	r3, r0, #1
 8005176:	d102      	bne.n	800517e <_close_r+0x1a>
 8005178:	682b      	ldr	r3, [r5, #0]
 800517a:	b103      	cbz	r3, 800517e <_close_r+0x1a>
 800517c:	6023      	str	r3, [r4, #0]
 800517e:	bd38      	pop	{r3, r4, r5, pc}
 8005180:	20000418 	.word	0x20000418

08005184 <_lseek_r>:
 8005184:	b538      	push	{r3, r4, r5, lr}
 8005186:	4d07      	ldr	r5, [pc, #28]	; (80051a4 <_lseek_r+0x20>)
 8005188:	4604      	mov	r4, r0
 800518a:	4608      	mov	r0, r1
 800518c:	4611      	mov	r1, r2
 800518e:	2200      	movs	r2, #0
 8005190:	602a      	str	r2, [r5, #0]
 8005192:	461a      	mov	r2, r3
 8005194:	f7fb fcda 	bl	8000b4c <_lseek>
 8005198:	1c43      	adds	r3, r0, #1
 800519a:	d102      	bne.n	80051a2 <_lseek_r+0x1e>
 800519c:	682b      	ldr	r3, [r5, #0]
 800519e:	b103      	cbz	r3, 80051a2 <_lseek_r+0x1e>
 80051a0:	6023      	str	r3, [r4, #0]
 80051a2:	bd38      	pop	{r3, r4, r5, pc}
 80051a4:	20000418 	.word	0x20000418

080051a8 <_read_r>:
 80051a8:	b538      	push	{r3, r4, r5, lr}
 80051aa:	4d07      	ldr	r5, [pc, #28]	; (80051c8 <_read_r+0x20>)
 80051ac:	4604      	mov	r4, r0
 80051ae:	4608      	mov	r0, r1
 80051b0:	4611      	mov	r1, r2
 80051b2:	2200      	movs	r2, #0
 80051b4:	602a      	str	r2, [r5, #0]
 80051b6:	461a      	mov	r2, r3
 80051b8:	f7fb fca4 	bl	8000b04 <_read>
 80051bc:	1c43      	adds	r3, r0, #1
 80051be:	d102      	bne.n	80051c6 <_read_r+0x1e>
 80051c0:	682b      	ldr	r3, [r5, #0]
 80051c2:	b103      	cbz	r3, 80051c6 <_read_r+0x1e>
 80051c4:	6023      	str	r3, [r4, #0]
 80051c6:	bd38      	pop	{r3, r4, r5, pc}
 80051c8:	20000418 	.word	0x20000418

080051cc <_sbrk_r>:
 80051cc:	b538      	push	{r3, r4, r5, lr}
 80051ce:	4d06      	ldr	r5, [pc, #24]	; (80051e8 <_sbrk_r+0x1c>)
 80051d0:	2300      	movs	r3, #0
 80051d2:	4604      	mov	r4, r0
 80051d4:	4608      	mov	r0, r1
 80051d6:	602b      	str	r3, [r5, #0]
 80051d8:	f7fb fcba 	bl	8000b50 <_sbrk>
 80051dc:	1c43      	adds	r3, r0, #1
 80051de:	d102      	bne.n	80051e6 <_sbrk_r+0x1a>
 80051e0:	682b      	ldr	r3, [r5, #0]
 80051e2:	b103      	cbz	r3, 80051e6 <_sbrk_r+0x1a>
 80051e4:	6023      	str	r3, [r4, #0]
 80051e6:	bd38      	pop	{r3, r4, r5, pc}
 80051e8:	20000418 	.word	0x20000418

080051ec <_write_r>:
 80051ec:	b538      	push	{r3, r4, r5, lr}
 80051ee:	4d07      	ldr	r5, [pc, #28]	; (800520c <_write_r+0x20>)
 80051f0:	4604      	mov	r4, r0
 80051f2:	4608      	mov	r0, r1
 80051f4:	4611      	mov	r1, r2
 80051f6:	2200      	movs	r2, #0
 80051f8:	602a      	str	r2, [r5, #0]
 80051fa:	461a      	mov	r2, r3
 80051fc:	f7fb fc8f 	bl	8000b1e <_write>
 8005200:	1c43      	adds	r3, r0, #1
 8005202:	d102      	bne.n	800520a <_write_r+0x1e>
 8005204:	682b      	ldr	r3, [r5, #0]
 8005206:	b103      	cbz	r3, 800520a <_write_r+0x1e>
 8005208:	6023      	str	r3, [r4, #0]
 800520a:	bd38      	pop	{r3, r4, r5, pc}
 800520c:	20000418 	.word	0x20000418

08005210 <__errno>:
 8005210:	4b01      	ldr	r3, [pc, #4]	; (8005218 <__errno+0x8>)
 8005212:	6818      	ldr	r0, [r3, #0]
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	200000e4 	.word	0x200000e4

0800521c <__libc_init_array>:
 800521c:	b570      	push	{r4, r5, r6, lr}
 800521e:	4d0d      	ldr	r5, [pc, #52]	; (8005254 <__libc_init_array+0x38>)
 8005220:	4c0d      	ldr	r4, [pc, #52]	; (8005258 <__libc_init_array+0x3c>)
 8005222:	1b64      	subs	r4, r4, r5
 8005224:	10a4      	asrs	r4, r4, #2
 8005226:	2600      	movs	r6, #0
 8005228:	42a6      	cmp	r6, r4
 800522a:	d109      	bne.n	8005240 <__libc_init_array+0x24>
 800522c:	4d0b      	ldr	r5, [pc, #44]	; (800525c <__libc_init_array+0x40>)
 800522e:	4c0c      	ldr	r4, [pc, #48]	; (8005260 <__libc_init_array+0x44>)
 8005230:	f000 fc72 	bl	8005b18 <_init>
 8005234:	1b64      	subs	r4, r4, r5
 8005236:	10a4      	asrs	r4, r4, #2
 8005238:	2600      	movs	r6, #0
 800523a:	42a6      	cmp	r6, r4
 800523c:	d105      	bne.n	800524a <__libc_init_array+0x2e>
 800523e:	bd70      	pop	{r4, r5, r6, pc}
 8005240:	f855 3b04 	ldr.w	r3, [r5], #4
 8005244:	4798      	blx	r3
 8005246:	3601      	adds	r6, #1
 8005248:	e7ee      	b.n	8005228 <__libc_init_array+0xc>
 800524a:	f855 3b04 	ldr.w	r3, [r5], #4
 800524e:	4798      	blx	r3
 8005250:	3601      	adds	r6, #1
 8005252:	e7f2      	b.n	800523a <__libc_init_array+0x1e>
 8005254:	0800634c 	.word	0x0800634c
 8005258:	0800634c 	.word	0x0800634c
 800525c:	0800634c 	.word	0x0800634c
 8005260:	08006350 	.word	0x08006350

08005264 <__retarget_lock_acquire_recursive>:
 8005264:	4770      	bx	lr

08005266 <__retarget_lock_release_recursive>:
 8005266:	4770      	bx	lr

08005268 <memcpy>:
 8005268:	440a      	add	r2, r1
 800526a:	4291      	cmp	r1, r2
 800526c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005270:	d100      	bne.n	8005274 <memcpy+0xc>
 8005272:	4770      	bx	lr
 8005274:	b510      	push	{r4, lr}
 8005276:	f811 4b01 	ldrb.w	r4, [r1], #1
 800527a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800527e:	4291      	cmp	r1, r2
 8005280:	d1f9      	bne.n	8005276 <memcpy+0xe>
 8005282:	bd10      	pop	{r4, pc}

08005284 <_free_r>:
 8005284:	b538      	push	{r3, r4, r5, lr}
 8005286:	4605      	mov	r5, r0
 8005288:	2900      	cmp	r1, #0
 800528a:	d041      	beq.n	8005310 <_free_r+0x8c>
 800528c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005290:	1f0c      	subs	r4, r1, #4
 8005292:	2b00      	cmp	r3, #0
 8005294:	bfb8      	it	lt
 8005296:	18e4      	addlt	r4, r4, r3
 8005298:	f7ff fd4c 	bl	8004d34 <__malloc_lock>
 800529c:	4a1d      	ldr	r2, [pc, #116]	; (8005314 <_free_r+0x90>)
 800529e:	6813      	ldr	r3, [r2, #0]
 80052a0:	b933      	cbnz	r3, 80052b0 <_free_r+0x2c>
 80052a2:	6063      	str	r3, [r4, #4]
 80052a4:	6014      	str	r4, [r2, #0]
 80052a6:	4628      	mov	r0, r5
 80052a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052ac:	f7ff bd48 	b.w	8004d40 <__malloc_unlock>
 80052b0:	42a3      	cmp	r3, r4
 80052b2:	d908      	bls.n	80052c6 <_free_r+0x42>
 80052b4:	6820      	ldr	r0, [r4, #0]
 80052b6:	1821      	adds	r1, r4, r0
 80052b8:	428b      	cmp	r3, r1
 80052ba:	bf01      	itttt	eq
 80052bc:	6819      	ldreq	r1, [r3, #0]
 80052be:	685b      	ldreq	r3, [r3, #4]
 80052c0:	1809      	addeq	r1, r1, r0
 80052c2:	6021      	streq	r1, [r4, #0]
 80052c4:	e7ed      	b.n	80052a2 <_free_r+0x1e>
 80052c6:	461a      	mov	r2, r3
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	b10b      	cbz	r3, 80052d0 <_free_r+0x4c>
 80052cc:	42a3      	cmp	r3, r4
 80052ce:	d9fa      	bls.n	80052c6 <_free_r+0x42>
 80052d0:	6811      	ldr	r1, [r2, #0]
 80052d2:	1850      	adds	r0, r2, r1
 80052d4:	42a0      	cmp	r0, r4
 80052d6:	d10b      	bne.n	80052f0 <_free_r+0x6c>
 80052d8:	6820      	ldr	r0, [r4, #0]
 80052da:	4401      	add	r1, r0
 80052dc:	1850      	adds	r0, r2, r1
 80052de:	4283      	cmp	r3, r0
 80052e0:	6011      	str	r1, [r2, #0]
 80052e2:	d1e0      	bne.n	80052a6 <_free_r+0x22>
 80052e4:	6818      	ldr	r0, [r3, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	6053      	str	r3, [r2, #4]
 80052ea:	4408      	add	r0, r1
 80052ec:	6010      	str	r0, [r2, #0]
 80052ee:	e7da      	b.n	80052a6 <_free_r+0x22>
 80052f0:	d902      	bls.n	80052f8 <_free_r+0x74>
 80052f2:	230c      	movs	r3, #12
 80052f4:	602b      	str	r3, [r5, #0]
 80052f6:	e7d6      	b.n	80052a6 <_free_r+0x22>
 80052f8:	6820      	ldr	r0, [r4, #0]
 80052fa:	1821      	adds	r1, r4, r0
 80052fc:	428b      	cmp	r3, r1
 80052fe:	bf04      	itt	eq
 8005300:	6819      	ldreq	r1, [r3, #0]
 8005302:	685b      	ldreq	r3, [r3, #4]
 8005304:	6063      	str	r3, [r4, #4]
 8005306:	bf04      	itt	eq
 8005308:	1809      	addeq	r1, r1, r0
 800530a:	6021      	streq	r1, [r4, #0]
 800530c:	6054      	str	r4, [r2, #4]
 800530e:	e7ca      	b.n	80052a6 <_free_r+0x22>
 8005310:	bd38      	pop	{r3, r4, r5, pc}
 8005312:	bf00      	nop
 8005314:	200002d4 	.word	0x200002d4

08005318 <__sfputc_r>:
 8005318:	6893      	ldr	r3, [r2, #8]
 800531a:	3b01      	subs	r3, #1
 800531c:	2b00      	cmp	r3, #0
 800531e:	b410      	push	{r4}
 8005320:	6093      	str	r3, [r2, #8]
 8005322:	da07      	bge.n	8005334 <__sfputc_r+0x1c>
 8005324:	6994      	ldr	r4, [r2, #24]
 8005326:	42a3      	cmp	r3, r4
 8005328:	db01      	blt.n	800532e <__sfputc_r+0x16>
 800532a:	290a      	cmp	r1, #10
 800532c:	d102      	bne.n	8005334 <__sfputc_r+0x1c>
 800532e:	bc10      	pop	{r4}
 8005330:	f7ff be6b 	b.w	800500a <__swbuf_r>
 8005334:	6813      	ldr	r3, [r2, #0]
 8005336:	1c58      	adds	r0, r3, #1
 8005338:	6010      	str	r0, [r2, #0]
 800533a:	7019      	strb	r1, [r3, #0]
 800533c:	4608      	mov	r0, r1
 800533e:	bc10      	pop	{r4}
 8005340:	4770      	bx	lr

08005342 <__sfputs_r>:
 8005342:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005344:	4606      	mov	r6, r0
 8005346:	460f      	mov	r7, r1
 8005348:	4614      	mov	r4, r2
 800534a:	18d5      	adds	r5, r2, r3
 800534c:	42ac      	cmp	r4, r5
 800534e:	d101      	bne.n	8005354 <__sfputs_r+0x12>
 8005350:	2000      	movs	r0, #0
 8005352:	e007      	b.n	8005364 <__sfputs_r+0x22>
 8005354:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005358:	463a      	mov	r2, r7
 800535a:	4630      	mov	r0, r6
 800535c:	f7ff ffdc 	bl	8005318 <__sfputc_r>
 8005360:	1c43      	adds	r3, r0, #1
 8005362:	d1f3      	bne.n	800534c <__sfputs_r+0xa>
 8005364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005368 <_vfiprintf_r>:
 8005368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800536c:	460d      	mov	r5, r1
 800536e:	b09d      	sub	sp, #116	; 0x74
 8005370:	4614      	mov	r4, r2
 8005372:	4698      	mov	r8, r3
 8005374:	4606      	mov	r6, r0
 8005376:	b118      	cbz	r0, 8005380 <_vfiprintf_r+0x18>
 8005378:	6a03      	ldr	r3, [r0, #32]
 800537a:	b90b      	cbnz	r3, 8005380 <_vfiprintf_r+0x18>
 800537c:	f7ff fd60 	bl	8004e40 <__sinit>
 8005380:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005382:	07d9      	lsls	r1, r3, #31
 8005384:	d405      	bmi.n	8005392 <_vfiprintf_r+0x2a>
 8005386:	89ab      	ldrh	r3, [r5, #12]
 8005388:	059a      	lsls	r2, r3, #22
 800538a:	d402      	bmi.n	8005392 <_vfiprintf_r+0x2a>
 800538c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800538e:	f7ff ff69 	bl	8005264 <__retarget_lock_acquire_recursive>
 8005392:	89ab      	ldrh	r3, [r5, #12]
 8005394:	071b      	lsls	r3, r3, #28
 8005396:	d501      	bpl.n	800539c <_vfiprintf_r+0x34>
 8005398:	692b      	ldr	r3, [r5, #16]
 800539a:	b99b      	cbnz	r3, 80053c4 <_vfiprintf_r+0x5c>
 800539c:	4629      	mov	r1, r5
 800539e:	4630      	mov	r0, r6
 80053a0:	f7ff fe70 	bl	8005084 <__swsetup_r>
 80053a4:	b170      	cbz	r0, 80053c4 <_vfiprintf_r+0x5c>
 80053a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053a8:	07dc      	lsls	r4, r3, #31
 80053aa:	d504      	bpl.n	80053b6 <_vfiprintf_r+0x4e>
 80053ac:	f04f 30ff 	mov.w	r0, #4294967295
 80053b0:	b01d      	add	sp, #116	; 0x74
 80053b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053b6:	89ab      	ldrh	r3, [r5, #12]
 80053b8:	0598      	lsls	r0, r3, #22
 80053ba:	d4f7      	bmi.n	80053ac <_vfiprintf_r+0x44>
 80053bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053be:	f7ff ff52 	bl	8005266 <__retarget_lock_release_recursive>
 80053c2:	e7f3      	b.n	80053ac <_vfiprintf_r+0x44>
 80053c4:	2300      	movs	r3, #0
 80053c6:	9309      	str	r3, [sp, #36]	; 0x24
 80053c8:	2320      	movs	r3, #32
 80053ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80053ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80053d2:	2330      	movs	r3, #48	; 0x30
 80053d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005588 <_vfiprintf_r+0x220>
 80053d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80053dc:	f04f 0901 	mov.w	r9, #1
 80053e0:	4623      	mov	r3, r4
 80053e2:	469a      	mov	sl, r3
 80053e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053e8:	b10a      	cbz	r2, 80053ee <_vfiprintf_r+0x86>
 80053ea:	2a25      	cmp	r2, #37	; 0x25
 80053ec:	d1f9      	bne.n	80053e2 <_vfiprintf_r+0x7a>
 80053ee:	ebba 0b04 	subs.w	fp, sl, r4
 80053f2:	d00b      	beq.n	800540c <_vfiprintf_r+0xa4>
 80053f4:	465b      	mov	r3, fp
 80053f6:	4622      	mov	r2, r4
 80053f8:	4629      	mov	r1, r5
 80053fa:	4630      	mov	r0, r6
 80053fc:	f7ff ffa1 	bl	8005342 <__sfputs_r>
 8005400:	3001      	adds	r0, #1
 8005402:	f000 80a9 	beq.w	8005558 <_vfiprintf_r+0x1f0>
 8005406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005408:	445a      	add	r2, fp
 800540a:	9209      	str	r2, [sp, #36]	; 0x24
 800540c:	f89a 3000 	ldrb.w	r3, [sl]
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 80a1 	beq.w	8005558 <_vfiprintf_r+0x1f0>
 8005416:	2300      	movs	r3, #0
 8005418:	f04f 32ff 	mov.w	r2, #4294967295
 800541c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005420:	f10a 0a01 	add.w	sl, sl, #1
 8005424:	9304      	str	r3, [sp, #16]
 8005426:	9307      	str	r3, [sp, #28]
 8005428:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800542c:	931a      	str	r3, [sp, #104]	; 0x68
 800542e:	4654      	mov	r4, sl
 8005430:	2205      	movs	r2, #5
 8005432:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005436:	4854      	ldr	r0, [pc, #336]	; (8005588 <_vfiprintf_r+0x220>)
 8005438:	f7fa fea2 	bl	8000180 <memchr>
 800543c:	9a04      	ldr	r2, [sp, #16]
 800543e:	b9d8      	cbnz	r0, 8005478 <_vfiprintf_r+0x110>
 8005440:	06d1      	lsls	r1, r2, #27
 8005442:	bf44      	itt	mi
 8005444:	2320      	movmi	r3, #32
 8005446:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800544a:	0713      	lsls	r3, r2, #28
 800544c:	bf44      	itt	mi
 800544e:	232b      	movmi	r3, #43	; 0x2b
 8005450:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005454:	f89a 3000 	ldrb.w	r3, [sl]
 8005458:	2b2a      	cmp	r3, #42	; 0x2a
 800545a:	d015      	beq.n	8005488 <_vfiprintf_r+0x120>
 800545c:	9a07      	ldr	r2, [sp, #28]
 800545e:	4654      	mov	r4, sl
 8005460:	2000      	movs	r0, #0
 8005462:	f04f 0c0a 	mov.w	ip, #10
 8005466:	4621      	mov	r1, r4
 8005468:	f811 3b01 	ldrb.w	r3, [r1], #1
 800546c:	3b30      	subs	r3, #48	; 0x30
 800546e:	2b09      	cmp	r3, #9
 8005470:	d94d      	bls.n	800550e <_vfiprintf_r+0x1a6>
 8005472:	b1b0      	cbz	r0, 80054a2 <_vfiprintf_r+0x13a>
 8005474:	9207      	str	r2, [sp, #28]
 8005476:	e014      	b.n	80054a2 <_vfiprintf_r+0x13a>
 8005478:	eba0 0308 	sub.w	r3, r0, r8
 800547c:	fa09 f303 	lsl.w	r3, r9, r3
 8005480:	4313      	orrs	r3, r2
 8005482:	9304      	str	r3, [sp, #16]
 8005484:	46a2      	mov	sl, r4
 8005486:	e7d2      	b.n	800542e <_vfiprintf_r+0xc6>
 8005488:	9b03      	ldr	r3, [sp, #12]
 800548a:	1d19      	adds	r1, r3, #4
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	9103      	str	r1, [sp, #12]
 8005490:	2b00      	cmp	r3, #0
 8005492:	bfbb      	ittet	lt
 8005494:	425b      	neglt	r3, r3
 8005496:	f042 0202 	orrlt.w	r2, r2, #2
 800549a:	9307      	strge	r3, [sp, #28]
 800549c:	9307      	strlt	r3, [sp, #28]
 800549e:	bfb8      	it	lt
 80054a0:	9204      	strlt	r2, [sp, #16]
 80054a2:	7823      	ldrb	r3, [r4, #0]
 80054a4:	2b2e      	cmp	r3, #46	; 0x2e
 80054a6:	d10c      	bne.n	80054c2 <_vfiprintf_r+0x15a>
 80054a8:	7863      	ldrb	r3, [r4, #1]
 80054aa:	2b2a      	cmp	r3, #42	; 0x2a
 80054ac:	d134      	bne.n	8005518 <_vfiprintf_r+0x1b0>
 80054ae:	9b03      	ldr	r3, [sp, #12]
 80054b0:	1d1a      	adds	r2, r3, #4
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	9203      	str	r2, [sp, #12]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	bfb8      	it	lt
 80054ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80054be:	3402      	adds	r4, #2
 80054c0:	9305      	str	r3, [sp, #20]
 80054c2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800558c <_vfiprintf_r+0x224>
 80054c6:	7821      	ldrb	r1, [r4, #0]
 80054c8:	2203      	movs	r2, #3
 80054ca:	4650      	mov	r0, sl
 80054cc:	f7fa fe58 	bl	8000180 <memchr>
 80054d0:	b138      	cbz	r0, 80054e2 <_vfiprintf_r+0x17a>
 80054d2:	9b04      	ldr	r3, [sp, #16]
 80054d4:	eba0 000a 	sub.w	r0, r0, sl
 80054d8:	2240      	movs	r2, #64	; 0x40
 80054da:	4082      	lsls	r2, r0
 80054dc:	4313      	orrs	r3, r2
 80054de:	3401      	adds	r4, #1
 80054e0:	9304      	str	r3, [sp, #16]
 80054e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054e6:	482a      	ldr	r0, [pc, #168]	; (8005590 <_vfiprintf_r+0x228>)
 80054e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054ec:	2206      	movs	r2, #6
 80054ee:	f7fa fe47 	bl	8000180 <memchr>
 80054f2:	2800      	cmp	r0, #0
 80054f4:	d03f      	beq.n	8005576 <_vfiprintf_r+0x20e>
 80054f6:	4b27      	ldr	r3, [pc, #156]	; (8005594 <_vfiprintf_r+0x22c>)
 80054f8:	bb1b      	cbnz	r3, 8005542 <_vfiprintf_r+0x1da>
 80054fa:	9b03      	ldr	r3, [sp, #12]
 80054fc:	3307      	adds	r3, #7
 80054fe:	f023 0307 	bic.w	r3, r3, #7
 8005502:	3308      	adds	r3, #8
 8005504:	9303      	str	r3, [sp, #12]
 8005506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005508:	443b      	add	r3, r7
 800550a:	9309      	str	r3, [sp, #36]	; 0x24
 800550c:	e768      	b.n	80053e0 <_vfiprintf_r+0x78>
 800550e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005512:	460c      	mov	r4, r1
 8005514:	2001      	movs	r0, #1
 8005516:	e7a6      	b.n	8005466 <_vfiprintf_r+0xfe>
 8005518:	2300      	movs	r3, #0
 800551a:	3401      	adds	r4, #1
 800551c:	9305      	str	r3, [sp, #20]
 800551e:	4619      	mov	r1, r3
 8005520:	f04f 0c0a 	mov.w	ip, #10
 8005524:	4620      	mov	r0, r4
 8005526:	f810 2b01 	ldrb.w	r2, [r0], #1
 800552a:	3a30      	subs	r2, #48	; 0x30
 800552c:	2a09      	cmp	r2, #9
 800552e:	d903      	bls.n	8005538 <_vfiprintf_r+0x1d0>
 8005530:	2b00      	cmp	r3, #0
 8005532:	d0c6      	beq.n	80054c2 <_vfiprintf_r+0x15a>
 8005534:	9105      	str	r1, [sp, #20]
 8005536:	e7c4      	b.n	80054c2 <_vfiprintf_r+0x15a>
 8005538:	fb0c 2101 	mla	r1, ip, r1, r2
 800553c:	4604      	mov	r4, r0
 800553e:	2301      	movs	r3, #1
 8005540:	e7f0      	b.n	8005524 <_vfiprintf_r+0x1bc>
 8005542:	ab03      	add	r3, sp, #12
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	462a      	mov	r2, r5
 8005548:	4b13      	ldr	r3, [pc, #76]	; (8005598 <_vfiprintf_r+0x230>)
 800554a:	a904      	add	r1, sp, #16
 800554c:	4630      	mov	r0, r6
 800554e:	f3af 8000 	nop.w
 8005552:	4607      	mov	r7, r0
 8005554:	1c78      	adds	r0, r7, #1
 8005556:	d1d6      	bne.n	8005506 <_vfiprintf_r+0x19e>
 8005558:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800555a:	07d9      	lsls	r1, r3, #31
 800555c:	d405      	bmi.n	800556a <_vfiprintf_r+0x202>
 800555e:	89ab      	ldrh	r3, [r5, #12]
 8005560:	059a      	lsls	r2, r3, #22
 8005562:	d402      	bmi.n	800556a <_vfiprintf_r+0x202>
 8005564:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005566:	f7ff fe7e 	bl	8005266 <__retarget_lock_release_recursive>
 800556a:	89ab      	ldrh	r3, [r5, #12]
 800556c:	065b      	lsls	r3, r3, #25
 800556e:	f53f af1d 	bmi.w	80053ac <_vfiprintf_r+0x44>
 8005572:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005574:	e71c      	b.n	80053b0 <_vfiprintf_r+0x48>
 8005576:	ab03      	add	r3, sp, #12
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	462a      	mov	r2, r5
 800557c:	4b06      	ldr	r3, [pc, #24]	; (8005598 <_vfiprintf_r+0x230>)
 800557e:	a904      	add	r1, sp, #16
 8005580:	4630      	mov	r0, r6
 8005582:	f000 f879 	bl	8005678 <_printf_i>
 8005586:	e7e4      	b.n	8005552 <_vfiprintf_r+0x1ea>
 8005588:	08006310 	.word	0x08006310
 800558c:	08006316 	.word	0x08006316
 8005590:	0800631a 	.word	0x0800631a
 8005594:	00000000 	.word	0x00000000
 8005598:	08005343 	.word	0x08005343

0800559c <_printf_common>:
 800559c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055a0:	4616      	mov	r6, r2
 80055a2:	4699      	mov	r9, r3
 80055a4:	688a      	ldr	r2, [r1, #8]
 80055a6:	690b      	ldr	r3, [r1, #16]
 80055a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055ac:	4293      	cmp	r3, r2
 80055ae:	bfb8      	it	lt
 80055b0:	4613      	movlt	r3, r2
 80055b2:	6033      	str	r3, [r6, #0]
 80055b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055b8:	4607      	mov	r7, r0
 80055ba:	460c      	mov	r4, r1
 80055bc:	b10a      	cbz	r2, 80055c2 <_printf_common+0x26>
 80055be:	3301      	adds	r3, #1
 80055c0:	6033      	str	r3, [r6, #0]
 80055c2:	6823      	ldr	r3, [r4, #0]
 80055c4:	0699      	lsls	r1, r3, #26
 80055c6:	bf42      	ittt	mi
 80055c8:	6833      	ldrmi	r3, [r6, #0]
 80055ca:	3302      	addmi	r3, #2
 80055cc:	6033      	strmi	r3, [r6, #0]
 80055ce:	6825      	ldr	r5, [r4, #0]
 80055d0:	f015 0506 	ands.w	r5, r5, #6
 80055d4:	d106      	bne.n	80055e4 <_printf_common+0x48>
 80055d6:	f104 0a19 	add.w	sl, r4, #25
 80055da:	68e3      	ldr	r3, [r4, #12]
 80055dc:	6832      	ldr	r2, [r6, #0]
 80055de:	1a9b      	subs	r3, r3, r2
 80055e0:	42ab      	cmp	r3, r5
 80055e2:	dc26      	bgt.n	8005632 <_printf_common+0x96>
 80055e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055e8:	1e13      	subs	r3, r2, #0
 80055ea:	6822      	ldr	r2, [r4, #0]
 80055ec:	bf18      	it	ne
 80055ee:	2301      	movne	r3, #1
 80055f0:	0692      	lsls	r2, r2, #26
 80055f2:	d42b      	bmi.n	800564c <_printf_common+0xb0>
 80055f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055f8:	4649      	mov	r1, r9
 80055fa:	4638      	mov	r0, r7
 80055fc:	47c0      	blx	r8
 80055fe:	3001      	adds	r0, #1
 8005600:	d01e      	beq.n	8005640 <_printf_common+0xa4>
 8005602:	6823      	ldr	r3, [r4, #0]
 8005604:	6922      	ldr	r2, [r4, #16]
 8005606:	f003 0306 	and.w	r3, r3, #6
 800560a:	2b04      	cmp	r3, #4
 800560c:	bf02      	ittt	eq
 800560e:	68e5      	ldreq	r5, [r4, #12]
 8005610:	6833      	ldreq	r3, [r6, #0]
 8005612:	1aed      	subeq	r5, r5, r3
 8005614:	68a3      	ldr	r3, [r4, #8]
 8005616:	bf0c      	ite	eq
 8005618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800561c:	2500      	movne	r5, #0
 800561e:	4293      	cmp	r3, r2
 8005620:	bfc4      	itt	gt
 8005622:	1a9b      	subgt	r3, r3, r2
 8005624:	18ed      	addgt	r5, r5, r3
 8005626:	2600      	movs	r6, #0
 8005628:	341a      	adds	r4, #26
 800562a:	42b5      	cmp	r5, r6
 800562c:	d11a      	bne.n	8005664 <_printf_common+0xc8>
 800562e:	2000      	movs	r0, #0
 8005630:	e008      	b.n	8005644 <_printf_common+0xa8>
 8005632:	2301      	movs	r3, #1
 8005634:	4652      	mov	r2, sl
 8005636:	4649      	mov	r1, r9
 8005638:	4638      	mov	r0, r7
 800563a:	47c0      	blx	r8
 800563c:	3001      	adds	r0, #1
 800563e:	d103      	bne.n	8005648 <_printf_common+0xac>
 8005640:	f04f 30ff 	mov.w	r0, #4294967295
 8005644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005648:	3501      	adds	r5, #1
 800564a:	e7c6      	b.n	80055da <_printf_common+0x3e>
 800564c:	18e1      	adds	r1, r4, r3
 800564e:	1c5a      	adds	r2, r3, #1
 8005650:	2030      	movs	r0, #48	; 0x30
 8005652:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005656:	4422      	add	r2, r4
 8005658:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800565c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005660:	3302      	adds	r3, #2
 8005662:	e7c7      	b.n	80055f4 <_printf_common+0x58>
 8005664:	2301      	movs	r3, #1
 8005666:	4622      	mov	r2, r4
 8005668:	4649      	mov	r1, r9
 800566a:	4638      	mov	r0, r7
 800566c:	47c0      	blx	r8
 800566e:	3001      	adds	r0, #1
 8005670:	d0e6      	beq.n	8005640 <_printf_common+0xa4>
 8005672:	3601      	adds	r6, #1
 8005674:	e7d9      	b.n	800562a <_printf_common+0x8e>
	...

08005678 <_printf_i>:
 8005678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800567c:	7e0f      	ldrb	r7, [r1, #24]
 800567e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005680:	2f78      	cmp	r7, #120	; 0x78
 8005682:	4691      	mov	r9, r2
 8005684:	4680      	mov	r8, r0
 8005686:	460c      	mov	r4, r1
 8005688:	469a      	mov	sl, r3
 800568a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800568e:	d807      	bhi.n	80056a0 <_printf_i+0x28>
 8005690:	2f62      	cmp	r7, #98	; 0x62
 8005692:	d80a      	bhi.n	80056aa <_printf_i+0x32>
 8005694:	2f00      	cmp	r7, #0
 8005696:	f000 80d4 	beq.w	8005842 <_printf_i+0x1ca>
 800569a:	2f58      	cmp	r7, #88	; 0x58
 800569c:	f000 80c0 	beq.w	8005820 <_printf_i+0x1a8>
 80056a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056a8:	e03a      	b.n	8005720 <_printf_i+0xa8>
 80056aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056ae:	2b15      	cmp	r3, #21
 80056b0:	d8f6      	bhi.n	80056a0 <_printf_i+0x28>
 80056b2:	a101      	add	r1, pc, #4	; (adr r1, 80056b8 <_printf_i+0x40>)
 80056b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056b8:	08005711 	.word	0x08005711
 80056bc:	08005725 	.word	0x08005725
 80056c0:	080056a1 	.word	0x080056a1
 80056c4:	080056a1 	.word	0x080056a1
 80056c8:	080056a1 	.word	0x080056a1
 80056cc:	080056a1 	.word	0x080056a1
 80056d0:	08005725 	.word	0x08005725
 80056d4:	080056a1 	.word	0x080056a1
 80056d8:	080056a1 	.word	0x080056a1
 80056dc:	080056a1 	.word	0x080056a1
 80056e0:	080056a1 	.word	0x080056a1
 80056e4:	08005829 	.word	0x08005829
 80056e8:	08005751 	.word	0x08005751
 80056ec:	080057e3 	.word	0x080057e3
 80056f0:	080056a1 	.word	0x080056a1
 80056f4:	080056a1 	.word	0x080056a1
 80056f8:	0800584b 	.word	0x0800584b
 80056fc:	080056a1 	.word	0x080056a1
 8005700:	08005751 	.word	0x08005751
 8005704:	080056a1 	.word	0x080056a1
 8005708:	080056a1 	.word	0x080056a1
 800570c:	080057eb 	.word	0x080057eb
 8005710:	682b      	ldr	r3, [r5, #0]
 8005712:	1d1a      	adds	r2, r3, #4
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	602a      	str	r2, [r5, #0]
 8005718:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800571c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005720:	2301      	movs	r3, #1
 8005722:	e09f      	b.n	8005864 <_printf_i+0x1ec>
 8005724:	6820      	ldr	r0, [r4, #0]
 8005726:	682b      	ldr	r3, [r5, #0]
 8005728:	0607      	lsls	r7, r0, #24
 800572a:	f103 0104 	add.w	r1, r3, #4
 800572e:	6029      	str	r1, [r5, #0]
 8005730:	d501      	bpl.n	8005736 <_printf_i+0xbe>
 8005732:	681e      	ldr	r6, [r3, #0]
 8005734:	e003      	b.n	800573e <_printf_i+0xc6>
 8005736:	0646      	lsls	r6, r0, #25
 8005738:	d5fb      	bpl.n	8005732 <_printf_i+0xba>
 800573a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800573e:	2e00      	cmp	r6, #0
 8005740:	da03      	bge.n	800574a <_printf_i+0xd2>
 8005742:	232d      	movs	r3, #45	; 0x2d
 8005744:	4276      	negs	r6, r6
 8005746:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800574a:	485a      	ldr	r0, [pc, #360]	; (80058b4 <_printf_i+0x23c>)
 800574c:	230a      	movs	r3, #10
 800574e:	e012      	b.n	8005776 <_printf_i+0xfe>
 8005750:	682b      	ldr	r3, [r5, #0]
 8005752:	6820      	ldr	r0, [r4, #0]
 8005754:	1d19      	adds	r1, r3, #4
 8005756:	6029      	str	r1, [r5, #0]
 8005758:	0605      	lsls	r5, r0, #24
 800575a:	d501      	bpl.n	8005760 <_printf_i+0xe8>
 800575c:	681e      	ldr	r6, [r3, #0]
 800575e:	e002      	b.n	8005766 <_printf_i+0xee>
 8005760:	0641      	lsls	r1, r0, #25
 8005762:	d5fb      	bpl.n	800575c <_printf_i+0xe4>
 8005764:	881e      	ldrh	r6, [r3, #0]
 8005766:	4853      	ldr	r0, [pc, #332]	; (80058b4 <_printf_i+0x23c>)
 8005768:	2f6f      	cmp	r7, #111	; 0x6f
 800576a:	bf0c      	ite	eq
 800576c:	2308      	moveq	r3, #8
 800576e:	230a      	movne	r3, #10
 8005770:	2100      	movs	r1, #0
 8005772:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005776:	6865      	ldr	r5, [r4, #4]
 8005778:	60a5      	str	r5, [r4, #8]
 800577a:	2d00      	cmp	r5, #0
 800577c:	bfa2      	ittt	ge
 800577e:	6821      	ldrge	r1, [r4, #0]
 8005780:	f021 0104 	bicge.w	r1, r1, #4
 8005784:	6021      	strge	r1, [r4, #0]
 8005786:	b90e      	cbnz	r6, 800578c <_printf_i+0x114>
 8005788:	2d00      	cmp	r5, #0
 800578a:	d04b      	beq.n	8005824 <_printf_i+0x1ac>
 800578c:	4615      	mov	r5, r2
 800578e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005792:	fb03 6711 	mls	r7, r3, r1, r6
 8005796:	5dc7      	ldrb	r7, [r0, r7]
 8005798:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800579c:	4637      	mov	r7, r6
 800579e:	42bb      	cmp	r3, r7
 80057a0:	460e      	mov	r6, r1
 80057a2:	d9f4      	bls.n	800578e <_printf_i+0x116>
 80057a4:	2b08      	cmp	r3, #8
 80057a6:	d10b      	bne.n	80057c0 <_printf_i+0x148>
 80057a8:	6823      	ldr	r3, [r4, #0]
 80057aa:	07de      	lsls	r6, r3, #31
 80057ac:	d508      	bpl.n	80057c0 <_printf_i+0x148>
 80057ae:	6923      	ldr	r3, [r4, #16]
 80057b0:	6861      	ldr	r1, [r4, #4]
 80057b2:	4299      	cmp	r1, r3
 80057b4:	bfde      	ittt	le
 80057b6:	2330      	movle	r3, #48	; 0x30
 80057b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80057bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80057c0:	1b52      	subs	r2, r2, r5
 80057c2:	6122      	str	r2, [r4, #16]
 80057c4:	f8cd a000 	str.w	sl, [sp]
 80057c8:	464b      	mov	r3, r9
 80057ca:	aa03      	add	r2, sp, #12
 80057cc:	4621      	mov	r1, r4
 80057ce:	4640      	mov	r0, r8
 80057d0:	f7ff fee4 	bl	800559c <_printf_common>
 80057d4:	3001      	adds	r0, #1
 80057d6:	d14a      	bne.n	800586e <_printf_i+0x1f6>
 80057d8:	f04f 30ff 	mov.w	r0, #4294967295
 80057dc:	b004      	add	sp, #16
 80057de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057e2:	6823      	ldr	r3, [r4, #0]
 80057e4:	f043 0320 	orr.w	r3, r3, #32
 80057e8:	6023      	str	r3, [r4, #0]
 80057ea:	4833      	ldr	r0, [pc, #204]	; (80058b8 <_printf_i+0x240>)
 80057ec:	2778      	movs	r7, #120	; 0x78
 80057ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80057f2:	6823      	ldr	r3, [r4, #0]
 80057f4:	6829      	ldr	r1, [r5, #0]
 80057f6:	061f      	lsls	r7, r3, #24
 80057f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80057fc:	d402      	bmi.n	8005804 <_printf_i+0x18c>
 80057fe:	065f      	lsls	r7, r3, #25
 8005800:	bf48      	it	mi
 8005802:	b2b6      	uxthmi	r6, r6
 8005804:	07df      	lsls	r7, r3, #31
 8005806:	bf48      	it	mi
 8005808:	f043 0320 	orrmi.w	r3, r3, #32
 800580c:	6029      	str	r1, [r5, #0]
 800580e:	bf48      	it	mi
 8005810:	6023      	strmi	r3, [r4, #0]
 8005812:	b91e      	cbnz	r6, 800581c <_printf_i+0x1a4>
 8005814:	6823      	ldr	r3, [r4, #0]
 8005816:	f023 0320 	bic.w	r3, r3, #32
 800581a:	6023      	str	r3, [r4, #0]
 800581c:	2310      	movs	r3, #16
 800581e:	e7a7      	b.n	8005770 <_printf_i+0xf8>
 8005820:	4824      	ldr	r0, [pc, #144]	; (80058b4 <_printf_i+0x23c>)
 8005822:	e7e4      	b.n	80057ee <_printf_i+0x176>
 8005824:	4615      	mov	r5, r2
 8005826:	e7bd      	b.n	80057a4 <_printf_i+0x12c>
 8005828:	682b      	ldr	r3, [r5, #0]
 800582a:	6826      	ldr	r6, [r4, #0]
 800582c:	6961      	ldr	r1, [r4, #20]
 800582e:	1d18      	adds	r0, r3, #4
 8005830:	6028      	str	r0, [r5, #0]
 8005832:	0635      	lsls	r5, r6, #24
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	d501      	bpl.n	800583c <_printf_i+0x1c4>
 8005838:	6019      	str	r1, [r3, #0]
 800583a:	e002      	b.n	8005842 <_printf_i+0x1ca>
 800583c:	0670      	lsls	r0, r6, #25
 800583e:	d5fb      	bpl.n	8005838 <_printf_i+0x1c0>
 8005840:	8019      	strh	r1, [r3, #0]
 8005842:	2300      	movs	r3, #0
 8005844:	6123      	str	r3, [r4, #16]
 8005846:	4615      	mov	r5, r2
 8005848:	e7bc      	b.n	80057c4 <_printf_i+0x14c>
 800584a:	682b      	ldr	r3, [r5, #0]
 800584c:	1d1a      	adds	r2, r3, #4
 800584e:	602a      	str	r2, [r5, #0]
 8005850:	681d      	ldr	r5, [r3, #0]
 8005852:	6862      	ldr	r2, [r4, #4]
 8005854:	2100      	movs	r1, #0
 8005856:	4628      	mov	r0, r5
 8005858:	f7fa fc92 	bl	8000180 <memchr>
 800585c:	b108      	cbz	r0, 8005862 <_printf_i+0x1ea>
 800585e:	1b40      	subs	r0, r0, r5
 8005860:	6060      	str	r0, [r4, #4]
 8005862:	6863      	ldr	r3, [r4, #4]
 8005864:	6123      	str	r3, [r4, #16]
 8005866:	2300      	movs	r3, #0
 8005868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800586c:	e7aa      	b.n	80057c4 <_printf_i+0x14c>
 800586e:	6923      	ldr	r3, [r4, #16]
 8005870:	462a      	mov	r2, r5
 8005872:	4649      	mov	r1, r9
 8005874:	4640      	mov	r0, r8
 8005876:	47d0      	blx	sl
 8005878:	3001      	adds	r0, #1
 800587a:	d0ad      	beq.n	80057d8 <_printf_i+0x160>
 800587c:	6823      	ldr	r3, [r4, #0]
 800587e:	079b      	lsls	r3, r3, #30
 8005880:	d413      	bmi.n	80058aa <_printf_i+0x232>
 8005882:	68e0      	ldr	r0, [r4, #12]
 8005884:	9b03      	ldr	r3, [sp, #12]
 8005886:	4298      	cmp	r0, r3
 8005888:	bfb8      	it	lt
 800588a:	4618      	movlt	r0, r3
 800588c:	e7a6      	b.n	80057dc <_printf_i+0x164>
 800588e:	2301      	movs	r3, #1
 8005890:	4632      	mov	r2, r6
 8005892:	4649      	mov	r1, r9
 8005894:	4640      	mov	r0, r8
 8005896:	47d0      	blx	sl
 8005898:	3001      	adds	r0, #1
 800589a:	d09d      	beq.n	80057d8 <_printf_i+0x160>
 800589c:	3501      	adds	r5, #1
 800589e:	68e3      	ldr	r3, [r4, #12]
 80058a0:	9903      	ldr	r1, [sp, #12]
 80058a2:	1a5b      	subs	r3, r3, r1
 80058a4:	42ab      	cmp	r3, r5
 80058a6:	dcf2      	bgt.n	800588e <_printf_i+0x216>
 80058a8:	e7eb      	b.n	8005882 <_printf_i+0x20a>
 80058aa:	2500      	movs	r5, #0
 80058ac:	f104 0619 	add.w	r6, r4, #25
 80058b0:	e7f5      	b.n	800589e <_printf_i+0x226>
 80058b2:	bf00      	nop
 80058b4:	08006321 	.word	0x08006321
 80058b8:	08006332 	.word	0x08006332

080058bc <__sflush_r>:
 80058bc:	898a      	ldrh	r2, [r1, #12]
 80058be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058c0:	4605      	mov	r5, r0
 80058c2:	0710      	lsls	r0, r2, #28
 80058c4:	460c      	mov	r4, r1
 80058c6:	d457      	bmi.n	8005978 <__sflush_r+0xbc>
 80058c8:	684b      	ldr	r3, [r1, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	dc04      	bgt.n	80058d8 <__sflush_r+0x1c>
 80058ce:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	dc01      	bgt.n	80058d8 <__sflush_r+0x1c>
 80058d4:	2000      	movs	r0, #0
 80058d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058da:	2e00      	cmp	r6, #0
 80058dc:	d0fa      	beq.n	80058d4 <__sflush_r+0x18>
 80058de:	2300      	movs	r3, #0
 80058e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80058e4:	682f      	ldr	r7, [r5, #0]
 80058e6:	6a21      	ldr	r1, [r4, #32]
 80058e8:	602b      	str	r3, [r5, #0]
 80058ea:	d032      	beq.n	8005952 <__sflush_r+0x96>
 80058ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80058ee:	89a3      	ldrh	r3, [r4, #12]
 80058f0:	075a      	lsls	r2, r3, #29
 80058f2:	d505      	bpl.n	8005900 <__sflush_r+0x44>
 80058f4:	6863      	ldr	r3, [r4, #4]
 80058f6:	1ac0      	subs	r0, r0, r3
 80058f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80058fa:	b10b      	cbz	r3, 8005900 <__sflush_r+0x44>
 80058fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058fe:	1ac0      	subs	r0, r0, r3
 8005900:	2300      	movs	r3, #0
 8005902:	4602      	mov	r2, r0
 8005904:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005906:	6a21      	ldr	r1, [r4, #32]
 8005908:	4628      	mov	r0, r5
 800590a:	47b0      	blx	r6
 800590c:	1c43      	adds	r3, r0, #1
 800590e:	89a3      	ldrh	r3, [r4, #12]
 8005910:	d106      	bne.n	8005920 <__sflush_r+0x64>
 8005912:	6829      	ldr	r1, [r5, #0]
 8005914:	291d      	cmp	r1, #29
 8005916:	d82b      	bhi.n	8005970 <__sflush_r+0xb4>
 8005918:	4a28      	ldr	r2, [pc, #160]	; (80059bc <__sflush_r+0x100>)
 800591a:	410a      	asrs	r2, r1
 800591c:	07d6      	lsls	r6, r2, #31
 800591e:	d427      	bmi.n	8005970 <__sflush_r+0xb4>
 8005920:	2200      	movs	r2, #0
 8005922:	6062      	str	r2, [r4, #4]
 8005924:	04d9      	lsls	r1, r3, #19
 8005926:	6922      	ldr	r2, [r4, #16]
 8005928:	6022      	str	r2, [r4, #0]
 800592a:	d504      	bpl.n	8005936 <__sflush_r+0x7a>
 800592c:	1c42      	adds	r2, r0, #1
 800592e:	d101      	bne.n	8005934 <__sflush_r+0x78>
 8005930:	682b      	ldr	r3, [r5, #0]
 8005932:	b903      	cbnz	r3, 8005936 <__sflush_r+0x7a>
 8005934:	6560      	str	r0, [r4, #84]	; 0x54
 8005936:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005938:	602f      	str	r7, [r5, #0]
 800593a:	2900      	cmp	r1, #0
 800593c:	d0ca      	beq.n	80058d4 <__sflush_r+0x18>
 800593e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005942:	4299      	cmp	r1, r3
 8005944:	d002      	beq.n	800594c <__sflush_r+0x90>
 8005946:	4628      	mov	r0, r5
 8005948:	f7ff fc9c 	bl	8005284 <_free_r>
 800594c:	2000      	movs	r0, #0
 800594e:	6360      	str	r0, [r4, #52]	; 0x34
 8005950:	e7c1      	b.n	80058d6 <__sflush_r+0x1a>
 8005952:	2301      	movs	r3, #1
 8005954:	4628      	mov	r0, r5
 8005956:	47b0      	blx	r6
 8005958:	1c41      	adds	r1, r0, #1
 800595a:	d1c8      	bne.n	80058ee <__sflush_r+0x32>
 800595c:	682b      	ldr	r3, [r5, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d0c5      	beq.n	80058ee <__sflush_r+0x32>
 8005962:	2b1d      	cmp	r3, #29
 8005964:	d001      	beq.n	800596a <__sflush_r+0xae>
 8005966:	2b16      	cmp	r3, #22
 8005968:	d101      	bne.n	800596e <__sflush_r+0xb2>
 800596a:	602f      	str	r7, [r5, #0]
 800596c:	e7b2      	b.n	80058d4 <__sflush_r+0x18>
 800596e:	89a3      	ldrh	r3, [r4, #12]
 8005970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005974:	81a3      	strh	r3, [r4, #12]
 8005976:	e7ae      	b.n	80058d6 <__sflush_r+0x1a>
 8005978:	690f      	ldr	r7, [r1, #16]
 800597a:	2f00      	cmp	r7, #0
 800597c:	d0aa      	beq.n	80058d4 <__sflush_r+0x18>
 800597e:	0793      	lsls	r3, r2, #30
 8005980:	680e      	ldr	r6, [r1, #0]
 8005982:	bf08      	it	eq
 8005984:	694b      	ldreq	r3, [r1, #20]
 8005986:	600f      	str	r7, [r1, #0]
 8005988:	bf18      	it	ne
 800598a:	2300      	movne	r3, #0
 800598c:	1bf6      	subs	r6, r6, r7
 800598e:	608b      	str	r3, [r1, #8]
 8005990:	2e00      	cmp	r6, #0
 8005992:	dd9f      	ble.n	80058d4 <__sflush_r+0x18>
 8005994:	6a21      	ldr	r1, [r4, #32]
 8005996:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800599a:	4633      	mov	r3, r6
 800599c:	463a      	mov	r2, r7
 800599e:	4628      	mov	r0, r5
 80059a0:	47e0      	blx	ip
 80059a2:	2800      	cmp	r0, #0
 80059a4:	dc06      	bgt.n	80059b4 <__sflush_r+0xf8>
 80059a6:	89a3      	ldrh	r3, [r4, #12]
 80059a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059ac:	81a3      	strh	r3, [r4, #12]
 80059ae:	f04f 30ff 	mov.w	r0, #4294967295
 80059b2:	e790      	b.n	80058d6 <__sflush_r+0x1a>
 80059b4:	4407      	add	r7, r0
 80059b6:	1a36      	subs	r6, r6, r0
 80059b8:	e7ea      	b.n	8005990 <__sflush_r+0xd4>
 80059ba:	bf00      	nop
 80059bc:	dfbffffe 	.word	0xdfbffffe

080059c0 <_fflush_r>:
 80059c0:	b538      	push	{r3, r4, r5, lr}
 80059c2:	690b      	ldr	r3, [r1, #16]
 80059c4:	4605      	mov	r5, r0
 80059c6:	460c      	mov	r4, r1
 80059c8:	b913      	cbnz	r3, 80059d0 <_fflush_r+0x10>
 80059ca:	2500      	movs	r5, #0
 80059cc:	4628      	mov	r0, r5
 80059ce:	bd38      	pop	{r3, r4, r5, pc}
 80059d0:	b118      	cbz	r0, 80059da <_fflush_r+0x1a>
 80059d2:	6a03      	ldr	r3, [r0, #32]
 80059d4:	b90b      	cbnz	r3, 80059da <_fflush_r+0x1a>
 80059d6:	f7ff fa33 	bl	8004e40 <__sinit>
 80059da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d0f3      	beq.n	80059ca <_fflush_r+0xa>
 80059e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80059e4:	07d0      	lsls	r0, r2, #31
 80059e6:	d404      	bmi.n	80059f2 <_fflush_r+0x32>
 80059e8:	0599      	lsls	r1, r3, #22
 80059ea:	d402      	bmi.n	80059f2 <_fflush_r+0x32>
 80059ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059ee:	f7ff fc39 	bl	8005264 <__retarget_lock_acquire_recursive>
 80059f2:	4628      	mov	r0, r5
 80059f4:	4621      	mov	r1, r4
 80059f6:	f7ff ff61 	bl	80058bc <__sflush_r>
 80059fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059fc:	07da      	lsls	r2, r3, #31
 80059fe:	4605      	mov	r5, r0
 8005a00:	d4e4      	bmi.n	80059cc <_fflush_r+0xc>
 8005a02:	89a3      	ldrh	r3, [r4, #12]
 8005a04:	059b      	lsls	r3, r3, #22
 8005a06:	d4e1      	bmi.n	80059cc <_fflush_r+0xc>
 8005a08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a0a:	f7ff fc2c 	bl	8005266 <__retarget_lock_release_recursive>
 8005a0e:	e7dd      	b.n	80059cc <_fflush_r+0xc>

08005a10 <__swhatbuf_r>:
 8005a10:	b570      	push	{r4, r5, r6, lr}
 8005a12:	460c      	mov	r4, r1
 8005a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a18:	2900      	cmp	r1, #0
 8005a1a:	b096      	sub	sp, #88	; 0x58
 8005a1c:	4615      	mov	r5, r2
 8005a1e:	461e      	mov	r6, r3
 8005a20:	da0d      	bge.n	8005a3e <__swhatbuf_r+0x2e>
 8005a22:	89a3      	ldrh	r3, [r4, #12]
 8005a24:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005a28:	f04f 0100 	mov.w	r1, #0
 8005a2c:	bf0c      	ite	eq
 8005a2e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005a32:	2340      	movne	r3, #64	; 0x40
 8005a34:	2000      	movs	r0, #0
 8005a36:	6031      	str	r1, [r6, #0]
 8005a38:	602b      	str	r3, [r5, #0]
 8005a3a:	b016      	add	sp, #88	; 0x58
 8005a3c:	bd70      	pop	{r4, r5, r6, pc}
 8005a3e:	466a      	mov	r2, sp
 8005a40:	f000 f848 	bl	8005ad4 <_fstat_r>
 8005a44:	2800      	cmp	r0, #0
 8005a46:	dbec      	blt.n	8005a22 <__swhatbuf_r+0x12>
 8005a48:	9901      	ldr	r1, [sp, #4]
 8005a4a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005a4e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005a52:	4259      	negs	r1, r3
 8005a54:	4159      	adcs	r1, r3
 8005a56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a5a:	e7eb      	b.n	8005a34 <__swhatbuf_r+0x24>

08005a5c <__smakebuf_r>:
 8005a5c:	898b      	ldrh	r3, [r1, #12]
 8005a5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a60:	079d      	lsls	r5, r3, #30
 8005a62:	4606      	mov	r6, r0
 8005a64:	460c      	mov	r4, r1
 8005a66:	d507      	bpl.n	8005a78 <__smakebuf_r+0x1c>
 8005a68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a6c:	6023      	str	r3, [r4, #0]
 8005a6e:	6123      	str	r3, [r4, #16]
 8005a70:	2301      	movs	r3, #1
 8005a72:	6163      	str	r3, [r4, #20]
 8005a74:	b002      	add	sp, #8
 8005a76:	bd70      	pop	{r4, r5, r6, pc}
 8005a78:	ab01      	add	r3, sp, #4
 8005a7a:	466a      	mov	r2, sp
 8005a7c:	f7ff ffc8 	bl	8005a10 <__swhatbuf_r>
 8005a80:	9900      	ldr	r1, [sp, #0]
 8005a82:	4605      	mov	r5, r0
 8005a84:	4630      	mov	r0, r6
 8005a86:	f7ff f8d5 	bl	8004c34 <_malloc_r>
 8005a8a:	b948      	cbnz	r0, 8005aa0 <__smakebuf_r+0x44>
 8005a8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a90:	059a      	lsls	r2, r3, #22
 8005a92:	d4ef      	bmi.n	8005a74 <__smakebuf_r+0x18>
 8005a94:	f023 0303 	bic.w	r3, r3, #3
 8005a98:	f043 0302 	orr.w	r3, r3, #2
 8005a9c:	81a3      	strh	r3, [r4, #12]
 8005a9e:	e7e3      	b.n	8005a68 <__smakebuf_r+0xc>
 8005aa0:	89a3      	ldrh	r3, [r4, #12]
 8005aa2:	6020      	str	r0, [r4, #0]
 8005aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aa8:	81a3      	strh	r3, [r4, #12]
 8005aaa:	9b00      	ldr	r3, [sp, #0]
 8005aac:	6163      	str	r3, [r4, #20]
 8005aae:	9b01      	ldr	r3, [sp, #4]
 8005ab0:	6120      	str	r0, [r4, #16]
 8005ab2:	b15b      	cbz	r3, 8005acc <__smakebuf_r+0x70>
 8005ab4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ab8:	4630      	mov	r0, r6
 8005aba:	f000 f81d 	bl	8005af8 <_isatty_r>
 8005abe:	b128      	cbz	r0, 8005acc <__smakebuf_r+0x70>
 8005ac0:	89a3      	ldrh	r3, [r4, #12]
 8005ac2:	f023 0303 	bic.w	r3, r3, #3
 8005ac6:	f043 0301 	orr.w	r3, r3, #1
 8005aca:	81a3      	strh	r3, [r4, #12]
 8005acc:	89a3      	ldrh	r3, [r4, #12]
 8005ace:	431d      	orrs	r5, r3
 8005ad0:	81a5      	strh	r5, [r4, #12]
 8005ad2:	e7cf      	b.n	8005a74 <__smakebuf_r+0x18>

08005ad4 <_fstat_r>:
 8005ad4:	b538      	push	{r3, r4, r5, lr}
 8005ad6:	4d07      	ldr	r5, [pc, #28]	; (8005af4 <_fstat_r+0x20>)
 8005ad8:	2300      	movs	r3, #0
 8005ada:	4604      	mov	r4, r0
 8005adc:	4608      	mov	r0, r1
 8005ade:	4611      	mov	r1, r2
 8005ae0:	602b      	str	r3, [r5, #0]
 8005ae2:	f7fb f82c 	bl	8000b3e <_fstat>
 8005ae6:	1c43      	adds	r3, r0, #1
 8005ae8:	d102      	bne.n	8005af0 <_fstat_r+0x1c>
 8005aea:	682b      	ldr	r3, [r5, #0]
 8005aec:	b103      	cbz	r3, 8005af0 <_fstat_r+0x1c>
 8005aee:	6023      	str	r3, [r4, #0]
 8005af0:	bd38      	pop	{r3, r4, r5, pc}
 8005af2:	bf00      	nop
 8005af4:	20000418 	.word	0x20000418

08005af8 <_isatty_r>:
 8005af8:	b538      	push	{r3, r4, r5, lr}
 8005afa:	4d06      	ldr	r5, [pc, #24]	; (8005b14 <_isatty_r+0x1c>)
 8005afc:	2300      	movs	r3, #0
 8005afe:	4604      	mov	r4, r0
 8005b00:	4608      	mov	r0, r1
 8005b02:	602b      	str	r3, [r5, #0]
 8005b04:	f7fb f820 	bl	8000b48 <_isatty>
 8005b08:	1c43      	adds	r3, r0, #1
 8005b0a:	d102      	bne.n	8005b12 <_isatty_r+0x1a>
 8005b0c:	682b      	ldr	r3, [r5, #0]
 8005b0e:	b103      	cbz	r3, 8005b12 <_isatty_r+0x1a>
 8005b10:	6023      	str	r3, [r4, #0]
 8005b12:	bd38      	pop	{r3, r4, r5, pc}
 8005b14:	20000418 	.word	0x20000418

08005b18 <_init>:
 8005b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b1a:	bf00      	nop
 8005b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b1e:	bc08      	pop	{r3}
 8005b20:	469e      	mov	lr, r3
 8005b22:	4770      	bx	lr

08005b24 <_fini>:
 8005b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b26:	bf00      	nop
 8005b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b2a:	bc08      	pop	{r3}
 8005b2c:	469e      	mov	lr, r3
 8005b2e:	4770      	bx	lr

Disassembly of section .code_in_ram:

08005b30 <mcuJumpToApplication>:
{
 8005b30:	b510      	push	{r4, lr}
 8005b32:	4604      	mov	r4, r0
   FLASH->CR |= FLASH_CR_LOCK;
 8005b34:	4a25      	ldr	r2, [pc, #148]	; (8005bcc <mcuJumpToApplication+0x9c>)
 8005b36:	6953      	ldr	r3, [r2, #20]
 8005b38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b3c:	6153      	str	r3, [r2, #20]
   NVIC->ICER[0] = 0xFFFFFFFF;
 8005b3e:	4b24      	ldr	r3, [pc, #144]	; (8005bd0 <mcuJumpToApplication+0xa0>)
 8005b40:	f04f 32ff 	mov.w	r2, #4294967295
 8005b44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   NVIC->ICER[1] = 0xFFFFFFFF;
 8005b48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   NVIC->ICER[2] = 0xFFFFFFFF;
 8005b4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   NVIC->ICER[3] = 0xFFFFFFFF;
 8005b50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   NVIC->ICER[4] = 0xFFFFFFFF;
 8005b54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   NVIC->ICER[5] = 0xFFFFFFFF;
 8005b58:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   NVIC->ICER[6] = 0xFFFFFFFF;
 8005b5c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   NVIC->ICER[7] = 0xFFFFFFFF;
 8005b60:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
   NVIC->ICPR[0] = 0xFFFFFFFF;
 8005b64:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   NVIC->ICPR[1] = 0xFFFFFFFF;
 8005b68:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   NVIC->ICPR[2] = 0xFFFFFFFF;
 8005b6c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   NVIC->ICPR[3] = 0xFFFFFFFF;
 8005b70:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   NVIC->ICPR[4] = 0xFFFFFFFF;
 8005b74:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   NVIC->ICPR[5] = 0xFFFFFFFF;
 8005b78:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   NVIC->ICPR[6] = 0xFFFFFFFF;
 8005b7c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   NVIC->ICPR[7] = 0xFFFFFFFF;
 8005b80:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
   SysTick->CTRL = 0;
 8005b84:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005b88:	2200      	movs	r2, #0
 8005b8a:	611a      	str	r2, [r3, #16]
   SCB->ICSR |= SCB_ICSR_PENDSTCLR_Msk;
 8005b8c:	f503 6350 	add.w	r3, r3, #3328	; 0xd00
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8005b96:	605a      	str	r2, [r3, #4]
   SCB->SHCSR &= ~(SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk |
 8005b98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b9a:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8005b9e:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8005ba0:	f3ef 8314 	mrs	r3, CONTROL
   if(__get_CONTROL() & CONTROL_SPSEL_Msk)
 8005ba4:	f013 0f02 	tst.w	r3, #2
 8005ba8:	d009      	beq.n	8005bbe <mcuJumpToApplication+0x8e>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8005baa:	f3ef 8309 	mrs	r3, PSP
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8005bae:	f383 8808 	msr	MSP, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8005bb2:	f3ef 8314 	mrs	r3, CONTROL
     __set_CONTROL( __get_CONTROL() & ~CONTROL_SPSEL_Msk);
 8005bb6:	f023 0302 	bic.w	r3, r3, #2
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8005bba:	f383 8814 	msr	CONTROL, r3
   stackPointer = *((uint32_t*)address);
 8005bbe:	6820      	ldr	r0, [r4, #0]
   programCounter = *((uint32_t*)(address+4));
 8005bc0:	6861      	ldr	r1, [r4, #4]
   SCB->VTOR = (uint32_t) address;
 8005bc2:	4b04      	ldr	r3, [pc, #16]	; (8005bd4 <mcuJumpToApplication+0xa4>)
 8005bc4:	609c      	str	r4, [r3, #8]
   mcuBootAppImageAsm(stackPointer, programCounter);
 8005bc6:	f7fb fde5 	bl	8001794 <mcuBootAppImageAsm>
 8005bca:	bf00      	nop
 8005bcc:	58004000 	.word	0x58004000
 8005bd0:	e000e100 	.word	0xe000e100
 8005bd4:	e000ed00 	.word	0xe000ed00


lora-e5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef24  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ce0  0800f068  0800f068  0001f068  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd48  0800fd48  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800fd48  0800fd48  0001fd48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fd50  0800fd50  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd50  0800fd50  0001fd50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fd54  0800fd54  0001fd54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800fd58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b8c  200001e0  0800ff38  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d6c  0800ff38  00021d6c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c200  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b53  00000000  00000000  0004c40a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002668  00000000  00000000  00051f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002420  00000000  00000000  000545c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000237f9  00000000  00000000  000569e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002cb45  00000000  00000000  0007a1e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca9c1  00000000  00000000  000a6d26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001716e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b7ec  00000000  00000000  00171738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800f04c 	.word	0x0800f04c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	0800f04c 	.word	0x0800f04c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_frsub>:
 8000b98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b9c:	e002      	b.n	8000ba4 <__addsf3>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_fsub>:
 8000ba0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ba4 <__addsf3>:
 8000ba4:	0042      	lsls	r2, r0, #1
 8000ba6:	bf1f      	itttt	ne
 8000ba8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bac:	ea92 0f03 	teqne	r2, r3
 8000bb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb8:	d06a      	beq.n	8000c90 <__addsf3+0xec>
 8000bba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bc2:	bfc1      	itttt	gt
 8000bc4:	18d2      	addgt	r2, r2, r3
 8000bc6:	4041      	eorgt	r1, r0
 8000bc8:	4048      	eorgt	r0, r1
 8000bca:	4041      	eorgt	r1, r0
 8000bcc:	bfb8      	it	lt
 8000bce:	425b      	neglt	r3, r3
 8000bd0:	2b19      	cmp	r3, #25
 8000bd2:	bf88      	it	hi
 8000bd4:	4770      	bxhi	lr
 8000bd6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4249      	negne	r1, r1
 8000bf6:	ea92 0f03 	teq	r2, r3
 8000bfa:	d03f      	beq.n	8000c7c <__addsf3+0xd8>
 8000bfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000c00:	fa41 fc03 	asr.w	ip, r1, r3
 8000c04:	eb10 000c 	adds.w	r0, r0, ip
 8000c08:	f1c3 0320 	rsb	r3, r3, #32
 8000c0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	d502      	bpl.n	8000c1c <__addsf3+0x78>
 8000c16:	4249      	negs	r1, r1
 8000c18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c20:	d313      	bcc.n	8000c4a <__addsf3+0xa6>
 8000c22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c26:	d306      	bcc.n	8000c36 <__addsf3+0x92>
 8000c28:	0840      	lsrs	r0, r0, #1
 8000c2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c2e:	f102 0201 	add.w	r2, r2, #1
 8000c32:	2afe      	cmp	r2, #254	; 0xfe
 8000c34:	d251      	bcs.n	8000cda <__addsf3+0x136>
 8000c36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c3e:	bf08      	it	eq
 8000c40:	f020 0001 	biceq.w	r0, r0, #1
 8000c44:	ea40 0003 	orr.w	r0, r0, r3
 8000c48:	4770      	bx	lr
 8000c4a:	0049      	lsls	r1, r1, #1
 8000c4c:	eb40 0000 	adc.w	r0, r0, r0
 8000c50:	3a01      	subs	r2, #1
 8000c52:	bf28      	it	cs
 8000c54:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c58:	d2ed      	bcs.n	8000c36 <__addsf3+0x92>
 8000c5a:	fab0 fc80 	clz	ip, r0
 8000c5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c62:	ebb2 020c 	subs.w	r2, r2, ip
 8000c66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c6a:	bfaa      	itet	ge
 8000c6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c70:	4252      	neglt	r2, r2
 8000c72:	4318      	orrge	r0, r3
 8000c74:	bfbc      	itt	lt
 8000c76:	40d0      	lsrlt	r0, r2
 8000c78:	4318      	orrlt	r0, r3
 8000c7a:	4770      	bx	lr
 8000c7c:	f092 0f00 	teq	r2, #0
 8000c80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c84:	bf06      	itte	eq
 8000c86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c8a:	3201      	addeq	r2, #1
 8000c8c:	3b01      	subne	r3, #1
 8000c8e:	e7b5      	b.n	8000bfc <__addsf3+0x58>
 8000c90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c98:	bf18      	it	ne
 8000c9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c9e:	d021      	beq.n	8000ce4 <__addsf3+0x140>
 8000ca0:	ea92 0f03 	teq	r2, r3
 8000ca4:	d004      	beq.n	8000cb0 <__addsf3+0x10c>
 8000ca6:	f092 0f00 	teq	r2, #0
 8000caa:	bf08      	it	eq
 8000cac:	4608      	moveq	r0, r1
 8000cae:	4770      	bx	lr
 8000cb0:	ea90 0f01 	teq	r0, r1
 8000cb4:	bf1c      	itt	ne
 8000cb6:	2000      	movne	r0, #0
 8000cb8:	4770      	bxne	lr
 8000cba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cbe:	d104      	bne.n	8000cca <__addsf3+0x126>
 8000cc0:	0040      	lsls	r0, r0, #1
 8000cc2:	bf28      	it	cs
 8000cc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc8:	4770      	bx	lr
 8000cca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cce:	bf3c      	itt	cc
 8000cd0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bxcc	lr
 8000cd6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cda:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce2:	4770      	bx	lr
 8000ce4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce8:	bf16      	itet	ne
 8000cea:	4608      	movne	r0, r1
 8000cec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf0:	4601      	movne	r1, r0
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	bf06      	itte	eq
 8000cf6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cfa:	ea90 0f01 	teqeq	r0, r1
 8000cfe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_ui2f>:
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e004      	b.n	8000d14 <__aeabi_i2f+0x8>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_i2f>:
 8000d0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d10:	bf48      	it	mi
 8000d12:	4240      	negmi	r0, r0
 8000d14:	ea5f 0c00 	movs.w	ip, r0
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d20:	4601      	mov	r1, r0
 8000d22:	f04f 0000 	mov.w	r0, #0
 8000d26:	e01c      	b.n	8000d62 <__aeabi_l2f+0x2a>

08000d28 <__aeabi_ul2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e00a      	b.n	8000d4c <__aeabi_l2f+0x14>
 8000d36:	bf00      	nop

08000d38 <__aeabi_l2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__aeabi_l2f+0x14>
 8000d46:	4240      	negs	r0, r0
 8000d48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4c:	ea5f 0c01 	movs.w	ip, r1
 8000d50:	bf02      	ittt	eq
 8000d52:	4684      	moveq	ip, r0
 8000d54:	4601      	moveq	r1, r0
 8000d56:	2000      	moveq	r0, #0
 8000d58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d5c:	bf08      	it	eq
 8000d5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d66:	fabc f28c 	clz	r2, ip
 8000d6a:	3a08      	subs	r2, #8
 8000d6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d70:	db10      	blt.n	8000d94 <__aeabi_l2f+0x5c>
 8000d72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d76:	4463      	add	r3, ip
 8000d78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d7c:	f1c2 0220 	rsb	r2, r2, #32
 8000d80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d84:	fa20 f202 	lsr.w	r2, r0, r2
 8000d88:	eb43 0002 	adc.w	r0, r3, r2
 8000d8c:	bf08      	it	eq
 8000d8e:	f020 0001 	biceq.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	f102 0220 	add.w	r2, r2, #32
 8000d98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d9c:	f1c2 0220 	rsb	r2, r2, #32
 8000da0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000da4:	fa21 f202 	lsr.w	r2, r1, r2
 8000da8:	eb43 0002 	adc.w	r0, r3, r2
 8000dac:	bf08      	it	eq
 8000dae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_f2uiz>:
 8000db4:	0042      	lsls	r2, r0, #1
 8000db6:	d20e      	bcs.n	8000dd6 <__aeabi_f2uiz+0x22>
 8000db8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000dbc:	d30b      	bcc.n	8000dd6 <__aeabi_f2uiz+0x22>
 8000dbe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000dc2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000dc6:	d409      	bmi.n	8000ddc <__aeabi_f2uiz+0x28>
 8000dc8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000dcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000dd0:	fa23 f002 	lsr.w	r0, r3, r2
 8000dd4:	4770      	bx	lr
 8000dd6:	f04f 0000 	mov.w	r0, #0
 8000dda:	4770      	bx	lr
 8000ddc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000de0:	d101      	bne.n	8000de6 <__aeabi_f2uiz+0x32>
 8000de2:	0242      	lsls	r2, r0, #9
 8000de4:	d102      	bne.n	8000dec <__aeabi_f2uiz+0x38>
 8000de6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dea:	4770      	bx	lr
 8000dec:	f04f 0000 	mov.w	r0, #0
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop

08000df4 <__aeabi_uldivmod>:
 8000df4:	b953      	cbnz	r3, 8000e0c <__aeabi_uldivmod+0x18>
 8000df6:	b94a      	cbnz	r2, 8000e0c <__aeabi_uldivmod+0x18>
 8000df8:	2900      	cmp	r1, #0
 8000dfa:	bf08      	it	eq
 8000dfc:	2800      	cmpeq	r0, #0
 8000dfe:	bf1c      	itt	ne
 8000e00:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000e04:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000e08:	f000 b974 	b.w	80010f4 <__aeabi_idiv0>
 8000e0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e14:	f000 f806 	bl	8000e24 <__udivmoddi4>
 8000e18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e20:	b004      	add	sp, #16
 8000e22:	4770      	bx	lr

08000e24 <__udivmoddi4>:
 8000e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e28:	9e08      	ldr	r6, [sp, #32]
 8000e2a:	460d      	mov	r5, r1
 8000e2c:	4604      	mov	r4, r0
 8000e2e:	4688      	mov	r8, r1
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d14d      	bne.n	8000ed0 <__udivmoddi4+0xac>
 8000e34:	428a      	cmp	r2, r1
 8000e36:	4694      	mov	ip, r2
 8000e38:	d968      	bls.n	8000f0c <__udivmoddi4+0xe8>
 8000e3a:	fab2 f282 	clz	r2, r2
 8000e3e:	b152      	cbz	r2, 8000e56 <__udivmoddi4+0x32>
 8000e40:	fa01 f302 	lsl.w	r3, r1, r2
 8000e44:	f1c2 0120 	rsb	r1, r2, #32
 8000e48:	fa20 f101 	lsr.w	r1, r0, r1
 8000e4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e50:	ea41 0803 	orr.w	r8, r1, r3
 8000e54:	4094      	lsls	r4, r2
 8000e56:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000e5a:	0c21      	lsrs	r1, r4, #16
 8000e5c:	fbb8 fef5 	udiv	lr, r8, r5
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	fb05 831e 	mls	r3, r5, lr, r8
 8000e68:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e6c:	fb0e f107 	mul.w	r1, lr, r7
 8000e70:	4299      	cmp	r1, r3
 8000e72:	d90b      	bls.n	8000e8c <__udivmoddi4+0x68>
 8000e74:	eb1c 0303 	adds.w	r3, ip, r3
 8000e78:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 8000e7c:	f080 811e 	bcs.w	80010bc <__udivmoddi4+0x298>
 8000e80:	4299      	cmp	r1, r3
 8000e82:	f240 811b 	bls.w	80010bc <__udivmoddi4+0x298>
 8000e86:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e8a:	4463      	add	r3, ip
 8000e8c:	1a5b      	subs	r3, r3, r1
 8000e8e:	b2a4      	uxth	r4, r4
 8000e90:	fbb3 f0f5 	udiv	r0, r3, r5
 8000e94:	fb05 3310 	mls	r3, r5, r0, r3
 8000e98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ea0:	42a7      	cmp	r7, r4
 8000ea2:	d90a      	bls.n	8000eba <__udivmoddi4+0x96>
 8000ea4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000eac:	f080 8108 	bcs.w	80010c0 <__udivmoddi4+0x29c>
 8000eb0:	42a7      	cmp	r7, r4
 8000eb2:	f240 8105 	bls.w	80010c0 <__udivmoddi4+0x29c>
 8000eb6:	4464      	add	r4, ip
 8000eb8:	3802      	subs	r0, #2
 8000eba:	1be4      	subs	r4, r4, r7
 8000ebc:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	b11e      	cbz	r6, 8000ecc <__udivmoddi4+0xa8>
 8000ec4:	40d4      	lsrs	r4, r2
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e9c6 4300 	strd	r4, r3, [r6]
 8000ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed0:	428b      	cmp	r3, r1
 8000ed2:	d908      	bls.n	8000ee6 <__udivmoddi4+0xc2>
 8000ed4:	2e00      	cmp	r6, #0
 8000ed6:	f000 80ee 	beq.w	80010b6 <__udivmoddi4+0x292>
 8000eda:	2100      	movs	r1, #0
 8000edc:	e9c6 0500 	strd	r0, r5, [r6]
 8000ee0:	4608      	mov	r0, r1
 8000ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee6:	fab3 f183 	clz	r1, r3
 8000eea:	2900      	cmp	r1, #0
 8000eec:	d14a      	bne.n	8000f84 <__udivmoddi4+0x160>
 8000eee:	42ab      	cmp	r3, r5
 8000ef0:	d302      	bcc.n	8000ef8 <__udivmoddi4+0xd4>
 8000ef2:	4282      	cmp	r2, r0
 8000ef4:	f200 80f9 	bhi.w	80010ea <__udivmoddi4+0x2c6>
 8000ef8:	1a84      	subs	r4, r0, r2
 8000efa:	eb65 0303 	sbc.w	r3, r5, r3
 8000efe:	2001      	movs	r0, #1
 8000f00:	4698      	mov	r8, r3
 8000f02:	2e00      	cmp	r6, #0
 8000f04:	d0e2      	beq.n	8000ecc <__udivmoddi4+0xa8>
 8000f06:	e9c6 4800 	strd	r4, r8, [r6]
 8000f0a:	e7df      	b.n	8000ecc <__udivmoddi4+0xa8>
 8000f0c:	b902      	cbnz	r2, 8000f10 <__udivmoddi4+0xec>
 8000f0e:	deff      	udf	#255	; 0xff
 8000f10:	fab2 f282 	clz	r2, r2
 8000f14:	2a00      	cmp	r2, #0
 8000f16:	f040 8091 	bne.w	800103c <__udivmoddi4+0x218>
 8000f1a:	eba1 050c 	sub.w	r5, r1, ip
 8000f1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f22:	fa1f fe8c 	uxth.w	lr, ip
 8000f26:	2101      	movs	r1, #1
 8000f28:	fbb5 f3f7 	udiv	r3, r5, r7
 8000f2c:	fb07 5013 	mls	r0, r7, r3, r5
 8000f30:	0c25      	lsrs	r5, r4, #16
 8000f32:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000f36:	fb0e f003 	mul.w	r0, lr, r3
 8000f3a:	42a8      	cmp	r0, r5
 8000f3c:	d908      	bls.n	8000f50 <__udivmoddi4+0x12c>
 8000f3e:	eb1c 0505 	adds.w	r5, ip, r5
 8000f42:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000f46:	d202      	bcs.n	8000f4e <__udivmoddi4+0x12a>
 8000f48:	42a8      	cmp	r0, r5
 8000f4a:	f200 80cb 	bhi.w	80010e4 <__udivmoddi4+0x2c0>
 8000f4e:	4643      	mov	r3, r8
 8000f50:	1a2d      	subs	r5, r5, r0
 8000f52:	b2a4      	uxth	r4, r4
 8000f54:	fbb5 f0f7 	udiv	r0, r5, r7
 8000f58:	fb07 5510 	mls	r5, r7, r0, r5
 8000f5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f60:	fb0e fe00 	mul.w	lr, lr, r0
 8000f64:	45a6      	cmp	lr, r4
 8000f66:	d908      	bls.n	8000f7a <__udivmoddi4+0x156>
 8000f68:	eb1c 0404 	adds.w	r4, ip, r4
 8000f6c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000f70:	d202      	bcs.n	8000f78 <__udivmoddi4+0x154>
 8000f72:	45a6      	cmp	lr, r4
 8000f74:	f200 80bb 	bhi.w	80010ee <__udivmoddi4+0x2ca>
 8000f78:	4628      	mov	r0, r5
 8000f7a:	eba4 040e 	sub.w	r4, r4, lr
 8000f7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f82:	e79e      	b.n	8000ec2 <__udivmoddi4+0x9e>
 8000f84:	f1c1 0720 	rsb	r7, r1, #32
 8000f88:	408b      	lsls	r3, r1
 8000f8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f92:	fa20 f407 	lsr.w	r4, r0, r7
 8000f96:	fa05 f301 	lsl.w	r3, r5, r1
 8000f9a:	431c      	orrs	r4, r3
 8000f9c:	40fd      	lsrs	r5, r7
 8000f9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000fa2:	fa00 f301 	lsl.w	r3, r0, r1
 8000fa6:	fbb5 f8f9 	udiv	r8, r5, r9
 8000faa:	0c20      	lsrs	r0, r4, #16
 8000fac:	fa1f fe8c 	uxth.w	lr, ip
 8000fb0:	fb09 5518 	mls	r5, r9, r8, r5
 8000fb4:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000fb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000fbc:	42a8      	cmp	r0, r5
 8000fbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000fc2:	d90b      	bls.n	8000fdc <__udivmoddi4+0x1b8>
 8000fc4:	eb1c 0505 	adds.w	r5, ip, r5
 8000fc8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000fcc:	f080 8088 	bcs.w	80010e0 <__udivmoddi4+0x2bc>
 8000fd0:	42a8      	cmp	r0, r5
 8000fd2:	f240 8085 	bls.w	80010e0 <__udivmoddi4+0x2bc>
 8000fd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000fda:	4465      	add	r5, ip
 8000fdc:	1a2d      	subs	r5, r5, r0
 8000fde:	b2a4      	uxth	r4, r4
 8000fe0:	fbb5 f0f9 	udiv	r0, r5, r9
 8000fe4:	fb09 5510 	mls	r5, r9, r0, r5
 8000fe8:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000fec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ff0:	45ae      	cmp	lr, r5
 8000ff2:	d908      	bls.n	8001006 <__udivmoddi4+0x1e2>
 8000ff4:	eb1c 0505 	adds.w	r5, ip, r5
 8000ff8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ffc:	d26c      	bcs.n	80010d8 <__udivmoddi4+0x2b4>
 8000ffe:	45ae      	cmp	lr, r5
 8001000:	d96a      	bls.n	80010d8 <__udivmoddi4+0x2b4>
 8001002:	3802      	subs	r0, #2
 8001004:	4465      	add	r5, ip
 8001006:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800100a:	fba0 9402 	umull	r9, r4, r0, r2
 800100e:	eba5 050e 	sub.w	r5, r5, lr
 8001012:	42a5      	cmp	r5, r4
 8001014:	46c8      	mov	r8, r9
 8001016:	46a6      	mov	lr, r4
 8001018:	d356      	bcc.n	80010c8 <__udivmoddi4+0x2a4>
 800101a:	d053      	beq.n	80010c4 <__udivmoddi4+0x2a0>
 800101c:	b15e      	cbz	r6, 8001036 <__udivmoddi4+0x212>
 800101e:	ebb3 0208 	subs.w	r2, r3, r8
 8001022:	eb65 050e 	sbc.w	r5, r5, lr
 8001026:	fa05 f707 	lsl.w	r7, r5, r7
 800102a:	fa22 f301 	lsr.w	r3, r2, r1
 800102e:	40cd      	lsrs	r5, r1
 8001030:	431f      	orrs	r7, r3
 8001032:	e9c6 7500 	strd	r7, r5, [r6]
 8001036:	2100      	movs	r1, #0
 8001038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800103c:	f1c2 0320 	rsb	r3, r2, #32
 8001040:	fa20 f103 	lsr.w	r1, r0, r3
 8001044:	fa0c fc02 	lsl.w	ip, ip, r2
 8001048:	fa25 f303 	lsr.w	r3, r5, r3
 800104c:	4095      	lsls	r5, r2
 800104e:	430d      	orrs	r5, r1
 8001050:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001054:	fa1f fe8c 	uxth.w	lr, ip
 8001058:	fbb3 f1f7 	udiv	r1, r3, r7
 800105c:	fb07 3011 	mls	r0, r7, r1, r3
 8001060:	0c2b      	lsrs	r3, r5, #16
 8001062:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001066:	fb01 f00e 	mul.w	r0, r1, lr
 800106a:	4298      	cmp	r0, r3
 800106c:	fa04 f402 	lsl.w	r4, r4, r2
 8001070:	d908      	bls.n	8001084 <__udivmoddi4+0x260>
 8001072:	eb1c 0303 	adds.w	r3, ip, r3
 8001076:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 800107a:	d22f      	bcs.n	80010dc <__udivmoddi4+0x2b8>
 800107c:	4298      	cmp	r0, r3
 800107e:	d92d      	bls.n	80010dc <__udivmoddi4+0x2b8>
 8001080:	3902      	subs	r1, #2
 8001082:	4463      	add	r3, ip
 8001084:	1a1b      	subs	r3, r3, r0
 8001086:	b2ad      	uxth	r5, r5
 8001088:	fbb3 f0f7 	udiv	r0, r3, r7
 800108c:	fb07 3310 	mls	r3, r7, r0, r3
 8001090:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8001094:	fb00 f30e 	mul.w	r3, r0, lr
 8001098:	42ab      	cmp	r3, r5
 800109a:	d908      	bls.n	80010ae <__udivmoddi4+0x28a>
 800109c:	eb1c 0505 	adds.w	r5, ip, r5
 80010a0:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80010a4:	d216      	bcs.n	80010d4 <__udivmoddi4+0x2b0>
 80010a6:	42ab      	cmp	r3, r5
 80010a8:	d914      	bls.n	80010d4 <__udivmoddi4+0x2b0>
 80010aa:	3802      	subs	r0, #2
 80010ac:	4465      	add	r5, ip
 80010ae:	1aed      	subs	r5, r5, r3
 80010b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80010b4:	e738      	b.n	8000f28 <__udivmoddi4+0x104>
 80010b6:	4631      	mov	r1, r6
 80010b8:	4630      	mov	r0, r6
 80010ba:	e707      	b.n	8000ecc <__udivmoddi4+0xa8>
 80010bc:	4686      	mov	lr, r0
 80010be:	e6e5      	b.n	8000e8c <__udivmoddi4+0x68>
 80010c0:	4618      	mov	r0, r3
 80010c2:	e6fa      	b.n	8000eba <__udivmoddi4+0x96>
 80010c4:	454b      	cmp	r3, r9
 80010c6:	d2a9      	bcs.n	800101c <__udivmoddi4+0x1f8>
 80010c8:	ebb9 0802 	subs.w	r8, r9, r2
 80010cc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010d0:	3801      	subs	r0, #1
 80010d2:	e7a3      	b.n	800101c <__udivmoddi4+0x1f8>
 80010d4:	4640      	mov	r0, r8
 80010d6:	e7ea      	b.n	80010ae <__udivmoddi4+0x28a>
 80010d8:	4620      	mov	r0, r4
 80010da:	e794      	b.n	8001006 <__udivmoddi4+0x1e2>
 80010dc:	4641      	mov	r1, r8
 80010de:	e7d1      	b.n	8001084 <__udivmoddi4+0x260>
 80010e0:	46d0      	mov	r8, sl
 80010e2:	e77b      	b.n	8000fdc <__udivmoddi4+0x1b8>
 80010e4:	3b02      	subs	r3, #2
 80010e6:	4465      	add	r5, ip
 80010e8:	e732      	b.n	8000f50 <__udivmoddi4+0x12c>
 80010ea:	4608      	mov	r0, r1
 80010ec:	e709      	b.n	8000f02 <__udivmoddi4+0xde>
 80010ee:	4464      	add	r4, ip
 80010f0:	3802      	subs	r0, #2
 80010f2:	e742      	b.n	8000f7a <__udivmoddi4+0x156>

080010f4 <__aeabi_idiv0>:
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop

080010f8 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr

08001104 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4a06      	ldr	r2, [pc, #24]	; (800112c <vApplicationGetIdleTaskMemory+0x28>)
 8001114:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	4a05      	ldr	r2, [pc, #20]	; (8001130 <vApplicationGetIdleTaskMemory+0x2c>)
 800111a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2280      	movs	r2, #128	; 0x80
 8001120:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001122:	bf00      	nop
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr
 800112c:	200001fc 	.word	0x200001fc
 8001130:	200002b0 	.word	0x200002b0

08001134 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4a07      	ldr	r2, [pc, #28]	; (8001160 <vApplicationGetTimerTaskMemory+0x2c>)
 8001144:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	4a06      	ldr	r2, [pc, #24]	; (8001164 <vApplicationGetTimerTaskMemory+0x30>)
 800114a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001152:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001154:	bf00      	nop
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	200004b0 	.word	0x200004b0
 8001164:	20000564 	.word	0x20000564

08001168 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001170:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001178:	f023 0218 	bic.w	r2, r3, #24
 800117c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4313      	orrs	r3, r2
 8001184:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr

08001192 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001192:	b480      	push	{r7}
 8001194:	b085      	sub	sp, #20
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800119a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800119e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80011aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4013      	ands	r3, r2
 80011b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011b6:	68fb      	ldr	r3, [r7, #12]
}
 80011b8:	bf00      	nop
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr
	...

080011c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c4:	b5b0      	push	{r4, r5, r7, lr}
 80011c6:	b094      	sub	sp, #80	; 0x50
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ca:	f000 ff15 	bl	8001ff8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ce:	f000 f871 	bl	80012b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011d2:	f000 fac1 	bl	8001758 <MX_GPIO_Init>
  MX_ADC_Init();
 80011d6:	f000 f8c7 	bl	8001368 <MX_ADC_Init>
  MX_LPUART1_UART_Init();
 80011da:	f000 f953 	bl	8001484 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 80011de:	f000 f99b 	bl	8001518 <MX_USART2_UART_Init>
  MX_RTC_Init();
 80011e2:	f000 f9e5 	bl	80015b0 <MX_RTC_Init>
  MX_SPI2_Init();
 80011e6:	f000 fa79 	bl	80016dc <MX_SPI2_Init>
  MX_I2C2_Init();
 80011ea:	f000 f90b 	bl	8001404 <MX_I2C2_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of UartMutex */
  osMutexDef(UartMutex);
 80011ee:	2300      	movs	r3, #0
 80011f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80011f2:	2300      	movs	r3, #0
 80011f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  UartMutexHandle = osMutexCreate(osMutex(UartMutex));
 80011f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011fa:	4618      	mov	r0, r3
 80011fc:	f007 fbae 	bl	800895c <osMutexCreate>
 8001200:	4603      	mov	r3, r0
 8001202:	4a24      	ldr	r2, [pc, #144]	; (8001294 <main+0xd0>)
 8001204:	6013      	str	r3, [r2, #0]

  /* definition and creation of SpiMutex */
  osMutexDef(SpiMutex);
 8001206:	2300      	movs	r3, #0
 8001208:	643b      	str	r3, [r7, #64]	; 0x40
 800120a:	2300      	movs	r3, #0
 800120c:	647b      	str	r3, [r7, #68]	; 0x44
  SpiMutexHandle = osMutexCreate(osMutex(SpiMutex));
 800120e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001212:	4618      	mov	r0, r3
 8001214:	f007 fba2 	bl	800895c <osMutexCreate>
 8001218:	4603      	mov	r3, r0
 800121a:	4a1f      	ldr	r2, [pc, #124]	; (8001298 <main+0xd4>)
 800121c:	6013      	str	r3, [r2, #0]

  /* definition and creation of I2cMutex */
  osMutexDef(I2cMutex);
 800121e:	2300      	movs	r3, #0
 8001220:	63bb      	str	r3, [r7, #56]	; 0x38
 8001222:	2300      	movs	r3, #0
 8001224:	63fb      	str	r3, [r7, #60]	; 0x3c
  I2cMutexHandle = osMutexCreate(osMutex(I2cMutex));
 8001226:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800122a:	4618      	mov	r0, r3
 800122c:	f007 fb96 	bl	800895c <osMutexCreate>
 8001230:	4603      	mov	r3, r0
 8001232:	4a1a      	ldr	r2, [pc, #104]	; (800129c <main+0xd8>)
 8001234:	6013      	str	r3, [r2, #0]

  /* definition and creation of RtcMutex */
  osMutexDef(RtcMutex);
 8001236:	2300      	movs	r3, #0
 8001238:	633b      	str	r3, [r7, #48]	; 0x30
 800123a:	2300      	movs	r3, #0
 800123c:	637b      	str	r3, [r7, #52]	; 0x34
  RtcMutexHandle = osMutexCreate(osMutex(RtcMutex));
 800123e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001242:	4618      	mov	r0, r3
 8001244:	f007 fb8a 	bl	800895c <osMutexCreate>
 8001248:	4603      	mov	r3, r0
 800124a:	4a15      	ldr	r2, [pc, #84]	; (80012a0 <main+0xdc>)
 800124c:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of xQueue1 */
  osMessageQDef(xQueue1, 100, uint16_t);
 800124e:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <main+0xe0>)
 8001250:	f107 0420 	add.w	r4, r7, #32
 8001254:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001256:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  xQueue1Handle = osMessageCreate(osMessageQ(xQueue1), NULL);
 800125a:	f107 0320 	add.w	r3, r7, #32
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f007 fb93 	bl	800898c <osMessageCreate>
 8001266:	4603      	mov	r3, r0
 8001268:	4a0f      	ldr	r2, [pc, #60]	; (80012a8 <main+0xe4>)
 800126a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of terminalTask */
  osThreadDef(terminalTask, terminalTaskHandler, osPriorityNormal, 0, 128);
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <main+0xe8>)
 800126e:	1d3c      	adds	r4, r7, #4
 8001270:	461d      	mov	r5, r3
 8001272:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001274:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001276:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800127a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  terminalTaskHandle = osThreadCreate(osThread(terminalTask), NULL);
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	2100      	movs	r1, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f007 fb0a 	bl	800889c <osThreadCreate>
 8001288:	4603      	mov	r3, r0
 800128a:	4a09      	ldr	r2, [pc, #36]	; (80012b0 <main+0xec>)
 800128c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800128e:	f007 fafe 	bl	800888e <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001292:	e7fe      	b.n	8001292 <main+0xce>
 8001294:	20000be8 	.word	0x20000be8
 8001298:	20000bec 	.word	0x20000bec
 800129c:	20000bf0 	.word	0x20000bf0
 80012a0:	20000bf4 	.word	0x20000bf4
 80012a4:	0800f078 	.word	0x0800f078
 80012a8:	20000be4 	.word	0x20000be4
 80012ac:	0800f088 	.word	0x0800f088
 80012b0:	20000be0 	.word	0x20000be0

080012b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b09a      	sub	sp, #104	; 0x68
 80012b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ba:	f107 0320 	add.w	r3, r7, #32
 80012be:	2248      	movs	r2, #72	; 0x48
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f00a f90b 	bl	800b4de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c8:	f107 0308 	add.w	r3, r7, #8
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
 80012d8:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80012da:	f002 fb1d 	bl	8003918 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80012de:	2000      	movs	r0, #0
 80012e0:	f7ff ff42 	bl	8001168 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012e4:	4b1f      	ldr	r3, [pc, #124]	; (8001364 <SystemClock_Config+0xb0>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012ec:	4a1d      	ldr	r2, [pc, #116]	; (8001364 <SystemClock_Config+0xb0>)
 80012ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <SystemClock_Config+0xb0>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType =
 8001300:	2324      	movs	r3, #36	; 0x24
 8001302:	623b      	str	r3, [r7, #32]
       RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
   RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001304:	2381      	movs	r3, #129	; 0x81
 8001306:	62fb      	str	r3, [r7, #44]	; 0x2c
   RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001308:	2301      	movs	r3, #1
 800130a:	643b      	str	r3, [r7, #64]	; 0x40
   RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800130c:	2300      	movs	r3, #0
 800130e:	647b      	str	r3, [r7, #68]	; 0x44
   RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001310:	23b0      	movs	r3, #176	; 0xb0
 8001312:	64bb      	str	r3, [r7, #72]	; 0x48
   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001314:	2300      	movs	r3, #0
 8001316:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001318:	f107 0320 	add.w	r3, r7, #32
 800131c:	4618      	mov	r0, r3
 800131e:	f002 fda5 	bl	8003e6c <HAL_RCC_OscConfig>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001328:	f000 fab0 	bl	800188c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800132c:	234f      	movs	r3, #79	; 0x4f
 800132e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001334:	2300      	movs	r3, #0
 8001336:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800133c:	2300      	movs	r3, #0
 800133e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001344:	f107 0308 	add.w	r3, r7, #8
 8001348:	2102      	movs	r1, #2
 800134a:	4618      	mov	r0, r3
 800134c:	f003 f910 	bl	8004570 <HAL_RCC_ClockConfig>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001356:	f000 fa99 	bl	800188c <Error_Handler>
  }
}
 800135a:	bf00      	nop
 800135c:	3768      	adds	r7, #104	; 0x68
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	58000400 	.word	0x58000400

08001368 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 800136c:	4b23      	ldr	r3, [pc, #140]	; (80013fc <MX_ADC_Init+0x94>)
 800136e:	4a24      	ldr	r2, [pc, #144]	; (8001400 <MX_ADC_Init+0x98>)
 8001370:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001372:	4b22      	ldr	r3, [pc, #136]	; (80013fc <MX_ADC_Init+0x94>)
 8001374:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001378:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800137a:	4b20      	ldr	r3, [pc, #128]	; (80013fc <MX_ADC_Init+0x94>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001380:	4b1e      	ldr	r3, [pc, #120]	; (80013fc <MX_ADC_Init+0x94>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001386:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <MX_ADC_Init+0x94>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800138c:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <MX_ADC_Init+0x94>)
 800138e:	2204      	movs	r2, #4
 8001390:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001392:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <MX_ADC_Init+0x94>)
 8001394:	2200      	movs	r2, #0
 8001396:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001398:	4b18      	ldr	r3, [pc, #96]	; (80013fc <MX_ADC_Init+0x94>)
 800139a:	2200      	movs	r2, #0
 800139c:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800139e:	4b17      	ldr	r3, [pc, #92]	; (80013fc <MX_ADC_Init+0x94>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 80013a4:	4b15      	ldr	r3, [pc, #84]	; (80013fc <MX_ADC_Init+0x94>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80013aa:	4b14      	ldr	r3, [pc, #80]	; (80013fc <MX_ADC_Init+0x94>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013b2:	4b12      	ldr	r3, [pc, #72]	; (80013fc <MX_ADC_Init+0x94>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013b8:	4b10      	ldr	r3, [pc, #64]	; (80013fc <MX_ADC_Init+0x94>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 80013be:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <MX_ADC_Init+0x94>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80013c6:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <MX_ADC_Init+0x94>)
 80013c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013cc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80013ce:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <MX_ADC_Init+0x94>)
 80013d0:	2207      	movs	r2, #7
 80013d2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80013d4:	4b09      	ldr	r3, [pc, #36]	; (80013fc <MX_ADC_Init+0x94>)
 80013d6:	2207      	movs	r2, #7
 80013d8:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 80013da:	4b08      	ldr	r3, [pc, #32]	; (80013fc <MX_ADC_Init+0x94>)
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80013e2:	4b06      	ldr	r3, [pc, #24]	; (80013fc <MX_ADC_Init+0x94>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80013e8:	4804      	ldr	r0, [pc, #16]	; (80013fc <MX_ADC_Init+0x94>)
 80013ea:	f000 fff5 	bl	80023d8 <HAL_ADC_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 80013f4:	f000 fa4a 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000964 	.word	0x20000964
 8001400:	40012400 	.word	0x40012400

08001404 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001408:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <MX_I2C2_Init+0x74>)
 800140a:	4a1c      	ldr	r2, [pc, #112]	; (800147c <MX_I2C2_Init+0x78>)
 800140c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 800140e:	4b1a      	ldr	r3, [pc, #104]	; (8001478 <MX_I2C2_Init+0x74>)
 8001410:	4a1b      	ldr	r2, [pc, #108]	; (8001480 <MX_I2C2_Init+0x7c>)
 8001412:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001414:	4b18      	ldr	r3, [pc, #96]	; (8001478 <MX_I2C2_Init+0x74>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800141a:	4b17      	ldr	r3, [pc, #92]	; (8001478 <MX_I2C2_Init+0x74>)
 800141c:	2201      	movs	r2, #1
 800141e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001420:	4b15      	ldr	r3, [pc, #84]	; (8001478 <MX_I2C2_Init+0x74>)
 8001422:	2200      	movs	r2, #0
 8001424:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001426:	4b14      	ldr	r3, [pc, #80]	; (8001478 <MX_I2C2_Init+0x74>)
 8001428:	2200      	movs	r2, #0
 800142a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <MX_I2C2_Init+0x74>)
 800142e:	2200      	movs	r2, #0
 8001430:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001432:	4b11      	ldr	r3, [pc, #68]	; (8001478 <MX_I2C2_Init+0x74>)
 8001434:	2200      	movs	r2, #0
 8001436:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001438:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <MX_I2C2_Init+0x74>)
 800143a:	2200      	movs	r2, #0
 800143c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800143e:	480e      	ldr	r0, [pc, #56]	; (8001478 <MX_I2C2_Init+0x74>)
 8001440:	f002 f945 	bl	80036ce <HAL_I2C_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800144a:	f000 fa1f 	bl	800188c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800144e:	2100      	movs	r1, #0
 8001450:	4809      	ldr	r0, [pc, #36]	; (8001478 <MX_I2C2_Init+0x74>)
 8001452:	f002 f9cb 	bl	80037ec <HAL_I2CEx_ConfigAnalogFilter>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800145c:	f000 fa16 	bl	800188c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001460:	2100      	movs	r1, #0
 8001462:	4805      	ldr	r0, [pc, #20]	; (8001478 <MX_I2C2_Init+0x74>)
 8001464:	f002 fa0c 	bl	8003880 <HAL_I2CEx_ConfigDigitalFilter>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800146e:	f000 fa0d 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200009c8 	.word	0x200009c8
 800147c:	40005800 	.word	0x40005800
 8001480:	20303e5d 	.word	0x20303e5d

08001484 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001488:	4b20      	ldr	r3, [pc, #128]	; (800150c <MX_LPUART1_UART_Init+0x88>)
 800148a:	4a21      	ldr	r2, [pc, #132]	; (8001510 <MX_LPUART1_UART_Init+0x8c>)
 800148c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800148e:	4b1f      	ldr	r3, [pc, #124]	; (800150c <MX_LPUART1_UART_Init+0x88>)
 8001490:	4a20      	ldr	r2, [pc, #128]	; (8001514 <MX_LPUART1_UART_Init+0x90>)
 8001492:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001494:	4b1d      	ldr	r3, [pc, #116]	; (800150c <MX_LPUART1_UART_Init+0x88>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800149a:	4b1c      	ldr	r3, [pc, #112]	; (800150c <MX_LPUART1_UART_Init+0x88>)
 800149c:	2200      	movs	r2, #0
 800149e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80014a0:	4b1a      	ldr	r3, [pc, #104]	; (800150c <MX_LPUART1_UART_Init+0x88>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_RX;
 80014a6:	4b19      	ldr	r3, [pc, #100]	; (800150c <MX_LPUART1_UART_Init+0x88>)
 80014a8:	2204      	movs	r2, #4
 80014aa:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ac:	4b17      	ldr	r3, [pc, #92]	; (800150c <MX_LPUART1_UART_Init+0x88>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014b2:	4b16      	ldr	r3, [pc, #88]	; (800150c <MX_LPUART1_UART_Init+0x88>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014b8:	4b14      	ldr	r3, [pc, #80]	; (800150c <MX_LPUART1_UART_Init+0x88>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014be:	4b13      	ldr	r3, [pc, #76]	; (800150c <MX_LPUART1_UART_Init+0x88>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&hlpuart1) != HAL_OK)
 80014c4:	4811      	ldr	r0, [pc, #68]	; (800150c <MX_LPUART1_UART_Init+0x88>)
 80014c6:	f004 fd27 	bl	8005f18 <HAL_HalfDuplex_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 80014d0:	f000 f9dc 	bl	800188c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014d4:	2100      	movs	r1, #0
 80014d6:	480d      	ldr	r0, [pc, #52]	; (800150c <MX_LPUART1_UART_Init+0x88>)
 80014d8:	f006 fdaf 	bl	800803a <HAL_UARTEx_SetTxFifoThreshold>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 80014e2:	f000 f9d3 	bl	800188c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014e6:	2100      	movs	r1, #0
 80014e8:	4808      	ldr	r0, [pc, #32]	; (800150c <MX_LPUART1_UART_Init+0x88>)
 80014ea:	f006 fde4 	bl	80080b6 <HAL_UARTEx_SetRxFifoThreshold>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 80014f4:	f000 f9ca 	bl	800188c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80014f8:	4804      	ldr	r0, [pc, #16]	; (800150c <MX_LPUART1_UART_Init+0x88>)
 80014fa:	f006 fd66 	bl	8007fca <HAL_UARTEx_DisableFifoMode>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8001504:	f000 f9c2 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000a1c 	.word	0x20000a1c
 8001510:	40008000 	.word	0x40008000
 8001514:	00033324 	.word	0x00033324

08001518 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800151c:	4b22      	ldr	r3, [pc, #136]	; (80015a8 <MX_USART2_UART_Init+0x90>)
 800151e:	4a23      	ldr	r2, [pc, #140]	; (80015ac <MX_USART2_UART_Init+0x94>)
 8001520:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001522:	4b21      	ldr	r3, [pc, #132]	; (80015a8 <MX_USART2_UART_Init+0x90>)
 8001524:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001528:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800152a:	4b1f      	ldr	r3, [pc, #124]	; (80015a8 <MX_USART2_UART_Init+0x90>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001530:	4b1d      	ldr	r3, [pc, #116]	; (80015a8 <MX_USART2_UART_Init+0x90>)
 8001532:	2200      	movs	r2, #0
 8001534:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001536:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <MX_USART2_UART_Init+0x90>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800153c:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <MX_USART2_UART_Init+0x90>)
 800153e:	220c      	movs	r2, #12
 8001540:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001542:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <MX_USART2_UART_Init+0x90>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001548:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <MX_USART2_UART_Init+0x90>)
 800154a:	2200      	movs	r2, #0
 800154c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800154e:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <MX_USART2_UART_Init+0x90>)
 8001550:	2200      	movs	r2, #0
 8001552:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001554:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <MX_USART2_UART_Init+0x90>)
 8001556:	2200      	movs	r2, #0
 8001558:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800155a:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <MX_USART2_UART_Init+0x90>)
 800155c:	2200      	movs	r2, #0
 800155e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001560:	4811      	ldr	r0, [pc, #68]	; (80015a8 <MX_USART2_UART_Init+0x90>)
 8001562:	f004 fc89 	bl	8005e78 <HAL_UART_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800156c:	f000 f98e 	bl	800188c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001570:	2100      	movs	r1, #0
 8001572:	480d      	ldr	r0, [pc, #52]	; (80015a8 <MX_USART2_UART_Init+0x90>)
 8001574:	f006 fd61 	bl	800803a <HAL_UARTEx_SetTxFifoThreshold>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800157e:	f000 f985 	bl	800188c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001582:	2100      	movs	r1, #0
 8001584:	4808      	ldr	r0, [pc, #32]	; (80015a8 <MX_USART2_UART_Init+0x90>)
 8001586:	f006 fd96 	bl	80080b6 <HAL_UARTEx_SetRxFifoThreshold>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001590:	f000 f97c 	bl	800188c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001594:	4804      	ldr	r0, [pc, #16]	; (80015a8 <MX_USART2_UART_Init+0x90>)
 8001596:	f006 fd18 	bl	8007fca <HAL_UARTEx_DisableFifoMode>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80015a0:	f000 f974 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000ab0 	.word	0x20000ab0
 80015ac:	40004400 	.word	0x40004400

080015b0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b092      	sub	sp, #72	; 0x48
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80015b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
 80015c4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80015c6:	2300      	movs	r3, #0
 80015c8:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	222c      	movs	r2, #44	; 0x2c
 80015ce:	2100      	movs	r1, #0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f009 ff84 	bl	800b4de <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015d6:	4b3f      	ldr	r3, [pc, #252]	; (80016d4 <MX_RTC_Init+0x124>)
 80015d8:	4a3f      	ldr	r2, [pc, #252]	; (80016d8 <MX_RTC_Init+0x128>)
 80015da:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80015dc:	4b3d      	ldr	r3, [pc, #244]	; (80016d4 <MX_RTC_Init+0x124>)
 80015de:	2200      	movs	r2, #0
 80015e0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80015e2:	4b3c      	ldr	r3, [pc, #240]	; (80016d4 <MX_RTC_Init+0x124>)
 80015e4:	227f      	movs	r2, #127	; 0x7f
 80015e6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80015e8:	4b3a      	ldr	r3, [pc, #232]	; (80016d4 <MX_RTC_Init+0x124>)
 80015ea:	22ff      	movs	r2, #255	; 0xff
 80015ec:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015ee:	4b39      	ldr	r3, [pc, #228]	; (80016d4 <MX_RTC_Init+0x124>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80015f4:	4b37      	ldr	r3, [pc, #220]	; (80016d4 <MX_RTC_Init+0x124>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015fa:	4b36      	ldr	r3, [pc, #216]	; (80016d4 <MX_RTC_Init+0x124>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001600:	4b34      	ldr	r3, [pc, #208]	; (80016d4 <MX_RTC_Init+0x124>)
 8001602:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001606:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001608:	4b32      	ldr	r3, [pc, #200]	; (80016d4 <MX_RTC_Init+0x124>)
 800160a:	2200      	movs	r2, #0
 800160c:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 800160e:	4b31      	ldr	r3, [pc, #196]	; (80016d4 <MX_RTC_Init+0x124>)
 8001610:	2200      	movs	r2, #0
 8001612:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001614:	482f      	ldr	r0, [pc, #188]	; (80016d4 <MX_RTC_Init+0x124>)
 8001616:	f003 fca5 	bl	8004f64 <HAL_RTC_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8001620:	f000 f934 	bl	800188c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001624:	2300      	movs	r3, #0
 8001626:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 800162a:	2300      	movs	r3, #0
 800162c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 8001630:	2300      	movs	r3, #0
 8001632:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001636:	2300      	movs	r3, #0
 8001638:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800163a:	2300      	movs	r3, #0
 800163c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800163e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001642:	2201      	movs	r2, #1
 8001644:	4619      	mov	r1, r3
 8001646:	4823      	ldr	r0, [pc, #140]	; (80016d4 <MX_RTC_Init+0x124>)
 8001648:	f003 fd0e 	bl	8005068 <HAL_RTC_SetTime>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8001652:	f000 f91b 	bl	800188c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001656:	2301      	movs	r3, #1
 8001658:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 800165c:	2301      	movs	r3, #1
 800165e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8001662:	2301      	movs	r3, #1
 8001664:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8001668:	2300      	movs	r3, #0
 800166a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800166e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001672:	2201      	movs	r2, #1
 8001674:	4619      	mov	r1, r3
 8001676:	4817      	ldr	r0, [pc, #92]	; (80016d4 <MX_RTC_Init+0x124>)
 8001678:	f003 fdf4 	bl	8005264 <HAL_RTC_SetDate>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_RTC_Init+0xd6>
  {
    Error_Handler();
 8001682:	f000 f903 	bl	800188c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001686:	2300      	movs	r3, #0
 8001688:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 800168a:	2300      	movs	r3, #0
 800168c:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 800168e:	2300      	movs	r3, #0
 8001690:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001692:	2300      	movs	r3, #0
 8001694:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800169e:	2300      	movs	r3, #0
 80016a0:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 80016aa:	2301      	movs	r3, #1
 80016ac:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 80016b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	2201      	movs	r2, #1
 80016ba:	4619      	mov	r1, r3
 80016bc:	4805      	ldr	r0, [pc, #20]	; (80016d4 <MX_RTC_Init+0x124>)
 80016be:	f003 fea5 	bl	800540c <HAL_RTC_SetAlarm>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 80016c8:	f000 f8e0 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80016cc:	bf00      	nop
 80016ce:	3748      	adds	r7, #72	; 0x48
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000b44 	.word	0x20000b44
 80016d8:	40002800 	.word	0x40002800

080016dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80016e0:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <MX_SPI2_Init+0x74>)
 80016e2:	4a1c      	ldr	r2, [pc, #112]	; (8001754 <MX_SPI2_Init+0x78>)
 80016e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80016e6:	4b1a      	ldr	r3, [pc, #104]	; (8001750 <MX_SPI2_Init+0x74>)
 80016e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80016ee:	4b18      	ldr	r3, [pc, #96]	; (8001750 <MX_SPI2_Init+0x74>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80016f4:	4b16      	ldr	r3, [pc, #88]	; (8001750 <MX_SPI2_Init+0x74>)
 80016f6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80016fa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016fc:	4b14      	ldr	r3, [pc, #80]	; (8001750 <MX_SPI2_Init+0x74>)
 80016fe:	2200      	movs	r2, #0
 8001700:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001702:	4b13      	ldr	r3, [pc, #76]	; (8001750 <MX_SPI2_Init+0x74>)
 8001704:	2200      	movs	r2, #0
 8001706:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001708:	4b11      	ldr	r3, [pc, #68]	; (8001750 <MX_SPI2_Init+0x74>)
 800170a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800170e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001710:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <MX_SPI2_Init+0x74>)
 8001712:	2200      	movs	r2, #0
 8001714:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001716:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <MX_SPI2_Init+0x74>)
 8001718:	2200      	movs	r2, #0
 800171a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <MX_SPI2_Init+0x74>)
 800171e:	2200      	movs	r2, #0
 8001720:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001722:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <MX_SPI2_Init+0x74>)
 8001724:	2200      	movs	r2, #0
 8001726:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001728:	4b09      	ldr	r3, [pc, #36]	; (8001750 <MX_SPI2_Init+0x74>)
 800172a:	2207      	movs	r2, #7
 800172c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800172e:	4b08      	ldr	r3, [pc, #32]	; (8001750 <MX_SPI2_Init+0x74>)
 8001730:	2200      	movs	r2, #0
 8001732:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <MX_SPI2_Init+0x74>)
 8001736:	2208      	movs	r2, #8
 8001738:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800173a:	4805      	ldr	r0, [pc, #20]	; (8001750 <MX_SPI2_Init+0x74>)
 800173c:	f004 f83a 	bl	80057b4 <HAL_SPI_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001746:	f000 f8a1 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000b7c 	.word	0x20000b7c
 8001754:	40003800 	.word	0x40003800

08001758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175e:	1d3b      	adds	r3, r7, #4
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800176c:	2001      	movs	r0, #1
 800176e:	f7ff fd10 	bl	8001192 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001772:	2002      	movs	r0, #2
 8001774:	f7ff fd0d 	bl	8001192 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001778:	2004      	movs	r0, #4
 800177a:	f7ff fd0a 	bl	8001192 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ADC_SW_Pin|MB_OC_Pin|LED_Pin, GPIO_PIN_RESET);
 800177e:	2200      	movs	r2, #0
 8001780:	21e0      	movs	r1, #224	; 0xe0
 8001782:	481e      	ldr	r0, [pc, #120]	; (80017fc <MX_GPIO_Init+0xa4>)
 8001784:	f001 ff8c 	bl	80036a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MB_PWR_Pin|EXT_PWR_Pin, GPIO_PIN_RESET);
 8001788:	2200      	movs	r2, #0
 800178a:	f240 2101 	movw	r1, #513	; 0x201
 800178e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001792:	f001 ff85 	bl	80036a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MB_CTL_GPIO_Port, MB_CTL_Pin, GPIO_PIN_RESET);
 8001796:	2200      	movs	r2, #0
 8001798:	2101      	movs	r1, #1
 800179a:	4819      	ldr	r0, [pc, #100]	; (8001800 <MX_GPIO_Init+0xa8>)
 800179c:	f001 ff80 	bl	80036a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_SW_Pin MB_OC_Pin LED_Pin */
  GPIO_InitStruct.Pin = ADC_SW_Pin|MB_OC_Pin|LED_Pin;
 80017a0:	23e0      	movs	r3, #224	; 0xe0
 80017a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a4:	2301      	movs	r3, #1
 80017a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ac:	2300      	movs	r3, #0
 80017ae:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	4619      	mov	r1, r3
 80017b4:	4811      	ldr	r0, [pc, #68]	; (80017fc <MX_GPIO_Init+0xa4>)
 80017b6:	f001 fe13 	bl	80033e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MB_PWR_Pin EXT_PWR_Pin */
  GPIO_InitStruct.Pin = MB_PWR_Pin|EXT_PWR_Pin;
 80017ba:	f240 2301 	movw	r3, #513	; 0x201
 80017be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c0:	2301      	movs	r3, #1
 80017c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c8:	2300      	movs	r3, #0
 80017ca:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	4619      	mov	r1, r3
 80017d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d4:	f001 fe04 	bl	80033e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MB_CTL_Pin */
  GPIO_InitStruct.Pin = MB_CTL_Pin;
 80017d8:	2301      	movs	r3, #1
 80017da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017dc:	2301      	movs	r3, #1
 80017de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e4:	2300      	movs	r3, #0
 80017e6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(MB_CTL_GPIO_Port, &GPIO_InitStruct);
 80017e8:	1d3b      	adds	r3, r7, #4
 80017ea:	4619      	mov	r1, r3
 80017ec:	4804      	ldr	r0, [pc, #16]	; (8001800 <MX_GPIO_Init+0xa8>)
 80017ee:	f001 fdf7 	bl	80033e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017f2:	bf00      	nop
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	48000400 	.word	0x48000400
 8001800:	48000800 	.word	0x48000800

08001804 <Get_AdcHandle>:
  osDelay(Delay);
}


ADC_HandleTypeDef *Get_AdcHandle(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return &hadc;
 8001808:	4b02      	ldr	r3, [pc, #8]	; (8001814 <Get_AdcHandle+0x10>)
}
 800180a:	4618      	mov	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	20000964 	.word	0x20000964

08001818 <Get_DebugHandle>:


UART_HandleTypeDef *Get_DebugHandle(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return &huart2;
 800181c:	4b02      	ldr	r3, [pc, #8]	; (8001828 <Get_DebugHandle+0x10>)
}
 800181e:	4618      	mov	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	20000ab0 	.word	0x20000ab0

0800182c <Get_SonarHandle>:

UART_HandleTypeDef *Get_SonarHandle(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  return &hlpuart1;;
 8001830:	4b02      	ldr	r3, [pc, #8]	; (800183c <Get_SonarHandle+0x10>)
}
 8001832:	4618      	mov	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	20000a1c 	.word	0x20000a1c

08001840 <Get_RtcHandle>:

RTC_HandleTypeDef  *Get_RtcHandle(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return &hrtc;
 8001844:	4b02      	ldr	r3, [pc, #8]	; (8001850 <Get_RtcHandle+0x10>)
}
 8001846:	4618      	mov	r0, r3
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	20000b44 	.word	0x20000b44

08001854 <Get_TerminalQueueHandle>:




osMessageQId Get_TerminalQueueHandle(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return xQueue1Handle;;
 8001858:	4b02      	ldr	r3, [pc, #8]	; (8001864 <Get_TerminalQueueHandle+0x10>)
 800185a:	681b      	ldr	r3, [r3, #0]
}
 800185c:	4618      	mov	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr
 8001864:	20000be4 	.word	0x20000be4

08001868 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a04      	ldr	r2, [pc, #16]	; (8001888 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d101      	bne.n	800187e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800187a:	f000 fbdd 	bl	8002038 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40012c00 	.word	0x40012c00

0800188c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001890:	b672      	cpsid	i
}
 8001892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001894:	e7fe      	b.n	8001894 <Error_Handler+0x8>

08001896 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800189a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800189e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr

080018b6 <LL_AHB2_GRP1_EnableClock>:
{
 80018b6:	b480      	push	{r7}
 80018b8:	b085      	sub	sp, #20
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80018ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4013      	ands	r3, r2
 80018d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018da:	68fb      	ldr	r3, [r7, #12]
}
 80018dc:	bf00      	nop
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr

080018e6 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b085      	sub	sp, #20
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80018ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80018fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001902:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4013      	ands	r3, r2
 8001908:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800190a:	68fb      	ldr	r3, [r7, #12]
}
 800190c:	bf00      	nop
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr

08001916 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001916:	b480      	push	{r7}
 8001918:	b085      	sub	sp, #20
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800191e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001922:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001924:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4313      	orrs	r3, r2
 800192c:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800192e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001932:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4013      	ands	r3, r2
 8001938:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800193a:	68fb      	ldr	r3, [r7, #12]
}
 800193c:	bf00      	nop
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr

08001946 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001946:	b480      	push	{r7}
 8001948:	b085      	sub	sp, #20
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800194e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001952:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001954:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4313      	orrs	r3, r2
 800195c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800195e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001962:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4013      	ands	r3, r2
 8001968:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800196a:	68fb      	ldr	r3, [r7, #12]
}
 800196c:	bf00      	nop
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr

08001976 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	210f      	movs	r1, #15
 800197e:	f06f 0001 	mvn.w	r0, #1
 8001982:	f001 fc48 	bl	8003216 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b088      	sub	sp, #32
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001994:	f107 030c 	add.w	r3, r7, #12
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a0c      	ldr	r2, [pc, #48]	; (80019dc <HAL_ADC_MspInit+0x50>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d112      	bne.n	80019d4 <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80019ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80019b2:	f7ff ffc8 	bl	8001946 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b6:	2002      	movs	r0, #2
 80019b8:	f7ff ff7d 	bl	80018b6 <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB3     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019bc:	2308      	movs	r3, #8
 80019be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019c0:	2303      	movs	r3, #3
 80019c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c8:	f107 030c 	add.w	r3, r7, #12
 80019cc:	4619      	mov	r1, r3
 80019ce:	4804      	ldr	r0, [pc, #16]	; (80019e0 <HAL_ADC_MspInit+0x54>)
 80019d0:	f001 fd06 	bl	80033e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }

}
 80019d4:	bf00      	nop
 80019d6:	3720      	adds	r7, #32
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40012400 	.word	0x40012400
 80019e0:	48000400 	.word	0x48000400

080019e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b096      	sub	sp, #88	; 0x58
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019fc:	f107 030c 	add.w	r3, r7, #12
 8001a00:	2238      	movs	r2, #56	; 0x38
 8001a02:	2100      	movs	r1, #0
 8001a04:	4618      	mov	r0, r3
 8001a06:	f009 fd6a 	bl	800b4de <memset>
  if(hi2c->Instance==I2C2)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a21      	ldr	r2, [pc, #132]	; (8001a94 <HAL_I2C_MspInit+0xb0>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d13b      	bne.n	8001a8c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001a14:	2380      	movs	r3, #128	; 0x80
 8001a16:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001a18:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a1e:	f107 030c 	add.w	r3, r7, #12
 8001a22:	4618      	mov	r0, r3
 8001a24:	f003 f984 	bl	8004d30 <HAL_RCCEx_PeriphCLKConfig>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001a2e:	f7ff ff2d 	bl	800188c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a32:	2001      	movs	r0, #1
 8001a34:	f7ff ff3f 	bl	80018b6 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a38:	2002      	movs	r0, #2
 8001a3a:	f7ff ff3c 	bl	80018b6 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a42:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a44:	2312      	movs	r3, #18
 8001a46:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a50:	2304      	movs	r3, #4
 8001a52:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a54:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a5e:	f001 fcbf 	bl	80033e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a66:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a68:	2312      	movs	r3, #18
 8001a6a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a70:	2300      	movs	r3, #0
 8001a72:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a74:	2304      	movs	r3, #4
 8001a76:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a78:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4806      	ldr	r0, [pc, #24]	; (8001a98 <HAL_I2C_MspInit+0xb4>)
 8001a80:	f001 fcae 	bl	80033e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a84:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001a88:	f7ff ff2d 	bl	80018e6 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001a8c:	bf00      	nop
 8001a8e:	3758      	adds	r7, #88	; 0x58
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40005800 	.word	0x40005800
 8001a98:	48000400 	.word	0x48000400

08001a9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b096      	sub	sp, #88	; 0x58
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ab4:	f107 030c 	add.w	r3, r7, #12
 8001ab8:	2238      	movs	r2, #56	; 0x38
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f009 fd0e 	bl	800b4de <memset>
  if(huart->Instance==LPUART1)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a34      	ldr	r2, [pc, #208]	; (8001b98 <HAL_UART_MspInit+0xfc>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d12c      	bne.n	8001b26 <HAL_UART_MspInit+0x8a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001acc:	2320      	movs	r3, #32
 8001ace:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ad4:	f107 030c 	add.w	r3, r7, #12
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f003 f929 	bl	8004d30 <HAL_RCCEx_PeriphCLKConfig>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ae4:	f7ff fed2 	bl	800188c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001ae8:	2001      	movs	r0, #1
 8001aea:	f7ff ff14 	bl	8001916 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aee:	2004      	movs	r0, #4
 8001af0:	f7ff fee1 	bl	80018b6 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = MB_RX_Pin;
 8001af4:	2302      	movs	r3, #2
 8001af6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001af8:	2312      	movs	r3, #18
 8001afa:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001afc:	2301      	movs	r3, #1
 8001afe:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b00:	2300      	movs	r3, #0
 8001b02:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001b04:	2308      	movs	r3, #8
 8001b06:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(MB_RX_GPIO_Port, &GPIO_InitStruct);
 8001b08:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4823      	ldr	r0, [pc, #140]	; (8001b9c <HAL_UART_MspInit+0x100>)
 8001b10:	f001 fc66 	bl	80033e0 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8001b14:	2200      	movs	r2, #0
 8001b16:	2105      	movs	r1, #5
 8001b18:	2026      	movs	r0, #38	; 0x26
 8001b1a:	f001 fb7c 	bl	8003216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001b1e:	2026      	movs	r0, #38	; 0x26
 8001b20:	f001 fb93 	bl	800324a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b24:	e033      	b.n	8001b8e <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART2)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a1d      	ldr	r2, [pc, #116]	; (8001ba0 <HAL_UART_MspInit+0x104>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d12e      	bne.n	8001b8e <HAL_UART_MspInit+0xf2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b30:	2302      	movs	r3, #2
 8001b32:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b34:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001b38:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b3a:	f107 030c 	add.w	r3, r7, #12
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f003 f8f6 	bl	8004d30 <HAL_RCCEx_PeriphCLKConfig>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <HAL_UART_MspInit+0xb2>
      Error_Handler();
 8001b4a:	f7ff fe9f 	bl	800188c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b4e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001b52:	f7ff fec8 	bl	80018e6 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b56:	2001      	movs	r0, #1
 8001b58:	f7ff fead 	bl	80018b6 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8001b5c:	230c      	movs	r3, #12
 8001b5e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b60:	2302      	movs	r3, #2
 8001b62:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b6c:	2307      	movs	r3, #7
 8001b6e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b70:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b74:	4619      	mov	r1, r3
 8001b76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b7a:	f001 fc31 	bl	80033e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2105      	movs	r1, #5
 8001b82:	2025      	movs	r0, #37	; 0x25
 8001b84:	f001 fb47 	bl	8003216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b88:	2025      	movs	r0, #37	; 0x25
 8001b8a:	f001 fb5e 	bl	800324a <HAL_NVIC_EnableIRQ>
}
 8001b8e:	bf00      	nop
 8001b90:	3758      	adds	r7, #88	; 0x58
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40008000 	.word	0x40008000
 8001b9c:	48000800 	.word	0x48000800
 8001ba0:	40004400 	.word	0x40004400

08001ba4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b090      	sub	sp, #64	; 0x40
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bac:	f107 0308 	add.w	r3, r7, #8
 8001bb0:	2238      	movs	r2, #56	; 0x38
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f009 fc92 	bl	800b4de <memset>
  if(hrtc->Instance==RTC)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a0e      	ldr	r2, [pc, #56]	; (8001bf8 <HAL_RTC_MspInit+0x54>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d115      	bne.n	8001bf0 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001bc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bc8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001bca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bce:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bd0:	f107 0308 	add.w	r3, r7, #8
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f003 f8ab 	bl	8004d30 <HAL_RCCEx_PeriphCLKConfig>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001be0:	f7ff fe54 	bl	800188c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001be4:	f7ff fe57 	bl	8001896 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001be8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001bec:	f7ff fe7b 	bl	80018e6 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001bf0:	bf00      	nop
 8001bf2:	3740      	adds	r7, #64	; 0x40
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40002800 	.word	0x40002800

08001bfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b096      	sub	sp, #88	; 0x58
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c04:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c14:	f107 030c 	add.w	r3, r7, #12
 8001c18:	2238      	movs	r2, #56	; 0x38
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f009 fc5e 	bl	800b4de <memset>
  if(hspi->Instance==SPI2)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a21      	ldr	r2, [pc, #132]	; (8001cac <HAL_SPI_MspInit+0xb0>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d13b      	bne.n	8001ca4 <HAL_SPI_MspInit+0xa8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 8001c2c:	2310      	movs	r3, #16
 8001c2e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 8001c30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c34:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c36:	f107 030c 	add.w	r3, r7, #12
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f003 f878 	bl	8004d30 <HAL_RCCEx_PeriphCLKConfig>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001c46:	f7ff fe21 	bl	800188c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c4a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001c4e:	f7ff fe4a 	bl	80018e6 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c52:	2002      	movs	r0, #2
 8001c54:	f7ff fe2f 	bl	80018b6 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c58:	2001      	movs	r0, #1
 8001c5a:	f7ff fe2c 	bl	80018b6 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PA10     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 8001c5e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001c62:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c64:	2302      	movs	r3, #2
 8001c66:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c70:	2305      	movs	r3, #5
 8001c72:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c74:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c78:	4619      	mov	r1, r3
 8001c7a:	480d      	ldr	r0, [pc, #52]	; (8001cb0 <HAL_SPI_MspInit+0xb4>)
 8001c7c:	f001 fbb0 	bl	80033e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c84:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c86:	2302      	movs	r3, #2
 8001c88:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c92:	2305      	movs	r3, #5
 8001c94:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c96:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ca0:	f001 fb9e 	bl	80033e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001ca4:	bf00      	nop
 8001ca6:	3758      	adds	r7, #88	; 0x58
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40003800 	.word	0x40003800
 8001cb0:	48000400 	.word	0x48000400

08001cb4 <LL_APB2_GRP1_EnableClock>:
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cc0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
}
 8001cda:	bf00      	nop
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08c      	sub	sp, #48	; 0x30
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001cfa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001cfe:	f7ff ffd9 	bl	8001cb4 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d02:	f107 0208 	add.w	r2, r7, #8
 8001d06:	f107 030c 	add.w	r3, r7, #12
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f002 fe2b 	bl	8004968 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001d12:	f002 fe17 	bl	8004944 <HAL_RCC_GetPCLK2Freq>
 8001d16:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1a:	4a21      	ldr	r2, [pc, #132]	; (8001da0 <HAL_InitTick+0xbc>)
 8001d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d20:	0c9b      	lsrs	r3, r3, #18
 8001d22:	3b01      	subs	r3, #1
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001d26:	4b1f      	ldr	r3, [pc, #124]	; (8001da4 <HAL_InitTick+0xc0>)
 8001d28:	4a1f      	ldr	r2, [pc, #124]	; (8001da8 <HAL_InitTick+0xc4>)
 8001d2a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001d2c:	4b1d      	ldr	r3, [pc, #116]	; (8001da4 <HAL_InitTick+0xc0>)
 8001d2e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d32:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001d34:	4a1b      	ldr	r2, [pc, #108]	; (8001da4 <HAL_InitTick+0xc0>)
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001d3a:	4b1a      	ldr	r3, [pc, #104]	; (8001da4 <HAL_InitTick+0xc0>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d40:	4b18      	ldr	r3, [pc, #96]	; (8001da4 <HAL_InitTick+0xc0>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001d46:	4817      	ldr	r0, [pc, #92]	; (8001da4 <HAL_InitTick+0xc0>)
 8001d48:	f003 fe08 	bl	800595c <HAL_TIM_Base_Init>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001d52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d11b      	bne.n	8001d92 <HAL_InitTick+0xae>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001d5a:	4812      	ldr	r0, [pc, #72]	; (8001da4 <HAL_InitTick+0xc0>)
 8001d5c:	f003 fe5e 	bl	8005a1c <HAL_TIM_Base_Start_IT>
 8001d60:	4603      	mov	r3, r0
 8001d62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001d66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d111      	bne.n	8001d92 <HAL_InitTick+0xae>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001d6e:	2018      	movs	r0, #24
 8001d70:	f001 fa6b 	bl	800324a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b0f      	cmp	r3, #15
 8001d78:	d808      	bhi.n	8001d8c <HAL_InitTick+0xa8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	6879      	ldr	r1, [r7, #4]
 8001d7e:	2018      	movs	r0, #24
 8001d80:	f001 fa49 	bl	8003216 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d84:	4a09      	ldr	r2, [pc, #36]	; (8001dac <HAL_InitTick+0xc8>)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	e002      	b.n	8001d92 <HAL_InitTick+0xae>
      }
      else
      {
        status = HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001d92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3730      	adds	r7, #48	; 0x30
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	431bde83 	.word	0x431bde83
 8001da4:	20000bf8 	.word	0x20000bf8
 8001da8:	40012c00 	.word	0x40012c00
 8001dac:	20000004 	.word	0x20000004

08001db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001db4:	e7fe      	b.n	8001db4 <NMI_Handler+0x4>

08001db6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dba:	e7fe      	b.n	8001dba <HardFault_Handler+0x4>

08001dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dc0:	e7fe      	b.n	8001dc0 <MemManage_Handler+0x4>

08001dc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dc6:	e7fe      	b.n	8001dc6 <BusFault_Handler+0x4>

08001dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <UsageFault_Handler+0x4>

08001dce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr
	...

08001ddc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update Interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001de0:	4802      	ldr	r0, [pc, #8]	; (8001dec <TIM1_UP_IRQHandler+0x10>)
 8001de2:	f003 fe67 	bl	8005ab4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000bf8 	.word	0x20000bf8

08001df0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001df4:	4802      	ldr	r0, [pc, #8]	; (8001e00 <USART2_IRQHandler+0x10>)
 8001df6:	f004 fa7d 	bl	80062f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000ab0 	.word	0x20000ab0

08001e04 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001e08:	4802      	ldr	r0, [pc, #8]	; (8001e14 <LPUART1_IRQHandler+0x10>)
 8001e0a:	f004 fa73 	bl	80062f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000a1c 	.word	0x20000a1c

08001e18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return 1;
 8001e1c:	2301      	movs	r3, #1
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr

08001e26 <_kill>:

int _kill(int pid, int sig)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
 8001e2e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e30:	f009 fa24 	bl	800b27c <__errno>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2216      	movs	r2, #22
 8001e38:	601a      	str	r2, [r3, #0]
  return -1;
 8001e3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <_exit>:

void _exit (int status)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e4e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff ffe7 	bl	8001e26 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e58:	e7fe      	b.n	8001e58 <_exit+0x12>

08001e5a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	60f8      	str	r0, [r7, #12]
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
 8001e6a:	e00a      	b.n	8001e82 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e6c:	f3af 8000 	nop.w
 8001e70:	4601      	mov	r1, r0
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	1c5a      	adds	r2, r3, #1
 8001e76:	60ba      	str	r2, [r7, #8]
 8001e78:	b2ca      	uxtb	r2, r1
 8001e7a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	dbf0      	blt.n	8001e6c <_read+0x12>
  }

  return len;
 8001e8a:	687b      	ldr	r3, [r7, #4]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]
 8001ea4:	e009      	b.n	8001eba <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	1c5a      	adds	r2, r3, #1
 8001eaa:	60ba      	str	r2, [r7, #8]
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	dbf1      	blt.n	8001ea6 <_write+0x12>
  }
  return len;
 8001ec2:	687b      	ldr	r3, [r7, #4]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <_close>:

int _close(int file)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ed4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bc80      	pop	{r7}
 8001ee0:	4770      	bx	lr

08001ee2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
 8001eea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ef2:	605a      	str	r2, [r3, #4]
  return 0;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr

08001f00 <_isatty>:

int _isatty(int file)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f08:	2301      	movs	r3, #1
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr

08001f14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr

08001f2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f34:	4a14      	ldr	r2, [pc, #80]	; (8001f88 <_sbrk+0x5c>)
 8001f36:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <_sbrk+0x60>)
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f40:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <_sbrk+0x64>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d102      	bne.n	8001f4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f48:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <_sbrk+0x64>)
 8001f4a:	4a12      	ldr	r2, [pc, #72]	; (8001f94 <_sbrk+0x68>)
 8001f4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f4e:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <_sbrk+0x64>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4413      	add	r3, r2
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d207      	bcs.n	8001f6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f5c:	f009 f98e 	bl	800b27c <__errno>
 8001f60:	4603      	mov	r3, r0
 8001f62:	220c      	movs	r2, #12
 8001f64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f6a:	e009      	b.n	8001f80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f6c:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <_sbrk+0x64>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f72:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <_sbrk+0x64>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4413      	add	r3, r2
 8001f7a:	4a05      	ldr	r2, [pc, #20]	; (8001f90 <_sbrk+0x64>)
 8001f7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20010000 	.word	0x20010000
 8001f8c:	00000400 	.word	0x00000400
 8001f90:	20000c44 	.word	0x20000c44
 8001f94:	20001d70 	.word	0x20001d70

08001f98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fa4:	480d      	ldr	r0, [pc, #52]	; (8001fdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001fa6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fa8:	f7ff fff6 	bl	8001f98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fac:	480c      	ldr	r0, [pc, #48]	; (8001fe0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fae:	490d      	ldr	r1, [pc, #52]	; (8001fe4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fb0:	4a0d      	ldr	r2, [pc, #52]	; (8001fe8 <LoopForever+0xe>)
  movs r3, #0
 8001fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fb4:	e002      	b.n	8001fbc <LoopCopyDataInit>

08001fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fba:	3304      	adds	r3, #4

08001fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fc0:	d3f9      	bcc.n	8001fb6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fc2:	4a0a      	ldr	r2, [pc, #40]	; (8001fec <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fc4:	4c0a      	ldr	r4, [pc, #40]	; (8001ff0 <LoopForever+0x16>)
  movs r3, #0
 8001fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc8:	e001      	b.n	8001fce <LoopFillZerobss>

08001fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fcc:	3204      	adds	r2, #4

08001fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fd0:	d3fb      	bcc.n	8001fca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001fd2:	f009 fa4f 	bl	800b474 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fd6:	f7ff f8f5 	bl	80011c4 <main>

08001fda <LoopForever>:

LoopForever:
    b LoopForever
 8001fda:	e7fe      	b.n	8001fda <LoopForever>
  ldr   r0, =_estack
 8001fdc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001fe0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fe4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001fe8:	0800fd58 	.word	0x0800fd58
  ldr r2, =_sbss
 8001fec:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001ff0:	20001d6c 	.word	0x20001d6c

08001ff4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ff4:	e7fe      	b.n	8001ff4 <ADC_IRQHandler>
	...

08001ff8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ffe:	2300      	movs	r3, #0
 8002000:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002002:	2003      	movs	r0, #3
 8002004:	f001 f8fc 	bl	8003200 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002008:	f002 fc76 	bl	80048f8 <HAL_RCC_GetHCLKFreq>
 800200c:	4603      	mov	r3, r0
 800200e:	4a09      	ldr	r2, [pc, #36]	; (8002034 <HAL_Init+0x3c>)
 8002010:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002012:	200f      	movs	r0, #15
 8002014:	f7ff fe66 	bl	8001ce4 <HAL_InitTick>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d002      	beq.n	8002024 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	71fb      	strb	r3, [r7, #7]
 8002022:	e001      	b.n	8002028 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002024:	f7ff fca7 	bl	8001976 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002028:	79fb      	ldrb	r3, [r7, #7]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20000000 	.word	0x20000000

08002038 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800203c:	4b05      	ldr	r3, [pc, #20]	; (8002054 <HAL_IncTick+0x1c>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	461a      	mov	r2, r3
 8002042:	4b05      	ldr	r3, [pc, #20]	; (8002058 <HAL_IncTick+0x20>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4413      	add	r3, r2
 8002048:	4a03      	ldr	r2, [pc, #12]	; (8002058 <HAL_IncTick+0x20>)
 800204a:	6013      	str	r3, [r2, #0]
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr
 8002054:	20000008 	.word	0x20000008
 8002058:	20000c48 	.word	0x20000c48

0800205c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  return uwTick;
 8002060:	4b02      	ldr	r3, [pc, #8]	; (800206c <HAL_GetTick+0x10>)
 8002062:	681b      	ldr	r3, [r3, #0]
}
 8002064:	4618      	mov	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr
 800206c:	20000c48 	.word	0x20000c48

08002070 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002078:	f7ff fff0 	bl	800205c <HAL_GetTick>
 800207c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002088:	d005      	beq.n	8002096 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800208a:	4b0a      	ldr	r3, [pc, #40]	; (80020b4 <HAL_Delay+0x44>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	461a      	mov	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4413      	add	r3, r2
 8002094:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002096:	bf00      	nop
 8002098:	f7ff ffe0 	bl	800205c <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d8f7      	bhi.n	8002098 <HAL_Delay+0x28>
  {
  }
}
 80020a8:	bf00      	nop
 80020aa:	bf00      	nop
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000008 	.word	0x20000008

080020b8 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80020bc:	4b02      	ldr	r3, [pc, #8]	; (80020c8 <HAL_GetUIDw0+0x10>)
 80020be:	681b      	ldr	r3, [r3, #0]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr
 80020c8:	1fff7590 	.word	0x1fff7590

080020cc <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80020d0:	4b02      	ldr	r3, [pc, #8]	; (80020dc <HAL_GetUIDw1+0x10>)
 80020d2:	681b      	ldr	r3, [r3, #0]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr
 80020dc:	1fff7594 	.word	0x1fff7594

080020e0 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80020e4:	4b02      	ldr	r3, [pc, #8]	; (80020f0 <HAL_GetUIDw2+0x10>)
 80020e6:	681b      	ldr	r3, [r3, #0]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr
 80020f0:	1fff7598 	.word	0x1fff7598

080020f4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	431a      	orrs	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	601a      	str	r2, [r3, #0]
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr

08002118 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002128:	4618      	mov	r0, r3
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr

08002132 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002132:	b480      	push	{r7}
 8002134:	b085      	sub	sp, #20
 8002136:	af00      	add	r7, sp, #0
 8002138:	60f8      	str	r0, [r7, #12]
 800213a:	60b9      	str	r1, [r7, #8]
 800213c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	695a      	ldr	r2, [r3, #20]
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2107      	movs	r1, #7
 800214a:	fa01 f303 	lsl.w	r3, r1, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	401a      	ands	r2, r3
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	fa01 f303 	lsl.w	r3, r1, r3
 800215e:	431a      	orrs	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002164:	bf00      	nop
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	bc80      	pop	{r7}
 800216c:	4770      	bx	lr

0800216e <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
 8002176:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	695a      	ldr	r2, [r3, #20]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	2107      	movs	r1, #7
 8002184:	fa01 f303 	lsl.w	r3, r1, r3
 8002188:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002194:	4618      	mov	r0, r3
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr

0800219e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80021b2:	2301      	movs	r3, #1
 80021b4:	e000      	b.n	80021b8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	bc80      	pop	{r7}
 80021c0:	4770      	bx	lr

080021c2 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b085      	sub	sp, #20
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	60f8      	str	r0, [r7, #12]
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	f003 031f 	and.w	r3, r3, #31
 80021d8:	210f      	movs	r1, #15
 80021da:	fa01 f303 	lsl.w	r3, r1, r3
 80021de:	43db      	mvns	r3, r3
 80021e0:	401a      	ands	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	0e9b      	lsrs	r3, r3, #26
 80021e6:	f003 010f 	and.w	r1, r3, #15
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	f003 031f 	and.w	r3, r3, #31
 80021f0:	fa01 f303 	lsl.w	r3, r1, r3
 80021f4:	431a      	orrs	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80021fa:	bf00      	nop
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr

08002204 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002218:	431a      	orrs	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr

08002228 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800223c:	43db      	mvns	r3, r3
 800223e:	401a      	ands	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	bc80      	pop	{r7}
 800224c:	4770      	bx	lr

0800224e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800224e:	b480      	push	{r7}
 8002250:	b085      	sub	sp, #20
 8002252:	af00      	add	r7, sp, #0
 8002254:	60f8      	str	r0, [r7, #12]
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	695a      	ldr	r2, [r3, #20]
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	021b      	lsls	r3, r3, #8
 8002262:	43db      	mvns	r3, r3
 8002264:	401a      	ands	r2, r3
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	0219      	lsls	r1, r3, #8
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	400b      	ands	r3, r1
 800226e:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8002272:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002276:	431a      	orrs	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800227c:	bf00      	nop
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	bc80      	pop	{r7}
 8002284:	4770      	bx	lr

08002286 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002296:	f023 0317 	bic.w	r3, r3, #23
 800229a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr

080022ac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022c0:	d101      	bne.n	80022c6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr

080022d2 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022e2:	f023 0317 	bic.w	r3, r3, #23
 80022e6:	f043 0201 	orr.w	r2, r3, #1
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr

080022f8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002308:	f023 0317 	bic.w	r3, r3, #23
 800230c:	f043 0202 	orr.w	r2, r3, #2
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr

0800231e <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b01      	cmp	r3, #1
 8002330:	d101      	bne.n	8002336 <LL_ADC_IsEnabled+0x18>
 8002332:	2301      	movs	r3, #1
 8002334:	e000      	b.n	8002338 <LL_ADC_IsEnabled+0x1a>
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr

08002342 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b02      	cmp	r3, #2
 8002354:	d101      	bne.n	800235a <LL_ADC_IsDisableOngoing+0x18>
 8002356:	2301      	movs	r3, #1
 8002358:	e000      	b.n	800235c <LL_ADC_IsDisableOngoing+0x1a>
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr

08002366 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002366:	b480      	push	{r7}
 8002368:	b083      	sub	sp, #12
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002376:	f023 0317 	bic.w	r3, r3, #23
 800237a:	f043 0204 	orr.w	r2, r3, #4
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr

0800238c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800239c:	f023 0317 	bic.w	r3, r3, #23
 80023a0:	f043 0210 	orr.w	r2, r3, #16
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr

080023b2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b083      	sub	sp, #12
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 0304 	and.w	r3, r3, #4
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d101      	bne.n	80023ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80023c6:	2301      	movs	r3, #1
 80023c8:	e000      	b.n	80023cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bc80      	pop	{r7}
 80023d4:	4770      	bx	lr
	...

080023d8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b088      	sub	sp, #32
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023e0:	2300      	movs	r3, #0
 80023e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e17e      	b.n	80026f8 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002404:	2b00      	cmp	r3, #0
 8002406:	d109      	bne.n	800241c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7ff fabf 	bl	800198c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff ff43 	bl	80022ac <LL_ADC_IsInternalRegulatorEnabled>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d115      	bne.n	8002458 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff ff28 	bl	8002286 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002436:	4b9e      	ldr	r3, [pc, #632]	; (80026b0 <HAL_ADC_Init+0x2d8>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	099b      	lsrs	r3, r3, #6
 800243c:	4a9d      	ldr	r2, [pc, #628]	; (80026b4 <HAL_ADC_Init+0x2dc>)
 800243e:	fba2 2303 	umull	r2, r3, r2, r3
 8002442:	099b      	lsrs	r3, r3, #6
 8002444:	3301      	adds	r3, #1
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800244a:	e002      	b.n	8002452 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	3b01      	subs	r3, #1
 8002450:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1f9      	bne.n	800244c <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff ff25 	bl	80022ac <LL_ADC_IsInternalRegulatorEnabled>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10d      	bne.n	8002484 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246c:	f043 0210 	orr.w	r2, r3, #16
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002478:	f043 0201 	orr.w	r2, r3, #1
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff ff92 	bl	80023b2 <LL_ADC_REG_IsConversionOngoing>
 800248e:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002494:	f003 0310 	and.w	r3, r3, #16
 8002498:	2b00      	cmp	r3, #0
 800249a:	f040 8124 	bne.w	80026e6 <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f040 8120 	bne.w	80026e6 <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024aa:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80024ae:	f043 0202 	orr.w	r2, r3, #2
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff ff2f 	bl	800231e <LL_ADC_IsEnabled>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f040 80a7 	bne.w	8002616 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	7e1b      	ldrb	r3, [r3, #24]
 80024d0:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80024d2:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	7e5b      	ldrb	r3, [r3, #25]
 80024d8:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80024da:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	7e9b      	ldrb	r3, [r3, #26]
 80024e0:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80024e2:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80024e8:	2a00      	cmp	r2, #0
 80024ea:	d002      	beq.n	80024f2 <HAL_ADC_Init+0x11a>
 80024ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024f0:	e000      	b.n	80024f4 <HAL_ADC_Init+0x11c>
 80024f2:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80024f4:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80024fa:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	2b00      	cmp	r3, #0
 8002502:	da04      	bge.n	800250e <HAL_ADC_Init+0x136>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800250c:	e001      	b.n	8002512 <HAL_ADC_Init+0x13a>
 800250e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8002512:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800251a:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800251c:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4313      	orrs	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f893 3020 	ldrb.w	r3, [r3, #32]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d114      	bne.n	8002558 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	7e9b      	ldrb	r3, [r3, #26]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d104      	bne.n	8002540 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800253c:	61bb      	str	r3, [r7, #24]
 800253e:	e00b      	b.n	8002558 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002544:	f043 0220 	orr.w	r2, r3, #32
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002550:	f043 0201 	orr.w	r2, r3, #1
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	2b00      	cmp	r3, #0
 800255e:	d009      	beq.n	8002574 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800256c:	4313      	orrs	r3, r2
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4313      	orrs	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 800257e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6812      	ldr	r2, [r2, #0]
 8002586:	69b9      	ldr	r1, [r7, #24]
 8002588:	430b      	orrs	r3, r1
 800258a:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002598:	4313      	orrs	r3, r2
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	4313      	orrs	r3, r2
 800259e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d111      	bne.n	80025ce <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80025b6:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80025bc:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80025c2:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	691a      	ldr	r2, [r3, #16]
 80025d4:	4b38      	ldr	r3, [pc, #224]	; (80026b8 <HAL_ADC_Init+0x2e0>)
 80025d6:	4013      	ands	r3, r2
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6812      	ldr	r2, [r2, #0]
 80025dc:	6979      	ldr	r1, [r7, #20]
 80025de:	430b      	orrs	r3, r1
 80025e0:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80025ea:	d014      	beq.n	8002616 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80025f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025f4:	d00f      	beq.n	8002616 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80025fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025fe:	d00a      	beq.n	8002616 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002600:	4b2e      	ldr	r3, [pc, #184]	; (80026bc <HAL_ADC_Init+0x2e4>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002610:	492a      	ldr	r1, [pc, #168]	; (80026bc <HAL_ADC_Init+0x2e4>)
 8002612:	4313      	orrs	r3, r2
 8002614:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6818      	ldr	r0, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800261e:	461a      	mov	r2, r3
 8002620:	2100      	movs	r1, #0
 8002622:	f7ff fd86 	bl	8002132 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6818      	ldr	r0, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262e:	461a      	mov	r2, r3
 8002630:	4923      	ldr	r1, [pc, #140]	; (80026c0 <HAL_ADC_Init+0x2e8>)
 8002632:	f7ff fd7e 	bl	8002132 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d108      	bne.n	8002650 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f062 020f 	orn	r2, r2, #15
 800264c:	629a      	str	r2, [r3, #40]	; 0x28
 800264e:	e017      	b.n	8002680 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002658:	d112      	bne.n	8002680 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69db      	ldr	r3, [r3, #28]
 8002664:	3b01      	subs	r3, #1
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	f003 031c 	and.w	r3, r3, #28
 800266c:	f06f 020f 	mvn.w	r2, #15
 8002670:	fa02 f103 	lsl.w	r1, r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2100      	movs	r1, #0
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff fd71 	bl	800216e <LL_ADC_GetSamplingTimeCommonChannels>
 800268c:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002692:	429a      	cmp	r2, r3
 8002694:	d116      	bne.n	80026c4 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a0:	f023 0303 	bic.w	r3, r3, #3
 80026a4:	f043 0201 	orr.w	r2, r3, #1
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80026ac:	e023      	b.n	80026f6 <HAL_ADC_Init+0x31e>
 80026ae:	bf00      	nop
 80026b0:	20000000 	.word	0x20000000
 80026b4:	053e2d63 	.word	0x053e2d63
 80026b8:	1ffffc02 	.word	0x1ffffc02
 80026bc:	40012708 	.word	0x40012708
 80026c0:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c8:	f023 0312 	bic.w	r3, r3, #18
 80026cc:	f043 0210 	orr.w	r2, r3, #16
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d8:	f043 0201 	orr.w	r2, r3, #1
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80026e4:	e007      	b.n	80026f6 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ea:	f043 0210 	orr.w	r2, r3, #16
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 80026f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3720      	adds	r7, #32
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff fe50 	bl	80023b2 <LL_ADC_REG_IsConversionOngoing>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d132      	bne.n	800277e <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800271e:	2b01      	cmp	r3, #1
 8002720:	d101      	bne.n	8002726 <HAL_ADC_Start+0x26>
 8002722:	2302      	movs	r3, #2
 8002724:	e02e      	b.n	8002784 <HAL_ADC_Start+0x84>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 fa8a 	bl	8002c48 <ADC_Enable>
 8002734:	4603      	mov	r3, r0
 8002736:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d11a      	bne.n	8002774 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002742:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002746:	f023 0301 	bic.w	r3, r3, #1
 800274a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	221c      	movs	r2, #28
 800275e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff fdfa 	bl	8002366 <LL_ADC_REG_StartConversion>
 8002772:	e006      	b.n	8002782 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800277c:	e001      	b.n	8002782 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800277e:	2302      	movs	r3, #2
 8002780:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8002782:	7bfb      	ldrb	r3, [r7, #15]
}
 8002784:	4618      	mov	r0, r3
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800279a:	2b01      	cmp	r3, #1
 800279c:	d101      	bne.n	80027a2 <HAL_ADC_Stop+0x16>
 800279e:	2302      	movs	r3, #2
 80027a0:	e022      	b.n	80027e8 <HAL_ADC_Stop+0x5c>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 fa07 	bl	8002bbe <ADC_ConversionStop>
 80027b0:	4603      	mov	r3, r0
 80027b2:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80027b4:	7bfb      	ldrb	r3, [r7, #15]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d111      	bne.n	80027de <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 faca 	bl	8002d54 <ADC_Disable>
 80027c0:	4603      	mov	r3, r0
 80027c2:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d109      	bne.n	80027de <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027d2:	f023 0301 	bic.w	r3, r3, #1
 80027d6:	f043 0201 	orr.w	r2, r3, #1
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d102      	bne.n	8002808 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8002802:	2308      	movs	r3, #8
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	e010      	b.n	800282a <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	d007      	beq.n	8002826 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281a:	f043 0220 	orr.w	r2, r3, #32
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e077      	b.n	8002916 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002826:	2304      	movs	r3, #4
 8002828:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800282a:	f7ff fc17 	bl	800205c <HAL_GetTick>
 800282e:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002830:	e021      	b.n	8002876 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002838:	d01d      	beq.n	8002876 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800283a:	f7ff fc0f 	bl	800205c <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	429a      	cmp	r2, r3
 8002848:	d302      	bcc.n	8002850 <HAL_ADC_PollForConversion+0x60>
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d112      	bne.n	8002876 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	4013      	ands	r3, r2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10b      	bne.n	8002876 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002862:	f043 0204 	orr.w	r2, r3, #4
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e04f      	b.n	8002916 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4013      	ands	r3, r2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0d6      	beq.n	8002832 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002888:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff fc82 	bl	800219e <LL_ADC_REG_IsTriggerSourceSWStart>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d031      	beq.n	8002904 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	7e9b      	ldrb	r3, [r3, #26]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d12d      	bne.n	8002904 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	2b08      	cmp	r3, #8
 80028b4:	d126      	bne.n	8002904 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff fd79 	bl	80023b2 <LL_ADC_REG_IsConversionOngoing>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d112      	bne.n	80028ec <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 020c 	bic.w	r2, r2, #12
 80028d4:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028de:	f023 0301 	bic.w	r3, r3, #1
 80028e2:	f043 0201 	orr.w	r2, r3, #1
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	659a      	str	r2, [r3, #88]	; 0x58
 80028ea:	e00b      	b.n	8002904 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f0:	f043 0220 	orr.w	r2, r3, #32
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fc:	f043 0201 	orr.w	r2, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	7e1b      	ldrb	r3, [r3, #24]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d103      	bne.n	8002914 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	220c      	movs	r2, #12
 8002912:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800292c:	4618      	mov	r0, r3
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr
	...

08002938 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b088      	sub	sp, #32
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002946:	2300      	movs	r3, #0
 8002948:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002958:	2b01      	cmp	r3, #1
 800295a:	d101      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x28>
 800295c:	2302      	movs	r3, #2
 800295e:	e110      	b.n	8002b82 <HAL_ADC_ConfigChannel+0x24a>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff fd20 	bl	80023b2 <LL_ADC_REG_IsConversionOngoing>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	f040 80f7 	bne.w	8002b68 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b02      	cmp	r3, #2
 8002980:	f000 80b1 	beq.w	8002ae6 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800298c:	d004      	beq.n	8002998 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002992:	4a7e      	ldr	r2, [pc, #504]	; (8002b8c <HAL_ADC_ConfigChannel+0x254>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d108      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4619      	mov	r1, r3
 80029a2:	4610      	mov	r0, r2
 80029a4:	f7ff fc2e 	bl	8002204 <LL_ADC_REG_SetSequencerChAdd>
 80029a8:	e041      	b.n	8002a2e <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f003 031f 	and.w	r3, r3, #31
 80029b6:	210f      	movs	r1, #15
 80029b8:	fa01 f303 	lsl.w	r3, r1, r3
 80029bc:	43db      	mvns	r3, r3
 80029be:	401a      	ands	r2, r3
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d105      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0xa0>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	0e9b      	lsrs	r3, r3, #26
 80029d2:	f003 031f 	and.w	r3, r3, #31
 80029d6:	e011      	b.n	80029fc <HAL_ADC_ConfigChannel+0xc4>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	fa93 f3a3 	rbit	r3, r3
 80029e4:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 80029f0:	2320      	movs	r3, #32
 80029f2:	e003      	b.n	80029fc <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	fab3 f383 	clz	r3, r3
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	6839      	ldr	r1, [r7, #0]
 80029fe:	6849      	ldr	r1, [r1, #4]
 8002a00:	f001 011f 	and.w	r1, r1, #31
 8002a04:	408b      	lsls	r3, r1
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	089b      	lsrs	r3, r3, #2
 8002a12:	1c5a      	adds	r2, r3, #1
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d808      	bhi.n	8002a2e <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6818      	ldr	r0, [r3, #0]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	6859      	ldr	r1, [r3, #4]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	f7ff fbca 	bl	80021c2 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6818      	ldr	r0, [r3, #0]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	6819      	ldr	r1, [r3, #0]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	f7ff fc07 	bl	800224e <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f280 8097 	bge.w	8002b78 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a4a:	4851      	ldr	r0, [pc, #324]	; (8002b90 <HAL_ADC_ConfigChannel+0x258>)
 8002a4c:	f7ff fb64 	bl	8002118 <LL_ADC_GetCommonPathInternalCh>
 8002a50:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a4f      	ldr	r2, [pc, #316]	; (8002b94 <HAL_ADC_ConfigChannel+0x25c>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d120      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d11b      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4848      	ldr	r0, [pc, #288]	; (8002b90 <HAL_ADC_ConfigChannel+0x258>)
 8002a70:	f7ff fb40 	bl	80020f4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a74:	4b48      	ldr	r3, [pc, #288]	; (8002b98 <HAL_ADC_ConfigChannel+0x260>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	099b      	lsrs	r3, r3, #6
 8002a7a:	4a48      	ldr	r2, [pc, #288]	; (8002b9c <HAL_ADC_ConfigChannel+0x264>)
 8002a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a80:	099b      	lsrs	r3, r3, #6
 8002a82:	1c5a      	adds	r2, r3, #1
 8002a84:	4613      	mov	r3, r2
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	4413      	add	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002a8e:	e002      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1f9      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a9c:	e06c      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a3f      	ldr	r2, [pc, #252]	; (8002ba0 <HAL_ADC_ConfigChannel+0x268>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d10c      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d107      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4835      	ldr	r0, [pc, #212]	; (8002b90 <HAL_ADC_ConfigChannel+0x258>)
 8002abc:	f7ff fb1a 	bl	80020f4 <LL_ADC_SetCommonPathInternalCh>
 8002ac0:	e05a      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a37      	ldr	r2, [pc, #220]	; (8002ba4 <HAL_ADC_ConfigChannel+0x26c>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d155      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d150      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002adc:	4619      	mov	r1, r3
 8002ade:	482c      	ldr	r0, [pc, #176]	; (8002b90 <HAL_ADC_ConfigChannel+0x258>)
 8002ae0:	f7ff fb08 	bl	80020f4 <LL_ADC_SetCommonPathInternalCh>
 8002ae4:	e048      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002aee:	d004      	beq.n	8002afa <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002af4:	4a25      	ldr	r2, [pc, #148]	; (8002b8c <HAL_ADC_ConfigChannel+0x254>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d107      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4619      	mov	r1, r3
 8002b04:	4610      	mov	r0, r2
 8002b06:	f7ff fb8f 	bl	8002228 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	da32      	bge.n	8002b78 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b12:	481f      	ldr	r0, [pc, #124]	; (8002b90 <HAL_ADC_ConfigChannel+0x258>)
 8002b14:	f7ff fb00 	bl	8002118 <LL_ADC_GetCommonPathInternalCh>
 8002b18:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a1d      	ldr	r2, [pc, #116]	; (8002b94 <HAL_ADC_ConfigChannel+0x25c>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d107      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4818      	ldr	r0, [pc, #96]	; (8002b90 <HAL_ADC_ConfigChannel+0x258>)
 8002b2e:	f7ff fae1 	bl	80020f4 <LL_ADC_SetCommonPathInternalCh>
 8002b32:	e021      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a19      	ldr	r2, [pc, #100]	; (8002ba0 <HAL_ADC_ConfigChannel+0x268>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d107      	bne.n	8002b4e <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b44:	4619      	mov	r1, r3
 8002b46:	4812      	ldr	r0, [pc, #72]	; (8002b90 <HAL_ADC_ConfigChannel+0x258>)
 8002b48:	f7ff fad4 	bl	80020f4 <LL_ADC_SetCommonPathInternalCh>
 8002b4c:	e014      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a14      	ldr	r2, [pc, #80]	; (8002ba4 <HAL_ADC_ConfigChannel+0x26c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d10f      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002b5e:	4619      	mov	r1, r3
 8002b60:	480b      	ldr	r0, [pc, #44]	; (8002b90 <HAL_ADC_ConfigChannel+0x258>)
 8002b62:	f7ff fac7 	bl	80020f4 <LL_ADC_SetCommonPathInternalCh>
 8002b66:	e007      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6c:	f043 0220 	orr.w	r2, r3, #32
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8002b80:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3720      	adds	r7, #32
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	80000004 	.word	0x80000004
 8002b90:	40012708 	.word	0x40012708
 8002b94:	b0001000 	.word	0xb0001000
 8002b98:	20000000 	.word	0x20000000
 8002b9c:	053e2d63 	.word	0x053e2d63
 8002ba0:	b8004000 	.word	0xb8004000
 8002ba4:	b4002000 	.word	0xb4002000

08002ba8 <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bc80      	pop	{r7}
 8002bbc:	4770      	bx	lr

08002bbe <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b084      	sub	sp, #16
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff fbf1 	bl	80023b2 <LL_ADC_REG_IsConversionOngoing>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d033      	beq.n	8002c3e <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff fbb1 	bl	8002342 <LL_ADC_IsDisableOngoing>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d104      	bne.n	8002bf0 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7ff fbce 	bl	800238c <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bf0:	f7ff fa34 	bl	800205c <HAL_GetTick>
 8002bf4:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002bf6:	e01b      	b.n	8002c30 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002bf8:	f7ff fa30 	bl	800205c <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d914      	bls.n	8002c30 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00d      	beq.n	8002c30 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c18:	f043 0210 	orr.w	r2, r3, #16
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c24:	f043 0201 	orr.w	r2, r3, #1
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e007      	b.n	8002c40 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 0304 	and.w	r3, r3, #4
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1dc      	bne.n	8002bf8 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff fb60 	bl	800231e <LL_ADC_IsEnabled>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d169      	bne.n	8002d38 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	4b36      	ldr	r3, [pc, #216]	; (8002d44 <ADC_Enable+0xfc>)
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00d      	beq.n	8002c8e <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c76:	f043 0210 	orr.w	r2, r3, #16
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c82:	f043 0201 	orr.w	r2, r3, #1
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e055      	b.n	8002d3a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff fb1d 	bl	80022d2 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8002c98:	482b      	ldr	r0, [pc, #172]	; (8002d48 <ADC_Enable+0x100>)
 8002c9a:	f7ff fa3d 	bl	8002118 <LL_ADC_GetCommonPathInternalCh>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00f      	beq.n	8002cc8 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ca8:	4b28      	ldr	r3, [pc, #160]	; (8002d4c <ADC_Enable+0x104>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	099b      	lsrs	r3, r3, #6
 8002cae:	4a28      	ldr	r2, [pc, #160]	; (8002d50 <ADC_Enable+0x108>)
 8002cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb4:	099b      	lsrs	r3, r3, #6
 8002cb6:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8002cb8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002cba:	e002      	b.n	8002cc2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1f9      	bne.n	8002cbc <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	7e5b      	ldrb	r3, [r3, #25]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d033      	beq.n	8002d38 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002cd0:	f7ff f9c4 	bl	800205c <HAL_GetTick>
 8002cd4:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cd6:	e028      	b.n	8002d2a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff fb1e 	bl	800231e <LL_ADC_IsEnabled>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d104      	bne.n	8002cf2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff faf0 	bl	80022d2 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cf2:	f7ff f9b3 	bl	800205c <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d914      	bls.n	8002d2a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d00d      	beq.n	8002d2a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d12:	f043 0210 	orr.w	r2, r3, #16
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d1e:	f043 0201 	orr.w	r2, r3, #1
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e007      	b.n	8002d3a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d1cf      	bne.n	8002cd8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	80000017 	.word	0x80000017
 8002d48:	40012708 	.word	0x40012708
 8002d4c:	20000000 	.word	0x20000000
 8002d50:	053e2d63 	.word	0x053e2d63

08002d54 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff faee 	bl	8002342 <LL_ADC_IsDisableOngoing>
 8002d66:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff fad6 	bl	800231e <LL_ADC_IsEnabled>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d047      	beq.n	8002e08 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d144      	bne.n	8002e08 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 0305 	and.w	r3, r3, #5
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d10c      	bne.n	8002da6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff fab1 	bl	80022f8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2203      	movs	r2, #3
 8002d9c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d9e:	f7ff f95d 	bl	800205c <HAL_GetTick>
 8002da2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002da4:	e029      	b.n	8002dfa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002daa:	f043 0210 	orr.w	r2, r3, #16
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db6:	f043 0201 	orr.w	r2, r3, #1
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e023      	b.n	8002e0a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002dc2:	f7ff f94b 	bl	800205c <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d914      	bls.n	8002dfa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00d      	beq.n	8002dfa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de2:	f043 0210 	orr.w	r2, r3, #16
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dee:	f043 0201 	orr.w	r2, r3, #1
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e007      	b.n	8002e0a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1dc      	bne.n	8002dc2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <LL_ADC_SetCalibrationFactor>:
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
 8002e1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002e22:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr

08002e3a <LL_ADC_GetCalibrationFactor>:
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bc80      	pop	{r7}
 8002e54:	4770      	bx	lr

08002e56 <LL_ADC_Enable>:
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e66:	f023 0317 	bic.w	r3, r3, #23
 8002e6a:	f043 0201 	orr.w	r2, r3, #1
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	609a      	str	r2, [r3, #8]
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr

08002e7c <LL_ADC_Disable>:
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e8c:	f023 0317 	bic.w	r3, r3, #23
 8002e90:	f043 0202 	orr.w	r2, r3, #2
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	609a      	str	r2, [r3, #8]
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bc80      	pop	{r7}
 8002ea0:	4770      	bx	lr

08002ea2 <LL_ADC_IsEnabled>:
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b083      	sub	sp, #12
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d101      	bne.n	8002eba <LL_ADC_IsEnabled+0x18>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <LL_ADC_IsEnabled+0x1a>
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr

08002ec6 <LL_ADC_StartCalibration>:
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ed6:	f023 0317 	bic.w	r3, r3, #23
 8002eda:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	609a      	str	r2, [r3, #8]
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr

08002eec <LL_ADC_IsCalibrationOnGoing>:
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002efc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f00:	d101      	bne.n	8002f06 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr

08002f12 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b088      	sub	sp, #32
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d101      	bne.n	8002f30 <HAL_ADCEx_Calibration_Start+0x1e>
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	e0b9      	b.n	80030a4 <HAL_ADCEx_Calibration_Start+0x192>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f7ff ff0b 	bl	8002d54 <ADC_Disable>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff ffab 	bl	8002ea2 <LL_ADC_IsEnabled>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f040 809d 	bne.w	800308e <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f58:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f5c:	f043 0202 	orr.w	r2, r3, #2
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	f248 0303 	movw	r3, #32771	; 0x8003
 8002f6e:	4013      	ands	r3, r2
 8002f70:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	6812      	ldr	r2, [r2, #0]
 8002f7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002f80:	f023 0303 	bic.w	r3, r3, #3
 8002f84:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002f86:	2300      	movs	r3, #0
 8002f88:	61fb      	str	r3, [r7, #28]
 8002f8a:	e02e      	b.n	8002fea <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff ff98 	bl	8002ec6 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002f96:	e014      	b.n	8002fc2 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8002fa4:	d30d      	bcc.n	8002fc2 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002faa:	f023 0312 	bic.w	r3, r3, #18
 8002fae:	f043 0210 	orr.w	r2, r3, #16
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e070      	b.n	80030a4 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff ff90 	bl	8002eec <LL_ADC_IsCalibrationOnGoing>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1e2      	bne.n	8002f98 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff ff2f 	bl	8002e3a <LL_ADC_GetCalibrationFactor>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	61fb      	str	r3, [r7, #28]
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	2b07      	cmp	r3, #7
 8002fee:	d9cd      	bls.n	8002f8c <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff8:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff ff29 	bl	8002e56 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	69b9      	ldr	r1, [r7, #24]
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff ff01 	bl	8002e12 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff ff31 	bl	8002e7c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800301a:	f7ff f81f 	bl	800205c <HAL_GetTick>
 800301e:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003020:	e01c      	b.n	800305c <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003022:	f7ff f81b 	bl	800205c <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d915      	bls.n	800305c <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff ff34 	bl	8002ea2 <LL_ADC_IsEnabled>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00d      	beq.n	800305c <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003044:	f043 0210 	orr.w	r2, r3, #16
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003050:	f043 0201 	orr.w	r2, r3, #1
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e023      	b.n	80030a4 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4618      	mov	r0, r3
 8003062:	f7ff ff1e 	bl	8002ea2 <LL_ADC_IsEnabled>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1da      	bne.n	8003022 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68d9      	ldr	r1, [r3, #12]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	430a      	orrs	r2, r1
 800307a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003080:	f023 0303 	bic.w	r3, r3, #3
 8003084:	f043 0201 	orr.w	r2, r3, #1
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	659a      	str	r2, [r3, #88]	; 0x58
 800308c:	e005      	b.n	800309a <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003092:	f043 0210 	orr.w	r2, r3, #16
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80030a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3720      	adds	r7, #32
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030bc:	4b0c      	ldr	r3, [pc, #48]	; (80030f0 <__NVIC_SetPriorityGrouping+0x44>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030c8:	4013      	ands	r3, r2
 80030ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030de:	4a04      	ldr	r2, [pc, #16]	; (80030f0 <__NVIC_SetPriorityGrouping+0x44>)
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	60d3      	str	r3, [r2, #12]
}
 80030e4:	bf00      	nop
 80030e6:	3714      	adds	r7, #20
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bc80      	pop	{r7}
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	e000ed00 	.word	0xe000ed00

080030f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030f8:	4b04      	ldr	r3, [pc, #16]	; (800310c <__NVIC_GetPriorityGrouping+0x18>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	0a1b      	lsrs	r3, r3, #8
 80030fe:	f003 0307 	and.w	r3, r3, #7
}
 8003102:	4618      	mov	r0, r3
 8003104:	46bd      	mov	sp, r7
 8003106:	bc80      	pop	{r7}
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	e000ed00 	.word	0xe000ed00

08003110 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800311a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311e:	2b00      	cmp	r3, #0
 8003120:	db0b      	blt.n	800313a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003122:	79fb      	ldrb	r3, [r7, #7]
 8003124:	f003 021f 	and.w	r2, r3, #31
 8003128:	4906      	ldr	r1, [pc, #24]	; (8003144 <__NVIC_EnableIRQ+0x34>)
 800312a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312e:	095b      	lsrs	r3, r3, #5
 8003130:	2001      	movs	r0, #1
 8003132:	fa00 f202 	lsl.w	r2, r0, r2
 8003136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	bc80      	pop	{r7}
 8003142:	4770      	bx	lr
 8003144:	e000e100 	.word	0xe000e100

08003148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	4603      	mov	r3, r0
 8003150:	6039      	str	r1, [r7, #0]
 8003152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003158:	2b00      	cmp	r3, #0
 800315a:	db0a      	blt.n	8003172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	b2da      	uxtb	r2, r3
 8003160:	490c      	ldr	r1, [pc, #48]	; (8003194 <__NVIC_SetPriority+0x4c>)
 8003162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003166:	0112      	lsls	r2, r2, #4
 8003168:	b2d2      	uxtb	r2, r2
 800316a:	440b      	add	r3, r1
 800316c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003170:	e00a      	b.n	8003188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	b2da      	uxtb	r2, r3
 8003176:	4908      	ldr	r1, [pc, #32]	; (8003198 <__NVIC_SetPriority+0x50>)
 8003178:	79fb      	ldrb	r3, [r7, #7]
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	3b04      	subs	r3, #4
 8003180:	0112      	lsls	r2, r2, #4
 8003182:	b2d2      	uxtb	r2, r2
 8003184:	440b      	add	r3, r1
 8003186:	761a      	strb	r2, [r3, #24]
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	bc80      	pop	{r7}
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	e000e100 	.word	0xe000e100
 8003198:	e000ed00 	.word	0xe000ed00

0800319c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800319c:	b480      	push	{r7}
 800319e:	b089      	sub	sp, #36	; 0x24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	f1c3 0307 	rsb	r3, r3, #7
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	bf28      	it	cs
 80031ba:	2304      	movcs	r3, #4
 80031bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	3304      	adds	r3, #4
 80031c2:	2b06      	cmp	r3, #6
 80031c4:	d902      	bls.n	80031cc <NVIC_EncodePriority+0x30>
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	3b03      	subs	r3, #3
 80031ca:	e000      	b.n	80031ce <NVIC_EncodePriority+0x32>
 80031cc:	2300      	movs	r3, #0
 80031ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	43da      	mvns	r2, r3
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	401a      	ands	r2, r3
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	fa01 f303 	lsl.w	r3, r1, r3
 80031ee:	43d9      	mvns	r1, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f4:	4313      	orrs	r3, r2
         );
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3724      	adds	r7, #36	; 0x24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr

08003200 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f7ff ff4f 	bl	80030ac <__NVIC_SetPriorityGrouping>
}
 800320e:	bf00      	nop
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b086      	sub	sp, #24
 800321a:	af00      	add	r7, sp, #0
 800321c:	4603      	mov	r3, r0
 800321e:	60b9      	str	r1, [r7, #8]
 8003220:	607a      	str	r2, [r7, #4]
 8003222:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003224:	f7ff ff66 	bl	80030f4 <__NVIC_GetPriorityGrouping>
 8003228:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	68b9      	ldr	r1, [r7, #8]
 800322e:	6978      	ldr	r0, [r7, #20]
 8003230:	f7ff ffb4 	bl	800319c <NVIC_EncodePriority>
 8003234:	4602      	mov	r2, r0
 8003236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800323a:	4611      	mov	r1, r2
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff ff83 	bl	8003148 <__NVIC_SetPriority>
}
 8003242:	bf00      	nop
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b082      	sub	sp, #8
 800324e:	af00      	add	r7, sp, #0
 8003250:	4603      	mov	r3, r0
 8003252:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff ff59 	bl	8003110 <__NVIC_EnableIRQ>
}
 800325e:	bf00      	nop
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003266:	b480      	push	{r7}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e04f      	b.n	8003318 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d008      	beq.n	8003296 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2204      	movs	r2, #4
 8003288:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e040      	b.n	8003318 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 020e 	bic.w	r2, r2, #14
 80032a4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 0201 	bic.w	r2, r2, #1
 80032c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ca:	f003 021c 	and.w	r2, r3, #28
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	2101      	movs	r1, #1
 80032d4:	fa01 f202 	lsl.w	r2, r1, r2
 80032d8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80032e2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00c      	beq.n	8003306 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032fa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003304:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	bc80      	pop	{r7}
 8003320:	4770      	bx	lr

08003322 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b084      	sub	sp, #16
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800332a:	2300      	movs	r3, #0
 800332c:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d005      	beq.n	8003346 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2204      	movs	r2, #4
 800333e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	73fb      	strb	r3, [r7, #15]
 8003344:	e047      	b.n	80033d6 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 020e 	bic.w	r2, r2, #14
 8003354:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 0201 	bic.w	r2, r2, #1
 8003364:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003370:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003374:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337a:	f003 021c 	and.w	r2, r3, #28
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	2101      	movs	r1, #1
 8003384:	fa01 f202 	lsl.w	r2, r1, r2
 8003388:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003392:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00c      	beq.n	80033b6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033aa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80033b4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	4798      	blx	r3
    }
  }
  return status;
 80033d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b087      	sub	sp, #28
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033ea:	2300      	movs	r3, #0
 80033ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033ee:	e140      	b.n	8003672 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	2101      	movs	r1, #1
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	fa01 f303 	lsl.w	r3, r1, r3
 80033fc:	4013      	ands	r3, r2
 80033fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 8132 	beq.w	800366c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f003 0303 	and.w	r3, r3, #3
 8003410:	2b01      	cmp	r3, #1
 8003412:	d005      	beq.n	8003420 <HAL_GPIO_Init+0x40>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f003 0303 	and.w	r3, r3, #3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d130      	bne.n	8003482 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	2203      	movs	r2, #3
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	43db      	mvns	r3, r3
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	4013      	ands	r3, r2
 8003436:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	68da      	ldr	r2, [r3, #12]
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	4313      	orrs	r3, r2
 8003448:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003456:	2201      	movs	r2, #1
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	43db      	mvns	r3, r3
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	4013      	ands	r3, r2
 8003464:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	091b      	lsrs	r3, r3, #4
 800346c:	f003 0201 	and.w	r2, r3, #1
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	4313      	orrs	r3, r2
 800347a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f003 0303 	and.w	r3, r3, #3
 800348a:	2b03      	cmp	r3, #3
 800348c:	d017      	beq.n	80034be <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	2203      	movs	r2, #3
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	43db      	mvns	r3, r3
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	4013      	ands	r3, r2
 80034a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f003 0303 	and.w	r3, r3, #3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d123      	bne.n	8003512 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	08da      	lsrs	r2, r3, #3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	3208      	adds	r2, #8
 80034d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	220f      	movs	r2, #15
 80034e2:	fa02 f303 	lsl.w	r3, r2, r3
 80034e6:	43db      	mvns	r3, r3
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	4013      	ands	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	691a      	ldr	r2, [r3, #16]
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	fa02 f303 	lsl.w	r3, r2, r3
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	4313      	orrs	r3, r2
 8003502:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	08da      	lsrs	r2, r3, #3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3208      	adds	r2, #8
 800350c:	6939      	ldr	r1, [r7, #16]
 800350e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	2203      	movs	r2, #3
 800351e:	fa02 f303 	lsl.w	r3, r2, r3
 8003522:	43db      	mvns	r3, r3
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	4013      	ands	r3, r2
 8003528:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f003 0203 	and.w	r2, r3, #3
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	4313      	orrs	r3, r2
 800353e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800354e:	2b00      	cmp	r3, #0
 8003550:	f000 808c 	beq.w	800366c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003554:	4a4e      	ldr	r2, [pc, #312]	; (8003690 <HAL_GPIO_Init+0x2b0>)
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	089b      	lsrs	r3, r3, #2
 800355a:	3302      	adds	r3, #2
 800355c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003560:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	f003 0303 	and.w	r3, r3, #3
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	2207      	movs	r2, #7
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	43db      	mvns	r3, r3
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	4013      	ands	r3, r2
 8003576:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800357e:	d00d      	beq.n	800359c <HAL_GPIO_Init+0x1bc>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a44      	ldr	r2, [pc, #272]	; (8003694 <HAL_GPIO_Init+0x2b4>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d007      	beq.n	8003598 <HAL_GPIO_Init+0x1b8>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a43      	ldr	r2, [pc, #268]	; (8003698 <HAL_GPIO_Init+0x2b8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d101      	bne.n	8003594 <HAL_GPIO_Init+0x1b4>
 8003590:	2302      	movs	r3, #2
 8003592:	e004      	b.n	800359e <HAL_GPIO_Init+0x1be>
 8003594:	2307      	movs	r3, #7
 8003596:	e002      	b.n	800359e <HAL_GPIO_Init+0x1be>
 8003598:	2301      	movs	r3, #1
 800359a:	e000      	b.n	800359e <HAL_GPIO_Init+0x1be>
 800359c:	2300      	movs	r3, #0
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	f002 0203 	and.w	r2, r2, #3
 80035a4:	0092      	lsls	r2, r2, #2
 80035a6:	4093      	lsls	r3, r2
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035ae:	4938      	ldr	r1, [pc, #224]	; (8003690 <HAL_GPIO_Init+0x2b0>)
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	089b      	lsrs	r3, r3, #2
 80035b4:	3302      	adds	r3, #2
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035bc:	4b37      	ldr	r3, [pc, #220]	; (800369c <HAL_GPIO_Init+0x2bc>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	43db      	mvns	r3, r3
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	4013      	ands	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035e0:	4a2e      	ldr	r2, [pc, #184]	; (800369c <HAL_GPIO_Init+0x2bc>)
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80035e6:	4b2d      	ldr	r3, [pc, #180]	; (800369c <HAL_GPIO_Init+0x2bc>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	43db      	mvns	r3, r3
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	4013      	ands	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4313      	orrs	r3, r2
 8003608:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800360a:	4a24      	ldr	r2, [pc, #144]	; (800369c <HAL_GPIO_Init+0x2bc>)
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8003610:	4b22      	ldr	r3, [pc, #136]	; (800369c <HAL_GPIO_Init+0x2bc>)
 8003612:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003616:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	43db      	mvns	r3, r3
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	4013      	ands	r3, r2
 8003620:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4313      	orrs	r3, r2
 8003634:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8003636:	4a19      	ldr	r2, [pc, #100]	; (800369c <HAL_GPIO_Init+0x2bc>)
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800363e:	4b17      	ldr	r3, [pc, #92]	; (800369c <HAL_GPIO_Init+0x2bc>)
 8003640:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003644:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	43db      	mvns	r3, r3
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	4013      	ands	r3, r2
 800364e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	4313      	orrs	r3, r2
 8003662:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8003664:	4a0d      	ldr	r2, [pc, #52]	; (800369c <HAL_GPIO_Init+0x2bc>)
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	3301      	adds	r3, #1
 8003670:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	fa22 f303 	lsr.w	r3, r2, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	f47f aeb7 	bne.w	80033f0 <HAL_GPIO_Init+0x10>
  }
}
 8003682:	bf00      	nop
 8003684:	bf00      	nop
 8003686:	371c      	adds	r7, #28
 8003688:	46bd      	mov	sp, r7
 800368a:	bc80      	pop	{r7}
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	40010000 	.word	0x40010000
 8003694:	48000400 	.word	0x48000400
 8003698:	48000800 	.word	0x48000800
 800369c:	58000800 	.word	0x58000800

080036a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	460b      	mov	r3, r1
 80036aa:	807b      	strh	r3, [r7, #2]
 80036ac:	4613      	mov	r3, r2
 80036ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036b0:	787b      	ldrb	r3, [r7, #1]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036b6:	887a      	ldrh	r2, [r7, #2]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036bc:	e002      	b.n	80036c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036be:	887a      	ldrh	r2, [r7, #2]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bc80      	pop	{r7}
 80036cc:	4770      	bx	lr

080036ce <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b082      	sub	sp, #8
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e081      	b.n	80037e4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d106      	bne.n	80036fa <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f7fe f975 	bl	80019e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2224      	movs	r2, #36	; 0x24
 80036fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0201 	bic.w	r2, r2, #1
 8003710:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800371e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689a      	ldr	r2, [r3, #8]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800372e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d107      	bne.n	8003748 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003744:	609a      	str	r2, [r3, #8]
 8003746:	e006      	b.n	8003756 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003754:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	2b02      	cmp	r3, #2
 800375c:	d104      	bne.n	8003768 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003766:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6812      	ldr	r2, [r2, #0]
 8003772:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003776:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800377a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68da      	ldr	r2, [r3, #12]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800378a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	691a      	ldr	r2, [r3, #16]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69d9      	ldr	r1, [r3, #28]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a1a      	ldr	r2, [r3, #32]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f042 0201 	orr.w	r2, r2, #1
 80037c4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2220      	movs	r2, #32
 80037d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3708      	adds	r7, #8
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b20      	cmp	r3, #32
 8003800:	d138      	bne.n	8003874 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003808:	2b01      	cmp	r3, #1
 800380a:	d101      	bne.n	8003810 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800380c:	2302      	movs	r3, #2
 800380e:	e032      	b.n	8003876 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2224      	movs	r2, #36	; 0x24
 800381c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0201 	bic.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800383e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6819      	ldr	r1, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f042 0201 	orr.w	r2, r2, #1
 800385e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2220      	movs	r2, #32
 8003864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003870:	2300      	movs	r3, #0
 8003872:	e000      	b.n	8003876 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003874:	2302      	movs	r3, #2
  }
}
 8003876:	4618      	mov	r0, r3
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	bc80      	pop	{r7}
 800387e:	4770      	bx	lr

08003880 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b20      	cmp	r3, #32
 8003894:	d139      	bne.n	800390a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800389c:	2b01      	cmp	r3, #1
 800389e:	d101      	bne.n	80038a4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038a0:	2302      	movs	r3, #2
 80038a2:	e033      	b.n	800390c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2224      	movs	r2, #36	; 0x24
 80038b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0201 	bic.w	r2, r2, #1
 80038c2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80038d2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	021b      	lsls	r3, r3, #8
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	4313      	orrs	r3, r2
 80038dc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f042 0201 	orr.w	r2, r2, #1
 80038f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2220      	movs	r2, #32
 80038fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003906:	2300      	movs	r3, #0
 8003908:	e000      	b.n	800390c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800390a:	2302      	movs	r3, #2
  }
}
 800390c:	4618      	mov	r0, r3
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	bc80      	pop	{r7}
 8003914:	4770      	bx	lr
	...

08003918 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800391c:	4b04      	ldr	r3, [pc, #16]	; (8003930 <HAL_PWR_EnableBkUpAccess+0x18>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a03      	ldr	r2, [pc, #12]	; (8003930 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003926:	6013      	str	r3, [r2, #0]
}
 8003928:	bf00      	nop
 800392a:	46bd      	mov	sp, r7
 800392c:	bc80      	pop	{r7}
 800392e:	4770      	bx	lr
 8003930:	58000400 	.word	0x58000400

08003934 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003938:	4b03      	ldr	r3, [pc, #12]	; (8003948 <HAL_PWREx_GetVoltageRange+0x14>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003940:	4618      	mov	r0, r3
 8003942:	46bd      	mov	sp, r7
 8003944:	bc80      	pop	{r7}
 8003946:	4770      	bx	lr
 8003948:	58000400 	.word	0x58000400

0800394c <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8003950:	4b06      	ldr	r3, [pc, #24]	; (800396c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003958:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800395c:	d101      	bne.n	8003962 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800395e:	2301      	movs	r3, #1
 8003960:	e000      	b.n	8003964 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	46bd      	mov	sp, r7
 8003968:	bc80      	pop	{r7}
 800396a:	4770      	bx	lr
 800396c:	58000400 	.word	0x58000400

08003970 <LL_RCC_HSE_EnableTcxo>:
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800397e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003982:	6013      	str	r3, [r2, #0]
}
 8003984:	bf00      	nop
 8003986:	46bd      	mov	sp, r7
 8003988:	bc80      	pop	{r7}
 800398a:	4770      	bx	lr

0800398c <LL_RCC_HSE_DisableTcxo>:
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800399a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800399e:	6013      	str	r3, [r2, #0]
}
 80039a0:	bf00      	nop
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bc80      	pop	{r7}
 80039a6:	4770      	bx	lr

080039a8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80039ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039ba:	d101      	bne.n	80039c0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80039bc:	2301      	movs	r3, #1
 80039be:	e000      	b.n	80039c2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bc80      	pop	{r7}
 80039c8:	4770      	bx	lr

080039ca <LL_RCC_HSE_Enable>:
{
 80039ca:	b480      	push	{r7}
 80039cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80039ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039dc:	6013      	str	r3, [r2, #0]
}
 80039de:	bf00      	nop
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bc80      	pop	{r7}
 80039e4:	4770      	bx	lr

080039e6 <LL_RCC_HSE_Disable>:
{
 80039e6:	b480      	push	{r7}
 80039e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80039ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f8:	6013      	str	r3, [r2, #0]
}
 80039fa:	bf00      	nop
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bc80      	pop	{r7}
 8003a00:	4770      	bx	lr

08003a02 <LL_RCC_HSE_IsReady>:
{
 8003a02:	b480      	push	{r7}
 8003a04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a14:	d101      	bne.n	8003a1a <LL_RCC_HSE_IsReady+0x18>
 8003a16:	2301      	movs	r3, #1
 8003a18:	e000      	b.n	8003a1c <LL_RCC_HSE_IsReady+0x1a>
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bc80      	pop	{r7}
 8003a22:	4770      	bx	lr

08003a24 <LL_RCC_HSI_Enable>:
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a36:	6013      	str	r3, [r2, #0]
}
 8003a38:	bf00      	nop
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bc80      	pop	{r7}
 8003a3e:	4770      	bx	lr

08003a40 <LL_RCC_HSI_Disable>:
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a52:	6013      	str	r3, [r2, #0]
}
 8003a54:	bf00      	nop
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bc80      	pop	{r7}
 8003a5a:	4770      	bx	lr

08003a5c <LL_RCC_HSI_IsReady>:
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a6e:	d101      	bne.n	8003a74 <LL_RCC_HSI_IsReady+0x18>
 8003a70:	2301      	movs	r3, #1
 8003a72:	e000      	b.n	8003a76 <LL_RCC_HSI_IsReady+0x1a>
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bc80      	pop	{r7}
 8003a7c:	4770      	bx	lr

08003a7e <LL_RCC_HSI_SetCalibTrimming>:
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b083      	sub	sp, #12
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	061b      	lsls	r3, r3, #24
 8003a94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	604b      	str	r3, [r1, #4]
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bc80      	pop	{r7}
 8003aa4:	4770      	bx	lr

08003aa6 <LL_RCC_LSE_IsReady>:
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d101      	bne.n	8003abe <LL_RCC_LSE_IsReady+0x18>
 8003aba:	2301      	movs	r3, #1
 8003abc:	e000      	b.n	8003ac0 <LL_RCC_LSE_IsReady+0x1a>
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bc80      	pop	{r7}
 8003ac6:	4770      	bx	lr

08003ac8 <LL_RCC_LSI_Enable>:
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8003acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ad4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ad8:	f043 0301 	orr.w	r3, r3, #1
 8003adc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003ae0:	bf00      	nop
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bc80      	pop	{r7}
 8003ae6:	4770      	bx	lr

08003ae8 <LL_RCC_LSI_Disable>:
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003af0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003af4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003af8:	f023 0301 	bic.w	r3, r3, #1
 8003afc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003b00:	bf00      	nop
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bc80      	pop	{r7}
 8003b06:	4770      	bx	lr

08003b08 <LL_RCC_LSI_IsReady>:
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8003b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d101      	bne.n	8003b20 <LL_RCC_LSI_IsReady+0x18>
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e000      	b.n	8003b22 <LL_RCC_LSI_IsReady+0x1a>
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc80      	pop	{r7}
 8003b28:	4770      	bx	lr

08003b2a <LL_RCC_MSI_Enable>:
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b38:	f043 0301 	orr.w	r3, r3, #1
 8003b3c:	6013      	str	r3, [r2, #0]
}
 8003b3e:	bf00      	nop
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bc80      	pop	{r7}
 8003b44:	4770      	bx	lr

08003b46 <LL_RCC_MSI_Disable>:
{
 8003b46:	b480      	push	{r7}
 8003b48:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b54:	f023 0301 	bic.w	r3, r3, #1
 8003b58:	6013      	str	r3, [r2, #0]
}
 8003b5a:	bf00      	nop
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bc80      	pop	{r7}
 8003b60:	4770      	bx	lr

08003b62 <LL_RCC_MSI_IsReady>:
{
 8003b62:	b480      	push	{r7}
 8003b64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d101      	bne.n	8003b78 <LL_RCC_MSI_IsReady+0x16>
 8003b74:	2301      	movs	r3, #1
 8003b76:	e000      	b.n	8003b7a <LL_RCC_MSI_IsReady+0x18>
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bc80      	pop	{r7}
 8003b80:	4770      	bx	lr

08003b82 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8003b82:	b480      	push	{r7}
 8003b84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8003b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0308 	and.w	r3, r3, #8
 8003b90:	2b08      	cmp	r3, #8
 8003b92:	d101      	bne.n	8003b98 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8003b94:	2301      	movs	r3, #1
 8003b96:	e000      	b.n	8003b9a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bc80      	pop	{r7}
 8003ba0:	4770      	bx	lr

08003ba2 <LL_RCC_MSI_GetRange>:
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8003ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bc80      	pop	{r7}
 8003bb6:	4770      	bx	lr

08003bb8 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bc4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bc80      	pop	{r7}
 8003bce:	4770      	bx	lr

08003bd0 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	021b      	lsls	r3, r3, #8
 8003be6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bea:	4313      	orrs	r3, r2
 8003bec:	604b      	str	r3, [r1, #4]
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bc80      	pop	{r7}
 8003bf6:	4770      	bx	lr

08003bf8 <LL_RCC_SetSysClkSource>:
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f023 0203 	bic.w	r2, r3, #3
 8003c0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	608b      	str	r3, [r1, #8]
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bc80      	pop	{r7}
 8003c1c:	4770      	bx	lr

08003c1e <LL_RCC_GetSysClkSource>:
{
 8003c1e:	b480      	push	{r7}
 8003c20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f003 030c 	and.w	r3, r3, #12
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bc80      	pop	{r7}
 8003c32:	4770      	bx	lr

08003c34 <LL_RCC_SetAHBPrescaler>:
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	608b      	str	r3, [r1, #8]
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bc80      	pop	{r7}
 8003c58:	4770      	bx	lr

08003c5a <LL_RCC_SetAHB3Prescaler>:
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c66:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003c6a:	f023 020f 	bic.w	r2, r3, #15
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	091b      	lsrs	r3, r3, #4
 8003c72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c76:	4313      	orrs	r3, r2
 8003c78:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bc80      	pop	{r7}
 8003c84:	4770      	bx	lr

08003c86 <LL_RCC_SetAPB1Prescaler>:
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	608b      	str	r3, [r1, #8]
}
 8003ca2:	bf00      	nop
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bc80      	pop	{r7}
 8003caa:	4770      	bx	lr

08003cac <LL_RCC_SetAPB2Prescaler>:
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	608b      	str	r3, [r1, #8]
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bc80      	pop	{r7}
 8003cd0:	4770      	bx	lr

08003cd2 <LL_RCC_GetAHBPrescaler>:
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bc80      	pop	{r7}
 8003ce6:	4770      	bx	lr

08003ce8 <LL_RCC_GetAHB3Prescaler>:
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cf0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003cf4:	011b      	lsls	r3, r3, #4
 8003cf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bc80      	pop	{r7}
 8003d00:	4770      	bx	lr

08003d02 <LL_RCC_GetAPB1Prescaler>:
{
 8003d02:	b480      	push	{r7}
 8003d04:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bc80      	pop	{r7}
 8003d16:	4770      	bx	lr

08003d18 <LL_RCC_GetAPB2Prescaler>:
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003d1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bc80      	pop	{r7}
 8003d2c:	4770      	bx	lr

08003d2e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d40:	6013      	str	r3, [r2, #0]
}
 8003d42:	bf00      	nop
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bc80      	pop	{r7}
 8003d48:	4770      	bx	lr

08003d4a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d5c:	6013      	str	r3, [r2, #0]
}
 8003d5e:	bf00      	nop
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bc80      	pop	{r7}
 8003d64:	4770      	bx	lr

08003d66 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003d66:	b480      	push	{r7}
 8003d68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d78:	d101      	bne.n	8003d7e <LL_RCC_PLL_IsReady+0x18>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e000      	b.n	8003d80 <LL_RCC_PLL_IsReady+0x1a>
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bc80      	pop	{r7}
 8003d86:	4770      	bx	lr

08003d88 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	0a1b      	lsrs	r3, r3, #8
 8003d94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bc80      	pop	{r7}
 8003d9e:	4770      	bx	lr

08003da0 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bc80      	pop	{r7}
 8003db4:	4770      	bx	lr

08003db6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003db6:	b480      	push	{r7}
 8003db8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bc80      	pop	{r7}
 8003dca:	4770      	bx	lr

08003dcc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	f003 0303 	and.w	r3, r3, #3
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bc80      	pop	{r7}
 8003de0:	4770      	bx	lr

08003de2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003de2:	b480      	push	{r7}
 8003de4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003df4:	d101      	bne.n	8003dfa <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bc80      	pop	{r7}
 8003e02:	4770      	bx	lr

08003e04 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e0c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e18:	d101      	bne.n	8003e1e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e000      	b.n	8003e20 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bc80      	pop	{r7}
 8003e26:	4770      	bx	lr

08003e28 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e3a:	d101      	bne.n	8003e40 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e000      	b.n	8003e42 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bc80      	pop	{r7}
 8003e48:	4770      	bx	lr

08003e4a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e5c:	d101      	bne.n	8003e62 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e000      	b.n	8003e64 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bc80      	pop	{r7}
 8003e6a:	4770      	bx	lr

08003e6c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b088      	sub	sp, #32
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e36f      	b.n	800455e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e7e:	f7ff fece 	bl	8003c1e <LL_RCC_GetSysClkSource>
 8003e82:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e84:	f7ff ffa2 	bl	8003dcc <LL_RCC_PLL_GetMainSource>
 8003e88:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0320 	and.w	r3, r3, #32
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 80c4 	beq.w	8004020 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d005      	beq.n	8003eaa <HAL_RCC_OscConfig+0x3e>
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	2b0c      	cmp	r3, #12
 8003ea2:	d176      	bne.n	8003f92 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d173      	bne.n	8003f92 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e353      	b.n	800455e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0308 	and.w	r3, r3, #8
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d005      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x68>
 8003ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ed2:	e006      	b.n	8003ee2 <HAL_RCC_OscConfig+0x76>
 8003ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003edc:	091b      	lsrs	r3, r3, #4
 8003ede:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d222      	bcs.n	8003f2c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 fd7a 	bl	80049e4 <RCC_SetFlashLatencyFromMSIRange>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e331      	b.n	800455e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003efa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f04:	f043 0308 	orr.w	r3, r3, #8
 8003f08:	6013      	str	r3, [r2, #0]
 8003f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff fe53 	bl	8003bd0 <LL_RCC_MSI_SetCalibTrimming>
 8003f2a:	e021      	b.n	8003f70 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f36:	f043 0308 	orr.w	r3, r3, #8
 8003f3a:	6013      	str	r3, [r2, #0]
 8003f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7ff fe3a 	bl	8003bd0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 fd3f 	bl	80049e4 <RCC_SetFlashLatencyFromMSIRange>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e2f6      	b.n	800455e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003f70:	f000 fcc2 	bl	80048f8 <HAL_RCC_GetHCLKFreq>
 8003f74:	4603      	mov	r3, r0
 8003f76:	4aa7      	ldr	r2, [pc, #668]	; (8004214 <HAL_RCC_OscConfig+0x3a8>)
 8003f78:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8003f7a:	4ba7      	ldr	r3, [pc, #668]	; (8004218 <HAL_RCC_OscConfig+0x3ac>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fd feb0 	bl	8001ce4 <HAL_InitTick>
 8003f84:	4603      	mov	r3, r0
 8003f86:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8003f88:	7cfb      	ldrb	r3, [r7, #19]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d047      	beq.n	800401e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8003f8e:	7cfb      	ldrb	r3, [r7, #19]
 8003f90:	e2e5      	b.n	800455e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d02c      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f9a:	f7ff fdc6 	bl	8003b2a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f9e:	f7fe f85d 	bl	800205c <HAL_GetTick>
 8003fa2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fa6:	f7fe f859 	bl	800205c <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e2d2      	b.n	800455e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003fb8:	f7ff fdd3 	bl	8003b62 <LL_RCC_MSI_IsReady>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d0f1      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fcc:	f043 0308 	orr.w	r3, r3, #8
 8003fd0:	6013      	str	r3, [r2, #0]
 8003fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7ff fdef 	bl	8003bd0 <LL_RCC_MSI_SetCalibTrimming>
 8003ff2:	e015      	b.n	8004020 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ff4:	f7ff fda7 	bl	8003b46 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ff8:	f7fe f830 	bl	800205c <HAL_GetTick>
 8003ffc:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004000:	f7fe f82c 	bl	800205c <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e2a5      	b.n	800455e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004012:	f7ff fda6 	bl	8003b62 <LL_RCC_MSI_IsReady>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1f1      	bne.n	8004000 <HAL_RCC_OscConfig+0x194>
 800401c:	e000      	b.n	8004020 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800401e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	d058      	beq.n	80040de <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	2b08      	cmp	r3, #8
 8004030:	d005      	beq.n	800403e <HAL_RCC_OscConfig+0x1d2>
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	2b0c      	cmp	r3, #12
 8004036:	d108      	bne.n	800404a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	2b03      	cmp	r3, #3
 800403c:	d105      	bne.n	800404a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d14b      	bne.n	80040de <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e289      	b.n	800455e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800404a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800405c:	4313      	orrs	r3, r2
 800405e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004068:	d102      	bne.n	8004070 <HAL_RCC_OscConfig+0x204>
 800406a:	f7ff fcae 	bl	80039ca <LL_RCC_HSE_Enable>
 800406e:	e00d      	b.n	800408c <HAL_RCC_OscConfig+0x220>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8004078:	d104      	bne.n	8004084 <HAL_RCC_OscConfig+0x218>
 800407a:	f7ff fc79 	bl	8003970 <LL_RCC_HSE_EnableTcxo>
 800407e:	f7ff fca4 	bl	80039ca <LL_RCC_HSE_Enable>
 8004082:	e003      	b.n	800408c <HAL_RCC_OscConfig+0x220>
 8004084:	f7ff fcaf 	bl	80039e6 <LL_RCC_HSE_Disable>
 8004088:	f7ff fc80 	bl	800398c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d012      	beq.n	80040ba <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004094:	f7fd ffe2 	bl	800205c <HAL_GetTick>
 8004098:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800409c:	f7fd ffde 	bl	800205c <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b64      	cmp	r3, #100	; 0x64
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e257      	b.n	800455e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80040ae:	f7ff fca8 	bl	8003a02 <LL_RCC_HSE_IsReady>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0f1      	beq.n	800409c <HAL_RCC_OscConfig+0x230>
 80040b8:	e011      	b.n	80040de <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ba:	f7fd ffcf 	bl	800205c <HAL_GetTick>
 80040be:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80040c0:	e008      	b.n	80040d4 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040c2:	f7fd ffcb 	bl	800205c <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b64      	cmp	r3, #100	; 0x64
 80040ce:	d901      	bls.n	80040d4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e244      	b.n	800455e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80040d4:	f7ff fc95 	bl	8003a02 <LL_RCC_HSE_IsReady>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1f1      	bne.n	80040c2 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d046      	beq.n	8004178 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	2b04      	cmp	r3, #4
 80040ee:	d005      	beq.n	80040fc <HAL_RCC_OscConfig+0x290>
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	2b0c      	cmp	r3, #12
 80040f4:	d10e      	bne.n	8004114 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d10b      	bne.n	8004114 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e22a      	b.n	800455e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	4618      	mov	r0, r3
 800410e:	f7ff fcb6 	bl	8003a7e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004112:	e031      	b.n	8004178 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d019      	beq.n	8004150 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800411c:	f7ff fc82 	bl	8003a24 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004120:	f7fd ff9c 	bl	800205c <HAL_GetTick>
 8004124:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004128:	f7fd ff98 	bl	800205c <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e211      	b.n	800455e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800413a:	f7ff fc8f 	bl	8003a5c <LL_RCC_HSI_IsReady>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d0f1      	beq.n	8004128 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	4618      	mov	r0, r3
 800414a:	f7ff fc98 	bl	8003a7e <LL_RCC_HSI_SetCalibTrimming>
 800414e:	e013      	b.n	8004178 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004150:	f7ff fc76 	bl	8003a40 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004154:	f7fd ff82 	bl	800205c <HAL_GetTick>
 8004158:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800415c:	f7fd ff7e 	bl	800205c <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e1f7      	b.n	800455e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800416e:	f7ff fc75 	bl	8003a5c <LL_RCC_HSI_IsReady>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1f1      	bne.n	800415c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0308 	and.w	r3, r3, #8
 8004180:	2b00      	cmp	r3, #0
 8004182:	d06e      	beq.n	8004262 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d056      	beq.n	800423a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 800418c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004190:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004194:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	69da      	ldr	r2, [r3, #28]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f003 0310 	and.w	r3, r3, #16
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d031      	beq.n	8004208 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d006      	beq.n	80041bc <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d101      	bne.n	80041bc <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e1d0      	b.n	800455e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d013      	beq.n	80041ee <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80041c6:	f7ff fc8f 	bl	8003ae8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80041ca:	f7fd ff47 	bl	800205c <HAL_GetTick>
 80041ce:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80041d0:	e008      	b.n	80041e4 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041d2:	f7fd ff43 	bl	800205c <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b11      	cmp	r3, #17
 80041de:	d901      	bls.n	80041e4 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e1bc      	b.n	800455e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80041e4:	f7ff fc90 	bl	8003b08 <LL_RCC_LSI_IsReady>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1f1      	bne.n	80041d2 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80041ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041f6:	f023 0210 	bic.w	r2, r3, #16
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004202:	4313      	orrs	r3, r2
 8004204:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004208:	f7ff fc5e 	bl	8003ac8 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800420c:	f7fd ff26 	bl	800205c <HAL_GetTick>
 8004210:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8004212:	e00c      	b.n	800422e <HAL_RCC_OscConfig+0x3c2>
 8004214:	20000000 	.word	0x20000000
 8004218:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800421c:	f7fd ff1e 	bl	800205c <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b11      	cmp	r3, #17
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e197      	b.n	800455e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800422e:	f7ff fc6b 	bl	8003b08 <LL_RCC_LSI_IsReady>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0f1      	beq.n	800421c <HAL_RCC_OscConfig+0x3b0>
 8004238:	e013      	b.n	8004262 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800423a:	f7ff fc55 	bl	8003ae8 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800423e:	f7fd ff0d 	bl	800205c <HAL_GetTick>
 8004242:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8004244:	e008      	b.n	8004258 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004246:	f7fd ff09 	bl	800205c <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b11      	cmp	r3, #17
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e182      	b.n	800455e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8004258:	f7ff fc56 	bl	8003b08 <LL_RCC_LSI_IsReady>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1f1      	bne.n	8004246 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0304 	and.w	r3, r3, #4
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 80d8 	beq.w	8004420 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004270:	f7ff fb6c 	bl	800394c <LL_PWR_IsEnabledBkUpAccess>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d113      	bne.n	80042a2 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800427a:	f7ff fb4d 	bl	8003918 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800427e:	f7fd feed 	bl	800205c <HAL_GetTick>
 8004282:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004284:	e008      	b.n	8004298 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004286:	f7fd fee9 	bl	800205c <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d901      	bls.n	8004298 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e162      	b.n	800455e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004298:	f7ff fb58 	bl	800394c <LL_PWR_IsEnabledBkUpAccess>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0f1      	beq.n	8004286 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d07b      	beq.n	80043a2 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	2b85      	cmp	r3, #133	; 0x85
 80042b0:	d003      	beq.n	80042ba <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	2b05      	cmp	r3, #5
 80042b8:	d109      	bne.n	80042ce <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80042ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042c6:	f043 0304 	orr.w	r3, r3, #4
 80042ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ce:	f7fd fec5 	bl	800205c <HAL_GetTick>
 80042d2:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80042d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042e0:	f043 0301 	orr.w	r3, r3, #1
 80042e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80042e8:	e00a      	b.n	8004300 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ea:	f7fd feb7 	bl	800205c <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e12e      	b.n	800455e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004300:	f7ff fbd1 	bl	8003aa6 <LL_RCC_LSE_IsReady>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d0ef      	beq.n	80042ea <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	2b81      	cmp	r3, #129	; 0x81
 8004310:	d003      	beq.n	800431a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	2b85      	cmp	r3, #133	; 0x85
 8004318:	d121      	bne.n	800435e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431a:	f7fd fe9f 	bl	800205c <HAL_GetTick>
 800431e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004328:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800432c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004330:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004334:	e00a      	b.n	800434c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004336:	f7fd fe91 	bl	800205c <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	f241 3288 	movw	r2, #5000	; 0x1388
 8004344:	4293      	cmp	r3, r2
 8004346:	d901      	bls.n	800434c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e108      	b.n	800455e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800434c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004354:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0ec      	beq.n	8004336 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800435c:	e060      	b.n	8004420 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800435e:	f7fd fe7d 	bl	800205c <HAL_GetTick>
 8004362:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004364:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004370:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004374:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004378:	e00a      	b.n	8004390 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800437a:	f7fd fe6f 	bl	800205c <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	f241 3288 	movw	r2, #5000	; 0x1388
 8004388:	4293      	cmp	r3, r2
 800438a:	d901      	bls.n	8004390 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e0e6      	b.n	800455e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004398:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1ec      	bne.n	800437a <HAL_RCC_OscConfig+0x50e>
 80043a0:	e03e      	b.n	8004420 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043a2:	f7fd fe5b 	bl	800205c <HAL_GetTick>
 80043a6:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80043a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80043bc:	e00a      	b.n	80043d4 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043be:	f7fd fe4d 	bl	800205c <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e0c4      	b.n	800455e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80043d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1ec      	bne.n	80043be <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043e4:	f7fd fe3a 	bl	800205c <HAL_GetTick>
 80043e8:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80043ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043f6:	f023 0301 	bic.w	r3, r3, #1
 80043fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80043fe:	e00a      	b.n	8004416 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004400:	f7fd fe2c 	bl	800205c <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	f241 3288 	movw	r2, #5000	; 0x1388
 800440e:	4293      	cmp	r3, r2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e0a3      	b.n	800455e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004416:	f7ff fb46 	bl	8003aa6 <LL_RCC_LSE_IsReady>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1ef      	bne.n	8004400 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 8099 	beq.w	800455c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	2b0c      	cmp	r3, #12
 800442e:	d06c      	beq.n	800450a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004434:	2b02      	cmp	r3, #2
 8004436:	d14b      	bne.n	80044d0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004438:	f7ff fc87 	bl	8003d4a <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443c:	f7fd fe0e 	bl	800205c <HAL_GetTick>
 8004440:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004444:	f7fd fe0a 	bl	800205c <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b0a      	cmp	r3, #10
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e083      	b.n	800455e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004456:	f7ff fc86 	bl	8003d66 <LL_RCC_PLL_IsReady>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1f1      	bne.n	8004444 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004464:	68da      	ldr	r2, [r3, #12]
 8004466:	4b40      	ldr	r3, [pc, #256]	; (8004568 <HAL_RCC_OscConfig+0x6fc>)
 8004468:	4013      	ands	r3, r2
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004472:	4311      	orrs	r1, r2
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004478:	0212      	lsls	r2, r2, #8
 800447a:	4311      	orrs	r1, r2
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004480:	4311      	orrs	r1, r2
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004486:	4311      	orrs	r1, r2
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800448c:	430a      	orrs	r2, r1
 800448e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004492:	4313      	orrs	r3, r2
 8004494:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004496:	f7ff fc4a 	bl	8003d2e <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800449a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044aa:	f7fd fdd7 	bl	800205c <HAL_GetTick>
 80044ae:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80044b0:	e008      	b.n	80044c4 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044b2:	f7fd fdd3 	bl	800205c <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b0a      	cmp	r3, #10
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e04c      	b.n	800455e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80044c4:	f7ff fc4f 	bl	8003d66 <LL_RCC_PLL_IsReady>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d0f1      	beq.n	80044b2 <HAL_RCC_OscConfig+0x646>
 80044ce:	e045      	b.n	800455c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044d0:	f7ff fc3b 	bl	8003d4a <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d4:	f7fd fdc2 	bl	800205c <HAL_GetTick>
 80044d8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044dc:	f7fd fdbe 	bl	800205c <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b0a      	cmp	r3, #10
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e037      	b.n	800455e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80044ee:	f7ff fc3a 	bl	8003d66 <LL_RCC_PLL_IsReady>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1f1      	bne.n	80044dc <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80044f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044fc:	68da      	ldr	r2, [r3, #12]
 80044fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004502:	4b1a      	ldr	r3, [pc, #104]	; (800456c <HAL_RCC_OscConfig+0x700>)
 8004504:	4013      	ands	r3, r2
 8004506:	60cb      	str	r3, [r1, #12]
 8004508:	e028      	b.n	800455c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450e:	2b01      	cmp	r3, #1
 8004510:	d101      	bne.n	8004516 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e023      	b.n	800455e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	f003 0203 	and.w	r2, r3, #3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004528:	429a      	cmp	r2, r3
 800452a:	d115      	bne.n	8004558 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004536:	429a      	cmp	r2, r3
 8004538:	d10e      	bne.n	8004558 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004544:	021b      	lsls	r3, r3, #8
 8004546:	429a      	cmp	r2, r3
 8004548:	d106      	bne.n	8004558 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004554:	429a      	cmp	r2, r3
 8004556:	d001      	beq.n	800455c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e000      	b.n	800455e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3720      	adds	r7, #32
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	11c1808c 	.word	0x11c1808c
 800456c:	eefefffc 	.word	0xeefefffc

08004570 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e10f      	b.n	80047a4 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004584:	4b89      	ldr	r3, [pc, #548]	; (80047ac <HAL_RCC_ClockConfig+0x23c>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0307 	and.w	r3, r3, #7
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	429a      	cmp	r2, r3
 8004590:	d91b      	bls.n	80045ca <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004592:	4b86      	ldr	r3, [pc, #536]	; (80047ac <HAL_RCC_ClockConfig+0x23c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f023 0207 	bic.w	r2, r3, #7
 800459a:	4984      	ldr	r1, [pc, #528]	; (80047ac <HAL_RCC_ClockConfig+0x23c>)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	4313      	orrs	r3, r2
 80045a0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045a2:	f7fd fd5b 	bl	800205c <HAL_GetTick>
 80045a6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045a8:	e008      	b.n	80045bc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80045aa:	f7fd fd57 	bl	800205c <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e0f3      	b.n	80047a4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045bc:	4b7b      	ldr	r3, [pc, #492]	; (80047ac <HAL_RCC_ClockConfig+0x23c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0307 	and.w	r3, r3, #7
 80045c4:	683a      	ldr	r2, [r7, #0]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d1ef      	bne.n	80045aa <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d016      	beq.n	8004604 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	4618      	mov	r0, r3
 80045dc:	f7ff fb2a 	bl	8003c34 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80045e0:	f7fd fd3c 	bl	800205c <HAL_GetTick>
 80045e4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80045e6:	e008      	b.n	80045fa <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80045e8:	f7fd fd38 	bl	800205c <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e0d4      	b.n	80047a4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80045fa:	f7ff fbf2 	bl	8003de2 <LL_RCC_IsActiveFlag_HPRE>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d0f1      	beq.n	80045e8 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460c:	2b00      	cmp	r3, #0
 800460e:	d016      	beq.n	800463e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	4618      	mov	r0, r3
 8004616:	f7ff fb20 	bl	8003c5a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800461a:	f7fd fd1f 	bl	800205c <HAL_GetTick>
 800461e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004620:	e008      	b.n	8004634 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004622:	f7fd fd1b 	bl	800205c <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d901      	bls.n	8004634 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e0b7      	b.n	80047a4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004634:	f7ff fbe6 	bl	8003e04 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0f1      	beq.n	8004622 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0304 	and.w	r3, r3, #4
 8004646:	2b00      	cmp	r3, #0
 8004648:	d016      	beq.n	8004678 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	4618      	mov	r0, r3
 8004650:	f7ff fb19 	bl	8003c86 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004654:	f7fd fd02 	bl	800205c <HAL_GetTick>
 8004658:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800465a:	e008      	b.n	800466e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800465c:	f7fd fcfe 	bl	800205c <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d901      	bls.n	800466e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e09a      	b.n	80047a4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800466e:	f7ff fbdb 	bl	8003e28 <LL_RCC_IsActiveFlag_PPRE1>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d0f1      	beq.n	800465c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0308 	and.w	r3, r3, #8
 8004680:	2b00      	cmp	r3, #0
 8004682:	d017      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	00db      	lsls	r3, r3, #3
 800468a:	4618      	mov	r0, r3
 800468c:	f7ff fb0e 	bl	8003cac <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004690:	f7fd fce4 	bl	800205c <HAL_GetTick>
 8004694:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004696:	e008      	b.n	80046aa <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004698:	f7fd fce0 	bl	800205c <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e07c      	b.n	80047a4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80046aa:	f7ff fbce 	bl	8003e4a <LL_RCC_IsActiveFlag_PPRE2>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0f1      	beq.n	8004698 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d043      	beq.n	8004748 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d106      	bne.n	80046d6 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80046c8:	f7ff f99b 	bl	8003a02 <LL_RCC_HSE_IsReady>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d11e      	bne.n	8004710 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e066      	b.n	80047a4 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	2b03      	cmp	r3, #3
 80046dc:	d106      	bne.n	80046ec <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80046de:	f7ff fb42 	bl	8003d66 <LL_RCC_PLL_IsReady>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d113      	bne.n	8004710 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e05b      	b.n	80047a4 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d106      	bne.n	8004702 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80046f4:	f7ff fa35 	bl	8003b62 <LL_RCC_MSI_IsReady>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d108      	bne.n	8004710 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e050      	b.n	80047a4 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004702:	f7ff f9ab 	bl	8003a5c <LL_RCC_HSI_IsReady>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e049      	b.n	80047a4 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	4618      	mov	r0, r3
 8004716:	f7ff fa6f 	bl	8003bf8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800471a:	f7fd fc9f 	bl	800205c <HAL_GetTick>
 800471e:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004720:	e00a      	b.n	8004738 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004722:	f7fd fc9b 	bl	800205c <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004730:	4293      	cmp	r3, r2
 8004732:	d901      	bls.n	8004738 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e035      	b.n	80047a4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004738:	f7ff fa71 	bl	8003c1e <LL_RCC_GetSysClkSource>
 800473c:	4602      	mov	r2, r0
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	429a      	cmp	r2, r3
 8004746:	d1ec      	bne.n	8004722 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004748:	4b18      	ldr	r3, [pc, #96]	; (80047ac <HAL_RCC_ClockConfig+0x23c>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0307 	and.w	r3, r3, #7
 8004750:	683a      	ldr	r2, [r7, #0]
 8004752:	429a      	cmp	r2, r3
 8004754:	d21b      	bcs.n	800478e <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004756:	4b15      	ldr	r3, [pc, #84]	; (80047ac <HAL_RCC_ClockConfig+0x23c>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f023 0207 	bic.w	r2, r3, #7
 800475e:	4913      	ldr	r1, [pc, #76]	; (80047ac <HAL_RCC_ClockConfig+0x23c>)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	4313      	orrs	r3, r2
 8004764:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004766:	f7fd fc79 	bl	800205c <HAL_GetTick>
 800476a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800476c:	e008      	b.n	8004780 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800476e:	f7fd fc75 	bl	800205c <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d901      	bls.n	8004780 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e011      	b.n	80047a4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004780:	4b0a      	ldr	r3, [pc, #40]	; (80047ac <HAL_RCC_ClockConfig+0x23c>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0307 	and.w	r3, r3, #7
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	429a      	cmp	r2, r3
 800478c:	d1ef      	bne.n	800476e <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800478e:	f000 f8b3 	bl	80048f8 <HAL_RCC_GetHCLKFreq>
 8004792:	4603      	mov	r3, r0
 8004794:	4a06      	ldr	r2, [pc, #24]	; (80047b0 <HAL_RCC_ClockConfig+0x240>)
 8004796:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8004798:	4b06      	ldr	r3, [pc, #24]	; (80047b4 <HAL_RCC_ClockConfig+0x244>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4618      	mov	r0, r3
 800479e:	f7fd faa1 	bl	8001ce4 <HAL_InitTick>
 80047a2:	4603      	mov	r3, r0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	58004000 	.word	0x58004000
 80047b0:	20000000 	.word	0x20000000
 80047b4:	20000004 	.word	0x20000004

080047b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047b8:	b590      	push	{r4, r7, lr}
 80047ba:	b087      	sub	sp, #28
 80047bc:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80047be:	2300      	movs	r3, #0
 80047c0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047c6:	f7ff fa2a 	bl	8003c1e <LL_RCC_GetSysClkSource>
 80047ca:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047cc:	f7ff fafe 	bl	8003dcc <LL_RCC_PLL_GetMainSource>
 80047d0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d005      	beq.n	80047e4 <HAL_RCC_GetSysClockFreq+0x2c>
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	2b0c      	cmp	r3, #12
 80047dc:	d139      	bne.n	8004852 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d136      	bne.n	8004852 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80047e4:	f7ff f9cd 	bl	8003b82 <LL_RCC_MSI_IsEnabledRangeSelect>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d115      	bne.n	800481a <HAL_RCC_GetSysClockFreq+0x62>
 80047ee:	f7ff f9c8 	bl	8003b82 <LL_RCC_MSI_IsEnabledRangeSelect>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d106      	bne.n	8004806 <HAL_RCC_GetSysClockFreq+0x4e>
 80047f8:	f7ff f9d3 	bl	8003ba2 <LL_RCC_MSI_GetRange>
 80047fc:	4603      	mov	r3, r0
 80047fe:	0a1b      	lsrs	r3, r3, #8
 8004800:	f003 030f 	and.w	r3, r3, #15
 8004804:	e005      	b.n	8004812 <HAL_RCC_GetSysClockFreq+0x5a>
 8004806:	f7ff f9d7 	bl	8003bb8 <LL_RCC_MSI_GetRangeAfterStandby>
 800480a:	4603      	mov	r3, r0
 800480c:	0a1b      	lsrs	r3, r3, #8
 800480e:	f003 030f 	and.w	r3, r3, #15
 8004812:	4a36      	ldr	r2, [pc, #216]	; (80048ec <HAL_RCC_GetSysClockFreq+0x134>)
 8004814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004818:	e014      	b.n	8004844 <HAL_RCC_GetSysClockFreq+0x8c>
 800481a:	f7ff f9b2 	bl	8003b82 <LL_RCC_MSI_IsEnabledRangeSelect>
 800481e:	4603      	mov	r3, r0
 8004820:	2b01      	cmp	r3, #1
 8004822:	d106      	bne.n	8004832 <HAL_RCC_GetSysClockFreq+0x7a>
 8004824:	f7ff f9bd 	bl	8003ba2 <LL_RCC_MSI_GetRange>
 8004828:	4603      	mov	r3, r0
 800482a:	091b      	lsrs	r3, r3, #4
 800482c:	f003 030f 	and.w	r3, r3, #15
 8004830:	e005      	b.n	800483e <HAL_RCC_GetSysClockFreq+0x86>
 8004832:	f7ff f9c1 	bl	8003bb8 <LL_RCC_MSI_GetRangeAfterStandby>
 8004836:	4603      	mov	r3, r0
 8004838:	091b      	lsrs	r3, r3, #4
 800483a:	f003 030f 	and.w	r3, r3, #15
 800483e:	4a2b      	ldr	r2, [pc, #172]	; (80048ec <HAL_RCC_GetSysClockFreq+0x134>)
 8004840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004844:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d115      	bne.n	8004878 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004850:	e012      	b.n	8004878 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	2b04      	cmp	r3, #4
 8004856:	d102      	bne.n	800485e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004858:	4b25      	ldr	r3, [pc, #148]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x138>)
 800485a:	617b      	str	r3, [r7, #20]
 800485c:	e00c      	b.n	8004878 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	2b08      	cmp	r3, #8
 8004862:	d109      	bne.n	8004878 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004864:	f7ff f8a0 	bl	80039a8 <LL_RCC_HSE_IsEnabledDiv2>
 8004868:	4603      	mov	r3, r0
 800486a:	2b01      	cmp	r3, #1
 800486c:	d102      	bne.n	8004874 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800486e:	4b20      	ldr	r3, [pc, #128]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x138>)
 8004870:	617b      	str	r3, [r7, #20]
 8004872:	e001      	b.n	8004878 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004874:	4b1f      	ldr	r3, [pc, #124]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004876:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004878:	f7ff f9d1 	bl	8003c1e <LL_RCC_GetSysClkSource>
 800487c:	4603      	mov	r3, r0
 800487e:	2b0c      	cmp	r3, #12
 8004880:	d12f      	bne.n	80048e2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004882:	f7ff faa3 	bl	8003dcc <LL_RCC_PLL_GetMainSource>
 8004886:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b02      	cmp	r3, #2
 800488c:	d003      	beq.n	8004896 <HAL_RCC_GetSysClockFreq+0xde>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2b03      	cmp	r3, #3
 8004892:	d003      	beq.n	800489c <HAL_RCC_GetSysClockFreq+0xe4>
 8004894:	e00d      	b.n	80048b2 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004896:	4b16      	ldr	r3, [pc, #88]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x138>)
 8004898:	60fb      	str	r3, [r7, #12]
        break;
 800489a:	e00d      	b.n	80048b8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800489c:	f7ff f884 	bl	80039a8 <LL_RCC_HSE_IsEnabledDiv2>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d102      	bne.n	80048ac <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80048a6:	4b12      	ldr	r3, [pc, #72]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x138>)
 80048a8:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80048aa:	e005      	b.n	80048b8 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80048ac:	4b11      	ldr	r3, [pc, #68]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80048ae:	60fb      	str	r3, [r7, #12]
        break;
 80048b0:	e002      	b.n	80048b8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	60fb      	str	r3, [r7, #12]
        break;
 80048b6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80048b8:	f7ff fa66 	bl	8003d88 <LL_RCC_PLL_GetN>
 80048bc:	4602      	mov	r2, r0
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	fb03 f402 	mul.w	r4, r3, r2
 80048c4:	f7ff fa77 	bl	8003db6 <LL_RCC_PLL_GetDivider>
 80048c8:	4603      	mov	r3, r0
 80048ca:	091b      	lsrs	r3, r3, #4
 80048cc:	3301      	adds	r3, #1
 80048ce:	fbb4 f4f3 	udiv	r4, r4, r3
 80048d2:	f7ff fa65 	bl	8003da0 <LL_RCC_PLL_GetR>
 80048d6:	4603      	mov	r3, r0
 80048d8:	0f5b      	lsrs	r3, r3, #29
 80048da:	3301      	adds	r3, #1
 80048dc:	fbb4 f3f3 	udiv	r3, r4, r3
 80048e0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80048e2:	697b      	ldr	r3, [r7, #20]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	371c      	adds	r7, #28
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd90      	pop	{r4, r7, pc}
 80048ec:	0800f234 	.word	0x0800f234
 80048f0:	00f42400 	.word	0x00f42400
 80048f4:	01e84800 	.word	0x01e84800

080048f8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048f8:	b598      	push	{r3, r4, r7, lr}
 80048fa:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80048fc:	f7ff ff5c 	bl	80047b8 <HAL_RCC_GetSysClockFreq>
 8004900:	4604      	mov	r4, r0
 8004902:	f7ff f9e6 	bl	8003cd2 <LL_RCC_GetAHBPrescaler>
 8004906:	4603      	mov	r3, r0
 8004908:	091b      	lsrs	r3, r3, #4
 800490a:	f003 030f 	and.w	r3, r3, #15
 800490e:	4a03      	ldr	r2, [pc, #12]	; (800491c <HAL_RCC_GetHCLKFreq+0x24>)
 8004910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004914:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004918:	4618      	mov	r0, r3
 800491a:	bd98      	pop	{r3, r4, r7, pc}
 800491c:	0800f1d4 	.word	0x0800f1d4

08004920 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004920:	b598      	push	{r3, r4, r7, lr}
 8004922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004924:	f7ff ffe8 	bl	80048f8 <HAL_RCC_GetHCLKFreq>
 8004928:	4604      	mov	r4, r0
 800492a:	f7ff f9ea 	bl	8003d02 <LL_RCC_GetAPB1Prescaler>
 800492e:	4603      	mov	r3, r0
 8004930:	0a1b      	lsrs	r3, r3, #8
 8004932:	4a03      	ldr	r2, [pc, #12]	; (8004940 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004938:	fa24 f303 	lsr.w	r3, r4, r3
}
 800493c:	4618      	mov	r0, r3
 800493e:	bd98      	pop	{r3, r4, r7, pc}
 8004940:	0800f214 	.word	0x0800f214

08004944 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004944:	b598      	push	{r3, r4, r7, lr}
 8004946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004948:	f7ff ffd6 	bl	80048f8 <HAL_RCC_GetHCLKFreq>
 800494c:	4604      	mov	r4, r0
 800494e:	f7ff f9e3 	bl	8003d18 <LL_RCC_GetAPB2Prescaler>
 8004952:	4603      	mov	r3, r0
 8004954:	0adb      	lsrs	r3, r3, #11
 8004956:	4a03      	ldr	r2, [pc, #12]	; (8004964 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800495c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004960:	4618      	mov	r0, r3
 8004962:	bd98      	pop	{r3, r4, r7, pc}
 8004964:	0800f214 	.word	0x0800f214

08004968 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer to the Flash Latency variable.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  uint32_t regvalue;

  /* Check the parameters */
  if ((RCC_ClkInitStruct != NULL) && (pFLatency != NULL))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d02d      	beq.n	80049d4 <HAL_RCC_GetClockConfig+0x6c>
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d02a      	beq.n	80049d4 <HAL_RCC_GetClockConfig+0x6c>
  {
    /* Set all possible values for the Clock type parameter --------------------*/
    RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 \
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	224f      	movs	r2, #79	; 0x4f
 8004982:	601a      	str	r2, [r3, #0]
#if defined(DUAL_CORE)
    RCC_ClkInitStruct->ClockType |= RCC_CLOCKTYPE_HCLK2;
#endif  /* DUAL_CORE */

    /* Get Clock Configuration Register */
    regvalue = RCC->CFGR;
 8004984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	60fb      	str	r3, [r7, #12]

    /* Get the SYSCLK configuration --------------------------------------------*/
    RCC_ClkInitStruct->SYSCLKSource = (regvalue & RCC_CFGR_SWS);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f003 020c 	and.w	r2, r3, #12
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	605a      	str	r2, [r3, #4]

    /* Get the HCLK configuration ----------------------------------------------*/
    RCC_ClkInitStruct->AHBCLKDivider = (regvalue & RCC_CFGR_HPRE);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	609a      	str	r2, [r3, #8]

    /* Get the APB1 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB1CLKDivider = (regvalue & RCC_CFGR_PPRE1);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	60da      	str	r2, [r3, #12]

    /* Get the APB2 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB2CLKDivider = (regvalue & RCC_CFGR_PPRE2);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	611a      	str	r2, [r3, #16]

    /* Get Extended Clock Recovery Register */
    regvalue = RCC->EXTCFGR;
 80049b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049b8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80049bc:	60fb      	str	r3, [r7, #12]
    /* Get the AHBCLK2Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK2Divider =  (regvalue & RCC_EXTCFGR_C2HPRE);
#endif  /* DUAL_CORE */

    /* Get the AHBCLK3Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK3Divider = ((regvalue & RCC_EXTCFGR_SHDHPRE) << 4);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	011b      	lsls	r3, r3, #4
 80049c2:	b2da      	uxtb	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	615a      	str	r2, [r3, #20]

    /* Get the Flash Wait State (Latency) configuration ------------------------*/
    *pFLatency = __HAL_FLASH_GET_LATENCY();
 80049c8:	4b05      	ldr	r3, [pc, #20]	; (80049e0 <HAL_RCC_GetClockConfig+0x78>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0207 	and.w	r2, r3, #7
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	601a      	str	r2, [r3, #0]
  }
}
 80049d4:	bf00      	nop
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	bc80      	pop	{r7}
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	58004000 	.word	0x58004000

080049e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80049e4:	b590      	push	{r4, r7, lr}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	091b      	lsrs	r3, r3, #4
 80049f0:	f003 030f 	and.w	r3, r3, #15
 80049f4:	4a10      	ldr	r2, [pc, #64]	; (8004a38 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80049f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049fa:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80049fc:	f7ff f974 	bl	8003ce8 <LL_RCC_GetAHB3Prescaler>
 8004a00:	4603      	mov	r3, r0
 8004a02:	091b      	lsrs	r3, r3, #4
 8004a04:	f003 030f 	and.w	r3, r3, #15
 8004a08:	4a0c      	ldr	r2, [pc, #48]	; (8004a3c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8004a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a14:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	4a09      	ldr	r2, [pc, #36]	; (8004a40 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8004a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1e:	0c9c      	lsrs	r4, r3, #18
 8004a20:	f7fe ff88 	bl	8003934 <HAL_PWREx_GetVoltageRange>
 8004a24:	4603      	mov	r3, r0
 8004a26:	4619      	mov	r1, r3
 8004a28:	4620      	mov	r0, r4
 8004a2a:	f000 f80b 	bl	8004a44 <RCC_SetFlashLatency>
 8004a2e:	4603      	mov	r3, r0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3714      	adds	r7, #20
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd90      	pop	{r4, r7, pc}
 8004a38:	0800f234 	.word	0x0800f234
 8004a3c:	0800f1d4 	.word	0x0800f1d4
 8004a40:	431bde83 	.word	0x431bde83

08004a44 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b08e      	sub	sp, #56	; 0x38
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8004a4e:	4a3a      	ldr	r2, [pc, #232]	; (8004b38 <RCC_SetFlashLatency+0xf4>)
 8004a50:	f107 0320 	add.w	r3, r7, #32
 8004a54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004a58:	6018      	str	r0, [r3, #0]
 8004a5a:	3304      	adds	r3, #4
 8004a5c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8004a5e:	4a37      	ldr	r2, [pc, #220]	; (8004b3c <RCC_SetFlashLatency+0xf8>)
 8004a60:	f107 0318 	add.w	r3, r7, #24
 8004a64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004a68:	6018      	str	r0, [r3, #0]
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8004a6e:	4a34      	ldr	r2, [pc, #208]	; (8004b40 <RCC_SetFlashLatency+0xfc>)
 8004a70:	f107 030c 	add.w	r3, r7, #12
 8004a74:	ca07      	ldmia	r2, {r0, r1, r2}
 8004a76:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a84:	d11b      	bne.n	8004abe <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004a86:	2300      	movs	r3, #0
 8004a88:	633b      	str	r3, [r7, #48]	; 0x30
 8004a8a:	e014      	b.n	8004ab6 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8e:	005b      	lsls	r3, r3, #1
 8004a90:	3338      	adds	r3, #56	; 0x38
 8004a92:	443b      	add	r3, r7
 8004a94:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004a98:	461a      	mov	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d807      	bhi.n	8004ab0 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	3338      	adds	r3, #56	; 0x38
 8004aa6:	443b      	add	r3, r7
 8004aa8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004aac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004aae:	e021      	b.n	8004af4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	633b      	str	r3, [r7, #48]	; 0x30
 8004ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d9e7      	bls.n	8004a8c <RCC_SetFlashLatency+0x48>
 8004abc:	e01a      	b.n	8004af4 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004abe:	2300      	movs	r3, #0
 8004ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ac2:	e014      	b.n	8004aee <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac6:	005b      	lsls	r3, r3, #1
 8004ac8:	3338      	adds	r3, #56	; 0x38
 8004aca:	443b      	add	r3, r7
 8004acc:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d807      	bhi.n	8004ae8 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	3338      	adds	r3, #56	; 0x38
 8004ade:	443b      	add	r3, r7
 8004ae0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004ae4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ae6:	e005      	b.n	8004af4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aea:	3301      	adds	r3, #1
 8004aec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d9e7      	bls.n	8004ac4 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004af4:	4b13      	ldr	r3, [pc, #76]	; (8004b44 <RCC_SetFlashLatency+0x100>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f023 0207 	bic.w	r2, r3, #7
 8004afc:	4911      	ldr	r1, [pc, #68]	; (8004b44 <RCC_SetFlashLatency+0x100>)
 8004afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b00:	4313      	orrs	r3, r2
 8004b02:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004b04:	f7fd faaa 	bl	800205c <HAL_GetTick>
 8004b08:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004b0a:	e008      	b.n	8004b1e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004b0c:	f7fd faa6 	bl	800205c <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d901      	bls.n	8004b1e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e007      	b.n	8004b2e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004b1e:	4b09      	ldr	r3, [pc, #36]	; (8004b44 <RCC_SetFlashLatency+0x100>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0307 	and.w	r3, r3, #7
 8004b26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d1ef      	bne.n	8004b0c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3738      	adds	r7, #56	; 0x38
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	0800f0a4 	.word	0x0800f0a4
 8004b3c:	0800f0ac 	.word	0x0800f0ac
 8004b40:	0800f0b4 	.word	0x0800f0b4
 8004b44:	58004000 	.word	0x58004000

08004b48 <LL_RCC_LSE_IsReady>:
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d101      	bne.n	8004b60 <LL_RCC_LSE_IsReady+0x18>
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e000      	b.n	8004b62 <LL_RCC_LSE_IsReady+0x1a>
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bc80      	pop	{r7}
 8004b68:	4770      	bx	lr

08004b6a <LL_RCC_SetUSARTClockSource>:
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b083      	sub	sp, #12
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8004b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b76:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	0c1b      	lsrs	r3, r3, #16
 8004b7e:	43db      	mvns	r3, r3
 8004b80:	401a      	ands	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bc80      	pop	{r7}
 8004b98:	4770      	bx	lr

08004b9a <LL_RCC_SetI2SClockSource>:
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8004ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004baa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004bba:	bf00      	nop
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bc80      	pop	{r7}
 8004bc2:	4770      	bx	lr

08004bc4 <LL_RCC_SetLPUARTClockSource>:
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004bd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bc80      	pop	{r7}
 8004bec:	4770      	bx	lr

08004bee <LL_RCC_SetI2CClockSource>:
{
 8004bee:	b480      	push	{r7}
 8004bf0:	b083      	sub	sp, #12
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bfa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	091b      	lsrs	r3, r3, #4
 8004c02:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004c06:	43db      	mvns	r3, r3
 8004c08:	401a      	ands	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	011b      	lsls	r3, r3, #4
 8004c0e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004c12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c16:	4313      	orrs	r3, r2
 8004c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bc80      	pop	{r7}
 8004c24:	4770      	bx	lr

08004c26 <LL_RCC_SetLPTIMClockSource>:
{
 8004c26:	b480      	push	{r7}
 8004c28:	b083      	sub	sp, #12
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c32:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	0c1b      	lsrs	r3, r3, #16
 8004c3a:	041b      	lsls	r3, r3, #16
 8004c3c:	43db      	mvns	r3, r3
 8004c3e:	401a      	ands	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	041b      	lsls	r3, r3, #16
 8004c44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004c4e:	bf00      	nop
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bc80      	pop	{r7}
 8004c56:	4770      	bx	lr

08004c58 <LL_RCC_SetRNGClockSource>:
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c68:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004c6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bc80      	pop	{r7}
 8004c80:	4770      	bx	lr

08004c82 <LL_RCC_SetADCClockSource>:
{
 8004c82:	b480      	push	{r7}
 8004c84:	b083      	sub	sp, #12
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c92:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004ca2:	bf00      	nop
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bc80      	pop	{r7}
 8004caa:	4770      	bx	lr

08004cac <LL_RCC_SetRTCClockSource>:
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bc80      	pop	{r7}
 8004cd4:	4770      	bx	lr

08004cd6 <LL_RCC_GetRTCClockSource>:
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bc80      	pop	{r7}
 8004cec:	4770      	bx	lr

08004cee <LL_RCC_ForceBackupDomainReset>:
{
 8004cee:	b480      	push	{r7}
 8004cf0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004d06:	bf00      	nop
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bc80      	pop	{r7}
 8004d0c:	4770      	bx	lr

08004d0e <LL_RCC_ReleaseBackupDomainReset>:
{
 8004d0e:	b480      	push	{r7}
 8004d10:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004d26:	bf00      	nop
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bc80      	pop	{r7}
 8004d2c:	4770      	bx	lr
	...

08004d30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004d40:	2300      	movs	r3, #0
 8004d42:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d058      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8004d50:	f7fe fde2 	bl	8003918 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d54:	f7fd f982 	bl	800205c <HAL_GetTick>
 8004d58:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004d5a:	e009      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d5c:	f7fd f97e 	bl	800205c <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d902      	bls.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	74fb      	strb	r3, [r7, #19]
        break;
 8004d6e:	e006      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004d70:	4b7b      	ldr	r3, [pc, #492]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d7c:	d1ee      	bne.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8004d7e:	7cfb      	ldrb	r3, [r7, #19]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d13c      	bne.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8004d84:	f7ff ffa7 	bl	8004cd6 <LL_RCC_GetRTCClockSource>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d00f      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d9e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004da0:	f7ff ffa5 	bl	8004cee <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004da4:	f7ff ffb3 	bl	8004d0e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004da8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d014      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dbc:	f7fd f94e 	bl	800205c <HAL_GetTick>
 8004dc0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8004dc2:	e00b      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dc4:	f7fd f94a 	bl	800205c <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d902      	bls.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	74fb      	strb	r3, [r7, #19]
            break;
 8004dda:	e004      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8004ddc:	f7ff feb4 	bl	8004b48 <LL_RCC_LSE_IsReady>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d1ee      	bne.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8004de6:	7cfb      	ldrb	r3, [r7, #19]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d105      	bne.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7ff ff5b 	bl	8004cac <LL_RCC_SetRTCClockSource>
 8004df6:	e004      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004df8:	7cfb      	ldrb	r3, [r7, #19]
 8004dfa:	74bb      	strb	r3, [r7, #18]
 8004dfc:	e001      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dfe:	7cfb      	ldrb	r3, [r7, #19]
 8004e00:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d004      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7ff fea9 	bl	8004b6a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d004      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7ff fe9e 	bl	8004b6a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0320 	and.w	r3, r3, #32
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d004      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7ff fec0 	bl	8004bc4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d004      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a1b      	ldr	r3, [r3, #32]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7ff fee6 	bl	8004c26 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d004      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7ff fedb 	bl	8004c26 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d004      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7ff fed0 	bl	8004c26 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d004      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7ff fea9 	bl	8004bee <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d004      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7ff fe9e 	bl	8004bee <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d004      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7ff fe93 	bl	8004bee <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0310 	and.w	r3, r3, #16
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d011      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7ff fe5e 	bl	8004b9a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ee6:	d107      	bne.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8004ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ef2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ef6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d010      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7ff fea5 	bl	8004c58 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d107      	bne.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f24:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d011      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7ff fea3 	bl	8004c82 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f44:	d107      	bne.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f54:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004f56:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3718      	adds	r7, #24
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	58000400 	.word	0x58000400

08004f64 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d071      	beq.n	800505a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d106      	bne.n	8004f90 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7fc fe0a 	bl	8001ba4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004f98:	4b32      	ldr	r3, [pc, #200]	; (8005064 <HAL_RTC_Init+0x100>)
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f003 0310 	and.w	r3, r3, #16
 8004fa0:	2b10      	cmp	r3, #16
 8004fa2:	d051      	beq.n	8005048 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004fa4:	4b2f      	ldr	r3, [pc, #188]	; (8005064 <HAL_RTC_Init+0x100>)
 8004fa6:	22ca      	movs	r2, #202	; 0xca
 8004fa8:	625a      	str	r2, [r3, #36]	; 0x24
 8004faa:	4b2e      	ldr	r3, [pc, #184]	; (8005064 <HAL_RTC_Init+0x100>)
 8004fac:	2253      	movs	r2, #83	; 0x53
 8004fae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 fb53 	bl	800565c <RTC_EnterInitMode>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8004fba:	7bfb      	ldrb	r3, [r7, #15]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d13f      	bne.n	8005040 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8004fc0:	4b28      	ldr	r3, [pc, #160]	; (8005064 <HAL_RTC_Init+0x100>)
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	4a27      	ldr	r2, [pc, #156]	; (8005064 <HAL_RTC_Init+0x100>)
 8004fc6:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8004fca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fce:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8004fd0:	4b24      	ldr	r3, [pc, #144]	; (8005064 <HAL_RTC_Init+0x100>)
 8004fd2:	699a      	ldr	r2, [r3, #24]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6859      	ldr	r1, [r3, #4]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	4319      	orrs	r1, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	430b      	orrs	r3, r1
 8004fe4:	491f      	ldr	r1, [pc, #124]	; (8005064 <HAL_RTC_Init+0x100>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68da      	ldr	r2, [r3, #12]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	041b      	lsls	r3, r3, #16
 8004ff4:	491b      	ldr	r1, [pc, #108]	; (8005064 <HAL_RTC_Init+0x100>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8004ffa:	4b1a      	ldr	r3, [pc, #104]	; (8005064 <HAL_RTC_Init+0x100>)
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500a:	430b      	orrs	r3, r1
 800500c:	4915      	ldr	r1, [pc, #84]	; (8005064 <HAL_RTC_Init+0x100>)
 800500e:	4313      	orrs	r3, r2
 8005010:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 fb56 	bl	80056c4 <RTC_ExitInitMode>
 8005018:	4603      	mov	r3, r0
 800501a:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800501c:	7bfb      	ldrb	r3, [r7, #15]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10e      	bne.n	8005040 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8005022:	4b10      	ldr	r3, [pc, #64]	; (8005064 <HAL_RTC_Init+0x100>)
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a19      	ldr	r1, [r3, #32]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	69db      	ldr	r3, [r3, #28]
 8005032:	4319      	orrs	r1, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	430b      	orrs	r3, r1
 800503a:	490a      	ldr	r1, [pc, #40]	; (8005064 <HAL_RTC_Init+0x100>)
 800503c:	4313      	orrs	r3, r2
 800503e:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005040:	4b08      	ldr	r3, [pc, #32]	; (8005064 <HAL_RTC_Init+0x100>)
 8005042:	22ff      	movs	r2, #255	; 0xff
 8005044:	625a      	str	r2, [r3, #36]	; 0x24
 8005046:	e001      	b.n	800504c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8005048:	2300      	movs	r3, #0
 800504a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800504c:	7bfb      	ldrb	r3, [r7, #15]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d103      	bne.n	800505a <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 800505a:	7bfb      	ldrb	r3, [r7, #15]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	40002800 	.word	0x40002800

08005068 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005068:	b590      	push	{r4, r7, lr}
 800506a:	b087      	sub	sp, #28
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800507a:	2b01      	cmp	r3, #1
 800507c:	d101      	bne.n	8005082 <HAL_RTC_SetTime+0x1a>
 800507e:	2302      	movs	r3, #2
 8005080:	e088      	b.n	8005194 <HAL_RTC_SetTime+0x12c>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2202      	movs	r2, #2
 800508e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005092:	4b42      	ldr	r3, [pc, #264]	; (800519c <HAL_RTC_SetTime+0x134>)
 8005094:	22ca      	movs	r2, #202	; 0xca
 8005096:	625a      	str	r2, [r3, #36]	; 0x24
 8005098:	4b40      	ldr	r3, [pc, #256]	; (800519c <HAL_RTC_SetTime+0x134>)
 800509a:	2253      	movs	r2, #83	; 0x53
 800509c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f000 fadc 	bl	800565c <RTC_EnterInitMode>
 80050a4:	4603      	mov	r3, r0
 80050a6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80050a8:	7cfb      	ldrb	r3, [r7, #19]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d15e      	bne.n	800516c <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80050ae:	4b3b      	ldr	r3, [pc, #236]	; (800519c <HAL_RTC_SetTime+0x134>)
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ba:	d057      	beq.n	800516c <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d125      	bne.n	800510e <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80050c2:	4b36      	ldr	r3, [pc, #216]	; (800519c <HAL_RTC_SetTime+0x134>)
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d102      	bne.n	80050d4 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	2200      	movs	r2, #0
 80050d2:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	4618      	mov	r0, r3
 80050da:	f000 fb31 	bl	8005740 <RTC_ByteToBcd2>
 80050de:	4603      	mov	r3, r0
 80050e0:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	785b      	ldrb	r3, [r3, #1]
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 fb2a 	bl	8005740 <RTC_ByteToBcd2>
 80050ec:	4603      	mov	r3, r0
 80050ee:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80050f0:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	789b      	ldrb	r3, [r3, #2]
 80050f6:	4618      	mov	r0, r3
 80050f8:	f000 fb22 	bl	8005740 <RTC_ByteToBcd2>
 80050fc:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80050fe:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	78db      	ldrb	r3, [r3, #3]
 8005106:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005108:	4313      	orrs	r3, r2
 800510a:	617b      	str	r3, [r7, #20]
 800510c:	e017      	b.n	800513e <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800510e:	4b23      	ldr	r3, [pc, #140]	; (800519c <HAL_RTC_SetTime+0x134>)
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005116:	2b00      	cmp	r3, #0
 8005118:	d102      	bne.n	8005120 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	2200      	movs	r2, #0
 800511e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	785b      	ldrb	r3, [r3, #1]
 800512a:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800512c:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800512e:	68ba      	ldr	r2, [r7, #8]
 8005130:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005132:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	78db      	ldrb	r3, [r3, #3]
 8005138:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800513a:	4313      	orrs	r3, r2
 800513c:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800513e:	4a17      	ldr	r2, [pc, #92]	; (800519c <HAL_RTC_SetTime+0x134>)
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005146:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800514a:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800514c:	4b13      	ldr	r3, [pc, #76]	; (800519c <HAL_RTC_SetTime+0x134>)
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	4a12      	ldr	r2, [pc, #72]	; (800519c <HAL_RTC_SetTime+0x134>)
 8005152:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005156:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8005158:	4b10      	ldr	r3, [pc, #64]	; (800519c <HAL_RTC_SetTime+0x134>)
 800515a:	699a      	ldr	r2, [r3, #24]
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	68d9      	ldr	r1, [r3, #12]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	430b      	orrs	r3, r1
 8005166:	490d      	ldr	r1, [pc, #52]	; (800519c <HAL_RTC_SetTime+0x134>)
 8005168:	4313      	orrs	r3, r2
 800516a:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f000 faa9 	bl	80056c4 <RTC_ExitInitMode>
 8005172:	4603      	mov	r3, r0
 8005174:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005176:	4b09      	ldr	r3, [pc, #36]	; (800519c <HAL_RTC_SetTime+0x134>)
 8005178:	22ff      	movs	r2, #255	; 0xff
 800517a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800517c:	7cfb      	ldrb	r3, [r7, #19]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d103      	bne.n	800518a <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8005192:	7cfb      	ldrb	r3, [r7, #19]
}
 8005194:	4618      	mov	r0, r3
 8005196:	371c      	adds	r7, #28
 8005198:	46bd      	mov	sp, r7
 800519a:	bd90      	pop	{r4, r7, pc}
 800519c:	40002800 	.word	0x40002800

080051a0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 80051ac:	4b2c      	ldr	r3, [pc, #176]	; (8005260 <HAL_RTC_GetTime+0xc0>)
 80051ae:	689a      	ldr	r2, [r3, #8]
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80051b4:	4b2a      	ldr	r3, [pc, #168]	; (8005260 <HAL_RTC_GetTime+0xc0>)
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051c0:	d049      	beq.n	8005256 <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 80051c2:	4b27      	ldr	r3, [pc, #156]	; (8005260 <HAL_RTC_GetTime+0xc0>)
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 80051ce:	4b24      	ldr	r3, [pc, #144]	; (8005260 <HAL_RTC_GetTime+0xc0>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80051d6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80051da:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	0c1b      	lsrs	r3, r3, #16
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051e6:	b2da      	uxtb	r2, r3
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	0a1b      	lsrs	r3, r3, #8
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051f6:	b2da      	uxtb	r2, r3
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005204:	b2da      	uxtb	r2, r3
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	0d9b      	lsrs	r3, r3, #22
 800520e:	b2db      	uxtb	r3, r3
 8005210:	f003 0301 	and.w	r3, r3, #1
 8005214:	b2da      	uxtb	r2, r3
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d11a      	bne.n	8005256 <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	4618      	mov	r0, r3
 8005226:	f000 faaa 	bl	800577e <RTC_Bcd2ToByte>
 800522a:	4603      	mov	r3, r0
 800522c:	461a      	mov	r2, r3
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	785b      	ldrb	r3, [r3, #1]
 8005236:	4618      	mov	r0, r3
 8005238:	f000 faa1 	bl	800577e <RTC_Bcd2ToByte>
 800523c:	4603      	mov	r3, r0
 800523e:	461a      	mov	r2, r3
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	789b      	ldrb	r3, [r3, #2]
 8005248:	4618      	mov	r0, r3
 800524a:	f000 fa98 	bl	800577e <RTC_Bcd2ToByte>
 800524e:	4603      	mov	r3, r0
 8005250:	461a      	mov	r2, r3
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3718      	adds	r7, #24
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	40002800 	.word	0x40002800

08005264 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005264:	b590      	push	{r4, r7, lr}
 8005266:	b087      	sub	sp, #28
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005276:	2b01      	cmp	r3, #1
 8005278:	d101      	bne.n	800527e <HAL_RTC_SetDate+0x1a>
 800527a:	2302      	movs	r3, #2
 800527c:	e071      	b.n	8005362 <HAL_RTC_SetDate+0xfe>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2202      	movs	r2, #2
 800528a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d10e      	bne.n	80052b2 <HAL_RTC_SetDate+0x4e>
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	785b      	ldrb	r3, [r3, #1]
 8005298:	f003 0310 	and.w	r3, r3, #16
 800529c:	2b00      	cmp	r3, #0
 800529e:	d008      	beq.n	80052b2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	785b      	ldrb	r3, [r3, #1]
 80052a4:	f023 0310 	bic.w	r3, r3, #16
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	330a      	adds	r3, #10
 80052ac:	b2da      	uxtb	r2, r3
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d11c      	bne.n	80052f2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	78db      	ldrb	r3, [r3, #3]
 80052bc:	4618      	mov	r0, r3
 80052be:	f000 fa3f 	bl	8005740 <RTC_ByteToBcd2>
 80052c2:	4603      	mov	r3, r0
 80052c4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	785b      	ldrb	r3, [r3, #1]
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 fa38 	bl	8005740 <RTC_ByteToBcd2>
 80052d0:	4603      	mov	r3, r0
 80052d2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80052d4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	789b      	ldrb	r3, [r3, #2]
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 fa30 	bl	8005740 <RTC_ByteToBcd2>
 80052e0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80052e2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80052ec:	4313      	orrs	r3, r2
 80052ee:	617b      	str	r3, [r7, #20]
 80052f0:	e00e      	b.n	8005310 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	78db      	ldrb	r3, [r3, #3]
 80052f6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	785b      	ldrb	r3, [r3, #1]
 80052fc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80052fe:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005304:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800530c:	4313      	orrs	r3, r2
 800530e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005310:	4b16      	ldr	r3, [pc, #88]	; (800536c <HAL_RTC_SetDate+0x108>)
 8005312:	22ca      	movs	r2, #202	; 0xca
 8005314:	625a      	str	r2, [r3, #36]	; 0x24
 8005316:	4b15      	ldr	r3, [pc, #84]	; (800536c <HAL_RTC_SetDate+0x108>)
 8005318:	2253      	movs	r2, #83	; 0x53
 800531a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f000 f99d 	bl	800565c <RTC_EnterInitMode>
 8005322:	4603      	mov	r3, r0
 8005324:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005326:	7cfb      	ldrb	r3, [r7, #19]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10b      	bne.n	8005344 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800532c:	4a0f      	ldr	r2, [pc, #60]	; (800536c <HAL_RTC_SetDate+0x108>)
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005334:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005338:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f000 f9c2 	bl	80056c4 <RTC_ExitInitMode>
 8005340:	4603      	mov	r3, r0
 8005342:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005344:	4b09      	ldr	r3, [pc, #36]	; (800536c <HAL_RTC_SetDate+0x108>)
 8005346:	22ff      	movs	r2, #255	; 0xff
 8005348:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800534a:	7cfb      	ldrb	r3, [r7, #19]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d103      	bne.n	8005358 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8005360:	7cfb      	ldrb	r3, [r7, #19]
}
 8005362:	4618      	mov	r0, r3
 8005364:	371c      	adds	r7, #28
 8005366:	46bd      	mov	sp, r7
 8005368:	bd90      	pop	{r4, r7, pc}
 800536a:	bf00      	nop
 800536c:	40002800 	.word	0x40002800

08005370 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 800537c:	4b22      	ldr	r3, [pc, #136]	; (8005408 <HAL_RTC_GetDate+0x98>)
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005384:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005388:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	0c1b      	lsrs	r3, r3, #16
 800538e:	b2da      	uxtb	r2, r3
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	0a1b      	lsrs	r3, r3, #8
 8005398:	b2db      	uxtb	r3, r3
 800539a:	f003 031f 	and.w	r3, r3, #31
 800539e:	b2da      	uxtb	r2, r3
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	0b5b      	lsrs	r3, r3, #13
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	f003 0307 	and.w	r3, r3, #7
 80053bc:	b2da      	uxtb	r2, r3
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d11a      	bne.n	80053fe <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	78db      	ldrb	r3, [r3, #3]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f000 f9d6 	bl	800577e <RTC_Bcd2ToByte>
 80053d2:	4603      	mov	r3, r0
 80053d4:	461a      	mov	r2, r3
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	785b      	ldrb	r3, [r3, #1]
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 f9cd 	bl	800577e <RTC_Bcd2ToByte>
 80053e4:	4603      	mov	r3, r0
 80053e6:	461a      	mov	r2, r3
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	789b      	ldrb	r3, [r3, #2]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f000 f9c4 	bl	800577e <RTC_Bcd2ToByte>
 80053f6:	4603      	mov	r3, r0
 80053f8:	461a      	mov	r2, r3
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3718      	adds	r7, #24
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	40002800 	.word	0x40002800

0800540c <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800540c:	b590      	push	{r4, r7, lr}
 800540e:	b087      	sub	sp, #28
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8005418:	2300      	movs	r3, #0
 800541a:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  __HAL_LOCK(hrtc);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005422:	2b01      	cmp	r3, #1
 8005424:	d101      	bne.n	800542a <HAL_RTC_SetAlarm+0x1e>
 8005426:	2302      	movs	r3, #2
 8005428:	e0eb      	b.n	8005602 <HAL_RTC_SetAlarm+0x1f6>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2202      	movs	r2, #2
 8005436:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800543a:	4b74      	ldr	r3, [pc, #464]	; (800560c <HAL_RTC_SetAlarm+0x200>)
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005442:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800544a:	d06a      	beq.n	8005522 <HAL_RTC_SetAlarm+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d13a      	bne.n	80054c8 <HAL_RTC_SetAlarm+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005452:	4b6e      	ldr	r3, [pc, #440]	; (800560c <HAL_RTC_SetAlarm+0x200>)
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800545a:	2b00      	cmp	r3, #0
 800545c:	d102      	bne.n	8005464 <HAL_RTC_SetAlarm+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	2200      	movs	r2, #0
 8005462:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	695b      	ldr	r3, [r3, #20]
 8005468:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	4618      	mov	r0, r3
 8005472:	f000 f965 	bl	8005740 <RTC_ByteToBcd2>
 8005476:	4603      	mov	r3, r0
 8005478:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	785b      	ldrb	r3, [r3, #1]
 800547e:	4618      	mov	r0, r3
 8005480:	f000 f95e 	bl	8005740 <RTC_ByteToBcd2>
 8005484:	4603      	mov	r3, r0
 8005486:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005488:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	789b      	ldrb	r3, [r3, #2]
 800548e:	4618      	mov	r0, r3
 8005490:	f000 f956 	bl	8005740 <RTC_ByteToBcd2>
 8005494:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005496:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	78db      	ldrb	r3, [r3, #3]
 800549e:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80054a0:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80054aa:	4618      	mov	r0, r3
 80054ac:	f000 f948 	bl	8005740 <RTC_ByteToBcd2>
 80054b0:	4603      	mov	r3, r0
 80054b2:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80054b4:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80054bc:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80054c2:	4313      	orrs	r3, r2
 80054c4:	617b      	str	r3, [r7, #20]
 80054c6:	e02c      	b.n	8005522 <HAL_RTC_SetAlarm+0x116>
    }
    else /* format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 80054d0:	d00d      	beq.n	80054ee <HAL_RTC_SetAlarm+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054da:	d008      	beq.n	80054ee <HAL_RTC_SetAlarm+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80054dc:	4b4b      	ldr	r3, [pc, #300]	; (800560c <HAL_RTC_SetAlarm+0x200>)
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d102      	bne.n	80054ee <HAL_RTC_SetAlarm+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	2200      	movs	r2, #0
 80054ec:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	785b      	ldrb	r3, [r3, #1]
 80054f8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80054fa:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005500:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	78db      	ldrb	r3, [r3, #3]
 8005506:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005508:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005510:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005512:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005518:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800551e:	4313      	orrs	r3, r2
 8005520:	617b      	str	r3, [r7, #20]
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005522:	4b3a      	ldr	r3, [pc, #232]	; (800560c <HAL_RTC_SetAlarm+0x200>)
 8005524:	22ca      	movs	r2, #202	; 0xca
 8005526:	625a      	str	r2, [r3, #36]	; 0x24
 8005528:	4b38      	ldr	r3, [pc, #224]	; (800560c <HAL_RTC_SetAlarm+0x200>)
 800552a:	2253      	movs	r2, #83	; 0x53
 800552c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005536:	d12c      	bne.n	8005592 <HAL_RTC_SetAlarm+0x186>
  {
    /* Disable the Alarm A interrupt */
    /* In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRAE | RTC_CR_ALRAIE));
 8005538:	4b34      	ldr	r3, [pc, #208]	; (800560c <HAL_RTC_SetAlarm+0x200>)
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	4a33      	ldr	r2, [pc, #204]	; (800560c <HAL_RTC_SetAlarm+0x200>)
 800553e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005542:	6193      	str	r3, [r2, #24]

    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005544:	4b31      	ldr	r3, [pc, #196]	; (800560c <HAL_RTC_SetAlarm+0x200>)
 8005546:	2201      	movs	r2, #1
 8005548:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005550:	d107      	bne.n	8005562 <HAL_RTC_SetAlarm+0x156>
    {
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	699a      	ldr	r2, [r3, #24]
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	492c      	ldr	r1, [pc, #176]	; (800560c <HAL_RTC_SetAlarm+0x200>)
 800555c:	4313      	orrs	r3, r2
 800555e:	644b      	str	r3, [r1, #68]	; 0x44
 8005560:	e006      	b.n	8005570 <HAL_RTC_SetAlarm+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8005562:	4a2a      	ldr	r2, [pc, #168]	; (800560c <HAL_RTC_SetAlarm+0x200>)
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8005568:	4a28      	ldr	r2, [pc, #160]	; (800560c <HAL_RTC_SetAlarm+0x200>)
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8005570:	4a26      	ldr	r2, [pc, #152]	; (800560c <HAL_RTC_SetAlarm+0x200>)
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557c:	f043 0201 	orr.w	r2, r3, #1
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm state: Enable Alarm */
    SET_BIT(RTC->CR, RTC_CR_ALRAE);
 8005584:	4b21      	ldr	r3, [pc, #132]	; (800560c <HAL_RTC_SetAlarm+0x200>)
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	4a20      	ldr	r2, [pc, #128]	; (800560c <HAL_RTC_SetAlarm+0x200>)
 800558a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800558e:	6193      	str	r3, [r2, #24]
 8005590:	e02b      	b.n	80055ea <HAL_RTC_SetAlarm+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    /* In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRBE | RTC_CR_ALRBIE));
 8005592:	4b1e      	ldr	r3, [pc, #120]	; (800560c <HAL_RTC_SetAlarm+0x200>)
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	4a1d      	ldr	r2, [pc, #116]	; (800560c <HAL_RTC_SetAlarm+0x200>)
 8005598:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800559c:	6193      	str	r3, [r2, #24]

    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800559e:	4b1b      	ldr	r3, [pc, #108]	; (800560c <HAL_RTC_SetAlarm+0x200>)
 80055a0:	2202      	movs	r2, #2
 80055a2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055aa:	d107      	bne.n	80055bc <HAL_RTC_SetAlarm+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	699a      	ldr	r2, [r3, #24]
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	69db      	ldr	r3, [r3, #28]
 80055b4:	4915      	ldr	r1, [pc, #84]	; (800560c <HAL_RTC_SetAlarm+0x200>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80055ba:	e006      	b.n	80055ca <HAL_RTC_SetAlarm+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80055bc:	4a13      	ldr	r2, [pc, #76]	; (800560c <HAL_RTC_SetAlarm+0x200>)
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80055c2:	4a12      	ldr	r2, [pc, #72]	; (800560c <HAL_RTC_SetAlarm+0x200>)
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80055ca:	4a10      	ldr	r2, [pc, #64]	; (800560c <HAL_RTC_SetAlarm+0x200>)
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d6:	f043 0202 	orr.w	r2, r3, #2
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm state: Enable Alarm */
    SET_BIT(RTC->CR, RTC_CR_ALRBE);
 80055de:	4b0b      	ldr	r3, [pc, #44]	; (800560c <HAL_RTC_SetAlarm+0x200>)
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	4a0a      	ldr	r2, [pc, #40]	; (800560c <HAL_RTC_SetAlarm+0x200>)
 80055e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055e8:	6193      	str	r3, [r2, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055ea:	4b08      	ldr	r3, [pc, #32]	; (800560c <HAL_RTC_SetAlarm+0x200>)
 80055ec:	22ff      	movs	r2, #255	; 0xff
 80055ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	371c      	adds	r7, #28
 8005606:	46bd      	mov	sp, r7
 8005608:	bd90      	pop	{r4, r7, pc}
 800560a:	bf00      	nop
 800560c:	40002800 	.word	0x40002800

08005610 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8005618:	4b0f      	ldr	r3, [pc, #60]	; (8005658 <HAL_RTC_WaitForSynchro+0x48>)
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	4a0e      	ldr	r2, [pc, #56]	; (8005658 <HAL_RTC_WaitForSynchro+0x48>)
 800561e:	f023 0320 	bic.w	r3, r3, #32
 8005622:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8005624:	f7fc fd1a 	bl	800205c <HAL_GetTick>
 8005628:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800562a:	e009      	b.n	8005640 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800562c:	f7fc fd16 	bl	800205c <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800563a:	d901      	bls.n	8005640 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e006      	b.n	800564e <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005640:	4b05      	ldr	r3, [pc, #20]	; (8005658 <HAL_RTC_WaitForSynchro+0x48>)
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	f003 0320 	and.w	r3, r3, #32
 8005648:	2b00      	cmp	r3, #0
 800564a:	d0ef      	beq.n	800562c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	40002800 	.word	0x40002800

0800565c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005664:	2300      	movs	r3, #0
 8005666:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8005668:	4b15      	ldr	r3, [pc, #84]	; (80056c0 <RTC_EnterInitMode+0x64>)
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005670:	2b00      	cmp	r3, #0
 8005672:	d120      	bne.n	80056b6 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005674:	4b12      	ldr	r3, [pc, #72]	; (80056c0 <RTC_EnterInitMode+0x64>)
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	4a11      	ldr	r2, [pc, #68]	; (80056c0 <RTC_EnterInitMode+0x64>)
 800567a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800567e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8005680:	f7fc fcec 	bl	800205c <HAL_GetTick>
 8005684:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005686:	e00d      	b.n	80056a4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005688:	f7fc fce8 	bl	800205c <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005696:	d905      	bls.n	80056a4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2203      	movs	r2, #3
 80056a0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80056a4:	4b06      	ldr	r3, [pc, #24]	; (80056c0 <RTC_EnterInitMode+0x64>)
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d102      	bne.n	80056b6 <RTC_EnterInitMode+0x5a>
 80056b0:	7bfb      	ldrb	r3, [r7, #15]
 80056b2:	2b03      	cmp	r3, #3
 80056b4:	d1e8      	bne.n	8005688 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80056b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3710      	adds	r7, #16
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	40002800 	.word	0x40002800

080056c4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056cc:	2300      	movs	r3, #0
 80056ce:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80056d0:	4b1a      	ldr	r3, [pc, #104]	; (800573c <RTC_ExitInitMode+0x78>)
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	4a19      	ldr	r2, [pc, #100]	; (800573c <RTC_ExitInitMode+0x78>)
 80056d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056da:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80056dc:	4b17      	ldr	r3, [pc, #92]	; (800573c <RTC_ExitInitMode+0x78>)
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	f003 0320 	and.w	r3, r3, #32
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10c      	bne.n	8005702 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7ff ff91 	bl	8005610 <HAL_RTC_WaitForSynchro>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d01e      	beq.n	8005732 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2203      	movs	r2, #3
 80056f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	73fb      	strb	r3, [r7, #15]
 8005700:	e017      	b.n	8005732 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005702:	4b0e      	ldr	r3, [pc, #56]	; (800573c <RTC_ExitInitMode+0x78>)
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	4a0d      	ldr	r2, [pc, #52]	; (800573c <RTC_ExitInitMode+0x78>)
 8005708:	f023 0320 	bic.w	r3, r3, #32
 800570c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f7ff ff7e 	bl	8005610 <HAL_RTC_WaitForSynchro>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d005      	beq.n	8005726 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2203      	movs	r2, #3
 800571e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005726:	4b05      	ldr	r3, [pc, #20]	; (800573c <RTC_ExitInitMode+0x78>)
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	4a04      	ldr	r2, [pc, #16]	; (800573c <RTC_ExitInitMode+0x78>)
 800572c:	f043 0320 	orr.w	r3, r3, #32
 8005730:	6193      	str	r3, [r2, #24]
  }

  return status;
 8005732:	7bfb      	ldrb	r3, [r7, #15]
}
 8005734:	4618      	mov	r0, r3
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	40002800 	.word	0x40002800

08005740 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	4603      	mov	r3, r0
 8005748:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800574a:	2300      	movs	r3, #0
 800574c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800574e:	79fb      	ldrb	r3, [r7, #7]
 8005750:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8005752:	e005      	b.n	8005760 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	3301      	adds	r3, #1
 8005758:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800575a:	7afb      	ldrb	r3, [r7, #11]
 800575c:	3b0a      	subs	r3, #10
 800575e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8005760:	7afb      	ldrb	r3, [r7, #11]
 8005762:	2b09      	cmp	r3, #9
 8005764:	d8f6      	bhi.n	8005754 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	b2db      	uxtb	r3, r3
 800576a:	011b      	lsls	r3, r3, #4
 800576c:	b2da      	uxtb	r2, r3
 800576e:	7afb      	ldrb	r3, [r7, #11]
 8005770:	4313      	orrs	r3, r2
 8005772:	b2db      	uxtb	r3, r3
}
 8005774:	4618      	mov	r0, r3
 8005776:	3714      	adds	r7, #20
 8005778:	46bd      	mov	sp, r7
 800577a:	bc80      	pop	{r7}
 800577c:	4770      	bx	lr

0800577e <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800577e:	b480      	push	{r7}
 8005780:	b085      	sub	sp, #20
 8005782:	af00      	add	r7, sp, #0
 8005784:	4603      	mov	r3, r0
 8005786:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8005788:	79fb      	ldrb	r3, [r7, #7]
 800578a:	091b      	lsrs	r3, r3, #4
 800578c:	b2db      	uxtb	r3, r3
 800578e:	461a      	mov	r2, r3
 8005790:	4613      	mov	r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4413      	add	r3, r2
 8005796:	005b      	lsls	r3, r3, #1
 8005798:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	b2da      	uxtb	r2, r3
 800579e:	79fb      	ldrb	r3, [r7, #7]
 80057a0:	f003 030f 	and.w	r3, r3, #15
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	4413      	add	r3, r2
 80057a8:	b2db      	uxtb	r3, r3
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bc80      	pop	{r7}
 80057b2:	4770      	bx	lr

080057b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e0c6      	b.n	8005954 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d108      	bne.n	80057e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057d6:	d009      	beq.n	80057ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	61da      	str	r2, [r3, #28]
 80057de:	e005      	b.n	80057ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d106      	bne.n	8005806 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f7fc f9fb 	bl	8001bfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2202      	movs	r2, #2
 800580a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800581c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005826:	d902      	bls.n	800582e <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005828:	2300      	movs	r3, #0
 800582a:	60fb      	str	r3, [r7, #12]
 800582c:	e002      	b.n	8005834 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800582e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005832:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800583c:	d007      	beq.n	800584e <HAL_SPI_Init+0x9a>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005846:	d002      	beq.n	800584e <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800585e:	431a      	orrs	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	f003 0302 	and.w	r3, r3, #2
 8005868:	431a      	orrs	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	431a      	orrs	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800587c:	431a      	orrs	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	69db      	ldr	r3, [r3, #28]
 8005882:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005886:	431a      	orrs	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a1b      	ldr	r3, [r3, #32]
 800588c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005890:	ea42 0103 	orr.w	r1, r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005898:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	430a      	orrs	r2, r1
 80058a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058ac:	d11b      	bne.n	80058e6 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10b      	bne.n	80058ce <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058be:	d903      	bls.n	80058c8 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2202      	movs	r2, #2
 80058c4:	631a      	str	r2, [r3, #48]	; 0x30
 80058c6:	e002      	b.n	80058ce <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d107      	bne.n	80058e6 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058e4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	0c1b      	lsrs	r3, r3, #16
 80058ec:	f003 0204 	and.w	r2, r3, #4
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f4:	f003 0310 	and.w	r3, r3, #16
 80058f8:	431a      	orrs	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058fe:	f003 0308 	and.w	r3, r3, #8
 8005902:	431a      	orrs	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800590c:	ea42 0103 	orr.w	r1, r2, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	430a      	orrs	r2, r1
 800591c:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005922:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005926:	d105      	bne.n	8005934 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	b292      	uxth	r2, r2
 8005932:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	69da      	ldr	r2, [r3, #28]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005942:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e049      	b.n	8005a02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d106      	bne.n	8005988 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f841 	bl	8005a0a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2202      	movs	r2, #2
 800598c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	3304      	adds	r3, #4
 8005998:	4619      	mov	r1, r3
 800599a:	4610      	mov	r0, r2
 800599c:	f000 f9ce 	bl	8005d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3708      	adds	r7, #8
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b083      	sub	sp, #12
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005a12:	bf00      	nop
 8005a14:	370c      	adds	r7, #12
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bc80      	pop	{r7}
 8005a1a:	4770      	bx	lr

08005a1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d001      	beq.n	8005a34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e036      	b.n	8005aa2 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2202      	movs	r2, #2
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68da      	ldr	r2, [r3, #12]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f042 0201 	orr.w	r2, r2, #1
 8005a4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a16      	ldr	r2, [pc, #88]	; (8005aac <HAL_TIM_Base_Start_IT+0x90>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d004      	beq.n	8005a60 <HAL_TIM_Base_Start_IT+0x44>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a5e:	d115      	bne.n	8005a8c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	689a      	ldr	r2, [r3, #8]
 8005a66:	4b12      	ldr	r3, [pc, #72]	; (8005ab0 <HAL_TIM_Base_Start_IT+0x94>)
 8005a68:	4013      	ands	r3, r2
 8005a6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2b06      	cmp	r3, #6
 8005a70:	d015      	beq.n	8005a9e <HAL_TIM_Base_Start_IT+0x82>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a78:	d011      	beq.n	8005a9e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f042 0201 	orr.w	r2, r2, #1
 8005a88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a8a:	e008      	b.n	8005a9e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f042 0201 	orr.w	r2, r2, #1
 8005a9a:	601a      	str	r2, [r3, #0]
 8005a9c:	e000      	b.n	8005aa0 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a9e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3714      	adds	r7, #20
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bc80      	pop	{r7}
 8005aaa:	4770      	bx	lr
 8005aac:	40012c00 	.word	0x40012c00
 8005ab0:	00010007 	.word	0x00010007

08005ab4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	f003 0302 	and.w	r3, r3, #2
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d122      	bne.n	8005b10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	f003 0302 	and.w	r3, r3, #2
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d11b      	bne.n	8005b10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f06f 0202 	mvn.w	r2, #2
 8005ae0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	f003 0303 	and.w	r3, r3, #3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f904 	bl	8005d04 <HAL_TIM_IC_CaptureCallback>
 8005afc:	e005      	b.n	8005b0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 f8f7 	bl	8005cf2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 f906 	bl	8005d16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	f003 0304 	and.w	r3, r3, #4
 8005b1a:	2b04      	cmp	r3, #4
 8005b1c:	d122      	bne.n	8005b64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	f003 0304 	and.w	r3, r3, #4
 8005b28:	2b04      	cmp	r3, #4
 8005b2a:	d11b      	bne.n	8005b64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f06f 0204 	mvn.w	r2, #4
 8005b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2202      	movs	r2, #2
 8005b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f8da 	bl	8005d04 <HAL_TIM_IC_CaptureCallback>
 8005b50:	e005      	b.n	8005b5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f8cd 	bl	8005cf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 f8dc 	bl	8005d16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	f003 0308 	and.w	r3, r3, #8
 8005b6e:	2b08      	cmp	r3, #8
 8005b70:	d122      	bne.n	8005bb8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	f003 0308 	and.w	r3, r3, #8
 8005b7c:	2b08      	cmp	r3, #8
 8005b7e:	d11b      	bne.n	8005bb8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f06f 0208 	mvn.w	r2, #8
 8005b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2204      	movs	r2, #4
 8005b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	f003 0303 	and.w	r3, r3, #3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f8b0 	bl	8005d04 <HAL_TIM_IC_CaptureCallback>
 8005ba4:	e005      	b.n	8005bb2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f8a3 	bl	8005cf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 f8b2 	bl	8005d16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	f003 0310 	and.w	r3, r3, #16
 8005bc2:	2b10      	cmp	r3, #16
 8005bc4:	d122      	bne.n	8005c0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f003 0310 	and.w	r3, r3, #16
 8005bd0:	2b10      	cmp	r3, #16
 8005bd2:	d11b      	bne.n	8005c0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f06f 0210 	mvn.w	r2, #16
 8005bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2208      	movs	r2, #8
 8005be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	69db      	ldr	r3, [r3, #28]
 8005bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f886 	bl	8005d04 <HAL_TIM_IC_CaptureCallback>
 8005bf8:	e005      	b.n	8005c06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 f879 	bl	8005cf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 f888 	bl	8005d16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d10e      	bne.n	8005c38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	f003 0301 	and.w	r3, r3, #1
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d107      	bne.n	8005c38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f06f 0201 	mvn.w	r2, #1
 8005c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f7fb fe18 	bl	8001868 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c42:	2b80      	cmp	r3, #128	; 0x80
 8005c44:	d10e      	bne.n	8005c64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c50:	2b80      	cmp	r3, #128	; 0x80
 8005c52:	d107      	bne.n	8005c64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f8d7 	bl	8005e12 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c72:	d10e      	bne.n	8005c92 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c7e:	2b80      	cmp	r3, #128	; 0x80
 8005c80:	d107      	bne.n	8005c92 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 f8c9 	bl	8005e24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9c:	2b40      	cmp	r3, #64	; 0x40
 8005c9e:	d10e      	bne.n	8005cbe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005caa:	2b40      	cmp	r3, #64	; 0x40
 8005cac:	d107      	bne.n	8005cbe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 f835 	bl	8005d28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	f003 0320 	and.w	r3, r3, #32
 8005cc8:	2b20      	cmp	r3, #32
 8005cca:	d10e      	bne.n	8005cea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	f003 0320 	and.w	r3, r3, #32
 8005cd6:	2b20      	cmp	r3, #32
 8005cd8:	d107      	bne.n	8005cea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f06f 0220 	mvn.w	r2, #32
 8005ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f88b 	bl	8005e00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cea:	bf00      	nop
 8005cec:	3708      	adds	r7, #8
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b083      	sub	sp, #12
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cfa:	bf00      	nop
 8005cfc:	370c      	adds	r7, #12
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bc80      	pop	{r7}
 8005d02:	4770      	bx	lr

08005d04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bc80      	pop	{r7}
 8005d14:	4770      	bx	lr

08005d16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b083      	sub	sp, #12
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d1e:	bf00      	nop
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bc80      	pop	{r7}
 8005d26:	4770      	bx	lr

08005d28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bc80      	pop	{r7}
 8005d38:	4770      	bx	lr
	...

08005d3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a29      	ldr	r2, [pc, #164]	; (8005df4 <TIM_Base_SetConfig+0xb8>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d003      	beq.n	8005d5c <TIM_Base_SetConfig+0x20>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d5a:	d108      	bne.n	8005d6e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a20      	ldr	r2, [pc, #128]	; (8005df4 <TIM_Base_SetConfig+0xb8>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d00b      	beq.n	8005d8e <TIM_Base_SetConfig+0x52>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d7c:	d007      	beq.n	8005d8e <TIM_Base_SetConfig+0x52>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a1d      	ldr	r2, [pc, #116]	; (8005df8 <TIM_Base_SetConfig+0xbc>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d003      	beq.n	8005d8e <TIM_Base_SetConfig+0x52>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a1c      	ldr	r2, [pc, #112]	; (8005dfc <TIM_Base_SetConfig+0xc0>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d108      	bne.n	8005da0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	689a      	ldr	r2, [r3, #8]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a0b      	ldr	r2, [pc, #44]	; (8005df4 <TIM_Base_SetConfig+0xb8>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d007      	beq.n	8005ddc <TIM_Base_SetConfig+0xa0>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a0a      	ldr	r2, [pc, #40]	; (8005df8 <TIM_Base_SetConfig+0xbc>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d003      	beq.n	8005ddc <TIM_Base_SetConfig+0xa0>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a09      	ldr	r2, [pc, #36]	; (8005dfc <TIM_Base_SetConfig+0xc0>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d103      	bne.n	8005de4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	691a      	ldr	r2, [r3, #16]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	615a      	str	r2, [r3, #20]
}
 8005dea:	bf00      	nop
 8005dec:	3714      	adds	r7, #20
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bc80      	pop	{r7}
 8005df2:	4770      	bx	lr
 8005df4:	40012c00 	.word	0x40012c00
 8005df8:	40014400 	.word	0x40014400
 8005dfc:	40014800 	.word	0x40014800

08005e00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bc80      	pop	{r7}
 8005e10:	4770      	bx	lr

08005e12 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e12:	b480      	push	{r7}
 8005e14:	b083      	sub	sp, #12
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e1a:	bf00      	nop
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bc80      	pop	{r7}
 8005e22:	4770      	bx	lr

08005e24 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bc80      	pop	{r7}
 8005e34:	4770      	bx	lr

08005e36 <LL_RCC_GetUSARTClockSource>:
{
 8005e36:	b480      	push	{r7}
 8005e38:	b083      	sub	sp, #12
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8005e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e42:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	401a      	ands	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	041b      	lsls	r3, r3, #16
 8005e4e:	4313      	orrs	r3, r2
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bc80      	pop	{r7}
 8005e58:	4770      	bx	lr

08005e5a <LL_RCC_GetLPUARTClockSource>:
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b083      	sub	sp, #12
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e66:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4013      	ands	r3, r2
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	370c      	adds	r7, #12
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bc80      	pop	{r7}
 8005e76:	4770      	bx	lr

08005e78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e042      	b.n	8005f10 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d106      	bne.n	8005ea2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f7fb fdfd 	bl	8001a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2224      	movs	r2, #36	; 0x24
 8005ea6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f022 0201 	bic.w	r2, r2, #1
 8005eb8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 fd5c 	bl	8006978 <UART_SetConfig>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d101      	bne.n	8005eca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e022      	b.n	8005f10 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d002      	beq.n	8005ed8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 ffc4 	bl	8006e60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	685a      	ldr	r2, [r3, #4]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ee6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	689a      	ldr	r2, [r3, #8]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ef6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f042 0201 	orr.w	r2, r2, #1
 8005f06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f001 f84a 	bl	8006fa2 <UART_CheckIdleState>
 8005f0e:	4603      	mov	r3, r0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3708      	adds	r7, #8
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e04a      	b.n	8005fc0 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d106      	bne.n	8005f42 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f7fb fdad 	bl	8001a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2224      	movs	r2, #36	; 0x24
 8005f46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f022 0201 	bic.w	r2, r2, #1
 8005f58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fd0c 	bl	8006978 <UART_SetConfig>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d101      	bne.n	8005f6a <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e02a      	b.n	8005fc0 <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d002      	beq.n	8005f78 <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 ff74 	bl	8006e60 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	685a      	ldr	r2, [r3, #4]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	689a      	ldr	r2, [r3, #8]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8005f96:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	689a      	ldr	r2, [r3, #8]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f042 0208 	orr.w	r2, r2, #8
 8005fa6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f042 0201 	orr.w	r2, r2, #1
 8005fb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 fff2 	bl	8006fa2 <UART_CheckIdleState>
 8005fbe:	4603      	mov	r3, r0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3708      	adds	r7, #8
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b08a      	sub	sp, #40	; 0x28
 8005fcc:	af02      	add	r7, sp, #8
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	603b      	str	r3, [r7, #0]
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fde:	2b20      	cmp	r3, #32
 8005fe0:	d173      	bne.n	80060ca <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d002      	beq.n	8005fee <HAL_UART_Transmit+0x26>
 8005fe8:	88fb      	ldrh	r3, [r7, #6]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e06c      	b.n	80060cc <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2221      	movs	r2, #33	; 0x21
 8005ffe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006002:	f7fc f82b 	bl	800205c <HAL_GetTick>
 8006006:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	88fa      	ldrh	r2, [r7, #6]
 800600c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	88fa      	ldrh	r2, [r7, #6]
 8006014:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006020:	d108      	bne.n	8006034 <HAL_UART_Transmit+0x6c>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d104      	bne.n	8006034 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800602a:	2300      	movs	r3, #0
 800602c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	61bb      	str	r3, [r7, #24]
 8006032:	e003      	b.n	800603c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006038:	2300      	movs	r3, #0
 800603a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800603c:	e02c      	b.n	8006098 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	2200      	movs	r2, #0
 8006046:	2180      	movs	r1, #128	; 0x80
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f000 fff8 	bl	800703e <UART_WaitOnFlagUntilTimeout>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d001      	beq.n	8006058 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e039      	b.n	80060cc <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10b      	bne.n	8006076 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	881b      	ldrh	r3, [r3, #0]
 8006062:	461a      	mov	r2, r3
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800606c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	3302      	adds	r3, #2
 8006072:	61bb      	str	r3, [r7, #24]
 8006074:	e007      	b.n	8006086 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	781a      	ldrb	r2, [r3, #0]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	3301      	adds	r3, #1
 8006084:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800608c:	b29b      	uxth	r3, r3
 800608e:	3b01      	subs	r3, #1
 8006090:	b29a      	uxth	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800609e:	b29b      	uxth	r3, r3
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1cc      	bne.n	800603e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	9300      	str	r3, [sp, #0]
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	2200      	movs	r2, #0
 80060ac:	2140      	movs	r1, #64	; 0x40
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f000 ffc5 	bl	800703e <UART_WaitOnFlagUntilTimeout>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d001      	beq.n	80060be <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e006      	b.n	80060cc <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2220      	movs	r2, #32
 80060c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80060c6:	2300      	movs	r3, #0
 80060c8:	e000      	b.n	80060cc <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 80060ca:	2302      	movs	r3, #2
  }
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3720      	adds	r7, #32
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b08a      	sub	sp, #40	; 0x28
 80060d8:	af02      	add	r7, sp, #8
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	603b      	str	r3, [r7, #0]
 80060e0:	4613      	mov	r3, r2
 80060e2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060ea:	2b20      	cmp	r3, #32
 80060ec:	f040 80b1 	bne.w	8006252 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d002      	beq.n	80060fc <HAL_UART_Receive+0x28>
 80060f6:	88fb      	ldrh	r3, [r7, #6]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d101      	bne.n	8006100 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e0a9      	b.n	8006254 <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2222      	movs	r2, #34	; 0x22
 800610c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006116:	f7fb ffa1 	bl	800205c <HAL_GetTick>
 800611a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	88fa      	ldrh	r2, [r7, #6]
 8006120:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	88fa      	ldrh	r2, [r7, #6]
 8006128:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006134:	d10e      	bne.n	8006154 <HAL_UART_Receive+0x80>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d105      	bne.n	800614a <HAL_UART_Receive+0x76>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006144:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006148:	e02d      	b.n	80061a6 <HAL_UART_Receive+0xd2>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	22ff      	movs	r2, #255	; 0xff
 800614e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006152:	e028      	b.n	80061a6 <HAL_UART_Receive+0xd2>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10d      	bne.n	8006178 <HAL_UART_Receive+0xa4>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d104      	bne.n	800616e <HAL_UART_Receive+0x9a>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	22ff      	movs	r2, #255	; 0xff
 8006168:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800616c:	e01b      	b.n	80061a6 <HAL_UART_Receive+0xd2>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	227f      	movs	r2, #127	; 0x7f
 8006172:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006176:	e016      	b.n	80061a6 <HAL_UART_Receive+0xd2>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006180:	d10d      	bne.n	800619e <HAL_UART_Receive+0xca>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d104      	bne.n	8006194 <HAL_UART_Receive+0xc0>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	227f      	movs	r2, #127	; 0x7f
 800618e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006192:	e008      	b.n	80061a6 <HAL_UART_Receive+0xd2>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	223f      	movs	r2, #63	; 0x3f
 8006198:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800619c:	e003      	b.n	80061a6 <HAL_UART_Receive+0xd2>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80061ac:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b6:	d108      	bne.n	80061ca <HAL_UART_Receive+0xf6>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d104      	bne.n	80061ca <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80061c0:	2300      	movs	r3, #0
 80061c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	61bb      	str	r3, [r7, #24]
 80061c8:	e003      	b.n	80061d2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061ce:	2300      	movs	r3, #0
 80061d0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80061d2:	e032      	b.n	800623a <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	9300      	str	r3, [sp, #0]
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	2200      	movs	r2, #0
 80061dc:	2120      	movs	r1, #32
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f000 ff2d 	bl	800703e <UART_WaitOnFlagUntilTimeout>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d001      	beq.n	80061ee <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e032      	b.n	8006254 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10c      	bne.n	800620e <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	8a7b      	ldrh	r3, [r7, #18]
 80061fe:	4013      	ands	r3, r2
 8006200:	b29a      	uxth	r2, r3
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	3302      	adds	r3, #2
 800620a:	61bb      	str	r3, [r7, #24]
 800620c:	e00c      	b.n	8006228 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006214:	b2da      	uxtb	r2, r3
 8006216:	8a7b      	ldrh	r3, [r7, #18]
 8006218:	b2db      	uxtb	r3, r3
 800621a:	4013      	ands	r3, r2
 800621c:	b2da      	uxtb	r2, r3
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	3301      	adds	r3, #1
 8006226:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800622e:	b29b      	uxth	r3, r3
 8006230:	3b01      	subs	r3, #1
 8006232:	b29a      	uxth	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006240:	b29b      	uxth	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d1c6      	bne.n	80061d4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2220      	movs	r2, #32
 800624a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800624e:	2300      	movs	r3, #0
 8006250:	e000      	b.n	8006254 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8006252:	2302      	movs	r3, #2
  }
}
 8006254:	4618      	mov	r0, r3
 8006256:	3720      	adds	r7, #32
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b08a      	sub	sp, #40	; 0x28
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	4613      	mov	r3, r2
 8006268:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006270:	2b20      	cmp	r3, #32
 8006272:	d137      	bne.n	80062e4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d002      	beq.n	8006280 <HAL_UART_Receive_IT+0x24>
 800627a:	88fb      	ldrh	r3, [r7, #6]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d101      	bne.n	8006284 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e030      	b.n	80062e6 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a18      	ldr	r2, [pc, #96]	; (80062f0 <HAL_UART_Receive_IT+0x94>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d01f      	beq.n	80062d4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d018      	beq.n	80062d4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	e853 3f00 	ldrex	r3, [r3]
 80062ae:	613b      	str	r3, [r7, #16]
   return(result);
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80062b6:	627b      	str	r3, [r7, #36]	; 0x24
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	461a      	mov	r2, r3
 80062be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c0:	623b      	str	r3, [r7, #32]
 80062c2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c4:	69f9      	ldr	r1, [r7, #28]
 80062c6:	6a3a      	ldr	r2, [r7, #32]
 80062c8:	e841 2300 	strex	r3, r2, [r1]
 80062cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1e6      	bne.n	80062a2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80062d4:	88fb      	ldrh	r3, [r7, #6]
 80062d6:	461a      	mov	r2, r3
 80062d8:	68b9      	ldr	r1, [r7, #8]
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f000 ff78 	bl	80071d0 <UART_Start_Receive_IT>
 80062e0:	4603      	mov	r3, r0
 80062e2:	e000      	b.n	80062e6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80062e4:	2302      	movs	r3, #2
  }
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3728      	adds	r7, #40	; 0x28
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	40008000 	.word	0x40008000

080062f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b0ba      	sub	sp, #232	; 0xe8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	69db      	ldr	r3, [r3, #28]
 8006302:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800631a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800631e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006322:	4013      	ands	r3, r2
 8006324:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006328:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800632c:	2b00      	cmp	r3, #0
 800632e:	d11b      	bne.n	8006368 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006334:	f003 0320 	and.w	r3, r3, #32
 8006338:	2b00      	cmp	r3, #0
 800633a:	d015      	beq.n	8006368 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800633c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006340:	f003 0320 	and.w	r3, r3, #32
 8006344:	2b00      	cmp	r3, #0
 8006346:	d105      	bne.n	8006354 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006348:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800634c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d009      	beq.n	8006368 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006358:	2b00      	cmp	r3, #0
 800635a:	f000 82e3 	beq.w	8006924 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	4798      	blx	r3
      }
      return;
 8006366:	e2dd      	b.n	8006924 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006368:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800636c:	2b00      	cmp	r3, #0
 800636e:	f000 8123 	beq.w	80065b8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006372:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006376:	4b8d      	ldr	r3, [pc, #564]	; (80065ac <HAL_UART_IRQHandler+0x2b8>)
 8006378:	4013      	ands	r3, r2
 800637a:	2b00      	cmp	r3, #0
 800637c:	d106      	bne.n	800638c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800637e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006382:	4b8b      	ldr	r3, [pc, #556]	; (80065b0 <HAL_UART_IRQHandler+0x2bc>)
 8006384:	4013      	ands	r3, r2
 8006386:	2b00      	cmp	r3, #0
 8006388:	f000 8116 	beq.w	80065b8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800638c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006390:	f003 0301 	and.w	r3, r3, #1
 8006394:	2b00      	cmp	r3, #0
 8006396:	d011      	beq.n	80063bc <HAL_UART_IRQHandler+0xc8>
 8006398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800639c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00b      	beq.n	80063bc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2201      	movs	r2, #1
 80063aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063b2:	f043 0201 	orr.w	r2, r3, #1
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063c0:	f003 0302 	and.w	r3, r3, #2
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d011      	beq.n	80063ec <HAL_UART_IRQHandler+0xf8>
 80063c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063cc:	f003 0301 	and.w	r3, r3, #1
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00b      	beq.n	80063ec <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2202      	movs	r2, #2
 80063da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e2:	f043 0204 	orr.w	r2, r3, #4
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063f0:	f003 0304 	and.w	r3, r3, #4
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d011      	beq.n	800641c <HAL_UART_IRQHandler+0x128>
 80063f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063fc:	f003 0301 	and.w	r3, r3, #1
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00b      	beq.n	800641c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2204      	movs	r2, #4
 800640a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006412:	f043 0202 	orr.w	r2, r3, #2
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800641c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006420:	f003 0308 	and.w	r3, r3, #8
 8006424:	2b00      	cmp	r3, #0
 8006426:	d017      	beq.n	8006458 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800642c:	f003 0320 	and.w	r3, r3, #32
 8006430:	2b00      	cmp	r3, #0
 8006432:	d105      	bne.n	8006440 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006434:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006438:	4b5c      	ldr	r3, [pc, #368]	; (80065ac <HAL_UART_IRQHandler+0x2b8>)
 800643a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00b      	beq.n	8006458 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2208      	movs	r2, #8
 8006446:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800644e:	f043 0208 	orr.w	r2, r3, #8
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800645c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006460:	2b00      	cmp	r3, #0
 8006462:	d012      	beq.n	800648a <HAL_UART_IRQHandler+0x196>
 8006464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006468:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00c      	beq.n	800648a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006478:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006480:	f043 0220 	orr.w	r2, r3, #32
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006490:	2b00      	cmp	r3, #0
 8006492:	f000 8249 	beq.w	8006928 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800649a:	f003 0320 	and.w	r3, r3, #32
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d013      	beq.n	80064ca <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80064a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064a6:	f003 0320 	and.w	r3, r3, #32
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d105      	bne.n	80064ba <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80064ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d007      	beq.n	80064ca <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d003      	beq.n	80064ca <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064de:	2b40      	cmp	r3, #64	; 0x40
 80064e0:	d005      	beq.n	80064ee <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80064e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d054      	beq.n	8006598 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 ff8e 	bl	8007410 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064fe:	2b40      	cmp	r3, #64	; 0x40
 8006500:	d146      	bne.n	8006590 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	3308      	adds	r3, #8
 8006508:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006510:	e853 3f00 	ldrex	r3, [r3]
 8006514:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006518:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800651c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006520:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	3308      	adds	r3, #8
 800652a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800652e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006532:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006536:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800653a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800653e:	e841 2300 	strex	r3, r2, [r1]
 8006542:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006546:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1d9      	bne.n	8006502 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006554:	2b00      	cmp	r3, #0
 8006556:	d017      	beq.n	8006588 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800655e:	4a15      	ldr	r2, [pc, #84]	; (80065b4 <HAL_UART_IRQHandler+0x2c0>)
 8006560:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006568:	4618      	mov	r0, r3
 800656a:	f7fc feda 	bl	8003322 <HAL_DMA_Abort_IT>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d019      	beq.n	80065a8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800657a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006582:	4610      	mov	r0, r2
 8006584:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006586:	e00f      	b.n	80065a8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 f9e0 	bl	800694e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800658e:	e00b      	b.n	80065a8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 f9dc 	bl	800694e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006596:	e007      	b.n	80065a8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 f9d8 	bl	800694e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80065a6:	e1bf      	b.n	8006928 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065a8:	bf00      	nop
    return;
 80065aa:	e1bd      	b.n	8006928 <HAL_UART_IRQHandler+0x634>
 80065ac:	10000001 	.word	0x10000001
 80065b0:	04000120 	.word	0x04000120
 80065b4:	080074db 	.word	0x080074db

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065bc:	2b01      	cmp	r3, #1
 80065be:	f040 8153 	bne.w	8006868 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80065c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065c6:	f003 0310 	and.w	r3, r3, #16
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f000 814c 	beq.w	8006868 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80065d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065d4:	f003 0310 	and.w	r3, r3, #16
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f000 8145 	beq.w	8006868 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2210      	movs	r2, #16
 80065e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f0:	2b40      	cmp	r3, #64	; 0x40
 80065f2:	f040 80bb 	bne.w	800676c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006604:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006608:	2b00      	cmp	r3, #0
 800660a:	f000 818f 	beq.w	800692c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006614:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006618:	429a      	cmp	r2, r3
 800661a:	f080 8187 	bcs.w	800692c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006624:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 0320 	and.w	r3, r3, #32
 8006636:	2b00      	cmp	r3, #0
 8006638:	f040 8087 	bne.w	800674a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006644:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006648:	e853 3f00 	ldrex	r3, [r3]
 800664c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006650:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006654:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006658:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	461a      	mov	r2, r3
 8006662:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006666:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800666a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006672:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006676:	e841 2300 	strex	r3, r2, [r1]
 800667a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800667e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1da      	bne.n	800663c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	3308      	adds	r3, #8
 800668c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006690:	e853 3f00 	ldrex	r3, [r3]
 8006694:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006696:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006698:	f023 0301 	bic.w	r3, r3, #1
 800669c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	3308      	adds	r3, #8
 80066a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80066aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80066ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80066b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80066b6:	e841 2300 	strex	r3, r2, [r1]
 80066ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80066bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1e1      	bne.n	8006686 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	3308      	adds	r3, #8
 80066c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066cc:	e853 3f00 	ldrex	r3, [r3]
 80066d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80066d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	3308      	adds	r3, #8
 80066e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80066e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80066e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80066ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80066ee:	e841 2300 	strex	r3, r2, [r1]
 80066f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80066f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1e3      	bne.n	80066c2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2220      	movs	r2, #32
 80066fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006710:	e853 3f00 	ldrex	r3, [r3]
 8006714:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006718:	f023 0310 	bic.w	r3, r3, #16
 800671c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	461a      	mov	r2, r3
 8006726:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800672a:	65bb      	str	r3, [r7, #88]	; 0x58
 800672c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006730:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006732:	e841 2300 	strex	r3, r2, [r1]
 8006736:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1e4      	bne.n	8006708 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006744:	4618      	mov	r0, r3
 8006746:	f7fc fd8e 	bl	8003266 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2202      	movs	r2, #2
 800674e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800675c:	b29b      	uxth	r3, r3
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	b29b      	uxth	r3, r3
 8006762:	4619      	mov	r1, r3
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 f8fb 	bl	8006960 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800676a:	e0df      	b.n	800692c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006778:	b29b      	uxth	r3, r3
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006786:	b29b      	uxth	r3, r3
 8006788:	2b00      	cmp	r3, #0
 800678a:	f000 80d1 	beq.w	8006930 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800678e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006792:	2b00      	cmp	r3, #0
 8006794:	f000 80cc 	beq.w	8006930 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a0:	e853 3f00 	ldrex	r3, [r3]
 80067a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80067a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	461a      	mov	r2, r3
 80067b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80067ba:	647b      	str	r3, [r7, #68]	; 0x44
 80067bc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80067c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067c2:	e841 2300 	strex	r3, r2, [r1]
 80067c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80067c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1e4      	bne.n	8006798 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3308      	adds	r3, #8
 80067d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d8:	e853 3f00 	ldrex	r3, [r3]
 80067dc:	623b      	str	r3, [r7, #32]
   return(result);
 80067de:	6a3b      	ldr	r3, [r7, #32]
 80067e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067e4:	f023 0301 	bic.w	r3, r3, #1
 80067e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	3308      	adds	r3, #8
 80067f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80067f6:	633a      	str	r2, [r7, #48]	; 0x30
 80067f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067fe:	e841 2300 	strex	r3, r2, [r1]
 8006802:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1e1      	bne.n	80067ce <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2220      	movs	r2, #32
 800680e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	e853 3f00 	ldrex	r3, [r3]
 800682a:	60fb      	str	r3, [r7, #12]
   return(result);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f023 0310 	bic.w	r3, r3, #16
 8006832:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	461a      	mov	r2, r3
 800683c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006840:	61fb      	str	r3, [r7, #28]
 8006842:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006844:	69b9      	ldr	r1, [r7, #24]
 8006846:	69fa      	ldr	r2, [r7, #28]
 8006848:	e841 2300 	strex	r3, r2, [r1]
 800684c:	617b      	str	r3, [r7, #20]
   return(result);
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d1e4      	bne.n	800681e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2202      	movs	r2, #2
 8006858:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800685a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800685e:	4619      	mov	r1, r3
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 f87d 	bl	8006960 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006866:	e063      	b.n	8006930 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800686c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00e      	beq.n	8006892 <HAL_UART_IRQHandler+0x59e>
 8006874:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006878:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d008      	beq.n	8006892 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006888:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f001 fb82 	bl	8007f94 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006890:	e051      	b.n	8006936 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800689a:	2b00      	cmp	r3, #0
 800689c:	d014      	beq.n	80068c8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800689e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d105      	bne.n	80068b6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80068aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d008      	beq.n	80068c8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d03a      	beq.n	8006934 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	4798      	blx	r3
    }
    return;
 80068c6:	e035      	b.n	8006934 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80068c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d009      	beq.n	80068e8 <HAL_UART_IRQHandler+0x5f4>
 80068d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d003      	beq.n	80068e8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 fe10 	bl	8007506 <UART_EndTransmit_IT>
    return;
 80068e6:	e026      	b.n	8006936 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80068e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d009      	beq.n	8006908 <HAL_UART_IRQHandler+0x614>
 80068f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d003      	beq.n	8006908 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f001 fb59 	bl	8007fb8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006906:	e016      	b.n	8006936 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800690c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006910:	2b00      	cmp	r3, #0
 8006912:	d010      	beq.n	8006936 <HAL_UART_IRQHandler+0x642>
 8006914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006918:	2b00      	cmp	r3, #0
 800691a:	da0c      	bge.n	8006936 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f001 fb42 	bl	8007fa6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006922:	e008      	b.n	8006936 <HAL_UART_IRQHandler+0x642>
      return;
 8006924:	bf00      	nop
 8006926:	e006      	b.n	8006936 <HAL_UART_IRQHandler+0x642>
    return;
 8006928:	bf00      	nop
 800692a:	e004      	b.n	8006936 <HAL_UART_IRQHandler+0x642>
      return;
 800692c:	bf00      	nop
 800692e:	e002      	b.n	8006936 <HAL_UART_IRQHandler+0x642>
      return;
 8006930:	bf00      	nop
 8006932:	e000      	b.n	8006936 <HAL_UART_IRQHandler+0x642>
    return;
 8006934:	bf00      	nop
  }
}
 8006936:	37e8      	adds	r7, #232	; 0xe8
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006944:	bf00      	nop
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	bc80      	pop	{r7}
 800694c:	4770      	bx	lr

0800694e <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800694e:	b480      	push	{r7}
 8006950:	b083      	sub	sp, #12
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006956:	bf00      	nop
 8006958:	370c      	adds	r7, #12
 800695a:	46bd      	mov	sp, r7
 800695c:	bc80      	pop	{r7}
 800695e:	4770      	bx	lr

08006960 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	460b      	mov	r3, r1
 800696a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	bc80      	pop	{r7}
 8006974:	4770      	bx	lr
	...

08006978 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800697c:	b08c      	sub	sp, #48	; 0x30
 800697e:	af00      	add	r7, sp, #0
 8006980:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006982:	2300      	movs	r3, #0
 8006984:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	689a      	ldr	r2, [r3, #8]
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	431a      	orrs	r2, r3
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	431a      	orrs	r2, r3
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	69db      	ldr	r3, [r3, #28]
 800699c:	4313      	orrs	r3, r2
 800699e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	4b94      	ldr	r3, [pc, #592]	; (8006bf8 <UART_SetConfig+0x280>)
 80069a8:	4013      	ands	r3, r2
 80069aa:	697a      	ldr	r2, [r7, #20]
 80069ac:	6812      	ldr	r2, [r2, #0]
 80069ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069b0:	430b      	orrs	r3, r1
 80069b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	68da      	ldr	r2, [r3, #12]
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	430a      	orrs	r2, r1
 80069c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a89      	ldr	r2, [pc, #548]	; (8006bfc <UART_SetConfig+0x284>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d004      	beq.n	80069e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069e0:	4313      	orrs	r3, r2
 80069e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80069ee:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	6812      	ldr	r2, [r2, #0]
 80069f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069f8:	430b      	orrs	r3, r1
 80069fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a02:	f023 010f 	bic.w	r1, r3, #15
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a7a      	ldr	r2, [pc, #488]	; (8006c00 <UART_SetConfig+0x288>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d127      	bne.n	8006a6c <UART_SetConfig+0xf4>
 8006a1c:	2003      	movs	r0, #3
 8006a1e:	f7ff fa0a 	bl	8005e36 <LL_RCC_GetUSARTClockSource>
 8006a22:	4603      	mov	r3, r0
 8006a24:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8006a28:	2b03      	cmp	r3, #3
 8006a2a:	d81b      	bhi.n	8006a64 <UART_SetConfig+0xec>
 8006a2c:	a201      	add	r2, pc, #4	; (adr r2, 8006a34 <UART_SetConfig+0xbc>)
 8006a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a32:	bf00      	nop
 8006a34:	08006a45 	.word	0x08006a45
 8006a38:	08006a55 	.word	0x08006a55
 8006a3c:	08006a4d 	.word	0x08006a4d
 8006a40:	08006a5d 	.word	0x08006a5d
 8006a44:	2301      	movs	r3, #1
 8006a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a4a:	e080      	b.n	8006b4e <UART_SetConfig+0x1d6>
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a52:	e07c      	b.n	8006b4e <UART_SetConfig+0x1d6>
 8006a54:	2304      	movs	r3, #4
 8006a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a5a:	e078      	b.n	8006b4e <UART_SetConfig+0x1d6>
 8006a5c:	2308      	movs	r3, #8
 8006a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a62:	e074      	b.n	8006b4e <UART_SetConfig+0x1d6>
 8006a64:	2310      	movs	r3, #16
 8006a66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a6a:	e070      	b.n	8006b4e <UART_SetConfig+0x1d6>
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a64      	ldr	r2, [pc, #400]	; (8006c04 <UART_SetConfig+0x28c>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d138      	bne.n	8006ae8 <UART_SetConfig+0x170>
 8006a76:	200c      	movs	r0, #12
 8006a78:	f7ff f9dd 	bl	8005e36 <LL_RCC_GetUSARTClockSource>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8006a82:	2b0c      	cmp	r3, #12
 8006a84:	d82c      	bhi.n	8006ae0 <UART_SetConfig+0x168>
 8006a86:	a201      	add	r2, pc, #4	; (adr r2, 8006a8c <UART_SetConfig+0x114>)
 8006a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8c:	08006ac1 	.word	0x08006ac1
 8006a90:	08006ae1 	.word	0x08006ae1
 8006a94:	08006ae1 	.word	0x08006ae1
 8006a98:	08006ae1 	.word	0x08006ae1
 8006a9c:	08006ad1 	.word	0x08006ad1
 8006aa0:	08006ae1 	.word	0x08006ae1
 8006aa4:	08006ae1 	.word	0x08006ae1
 8006aa8:	08006ae1 	.word	0x08006ae1
 8006aac:	08006ac9 	.word	0x08006ac9
 8006ab0:	08006ae1 	.word	0x08006ae1
 8006ab4:	08006ae1 	.word	0x08006ae1
 8006ab8:	08006ae1 	.word	0x08006ae1
 8006abc:	08006ad9 	.word	0x08006ad9
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ac6:	e042      	b.n	8006b4e <UART_SetConfig+0x1d6>
 8006ac8:	2302      	movs	r3, #2
 8006aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ace:	e03e      	b.n	8006b4e <UART_SetConfig+0x1d6>
 8006ad0:	2304      	movs	r3, #4
 8006ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ad6:	e03a      	b.n	8006b4e <UART_SetConfig+0x1d6>
 8006ad8:	2308      	movs	r3, #8
 8006ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ade:	e036      	b.n	8006b4e <UART_SetConfig+0x1d6>
 8006ae0:	2310      	movs	r3, #16
 8006ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ae6:	e032      	b.n	8006b4e <UART_SetConfig+0x1d6>
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a43      	ldr	r2, [pc, #268]	; (8006bfc <UART_SetConfig+0x284>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d12a      	bne.n	8006b48 <UART_SetConfig+0x1d0>
 8006af2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8006af6:	f7ff f9b0 	bl	8005e5a <LL_RCC_GetLPUARTClockSource>
 8006afa:	4603      	mov	r3, r0
 8006afc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b00:	d01a      	beq.n	8006b38 <UART_SetConfig+0x1c0>
 8006b02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b06:	d81b      	bhi.n	8006b40 <UART_SetConfig+0x1c8>
 8006b08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b0c:	d00c      	beq.n	8006b28 <UART_SetConfig+0x1b0>
 8006b0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b12:	d815      	bhi.n	8006b40 <UART_SetConfig+0x1c8>
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d003      	beq.n	8006b20 <UART_SetConfig+0x1a8>
 8006b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b1c:	d008      	beq.n	8006b30 <UART_SetConfig+0x1b8>
 8006b1e:	e00f      	b.n	8006b40 <UART_SetConfig+0x1c8>
 8006b20:	2300      	movs	r3, #0
 8006b22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b26:	e012      	b.n	8006b4e <UART_SetConfig+0x1d6>
 8006b28:	2302      	movs	r3, #2
 8006b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b2e:	e00e      	b.n	8006b4e <UART_SetConfig+0x1d6>
 8006b30:	2304      	movs	r3, #4
 8006b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b36:	e00a      	b.n	8006b4e <UART_SetConfig+0x1d6>
 8006b38:	2308      	movs	r3, #8
 8006b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b3e:	e006      	b.n	8006b4e <UART_SetConfig+0x1d6>
 8006b40:	2310      	movs	r3, #16
 8006b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b46:	e002      	b.n	8006b4e <UART_SetConfig+0x1d6>
 8006b48:	2310      	movs	r3, #16
 8006b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a2a      	ldr	r2, [pc, #168]	; (8006bfc <UART_SetConfig+0x284>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	f040 80a4 	bne.w	8006ca2 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006b5e:	2b08      	cmp	r3, #8
 8006b60:	d823      	bhi.n	8006baa <UART_SetConfig+0x232>
 8006b62:	a201      	add	r2, pc, #4	; (adr r2, 8006b68 <UART_SetConfig+0x1f0>)
 8006b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b68:	08006b8d 	.word	0x08006b8d
 8006b6c:	08006bab 	.word	0x08006bab
 8006b70:	08006b95 	.word	0x08006b95
 8006b74:	08006bab 	.word	0x08006bab
 8006b78:	08006b9b 	.word	0x08006b9b
 8006b7c:	08006bab 	.word	0x08006bab
 8006b80:	08006bab 	.word	0x08006bab
 8006b84:	08006bab 	.word	0x08006bab
 8006b88:	08006ba3 	.word	0x08006ba3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b8c:	f7fd fec8 	bl	8004920 <HAL_RCC_GetPCLK1Freq>
 8006b90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b92:	e010      	b.n	8006bb6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b94:	4b1c      	ldr	r3, [pc, #112]	; (8006c08 <UART_SetConfig+0x290>)
 8006b96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006b98:	e00d      	b.n	8006bb6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b9a:	f7fd fe0d 	bl	80047b8 <HAL_RCC_GetSysClockFreq>
 8006b9e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ba0:	e009      	b.n	8006bb6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ba2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ba6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ba8:	e005      	b.n	8006bb6 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8006baa:	2300      	movs	r3, #0
 8006bac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006bb4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f000 8137 	beq.w	8006e2c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc2:	4a12      	ldr	r2, [pc, #72]	; (8006c0c <UART_SetConfig+0x294>)
 8006bc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bc8:	461a      	mov	r2, r3
 8006bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bcc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bd0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	685a      	ldr	r2, [r3, #4]
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	005b      	lsls	r3, r3, #1
 8006bda:	4413      	add	r3, r2
 8006bdc:	69ba      	ldr	r2, [r7, #24]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d305      	bcc.n	8006bee <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006be8:	69ba      	ldr	r2, [r7, #24]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d910      	bls.n	8006c10 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006bf4:	e11a      	b.n	8006e2c <UART_SetConfig+0x4b4>
 8006bf6:	bf00      	nop
 8006bf8:	cfff69f3 	.word	0xcfff69f3
 8006bfc:	40008000 	.word	0x40008000
 8006c00:	40013800 	.word	0x40013800
 8006c04:	40004400 	.word	0x40004400
 8006c08:	00f42400 	.word	0x00f42400
 8006c0c:	0800f274 	.word	0x0800f274
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c12:	2200      	movs	r2, #0
 8006c14:	60bb      	str	r3, [r7, #8]
 8006c16:	60fa      	str	r2, [r7, #12]
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1c:	4a8e      	ldr	r2, [pc, #568]	; (8006e58 <UART_SetConfig+0x4e0>)
 8006c1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	2200      	movs	r2, #0
 8006c26:	603b      	str	r3, [r7, #0]
 8006c28:	607a      	str	r2, [r7, #4]
 8006c2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c32:	f7fa f8df 	bl	8000df4 <__aeabi_uldivmod>
 8006c36:	4602      	mov	r2, r0
 8006c38:	460b      	mov	r3, r1
 8006c3a:	4610      	mov	r0, r2
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	f04f 0200 	mov.w	r2, #0
 8006c42:	f04f 0300 	mov.w	r3, #0
 8006c46:	020b      	lsls	r3, r1, #8
 8006c48:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006c4c:	0202      	lsls	r2, r0, #8
 8006c4e:	6979      	ldr	r1, [r7, #20]
 8006c50:	6849      	ldr	r1, [r1, #4]
 8006c52:	0849      	lsrs	r1, r1, #1
 8006c54:	2000      	movs	r0, #0
 8006c56:	460c      	mov	r4, r1
 8006c58:	4605      	mov	r5, r0
 8006c5a:	eb12 0804 	adds.w	r8, r2, r4
 8006c5e:	eb43 0905 	adc.w	r9, r3, r5
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	469a      	mov	sl, r3
 8006c6a:	4693      	mov	fp, r2
 8006c6c:	4652      	mov	r2, sl
 8006c6e:	465b      	mov	r3, fp
 8006c70:	4640      	mov	r0, r8
 8006c72:	4649      	mov	r1, r9
 8006c74:	f7fa f8be 	bl	8000df4 <__aeabi_uldivmod>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c80:	6a3b      	ldr	r3, [r7, #32]
 8006c82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c86:	d308      	bcc.n	8006c9a <UART_SetConfig+0x322>
 8006c88:	6a3b      	ldr	r3, [r7, #32]
 8006c8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c8e:	d204      	bcs.n	8006c9a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6a3a      	ldr	r2, [r7, #32]
 8006c96:	60da      	str	r2, [r3, #12]
 8006c98:	e0c8      	b.n	8006e2c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006ca0:	e0c4      	b.n	8006e2c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	69db      	ldr	r3, [r3, #28]
 8006ca6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006caa:	d167      	bne.n	8006d7c <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8006cac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006cb0:	2b08      	cmp	r3, #8
 8006cb2:	d828      	bhi.n	8006d06 <UART_SetConfig+0x38e>
 8006cb4:	a201      	add	r2, pc, #4	; (adr r2, 8006cbc <UART_SetConfig+0x344>)
 8006cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cba:	bf00      	nop
 8006cbc:	08006ce1 	.word	0x08006ce1
 8006cc0:	08006ce9 	.word	0x08006ce9
 8006cc4:	08006cf1 	.word	0x08006cf1
 8006cc8:	08006d07 	.word	0x08006d07
 8006ccc:	08006cf7 	.word	0x08006cf7
 8006cd0:	08006d07 	.word	0x08006d07
 8006cd4:	08006d07 	.word	0x08006d07
 8006cd8:	08006d07 	.word	0x08006d07
 8006cdc:	08006cff 	.word	0x08006cff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ce0:	f7fd fe1e 	bl	8004920 <HAL_RCC_GetPCLK1Freq>
 8006ce4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ce6:	e014      	b.n	8006d12 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ce8:	f7fd fe2c 	bl	8004944 <HAL_RCC_GetPCLK2Freq>
 8006cec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006cee:	e010      	b.n	8006d12 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cf0:	4b5a      	ldr	r3, [pc, #360]	; (8006e5c <UART_SetConfig+0x4e4>)
 8006cf2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006cf4:	e00d      	b.n	8006d12 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cf6:	f7fd fd5f 	bl	80047b8 <HAL_RCC_GetSysClockFreq>
 8006cfa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006cfc:	e009      	b.n	8006d12 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006d04:	e005      	b.n	8006d12 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8006d06:	2300      	movs	r3, #0
 8006d08:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006d10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f000 8089 	beq.w	8006e2c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1e:	4a4e      	ldr	r2, [pc, #312]	; (8006e58 <UART_SetConfig+0x4e0>)
 8006d20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d24:	461a      	mov	r2, r3
 8006d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d28:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d2c:	005a      	lsls	r2, r3, #1
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	085b      	lsrs	r3, r3, #1
 8006d34:	441a      	add	r2, r3
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d3e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d40:	6a3b      	ldr	r3, [r7, #32]
 8006d42:	2b0f      	cmp	r3, #15
 8006d44:	d916      	bls.n	8006d74 <UART_SetConfig+0x3fc>
 8006d46:	6a3b      	ldr	r3, [r7, #32]
 8006d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d4c:	d212      	bcs.n	8006d74 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d4e:	6a3b      	ldr	r3, [r7, #32]
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	f023 030f 	bic.w	r3, r3, #15
 8006d56:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d58:	6a3b      	ldr	r3, [r7, #32]
 8006d5a:	085b      	lsrs	r3, r3, #1
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	f003 0307 	and.w	r3, r3, #7
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	8bfb      	ldrh	r3, [r7, #30]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	8bfa      	ldrh	r2, [r7, #30]
 8006d70:	60da      	str	r2, [r3, #12]
 8006d72:	e05b      	b.n	8006e2c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006d7a:	e057      	b.n	8006e2c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006d80:	2b08      	cmp	r3, #8
 8006d82:	d828      	bhi.n	8006dd6 <UART_SetConfig+0x45e>
 8006d84:	a201      	add	r2, pc, #4	; (adr r2, 8006d8c <UART_SetConfig+0x414>)
 8006d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d8a:	bf00      	nop
 8006d8c:	08006db1 	.word	0x08006db1
 8006d90:	08006db9 	.word	0x08006db9
 8006d94:	08006dc1 	.word	0x08006dc1
 8006d98:	08006dd7 	.word	0x08006dd7
 8006d9c:	08006dc7 	.word	0x08006dc7
 8006da0:	08006dd7 	.word	0x08006dd7
 8006da4:	08006dd7 	.word	0x08006dd7
 8006da8:	08006dd7 	.word	0x08006dd7
 8006dac:	08006dcf 	.word	0x08006dcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006db0:	f7fd fdb6 	bl	8004920 <HAL_RCC_GetPCLK1Freq>
 8006db4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006db6:	e014      	b.n	8006de2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006db8:	f7fd fdc4 	bl	8004944 <HAL_RCC_GetPCLK2Freq>
 8006dbc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006dbe:	e010      	b.n	8006de2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dc0:	4b26      	ldr	r3, [pc, #152]	; (8006e5c <UART_SetConfig+0x4e4>)
 8006dc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006dc4:	e00d      	b.n	8006de2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dc6:	f7fd fcf7 	bl	80047b8 <HAL_RCC_GetSysClockFreq>
 8006dca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006dcc:	e009      	b.n	8006de2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dd2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006dd4:	e005      	b.n	8006de2 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006de0:	bf00      	nop
    }

    if (pclk != 0U)
 8006de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d021      	beq.n	8006e2c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dec:	4a1a      	ldr	r2, [pc, #104]	; (8006e58 <UART_SetConfig+0x4e0>)
 8006dee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006df2:	461a      	mov	r2, r3
 8006df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df6:	fbb3 f2f2 	udiv	r2, r3, r2
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	085b      	lsrs	r3, r3, #1
 8006e00:	441a      	add	r2, r3
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e0a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e0c:	6a3b      	ldr	r3, [r7, #32]
 8006e0e:	2b0f      	cmp	r3, #15
 8006e10:	d909      	bls.n	8006e26 <UART_SetConfig+0x4ae>
 8006e12:	6a3b      	ldr	r3, [r7, #32]
 8006e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e18:	d205      	bcs.n	8006e26 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e1a:	6a3b      	ldr	r3, [r7, #32]
 8006e1c:	b29a      	uxth	r2, r3
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	60da      	str	r2, [r3, #12]
 8006e24:	e002      	b.n	8006e2c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	2200      	movs	r2, #0
 8006e46:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006e48:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3730      	adds	r7, #48	; 0x30
 8006e50:	46bd      	mov	sp, r7
 8006e52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e56:	bf00      	nop
 8006e58:	0800f274 	.word	0x0800f274
 8006e5c:	00f42400 	.word	0x00f42400

08006e60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6c:	f003 0301 	and.w	r3, r3, #1
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00a      	beq.n	8006e8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	430a      	orrs	r2, r1
 8006e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8e:	f003 0302 	and.w	r3, r3, #2
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d00a      	beq.n	8006eac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	430a      	orrs	r2, r1
 8006eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb0:	f003 0304 	and.w	r3, r3, #4
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00a      	beq.n	8006ece <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	430a      	orrs	r2, r1
 8006ecc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed2:	f003 0308 	and.w	r3, r3, #8
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00a      	beq.n	8006ef0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	430a      	orrs	r2, r1
 8006eee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef4:	f003 0310 	and.w	r3, r3, #16
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00a      	beq.n	8006f12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	430a      	orrs	r2, r1
 8006f10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f16:	f003 0320 	and.w	r3, r3, #32
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00a      	beq.n	8006f34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	430a      	orrs	r2, r1
 8006f32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d01a      	beq.n	8006f76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	430a      	orrs	r2, r1
 8006f54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f5e:	d10a      	bne.n	8006f76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	430a      	orrs	r2, r1
 8006f74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00a      	beq.n	8006f98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	430a      	orrs	r2, r1
 8006f96:	605a      	str	r2, [r3, #4]
  }
}
 8006f98:	bf00      	nop
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bc80      	pop	{r7}
 8006fa0:	4770      	bx	lr

08006fa2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b086      	sub	sp, #24
 8006fa6:	af02      	add	r7, sp, #8
 8006fa8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fb2:	f7fb f853 	bl	800205c <HAL_GetTick>
 8006fb6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 0308 	and.w	r3, r3, #8
 8006fc2:	2b08      	cmp	r3, #8
 8006fc4:	d10e      	bne.n	8006fe4 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fc6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fca:	9300      	str	r3, [sp, #0]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 f832 	bl	800703e <UART_WaitOnFlagUntilTimeout>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d001      	beq.n	8006fe4 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fe0:	2303      	movs	r3, #3
 8006fe2:	e028      	b.n	8007036 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 0304 	and.w	r3, r3, #4
 8006fee:	2b04      	cmp	r3, #4
 8006ff0:	d10e      	bne.n	8007010 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ff2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ff6:	9300      	str	r3, [sp, #0]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 f81c 	bl	800703e <UART_WaitOnFlagUntilTimeout>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d001      	beq.n	8007010 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	e012      	b.n	8007036 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2220      	movs	r2, #32
 8007014:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2220      	movs	r2, #32
 800701c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b09c      	sub	sp, #112	; 0x70
 8007042:	af00      	add	r7, sp, #0
 8007044:	60f8      	str	r0, [r7, #12]
 8007046:	60b9      	str	r1, [r7, #8]
 8007048:	603b      	str	r3, [r7, #0]
 800704a:	4613      	mov	r3, r2
 800704c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800704e:	e0a9      	b.n	80071a4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007050:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007052:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007056:	f000 80a5 	beq.w	80071a4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800705a:	f7fa ffff 	bl	800205c <HAL_GetTick>
 800705e:	4602      	mov	r2, r0
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007066:	429a      	cmp	r2, r3
 8007068:	d302      	bcc.n	8007070 <UART_WaitOnFlagUntilTimeout+0x32>
 800706a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800706c:	2b00      	cmp	r3, #0
 800706e:	d140      	bne.n	80070f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007078:	e853 3f00 	ldrex	r3, [r3]
 800707c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800707e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007080:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007084:	667b      	str	r3, [r7, #100]	; 0x64
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	461a      	mov	r2, r3
 800708c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800708e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007090:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007092:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007094:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007096:	e841 2300 	strex	r3, r2, [r1]
 800709a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800709c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1e6      	bne.n	8007070 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	3308      	adds	r3, #8
 80070a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070ac:	e853 3f00 	ldrex	r3, [r3]
 80070b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b4:	f023 0301 	bic.w	r3, r3, #1
 80070b8:	663b      	str	r3, [r7, #96]	; 0x60
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	3308      	adds	r3, #8
 80070c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80070c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80070c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80070c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070ca:	e841 2300 	strex	r3, r2, [r1]
 80070ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80070d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d1e5      	bne.n	80070a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2220      	movs	r2, #32
 80070da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2220      	movs	r2, #32
 80070e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 80070ee:	2303      	movs	r3, #3
 80070f0:	e069      	b.n	80071c6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 0304 	and.w	r3, r3, #4
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d051      	beq.n	80071a4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	69db      	ldr	r3, [r3, #28]
 8007106:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800710a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800710e:	d149      	bne.n	80071a4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007118:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007122:	e853 3f00 	ldrex	r3, [r3]
 8007126:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800712e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	461a      	mov	r2, r3
 8007136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007138:	637b      	str	r3, [r7, #52]	; 0x34
 800713a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800713e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007140:	e841 2300 	strex	r3, r2, [r1]
 8007144:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1e6      	bne.n	800711a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	3308      	adds	r3, #8
 8007152:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	e853 3f00 	ldrex	r3, [r3]
 800715a:	613b      	str	r3, [r7, #16]
   return(result);
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	f023 0301 	bic.w	r3, r3, #1
 8007162:	66bb      	str	r3, [r7, #104]	; 0x68
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	3308      	adds	r3, #8
 800716a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800716c:	623a      	str	r2, [r7, #32]
 800716e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007170:	69f9      	ldr	r1, [r7, #28]
 8007172:	6a3a      	ldr	r2, [r7, #32]
 8007174:	e841 2300 	strex	r3, r2, [r1]
 8007178:	61bb      	str	r3, [r7, #24]
   return(result);
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1e5      	bne.n	800714c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2220      	movs	r2, #32
 8007184:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2220      	movs	r2, #32
 800718c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2220      	movs	r2, #32
 8007194:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2200      	movs	r2, #0
 800719c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80071a0:	2303      	movs	r3, #3
 80071a2:	e010      	b.n	80071c6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	69da      	ldr	r2, [r3, #28]
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	4013      	ands	r3, r2
 80071ae:	68ba      	ldr	r2, [r7, #8]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	bf0c      	ite	eq
 80071b4:	2301      	moveq	r3, #1
 80071b6:	2300      	movne	r3, #0
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	461a      	mov	r2, r3
 80071bc:	79fb      	ldrb	r3, [r7, #7]
 80071be:	429a      	cmp	r2, r3
 80071c0:	f43f af46 	beq.w	8007050 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3770      	adds	r7, #112	; 0x70
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
	...

080071d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b0a3      	sub	sp, #140	; 0x8c
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	4613      	mov	r3, r2
 80071dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	68ba      	ldr	r2, [r7, #8]
 80071e2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	88fa      	ldrh	r2, [r7, #6]
 80071e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	88fa      	ldrh	r2, [r7, #6]
 80071f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007202:	d10e      	bne.n	8007222 <UART_Start_Receive_IT+0x52>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	691b      	ldr	r3, [r3, #16]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d105      	bne.n	8007218 <UART_Start_Receive_IT+0x48>
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007212:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007216:	e02d      	b.n	8007274 <UART_Start_Receive_IT+0xa4>
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	22ff      	movs	r2, #255	; 0xff
 800721c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007220:	e028      	b.n	8007274 <UART_Start_Receive_IT+0xa4>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d10d      	bne.n	8007246 <UART_Start_Receive_IT+0x76>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d104      	bne.n	800723c <UART_Start_Receive_IT+0x6c>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	22ff      	movs	r2, #255	; 0xff
 8007236:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800723a:	e01b      	b.n	8007274 <UART_Start_Receive_IT+0xa4>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	227f      	movs	r2, #127	; 0x7f
 8007240:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007244:	e016      	b.n	8007274 <UART_Start_Receive_IT+0xa4>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800724e:	d10d      	bne.n	800726c <UART_Start_Receive_IT+0x9c>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d104      	bne.n	8007262 <UART_Start_Receive_IT+0x92>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	227f      	movs	r2, #127	; 0x7f
 800725c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007260:	e008      	b.n	8007274 <UART_Start_Receive_IT+0xa4>
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	223f      	movs	r2, #63	; 0x3f
 8007266:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800726a:	e003      	b.n	8007274 <UART_Start_Receive_IT+0xa4>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2200      	movs	r2, #0
 8007278:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2222      	movs	r2, #34	; 0x22
 8007280:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	3308      	adds	r3, #8
 800728a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800728e:	e853 3f00 	ldrex	r3, [r3]
 8007292:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007294:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007296:	f043 0301 	orr.w	r3, r3, #1
 800729a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	3308      	adds	r3, #8
 80072a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80072a8:	673a      	str	r2, [r7, #112]	; 0x70
 80072aa:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ac:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80072ae:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80072b0:	e841 2300 	strex	r3, r2, [r1]
 80072b4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80072b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1e3      	bne.n	8007284 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072c4:	d14f      	bne.n	8007366 <UART_Start_Receive_IT+0x196>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80072cc:	88fa      	ldrh	r2, [r7, #6]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d349      	bcc.n	8007366 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072da:	d107      	bne.n	80072ec <UART_Start_Receive_IT+0x11c>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d103      	bne.n	80072ec <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	4a46      	ldr	r2, [pc, #280]	; (8007400 <UART_Start_Receive_IT+0x230>)
 80072e8:	675a      	str	r2, [r3, #116]	; 0x74
 80072ea:	e002      	b.n	80072f2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	4a45      	ldr	r2, [pc, #276]	; (8007404 <UART_Start_Receive_IT+0x234>)
 80072f0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d01a      	beq.n	8007330 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007302:	e853 3f00 	ldrex	r3, [r3]
 8007306:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800730a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800730e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	461a      	mov	r2, r3
 8007318:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800731c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800731e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007320:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007322:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007324:	e841 2300 	strex	r3, r2, [r1]
 8007328:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800732a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1e4      	bne.n	80072fa <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	3308      	adds	r3, #8
 8007336:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800733a:	e853 3f00 	ldrex	r3, [r3]
 800733e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007346:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	3308      	adds	r3, #8
 800734e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007350:	64ba      	str	r2, [r7, #72]	; 0x48
 8007352:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007354:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007356:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007358:	e841 2300 	strex	r3, r2, [r1]
 800735c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800735e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007360:	2b00      	cmp	r3, #0
 8007362:	d1e5      	bne.n	8007330 <UART_Start_Receive_IT+0x160>
 8007364:	e046      	b.n	80073f4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800736e:	d107      	bne.n	8007380 <UART_Start_Receive_IT+0x1b0>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	691b      	ldr	r3, [r3, #16]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d103      	bne.n	8007380 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	4a23      	ldr	r2, [pc, #140]	; (8007408 <UART_Start_Receive_IT+0x238>)
 800737c:	675a      	str	r2, [r3, #116]	; 0x74
 800737e:	e002      	b.n	8007386 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	4a22      	ldr	r2, [pc, #136]	; (800740c <UART_Start_Receive_IT+0x23c>)
 8007384:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d019      	beq.n	80073c2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007396:	e853 3f00 	ldrex	r3, [r3]
 800739a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800739c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80073a2:	677b      	str	r3, [r7, #116]	; 0x74
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	461a      	mov	r2, r3
 80073aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073ac:	637b      	str	r3, [r7, #52]	; 0x34
 80073ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80073b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073b4:	e841 2300 	strex	r3, r2, [r1]
 80073b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80073ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1e6      	bne.n	800738e <UART_Start_Receive_IT+0x1be>
 80073c0:	e018      	b.n	80073f4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	e853 3f00 	ldrex	r3, [r3]
 80073ce:	613b      	str	r3, [r7, #16]
   return(result);
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	f043 0320 	orr.w	r3, r3, #32
 80073d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	461a      	mov	r2, r3
 80073de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073e0:	623b      	str	r3, [r7, #32]
 80073e2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e4:	69f9      	ldr	r1, [r7, #28]
 80073e6:	6a3a      	ldr	r2, [r7, #32]
 80073e8:	e841 2300 	strex	r3, r2, [r1]
 80073ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d1e6      	bne.n	80073c2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	378c      	adds	r7, #140	; 0x8c
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bc80      	pop	{r7}
 80073fe:	4770      	bx	lr
 8007400:	08007c2d 	.word	0x08007c2d
 8007404:	080078cd 	.word	0x080078cd
 8007408:	08007715 	.word	0x08007715
 800740c:	0800755d 	.word	0x0800755d

08007410 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007410:	b480      	push	{r7}
 8007412:	b095      	sub	sp, #84	; 0x54
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007420:	e853 3f00 	ldrex	r3, [r3]
 8007424:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007428:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800742c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	461a      	mov	r2, r3
 8007434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007436:	643b      	str	r3, [r7, #64]	; 0x40
 8007438:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800743c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800743e:	e841 2300 	strex	r3, r2, [r1]
 8007442:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1e6      	bne.n	8007418 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	3308      	adds	r3, #8
 8007450:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007452:	6a3b      	ldr	r3, [r7, #32]
 8007454:	e853 3f00 	ldrex	r3, [r3]
 8007458:	61fb      	str	r3, [r7, #28]
   return(result);
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007460:	f023 0301 	bic.w	r3, r3, #1
 8007464:	64bb      	str	r3, [r7, #72]	; 0x48
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	3308      	adds	r3, #8
 800746c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800746e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007470:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007472:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007474:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007476:	e841 2300 	strex	r3, r2, [r1]
 800747a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800747c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747e:	2b00      	cmp	r3, #0
 8007480:	d1e3      	bne.n	800744a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007486:	2b01      	cmp	r3, #1
 8007488:	d118      	bne.n	80074bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	e853 3f00 	ldrex	r3, [r3]
 8007496:	60bb      	str	r3, [r7, #8]
   return(result);
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	f023 0310 	bic.w	r3, r3, #16
 800749e:	647b      	str	r3, [r7, #68]	; 0x44
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	461a      	mov	r2, r3
 80074a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074a8:	61bb      	str	r3, [r7, #24]
 80074aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ac:	6979      	ldr	r1, [r7, #20]
 80074ae:	69ba      	ldr	r2, [r7, #24]
 80074b0:	e841 2300 	strex	r3, r2, [r1]
 80074b4:	613b      	str	r3, [r7, #16]
   return(result);
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1e6      	bne.n	800748a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2220      	movs	r2, #32
 80074c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	675a      	str	r2, [r3, #116]	; 0x74
}
 80074d0:	bf00      	nop
 80074d2:	3754      	adds	r7, #84	; 0x54
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bc80      	pop	{r7}
 80074d8:	4770      	bx	lr

080074da <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b084      	sub	sp, #16
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f7ff fa28 	bl	800694e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074fe:	bf00      	nop
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b088      	sub	sp, #32
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	e853 3f00 	ldrex	r3, [r3]
 800751a:	60bb      	str	r3, [r7, #8]
   return(result);
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007522:	61fb      	str	r3, [r7, #28]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	461a      	mov	r2, r3
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	61bb      	str	r3, [r7, #24]
 800752e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007530:	6979      	ldr	r1, [r7, #20]
 8007532:	69ba      	ldr	r2, [r7, #24]
 8007534:	e841 2300 	strex	r3, r2, [r1]
 8007538:	613b      	str	r3, [r7, #16]
   return(result);
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1e6      	bne.n	800750e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2220      	movs	r2, #32
 8007544:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f7ff f9f4 	bl	800693c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007554:	bf00      	nop
 8007556:	3720      	adds	r7, #32
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b09c      	sub	sp, #112	; 0x70
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800756a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007574:	2b22      	cmp	r3, #34	; 0x22
 8007576:	f040 80be 	bne.w	80076f6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007580:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007584:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007588:	b2d9      	uxtb	r1, r3
 800758a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800758e:	b2da      	uxtb	r2, r3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007594:	400a      	ands	r2, r1
 8007596:	b2d2      	uxtb	r2, r2
 8007598:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800759e:	1c5a      	adds	r2, r3, #1
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	3b01      	subs	r3, #1
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80075bc:	b29b      	uxth	r3, r3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	f040 80a1 	bne.w	8007706 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075cc:	e853 3f00 	ldrex	r3, [r3]
 80075d0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80075d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	461a      	mov	r2, r3
 80075e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80075e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80075e4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80075e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075ea:	e841 2300 	strex	r3, r2, [r1]
 80075ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80075f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d1e6      	bne.n	80075c4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	3308      	adds	r3, #8
 80075fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007600:	e853 3f00 	ldrex	r3, [r3]
 8007604:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007608:	f023 0301 	bic.w	r3, r3, #1
 800760c:	667b      	str	r3, [r7, #100]	; 0x64
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	3308      	adds	r3, #8
 8007614:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007616:	647a      	str	r2, [r7, #68]	; 0x44
 8007618:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800761c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800761e:	e841 2300 	strex	r3, r2, [r1]
 8007622:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007626:	2b00      	cmp	r3, #0
 8007628:	d1e5      	bne.n	80075f6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2220      	movs	r2, #32
 800762e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a33      	ldr	r2, [pc, #204]	; (8007710 <UART_RxISR_8BIT+0x1b4>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d01f      	beq.n	8007688 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007652:	2b00      	cmp	r3, #0
 8007654:	d018      	beq.n	8007688 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765e:	e853 3f00 	ldrex	r3, [r3]
 8007662:	623b      	str	r3, [r7, #32]
   return(result);
 8007664:	6a3b      	ldr	r3, [r7, #32]
 8007666:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800766a:	663b      	str	r3, [r7, #96]	; 0x60
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	461a      	mov	r2, r3
 8007672:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007674:	633b      	str	r3, [r7, #48]	; 0x30
 8007676:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007678:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800767a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800767c:	e841 2300 	strex	r3, r2, [r1]
 8007680:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1e6      	bne.n	8007656 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800768c:	2b01      	cmp	r3, #1
 800768e:	d12e      	bne.n	80076ee <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	e853 3f00 	ldrex	r3, [r3]
 80076a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f023 0310 	bic.w	r3, r3, #16
 80076aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	461a      	mov	r2, r3
 80076b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076b4:	61fb      	str	r3, [r7, #28]
 80076b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b8:	69b9      	ldr	r1, [r7, #24]
 80076ba:	69fa      	ldr	r2, [r7, #28]
 80076bc:	e841 2300 	strex	r3, r2, [r1]
 80076c0:	617b      	str	r3, [r7, #20]
   return(result);
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d1e6      	bne.n	8007696 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	69db      	ldr	r3, [r3, #28]
 80076ce:	f003 0310 	and.w	r3, r3, #16
 80076d2:	2b10      	cmp	r3, #16
 80076d4:	d103      	bne.n	80076de <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2210      	movs	r2, #16
 80076dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80076e4:	4619      	mov	r1, r3
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f7ff f93a 	bl	8006960 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076ec:	e00b      	b.n	8007706 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f001 f87c 	bl	80087ec <HAL_UART_RxCpltCallback>
}
 80076f4:	e007      	b.n	8007706 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	699a      	ldr	r2, [r3, #24]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f042 0208 	orr.w	r2, r2, #8
 8007704:	619a      	str	r2, [r3, #24]
}
 8007706:	bf00      	nop
 8007708:	3770      	adds	r7, #112	; 0x70
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	40008000 	.word	0x40008000

08007714 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b09c      	sub	sp, #112	; 0x70
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007722:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800772c:	2b22      	cmp	r3, #34	; 0x22
 800772e:	f040 80be 	bne.w	80078ae <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007738:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007740:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007742:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007746:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800774a:	4013      	ands	r3, r2
 800774c:	b29a      	uxth	r2, r3
 800774e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007750:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007756:	1c9a      	adds	r2, r3, #2
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007762:	b29b      	uxth	r3, r3
 8007764:	3b01      	subs	r3, #1
 8007766:	b29a      	uxth	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007774:	b29b      	uxth	r3, r3
 8007776:	2b00      	cmp	r3, #0
 8007778:	f040 80a1 	bne.w	80078be <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007782:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007784:	e853 3f00 	ldrex	r3, [r3]
 8007788:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800778a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800778c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007790:	667b      	str	r3, [r7, #100]	; 0x64
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	461a      	mov	r2, r3
 8007798:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800779a:	657b      	str	r3, [r7, #84]	; 0x54
 800779c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80077a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80077a2:	e841 2300 	strex	r3, r2, [r1]
 80077a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80077a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d1e6      	bne.n	800777c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	3308      	adds	r3, #8
 80077b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077b8:	e853 3f00 	ldrex	r3, [r3]
 80077bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80077be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c0:	f023 0301 	bic.w	r3, r3, #1
 80077c4:	663b      	str	r3, [r7, #96]	; 0x60
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	3308      	adds	r3, #8
 80077cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80077ce:	643a      	str	r2, [r7, #64]	; 0x40
 80077d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077d6:	e841 2300 	strex	r3, r2, [r1]
 80077da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d1e5      	bne.n	80077ae <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2220      	movs	r2, #32
 80077e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a33      	ldr	r2, [pc, #204]	; (80078c8 <UART_RxISR_16BIT+0x1b4>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d01f      	beq.n	8007840 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800780a:	2b00      	cmp	r3, #0
 800780c:	d018      	beq.n	8007840 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007814:	6a3b      	ldr	r3, [r7, #32]
 8007816:	e853 3f00 	ldrex	r3, [r3]
 800781a:	61fb      	str	r3, [r7, #28]
   return(result);
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007822:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	461a      	mov	r2, r3
 800782a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800782c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800782e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007830:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007834:	e841 2300 	strex	r3, r2, [r1]
 8007838:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1e6      	bne.n	800780e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007844:	2b01      	cmp	r3, #1
 8007846:	d12e      	bne.n	80078a6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	e853 3f00 	ldrex	r3, [r3]
 800785a:	60bb      	str	r3, [r7, #8]
   return(result);
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	f023 0310 	bic.w	r3, r3, #16
 8007862:	65bb      	str	r3, [r7, #88]	; 0x58
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	461a      	mov	r2, r3
 800786a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800786c:	61bb      	str	r3, [r7, #24]
 800786e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007870:	6979      	ldr	r1, [r7, #20]
 8007872:	69ba      	ldr	r2, [r7, #24]
 8007874:	e841 2300 	strex	r3, r2, [r1]
 8007878:	613b      	str	r3, [r7, #16]
   return(result);
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d1e6      	bne.n	800784e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	69db      	ldr	r3, [r3, #28]
 8007886:	f003 0310 	and.w	r3, r3, #16
 800788a:	2b10      	cmp	r3, #16
 800788c:	d103      	bne.n	8007896 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2210      	movs	r2, #16
 8007894:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800789c:	4619      	mov	r1, r3
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f7ff f85e 	bl	8006960 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80078a4:	e00b      	b.n	80078be <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 ffa0 	bl	80087ec <HAL_UART_RxCpltCallback>
}
 80078ac:	e007      	b.n	80078be <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	699a      	ldr	r2, [r3, #24]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f042 0208 	orr.w	r2, r2, #8
 80078bc:	619a      	str	r2, [r3, #24]
}
 80078be:	bf00      	nop
 80078c0:	3770      	adds	r7, #112	; 0x70
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	40008000 	.word	0x40008000

080078cc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b0ac      	sub	sp, #176	; 0xb0
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80078da:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	69db      	ldr	r3, [r3, #28]
 80078e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007902:	2b22      	cmp	r3, #34	; 0x22
 8007904:	f040 8182 	bne.w	8007c0c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800790e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007912:	e125      	b.n	8007b60 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800791e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8007922:	b2d9      	uxtb	r1, r3
 8007924:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007928:	b2da      	uxtb	r2, r3
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800792e:	400a      	ands	r2, r1
 8007930:	b2d2      	uxtb	r2, r2
 8007932:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007938:	1c5a      	adds	r2, r3, #1
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007944:	b29b      	uxth	r3, r3
 8007946:	3b01      	subs	r3, #1
 8007948:	b29a      	uxth	r2, r3
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	69db      	ldr	r3, [r3, #28]
 8007956:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800795a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800795e:	f003 0307 	and.w	r3, r3, #7
 8007962:	2b00      	cmp	r3, #0
 8007964:	d053      	beq.n	8007a0e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007966:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800796a:	f003 0301 	and.w	r3, r3, #1
 800796e:	2b00      	cmp	r3, #0
 8007970:	d011      	beq.n	8007996 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007972:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00b      	beq.n	8007996 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2201      	movs	r2, #1
 8007984:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800798c:	f043 0201 	orr.w	r2, r3, #1
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007996:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800799a:	f003 0302 	and.w	r3, r3, #2
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d011      	beq.n	80079c6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80079a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80079a6:	f003 0301 	and.w	r3, r3, #1
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d00b      	beq.n	80079c6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2202      	movs	r2, #2
 80079b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079bc:	f043 0204 	orr.w	r2, r3, #4
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80079ca:	f003 0304 	and.w	r3, r3, #4
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d011      	beq.n	80079f6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80079d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80079d6:	f003 0301 	and.w	r3, r3, #1
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00b      	beq.n	80079f6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	2204      	movs	r2, #4
 80079e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079ec:	f043 0202 	orr.w	r2, r3, #2
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d006      	beq.n	8007a0e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f7fe ffa4 	bl	800694e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f040 80a2 	bne.w	8007b60 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a24:	e853 3f00 	ldrex	r3, [r3]
 8007a28:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8007a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	461a      	mov	r2, r3
 8007a3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a3e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007a40:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a42:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007a44:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007a46:	e841 2300 	strex	r3, r2, [r1]
 8007a4a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8007a4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1e4      	bne.n	8007a1c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	3308      	adds	r3, #8
 8007a58:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a5c:	e853 3f00 	ldrex	r3, [r3]
 8007a60:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007a62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a68:	f023 0301 	bic.w	r3, r3, #1
 8007a6c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	3308      	adds	r3, #8
 8007a76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007a7a:	66ba      	str	r2, [r7, #104]	; 0x68
 8007a7c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007a80:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a82:	e841 2300 	strex	r3, r2, [r1]
 8007a86:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007a88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1e1      	bne.n	8007a52 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2220      	movs	r2, #32
 8007a92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a5f      	ldr	r2, [pc, #380]	; (8007c24 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d021      	beq.n	8007af0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d01a      	beq.n	8007af0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ac2:	e853 3f00 	ldrex	r3, [r3]
 8007ac6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007ac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007aca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ace:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007adc:	657b      	str	r3, [r7, #84]	; 0x54
 8007ade:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007ae2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007ae4:	e841 2300 	strex	r3, r2, [r1]
 8007ae8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d1e4      	bne.n	8007aba <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d130      	bne.n	8007b5a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b06:	e853 3f00 	ldrex	r3, [r3]
 8007b0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0e:	f023 0310 	bic.w	r3, r3, #16
 8007b12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b20:	643b      	str	r3, [r7, #64]	; 0x40
 8007b22:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b28:	e841 2300 	strex	r3, r2, [r1]
 8007b2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d1e4      	bne.n	8007afe <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	69db      	ldr	r3, [r3, #28]
 8007b3a:	f003 0310 	and.w	r3, r3, #16
 8007b3e:	2b10      	cmp	r3, #16
 8007b40:	d103      	bne.n	8007b4a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2210      	movs	r2, #16
 8007b48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b50:	4619      	mov	r1, r3
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f7fe ff04 	bl	8006960 <HAL_UARTEx_RxEventCallback>
 8007b58:	e002      	b.n	8007b60 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 fe46 	bl	80087ec <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007b60:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d006      	beq.n	8007b76 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8007b68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b6c:	f003 0320 	and.w	r3, r3, #32
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f47f aecf 	bne.w	8007914 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b7c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007b80:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d049      	beq.n	8007c1c <UART_RxISR_8BIT_FIFOEN+0x350>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007b8e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d242      	bcs.n	8007c1c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	3308      	adds	r3, #8
 8007b9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b9e:	6a3b      	ldr	r3, [r7, #32]
 8007ba0:	e853 3f00 	ldrex	r3, [r3]
 8007ba4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	3308      	adds	r3, #8
 8007bb6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007bba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007bbc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bc2:	e841 2300 	strex	r3, r2, [r1]
 8007bc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d1e3      	bne.n	8007b96 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a15      	ldr	r2, [pc, #84]	; (8007c28 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007bd2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	e853 3f00 	ldrex	r3, [r3]
 8007be0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	f043 0320 	orr.w	r3, r3, #32
 8007be8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007bf6:	61bb      	str	r3, [r7, #24]
 8007bf8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfa:	6979      	ldr	r1, [r7, #20]
 8007bfc:	69ba      	ldr	r2, [r7, #24]
 8007bfe:	e841 2300 	strex	r3, r2, [r1]
 8007c02:	613b      	str	r3, [r7, #16]
   return(result);
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1e4      	bne.n	8007bd4 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c0a:	e007      	b.n	8007c1c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	699a      	ldr	r2, [r3, #24]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f042 0208 	orr.w	r2, r2, #8
 8007c1a:	619a      	str	r2, [r3, #24]
}
 8007c1c:	bf00      	nop
 8007c1e:	37b0      	adds	r7, #176	; 0xb0
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	40008000 	.word	0x40008000
 8007c28:	0800755d 	.word	0x0800755d

08007c2c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b0ae      	sub	sp, #184	; 0xb8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007c3a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	69db      	ldr	r3, [r3, #28]
 8007c44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c62:	2b22      	cmp	r3, #34	; 0x22
 8007c64:	f040 8186 	bne.w	8007f74 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007c6e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007c72:	e129      	b.n	8007ec8 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007c86:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8007c8a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8007c8e:	4013      	ands	r3, r2
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c96:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c9c:	1c9a      	adds	r2, r3, #2
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	3b01      	subs	r3, #1
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	69db      	ldr	r3, [r3, #28]
 8007cba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007cbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007cc2:	f003 0307 	and.w	r3, r3, #7
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d053      	beq.n	8007d72 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007cca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007cce:	f003 0301 	and.w	r3, r3, #1
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d011      	beq.n	8007cfa <UART_RxISR_16BIT_FIFOEN+0xce>
 8007cd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00b      	beq.n	8007cfa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cf0:	f043 0201 	orr.w	r2, r3, #1
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007cfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007cfe:	f003 0302 	and.w	r3, r3, #2
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d011      	beq.n	8007d2a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007d06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007d0a:	f003 0301 	and.w	r3, r3, #1
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00b      	beq.n	8007d2a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2202      	movs	r2, #2
 8007d18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d20:	f043 0204 	orr.w	r2, r3, #4
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007d2e:	f003 0304 	and.w	r3, r3, #4
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d011      	beq.n	8007d5a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007d36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007d3a:	f003 0301 	and.w	r3, r3, #1
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d00b      	beq.n	8007d5a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	2204      	movs	r2, #4
 8007d48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d50:	f043 0202 	orr.w	r2, r3, #2
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d006      	beq.n	8007d72 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f7fe fdf2 	bl	800694e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	f040 80a4 	bne.w	8007ec8 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d88:	e853 3f00 	ldrex	r3, [r3]
 8007d8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007d8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007da2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007da6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007daa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007dae:	e841 2300 	strex	r3, r2, [r1]
 8007db2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007db4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d1e2      	bne.n	8007d80 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	3308      	adds	r3, #8
 8007dc0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007dc4:	e853 3f00 	ldrex	r3, [r3]
 8007dc8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007dca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007dd0:	f023 0301 	bic.w	r3, r3, #1
 8007dd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	3308      	adds	r3, #8
 8007dde:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007de2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007de4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007de8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007dea:	e841 2300 	strex	r3, r2, [r1]
 8007dee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007df0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1e1      	bne.n	8007dba <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2220      	movs	r2, #32
 8007dfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a5f      	ldr	r2, [pc, #380]	; (8007f8c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d021      	beq.n	8007e58 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d01a      	beq.n	8007e58 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e2a:	e853 3f00 	ldrex	r3, [r3]
 8007e2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007e30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007e36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	461a      	mov	r2, r3
 8007e40:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007e44:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e46:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e4c:	e841 2300 	strex	r3, r2, [r1]
 8007e50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007e52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d1e4      	bne.n	8007e22 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d130      	bne.n	8007ec2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6e:	e853 3f00 	ldrex	r3, [r3]
 8007e72:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e76:	f023 0310 	bic.w	r3, r3, #16
 8007e7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	461a      	mov	r2, r3
 8007e84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007e88:	647b      	str	r3, [r7, #68]	; 0x44
 8007e8a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e90:	e841 2300 	strex	r3, r2, [r1]
 8007e94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1e4      	bne.n	8007e66 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	69db      	ldr	r3, [r3, #28]
 8007ea2:	f003 0310 	and.w	r3, r3, #16
 8007ea6:	2b10      	cmp	r3, #16
 8007ea8:	d103      	bne.n	8007eb2 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2210      	movs	r2, #16
 8007eb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007eb8:	4619      	mov	r1, r3
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f7fe fd50 	bl	8006960 <HAL_UARTEx_RxEventCallback>
 8007ec0:	e002      	b.n	8007ec8 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 fc92 	bl	80087ec <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007ec8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d006      	beq.n	8007ede <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8007ed0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007ed4:	f003 0320 	and.w	r3, r3, #32
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	f47f aecb 	bne.w	8007c74 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ee4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007ee8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d049      	beq.n	8007f84 <UART_RxISR_16BIT_FIFOEN+0x358>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007ef6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d242      	bcs.n	8007f84 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	3308      	adds	r3, #8
 8007f04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f08:	e853 3f00 	ldrex	r3, [r3]
 8007f0c:	623b      	str	r3, [r7, #32]
   return(result);
 8007f0e:	6a3b      	ldr	r3, [r7, #32]
 8007f10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	3308      	adds	r3, #8
 8007f1e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007f22:	633a      	str	r2, [r7, #48]	; 0x30
 8007f24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f2a:	e841 2300 	strex	r3, r2, [r1]
 8007f2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d1e3      	bne.n	8007efe <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a15      	ldr	r2, [pc, #84]	; (8007f90 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007f3a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	e853 3f00 	ldrex	r3, [r3]
 8007f48:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f043 0320 	orr.w	r3, r3, #32
 8007f50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	461a      	mov	r2, r3
 8007f5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f5e:	61fb      	str	r3, [r7, #28]
 8007f60:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f62:	69b9      	ldr	r1, [r7, #24]
 8007f64:	69fa      	ldr	r2, [r7, #28]
 8007f66:	e841 2300 	strex	r3, r2, [r1]
 8007f6a:	617b      	str	r3, [r7, #20]
   return(result);
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d1e4      	bne.n	8007f3c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f72:	e007      	b.n	8007f84 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	699a      	ldr	r2, [r3, #24]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f042 0208 	orr.w	r2, r2, #8
 8007f82:	619a      	str	r2, [r3, #24]
}
 8007f84:	bf00      	nop
 8007f86:	37b8      	adds	r7, #184	; 0xb8
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	40008000 	.word	0x40008000
 8007f90:	08007715 	.word	0x08007715

08007f94 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007f9c:	bf00      	nop
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bc80      	pop	{r7}
 8007fa4:	4770      	bx	lr

08007fa6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007fa6:	b480      	push	{r7}
 8007fa8:	b083      	sub	sp, #12
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007fae:	bf00      	nop
 8007fb0:	370c      	adds	r7, #12
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bc80      	pop	{r7}
 8007fb6:	4770      	bx	lr

08007fb8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007fc0:	bf00      	nop
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bc80      	pop	{r7}
 8007fc8:	4770      	bx	lr

08007fca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007fca:	b480      	push	{r7}
 8007fcc:	b085      	sub	sp, #20
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d101      	bne.n	8007fe0 <HAL_UARTEx_DisableFifoMode+0x16>
 8007fdc:	2302      	movs	r3, #2
 8007fde:	e027      	b.n	8008030 <HAL_UARTEx_DisableFifoMode+0x66>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2224      	movs	r2, #36	; 0x24
 8007fec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f022 0201 	bic.w	r2, r2, #1
 8008006:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800800e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2220      	movs	r2, #32
 8008022:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800802e:	2300      	movs	r3, #0
}
 8008030:	4618      	mov	r0, r3
 8008032:	3714      	adds	r7, #20
 8008034:	46bd      	mov	sp, r7
 8008036:	bc80      	pop	{r7}
 8008038:	4770      	bx	lr

0800803a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800803a:	b580      	push	{r7, lr}
 800803c:	b084      	sub	sp, #16
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
 8008042:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800804a:	2b01      	cmp	r3, #1
 800804c:	d101      	bne.n	8008052 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800804e:	2302      	movs	r3, #2
 8008050:	e02d      	b.n	80080ae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2201      	movs	r2, #1
 8008056:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2224      	movs	r2, #36	; 0x24
 800805e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f022 0201 	bic.w	r2, r2, #1
 8008078:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	683a      	ldr	r2, [r7, #0]
 800808a:	430a      	orrs	r2, r1
 800808c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 f850 	bl	8008134 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2220      	movs	r2, #32
 80080a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b084      	sub	sp, #16
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
 80080be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d101      	bne.n	80080ce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80080ca:	2302      	movs	r3, #2
 80080cc:	e02d      	b.n	800812a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2201      	movs	r2, #1
 80080d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2224      	movs	r2, #36	; 0x24
 80080da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f022 0201 	bic.w	r2, r2, #1
 80080f4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	683a      	ldr	r2, [r7, #0]
 8008106:	430a      	orrs	r2, r1
 8008108:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 f812 	bl	8008134 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2220      	movs	r2, #32
 800811c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
	...

08008134 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008134:	b480      	push	{r7}
 8008136:	b085      	sub	sp, #20
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008140:	2b00      	cmp	r3, #0
 8008142:	d108      	bne.n	8008156 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008154:	e031      	b.n	80081ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008156:	2308      	movs	r3, #8
 8008158:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800815a:	2308      	movs	r3, #8
 800815c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	0e5b      	lsrs	r3, r3, #25
 8008166:	b2db      	uxtb	r3, r3
 8008168:	f003 0307 	and.w	r3, r3, #7
 800816c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	0f5b      	lsrs	r3, r3, #29
 8008176:	b2db      	uxtb	r3, r3
 8008178:	f003 0307 	and.w	r3, r3, #7
 800817c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800817e:	7bbb      	ldrb	r3, [r7, #14]
 8008180:	7b3a      	ldrb	r2, [r7, #12]
 8008182:	4910      	ldr	r1, [pc, #64]	; (80081c4 <UARTEx_SetNbDataToProcess+0x90>)
 8008184:	5c8a      	ldrb	r2, [r1, r2]
 8008186:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800818a:	7b3a      	ldrb	r2, [r7, #12]
 800818c:	490e      	ldr	r1, [pc, #56]	; (80081c8 <UARTEx_SetNbDataToProcess+0x94>)
 800818e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008190:	fb93 f3f2 	sdiv	r3, r3, r2
 8008194:	b29a      	uxth	r2, r3
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800819c:	7bfb      	ldrb	r3, [r7, #15]
 800819e:	7b7a      	ldrb	r2, [r7, #13]
 80081a0:	4908      	ldr	r1, [pc, #32]	; (80081c4 <UARTEx_SetNbDataToProcess+0x90>)
 80081a2:	5c8a      	ldrb	r2, [r1, r2]
 80081a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80081a8:	7b7a      	ldrb	r2, [r7, #13]
 80081aa:	4907      	ldr	r1, [pc, #28]	; (80081c8 <UARTEx_SetNbDataToProcess+0x94>)
 80081ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80081ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80081ba:	bf00      	nop
 80081bc:	3714      	adds	r7, #20
 80081be:	46bd      	mov	sp, r7
 80081c0:	bc80      	pop	{r7}
 80081c2:	4770      	bx	lr
 80081c4:	0800f28c 	.word	0x0800f28c
 80081c8:	0800f294 	.word	0x0800f294

080081cc <ReadADCChannel>:
#define CONVERSION_POLL_TIME 10

static uint16_t ReadADCChannel(uint32_t Channel);

static uint16_t ReadADCChannel(uint32_t Channel)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b086      	sub	sp, #24
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
	uint16_t result;
	if (HAL_ADCEx_Calibration_Start(Get_AdcHandle()) != HAL_OK) {
 80081d4:	f7f9 fb16 	bl	8001804 <Get_AdcHandle>
 80081d8:	4603      	mov	r3, r0
 80081da:	4618      	mov	r0, r3
 80081dc:	f7fa fe99 	bl	8002f12 <HAL_ADCEx_Calibration_Start>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d001      	beq.n	80081ea <ReadADCChannel+0x1e>
	    Error_Handler();
 80081e6:	f7f9 fb51 	bl	800188c <Error_Handler>
	  }
	ADC_ChannelConfTypeDef sConfig = {0};
 80081ea:	f107 0308 	add.w	r3, r7, #8
 80081ee:	2200      	movs	r2, #0
 80081f0:	601a      	str	r2, [r3, #0]
 80081f2:	605a      	str	r2, [r3, #4]
 80081f4:	609a      	str	r2, [r3, #8]
	sConfig.Channel = Channel;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80081fa:	2300      	movs	r3, #0
 80081fc:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80081fe:	2300      	movs	r3, #0
 8008200:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(Get_AdcHandle(), &sConfig) != HAL_OK) {
 8008202:	f7f9 faff 	bl	8001804 <Get_AdcHandle>
 8008206:	4602      	mov	r2, r0
 8008208:	f107 0308 	add.w	r3, r7, #8
 800820c:	4619      	mov	r1, r3
 800820e:	4610      	mov	r0, r2
 8008210:	f7fa fb92 	bl	8002938 <HAL_ADC_ConfigChannel>
 8008214:	4603      	mov	r3, r0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d001      	beq.n	800821e <ReadADCChannel+0x52>
		Error_Handler();
 800821a:	f7f9 fb37 	bl	800188c <Error_Handler>
	}
	if (HAL_ADC_Start(Get_AdcHandle()) != HAL_OK) {
 800821e:	f7f9 faf1 	bl	8001804 <Get_AdcHandle>
 8008222:	4603      	mov	r3, r0
 8008224:	4618      	mov	r0, r3
 8008226:	f7fa fa6b 	bl	8002700 <HAL_ADC_Start>
 800822a:	4603      	mov	r3, r0
 800822c:	2b00      	cmp	r3, #0
 800822e:	d001      	beq.n	8008234 <ReadADCChannel+0x68>
		Error_Handler();
 8008230:	f7f9 fb2c 	bl	800188c <Error_Handler>
	}
	HAL_ADC_PollForConversion(Get_AdcHandle(), HAL_MAX_DELAY);
 8008234:	f7f9 fae6 	bl	8001804 <Get_AdcHandle>
 8008238:	4603      	mov	r3, r0
 800823a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800823e:	4618      	mov	r0, r3
 8008240:	f7fa fad6 	bl	80027f0 <HAL_ADC_PollForConversion>
	HAL_ADC_Stop(Get_AdcHandle());
 8008244:	f7f9 fade 	bl	8001804 <Get_AdcHandle>
 8008248:	4603      	mov	r3, r0
 800824a:	4618      	mov	r0, r3
 800824c:	f7fa fa9e 	bl	800278c <HAL_ADC_Stop>
	if((HAL_ADC_GetState(Get_AdcHandle()) & HAL_ADC_STATE_EOC_REG) == HAL_ADC_STATE_EOC_REG)
 8008250:	f7f9 fad8 	bl	8001804 <Get_AdcHandle>
 8008254:	4603      	mov	r3, r0
 8008256:	4618      	mov	r0, r3
 8008258:	f7fa fca6 	bl	8002ba8 <HAL_ADC_GetState>
 800825c:	4603      	mov	r3, r0
 800825e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008262:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008266:	d107      	bne.n	8008278 <ReadADCChannel+0xac>
	{
		/*##-5- Get the converted value of regular channel  ######################*/
		result = (uint16_t)HAL_ADC_GetValue(Get_AdcHandle());
 8008268:	f7f9 facc 	bl	8001804 <Get_AdcHandle>
 800826c:	4603      	mov	r3, r0
 800826e:	4618      	mov	r0, r3
 8008270:	f7fa fb55 	bl	800291e <HAL_ADC_GetValue>
 8008274:	4603      	mov	r3, r0
 8008276:	82fb      	strh	r3, [r7, #22]
	}
	return result;
 8008278:	8afb      	ldrh	r3, [r7, #22]
}
 800827a:	4618      	mov	r0, r3
 800827c:	3718      	adds	r7, #24
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
	...

08008284 <AdcRead_VBatt>:


uint16_t AdcRead_VBatt(void)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, ADC_SW_Pin, GPIO_PIN_RESET);
 8008288:	2200      	movs	r2, #0
 800828a:	2180      	movs	r1, #128	; 0x80
 800828c:	480a      	ldr	r0, [pc, #40]	; (80082b8 <AdcRead_VBatt+0x34>)
 800828e:	f7fb fa07 	bl	80036a0 <HAL_GPIO_WritePin>
	adcResult = ReadADCChannel(ADC_CHANNEL_2); // * 3.3 * 23) / (4096 * 13);
 8008292:	480a      	ldr	r0, [pc, #40]	; (80082bc <AdcRead_VBatt+0x38>)
 8008294:	f7ff ff9a 	bl	80081cc <ReadADCChannel>
 8008298:	4603      	mov	r3, r0
 800829a:	4618      	mov	r0, r3
 800829c:	f7f8 fd32 	bl	8000d04 <__aeabi_ui2f>
 80082a0:	4603      	mov	r3, r0
 80082a2:	4a07      	ldr	r2, [pc, #28]	; (80082c0 <AdcRead_VBatt+0x3c>)
 80082a4:	6013      	str	r3, [r2, #0]
	return adcResult;
 80082a6:	4b06      	ldr	r3, [pc, #24]	; (80082c0 <AdcRead_VBatt+0x3c>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7f8 fd82 	bl	8000db4 <__aeabi_f2uiz>
 80082b0:	4603      	mov	r3, r0
 80082b2:	b29b      	uxth	r3, r3
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	48000400 	.word	0x48000400
 80082bc:	08000004 	.word	0x08000004
 80082c0:	20000c4c 	.word	0x20000c4c

080082c4 <commandReadDeviceId>:


char DataBuffer[200];

void commandReadDeviceId(char *data)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b096      	sub	sp, #88	; 0x58
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  /* Read MCU Id, 32-bit access */
  uint8_t i;
  char DeviceId[50];
  uint8_t serialNumber[12]={0};
 80082cc:	2300      	movs	r3, #0
 80082ce:	61bb      	str	r3, [r7, #24]
 80082d0:	f107 031c 	add.w	r3, r7, #28
 80082d4:	2200      	movs	r2, #0
 80082d6:	601a      	str	r2, [r3, #0]
 80082d8:	605a      	str	r2, [r3, #4]
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = HAL_GetUIDw0();
 80082da:	f7f9 feed 	bl	80020b8 <HAL_GetUIDw0>
 80082de:	4603      	mov	r3, r0
 80082e0:	617b      	str	r3, [r7, #20]
  deviceserial1 = HAL_GetUIDw1();
 80082e2:	f7f9 fef3 	bl	80020cc <HAL_GetUIDw1>
 80082e6:	4603      	mov	r3, r0
 80082e8:	613b      	str	r3, [r7, #16]
  deviceserial2 = HAL_GetUIDw2();
 80082ea:	f7f9 fef9 	bl	80020e0 <HAL_GetUIDw2>
 80082ee:	4603      	mov	r3, r0
 80082f0:	60fb      	str	r3, [r7, #12]
  memset(serialNumber, 0, 12);
 80082f2:	f107 0318 	add.w	r3, r7, #24
 80082f6:	220c      	movs	r2, #12
 80082f8:	2100      	movs	r1, #0
 80082fa:	4618      	mov	r0, r3
 80082fc:	f003 f8ef 	bl	800b4de <memset>
 8008300:	697b      	ldr	r3, [r7, #20]
  memcpy(&serialNumber[0], &deviceserial0, 4);
 8008302:	61bb      	str	r3, [r7, #24]
 8008304:	693b      	ldr	r3, [r7, #16]
  memcpy(&serialNumber[4], &deviceserial1, 4);
 8008306:	61fb      	str	r3, [r7, #28]
 8008308:	68fb      	ldr	r3, [r7, #12]
  memcpy(&serialNumber[8], &deviceserial2, 4);
 800830a:	623b      	str	r3, [r7, #32]
  snprintf(DeviceId, sizeof(DeviceId), "OK,STDEVICEID,");
 800830c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008310:	4a1e      	ldr	r2, [pc, #120]	; (800838c <commandReadDeviceId+0xc8>)
 8008312:	2132      	movs	r1, #50	; 0x32
 8008314:	4618      	mov	r0, r3
 8008316:	f003 fe55 	bl	800bfc4 <sniprintf>
  serialPutStr(DeviceId);
 800831a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800831e:	4618      	mov	r0, r3
 8008320:	f000 f986 	bl	8008630 <serialPutStr>
  for(i=0; i<12; i++)
 8008324:	2300      	movs	r3, #0
 8008326:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800832a:	e026      	b.n	800837a <commandReadDeviceId+0xb6>
  {
    i < 11 ? snprintf(DeviceId, sizeof(DeviceId), "%x", serialNumber[i]) : snprintf(DeviceId, sizeof(DeviceId), "%d\n", serialNumber[i]);
 800832c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008330:	2b0a      	cmp	r3, #10
 8008332:	d80c      	bhi.n	800834e <commandReadDeviceId+0x8a>
 8008334:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008338:	3358      	adds	r3, #88	; 0x58
 800833a:	443b      	add	r3, r7
 800833c:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8008340:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008344:	4a12      	ldr	r2, [pc, #72]	; (8008390 <commandReadDeviceId+0xcc>)
 8008346:	2132      	movs	r1, #50	; 0x32
 8008348:	f003 fe3c 	bl	800bfc4 <sniprintf>
 800834c:	e00b      	b.n	8008366 <commandReadDeviceId+0xa2>
 800834e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008352:	3358      	adds	r3, #88	; 0x58
 8008354:	443b      	add	r3, r7
 8008356:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 800835a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800835e:	4a0d      	ldr	r2, [pc, #52]	; (8008394 <commandReadDeviceId+0xd0>)
 8008360:	2132      	movs	r1, #50	; 0x32
 8008362:	f003 fe2f 	bl	800bfc4 <sniprintf>
    serialPutStr(DeviceId);
 8008366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800836a:	4618      	mov	r0, r3
 800836c:	f000 f960 	bl	8008630 <serialPutStr>
  for(i=0; i<12; i++)
 8008370:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008374:	3301      	adds	r3, #1
 8008376:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800837a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800837e:	2b0b      	cmp	r3, #11
 8008380:	d9d4      	bls.n	800832c <commandReadDeviceId+0x68>
  }
}
 8008382:	bf00      	nop
 8008384:	bf00      	nop
 8008386:	3758      	adds	r7, #88	; 0x58
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}
 800838c:	0800f0c0 	.word	0x0800f0c0
 8008390:	0800f0d0 	.word	0x0800f0d0
 8008394:	0800f0d4 	.word	0x0800f0d4

08008398 <commandReadDeviceBattery>:


void commandReadDeviceBattery(char *data)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]

	 serialPutStr("OK,BATTREAD");
 80083a0:	4808      	ldr	r0, [pc, #32]	; (80083c4 <commandReadDeviceBattery+0x2c>)
 80083a2:	f000 f945 	bl	8008630 <serialPutStr>
	 sprintf(DataBuffer,"OK,BATTREAD %d",AdcRead_VBatt());
 80083a6:	f7ff ff6d 	bl	8008284 <AdcRead_VBatt>
 80083aa:	4603      	mov	r3, r0
 80083ac:	461a      	mov	r2, r3
 80083ae:	4906      	ldr	r1, [pc, #24]	; (80083c8 <commandReadDeviceBattery+0x30>)
 80083b0:	4806      	ldr	r0, [pc, #24]	; (80083cc <commandReadDeviceBattery+0x34>)
 80083b2:	f003 fe3b 	bl	800c02c <siprintf>
	 serialPutStr(DataBuffer);
 80083b6:	4805      	ldr	r0, [pc, #20]	; (80083cc <commandReadDeviceBattery+0x34>)
 80083b8:	f000 f93a 	bl	8008630 <serialPutStr>
}
 80083bc:	bf00      	nop
 80083be:	3708      	adds	r7, #8
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	0800f0d8 	.word	0x0800f0d8
 80083c8:	0800f0e4 	.word	0x0800f0e4
 80083cc:	20000c50 	.word	0x20000c50

080083d0 <commandInvalid>:

void commandInvalid(char *data)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  serialPutStr("ERROR,Invalid Command Handler!\n");
 80083d8:	4803      	ldr	r0, [pc, #12]	; (80083e8 <commandInvalid+0x18>)
 80083da:	f000 f929 	bl	8008630 <serialPutStr>
}
 80083de:	bf00      	nop
 80083e0:	3708      	adds	r7, #8
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	0800f0f4 	.word	0x0800f0f4

080083ec <commandGetTime>:

char dateTime[100];
void commandGetTime(char *data)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
	RTC_TimeShow(dateTime);
 80083f4:	4806      	ldr	r0, [pc, #24]	; (8008410 <commandGetTime+0x24>)
 80083f6:	f000 f8dd 	bl	80085b4 <RTC_TimeShow>
	serialPutStr("OK,GETTIME\n");
 80083fa:	4806      	ldr	r0, [pc, #24]	; (8008414 <commandGetTime+0x28>)
 80083fc:	f000 f918 	bl	8008630 <serialPutStr>
	serialPutStr(dateTime);
 8008400:	4803      	ldr	r0, [pc, #12]	; (8008410 <commandGetTime+0x24>)
 8008402:	f000 f915 	bl	8008630 <serialPutStr>

}
 8008406:	bf00      	nop
 8008408:	3708      	adds	r7, #8
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	20000d18 	.word	0x20000d18
 8008414:	0800f114 	.word	0x0800f114

08008418 <commandGetDate>:

void commandGetDate(char *data)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
	RTC_DateShow(dateTime);
 8008420:	4806      	ldr	r0, [pc, #24]	; (800843c <commandGetDate+0x24>)
 8008422:	f000 f8e5 	bl	80085f0 <RTC_DateShow>
    serialPutStr("OK,GETDATE\n");
 8008426:	4806      	ldr	r0, [pc, #24]	; (8008440 <commandGetDate+0x28>)
 8008428:	f000 f902 	bl	8008630 <serialPutStr>
    serialPutStr(dateTime);
 800842c:	4803      	ldr	r0, [pc, #12]	; (800843c <commandGetDate+0x24>)
 800842e:	f000 f8ff 	bl	8008630 <serialPutStr>
}
 8008432:	bf00      	nop
 8008434:	3708      	adds	r7, #8
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	20000d18 	.word	0x20000d18
 8008440:	0800f120 	.word	0x0800f120

08008444 <commandGetDistance>:

char sonarBuffer[100];
void commandGetDistance(char *data)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(MB_PWR_GPIO_Port, MB_PWR_Pin, GPIO_PIN_SET);
 800844c:	2201      	movs	r2, #1
 800844e:	2101      	movs	r1, #1
 8008450:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008454:	f7fb f924 	bl	80036a0 <HAL_GPIO_WritePin>
	sprintf(sonarBuffer,"OK,DISTREAD %d",getSonarDistance());
 8008458:	f000 f812 	bl	8008480 <getSonarDistance>
 800845c:	4603      	mov	r3, r0
 800845e:	461a      	mov	r2, r3
 8008460:	4905      	ldr	r1, [pc, #20]	; (8008478 <commandGetDistance+0x34>)
 8008462:	4806      	ldr	r0, [pc, #24]	; (800847c <commandGetDistance+0x38>)
 8008464:	f003 fde2 	bl	800c02c <siprintf>
	serialPutStr(sonarBuffer);
 8008468:	4804      	ldr	r0, [pc, #16]	; (800847c <commandGetDistance+0x38>)
 800846a:	f000 f8e1 	bl	8008630 <serialPutStr>
}
 800846e:	bf00      	nop
 8008470:	3708      	adds	r7, #8
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop
 8008478:	0800f12c 	.word	0x0800f12c
 800847c:	20000d7c 	.word	0x20000d7c

08008480 <getSonarDistance>:
 */

#include "Maxbotix.h"


uint16_t getSonarDistance(void){
 8008480:	b5b0      	push	{r4, r5, r7, lr}
 8008482:	b086      	sub	sp, #24
 8008484:	af00      	add	r7, sp, #0
	  unsigned char RxBuffer[4];
	  bool newData = false;
 8008486:	2300      	movs	r3, #0
 8008488:	75fb      	strb	r3, [r7, #23]
	  uint16_t dist_mm = 0;
 800848a:	2300      	movs	r3, #0
 800848c:	82bb      	strh	r3, [r7, #20]
	  unsigned char rx;
	  uint8_t tries = 0;
 800848e:	2300      	movs	r3, #0
 8008490:	74fb      	strb	r3, [r7, #19]
	  do {
	    HAL_GPIO_WritePin(MB_CTL_GPIO_Port, MB_CTL_Pin, GPIO_PIN_SET);
 8008492:	2201      	movs	r2, #1
 8008494:	2101      	movs	r1, #1
 8008496:	4844      	ldr	r0, [pc, #272]	; (80085a8 <getSonarDistance+0x128>)
 8008498:	f7fb f902 	bl	80036a0 <HAL_GPIO_WritePin>
	    HAL_Delay(1); // todo: implement HAL_Delay_Microseconds()
 800849c:	2001      	movs	r0, #1
 800849e:	f7f9 fde7 	bl	8002070 <HAL_Delay>
	    HAL_GPIO_WritePin(MB_CTL_GPIO_Port, MB_CTL_Pin, GPIO_PIN_RESET);
 80084a2:	2200      	movs	r2, #0
 80084a4:	2101      	movs	r1, #1
 80084a6:	4840      	ldr	r0, [pc, #256]	; (80085a8 <getSonarDistance+0x128>)
 80084a8:	f7fb f8fa 	bl	80036a0 <HAL_GPIO_WritePin>
	    if (HAL_UART_Receive(Get_SonarHandle(), (uint8_t *)&rx, 1, 20) == HAL_OK) {
 80084ac:	f7f9 f9be 	bl	800182c <Get_SonarHandle>
 80084b0:	1df9      	adds	r1, r7, #7
 80084b2:	2314      	movs	r3, #20
 80084b4:	2201      	movs	r2, #1
 80084b6:	f7fd fe0d 	bl	80060d4 <HAL_UART_Receive>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d160      	bne.n	8008582 <getSonarDistance+0x102>
	      if ((char)rx == 'R') {
 80084c0:	79fb      	ldrb	r3, [r7, #7]
 80084c2:	2b52      	cmp	r3, #82	; 0x52
 80084c4:	d15a      	bne.n	800857c <getSonarDistance+0xfc>
	        if (HAL_UART_Receive(Get_SonarHandle(), (uint8_t *)&RxBuffer, 4, 20) == HAL_OK) {
 80084c6:	f7f9 f9b1 	bl	800182c <Get_SonarHandle>
 80084ca:	f107 0108 	add.w	r1, r7, #8
 80084ce:	2314      	movs	r3, #20
 80084d0:	2204      	movs	r2, #4
 80084d2:	f7fd fdff 	bl	80060d4 <HAL_UART_Receive>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d155      	bne.n	8008588 <getSonarDistance+0x108>
	          if (isdigit(RxBuffer[3])) {
 80084dc:	7afb      	ldrb	r3, [r7, #11]
 80084de:	3301      	adds	r3, #1
 80084e0:	4a32      	ldr	r2, [pc, #200]	; (80085ac <getSonarDistance+0x12c>)
 80084e2:	4413      	add	r3, r2
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	f003 0304 	and.w	r3, r3, #4
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d001      	beq.n	80084f2 <getSonarDistance+0x72>
	            newData = true;
 80084ee:	2301      	movs	r3, #1
 80084f0:	75fb      	strb	r3, [r7, #23]
	          }
	          if (newData) {
 80084f2:	7dfb      	ldrb	r3, [r7, #23]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d047      	beq.n	8008588 <getSonarDistance+0x108>
	            for (int i = 0; i < 4; i++)
 80084f8:	2300      	movs	r3, #0
 80084fa:	60fb      	str	r3, [r7, #12]
 80084fc:	e035      	b.n	800856a <getSonarDistance+0xea>
	              dist_mm += (RxBuffer[3 - i] - '0') * pow(10, i);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f1c3 0303 	rsb	r3, r3, #3
 8008504:	3318      	adds	r3, #24
 8008506:	443b      	add	r3, r7
 8008508:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800850c:	3b30      	subs	r3, #48	; 0x30
 800850e:	4618      	mov	r0, r3
 8008510:	f7f7 ffe0 	bl	80004d4 <__aeabi_i2d>
 8008514:	4604      	mov	r4, r0
 8008516:	460d      	mov	r5, r1
 8008518:	68f8      	ldr	r0, [r7, #12]
 800851a:	f7f7 ffdb 	bl	80004d4 <__aeabi_i2d>
 800851e:	4602      	mov	r2, r0
 8008520:	460b      	mov	r3, r1
 8008522:	f04f 0000 	mov.w	r0, #0
 8008526:	4922      	ldr	r1, [pc, #136]	; (80085b0 <getSonarDistance+0x130>)
 8008528:	f005 feac 	bl	800e284 <pow>
 800852c:	4602      	mov	r2, r0
 800852e:	460b      	mov	r3, r1
 8008530:	4620      	mov	r0, r4
 8008532:	4629      	mov	r1, r5
 8008534:	f7f8 f838 	bl	80005a8 <__aeabi_dmul>
 8008538:	4602      	mov	r2, r0
 800853a:	460b      	mov	r3, r1
 800853c:	4614      	mov	r4, r2
 800853e:	461d      	mov	r5, r3
 8008540:	8abb      	ldrh	r3, [r7, #20]
 8008542:	4618      	mov	r0, r3
 8008544:	f7f7 ffc6 	bl	80004d4 <__aeabi_i2d>
 8008548:	4602      	mov	r2, r0
 800854a:	460b      	mov	r3, r1
 800854c:	4620      	mov	r0, r4
 800854e:	4629      	mov	r1, r5
 8008550:	f7f7 fe74 	bl	800023c <__adddf3>
 8008554:	4602      	mov	r2, r0
 8008556:	460b      	mov	r3, r1
 8008558:	4610      	mov	r0, r2
 800855a:	4619      	mov	r1, r3
 800855c:	f7f8 fafc 	bl	8000b58 <__aeabi_d2uiz>
 8008560:	4603      	mov	r3, r0
 8008562:	82bb      	strh	r3, [r7, #20]
	            for (int i = 0; i < 4; i++)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	3301      	adds	r3, #1
 8008568:	60fb      	str	r3, [r7, #12]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2b03      	cmp	r3, #3
 800856e:	ddc6      	ble.n	80084fe <getSonarDistance+0x7e>
	            if (dist_mm==0)
 8008570:	8abb      	ldrh	r3, [r7, #20]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d108      	bne.n	8008588 <getSonarDistance+0x108>
	            	newData = false;
 8008576:	2300      	movs	r3, #0
 8008578:	75fb      	strb	r3, [r7, #23]
 800857a:	e005      	b.n	8008588 <getSonarDistance+0x108>
	          }
	        }
	      } else {
	        newData = false;
 800857c:	2300      	movs	r3, #0
 800857e:	75fb      	strb	r3, [r7, #23]
 8008580:	e002      	b.n	8008588 <getSonarDistance+0x108>
	      }
	    } else {
	      tries++;
 8008582:	7cfb      	ldrb	r3, [r7, #19]
 8008584:	3301      	adds	r3, #1
 8008586:	74fb      	strb	r3, [r7, #19]
	    }
	  } while (newData == false && tries < MAX_SONAR_TRIES - 1);
 8008588:	7dfb      	ldrb	r3, [r7, #23]
 800858a:	f083 0301 	eor.w	r3, r3, #1
 800858e:	b2db      	uxtb	r3, r3
 8008590:	2b00      	cmp	r3, #0
 8008592:	d003      	beq.n	800859c <getSonarDistance+0x11c>
 8008594:	7cfb      	ldrb	r3, [r7, #19]
 8008596:	2b03      	cmp	r3, #3
 8008598:	f67f af7b 	bls.w	8008492 <getSonarDistance+0x12>
	  return dist_mm;
 800859c:	8abb      	ldrh	r3, [r7, #20]
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3718      	adds	r7, #24
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bdb0      	pop	{r4, r5, r7, pc}
 80085a6:	bf00      	nop
 80085a8:	48000800 	.word	0x48000800
 80085ac:	0800f8dc 	.word	0x0800f8dc
 80085b0:	40240000 	.word	0x40240000

080085b4 <RTC_TimeShow>:
  * @brief  Display the current time.
  * @param  showtime : pointer to buffer
  * @retval None
  */
void RTC_TimeShow(char *showtime)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b08a      	sub	sp, #40	; 0x28
 80085b8:	af02      	add	r7, sp, #8
 80085ba:	6078      	str	r0, [r7, #4]

  RTC_TimeTypeDef stimestructureget;
  /* Get the RTC current Time */
  HAL_RTC_GetTime(Get_RtcHandle(), &stimestructureget, RTC_FORMAT_BIN);
 80085bc:	f7f9 f940 	bl	8001840 <Get_RtcHandle>
 80085c0:	f107 030c 	add.w	r3, r7, #12
 80085c4:	2200      	movs	r2, #0
 80085c6:	4619      	mov	r1, r3
 80085c8:	f7fc fdea 	bl	80051a0 <HAL_RTC_GetTime>

  /* Display time Format : hh:mm:ss */
  sprintf((char *)showtime, "%02d:%02d:%02d", stimestructureget.Hours, stimestructureget.Minutes, stimestructureget.Seconds);
 80085cc:	7b3b      	ldrb	r3, [r7, #12]
 80085ce:	461a      	mov	r2, r3
 80085d0:	7b7b      	ldrb	r3, [r7, #13]
 80085d2:	4619      	mov	r1, r3
 80085d4:	7bbb      	ldrb	r3, [r7, #14]
 80085d6:	9300      	str	r3, [sp, #0]
 80085d8:	460b      	mov	r3, r1
 80085da:	4904      	ldr	r1, [pc, #16]	; (80085ec <RTC_TimeShow+0x38>)
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f003 fd25 	bl	800c02c <siprintf>
}
 80085e2:	bf00      	nop
 80085e4:	3720      	adds	r7, #32
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop
 80085ec:	0800f13c 	.word	0x0800f13c

080085f0 <RTC_DateShow>:
  * @brief  Display the current time.
  * @param  showtime : pointer to buffer
  * @retval None
  */
void RTC_DateShow(char *showdate)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b086      	sub	sp, #24
 80085f4:	af02      	add	r7, sp, #8
 80085f6:	6078      	str	r0, [r7, #4]
  RTC_DateTypeDef sdatestructureget;

  /* Get the RTC current Date */
  HAL_RTC_GetDate(Get_RtcHandle(), &sdatestructureget, RTC_FORMAT_BIN);
 80085f8:	f7f9 f922 	bl	8001840 <Get_RtcHandle>
 80085fc:	f107 030c 	add.w	r3, r7, #12
 8008600:	2200      	movs	r2, #0
 8008602:	4619      	mov	r1, r3
 8008604:	f7fc feb4 	bl	8005370 <HAL_RTC_GetDate>
  /* Display date Format: mm-dd-yy */
  sprintf((char *)showdate, "%02d:%02d:%02d", sdatestructureget.Date, sdatestructureget.Month, 2000 + sdatestructureget.Year);
 8008608:	7bbb      	ldrb	r3, [r7, #14]
 800860a:	461a      	mov	r2, r3
 800860c:	7b7b      	ldrb	r3, [r7, #13]
 800860e:	4619      	mov	r1, r3
 8008610:	7bfb      	ldrb	r3, [r7, #15]
 8008612:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8008616:	9300      	str	r3, [sp, #0]
 8008618:	460b      	mov	r3, r1
 800861a:	4904      	ldr	r1, [pc, #16]	; (800862c <RTC_DateShow+0x3c>)
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f003 fd05 	bl	800c02c <siprintf>
}
 8008622:	bf00      	nop
 8008624:	3710      	adds	r7, #16
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	0800f13c 	.word	0x0800f13c

08008630 <serialPutStr>:

#include "Uart.h"


void serialPutStr(const char *data)
{
 8008630:	b590      	push	{r4, r7, lr}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
   //Get exclusive access
  //osAcquireMutex(&uartMutex);
  HAL_UART_Transmit(Get_DebugHandle(),(uint8_t *)data, strlen(data),DEBUG_UART_TIMEOUT);
 8008638:	f7f9 f8ee 	bl	8001818 <Get_DebugHandle>
 800863c:	4604      	mov	r4, r0
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f7f7 fd9e 	bl	8000180 <strlen>
 8008644:	4603      	mov	r3, r0
 8008646:	b29a      	uxth	r2, r3
 8008648:	230a      	movs	r3, #10
 800864a:	6879      	ldr	r1, [r7, #4]
 800864c:	4620      	mov	r0, r4
 800864e:	f7fd fcbb 	bl	8005fc8 <HAL_UART_Transmit>
  //osReleaseMutex(&uartMutex);

}
 8008652:	bf00      	nop
 8008654:	370c      	adds	r7, #12
 8008656:	46bd      	mov	sp, r7
 8008658:	bd90      	pop	{r4, r7, pc}
	...

0800865c <terminalTaskHandler>:



/* USER CODE END Header_terminalTaskHandler */
void terminalTaskHandler(void const * argument)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	int tCommandReady = 0;
 8008664:	2300      	movs	r3, #0
 8008666:	60fb      	str	r3, [r7, #12]
	char tRxedChar;
	HAL_UART_Receive_IT(Get_DebugHandle(),(uint8_t*)uartData,UART_RECEIVE_SIZE);
 8008668:	f7f9 f8d6 	bl	8001818 <Get_DebugHandle>
 800866c:	4603      	mov	r3, r0
 800866e:	2201      	movs	r2, #1
 8008670:	4911      	ldr	r1, [pc, #68]	; (80086b8 <terminalTaskHandler+0x5c>)
 8008672:	4618      	mov	r0, r3
 8008674:	f7fd fdf2 	bl	800625c <HAL_UART_Receive_IT>
	//HAL_UART_Receive_IT(Get_SonarHandle(),(uint8_t*)uartSonic,UART_RECEIVE_SIZE);

	/* Infinite loop */
	serialPutStr("Terminal Thread Initialized");
 8008678:	4810      	ldr	r0, [pc, #64]	; (80086bc <terminalTaskHandler+0x60>)
 800867a:	f7ff ffd9 	bl	8008630 <serialPutStr>
	for(;;)
	{
		/* Process Terminal Commands */
		if(xQueueReceive(Get_TerminalQueueHandle(),&tRxedChar,QUEUE_TIMEOUT))
 800867e:	f7f9 f8e9 	bl	8001854 <Get_TerminalQueueHandle>
 8008682:	f107 030b 	add.w	r3, r7, #11
 8008686:	220a      	movs	r2, #10
 8008688:	4619      	mov	r1, r3
 800868a:	f000 fd79 	bl	8009180 <xQueueReceive>
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00c      	beq.n	80086ae <terminalTaskHandler+0x52>
		{
			tCommandReady = CommandLineBuildCommand(tRxedChar);
 8008694:	7afb      	ldrb	r3, [r7, #11]
 8008696:	4618      	mov	r0, r3
 8008698:	f000 f814 	bl	80086c4 <CommandLineBuildCommand>
 800869c:	60f8      	str	r0, [r7, #12]
			if(tCommandReady)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d004      	beq.n	80086ae <terminalTaskHandler+0x52>
			{
				CommandLineProcessCommand(gCommandBuffer);
 80086a4:	4806      	ldr	r0, [pc, #24]	; (80086c0 <terminalTaskHandler+0x64>)
 80086a6:	f000 f855 	bl	8008754 <CommandLineProcessCommand>
				tCommandReady = 0;
 80086aa:	2300      	movs	r3, #0
 80086ac:	60fb      	str	r3, [r7, #12]
			}
		}
		osDelay(1);
 80086ae:	2001      	movs	r0, #1
 80086b0:	f000 f940 	bl	8008934 <osDelay>
		if(xQueueReceive(Get_TerminalQueueHandle(),&tRxedChar,QUEUE_TIMEOUT))
 80086b4:	e7e3      	b.n	800867e <terminalTaskHandler+0x22>
 80086b6:	bf00      	nop
 80086b8:	20000de4 	.word	0x20000de4
 80086bc:	0800f180 	.word	0x0800f180
 80086c0:	20000dec 	.word	0x20000dec

080086c4 <CommandLineBuildCommand>:
}


static uint16_t commandBuilderIdx = 0;
int CommandLineBuildCommand(char nextChar)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	4603      	mov	r3, r0
 80086cc:	71fb      	strb	r3, [r7, #7]
	/* Don't store any new line characters or spaces. */
	if ((nextChar == '\n') || (nextChar == ' ') || (nextChar == '\t'))
 80086ce:	79fb      	ldrb	r3, [r7, #7]
 80086d0:	2b0a      	cmp	r3, #10
 80086d2:	d005      	beq.n	80086e0 <CommandLineBuildCommand+0x1c>
 80086d4:	79fb      	ldrb	r3, [r7, #7]
 80086d6:	2b20      	cmp	r3, #32
 80086d8:	d002      	beq.n	80086e0 <CommandLineBuildCommand+0x1c>
 80086da:	79fb      	ldrb	r3, [r7, #7]
 80086dc:	2b09      	cmp	r3, #9
 80086de:	d101      	bne.n	80086e4 <CommandLineBuildCommand+0x20>
	{
		return false;
 80086e0:	2300      	movs	r3, #0
 80086e2:	e02d      	b.n	8008740 <CommandLineBuildCommand+0x7c>
	}
	/* The completed command has been received. Replace the final carriage
	 * return character with a NULL character to help with processing the
	 * command. */
	if (nextChar == '\r')
 80086e4:	79fb      	ldrb	r3, [r7, #7]
 80086e6:	2b0d      	cmp	r3, #13
 80086e8:	d10a      	bne.n	8008700 <CommandLineBuildCommand+0x3c>
	{
		gCommandBuffer[commandBuilderIdx] = '\0';
 80086ea:	4b18      	ldr	r3, [pc, #96]	; (800874c <CommandLineBuildCommand+0x88>)
 80086ec:	881b      	ldrh	r3, [r3, #0]
 80086ee:	461a      	mov	r2, r3
 80086f0:	4b17      	ldr	r3, [pc, #92]	; (8008750 <CommandLineBuildCommand+0x8c>)
 80086f2:	2100      	movs	r1, #0
 80086f4:	5499      	strb	r1, [r3, r2]
		commandBuilderIdx = 0;
 80086f6:	4b15      	ldr	r3, [pc, #84]	; (800874c <CommandLineBuildCommand+0x88>)
 80086f8:	2200      	movs	r2, #0
 80086fa:	801a      	strh	r2, [r3, #0]
		return true;
 80086fc:	2301      	movs	r3, #1
 80086fe:	e01f      	b.n	8008740 <CommandLineBuildCommand+0x7c>
	}
	/* Convert the incoming character to uppercase. This matches the case
	 * of commands in the command table. Then store the received character
	 * in the command buffer. */
	gCommandBuffer[commandBuilderIdx] = TO_UPPER(nextChar);
 8008700:	79fb      	ldrb	r3, [r7, #7]
 8008702:	2b60      	cmp	r3, #96	; 0x60
 8008704:	d906      	bls.n	8008714 <CommandLineBuildCommand+0x50>
 8008706:	79fb      	ldrb	r3, [r7, #7]
 8008708:	2b7a      	cmp	r3, #122	; 0x7a
 800870a:	d803      	bhi.n	8008714 <CommandLineBuildCommand+0x50>
 800870c:	79fb      	ldrb	r3, [r7, #7]
 800870e:	3b20      	subs	r3, #32
 8008710:	b2db      	uxtb	r3, r3
 8008712:	e000      	b.n	8008716 <CommandLineBuildCommand+0x52>
 8008714:	79fb      	ldrb	r3, [r7, #7]
 8008716:	4a0d      	ldr	r2, [pc, #52]	; (800874c <CommandLineBuildCommand+0x88>)
 8008718:	8812      	ldrh	r2, [r2, #0]
 800871a:	4611      	mov	r1, r2
 800871c:	4a0c      	ldr	r2, [pc, #48]	; (8008750 <CommandLineBuildCommand+0x8c>)
 800871e:	5453      	strb	r3, [r2, r1]
	commandBuilderIdx++;
 8008720:	4b0a      	ldr	r3, [pc, #40]	; (800874c <CommandLineBuildCommand+0x88>)
 8008722:	881b      	ldrh	r3, [r3, #0]
 8008724:	3301      	adds	r3, #1
 8008726:	b29a      	uxth	r2, r3
 8008728:	4b08      	ldr	r3, [pc, #32]	; (800874c <CommandLineBuildCommand+0x88>)
 800872a:	801a      	strh	r2, [r3, #0]
	/* If the command is too long, reset the index and process
	 * the current command buffer. */
	if (commandBuilderIdx >= MAX_COMMAND_LEN)
 800872c:	4b07      	ldr	r3, [pc, #28]	; (800874c <CommandLineBuildCommand+0x88>)
 800872e:	881b      	ldrh	r3, [r3, #0]
 8008730:	2b77      	cmp	r3, #119	; 0x77
 8008732:	d904      	bls.n	800873e <CommandLineBuildCommand+0x7a>
	{
		commandBuilderIdx = 0;
 8008734:	4b05      	ldr	r3, [pc, #20]	; (800874c <CommandLineBuildCommand+0x88>)
 8008736:	2200      	movs	r2, #0
 8008738:	801a      	strh	r2, [r3, #0]
		return true;
 800873a:	2301      	movs	r3, #1
 800873c:	e000      	b.n	8008740 <CommandLineBuildCommand+0x7c>
	}

	return false;
 800873e:	2300      	movs	r3, #0

}
 8008740:	4618      	mov	r0, r3
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	bc80      	pop	{r7}
 8008748:	4770      	bx	lr
 800874a:	bf00      	nop
 800874c:	20000ed0 	.word	0x20000ed0
 8008750:	20000dec 	.word	0x20000dec

08008754 <CommandLineProcessCommand>:

void CommandLineProcessCommand(char * buffer)
{
 8008754:	b590      	push	{r4, r7, lr}
 8008756:	b087      	sub	sp, #28
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]

	int idx;
	int CommandFound = false;
 800875c:	2300      	movs	r3, #0
 800875e:	613b      	str	r3, [r7, #16]
	//char *Com= strtok(buffer,"+");
	char *Arg = strtok(NULL,"+");
 8008760:	491e      	ldr	r1, [pc, #120]	; (80087dc <CommandLineProcessCommand+0x88>)
 8008762:	2000      	movs	r0, #0
 8008764:	f003 fcda 	bl	800c11c <strtok>
 8008768:	60f8      	str	r0, [r7, #12]

	/* Search for the command in the command table until it is found or
	 * the end of the table is reached. If the command is found, break
	 * out of the loop. */
	for (idx = 0; gCommandTable[idx].name != NULL; idx++)
 800876a:	2300      	movs	r3, #0
 800876c:	617b      	str	r3, [r7, #20]
 800876e:	e020      	b.n	80087b2 <CommandLineProcessCommand+0x5e>
	{
		if (strncmp(gCommandTable[idx].name, buffer,strlen(gCommandTable[idx].name)) == 0)
 8008770:	4a1b      	ldr	r2, [pc, #108]	; (80087e0 <CommandLineProcessCommand+0x8c>)
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8008778:	4a19      	ldr	r2, [pc, #100]	; (80087e0 <CommandLineProcessCommand+0x8c>)
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008780:	4618      	mov	r0, r3
 8008782:	f7f7 fcfd 	bl	8000180 <strlen>
 8008786:	4603      	mov	r3, r0
 8008788:	461a      	mov	r2, r3
 800878a:	6879      	ldr	r1, [r7, #4]
 800878c:	4620      	mov	r0, r4
 800878e:	f003 fcb0 	bl	800c0f2 <strncmp>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d109      	bne.n	80087ac <CommandLineProcessCommand+0x58>
		{
			CommandFound = true;
 8008798:	2301      	movs	r3, #1
 800879a:	613b      	str	r3, [r7, #16]
			(*gCommandTable[idx].function)(Arg);
 800879c:	4a10      	ldr	r2, [pc, #64]	; (80087e0 <CommandLineProcessCommand+0x8c>)
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	00db      	lsls	r3, r3, #3
 80087a2:	4413      	add	r3, r2
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	68f8      	ldr	r0, [r7, #12]
 80087a8:	4798      	blx	r3
			break;
 80087aa:	e008      	b.n	80087be <CommandLineProcessCommand+0x6a>
	for (idx = 0; gCommandTable[idx].name != NULL; idx++)
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	3301      	adds	r3, #1
 80087b0:	617b      	str	r3, [r7, #20]
 80087b2:	4a0b      	ldr	r2, [pc, #44]	; (80087e0 <CommandLineProcessCommand+0x8c>)
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d1d8      	bne.n	8008770 <CommandLineProcessCommand+0x1c>
		}
	}
	/* If the command was found, call the command function. Otherwise,
	 * output an error message.*/
	if (CommandFound==false)
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d107      	bne.n	80087d4 <CommandLineProcessCommand+0x80>
	{
		snprintf(TerminalMsgBuffer, sizeof(TerminalMsgBuffer), "ERROR,Command not found\n");
 80087c4:	4a07      	ldr	r2, [pc, #28]	; (80087e4 <CommandLineProcessCommand+0x90>)
 80087c6:	2164      	movs	r1, #100	; 0x64
 80087c8:	4807      	ldr	r0, [pc, #28]	; (80087e8 <CommandLineProcessCommand+0x94>)
 80087ca:	f003 fbfb 	bl	800bfc4 <sniprintf>
		serialPutStr(TerminalMsgBuffer);
 80087ce:	4806      	ldr	r0, [pc, #24]	; (80087e8 <CommandLineProcessCommand+0x94>)
 80087d0:	f7ff ff2e 	bl	8008630 <serialPutStr>
	}
}
 80087d4:	bf00      	nop
 80087d6:	371c      	adds	r7, #28
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd90      	pop	{r4, r7, pc}
 80087dc:	0800f19c 	.word	0x0800f19c
 80087e0:	0800f29c 	.word	0x0800f29c
 80087e4:	0800f1a0 	.word	0x0800f1a0
 80087e8:	20000e68 	.word	0x20000e68

080087ec <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]

	if(huart->Instance==USART2)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a13      	ldr	r2, [pc, #76]	; (8008848 <HAL_UART_RxCpltCallback+0x5c>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d112      	bne.n	8008824 <HAL_UART_RxCpltCallback+0x38>
	{
		HAL_UART_Receive_IT(Get_DebugHandle(),(uint8_t*)uartData,UART_RECEIVE_SIZE);
 80087fe:	f7f9 f80b 	bl	8001818 <Get_DebugHandle>
 8008802:	4603      	mov	r3, r0
 8008804:	2201      	movs	r2, #1
 8008806:	4911      	ldr	r1, [pc, #68]	; (800884c <HAL_UART_RxCpltCallback+0x60>)
 8008808:	4618      	mov	r0, r3
 800880a:	f7fd fd27 	bl	800625c <HAL_UART_Receive_IT>
		cValuetoPost = (char)uartData[0];
 800880e:	4b0f      	ldr	r3, [pc, #60]	; (800884c <HAL_UART_RxCpltCallback+0x60>)
 8008810:	781a      	ldrb	r2, [r3, #0]
 8008812:	4b0f      	ldr	r3, [pc, #60]	; (8008850 <HAL_UART_RxCpltCallback+0x64>)
 8008814:	701a      	strb	r2, [r3, #0]
		xQueueSendToBackFromISR(Get_TerminalQueueHandle(),(void*)&cValuetoPost,&xHigherPrioritTaskWoken);
 8008816:	f7f9 f81d 	bl	8001854 <Get_TerminalQueueHandle>
 800881a:	2300      	movs	r3, #0
 800881c:	4a0d      	ldr	r2, [pc, #52]	; (8008854 <HAL_UART_RxCpltCallback+0x68>)
 800881e:	490c      	ldr	r1, [pc, #48]	; (8008850 <HAL_UART_RxCpltCallback+0x64>)
 8008820:	f000 fc16 	bl	8009050 <xQueueGenericSendFromISR>
	}
	if(huart->Instance==LPUART1)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a0b      	ldr	r2, [pc, #44]	; (8008858 <HAL_UART_RxCpltCallback+0x6c>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d107      	bne.n	800883e <HAL_UART_RxCpltCallback+0x52>
	{
		HAL_UART_Receive_IT(Get_SonarHandle(),(uint8_t*)uartSonic,UART_RECEIVE_SIZE);
 800882e:	f7f8 fffd 	bl	800182c <Get_SonarHandle>
 8008832:	4603      	mov	r3, r0
 8008834:	2201      	movs	r2, #1
 8008836:	4909      	ldr	r1, [pc, #36]	; (800885c <HAL_UART_RxCpltCallback+0x70>)
 8008838:	4618      	mov	r0, r3
 800883a:	f7fd fd0f 	bl	800625c <HAL_UART_Receive_IT>
		//cValuetoPost = (char)uartData[0];
		//xQueueSendToBackFromISR(Get_TerminalQueueHandle(),(void*)&cValuetoPost,&xHigherPrioritTaskWoken);
	}
	//HAL_UART_Receive_IT(Get_SonarHandle(),(uint8_t*)uartSonic,UART_RECEIVE_SIZE);
}
 800883e:	bf00      	nop
 8008840:	3708      	adds	r7, #8
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	40004400 	.word	0x40004400
 800884c:	20000de4 	.word	0x20000de4
 8008850:	20000de0 	.word	0x20000de0
 8008854:	20000ecc 	.word	0x20000ecc
 8008858:	40008000 	.word	0x40008000
 800885c:	20000de8 	.word	0x20000de8

08008860 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008860:	b480      	push	{r7}
 8008862:	b085      	sub	sp, #20
 8008864:	af00      	add	r7, sp, #0
 8008866:	4603      	mov	r3, r0
 8008868:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800886a:	2300      	movs	r3, #0
 800886c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800886e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008872:	2b84      	cmp	r3, #132	; 0x84
 8008874:	d005      	beq.n	8008882 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008876:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	4413      	add	r3, r2
 800887e:	3303      	adds	r3, #3
 8008880:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008882:	68fb      	ldr	r3, [r7, #12]
}
 8008884:	4618      	mov	r0, r3
 8008886:	3714      	adds	r7, #20
 8008888:	46bd      	mov	sp, r7
 800888a:	bc80      	pop	{r7}
 800888c:	4770      	bx	lr

0800888e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800888e:	b580      	push	{r7, lr}
 8008890:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008892:	f001 f89f 	bl	80099d4 <vTaskStartScheduler>
  
  return osOK;
 8008896:	2300      	movs	r3, #0
}
 8008898:	4618      	mov	r0, r3
 800889a:	bd80      	pop	{r7, pc}

0800889c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800889c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800889e:	b089      	sub	sp, #36	; 0x24
 80088a0:	af04      	add	r7, sp, #16
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	695b      	ldr	r3, [r3, #20]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d020      	beq.n	80088f0 <osThreadCreate+0x54>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	699b      	ldr	r3, [r3, #24]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d01c      	beq.n	80088f0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	685c      	ldr	r4, [r3, #4]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681d      	ldr	r5, [r3, #0]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	691e      	ldr	r6, [r3, #16]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80088c8:	4618      	mov	r0, r3
 80088ca:	f7ff ffc9 	bl	8008860 <makeFreeRtosPriority>
 80088ce:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	695b      	ldr	r3, [r3, #20]
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80088d8:	9202      	str	r2, [sp, #8]
 80088da:	9301      	str	r3, [sp, #4]
 80088dc:	9100      	str	r1, [sp, #0]
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	4632      	mov	r2, r6
 80088e2:	4629      	mov	r1, r5
 80088e4:	4620      	mov	r0, r4
 80088e6:	f000 fe97 	bl	8009618 <xTaskCreateStatic>
 80088ea:	4603      	mov	r3, r0
 80088ec:	60fb      	str	r3, [r7, #12]
 80088ee:	e01c      	b.n	800892a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	685c      	ldr	r4, [r3, #4]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80088fc:	b29e      	uxth	r6, r3
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008904:	4618      	mov	r0, r3
 8008906:	f7ff ffab 	bl	8008860 <makeFreeRtosPriority>
 800890a:	4602      	mov	r2, r0
 800890c:	f107 030c 	add.w	r3, r7, #12
 8008910:	9301      	str	r3, [sp, #4]
 8008912:	9200      	str	r2, [sp, #0]
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	4632      	mov	r2, r6
 8008918:	4629      	mov	r1, r5
 800891a:	4620      	mov	r0, r4
 800891c:	f000 fed9 	bl	80096d2 <xTaskCreate>
 8008920:	4603      	mov	r3, r0
 8008922:	2b01      	cmp	r3, #1
 8008924:	d001      	beq.n	800892a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008926:	2300      	movs	r3, #0
 8008928:	e000      	b.n	800892c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800892a:	68fb      	ldr	r3, [r7, #12]
}
 800892c:	4618      	mov	r0, r3
 800892e:	3714      	adds	r7, #20
 8008930:	46bd      	mov	sp, r7
 8008932:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008934 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d001      	beq.n	800894a <osDelay+0x16>
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	e000      	b.n	800894c <osDelay+0x18>
 800894a:	2301      	movs	r3, #1
 800894c:	4618      	mov	r0, r3
 800894e:	f001 f80d 	bl	800996c <vTaskDelay>
  
  return osOK;
 8008952:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008954:	4618      	mov	r0, r3
 8008956:	3710      	adds	r7, #16
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d007      	beq.n	800897c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	4619      	mov	r1, r3
 8008972:	2001      	movs	r0, #1
 8008974:	f000 fa53 	bl	8008e1e <xQueueCreateMutexStatic>
 8008978:	4603      	mov	r3, r0
 800897a:	e003      	b.n	8008984 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800897c:	2001      	movs	r0, #1
 800897e:	f000 fa36 	bl	8008dee <xQueueCreateMutex>
 8008982:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8008984:	4618      	mov	r0, r3
 8008986:	3708      	adds	r7, #8
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800898c:	b590      	push	{r4, r7, lr}
 800898e:	b085      	sub	sp, #20
 8008990:	af02      	add	r7, sp, #8
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d011      	beq.n	80089c2 <osMessageCreate+0x36>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	68db      	ldr	r3, [r3, #12]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d00d      	beq.n	80089c2 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6818      	ldr	r0, [r3, #0]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6859      	ldr	r1, [r3, #4]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	689a      	ldr	r2, [r3, #8]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	68db      	ldr	r3, [r3, #12]
 80089b6:	2400      	movs	r4, #0
 80089b8:	9400      	str	r4, [sp, #0]
 80089ba:	f000 f927 	bl	8008c0c <xQueueGenericCreateStatic>
 80089be:	4603      	mov	r3, r0
 80089c0:	e008      	b.n	80089d4 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6818      	ldr	r0, [r3, #0]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	2200      	movs	r2, #0
 80089cc:	4619      	mov	r1, r3
 80089ce:	f000 f995 	bl	8008cfc <xQueueGenericCreate>
 80089d2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	370c      	adds	r7, #12
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd90      	pop	{r4, r7, pc}

080089dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f103 0208 	add.w	r2, r3, #8
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f103 0208 	add.w	r2, r3, #8
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f103 0208 	add.w	r2, r3, #8
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008a10:	bf00      	nop
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bc80      	pop	{r7}
 8008a18:	4770      	bx	lr

08008a1a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008a1a:	b480      	push	{r7}
 8008a1c:	b083      	sub	sp, #12
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2200      	movs	r2, #0
 8008a26:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008a28:	bf00      	nop
 8008a2a:	370c      	adds	r7, #12
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bc80      	pop	{r7}
 8008a30:	4770      	bx	lr

08008a32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a32:	b480      	push	{r7}
 8008a34:	b085      	sub	sp, #20
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
 8008a3a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	68fa      	ldr	r2, [r7, #12]
 8008a46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	689a      	ldr	r2, [r3, #8]
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	683a      	ldr	r2, [r7, #0]
 8008a56:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	683a      	ldr	r2, [r7, #0]
 8008a5c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	1c5a      	adds	r2, r3, #1
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	601a      	str	r2, [r3, #0]
}
 8008a6e:	bf00      	nop
 8008a70:	3714      	adds	r7, #20
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bc80      	pop	{r7}
 8008a76:	4770      	bx	lr

08008a78 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a8e:	d103      	bne.n	8008a98 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	691b      	ldr	r3, [r3, #16]
 8008a94:	60fb      	str	r3, [r7, #12]
 8008a96:	e00c      	b.n	8008ab2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	3308      	adds	r3, #8
 8008a9c:	60fb      	str	r3, [r7, #12]
 8008a9e:	e002      	b.n	8008aa6 <vListInsert+0x2e>
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	60fb      	str	r3, [r7, #12]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	68ba      	ldr	r2, [r7, #8]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d2f6      	bcs.n	8008aa0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	685a      	ldr	r2, [r3, #4]
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	683a      	ldr	r2, [r7, #0]
 8008ac0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	68fa      	ldr	r2, [r7, #12]
 8008ac6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	683a      	ldr	r2, [r7, #0]
 8008acc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	1c5a      	adds	r2, r3, #1
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	601a      	str	r2, [r3, #0]
}
 8008ade:	bf00      	nop
 8008ae0:	3714      	adds	r7, #20
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bc80      	pop	{r7}
 8008ae6:	4770      	bx	lr

08008ae8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b085      	sub	sp, #20
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	691b      	ldr	r3, [r3, #16]
 8008af4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	6892      	ldr	r2, [r2, #8]
 8008afe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	6852      	ldr	r2, [r2, #4]
 8008b08:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d103      	bne.n	8008b1c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	689a      	ldr	r2, [r3, #8]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	1e5a      	subs	r2, r3, #1
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3714      	adds	r7, #20
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bc80      	pop	{r7}
 8008b38:	4770      	bx	lr
	...

08008b3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d10a      	bne.n	8008b66 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b54:	f383 8811 	msr	BASEPRI, r3
 8008b58:	f3bf 8f6f 	isb	sy
 8008b5c:	f3bf 8f4f 	dsb	sy
 8008b60:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008b62:	bf00      	nop
 8008b64:	e7fe      	b.n	8008b64 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008b66:	f002 f8b1 	bl	800accc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b72:	68f9      	ldr	r1, [r7, #12]
 8008b74:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008b76:	fb01 f303 	mul.w	r3, r1, r3
 8008b7a:	441a      	add	r2, r3
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2200      	movs	r2, #0
 8008b84:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b96:	3b01      	subs	r3, #1
 8008b98:	68f9      	ldr	r1, [r7, #12]
 8008b9a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008b9c:	fb01 f303 	mul.w	r3, r1, r3
 8008ba0:	441a      	add	r2, r3
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	22ff      	movs	r2, #255	; 0xff
 8008baa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	22ff      	movs	r2, #255	; 0xff
 8008bb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d114      	bne.n	8008be6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	691b      	ldr	r3, [r3, #16]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d01a      	beq.n	8008bfa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	3310      	adds	r3, #16
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f001 f995 	bl	8009ef8 <xTaskRemoveFromEventList>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d012      	beq.n	8008bfa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008bd4:	4b0c      	ldr	r3, [pc, #48]	; (8008c08 <xQueueGenericReset+0xcc>)
 8008bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bda:	601a      	str	r2, [r3, #0]
 8008bdc:	f3bf 8f4f 	dsb	sy
 8008be0:	f3bf 8f6f 	isb	sy
 8008be4:	e009      	b.n	8008bfa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	3310      	adds	r3, #16
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7ff fef6 	bl	80089dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	3324      	adds	r3, #36	; 0x24
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f7ff fef1 	bl	80089dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008bfa:	f002 f897 	bl	800ad2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008bfe:	2301      	movs	r3, #1
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3710      	adds	r7, #16
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	e000ed04 	.word	0xe000ed04

08008c0c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b08e      	sub	sp, #56	; 0x38
 8008c10:	af02      	add	r7, sp, #8
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	607a      	str	r2, [r7, #4]
 8008c18:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d10a      	bne.n	8008c36 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c24:	f383 8811 	msr	BASEPRI, r3
 8008c28:	f3bf 8f6f 	isb	sy
 8008c2c:	f3bf 8f4f 	dsb	sy
 8008c30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008c32:	bf00      	nop
 8008c34:	e7fe      	b.n	8008c34 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d10a      	bne.n	8008c52 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c40:	f383 8811 	msr	BASEPRI, r3
 8008c44:	f3bf 8f6f 	isb	sy
 8008c48:	f3bf 8f4f 	dsb	sy
 8008c4c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008c4e:	bf00      	nop
 8008c50:	e7fe      	b.n	8008c50 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d002      	beq.n	8008c5e <xQueueGenericCreateStatic+0x52>
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d001      	beq.n	8008c62 <xQueueGenericCreateStatic+0x56>
 8008c5e:	2301      	movs	r3, #1
 8008c60:	e000      	b.n	8008c64 <xQueueGenericCreateStatic+0x58>
 8008c62:	2300      	movs	r3, #0
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d10a      	bne.n	8008c7e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6c:	f383 8811 	msr	BASEPRI, r3
 8008c70:	f3bf 8f6f 	isb	sy
 8008c74:	f3bf 8f4f 	dsb	sy
 8008c78:	623b      	str	r3, [r7, #32]
}
 8008c7a:	bf00      	nop
 8008c7c:	e7fe      	b.n	8008c7c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d102      	bne.n	8008c8a <xQueueGenericCreateStatic+0x7e>
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d101      	bne.n	8008c8e <xQueueGenericCreateStatic+0x82>
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e000      	b.n	8008c90 <xQueueGenericCreateStatic+0x84>
 8008c8e:	2300      	movs	r3, #0
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d10a      	bne.n	8008caa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c98:	f383 8811 	msr	BASEPRI, r3
 8008c9c:	f3bf 8f6f 	isb	sy
 8008ca0:	f3bf 8f4f 	dsb	sy
 8008ca4:	61fb      	str	r3, [r7, #28]
}
 8008ca6:	bf00      	nop
 8008ca8:	e7fe      	b.n	8008ca8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008caa:	2348      	movs	r3, #72	; 0x48
 8008cac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	2b48      	cmp	r3, #72	; 0x48
 8008cb2:	d00a      	beq.n	8008cca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb8:	f383 8811 	msr	BASEPRI, r3
 8008cbc:	f3bf 8f6f 	isb	sy
 8008cc0:	f3bf 8f4f 	dsb	sy
 8008cc4:	61bb      	str	r3, [r7, #24]
}
 8008cc6:	bf00      	nop
 8008cc8:	e7fe      	b.n	8008cc8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008cca:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d00d      	beq.n	8008cf2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd8:	2201      	movs	r2, #1
 8008cda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008cde:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce4:	9300      	str	r3, [sp, #0]
 8008ce6:	4613      	mov	r3, r2
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	68b9      	ldr	r1, [r7, #8]
 8008cec:	68f8      	ldr	r0, [r7, #12]
 8008cee:	f000 f845 	bl	8008d7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3730      	adds	r7, #48	; 0x30
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b08a      	sub	sp, #40	; 0x28
 8008d00:	af02      	add	r7, sp, #8
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	4613      	mov	r3, r2
 8008d08:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d10a      	bne.n	8008d26 <xQueueGenericCreate+0x2a>
	__asm volatile
 8008d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d14:	f383 8811 	msr	BASEPRI, r3
 8008d18:	f3bf 8f6f 	isb	sy
 8008d1c:	f3bf 8f4f 	dsb	sy
 8008d20:	613b      	str	r3, [r7, #16]
}
 8008d22:	bf00      	nop
 8008d24:	e7fe      	b.n	8008d24 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d102      	bne.n	8008d32 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	61fb      	str	r3, [r7, #28]
 8008d30:	e004      	b.n	8008d3c <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	68ba      	ldr	r2, [r7, #8]
 8008d36:	fb02 f303 	mul.w	r3, r2, r3
 8008d3a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	3348      	adds	r3, #72	; 0x48
 8008d40:	4618      	mov	r0, r3
 8008d42:	f002 f8c3 	bl	800aecc <pvPortMalloc>
 8008d46:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008d48:	69bb      	ldr	r3, [r7, #24]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d011      	beq.n	8008d72 <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008d4e:	69bb      	ldr	r3, [r7, #24]
 8008d50:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	3348      	adds	r3, #72	; 0x48
 8008d56:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008d58:	69bb      	ldr	r3, [r7, #24]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008d60:	79fa      	ldrb	r2, [r7, #7]
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	9300      	str	r3, [sp, #0]
 8008d66:	4613      	mov	r3, r2
 8008d68:	697a      	ldr	r2, [r7, #20]
 8008d6a:	68b9      	ldr	r1, [r7, #8]
 8008d6c:	68f8      	ldr	r0, [r7, #12]
 8008d6e:	f000 f805 	bl	8008d7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008d72:	69bb      	ldr	r3, [r7, #24]
	}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3720      	adds	r7, #32
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	60b9      	str	r1, [r7, #8]
 8008d86:	607a      	str	r2, [r7, #4]
 8008d88:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d103      	bne.n	8008d98 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008d90:	69bb      	ldr	r3, [r7, #24]
 8008d92:	69ba      	ldr	r2, [r7, #24]
 8008d94:	601a      	str	r2, [r3, #0]
 8008d96:	e002      	b.n	8008d9e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008d98:	69bb      	ldr	r3, [r7, #24]
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008d9e:	69bb      	ldr	r3, [r7, #24]
 8008da0:	68fa      	ldr	r2, [r7, #12]
 8008da2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008da4:	69bb      	ldr	r3, [r7, #24]
 8008da6:	68ba      	ldr	r2, [r7, #8]
 8008da8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008daa:	2101      	movs	r1, #1
 8008dac:	69b8      	ldr	r0, [r7, #24]
 8008dae:	f7ff fec5 	bl	8008b3c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008db2:	bf00      	nop
 8008db4:	3710      	adds	r7, #16
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}

08008dba <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b082      	sub	sp, #8
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d00e      	beq.n	8008de6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008dda:	2300      	movs	r3, #0
 8008ddc:	2200      	movs	r2, #0
 8008dde:	2100      	movs	r1, #0
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 f837 	bl	8008e54 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008de6:	bf00      	nop
 8008de8:	3708      	adds	r7, #8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b086      	sub	sp, #24
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	4603      	mov	r3, r0
 8008df6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	617b      	str	r3, [r7, #20]
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008e00:	79fb      	ldrb	r3, [r7, #7]
 8008e02:	461a      	mov	r2, r3
 8008e04:	6939      	ldr	r1, [r7, #16]
 8008e06:	6978      	ldr	r0, [r7, #20]
 8008e08:	f7ff ff78 	bl	8008cfc <xQueueGenericCreate>
 8008e0c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008e0e:	68f8      	ldr	r0, [r7, #12]
 8008e10:	f7ff ffd3 	bl	8008dba <prvInitialiseMutex>

		return xNewQueue;
 8008e14:	68fb      	ldr	r3, [r7, #12]
	}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3718      	adds	r7, #24
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b088      	sub	sp, #32
 8008e22:	af02      	add	r7, sp, #8
 8008e24:	4603      	mov	r3, r0
 8008e26:	6039      	str	r1, [r7, #0]
 8008e28:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	617b      	str	r3, [r7, #20]
 8008e2e:	2300      	movs	r3, #0
 8008e30:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008e32:	79fb      	ldrb	r3, [r7, #7]
 8008e34:	9300      	str	r3, [sp, #0]
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	6939      	ldr	r1, [r7, #16]
 8008e3c:	6978      	ldr	r0, [r7, #20]
 8008e3e:	f7ff fee5 	bl	8008c0c <xQueueGenericCreateStatic>
 8008e42:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008e44:	68f8      	ldr	r0, [r7, #12]
 8008e46:	f7ff ffb8 	bl	8008dba <prvInitialiseMutex>

		return xNewQueue;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
	}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3718      	adds	r7, #24
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b08e      	sub	sp, #56	; 0x38
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	607a      	str	r2, [r7, #4]
 8008e60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008e62:	2300      	movs	r3, #0
 8008e64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d10a      	bne.n	8008e86 <xQueueGenericSend+0x32>
	__asm volatile
 8008e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e74:	f383 8811 	msr	BASEPRI, r3
 8008e78:	f3bf 8f6f 	isb	sy
 8008e7c:	f3bf 8f4f 	dsb	sy
 8008e80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008e82:	bf00      	nop
 8008e84:	e7fe      	b.n	8008e84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d103      	bne.n	8008e94 <xQueueGenericSend+0x40>
 8008e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d101      	bne.n	8008e98 <xQueueGenericSend+0x44>
 8008e94:	2301      	movs	r3, #1
 8008e96:	e000      	b.n	8008e9a <xQueueGenericSend+0x46>
 8008e98:	2300      	movs	r3, #0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d10a      	bne.n	8008eb4 <xQueueGenericSend+0x60>
	__asm volatile
 8008e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea2:	f383 8811 	msr	BASEPRI, r3
 8008ea6:	f3bf 8f6f 	isb	sy
 8008eaa:	f3bf 8f4f 	dsb	sy
 8008eae:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008eb0:	bf00      	nop
 8008eb2:	e7fe      	b.n	8008eb2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	2b02      	cmp	r3, #2
 8008eb8:	d103      	bne.n	8008ec2 <xQueueGenericSend+0x6e>
 8008eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d101      	bne.n	8008ec6 <xQueueGenericSend+0x72>
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e000      	b.n	8008ec8 <xQueueGenericSend+0x74>
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d10a      	bne.n	8008ee2 <xQueueGenericSend+0x8e>
	__asm volatile
 8008ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed0:	f383 8811 	msr	BASEPRI, r3
 8008ed4:	f3bf 8f6f 	isb	sy
 8008ed8:	f3bf 8f4f 	dsb	sy
 8008edc:	623b      	str	r3, [r7, #32]
}
 8008ede:	bf00      	nop
 8008ee0:	e7fe      	b.n	8008ee0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ee2:	f001 f9cb 	bl	800a27c <xTaskGetSchedulerState>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d102      	bne.n	8008ef2 <xQueueGenericSend+0x9e>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d101      	bne.n	8008ef6 <xQueueGenericSend+0xa2>
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	e000      	b.n	8008ef8 <xQueueGenericSend+0xa4>
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d10a      	bne.n	8008f12 <xQueueGenericSend+0xbe>
	__asm volatile
 8008efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f00:	f383 8811 	msr	BASEPRI, r3
 8008f04:	f3bf 8f6f 	isb	sy
 8008f08:	f3bf 8f4f 	dsb	sy
 8008f0c:	61fb      	str	r3, [r7, #28]
}
 8008f0e:	bf00      	nop
 8008f10:	e7fe      	b.n	8008f10 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f12:	f001 fedb 	bl	800accc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d302      	bcc.n	8008f28 <xQueueGenericSend+0xd4>
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	2b02      	cmp	r3, #2
 8008f26:	d129      	bne.n	8008f7c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008f28:	683a      	ldr	r2, [r7, #0]
 8008f2a:	68b9      	ldr	r1, [r7, #8]
 8008f2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f2e:	f000 fa07 	bl	8009340 <prvCopyDataToQueue>
 8008f32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d010      	beq.n	8008f5e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3e:	3324      	adds	r3, #36	; 0x24
 8008f40:	4618      	mov	r0, r3
 8008f42:	f000 ffd9 	bl	8009ef8 <xTaskRemoveFromEventList>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d013      	beq.n	8008f74 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008f4c:	4b3f      	ldr	r3, [pc, #252]	; (800904c <xQueueGenericSend+0x1f8>)
 8008f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f52:	601a      	str	r2, [r3, #0]
 8008f54:	f3bf 8f4f 	dsb	sy
 8008f58:	f3bf 8f6f 	isb	sy
 8008f5c:	e00a      	b.n	8008f74 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d007      	beq.n	8008f74 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008f64:	4b39      	ldr	r3, [pc, #228]	; (800904c <xQueueGenericSend+0x1f8>)
 8008f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f6a:	601a      	str	r2, [r3, #0]
 8008f6c:	f3bf 8f4f 	dsb	sy
 8008f70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008f74:	f001 feda 	bl	800ad2c <vPortExitCritical>
				return pdPASS;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e063      	b.n	8009044 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d103      	bne.n	8008f8a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008f82:	f001 fed3 	bl	800ad2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008f86:	2300      	movs	r3, #0
 8008f88:	e05c      	b.n	8009044 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d106      	bne.n	8008f9e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f90:	f107 0314 	add.w	r3, r7, #20
 8008f94:	4618      	mov	r0, r3
 8008f96:	f001 f811 	bl	8009fbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f9e:	f001 fec5 	bl	800ad2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008fa2:	f000 fd87 	bl	8009ab4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008fa6:	f001 fe91 	bl	800accc <vPortEnterCritical>
 8008faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008fb0:	b25b      	sxtb	r3, r3
 8008fb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fb6:	d103      	bne.n	8008fc0 <xQueueGenericSend+0x16c>
 8008fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fc6:	b25b      	sxtb	r3, r3
 8008fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fcc:	d103      	bne.n	8008fd6 <xQueueGenericSend+0x182>
 8008fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008fd6:	f001 fea9 	bl	800ad2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008fda:	1d3a      	adds	r2, r7, #4
 8008fdc:	f107 0314 	add.w	r3, r7, #20
 8008fe0:	4611      	mov	r1, r2
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f001 f800 	bl	8009fe8 <xTaskCheckForTimeOut>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d124      	bne.n	8009038 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008fee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ff0:	f000 fa9e 	bl	8009530 <prvIsQueueFull>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d018      	beq.n	800902c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ffc:	3310      	adds	r3, #16
 8008ffe:	687a      	ldr	r2, [r7, #4]
 8009000:	4611      	mov	r1, r2
 8009002:	4618      	mov	r0, r3
 8009004:	f000 ff28 	bl	8009e58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009008:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800900a:	f000 fa29 	bl	8009460 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800900e:	f000 fd5f 	bl	8009ad0 <xTaskResumeAll>
 8009012:	4603      	mov	r3, r0
 8009014:	2b00      	cmp	r3, #0
 8009016:	f47f af7c 	bne.w	8008f12 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800901a:	4b0c      	ldr	r3, [pc, #48]	; (800904c <xQueueGenericSend+0x1f8>)
 800901c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009020:	601a      	str	r2, [r3, #0]
 8009022:	f3bf 8f4f 	dsb	sy
 8009026:	f3bf 8f6f 	isb	sy
 800902a:	e772      	b.n	8008f12 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800902c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800902e:	f000 fa17 	bl	8009460 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009032:	f000 fd4d 	bl	8009ad0 <xTaskResumeAll>
 8009036:	e76c      	b.n	8008f12 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009038:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800903a:	f000 fa11 	bl	8009460 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800903e:	f000 fd47 	bl	8009ad0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009042:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009044:	4618      	mov	r0, r3
 8009046:	3738      	adds	r7, #56	; 0x38
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}
 800904c:	e000ed04 	.word	0xe000ed04

08009050 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b08e      	sub	sp, #56	; 0x38
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	607a      	str	r2, [r7, #4]
 800905c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009064:	2b00      	cmp	r3, #0
 8009066:	d10a      	bne.n	800907e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800906c:	f383 8811 	msr	BASEPRI, r3
 8009070:	f3bf 8f6f 	isb	sy
 8009074:	f3bf 8f4f 	dsb	sy
 8009078:	627b      	str	r3, [r7, #36]	; 0x24
}
 800907a:	bf00      	nop
 800907c:	e7fe      	b.n	800907c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d103      	bne.n	800908c <xQueueGenericSendFromISR+0x3c>
 8009084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009088:	2b00      	cmp	r3, #0
 800908a:	d101      	bne.n	8009090 <xQueueGenericSendFromISR+0x40>
 800908c:	2301      	movs	r3, #1
 800908e:	e000      	b.n	8009092 <xQueueGenericSendFromISR+0x42>
 8009090:	2300      	movs	r3, #0
 8009092:	2b00      	cmp	r3, #0
 8009094:	d10a      	bne.n	80090ac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909a:	f383 8811 	msr	BASEPRI, r3
 800909e:	f3bf 8f6f 	isb	sy
 80090a2:	f3bf 8f4f 	dsb	sy
 80090a6:	623b      	str	r3, [r7, #32]
}
 80090a8:	bf00      	nop
 80090aa:	e7fe      	b.n	80090aa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	d103      	bne.n	80090ba <xQueueGenericSendFromISR+0x6a>
 80090b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d101      	bne.n	80090be <xQueueGenericSendFromISR+0x6e>
 80090ba:	2301      	movs	r3, #1
 80090bc:	e000      	b.n	80090c0 <xQueueGenericSendFromISR+0x70>
 80090be:	2300      	movs	r3, #0
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d10a      	bne.n	80090da <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80090c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c8:	f383 8811 	msr	BASEPRI, r3
 80090cc:	f3bf 8f6f 	isb	sy
 80090d0:	f3bf 8f4f 	dsb	sy
 80090d4:	61fb      	str	r3, [r7, #28]
}
 80090d6:	bf00      	nop
 80090d8:	e7fe      	b.n	80090d8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80090da:	f001 feb9 	bl	800ae50 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80090de:	f3ef 8211 	mrs	r2, BASEPRI
 80090e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e6:	f383 8811 	msr	BASEPRI, r3
 80090ea:	f3bf 8f6f 	isb	sy
 80090ee:	f3bf 8f4f 	dsb	sy
 80090f2:	61ba      	str	r2, [r7, #24]
 80090f4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80090f6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80090f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80090fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009102:	429a      	cmp	r2, r3
 8009104:	d302      	bcc.n	800910c <xQueueGenericSendFromISR+0xbc>
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	2b02      	cmp	r3, #2
 800910a:	d12c      	bne.n	8009166 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800910c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800910e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009116:	683a      	ldr	r2, [r7, #0]
 8009118:	68b9      	ldr	r1, [r7, #8]
 800911a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800911c:	f000 f910 	bl	8009340 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009120:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009124:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009128:	d112      	bne.n	8009150 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800912a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912e:	2b00      	cmp	r3, #0
 8009130:	d016      	beq.n	8009160 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009134:	3324      	adds	r3, #36	; 0x24
 8009136:	4618      	mov	r0, r3
 8009138:	f000 fede 	bl	8009ef8 <xTaskRemoveFromEventList>
 800913c:	4603      	mov	r3, r0
 800913e:	2b00      	cmp	r3, #0
 8009140:	d00e      	beq.n	8009160 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d00b      	beq.n	8009160 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2201      	movs	r2, #1
 800914c:	601a      	str	r2, [r3, #0]
 800914e:	e007      	b.n	8009160 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009150:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009154:	3301      	adds	r3, #1
 8009156:	b2db      	uxtb	r3, r3
 8009158:	b25a      	sxtb	r2, r3
 800915a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009160:	2301      	movs	r3, #1
 8009162:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009164:	e001      	b.n	800916a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009166:	2300      	movs	r3, #0
 8009168:	637b      	str	r3, [r7, #52]	; 0x34
 800916a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800916c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009174:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009178:	4618      	mov	r0, r3
 800917a:	3738      	adds	r7, #56	; 0x38
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b08c      	sub	sp, #48	; 0x30
 8009184:	af00      	add	r7, sp, #0
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800918c:	2300      	movs	r3, #0
 800918e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009196:	2b00      	cmp	r3, #0
 8009198:	d10a      	bne.n	80091b0 <xQueueReceive+0x30>
	__asm volatile
 800919a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800919e:	f383 8811 	msr	BASEPRI, r3
 80091a2:	f3bf 8f6f 	isb	sy
 80091a6:	f3bf 8f4f 	dsb	sy
 80091aa:	623b      	str	r3, [r7, #32]
}
 80091ac:	bf00      	nop
 80091ae:	e7fe      	b.n	80091ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d103      	bne.n	80091be <xQueueReceive+0x3e>
 80091b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d101      	bne.n	80091c2 <xQueueReceive+0x42>
 80091be:	2301      	movs	r3, #1
 80091c0:	e000      	b.n	80091c4 <xQueueReceive+0x44>
 80091c2:	2300      	movs	r3, #0
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d10a      	bne.n	80091de <xQueueReceive+0x5e>
	__asm volatile
 80091c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091cc:	f383 8811 	msr	BASEPRI, r3
 80091d0:	f3bf 8f6f 	isb	sy
 80091d4:	f3bf 8f4f 	dsb	sy
 80091d8:	61fb      	str	r3, [r7, #28]
}
 80091da:	bf00      	nop
 80091dc:	e7fe      	b.n	80091dc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80091de:	f001 f84d 	bl	800a27c <xTaskGetSchedulerState>
 80091e2:	4603      	mov	r3, r0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d102      	bne.n	80091ee <xQueueReceive+0x6e>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d101      	bne.n	80091f2 <xQueueReceive+0x72>
 80091ee:	2301      	movs	r3, #1
 80091f0:	e000      	b.n	80091f4 <xQueueReceive+0x74>
 80091f2:	2300      	movs	r3, #0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d10a      	bne.n	800920e <xQueueReceive+0x8e>
	__asm volatile
 80091f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fc:	f383 8811 	msr	BASEPRI, r3
 8009200:	f3bf 8f6f 	isb	sy
 8009204:	f3bf 8f4f 	dsb	sy
 8009208:	61bb      	str	r3, [r7, #24]
}
 800920a:	bf00      	nop
 800920c:	e7fe      	b.n	800920c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800920e:	f001 fd5d 	bl	800accc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009216:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921a:	2b00      	cmp	r3, #0
 800921c:	d01f      	beq.n	800925e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800921e:	68b9      	ldr	r1, [r7, #8]
 8009220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009222:	f000 f8f7 	bl	8009414 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009228:	1e5a      	subs	r2, r3, #1
 800922a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800922e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d00f      	beq.n	8009256 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009238:	3310      	adds	r3, #16
 800923a:	4618      	mov	r0, r3
 800923c:	f000 fe5c 	bl	8009ef8 <xTaskRemoveFromEventList>
 8009240:	4603      	mov	r3, r0
 8009242:	2b00      	cmp	r3, #0
 8009244:	d007      	beq.n	8009256 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009246:	4b3d      	ldr	r3, [pc, #244]	; (800933c <xQueueReceive+0x1bc>)
 8009248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800924c:	601a      	str	r2, [r3, #0]
 800924e:	f3bf 8f4f 	dsb	sy
 8009252:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009256:	f001 fd69 	bl	800ad2c <vPortExitCritical>
				return pdPASS;
 800925a:	2301      	movs	r3, #1
 800925c:	e069      	b.n	8009332 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d103      	bne.n	800926c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009264:	f001 fd62 	bl	800ad2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009268:	2300      	movs	r3, #0
 800926a:	e062      	b.n	8009332 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800926c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800926e:	2b00      	cmp	r3, #0
 8009270:	d106      	bne.n	8009280 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009272:	f107 0310 	add.w	r3, r7, #16
 8009276:	4618      	mov	r0, r3
 8009278:	f000 fea0 	bl	8009fbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800927c:	2301      	movs	r3, #1
 800927e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009280:	f001 fd54 	bl	800ad2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009284:	f000 fc16 	bl	8009ab4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009288:	f001 fd20 	bl	800accc <vPortEnterCritical>
 800928c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800928e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009292:	b25b      	sxtb	r3, r3
 8009294:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009298:	d103      	bne.n	80092a2 <xQueueReceive+0x122>
 800929a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929c:	2200      	movs	r2, #0
 800929e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092a8:	b25b      	sxtb	r3, r3
 80092aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092ae:	d103      	bne.n	80092b8 <xQueueReceive+0x138>
 80092b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b2:	2200      	movs	r2, #0
 80092b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092b8:	f001 fd38 	bl	800ad2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80092bc:	1d3a      	adds	r2, r7, #4
 80092be:	f107 0310 	add.w	r3, r7, #16
 80092c2:	4611      	mov	r1, r2
 80092c4:	4618      	mov	r0, r3
 80092c6:	f000 fe8f 	bl	8009fe8 <xTaskCheckForTimeOut>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d123      	bne.n	8009318 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80092d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092d2:	f000 f917 	bl	8009504 <prvIsQueueEmpty>
 80092d6:	4603      	mov	r3, r0
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d017      	beq.n	800930c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80092dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092de:	3324      	adds	r3, #36	; 0x24
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	4611      	mov	r1, r2
 80092e4:	4618      	mov	r0, r3
 80092e6:	f000 fdb7 	bl	8009e58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80092ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092ec:	f000 f8b8 	bl	8009460 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80092f0:	f000 fbee 	bl	8009ad0 <xTaskResumeAll>
 80092f4:	4603      	mov	r3, r0
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d189      	bne.n	800920e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80092fa:	4b10      	ldr	r3, [pc, #64]	; (800933c <xQueueReceive+0x1bc>)
 80092fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009300:	601a      	str	r2, [r3, #0]
 8009302:	f3bf 8f4f 	dsb	sy
 8009306:	f3bf 8f6f 	isb	sy
 800930a:	e780      	b.n	800920e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800930c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800930e:	f000 f8a7 	bl	8009460 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009312:	f000 fbdd 	bl	8009ad0 <xTaskResumeAll>
 8009316:	e77a      	b.n	800920e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009318:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800931a:	f000 f8a1 	bl	8009460 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800931e:	f000 fbd7 	bl	8009ad0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009322:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009324:	f000 f8ee 	bl	8009504 <prvIsQueueEmpty>
 8009328:	4603      	mov	r3, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	f43f af6f 	beq.w	800920e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009330:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009332:	4618      	mov	r0, r3
 8009334:	3730      	adds	r7, #48	; 0x30
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
 800933a:	bf00      	nop
 800933c:	e000ed04 	.word	0xe000ed04

08009340 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b086      	sub	sp, #24
 8009344:	af00      	add	r7, sp, #0
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	60b9      	str	r1, [r7, #8]
 800934a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800934c:	2300      	movs	r3, #0
 800934e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009354:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800935a:	2b00      	cmp	r3, #0
 800935c:	d10d      	bne.n	800937a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d14d      	bne.n	8009402 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	4618      	mov	r0, r3
 800936c:	f000 ffa4 	bl	800a2b8 <xTaskPriorityDisinherit>
 8009370:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2200      	movs	r2, #0
 8009376:	609a      	str	r2, [r3, #8]
 8009378:	e043      	b.n	8009402 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d119      	bne.n	80093b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	6858      	ldr	r0, [r3, #4]
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009388:	461a      	mov	r2, r3
 800938a:	68b9      	ldr	r1, [r7, #8]
 800938c:	f002 f899 	bl	800b4c2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	685a      	ldr	r2, [r3, #4]
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009398:	441a      	add	r2, r3
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	685a      	ldr	r2, [r3, #4]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	689b      	ldr	r3, [r3, #8]
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d32b      	bcc.n	8009402 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681a      	ldr	r2, [r3, #0]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	605a      	str	r2, [r3, #4]
 80093b2:	e026      	b.n	8009402 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	68d8      	ldr	r0, [r3, #12]
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093bc:	461a      	mov	r2, r3
 80093be:	68b9      	ldr	r1, [r7, #8]
 80093c0:	f002 f87f 	bl	800b4c2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	68da      	ldr	r2, [r3, #12]
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093cc:	425b      	negs	r3, r3
 80093ce:	441a      	add	r2, r3
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	68da      	ldr	r2, [r3, #12]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	429a      	cmp	r2, r3
 80093de:	d207      	bcs.n	80093f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	689a      	ldr	r2, [r3, #8]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093e8:	425b      	negs	r3, r3
 80093ea:	441a      	add	r2, r3
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2b02      	cmp	r3, #2
 80093f4:	d105      	bne.n	8009402 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d002      	beq.n	8009402 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	3b01      	subs	r3, #1
 8009400:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	1c5a      	adds	r2, r3, #1
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800940a:	697b      	ldr	r3, [r7, #20]
}
 800940c:	4618      	mov	r0, r3
 800940e:	3718      	adds	r7, #24
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009422:	2b00      	cmp	r3, #0
 8009424:	d018      	beq.n	8009458 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	68da      	ldr	r2, [r3, #12]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800942e:	441a      	add	r2, r3
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	68da      	ldr	r2, [r3, #12]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	429a      	cmp	r2, r3
 800943e:	d303      	bcc.n	8009448 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681a      	ldr	r2, [r3, #0]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	68d9      	ldr	r1, [r3, #12]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009450:	461a      	mov	r2, r3
 8009452:	6838      	ldr	r0, [r7, #0]
 8009454:	f002 f835 	bl	800b4c2 <memcpy>
	}
}
 8009458:	bf00      	nop
 800945a:	3708      	adds	r7, #8
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}

08009460 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b084      	sub	sp, #16
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009468:	f001 fc30 	bl	800accc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009472:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009474:	e011      	b.n	800949a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800947a:	2b00      	cmp	r3, #0
 800947c:	d012      	beq.n	80094a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	3324      	adds	r3, #36	; 0x24
 8009482:	4618      	mov	r0, r3
 8009484:	f000 fd38 	bl	8009ef8 <xTaskRemoveFromEventList>
 8009488:	4603      	mov	r3, r0
 800948a:	2b00      	cmp	r3, #0
 800948c:	d001      	beq.n	8009492 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800948e:	f000 fe0d 	bl	800a0ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009492:	7bfb      	ldrb	r3, [r7, #15]
 8009494:	3b01      	subs	r3, #1
 8009496:	b2db      	uxtb	r3, r3
 8009498:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800949a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	dce9      	bgt.n	8009476 <prvUnlockQueue+0x16>
 80094a2:	e000      	b.n	80094a6 <prvUnlockQueue+0x46>
					break;
 80094a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	22ff      	movs	r2, #255	; 0xff
 80094aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80094ae:	f001 fc3d 	bl	800ad2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80094b2:	f001 fc0b 	bl	800accc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80094be:	e011      	b.n	80094e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	691b      	ldr	r3, [r3, #16]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d012      	beq.n	80094ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	3310      	adds	r3, #16
 80094cc:	4618      	mov	r0, r3
 80094ce:	f000 fd13 	bl	8009ef8 <xTaskRemoveFromEventList>
 80094d2:	4603      	mov	r3, r0
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d001      	beq.n	80094dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80094d8:	f000 fde8 	bl	800a0ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80094dc:	7bbb      	ldrb	r3, [r7, #14]
 80094de:	3b01      	subs	r3, #1
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80094e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	dce9      	bgt.n	80094c0 <prvUnlockQueue+0x60>
 80094ec:	e000      	b.n	80094f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80094ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	22ff      	movs	r2, #255	; 0xff
 80094f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80094f8:	f001 fc18 	bl	800ad2c <vPortExitCritical>
}
 80094fc:	bf00      	nop
 80094fe:	3710      	adds	r7, #16
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800950c:	f001 fbde 	bl	800accc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009514:	2b00      	cmp	r3, #0
 8009516:	d102      	bne.n	800951e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009518:	2301      	movs	r3, #1
 800951a:	60fb      	str	r3, [r7, #12]
 800951c:	e001      	b.n	8009522 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800951e:	2300      	movs	r3, #0
 8009520:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009522:	f001 fc03 	bl	800ad2c <vPortExitCritical>

	return xReturn;
 8009526:	68fb      	ldr	r3, [r7, #12]
}
 8009528:	4618      	mov	r0, r3
 800952a:	3710      	adds	r7, #16
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009538:	f001 fbc8 	bl	800accc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009544:	429a      	cmp	r2, r3
 8009546:	d102      	bne.n	800954e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009548:	2301      	movs	r3, #1
 800954a:	60fb      	str	r3, [r7, #12]
 800954c:	e001      	b.n	8009552 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800954e:	2300      	movs	r3, #0
 8009550:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009552:	f001 fbeb 	bl	800ad2c <vPortExitCritical>

	return xReturn;
 8009556:	68fb      	ldr	r3, [r7, #12]
}
 8009558:	4618      	mov	r0, r3
 800955a:	3710      	adds	r7, #16
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009560:	b480      	push	{r7}
 8009562:	b085      	sub	sp, #20
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800956a:	2300      	movs	r3, #0
 800956c:	60fb      	str	r3, [r7, #12]
 800956e:	e014      	b.n	800959a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009570:	4a0e      	ldr	r2, [pc, #56]	; (80095ac <vQueueAddToRegistry+0x4c>)
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d10b      	bne.n	8009594 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800957c:	490b      	ldr	r1, [pc, #44]	; (80095ac <vQueueAddToRegistry+0x4c>)
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	683a      	ldr	r2, [r7, #0]
 8009582:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009586:	4a09      	ldr	r2, [pc, #36]	; (80095ac <vQueueAddToRegistry+0x4c>)
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	00db      	lsls	r3, r3, #3
 800958c:	4413      	add	r3, r2
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009592:	e006      	b.n	80095a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	3301      	adds	r3, #1
 8009598:	60fb      	str	r3, [r7, #12]
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2b07      	cmp	r3, #7
 800959e:	d9e7      	bls.n	8009570 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80095a0:	bf00      	nop
 80095a2:	bf00      	nop
 80095a4:	3714      	adds	r7, #20
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bc80      	pop	{r7}
 80095aa:	4770      	bx	lr
 80095ac:	20000ed4 	.word	0x20000ed4

080095b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b086      	sub	sp, #24
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	60f8      	str	r0, [r7, #12]
 80095b8:	60b9      	str	r1, [r7, #8]
 80095ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80095c0:	f001 fb84 	bl	800accc <vPortEnterCritical>
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095ca:	b25b      	sxtb	r3, r3
 80095cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095d0:	d103      	bne.n	80095da <vQueueWaitForMessageRestricted+0x2a>
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	2200      	movs	r2, #0
 80095d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095e0:	b25b      	sxtb	r3, r3
 80095e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095e6:	d103      	bne.n	80095f0 <vQueueWaitForMessageRestricted+0x40>
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	2200      	movs	r2, #0
 80095ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095f0:	f001 fb9c 	bl	800ad2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d106      	bne.n	800960a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	3324      	adds	r3, #36	; 0x24
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	68b9      	ldr	r1, [r7, #8]
 8009604:	4618      	mov	r0, r3
 8009606:	f000 fc4b 	bl	8009ea0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800960a:	6978      	ldr	r0, [r7, #20]
 800960c:	f7ff ff28 	bl	8009460 <prvUnlockQueue>
	}
 8009610:	bf00      	nop
 8009612:	3718      	adds	r7, #24
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009618:	b580      	push	{r7, lr}
 800961a:	b08e      	sub	sp, #56	; 0x38
 800961c:	af04      	add	r7, sp, #16
 800961e:	60f8      	str	r0, [r7, #12]
 8009620:	60b9      	str	r1, [r7, #8]
 8009622:	607a      	str	r2, [r7, #4]
 8009624:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009628:	2b00      	cmp	r3, #0
 800962a:	d10a      	bne.n	8009642 <xTaskCreateStatic+0x2a>
	__asm volatile
 800962c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009630:	f383 8811 	msr	BASEPRI, r3
 8009634:	f3bf 8f6f 	isb	sy
 8009638:	f3bf 8f4f 	dsb	sy
 800963c:	623b      	str	r3, [r7, #32]
}
 800963e:	bf00      	nop
 8009640:	e7fe      	b.n	8009640 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009644:	2b00      	cmp	r3, #0
 8009646:	d10a      	bne.n	800965e <xTaskCreateStatic+0x46>
	__asm volatile
 8009648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800964c:	f383 8811 	msr	BASEPRI, r3
 8009650:	f3bf 8f6f 	isb	sy
 8009654:	f3bf 8f4f 	dsb	sy
 8009658:	61fb      	str	r3, [r7, #28]
}
 800965a:	bf00      	nop
 800965c:	e7fe      	b.n	800965c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800965e:	23b4      	movs	r3, #180	; 0xb4
 8009660:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	2bb4      	cmp	r3, #180	; 0xb4
 8009666:	d00a      	beq.n	800967e <xTaskCreateStatic+0x66>
	__asm volatile
 8009668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966c:	f383 8811 	msr	BASEPRI, r3
 8009670:	f3bf 8f6f 	isb	sy
 8009674:	f3bf 8f4f 	dsb	sy
 8009678:	61bb      	str	r3, [r7, #24]
}
 800967a:	bf00      	nop
 800967c:	e7fe      	b.n	800967c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800967e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009682:	2b00      	cmp	r3, #0
 8009684:	d01e      	beq.n	80096c4 <xTaskCreateStatic+0xac>
 8009686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009688:	2b00      	cmp	r3, #0
 800968a:	d01b      	beq.n	80096c4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800968c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800968e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009692:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009694:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009698:	2202      	movs	r2, #2
 800969a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800969e:	2300      	movs	r3, #0
 80096a0:	9303      	str	r3, [sp, #12]
 80096a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a4:	9302      	str	r3, [sp, #8]
 80096a6:	f107 0314 	add.w	r3, r7, #20
 80096aa:	9301      	str	r3, [sp, #4]
 80096ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ae:	9300      	str	r3, [sp, #0]
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	687a      	ldr	r2, [r7, #4]
 80096b4:	68b9      	ldr	r1, [r7, #8]
 80096b6:	68f8      	ldr	r0, [r7, #12]
 80096b8:	f000 f850 	bl	800975c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80096bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80096be:	f000 f8eb 	bl	8009898 <prvAddNewTaskToReadyList>
 80096c2:	e001      	b.n	80096c8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80096c4:	2300      	movs	r3, #0
 80096c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80096c8:	697b      	ldr	r3, [r7, #20]
	}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3728      	adds	r7, #40	; 0x28
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}

080096d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80096d2:	b580      	push	{r7, lr}
 80096d4:	b08c      	sub	sp, #48	; 0x30
 80096d6:	af04      	add	r7, sp, #16
 80096d8:	60f8      	str	r0, [r7, #12]
 80096da:	60b9      	str	r1, [r7, #8]
 80096dc:	603b      	str	r3, [r7, #0]
 80096de:	4613      	mov	r3, r2
 80096e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80096e2:	88fb      	ldrh	r3, [r7, #6]
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	4618      	mov	r0, r3
 80096e8:	f001 fbf0 	bl	800aecc <pvPortMalloc>
 80096ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d00e      	beq.n	8009712 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80096f4:	20b4      	movs	r0, #180	; 0xb4
 80096f6:	f001 fbe9 	bl	800aecc <pvPortMalloc>
 80096fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80096fc:	69fb      	ldr	r3, [r7, #28]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d003      	beq.n	800970a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009702:	69fb      	ldr	r3, [r7, #28]
 8009704:	697a      	ldr	r2, [r7, #20]
 8009706:	631a      	str	r2, [r3, #48]	; 0x30
 8009708:	e005      	b.n	8009716 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800970a:	6978      	ldr	r0, [r7, #20]
 800970c:	f001 fca2 	bl	800b054 <vPortFree>
 8009710:	e001      	b.n	8009716 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009712:	2300      	movs	r3, #0
 8009714:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009716:	69fb      	ldr	r3, [r7, #28]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d017      	beq.n	800974c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	2200      	movs	r2, #0
 8009720:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009724:	88fa      	ldrh	r2, [r7, #6]
 8009726:	2300      	movs	r3, #0
 8009728:	9303      	str	r3, [sp, #12]
 800972a:	69fb      	ldr	r3, [r7, #28]
 800972c:	9302      	str	r3, [sp, #8]
 800972e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009730:	9301      	str	r3, [sp, #4]
 8009732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009734:	9300      	str	r3, [sp, #0]
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	68b9      	ldr	r1, [r7, #8]
 800973a:	68f8      	ldr	r0, [r7, #12]
 800973c:	f000 f80e 	bl	800975c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009740:	69f8      	ldr	r0, [r7, #28]
 8009742:	f000 f8a9 	bl	8009898 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009746:	2301      	movs	r3, #1
 8009748:	61bb      	str	r3, [r7, #24]
 800974a:	e002      	b.n	8009752 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800974c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009750:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009752:	69bb      	ldr	r3, [r7, #24]
	}
 8009754:	4618      	mov	r0, r3
 8009756:	3720      	adds	r7, #32
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b088      	sub	sp, #32
 8009760:	af00      	add	r7, sp, #0
 8009762:	60f8      	str	r0, [r7, #12]
 8009764:	60b9      	str	r1, [r7, #8]
 8009766:	607a      	str	r2, [r7, #4]
 8009768:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800976a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800976c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009774:	3b01      	subs	r3, #1
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	4413      	add	r3, r2
 800977a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800977c:	69bb      	ldr	r3, [r7, #24]
 800977e:	f023 0307 	bic.w	r3, r3, #7
 8009782:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009784:	69bb      	ldr	r3, [r7, #24]
 8009786:	f003 0307 	and.w	r3, r3, #7
 800978a:	2b00      	cmp	r3, #0
 800978c:	d00a      	beq.n	80097a4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800978e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009792:	f383 8811 	msr	BASEPRI, r3
 8009796:	f3bf 8f6f 	isb	sy
 800979a:	f3bf 8f4f 	dsb	sy
 800979e:	617b      	str	r3, [r7, #20]
}
 80097a0:	bf00      	nop
 80097a2:	e7fe      	b.n	80097a2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d01f      	beq.n	80097ea <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80097aa:	2300      	movs	r3, #0
 80097ac:	61fb      	str	r3, [r7, #28]
 80097ae:	e012      	b.n	80097d6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80097b0:	68ba      	ldr	r2, [r7, #8]
 80097b2:	69fb      	ldr	r3, [r7, #28]
 80097b4:	4413      	add	r3, r2
 80097b6:	7819      	ldrb	r1, [r3, #0]
 80097b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097ba:	69fb      	ldr	r3, [r7, #28]
 80097bc:	4413      	add	r3, r2
 80097be:	3334      	adds	r3, #52	; 0x34
 80097c0:	460a      	mov	r2, r1
 80097c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80097c4:	68ba      	ldr	r2, [r7, #8]
 80097c6:	69fb      	ldr	r3, [r7, #28]
 80097c8:	4413      	add	r3, r2
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d006      	beq.n	80097de <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80097d0:	69fb      	ldr	r3, [r7, #28]
 80097d2:	3301      	adds	r3, #1
 80097d4:	61fb      	str	r3, [r7, #28]
 80097d6:	69fb      	ldr	r3, [r7, #28]
 80097d8:	2b0f      	cmp	r3, #15
 80097da:	d9e9      	bls.n	80097b0 <prvInitialiseNewTask+0x54>
 80097dc:	e000      	b.n	80097e0 <prvInitialiseNewTask+0x84>
			{
				break;
 80097de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80097e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e2:	2200      	movs	r2, #0
 80097e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80097e8:	e003      	b.n	80097f2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80097ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ec:	2200      	movs	r2, #0
 80097ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80097f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f4:	2b06      	cmp	r3, #6
 80097f6:	d901      	bls.n	80097fc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80097f8:	2306      	movs	r3, #6
 80097fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80097fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009800:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009804:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009806:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800980a:	2200      	movs	r2, #0
 800980c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800980e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009810:	3304      	adds	r3, #4
 8009812:	4618      	mov	r0, r3
 8009814:	f7ff f901 	bl	8008a1a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800981a:	3318      	adds	r3, #24
 800981c:	4618      	mov	r0, r3
 800981e:	f7ff f8fc 	bl	8008a1a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009826:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800982a:	f1c3 0207 	rsb	r2, r3, #7
 800982e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009830:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009836:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983a:	2200      	movs	r2, #0
 800983c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009842:	2200      	movs	r2, #0
 8009844:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800984a:	334c      	adds	r3, #76	; 0x4c
 800984c:	2260      	movs	r2, #96	; 0x60
 800984e:	2100      	movs	r1, #0
 8009850:	4618      	mov	r0, r3
 8009852:	f001 fe44 	bl	800b4de <memset>
 8009856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009858:	4a0c      	ldr	r2, [pc, #48]	; (800988c <prvInitialiseNewTask+0x130>)
 800985a:	651a      	str	r2, [r3, #80]	; 0x50
 800985c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800985e:	4a0c      	ldr	r2, [pc, #48]	; (8009890 <prvInitialiseNewTask+0x134>)
 8009860:	655a      	str	r2, [r3, #84]	; 0x54
 8009862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009864:	4a0b      	ldr	r2, [pc, #44]	; (8009894 <prvInitialiseNewTask+0x138>)
 8009866:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009868:	683a      	ldr	r2, [r7, #0]
 800986a:	68f9      	ldr	r1, [r7, #12]
 800986c:	69b8      	ldr	r0, [r7, #24]
 800986e:	f001 f93f 	bl	800aaf0 <pxPortInitialiseStack>
 8009872:	4602      	mov	r2, r0
 8009874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009876:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800987a:	2b00      	cmp	r3, #0
 800987c:	d002      	beq.n	8009884 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800987e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009882:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009884:	bf00      	nop
 8009886:	3720      	adds	r7, #32
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}
 800988c:	0800fa00 	.word	0x0800fa00
 8009890:	0800fa20 	.word	0x0800fa20
 8009894:	0800f9e0 	.word	0x0800f9e0

08009898 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80098a0:	f001 fa14 	bl	800accc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80098a4:	4b2a      	ldr	r3, [pc, #168]	; (8009950 <prvAddNewTaskToReadyList+0xb8>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	3301      	adds	r3, #1
 80098aa:	4a29      	ldr	r2, [pc, #164]	; (8009950 <prvAddNewTaskToReadyList+0xb8>)
 80098ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80098ae:	4b29      	ldr	r3, [pc, #164]	; (8009954 <prvAddNewTaskToReadyList+0xbc>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d109      	bne.n	80098ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80098b6:	4a27      	ldr	r2, [pc, #156]	; (8009954 <prvAddNewTaskToReadyList+0xbc>)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80098bc:	4b24      	ldr	r3, [pc, #144]	; (8009950 <prvAddNewTaskToReadyList+0xb8>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d110      	bne.n	80098e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80098c4:	f000 fc18 	bl	800a0f8 <prvInitialiseTaskLists>
 80098c8:	e00d      	b.n	80098e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80098ca:	4b23      	ldr	r3, [pc, #140]	; (8009958 <prvAddNewTaskToReadyList+0xc0>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d109      	bne.n	80098e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80098d2:	4b20      	ldr	r3, [pc, #128]	; (8009954 <prvAddNewTaskToReadyList+0xbc>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098dc:	429a      	cmp	r2, r3
 80098de:	d802      	bhi.n	80098e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80098e0:	4a1c      	ldr	r2, [pc, #112]	; (8009954 <prvAddNewTaskToReadyList+0xbc>)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80098e6:	4b1d      	ldr	r3, [pc, #116]	; (800995c <prvAddNewTaskToReadyList+0xc4>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	3301      	adds	r3, #1
 80098ec:	4a1b      	ldr	r2, [pc, #108]	; (800995c <prvAddNewTaskToReadyList+0xc4>)
 80098ee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f4:	2201      	movs	r2, #1
 80098f6:	409a      	lsls	r2, r3
 80098f8:	4b19      	ldr	r3, [pc, #100]	; (8009960 <prvAddNewTaskToReadyList+0xc8>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4313      	orrs	r3, r2
 80098fe:	4a18      	ldr	r2, [pc, #96]	; (8009960 <prvAddNewTaskToReadyList+0xc8>)
 8009900:	6013      	str	r3, [r2, #0]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009906:	4613      	mov	r3, r2
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	4413      	add	r3, r2
 800990c:	009b      	lsls	r3, r3, #2
 800990e:	4a15      	ldr	r2, [pc, #84]	; (8009964 <prvAddNewTaskToReadyList+0xcc>)
 8009910:	441a      	add	r2, r3
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	3304      	adds	r3, #4
 8009916:	4619      	mov	r1, r3
 8009918:	4610      	mov	r0, r2
 800991a:	f7ff f88a 	bl	8008a32 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800991e:	f001 fa05 	bl	800ad2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009922:	4b0d      	ldr	r3, [pc, #52]	; (8009958 <prvAddNewTaskToReadyList+0xc0>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d00e      	beq.n	8009948 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800992a:	4b0a      	ldr	r3, [pc, #40]	; (8009954 <prvAddNewTaskToReadyList+0xbc>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009934:	429a      	cmp	r2, r3
 8009936:	d207      	bcs.n	8009948 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009938:	4b0b      	ldr	r3, [pc, #44]	; (8009968 <prvAddNewTaskToReadyList+0xd0>)
 800993a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800993e:	601a      	str	r2, [r3, #0]
 8009940:	f3bf 8f4f 	dsb	sy
 8009944:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009948:	bf00      	nop
 800994a:	3708      	adds	r7, #8
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}
 8009950:	20001014 	.word	0x20001014
 8009954:	20000f14 	.word	0x20000f14
 8009958:	20001020 	.word	0x20001020
 800995c:	20001030 	.word	0x20001030
 8009960:	2000101c 	.word	0x2000101c
 8009964:	20000f18 	.word	0x20000f18
 8009968:	e000ed04 	.word	0xe000ed04

0800996c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009974:	2300      	movs	r3, #0
 8009976:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d017      	beq.n	80099ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800997e:	4b13      	ldr	r3, [pc, #76]	; (80099cc <vTaskDelay+0x60>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d00a      	beq.n	800999c <vTaskDelay+0x30>
	__asm volatile
 8009986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800998a:	f383 8811 	msr	BASEPRI, r3
 800998e:	f3bf 8f6f 	isb	sy
 8009992:	f3bf 8f4f 	dsb	sy
 8009996:	60bb      	str	r3, [r7, #8]
}
 8009998:	bf00      	nop
 800999a:	e7fe      	b.n	800999a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800999c:	f000 f88a 	bl	8009ab4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80099a0:	2100      	movs	r1, #0
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f000 fd0e 	bl	800a3c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80099a8:	f000 f892 	bl	8009ad0 <xTaskResumeAll>
 80099ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d107      	bne.n	80099c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80099b4:	4b06      	ldr	r3, [pc, #24]	; (80099d0 <vTaskDelay+0x64>)
 80099b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099ba:	601a      	str	r2, [r3, #0]
 80099bc:	f3bf 8f4f 	dsb	sy
 80099c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80099c4:	bf00      	nop
 80099c6:	3710      	adds	r7, #16
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}
 80099cc:	2000103c 	.word	0x2000103c
 80099d0:	e000ed04 	.word	0xe000ed04

080099d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b08a      	sub	sp, #40	; 0x28
 80099d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80099da:	2300      	movs	r3, #0
 80099dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80099de:	2300      	movs	r3, #0
 80099e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80099e2:	463a      	mov	r2, r7
 80099e4:	1d39      	adds	r1, r7, #4
 80099e6:	f107 0308 	add.w	r3, r7, #8
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7f7 fb8a 	bl	8001104 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80099f0:	6839      	ldr	r1, [r7, #0]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	68ba      	ldr	r2, [r7, #8]
 80099f6:	9202      	str	r2, [sp, #8]
 80099f8:	9301      	str	r3, [sp, #4]
 80099fa:	2300      	movs	r3, #0
 80099fc:	9300      	str	r3, [sp, #0]
 80099fe:	2300      	movs	r3, #0
 8009a00:	460a      	mov	r2, r1
 8009a02:	4924      	ldr	r1, [pc, #144]	; (8009a94 <vTaskStartScheduler+0xc0>)
 8009a04:	4824      	ldr	r0, [pc, #144]	; (8009a98 <vTaskStartScheduler+0xc4>)
 8009a06:	f7ff fe07 	bl	8009618 <xTaskCreateStatic>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	4a23      	ldr	r2, [pc, #140]	; (8009a9c <vTaskStartScheduler+0xc8>)
 8009a0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009a10:	4b22      	ldr	r3, [pc, #136]	; (8009a9c <vTaskStartScheduler+0xc8>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d002      	beq.n	8009a1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	617b      	str	r3, [r7, #20]
 8009a1c:	e001      	b.n	8009a22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d102      	bne.n	8009a2e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009a28:	f000 fd32 	bl	800a490 <xTimerCreateTimerTask>
 8009a2c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d11b      	bne.n	8009a6c <vTaskStartScheduler+0x98>
	__asm volatile
 8009a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a38:	f383 8811 	msr	BASEPRI, r3
 8009a3c:	f3bf 8f6f 	isb	sy
 8009a40:	f3bf 8f4f 	dsb	sy
 8009a44:	613b      	str	r3, [r7, #16]
}
 8009a46:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009a48:	4b15      	ldr	r3, [pc, #84]	; (8009aa0 <vTaskStartScheduler+0xcc>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	334c      	adds	r3, #76	; 0x4c
 8009a4e:	4a15      	ldr	r2, [pc, #84]	; (8009aa4 <vTaskStartScheduler+0xd0>)
 8009a50:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009a52:	4b15      	ldr	r3, [pc, #84]	; (8009aa8 <vTaskStartScheduler+0xd4>)
 8009a54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a58:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009a5a:	4b14      	ldr	r3, [pc, #80]	; (8009aac <vTaskStartScheduler+0xd8>)
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009a60:	4b13      	ldr	r3, [pc, #76]	; (8009ab0 <vTaskStartScheduler+0xdc>)
 8009a62:	2200      	movs	r2, #0
 8009a64:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009a66:	f001 f8bf 	bl	800abe8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009a6a:	e00e      	b.n	8009a8a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a72:	d10a      	bne.n	8009a8a <vTaskStartScheduler+0xb6>
	__asm volatile
 8009a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a78:	f383 8811 	msr	BASEPRI, r3
 8009a7c:	f3bf 8f6f 	isb	sy
 8009a80:	f3bf 8f4f 	dsb	sy
 8009a84:	60fb      	str	r3, [r7, #12]
}
 8009a86:	bf00      	nop
 8009a88:	e7fe      	b.n	8009a88 <vTaskStartScheduler+0xb4>
}
 8009a8a:	bf00      	nop
 8009a8c:	3718      	adds	r7, #24
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
 8009a92:	bf00      	nop
 8009a94:	0800f1bc 	.word	0x0800f1bc
 8009a98:	0800a0c5 	.word	0x0800a0c5
 8009a9c:	20001038 	.word	0x20001038
 8009aa0:	20000f14 	.word	0x20000f14
 8009aa4:	20000010 	.word	0x20000010
 8009aa8:	20001034 	.word	0x20001034
 8009aac:	20001020 	.word	0x20001020
 8009ab0:	20001018 	.word	0x20001018

08009ab4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009ab8:	4b04      	ldr	r3, [pc, #16]	; (8009acc <vTaskSuspendAll+0x18>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	3301      	adds	r3, #1
 8009abe:	4a03      	ldr	r2, [pc, #12]	; (8009acc <vTaskSuspendAll+0x18>)
 8009ac0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009ac2:	bf00      	nop
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bc80      	pop	{r7}
 8009ac8:	4770      	bx	lr
 8009aca:	bf00      	nop
 8009acc:	2000103c 	.word	0x2000103c

08009ad0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009ada:	2300      	movs	r3, #0
 8009adc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009ade:	4b41      	ldr	r3, [pc, #260]	; (8009be4 <xTaskResumeAll+0x114>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d10a      	bne.n	8009afc <xTaskResumeAll+0x2c>
	__asm volatile
 8009ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aea:	f383 8811 	msr	BASEPRI, r3
 8009aee:	f3bf 8f6f 	isb	sy
 8009af2:	f3bf 8f4f 	dsb	sy
 8009af6:	603b      	str	r3, [r7, #0]
}
 8009af8:	bf00      	nop
 8009afa:	e7fe      	b.n	8009afa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009afc:	f001 f8e6 	bl	800accc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009b00:	4b38      	ldr	r3, [pc, #224]	; (8009be4 <xTaskResumeAll+0x114>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	3b01      	subs	r3, #1
 8009b06:	4a37      	ldr	r2, [pc, #220]	; (8009be4 <xTaskResumeAll+0x114>)
 8009b08:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b0a:	4b36      	ldr	r3, [pc, #216]	; (8009be4 <xTaskResumeAll+0x114>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d161      	bne.n	8009bd6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009b12:	4b35      	ldr	r3, [pc, #212]	; (8009be8 <xTaskResumeAll+0x118>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d05d      	beq.n	8009bd6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b1a:	e02e      	b.n	8009b7a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b1c:	4b33      	ldr	r3, [pc, #204]	; (8009bec <xTaskResumeAll+0x11c>)
 8009b1e:	68db      	ldr	r3, [r3, #12]
 8009b20:	68db      	ldr	r3, [r3, #12]
 8009b22:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	3318      	adds	r3, #24
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f7fe ffdd 	bl	8008ae8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	3304      	adds	r3, #4
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7fe ffd8 	bl	8008ae8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	409a      	lsls	r2, r3
 8009b40:	4b2b      	ldr	r3, [pc, #172]	; (8009bf0 <xTaskResumeAll+0x120>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4313      	orrs	r3, r2
 8009b46:	4a2a      	ldr	r2, [pc, #168]	; (8009bf0 <xTaskResumeAll+0x120>)
 8009b48:	6013      	str	r3, [r2, #0]
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b4e:	4613      	mov	r3, r2
 8009b50:	009b      	lsls	r3, r3, #2
 8009b52:	4413      	add	r3, r2
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	4a27      	ldr	r2, [pc, #156]	; (8009bf4 <xTaskResumeAll+0x124>)
 8009b58:	441a      	add	r2, r3
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	3304      	adds	r3, #4
 8009b5e:	4619      	mov	r1, r3
 8009b60:	4610      	mov	r0, r2
 8009b62:	f7fe ff66 	bl	8008a32 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b6a:	4b23      	ldr	r3, [pc, #140]	; (8009bf8 <xTaskResumeAll+0x128>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d302      	bcc.n	8009b7a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009b74:	4b21      	ldr	r3, [pc, #132]	; (8009bfc <xTaskResumeAll+0x12c>)
 8009b76:	2201      	movs	r2, #1
 8009b78:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b7a:	4b1c      	ldr	r3, [pc, #112]	; (8009bec <xTaskResumeAll+0x11c>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d1cc      	bne.n	8009b1c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d001      	beq.n	8009b8c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009b88:	f000 fb58 	bl	800a23c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009b8c:	4b1c      	ldr	r3, [pc, #112]	; (8009c00 <xTaskResumeAll+0x130>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d010      	beq.n	8009bba <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009b98:	f000 f844 	bl	8009c24 <xTaskIncrementTick>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d002      	beq.n	8009ba8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009ba2:	4b16      	ldr	r3, [pc, #88]	; (8009bfc <xTaskResumeAll+0x12c>)
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	3b01      	subs	r3, #1
 8009bac:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d1f1      	bne.n	8009b98 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8009bb4:	4b12      	ldr	r3, [pc, #72]	; (8009c00 <xTaskResumeAll+0x130>)
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009bba:	4b10      	ldr	r3, [pc, #64]	; (8009bfc <xTaskResumeAll+0x12c>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d009      	beq.n	8009bd6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009bc6:	4b0f      	ldr	r3, [pc, #60]	; (8009c04 <xTaskResumeAll+0x134>)
 8009bc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bcc:	601a      	str	r2, [r3, #0]
 8009bce:	f3bf 8f4f 	dsb	sy
 8009bd2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009bd6:	f001 f8a9 	bl	800ad2c <vPortExitCritical>

	return xAlreadyYielded;
 8009bda:	68bb      	ldr	r3, [r7, #8]
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3710      	adds	r7, #16
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}
 8009be4:	2000103c 	.word	0x2000103c
 8009be8:	20001014 	.word	0x20001014
 8009bec:	20000fd4 	.word	0x20000fd4
 8009bf0:	2000101c 	.word	0x2000101c
 8009bf4:	20000f18 	.word	0x20000f18
 8009bf8:	20000f14 	.word	0x20000f14
 8009bfc:	20001028 	.word	0x20001028
 8009c00:	20001024 	.word	0x20001024
 8009c04:	e000ed04 	.word	0xe000ed04

08009c08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b083      	sub	sp, #12
 8009c0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009c0e:	4b04      	ldr	r3, [pc, #16]	; (8009c20 <xTaskGetTickCount+0x18>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009c14:	687b      	ldr	r3, [r7, #4]
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	370c      	adds	r7, #12
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bc80      	pop	{r7}
 8009c1e:	4770      	bx	lr
 8009c20:	20001018 	.word	0x20001018

08009c24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b086      	sub	sp, #24
 8009c28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c2e:	4b4e      	ldr	r3, [pc, #312]	; (8009d68 <xTaskIncrementTick+0x144>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	f040 8088 	bne.w	8009d48 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009c38:	4b4c      	ldr	r3, [pc, #304]	; (8009d6c <xTaskIncrementTick+0x148>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009c40:	4a4a      	ldr	r2, [pc, #296]	; (8009d6c <xTaskIncrementTick+0x148>)
 8009c42:	693b      	ldr	r3, [r7, #16]
 8009c44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d120      	bne.n	8009c8e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009c4c:	4b48      	ldr	r3, [pc, #288]	; (8009d70 <xTaskIncrementTick+0x14c>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d00a      	beq.n	8009c6c <xTaskIncrementTick+0x48>
	__asm volatile
 8009c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5a:	f383 8811 	msr	BASEPRI, r3
 8009c5e:	f3bf 8f6f 	isb	sy
 8009c62:	f3bf 8f4f 	dsb	sy
 8009c66:	603b      	str	r3, [r7, #0]
}
 8009c68:	bf00      	nop
 8009c6a:	e7fe      	b.n	8009c6a <xTaskIncrementTick+0x46>
 8009c6c:	4b40      	ldr	r3, [pc, #256]	; (8009d70 <xTaskIncrementTick+0x14c>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	60fb      	str	r3, [r7, #12]
 8009c72:	4b40      	ldr	r3, [pc, #256]	; (8009d74 <xTaskIncrementTick+0x150>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4a3e      	ldr	r2, [pc, #248]	; (8009d70 <xTaskIncrementTick+0x14c>)
 8009c78:	6013      	str	r3, [r2, #0]
 8009c7a:	4a3e      	ldr	r2, [pc, #248]	; (8009d74 <xTaskIncrementTick+0x150>)
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	6013      	str	r3, [r2, #0]
 8009c80:	4b3d      	ldr	r3, [pc, #244]	; (8009d78 <xTaskIncrementTick+0x154>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	3301      	adds	r3, #1
 8009c86:	4a3c      	ldr	r2, [pc, #240]	; (8009d78 <xTaskIncrementTick+0x154>)
 8009c88:	6013      	str	r3, [r2, #0]
 8009c8a:	f000 fad7 	bl	800a23c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009c8e:	4b3b      	ldr	r3, [pc, #236]	; (8009d7c <xTaskIncrementTick+0x158>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	693a      	ldr	r2, [r7, #16]
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d348      	bcc.n	8009d2a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c98:	4b35      	ldr	r3, [pc, #212]	; (8009d70 <xTaskIncrementTick+0x14c>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d104      	bne.n	8009cac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ca2:	4b36      	ldr	r3, [pc, #216]	; (8009d7c <xTaskIncrementTick+0x158>)
 8009ca4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ca8:	601a      	str	r2, [r3, #0]
					break;
 8009caa:	e03e      	b.n	8009d2a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cac:	4b30      	ldr	r3, [pc, #192]	; (8009d70 <xTaskIncrementTick+0x14c>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	68db      	ldr	r3, [r3, #12]
 8009cb2:	68db      	ldr	r3, [r3, #12]
 8009cb4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009cbc:	693a      	ldr	r2, [r7, #16]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d203      	bcs.n	8009ccc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009cc4:	4a2d      	ldr	r2, [pc, #180]	; (8009d7c <xTaskIncrementTick+0x158>)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009cca:	e02e      	b.n	8009d2a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	3304      	adds	r3, #4
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f7fe ff09 	bl	8008ae8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d004      	beq.n	8009ce8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	3318      	adds	r3, #24
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f7fe ff00 	bl	8008ae8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cec:	2201      	movs	r2, #1
 8009cee:	409a      	lsls	r2, r3
 8009cf0:	4b23      	ldr	r3, [pc, #140]	; (8009d80 <xTaskIncrementTick+0x15c>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	4a22      	ldr	r2, [pc, #136]	; (8009d80 <xTaskIncrementTick+0x15c>)
 8009cf8:	6013      	str	r3, [r2, #0]
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cfe:	4613      	mov	r3, r2
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	4413      	add	r3, r2
 8009d04:	009b      	lsls	r3, r3, #2
 8009d06:	4a1f      	ldr	r2, [pc, #124]	; (8009d84 <xTaskIncrementTick+0x160>)
 8009d08:	441a      	add	r2, r3
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	3304      	adds	r3, #4
 8009d0e:	4619      	mov	r1, r3
 8009d10:	4610      	mov	r0, r2
 8009d12:	f7fe fe8e 	bl	8008a32 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d1a:	4b1b      	ldr	r3, [pc, #108]	; (8009d88 <xTaskIncrementTick+0x164>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d20:	429a      	cmp	r2, r3
 8009d22:	d3b9      	bcc.n	8009c98 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009d24:	2301      	movs	r3, #1
 8009d26:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d28:	e7b6      	b.n	8009c98 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009d2a:	4b17      	ldr	r3, [pc, #92]	; (8009d88 <xTaskIncrementTick+0x164>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d30:	4914      	ldr	r1, [pc, #80]	; (8009d84 <xTaskIncrementTick+0x160>)
 8009d32:	4613      	mov	r3, r2
 8009d34:	009b      	lsls	r3, r3, #2
 8009d36:	4413      	add	r3, r2
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	440b      	add	r3, r1
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	2b01      	cmp	r3, #1
 8009d40:	d907      	bls.n	8009d52 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8009d42:	2301      	movs	r3, #1
 8009d44:	617b      	str	r3, [r7, #20]
 8009d46:	e004      	b.n	8009d52 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009d48:	4b10      	ldr	r3, [pc, #64]	; (8009d8c <xTaskIncrementTick+0x168>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	3301      	adds	r3, #1
 8009d4e:	4a0f      	ldr	r2, [pc, #60]	; (8009d8c <xTaskIncrementTick+0x168>)
 8009d50:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009d52:	4b0f      	ldr	r3, [pc, #60]	; (8009d90 <xTaskIncrementTick+0x16c>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d001      	beq.n	8009d5e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009d5e:	697b      	ldr	r3, [r7, #20]
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3718      	adds	r7, #24
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}
 8009d68:	2000103c 	.word	0x2000103c
 8009d6c:	20001018 	.word	0x20001018
 8009d70:	20000fcc 	.word	0x20000fcc
 8009d74:	20000fd0 	.word	0x20000fd0
 8009d78:	2000102c 	.word	0x2000102c
 8009d7c:	20001034 	.word	0x20001034
 8009d80:	2000101c 	.word	0x2000101c
 8009d84:	20000f18 	.word	0x20000f18
 8009d88:	20000f14 	.word	0x20000f14
 8009d8c:	20001024 	.word	0x20001024
 8009d90:	20001028 	.word	0x20001028

08009d94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009d94:	b480      	push	{r7}
 8009d96:	b087      	sub	sp, #28
 8009d98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009d9a:	4b29      	ldr	r3, [pc, #164]	; (8009e40 <vTaskSwitchContext+0xac>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d003      	beq.n	8009daa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009da2:	4b28      	ldr	r3, [pc, #160]	; (8009e44 <vTaskSwitchContext+0xb0>)
 8009da4:	2201      	movs	r2, #1
 8009da6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009da8:	e044      	b.n	8009e34 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8009daa:	4b26      	ldr	r3, [pc, #152]	; (8009e44 <vTaskSwitchContext+0xb0>)
 8009dac:	2200      	movs	r2, #0
 8009dae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009db0:	4b25      	ldr	r3, [pc, #148]	; (8009e48 <vTaskSwitchContext+0xb4>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	fab3 f383 	clz	r3, r3
 8009dbc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009dbe:	7afb      	ldrb	r3, [r7, #11]
 8009dc0:	f1c3 031f 	rsb	r3, r3, #31
 8009dc4:	617b      	str	r3, [r7, #20]
 8009dc6:	4921      	ldr	r1, [pc, #132]	; (8009e4c <vTaskSwitchContext+0xb8>)
 8009dc8:	697a      	ldr	r2, [r7, #20]
 8009dca:	4613      	mov	r3, r2
 8009dcc:	009b      	lsls	r3, r3, #2
 8009dce:	4413      	add	r3, r2
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	440b      	add	r3, r1
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d10a      	bne.n	8009df0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8009dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dde:	f383 8811 	msr	BASEPRI, r3
 8009de2:	f3bf 8f6f 	isb	sy
 8009de6:	f3bf 8f4f 	dsb	sy
 8009dea:	607b      	str	r3, [r7, #4]
}
 8009dec:	bf00      	nop
 8009dee:	e7fe      	b.n	8009dee <vTaskSwitchContext+0x5a>
 8009df0:	697a      	ldr	r2, [r7, #20]
 8009df2:	4613      	mov	r3, r2
 8009df4:	009b      	lsls	r3, r3, #2
 8009df6:	4413      	add	r3, r2
 8009df8:	009b      	lsls	r3, r3, #2
 8009dfa:	4a14      	ldr	r2, [pc, #80]	; (8009e4c <vTaskSwitchContext+0xb8>)
 8009dfc:	4413      	add	r3, r2
 8009dfe:	613b      	str	r3, [r7, #16]
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	685a      	ldr	r2, [r3, #4]
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	605a      	str	r2, [r3, #4]
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	685a      	ldr	r2, [r3, #4]
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	3308      	adds	r3, #8
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d104      	bne.n	8009e20 <vTaskSwitchContext+0x8c>
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	685a      	ldr	r2, [r3, #4]
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	605a      	str	r2, [r3, #4]
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	68db      	ldr	r3, [r3, #12]
 8009e26:	4a0a      	ldr	r2, [pc, #40]	; (8009e50 <vTaskSwitchContext+0xbc>)
 8009e28:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009e2a:	4b09      	ldr	r3, [pc, #36]	; (8009e50 <vTaskSwitchContext+0xbc>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	334c      	adds	r3, #76	; 0x4c
 8009e30:	4a08      	ldr	r2, [pc, #32]	; (8009e54 <vTaskSwitchContext+0xc0>)
 8009e32:	6013      	str	r3, [r2, #0]
}
 8009e34:	bf00      	nop
 8009e36:	371c      	adds	r7, #28
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bc80      	pop	{r7}
 8009e3c:	4770      	bx	lr
 8009e3e:	bf00      	nop
 8009e40:	2000103c 	.word	0x2000103c
 8009e44:	20001028 	.word	0x20001028
 8009e48:	2000101c 	.word	0x2000101c
 8009e4c:	20000f18 	.word	0x20000f18
 8009e50:	20000f14 	.word	0x20000f14
 8009e54:	20000010 	.word	0x20000010

08009e58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d10a      	bne.n	8009e7e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e6c:	f383 8811 	msr	BASEPRI, r3
 8009e70:	f3bf 8f6f 	isb	sy
 8009e74:	f3bf 8f4f 	dsb	sy
 8009e78:	60fb      	str	r3, [r7, #12]
}
 8009e7a:	bf00      	nop
 8009e7c:	e7fe      	b.n	8009e7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e7e:	4b07      	ldr	r3, [pc, #28]	; (8009e9c <vTaskPlaceOnEventList+0x44>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	3318      	adds	r3, #24
 8009e84:	4619      	mov	r1, r3
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f7fe fdf6 	bl	8008a78 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009e8c:	2101      	movs	r1, #1
 8009e8e:	6838      	ldr	r0, [r7, #0]
 8009e90:	f000 fa98 	bl	800a3c4 <prvAddCurrentTaskToDelayedList>
}
 8009e94:	bf00      	nop
 8009e96:	3710      	adds	r7, #16
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}
 8009e9c:	20000f14 	.word	0x20000f14

08009ea0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b086      	sub	sp, #24
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d10a      	bne.n	8009ec8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb6:	f383 8811 	msr	BASEPRI, r3
 8009eba:	f3bf 8f6f 	isb	sy
 8009ebe:	f3bf 8f4f 	dsb	sy
 8009ec2:	617b      	str	r3, [r7, #20]
}
 8009ec4:	bf00      	nop
 8009ec6:	e7fe      	b.n	8009ec6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009ec8:	4b0a      	ldr	r3, [pc, #40]	; (8009ef4 <vTaskPlaceOnEventListRestricted+0x54>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	3318      	adds	r3, #24
 8009ece:	4619      	mov	r1, r3
 8009ed0:	68f8      	ldr	r0, [r7, #12]
 8009ed2:	f7fe fdae 	bl	8008a32 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d002      	beq.n	8009ee2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009edc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ee0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009ee2:	6879      	ldr	r1, [r7, #4]
 8009ee4:	68b8      	ldr	r0, [r7, #8]
 8009ee6:	f000 fa6d 	bl	800a3c4 <prvAddCurrentTaskToDelayedList>
	}
 8009eea:	bf00      	nop
 8009eec:	3718      	adds	r7, #24
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}
 8009ef2:	bf00      	nop
 8009ef4:	20000f14 	.word	0x20000f14

08009ef8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b086      	sub	sp, #24
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	68db      	ldr	r3, [r3, #12]
 8009f04:	68db      	ldr	r3, [r3, #12]
 8009f06:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d10a      	bne.n	8009f24 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f12:	f383 8811 	msr	BASEPRI, r3
 8009f16:	f3bf 8f6f 	isb	sy
 8009f1a:	f3bf 8f4f 	dsb	sy
 8009f1e:	60fb      	str	r3, [r7, #12]
}
 8009f20:	bf00      	nop
 8009f22:	e7fe      	b.n	8009f22 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	3318      	adds	r3, #24
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f7fe fddd 	bl	8008ae8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f2e:	4b1d      	ldr	r3, [pc, #116]	; (8009fa4 <xTaskRemoveFromEventList+0xac>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d11c      	bne.n	8009f70 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	3304      	adds	r3, #4
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f7fe fdd4 	bl	8008ae8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f44:	2201      	movs	r2, #1
 8009f46:	409a      	lsls	r2, r3
 8009f48:	4b17      	ldr	r3, [pc, #92]	; (8009fa8 <xTaskRemoveFromEventList+0xb0>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	4a16      	ldr	r2, [pc, #88]	; (8009fa8 <xTaskRemoveFromEventList+0xb0>)
 8009f50:	6013      	str	r3, [r2, #0]
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f56:	4613      	mov	r3, r2
 8009f58:	009b      	lsls	r3, r3, #2
 8009f5a:	4413      	add	r3, r2
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	4a13      	ldr	r2, [pc, #76]	; (8009fac <xTaskRemoveFromEventList+0xb4>)
 8009f60:	441a      	add	r2, r3
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	3304      	adds	r3, #4
 8009f66:	4619      	mov	r1, r3
 8009f68:	4610      	mov	r0, r2
 8009f6a:	f7fe fd62 	bl	8008a32 <vListInsertEnd>
 8009f6e:	e005      	b.n	8009f7c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	3318      	adds	r3, #24
 8009f74:	4619      	mov	r1, r3
 8009f76:	480e      	ldr	r0, [pc, #56]	; (8009fb0 <xTaskRemoveFromEventList+0xb8>)
 8009f78:	f7fe fd5b 	bl	8008a32 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f80:	4b0c      	ldr	r3, [pc, #48]	; (8009fb4 <xTaskRemoveFromEventList+0xbc>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d905      	bls.n	8009f96 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009f8e:	4b0a      	ldr	r3, [pc, #40]	; (8009fb8 <xTaskRemoveFromEventList+0xc0>)
 8009f90:	2201      	movs	r2, #1
 8009f92:	601a      	str	r2, [r3, #0]
 8009f94:	e001      	b.n	8009f9a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009f96:	2300      	movs	r3, #0
 8009f98:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009f9a:	697b      	ldr	r3, [r7, #20]
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3718      	adds	r7, #24
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}
 8009fa4:	2000103c 	.word	0x2000103c
 8009fa8:	2000101c 	.word	0x2000101c
 8009fac:	20000f18 	.word	0x20000f18
 8009fb0:	20000fd4 	.word	0x20000fd4
 8009fb4:	20000f14 	.word	0x20000f14
 8009fb8:	20001028 	.word	0x20001028

08009fbc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b083      	sub	sp, #12
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009fc4:	4b06      	ldr	r3, [pc, #24]	; (8009fe0 <vTaskInternalSetTimeOutState+0x24>)
 8009fc6:	681a      	ldr	r2, [r3, #0]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009fcc:	4b05      	ldr	r3, [pc, #20]	; (8009fe4 <vTaskInternalSetTimeOutState+0x28>)
 8009fce:	681a      	ldr	r2, [r3, #0]
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	605a      	str	r2, [r3, #4]
}
 8009fd4:	bf00      	nop
 8009fd6:	370c      	adds	r7, #12
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bc80      	pop	{r7}
 8009fdc:	4770      	bx	lr
 8009fde:	bf00      	nop
 8009fe0:	2000102c 	.word	0x2000102c
 8009fe4:	20001018 	.word	0x20001018

08009fe8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b088      	sub	sp, #32
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d10a      	bne.n	800a00e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffc:	f383 8811 	msr	BASEPRI, r3
 800a000:	f3bf 8f6f 	isb	sy
 800a004:	f3bf 8f4f 	dsb	sy
 800a008:	613b      	str	r3, [r7, #16]
}
 800a00a:	bf00      	nop
 800a00c:	e7fe      	b.n	800a00c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d10a      	bne.n	800a02a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a018:	f383 8811 	msr	BASEPRI, r3
 800a01c:	f3bf 8f6f 	isb	sy
 800a020:	f3bf 8f4f 	dsb	sy
 800a024:	60fb      	str	r3, [r7, #12]
}
 800a026:	bf00      	nop
 800a028:	e7fe      	b.n	800a028 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a02a:	f000 fe4f 	bl	800accc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a02e:	4b1d      	ldr	r3, [pc, #116]	; (800a0a4 <xTaskCheckForTimeOut+0xbc>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	69ba      	ldr	r2, [r7, #24]
 800a03a:	1ad3      	subs	r3, r2, r3
 800a03c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a046:	d102      	bne.n	800a04e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a048:	2300      	movs	r3, #0
 800a04a:	61fb      	str	r3, [r7, #28]
 800a04c:	e023      	b.n	800a096 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	4b15      	ldr	r3, [pc, #84]	; (800a0a8 <xTaskCheckForTimeOut+0xc0>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	429a      	cmp	r2, r3
 800a058:	d007      	beq.n	800a06a <xTaskCheckForTimeOut+0x82>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	69ba      	ldr	r2, [r7, #24]
 800a060:	429a      	cmp	r2, r3
 800a062:	d302      	bcc.n	800a06a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a064:	2301      	movs	r3, #1
 800a066:	61fb      	str	r3, [r7, #28]
 800a068:	e015      	b.n	800a096 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	697a      	ldr	r2, [r7, #20]
 800a070:	429a      	cmp	r2, r3
 800a072:	d20b      	bcs.n	800a08c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	1ad2      	subs	r2, r2, r3
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f7ff ff9b 	bl	8009fbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a086:	2300      	movs	r3, #0
 800a088:	61fb      	str	r3, [r7, #28]
 800a08a:	e004      	b.n	800a096 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	2200      	movs	r2, #0
 800a090:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a092:	2301      	movs	r3, #1
 800a094:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a096:	f000 fe49 	bl	800ad2c <vPortExitCritical>

	return xReturn;
 800a09a:	69fb      	ldr	r3, [r7, #28]
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3720      	adds	r7, #32
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}
 800a0a4:	20001018 	.word	0x20001018
 800a0a8:	2000102c 	.word	0x2000102c

0800a0ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a0b0:	4b03      	ldr	r3, [pc, #12]	; (800a0c0 <vTaskMissedYield+0x14>)
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	601a      	str	r2, [r3, #0]
}
 800a0b6:	bf00      	nop
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bc80      	pop	{r7}
 800a0bc:	4770      	bx	lr
 800a0be:	bf00      	nop
 800a0c0:	20001028 	.word	0x20001028

0800a0c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a0cc:	f000 f854 	bl	800a178 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a0d0:	4b07      	ldr	r3, [pc, #28]	; (800a0f0 <prvIdleTask+0x2c>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d907      	bls.n	800a0e8 <prvIdleTask+0x24>
			{
				taskYIELD();
 800a0d8:	4b06      	ldr	r3, [pc, #24]	; (800a0f4 <prvIdleTask+0x30>)
 800a0da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0de:	601a      	str	r2, [r3, #0]
 800a0e0:	f3bf 8f4f 	dsb	sy
 800a0e4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800a0e8:	f7f7 f806 	bl	80010f8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800a0ec:	e7ee      	b.n	800a0cc <prvIdleTask+0x8>
 800a0ee:	bf00      	nop
 800a0f0:	20000f18 	.word	0x20000f18
 800a0f4:	e000ed04 	.word	0xe000ed04

0800a0f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a0fe:	2300      	movs	r3, #0
 800a100:	607b      	str	r3, [r7, #4]
 800a102:	e00c      	b.n	800a11e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	4613      	mov	r3, r2
 800a108:	009b      	lsls	r3, r3, #2
 800a10a:	4413      	add	r3, r2
 800a10c:	009b      	lsls	r3, r3, #2
 800a10e:	4a12      	ldr	r2, [pc, #72]	; (800a158 <prvInitialiseTaskLists+0x60>)
 800a110:	4413      	add	r3, r2
 800a112:	4618      	mov	r0, r3
 800a114:	f7fe fc62 	bl	80089dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	3301      	adds	r3, #1
 800a11c:	607b      	str	r3, [r7, #4]
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2b06      	cmp	r3, #6
 800a122:	d9ef      	bls.n	800a104 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a124:	480d      	ldr	r0, [pc, #52]	; (800a15c <prvInitialiseTaskLists+0x64>)
 800a126:	f7fe fc59 	bl	80089dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a12a:	480d      	ldr	r0, [pc, #52]	; (800a160 <prvInitialiseTaskLists+0x68>)
 800a12c:	f7fe fc56 	bl	80089dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a130:	480c      	ldr	r0, [pc, #48]	; (800a164 <prvInitialiseTaskLists+0x6c>)
 800a132:	f7fe fc53 	bl	80089dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a136:	480c      	ldr	r0, [pc, #48]	; (800a168 <prvInitialiseTaskLists+0x70>)
 800a138:	f7fe fc50 	bl	80089dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a13c:	480b      	ldr	r0, [pc, #44]	; (800a16c <prvInitialiseTaskLists+0x74>)
 800a13e:	f7fe fc4d 	bl	80089dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a142:	4b0b      	ldr	r3, [pc, #44]	; (800a170 <prvInitialiseTaskLists+0x78>)
 800a144:	4a05      	ldr	r2, [pc, #20]	; (800a15c <prvInitialiseTaskLists+0x64>)
 800a146:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a148:	4b0a      	ldr	r3, [pc, #40]	; (800a174 <prvInitialiseTaskLists+0x7c>)
 800a14a:	4a05      	ldr	r2, [pc, #20]	; (800a160 <prvInitialiseTaskLists+0x68>)
 800a14c:	601a      	str	r2, [r3, #0]
}
 800a14e:	bf00      	nop
 800a150:	3708      	adds	r7, #8
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
 800a156:	bf00      	nop
 800a158:	20000f18 	.word	0x20000f18
 800a15c:	20000fa4 	.word	0x20000fa4
 800a160:	20000fb8 	.word	0x20000fb8
 800a164:	20000fd4 	.word	0x20000fd4
 800a168:	20000fe8 	.word	0x20000fe8
 800a16c:	20001000 	.word	0x20001000
 800a170:	20000fcc 	.word	0x20000fcc
 800a174:	20000fd0 	.word	0x20000fd0

0800a178 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b082      	sub	sp, #8
 800a17c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a17e:	e019      	b.n	800a1b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a180:	f000 fda4 	bl	800accc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a184:	4b10      	ldr	r3, [pc, #64]	; (800a1c8 <prvCheckTasksWaitingTermination+0x50>)
 800a186:	68db      	ldr	r3, [r3, #12]
 800a188:	68db      	ldr	r3, [r3, #12]
 800a18a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	3304      	adds	r3, #4
 800a190:	4618      	mov	r0, r3
 800a192:	f7fe fca9 	bl	8008ae8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a196:	4b0d      	ldr	r3, [pc, #52]	; (800a1cc <prvCheckTasksWaitingTermination+0x54>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	3b01      	subs	r3, #1
 800a19c:	4a0b      	ldr	r2, [pc, #44]	; (800a1cc <prvCheckTasksWaitingTermination+0x54>)
 800a19e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a1a0:	4b0b      	ldr	r3, [pc, #44]	; (800a1d0 <prvCheckTasksWaitingTermination+0x58>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	3b01      	subs	r3, #1
 800a1a6:	4a0a      	ldr	r2, [pc, #40]	; (800a1d0 <prvCheckTasksWaitingTermination+0x58>)
 800a1a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a1aa:	f000 fdbf 	bl	800ad2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f000 f810 	bl	800a1d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a1b4:	4b06      	ldr	r3, [pc, #24]	; (800a1d0 <prvCheckTasksWaitingTermination+0x58>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d1e1      	bne.n	800a180 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a1bc:	bf00      	nop
 800a1be:	bf00      	nop
 800a1c0:	3708      	adds	r7, #8
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}
 800a1c6:	bf00      	nop
 800a1c8:	20000fe8 	.word	0x20000fe8
 800a1cc:	20001014 	.word	0x20001014
 800a1d0:	20000ffc 	.word	0x20000ffc

0800a1d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b084      	sub	sp, #16
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	334c      	adds	r3, #76	; 0x4c
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f001 fe83 	bl	800beec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d108      	bne.n	800a202 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f000 ff2d 	bl	800b054 <vPortFree>
				vPortFree( pxTCB );
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f000 ff2a 	bl	800b054 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a200:	e018      	b.n	800a234 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d103      	bne.n	800a214 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f000 ff21 	bl	800b054 <vPortFree>
	}
 800a212:	e00f      	b.n	800a234 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a21a:	2b02      	cmp	r3, #2
 800a21c:	d00a      	beq.n	800a234 <prvDeleteTCB+0x60>
	__asm volatile
 800a21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a222:	f383 8811 	msr	BASEPRI, r3
 800a226:	f3bf 8f6f 	isb	sy
 800a22a:	f3bf 8f4f 	dsb	sy
 800a22e:	60fb      	str	r3, [r7, #12]
}
 800a230:	bf00      	nop
 800a232:	e7fe      	b.n	800a232 <prvDeleteTCB+0x5e>
	}
 800a234:	bf00      	nop
 800a236:	3710      	adds	r7, #16
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a23c:	b480      	push	{r7}
 800a23e:	b083      	sub	sp, #12
 800a240:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a242:	4b0c      	ldr	r3, [pc, #48]	; (800a274 <prvResetNextTaskUnblockTime+0x38>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d104      	bne.n	800a256 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a24c:	4b0a      	ldr	r3, [pc, #40]	; (800a278 <prvResetNextTaskUnblockTime+0x3c>)
 800a24e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a252:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a254:	e008      	b.n	800a268 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a256:	4b07      	ldr	r3, [pc, #28]	; (800a274 <prvResetNextTaskUnblockTime+0x38>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	68db      	ldr	r3, [r3, #12]
 800a25c:	68db      	ldr	r3, [r3, #12]
 800a25e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	4a04      	ldr	r2, [pc, #16]	; (800a278 <prvResetNextTaskUnblockTime+0x3c>)
 800a266:	6013      	str	r3, [r2, #0]
}
 800a268:	bf00      	nop
 800a26a:	370c      	adds	r7, #12
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bc80      	pop	{r7}
 800a270:	4770      	bx	lr
 800a272:	bf00      	nop
 800a274:	20000fcc 	.word	0x20000fcc
 800a278:	20001034 	.word	0x20001034

0800a27c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a27c:	b480      	push	{r7}
 800a27e:	b083      	sub	sp, #12
 800a280:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a282:	4b0b      	ldr	r3, [pc, #44]	; (800a2b0 <xTaskGetSchedulerState+0x34>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d102      	bne.n	800a290 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a28a:	2301      	movs	r3, #1
 800a28c:	607b      	str	r3, [r7, #4]
 800a28e:	e008      	b.n	800a2a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a290:	4b08      	ldr	r3, [pc, #32]	; (800a2b4 <xTaskGetSchedulerState+0x38>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d102      	bne.n	800a29e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a298:	2302      	movs	r3, #2
 800a29a:	607b      	str	r3, [r7, #4]
 800a29c:	e001      	b.n	800a2a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a2a2:	687b      	ldr	r3, [r7, #4]
	}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	370c      	adds	r7, #12
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bc80      	pop	{r7}
 800a2ac:	4770      	bx	lr
 800a2ae:	bf00      	nop
 800a2b0:	20001020 	.word	0x20001020
 800a2b4:	2000103c 	.word	0x2000103c

0800a2b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b086      	sub	sp, #24
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d06e      	beq.n	800a3ac <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a2ce:	4b3a      	ldr	r3, [pc, #232]	; (800a3b8 <xTaskPriorityDisinherit+0x100>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	693a      	ldr	r2, [r7, #16]
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d00a      	beq.n	800a2ee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2dc:	f383 8811 	msr	BASEPRI, r3
 800a2e0:	f3bf 8f6f 	isb	sy
 800a2e4:	f3bf 8f4f 	dsb	sy
 800a2e8:	60fb      	str	r3, [r7, #12]
}
 800a2ea:	bf00      	nop
 800a2ec:	e7fe      	b.n	800a2ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d10a      	bne.n	800a30c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fa:	f383 8811 	msr	BASEPRI, r3
 800a2fe:	f3bf 8f6f 	isb	sy
 800a302:	f3bf 8f4f 	dsb	sy
 800a306:	60bb      	str	r3, [r7, #8]
}
 800a308:	bf00      	nop
 800a30a:	e7fe      	b.n	800a30a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a310:	1e5a      	subs	r2, r3, #1
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a31e:	429a      	cmp	r2, r3
 800a320:	d044      	beq.n	800a3ac <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a326:	2b00      	cmp	r3, #0
 800a328:	d140      	bne.n	800a3ac <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	3304      	adds	r3, #4
 800a32e:	4618      	mov	r0, r3
 800a330:	f7fe fbda 	bl	8008ae8 <uxListRemove>
 800a334:	4603      	mov	r3, r0
 800a336:	2b00      	cmp	r3, #0
 800a338:	d115      	bne.n	800a366 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a33e:	491f      	ldr	r1, [pc, #124]	; (800a3bc <xTaskPriorityDisinherit+0x104>)
 800a340:	4613      	mov	r3, r2
 800a342:	009b      	lsls	r3, r3, #2
 800a344:	4413      	add	r3, r2
 800a346:	009b      	lsls	r3, r3, #2
 800a348:	440b      	add	r3, r1
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d10a      	bne.n	800a366 <xTaskPriorityDisinherit+0xae>
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a354:	2201      	movs	r2, #1
 800a356:	fa02 f303 	lsl.w	r3, r2, r3
 800a35a:	43da      	mvns	r2, r3
 800a35c:	4b18      	ldr	r3, [pc, #96]	; (800a3c0 <xTaskPriorityDisinherit+0x108>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4013      	ands	r3, r2
 800a362:	4a17      	ldr	r2, [pc, #92]	; (800a3c0 <xTaskPriorityDisinherit+0x108>)
 800a364:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a372:	f1c3 0207 	rsb	r2, r3, #7
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a37e:	2201      	movs	r2, #1
 800a380:	409a      	lsls	r2, r3
 800a382:	4b0f      	ldr	r3, [pc, #60]	; (800a3c0 <xTaskPriorityDisinherit+0x108>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4313      	orrs	r3, r2
 800a388:	4a0d      	ldr	r2, [pc, #52]	; (800a3c0 <xTaskPriorityDisinherit+0x108>)
 800a38a:	6013      	str	r3, [r2, #0]
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a390:	4613      	mov	r3, r2
 800a392:	009b      	lsls	r3, r3, #2
 800a394:	4413      	add	r3, r2
 800a396:	009b      	lsls	r3, r3, #2
 800a398:	4a08      	ldr	r2, [pc, #32]	; (800a3bc <xTaskPriorityDisinherit+0x104>)
 800a39a:	441a      	add	r2, r3
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	3304      	adds	r3, #4
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	4610      	mov	r0, r2
 800a3a4:	f7fe fb45 	bl	8008a32 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a3ac:	697b      	ldr	r3, [r7, #20]
	}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3718      	adds	r7, #24
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
 800a3b6:	bf00      	nop
 800a3b8:	20000f14 	.word	0x20000f14
 800a3bc:	20000f18 	.word	0x20000f18
 800a3c0:	2000101c 	.word	0x2000101c

0800a3c4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b084      	sub	sp, #16
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a3ce:	4b29      	ldr	r3, [pc, #164]	; (800a474 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a3d4:	4b28      	ldr	r3, [pc, #160]	; (800a478 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	3304      	adds	r3, #4
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7fe fb84 	bl	8008ae8 <uxListRemove>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d10b      	bne.n	800a3fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a3e6:	4b24      	ldr	r3, [pc, #144]	; (800a478 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ec:	2201      	movs	r2, #1
 800a3ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a3f2:	43da      	mvns	r2, r3
 800a3f4:	4b21      	ldr	r3, [pc, #132]	; (800a47c <prvAddCurrentTaskToDelayedList+0xb8>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	4013      	ands	r3, r2
 800a3fa:	4a20      	ldr	r2, [pc, #128]	; (800a47c <prvAddCurrentTaskToDelayedList+0xb8>)
 800a3fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a404:	d10a      	bne.n	800a41c <prvAddCurrentTaskToDelayedList+0x58>
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d007      	beq.n	800a41c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a40c:	4b1a      	ldr	r3, [pc, #104]	; (800a478 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	3304      	adds	r3, #4
 800a412:	4619      	mov	r1, r3
 800a414:	481a      	ldr	r0, [pc, #104]	; (800a480 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a416:	f7fe fb0c 	bl	8008a32 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a41a:	e026      	b.n	800a46a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a41c:	68fa      	ldr	r2, [r7, #12]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	4413      	add	r3, r2
 800a422:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a424:	4b14      	ldr	r3, [pc, #80]	; (800a478 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	68ba      	ldr	r2, [r7, #8]
 800a42a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a42c:	68ba      	ldr	r2, [r7, #8]
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	429a      	cmp	r2, r3
 800a432:	d209      	bcs.n	800a448 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a434:	4b13      	ldr	r3, [pc, #76]	; (800a484 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a436:	681a      	ldr	r2, [r3, #0]
 800a438:	4b0f      	ldr	r3, [pc, #60]	; (800a478 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	3304      	adds	r3, #4
 800a43e:	4619      	mov	r1, r3
 800a440:	4610      	mov	r0, r2
 800a442:	f7fe fb19 	bl	8008a78 <vListInsert>
}
 800a446:	e010      	b.n	800a46a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a448:	4b0f      	ldr	r3, [pc, #60]	; (800a488 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a44a:	681a      	ldr	r2, [r3, #0]
 800a44c:	4b0a      	ldr	r3, [pc, #40]	; (800a478 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	3304      	adds	r3, #4
 800a452:	4619      	mov	r1, r3
 800a454:	4610      	mov	r0, r2
 800a456:	f7fe fb0f 	bl	8008a78 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a45a:	4b0c      	ldr	r3, [pc, #48]	; (800a48c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	68ba      	ldr	r2, [r7, #8]
 800a460:	429a      	cmp	r2, r3
 800a462:	d202      	bcs.n	800a46a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a464:	4a09      	ldr	r2, [pc, #36]	; (800a48c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	6013      	str	r3, [r2, #0]
}
 800a46a:	bf00      	nop
 800a46c:	3710      	adds	r7, #16
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}
 800a472:	bf00      	nop
 800a474:	20001018 	.word	0x20001018
 800a478:	20000f14 	.word	0x20000f14
 800a47c:	2000101c 	.word	0x2000101c
 800a480:	20001000 	.word	0x20001000
 800a484:	20000fd0 	.word	0x20000fd0
 800a488:	20000fcc 	.word	0x20000fcc
 800a48c:	20001034 	.word	0x20001034

0800a490 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b08a      	sub	sp, #40	; 0x28
 800a494:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a496:	2300      	movs	r3, #0
 800a498:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a49a:	f000 fae9 	bl	800aa70 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a49e:	4b1c      	ldr	r3, [pc, #112]	; (800a510 <xTimerCreateTimerTask+0x80>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d021      	beq.n	800a4ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a4ae:	1d3a      	adds	r2, r7, #4
 800a4b0:	f107 0108 	add.w	r1, r7, #8
 800a4b4:	f107 030c 	add.w	r3, r7, #12
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f7f6 fe3b 	bl	8001134 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a4be:	6879      	ldr	r1, [r7, #4]
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	68fa      	ldr	r2, [r7, #12]
 800a4c4:	9202      	str	r2, [sp, #8]
 800a4c6:	9301      	str	r3, [sp, #4]
 800a4c8:	2302      	movs	r3, #2
 800a4ca:	9300      	str	r3, [sp, #0]
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	460a      	mov	r2, r1
 800a4d0:	4910      	ldr	r1, [pc, #64]	; (800a514 <xTimerCreateTimerTask+0x84>)
 800a4d2:	4811      	ldr	r0, [pc, #68]	; (800a518 <xTimerCreateTimerTask+0x88>)
 800a4d4:	f7ff f8a0 	bl	8009618 <xTaskCreateStatic>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	4a10      	ldr	r2, [pc, #64]	; (800a51c <xTimerCreateTimerTask+0x8c>)
 800a4dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a4de:	4b0f      	ldr	r3, [pc, #60]	; (800a51c <xTimerCreateTimerTask+0x8c>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d001      	beq.n	800a4ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d10a      	bne.n	800a506 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f4:	f383 8811 	msr	BASEPRI, r3
 800a4f8:	f3bf 8f6f 	isb	sy
 800a4fc:	f3bf 8f4f 	dsb	sy
 800a500:	613b      	str	r3, [r7, #16]
}
 800a502:	bf00      	nop
 800a504:	e7fe      	b.n	800a504 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a506:	697b      	ldr	r3, [r7, #20]
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3718      	adds	r7, #24
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}
 800a510:	20001070 	.word	0x20001070
 800a514:	0800f1c4 	.word	0x0800f1c4
 800a518:	0800a655 	.word	0x0800a655
 800a51c:	20001074 	.word	0x20001074

0800a520 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b08a      	sub	sp, #40	; 0x28
 800a524:	af00      	add	r7, sp, #0
 800a526:	60f8      	str	r0, [r7, #12]
 800a528:	60b9      	str	r1, [r7, #8]
 800a52a:	607a      	str	r2, [r7, #4]
 800a52c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a52e:	2300      	movs	r3, #0
 800a530:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d10a      	bne.n	800a54e <xTimerGenericCommand+0x2e>
	__asm volatile
 800a538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a53c:	f383 8811 	msr	BASEPRI, r3
 800a540:	f3bf 8f6f 	isb	sy
 800a544:	f3bf 8f4f 	dsb	sy
 800a548:	623b      	str	r3, [r7, #32]
}
 800a54a:	bf00      	nop
 800a54c:	e7fe      	b.n	800a54c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a54e:	4b1a      	ldr	r3, [pc, #104]	; (800a5b8 <xTimerGenericCommand+0x98>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d02a      	beq.n	800a5ac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	2b05      	cmp	r3, #5
 800a566:	dc18      	bgt.n	800a59a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a568:	f7ff fe88 	bl	800a27c <xTaskGetSchedulerState>
 800a56c:	4603      	mov	r3, r0
 800a56e:	2b02      	cmp	r3, #2
 800a570:	d109      	bne.n	800a586 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a572:	4b11      	ldr	r3, [pc, #68]	; (800a5b8 <xTimerGenericCommand+0x98>)
 800a574:	6818      	ldr	r0, [r3, #0]
 800a576:	f107 0114 	add.w	r1, r7, #20
 800a57a:	2300      	movs	r3, #0
 800a57c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a57e:	f7fe fc69 	bl	8008e54 <xQueueGenericSend>
 800a582:	6278      	str	r0, [r7, #36]	; 0x24
 800a584:	e012      	b.n	800a5ac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a586:	4b0c      	ldr	r3, [pc, #48]	; (800a5b8 <xTimerGenericCommand+0x98>)
 800a588:	6818      	ldr	r0, [r3, #0]
 800a58a:	f107 0114 	add.w	r1, r7, #20
 800a58e:	2300      	movs	r3, #0
 800a590:	2200      	movs	r2, #0
 800a592:	f7fe fc5f 	bl	8008e54 <xQueueGenericSend>
 800a596:	6278      	str	r0, [r7, #36]	; 0x24
 800a598:	e008      	b.n	800a5ac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a59a:	4b07      	ldr	r3, [pc, #28]	; (800a5b8 <xTimerGenericCommand+0x98>)
 800a59c:	6818      	ldr	r0, [r3, #0]
 800a59e:	f107 0114 	add.w	r1, r7, #20
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	683a      	ldr	r2, [r7, #0]
 800a5a6:	f7fe fd53 	bl	8009050 <xQueueGenericSendFromISR>
 800a5aa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3728      	adds	r7, #40	; 0x28
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}
 800a5b6:	bf00      	nop
 800a5b8:	20001070 	.word	0x20001070

0800a5bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b088      	sub	sp, #32
 800a5c0:	af02      	add	r7, sp, #8
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5c6:	4b22      	ldr	r3, [pc, #136]	; (800a650 <prvProcessExpiredTimer+0x94>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	68db      	ldr	r3, [r3, #12]
 800a5cc:	68db      	ldr	r3, [r3, #12]
 800a5ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	3304      	adds	r3, #4
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f7fe fa87 	bl	8008ae8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a5e0:	f003 0304 	and.w	r3, r3, #4
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d022      	beq.n	800a62e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	699a      	ldr	r2, [r3, #24]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	18d1      	adds	r1, r2, r3
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	683a      	ldr	r2, [r7, #0]
 800a5f4:	6978      	ldr	r0, [r7, #20]
 800a5f6:	f000 f8cf 	bl	800a798 <prvInsertTimerInActiveList>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d01f      	beq.n	800a640 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a600:	2300      	movs	r3, #0
 800a602:	9300      	str	r3, [sp, #0]
 800a604:	2300      	movs	r3, #0
 800a606:	687a      	ldr	r2, [r7, #4]
 800a608:	2100      	movs	r1, #0
 800a60a:	6978      	ldr	r0, [r7, #20]
 800a60c:	f7ff ff88 	bl	800a520 <xTimerGenericCommand>
 800a610:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d113      	bne.n	800a640 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a61c:	f383 8811 	msr	BASEPRI, r3
 800a620:	f3bf 8f6f 	isb	sy
 800a624:	f3bf 8f4f 	dsb	sy
 800a628:	60fb      	str	r3, [r7, #12]
}
 800a62a:	bf00      	nop
 800a62c:	e7fe      	b.n	800a62c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a634:	f023 0301 	bic.w	r3, r3, #1
 800a638:	b2da      	uxtb	r2, r3
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	6a1b      	ldr	r3, [r3, #32]
 800a644:	6978      	ldr	r0, [r7, #20]
 800a646:	4798      	blx	r3
}
 800a648:	bf00      	nop
 800a64a:	3718      	adds	r7, #24
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	20001068 	.word	0x20001068

0800a654 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a65c:	f107 0308 	add.w	r3, r7, #8
 800a660:	4618      	mov	r0, r3
 800a662:	f000 f857 	bl	800a714 <prvGetNextExpireTime>
 800a666:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	4619      	mov	r1, r3
 800a66c:	68f8      	ldr	r0, [r7, #12]
 800a66e:	f000 f803 	bl	800a678 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a672:	f000 f8d3 	bl	800a81c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a676:	e7f1      	b.n	800a65c <prvTimerTask+0x8>

0800a678 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a682:	f7ff fa17 	bl	8009ab4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a686:	f107 0308 	add.w	r3, r7, #8
 800a68a:	4618      	mov	r0, r3
 800a68c:	f000 f864 	bl	800a758 <prvSampleTimeNow>
 800a690:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d130      	bne.n	800a6fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d10a      	bne.n	800a6b4 <prvProcessTimerOrBlockTask+0x3c>
 800a69e:	687a      	ldr	r2, [r7, #4]
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d806      	bhi.n	800a6b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a6a6:	f7ff fa13 	bl	8009ad0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a6aa:	68f9      	ldr	r1, [r7, #12]
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f7ff ff85 	bl	800a5bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a6b2:	e024      	b.n	800a6fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d008      	beq.n	800a6cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a6ba:	4b13      	ldr	r3, [pc, #76]	; (800a708 <prvProcessTimerOrBlockTask+0x90>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d101      	bne.n	800a6c8 <prvProcessTimerOrBlockTask+0x50>
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	e000      	b.n	800a6ca <prvProcessTimerOrBlockTask+0x52>
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a6cc:	4b0f      	ldr	r3, [pc, #60]	; (800a70c <prvProcessTimerOrBlockTask+0x94>)
 800a6ce:	6818      	ldr	r0, [r3, #0]
 800a6d0:	687a      	ldr	r2, [r7, #4]
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	1ad3      	subs	r3, r2, r3
 800a6d6:	683a      	ldr	r2, [r7, #0]
 800a6d8:	4619      	mov	r1, r3
 800a6da:	f7fe ff69 	bl	80095b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a6de:	f7ff f9f7 	bl	8009ad0 <xTaskResumeAll>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d10a      	bne.n	800a6fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a6e8:	4b09      	ldr	r3, [pc, #36]	; (800a710 <prvProcessTimerOrBlockTask+0x98>)
 800a6ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6ee:	601a      	str	r2, [r3, #0]
 800a6f0:	f3bf 8f4f 	dsb	sy
 800a6f4:	f3bf 8f6f 	isb	sy
}
 800a6f8:	e001      	b.n	800a6fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a6fa:	f7ff f9e9 	bl	8009ad0 <xTaskResumeAll>
}
 800a6fe:	bf00      	nop
 800a700:	3710      	adds	r7, #16
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	2000106c 	.word	0x2000106c
 800a70c:	20001070 	.word	0x20001070
 800a710:	e000ed04 	.word	0xe000ed04

0800a714 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a714:	b480      	push	{r7}
 800a716:	b085      	sub	sp, #20
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a71c:	4b0d      	ldr	r3, [pc, #52]	; (800a754 <prvGetNextExpireTime+0x40>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d101      	bne.n	800a72a <prvGetNextExpireTime+0x16>
 800a726:	2201      	movs	r2, #1
 800a728:	e000      	b.n	800a72c <prvGetNextExpireTime+0x18>
 800a72a:	2200      	movs	r2, #0
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d105      	bne.n	800a744 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a738:	4b06      	ldr	r3, [pc, #24]	; (800a754 <prvGetNextExpireTime+0x40>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	68db      	ldr	r3, [r3, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	60fb      	str	r3, [r7, #12]
 800a742:	e001      	b.n	800a748 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a744:	2300      	movs	r3, #0
 800a746:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a748:	68fb      	ldr	r3, [r7, #12]
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3714      	adds	r7, #20
 800a74e:	46bd      	mov	sp, r7
 800a750:	bc80      	pop	{r7}
 800a752:	4770      	bx	lr
 800a754:	20001068 	.word	0x20001068

0800a758 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b084      	sub	sp, #16
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a760:	f7ff fa52 	bl	8009c08 <xTaskGetTickCount>
 800a764:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a766:	4b0b      	ldr	r3, [pc, #44]	; (800a794 <prvSampleTimeNow+0x3c>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	68fa      	ldr	r2, [r7, #12]
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d205      	bcs.n	800a77c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a770:	f000 f91a 	bl	800a9a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2201      	movs	r2, #1
 800a778:	601a      	str	r2, [r3, #0]
 800a77a:	e002      	b.n	800a782 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2200      	movs	r2, #0
 800a780:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a782:	4a04      	ldr	r2, [pc, #16]	; (800a794 <prvSampleTimeNow+0x3c>)
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a788:	68fb      	ldr	r3, [r7, #12]
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3710      	adds	r7, #16
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}
 800a792:	bf00      	nop
 800a794:	20001078 	.word	0x20001078

0800a798 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b086      	sub	sp, #24
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	60f8      	str	r0, [r7, #12]
 800a7a0:	60b9      	str	r1, [r7, #8]
 800a7a2:	607a      	str	r2, [r7, #4]
 800a7a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	68ba      	ldr	r2, [r7, #8]
 800a7ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	68fa      	ldr	r2, [r7, #12]
 800a7b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a7b6:	68ba      	ldr	r2, [r7, #8]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d812      	bhi.n	800a7e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7be:	687a      	ldr	r2, [r7, #4]
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	1ad2      	subs	r2, r2, r3
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	699b      	ldr	r3, [r3, #24]
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d302      	bcc.n	800a7d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	617b      	str	r3, [r7, #20]
 800a7d0:	e01b      	b.n	800a80a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a7d2:	4b10      	ldr	r3, [pc, #64]	; (800a814 <prvInsertTimerInActiveList+0x7c>)
 800a7d4:	681a      	ldr	r2, [r3, #0]
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	3304      	adds	r3, #4
 800a7da:	4619      	mov	r1, r3
 800a7dc:	4610      	mov	r0, r2
 800a7de:	f7fe f94b 	bl	8008a78 <vListInsert>
 800a7e2:	e012      	b.n	800a80a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d206      	bcs.n	800a7fa <prvInsertTimerInActiveList+0x62>
 800a7ec:	68ba      	ldr	r2, [r7, #8]
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	d302      	bcc.n	800a7fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	617b      	str	r3, [r7, #20]
 800a7f8:	e007      	b.n	800a80a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a7fa:	4b07      	ldr	r3, [pc, #28]	; (800a818 <prvInsertTimerInActiveList+0x80>)
 800a7fc:	681a      	ldr	r2, [r3, #0]
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	3304      	adds	r3, #4
 800a802:	4619      	mov	r1, r3
 800a804:	4610      	mov	r0, r2
 800a806:	f7fe f937 	bl	8008a78 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a80a:	697b      	ldr	r3, [r7, #20]
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3718      	adds	r7, #24
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}
 800a814:	2000106c 	.word	0x2000106c
 800a818:	20001068 	.word	0x20001068

0800a81c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b08c      	sub	sp, #48	; 0x30
 800a820:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a822:	e0ae      	b.n	800a982 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	2b00      	cmp	r3, #0
 800a828:	f2c0 80aa 	blt.w	800a980 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a832:	695b      	ldr	r3, [r3, #20]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d004      	beq.n	800a842 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a83a:	3304      	adds	r3, #4
 800a83c:	4618      	mov	r0, r3
 800a83e:	f7fe f953 	bl	8008ae8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a842:	1d3b      	adds	r3, r7, #4
 800a844:	4618      	mov	r0, r3
 800a846:	f7ff ff87 	bl	800a758 <prvSampleTimeNow>
 800a84a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	2b09      	cmp	r3, #9
 800a850:	f200 8097 	bhi.w	800a982 <prvProcessReceivedCommands+0x166>
 800a854:	a201      	add	r2, pc, #4	; (adr r2, 800a85c <prvProcessReceivedCommands+0x40>)
 800a856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a85a:	bf00      	nop
 800a85c:	0800a885 	.word	0x0800a885
 800a860:	0800a885 	.word	0x0800a885
 800a864:	0800a885 	.word	0x0800a885
 800a868:	0800a8f9 	.word	0x0800a8f9
 800a86c:	0800a90d 	.word	0x0800a90d
 800a870:	0800a957 	.word	0x0800a957
 800a874:	0800a885 	.word	0x0800a885
 800a878:	0800a885 	.word	0x0800a885
 800a87c:	0800a8f9 	.word	0x0800a8f9
 800a880:	0800a90d 	.word	0x0800a90d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a886:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a88a:	f043 0301 	orr.w	r3, r3, #1
 800a88e:	b2da      	uxtb	r2, r3
 800a890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a892:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a896:	68fa      	ldr	r2, [r7, #12]
 800a898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a89a:	699b      	ldr	r3, [r3, #24]
 800a89c:	18d1      	adds	r1, r2, r3
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	6a3a      	ldr	r2, [r7, #32]
 800a8a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a8a4:	f7ff ff78 	bl	800a798 <prvInsertTimerInActiveList>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d069      	beq.n	800a982 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b0:	6a1b      	ldr	r3, [r3, #32]
 800a8b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a8b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a8bc:	f003 0304 	and.w	r3, r3, #4
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d05e      	beq.n	800a982 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a8c4:	68fa      	ldr	r2, [r7, #12]
 800a8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c8:	699b      	ldr	r3, [r3, #24]
 800a8ca:	441a      	add	r2, r3
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	9300      	str	r3, [sp, #0]
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	2100      	movs	r1, #0
 800a8d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a8d6:	f7ff fe23 	bl	800a520 <xTimerGenericCommand>
 800a8da:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800a8dc:	69fb      	ldr	r3, [r7, #28]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d14f      	bne.n	800a982 <prvProcessReceivedCommands+0x166>
	__asm volatile
 800a8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e6:	f383 8811 	msr	BASEPRI, r3
 800a8ea:	f3bf 8f6f 	isb	sy
 800a8ee:	f3bf 8f4f 	dsb	sy
 800a8f2:	61bb      	str	r3, [r7, #24]
}
 800a8f4:	bf00      	nop
 800a8f6:	e7fe      	b.n	800a8f6 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a8fe:	f023 0301 	bic.w	r3, r3, #1
 800a902:	b2da      	uxtb	r2, r3
 800a904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a906:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800a90a:	e03a      	b.n	800a982 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a912:	f043 0301 	orr.w	r3, r3, #1
 800a916:	b2da      	uxtb	r2, r3
 800a918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a91e:	68fa      	ldr	r2, [r7, #12]
 800a920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a922:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a926:	699b      	ldr	r3, [r3, #24]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d10a      	bne.n	800a942 <prvProcessReceivedCommands+0x126>
	__asm volatile
 800a92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a930:	f383 8811 	msr	BASEPRI, r3
 800a934:	f3bf 8f6f 	isb	sy
 800a938:	f3bf 8f4f 	dsb	sy
 800a93c:	617b      	str	r3, [r7, #20]
}
 800a93e:	bf00      	nop
 800a940:	e7fe      	b.n	800a940 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a944:	699a      	ldr	r2, [r3, #24]
 800a946:	6a3b      	ldr	r3, [r7, #32]
 800a948:	18d1      	adds	r1, r2, r3
 800a94a:	6a3b      	ldr	r3, [r7, #32]
 800a94c:	6a3a      	ldr	r2, [r7, #32]
 800a94e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a950:	f7ff ff22 	bl	800a798 <prvInsertTimerInActiveList>
					break;
 800a954:	e015      	b.n	800a982 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a958:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a95c:	f003 0302 	and.w	r3, r3, #2
 800a960:	2b00      	cmp	r3, #0
 800a962:	d103      	bne.n	800a96c <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800a964:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a966:	f000 fb75 	bl	800b054 <vPortFree>
 800a96a:	e00a      	b.n	800a982 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a972:	f023 0301 	bic.w	r3, r3, #1
 800a976:	b2da      	uxtb	r2, r3
 800a978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a97a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a97e:	e000      	b.n	800a982 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a980:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a982:	4b08      	ldr	r3, [pc, #32]	; (800a9a4 <prvProcessReceivedCommands+0x188>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f107 0108 	add.w	r1, r7, #8
 800a98a:	2200      	movs	r2, #0
 800a98c:	4618      	mov	r0, r3
 800a98e:	f7fe fbf7 	bl	8009180 <xQueueReceive>
 800a992:	4603      	mov	r3, r0
 800a994:	2b00      	cmp	r3, #0
 800a996:	f47f af45 	bne.w	800a824 <prvProcessReceivedCommands+0x8>
	}
}
 800a99a:	bf00      	nop
 800a99c:	bf00      	nop
 800a99e:	3728      	adds	r7, #40	; 0x28
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}
 800a9a4:	20001070 	.word	0x20001070

0800a9a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b088      	sub	sp, #32
 800a9ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a9ae:	e048      	b.n	800aa42 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a9b0:	4b2d      	ldr	r3, [pc, #180]	; (800aa68 <prvSwitchTimerLists+0xc0>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	68db      	ldr	r3, [r3, #12]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9ba:	4b2b      	ldr	r3, [pc, #172]	; (800aa68 <prvSwitchTimerLists+0xc0>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	68db      	ldr	r3, [r3, #12]
 800a9c0:	68db      	ldr	r3, [r3, #12]
 800a9c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	3304      	adds	r3, #4
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f7fe f88d 	bl	8008ae8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	6a1b      	ldr	r3, [r3, #32]
 800a9d2:	68f8      	ldr	r0, [r7, #12]
 800a9d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a9dc:	f003 0304 	and.w	r3, r3, #4
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d02e      	beq.n	800aa42 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	699b      	ldr	r3, [r3, #24]
 800a9e8:	693a      	ldr	r2, [r7, #16]
 800a9ea:	4413      	add	r3, r2
 800a9ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a9ee:	68ba      	ldr	r2, [r7, #8]
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	429a      	cmp	r2, r3
 800a9f4:	d90e      	bls.n	800aa14 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	68ba      	ldr	r2, [r7, #8]
 800a9fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	68fa      	ldr	r2, [r7, #12]
 800aa00:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aa02:	4b19      	ldr	r3, [pc, #100]	; (800aa68 <prvSwitchTimerLists+0xc0>)
 800aa04:	681a      	ldr	r2, [r3, #0]
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	3304      	adds	r3, #4
 800aa0a:	4619      	mov	r1, r3
 800aa0c:	4610      	mov	r0, r2
 800aa0e:	f7fe f833 	bl	8008a78 <vListInsert>
 800aa12:	e016      	b.n	800aa42 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aa14:	2300      	movs	r3, #0
 800aa16:	9300      	str	r3, [sp, #0]
 800aa18:	2300      	movs	r3, #0
 800aa1a:	693a      	ldr	r2, [r7, #16]
 800aa1c:	2100      	movs	r1, #0
 800aa1e:	68f8      	ldr	r0, [r7, #12]
 800aa20:	f7ff fd7e 	bl	800a520 <xTimerGenericCommand>
 800aa24:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d10a      	bne.n	800aa42 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800aa2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa30:	f383 8811 	msr	BASEPRI, r3
 800aa34:	f3bf 8f6f 	isb	sy
 800aa38:	f3bf 8f4f 	dsb	sy
 800aa3c:	603b      	str	r3, [r7, #0]
}
 800aa3e:	bf00      	nop
 800aa40:	e7fe      	b.n	800aa40 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aa42:	4b09      	ldr	r3, [pc, #36]	; (800aa68 <prvSwitchTimerLists+0xc0>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d1b1      	bne.n	800a9b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800aa4c:	4b06      	ldr	r3, [pc, #24]	; (800aa68 <prvSwitchTimerLists+0xc0>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800aa52:	4b06      	ldr	r3, [pc, #24]	; (800aa6c <prvSwitchTimerLists+0xc4>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4a04      	ldr	r2, [pc, #16]	; (800aa68 <prvSwitchTimerLists+0xc0>)
 800aa58:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800aa5a:	4a04      	ldr	r2, [pc, #16]	; (800aa6c <prvSwitchTimerLists+0xc4>)
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	6013      	str	r3, [r2, #0]
}
 800aa60:	bf00      	nop
 800aa62:	3718      	adds	r7, #24
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}
 800aa68:	20001068 	.word	0x20001068
 800aa6c:	2000106c 	.word	0x2000106c

0800aa70 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b082      	sub	sp, #8
 800aa74:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800aa76:	f000 f929 	bl	800accc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800aa7a:	4b15      	ldr	r3, [pc, #84]	; (800aad0 <prvCheckForValidListAndQueue+0x60>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d120      	bne.n	800aac4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800aa82:	4814      	ldr	r0, [pc, #80]	; (800aad4 <prvCheckForValidListAndQueue+0x64>)
 800aa84:	f7fd ffaa 	bl	80089dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800aa88:	4813      	ldr	r0, [pc, #76]	; (800aad8 <prvCheckForValidListAndQueue+0x68>)
 800aa8a:	f7fd ffa7 	bl	80089dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800aa8e:	4b13      	ldr	r3, [pc, #76]	; (800aadc <prvCheckForValidListAndQueue+0x6c>)
 800aa90:	4a10      	ldr	r2, [pc, #64]	; (800aad4 <prvCheckForValidListAndQueue+0x64>)
 800aa92:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800aa94:	4b12      	ldr	r3, [pc, #72]	; (800aae0 <prvCheckForValidListAndQueue+0x70>)
 800aa96:	4a10      	ldr	r2, [pc, #64]	; (800aad8 <prvCheckForValidListAndQueue+0x68>)
 800aa98:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	9300      	str	r3, [sp, #0]
 800aa9e:	4b11      	ldr	r3, [pc, #68]	; (800aae4 <prvCheckForValidListAndQueue+0x74>)
 800aaa0:	4a11      	ldr	r2, [pc, #68]	; (800aae8 <prvCheckForValidListAndQueue+0x78>)
 800aaa2:	210c      	movs	r1, #12
 800aaa4:	200a      	movs	r0, #10
 800aaa6:	f7fe f8b1 	bl	8008c0c <xQueueGenericCreateStatic>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	4a08      	ldr	r2, [pc, #32]	; (800aad0 <prvCheckForValidListAndQueue+0x60>)
 800aaae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800aab0:	4b07      	ldr	r3, [pc, #28]	; (800aad0 <prvCheckForValidListAndQueue+0x60>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d005      	beq.n	800aac4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aab8:	4b05      	ldr	r3, [pc, #20]	; (800aad0 <prvCheckForValidListAndQueue+0x60>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	490b      	ldr	r1, [pc, #44]	; (800aaec <prvCheckForValidListAndQueue+0x7c>)
 800aabe:	4618      	mov	r0, r3
 800aac0:	f7fe fd4e 	bl	8009560 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aac4:	f000 f932 	bl	800ad2c <vPortExitCritical>
}
 800aac8:	bf00      	nop
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
 800aace:	bf00      	nop
 800aad0:	20001070 	.word	0x20001070
 800aad4:	20001040 	.word	0x20001040
 800aad8:	20001054 	.word	0x20001054
 800aadc:	20001068 	.word	0x20001068
 800aae0:	2000106c 	.word	0x2000106c
 800aae4:	200010f4 	.word	0x200010f4
 800aae8:	2000107c 	.word	0x2000107c
 800aaec:	0800f1cc 	.word	0x0800f1cc

0800aaf0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b085      	sub	sp, #20
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	60f8      	str	r0, [r7, #12]
 800aaf8:	60b9      	str	r1, [r7, #8]
 800aafa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	3b04      	subs	r3, #4
 800ab00:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ab08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	3b04      	subs	r3, #4
 800ab0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	f023 0201 	bic.w	r2, r3, #1
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	3b04      	subs	r3, #4
 800ab1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ab20:	4a08      	ldr	r2, [pc, #32]	; (800ab44 <pxPortInitialiseStack+0x54>)
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	3b14      	subs	r3, #20
 800ab2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ab2c:	687a      	ldr	r2, [r7, #4]
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	3b20      	subs	r3, #32
 800ab36:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ab38:	68fb      	ldr	r3, [r7, #12]
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3714      	adds	r7, #20
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bc80      	pop	{r7}
 800ab42:	4770      	bx	lr
 800ab44:	0800ab49 	.word	0x0800ab49

0800ab48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b085      	sub	sp, #20
 800ab4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ab52:	4b12      	ldr	r3, [pc, #72]	; (800ab9c <prvTaskExitError+0x54>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab5a:	d00a      	beq.n	800ab72 <prvTaskExitError+0x2a>
	__asm volatile
 800ab5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab60:	f383 8811 	msr	BASEPRI, r3
 800ab64:	f3bf 8f6f 	isb	sy
 800ab68:	f3bf 8f4f 	dsb	sy
 800ab6c:	60fb      	str	r3, [r7, #12]
}
 800ab6e:	bf00      	nop
 800ab70:	e7fe      	b.n	800ab70 <prvTaskExitError+0x28>
	__asm volatile
 800ab72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab76:	f383 8811 	msr	BASEPRI, r3
 800ab7a:	f3bf 8f6f 	isb	sy
 800ab7e:	f3bf 8f4f 	dsb	sy
 800ab82:	60bb      	str	r3, [r7, #8]
}
 800ab84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ab86:	bf00      	nop
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d0fc      	beq.n	800ab88 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ab8e:	bf00      	nop
 800ab90:	bf00      	nop
 800ab92:	3714      	adds	r7, #20
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bc80      	pop	{r7}
 800ab98:	4770      	bx	lr
 800ab9a:	bf00      	nop
 800ab9c:	2000000c 	.word	0x2000000c

0800aba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aba0:	4b07      	ldr	r3, [pc, #28]	; (800abc0 <pxCurrentTCBConst2>)
 800aba2:	6819      	ldr	r1, [r3, #0]
 800aba4:	6808      	ldr	r0, [r1, #0]
 800aba6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800abaa:	f380 8809 	msr	PSP, r0
 800abae:	f3bf 8f6f 	isb	sy
 800abb2:	f04f 0000 	mov.w	r0, #0
 800abb6:	f380 8811 	msr	BASEPRI, r0
 800abba:	f04e 0e0d 	orr.w	lr, lr, #13
 800abbe:	4770      	bx	lr

0800abc0 <pxCurrentTCBConst2>:
 800abc0:	20000f14 	.word	0x20000f14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800abc4:	bf00      	nop
 800abc6:	bf00      	nop

0800abc8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800abc8:	4806      	ldr	r0, [pc, #24]	; (800abe4 <prvPortStartFirstTask+0x1c>)
 800abca:	6800      	ldr	r0, [r0, #0]
 800abcc:	6800      	ldr	r0, [r0, #0]
 800abce:	f380 8808 	msr	MSP, r0
 800abd2:	b662      	cpsie	i
 800abd4:	b661      	cpsie	f
 800abd6:	f3bf 8f4f 	dsb	sy
 800abda:	f3bf 8f6f 	isb	sy
 800abde:	df00      	svc	0
 800abe0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800abe2:	bf00      	nop
 800abe4:	e000ed08 	.word	0xe000ed08

0800abe8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b084      	sub	sp, #16
 800abec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800abee:	4b32      	ldr	r3, [pc, #200]	; (800acb8 <xPortStartScheduler+0xd0>)
 800abf0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	781b      	ldrb	r3, [r3, #0]
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	22ff      	movs	r2, #255	; 0xff
 800abfe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	781b      	ldrb	r3, [r3, #0]
 800ac04:	b2db      	uxtb	r3, r3
 800ac06:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ac08:	78fb      	ldrb	r3, [r7, #3]
 800ac0a:	b2db      	uxtb	r3, r3
 800ac0c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ac10:	b2da      	uxtb	r2, r3
 800ac12:	4b2a      	ldr	r3, [pc, #168]	; (800acbc <xPortStartScheduler+0xd4>)
 800ac14:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ac16:	4b2a      	ldr	r3, [pc, #168]	; (800acc0 <xPortStartScheduler+0xd8>)
 800ac18:	2207      	movs	r2, #7
 800ac1a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac1c:	e009      	b.n	800ac32 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800ac1e:	4b28      	ldr	r3, [pc, #160]	; (800acc0 <xPortStartScheduler+0xd8>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	3b01      	subs	r3, #1
 800ac24:	4a26      	ldr	r2, [pc, #152]	; (800acc0 <xPortStartScheduler+0xd8>)
 800ac26:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ac28:	78fb      	ldrb	r3, [r7, #3]
 800ac2a:	b2db      	uxtb	r3, r3
 800ac2c:	005b      	lsls	r3, r3, #1
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac32:	78fb      	ldrb	r3, [r7, #3]
 800ac34:	b2db      	uxtb	r3, r3
 800ac36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac3a:	2b80      	cmp	r3, #128	; 0x80
 800ac3c:	d0ef      	beq.n	800ac1e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ac3e:	4b20      	ldr	r3, [pc, #128]	; (800acc0 <xPortStartScheduler+0xd8>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f1c3 0307 	rsb	r3, r3, #7
 800ac46:	2b04      	cmp	r3, #4
 800ac48:	d00a      	beq.n	800ac60 <xPortStartScheduler+0x78>
	__asm volatile
 800ac4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac4e:	f383 8811 	msr	BASEPRI, r3
 800ac52:	f3bf 8f6f 	isb	sy
 800ac56:	f3bf 8f4f 	dsb	sy
 800ac5a:	60bb      	str	r3, [r7, #8]
}
 800ac5c:	bf00      	nop
 800ac5e:	e7fe      	b.n	800ac5e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ac60:	4b17      	ldr	r3, [pc, #92]	; (800acc0 <xPortStartScheduler+0xd8>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	021b      	lsls	r3, r3, #8
 800ac66:	4a16      	ldr	r2, [pc, #88]	; (800acc0 <xPortStartScheduler+0xd8>)
 800ac68:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ac6a:	4b15      	ldr	r3, [pc, #84]	; (800acc0 <xPortStartScheduler+0xd8>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ac72:	4a13      	ldr	r2, [pc, #76]	; (800acc0 <xPortStartScheduler+0xd8>)
 800ac74:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	b2da      	uxtb	r2, r3
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ac7e:	4b11      	ldr	r3, [pc, #68]	; (800acc4 <xPortStartScheduler+0xdc>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	4a10      	ldr	r2, [pc, #64]	; (800acc4 <xPortStartScheduler+0xdc>)
 800ac84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ac88:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ac8a:	4b0e      	ldr	r3, [pc, #56]	; (800acc4 <xPortStartScheduler+0xdc>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	4a0d      	ldr	r2, [pc, #52]	; (800acc4 <xPortStartScheduler+0xdc>)
 800ac90:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ac94:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ac96:	f000 f8b9 	bl	800ae0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ac9a:	4b0b      	ldr	r3, [pc, #44]	; (800acc8 <xPortStartScheduler+0xe0>)
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aca0:	f7ff ff92 	bl	800abc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aca4:	f7ff f876 	bl	8009d94 <vTaskSwitchContext>
	prvTaskExitError();
 800aca8:	f7ff ff4e 	bl	800ab48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800acac:	2300      	movs	r3, #0
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3710      	adds	r7, #16
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
 800acb6:	bf00      	nop
 800acb8:	e000e400 	.word	0xe000e400
 800acbc:	2000113c 	.word	0x2000113c
 800acc0:	20001140 	.word	0x20001140
 800acc4:	e000ed20 	.word	0xe000ed20
 800acc8:	2000000c 	.word	0x2000000c

0800accc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800accc:	b480      	push	{r7}
 800acce:	b083      	sub	sp, #12
 800acd0:	af00      	add	r7, sp, #0
	__asm volatile
 800acd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd6:	f383 8811 	msr	BASEPRI, r3
 800acda:	f3bf 8f6f 	isb	sy
 800acde:	f3bf 8f4f 	dsb	sy
 800ace2:	607b      	str	r3, [r7, #4]
}
 800ace4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ace6:	4b0f      	ldr	r3, [pc, #60]	; (800ad24 <vPortEnterCritical+0x58>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	3301      	adds	r3, #1
 800acec:	4a0d      	ldr	r2, [pc, #52]	; (800ad24 <vPortEnterCritical+0x58>)
 800acee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800acf0:	4b0c      	ldr	r3, [pc, #48]	; (800ad24 <vPortEnterCritical+0x58>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	2b01      	cmp	r3, #1
 800acf6:	d10f      	bne.n	800ad18 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800acf8:	4b0b      	ldr	r3, [pc, #44]	; (800ad28 <vPortEnterCritical+0x5c>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	b2db      	uxtb	r3, r3
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d00a      	beq.n	800ad18 <vPortEnterCritical+0x4c>
	__asm volatile
 800ad02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad06:	f383 8811 	msr	BASEPRI, r3
 800ad0a:	f3bf 8f6f 	isb	sy
 800ad0e:	f3bf 8f4f 	dsb	sy
 800ad12:	603b      	str	r3, [r7, #0]
}
 800ad14:	bf00      	nop
 800ad16:	e7fe      	b.n	800ad16 <vPortEnterCritical+0x4a>
	}
}
 800ad18:	bf00      	nop
 800ad1a:	370c      	adds	r7, #12
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bc80      	pop	{r7}
 800ad20:	4770      	bx	lr
 800ad22:	bf00      	nop
 800ad24:	2000000c 	.word	0x2000000c
 800ad28:	e000ed04 	.word	0xe000ed04

0800ad2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b083      	sub	sp, #12
 800ad30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ad32:	4b11      	ldr	r3, [pc, #68]	; (800ad78 <vPortExitCritical+0x4c>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d10a      	bne.n	800ad50 <vPortExitCritical+0x24>
	__asm volatile
 800ad3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad3e:	f383 8811 	msr	BASEPRI, r3
 800ad42:	f3bf 8f6f 	isb	sy
 800ad46:	f3bf 8f4f 	dsb	sy
 800ad4a:	607b      	str	r3, [r7, #4]
}
 800ad4c:	bf00      	nop
 800ad4e:	e7fe      	b.n	800ad4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ad50:	4b09      	ldr	r3, [pc, #36]	; (800ad78 <vPortExitCritical+0x4c>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	3b01      	subs	r3, #1
 800ad56:	4a08      	ldr	r2, [pc, #32]	; (800ad78 <vPortExitCritical+0x4c>)
 800ad58:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ad5a:	4b07      	ldr	r3, [pc, #28]	; (800ad78 <vPortExitCritical+0x4c>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d105      	bne.n	800ad6e <vPortExitCritical+0x42>
 800ad62:	2300      	movs	r3, #0
 800ad64:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	f383 8811 	msr	BASEPRI, r3
}
 800ad6c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ad6e:	bf00      	nop
 800ad70:	370c      	adds	r7, #12
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bc80      	pop	{r7}
 800ad76:	4770      	bx	lr
 800ad78:	2000000c 	.word	0x2000000c
 800ad7c:	00000000 	.word	0x00000000

0800ad80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ad80:	f3ef 8009 	mrs	r0, PSP
 800ad84:	f3bf 8f6f 	isb	sy
 800ad88:	4b0d      	ldr	r3, [pc, #52]	; (800adc0 <pxCurrentTCBConst>)
 800ad8a:	681a      	ldr	r2, [r3, #0]
 800ad8c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ad90:	6010      	str	r0, [r2, #0]
 800ad92:	e92d 4008 	stmdb	sp!, {r3, lr}
 800ad96:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ad9a:	f380 8811 	msr	BASEPRI, r0
 800ad9e:	f7fe fff9 	bl	8009d94 <vTaskSwitchContext>
 800ada2:	f04f 0000 	mov.w	r0, #0
 800ada6:	f380 8811 	msr	BASEPRI, r0
 800adaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800adae:	6819      	ldr	r1, [r3, #0]
 800adb0:	6808      	ldr	r0, [r1, #0]
 800adb2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800adb6:	f380 8809 	msr	PSP, r0
 800adba:	f3bf 8f6f 	isb	sy
 800adbe:	4770      	bx	lr

0800adc0 <pxCurrentTCBConst>:
 800adc0:	20000f14 	.word	0x20000f14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800adc4:	bf00      	nop
 800adc6:	bf00      	nop

0800adc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b082      	sub	sp, #8
 800adcc:	af00      	add	r7, sp, #0
	__asm volatile
 800adce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add2:	f383 8811 	msr	BASEPRI, r3
 800add6:	f3bf 8f6f 	isb	sy
 800adda:	f3bf 8f4f 	dsb	sy
 800adde:	607b      	str	r3, [r7, #4]
}
 800ade0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ade2:	f7fe ff1f 	bl	8009c24 <xTaskIncrementTick>
 800ade6:	4603      	mov	r3, r0
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d003      	beq.n	800adf4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800adec:	4b06      	ldr	r3, [pc, #24]	; (800ae08 <SysTick_Handler+0x40>)
 800adee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adf2:	601a      	str	r2, [r3, #0]
 800adf4:	2300      	movs	r3, #0
 800adf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	f383 8811 	msr	BASEPRI, r3
}
 800adfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ae00:	bf00      	nop
 800ae02:	3708      	adds	r7, #8
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}
 800ae08:	e000ed04 	.word	0xe000ed04

0800ae0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ae10:	4b0a      	ldr	r3, [pc, #40]	; (800ae3c <vPortSetupTimerInterrupt+0x30>)
 800ae12:	2200      	movs	r2, #0
 800ae14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ae16:	4b0a      	ldr	r3, [pc, #40]	; (800ae40 <vPortSetupTimerInterrupt+0x34>)
 800ae18:	2200      	movs	r2, #0
 800ae1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ae1c:	4b09      	ldr	r3, [pc, #36]	; (800ae44 <vPortSetupTimerInterrupt+0x38>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4a09      	ldr	r2, [pc, #36]	; (800ae48 <vPortSetupTimerInterrupt+0x3c>)
 800ae22:	fba2 2303 	umull	r2, r3, r2, r3
 800ae26:	099b      	lsrs	r3, r3, #6
 800ae28:	4a08      	ldr	r2, [pc, #32]	; (800ae4c <vPortSetupTimerInterrupt+0x40>)
 800ae2a:	3b01      	subs	r3, #1
 800ae2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ae2e:	4b03      	ldr	r3, [pc, #12]	; (800ae3c <vPortSetupTimerInterrupt+0x30>)
 800ae30:	2207      	movs	r2, #7
 800ae32:	601a      	str	r2, [r3, #0]
}
 800ae34:	bf00      	nop
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bc80      	pop	{r7}
 800ae3a:	4770      	bx	lr
 800ae3c:	e000e010 	.word	0xe000e010
 800ae40:	e000e018 	.word	0xe000e018
 800ae44:	20000000 	.word	0x20000000
 800ae48:	10624dd3 	.word	0x10624dd3
 800ae4c:	e000e014 	.word	0xe000e014

0800ae50 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ae50:	b480      	push	{r7}
 800ae52:	b085      	sub	sp, #20
 800ae54:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ae56:	f3ef 8305 	mrs	r3, IPSR
 800ae5a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2b0f      	cmp	r3, #15
 800ae60:	d914      	bls.n	800ae8c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ae62:	4a16      	ldr	r2, [pc, #88]	; (800aebc <vPortValidateInterruptPriority+0x6c>)
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	4413      	add	r3, r2
 800ae68:	781b      	ldrb	r3, [r3, #0]
 800ae6a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ae6c:	4b14      	ldr	r3, [pc, #80]	; (800aec0 <vPortValidateInterruptPriority+0x70>)
 800ae6e:	781b      	ldrb	r3, [r3, #0]
 800ae70:	7afa      	ldrb	r2, [r7, #11]
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d20a      	bcs.n	800ae8c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ae76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae7a:	f383 8811 	msr	BASEPRI, r3
 800ae7e:	f3bf 8f6f 	isb	sy
 800ae82:	f3bf 8f4f 	dsb	sy
 800ae86:	607b      	str	r3, [r7, #4]
}
 800ae88:	bf00      	nop
 800ae8a:	e7fe      	b.n	800ae8a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ae8c:	4b0d      	ldr	r3, [pc, #52]	; (800aec4 <vPortValidateInterruptPriority+0x74>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ae94:	4b0c      	ldr	r3, [pc, #48]	; (800aec8 <vPortValidateInterruptPriority+0x78>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d90a      	bls.n	800aeb2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ae9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea0:	f383 8811 	msr	BASEPRI, r3
 800aea4:	f3bf 8f6f 	isb	sy
 800aea8:	f3bf 8f4f 	dsb	sy
 800aeac:	603b      	str	r3, [r7, #0]
}
 800aeae:	bf00      	nop
 800aeb0:	e7fe      	b.n	800aeb0 <vPortValidateInterruptPriority+0x60>
	}
 800aeb2:	bf00      	nop
 800aeb4:	3714      	adds	r7, #20
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bc80      	pop	{r7}
 800aeba:	4770      	bx	lr
 800aebc:	e000e3f0 	.word	0xe000e3f0
 800aec0:	2000113c 	.word	0x2000113c
 800aec4:	e000ed0c 	.word	0xe000ed0c
 800aec8:	20001140 	.word	0x20001140

0800aecc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b08a      	sub	sp, #40	; 0x28
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aed4:	2300      	movs	r3, #0
 800aed6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aed8:	f7fe fdec 	bl	8009ab4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aedc:	4b58      	ldr	r3, [pc, #352]	; (800b040 <pvPortMalloc+0x174>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d101      	bne.n	800aee8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aee4:	f000 f910 	bl	800b108 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aee8:	4b56      	ldr	r3, [pc, #344]	; (800b044 <pvPortMalloc+0x178>)
 800aeea:	681a      	ldr	r2, [r3, #0]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	4013      	ands	r3, r2
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	f040 808e 	bne.w	800b012 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d01d      	beq.n	800af38 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800aefc:	2208      	movs	r2, #8
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	4413      	add	r3, r2
 800af02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f003 0307 	and.w	r3, r3, #7
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d014      	beq.n	800af38 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f023 0307 	bic.w	r3, r3, #7
 800af14:	3308      	adds	r3, #8
 800af16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f003 0307 	and.w	r3, r3, #7
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d00a      	beq.n	800af38 <pvPortMalloc+0x6c>
	__asm volatile
 800af22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af26:	f383 8811 	msr	BASEPRI, r3
 800af2a:	f3bf 8f6f 	isb	sy
 800af2e:	f3bf 8f4f 	dsb	sy
 800af32:	617b      	str	r3, [r7, #20]
}
 800af34:	bf00      	nop
 800af36:	e7fe      	b.n	800af36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d069      	beq.n	800b012 <pvPortMalloc+0x146>
 800af3e:	4b42      	ldr	r3, [pc, #264]	; (800b048 <pvPortMalloc+0x17c>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	687a      	ldr	r2, [r7, #4]
 800af44:	429a      	cmp	r2, r3
 800af46:	d864      	bhi.n	800b012 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800af48:	4b40      	ldr	r3, [pc, #256]	; (800b04c <pvPortMalloc+0x180>)
 800af4a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800af4c:	4b3f      	ldr	r3, [pc, #252]	; (800b04c <pvPortMalloc+0x180>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af52:	e004      	b.n	800af5e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800af54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af56:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800af58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	687a      	ldr	r2, [r7, #4]
 800af64:	429a      	cmp	r2, r3
 800af66:	d903      	bls.n	800af70 <pvPortMalloc+0xa4>
 800af68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d1f1      	bne.n	800af54 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800af70:	4b33      	ldr	r3, [pc, #204]	; (800b040 <pvPortMalloc+0x174>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af76:	429a      	cmp	r2, r3
 800af78:	d04b      	beq.n	800b012 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800af7a:	6a3b      	ldr	r3, [r7, #32]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	2208      	movs	r2, #8
 800af80:	4413      	add	r3, r2
 800af82:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800af84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af86:	681a      	ldr	r2, [r3, #0]
 800af88:	6a3b      	ldr	r3, [r7, #32]
 800af8a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800af8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8e:	685a      	ldr	r2, [r3, #4]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	1ad2      	subs	r2, r2, r3
 800af94:	2308      	movs	r3, #8
 800af96:	005b      	lsls	r3, r3, #1
 800af98:	429a      	cmp	r2, r3
 800af9a:	d91f      	bls.n	800afdc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800af9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	4413      	add	r3, r2
 800afa2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800afa4:	69bb      	ldr	r3, [r7, #24]
 800afa6:	f003 0307 	and.w	r3, r3, #7
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d00a      	beq.n	800afc4 <pvPortMalloc+0xf8>
	__asm volatile
 800afae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb2:	f383 8811 	msr	BASEPRI, r3
 800afb6:	f3bf 8f6f 	isb	sy
 800afba:	f3bf 8f4f 	dsb	sy
 800afbe:	613b      	str	r3, [r7, #16]
}
 800afc0:	bf00      	nop
 800afc2:	e7fe      	b.n	800afc2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800afc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc6:	685a      	ldr	r2, [r3, #4]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	1ad2      	subs	r2, r2, r3
 800afcc:	69bb      	ldr	r3, [r7, #24]
 800afce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800afd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd2:	687a      	ldr	r2, [r7, #4]
 800afd4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800afd6:	69b8      	ldr	r0, [r7, #24]
 800afd8:	f000 f8f8 	bl	800b1cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800afdc:	4b1a      	ldr	r3, [pc, #104]	; (800b048 <pvPortMalloc+0x17c>)
 800afde:	681a      	ldr	r2, [r3, #0]
 800afe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	1ad3      	subs	r3, r2, r3
 800afe6:	4a18      	ldr	r2, [pc, #96]	; (800b048 <pvPortMalloc+0x17c>)
 800afe8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800afea:	4b17      	ldr	r3, [pc, #92]	; (800b048 <pvPortMalloc+0x17c>)
 800afec:	681a      	ldr	r2, [r3, #0]
 800afee:	4b18      	ldr	r3, [pc, #96]	; (800b050 <pvPortMalloc+0x184>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d203      	bcs.n	800affe <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aff6:	4b14      	ldr	r3, [pc, #80]	; (800b048 <pvPortMalloc+0x17c>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	4a15      	ldr	r2, [pc, #84]	; (800b050 <pvPortMalloc+0x184>)
 800affc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800affe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b000:	685a      	ldr	r2, [r3, #4]
 800b002:	4b10      	ldr	r3, [pc, #64]	; (800b044 <pvPortMalloc+0x178>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	431a      	orrs	r2, r3
 800b008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b00a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b00e:	2200      	movs	r2, #0
 800b010:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b012:	f7fe fd5d 	bl	8009ad0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b016:	69fb      	ldr	r3, [r7, #28]
 800b018:	f003 0307 	and.w	r3, r3, #7
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d00a      	beq.n	800b036 <pvPortMalloc+0x16a>
	__asm volatile
 800b020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b024:	f383 8811 	msr	BASEPRI, r3
 800b028:	f3bf 8f6f 	isb	sy
 800b02c:	f3bf 8f4f 	dsb	sy
 800b030:	60fb      	str	r3, [r7, #12]
}
 800b032:	bf00      	nop
 800b034:	e7fe      	b.n	800b034 <pvPortMalloc+0x168>
	return pvReturn;
 800b036:	69fb      	ldr	r3, [r7, #28]
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3728      	adds	r7, #40	; 0x28
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}
 800b040:	20001d4c 	.word	0x20001d4c
 800b044:	20001d58 	.word	0x20001d58
 800b048:	20001d50 	.word	0x20001d50
 800b04c:	20001d44 	.word	0x20001d44
 800b050:	20001d54 	.word	0x20001d54

0800b054 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b086      	sub	sp, #24
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d048      	beq.n	800b0f8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b066:	2308      	movs	r3, #8
 800b068:	425b      	negs	r3, r3
 800b06a:	697a      	ldr	r2, [r7, #20]
 800b06c:	4413      	add	r3, r2
 800b06e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	685a      	ldr	r2, [r3, #4]
 800b078:	4b21      	ldr	r3, [pc, #132]	; (800b100 <vPortFree+0xac>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	4013      	ands	r3, r2
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d10a      	bne.n	800b098 <vPortFree+0x44>
	__asm volatile
 800b082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b086:	f383 8811 	msr	BASEPRI, r3
 800b08a:	f3bf 8f6f 	isb	sy
 800b08e:	f3bf 8f4f 	dsb	sy
 800b092:	60fb      	str	r3, [r7, #12]
}
 800b094:	bf00      	nop
 800b096:	e7fe      	b.n	800b096 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d00a      	beq.n	800b0b6 <vPortFree+0x62>
	__asm volatile
 800b0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a4:	f383 8811 	msr	BASEPRI, r3
 800b0a8:	f3bf 8f6f 	isb	sy
 800b0ac:	f3bf 8f4f 	dsb	sy
 800b0b0:	60bb      	str	r3, [r7, #8]
}
 800b0b2:	bf00      	nop
 800b0b4:	e7fe      	b.n	800b0b4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	685a      	ldr	r2, [r3, #4]
 800b0ba:	4b11      	ldr	r3, [pc, #68]	; (800b100 <vPortFree+0xac>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	4013      	ands	r3, r2
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d019      	beq.n	800b0f8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d115      	bne.n	800b0f8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	685a      	ldr	r2, [r3, #4]
 800b0d0:	4b0b      	ldr	r3, [pc, #44]	; (800b100 <vPortFree+0xac>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	43db      	mvns	r3, r3
 800b0d6:	401a      	ands	r2, r3
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b0dc:	f7fe fcea 	bl	8009ab4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	685a      	ldr	r2, [r3, #4]
 800b0e4:	4b07      	ldr	r3, [pc, #28]	; (800b104 <vPortFree+0xb0>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	4413      	add	r3, r2
 800b0ea:	4a06      	ldr	r2, [pc, #24]	; (800b104 <vPortFree+0xb0>)
 800b0ec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b0ee:	6938      	ldr	r0, [r7, #16]
 800b0f0:	f000 f86c 	bl	800b1cc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b0f4:	f7fe fcec 	bl	8009ad0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b0f8:	bf00      	nop
 800b0fa:	3718      	adds	r7, #24
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}
 800b100:	20001d58 	.word	0x20001d58
 800b104:	20001d50 	.word	0x20001d50

0800b108 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b108:	b480      	push	{r7}
 800b10a:	b085      	sub	sp, #20
 800b10c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b10e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b112:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b114:	4b27      	ldr	r3, [pc, #156]	; (800b1b4 <prvHeapInit+0xac>)
 800b116:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	f003 0307 	and.w	r3, r3, #7
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d00c      	beq.n	800b13c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	3307      	adds	r3, #7
 800b126:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f023 0307 	bic.w	r3, r3, #7
 800b12e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b130:	68ba      	ldr	r2, [r7, #8]
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	1ad3      	subs	r3, r2, r3
 800b136:	4a1f      	ldr	r2, [pc, #124]	; (800b1b4 <prvHeapInit+0xac>)
 800b138:	4413      	add	r3, r2
 800b13a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b140:	4a1d      	ldr	r2, [pc, #116]	; (800b1b8 <prvHeapInit+0xb0>)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b146:	4b1c      	ldr	r3, [pc, #112]	; (800b1b8 <prvHeapInit+0xb0>)
 800b148:	2200      	movs	r2, #0
 800b14a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	68ba      	ldr	r2, [r7, #8]
 800b150:	4413      	add	r3, r2
 800b152:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b154:	2208      	movs	r2, #8
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	1a9b      	subs	r3, r3, r2
 800b15a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f023 0307 	bic.w	r3, r3, #7
 800b162:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	4a15      	ldr	r2, [pc, #84]	; (800b1bc <prvHeapInit+0xb4>)
 800b168:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b16a:	4b14      	ldr	r3, [pc, #80]	; (800b1bc <prvHeapInit+0xb4>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	2200      	movs	r2, #0
 800b170:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b172:	4b12      	ldr	r3, [pc, #72]	; (800b1bc <prvHeapInit+0xb4>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	2200      	movs	r2, #0
 800b178:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	68fa      	ldr	r2, [r7, #12]
 800b182:	1ad2      	subs	r2, r2, r3
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b188:	4b0c      	ldr	r3, [pc, #48]	; (800b1bc <prvHeapInit+0xb4>)
 800b18a:	681a      	ldr	r2, [r3, #0]
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	4a0a      	ldr	r2, [pc, #40]	; (800b1c0 <prvHeapInit+0xb8>)
 800b196:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	685b      	ldr	r3, [r3, #4]
 800b19c:	4a09      	ldr	r2, [pc, #36]	; (800b1c4 <prvHeapInit+0xbc>)
 800b19e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b1a0:	4b09      	ldr	r3, [pc, #36]	; (800b1c8 <prvHeapInit+0xc0>)
 800b1a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b1a6:	601a      	str	r2, [r3, #0]
}
 800b1a8:	bf00      	nop
 800b1aa:	3714      	adds	r7, #20
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bc80      	pop	{r7}
 800b1b0:	4770      	bx	lr
 800b1b2:	bf00      	nop
 800b1b4:	20001144 	.word	0x20001144
 800b1b8:	20001d44 	.word	0x20001d44
 800b1bc:	20001d4c 	.word	0x20001d4c
 800b1c0:	20001d54 	.word	0x20001d54
 800b1c4:	20001d50 	.word	0x20001d50
 800b1c8:	20001d58 	.word	0x20001d58

0800b1cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b085      	sub	sp, #20
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b1d4:	4b27      	ldr	r3, [pc, #156]	; (800b274 <prvInsertBlockIntoFreeList+0xa8>)
 800b1d6:	60fb      	str	r3, [r7, #12]
 800b1d8:	e002      	b.n	800b1e0 <prvInsertBlockIntoFreeList+0x14>
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	60fb      	str	r3, [r7, #12]
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	687a      	ldr	r2, [r7, #4]
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	d8f7      	bhi.n	800b1da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	685b      	ldr	r3, [r3, #4]
 800b1f2:	68ba      	ldr	r2, [r7, #8]
 800b1f4:	4413      	add	r3, r2
 800b1f6:	687a      	ldr	r2, [r7, #4]
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	d108      	bne.n	800b20e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	685a      	ldr	r2, [r3, #4]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	685b      	ldr	r3, [r3, #4]
 800b204:	441a      	add	r2, r3
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	68ba      	ldr	r2, [r7, #8]
 800b218:	441a      	add	r2, r3
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	429a      	cmp	r2, r3
 800b220:	d118      	bne.n	800b254 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681a      	ldr	r2, [r3, #0]
 800b226:	4b14      	ldr	r3, [pc, #80]	; (800b278 <prvInsertBlockIntoFreeList+0xac>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d00d      	beq.n	800b24a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	685a      	ldr	r2, [r3, #4]
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	441a      	add	r2, r3
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	681a      	ldr	r2, [r3, #0]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	601a      	str	r2, [r3, #0]
 800b248:	e008      	b.n	800b25c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b24a:	4b0b      	ldr	r3, [pc, #44]	; (800b278 <prvInsertBlockIntoFreeList+0xac>)
 800b24c:	681a      	ldr	r2, [r3, #0]
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	601a      	str	r2, [r3, #0]
 800b252:	e003      	b.n	800b25c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681a      	ldr	r2, [r3, #0]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b25c:	68fa      	ldr	r2, [r7, #12]
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	429a      	cmp	r2, r3
 800b262:	d002      	beq.n	800b26a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	687a      	ldr	r2, [r7, #4]
 800b268:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b26a:	bf00      	nop
 800b26c:	3714      	adds	r7, #20
 800b26e:	46bd      	mov	sp, r7
 800b270:	bc80      	pop	{r7}
 800b272:	4770      	bx	lr
 800b274:	20001d44 	.word	0x20001d44
 800b278:	20001d4c 	.word	0x20001d4c

0800b27c <__errno>:
 800b27c:	4b01      	ldr	r3, [pc, #4]	; (800b284 <__errno+0x8>)
 800b27e:	6818      	ldr	r0, [r3, #0]
 800b280:	4770      	bx	lr
 800b282:	bf00      	nop
 800b284:	20000010 	.word	0x20000010

0800b288 <std>:
 800b288:	2300      	movs	r3, #0
 800b28a:	b510      	push	{r4, lr}
 800b28c:	4604      	mov	r4, r0
 800b28e:	e9c0 3300 	strd	r3, r3, [r0]
 800b292:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b296:	6083      	str	r3, [r0, #8]
 800b298:	8181      	strh	r1, [r0, #12]
 800b29a:	6643      	str	r3, [r0, #100]	; 0x64
 800b29c:	81c2      	strh	r2, [r0, #14]
 800b29e:	6183      	str	r3, [r0, #24]
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	2208      	movs	r2, #8
 800b2a4:	305c      	adds	r0, #92	; 0x5c
 800b2a6:	f000 f91a 	bl	800b4de <memset>
 800b2aa:	4b05      	ldr	r3, [pc, #20]	; (800b2c0 <std+0x38>)
 800b2ac:	6263      	str	r3, [r4, #36]	; 0x24
 800b2ae:	4b05      	ldr	r3, [pc, #20]	; (800b2c4 <std+0x3c>)
 800b2b0:	62a3      	str	r3, [r4, #40]	; 0x28
 800b2b2:	4b05      	ldr	r3, [pc, #20]	; (800b2c8 <std+0x40>)
 800b2b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b2b6:	4b05      	ldr	r3, [pc, #20]	; (800b2cc <std+0x44>)
 800b2b8:	6224      	str	r4, [r4, #32]
 800b2ba:	6323      	str	r3, [r4, #48]	; 0x30
 800b2bc:	bd10      	pop	{r4, pc}
 800b2be:	bf00      	nop
 800b2c0:	0800c06d 	.word	0x0800c06d
 800b2c4:	0800c08f 	.word	0x0800c08f
 800b2c8:	0800c0c7 	.word	0x0800c0c7
 800b2cc:	0800c0eb 	.word	0x0800c0eb

0800b2d0 <_cleanup_r>:
 800b2d0:	4901      	ldr	r1, [pc, #4]	; (800b2d8 <_cleanup_r+0x8>)
 800b2d2:	f000 b8af 	b.w	800b434 <_fwalk_reent>
 800b2d6:	bf00      	nop
 800b2d8:	0800d049 	.word	0x0800d049

0800b2dc <__sfmoreglue>:
 800b2dc:	b570      	push	{r4, r5, r6, lr}
 800b2de:	2268      	movs	r2, #104	; 0x68
 800b2e0:	1e4d      	subs	r5, r1, #1
 800b2e2:	4355      	muls	r5, r2
 800b2e4:	460e      	mov	r6, r1
 800b2e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b2ea:	f000 f921 	bl	800b530 <_malloc_r>
 800b2ee:	4604      	mov	r4, r0
 800b2f0:	b140      	cbz	r0, 800b304 <__sfmoreglue+0x28>
 800b2f2:	2100      	movs	r1, #0
 800b2f4:	e9c0 1600 	strd	r1, r6, [r0]
 800b2f8:	300c      	adds	r0, #12
 800b2fa:	60a0      	str	r0, [r4, #8]
 800b2fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b300:	f000 f8ed 	bl	800b4de <memset>
 800b304:	4620      	mov	r0, r4
 800b306:	bd70      	pop	{r4, r5, r6, pc}

0800b308 <__sfp_lock_acquire>:
 800b308:	4801      	ldr	r0, [pc, #4]	; (800b310 <__sfp_lock_acquire+0x8>)
 800b30a:	f000 b8d8 	b.w	800b4be <__retarget_lock_acquire_recursive>
 800b30e:	bf00      	nop
 800b310:	20001d5d 	.word	0x20001d5d

0800b314 <__sfp_lock_release>:
 800b314:	4801      	ldr	r0, [pc, #4]	; (800b31c <__sfp_lock_release+0x8>)
 800b316:	f000 b8d3 	b.w	800b4c0 <__retarget_lock_release_recursive>
 800b31a:	bf00      	nop
 800b31c:	20001d5d 	.word	0x20001d5d

0800b320 <__sinit_lock_acquire>:
 800b320:	4801      	ldr	r0, [pc, #4]	; (800b328 <__sinit_lock_acquire+0x8>)
 800b322:	f000 b8cc 	b.w	800b4be <__retarget_lock_acquire_recursive>
 800b326:	bf00      	nop
 800b328:	20001d5e 	.word	0x20001d5e

0800b32c <__sinit_lock_release>:
 800b32c:	4801      	ldr	r0, [pc, #4]	; (800b334 <__sinit_lock_release+0x8>)
 800b32e:	f000 b8c7 	b.w	800b4c0 <__retarget_lock_release_recursive>
 800b332:	bf00      	nop
 800b334:	20001d5e 	.word	0x20001d5e

0800b338 <__sinit>:
 800b338:	b510      	push	{r4, lr}
 800b33a:	4604      	mov	r4, r0
 800b33c:	f7ff fff0 	bl	800b320 <__sinit_lock_acquire>
 800b340:	69a3      	ldr	r3, [r4, #24]
 800b342:	b11b      	cbz	r3, 800b34c <__sinit+0x14>
 800b344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b348:	f7ff bff0 	b.w	800b32c <__sinit_lock_release>
 800b34c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b350:	6523      	str	r3, [r4, #80]	; 0x50
 800b352:	4b13      	ldr	r3, [pc, #76]	; (800b3a0 <__sinit+0x68>)
 800b354:	4a13      	ldr	r2, [pc, #76]	; (800b3a4 <__sinit+0x6c>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	62a2      	str	r2, [r4, #40]	; 0x28
 800b35a:	42a3      	cmp	r3, r4
 800b35c:	bf04      	itt	eq
 800b35e:	2301      	moveq	r3, #1
 800b360:	61a3      	streq	r3, [r4, #24]
 800b362:	4620      	mov	r0, r4
 800b364:	f000 f820 	bl	800b3a8 <__sfp>
 800b368:	6060      	str	r0, [r4, #4]
 800b36a:	4620      	mov	r0, r4
 800b36c:	f000 f81c 	bl	800b3a8 <__sfp>
 800b370:	60a0      	str	r0, [r4, #8]
 800b372:	4620      	mov	r0, r4
 800b374:	f000 f818 	bl	800b3a8 <__sfp>
 800b378:	2200      	movs	r2, #0
 800b37a:	60e0      	str	r0, [r4, #12]
 800b37c:	2104      	movs	r1, #4
 800b37e:	6860      	ldr	r0, [r4, #4]
 800b380:	f7ff ff82 	bl	800b288 <std>
 800b384:	68a0      	ldr	r0, [r4, #8]
 800b386:	2201      	movs	r2, #1
 800b388:	2109      	movs	r1, #9
 800b38a:	f7ff ff7d 	bl	800b288 <std>
 800b38e:	68e0      	ldr	r0, [r4, #12]
 800b390:	2202      	movs	r2, #2
 800b392:	2112      	movs	r1, #18
 800b394:	f7ff ff78 	bl	800b288 <std>
 800b398:	2301      	movs	r3, #1
 800b39a:	61a3      	str	r3, [r4, #24]
 800b39c:	e7d2      	b.n	800b344 <__sinit+0xc>
 800b39e:	bf00      	nop
 800b3a0:	0800fa40 	.word	0x0800fa40
 800b3a4:	0800b2d1 	.word	0x0800b2d1

0800b3a8 <__sfp>:
 800b3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3aa:	4607      	mov	r7, r0
 800b3ac:	f7ff ffac 	bl	800b308 <__sfp_lock_acquire>
 800b3b0:	4b1e      	ldr	r3, [pc, #120]	; (800b42c <__sfp+0x84>)
 800b3b2:	681e      	ldr	r6, [r3, #0]
 800b3b4:	69b3      	ldr	r3, [r6, #24]
 800b3b6:	b913      	cbnz	r3, 800b3be <__sfp+0x16>
 800b3b8:	4630      	mov	r0, r6
 800b3ba:	f7ff ffbd 	bl	800b338 <__sinit>
 800b3be:	3648      	adds	r6, #72	; 0x48
 800b3c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b3c4:	3b01      	subs	r3, #1
 800b3c6:	d503      	bpl.n	800b3d0 <__sfp+0x28>
 800b3c8:	6833      	ldr	r3, [r6, #0]
 800b3ca:	b30b      	cbz	r3, 800b410 <__sfp+0x68>
 800b3cc:	6836      	ldr	r6, [r6, #0]
 800b3ce:	e7f7      	b.n	800b3c0 <__sfp+0x18>
 800b3d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b3d4:	b9d5      	cbnz	r5, 800b40c <__sfp+0x64>
 800b3d6:	4b16      	ldr	r3, [pc, #88]	; (800b430 <__sfp+0x88>)
 800b3d8:	60e3      	str	r3, [r4, #12]
 800b3da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b3de:	6665      	str	r5, [r4, #100]	; 0x64
 800b3e0:	f000 f86c 	bl	800b4bc <__retarget_lock_init_recursive>
 800b3e4:	f7ff ff96 	bl	800b314 <__sfp_lock_release>
 800b3e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b3ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b3f0:	6025      	str	r5, [r4, #0]
 800b3f2:	61a5      	str	r5, [r4, #24]
 800b3f4:	2208      	movs	r2, #8
 800b3f6:	4629      	mov	r1, r5
 800b3f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b3fc:	f000 f86f 	bl	800b4de <memset>
 800b400:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b404:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b408:	4620      	mov	r0, r4
 800b40a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b40c:	3468      	adds	r4, #104	; 0x68
 800b40e:	e7d9      	b.n	800b3c4 <__sfp+0x1c>
 800b410:	2104      	movs	r1, #4
 800b412:	4638      	mov	r0, r7
 800b414:	f7ff ff62 	bl	800b2dc <__sfmoreglue>
 800b418:	4604      	mov	r4, r0
 800b41a:	6030      	str	r0, [r6, #0]
 800b41c:	2800      	cmp	r0, #0
 800b41e:	d1d5      	bne.n	800b3cc <__sfp+0x24>
 800b420:	f7ff ff78 	bl	800b314 <__sfp_lock_release>
 800b424:	230c      	movs	r3, #12
 800b426:	603b      	str	r3, [r7, #0]
 800b428:	e7ee      	b.n	800b408 <__sfp+0x60>
 800b42a:	bf00      	nop
 800b42c:	0800fa40 	.word	0x0800fa40
 800b430:	ffff0001 	.word	0xffff0001

0800b434 <_fwalk_reent>:
 800b434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b438:	4606      	mov	r6, r0
 800b43a:	4688      	mov	r8, r1
 800b43c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b440:	2700      	movs	r7, #0
 800b442:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b446:	f1b9 0901 	subs.w	r9, r9, #1
 800b44a:	d505      	bpl.n	800b458 <_fwalk_reent+0x24>
 800b44c:	6824      	ldr	r4, [r4, #0]
 800b44e:	2c00      	cmp	r4, #0
 800b450:	d1f7      	bne.n	800b442 <_fwalk_reent+0xe>
 800b452:	4638      	mov	r0, r7
 800b454:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b458:	89ab      	ldrh	r3, [r5, #12]
 800b45a:	2b01      	cmp	r3, #1
 800b45c:	d907      	bls.n	800b46e <_fwalk_reent+0x3a>
 800b45e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b462:	3301      	adds	r3, #1
 800b464:	d003      	beq.n	800b46e <_fwalk_reent+0x3a>
 800b466:	4629      	mov	r1, r5
 800b468:	4630      	mov	r0, r6
 800b46a:	47c0      	blx	r8
 800b46c:	4307      	orrs	r7, r0
 800b46e:	3568      	adds	r5, #104	; 0x68
 800b470:	e7e9      	b.n	800b446 <_fwalk_reent+0x12>
	...

0800b474 <__libc_init_array>:
 800b474:	b570      	push	{r4, r5, r6, lr}
 800b476:	4d0d      	ldr	r5, [pc, #52]	; (800b4ac <__libc_init_array+0x38>)
 800b478:	4c0d      	ldr	r4, [pc, #52]	; (800b4b0 <__libc_init_array+0x3c>)
 800b47a:	1b64      	subs	r4, r4, r5
 800b47c:	10a4      	asrs	r4, r4, #2
 800b47e:	2600      	movs	r6, #0
 800b480:	42a6      	cmp	r6, r4
 800b482:	d109      	bne.n	800b498 <__libc_init_array+0x24>
 800b484:	4d0b      	ldr	r5, [pc, #44]	; (800b4b4 <__libc_init_array+0x40>)
 800b486:	4c0c      	ldr	r4, [pc, #48]	; (800b4b8 <__libc_init_array+0x44>)
 800b488:	f003 fde0 	bl	800f04c <_init>
 800b48c:	1b64      	subs	r4, r4, r5
 800b48e:	10a4      	asrs	r4, r4, #2
 800b490:	2600      	movs	r6, #0
 800b492:	42a6      	cmp	r6, r4
 800b494:	d105      	bne.n	800b4a2 <__libc_init_array+0x2e>
 800b496:	bd70      	pop	{r4, r5, r6, pc}
 800b498:	f855 3b04 	ldr.w	r3, [r5], #4
 800b49c:	4798      	blx	r3
 800b49e:	3601      	adds	r6, #1
 800b4a0:	e7ee      	b.n	800b480 <__libc_init_array+0xc>
 800b4a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4a6:	4798      	blx	r3
 800b4a8:	3601      	adds	r6, #1
 800b4aa:	e7f2      	b.n	800b492 <__libc_init_array+0x1e>
 800b4ac:	0800fd50 	.word	0x0800fd50
 800b4b0:	0800fd50 	.word	0x0800fd50
 800b4b4:	0800fd50 	.word	0x0800fd50
 800b4b8:	0800fd54 	.word	0x0800fd54

0800b4bc <__retarget_lock_init_recursive>:
 800b4bc:	4770      	bx	lr

0800b4be <__retarget_lock_acquire_recursive>:
 800b4be:	4770      	bx	lr

0800b4c0 <__retarget_lock_release_recursive>:
 800b4c0:	4770      	bx	lr

0800b4c2 <memcpy>:
 800b4c2:	440a      	add	r2, r1
 800b4c4:	4291      	cmp	r1, r2
 800b4c6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b4ca:	d100      	bne.n	800b4ce <memcpy+0xc>
 800b4cc:	4770      	bx	lr
 800b4ce:	b510      	push	{r4, lr}
 800b4d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b4d8:	4291      	cmp	r1, r2
 800b4da:	d1f9      	bne.n	800b4d0 <memcpy+0xe>
 800b4dc:	bd10      	pop	{r4, pc}

0800b4de <memset>:
 800b4de:	4402      	add	r2, r0
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d100      	bne.n	800b4e8 <memset+0xa>
 800b4e6:	4770      	bx	lr
 800b4e8:	f803 1b01 	strb.w	r1, [r3], #1
 800b4ec:	e7f9      	b.n	800b4e2 <memset+0x4>
	...

0800b4f0 <sbrk_aligned>:
 800b4f0:	b570      	push	{r4, r5, r6, lr}
 800b4f2:	4e0e      	ldr	r6, [pc, #56]	; (800b52c <sbrk_aligned+0x3c>)
 800b4f4:	460c      	mov	r4, r1
 800b4f6:	6831      	ldr	r1, [r6, #0]
 800b4f8:	4605      	mov	r5, r0
 800b4fa:	b911      	cbnz	r1, 800b502 <sbrk_aligned+0x12>
 800b4fc:	f000 fd52 	bl	800bfa4 <_sbrk_r>
 800b500:	6030      	str	r0, [r6, #0]
 800b502:	4621      	mov	r1, r4
 800b504:	4628      	mov	r0, r5
 800b506:	f000 fd4d 	bl	800bfa4 <_sbrk_r>
 800b50a:	1c43      	adds	r3, r0, #1
 800b50c:	d00a      	beq.n	800b524 <sbrk_aligned+0x34>
 800b50e:	1cc4      	adds	r4, r0, #3
 800b510:	f024 0403 	bic.w	r4, r4, #3
 800b514:	42a0      	cmp	r0, r4
 800b516:	d007      	beq.n	800b528 <sbrk_aligned+0x38>
 800b518:	1a21      	subs	r1, r4, r0
 800b51a:	4628      	mov	r0, r5
 800b51c:	f000 fd42 	bl	800bfa4 <_sbrk_r>
 800b520:	3001      	adds	r0, #1
 800b522:	d101      	bne.n	800b528 <sbrk_aligned+0x38>
 800b524:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b528:	4620      	mov	r0, r4
 800b52a:	bd70      	pop	{r4, r5, r6, pc}
 800b52c:	20001d64 	.word	0x20001d64

0800b530 <_malloc_r>:
 800b530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b534:	1ccd      	adds	r5, r1, #3
 800b536:	f025 0503 	bic.w	r5, r5, #3
 800b53a:	3508      	adds	r5, #8
 800b53c:	2d0c      	cmp	r5, #12
 800b53e:	bf38      	it	cc
 800b540:	250c      	movcc	r5, #12
 800b542:	2d00      	cmp	r5, #0
 800b544:	4607      	mov	r7, r0
 800b546:	db01      	blt.n	800b54c <_malloc_r+0x1c>
 800b548:	42a9      	cmp	r1, r5
 800b54a:	d905      	bls.n	800b558 <_malloc_r+0x28>
 800b54c:	230c      	movs	r3, #12
 800b54e:	603b      	str	r3, [r7, #0]
 800b550:	2600      	movs	r6, #0
 800b552:	4630      	mov	r0, r6
 800b554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b558:	4e2e      	ldr	r6, [pc, #184]	; (800b614 <_malloc_r+0xe4>)
 800b55a:	f001 fde1 	bl	800d120 <__malloc_lock>
 800b55e:	6833      	ldr	r3, [r6, #0]
 800b560:	461c      	mov	r4, r3
 800b562:	bb34      	cbnz	r4, 800b5b2 <_malloc_r+0x82>
 800b564:	4629      	mov	r1, r5
 800b566:	4638      	mov	r0, r7
 800b568:	f7ff ffc2 	bl	800b4f0 <sbrk_aligned>
 800b56c:	1c43      	adds	r3, r0, #1
 800b56e:	4604      	mov	r4, r0
 800b570:	d14d      	bne.n	800b60e <_malloc_r+0xde>
 800b572:	6834      	ldr	r4, [r6, #0]
 800b574:	4626      	mov	r6, r4
 800b576:	2e00      	cmp	r6, #0
 800b578:	d140      	bne.n	800b5fc <_malloc_r+0xcc>
 800b57a:	6823      	ldr	r3, [r4, #0]
 800b57c:	4631      	mov	r1, r6
 800b57e:	4638      	mov	r0, r7
 800b580:	eb04 0803 	add.w	r8, r4, r3
 800b584:	f000 fd0e 	bl	800bfa4 <_sbrk_r>
 800b588:	4580      	cmp	r8, r0
 800b58a:	d13a      	bne.n	800b602 <_malloc_r+0xd2>
 800b58c:	6821      	ldr	r1, [r4, #0]
 800b58e:	3503      	adds	r5, #3
 800b590:	1a6d      	subs	r5, r5, r1
 800b592:	f025 0503 	bic.w	r5, r5, #3
 800b596:	3508      	adds	r5, #8
 800b598:	2d0c      	cmp	r5, #12
 800b59a:	bf38      	it	cc
 800b59c:	250c      	movcc	r5, #12
 800b59e:	4629      	mov	r1, r5
 800b5a0:	4638      	mov	r0, r7
 800b5a2:	f7ff ffa5 	bl	800b4f0 <sbrk_aligned>
 800b5a6:	3001      	adds	r0, #1
 800b5a8:	d02b      	beq.n	800b602 <_malloc_r+0xd2>
 800b5aa:	6823      	ldr	r3, [r4, #0]
 800b5ac:	442b      	add	r3, r5
 800b5ae:	6023      	str	r3, [r4, #0]
 800b5b0:	e00e      	b.n	800b5d0 <_malloc_r+0xa0>
 800b5b2:	6822      	ldr	r2, [r4, #0]
 800b5b4:	1b52      	subs	r2, r2, r5
 800b5b6:	d41e      	bmi.n	800b5f6 <_malloc_r+0xc6>
 800b5b8:	2a0b      	cmp	r2, #11
 800b5ba:	d916      	bls.n	800b5ea <_malloc_r+0xba>
 800b5bc:	1961      	adds	r1, r4, r5
 800b5be:	42a3      	cmp	r3, r4
 800b5c0:	6025      	str	r5, [r4, #0]
 800b5c2:	bf18      	it	ne
 800b5c4:	6059      	strne	r1, [r3, #4]
 800b5c6:	6863      	ldr	r3, [r4, #4]
 800b5c8:	bf08      	it	eq
 800b5ca:	6031      	streq	r1, [r6, #0]
 800b5cc:	5162      	str	r2, [r4, r5]
 800b5ce:	604b      	str	r3, [r1, #4]
 800b5d0:	4638      	mov	r0, r7
 800b5d2:	f104 060b 	add.w	r6, r4, #11
 800b5d6:	f001 fda9 	bl	800d12c <__malloc_unlock>
 800b5da:	f026 0607 	bic.w	r6, r6, #7
 800b5de:	1d23      	adds	r3, r4, #4
 800b5e0:	1af2      	subs	r2, r6, r3
 800b5e2:	d0b6      	beq.n	800b552 <_malloc_r+0x22>
 800b5e4:	1b9b      	subs	r3, r3, r6
 800b5e6:	50a3      	str	r3, [r4, r2]
 800b5e8:	e7b3      	b.n	800b552 <_malloc_r+0x22>
 800b5ea:	6862      	ldr	r2, [r4, #4]
 800b5ec:	42a3      	cmp	r3, r4
 800b5ee:	bf0c      	ite	eq
 800b5f0:	6032      	streq	r2, [r6, #0]
 800b5f2:	605a      	strne	r2, [r3, #4]
 800b5f4:	e7ec      	b.n	800b5d0 <_malloc_r+0xa0>
 800b5f6:	4623      	mov	r3, r4
 800b5f8:	6864      	ldr	r4, [r4, #4]
 800b5fa:	e7b2      	b.n	800b562 <_malloc_r+0x32>
 800b5fc:	4634      	mov	r4, r6
 800b5fe:	6876      	ldr	r6, [r6, #4]
 800b600:	e7b9      	b.n	800b576 <_malloc_r+0x46>
 800b602:	230c      	movs	r3, #12
 800b604:	603b      	str	r3, [r7, #0]
 800b606:	4638      	mov	r0, r7
 800b608:	f001 fd90 	bl	800d12c <__malloc_unlock>
 800b60c:	e7a1      	b.n	800b552 <_malloc_r+0x22>
 800b60e:	6025      	str	r5, [r4, #0]
 800b610:	e7de      	b.n	800b5d0 <_malloc_r+0xa0>
 800b612:	bf00      	nop
 800b614:	20001d60 	.word	0x20001d60

0800b618 <__cvt>:
 800b618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b61c:	b088      	sub	sp, #32
 800b61e:	2b00      	cmp	r3, #0
 800b620:	461f      	mov	r7, r3
 800b622:	4614      	mov	r4, r2
 800b624:	bfb8      	it	lt
 800b626:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800b62a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b62c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b62e:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800b632:	bfb6      	itet	lt
 800b634:	461f      	movlt	r7, r3
 800b636:	2300      	movge	r3, #0
 800b638:	232d      	movlt	r3, #45	; 0x2d
 800b63a:	7013      	strb	r3, [r2, #0]
 800b63c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b63e:	f023 0820 	bic.w	r8, r3, #32
 800b642:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b646:	d005      	beq.n	800b654 <__cvt+0x3c>
 800b648:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b64c:	d100      	bne.n	800b650 <__cvt+0x38>
 800b64e:	3501      	adds	r5, #1
 800b650:	2302      	movs	r3, #2
 800b652:	e000      	b.n	800b656 <__cvt+0x3e>
 800b654:	2303      	movs	r3, #3
 800b656:	aa07      	add	r2, sp, #28
 800b658:	9204      	str	r2, [sp, #16]
 800b65a:	aa06      	add	r2, sp, #24
 800b65c:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b660:	e9cd 3500 	strd	r3, r5, [sp]
 800b664:	4622      	mov	r2, r4
 800b666:	463b      	mov	r3, r7
 800b668:	f000 fe7e 	bl	800c368 <_dtoa_r>
 800b66c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b670:	4606      	mov	r6, r0
 800b672:	d102      	bne.n	800b67a <__cvt+0x62>
 800b674:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b676:	07db      	lsls	r3, r3, #31
 800b678:	d522      	bpl.n	800b6c0 <__cvt+0xa8>
 800b67a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b67e:	eb06 0905 	add.w	r9, r6, r5
 800b682:	d110      	bne.n	800b6a6 <__cvt+0x8e>
 800b684:	7833      	ldrb	r3, [r6, #0]
 800b686:	2b30      	cmp	r3, #48	; 0x30
 800b688:	d10a      	bne.n	800b6a0 <__cvt+0x88>
 800b68a:	2200      	movs	r2, #0
 800b68c:	2300      	movs	r3, #0
 800b68e:	4620      	mov	r0, r4
 800b690:	4639      	mov	r1, r7
 800b692:	f7f5 f9f1 	bl	8000a78 <__aeabi_dcmpeq>
 800b696:	b918      	cbnz	r0, 800b6a0 <__cvt+0x88>
 800b698:	f1c5 0501 	rsb	r5, r5, #1
 800b69c:	f8ca 5000 	str.w	r5, [sl]
 800b6a0:	f8da 3000 	ldr.w	r3, [sl]
 800b6a4:	4499      	add	r9, r3
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	4620      	mov	r0, r4
 800b6ac:	4639      	mov	r1, r7
 800b6ae:	f7f5 f9e3 	bl	8000a78 <__aeabi_dcmpeq>
 800b6b2:	b108      	cbz	r0, 800b6b8 <__cvt+0xa0>
 800b6b4:	f8cd 901c 	str.w	r9, [sp, #28]
 800b6b8:	2230      	movs	r2, #48	; 0x30
 800b6ba:	9b07      	ldr	r3, [sp, #28]
 800b6bc:	454b      	cmp	r3, r9
 800b6be:	d307      	bcc.n	800b6d0 <__cvt+0xb8>
 800b6c0:	9b07      	ldr	r3, [sp, #28]
 800b6c2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b6c4:	1b9b      	subs	r3, r3, r6
 800b6c6:	4630      	mov	r0, r6
 800b6c8:	6013      	str	r3, [r2, #0]
 800b6ca:	b008      	add	sp, #32
 800b6cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6d0:	1c59      	adds	r1, r3, #1
 800b6d2:	9107      	str	r1, [sp, #28]
 800b6d4:	701a      	strb	r2, [r3, #0]
 800b6d6:	e7f0      	b.n	800b6ba <__cvt+0xa2>

0800b6d8 <__exponent>:
 800b6d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b6da:	4603      	mov	r3, r0
 800b6dc:	2900      	cmp	r1, #0
 800b6de:	bfb8      	it	lt
 800b6e0:	4249      	neglt	r1, r1
 800b6e2:	f803 2b02 	strb.w	r2, [r3], #2
 800b6e6:	bfb4      	ite	lt
 800b6e8:	222d      	movlt	r2, #45	; 0x2d
 800b6ea:	222b      	movge	r2, #43	; 0x2b
 800b6ec:	2909      	cmp	r1, #9
 800b6ee:	7042      	strb	r2, [r0, #1]
 800b6f0:	dd2a      	ble.n	800b748 <__exponent+0x70>
 800b6f2:	f10d 0407 	add.w	r4, sp, #7
 800b6f6:	46a4      	mov	ip, r4
 800b6f8:	270a      	movs	r7, #10
 800b6fa:	46a6      	mov	lr, r4
 800b6fc:	460a      	mov	r2, r1
 800b6fe:	fb91 f6f7 	sdiv	r6, r1, r7
 800b702:	fb07 1516 	mls	r5, r7, r6, r1
 800b706:	3530      	adds	r5, #48	; 0x30
 800b708:	2a63      	cmp	r2, #99	; 0x63
 800b70a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800b70e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b712:	4631      	mov	r1, r6
 800b714:	dcf1      	bgt.n	800b6fa <__exponent+0x22>
 800b716:	3130      	adds	r1, #48	; 0x30
 800b718:	f1ae 0502 	sub.w	r5, lr, #2
 800b71c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b720:	1c44      	adds	r4, r0, #1
 800b722:	4629      	mov	r1, r5
 800b724:	4561      	cmp	r1, ip
 800b726:	d30a      	bcc.n	800b73e <__exponent+0x66>
 800b728:	f10d 0209 	add.w	r2, sp, #9
 800b72c:	eba2 020e 	sub.w	r2, r2, lr
 800b730:	4565      	cmp	r5, ip
 800b732:	bf88      	it	hi
 800b734:	2200      	movhi	r2, #0
 800b736:	4413      	add	r3, r2
 800b738:	1a18      	subs	r0, r3, r0
 800b73a:	b003      	add	sp, #12
 800b73c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b73e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b742:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b746:	e7ed      	b.n	800b724 <__exponent+0x4c>
 800b748:	2330      	movs	r3, #48	; 0x30
 800b74a:	3130      	adds	r1, #48	; 0x30
 800b74c:	7083      	strb	r3, [r0, #2]
 800b74e:	70c1      	strb	r1, [r0, #3]
 800b750:	1d03      	adds	r3, r0, #4
 800b752:	e7f1      	b.n	800b738 <__exponent+0x60>

0800b754 <_printf_float>:
 800b754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b758:	b091      	sub	sp, #68	; 0x44
 800b75a:	460c      	mov	r4, r1
 800b75c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800b760:	4616      	mov	r6, r2
 800b762:	461f      	mov	r7, r3
 800b764:	4605      	mov	r5, r0
 800b766:	f001 fcbd 	bl	800d0e4 <_localeconv_r>
 800b76a:	6803      	ldr	r3, [r0, #0]
 800b76c:	9309      	str	r3, [sp, #36]	; 0x24
 800b76e:	4618      	mov	r0, r3
 800b770:	f7f4 fd06 	bl	8000180 <strlen>
 800b774:	2300      	movs	r3, #0
 800b776:	930e      	str	r3, [sp, #56]	; 0x38
 800b778:	f8d8 3000 	ldr.w	r3, [r8]
 800b77c:	900a      	str	r0, [sp, #40]	; 0x28
 800b77e:	3307      	adds	r3, #7
 800b780:	f023 0307 	bic.w	r3, r3, #7
 800b784:	f103 0208 	add.w	r2, r3, #8
 800b788:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b78c:	f8d4 b000 	ldr.w	fp, [r4]
 800b790:	f8c8 2000 	str.w	r2, [r8]
 800b794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b798:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b79c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800b7a0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800b7a4:	930b      	str	r3, [sp, #44]	; 0x2c
 800b7a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b7a8:	4b9c      	ldr	r3, [pc, #624]	; (800ba1c <_printf_float+0x2c8>)
 800b7aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b7ae:	4640      	mov	r0, r8
 800b7b0:	f7f5 f994 	bl	8000adc <__aeabi_dcmpun>
 800b7b4:	bb70      	cbnz	r0, 800b814 <_printf_float+0xc0>
 800b7b6:	4b99      	ldr	r3, [pc, #612]	; (800ba1c <_printf_float+0x2c8>)
 800b7b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b7ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b7be:	4640      	mov	r0, r8
 800b7c0:	f7f5 f96e 	bl	8000aa0 <__aeabi_dcmple>
 800b7c4:	bb30      	cbnz	r0, 800b814 <_printf_float+0xc0>
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	4640      	mov	r0, r8
 800b7cc:	4651      	mov	r1, sl
 800b7ce:	f7f5 f95d 	bl	8000a8c <__aeabi_dcmplt>
 800b7d2:	b110      	cbz	r0, 800b7da <_printf_float+0x86>
 800b7d4:	232d      	movs	r3, #45	; 0x2d
 800b7d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7da:	4b91      	ldr	r3, [pc, #580]	; (800ba20 <_printf_float+0x2cc>)
 800b7dc:	4891      	ldr	r0, [pc, #580]	; (800ba24 <_printf_float+0x2d0>)
 800b7de:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b7e2:	bf94      	ite	ls
 800b7e4:	4698      	movls	r8, r3
 800b7e6:	4680      	movhi	r8, r0
 800b7e8:	2303      	movs	r3, #3
 800b7ea:	6123      	str	r3, [r4, #16]
 800b7ec:	f02b 0304 	bic.w	r3, fp, #4
 800b7f0:	6023      	str	r3, [r4, #0]
 800b7f2:	f04f 0a00 	mov.w	sl, #0
 800b7f6:	9700      	str	r7, [sp, #0]
 800b7f8:	4633      	mov	r3, r6
 800b7fa:	aa0f      	add	r2, sp, #60	; 0x3c
 800b7fc:	4621      	mov	r1, r4
 800b7fe:	4628      	mov	r0, r5
 800b800:	f000 f9d2 	bl	800bba8 <_printf_common>
 800b804:	3001      	adds	r0, #1
 800b806:	f040 808f 	bne.w	800b928 <_printf_float+0x1d4>
 800b80a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b80e:	b011      	add	sp, #68	; 0x44
 800b810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b814:	4642      	mov	r2, r8
 800b816:	4653      	mov	r3, sl
 800b818:	4640      	mov	r0, r8
 800b81a:	4651      	mov	r1, sl
 800b81c:	f7f5 f95e 	bl	8000adc <__aeabi_dcmpun>
 800b820:	b140      	cbz	r0, 800b834 <_printf_float+0xe0>
 800b822:	f1ba 0f00 	cmp.w	sl, #0
 800b826:	bfbc      	itt	lt
 800b828:	232d      	movlt	r3, #45	; 0x2d
 800b82a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b82e:	487e      	ldr	r0, [pc, #504]	; (800ba28 <_printf_float+0x2d4>)
 800b830:	4b7e      	ldr	r3, [pc, #504]	; (800ba2c <_printf_float+0x2d8>)
 800b832:	e7d4      	b.n	800b7de <_printf_float+0x8a>
 800b834:	6863      	ldr	r3, [r4, #4]
 800b836:	1c5a      	adds	r2, r3, #1
 800b838:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800b83c:	d142      	bne.n	800b8c4 <_printf_float+0x170>
 800b83e:	2306      	movs	r3, #6
 800b840:	6063      	str	r3, [r4, #4]
 800b842:	2200      	movs	r2, #0
 800b844:	9206      	str	r2, [sp, #24]
 800b846:	aa0e      	add	r2, sp, #56	; 0x38
 800b848:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800b84c:	aa0d      	add	r2, sp, #52	; 0x34
 800b84e:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800b852:	9203      	str	r2, [sp, #12]
 800b854:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800b858:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b85c:	6023      	str	r3, [r4, #0]
 800b85e:	6863      	ldr	r3, [r4, #4]
 800b860:	9300      	str	r3, [sp, #0]
 800b862:	4642      	mov	r2, r8
 800b864:	4653      	mov	r3, sl
 800b866:	4628      	mov	r0, r5
 800b868:	910b      	str	r1, [sp, #44]	; 0x2c
 800b86a:	f7ff fed5 	bl	800b618 <__cvt>
 800b86e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b870:	2947      	cmp	r1, #71	; 0x47
 800b872:	4680      	mov	r8, r0
 800b874:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b876:	d108      	bne.n	800b88a <_printf_float+0x136>
 800b878:	1cc8      	adds	r0, r1, #3
 800b87a:	db02      	blt.n	800b882 <_printf_float+0x12e>
 800b87c:	6863      	ldr	r3, [r4, #4]
 800b87e:	4299      	cmp	r1, r3
 800b880:	dd40      	ble.n	800b904 <_printf_float+0x1b0>
 800b882:	f1a9 0902 	sub.w	r9, r9, #2
 800b886:	fa5f f989 	uxtb.w	r9, r9
 800b88a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b88e:	d81f      	bhi.n	800b8d0 <_printf_float+0x17c>
 800b890:	3901      	subs	r1, #1
 800b892:	464a      	mov	r2, r9
 800b894:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b898:	910d      	str	r1, [sp, #52]	; 0x34
 800b89a:	f7ff ff1d 	bl	800b6d8 <__exponent>
 800b89e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b8a0:	1813      	adds	r3, r2, r0
 800b8a2:	2a01      	cmp	r2, #1
 800b8a4:	4682      	mov	sl, r0
 800b8a6:	6123      	str	r3, [r4, #16]
 800b8a8:	dc02      	bgt.n	800b8b0 <_printf_float+0x15c>
 800b8aa:	6822      	ldr	r2, [r4, #0]
 800b8ac:	07d2      	lsls	r2, r2, #31
 800b8ae:	d501      	bpl.n	800b8b4 <_printf_float+0x160>
 800b8b0:	3301      	adds	r3, #1
 800b8b2:	6123      	str	r3, [r4, #16]
 800b8b4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d09c      	beq.n	800b7f6 <_printf_float+0xa2>
 800b8bc:	232d      	movs	r3, #45	; 0x2d
 800b8be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8c2:	e798      	b.n	800b7f6 <_printf_float+0xa2>
 800b8c4:	2947      	cmp	r1, #71	; 0x47
 800b8c6:	d1bc      	bne.n	800b842 <_printf_float+0xee>
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d1ba      	bne.n	800b842 <_printf_float+0xee>
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	e7b7      	b.n	800b840 <_printf_float+0xec>
 800b8d0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b8d4:	d118      	bne.n	800b908 <_printf_float+0x1b4>
 800b8d6:	2900      	cmp	r1, #0
 800b8d8:	6863      	ldr	r3, [r4, #4]
 800b8da:	dd0b      	ble.n	800b8f4 <_printf_float+0x1a0>
 800b8dc:	6121      	str	r1, [r4, #16]
 800b8de:	b913      	cbnz	r3, 800b8e6 <_printf_float+0x192>
 800b8e0:	6822      	ldr	r2, [r4, #0]
 800b8e2:	07d0      	lsls	r0, r2, #31
 800b8e4:	d502      	bpl.n	800b8ec <_printf_float+0x198>
 800b8e6:	3301      	adds	r3, #1
 800b8e8:	440b      	add	r3, r1
 800b8ea:	6123      	str	r3, [r4, #16]
 800b8ec:	65a1      	str	r1, [r4, #88]	; 0x58
 800b8ee:	f04f 0a00 	mov.w	sl, #0
 800b8f2:	e7df      	b.n	800b8b4 <_printf_float+0x160>
 800b8f4:	b913      	cbnz	r3, 800b8fc <_printf_float+0x1a8>
 800b8f6:	6822      	ldr	r2, [r4, #0]
 800b8f8:	07d2      	lsls	r2, r2, #31
 800b8fa:	d501      	bpl.n	800b900 <_printf_float+0x1ac>
 800b8fc:	3302      	adds	r3, #2
 800b8fe:	e7f4      	b.n	800b8ea <_printf_float+0x196>
 800b900:	2301      	movs	r3, #1
 800b902:	e7f2      	b.n	800b8ea <_printf_float+0x196>
 800b904:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b908:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b90a:	4299      	cmp	r1, r3
 800b90c:	db05      	blt.n	800b91a <_printf_float+0x1c6>
 800b90e:	6823      	ldr	r3, [r4, #0]
 800b910:	6121      	str	r1, [r4, #16]
 800b912:	07d8      	lsls	r0, r3, #31
 800b914:	d5ea      	bpl.n	800b8ec <_printf_float+0x198>
 800b916:	1c4b      	adds	r3, r1, #1
 800b918:	e7e7      	b.n	800b8ea <_printf_float+0x196>
 800b91a:	2900      	cmp	r1, #0
 800b91c:	bfd4      	ite	le
 800b91e:	f1c1 0202 	rsble	r2, r1, #2
 800b922:	2201      	movgt	r2, #1
 800b924:	4413      	add	r3, r2
 800b926:	e7e0      	b.n	800b8ea <_printf_float+0x196>
 800b928:	6823      	ldr	r3, [r4, #0]
 800b92a:	055a      	lsls	r2, r3, #21
 800b92c:	d407      	bmi.n	800b93e <_printf_float+0x1ea>
 800b92e:	6923      	ldr	r3, [r4, #16]
 800b930:	4642      	mov	r2, r8
 800b932:	4631      	mov	r1, r6
 800b934:	4628      	mov	r0, r5
 800b936:	47b8      	blx	r7
 800b938:	3001      	adds	r0, #1
 800b93a:	d12b      	bne.n	800b994 <_printf_float+0x240>
 800b93c:	e765      	b.n	800b80a <_printf_float+0xb6>
 800b93e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b942:	f240 80dc 	bls.w	800bafe <_printf_float+0x3aa>
 800b946:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b94a:	2200      	movs	r2, #0
 800b94c:	2300      	movs	r3, #0
 800b94e:	f7f5 f893 	bl	8000a78 <__aeabi_dcmpeq>
 800b952:	2800      	cmp	r0, #0
 800b954:	d033      	beq.n	800b9be <_printf_float+0x26a>
 800b956:	4a36      	ldr	r2, [pc, #216]	; (800ba30 <_printf_float+0x2dc>)
 800b958:	2301      	movs	r3, #1
 800b95a:	4631      	mov	r1, r6
 800b95c:	4628      	mov	r0, r5
 800b95e:	47b8      	blx	r7
 800b960:	3001      	adds	r0, #1
 800b962:	f43f af52 	beq.w	800b80a <_printf_float+0xb6>
 800b966:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b96a:	429a      	cmp	r2, r3
 800b96c:	db02      	blt.n	800b974 <_printf_float+0x220>
 800b96e:	6823      	ldr	r3, [r4, #0]
 800b970:	07d8      	lsls	r0, r3, #31
 800b972:	d50f      	bpl.n	800b994 <_printf_float+0x240>
 800b974:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b978:	4631      	mov	r1, r6
 800b97a:	4628      	mov	r0, r5
 800b97c:	47b8      	blx	r7
 800b97e:	3001      	adds	r0, #1
 800b980:	f43f af43 	beq.w	800b80a <_printf_float+0xb6>
 800b984:	f04f 0800 	mov.w	r8, #0
 800b988:	f104 091a 	add.w	r9, r4, #26
 800b98c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b98e:	3b01      	subs	r3, #1
 800b990:	4543      	cmp	r3, r8
 800b992:	dc09      	bgt.n	800b9a8 <_printf_float+0x254>
 800b994:	6823      	ldr	r3, [r4, #0]
 800b996:	079b      	lsls	r3, r3, #30
 800b998:	f100 8101 	bmi.w	800bb9e <_printf_float+0x44a>
 800b99c:	68e0      	ldr	r0, [r4, #12]
 800b99e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9a0:	4298      	cmp	r0, r3
 800b9a2:	bfb8      	it	lt
 800b9a4:	4618      	movlt	r0, r3
 800b9a6:	e732      	b.n	800b80e <_printf_float+0xba>
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	464a      	mov	r2, r9
 800b9ac:	4631      	mov	r1, r6
 800b9ae:	4628      	mov	r0, r5
 800b9b0:	47b8      	blx	r7
 800b9b2:	3001      	adds	r0, #1
 800b9b4:	f43f af29 	beq.w	800b80a <_printf_float+0xb6>
 800b9b8:	f108 0801 	add.w	r8, r8, #1
 800b9bc:	e7e6      	b.n	800b98c <_printf_float+0x238>
 800b9be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	dc37      	bgt.n	800ba34 <_printf_float+0x2e0>
 800b9c4:	4a1a      	ldr	r2, [pc, #104]	; (800ba30 <_printf_float+0x2dc>)
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	4631      	mov	r1, r6
 800b9ca:	4628      	mov	r0, r5
 800b9cc:	47b8      	blx	r7
 800b9ce:	3001      	adds	r0, #1
 800b9d0:	f43f af1b 	beq.w	800b80a <_printf_float+0xb6>
 800b9d4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b9d8:	4313      	orrs	r3, r2
 800b9da:	d102      	bne.n	800b9e2 <_printf_float+0x28e>
 800b9dc:	6823      	ldr	r3, [r4, #0]
 800b9de:	07d9      	lsls	r1, r3, #31
 800b9e0:	d5d8      	bpl.n	800b994 <_printf_float+0x240>
 800b9e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b9e6:	4631      	mov	r1, r6
 800b9e8:	4628      	mov	r0, r5
 800b9ea:	47b8      	blx	r7
 800b9ec:	3001      	adds	r0, #1
 800b9ee:	f43f af0c 	beq.w	800b80a <_printf_float+0xb6>
 800b9f2:	f04f 0900 	mov.w	r9, #0
 800b9f6:	f104 0a1a 	add.w	sl, r4, #26
 800b9fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b9fc:	425b      	negs	r3, r3
 800b9fe:	454b      	cmp	r3, r9
 800ba00:	dc01      	bgt.n	800ba06 <_printf_float+0x2b2>
 800ba02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba04:	e794      	b.n	800b930 <_printf_float+0x1dc>
 800ba06:	2301      	movs	r3, #1
 800ba08:	4652      	mov	r2, sl
 800ba0a:	4631      	mov	r1, r6
 800ba0c:	4628      	mov	r0, r5
 800ba0e:	47b8      	blx	r7
 800ba10:	3001      	adds	r0, #1
 800ba12:	f43f aefa 	beq.w	800b80a <_printf_float+0xb6>
 800ba16:	f109 0901 	add.w	r9, r9, #1
 800ba1a:	e7ee      	b.n	800b9fa <_printf_float+0x2a6>
 800ba1c:	7fefffff 	.word	0x7fefffff
 800ba20:	0800fa44 	.word	0x0800fa44
 800ba24:	0800fa48 	.word	0x0800fa48
 800ba28:	0800fa50 	.word	0x0800fa50
 800ba2c:	0800fa4c 	.word	0x0800fa4c
 800ba30:	0800fa54 	.word	0x0800fa54
 800ba34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ba36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	bfa8      	it	ge
 800ba3c:	461a      	movge	r2, r3
 800ba3e:	2a00      	cmp	r2, #0
 800ba40:	4691      	mov	r9, r2
 800ba42:	dc37      	bgt.n	800bab4 <_printf_float+0x360>
 800ba44:	f04f 0b00 	mov.w	fp, #0
 800ba48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ba4c:	f104 021a 	add.w	r2, r4, #26
 800ba50:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ba54:	ebaa 0309 	sub.w	r3, sl, r9
 800ba58:	455b      	cmp	r3, fp
 800ba5a:	dc33      	bgt.n	800bac4 <_printf_float+0x370>
 800ba5c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ba60:	429a      	cmp	r2, r3
 800ba62:	db3b      	blt.n	800badc <_printf_float+0x388>
 800ba64:	6823      	ldr	r3, [r4, #0]
 800ba66:	07da      	lsls	r2, r3, #31
 800ba68:	d438      	bmi.n	800badc <_printf_float+0x388>
 800ba6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba6c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ba6e:	eba3 020a 	sub.w	r2, r3, sl
 800ba72:	eba3 0901 	sub.w	r9, r3, r1
 800ba76:	4591      	cmp	r9, r2
 800ba78:	bfa8      	it	ge
 800ba7a:	4691      	movge	r9, r2
 800ba7c:	f1b9 0f00 	cmp.w	r9, #0
 800ba80:	dc34      	bgt.n	800baec <_printf_float+0x398>
 800ba82:	f04f 0800 	mov.w	r8, #0
 800ba86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ba8a:	f104 0a1a 	add.w	sl, r4, #26
 800ba8e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ba92:	1a9b      	subs	r3, r3, r2
 800ba94:	eba3 0309 	sub.w	r3, r3, r9
 800ba98:	4543      	cmp	r3, r8
 800ba9a:	f77f af7b 	ble.w	800b994 <_printf_float+0x240>
 800ba9e:	2301      	movs	r3, #1
 800baa0:	4652      	mov	r2, sl
 800baa2:	4631      	mov	r1, r6
 800baa4:	4628      	mov	r0, r5
 800baa6:	47b8      	blx	r7
 800baa8:	3001      	adds	r0, #1
 800baaa:	f43f aeae 	beq.w	800b80a <_printf_float+0xb6>
 800baae:	f108 0801 	add.w	r8, r8, #1
 800bab2:	e7ec      	b.n	800ba8e <_printf_float+0x33a>
 800bab4:	4613      	mov	r3, r2
 800bab6:	4631      	mov	r1, r6
 800bab8:	4642      	mov	r2, r8
 800baba:	4628      	mov	r0, r5
 800babc:	47b8      	blx	r7
 800babe:	3001      	adds	r0, #1
 800bac0:	d1c0      	bne.n	800ba44 <_printf_float+0x2f0>
 800bac2:	e6a2      	b.n	800b80a <_printf_float+0xb6>
 800bac4:	2301      	movs	r3, #1
 800bac6:	4631      	mov	r1, r6
 800bac8:	4628      	mov	r0, r5
 800baca:	920b      	str	r2, [sp, #44]	; 0x2c
 800bacc:	47b8      	blx	r7
 800bace:	3001      	adds	r0, #1
 800bad0:	f43f ae9b 	beq.w	800b80a <_printf_float+0xb6>
 800bad4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bad6:	f10b 0b01 	add.w	fp, fp, #1
 800bada:	e7b9      	b.n	800ba50 <_printf_float+0x2fc>
 800badc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bae0:	4631      	mov	r1, r6
 800bae2:	4628      	mov	r0, r5
 800bae4:	47b8      	blx	r7
 800bae6:	3001      	adds	r0, #1
 800bae8:	d1bf      	bne.n	800ba6a <_printf_float+0x316>
 800baea:	e68e      	b.n	800b80a <_printf_float+0xb6>
 800baec:	464b      	mov	r3, r9
 800baee:	eb08 020a 	add.w	r2, r8, sl
 800baf2:	4631      	mov	r1, r6
 800baf4:	4628      	mov	r0, r5
 800baf6:	47b8      	blx	r7
 800baf8:	3001      	adds	r0, #1
 800bafa:	d1c2      	bne.n	800ba82 <_printf_float+0x32e>
 800bafc:	e685      	b.n	800b80a <_printf_float+0xb6>
 800bafe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb00:	2a01      	cmp	r2, #1
 800bb02:	dc01      	bgt.n	800bb08 <_printf_float+0x3b4>
 800bb04:	07db      	lsls	r3, r3, #31
 800bb06:	d537      	bpl.n	800bb78 <_printf_float+0x424>
 800bb08:	2301      	movs	r3, #1
 800bb0a:	4642      	mov	r2, r8
 800bb0c:	4631      	mov	r1, r6
 800bb0e:	4628      	mov	r0, r5
 800bb10:	47b8      	blx	r7
 800bb12:	3001      	adds	r0, #1
 800bb14:	f43f ae79 	beq.w	800b80a <_printf_float+0xb6>
 800bb18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb1c:	4631      	mov	r1, r6
 800bb1e:	4628      	mov	r0, r5
 800bb20:	47b8      	blx	r7
 800bb22:	3001      	adds	r0, #1
 800bb24:	f43f ae71 	beq.w	800b80a <_printf_float+0xb6>
 800bb28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	2300      	movs	r3, #0
 800bb30:	f7f4 ffa2 	bl	8000a78 <__aeabi_dcmpeq>
 800bb34:	b9d8      	cbnz	r0, 800bb6e <_printf_float+0x41a>
 800bb36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb38:	f108 0201 	add.w	r2, r8, #1
 800bb3c:	3b01      	subs	r3, #1
 800bb3e:	4631      	mov	r1, r6
 800bb40:	4628      	mov	r0, r5
 800bb42:	47b8      	blx	r7
 800bb44:	3001      	adds	r0, #1
 800bb46:	d10e      	bne.n	800bb66 <_printf_float+0x412>
 800bb48:	e65f      	b.n	800b80a <_printf_float+0xb6>
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	464a      	mov	r2, r9
 800bb4e:	4631      	mov	r1, r6
 800bb50:	4628      	mov	r0, r5
 800bb52:	47b8      	blx	r7
 800bb54:	3001      	adds	r0, #1
 800bb56:	f43f ae58 	beq.w	800b80a <_printf_float+0xb6>
 800bb5a:	f108 0801 	add.w	r8, r8, #1
 800bb5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb60:	3b01      	subs	r3, #1
 800bb62:	4543      	cmp	r3, r8
 800bb64:	dcf1      	bgt.n	800bb4a <_printf_float+0x3f6>
 800bb66:	4653      	mov	r3, sl
 800bb68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bb6c:	e6e1      	b.n	800b932 <_printf_float+0x1de>
 800bb6e:	f04f 0800 	mov.w	r8, #0
 800bb72:	f104 091a 	add.w	r9, r4, #26
 800bb76:	e7f2      	b.n	800bb5e <_printf_float+0x40a>
 800bb78:	2301      	movs	r3, #1
 800bb7a:	4642      	mov	r2, r8
 800bb7c:	e7df      	b.n	800bb3e <_printf_float+0x3ea>
 800bb7e:	2301      	movs	r3, #1
 800bb80:	464a      	mov	r2, r9
 800bb82:	4631      	mov	r1, r6
 800bb84:	4628      	mov	r0, r5
 800bb86:	47b8      	blx	r7
 800bb88:	3001      	adds	r0, #1
 800bb8a:	f43f ae3e 	beq.w	800b80a <_printf_float+0xb6>
 800bb8e:	f108 0801 	add.w	r8, r8, #1
 800bb92:	68e3      	ldr	r3, [r4, #12]
 800bb94:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bb96:	1a5b      	subs	r3, r3, r1
 800bb98:	4543      	cmp	r3, r8
 800bb9a:	dcf0      	bgt.n	800bb7e <_printf_float+0x42a>
 800bb9c:	e6fe      	b.n	800b99c <_printf_float+0x248>
 800bb9e:	f04f 0800 	mov.w	r8, #0
 800bba2:	f104 0919 	add.w	r9, r4, #25
 800bba6:	e7f4      	b.n	800bb92 <_printf_float+0x43e>

0800bba8 <_printf_common>:
 800bba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbac:	4616      	mov	r6, r2
 800bbae:	4699      	mov	r9, r3
 800bbb0:	688a      	ldr	r2, [r1, #8]
 800bbb2:	690b      	ldr	r3, [r1, #16]
 800bbb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	bfb8      	it	lt
 800bbbc:	4613      	movlt	r3, r2
 800bbbe:	6033      	str	r3, [r6, #0]
 800bbc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bbc4:	4607      	mov	r7, r0
 800bbc6:	460c      	mov	r4, r1
 800bbc8:	b10a      	cbz	r2, 800bbce <_printf_common+0x26>
 800bbca:	3301      	adds	r3, #1
 800bbcc:	6033      	str	r3, [r6, #0]
 800bbce:	6823      	ldr	r3, [r4, #0]
 800bbd0:	0699      	lsls	r1, r3, #26
 800bbd2:	bf42      	ittt	mi
 800bbd4:	6833      	ldrmi	r3, [r6, #0]
 800bbd6:	3302      	addmi	r3, #2
 800bbd8:	6033      	strmi	r3, [r6, #0]
 800bbda:	6825      	ldr	r5, [r4, #0]
 800bbdc:	f015 0506 	ands.w	r5, r5, #6
 800bbe0:	d106      	bne.n	800bbf0 <_printf_common+0x48>
 800bbe2:	f104 0a19 	add.w	sl, r4, #25
 800bbe6:	68e3      	ldr	r3, [r4, #12]
 800bbe8:	6832      	ldr	r2, [r6, #0]
 800bbea:	1a9b      	subs	r3, r3, r2
 800bbec:	42ab      	cmp	r3, r5
 800bbee:	dc26      	bgt.n	800bc3e <_printf_common+0x96>
 800bbf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bbf4:	1e13      	subs	r3, r2, #0
 800bbf6:	6822      	ldr	r2, [r4, #0]
 800bbf8:	bf18      	it	ne
 800bbfa:	2301      	movne	r3, #1
 800bbfc:	0692      	lsls	r2, r2, #26
 800bbfe:	d42b      	bmi.n	800bc58 <_printf_common+0xb0>
 800bc00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bc04:	4649      	mov	r1, r9
 800bc06:	4638      	mov	r0, r7
 800bc08:	47c0      	blx	r8
 800bc0a:	3001      	adds	r0, #1
 800bc0c:	d01e      	beq.n	800bc4c <_printf_common+0xa4>
 800bc0e:	6823      	ldr	r3, [r4, #0]
 800bc10:	68e5      	ldr	r5, [r4, #12]
 800bc12:	6832      	ldr	r2, [r6, #0]
 800bc14:	f003 0306 	and.w	r3, r3, #6
 800bc18:	2b04      	cmp	r3, #4
 800bc1a:	bf08      	it	eq
 800bc1c:	1aad      	subeq	r5, r5, r2
 800bc1e:	68a3      	ldr	r3, [r4, #8]
 800bc20:	6922      	ldr	r2, [r4, #16]
 800bc22:	bf0c      	ite	eq
 800bc24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bc28:	2500      	movne	r5, #0
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	bfc4      	itt	gt
 800bc2e:	1a9b      	subgt	r3, r3, r2
 800bc30:	18ed      	addgt	r5, r5, r3
 800bc32:	2600      	movs	r6, #0
 800bc34:	341a      	adds	r4, #26
 800bc36:	42b5      	cmp	r5, r6
 800bc38:	d11a      	bne.n	800bc70 <_printf_common+0xc8>
 800bc3a:	2000      	movs	r0, #0
 800bc3c:	e008      	b.n	800bc50 <_printf_common+0xa8>
 800bc3e:	2301      	movs	r3, #1
 800bc40:	4652      	mov	r2, sl
 800bc42:	4649      	mov	r1, r9
 800bc44:	4638      	mov	r0, r7
 800bc46:	47c0      	blx	r8
 800bc48:	3001      	adds	r0, #1
 800bc4a:	d103      	bne.n	800bc54 <_printf_common+0xac>
 800bc4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc54:	3501      	adds	r5, #1
 800bc56:	e7c6      	b.n	800bbe6 <_printf_common+0x3e>
 800bc58:	18e1      	adds	r1, r4, r3
 800bc5a:	1c5a      	adds	r2, r3, #1
 800bc5c:	2030      	movs	r0, #48	; 0x30
 800bc5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bc62:	4422      	add	r2, r4
 800bc64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bc68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bc6c:	3302      	adds	r3, #2
 800bc6e:	e7c7      	b.n	800bc00 <_printf_common+0x58>
 800bc70:	2301      	movs	r3, #1
 800bc72:	4622      	mov	r2, r4
 800bc74:	4649      	mov	r1, r9
 800bc76:	4638      	mov	r0, r7
 800bc78:	47c0      	blx	r8
 800bc7a:	3001      	adds	r0, #1
 800bc7c:	d0e6      	beq.n	800bc4c <_printf_common+0xa4>
 800bc7e:	3601      	adds	r6, #1
 800bc80:	e7d9      	b.n	800bc36 <_printf_common+0x8e>
	...

0800bc84 <_printf_i>:
 800bc84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc88:	7e0f      	ldrb	r7, [r1, #24]
 800bc8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bc8c:	2f78      	cmp	r7, #120	; 0x78
 800bc8e:	4691      	mov	r9, r2
 800bc90:	4680      	mov	r8, r0
 800bc92:	460c      	mov	r4, r1
 800bc94:	469a      	mov	sl, r3
 800bc96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bc9a:	d807      	bhi.n	800bcac <_printf_i+0x28>
 800bc9c:	2f62      	cmp	r7, #98	; 0x62
 800bc9e:	d80a      	bhi.n	800bcb6 <_printf_i+0x32>
 800bca0:	2f00      	cmp	r7, #0
 800bca2:	f000 80d8 	beq.w	800be56 <_printf_i+0x1d2>
 800bca6:	2f58      	cmp	r7, #88	; 0x58
 800bca8:	f000 80a3 	beq.w	800bdf2 <_printf_i+0x16e>
 800bcac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bcb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bcb4:	e03a      	b.n	800bd2c <_printf_i+0xa8>
 800bcb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bcba:	2b15      	cmp	r3, #21
 800bcbc:	d8f6      	bhi.n	800bcac <_printf_i+0x28>
 800bcbe:	a101      	add	r1, pc, #4	; (adr r1, 800bcc4 <_printf_i+0x40>)
 800bcc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bcc4:	0800bd1d 	.word	0x0800bd1d
 800bcc8:	0800bd31 	.word	0x0800bd31
 800bccc:	0800bcad 	.word	0x0800bcad
 800bcd0:	0800bcad 	.word	0x0800bcad
 800bcd4:	0800bcad 	.word	0x0800bcad
 800bcd8:	0800bcad 	.word	0x0800bcad
 800bcdc:	0800bd31 	.word	0x0800bd31
 800bce0:	0800bcad 	.word	0x0800bcad
 800bce4:	0800bcad 	.word	0x0800bcad
 800bce8:	0800bcad 	.word	0x0800bcad
 800bcec:	0800bcad 	.word	0x0800bcad
 800bcf0:	0800be3d 	.word	0x0800be3d
 800bcf4:	0800bd61 	.word	0x0800bd61
 800bcf8:	0800be1f 	.word	0x0800be1f
 800bcfc:	0800bcad 	.word	0x0800bcad
 800bd00:	0800bcad 	.word	0x0800bcad
 800bd04:	0800be5f 	.word	0x0800be5f
 800bd08:	0800bcad 	.word	0x0800bcad
 800bd0c:	0800bd61 	.word	0x0800bd61
 800bd10:	0800bcad 	.word	0x0800bcad
 800bd14:	0800bcad 	.word	0x0800bcad
 800bd18:	0800be27 	.word	0x0800be27
 800bd1c:	682b      	ldr	r3, [r5, #0]
 800bd1e:	1d1a      	adds	r2, r3, #4
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	602a      	str	r2, [r5, #0]
 800bd24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	e0a3      	b.n	800be78 <_printf_i+0x1f4>
 800bd30:	6820      	ldr	r0, [r4, #0]
 800bd32:	6829      	ldr	r1, [r5, #0]
 800bd34:	0606      	lsls	r6, r0, #24
 800bd36:	f101 0304 	add.w	r3, r1, #4
 800bd3a:	d50a      	bpl.n	800bd52 <_printf_i+0xce>
 800bd3c:	680e      	ldr	r6, [r1, #0]
 800bd3e:	602b      	str	r3, [r5, #0]
 800bd40:	2e00      	cmp	r6, #0
 800bd42:	da03      	bge.n	800bd4c <_printf_i+0xc8>
 800bd44:	232d      	movs	r3, #45	; 0x2d
 800bd46:	4276      	negs	r6, r6
 800bd48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd4c:	485e      	ldr	r0, [pc, #376]	; (800bec8 <_printf_i+0x244>)
 800bd4e:	230a      	movs	r3, #10
 800bd50:	e019      	b.n	800bd86 <_printf_i+0x102>
 800bd52:	680e      	ldr	r6, [r1, #0]
 800bd54:	602b      	str	r3, [r5, #0]
 800bd56:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bd5a:	bf18      	it	ne
 800bd5c:	b236      	sxthne	r6, r6
 800bd5e:	e7ef      	b.n	800bd40 <_printf_i+0xbc>
 800bd60:	682b      	ldr	r3, [r5, #0]
 800bd62:	6820      	ldr	r0, [r4, #0]
 800bd64:	1d19      	adds	r1, r3, #4
 800bd66:	6029      	str	r1, [r5, #0]
 800bd68:	0601      	lsls	r1, r0, #24
 800bd6a:	d501      	bpl.n	800bd70 <_printf_i+0xec>
 800bd6c:	681e      	ldr	r6, [r3, #0]
 800bd6e:	e002      	b.n	800bd76 <_printf_i+0xf2>
 800bd70:	0646      	lsls	r6, r0, #25
 800bd72:	d5fb      	bpl.n	800bd6c <_printf_i+0xe8>
 800bd74:	881e      	ldrh	r6, [r3, #0]
 800bd76:	4854      	ldr	r0, [pc, #336]	; (800bec8 <_printf_i+0x244>)
 800bd78:	2f6f      	cmp	r7, #111	; 0x6f
 800bd7a:	bf0c      	ite	eq
 800bd7c:	2308      	moveq	r3, #8
 800bd7e:	230a      	movne	r3, #10
 800bd80:	2100      	movs	r1, #0
 800bd82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bd86:	6865      	ldr	r5, [r4, #4]
 800bd88:	60a5      	str	r5, [r4, #8]
 800bd8a:	2d00      	cmp	r5, #0
 800bd8c:	bfa2      	ittt	ge
 800bd8e:	6821      	ldrge	r1, [r4, #0]
 800bd90:	f021 0104 	bicge.w	r1, r1, #4
 800bd94:	6021      	strge	r1, [r4, #0]
 800bd96:	b90e      	cbnz	r6, 800bd9c <_printf_i+0x118>
 800bd98:	2d00      	cmp	r5, #0
 800bd9a:	d04d      	beq.n	800be38 <_printf_i+0x1b4>
 800bd9c:	4615      	mov	r5, r2
 800bd9e:	fbb6 f1f3 	udiv	r1, r6, r3
 800bda2:	fb03 6711 	mls	r7, r3, r1, r6
 800bda6:	5dc7      	ldrb	r7, [r0, r7]
 800bda8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bdac:	4637      	mov	r7, r6
 800bdae:	42bb      	cmp	r3, r7
 800bdb0:	460e      	mov	r6, r1
 800bdb2:	d9f4      	bls.n	800bd9e <_printf_i+0x11a>
 800bdb4:	2b08      	cmp	r3, #8
 800bdb6:	d10b      	bne.n	800bdd0 <_printf_i+0x14c>
 800bdb8:	6823      	ldr	r3, [r4, #0]
 800bdba:	07de      	lsls	r6, r3, #31
 800bdbc:	d508      	bpl.n	800bdd0 <_printf_i+0x14c>
 800bdbe:	6923      	ldr	r3, [r4, #16]
 800bdc0:	6861      	ldr	r1, [r4, #4]
 800bdc2:	4299      	cmp	r1, r3
 800bdc4:	bfde      	ittt	le
 800bdc6:	2330      	movle	r3, #48	; 0x30
 800bdc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bdcc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800bdd0:	1b52      	subs	r2, r2, r5
 800bdd2:	6122      	str	r2, [r4, #16]
 800bdd4:	f8cd a000 	str.w	sl, [sp]
 800bdd8:	464b      	mov	r3, r9
 800bdda:	aa03      	add	r2, sp, #12
 800bddc:	4621      	mov	r1, r4
 800bdde:	4640      	mov	r0, r8
 800bde0:	f7ff fee2 	bl	800bba8 <_printf_common>
 800bde4:	3001      	adds	r0, #1
 800bde6:	d14c      	bne.n	800be82 <_printf_i+0x1fe>
 800bde8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bdec:	b004      	add	sp, #16
 800bdee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdf2:	4835      	ldr	r0, [pc, #212]	; (800bec8 <_printf_i+0x244>)
 800bdf4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bdf8:	6829      	ldr	r1, [r5, #0]
 800bdfa:	6823      	ldr	r3, [r4, #0]
 800bdfc:	f851 6b04 	ldr.w	r6, [r1], #4
 800be00:	6029      	str	r1, [r5, #0]
 800be02:	061d      	lsls	r5, r3, #24
 800be04:	d514      	bpl.n	800be30 <_printf_i+0x1ac>
 800be06:	07df      	lsls	r7, r3, #31
 800be08:	bf44      	itt	mi
 800be0a:	f043 0320 	orrmi.w	r3, r3, #32
 800be0e:	6023      	strmi	r3, [r4, #0]
 800be10:	b91e      	cbnz	r6, 800be1a <_printf_i+0x196>
 800be12:	6823      	ldr	r3, [r4, #0]
 800be14:	f023 0320 	bic.w	r3, r3, #32
 800be18:	6023      	str	r3, [r4, #0]
 800be1a:	2310      	movs	r3, #16
 800be1c:	e7b0      	b.n	800bd80 <_printf_i+0xfc>
 800be1e:	6823      	ldr	r3, [r4, #0]
 800be20:	f043 0320 	orr.w	r3, r3, #32
 800be24:	6023      	str	r3, [r4, #0]
 800be26:	2378      	movs	r3, #120	; 0x78
 800be28:	4828      	ldr	r0, [pc, #160]	; (800becc <_printf_i+0x248>)
 800be2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800be2e:	e7e3      	b.n	800bdf8 <_printf_i+0x174>
 800be30:	0659      	lsls	r1, r3, #25
 800be32:	bf48      	it	mi
 800be34:	b2b6      	uxthmi	r6, r6
 800be36:	e7e6      	b.n	800be06 <_printf_i+0x182>
 800be38:	4615      	mov	r5, r2
 800be3a:	e7bb      	b.n	800bdb4 <_printf_i+0x130>
 800be3c:	682b      	ldr	r3, [r5, #0]
 800be3e:	6826      	ldr	r6, [r4, #0]
 800be40:	6961      	ldr	r1, [r4, #20]
 800be42:	1d18      	adds	r0, r3, #4
 800be44:	6028      	str	r0, [r5, #0]
 800be46:	0635      	lsls	r5, r6, #24
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	d501      	bpl.n	800be50 <_printf_i+0x1cc>
 800be4c:	6019      	str	r1, [r3, #0]
 800be4e:	e002      	b.n	800be56 <_printf_i+0x1d2>
 800be50:	0670      	lsls	r0, r6, #25
 800be52:	d5fb      	bpl.n	800be4c <_printf_i+0x1c8>
 800be54:	8019      	strh	r1, [r3, #0]
 800be56:	2300      	movs	r3, #0
 800be58:	6123      	str	r3, [r4, #16]
 800be5a:	4615      	mov	r5, r2
 800be5c:	e7ba      	b.n	800bdd4 <_printf_i+0x150>
 800be5e:	682b      	ldr	r3, [r5, #0]
 800be60:	1d1a      	adds	r2, r3, #4
 800be62:	602a      	str	r2, [r5, #0]
 800be64:	681d      	ldr	r5, [r3, #0]
 800be66:	6862      	ldr	r2, [r4, #4]
 800be68:	2100      	movs	r1, #0
 800be6a:	4628      	mov	r0, r5
 800be6c:	f7f4 f990 	bl	8000190 <memchr>
 800be70:	b108      	cbz	r0, 800be76 <_printf_i+0x1f2>
 800be72:	1b40      	subs	r0, r0, r5
 800be74:	6060      	str	r0, [r4, #4]
 800be76:	6863      	ldr	r3, [r4, #4]
 800be78:	6123      	str	r3, [r4, #16]
 800be7a:	2300      	movs	r3, #0
 800be7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be80:	e7a8      	b.n	800bdd4 <_printf_i+0x150>
 800be82:	6923      	ldr	r3, [r4, #16]
 800be84:	462a      	mov	r2, r5
 800be86:	4649      	mov	r1, r9
 800be88:	4640      	mov	r0, r8
 800be8a:	47d0      	blx	sl
 800be8c:	3001      	adds	r0, #1
 800be8e:	d0ab      	beq.n	800bde8 <_printf_i+0x164>
 800be90:	6823      	ldr	r3, [r4, #0]
 800be92:	079b      	lsls	r3, r3, #30
 800be94:	d413      	bmi.n	800bebe <_printf_i+0x23a>
 800be96:	68e0      	ldr	r0, [r4, #12]
 800be98:	9b03      	ldr	r3, [sp, #12]
 800be9a:	4298      	cmp	r0, r3
 800be9c:	bfb8      	it	lt
 800be9e:	4618      	movlt	r0, r3
 800bea0:	e7a4      	b.n	800bdec <_printf_i+0x168>
 800bea2:	2301      	movs	r3, #1
 800bea4:	4632      	mov	r2, r6
 800bea6:	4649      	mov	r1, r9
 800bea8:	4640      	mov	r0, r8
 800beaa:	47d0      	blx	sl
 800beac:	3001      	adds	r0, #1
 800beae:	d09b      	beq.n	800bde8 <_printf_i+0x164>
 800beb0:	3501      	adds	r5, #1
 800beb2:	68e3      	ldr	r3, [r4, #12]
 800beb4:	9903      	ldr	r1, [sp, #12]
 800beb6:	1a5b      	subs	r3, r3, r1
 800beb8:	42ab      	cmp	r3, r5
 800beba:	dcf2      	bgt.n	800bea2 <_printf_i+0x21e>
 800bebc:	e7eb      	b.n	800be96 <_printf_i+0x212>
 800bebe:	2500      	movs	r5, #0
 800bec0:	f104 0619 	add.w	r6, r4, #25
 800bec4:	e7f5      	b.n	800beb2 <_printf_i+0x22e>
 800bec6:	bf00      	nop
 800bec8:	0800fa56 	.word	0x0800fa56
 800becc:	0800fa67 	.word	0x0800fa67

0800bed0 <cleanup_glue>:
 800bed0:	b538      	push	{r3, r4, r5, lr}
 800bed2:	460c      	mov	r4, r1
 800bed4:	6809      	ldr	r1, [r1, #0]
 800bed6:	4605      	mov	r5, r0
 800bed8:	b109      	cbz	r1, 800bede <cleanup_glue+0xe>
 800beda:	f7ff fff9 	bl	800bed0 <cleanup_glue>
 800bede:	4621      	mov	r1, r4
 800bee0:	4628      	mov	r0, r5
 800bee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bee6:	f001 bcb9 	b.w	800d85c <_free_r>
	...

0800beec <_reclaim_reent>:
 800beec:	4b2c      	ldr	r3, [pc, #176]	; (800bfa0 <_reclaim_reent+0xb4>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	4283      	cmp	r3, r0
 800bef2:	b570      	push	{r4, r5, r6, lr}
 800bef4:	4604      	mov	r4, r0
 800bef6:	d051      	beq.n	800bf9c <_reclaim_reent+0xb0>
 800bef8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800befa:	b143      	cbz	r3, 800bf0e <_reclaim_reent+0x22>
 800befc:	68db      	ldr	r3, [r3, #12]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d14a      	bne.n	800bf98 <_reclaim_reent+0xac>
 800bf02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf04:	6819      	ldr	r1, [r3, #0]
 800bf06:	b111      	cbz	r1, 800bf0e <_reclaim_reent+0x22>
 800bf08:	4620      	mov	r0, r4
 800bf0a:	f001 fca7 	bl	800d85c <_free_r>
 800bf0e:	6961      	ldr	r1, [r4, #20]
 800bf10:	b111      	cbz	r1, 800bf18 <_reclaim_reent+0x2c>
 800bf12:	4620      	mov	r0, r4
 800bf14:	f001 fca2 	bl	800d85c <_free_r>
 800bf18:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bf1a:	b111      	cbz	r1, 800bf22 <_reclaim_reent+0x36>
 800bf1c:	4620      	mov	r0, r4
 800bf1e:	f001 fc9d 	bl	800d85c <_free_r>
 800bf22:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bf24:	b111      	cbz	r1, 800bf2c <_reclaim_reent+0x40>
 800bf26:	4620      	mov	r0, r4
 800bf28:	f001 fc98 	bl	800d85c <_free_r>
 800bf2c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bf2e:	b111      	cbz	r1, 800bf36 <_reclaim_reent+0x4a>
 800bf30:	4620      	mov	r0, r4
 800bf32:	f001 fc93 	bl	800d85c <_free_r>
 800bf36:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bf38:	b111      	cbz	r1, 800bf40 <_reclaim_reent+0x54>
 800bf3a:	4620      	mov	r0, r4
 800bf3c:	f001 fc8e 	bl	800d85c <_free_r>
 800bf40:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bf42:	b111      	cbz	r1, 800bf4a <_reclaim_reent+0x5e>
 800bf44:	4620      	mov	r0, r4
 800bf46:	f001 fc89 	bl	800d85c <_free_r>
 800bf4a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bf4c:	b111      	cbz	r1, 800bf54 <_reclaim_reent+0x68>
 800bf4e:	4620      	mov	r0, r4
 800bf50:	f001 fc84 	bl	800d85c <_free_r>
 800bf54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf56:	b111      	cbz	r1, 800bf5e <_reclaim_reent+0x72>
 800bf58:	4620      	mov	r0, r4
 800bf5a:	f001 fc7f 	bl	800d85c <_free_r>
 800bf5e:	69a3      	ldr	r3, [r4, #24]
 800bf60:	b1e3      	cbz	r3, 800bf9c <_reclaim_reent+0xb0>
 800bf62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bf64:	4620      	mov	r0, r4
 800bf66:	4798      	blx	r3
 800bf68:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bf6a:	b1b9      	cbz	r1, 800bf9c <_reclaim_reent+0xb0>
 800bf6c:	4620      	mov	r0, r4
 800bf6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bf72:	f7ff bfad 	b.w	800bed0 <cleanup_glue>
 800bf76:	5949      	ldr	r1, [r1, r5]
 800bf78:	b941      	cbnz	r1, 800bf8c <_reclaim_reent+0xa0>
 800bf7a:	3504      	adds	r5, #4
 800bf7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf7e:	2d80      	cmp	r5, #128	; 0x80
 800bf80:	68d9      	ldr	r1, [r3, #12]
 800bf82:	d1f8      	bne.n	800bf76 <_reclaim_reent+0x8a>
 800bf84:	4620      	mov	r0, r4
 800bf86:	f001 fc69 	bl	800d85c <_free_r>
 800bf8a:	e7ba      	b.n	800bf02 <_reclaim_reent+0x16>
 800bf8c:	680e      	ldr	r6, [r1, #0]
 800bf8e:	4620      	mov	r0, r4
 800bf90:	f001 fc64 	bl	800d85c <_free_r>
 800bf94:	4631      	mov	r1, r6
 800bf96:	e7ef      	b.n	800bf78 <_reclaim_reent+0x8c>
 800bf98:	2500      	movs	r5, #0
 800bf9a:	e7ef      	b.n	800bf7c <_reclaim_reent+0x90>
 800bf9c:	bd70      	pop	{r4, r5, r6, pc}
 800bf9e:	bf00      	nop
 800bfa0:	20000010 	.word	0x20000010

0800bfa4 <_sbrk_r>:
 800bfa4:	b538      	push	{r3, r4, r5, lr}
 800bfa6:	4d06      	ldr	r5, [pc, #24]	; (800bfc0 <_sbrk_r+0x1c>)
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	4604      	mov	r4, r0
 800bfac:	4608      	mov	r0, r1
 800bfae:	602b      	str	r3, [r5, #0]
 800bfb0:	f7f5 ffbc 	bl	8001f2c <_sbrk>
 800bfb4:	1c43      	adds	r3, r0, #1
 800bfb6:	d102      	bne.n	800bfbe <_sbrk_r+0x1a>
 800bfb8:	682b      	ldr	r3, [r5, #0]
 800bfba:	b103      	cbz	r3, 800bfbe <_sbrk_r+0x1a>
 800bfbc:	6023      	str	r3, [r4, #0]
 800bfbe:	bd38      	pop	{r3, r4, r5, pc}
 800bfc0:	20001d68 	.word	0x20001d68

0800bfc4 <sniprintf>:
 800bfc4:	b40c      	push	{r2, r3}
 800bfc6:	b530      	push	{r4, r5, lr}
 800bfc8:	4b17      	ldr	r3, [pc, #92]	; (800c028 <sniprintf+0x64>)
 800bfca:	1e0c      	subs	r4, r1, #0
 800bfcc:	681d      	ldr	r5, [r3, #0]
 800bfce:	b09d      	sub	sp, #116	; 0x74
 800bfd0:	da08      	bge.n	800bfe4 <sniprintf+0x20>
 800bfd2:	238b      	movs	r3, #139	; 0x8b
 800bfd4:	602b      	str	r3, [r5, #0]
 800bfd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bfda:	b01d      	add	sp, #116	; 0x74
 800bfdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bfe0:	b002      	add	sp, #8
 800bfe2:	4770      	bx	lr
 800bfe4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bfe8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bfec:	bf14      	ite	ne
 800bfee:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800bff2:	4623      	moveq	r3, r4
 800bff4:	9304      	str	r3, [sp, #16]
 800bff6:	9307      	str	r3, [sp, #28]
 800bff8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bffc:	9002      	str	r0, [sp, #8]
 800bffe:	9006      	str	r0, [sp, #24]
 800c000:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c004:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c006:	ab21      	add	r3, sp, #132	; 0x84
 800c008:	a902      	add	r1, sp, #8
 800c00a:	4628      	mov	r0, r5
 800c00c:	9301      	str	r3, [sp, #4]
 800c00e:	f001 fccb 	bl	800d9a8 <_svfiprintf_r>
 800c012:	1c43      	adds	r3, r0, #1
 800c014:	bfbc      	itt	lt
 800c016:	238b      	movlt	r3, #139	; 0x8b
 800c018:	602b      	strlt	r3, [r5, #0]
 800c01a:	2c00      	cmp	r4, #0
 800c01c:	d0dd      	beq.n	800bfda <sniprintf+0x16>
 800c01e:	9b02      	ldr	r3, [sp, #8]
 800c020:	2200      	movs	r2, #0
 800c022:	701a      	strb	r2, [r3, #0]
 800c024:	e7d9      	b.n	800bfda <sniprintf+0x16>
 800c026:	bf00      	nop
 800c028:	20000010 	.word	0x20000010

0800c02c <siprintf>:
 800c02c:	b40e      	push	{r1, r2, r3}
 800c02e:	b500      	push	{lr}
 800c030:	b09c      	sub	sp, #112	; 0x70
 800c032:	ab1d      	add	r3, sp, #116	; 0x74
 800c034:	9002      	str	r0, [sp, #8]
 800c036:	9006      	str	r0, [sp, #24]
 800c038:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c03c:	4809      	ldr	r0, [pc, #36]	; (800c064 <siprintf+0x38>)
 800c03e:	9107      	str	r1, [sp, #28]
 800c040:	9104      	str	r1, [sp, #16]
 800c042:	4909      	ldr	r1, [pc, #36]	; (800c068 <siprintf+0x3c>)
 800c044:	f853 2b04 	ldr.w	r2, [r3], #4
 800c048:	9105      	str	r1, [sp, #20]
 800c04a:	6800      	ldr	r0, [r0, #0]
 800c04c:	9301      	str	r3, [sp, #4]
 800c04e:	a902      	add	r1, sp, #8
 800c050:	f001 fcaa 	bl	800d9a8 <_svfiprintf_r>
 800c054:	9b02      	ldr	r3, [sp, #8]
 800c056:	2200      	movs	r2, #0
 800c058:	701a      	strb	r2, [r3, #0]
 800c05a:	b01c      	add	sp, #112	; 0x70
 800c05c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c060:	b003      	add	sp, #12
 800c062:	4770      	bx	lr
 800c064:	20000010 	.word	0x20000010
 800c068:	ffff0208 	.word	0xffff0208

0800c06c <__sread>:
 800c06c:	b510      	push	{r4, lr}
 800c06e:	460c      	mov	r4, r1
 800c070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c074:	f001 fef0 	bl	800de58 <_read_r>
 800c078:	2800      	cmp	r0, #0
 800c07a:	bfab      	itete	ge
 800c07c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c07e:	89a3      	ldrhlt	r3, [r4, #12]
 800c080:	181b      	addge	r3, r3, r0
 800c082:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c086:	bfac      	ite	ge
 800c088:	6563      	strge	r3, [r4, #84]	; 0x54
 800c08a:	81a3      	strhlt	r3, [r4, #12]
 800c08c:	bd10      	pop	{r4, pc}

0800c08e <__swrite>:
 800c08e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c092:	461f      	mov	r7, r3
 800c094:	898b      	ldrh	r3, [r1, #12]
 800c096:	05db      	lsls	r3, r3, #23
 800c098:	4605      	mov	r5, r0
 800c09a:	460c      	mov	r4, r1
 800c09c:	4616      	mov	r6, r2
 800c09e:	d505      	bpl.n	800c0ac <__swrite+0x1e>
 800c0a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0a4:	2302      	movs	r3, #2
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	f001 f820 	bl	800d0ec <_lseek_r>
 800c0ac:	89a3      	ldrh	r3, [r4, #12]
 800c0ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c0b6:	81a3      	strh	r3, [r4, #12]
 800c0b8:	4632      	mov	r2, r6
 800c0ba:	463b      	mov	r3, r7
 800c0bc:	4628      	mov	r0, r5
 800c0be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0c2:	f000 b887 	b.w	800c1d4 <_write_r>

0800c0c6 <__sseek>:
 800c0c6:	b510      	push	{r4, lr}
 800c0c8:	460c      	mov	r4, r1
 800c0ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0ce:	f001 f80d 	bl	800d0ec <_lseek_r>
 800c0d2:	1c43      	adds	r3, r0, #1
 800c0d4:	89a3      	ldrh	r3, [r4, #12]
 800c0d6:	bf15      	itete	ne
 800c0d8:	6560      	strne	r0, [r4, #84]	; 0x54
 800c0da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c0de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c0e2:	81a3      	strheq	r3, [r4, #12]
 800c0e4:	bf18      	it	ne
 800c0e6:	81a3      	strhne	r3, [r4, #12]
 800c0e8:	bd10      	pop	{r4, pc}

0800c0ea <__sclose>:
 800c0ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0ee:	f000 b8a1 	b.w	800c234 <_close_r>

0800c0f2 <strncmp>:
 800c0f2:	b510      	push	{r4, lr}
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	b172      	cbz	r2, 800c116 <strncmp+0x24>
 800c0f8:	3901      	subs	r1, #1
 800c0fa:	1884      	adds	r4, r0, r2
 800c0fc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c100:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c104:	4290      	cmp	r0, r2
 800c106:	d101      	bne.n	800c10c <strncmp+0x1a>
 800c108:	42a3      	cmp	r3, r4
 800c10a:	d101      	bne.n	800c110 <strncmp+0x1e>
 800c10c:	1a80      	subs	r0, r0, r2
 800c10e:	bd10      	pop	{r4, pc}
 800c110:	2800      	cmp	r0, #0
 800c112:	d1f3      	bne.n	800c0fc <strncmp+0xa>
 800c114:	e7fa      	b.n	800c10c <strncmp+0x1a>
 800c116:	4610      	mov	r0, r2
 800c118:	e7f9      	b.n	800c10e <strncmp+0x1c>
	...

0800c11c <strtok>:
 800c11c:	4b16      	ldr	r3, [pc, #88]	; (800c178 <strtok+0x5c>)
 800c11e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c122:	681f      	ldr	r7, [r3, #0]
 800c124:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800c126:	4605      	mov	r5, r0
 800c128:	460e      	mov	r6, r1
 800c12a:	b9ec      	cbnz	r4, 800c168 <strtok+0x4c>
 800c12c:	2050      	movs	r0, #80	; 0x50
 800c12e:	f000 ffef 	bl	800d110 <malloc>
 800c132:	4602      	mov	r2, r0
 800c134:	65b8      	str	r0, [r7, #88]	; 0x58
 800c136:	b920      	cbnz	r0, 800c142 <strtok+0x26>
 800c138:	4b10      	ldr	r3, [pc, #64]	; (800c17c <strtok+0x60>)
 800c13a:	4811      	ldr	r0, [pc, #68]	; (800c180 <strtok+0x64>)
 800c13c:	2157      	movs	r1, #87	; 0x57
 800c13e:	f000 f85b 	bl	800c1f8 <__assert_func>
 800c142:	e9c0 4400 	strd	r4, r4, [r0]
 800c146:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c14a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c14e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800c152:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800c156:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800c15a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800c15e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800c162:	6184      	str	r4, [r0, #24]
 800c164:	7704      	strb	r4, [r0, #28]
 800c166:	6244      	str	r4, [r0, #36]	; 0x24
 800c168:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c16a:	4631      	mov	r1, r6
 800c16c:	4628      	mov	r0, r5
 800c16e:	2301      	movs	r3, #1
 800c170:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c174:	f000 b806 	b.w	800c184 <__strtok_r>
 800c178:	20000010 	.word	0x20000010
 800c17c:	0800fa78 	.word	0x0800fa78
 800c180:	0800fa8f 	.word	0x0800fa8f

0800c184 <__strtok_r>:
 800c184:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c186:	b908      	cbnz	r0, 800c18c <__strtok_r+0x8>
 800c188:	6810      	ldr	r0, [r2, #0]
 800c18a:	b188      	cbz	r0, 800c1b0 <__strtok_r+0x2c>
 800c18c:	4604      	mov	r4, r0
 800c18e:	4620      	mov	r0, r4
 800c190:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c194:	460f      	mov	r7, r1
 800c196:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c19a:	b91e      	cbnz	r6, 800c1a4 <__strtok_r+0x20>
 800c19c:	b965      	cbnz	r5, 800c1b8 <__strtok_r+0x34>
 800c19e:	6015      	str	r5, [r2, #0]
 800c1a0:	4628      	mov	r0, r5
 800c1a2:	e005      	b.n	800c1b0 <__strtok_r+0x2c>
 800c1a4:	42b5      	cmp	r5, r6
 800c1a6:	d1f6      	bne.n	800c196 <__strtok_r+0x12>
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d1f0      	bne.n	800c18e <__strtok_r+0xa>
 800c1ac:	6014      	str	r4, [r2, #0]
 800c1ae:	7003      	strb	r3, [r0, #0]
 800c1b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1b2:	461c      	mov	r4, r3
 800c1b4:	e00c      	b.n	800c1d0 <__strtok_r+0x4c>
 800c1b6:	b915      	cbnz	r5, 800c1be <__strtok_r+0x3a>
 800c1b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c1bc:	460e      	mov	r6, r1
 800c1be:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c1c2:	42ab      	cmp	r3, r5
 800c1c4:	d1f7      	bne.n	800c1b6 <__strtok_r+0x32>
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d0f3      	beq.n	800c1b2 <__strtok_r+0x2e>
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c1d0:	6014      	str	r4, [r2, #0]
 800c1d2:	e7ed      	b.n	800c1b0 <__strtok_r+0x2c>

0800c1d4 <_write_r>:
 800c1d4:	b538      	push	{r3, r4, r5, lr}
 800c1d6:	4d07      	ldr	r5, [pc, #28]	; (800c1f4 <_write_r+0x20>)
 800c1d8:	4604      	mov	r4, r0
 800c1da:	4608      	mov	r0, r1
 800c1dc:	4611      	mov	r1, r2
 800c1de:	2200      	movs	r2, #0
 800c1e0:	602a      	str	r2, [r5, #0]
 800c1e2:	461a      	mov	r2, r3
 800c1e4:	f7f5 fe56 	bl	8001e94 <_write>
 800c1e8:	1c43      	adds	r3, r0, #1
 800c1ea:	d102      	bne.n	800c1f2 <_write_r+0x1e>
 800c1ec:	682b      	ldr	r3, [r5, #0]
 800c1ee:	b103      	cbz	r3, 800c1f2 <_write_r+0x1e>
 800c1f0:	6023      	str	r3, [r4, #0]
 800c1f2:	bd38      	pop	{r3, r4, r5, pc}
 800c1f4:	20001d68 	.word	0x20001d68

0800c1f8 <__assert_func>:
 800c1f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c1fa:	4614      	mov	r4, r2
 800c1fc:	461a      	mov	r2, r3
 800c1fe:	4b09      	ldr	r3, [pc, #36]	; (800c224 <__assert_func+0x2c>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	4605      	mov	r5, r0
 800c204:	68d8      	ldr	r0, [r3, #12]
 800c206:	b14c      	cbz	r4, 800c21c <__assert_func+0x24>
 800c208:	4b07      	ldr	r3, [pc, #28]	; (800c228 <__assert_func+0x30>)
 800c20a:	9100      	str	r1, [sp, #0]
 800c20c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c210:	4906      	ldr	r1, [pc, #24]	; (800c22c <__assert_func+0x34>)
 800c212:	462b      	mov	r3, r5
 800c214:	f000 ff54 	bl	800d0c0 <fiprintf>
 800c218:	f001 fef0 	bl	800dffc <abort>
 800c21c:	4b04      	ldr	r3, [pc, #16]	; (800c230 <__assert_func+0x38>)
 800c21e:	461c      	mov	r4, r3
 800c220:	e7f3      	b.n	800c20a <__assert_func+0x12>
 800c222:	bf00      	nop
 800c224:	20000010 	.word	0x20000010
 800c228:	0800faec 	.word	0x0800faec
 800c22c:	0800faf9 	.word	0x0800faf9
 800c230:	0800fb27 	.word	0x0800fb27

0800c234 <_close_r>:
 800c234:	b538      	push	{r3, r4, r5, lr}
 800c236:	4d06      	ldr	r5, [pc, #24]	; (800c250 <_close_r+0x1c>)
 800c238:	2300      	movs	r3, #0
 800c23a:	4604      	mov	r4, r0
 800c23c:	4608      	mov	r0, r1
 800c23e:	602b      	str	r3, [r5, #0]
 800c240:	f7f5 fe44 	bl	8001ecc <_close>
 800c244:	1c43      	adds	r3, r0, #1
 800c246:	d102      	bne.n	800c24e <_close_r+0x1a>
 800c248:	682b      	ldr	r3, [r5, #0]
 800c24a:	b103      	cbz	r3, 800c24e <_close_r+0x1a>
 800c24c:	6023      	str	r3, [r4, #0]
 800c24e:	bd38      	pop	{r3, r4, r5, pc}
 800c250:	20001d68 	.word	0x20001d68

0800c254 <quorem>:
 800c254:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c258:	6903      	ldr	r3, [r0, #16]
 800c25a:	690c      	ldr	r4, [r1, #16]
 800c25c:	42a3      	cmp	r3, r4
 800c25e:	4607      	mov	r7, r0
 800c260:	db7d      	blt.n	800c35e <quorem+0x10a>
 800c262:	3c01      	subs	r4, #1
 800c264:	f101 0814 	add.w	r8, r1, #20
 800c268:	f100 0514 	add.w	r5, r0, #20
 800c26c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c270:	9301      	str	r3, [sp, #4]
 800c272:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c276:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c27a:	3301      	adds	r3, #1
 800c27c:	429a      	cmp	r2, r3
 800c27e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c282:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c286:	fbb2 f6f3 	udiv	r6, r2, r3
 800c28a:	d32e      	bcc.n	800c2ea <quorem+0x96>
 800c28c:	f04f 0e00 	mov.w	lr, #0
 800c290:	4640      	mov	r0, r8
 800c292:	46ac      	mov	ip, r5
 800c294:	46f2      	mov	sl, lr
 800c296:	f850 2b04 	ldr.w	r2, [r0], #4
 800c29a:	b293      	uxth	r3, r2
 800c29c:	fb06 e303 	mla	r3, r6, r3, lr
 800c2a0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c2a4:	0c12      	lsrs	r2, r2, #16
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	fb06 e202 	mla	r2, r6, r2, lr
 800c2ac:	ebaa 0303 	sub.w	r3, sl, r3
 800c2b0:	f8dc a000 	ldr.w	sl, [ip]
 800c2b4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c2b8:	b292      	uxth	r2, r2
 800c2ba:	fa13 f38a 	uxtah	r3, r3, sl
 800c2be:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c2c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c2c6:	b29b      	uxth	r3, r3
 800c2c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c2cc:	4581      	cmp	r9, r0
 800c2ce:	f84c 3b04 	str.w	r3, [ip], #4
 800c2d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c2d6:	d2de      	bcs.n	800c296 <quorem+0x42>
 800c2d8:	f855 300b 	ldr.w	r3, [r5, fp]
 800c2dc:	b92b      	cbnz	r3, 800c2ea <quorem+0x96>
 800c2de:	9b01      	ldr	r3, [sp, #4]
 800c2e0:	3b04      	subs	r3, #4
 800c2e2:	429d      	cmp	r5, r3
 800c2e4:	461a      	mov	r2, r3
 800c2e6:	d32e      	bcc.n	800c346 <quorem+0xf2>
 800c2e8:	613c      	str	r4, [r7, #16]
 800c2ea:	4638      	mov	r0, r7
 800c2ec:	f001 f9a2 	bl	800d634 <__mcmp>
 800c2f0:	2800      	cmp	r0, #0
 800c2f2:	db24      	blt.n	800c33e <quorem+0xea>
 800c2f4:	3601      	adds	r6, #1
 800c2f6:	4628      	mov	r0, r5
 800c2f8:	f04f 0c00 	mov.w	ip, #0
 800c2fc:	f858 2b04 	ldr.w	r2, [r8], #4
 800c300:	f8d0 e000 	ldr.w	lr, [r0]
 800c304:	b293      	uxth	r3, r2
 800c306:	ebac 0303 	sub.w	r3, ip, r3
 800c30a:	0c12      	lsrs	r2, r2, #16
 800c30c:	fa13 f38e 	uxtah	r3, r3, lr
 800c310:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c314:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c318:	b29b      	uxth	r3, r3
 800c31a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c31e:	45c1      	cmp	r9, r8
 800c320:	f840 3b04 	str.w	r3, [r0], #4
 800c324:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c328:	d2e8      	bcs.n	800c2fc <quorem+0xa8>
 800c32a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c32e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c332:	b922      	cbnz	r2, 800c33e <quorem+0xea>
 800c334:	3b04      	subs	r3, #4
 800c336:	429d      	cmp	r5, r3
 800c338:	461a      	mov	r2, r3
 800c33a:	d30a      	bcc.n	800c352 <quorem+0xfe>
 800c33c:	613c      	str	r4, [r7, #16]
 800c33e:	4630      	mov	r0, r6
 800c340:	b003      	add	sp, #12
 800c342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c346:	6812      	ldr	r2, [r2, #0]
 800c348:	3b04      	subs	r3, #4
 800c34a:	2a00      	cmp	r2, #0
 800c34c:	d1cc      	bne.n	800c2e8 <quorem+0x94>
 800c34e:	3c01      	subs	r4, #1
 800c350:	e7c7      	b.n	800c2e2 <quorem+0x8e>
 800c352:	6812      	ldr	r2, [r2, #0]
 800c354:	3b04      	subs	r3, #4
 800c356:	2a00      	cmp	r2, #0
 800c358:	d1f0      	bne.n	800c33c <quorem+0xe8>
 800c35a:	3c01      	subs	r4, #1
 800c35c:	e7eb      	b.n	800c336 <quorem+0xe2>
 800c35e:	2000      	movs	r0, #0
 800c360:	e7ee      	b.n	800c340 <quorem+0xec>
 800c362:	0000      	movs	r0, r0
 800c364:	0000      	movs	r0, r0
	...

0800c368 <_dtoa_r>:
 800c368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c36c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c36e:	b099      	sub	sp, #100	; 0x64
 800c370:	4616      	mov	r6, r2
 800c372:	461f      	mov	r7, r3
 800c374:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c378:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800c37c:	4605      	mov	r5, r0
 800c37e:	b974      	cbnz	r4, 800c39e <_dtoa_r+0x36>
 800c380:	2010      	movs	r0, #16
 800c382:	f000 fec5 	bl	800d110 <malloc>
 800c386:	4602      	mov	r2, r0
 800c388:	6268      	str	r0, [r5, #36]	; 0x24
 800c38a:	b920      	cbnz	r0, 800c396 <_dtoa_r+0x2e>
 800c38c:	4ba8      	ldr	r3, [pc, #672]	; (800c630 <_dtoa_r+0x2c8>)
 800c38e:	21ea      	movs	r1, #234	; 0xea
 800c390:	48a8      	ldr	r0, [pc, #672]	; (800c634 <_dtoa_r+0x2cc>)
 800c392:	f7ff ff31 	bl	800c1f8 <__assert_func>
 800c396:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c39a:	6004      	str	r4, [r0, #0]
 800c39c:	60c4      	str	r4, [r0, #12]
 800c39e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c3a0:	6819      	ldr	r1, [r3, #0]
 800c3a2:	b151      	cbz	r1, 800c3ba <_dtoa_r+0x52>
 800c3a4:	685a      	ldr	r2, [r3, #4]
 800c3a6:	604a      	str	r2, [r1, #4]
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	4093      	lsls	r3, r2
 800c3ac:	608b      	str	r3, [r1, #8]
 800c3ae:	4628      	mov	r0, r5
 800c3b0:	f000 ff02 	bl	800d1b8 <_Bfree>
 800c3b4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	601a      	str	r2, [r3, #0]
 800c3ba:	1e3b      	subs	r3, r7, #0
 800c3bc:	bfb9      	ittee	lt
 800c3be:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c3c2:	9305      	strlt	r3, [sp, #20]
 800c3c4:	2300      	movge	r3, #0
 800c3c6:	f8c8 3000 	strge.w	r3, [r8]
 800c3ca:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800c3ce:	4b9a      	ldr	r3, [pc, #616]	; (800c638 <_dtoa_r+0x2d0>)
 800c3d0:	bfbc      	itt	lt
 800c3d2:	2201      	movlt	r2, #1
 800c3d4:	f8c8 2000 	strlt.w	r2, [r8]
 800c3d8:	ea33 0309 	bics.w	r3, r3, r9
 800c3dc:	d119      	bne.n	800c412 <_dtoa_r+0xaa>
 800c3de:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c3e0:	f242 730f 	movw	r3, #9999	; 0x270f
 800c3e4:	6013      	str	r3, [r2, #0]
 800c3e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c3ea:	4333      	orrs	r3, r6
 800c3ec:	f000 8580 	beq.w	800cef0 <_dtoa_r+0xb88>
 800c3f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c3f2:	b953      	cbnz	r3, 800c40a <_dtoa_r+0xa2>
 800c3f4:	4b91      	ldr	r3, [pc, #580]	; (800c63c <_dtoa_r+0x2d4>)
 800c3f6:	e022      	b.n	800c43e <_dtoa_r+0xd6>
 800c3f8:	4b91      	ldr	r3, [pc, #580]	; (800c640 <_dtoa_r+0x2d8>)
 800c3fa:	9303      	str	r3, [sp, #12]
 800c3fc:	3308      	adds	r3, #8
 800c3fe:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c400:	6013      	str	r3, [r2, #0]
 800c402:	9803      	ldr	r0, [sp, #12]
 800c404:	b019      	add	sp, #100	; 0x64
 800c406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c40a:	4b8c      	ldr	r3, [pc, #560]	; (800c63c <_dtoa_r+0x2d4>)
 800c40c:	9303      	str	r3, [sp, #12]
 800c40e:	3303      	adds	r3, #3
 800c410:	e7f5      	b.n	800c3fe <_dtoa_r+0x96>
 800c412:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800c416:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800c41a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c41e:	2200      	movs	r2, #0
 800c420:	2300      	movs	r3, #0
 800c422:	f7f4 fb29 	bl	8000a78 <__aeabi_dcmpeq>
 800c426:	4680      	mov	r8, r0
 800c428:	b158      	cbz	r0, 800c442 <_dtoa_r+0xda>
 800c42a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c42c:	2301      	movs	r3, #1
 800c42e:	6013      	str	r3, [r2, #0]
 800c430:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c432:	2b00      	cmp	r3, #0
 800c434:	f000 8559 	beq.w	800ceea <_dtoa_r+0xb82>
 800c438:	4882      	ldr	r0, [pc, #520]	; (800c644 <_dtoa_r+0x2dc>)
 800c43a:	6018      	str	r0, [r3, #0]
 800c43c:	1e43      	subs	r3, r0, #1
 800c43e:	9303      	str	r3, [sp, #12]
 800c440:	e7df      	b.n	800c402 <_dtoa_r+0x9a>
 800c442:	ab16      	add	r3, sp, #88	; 0x58
 800c444:	9301      	str	r3, [sp, #4]
 800c446:	ab17      	add	r3, sp, #92	; 0x5c
 800c448:	9300      	str	r3, [sp, #0]
 800c44a:	4628      	mov	r0, r5
 800c44c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c450:	f001 f994 	bl	800d77c <__d2b>
 800c454:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c458:	4683      	mov	fp, r0
 800c45a:	2c00      	cmp	r4, #0
 800c45c:	d07e      	beq.n	800c55c <_dtoa_r+0x1f4>
 800c45e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c460:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800c464:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c468:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c46c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800c470:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800c474:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800c478:	4b73      	ldr	r3, [pc, #460]	; (800c648 <_dtoa_r+0x2e0>)
 800c47a:	2200      	movs	r2, #0
 800c47c:	f7f3 fedc 	bl	8000238 <__aeabi_dsub>
 800c480:	a365      	add	r3, pc, #404	; (adr r3, 800c618 <_dtoa_r+0x2b0>)
 800c482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c486:	f7f4 f88f 	bl	80005a8 <__aeabi_dmul>
 800c48a:	a365      	add	r3, pc, #404	; (adr r3, 800c620 <_dtoa_r+0x2b8>)
 800c48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c490:	f7f3 fed4 	bl	800023c <__adddf3>
 800c494:	4606      	mov	r6, r0
 800c496:	4620      	mov	r0, r4
 800c498:	460f      	mov	r7, r1
 800c49a:	f7f4 f81b 	bl	80004d4 <__aeabi_i2d>
 800c49e:	a362      	add	r3, pc, #392	; (adr r3, 800c628 <_dtoa_r+0x2c0>)
 800c4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a4:	f7f4 f880 	bl	80005a8 <__aeabi_dmul>
 800c4a8:	4602      	mov	r2, r0
 800c4aa:	460b      	mov	r3, r1
 800c4ac:	4630      	mov	r0, r6
 800c4ae:	4639      	mov	r1, r7
 800c4b0:	f7f3 fec4 	bl	800023c <__adddf3>
 800c4b4:	4606      	mov	r6, r0
 800c4b6:	460f      	mov	r7, r1
 800c4b8:	f7f4 fb26 	bl	8000b08 <__aeabi_d2iz>
 800c4bc:	2200      	movs	r2, #0
 800c4be:	4682      	mov	sl, r0
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	4630      	mov	r0, r6
 800c4c4:	4639      	mov	r1, r7
 800c4c6:	f7f4 fae1 	bl	8000a8c <__aeabi_dcmplt>
 800c4ca:	b148      	cbz	r0, 800c4e0 <_dtoa_r+0x178>
 800c4cc:	4650      	mov	r0, sl
 800c4ce:	f7f4 f801 	bl	80004d4 <__aeabi_i2d>
 800c4d2:	4632      	mov	r2, r6
 800c4d4:	463b      	mov	r3, r7
 800c4d6:	f7f4 facf 	bl	8000a78 <__aeabi_dcmpeq>
 800c4da:	b908      	cbnz	r0, 800c4e0 <_dtoa_r+0x178>
 800c4dc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c4e0:	f1ba 0f16 	cmp.w	sl, #22
 800c4e4:	d857      	bhi.n	800c596 <_dtoa_r+0x22e>
 800c4e6:	4b59      	ldr	r3, [pc, #356]	; (800c64c <_dtoa_r+0x2e4>)
 800c4e8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c4f4:	f7f4 faca 	bl	8000a8c <__aeabi_dcmplt>
 800c4f8:	2800      	cmp	r0, #0
 800c4fa:	d04e      	beq.n	800c59a <_dtoa_r+0x232>
 800c4fc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c500:	2300      	movs	r3, #0
 800c502:	930f      	str	r3, [sp, #60]	; 0x3c
 800c504:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c506:	1b1c      	subs	r4, r3, r4
 800c508:	1e63      	subs	r3, r4, #1
 800c50a:	9309      	str	r3, [sp, #36]	; 0x24
 800c50c:	bf45      	ittet	mi
 800c50e:	f1c4 0301 	rsbmi	r3, r4, #1
 800c512:	9306      	strmi	r3, [sp, #24]
 800c514:	2300      	movpl	r3, #0
 800c516:	2300      	movmi	r3, #0
 800c518:	bf4c      	ite	mi
 800c51a:	9309      	strmi	r3, [sp, #36]	; 0x24
 800c51c:	9306      	strpl	r3, [sp, #24]
 800c51e:	f1ba 0f00 	cmp.w	sl, #0
 800c522:	db3c      	blt.n	800c59e <_dtoa_r+0x236>
 800c524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c526:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800c52a:	4453      	add	r3, sl
 800c52c:	9309      	str	r3, [sp, #36]	; 0x24
 800c52e:	2300      	movs	r3, #0
 800c530:	930a      	str	r3, [sp, #40]	; 0x28
 800c532:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c534:	2b09      	cmp	r3, #9
 800c536:	f200 808d 	bhi.w	800c654 <_dtoa_r+0x2ec>
 800c53a:	2b05      	cmp	r3, #5
 800c53c:	bfc4      	itt	gt
 800c53e:	3b04      	subgt	r3, #4
 800c540:	9322      	strgt	r3, [sp, #136]	; 0x88
 800c542:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c544:	f1a3 0302 	sub.w	r3, r3, #2
 800c548:	bfcc      	ite	gt
 800c54a:	2400      	movgt	r4, #0
 800c54c:	2401      	movle	r4, #1
 800c54e:	2b03      	cmp	r3, #3
 800c550:	f200 808c 	bhi.w	800c66c <_dtoa_r+0x304>
 800c554:	e8df f003 	tbb	[pc, r3]
 800c558:	5b4d4f2d 	.word	0x5b4d4f2d
 800c55c:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800c560:	441c      	add	r4, r3
 800c562:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800c566:	2b20      	cmp	r3, #32
 800c568:	bfc3      	ittte	gt
 800c56a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c56e:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800c572:	fa09 f303 	lslgt.w	r3, r9, r3
 800c576:	f1c3 0320 	rsble	r3, r3, #32
 800c57a:	bfc6      	itte	gt
 800c57c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c580:	4318      	orrgt	r0, r3
 800c582:	fa06 f003 	lslle.w	r0, r6, r3
 800c586:	f7f3 ff95 	bl	80004b4 <__aeabi_ui2d>
 800c58a:	2301      	movs	r3, #1
 800c58c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800c590:	3c01      	subs	r4, #1
 800c592:	9313      	str	r3, [sp, #76]	; 0x4c
 800c594:	e770      	b.n	800c478 <_dtoa_r+0x110>
 800c596:	2301      	movs	r3, #1
 800c598:	e7b3      	b.n	800c502 <_dtoa_r+0x19a>
 800c59a:	900f      	str	r0, [sp, #60]	; 0x3c
 800c59c:	e7b2      	b.n	800c504 <_dtoa_r+0x19c>
 800c59e:	9b06      	ldr	r3, [sp, #24]
 800c5a0:	eba3 030a 	sub.w	r3, r3, sl
 800c5a4:	9306      	str	r3, [sp, #24]
 800c5a6:	f1ca 0300 	rsb	r3, sl, #0
 800c5aa:	930a      	str	r3, [sp, #40]	; 0x28
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	930e      	str	r3, [sp, #56]	; 0x38
 800c5b0:	e7bf      	b.n	800c532 <_dtoa_r+0x1ca>
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	930b      	str	r3, [sp, #44]	; 0x2c
 800c5b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	dc5a      	bgt.n	800c672 <_dtoa_r+0x30a>
 800c5bc:	f04f 0901 	mov.w	r9, #1
 800c5c0:	f8cd 9020 	str.w	r9, [sp, #32]
 800c5c4:	464b      	mov	r3, r9
 800c5c6:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800c5ca:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	6042      	str	r2, [r0, #4]
 800c5d0:	2204      	movs	r2, #4
 800c5d2:	f102 0614 	add.w	r6, r2, #20
 800c5d6:	429e      	cmp	r6, r3
 800c5d8:	6841      	ldr	r1, [r0, #4]
 800c5da:	d950      	bls.n	800c67e <_dtoa_r+0x316>
 800c5dc:	4628      	mov	r0, r5
 800c5de:	f000 fdab 	bl	800d138 <_Balloc>
 800c5e2:	9003      	str	r0, [sp, #12]
 800c5e4:	2800      	cmp	r0, #0
 800c5e6:	d14e      	bne.n	800c686 <_dtoa_r+0x31e>
 800c5e8:	4b19      	ldr	r3, [pc, #100]	; (800c650 <_dtoa_r+0x2e8>)
 800c5ea:	4602      	mov	r2, r0
 800c5ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c5f0:	e6ce      	b.n	800c390 <_dtoa_r+0x28>
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	e7de      	b.n	800c5b4 <_dtoa_r+0x24c>
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	930b      	str	r3, [sp, #44]	; 0x2c
 800c5fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c5fc:	eb0a 0903 	add.w	r9, sl, r3
 800c600:	f109 0301 	add.w	r3, r9, #1
 800c604:	2b01      	cmp	r3, #1
 800c606:	9308      	str	r3, [sp, #32]
 800c608:	bfb8      	it	lt
 800c60a:	2301      	movlt	r3, #1
 800c60c:	e7dd      	b.n	800c5ca <_dtoa_r+0x262>
 800c60e:	2301      	movs	r3, #1
 800c610:	e7f2      	b.n	800c5f8 <_dtoa_r+0x290>
 800c612:	bf00      	nop
 800c614:	f3af 8000 	nop.w
 800c618:	636f4361 	.word	0x636f4361
 800c61c:	3fd287a7 	.word	0x3fd287a7
 800c620:	8b60c8b3 	.word	0x8b60c8b3
 800c624:	3fc68a28 	.word	0x3fc68a28
 800c628:	509f79fb 	.word	0x509f79fb
 800c62c:	3fd34413 	.word	0x3fd34413
 800c630:	0800fa78 	.word	0x0800fa78
 800c634:	0800fb35 	.word	0x0800fb35
 800c638:	7ff00000 	.word	0x7ff00000
 800c63c:	0800fb31 	.word	0x0800fb31
 800c640:	0800fb28 	.word	0x0800fb28
 800c644:	0800fa55 	.word	0x0800fa55
 800c648:	3ff80000 	.word	0x3ff80000
 800c64c:	0800fc28 	.word	0x0800fc28
 800c650:	0800fb90 	.word	0x0800fb90
 800c654:	2401      	movs	r4, #1
 800c656:	2300      	movs	r3, #0
 800c658:	9322      	str	r3, [sp, #136]	; 0x88
 800c65a:	940b      	str	r4, [sp, #44]	; 0x2c
 800c65c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800c660:	2200      	movs	r2, #0
 800c662:	f8cd 9020 	str.w	r9, [sp, #32]
 800c666:	2312      	movs	r3, #18
 800c668:	9223      	str	r2, [sp, #140]	; 0x8c
 800c66a:	e7ae      	b.n	800c5ca <_dtoa_r+0x262>
 800c66c:	2301      	movs	r3, #1
 800c66e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c670:	e7f4      	b.n	800c65c <_dtoa_r+0x2f4>
 800c672:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800c676:	f8cd 9020 	str.w	r9, [sp, #32]
 800c67a:	464b      	mov	r3, r9
 800c67c:	e7a5      	b.n	800c5ca <_dtoa_r+0x262>
 800c67e:	3101      	adds	r1, #1
 800c680:	6041      	str	r1, [r0, #4]
 800c682:	0052      	lsls	r2, r2, #1
 800c684:	e7a5      	b.n	800c5d2 <_dtoa_r+0x26a>
 800c686:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c688:	9a03      	ldr	r2, [sp, #12]
 800c68a:	601a      	str	r2, [r3, #0]
 800c68c:	9b08      	ldr	r3, [sp, #32]
 800c68e:	2b0e      	cmp	r3, #14
 800c690:	f200 80a8 	bhi.w	800c7e4 <_dtoa_r+0x47c>
 800c694:	2c00      	cmp	r4, #0
 800c696:	f000 80a5 	beq.w	800c7e4 <_dtoa_r+0x47c>
 800c69a:	f1ba 0f00 	cmp.w	sl, #0
 800c69e:	dd34      	ble.n	800c70a <_dtoa_r+0x3a2>
 800c6a0:	4a9a      	ldr	r2, [pc, #616]	; (800c90c <_dtoa_r+0x5a4>)
 800c6a2:	f00a 030f 	and.w	r3, sl, #15
 800c6a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c6aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c6ae:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800c6b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800c6b6:	ea4f 142a 	mov.w	r4, sl, asr #4
 800c6ba:	d016      	beq.n	800c6ea <_dtoa_r+0x382>
 800c6bc:	4b94      	ldr	r3, [pc, #592]	; (800c910 <_dtoa_r+0x5a8>)
 800c6be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c6c2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c6c6:	f7f4 f899 	bl	80007fc <__aeabi_ddiv>
 800c6ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c6ce:	f004 040f 	and.w	r4, r4, #15
 800c6d2:	2703      	movs	r7, #3
 800c6d4:	4e8e      	ldr	r6, [pc, #568]	; (800c910 <_dtoa_r+0x5a8>)
 800c6d6:	b954      	cbnz	r4, 800c6ee <_dtoa_r+0x386>
 800c6d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c6dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c6e0:	f7f4 f88c 	bl	80007fc <__aeabi_ddiv>
 800c6e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c6e8:	e029      	b.n	800c73e <_dtoa_r+0x3d6>
 800c6ea:	2702      	movs	r7, #2
 800c6ec:	e7f2      	b.n	800c6d4 <_dtoa_r+0x36c>
 800c6ee:	07e1      	lsls	r1, r4, #31
 800c6f0:	d508      	bpl.n	800c704 <_dtoa_r+0x39c>
 800c6f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c6f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c6fa:	f7f3 ff55 	bl	80005a8 <__aeabi_dmul>
 800c6fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c702:	3701      	adds	r7, #1
 800c704:	1064      	asrs	r4, r4, #1
 800c706:	3608      	adds	r6, #8
 800c708:	e7e5      	b.n	800c6d6 <_dtoa_r+0x36e>
 800c70a:	f000 80a5 	beq.w	800c858 <_dtoa_r+0x4f0>
 800c70e:	f1ca 0400 	rsb	r4, sl, #0
 800c712:	4b7e      	ldr	r3, [pc, #504]	; (800c90c <_dtoa_r+0x5a4>)
 800c714:	4e7e      	ldr	r6, [pc, #504]	; (800c910 <_dtoa_r+0x5a8>)
 800c716:	f004 020f 	and.w	r2, r4, #15
 800c71a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c722:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c726:	f7f3 ff3f 	bl	80005a8 <__aeabi_dmul>
 800c72a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c72e:	1124      	asrs	r4, r4, #4
 800c730:	2300      	movs	r3, #0
 800c732:	2702      	movs	r7, #2
 800c734:	2c00      	cmp	r4, #0
 800c736:	f040 8084 	bne.w	800c842 <_dtoa_r+0x4da>
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d1d2      	bne.n	800c6e4 <_dtoa_r+0x37c>
 800c73e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c740:	2b00      	cmp	r3, #0
 800c742:	f000 808b 	beq.w	800c85c <_dtoa_r+0x4f4>
 800c746:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800c74a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800c74e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c752:	4b70      	ldr	r3, [pc, #448]	; (800c914 <_dtoa_r+0x5ac>)
 800c754:	2200      	movs	r2, #0
 800c756:	f7f4 f999 	bl	8000a8c <__aeabi_dcmplt>
 800c75a:	2800      	cmp	r0, #0
 800c75c:	d07e      	beq.n	800c85c <_dtoa_r+0x4f4>
 800c75e:	9b08      	ldr	r3, [sp, #32]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d07b      	beq.n	800c85c <_dtoa_r+0x4f4>
 800c764:	f1b9 0f00 	cmp.w	r9, #0
 800c768:	dd38      	ble.n	800c7dc <_dtoa_r+0x474>
 800c76a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c76e:	4b6a      	ldr	r3, [pc, #424]	; (800c918 <_dtoa_r+0x5b0>)
 800c770:	2200      	movs	r2, #0
 800c772:	f7f3 ff19 	bl	80005a8 <__aeabi_dmul>
 800c776:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c77a:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 800c77e:	3701      	adds	r7, #1
 800c780:	464c      	mov	r4, r9
 800c782:	4638      	mov	r0, r7
 800c784:	f7f3 fea6 	bl	80004d4 <__aeabi_i2d>
 800c788:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c78c:	f7f3 ff0c 	bl	80005a8 <__aeabi_dmul>
 800c790:	4b62      	ldr	r3, [pc, #392]	; (800c91c <_dtoa_r+0x5b4>)
 800c792:	2200      	movs	r2, #0
 800c794:	f7f3 fd52 	bl	800023c <__adddf3>
 800c798:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c79c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c7a0:	9611      	str	r6, [sp, #68]	; 0x44
 800c7a2:	2c00      	cmp	r4, #0
 800c7a4:	d15d      	bne.n	800c862 <_dtoa_r+0x4fa>
 800c7a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c7aa:	4b5d      	ldr	r3, [pc, #372]	; (800c920 <_dtoa_r+0x5b8>)
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	f7f3 fd43 	bl	8000238 <__aeabi_dsub>
 800c7b2:	4602      	mov	r2, r0
 800c7b4:	460b      	mov	r3, r1
 800c7b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c7ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c7bc:	4633      	mov	r3, r6
 800c7be:	f7f4 f983 	bl	8000ac8 <__aeabi_dcmpgt>
 800c7c2:	2800      	cmp	r0, #0
 800c7c4:	f040 829c 	bne.w	800cd00 <_dtoa_r+0x998>
 800c7c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c7cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c7ce:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c7d2:	f7f4 f95b 	bl	8000a8c <__aeabi_dcmplt>
 800c7d6:	2800      	cmp	r0, #0
 800c7d8:	f040 8290 	bne.w	800ccfc <_dtoa_r+0x994>
 800c7dc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800c7e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c7e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	f2c0 8152 	blt.w	800ca90 <_dtoa_r+0x728>
 800c7ec:	f1ba 0f0e 	cmp.w	sl, #14
 800c7f0:	f300 814e 	bgt.w	800ca90 <_dtoa_r+0x728>
 800c7f4:	4b45      	ldr	r3, [pc, #276]	; (800c90c <_dtoa_r+0x5a4>)
 800c7f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c7fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c7fe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800c802:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c804:	2b00      	cmp	r3, #0
 800c806:	f280 80db 	bge.w	800c9c0 <_dtoa_r+0x658>
 800c80a:	9b08      	ldr	r3, [sp, #32]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	f300 80d7 	bgt.w	800c9c0 <_dtoa_r+0x658>
 800c812:	f040 8272 	bne.w	800ccfa <_dtoa_r+0x992>
 800c816:	4b42      	ldr	r3, [pc, #264]	; (800c920 <_dtoa_r+0x5b8>)
 800c818:	2200      	movs	r2, #0
 800c81a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c81e:	f7f3 fec3 	bl	80005a8 <__aeabi_dmul>
 800c822:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c826:	f7f4 f945 	bl	8000ab4 <__aeabi_dcmpge>
 800c82a:	9c08      	ldr	r4, [sp, #32]
 800c82c:	4626      	mov	r6, r4
 800c82e:	2800      	cmp	r0, #0
 800c830:	f040 8248 	bne.w	800ccc4 <_dtoa_r+0x95c>
 800c834:	9f03      	ldr	r7, [sp, #12]
 800c836:	2331      	movs	r3, #49	; 0x31
 800c838:	f807 3b01 	strb.w	r3, [r7], #1
 800c83c:	f10a 0a01 	add.w	sl, sl, #1
 800c840:	e244      	b.n	800cccc <_dtoa_r+0x964>
 800c842:	07e2      	lsls	r2, r4, #31
 800c844:	d505      	bpl.n	800c852 <_dtoa_r+0x4ea>
 800c846:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c84a:	f7f3 fead 	bl	80005a8 <__aeabi_dmul>
 800c84e:	3701      	adds	r7, #1
 800c850:	2301      	movs	r3, #1
 800c852:	1064      	asrs	r4, r4, #1
 800c854:	3608      	adds	r6, #8
 800c856:	e76d      	b.n	800c734 <_dtoa_r+0x3cc>
 800c858:	2702      	movs	r7, #2
 800c85a:	e770      	b.n	800c73e <_dtoa_r+0x3d6>
 800c85c:	9c08      	ldr	r4, [sp, #32]
 800c85e:	46d0      	mov	r8, sl
 800c860:	e78f      	b.n	800c782 <_dtoa_r+0x41a>
 800c862:	9903      	ldr	r1, [sp, #12]
 800c864:	4b29      	ldr	r3, [pc, #164]	; (800c90c <_dtoa_r+0x5a4>)
 800c866:	4421      	add	r1, r4
 800c868:	9112      	str	r1, [sp, #72]	; 0x48
 800c86a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c86c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c870:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800c874:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c878:	2900      	cmp	r1, #0
 800c87a:	d055      	beq.n	800c928 <_dtoa_r+0x5c0>
 800c87c:	4929      	ldr	r1, [pc, #164]	; (800c924 <_dtoa_r+0x5bc>)
 800c87e:	2000      	movs	r0, #0
 800c880:	f7f3 ffbc 	bl	80007fc <__aeabi_ddiv>
 800c884:	463b      	mov	r3, r7
 800c886:	4632      	mov	r2, r6
 800c888:	f7f3 fcd6 	bl	8000238 <__aeabi_dsub>
 800c88c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c890:	9f03      	ldr	r7, [sp, #12]
 800c892:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c896:	f7f4 f937 	bl	8000b08 <__aeabi_d2iz>
 800c89a:	4604      	mov	r4, r0
 800c89c:	f7f3 fe1a 	bl	80004d4 <__aeabi_i2d>
 800c8a0:	4602      	mov	r2, r0
 800c8a2:	460b      	mov	r3, r1
 800c8a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c8a8:	f7f3 fcc6 	bl	8000238 <__aeabi_dsub>
 800c8ac:	3430      	adds	r4, #48	; 0x30
 800c8ae:	4602      	mov	r2, r0
 800c8b0:	460b      	mov	r3, r1
 800c8b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c8b6:	f807 4b01 	strb.w	r4, [r7], #1
 800c8ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c8be:	f7f4 f8e5 	bl	8000a8c <__aeabi_dcmplt>
 800c8c2:	2800      	cmp	r0, #0
 800c8c4:	d174      	bne.n	800c9b0 <_dtoa_r+0x648>
 800c8c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c8ca:	4912      	ldr	r1, [pc, #72]	; (800c914 <_dtoa_r+0x5ac>)
 800c8cc:	2000      	movs	r0, #0
 800c8ce:	f7f3 fcb3 	bl	8000238 <__aeabi_dsub>
 800c8d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c8d6:	f7f4 f8d9 	bl	8000a8c <__aeabi_dcmplt>
 800c8da:	2800      	cmp	r0, #0
 800c8dc:	f040 80b7 	bne.w	800ca4e <_dtoa_r+0x6e6>
 800c8e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c8e2:	429f      	cmp	r7, r3
 800c8e4:	f43f af7a 	beq.w	800c7dc <_dtoa_r+0x474>
 800c8e8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c8ec:	4b0a      	ldr	r3, [pc, #40]	; (800c918 <_dtoa_r+0x5b0>)
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	f7f3 fe5a 	bl	80005a8 <__aeabi_dmul>
 800c8f4:	4b08      	ldr	r3, [pc, #32]	; (800c918 <_dtoa_r+0x5b0>)
 800c8f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c900:	f7f3 fe52 	bl	80005a8 <__aeabi_dmul>
 800c904:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c908:	e7c3      	b.n	800c892 <_dtoa_r+0x52a>
 800c90a:	bf00      	nop
 800c90c:	0800fc28 	.word	0x0800fc28
 800c910:	0800fc00 	.word	0x0800fc00
 800c914:	3ff00000 	.word	0x3ff00000
 800c918:	40240000 	.word	0x40240000
 800c91c:	401c0000 	.word	0x401c0000
 800c920:	40140000 	.word	0x40140000
 800c924:	3fe00000 	.word	0x3fe00000
 800c928:	4630      	mov	r0, r6
 800c92a:	4639      	mov	r1, r7
 800c92c:	f7f3 fe3c 	bl	80005a8 <__aeabi_dmul>
 800c930:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c934:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c936:	9c03      	ldr	r4, [sp, #12]
 800c938:	9314      	str	r3, [sp, #80]	; 0x50
 800c93a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c93e:	f7f4 f8e3 	bl	8000b08 <__aeabi_d2iz>
 800c942:	9015      	str	r0, [sp, #84]	; 0x54
 800c944:	f7f3 fdc6 	bl	80004d4 <__aeabi_i2d>
 800c948:	4602      	mov	r2, r0
 800c94a:	460b      	mov	r3, r1
 800c94c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c950:	f7f3 fc72 	bl	8000238 <__aeabi_dsub>
 800c954:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c956:	3330      	adds	r3, #48	; 0x30
 800c958:	f804 3b01 	strb.w	r3, [r4], #1
 800c95c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c95e:	429c      	cmp	r4, r3
 800c960:	4606      	mov	r6, r0
 800c962:	460f      	mov	r7, r1
 800c964:	f04f 0200 	mov.w	r2, #0
 800c968:	d124      	bne.n	800c9b4 <_dtoa_r+0x64c>
 800c96a:	4ba4      	ldr	r3, [pc, #656]	; (800cbfc <_dtoa_r+0x894>)
 800c96c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c970:	f7f3 fc64 	bl	800023c <__adddf3>
 800c974:	4602      	mov	r2, r0
 800c976:	460b      	mov	r3, r1
 800c978:	4630      	mov	r0, r6
 800c97a:	4639      	mov	r1, r7
 800c97c:	f7f4 f8a4 	bl	8000ac8 <__aeabi_dcmpgt>
 800c980:	2800      	cmp	r0, #0
 800c982:	d163      	bne.n	800ca4c <_dtoa_r+0x6e4>
 800c984:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c988:	499c      	ldr	r1, [pc, #624]	; (800cbfc <_dtoa_r+0x894>)
 800c98a:	2000      	movs	r0, #0
 800c98c:	f7f3 fc54 	bl	8000238 <__aeabi_dsub>
 800c990:	4602      	mov	r2, r0
 800c992:	460b      	mov	r3, r1
 800c994:	4630      	mov	r0, r6
 800c996:	4639      	mov	r1, r7
 800c998:	f7f4 f878 	bl	8000a8c <__aeabi_dcmplt>
 800c99c:	2800      	cmp	r0, #0
 800c99e:	f43f af1d 	beq.w	800c7dc <_dtoa_r+0x474>
 800c9a2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800c9a4:	1e7b      	subs	r3, r7, #1
 800c9a6:	9314      	str	r3, [sp, #80]	; 0x50
 800c9a8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800c9ac:	2b30      	cmp	r3, #48	; 0x30
 800c9ae:	d0f8      	beq.n	800c9a2 <_dtoa_r+0x63a>
 800c9b0:	46c2      	mov	sl, r8
 800c9b2:	e03b      	b.n	800ca2c <_dtoa_r+0x6c4>
 800c9b4:	4b92      	ldr	r3, [pc, #584]	; (800cc00 <_dtoa_r+0x898>)
 800c9b6:	f7f3 fdf7 	bl	80005a8 <__aeabi_dmul>
 800c9ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c9be:	e7bc      	b.n	800c93a <_dtoa_r+0x5d2>
 800c9c0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c9c4:	9f03      	ldr	r7, [sp, #12]
 800c9c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c9ca:	4640      	mov	r0, r8
 800c9cc:	4649      	mov	r1, r9
 800c9ce:	f7f3 ff15 	bl	80007fc <__aeabi_ddiv>
 800c9d2:	f7f4 f899 	bl	8000b08 <__aeabi_d2iz>
 800c9d6:	4604      	mov	r4, r0
 800c9d8:	f7f3 fd7c 	bl	80004d4 <__aeabi_i2d>
 800c9dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c9e0:	f7f3 fde2 	bl	80005a8 <__aeabi_dmul>
 800c9e4:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800c9e8:	4602      	mov	r2, r0
 800c9ea:	460b      	mov	r3, r1
 800c9ec:	4640      	mov	r0, r8
 800c9ee:	4649      	mov	r1, r9
 800c9f0:	f7f3 fc22 	bl	8000238 <__aeabi_dsub>
 800c9f4:	f807 6b01 	strb.w	r6, [r7], #1
 800c9f8:	9e03      	ldr	r6, [sp, #12]
 800c9fa:	f8dd c020 	ldr.w	ip, [sp, #32]
 800c9fe:	1bbe      	subs	r6, r7, r6
 800ca00:	45b4      	cmp	ip, r6
 800ca02:	4602      	mov	r2, r0
 800ca04:	460b      	mov	r3, r1
 800ca06:	d136      	bne.n	800ca76 <_dtoa_r+0x70e>
 800ca08:	f7f3 fc18 	bl	800023c <__adddf3>
 800ca0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ca10:	4680      	mov	r8, r0
 800ca12:	4689      	mov	r9, r1
 800ca14:	f7f4 f858 	bl	8000ac8 <__aeabi_dcmpgt>
 800ca18:	bb58      	cbnz	r0, 800ca72 <_dtoa_r+0x70a>
 800ca1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ca1e:	4640      	mov	r0, r8
 800ca20:	4649      	mov	r1, r9
 800ca22:	f7f4 f829 	bl	8000a78 <__aeabi_dcmpeq>
 800ca26:	b108      	cbz	r0, 800ca2c <_dtoa_r+0x6c4>
 800ca28:	07e1      	lsls	r1, r4, #31
 800ca2a:	d422      	bmi.n	800ca72 <_dtoa_r+0x70a>
 800ca2c:	4628      	mov	r0, r5
 800ca2e:	4659      	mov	r1, fp
 800ca30:	f000 fbc2 	bl	800d1b8 <_Bfree>
 800ca34:	2300      	movs	r3, #0
 800ca36:	703b      	strb	r3, [r7, #0]
 800ca38:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ca3a:	f10a 0001 	add.w	r0, sl, #1
 800ca3e:	6018      	str	r0, [r3, #0]
 800ca40:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	f43f acdd 	beq.w	800c402 <_dtoa_r+0x9a>
 800ca48:	601f      	str	r7, [r3, #0]
 800ca4a:	e4da      	b.n	800c402 <_dtoa_r+0x9a>
 800ca4c:	4627      	mov	r7, r4
 800ca4e:	463b      	mov	r3, r7
 800ca50:	461f      	mov	r7, r3
 800ca52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca56:	2a39      	cmp	r2, #57	; 0x39
 800ca58:	d107      	bne.n	800ca6a <_dtoa_r+0x702>
 800ca5a:	9a03      	ldr	r2, [sp, #12]
 800ca5c:	429a      	cmp	r2, r3
 800ca5e:	d1f7      	bne.n	800ca50 <_dtoa_r+0x6e8>
 800ca60:	9903      	ldr	r1, [sp, #12]
 800ca62:	2230      	movs	r2, #48	; 0x30
 800ca64:	f108 0801 	add.w	r8, r8, #1
 800ca68:	700a      	strb	r2, [r1, #0]
 800ca6a:	781a      	ldrb	r2, [r3, #0]
 800ca6c:	3201      	adds	r2, #1
 800ca6e:	701a      	strb	r2, [r3, #0]
 800ca70:	e79e      	b.n	800c9b0 <_dtoa_r+0x648>
 800ca72:	46d0      	mov	r8, sl
 800ca74:	e7eb      	b.n	800ca4e <_dtoa_r+0x6e6>
 800ca76:	4b62      	ldr	r3, [pc, #392]	; (800cc00 <_dtoa_r+0x898>)
 800ca78:	2200      	movs	r2, #0
 800ca7a:	f7f3 fd95 	bl	80005a8 <__aeabi_dmul>
 800ca7e:	2200      	movs	r2, #0
 800ca80:	2300      	movs	r3, #0
 800ca82:	4680      	mov	r8, r0
 800ca84:	4689      	mov	r9, r1
 800ca86:	f7f3 fff7 	bl	8000a78 <__aeabi_dcmpeq>
 800ca8a:	2800      	cmp	r0, #0
 800ca8c:	d09b      	beq.n	800c9c6 <_dtoa_r+0x65e>
 800ca8e:	e7cd      	b.n	800ca2c <_dtoa_r+0x6c4>
 800ca90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ca92:	2a00      	cmp	r2, #0
 800ca94:	f000 80d0 	beq.w	800cc38 <_dtoa_r+0x8d0>
 800ca98:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ca9a:	2a01      	cmp	r2, #1
 800ca9c:	f300 80b2 	bgt.w	800cc04 <_dtoa_r+0x89c>
 800caa0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800caa2:	2a00      	cmp	r2, #0
 800caa4:	f000 80a6 	beq.w	800cbf4 <_dtoa_r+0x88c>
 800caa8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800caac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800caae:	9f06      	ldr	r7, [sp, #24]
 800cab0:	9a06      	ldr	r2, [sp, #24]
 800cab2:	441a      	add	r2, r3
 800cab4:	9206      	str	r2, [sp, #24]
 800cab6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cab8:	2101      	movs	r1, #1
 800caba:	441a      	add	r2, r3
 800cabc:	4628      	mov	r0, r5
 800cabe:	9209      	str	r2, [sp, #36]	; 0x24
 800cac0:	f000 fc30 	bl	800d324 <__i2b>
 800cac4:	4606      	mov	r6, r0
 800cac6:	2f00      	cmp	r7, #0
 800cac8:	dd0c      	ble.n	800cae4 <_dtoa_r+0x77c>
 800caca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cacc:	2b00      	cmp	r3, #0
 800cace:	dd09      	ble.n	800cae4 <_dtoa_r+0x77c>
 800cad0:	42bb      	cmp	r3, r7
 800cad2:	9a06      	ldr	r2, [sp, #24]
 800cad4:	bfa8      	it	ge
 800cad6:	463b      	movge	r3, r7
 800cad8:	1ad2      	subs	r2, r2, r3
 800cada:	9206      	str	r2, [sp, #24]
 800cadc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cade:	1aff      	subs	r7, r7, r3
 800cae0:	1ad3      	subs	r3, r2, r3
 800cae2:	9309      	str	r3, [sp, #36]	; 0x24
 800cae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cae6:	b1f3      	cbz	r3, 800cb26 <_dtoa_r+0x7be>
 800cae8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800caea:	2b00      	cmp	r3, #0
 800caec:	f000 80a8 	beq.w	800cc40 <_dtoa_r+0x8d8>
 800caf0:	2c00      	cmp	r4, #0
 800caf2:	dd10      	ble.n	800cb16 <_dtoa_r+0x7ae>
 800caf4:	4631      	mov	r1, r6
 800caf6:	4622      	mov	r2, r4
 800caf8:	4628      	mov	r0, r5
 800cafa:	f000 fcd1 	bl	800d4a0 <__pow5mult>
 800cafe:	465a      	mov	r2, fp
 800cb00:	4601      	mov	r1, r0
 800cb02:	4606      	mov	r6, r0
 800cb04:	4628      	mov	r0, r5
 800cb06:	f000 fc23 	bl	800d350 <__multiply>
 800cb0a:	4659      	mov	r1, fp
 800cb0c:	4680      	mov	r8, r0
 800cb0e:	4628      	mov	r0, r5
 800cb10:	f000 fb52 	bl	800d1b8 <_Bfree>
 800cb14:	46c3      	mov	fp, r8
 800cb16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb18:	1b1a      	subs	r2, r3, r4
 800cb1a:	d004      	beq.n	800cb26 <_dtoa_r+0x7be>
 800cb1c:	4659      	mov	r1, fp
 800cb1e:	4628      	mov	r0, r5
 800cb20:	f000 fcbe 	bl	800d4a0 <__pow5mult>
 800cb24:	4683      	mov	fp, r0
 800cb26:	2101      	movs	r1, #1
 800cb28:	4628      	mov	r0, r5
 800cb2a:	f000 fbfb 	bl	800d324 <__i2b>
 800cb2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	4604      	mov	r4, r0
 800cb34:	f340 8086 	ble.w	800cc44 <_dtoa_r+0x8dc>
 800cb38:	461a      	mov	r2, r3
 800cb3a:	4601      	mov	r1, r0
 800cb3c:	4628      	mov	r0, r5
 800cb3e:	f000 fcaf 	bl	800d4a0 <__pow5mult>
 800cb42:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cb44:	2b01      	cmp	r3, #1
 800cb46:	4604      	mov	r4, r0
 800cb48:	dd7f      	ble.n	800cc4a <_dtoa_r+0x8e2>
 800cb4a:	f04f 0800 	mov.w	r8, #0
 800cb4e:	6923      	ldr	r3, [r4, #16]
 800cb50:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cb54:	6918      	ldr	r0, [r3, #16]
 800cb56:	f000 fb97 	bl	800d288 <__hi0bits>
 800cb5a:	f1c0 0020 	rsb	r0, r0, #32
 800cb5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb60:	4418      	add	r0, r3
 800cb62:	f010 001f 	ands.w	r0, r0, #31
 800cb66:	f000 8092 	beq.w	800cc8e <_dtoa_r+0x926>
 800cb6a:	f1c0 0320 	rsb	r3, r0, #32
 800cb6e:	2b04      	cmp	r3, #4
 800cb70:	f340 808a 	ble.w	800cc88 <_dtoa_r+0x920>
 800cb74:	f1c0 001c 	rsb	r0, r0, #28
 800cb78:	9b06      	ldr	r3, [sp, #24]
 800cb7a:	4403      	add	r3, r0
 800cb7c:	9306      	str	r3, [sp, #24]
 800cb7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb80:	4403      	add	r3, r0
 800cb82:	4407      	add	r7, r0
 800cb84:	9309      	str	r3, [sp, #36]	; 0x24
 800cb86:	9b06      	ldr	r3, [sp, #24]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	dd05      	ble.n	800cb98 <_dtoa_r+0x830>
 800cb8c:	4659      	mov	r1, fp
 800cb8e:	461a      	mov	r2, r3
 800cb90:	4628      	mov	r0, r5
 800cb92:	f000 fcdf 	bl	800d554 <__lshift>
 800cb96:	4683      	mov	fp, r0
 800cb98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	dd05      	ble.n	800cbaa <_dtoa_r+0x842>
 800cb9e:	4621      	mov	r1, r4
 800cba0:	461a      	mov	r2, r3
 800cba2:	4628      	mov	r0, r5
 800cba4:	f000 fcd6 	bl	800d554 <__lshift>
 800cba8:	4604      	mov	r4, r0
 800cbaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d070      	beq.n	800cc92 <_dtoa_r+0x92a>
 800cbb0:	4621      	mov	r1, r4
 800cbb2:	4658      	mov	r0, fp
 800cbb4:	f000 fd3e 	bl	800d634 <__mcmp>
 800cbb8:	2800      	cmp	r0, #0
 800cbba:	da6a      	bge.n	800cc92 <_dtoa_r+0x92a>
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	4659      	mov	r1, fp
 800cbc0:	220a      	movs	r2, #10
 800cbc2:	4628      	mov	r0, r5
 800cbc4:	f000 fb1a 	bl	800d1fc <__multadd>
 800cbc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800cbce:	4683      	mov	fp, r0
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	f000 8194 	beq.w	800cefe <_dtoa_r+0xb96>
 800cbd6:	4631      	mov	r1, r6
 800cbd8:	2300      	movs	r3, #0
 800cbda:	220a      	movs	r2, #10
 800cbdc:	4628      	mov	r0, r5
 800cbde:	f000 fb0d 	bl	800d1fc <__multadd>
 800cbe2:	f1b9 0f00 	cmp.w	r9, #0
 800cbe6:	4606      	mov	r6, r0
 800cbe8:	f300 8093 	bgt.w	800cd12 <_dtoa_r+0x9aa>
 800cbec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cbee:	2b02      	cmp	r3, #2
 800cbf0:	dc57      	bgt.n	800cca2 <_dtoa_r+0x93a>
 800cbf2:	e08e      	b.n	800cd12 <_dtoa_r+0x9aa>
 800cbf4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800cbf6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cbfa:	e757      	b.n	800caac <_dtoa_r+0x744>
 800cbfc:	3fe00000 	.word	0x3fe00000
 800cc00:	40240000 	.word	0x40240000
 800cc04:	9b08      	ldr	r3, [sp, #32]
 800cc06:	1e5c      	subs	r4, r3, #1
 800cc08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc0a:	42a3      	cmp	r3, r4
 800cc0c:	bfbf      	itttt	lt
 800cc0e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cc10:	940a      	strlt	r4, [sp, #40]	; 0x28
 800cc12:	1ae2      	sublt	r2, r4, r3
 800cc14:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800cc16:	bfb6      	itet	lt
 800cc18:	189b      	addlt	r3, r3, r2
 800cc1a:	1b1c      	subge	r4, r3, r4
 800cc1c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800cc1e:	9b08      	ldr	r3, [sp, #32]
 800cc20:	bfb8      	it	lt
 800cc22:	2400      	movlt	r4, #0
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	bfb9      	ittee	lt
 800cc28:	9b06      	ldrlt	r3, [sp, #24]
 800cc2a:	9a08      	ldrlt	r2, [sp, #32]
 800cc2c:	9f06      	ldrge	r7, [sp, #24]
 800cc2e:	9b08      	ldrge	r3, [sp, #32]
 800cc30:	bfbc      	itt	lt
 800cc32:	1a9f      	sublt	r7, r3, r2
 800cc34:	2300      	movlt	r3, #0
 800cc36:	e73b      	b.n	800cab0 <_dtoa_r+0x748>
 800cc38:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800cc3a:	9f06      	ldr	r7, [sp, #24]
 800cc3c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800cc3e:	e742      	b.n	800cac6 <_dtoa_r+0x75e>
 800cc40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc42:	e76b      	b.n	800cb1c <_dtoa_r+0x7b4>
 800cc44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cc46:	2b01      	cmp	r3, #1
 800cc48:	dc19      	bgt.n	800cc7e <_dtoa_r+0x916>
 800cc4a:	9b04      	ldr	r3, [sp, #16]
 800cc4c:	b9bb      	cbnz	r3, 800cc7e <_dtoa_r+0x916>
 800cc4e:	9b05      	ldr	r3, [sp, #20]
 800cc50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc54:	b99b      	cbnz	r3, 800cc7e <_dtoa_r+0x916>
 800cc56:	9b05      	ldr	r3, [sp, #20]
 800cc58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cc5c:	0d1b      	lsrs	r3, r3, #20
 800cc5e:	051b      	lsls	r3, r3, #20
 800cc60:	b183      	cbz	r3, 800cc84 <_dtoa_r+0x91c>
 800cc62:	9b06      	ldr	r3, [sp, #24]
 800cc64:	3301      	adds	r3, #1
 800cc66:	9306      	str	r3, [sp, #24]
 800cc68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc6a:	3301      	adds	r3, #1
 800cc6c:	9309      	str	r3, [sp, #36]	; 0x24
 800cc6e:	f04f 0801 	mov.w	r8, #1
 800cc72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	f47f af6a 	bne.w	800cb4e <_dtoa_r+0x7e6>
 800cc7a:	2001      	movs	r0, #1
 800cc7c:	e76f      	b.n	800cb5e <_dtoa_r+0x7f6>
 800cc7e:	f04f 0800 	mov.w	r8, #0
 800cc82:	e7f6      	b.n	800cc72 <_dtoa_r+0x90a>
 800cc84:	4698      	mov	r8, r3
 800cc86:	e7f4      	b.n	800cc72 <_dtoa_r+0x90a>
 800cc88:	f43f af7d 	beq.w	800cb86 <_dtoa_r+0x81e>
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	301c      	adds	r0, #28
 800cc90:	e772      	b.n	800cb78 <_dtoa_r+0x810>
 800cc92:	9b08      	ldr	r3, [sp, #32]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	dc36      	bgt.n	800cd06 <_dtoa_r+0x99e>
 800cc98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cc9a:	2b02      	cmp	r3, #2
 800cc9c:	dd33      	ble.n	800cd06 <_dtoa_r+0x99e>
 800cc9e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cca2:	f1b9 0f00 	cmp.w	r9, #0
 800cca6:	d10d      	bne.n	800ccc4 <_dtoa_r+0x95c>
 800cca8:	4621      	mov	r1, r4
 800ccaa:	464b      	mov	r3, r9
 800ccac:	2205      	movs	r2, #5
 800ccae:	4628      	mov	r0, r5
 800ccb0:	f000 faa4 	bl	800d1fc <__multadd>
 800ccb4:	4601      	mov	r1, r0
 800ccb6:	4604      	mov	r4, r0
 800ccb8:	4658      	mov	r0, fp
 800ccba:	f000 fcbb 	bl	800d634 <__mcmp>
 800ccbe:	2800      	cmp	r0, #0
 800ccc0:	f73f adb8 	bgt.w	800c834 <_dtoa_r+0x4cc>
 800ccc4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ccc6:	9f03      	ldr	r7, [sp, #12]
 800ccc8:	ea6f 0a03 	mvn.w	sl, r3
 800cccc:	f04f 0800 	mov.w	r8, #0
 800ccd0:	4621      	mov	r1, r4
 800ccd2:	4628      	mov	r0, r5
 800ccd4:	f000 fa70 	bl	800d1b8 <_Bfree>
 800ccd8:	2e00      	cmp	r6, #0
 800ccda:	f43f aea7 	beq.w	800ca2c <_dtoa_r+0x6c4>
 800ccde:	f1b8 0f00 	cmp.w	r8, #0
 800cce2:	d005      	beq.n	800ccf0 <_dtoa_r+0x988>
 800cce4:	45b0      	cmp	r8, r6
 800cce6:	d003      	beq.n	800ccf0 <_dtoa_r+0x988>
 800cce8:	4641      	mov	r1, r8
 800ccea:	4628      	mov	r0, r5
 800ccec:	f000 fa64 	bl	800d1b8 <_Bfree>
 800ccf0:	4631      	mov	r1, r6
 800ccf2:	4628      	mov	r0, r5
 800ccf4:	f000 fa60 	bl	800d1b8 <_Bfree>
 800ccf8:	e698      	b.n	800ca2c <_dtoa_r+0x6c4>
 800ccfa:	2400      	movs	r4, #0
 800ccfc:	4626      	mov	r6, r4
 800ccfe:	e7e1      	b.n	800ccc4 <_dtoa_r+0x95c>
 800cd00:	46c2      	mov	sl, r8
 800cd02:	4626      	mov	r6, r4
 800cd04:	e596      	b.n	800c834 <_dtoa_r+0x4cc>
 800cd06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	f000 80fd 	beq.w	800cf0c <_dtoa_r+0xba4>
 800cd12:	2f00      	cmp	r7, #0
 800cd14:	dd05      	ble.n	800cd22 <_dtoa_r+0x9ba>
 800cd16:	4631      	mov	r1, r6
 800cd18:	463a      	mov	r2, r7
 800cd1a:	4628      	mov	r0, r5
 800cd1c:	f000 fc1a 	bl	800d554 <__lshift>
 800cd20:	4606      	mov	r6, r0
 800cd22:	f1b8 0f00 	cmp.w	r8, #0
 800cd26:	d05c      	beq.n	800cde2 <_dtoa_r+0xa7a>
 800cd28:	6871      	ldr	r1, [r6, #4]
 800cd2a:	4628      	mov	r0, r5
 800cd2c:	f000 fa04 	bl	800d138 <_Balloc>
 800cd30:	4607      	mov	r7, r0
 800cd32:	b928      	cbnz	r0, 800cd40 <_dtoa_r+0x9d8>
 800cd34:	4b80      	ldr	r3, [pc, #512]	; (800cf38 <_dtoa_r+0xbd0>)
 800cd36:	4602      	mov	r2, r0
 800cd38:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cd3c:	f7ff bb28 	b.w	800c390 <_dtoa_r+0x28>
 800cd40:	6932      	ldr	r2, [r6, #16]
 800cd42:	3202      	adds	r2, #2
 800cd44:	0092      	lsls	r2, r2, #2
 800cd46:	f106 010c 	add.w	r1, r6, #12
 800cd4a:	300c      	adds	r0, #12
 800cd4c:	f7fe fbb9 	bl	800b4c2 <memcpy>
 800cd50:	2201      	movs	r2, #1
 800cd52:	4639      	mov	r1, r7
 800cd54:	4628      	mov	r0, r5
 800cd56:	f000 fbfd 	bl	800d554 <__lshift>
 800cd5a:	9b03      	ldr	r3, [sp, #12]
 800cd5c:	3301      	adds	r3, #1
 800cd5e:	9308      	str	r3, [sp, #32]
 800cd60:	9b03      	ldr	r3, [sp, #12]
 800cd62:	444b      	add	r3, r9
 800cd64:	930a      	str	r3, [sp, #40]	; 0x28
 800cd66:	9b04      	ldr	r3, [sp, #16]
 800cd68:	f003 0301 	and.w	r3, r3, #1
 800cd6c:	46b0      	mov	r8, r6
 800cd6e:	9309      	str	r3, [sp, #36]	; 0x24
 800cd70:	4606      	mov	r6, r0
 800cd72:	9b08      	ldr	r3, [sp, #32]
 800cd74:	4621      	mov	r1, r4
 800cd76:	3b01      	subs	r3, #1
 800cd78:	4658      	mov	r0, fp
 800cd7a:	9304      	str	r3, [sp, #16]
 800cd7c:	f7ff fa6a 	bl	800c254 <quorem>
 800cd80:	4603      	mov	r3, r0
 800cd82:	3330      	adds	r3, #48	; 0x30
 800cd84:	9006      	str	r0, [sp, #24]
 800cd86:	4641      	mov	r1, r8
 800cd88:	4658      	mov	r0, fp
 800cd8a:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd8c:	f000 fc52 	bl	800d634 <__mcmp>
 800cd90:	4632      	mov	r2, r6
 800cd92:	4681      	mov	r9, r0
 800cd94:	4621      	mov	r1, r4
 800cd96:	4628      	mov	r0, r5
 800cd98:	f000 fc68 	bl	800d66c <__mdiff>
 800cd9c:	68c2      	ldr	r2, [r0, #12]
 800cd9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cda0:	4607      	mov	r7, r0
 800cda2:	bb02      	cbnz	r2, 800cde6 <_dtoa_r+0xa7e>
 800cda4:	4601      	mov	r1, r0
 800cda6:	4658      	mov	r0, fp
 800cda8:	f000 fc44 	bl	800d634 <__mcmp>
 800cdac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdae:	4602      	mov	r2, r0
 800cdb0:	4639      	mov	r1, r7
 800cdb2:	4628      	mov	r0, r5
 800cdb4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800cdb8:	f000 f9fe 	bl	800d1b8 <_Bfree>
 800cdbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cdbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cdc0:	9f08      	ldr	r7, [sp, #32]
 800cdc2:	ea43 0102 	orr.w	r1, r3, r2
 800cdc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdc8:	430b      	orrs	r3, r1
 800cdca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdcc:	d10d      	bne.n	800cdea <_dtoa_r+0xa82>
 800cdce:	2b39      	cmp	r3, #57	; 0x39
 800cdd0:	d029      	beq.n	800ce26 <_dtoa_r+0xabe>
 800cdd2:	f1b9 0f00 	cmp.w	r9, #0
 800cdd6:	dd01      	ble.n	800cddc <_dtoa_r+0xa74>
 800cdd8:	9b06      	ldr	r3, [sp, #24]
 800cdda:	3331      	adds	r3, #49	; 0x31
 800cddc:	9a04      	ldr	r2, [sp, #16]
 800cdde:	7013      	strb	r3, [r2, #0]
 800cde0:	e776      	b.n	800ccd0 <_dtoa_r+0x968>
 800cde2:	4630      	mov	r0, r6
 800cde4:	e7b9      	b.n	800cd5a <_dtoa_r+0x9f2>
 800cde6:	2201      	movs	r2, #1
 800cde8:	e7e2      	b.n	800cdb0 <_dtoa_r+0xa48>
 800cdea:	f1b9 0f00 	cmp.w	r9, #0
 800cdee:	db06      	blt.n	800cdfe <_dtoa_r+0xa96>
 800cdf0:	9922      	ldr	r1, [sp, #136]	; 0x88
 800cdf2:	ea41 0909 	orr.w	r9, r1, r9
 800cdf6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cdf8:	ea59 0101 	orrs.w	r1, r9, r1
 800cdfc:	d120      	bne.n	800ce40 <_dtoa_r+0xad8>
 800cdfe:	2a00      	cmp	r2, #0
 800ce00:	ddec      	ble.n	800cddc <_dtoa_r+0xa74>
 800ce02:	4659      	mov	r1, fp
 800ce04:	2201      	movs	r2, #1
 800ce06:	4628      	mov	r0, r5
 800ce08:	9308      	str	r3, [sp, #32]
 800ce0a:	f000 fba3 	bl	800d554 <__lshift>
 800ce0e:	4621      	mov	r1, r4
 800ce10:	4683      	mov	fp, r0
 800ce12:	f000 fc0f 	bl	800d634 <__mcmp>
 800ce16:	2800      	cmp	r0, #0
 800ce18:	9b08      	ldr	r3, [sp, #32]
 800ce1a:	dc02      	bgt.n	800ce22 <_dtoa_r+0xaba>
 800ce1c:	d1de      	bne.n	800cddc <_dtoa_r+0xa74>
 800ce1e:	07da      	lsls	r2, r3, #31
 800ce20:	d5dc      	bpl.n	800cddc <_dtoa_r+0xa74>
 800ce22:	2b39      	cmp	r3, #57	; 0x39
 800ce24:	d1d8      	bne.n	800cdd8 <_dtoa_r+0xa70>
 800ce26:	9a04      	ldr	r2, [sp, #16]
 800ce28:	2339      	movs	r3, #57	; 0x39
 800ce2a:	7013      	strb	r3, [r2, #0]
 800ce2c:	463b      	mov	r3, r7
 800ce2e:	461f      	mov	r7, r3
 800ce30:	3b01      	subs	r3, #1
 800ce32:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800ce36:	2a39      	cmp	r2, #57	; 0x39
 800ce38:	d050      	beq.n	800cedc <_dtoa_r+0xb74>
 800ce3a:	3201      	adds	r2, #1
 800ce3c:	701a      	strb	r2, [r3, #0]
 800ce3e:	e747      	b.n	800ccd0 <_dtoa_r+0x968>
 800ce40:	2a00      	cmp	r2, #0
 800ce42:	dd03      	ble.n	800ce4c <_dtoa_r+0xae4>
 800ce44:	2b39      	cmp	r3, #57	; 0x39
 800ce46:	d0ee      	beq.n	800ce26 <_dtoa_r+0xabe>
 800ce48:	3301      	adds	r3, #1
 800ce4a:	e7c7      	b.n	800cddc <_dtoa_r+0xa74>
 800ce4c:	9a08      	ldr	r2, [sp, #32]
 800ce4e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ce50:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ce54:	428a      	cmp	r2, r1
 800ce56:	d02a      	beq.n	800ceae <_dtoa_r+0xb46>
 800ce58:	4659      	mov	r1, fp
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	220a      	movs	r2, #10
 800ce5e:	4628      	mov	r0, r5
 800ce60:	f000 f9cc 	bl	800d1fc <__multadd>
 800ce64:	45b0      	cmp	r8, r6
 800ce66:	4683      	mov	fp, r0
 800ce68:	f04f 0300 	mov.w	r3, #0
 800ce6c:	f04f 020a 	mov.w	r2, #10
 800ce70:	4641      	mov	r1, r8
 800ce72:	4628      	mov	r0, r5
 800ce74:	d107      	bne.n	800ce86 <_dtoa_r+0xb1e>
 800ce76:	f000 f9c1 	bl	800d1fc <__multadd>
 800ce7a:	4680      	mov	r8, r0
 800ce7c:	4606      	mov	r6, r0
 800ce7e:	9b08      	ldr	r3, [sp, #32]
 800ce80:	3301      	adds	r3, #1
 800ce82:	9308      	str	r3, [sp, #32]
 800ce84:	e775      	b.n	800cd72 <_dtoa_r+0xa0a>
 800ce86:	f000 f9b9 	bl	800d1fc <__multadd>
 800ce8a:	4631      	mov	r1, r6
 800ce8c:	4680      	mov	r8, r0
 800ce8e:	2300      	movs	r3, #0
 800ce90:	220a      	movs	r2, #10
 800ce92:	4628      	mov	r0, r5
 800ce94:	f000 f9b2 	bl	800d1fc <__multadd>
 800ce98:	4606      	mov	r6, r0
 800ce9a:	e7f0      	b.n	800ce7e <_dtoa_r+0xb16>
 800ce9c:	f1b9 0f00 	cmp.w	r9, #0
 800cea0:	9a03      	ldr	r2, [sp, #12]
 800cea2:	bfcc      	ite	gt
 800cea4:	464f      	movgt	r7, r9
 800cea6:	2701      	movle	r7, #1
 800cea8:	4417      	add	r7, r2
 800ceaa:	f04f 0800 	mov.w	r8, #0
 800ceae:	4659      	mov	r1, fp
 800ceb0:	2201      	movs	r2, #1
 800ceb2:	4628      	mov	r0, r5
 800ceb4:	9308      	str	r3, [sp, #32]
 800ceb6:	f000 fb4d 	bl	800d554 <__lshift>
 800ceba:	4621      	mov	r1, r4
 800cebc:	4683      	mov	fp, r0
 800cebe:	f000 fbb9 	bl	800d634 <__mcmp>
 800cec2:	2800      	cmp	r0, #0
 800cec4:	dcb2      	bgt.n	800ce2c <_dtoa_r+0xac4>
 800cec6:	d102      	bne.n	800cece <_dtoa_r+0xb66>
 800cec8:	9b08      	ldr	r3, [sp, #32]
 800ceca:	07db      	lsls	r3, r3, #31
 800cecc:	d4ae      	bmi.n	800ce2c <_dtoa_r+0xac4>
 800cece:	463b      	mov	r3, r7
 800ced0:	461f      	mov	r7, r3
 800ced2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ced6:	2a30      	cmp	r2, #48	; 0x30
 800ced8:	d0fa      	beq.n	800ced0 <_dtoa_r+0xb68>
 800ceda:	e6f9      	b.n	800ccd0 <_dtoa_r+0x968>
 800cedc:	9a03      	ldr	r2, [sp, #12]
 800cede:	429a      	cmp	r2, r3
 800cee0:	d1a5      	bne.n	800ce2e <_dtoa_r+0xac6>
 800cee2:	f10a 0a01 	add.w	sl, sl, #1
 800cee6:	2331      	movs	r3, #49	; 0x31
 800cee8:	e779      	b.n	800cdde <_dtoa_r+0xa76>
 800ceea:	4b14      	ldr	r3, [pc, #80]	; (800cf3c <_dtoa_r+0xbd4>)
 800ceec:	f7ff baa7 	b.w	800c43e <_dtoa_r+0xd6>
 800cef0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	f47f aa80 	bne.w	800c3f8 <_dtoa_r+0x90>
 800cef8:	4b11      	ldr	r3, [pc, #68]	; (800cf40 <_dtoa_r+0xbd8>)
 800cefa:	f7ff baa0 	b.w	800c43e <_dtoa_r+0xd6>
 800cefe:	f1b9 0f00 	cmp.w	r9, #0
 800cf02:	dc03      	bgt.n	800cf0c <_dtoa_r+0xba4>
 800cf04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cf06:	2b02      	cmp	r3, #2
 800cf08:	f73f aecb 	bgt.w	800cca2 <_dtoa_r+0x93a>
 800cf0c:	9f03      	ldr	r7, [sp, #12]
 800cf0e:	4621      	mov	r1, r4
 800cf10:	4658      	mov	r0, fp
 800cf12:	f7ff f99f 	bl	800c254 <quorem>
 800cf16:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800cf1a:	f807 3b01 	strb.w	r3, [r7], #1
 800cf1e:	9a03      	ldr	r2, [sp, #12]
 800cf20:	1aba      	subs	r2, r7, r2
 800cf22:	4591      	cmp	r9, r2
 800cf24:	ddba      	ble.n	800ce9c <_dtoa_r+0xb34>
 800cf26:	4659      	mov	r1, fp
 800cf28:	2300      	movs	r3, #0
 800cf2a:	220a      	movs	r2, #10
 800cf2c:	4628      	mov	r0, r5
 800cf2e:	f000 f965 	bl	800d1fc <__multadd>
 800cf32:	4683      	mov	fp, r0
 800cf34:	e7eb      	b.n	800cf0e <_dtoa_r+0xba6>
 800cf36:	bf00      	nop
 800cf38:	0800fb90 	.word	0x0800fb90
 800cf3c:	0800fa54 	.word	0x0800fa54
 800cf40:	0800fb28 	.word	0x0800fb28

0800cf44 <__sflush_r>:
 800cf44:	898a      	ldrh	r2, [r1, #12]
 800cf46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf48:	4605      	mov	r5, r0
 800cf4a:	0710      	lsls	r0, r2, #28
 800cf4c:	460c      	mov	r4, r1
 800cf4e:	d457      	bmi.n	800d000 <__sflush_r+0xbc>
 800cf50:	684b      	ldr	r3, [r1, #4]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	dc04      	bgt.n	800cf60 <__sflush_r+0x1c>
 800cf56:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	dc01      	bgt.n	800cf60 <__sflush_r+0x1c>
 800cf5c:	2000      	movs	r0, #0
 800cf5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf62:	2e00      	cmp	r6, #0
 800cf64:	d0fa      	beq.n	800cf5c <__sflush_r+0x18>
 800cf66:	2300      	movs	r3, #0
 800cf68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cf6c:	682f      	ldr	r7, [r5, #0]
 800cf6e:	602b      	str	r3, [r5, #0]
 800cf70:	d032      	beq.n	800cfd8 <__sflush_r+0x94>
 800cf72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cf74:	89a3      	ldrh	r3, [r4, #12]
 800cf76:	075a      	lsls	r2, r3, #29
 800cf78:	d505      	bpl.n	800cf86 <__sflush_r+0x42>
 800cf7a:	6863      	ldr	r3, [r4, #4]
 800cf7c:	1ac0      	subs	r0, r0, r3
 800cf7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf80:	b10b      	cbz	r3, 800cf86 <__sflush_r+0x42>
 800cf82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cf84:	1ac0      	subs	r0, r0, r3
 800cf86:	2300      	movs	r3, #0
 800cf88:	4602      	mov	r2, r0
 800cf8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf8c:	6a21      	ldr	r1, [r4, #32]
 800cf8e:	4628      	mov	r0, r5
 800cf90:	47b0      	blx	r6
 800cf92:	1c43      	adds	r3, r0, #1
 800cf94:	89a3      	ldrh	r3, [r4, #12]
 800cf96:	d106      	bne.n	800cfa6 <__sflush_r+0x62>
 800cf98:	6829      	ldr	r1, [r5, #0]
 800cf9a:	291d      	cmp	r1, #29
 800cf9c:	d82c      	bhi.n	800cff8 <__sflush_r+0xb4>
 800cf9e:	4a29      	ldr	r2, [pc, #164]	; (800d044 <__sflush_r+0x100>)
 800cfa0:	40ca      	lsrs	r2, r1
 800cfa2:	07d6      	lsls	r6, r2, #31
 800cfa4:	d528      	bpl.n	800cff8 <__sflush_r+0xb4>
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	6062      	str	r2, [r4, #4]
 800cfaa:	04d9      	lsls	r1, r3, #19
 800cfac:	6922      	ldr	r2, [r4, #16]
 800cfae:	6022      	str	r2, [r4, #0]
 800cfb0:	d504      	bpl.n	800cfbc <__sflush_r+0x78>
 800cfb2:	1c42      	adds	r2, r0, #1
 800cfb4:	d101      	bne.n	800cfba <__sflush_r+0x76>
 800cfb6:	682b      	ldr	r3, [r5, #0]
 800cfb8:	b903      	cbnz	r3, 800cfbc <__sflush_r+0x78>
 800cfba:	6560      	str	r0, [r4, #84]	; 0x54
 800cfbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cfbe:	602f      	str	r7, [r5, #0]
 800cfc0:	2900      	cmp	r1, #0
 800cfc2:	d0cb      	beq.n	800cf5c <__sflush_r+0x18>
 800cfc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cfc8:	4299      	cmp	r1, r3
 800cfca:	d002      	beq.n	800cfd2 <__sflush_r+0x8e>
 800cfcc:	4628      	mov	r0, r5
 800cfce:	f000 fc45 	bl	800d85c <_free_r>
 800cfd2:	2000      	movs	r0, #0
 800cfd4:	6360      	str	r0, [r4, #52]	; 0x34
 800cfd6:	e7c2      	b.n	800cf5e <__sflush_r+0x1a>
 800cfd8:	6a21      	ldr	r1, [r4, #32]
 800cfda:	2301      	movs	r3, #1
 800cfdc:	4628      	mov	r0, r5
 800cfde:	47b0      	blx	r6
 800cfe0:	1c41      	adds	r1, r0, #1
 800cfe2:	d1c7      	bne.n	800cf74 <__sflush_r+0x30>
 800cfe4:	682b      	ldr	r3, [r5, #0]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d0c4      	beq.n	800cf74 <__sflush_r+0x30>
 800cfea:	2b1d      	cmp	r3, #29
 800cfec:	d001      	beq.n	800cff2 <__sflush_r+0xae>
 800cfee:	2b16      	cmp	r3, #22
 800cff0:	d101      	bne.n	800cff6 <__sflush_r+0xb2>
 800cff2:	602f      	str	r7, [r5, #0]
 800cff4:	e7b2      	b.n	800cf5c <__sflush_r+0x18>
 800cff6:	89a3      	ldrh	r3, [r4, #12]
 800cff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cffc:	81a3      	strh	r3, [r4, #12]
 800cffe:	e7ae      	b.n	800cf5e <__sflush_r+0x1a>
 800d000:	690f      	ldr	r7, [r1, #16]
 800d002:	2f00      	cmp	r7, #0
 800d004:	d0aa      	beq.n	800cf5c <__sflush_r+0x18>
 800d006:	0793      	lsls	r3, r2, #30
 800d008:	680e      	ldr	r6, [r1, #0]
 800d00a:	bf08      	it	eq
 800d00c:	694b      	ldreq	r3, [r1, #20]
 800d00e:	600f      	str	r7, [r1, #0]
 800d010:	bf18      	it	ne
 800d012:	2300      	movne	r3, #0
 800d014:	1bf6      	subs	r6, r6, r7
 800d016:	608b      	str	r3, [r1, #8]
 800d018:	2e00      	cmp	r6, #0
 800d01a:	dd9f      	ble.n	800cf5c <__sflush_r+0x18>
 800d01c:	6a21      	ldr	r1, [r4, #32]
 800d01e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800d022:	4633      	mov	r3, r6
 800d024:	463a      	mov	r2, r7
 800d026:	4628      	mov	r0, r5
 800d028:	47e0      	blx	ip
 800d02a:	2800      	cmp	r0, #0
 800d02c:	dc06      	bgt.n	800d03c <__sflush_r+0xf8>
 800d02e:	89a3      	ldrh	r3, [r4, #12]
 800d030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d034:	81a3      	strh	r3, [r4, #12]
 800d036:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d03a:	e790      	b.n	800cf5e <__sflush_r+0x1a>
 800d03c:	4407      	add	r7, r0
 800d03e:	1a36      	subs	r6, r6, r0
 800d040:	e7ea      	b.n	800d018 <__sflush_r+0xd4>
 800d042:	bf00      	nop
 800d044:	20400001 	.word	0x20400001

0800d048 <_fflush_r>:
 800d048:	b538      	push	{r3, r4, r5, lr}
 800d04a:	690b      	ldr	r3, [r1, #16]
 800d04c:	4605      	mov	r5, r0
 800d04e:	460c      	mov	r4, r1
 800d050:	b913      	cbnz	r3, 800d058 <_fflush_r+0x10>
 800d052:	2500      	movs	r5, #0
 800d054:	4628      	mov	r0, r5
 800d056:	bd38      	pop	{r3, r4, r5, pc}
 800d058:	b118      	cbz	r0, 800d062 <_fflush_r+0x1a>
 800d05a:	6983      	ldr	r3, [r0, #24]
 800d05c:	b90b      	cbnz	r3, 800d062 <_fflush_r+0x1a>
 800d05e:	f7fe f96b 	bl	800b338 <__sinit>
 800d062:	4b14      	ldr	r3, [pc, #80]	; (800d0b4 <_fflush_r+0x6c>)
 800d064:	429c      	cmp	r4, r3
 800d066:	d11b      	bne.n	800d0a0 <_fflush_r+0x58>
 800d068:	686c      	ldr	r4, [r5, #4]
 800d06a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d0ef      	beq.n	800d052 <_fflush_r+0xa>
 800d072:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d074:	07d0      	lsls	r0, r2, #31
 800d076:	d404      	bmi.n	800d082 <_fflush_r+0x3a>
 800d078:	0599      	lsls	r1, r3, #22
 800d07a:	d402      	bmi.n	800d082 <_fflush_r+0x3a>
 800d07c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d07e:	f7fe fa1e 	bl	800b4be <__retarget_lock_acquire_recursive>
 800d082:	4628      	mov	r0, r5
 800d084:	4621      	mov	r1, r4
 800d086:	f7ff ff5d 	bl	800cf44 <__sflush_r>
 800d08a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d08c:	07da      	lsls	r2, r3, #31
 800d08e:	4605      	mov	r5, r0
 800d090:	d4e0      	bmi.n	800d054 <_fflush_r+0xc>
 800d092:	89a3      	ldrh	r3, [r4, #12]
 800d094:	059b      	lsls	r3, r3, #22
 800d096:	d4dd      	bmi.n	800d054 <_fflush_r+0xc>
 800d098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d09a:	f7fe fa11 	bl	800b4c0 <__retarget_lock_release_recursive>
 800d09e:	e7d9      	b.n	800d054 <_fflush_r+0xc>
 800d0a0:	4b05      	ldr	r3, [pc, #20]	; (800d0b8 <_fflush_r+0x70>)
 800d0a2:	429c      	cmp	r4, r3
 800d0a4:	d101      	bne.n	800d0aa <_fflush_r+0x62>
 800d0a6:	68ac      	ldr	r4, [r5, #8]
 800d0a8:	e7df      	b.n	800d06a <_fflush_r+0x22>
 800d0aa:	4b04      	ldr	r3, [pc, #16]	; (800d0bc <_fflush_r+0x74>)
 800d0ac:	429c      	cmp	r4, r3
 800d0ae:	bf08      	it	eq
 800d0b0:	68ec      	ldreq	r4, [r5, #12]
 800d0b2:	e7da      	b.n	800d06a <_fflush_r+0x22>
 800d0b4:	0800fa00 	.word	0x0800fa00
 800d0b8:	0800fa20 	.word	0x0800fa20
 800d0bc:	0800f9e0 	.word	0x0800f9e0

0800d0c0 <fiprintf>:
 800d0c0:	b40e      	push	{r1, r2, r3}
 800d0c2:	b503      	push	{r0, r1, lr}
 800d0c4:	4601      	mov	r1, r0
 800d0c6:	ab03      	add	r3, sp, #12
 800d0c8:	4805      	ldr	r0, [pc, #20]	; (800d0e0 <fiprintf+0x20>)
 800d0ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0ce:	6800      	ldr	r0, [r0, #0]
 800d0d0:	9301      	str	r3, [sp, #4]
 800d0d2:	f000 fd91 	bl	800dbf8 <_vfiprintf_r>
 800d0d6:	b002      	add	sp, #8
 800d0d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0dc:	b003      	add	sp, #12
 800d0de:	4770      	bx	lr
 800d0e0:	20000010 	.word	0x20000010

0800d0e4 <_localeconv_r>:
 800d0e4:	4800      	ldr	r0, [pc, #0]	; (800d0e8 <_localeconv_r+0x4>)
 800d0e6:	4770      	bx	lr
 800d0e8:	20000164 	.word	0x20000164

0800d0ec <_lseek_r>:
 800d0ec:	b538      	push	{r3, r4, r5, lr}
 800d0ee:	4d07      	ldr	r5, [pc, #28]	; (800d10c <_lseek_r+0x20>)
 800d0f0:	4604      	mov	r4, r0
 800d0f2:	4608      	mov	r0, r1
 800d0f4:	4611      	mov	r1, r2
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	602a      	str	r2, [r5, #0]
 800d0fa:	461a      	mov	r2, r3
 800d0fc:	f7f4 ff0a 	bl	8001f14 <_lseek>
 800d100:	1c43      	adds	r3, r0, #1
 800d102:	d102      	bne.n	800d10a <_lseek_r+0x1e>
 800d104:	682b      	ldr	r3, [r5, #0]
 800d106:	b103      	cbz	r3, 800d10a <_lseek_r+0x1e>
 800d108:	6023      	str	r3, [r4, #0]
 800d10a:	bd38      	pop	{r3, r4, r5, pc}
 800d10c:	20001d68 	.word	0x20001d68

0800d110 <malloc>:
 800d110:	4b02      	ldr	r3, [pc, #8]	; (800d11c <malloc+0xc>)
 800d112:	4601      	mov	r1, r0
 800d114:	6818      	ldr	r0, [r3, #0]
 800d116:	f7fe ba0b 	b.w	800b530 <_malloc_r>
 800d11a:	bf00      	nop
 800d11c:	20000010 	.word	0x20000010

0800d120 <__malloc_lock>:
 800d120:	4801      	ldr	r0, [pc, #4]	; (800d128 <__malloc_lock+0x8>)
 800d122:	f7fe b9cc 	b.w	800b4be <__retarget_lock_acquire_recursive>
 800d126:	bf00      	nop
 800d128:	20001d5c 	.word	0x20001d5c

0800d12c <__malloc_unlock>:
 800d12c:	4801      	ldr	r0, [pc, #4]	; (800d134 <__malloc_unlock+0x8>)
 800d12e:	f7fe b9c7 	b.w	800b4c0 <__retarget_lock_release_recursive>
 800d132:	bf00      	nop
 800d134:	20001d5c 	.word	0x20001d5c

0800d138 <_Balloc>:
 800d138:	b570      	push	{r4, r5, r6, lr}
 800d13a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d13c:	4604      	mov	r4, r0
 800d13e:	460d      	mov	r5, r1
 800d140:	b976      	cbnz	r6, 800d160 <_Balloc+0x28>
 800d142:	2010      	movs	r0, #16
 800d144:	f7ff ffe4 	bl	800d110 <malloc>
 800d148:	4602      	mov	r2, r0
 800d14a:	6260      	str	r0, [r4, #36]	; 0x24
 800d14c:	b920      	cbnz	r0, 800d158 <_Balloc+0x20>
 800d14e:	4b18      	ldr	r3, [pc, #96]	; (800d1b0 <_Balloc+0x78>)
 800d150:	4818      	ldr	r0, [pc, #96]	; (800d1b4 <_Balloc+0x7c>)
 800d152:	2166      	movs	r1, #102	; 0x66
 800d154:	f7ff f850 	bl	800c1f8 <__assert_func>
 800d158:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d15c:	6006      	str	r6, [r0, #0]
 800d15e:	60c6      	str	r6, [r0, #12]
 800d160:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d162:	68f3      	ldr	r3, [r6, #12]
 800d164:	b183      	cbz	r3, 800d188 <_Balloc+0x50>
 800d166:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d168:	68db      	ldr	r3, [r3, #12]
 800d16a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d16e:	b9b8      	cbnz	r0, 800d1a0 <_Balloc+0x68>
 800d170:	2101      	movs	r1, #1
 800d172:	fa01 f605 	lsl.w	r6, r1, r5
 800d176:	1d72      	adds	r2, r6, #5
 800d178:	0092      	lsls	r2, r2, #2
 800d17a:	4620      	mov	r0, r4
 800d17c:	f000 fb5a 	bl	800d834 <_calloc_r>
 800d180:	b160      	cbz	r0, 800d19c <_Balloc+0x64>
 800d182:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d186:	e00e      	b.n	800d1a6 <_Balloc+0x6e>
 800d188:	2221      	movs	r2, #33	; 0x21
 800d18a:	2104      	movs	r1, #4
 800d18c:	4620      	mov	r0, r4
 800d18e:	f000 fb51 	bl	800d834 <_calloc_r>
 800d192:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d194:	60f0      	str	r0, [r6, #12]
 800d196:	68db      	ldr	r3, [r3, #12]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d1e4      	bne.n	800d166 <_Balloc+0x2e>
 800d19c:	2000      	movs	r0, #0
 800d19e:	bd70      	pop	{r4, r5, r6, pc}
 800d1a0:	6802      	ldr	r2, [r0, #0]
 800d1a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d1ac:	e7f7      	b.n	800d19e <_Balloc+0x66>
 800d1ae:	bf00      	nop
 800d1b0:	0800fa78 	.word	0x0800fa78
 800d1b4:	0800fba1 	.word	0x0800fba1

0800d1b8 <_Bfree>:
 800d1b8:	b570      	push	{r4, r5, r6, lr}
 800d1ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d1bc:	4605      	mov	r5, r0
 800d1be:	460c      	mov	r4, r1
 800d1c0:	b976      	cbnz	r6, 800d1e0 <_Bfree+0x28>
 800d1c2:	2010      	movs	r0, #16
 800d1c4:	f7ff ffa4 	bl	800d110 <malloc>
 800d1c8:	4602      	mov	r2, r0
 800d1ca:	6268      	str	r0, [r5, #36]	; 0x24
 800d1cc:	b920      	cbnz	r0, 800d1d8 <_Bfree+0x20>
 800d1ce:	4b09      	ldr	r3, [pc, #36]	; (800d1f4 <_Bfree+0x3c>)
 800d1d0:	4809      	ldr	r0, [pc, #36]	; (800d1f8 <_Bfree+0x40>)
 800d1d2:	218a      	movs	r1, #138	; 0x8a
 800d1d4:	f7ff f810 	bl	800c1f8 <__assert_func>
 800d1d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d1dc:	6006      	str	r6, [r0, #0]
 800d1de:	60c6      	str	r6, [r0, #12]
 800d1e0:	b13c      	cbz	r4, 800d1f2 <_Bfree+0x3a>
 800d1e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d1e4:	6862      	ldr	r2, [r4, #4]
 800d1e6:	68db      	ldr	r3, [r3, #12]
 800d1e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d1ec:	6021      	str	r1, [r4, #0]
 800d1ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d1f2:	bd70      	pop	{r4, r5, r6, pc}
 800d1f4:	0800fa78 	.word	0x0800fa78
 800d1f8:	0800fba1 	.word	0x0800fba1

0800d1fc <__multadd>:
 800d1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d200:	690d      	ldr	r5, [r1, #16]
 800d202:	4607      	mov	r7, r0
 800d204:	460c      	mov	r4, r1
 800d206:	461e      	mov	r6, r3
 800d208:	f101 0c14 	add.w	ip, r1, #20
 800d20c:	2000      	movs	r0, #0
 800d20e:	f8dc 3000 	ldr.w	r3, [ip]
 800d212:	b299      	uxth	r1, r3
 800d214:	fb02 6101 	mla	r1, r2, r1, r6
 800d218:	0c1e      	lsrs	r6, r3, #16
 800d21a:	0c0b      	lsrs	r3, r1, #16
 800d21c:	fb02 3306 	mla	r3, r2, r6, r3
 800d220:	b289      	uxth	r1, r1
 800d222:	3001      	adds	r0, #1
 800d224:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d228:	4285      	cmp	r5, r0
 800d22a:	f84c 1b04 	str.w	r1, [ip], #4
 800d22e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d232:	dcec      	bgt.n	800d20e <__multadd+0x12>
 800d234:	b30e      	cbz	r6, 800d27a <__multadd+0x7e>
 800d236:	68a3      	ldr	r3, [r4, #8]
 800d238:	42ab      	cmp	r3, r5
 800d23a:	dc19      	bgt.n	800d270 <__multadd+0x74>
 800d23c:	6861      	ldr	r1, [r4, #4]
 800d23e:	4638      	mov	r0, r7
 800d240:	3101      	adds	r1, #1
 800d242:	f7ff ff79 	bl	800d138 <_Balloc>
 800d246:	4680      	mov	r8, r0
 800d248:	b928      	cbnz	r0, 800d256 <__multadd+0x5a>
 800d24a:	4602      	mov	r2, r0
 800d24c:	4b0c      	ldr	r3, [pc, #48]	; (800d280 <__multadd+0x84>)
 800d24e:	480d      	ldr	r0, [pc, #52]	; (800d284 <__multadd+0x88>)
 800d250:	21b5      	movs	r1, #181	; 0xb5
 800d252:	f7fe ffd1 	bl	800c1f8 <__assert_func>
 800d256:	6922      	ldr	r2, [r4, #16]
 800d258:	3202      	adds	r2, #2
 800d25a:	f104 010c 	add.w	r1, r4, #12
 800d25e:	0092      	lsls	r2, r2, #2
 800d260:	300c      	adds	r0, #12
 800d262:	f7fe f92e 	bl	800b4c2 <memcpy>
 800d266:	4621      	mov	r1, r4
 800d268:	4638      	mov	r0, r7
 800d26a:	f7ff ffa5 	bl	800d1b8 <_Bfree>
 800d26e:	4644      	mov	r4, r8
 800d270:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d274:	3501      	adds	r5, #1
 800d276:	615e      	str	r6, [r3, #20]
 800d278:	6125      	str	r5, [r4, #16]
 800d27a:	4620      	mov	r0, r4
 800d27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d280:	0800fb90 	.word	0x0800fb90
 800d284:	0800fba1 	.word	0x0800fba1

0800d288 <__hi0bits>:
 800d288:	0c02      	lsrs	r2, r0, #16
 800d28a:	0412      	lsls	r2, r2, #16
 800d28c:	4603      	mov	r3, r0
 800d28e:	b9ca      	cbnz	r2, 800d2c4 <__hi0bits+0x3c>
 800d290:	0403      	lsls	r3, r0, #16
 800d292:	2010      	movs	r0, #16
 800d294:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d298:	bf04      	itt	eq
 800d29a:	021b      	lsleq	r3, r3, #8
 800d29c:	3008      	addeq	r0, #8
 800d29e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d2a2:	bf04      	itt	eq
 800d2a4:	011b      	lsleq	r3, r3, #4
 800d2a6:	3004      	addeq	r0, #4
 800d2a8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d2ac:	bf04      	itt	eq
 800d2ae:	009b      	lsleq	r3, r3, #2
 800d2b0:	3002      	addeq	r0, #2
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	db05      	blt.n	800d2c2 <__hi0bits+0x3a>
 800d2b6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800d2ba:	f100 0001 	add.w	r0, r0, #1
 800d2be:	bf08      	it	eq
 800d2c0:	2020      	moveq	r0, #32
 800d2c2:	4770      	bx	lr
 800d2c4:	2000      	movs	r0, #0
 800d2c6:	e7e5      	b.n	800d294 <__hi0bits+0xc>

0800d2c8 <__lo0bits>:
 800d2c8:	6803      	ldr	r3, [r0, #0]
 800d2ca:	4602      	mov	r2, r0
 800d2cc:	f013 0007 	ands.w	r0, r3, #7
 800d2d0:	d00b      	beq.n	800d2ea <__lo0bits+0x22>
 800d2d2:	07d9      	lsls	r1, r3, #31
 800d2d4:	d421      	bmi.n	800d31a <__lo0bits+0x52>
 800d2d6:	0798      	lsls	r0, r3, #30
 800d2d8:	bf49      	itett	mi
 800d2da:	085b      	lsrmi	r3, r3, #1
 800d2dc:	089b      	lsrpl	r3, r3, #2
 800d2de:	2001      	movmi	r0, #1
 800d2e0:	6013      	strmi	r3, [r2, #0]
 800d2e2:	bf5c      	itt	pl
 800d2e4:	6013      	strpl	r3, [r2, #0]
 800d2e6:	2002      	movpl	r0, #2
 800d2e8:	4770      	bx	lr
 800d2ea:	b299      	uxth	r1, r3
 800d2ec:	b909      	cbnz	r1, 800d2f2 <__lo0bits+0x2a>
 800d2ee:	0c1b      	lsrs	r3, r3, #16
 800d2f0:	2010      	movs	r0, #16
 800d2f2:	b2d9      	uxtb	r1, r3
 800d2f4:	b909      	cbnz	r1, 800d2fa <__lo0bits+0x32>
 800d2f6:	3008      	adds	r0, #8
 800d2f8:	0a1b      	lsrs	r3, r3, #8
 800d2fa:	0719      	lsls	r1, r3, #28
 800d2fc:	bf04      	itt	eq
 800d2fe:	091b      	lsreq	r3, r3, #4
 800d300:	3004      	addeq	r0, #4
 800d302:	0799      	lsls	r1, r3, #30
 800d304:	bf04      	itt	eq
 800d306:	089b      	lsreq	r3, r3, #2
 800d308:	3002      	addeq	r0, #2
 800d30a:	07d9      	lsls	r1, r3, #31
 800d30c:	d403      	bmi.n	800d316 <__lo0bits+0x4e>
 800d30e:	085b      	lsrs	r3, r3, #1
 800d310:	f100 0001 	add.w	r0, r0, #1
 800d314:	d003      	beq.n	800d31e <__lo0bits+0x56>
 800d316:	6013      	str	r3, [r2, #0]
 800d318:	4770      	bx	lr
 800d31a:	2000      	movs	r0, #0
 800d31c:	4770      	bx	lr
 800d31e:	2020      	movs	r0, #32
 800d320:	4770      	bx	lr
	...

0800d324 <__i2b>:
 800d324:	b510      	push	{r4, lr}
 800d326:	460c      	mov	r4, r1
 800d328:	2101      	movs	r1, #1
 800d32a:	f7ff ff05 	bl	800d138 <_Balloc>
 800d32e:	4602      	mov	r2, r0
 800d330:	b928      	cbnz	r0, 800d33e <__i2b+0x1a>
 800d332:	4b05      	ldr	r3, [pc, #20]	; (800d348 <__i2b+0x24>)
 800d334:	4805      	ldr	r0, [pc, #20]	; (800d34c <__i2b+0x28>)
 800d336:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d33a:	f7fe ff5d 	bl	800c1f8 <__assert_func>
 800d33e:	2301      	movs	r3, #1
 800d340:	6144      	str	r4, [r0, #20]
 800d342:	6103      	str	r3, [r0, #16]
 800d344:	bd10      	pop	{r4, pc}
 800d346:	bf00      	nop
 800d348:	0800fb90 	.word	0x0800fb90
 800d34c:	0800fba1 	.word	0x0800fba1

0800d350 <__multiply>:
 800d350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d354:	4691      	mov	r9, r2
 800d356:	690a      	ldr	r2, [r1, #16]
 800d358:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d35c:	429a      	cmp	r2, r3
 800d35e:	bfb8      	it	lt
 800d360:	460b      	movlt	r3, r1
 800d362:	460c      	mov	r4, r1
 800d364:	bfbc      	itt	lt
 800d366:	464c      	movlt	r4, r9
 800d368:	4699      	movlt	r9, r3
 800d36a:	6927      	ldr	r7, [r4, #16]
 800d36c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d370:	68a3      	ldr	r3, [r4, #8]
 800d372:	6861      	ldr	r1, [r4, #4]
 800d374:	eb07 060a 	add.w	r6, r7, sl
 800d378:	42b3      	cmp	r3, r6
 800d37a:	b085      	sub	sp, #20
 800d37c:	bfb8      	it	lt
 800d37e:	3101      	addlt	r1, #1
 800d380:	f7ff feda 	bl	800d138 <_Balloc>
 800d384:	b930      	cbnz	r0, 800d394 <__multiply+0x44>
 800d386:	4602      	mov	r2, r0
 800d388:	4b43      	ldr	r3, [pc, #268]	; (800d498 <__multiply+0x148>)
 800d38a:	4844      	ldr	r0, [pc, #272]	; (800d49c <__multiply+0x14c>)
 800d38c:	f240 115d 	movw	r1, #349	; 0x15d
 800d390:	f7fe ff32 	bl	800c1f8 <__assert_func>
 800d394:	f100 0514 	add.w	r5, r0, #20
 800d398:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d39c:	462b      	mov	r3, r5
 800d39e:	2200      	movs	r2, #0
 800d3a0:	4543      	cmp	r3, r8
 800d3a2:	d321      	bcc.n	800d3e8 <__multiply+0x98>
 800d3a4:	f104 0314 	add.w	r3, r4, #20
 800d3a8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d3ac:	f109 0314 	add.w	r3, r9, #20
 800d3b0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d3b4:	9202      	str	r2, [sp, #8]
 800d3b6:	1b3a      	subs	r2, r7, r4
 800d3b8:	3a15      	subs	r2, #21
 800d3ba:	f022 0203 	bic.w	r2, r2, #3
 800d3be:	3204      	adds	r2, #4
 800d3c0:	f104 0115 	add.w	r1, r4, #21
 800d3c4:	428f      	cmp	r7, r1
 800d3c6:	bf38      	it	cc
 800d3c8:	2204      	movcc	r2, #4
 800d3ca:	9201      	str	r2, [sp, #4]
 800d3cc:	9a02      	ldr	r2, [sp, #8]
 800d3ce:	9303      	str	r3, [sp, #12]
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	d80c      	bhi.n	800d3ee <__multiply+0x9e>
 800d3d4:	2e00      	cmp	r6, #0
 800d3d6:	dd03      	ble.n	800d3e0 <__multiply+0x90>
 800d3d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d059      	beq.n	800d494 <__multiply+0x144>
 800d3e0:	6106      	str	r6, [r0, #16]
 800d3e2:	b005      	add	sp, #20
 800d3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3e8:	f843 2b04 	str.w	r2, [r3], #4
 800d3ec:	e7d8      	b.n	800d3a0 <__multiply+0x50>
 800d3ee:	f8b3 a000 	ldrh.w	sl, [r3]
 800d3f2:	f1ba 0f00 	cmp.w	sl, #0
 800d3f6:	d023      	beq.n	800d440 <__multiply+0xf0>
 800d3f8:	f104 0e14 	add.w	lr, r4, #20
 800d3fc:	46a9      	mov	r9, r5
 800d3fe:	f04f 0c00 	mov.w	ip, #0
 800d402:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d406:	f8d9 1000 	ldr.w	r1, [r9]
 800d40a:	fa1f fb82 	uxth.w	fp, r2
 800d40e:	b289      	uxth	r1, r1
 800d410:	fb0a 110b 	mla	r1, sl, fp, r1
 800d414:	4461      	add	r1, ip
 800d416:	f8d9 c000 	ldr.w	ip, [r9]
 800d41a:	0c12      	lsrs	r2, r2, #16
 800d41c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800d420:	fb0a c202 	mla	r2, sl, r2, ip
 800d424:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d428:	b289      	uxth	r1, r1
 800d42a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d42e:	4577      	cmp	r7, lr
 800d430:	f849 1b04 	str.w	r1, [r9], #4
 800d434:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d438:	d8e3      	bhi.n	800d402 <__multiply+0xb2>
 800d43a:	9a01      	ldr	r2, [sp, #4]
 800d43c:	f845 c002 	str.w	ip, [r5, r2]
 800d440:	9a03      	ldr	r2, [sp, #12]
 800d442:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d446:	3304      	adds	r3, #4
 800d448:	f1b9 0f00 	cmp.w	r9, #0
 800d44c:	d020      	beq.n	800d490 <__multiply+0x140>
 800d44e:	6829      	ldr	r1, [r5, #0]
 800d450:	f104 0c14 	add.w	ip, r4, #20
 800d454:	46ae      	mov	lr, r5
 800d456:	f04f 0a00 	mov.w	sl, #0
 800d45a:	f8bc b000 	ldrh.w	fp, [ip]
 800d45e:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d462:	fb09 220b 	mla	r2, r9, fp, r2
 800d466:	4492      	add	sl, r2
 800d468:	b289      	uxth	r1, r1
 800d46a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d46e:	f84e 1b04 	str.w	r1, [lr], #4
 800d472:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d476:	f8be 1000 	ldrh.w	r1, [lr]
 800d47a:	0c12      	lsrs	r2, r2, #16
 800d47c:	fb09 1102 	mla	r1, r9, r2, r1
 800d480:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d484:	4567      	cmp	r7, ip
 800d486:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d48a:	d8e6      	bhi.n	800d45a <__multiply+0x10a>
 800d48c:	9a01      	ldr	r2, [sp, #4]
 800d48e:	50a9      	str	r1, [r5, r2]
 800d490:	3504      	adds	r5, #4
 800d492:	e79b      	b.n	800d3cc <__multiply+0x7c>
 800d494:	3e01      	subs	r6, #1
 800d496:	e79d      	b.n	800d3d4 <__multiply+0x84>
 800d498:	0800fb90 	.word	0x0800fb90
 800d49c:	0800fba1 	.word	0x0800fba1

0800d4a0 <__pow5mult>:
 800d4a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4a4:	4615      	mov	r5, r2
 800d4a6:	f012 0203 	ands.w	r2, r2, #3
 800d4aa:	4606      	mov	r6, r0
 800d4ac:	460f      	mov	r7, r1
 800d4ae:	d007      	beq.n	800d4c0 <__pow5mult+0x20>
 800d4b0:	4c25      	ldr	r4, [pc, #148]	; (800d548 <__pow5mult+0xa8>)
 800d4b2:	3a01      	subs	r2, #1
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d4ba:	f7ff fe9f 	bl	800d1fc <__multadd>
 800d4be:	4607      	mov	r7, r0
 800d4c0:	10ad      	asrs	r5, r5, #2
 800d4c2:	d03d      	beq.n	800d540 <__pow5mult+0xa0>
 800d4c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d4c6:	b97c      	cbnz	r4, 800d4e8 <__pow5mult+0x48>
 800d4c8:	2010      	movs	r0, #16
 800d4ca:	f7ff fe21 	bl	800d110 <malloc>
 800d4ce:	4602      	mov	r2, r0
 800d4d0:	6270      	str	r0, [r6, #36]	; 0x24
 800d4d2:	b928      	cbnz	r0, 800d4e0 <__pow5mult+0x40>
 800d4d4:	4b1d      	ldr	r3, [pc, #116]	; (800d54c <__pow5mult+0xac>)
 800d4d6:	481e      	ldr	r0, [pc, #120]	; (800d550 <__pow5mult+0xb0>)
 800d4d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d4dc:	f7fe fe8c 	bl	800c1f8 <__assert_func>
 800d4e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d4e4:	6004      	str	r4, [r0, #0]
 800d4e6:	60c4      	str	r4, [r0, #12]
 800d4e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d4ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d4f0:	b94c      	cbnz	r4, 800d506 <__pow5mult+0x66>
 800d4f2:	f240 2171 	movw	r1, #625	; 0x271
 800d4f6:	4630      	mov	r0, r6
 800d4f8:	f7ff ff14 	bl	800d324 <__i2b>
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	f8c8 0008 	str.w	r0, [r8, #8]
 800d502:	4604      	mov	r4, r0
 800d504:	6003      	str	r3, [r0, #0]
 800d506:	f04f 0900 	mov.w	r9, #0
 800d50a:	07eb      	lsls	r3, r5, #31
 800d50c:	d50a      	bpl.n	800d524 <__pow5mult+0x84>
 800d50e:	4639      	mov	r1, r7
 800d510:	4622      	mov	r2, r4
 800d512:	4630      	mov	r0, r6
 800d514:	f7ff ff1c 	bl	800d350 <__multiply>
 800d518:	4639      	mov	r1, r7
 800d51a:	4680      	mov	r8, r0
 800d51c:	4630      	mov	r0, r6
 800d51e:	f7ff fe4b 	bl	800d1b8 <_Bfree>
 800d522:	4647      	mov	r7, r8
 800d524:	106d      	asrs	r5, r5, #1
 800d526:	d00b      	beq.n	800d540 <__pow5mult+0xa0>
 800d528:	6820      	ldr	r0, [r4, #0]
 800d52a:	b938      	cbnz	r0, 800d53c <__pow5mult+0x9c>
 800d52c:	4622      	mov	r2, r4
 800d52e:	4621      	mov	r1, r4
 800d530:	4630      	mov	r0, r6
 800d532:	f7ff ff0d 	bl	800d350 <__multiply>
 800d536:	6020      	str	r0, [r4, #0]
 800d538:	f8c0 9000 	str.w	r9, [r0]
 800d53c:	4604      	mov	r4, r0
 800d53e:	e7e4      	b.n	800d50a <__pow5mult+0x6a>
 800d540:	4638      	mov	r0, r7
 800d542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d546:	bf00      	nop
 800d548:	0800fcf0 	.word	0x0800fcf0
 800d54c:	0800fa78 	.word	0x0800fa78
 800d550:	0800fba1 	.word	0x0800fba1

0800d554 <__lshift>:
 800d554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d558:	460c      	mov	r4, r1
 800d55a:	6849      	ldr	r1, [r1, #4]
 800d55c:	6923      	ldr	r3, [r4, #16]
 800d55e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d562:	68a3      	ldr	r3, [r4, #8]
 800d564:	4607      	mov	r7, r0
 800d566:	4691      	mov	r9, r2
 800d568:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d56c:	f108 0601 	add.w	r6, r8, #1
 800d570:	42b3      	cmp	r3, r6
 800d572:	db0b      	blt.n	800d58c <__lshift+0x38>
 800d574:	4638      	mov	r0, r7
 800d576:	f7ff fddf 	bl	800d138 <_Balloc>
 800d57a:	4605      	mov	r5, r0
 800d57c:	b948      	cbnz	r0, 800d592 <__lshift+0x3e>
 800d57e:	4602      	mov	r2, r0
 800d580:	4b2a      	ldr	r3, [pc, #168]	; (800d62c <__lshift+0xd8>)
 800d582:	482b      	ldr	r0, [pc, #172]	; (800d630 <__lshift+0xdc>)
 800d584:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d588:	f7fe fe36 	bl	800c1f8 <__assert_func>
 800d58c:	3101      	adds	r1, #1
 800d58e:	005b      	lsls	r3, r3, #1
 800d590:	e7ee      	b.n	800d570 <__lshift+0x1c>
 800d592:	2300      	movs	r3, #0
 800d594:	f100 0114 	add.w	r1, r0, #20
 800d598:	f100 0210 	add.w	r2, r0, #16
 800d59c:	4618      	mov	r0, r3
 800d59e:	4553      	cmp	r3, sl
 800d5a0:	db37      	blt.n	800d612 <__lshift+0xbe>
 800d5a2:	6920      	ldr	r0, [r4, #16]
 800d5a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d5a8:	f104 0314 	add.w	r3, r4, #20
 800d5ac:	f019 091f 	ands.w	r9, r9, #31
 800d5b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d5b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d5b8:	d02f      	beq.n	800d61a <__lshift+0xc6>
 800d5ba:	f1c9 0e20 	rsb	lr, r9, #32
 800d5be:	468a      	mov	sl, r1
 800d5c0:	f04f 0c00 	mov.w	ip, #0
 800d5c4:	681a      	ldr	r2, [r3, #0]
 800d5c6:	fa02 f209 	lsl.w	r2, r2, r9
 800d5ca:	ea42 020c 	orr.w	r2, r2, ip
 800d5ce:	f84a 2b04 	str.w	r2, [sl], #4
 800d5d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5d6:	4298      	cmp	r0, r3
 800d5d8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d5dc:	d8f2      	bhi.n	800d5c4 <__lshift+0x70>
 800d5de:	1b03      	subs	r3, r0, r4
 800d5e0:	3b15      	subs	r3, #21
 800d5e2:	f023 0303 	bic.w	r3, r3, #3
 800d5e6:	3304      	adds	r3, #4
 800d5e8:	f104 0215 	add.w	r2, r4, #21
 800d5ec:	4290      	cmp	r0, r2
 800d5ee:	bf38      	it	cc
 800d5f0:	2304      	movcc	r3, #4
 800d5f2:	f841 c003 	str.w	ip, [r1, r3]
 800d5f6:	f1bc 0f00 	cmp.w	ip, #0
 800d5fa:	d001      	beq.n	800d600 <__lshift+0xac>
 800d5fc:	f108 0602 	add.w	r6, r8, #2
 800d600:	3e01      	subs	r6, #1
 800d602:	4638      	mov	r0, r7
 800d604:	612e      	str	r6, [r5, #16]
 800d606:	4621      	mov	r1, r4
 800d608:	f7ff fdd6 	bl	800d1b8 <_Bfree>
 800d60c:	4628      	mov	r0, r5
 800d60e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d612:	f842 0f04 	str.w	r0, [r2, #4]!
 800d616:	3301      	adds	r3, #1
 800d618:	e7c1      	b.n	800d59e <__lshift+0x4a>
 800d61a:	3904      	subs	r1, #4
 800d61c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d620:	f841 2f04 	str.w	r2, [r1, #4]!
 800d624:	4298      	cmp	r0, r3
 800d626:	d8f9      	bhi.n	800d61c <__lshift+0xc8>
 800d628:	e7ea      	b.n	800d600 <__lshift+0xac>
 800d62a:	bf00      	nop
 800d62c:	0800fb90 	.word	0x0800fb90
 800d630:	0800fba1 	.word	0x0800fba1

0800d634 <__mcmp>:
 800d634:	690a      	ldr	r2, [r1, #16]
 800d636:	4603      	mov	r3, r0
 800d638:	6900      	ldr	r0, [r0, #16]
 800d63a:	1a80      	subs	r0, r0, r2
 800d63c:	b530      	push	{r4, r5, lr}
 800d63e:	d10d      	bne.n	800d65c <__mcmp+0x28>
 800d640:	3314      	adds	r3, #20
 800d642:	3114      	adds	r1, #20
 800d644:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d648:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d64c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d650:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d654:	4295      	cmp	r5, r2
 800d656:	d002      	beq.n	800d65e <__mcmp+0x2a>
 800d658:	d304      	bcc.n	800d664 <__mcmp+0x30>
 800d65a:	2001      	movs	r0, #1
 800d65c:	bd30      	pop	{r4, r5, pc}
 800d65e:	42a3      	cmp	r3, r4
 800d660:	d3f4      	bcc.n	800d64c <__mcmp+0x18>
 800d662:	e7fb      	b.n	800d65c <__mcmp+0x28>
 800d664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d668:	e7f8      	b.n	800d65c <__mcmp+0x28>
	...

0800d66c <__mdiff>:
 800d66c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d670:	460d      	mov	r5, r1
 800d672:	4607      	mov	r7, r0
 800d674:	4611      	mov	r1, r2
 800d676:	4628      	mov	r0, r5
 800d678:	4614      	mov	r4, r2
 800d67a:	f7ff ffdb 	bl	800d634 <__mcmp>
 800d67e:	1e06      	subs	r6, r0, #0
 800d680:	d111      	bne.n	800d6a6 <__mdiff+0x3a>
 800d682:	4631      	mov	r1, r6
 800d684:	4638      	mov	r0, r7
 800d686:	f7ff fd57 	bl	800d138 <_Balloc>
 800d68a:	4602      	mov	r2, r0
 800d68c:	b928      	cbnz	r0, 800d69a <__mdiff+0x2e>
 800d68e:	4b39      	ldr	r3, [pc, #228]	; (800d774 <__mdiff+0x108>)
 800d690:	f240 2132 	movw	r1, #562	; 0x232
 800d694:	4838      	ldr	r0, [pc, #224]	; (800d778 <__mdiff+0x10c>)
 800d696:	f7fe fdaf 	bl	800c1f8 <__assert_func>
 800d69a:	2301      	movs	r3, #1
 800d69c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d6a0:	4610      	mov	r0, r2
 800d6a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6a6:	bfa4      	itt	ge
 800d6a8:	4623      	movge	r3, r4
 800d6aa:	462c      	movge	r4, r5
 800d6ac:	4638      	mov	r0, r7
 800d6ae:	6861      	ldr	r1, [r4, #4]
 800d6b0:	bfa6      	itte	ge
 800d6b2:	461d      	movge	r5, r3
 800d6b4:	2600      	movge	r6, #0
 800d6b6:	2601      	movlt	r6, #1
 800d6b8:	f7ff fd3e 	bl	800d138 <_Balloc>
 800d6bc:	4602      	mov	r2, r0
 800d6be:	b918      	cbnz	r0, 800d6c8 <__mdiff+0x5c>
 800d6c0:	4b2c      	ldr	r3, [pc, #176]	; (800d774 <__mdiff+0x108>)
 800d6c2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d6c6:	e7e5      	b.n	800d694 <__mdiff+0x28>
 800d6c8:	6927      	ldr	r7, [r4, #16]
 800d6ca:	60c6      	str	r6, [r0, #12]
 800d6cc:	692e      	ldr	r6, [r5, #16]
 800d6ce:	f104 0014 	add.w	r0, r4, #20
 800d6d2:	f105 0914 	add.w	r9, r5, #20
 800d6d6:	f102 0e14 	add.w	lr, r2, #20
 800d6da:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 800d6de:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d6e2:	3410      	adds	r4, #16
 800d6e4:	46f2      	mov	sl, lr
 800d6e6:	2100      	movs	r1, #0
 800d6e8:	f859 3b04 	ldr.w	r3, [r9], #4
 800d6ec:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800d6f0:	fa1f f883 	uxth.w	r8, r3
 800d6f4:	fa11 f18b 	uxtah	r1, r1, fp
 800d6f8:	0c1b      	lsrs	r3, r3, #16
 800d6fa:	eba1 0808 	sub.w	r8, r1, r8
 800d6fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d702:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d706:	fa1f f888 	uxth.w	r8, r8
 800d70a:	1419      	asrs	r1, r3, #16
 800d70c:	454e      	cmp	r6, r9
 800d70e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d712:	f84a 3b04 	str.w	r3, [sl], #4
 800d716:	d8e7      	bhi.n	800d6e8 <__mdiff+0x7c>
 800d718:	1b73      	subs	r3, r6, r5
 800d71a:	3b15      	subs	r3, #21
 800d71c:	f023 0303 	bic.w	r3, r3, #3
 800d720:	3304      	adds	r3, #4
 800d722:	3515      	adds	r5, #21
 800d724:	42ae      	cmp	r6, r5
 800d726:	bf38      	it	cc
 800d728:	2304      	movcc	r3, #4
 800d72a:	4418      	add	r0, r3
 800d72c:	4473      	add	r3, lr
 800d72e:	469e      	mov	lr, r3
 800d730:	4606      	mov	r6, r0
 800d732:	4566      	cmp	r6, ip
 800d734:	d30e      	bcc.n	800d754 <__mdiff+0xe8>
 800d736:	f10c 0103 	add.w	r1, ip, #3
 800d73a:	1a09      	subs	r1, r1, r0
 800d73c:	f021 0103 	bic.w	r1, r1, #3
 800d740:	3803      	subs	r0, #3
 800d742:	4584      	cmp	ip, r0
 800d744:	bf38      	it	cc
 800d746:	2100      	movcc	r1, #0
 800d748:	4419      	add	r1, r3
 800d74a:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800d74e:	b17b      	cbz	r3, 800d770 <__mdiff+0x104>
 800d750:	6117      	str	r7, [r2, #16]
 800d752:	e7a5      	b.n	800d6a0 <__mdiff+0x34>
 800d754:	f856 8b04 	ldr.w	r8, [r6], #4
 800d758:	fa11 f488 	uxtah	r4, r1, r8
 800d75c:	1425      	asrs	r5, r4, #16
 800d75e:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 800d762:	b2a4      	uxth	r4, r4
 800d764:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800d768:	f84e 4b04 	str.w	r4, [lr], #4
 800d76c:	1429      	asrs	r1, r5, #16
 800d76e:	e7e0      	b.n	800d732 <__mdiff+0xc6>
 800d770:	3f01      	subs	r7, #1
 800d772:	e7ea      	b.n	800d74a <__mdiff+0xde>
 800d774:	0800fb90 	.word	0x0800fb90
 800d778:	0800fba1 	.word	0x0800fba1

0800d77c <__d2b>:
 800d77c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d780:	2101      	movs	r1, #1
 800d782:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800d786:	4690      	mov	r8, r2
 800d788:	461d      	mov	r5, r3
 800d78a:	f7ff fcd5 	bl	800d138 <_Balloc>
 800d78e:	4604      	mov	r4, r0
 800d790:	b930      	cbnz	r0, 800d7a0 <__d2b+0x24>
 800d792:	4602      	mov	r2, r0
 800d794:	4b25      	ldr	r3, [pc, #148]	; (800d82c <__d2b+0xb0>)
 800d796:	4826      	ldr	r0, [pc, #152]	; (800d830 <__d2b+0xb4>)
 800d798:	f240 310a 	movw	r1, #778	; 0x30a
 800d79c:	f7fe fd2c 	bl	800c1f8 <__assert_func>
 800d7a0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800d7a4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800d7a8:	bb2d      	cbnz	r5, 800d7f6 <__d2b+0x7a>
 800d7aa:	9301      	str	r3, [sp, #4]
 800d7ac:	f1b8 0300 	subs.w	r3, r8, #0
 800d7b0:	d026      	beq.n	800d800 <__d2b+0x84>
 800d7b2:	4668      	mov	r0, sp
 800d7b4:	9300      	str	r3, [sp, #0]
 800d7b6:	f7ff fd87 	bl	800d2c8 <__lo0bits>
 800d7ba:	9900      	ldr	r1, [sp, #0]
 800d7bc:	b1f0      	cbz	r0, 800d7fc <__d2b+0x80>
 800d7be:	9a01      	ldr	r2, [sp, #4]
 800d7c0:	f1c0 0320 	rsb	r3, r0, #32
 800d7c4:	fa02 f303 	lsl.w	r3, r2, r3
 800d7c8:	430b      	orrs	r3, r1
 800d7ca:	40c2      	lsrs	r2, r0
 800d7cc:	6163      	str	r3, [r4, #20]
 800d7ce:	9201      	str	r2, [sp, #4]
 800d7d0:	9b01      	ldr	r3, [sp, #4]
 800d7d2:	61a3      	str	r3, [r4, #24]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	bf14      	ite	ne
 800d7d8:	2102      	movne	r1, #2
 800d7da:	2101      	moveq	r1, #1
 800d7dc:	6121      	str	r1, [r4, #16]
 800d7de:	b1c5      	cbz	r5, 800d812 <__d2b+0x96>
 800d7e0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d7e4:	4405      	add	r5, r0
 800d7e6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d7ea:	603d      	str	r5, [r7, #0]
 800d7ec:	6030      	str	r0, [r6, #0]
 800d7ee:	4620      	mov	r0, r4
 800d7f0:	b002      	add	sp, #8
 800d7f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d7fa:	e7d6      	b.n	800d7aa <__d2b+0x2e>
 800d7fc:	6161      	str	r1, [r4, #20]
 800d7fe:	e7e7      	b.n	800d7d0 <__d2b+0x54>
 800d800:	a801      	add	r0, sp, #4
 800d802:	f7ff fd61 	bl	800d2c8 <__lo0bits>
 800d806:	9b01      	ldr	r3, [sp, #4]
 800d808:	6163      	str	r3, [r4, #20]
 800d80a:	2101      	movs	r1, #1
 800d80c:	6121      	str	r1, [r4, #16]
 800d80e:	3020      	adds	r0, #32
 800d810:	e7e5      	b.n	800d7de <__d2b+0x62>
 800d812:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800d816:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d81a:	6038      	str	r0, [r7, #0]
 800d81c:	6918      	ldr	r0, [r3, #16]
 800d81e:	f7ff fd33 	bl	800d288 <__hi0bits>
 800d822:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800d826:	6031      	str	r1, [r6, #0]
 800d828:	e7e1      	b.n	800d7ee <__d2b+0x72>
 800d82a:	bf00      	nop
 800d82c:	0800fb90 	.word	0x0800fb90
 800d830:	0800fba1 	.word	0x0800fba1

0800d834 <_calloc_r>:
 800d834:	b570      	push	{r4, r5, r6, lr}
 800d836:	fba1 5402 	umull	r5, r4, r1, r2
 800d83a:	b934      	cbnz	r4, 800d84a <_calloc_r+0x16>
 800d83c:	4629      	mov	r1, r5
 800d83e:	f7fd fe77 	bl	800b530 <_malloc_r>
 800d842:	4606      	mov	r6, r0
 800d844:	b928      	cbnz	r0, 800d852 <_calloc_r+0x1e>
 800d846:	4630      	mov	r0, r6
 800d848:	bd70      	pop	{r4, r5, r6, pc}
 800d84a:	220c      	movs	r2, #12
 800d84c:	6002      	str	r2, [r0, #0]
 800d84e:	2600      	movs	r6, #0
 800d850:	e7f9      	b.n	800d846 <_calloc_r+0x12>
 800d852:	462a      	mov	r2, r5
 800d854:	4621      	mov	r1, r4
 800d856:	f7fd fe42 	bl	800b4de <memset>
 800d85a:	e7f4      	b.n	800d846 <_calloc_r+0x12>

0800d85c <_free_r>:
 800d85c:	b538      	push	{r3, r4, r5, lr}
 800d85e:	4605      	mov	r5, r0
 800d860:	2900      	cmp	r1, #0
 800d862:	d041      	beq.n	800d8e8 <_free_r+0x8c>
 800d864:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d868:	1f0c      	subs	r4, r1, #4
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	bfb8      	it	lt
 800d86e:	18e4      	addlt	r4, r4, r3
 800d870:	f7ff fc56 	bl	800d120 <__malloc_lock>
 800d874:	4a1d      	ldr	r2, [pc, #116]	; (800d8ec <_free_r+0x90>)
 800d876:	6813      	ldr	r3, [r2, #0]
 800d878:	b933      	cbnz	r3, 800d888 <_free_r+0x2c>
 800d87a:	6063      	str	r3, [r4, #4]
 800d87c:	6014      	str	r4, [r2, #0]
 800d87e:	4628      	mov	r0, r5
 800d880:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d884:	f7ff bc52 	b.w	800d12c <__malloc_unlock>
 800d888:	42a3      	cmp	r3, r4
 800d88a:	d908      	bls.n	800d89e <_free_r+0x42>
 800d88c:	6820      	ldr	r0, [r4, #0]
 800d88e:	1821      	adds	r1, r4, r0
 800d890:	428b      	cmp	r3, r1
 800d892:	bf01      	itttt	eq
 800d894:	6819      	ldreq	r1, [r3, #0]
 800d896:	685b      	ldreq	r3, [r3, #4]
 800d898:	1809      	addeq	r1, r1, r0
 800d89a:	6021      	streq	r1, [r4, #0]
 800d89c:	e7ed      	b.n	800d87a <_free_r+0x1e>
 800d89e:	461a      	mov	r2, r3
 800d8a0:	685b      	ldr	r3, [r3, #4]
 800d8a2:	b10b      	cbz	r3, 800d8a8 <_free_r+0x4c>
 800d8a4:	42a3      	cmp	r3, r4
 800d8a6:	d9fa      	bls.n	800d89e <_free_r+0x42>
 800d8a8:	6811      	ldr	r1, [r2, #0]
 800d8aa:	1850      	adds	r0, r2, r1
 800d8ac:	42a0      	cmp	r0, r4
 800d8ae:	d10b      	bne.n	800d8c8 <_free_r+0x6c>
 800d8b0:	6820      	ldr	r0, [r4, #0]
 800d8b2:	4401      	add	r1, r0
 800d8b4:	1850      	adds	r0, r2, r1
 800d8b6:	4283      	cmp	r3, r0
 800d8b8:	6011      	str	r1, [r2, #0]
 800d8ba:	d1e0      	bne.n	800d87e <_free_r+0x22>
 800d8bc:	6818      	ldr	r0, [r3, #0]
 800d8be:	685b      	ldr	r3, [r3, #4]
 800d8c0:	6053      	str	r3, [r2, #4]
 800d8c2:	4401      	add	r1, r0
 800d8c4:	6011      	str	r1, [r2, #0]
 800d8c6:	e7da      	b.n	800d87e <_free_r+0x22>
 800d8c8:	d902      	bls.n	800d8d0 <_free_r+0x74>
 800d8ca:	230c      	movs	r3, #12
 800d8cc:	602b      	str	r3, [r5, #0]
 800d8ce:	e7d6      	b.n	800d87e <_free_r+0x22>
 800d8d0:	6820      	ldr	r0, [r4, #0]
 800d8d2:	1821      	adds	r1, r4, r0
 800d8d4:	428b      	cmp	r3, r1
 800d8d6:	bf04      	itt	eq
 800d8d8:	6819      	ldreq	r1, [r3, #0]
 800d8da:	685b      	ldreq	r3, [r3, #4]
 800d8dc:	6063      	str	r3, [r4, #4]
 800d8de:	bf04      	itt	eq
 800d8e0:	1809      	addeq	r1, r1, r0
 800d8e2:	6021      	streq	r1, [r4, #0]
 800d8e4:	6054      	str	r4, [r2, #4]
 800d8e6:	e7ca      	b.n	800d87e <_free_r+0x22>
 800d8e8:	bd38      	pop	{r3, r4, r5, pc}
 800d8ea:	bf00      	nop
 800d8ec:	20001d60 	.word	0x20001d60

0800d8f0 <__ssputs_r>:
 800d8f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8f4:	688e      	ldr	r6, [r1, #8]
 800d8f6:	429e      	cmp	r6, r3
 800d8f8:	4682      	mov	sl, r0
 800d8fa:	460c      	mov	r4, r1
 800d8fc:	4690      	mov	r8, r2
 800d8fe:	461f      	mov	r7, r3
 800d900:	d838      	bhi.n	800d974 <__ssputs_r+0x84>
 800d902:	898a      	ldrh	r2, [r1, #12]
 800d904:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d908:	d032      	beq.n	800d970 <__ssputs_r+0x80>
 800d90a:	6825      	ldr	r5, [r4, #0]
 800d90c:	6909      	ldr	r1, [r1, #16]
 800d90e:	eba5 0901 	sub.w	r9, r5, r1
 800d912:	6965      	ldr	r5, [r4, #20]
 800d914:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d918:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d91c:	3301      	adds	r3, #1
 800d91e:	444b      	add	r3, r9
 800d920:	106d      	asrs	r5, r5, #1
 800d922:	429d      	cmp	r5, r3
 800d924:	bf38      	it	cc
 800d926:	461d      	movcc	r5, r3
 800d928:	0553      	lsls	r3, r2, #21
 800d92a:	d531      	bpl.n	800d990 <__ssputs_r+0xa0>
 800d92c:	4629      	mov	r1, r5
 800d92e:	f7fd fdff 	bl	800b530 <_malloc_r>
 800d932:	4606      	mov	r6, r0
 800d934:	b950      	cbnz	r0, 800d94c <__ssputs_r+0x5c>
 800d936:	230c      	movs	r3, #12
 800d938:	f8ca 3000 	str.w	r3, [sl]
 800d93c:	89a3      	ldrh	r3, [r4, #12]
 800d93e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d942:	81a3      	strh	r3, [r4, #12]
 800d944:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d94c:	6921      	ldr	r1, [r4, #16]
 800d94e:	464a      	mov	r2, r9
 800d950:	f7fd fdb7 	bl	800b4c2 <memcpy>
 800d954:	89a3      	ldrh	r3, [r4, #12]
 800d956:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d95a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d95e:	81a3      	strh	r3, [r4, #12]
 800d960:	6126      	str	r6, [r4, #16]
 800d962:	6165      	str	r5, [r4, #20]
 800d964:	444e      	add	r6, r9
 800d966:	eba5 0509 	sub.w	r5, r5, r9
 800d96a:	6026      	str	r6, [r4, #0]
 800d96c:	60a5      	str	r5, [r4, #8]
 800d96e:	463e      	mov	r6, r7
 800d970:	42be      	cmp	r6, r7
 800d972:	d900      	bls.n	800d976 <__ssputs_r+0x86>
 800d974:	463e      	mov	r6, r7
 800d976:	6820      	ldr	r0, [r4, #0]
 800d978:	4632      	mov	r2, r6
 800d97a:	4641      	mov	r1, r8
 800d97c:	f000 fbbc 	bl	800e0f8 <memmove>
 800d980:	68a3      	ldr	r3, [r4, #8]
 800d982:	1b9b      	subs	r3, r3, r6
 800d984:	60a3      	str	r3, [r4, #8]
 800d986:	6823      	ldr	r3, [r4, #0]
 800d988:	4433      	add	r3, r6
 800d98a:	6023      	str	r3, [r4, #0]
 800d98c:	2000      	movs	r0, #0
 800d98e:	e7db      	b.n	800d948 <__ssputs_r+0x58>
 800d990:	462a      	mov	r2, r5
 800d992:	f000 fbcb 	bl	800e12c <_realloc_r>
 800d996:	4606      	mov	r6, r0
 800d998:	2800      	cmp	r0, #0
 800d99a:	d1e1      	bne.n	800d960 <__ssputs_r+0x70>
 800d99c:	6921      	ldr	r1, [r4, #16]
 800d99e:	4650      	mov	r0, sl
 800d9a0:	f7ff ff5c 	bl	800d85c <_free_r>
 800d9a4:	e7c7      	b.n	800d936 <__ssputs_r+0x46>
	...

0800d9a8 <_svfiprintf_r>:
 800d9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9ac:	4698      	mov	r8, r3
 800d9ae:	898b      	ldrh	r3, [r1, #12]
 800d9b0:	061b      	lsls	r3, r3, #24
 800d9b2:	b09d      	sub	sp, #116	; 0x74
 800d9b4:	4607      	mov	r7, r0
 800d9b6:	460d      	mov	r5, r1
 800d9b8:	4614      	mov	r4, r2
 800d9ba:	d50e      	bpl.n	800d9da <_svfiprintf_r+0x32>
 800d9bc:	690b      	ldr	r3, [r1, #16]
 800d9be:	b963      	cbnz	r3, 800d9da <_svfiprintf_r+0x32>
 800d9c0:	2140      	movs	r1, #64	; 0x40
 800d9c2:	f7fd fdb5 	bl	800b530 <_malloc_r>
 800d9c6:	6028      	str	r0, [r5, #0]
 800d9c8:	6128      	str	r0, [r5, #16]
 800d9ca:	b920      	cbnz	r0, 800d9d6 <_svfiprintf_r+0x2e>
 800d9cc:	230c      	movs	r3, #12
 800d9ce:	603b      	str	r3, [r7, #0]
 800d9d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d9d4:	e0d1      	b.n	800db7a <_svfiprintf_r+0x1d2>
 800d9d6:	2340      	movs	r3, #64	; 0x40
 800d9d8:	616b      	str	r3, [r5, #20]
 800d9da:	2300      	movs	r3, #0
 800d9dc:	9309      	str	r3, [sp, #36]	; 0x24
 800d9de:	2320      	movs	r3, #32
 800d9e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d9e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d9e8:	2330      	movs	r3, #48	; 0x30
 800d9ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800db94 <_svfiprintf_r+0x1ec>
 800d9ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d9f2:	f04f 0901 	mov.w	r9, #1
 800d9f6:	4623      	mov	r3, r4
 800d9f8:	469a      	mov	sl, r3
 800d9fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d9fe:	b10a      	cbz	r2, 800da04 <_svfiprintf_r+0x5c>
 800da00:	2a25      	cmp	r2, #37	; 0x25
 800da02:	d1f9      	bne.n	800d9f8 <_svfiprintf_r+0x50>
 800da04:	ebba 0b04 	subs.w	fp, sl, r4
 800da08:	d00b      	beq.n	800da22 <_svfiprintf_r+0x7a>
 800da0a:	465b      	mov	r3, fp
 800da0c:	4622      	mov	r2, r4
 800da0e:	4629      	mov	r1, r5
 800da10:	4638      	mov	r0, r7
 800da12:	f7ff ff6d 	bl	800d8f0 <__ssputs_r>
 800da16:	3001      	adds	r0, #1
 800da18:	f000 80aa 	beq.w	800db70 <_svfiprintf_r+0x1c8>
 800da1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da1e:	445a      	add	r2, fp
 800da20:	9209      	str	r2, [sp, #36]	; 0x24
 800da22:	f89a 3000 	ldrb.w	r3, [sl]
 800da26:	2b00      	cmp	r3, #0
 800da28:	f000 80a2 	beq.w	800db70 <_svfiprintf_r+0x1c8>
 800da2c:	2300      	movs	r3, #0
 800da2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800da32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da36:	f10a 0a01 	add.w	sl, sl, #1
 800da3a:	9304      	str	r3, [sp, #16]
 800da3c:	9307      	str	r3, [sp, #28]
 800da3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800da42:	931a      	str	r3, [sp, #104]	; 0x68
 800da44:	4654      	mov	r4, sl
 800da46:	2205      	movs	r2, #5
 800da48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da4c:	4851      	ldr	r0, [pc, #324]	; (800db94 <_svfiprintf_r+0x1ec>)
 800da4e:	f7f2 fb9f 	bl	8000190 <memchr>
 800da52:	9a04      	ldr	r2, [sp, #16]
 800da54:	b9d8      	cbnz	r0, 800da8e <_svfiprintf_r+0xe6>
 800da56:	06d0      	lsls	r0, r2, #27
 800da58:	bf44      	itt	mi
 800da5a:	2320      	movmi	r3, #32
 800da5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da60:	0711      	lsls	r1, r2, #28
 800da62:	bf44      	itt	mi
 800da64:	232b      	movmi	r3, #43	; 0x2b
 800da66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da6a:	f89a 3000 	ldrb.w	r3, [sl]
 800da6e:	2b2a      	cmp	r3, #42	; 0x2a
 800da70:	d015      	beq.n	800da9e <_svfiprintf_r+0xf6>
 800da72:	9a07      	ldr	r2, [sp, #28]
 800da74:	4654      	mov	r4, sl
 800da76:	2000      	movs	r0, #0
 800da78:	f04f 0c0a 	mov.w	ip, #10
 800da7c:	4621      	mov	r1, r4
 800da7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da82:	3b30      	subs	r3, #48	; 0x30
 800da84:	2b09      	cmp	r3, #9
 800da86:	d94e      	bls.n	800db26 <_svfiprintf_r+0x17e>
 800da88:	b1b0      	cbz	r0, 800dab8 <_svfiprintf_r+0x110>
 800da8a:	9207      	str	r2, [sp, #28]
 800da8c:	e014      	b.n	800dab8 <_svfiprintf_r+0x110>
 800da8e:	eba0 0308 	sub.w	r3, r0, r8
 800da92:	fa09 f303 	lsl.w	r3, r9, r3
 800da96:	4313      	orrs	r3, r2
 800da98:	9304      	str	r3, [sp, #16]
 800da9a:	46a2      	mov	sl, r4
 800da9c:	e7d2      	b.n	800da44 <_svfiprintf_r+0x9c>
 800da9e:	9b03      	ldr	r3, [sp, #12]
 800daa0:	1d19      	adds	r1, r3, #4
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	9103      	str	r1, [sp, #12]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	bfbb      	ittet	lt
 800daaa:	425b      	neglt	r3, r3
 800daac:	f042 0202 	orrlt.w	r2, r2, #2
 800dab0:	9307      	strge	r3, [sp, #28]
 800dab2:	9307      	strlt	r3, [sp, #28]
 800dab4:	bfb8      	it	lt
 800dab6:	9204      	strlt	r2, [sp, #16]
 800dab8:	7823      	ldrb	r3, [r4, #0]
 800daba:	2b2e      	cmp	r3, #46	; 0x2e
 800dabc:	d10c      	bne.n	800dad8 <_svfiprintf_r+0x130>
 800dabe:	7863      	ldrb	r3, [r4, #1]
 800dac0:	2b2a      	cmp	r3, #42	; 0x2a
 800dac2:	d135      	bne.n	800db30 <_svfiprintf_r+0x188>
 800dac4:	9b03      	ldr	r3, [sp, #12]
 800dac6:	1d1a      	adds	r2, r3, #4
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	9203      	str	r2, [sp, #12]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	bfb8      	it	lt
 800dad0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800dad4:	3402      	adds	r4, #2
 800dad6:	9305      	str	r3, [sp, #20]
 800dad8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800db98 <_svfiprintf_r+0x1f0>
 800dadc:	7821      	ldrb	r1, [r4, #0]
 800dade:	2203      	movs	r2, #3
 800dae0:	4650      	mov	r0, sl
 800dae2:	f7f2 fb55 	bl	8000190 <memchr>
 800dae6:	b140      	cbz	r0, 800dafa <_svfiprintf_r+0x152>
 800dae8:	2340      	movs	r3, #64	; 0x40
 800daea:	eba0 000a 	sub.w	r0, r0, sl
 800daee:	fa03 f000 	lsl.w	r0, r3, r0
 800daf2:	9b04      	ldr	r3, [sp, #16]
 800daf4:	4303      	orrs	r3, r0
 800daf6:	3401      	adds	r4, #1
 800daf8:	9304      	str	r3, [sp, #16]
 800dafa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dafe:	4827      	ldr	r0, [pc, #156]	; (800db9c <_svfiprintf_r+0x1f4>)
 800db00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800db04:	2206      	movs	r2, #6
 800db06:	f7f2 fb43 	bl	8000190 <memchr>
 800db0a:	2800      	cmp	r0, #0
 800db0c:	d038      	beq.n	800db80 <_svfiprintf_r+0x1d8>
 800db0e:	4b24      	ldr	r3, [pc, #144]	; (800dba0 <_svfiprintf_r+0x1f8>)
 800db10:	bb1b      	cbnz	r3, 800db5a <_svfiprintf_r+0x1b2>
 800db12:	9b03      	ldr	r3, [sp, #12]
 800db14:	3307      	adds	r3, #7
 800db16:	f023 0307 	bic.w	r3, r3, #7
 800db1a:	3308      	adds	r3, #8
 800db1c:	9303      	str	r3, [sp, #12]
 800db1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db20:	4433      	add	r3, r6
 800db22:	9309      	str	r3, [sp, #36]	; 0x24
 800db24:	e767      	b.n	800d9f6 <_svfiprintf_r+0x4e>
 800db26:	fb0c 3202 	mla	r2, ip, r2, r3
 800db2a:	460c      	mov	r4, r1
 800db2c:	2001      	movs	r0, #1
 800db2e:	e7a5      	b.n	800da7c <_svfiprintf_r+0xd4>
 800db30:	2300      	movs	r3, #0
 800db32:	3401      	adds	r4, #1
 800db34:	9305      	str	r3, [sp, #20]
 800db36:	4619      	mov	r1, r3
 800db38:	f04f 0c0a 	mov.w	ip, #10
 800db3c:	4620      	mov	r0, r4
 800db3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db42:	3a30      	subs	r2, #48	; 0x30
 800db44:	2a09      	cmp	r2, #9
 800db46:	d903      	bls.n	800db50 <_svfiprintf_r+0x1a8>
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d0c5      	beq.n	800dad8 <_svfiprintf_r+0x130>
 800db4c:	9105      	str	r1, [sp, #20]
 800db4e:	e7c3      	b.n	800dad8 <_svfiprintf_r+0x130>
 800db50:	fb0c 2101 	mla	r1, ip, r1, r2
 800db54:	4604      	mov	r4, r0
 800db56:	2301      	movs	r3, #1
 800db58:	e7f0      	b.n	800db3c <_svfiprintf_r+0x194>
 800db5a:	ab03      	add	r3, sp, #12
 800db5c:	9300      	str	r3, [sp, #0]
 800db5e:	462a      	mov	r2, r5
 800db60:	4b10      	ldr	r3, [pc, #64]	; (800dba4 <_svfiprintf_r+0x1fc>)
 800db62:	a904      	add	r1, sp, #16
 800db64:	4638      	mov	r0, r7
 800db66:	f7fd fdf5 	bl	800b754 <_printf_float>
 800db6a:	1c42      	adds	r2, r0, #1
 800db6c:	4606      	mov	r6, r0
 800db6e:	d1d6      	bne.n	800db1e <_svfiprintf_r+0x176>
 800db70:	89ab      	ldrh	r3, [r5, #12]
 800db72:	065b      	lsls	r3, r3, #25
 800db74:	f53f af2c 	bmi.w	800d9d0 <_svfiprintf_r+0x28>
 800db78:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db7a:	b01d      	add	sp, #116	; 0x74
 800db7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db80:	ab03      	add	r3, sp, #12
 800db82:	9300      	str	r3, [sp, #0]
 800db84:	462a      	mov	r2, r5
 800db86:	4b07      	ldr	r3, [pc, #28]	; (800dba4 <_svfiprintf_r+0x1fc>)
 800db88:	a904      	add	r1, sp, #16
 800db8a:	4638      	mov	r0, r7
 800db8c:	f7fe f87a 	bl	800bc84 <_printf_i>
 800db90:	e7eb      	b.n	800db6a <_svfiprintf_r+0x1c2>
 800db92:	bf00      	nop
 800db94:	0800fcfc 	.word	0x0800fcfc
 800db98:	0800fd02 	.word	0x0800fd02
 800db9c:	0800fd06 	.word	0x0800fd06
 800dba0:	0800b755 	.word	0x0800b755
 800dba4:	0800d8f1 	.word	0x0800d8f1

0800dba8 <__sfputc_r>:
 800dba8:	6893      	ldr	r3, [r2, #8]
 800dbaa:	3b01      	subs	r3, #1
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	b410      	push	{r4}
 800dbb0:	6093      	str	r3, [r2, #8]
 800dbb2:	da07      	bge.n	800dbc4 <__sfputc_r+0x1c>
 800dbb4:	6994      	ldr	r4, [r2, #24]
 800dbb6:	42a3      	cmp	r3, r4
 800dbb8:	db01      	blt.n	800dbbe <__sfputc_r+0x16>
 800dbba:	290a      	cmp	r1, #10
 800dbbc:	d102      	bne.n	800dbc4 <__sfputc_r+0x1c>
 800dbbe:	bc10      	pop	{r4}
 800dbc0:	f000 b95c 	b.w	800de7c <__swbuf_r>
 800dbc4:	6813      	ldr	r3, [r2, #0]
 800dbc6:	1c58      	adds	r0, r3, #1
 800dbc8:	6010      	str	r0, [r2, #0]
 800dbca:	7019      	strb	r1, [r3, #0]
 800dbcc:	4608      	mov	r0, r1
 800dbce:	bc10      	pop	{r4}
 800dbd0:	4770      	bx	lr

0800dbd2 <__sfputs_r>:
 800dbd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbd4:	4606      	mov	r6, r0
 800dbd6:	460f      	mov	r7, r1
 800dbd8:	4614      	mov	r4, r2
 800dbda:	18d5      	adds	r5, r2, r3
 800dbdc:	42ac      	cmp	r4, r5
 800dbde:	d101      	bne.n	800dbe4 <__sfputs_r+0x12>
 800dbe0:	2000      	movs	r0, #0
 800dbe2:	e007      	b.n	800dbf4 <__sfputs_r+0x22>
 800dbe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbe8:	463a      	mov	r2, r7
 800dbea:	4630      	mov	r0, r6
 800dbec:	f7ff ffdc 	bl	800dba8 <__sfputc_r>
 800dbf0:	1c43      	adds	r3, r0, #1
 800dbf2:	d1f3      	bne.n	800dbdc <__sfputs_r+0xa>
 800dbf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dbf8 <_vfiprintf_r>:
 800dbf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbfc:	460d      	mov	r5, r1
 800dbfe:	b09d      	sub	sp, #116	; 0x74
 800dc00:	4614      	mov	r4, r2
 800dc02:	4698      	mov	r8, r3
 800dc04:	4606      	mov	r6, r0
 800dc06:	b118      	cbz	r0, 800dc10 <_vfiprintf_r+0x18>
 800dc08:	6983      	ldr	r3, [r0, #24]
 800dc0a:	b90b      	cbnz	r3, 800dc10 <_vfiprintf_r+0x18>
 800dc0c:	f7fd fb94 	bl	800b338 <__sinit>
 800dc10:	4b89      	ldr	r3, [pc, #548]	; (800de38 <_vfiprintf_r+0x240>)
 800dc12:	429d      	cmp	r5, r3
 800dc14:	d11b      	bne.n	800dc4e <_vfiprintf_r+0x56>
 800dc16:	6875      	ldr	r5, [r6, #4]
 800dc18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc1a:	07d9      	lsls	r1, r3, #31
 800dc1c:	d405      	bmi.n	800dc2a <_vfiprintf_r+0x32>
 800dc1e:	89ab      	ldrh	r3, [r5, #12]
 800dc20:	059a      	lsls	r2, r3, #22
 800dc22:	d402      	bmi.n	800dc2a <_vfiprintf_r+0x32>
 800dc24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc26:	f7fd fc4a 	bl	800b4be <__retarget_lock_acquire_recursive>
 800dc2a:	89ab      	ldrh	r3, [r5, #12]
 800dc2c:	071b      	lsls	r3, r3, #28
 800dc2e:	d501      	bpl.n	800dc34 <_vfiprintf_r+0x3c>
 800dc30:	692b      	ldr	r3, [r5, #16]
 800dc32:	b9eb      	cbnz	r3, 800dc70 <_vfiprintf_r+0x78>
 800dc34:	4629      	mov	r1, r5
 800dc36:	4630      	mov	r0, r6
 800dc38:	f000 f972 	bl	800df20 <__swsetup_r>
 800dc3c:	b1c0      	cbz	r0, 800dc70 <_vfiprintf_r+0x78>
 800dc3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc40:	07dc      	lsls	r4, r3, #31
 800dc42:	d50e      	bpl.n	800dc62 <_vfiprintf_r+0x6a>
 800dc44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc48:	b01d      	add	sp, #116	; 0x74
 800dc4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc4e:	4b7b      	ldr	r3, [pc, #492]	; (800de3c <_vfiprintf_r+0x244>)
 800dc50:	429d      	cmp	r5, r3
 800dc52:	d101      	bne.n	800dc58 <_vfiprintf_r+0x60>
 800dc54:	68b5      	ldr	r5, [r6, #8]
 800dc56:	e7df      	b.n	800dc18 <_vfiprintf_r+0x20>
 800dc58:	4b79      	ldr	r3, [pc, #484]	; (800de40 <_vfiprintf_r+0x248>)
 800dc5a:	429d      	cmp	r5, r3
 800dc5c:	bf08      	it	eq
 800dc5e:	68f5      	ldreq	r5, [r6, #12]
 800dc60:	e7da      	b.n	800dc18 <_vfiprintf_r+0x20>
 800dc62:	89ab      	ldrh	r3, [r5, #12]
 800dc64:	0598      	lsls	r0, r3, #22
 800dc66:	d4ed      	bmi.n	800dc44 <_vfiprintf_r+0x4c>
 800dc68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc6a:	f7fd fc29 	bl	800b4c0 <__retarget_lock_release_recursive>
 800dc6e:	e7e9      	b.n	800dc44 <_vfiprintf_r+0x4c>
 800dc70:	2300      	movs	r3, #0
 800dc72:	9309      	str	r3, [sp, #36]	; 0x24
 800dc74:	2320      	movs	r3, #32
 800dc76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dc7a:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc7e:	2330      	movs	r3, #48	; 0x30
 800dc80:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800de44 <_vfiprintf_r+0x24c>
 800dc84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dc88:	f04f 0901 	mov.w	r9, #1
 800dc8c:	4623      	mov	r3, r4
 800dc8e:	469a      	mov	sl, r3
 800dc90:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc94:	b10a      	cbz	r2, 800dc9a <_vfiprintf_r+0xa2>
 800dc96:	2a25      	cmp	r2, #37	; 0x25
 800dc98:	d1f9      	bne.n	800dc8e <_vfiprintf_r+0x96>
 800dc9a:	ebba 0b04 	subs.w	fp, sl, r4
 800dc9e:	d00b      	beq.n	800dcb8 <_vfiprintf_r+0xc0>
 800dca0:	465b      	mov	r3, fp
 800dca2:	4622      	mov	r2, r4
 800dca4:	4629      	mov	r1, r5
 800dca6:	4630      	mov	r0, r6
 800dca8:	f7ff ff93 	bl	800dbd2 <__sfputs_r>
 800dcac:	3001      	adds	r0, #1
 800dcae:	f000 80aa 	beq.w	800de06 <_vfiprintf_r+0x20e>
 800dcb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dcb4:	445a      	add	r2, fp
 800dcb6:	9209      	str	r2, [sp, #36]	; 0x24
 800dcb8:	f89a 3000 	ldrb.w	r3, [sl]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	f000 80a2 	beq.w	800de06 <_vfiprintf_r+0x20e>
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dcc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dccc:	f10a 0a01 	add.w	sl, sl, #1
 800dcd0:	9304      	str	r3, [sp, #16]
 800dcd2:	9307      	str	r3, [sp, #28]
 800dcd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dcd8:	931a      	str	r3, [sp, #104]	; 0x68
 800dcda:	4654      	mov	r4, sl
 800dcdc:	2205      	movs	r2, #5
 800dcde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dce2:	4858      	ldr	r0, [pc, #352]	; (800de44 <_vfiprintf_r+0x24c>)
 800dce4:	f7f2 fa54 	bl	8000190 <memchr>
 800dce8:	9a04      	ldr	r2, [sp, #16]
 800dcea:	b9d8      	cbnz	r0, 800dd24 <_vfiprintf_r+0x12c>
 800dcec:	06d1      	lsls	r1, r2, #27
 800dcee:	bf44      	itt	mi
 800dcf0:	2320      	movmi	r3, #32
 800dcf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dcf6:	0713      	lsls	r3, r2, #28
 800dcf8:	bf44      	itt	mi
 800dcfa:	232b      	movmi	r3, #43	; 0x2b
 800dcfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd00:	f89a 3000 	ldrb.w	r3, [sl]
 800dd04:	2b2a      	cmp	r3, #42	; 0x2a
 800dd06:	d015      	beq.n	800dd34 <_vfiprintf_r+0x13c>
 800dd08:	9a07      	ldr	r2, [sp, #28]
 800dd0a:	4654      	mov	r4, sl
 800dd0c:	2000      	movs	r0, #0
 800dd0e:	f04f 0c0a 	mov.w	ip, #10
 800dd12:	4621      	mov	r1, r4
 800dd14:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd18:	3b30      	subs	r3, #48	; 0x30
 800dd1a:	2b09      	cmp	r3, #9
 800dd1c:	d94e      	bls.n	800ddbc <_vfiprintf_r+0x1c4>
 800dd1e:	b1b0      	cbz	r0, 800dd4e <_vfiprintf_r+0x156>
 800dd20:	9207      	str	r2, [sp, #28]
 800dd22:	e014      	b.n	800dd4e <_vfiprintf_r+0x156>
 800dd24:	eba0 0308 	sub.w	r3, r0, r8
 800dd28:	fa09 f303 	lsl.w	r3, r9, r3
 800dd2c:	4313      	orrs	r3, r2
 800dd2e:	9304      	str	r3, [sp, #16]
 800dd30:	46a2      	mov	sl, r4
 800dd32:	e7d2      	b.n	800dcda <_vfiprintf_r+0xe2>
 800dd34:	9b03      	ldr	r3, [sp, #12]
 800dd36:	1d19      	adds	r1, r3, #4
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	9103      	str	r1, [sp, #12]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	bfbb      	ittet	lt
 800dd40:	425b      	neglt	r3, r3
 800dd42:	f042 0202 	orrlt.w	r2, r2, #2
 800dd46:	9307      	strge	r3, [sp, #28]
 800dd48:	9307      	strlt	r3, [sp, #28]
 800dd4a:	bfb8      	it	lt
 800dd4c:	9204      	strlt	r2, [sp, #16]
 800dd4e:	7823      	ldrb	r3, [r4, #0]
 800dd50:	2b2e      	cmp	r3, #46	; 0x2e
 800dd52:	d10c      	bne.n	800dd6e <_vfiprintf_r+0x176>
 800dd54:	7863      	ldrb	r3, [r4, #1]
 800dd56:	2b2a      	cmp	r3, #42	; 0x2a
 800dd58:	d135      	bne.n	800ddc6 <_vfiprintf_r+0x1ce>
 800dd5a:	9b03      	ldr	r3, [sp, #12]
 800dd5c:	1d1a      	adds	r2, r3, #4
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	9203      	str	r2, [sp, #12]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	bfb8      	it	lt
 800dd66:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800dd6a:	3402      	adds	r4, #2
 800dd6c:	9305      	str	r3, [sp, #20]
 800dd6e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800de48 <_vfiprintf_r+0x250>
 800dd72:	7821      	ldrb	r1, [r4, #0]
 800dd74:	2203      	movs	r2, #3
 800dd76:	4650      	mov	r0, sl
 800dd78:	f7f2 fa0a 	bl	8000190 <memchr>
 800dd7c:	b140      	cbz	r0, 800dd90 <_vfiprintf_r+0x198>
 800dd7e:	2340      	movs	r3, #64	; 0x40
 800dd80:	eba0 000a 	sub.w	r0, r0, sl
 800dd84:	fa03 f000 	lsl.w	r0, r3, r0
 800dd88:	9b04      	ldr	r3, [sp, #16]
 800dd8a:	4303      	orrs	r3, r0
 800dd8c:	3401      	adds	r4, #1
 800dd8e:	9304      	str	r3, [sp, #16]
 800dd90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd94:	482d      	ldr	r0, [pc, #180]	; (800de4c <_vfiprintf_r+0x254>)
 800dd96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dd9a:	2206      	movs	r2, #6
 800dd9c:	f7f2 f9f8 	bl	8000190 <memchr>
 800dda0:	2800      	cmp	r0, #0
 800dda2:	d03f      	beq.n	800de24 <_vfiprintf_r+0x22c>
 800dda4:	4b2a      	ldr	r3, [pc, #168]	; (800de50 <_vfiprintf_r+0x258>)
 800dda6:	bb1b      	cbnz	r3, 800ddf0 <_vfiprintf_r+0x1f8>
 800dda8:	9b03      	ldr	r3, [sp, #12]
 800ddaa:	3307      	adds	r3, #7
 800ddac:	f023 0307 	bic.w	r3, r3, #7
 800ddb0:	3308      	adds	r3, #8
 800ddb2:	9303      	str	r3, [sp, #12]
 800ddb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddb6:	443b      	add	r3, r7
 800ddb8:	9309      	str	r3, [sp, #36]	; 0x24
 800ddba:	e767      	b.n	800dc8c <_vfiprintf_r+0x94>
 800ddbc:	fb0c 3202 	mla	r2, ip, r2, r3
 800ddc0:	460c      	mov	r4, r1
 800ddc2:	2001      	movs	r0, #1
 800ddc4:	e7a5      	b.n	800dd12 <_vfiprintf_r+0x11a>
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	3401      	adds	r4, #1
 800ddca:	9305      	str	r3, [sp, #20]
 800ddcc:	4619      	mov	r1, r3
 800ddce:	f04f 0c0a 	mov.w	ip, #10
 800ddd2:	4620      	mov	r0, r4
 800ddd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ddd8:	3a30      	subs	r2, #48	; 0x30
 800ddda:	2a09      	cmp	r2, #9
 800dddc:	d903      	bls.n	800dde6 <_vfiprintf_r+0x1ee>
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d0c5      	beq.n	800dd6e <_vfiprintf_r+0x176>
 800dde2:	9105      	str	r1, [sp, #20]
 800dde4:	e7c3      	b.n	800dd6e <_vfiprintf_r+0x176>
 800dde6:	fb0c 2101 	mla	r1, ip, r1, r2
 800ddea:	4604      	mov	r4, r0
 800ddec:	2301      	movs	r3, #1
 800ddee:	e7f0      	b.n	800ddd2 <_vfiprintf_r+0x1da>
 800ddf0:	ab03      	add	r3, sp, #12
 800ddf2:	9300      	str	r3, [sp, #0]
 800ddf4:	462a      	mov	r2, r5
 800ddf6:	4b17      	ldr	r3, [pc, #92]	; (800de54 <_vfiprintf_r+0x25c>)
 800ddf8:	a904      	add	r1, sp, #16
 800ddfa:	4630      	mov	r0, r6
 800ddfc:	f7fd fcaa 	bl	800b754 <_printf_float>
 800de00:	4607      	mov	r7, r0
 800de02:	1c78      	adds	r0, r7, #1
 800de04:	d1d6      	bne.n	800ddb4 <_vfiprintf_r+0x1bc>
 800de06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de08:	07d9      	lsls	r1, r3, #31
 800de0a:	d405      	bmi.n	800de18 <_vfiprintf_r+0x220>
 800de0c:	89ab      	ldrh	r3, [r5, #12]
 800de0e:	059a      	lsls	r2, r3, #22
 800de10:	d402      	bmi.n	800de18 <_vfiprintf_r+0x220>
 800de12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de14:	f7fd fb54 	bl	800b4c0 <__retarget_lock_release_recursive>
 800de18:	89ab      	ldrh	r3, [r5, #12]
 800de1a:	065b      	lsls	r3, r3, #25
 800de1c:	f53f af12 	bmi.w	800dc44 <_vfiprintf_r+0x4c>
 800de20:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de22:	e711      	b.n	800dc48 <_vfiprintf_r+0x50>
 800de24:	ab03      	add	r3, sp, #12
 800de26:	9300      	str	r3, [sp, #0]
 800de28:	462a      	mov	r2, r5
 800de2a:	4b0a      	ldr	r3, [pc, #40]	; (800de54 <_vfiprintf_r+0x25c>)
 800de2c:	a904      	add	r1, sp, #16
 800de2e:	4630      	mov	r0, r6
 800de30:	f7fd ff28 	bl	800bc84 <_printf_i>
 800de34:	e7e4      	b.n	800de00 <_vfiprintf_r+0x208>
 800de36:	bf00      	nop
 800de38:	0800fa00 	.word	0x0800fa00
 800de3c:	0800fa20 	.word	0x0800fa20
 800de40:	0800f9e0 	.word	0x0800f9e0
 800de44:	0800fcfc 	.word	0x0800fcfc
 800de48:	0800fd02 	.word	0x0800fd02
 800de4c:	0800fd06 	.word	0x0800fd06
 800de50:	0800b755 	.word	0x0800b755
 800de54:	0800dbd3 	.word	0x0800dbd3

0800de58 <_read_r>:
 800de58:	b538      	push	{r3, r4, r5, lr}
 800de5a:	4d07      	ldr	r5, [pc, #28]	; (800de78 <_read_r+0x20>)
 800de5c:	4604      	mov	r4, r0
 800de5e:	4608      	mov	r0, r1
 800de60:	4611      	mov	r1, r2
 800de62:	2200      	movs	r2, #0
 800de64:	602a      	str	r2, [r5, #0]
 800de66:	461a      	mov	r2, r3
 800de68:	f7f3 fff7 	bl	8001e5a <_read>
 800de6c:	1c43      	adds	r3, r0, #1
 800de6e:	d102      	bne.n	800de76 <_read_r+0x1e>
 800de70:	682b      	ldr	r3, [r5, #0]
 800de72:	b103      	cbz	r3, 800de76 <_read_r+0x1e>
 800de74:	6023      	str	r3, [r4, #0]
 800de76:	bd38      	pop	{r3, r4, r5, pc}
 800de78:	20001d68 	.word	0x20001d68

0800de7c <__swbuf_r>:
 800de7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de7e:	460e      	mov	r6, r1
 800de80:	4614      	mov	r4, r2
 800de82:	4605      	mov	r5, r0
 800de84:	b118      	cbz	r0, 800de8e <__swbuf_r+0x12>
 800de86:	6983      	ldr	r3, [r0, #24]
 800de88:	b90b      	cbnz	r3, 800de8e <__swbuf_r+0x12>
 800de8a:	f7fd fa55 	bl	800b338 <__sinit>
 800de8e:	4b21      	ldr	r3, [pc, #132]	; (800df14 <__swbuf_r+0x98>)
 800de90:	429c      	cmp	r4, r3
 800de92:	d12b      	bne.n	800deec <__swbuf_r+0x70>
 800de94:	686c      	ldr	r4, [r5, #4]
 800de96:	69a3      	ldr	r3, [r4, #24]
 800de98:	60a3      	str	r3, [r4, #8]
 800de9a:	89a3      	ldrh	r3, [r4, #12]
 800de9c:	071a      	lsls	r2, r3, #28
 800de9e:	d52f      	bpl.n	800df00 <__swbuf_r+0x84>
 800dea0:	6923      	ldr	r3, [r4, #16]
 800dea2:	b36b      	cbz	r3, 800df00 <__swbuf_r+0x84>
 800dea4:	6923      	ldr	r3, [r4, #16]
 800dea6:	6820      	ldr	r0, [r4, #0]
 800dea8:	1ac0      	subs	r0, r0, r3
 800deaa:	6963      	ldr	r3, [r4, #20]
 800deac:	b2f6      	uxtb	r6, r6
 800deae:	4283      	cmp	r3, r0
 800deb0:	4637      	mov	r7, r6
 800deb2:	dc04      	bgt.n	800debe <__swbuf_r+0x42>
 800deb4:	4621      	mov	r1, r4
 800deb6:	4628      	mov	r0, r5
 800deb8:	f7ff f8c6 	bl	800d048 <_fflush_r>
 800debc:	bb30      	cbnz	r0, 800df0c <__swbuf_r+0x90>
 800debe:	68a3      	ldr	r3, [r4, #8]
 800dec0:	3b01      	subs	r3, #1
 800dec2:	60a3      	str	r3, [r4, #8]
 800dec4:	6823      	ldr	r3, [r4, #0]
 800dec6:	1c5a      	adds	r2, r3, #1
 800dec8:	6022      	str	r2, [r4, #0]
 800deca:	701e      	strb	r6, [r3, #0]
 800decc:	6963      	ldr	r3, [r4, #20]
 800dece:	3001      	adds	r0, #1
 800ded0:	4283      	cmp	r3, r0
 800ded2:	d004      	beq.n	800dede <__swbuf_r+0x62>
 800ded4:	89a3      	ldrh	r3, [r4, #12]
 800ded6:	07db      	lsls	r3, r3, #31
 800ded8:	d506      	bpl.n	800dee8 <__swbuf_r+0x6c>
 800deda:	2e0a      	cmp	r6, #10
 800dedc:	d104      	bne.n	800dee8 <__swbuf_r+0x6c>
 800dede:	4621      	mov	r1, r4
 800dee0:	4628      	mov	r0, r5
 800dee2:	f7ff f8b1 	bl	800d048 <_fflush_r>
 800dee6:	b988      	cbnz	r0, 800df0c <__swbuf_r+0x90>
 800dee8:	4638      	mov	r0, r7
 800deea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800deec:	4b0a      	ldr	r3, [pc, #40]	; (800df18 <__swbuf_r+0x9c>)
 800deee:	429c      	cmp	r4, r3
 800def0:	d101      	bne.n	800def6 <__swbuf_r+0x7a>
 800def2:	68ac      	ldr	r4, [r5, #8]
 800def4:	e7cf      	b.n	800de96 <__swbuf_r+0x1a>
 800def6:	4b09      	ldr	r3, [pc, #36]	; (800df1c <__swbuf_r+0xa0>)
 800def8:	429c      	cmp	r4, r3
 800defa:	bf08      	it	eq
 800defc:	68ec      	ldreq	r4, [r5, #12]
 800defe:	e7ca      	b.n	800de96 <__swbuf_r+0x1a>
 800df00:	4621      	mov	r1, r4
 800df02:	4628      	mov	r0, r5
 800df04:	f000 f80c 	bl	800df20 <__swsetup_r>
 800df08:	2800      	cmp	r0, #0
 800df0a:	d0cb      	beq.n	800dea4 <__swbuf_r+0x28>
 800df0c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800df10:	e7ea      	b.n	800dee8 <__swbuf_r+0x6c>
 800df12:	bf00      	nop
 800df14:	0800fa00 	.word	0x0800fa00
 800df18:	0800fa20 	.word	0x0800fa20
 800df1c:	0800f9e0 	.word	0x0800f9e0

0800df20 <__swsetup_r>:
 800df20:	4b32      	ldr	r3, [pc, #200]	; (800dfec <__swsetup_r+0xcc>)
 800df22:	b570      	push	{r4, r5, r6, lr}
 800df24:	681d      	ldr	r5, [r3, #0]
 800df26:	4606      	mov	r6, r0
 800df28:	460c      	mov	r4, r1
 800df2a:	b125      	cbz	r5, 800df36 <__swsetup_r+0x16>
 800df2c:	69ab      	ldr	r3, [r5, #24]
 800df2e:	b913      	cbnz	r3, 800df36 <__swsetup_r+0x16>
 800df30:	4628      	mov	r0, r5
 800df32:	f7fd fa01 	bl	800b338 <__sinit>
 800df36:	4b2e      	ldr	r3, [pc, #184]	; (800dff0 <__swsetup_r+0xd0>)
 800df38:	429c      	cmp	r4, r3
 800df3a:	d10f      	bne.n	800df5c <__swsetup_r+0x3c>
 800df3c:	686c      	ldr	r4, [r5, #4]
 800df3e:	89a3      	ldrh	r3, [r4, #12]
 800df40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800df44:	0719      	lsls	r1, r3, #28
 800df46:	d42c      	bmi.n	800dfa2 <__swsetup_r+0x82>
 800df48:	06dd      	lsls	r5, r3, #27
 800df4a:	d411      	bmi.n	800df70 <__swsetup_r+0x50>
 800df4c:	2309      	movs	r3, #9
 800df4e:	6033      	str	r3, [r6, #0]
 800df50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800df54:	81a3      	strh	r3, [r4, #12]
 800df56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df5a:	e03e      	b.n	800dfda <__swsetup_r+0xba>
 800df5c:	4b25      	ldr	r3, [pc, #148]	; (800dff4 <__swsetup_r+0xd4>)
 800df5e:	429c      	cmp	r4, r3
 800df60:	d101      	bne.n	800df66 <__swsetup_r+0x46>
 800df62:	68ac      	ldr	r4, [r5, #8]
 800df64:	e7eb      	b.n	800df3e <__swsetup_r+0x1e>
 800df66:	4b24      	ldr	r3, [pc, #144]	; (800dff8 <__swsetup_r+0xd8>)
 800df68:	429c      	cmp	r4, r3
 800df6a:	bf08      	it	eq
 800df6c:	68ec      	ldreq	r4, [r5, #12]
 800df6e:	e7e6      	b.n	800df3e <__swsetup_r+0x1e>
 800df70:	0758      	lsls	r0, r3, #29
 800df72:	d512      	bpl.n	800df9a <__swsetup_r+0x7a>
 800df74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df76:	b141      	cbz	r1, 800df8a <__swsetup_r+0x6a>
 800df78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800df7c:	4299      	cmp	r1, r3
 800df7e:	d002      	beq.n	800df86 <__swsetup_r+0x66>
 800df80:	4630      	mov	r0, r6
 800df82:	f7ff fc6b 	bl	800d85c <_free_r>
 800df86:	2300      	movs	r3, #0
 800df88:	6363      	str	r3, [r4, #52]	; 0x34
 800df8a:	89a3      	ldrh	r3, [r4, #12]
 800df8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800df90:	81a3      	strh	r3, [r4, #12]
 800df92:	2300      	movs	r3, #0
 800df94:	6063      	str	r3, [r4, #4]
 800df96:	6923      	ldr	r3, [r4, #16]
 800df98:	6023      	str	r3, [r4, #0]
 800df9a:	89a3      	ldrh	r3, [r4, #12]
 800df9c:	f043 0308 	orr.w	r3, r3, #8
 800dfa0:	81a3      	strh	r3, [r4, #12]
 800dfa2:	6923      	ldr	r3, [r4, #16]
 800dfa4:	b94b      	cbnz	r3, 800dfba <__swsetup_r+0x9a>
 800dfa6:	89a3      	ldrh	r3, [r4, #12]
 800dfa8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dfac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dfb0:	d003      	beq.n	800dfba <__swsetup_r+0x9a>
 800dfb2:	4621      	mov	r1, r4
 800dfb4:	4630      	mov	r0, r6
 800dfb6:	f000 f84d 	bl	800e054 <__smakebuf_r>
 800dfba:	89a0      	ldrh	r0, [r4, #12]
 800dfbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dfc0:	f010 0301 	ands.w	r3, r0, #1
 800dfc4:	d00a      	beq.n	800dfdc <__swsetup_r+0xbc>
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	60a3      	str	r3, [r4, #8]
 800dfca:	6963      	ldr	r3, [r4, #20]
 800dfcc:	425b      	negs	r3, r3
 800dfce:	61a3      	str	r3, [r4, #24]
 800dfd0:	6923      	ldr	r3, [r4, #16]
 800dfd2:	b943      	cbnz	r3, 800dfe6 <__swsetup_r+0xc6>
 800dfd4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dfd8:	d1ba      	bne.n	800df50 <__swsetup_r+0x30>
 800dfda:	bd70      	pop	{r4, r5, r6, pc}
 800dfdc:	0781      	lsls	r1, r0, #30
 800dfde:	bf58      	it	pl
 800dfe0:	6963      	ldrpl	r3, [r4, #20]
 800dfe2:	60a3      	str	r3, [r4, #8]
 800dfe4:	e7f4      	b.n	800dfd0 <__swsetup_r+0xb0>
 800dfe6:	2000      	movs	r0, #0
 800dfe8:	e7f7      	b.n	800dfda <__swsetup_r+0xba>
 800dfea:	bf00      	nop
 800dfec:	20000010 	.word	0x20000010
 800dff0:	0800fa00 	.word	0x0800fa00
 800dff4:	0800fa20 	.word	0x0800fa20
 800dff8:	0800f9e0 	.word	0x0800f9e0

0800dffc <abort>:
 800dffc:	b508      	push	{r3, lr}
 800dffe:	2006      	movs	r0, #6
 800e000:	f000 f8ec 	bl	800e1dc <raise>
 800e004:	2001      	movs	r0, #1
 800e006:	f7f3 ff1e 	bl	8001e46 <_exit>

0800e00a <__swhatbuf_r>:
 800e00a:	b570      	push	{r4, r5, r6, lr}
 800e00c:	460e      	mov	r6, r1
 800e00e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e012:	2900      	cmp	r1, #0
 800e014:	b096      	sub	sp, #88	; 0x58
 800e016:	4614      	mov	r4, r2
 800e018:	461d      	mov	r5, r3
 800e01a:	da08      	bge.n	800e02e <__swhatbuf_r+0x24>
 800e01c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e020:	2200      	movs	r2, #0
 800e022:	602a      	str	r2, [r5, #0]
 800e024:	061a      	lsls	r2, r3, #24
 800e026:	d410      	bmi.n	800e04a <__swhatbuf_r+0x40>
 800e028:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e02c:	e00e      	b.n	800e04c <__swhatbuf_r+0x42>
 800e02e:	466a      	mov	r2, sp
 800e030:	f000 f8fe 	bl	800e230 <_fstat_r>
 800e034:	2800      	cmp	r0, #0
 800e036:	dbf1      	blt.n	800e01c <__swhatbuf_r+0x12>
 800e038:	9a01      	ldr	r2, [sp, #4]
 800e03a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e03e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e042:	425a      	negs	r2, r3
 800e044:	415a      	adcs	r2, r3
 800e046:	602a      	str	r2, [r5, #0]
 800e048:	e7ee      	b.n	800e028 <__swhatbuf_r+0x1e>
 800e04a:	2340      	movs	r3, #64	; 0x40
 800e04c:	2000      	movs	r0, #0
 800e04e:	6023      	str	r3, [r4, #0]
 800e050:	b016      	add	sp, #88	; 0x58
 800e052:	bd70      	pop	{r4, r5, r6, pc}

0800e054 <__smakebuf_r>:
 800e054:	898b      	ldrh	r3, [r1, #12]
 800e056:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e058:	079d      	lsls	r5, r3, #30
 800e05a:	4606      	mov	r6, r0
 800e05c:	460c      	mov	r4, r1
 800e05e:	d507      	bpl.n	800e070 <__smakebuf_r+0x1c>
 800e060:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e064:	6023      	str	r3, [r4, #0]
 800e066:	6123      	str	r3, [r4, #16]
 800e068:	2301      	movs	r3, #1
 800e06a:	6163      	str	r3, [r4, #20]
 800e06c:	b002      	add	sp, #8
 800e06e:	bd70      	pop	{r4, r5, r6, pc}
 800e070:	ab01      	add	r3, sp, #4
 800e072:	466a      	mov	r2, sp
 800e074:	f7ff ffc9 	bl	800e00a <__swhatbuf_r>
 800e078:	9900      	ldr	r1, [sp, #0]
 800e07a:	4605      	mov	r5, r0
 800e07c:	4630      	mov	r0, r6
 800e07e:	f7fd fa57 	bl	800b530 <_malloc_r>
 800e082:	b948      	cbnz	r0, 800e098 <__smakebuf_r+0x44>
 800e084:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e088:	059a      	lsls	r2, r3, #22
 800e08a:	d4ef      	bmi.n	800e06c <__smakebuf_r+0x18>
 800e08c:	f023 0303 	bic.w	r3, r3, #3
 800e090:	f043 0302 	orr.w	r3, r3, #2
 800e094:	81a3      	strh	r3, [r4, #12]
 800e096:	e7e3      	b.n	800e060 <__smakebuf_r+0xc>
 800e098:	4b0d      	ldr	r3, [pc, #52]	; (800e0d0 <__smakebuf_r+0x7c>)
 800e09a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e09c:	89a3      	ldrh	r3, [r4, #12]
 800e09e:	6020      	str	r0, [r4, #0]
 800e0a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0a4:	81a3      	strh	r3, [r4, #12]
 800e0a6:	9b00      	ldr	r3, [sp, #0]
 800e0a8:	6163      	str	r3, [r4, #20]
 800e0aa:	9b01      	ldr	r3, [sp, #4]
 800e0ac:	6120      	str	r0, [r4, #16]
 800e0ae:	b15b      	cbz	r3, 800e0c8 <__smakebuf_r+0x74>
 800e0b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e0b4:	4630      	mov	r0, r6
 800e0b6:	f000 f8cd 	bl	800e254 <_isatty_r>
 800e0ba:	b128      	cbz	r0, 800e0c8 <__smakebuf_r+0x74>
 800e0bc:	89a3      	ldrh	r3, [r4, #12]
 800e0be:	f023 0303 	bic.w	r3, r3, #3
 800e0c2:	f043 0301 	orr.w	r3, r3, #1
 800e0c6:	81a3      	strh	r3, [r4, #12]
 800e0c8:	89a0      	ldrh	r0, [r4, #12]
 800e0ca:	4305      	orrs	r5, r0
 800e0cc:	81a5      	strh	r5, [r4, #12]
 800e0ce:	e7cd      	b.n	800e06c <__smakebuf_r+0x18>
 800e0d0:	0800b2d1 	.word	0x0800b2d1

0800e0d4 <__ascii_mbtowc>:
 800e0d4:	b082      	sub	sp, #8
 800e0d6:	b901      	cbnz	r1, 800e0da <__ascii_mbtowc+0x6>
 800e0d8:	a901      	add	r1, sp, #4
 800e0da:	b142      	cbz	r2, 800e0ee <__ascii_mbtowc+0x1a>
 800e0dc:	b14b      	cbz	r3, 800e0f2 <__ascii_mbtowc+0x1e>
 800e0de:	7813      	ldrb	r3, [r2, #0]
 800e0e0:	600b      	str	r3, [r1, #0]
 800e0e2:	7812      	ldrb	r2, [r2, #0]
 800e0e4:	1e10      	subs	r0, r2, #0
 800e0e6:	bf18      	it	ne
 800e0e8:	2001      	movne	r0, #1
 800e0ea:	b002      	add	sp, #8
 800e0ec:	4770      	bx	lr
 800e0ee:	4610      	mov	r0, r2
 800e0f0:	e7fb      	b.n	800e0ea <__ascii_mbtowc+0x16>
 800e0f2:	f06f 0001 	mvn.w	r0, #1
 800e0f6:	e7f8      	b.n	800e0ea <__ascii_mbtowc+0x16>

0800e0f8 <memmove>:
 800e0f8:	4288      	cmp	r0, r1
 800e0fa:	b510      	push	{r4, lr}
 800e0fc:	eb01 0402 	add.w	r4, r1, r2
 800e100:	d902      	bls.n	800e108 <memmove+0x10>
 800e102:	4284      	cmp	r4, r0
 800e104:	4623      	mov	r3, r4
 800e106:	d807      	bhi.n	800e118 <memmove+0x20>
 800e108:	1e43      	subs	r3, r0, #1
 800e10a:	42a1      	cmp	r1, r4
 800e10c:	d008      	beq.n	800e120 <memmove+0x28>
 800e10e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e112:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e116:	e7f8      	b.n	800e10a <memmove+0x12>
 800e118:	4402      	add	r2, r0
 800e11a:	4601      	mov	r1, r0
 800e11c:	428a      	cmp	r2, r1
 800e11e:	d100      	bne.n	800e122 <memmove+0x2a>
 800e120:	bd10      	pop	{r4, pc}
 800e122:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e126:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e12a:	e7f7      	b.n	800e11c <memmove+0x24>

0800e12c <_realloc_r>:
 800e12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e130:	4680      	mov	r8, r0
 800e132:	4614      	mov	r4, r2
 800e134:	460e      	mov	r6, r1
 800e136:	b921      	cbnz	r1, 800e142 <_realloc_r+0x16>
 800e138:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e13c:	4611      	mov	r1, r2
 800e13e:	f7fd b9f7 	b.w	800b530 <_malloc_r>
 800e142:	b92a      	cbnz	r2, 800e150 <_realloc_r+0x24>
 800e144:	f7ff fb8a 	bl	800d85c <_free_r>
 800e148:	4625      	mov	r5, r4
 800e14a:	4628      	mov	r0, r5
 800e14c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e150:	f000 f890 	bl	800e274 <_malloc_usable_size_r>
 800e154:	4284      	cmp	r4, r0
 800e156:	4607      	mov	r7, r0
 800e158:	d802      	bhi.n	800e160 <_realloc_r+0x34>
 800e15a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e15e:	d812      	bhi.n	800e186 <_realloc_r+0x5a>
 800e160:	4621      	mov	r1, r4
 800e162:	4640      	mov	r0, r8
 800e164:	f7fd f9e4 	bl	800b530 <_malloc_r>
 800e168:	4605      	mov	r5, r0
 800e16a:	2800      	cmp	r0, #0
 800e16c:	d0ed      	beq.n	800e14a <_realloc_r+0x1e>
 800e16e:	42bc      	cmp	r4, r7
 800e170:	4622      	mov	r2, r4
 800e172:	4631      	mov	r1, r6
 800e174:	bf28      	it	cs
 800e176:	463a      	movcs	r2, r7
 800e178:	f7fd f9a3 	bl	800b4c2 <memcpy>
 800e17c:	4631      	mov	r1, r6
 800e17e:	4640      	mov	r0, r8
 800e180:	f7ff fb6c 	bl	800d85c <_free_r>
 800e184:	e7e1      	b.n	800e14a <_realloc_r+0x1e>
 800e186:	4635      	mov	r5, r6
 800e188:	e7df      	b.n	800e14a <_realloc_r+0x1e>

0800e18a <_raise_r>:
 800e18a:	291f      	cmp	r1, #31
 800e18c:	b538      	push	{r3, r4, r5, lr}
 800e18e:	4604      	mov	r4, r0
 800e190:	460d      	mov	r5, r1
 800e192:	d904      	bls.n	800e19e <_raise_r+0x14>
 800e194:	2316      	movs	r3, #22
 800e196:	6003      	str	r3, [r0, #0]
 800e198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e19c:	bd38      	pop	{r3, r4, r5, pc}
 800e19e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e1a0:	b112      	cbz	r2, 800e1a8 <_raise_r+0x1e>
 800e1a2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e1a6:	b94b      	cbnz	r3, 800e1bc <_raise_r+0x32>
 800e1a8:	4620      	mov	r0, r4
 800e1aa:	f000 f831 	bl	800e210 <_getpid_r>
 800e1ae:	462a      	mov	r2, r5
 800e1b0:	4601      	mov	r1, r0
 800e1b2:	4620      	mov	r0, r4
 800e1b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e1b8:	f000 b818 	b.w	800e1ec <_kill_r>
 800e1bc:	2b01      	cmp	r3, #1
 800e1be:	d00a      	beq.n	800e1d6 <_raise_r+0x4c>
 800e1c0:	1c59      	adds	r1, r3, #1
 800e1c2:	d103      	bne.n	800e1cc <_raise_r+0x42>
 800e1c4:	2316      	movs	r3, #22
 800e1c6:	6003      	str	r3, [r0, #0]
 800e1c8:	2001      	movs	r0, #1
 800e1ca:	e7e7      	b.n	800e19c <_raise_r+0x12>
 800e1cc:	2400      	movs	r4, #0
 800e1ce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e1d2:	4628      	mov	r0, r5
 800e1d4:	4798      	blx	r3
 800e1d6:	2000      	movs	r0, #0
 800e1d8:	e7e0      	b.n	800e19c <_raise_r+0x12>
	...

0800e1dc <raise>:
 800e1dc:	4b02      	ldr	r3, [pc, #8]	; (800e1e8 <raise+0xc>)
 800e1de:	4601      	mov	r1, r0
 800e1e0:	6818      	ldr	r0, [r3, #0]
 800e1e2:	f7ff bfd2 	b.w	800e18a <_raise_r>
 800e1e6:	bf00      	nop
 800e1e8:	20000010 	.word	0x20000010

0800e1ec <_kill_r>:
 800e1ec:	b538      	push	{r3, r4, r5, lr}
 800e1ee:	4d07      	ldr	r5, [pc, #28]	; (800e20c <_kill_r+0x20>)
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	4604      	mov	r4, r0
 800e1f4:	4608      	mov	r0, r1
 800e1f6:	4611      	mov	r1, r2
 800e1f8:	602b      	str	r3, [r5, #0]
 800e1fa:	f7f3 fe14 	bl	8001e26 <_kill>
 800e1fe:	1c43      	adds	r3, r0, #1
 800e200:	d102      	bne.n	800e208 <_kill_r+0x1c>
 800e202:	682b      	ldr	r3, [r5, #0]
 800e204:	b103      	cbz	r3, 800e208 <_kill_r+0x1c>
 800e206:	6023      	str	r3, [r4, #0]
 800e208:	bd38      	pop	{r3, r4, r5, pc}
 800e20a:	bf00      	nop
 800e20c:	20001d68 	.word	0x20001d68

0800e210 <_getpid_r>:
 800e210:	f7f3 be02 	b.w	8001e18 <_getpid>

0800e214 <__ascii_wctomb>:
 800e214:	4603      	mov	r3, r0
 800e216:	4608      	mov	r0, r1
 800e218:	b141      	cbz	r1, 800e22c <__ascii_wctomb+0x18>
 800e21a:	2aff      	cmp	r2, #255	; 0xff
 800e21c:	d904      	bls.n	800e228 <__ascii_wctomb+0x14>
 800e21e:	228a      	movs	r2, #138	; 0x8a
 800e220:	601a      	str	r2, [r3, #0]
 800e222:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e226:	4770      	bx	lr
 800e228:	700a      	strb	r2, [r1, #0]
 800e22a:	2001      	movs	r0, #1
 800e22c:	4770      	bx	lr
	...

0800e230 <_fstat_r>:
 800e230:	b538      	push	{r3, r4, r5, lr}
 800e232:	4d07      	ldr	r5, [pc, #28]	; (800e250 <_fstat_r+0x20>)
 800e234:	2300      	movs	r3, #0
 800e236:	4604      	mov	r4, r0
 800e238:	4608      	mov	r0, r1
 800e23a:	4611      	mov	r1, r2
 800e23c:	602b      	str	r3, [r5, #0]
 800e23e:	f7f3 fe50 	bl	8001ee2 <_fstat>
 800e242:	1c43      	adds	r3, r0, #1
 800e244:	d102      	bne.n	800e24c <_fstat_r+0x1c>
 800e246:	682b      	ldr	r3, [r5, #0]
 800e248:	b103      	cbz	r3, 800e24c <_fstat_r+0x1c>
 800e24a:	6023      	str	r3, [r4, #0]
 800e24c:	bd38      	pop	{r3, r4, r5, pc}
 800e24e:	bf00      	nop
 800e250:	20001d68 	.word	0x20001d68

0800e254 <_isatty_r>:
 800e254:	b538      	push	{r3, r4, r5, lr}
 800e256:	4d06      	ldr	r5, [pc, #24]	; (800e270 <_isatty_r+0x1c>)
 800e258:	2300      	movs	r3, #0
 800e25a:	4604      	mov	r4, r0
 800e25c:	4608      	mov	r0, r1
 800e25e:	602b      	str	r3, [r5, #0]
 800e260:	f7f3 fe4e 	bl	8001f00 <_isatty>
 800e264:	1c43      	adds	r3, r0, #1
 800e266:	d102      	bne.n	800e26e <_isatty_r+0x1a>
 800e268:	682b      	ldr	r3, [r5, #0]
 800e26a:	b103      	cbz	r3, 800e26e <_isatty_r+0x1a>
 800e26c:	6023      	str	r3, [r4, #0]
 800e26e:	bd38      	pop	{r3, r4, r5, pc}
 800e270:	20001d68 	.word	0x20001d68

0800e274 <_malloc_usable_size_r>:
 800e274:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e278:	1f18      	subs	r0, r3, #4
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	bfbc      	itt	lt
 800e27e:	580b      	ldrlt	r3, [r1, r0]
 800e280:	18c0      	addlt	r0, r0, r3
 800e282:	4770      	bx	lr

0800e284 <pow>:
 800e284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e288:	4614      	mov	r4, r2
 800e28a:	461d      	mov	r5, r3
 800e28c:	4680      	mov	r8, r0
 800e28e:	4689      	mov	r9, r1
 800e290:	f000 f862 	bl	800e358 <__ieee754_pow>
 800e294:	4622      	mov	r2, r4
 800e296:	4606      	mov	r6, r0
 800e298:	460f      	mov	r7, r1
 800e29a:	462b      	mov	r3, r5
 800e29c:	4620      	mov	r0, r4
 800e29e:	4629      	mov	r1, r5
 800e2a0:	f7f2 fc1c 	bl	8000adc <__aeabi_dcmpun>
 800e2a4:	bbc8      	cbnz	r0, 800e31a <pow+0x96>
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	4640      	mov	r0, r8
 800e2ac:	4649      	mov	r1, r9
 800e2ae:	f7f2 fbe3 	bl	8000a78 <__aeabi_dcmpeq>
 800e2b2:	b1b8      	cbz	r0, 800e2e4 <pow+0x60>
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	4620      	mov	r0, r4
 800e2ba:	4629      	mov	r1, r5
 800e2bc:	f7f2 fbdc 	bl	8000a78 <__aeabi_dcmpeq>
 800e2c0:	2800      	cmp	r0, #0
 800e2c2:	d141      	bne.n	800e348 <pow+0xc4>
 800e2c4:	4620      	mov	r0, r4
 800e2c6:	4629      	mov	r1, r5
 800e2c8:	f000 fe39 	bl	800ef3e <finite>
 800e2cc:	b328      	cbz	r0, 800e31a <pow+0x96>
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	4620      	mov	r0, r4
 800e2d4:	4629      	mov	r1, r5
 800e2d6:	f7f2 fbd9 	bl	8000a8c <__aeabi_dcmplt>
 800e2da:	b1f0      	cbz	r0, 800e31a <pow+0x96>
 800e2dc:	f7fc ffce 	bl	800b27c <__errno>
 800e2e0:	2322      	movs	r3, #34	; 0x22
 800e2e2:	e019      	b.n	800e318 <pow+0x94>
 800e2e4:	4630      	mov	r0, r6
 800e2e6:	4639      	mov	r1, r7
 800e2e8:	f000 fe29 	bl	800ef3e <finite>
 800e2ec:	b9c8      	cbnz	r0, 800e322 <pow+0x9e>
 800e2ee:	4640      	mov	r0, r8
 800e2f0:	4649      	mov	r1, r9
 800e2f2:	f000 fe24 	bl	800ef3e <finite>
 800e2f6:	b1a0      	cbz	r0, 800e322 <pow+0x9e>
 800e2f8:	4620      	mov	r0, r4
 800e2fa:	4629      	mov	r1, r5
 800e2fc:	f000 fe1f 	bl	800ef3e <finite>
 800e300:	b178      	cbz	r0, 800e322 <pow+0x9e>
 800e302:	4632      	mov	r2, r6
 800e304:	463b      	mov	r3, r7
 800e306:	4630      	mov	r0, r6
 800e308:	4639      	mov	r1, r7
 800e30a:	f7f2 fbe7 	bl	8000adc <__aeabi_dcmpun>
 800e30e:	2800      	cmp	r0, #0
 800e310:	d0e4      	beq.n	800e2dc <pow+0x58>
 800e312:	f7fc ffb3 	bl	800b27c <__errno>
 800e316:	2321      	movs	r3, #33	; 0x21
 800e318:	6003      	str	r3, [r0, #0]
 800e31a:	4630      	mov	r0, r6
 800e31c:	4639      	mov	r1, r7
 800e31e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e322:	2200      	movs	r2, #0
 800e324:	2300      	movs	r3, #0
 800e326:	4630      	mov	r0, r6
 800e328:	4639      	mov	r1, r7
 800e32a:	f7f2 fba5 	bl	8000a78 <__aeabi_dcmpeq>
 800e32e:	2800      	cmp	r0, #0
 800e330:	d0f3      	beq.n	800e31a <pow+0x96>
 800e332:	4640      	mov	r0, r8
 800e334:	4649      	mov	r1, r9
 800e336:	f000 fe02 	bl	800ef3e <finite>
 800e33a:	2800      	cmp	r0, #0
 800e33c:	d0ed      	beq.n	800e31a <pow+0x96>
 800e33e:	4620      	mov	r0, r4
 800e340:	4629      	mov	r1, r5
 800e342:	f000 fdfc 	bl	800ef3e <finite>
 800e346:	e7c8      	b.n	800e2da <pow+0x56>
 800e348:	4f01      	ldr	r7, [pc, #4]	; (800e350 <pow+0xcc>)
 800e34a:	2600      	movs	r6, #0
 800e34c:	e7e5      	b.n	800e31a <pow+0x96>
 800e34e:	bf00      	nop
 800e350:	3ff00000 	.word	0x3ff00000
 800e354:	00000000 	.word	0x00000000

0800e358 <__ieee754_pow>:
 800e358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e35c:	b093      	sub	sp, #76	; 0x4c
 800e35e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e362:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800e366:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800e36a:	4689      	mov	r9, r1
 800e36c:	ea56 0102 	orrs.w	r1, r6, r2
 800e370:	4680      	mov	r8, r0
 800e372:	d111      	bne.n	800e398 <__ieee754_pow+0x40>
 800e374:	1803      	adds	r3, r0, r0
 800e376:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800e37a:	4152      	adcs	r2, r2
 800e37c:	4299      	cmp	r1, r3
 800e37e:	4b82      	ldr	r3, [pc, #520]	; (800e588 <__ieee754_pow+0x230>)
 800e380:	4193      	sbcs	r3, r2
 800e382:	f080 84b9 	bcs.w	800ecf8 <__ieee754_pow+0x9a0>
 800e386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e38a:	4640      	mov	r0, r8
 800e38c:	4649      	mov	r1, r9
 800e38e:	f7f1 ff55 	bl	800023c <__adddf3>
 800e392:	4683      	mov	fp, r0
 800e394:	468c      	mov	ip, r1
 800e396:	e06f      	b.n	800e478 <__ieee754_pow+0x120>
 800e398:	4b7c      	ldr	r3, [pc, #496]	; (800e58c <__ieee754_pow+0x234>)
 800e39a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800e39e:	429c      	cmp	r4, r3
 800e3a0:	464d      	mov	r5, r9
 800e3a2:	4682      	mov	sl, r0
 800e3a4:	dc06      	bgt.n	800e3b4 <__ieee754_pow+0x5c>
 800e3a6:	d101      	bne.n	800e3ac <__ieee754_pow+0x54>
 800e3a8:	2800      	cmp	r0, #0
 800e3aa:	d1ec      	bne.n	800e386 <__ieee754_pow+0x2e>
 800e3ac:	429e      	cmp	r6, r3
 800e3ae:	dc01      	bgt.n	800e3b4 <__ieee754_pow+0x5c>
 800e3b0:	d10f      	bne.n	800e3d2 <__ieee754_pow+0x7a>
 800e3b2:	b172      	cbz	r2, 800e3d2 <__ieee754_pow+0x7a>
 800e3b4:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800e3b8:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800e3bc:	ea55 050a 	orrs.w	r5, r5, sl
 800e3c0:	d1e1      	bne.n	800e386 <__ieee754_pow+0x2e>
 800e3c2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e3c6:	18db      	adds	r3, r3, r3
 800e3c8:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800e3cc:	4152      	adcs	r2, r2
 800e3ce:	429d      	cmp	r5, r3
 800e3d0:	e7d5      	b.n	800e37e <__ieee754_pow+0x26>
 800e3d2:	2d00      	cmp	r5, #0
 800e3d4:	da39      	bge.n	800e44a <__ieee754_pow+0xf2>
 800e3d6:	4b6e      	ldr	r3, [pc, #440]	; (800e590 <__ieee754_pow+0x238>)
 800e3d8:	429e      	cmp	r6, r3
 800e3da:	dc52      	bgt.n	800e482 <__ieee754_pow+0x12a>
 800e3dc:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e3e0:	429e      	cmp	r6, r3
 800e3e2:	f340 849c 	ble.w	800ed1e <__ieee754_pow+0x9c6>
 800e3e6:	1533      	asrs	r3, r6, #20
 800e3e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e3ec:	2b14      	cmp	r3, #20
 800e3ee:	dd0f      	ble.n	800e410 <__ieee754_pow+0xb8>
 800e3f0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e3f4:	fa22 f103 	lsr.w	r1, r2, r3
 800e3f8:	fa01 f303 	lsl.w	r3, r1, r3
 800e3fc:	4293      	cmp	r3, r2
 800e3fe:	f040 848e 	bne.w	800ed1e <__ieee754_pow+0x9c6>
 800e402:	f001 0101 	and.w	r1, r1, #1
 800e406:	f1c1 0302 	rsb	r3, r1, #2
 800e40a:	9300      	str	r3, [sp, #0]
 800e40c:	b182      	cbz	r2, 800e430 <__ieee754_pow+0xd8>
 800e40e:	e05d      	b.n	800e4cc <__ieee754_pow+0x174>
 800e410:	2a00      	cmp	r2, #0
 800e412:	d159      	bne.n	800e4c8 <__ieee754_pow+0x170>
 800e414:	f1c3 0314 	rsb	r3, r3, #20
 800e418:	fa46 f103 	asr.w	r1, r6, r3
 800e41c:	fa01 f303 	lsl.w	r3, r1, r3
 800e420:	42b3      	cmp	r3, r6
 800e422:	f040 8479 	bne.w	800ed18 <__ieee754_pow+0x9c0>
 800e426:	f001 0101 	and.w	r1, r1, #1
 800e42a:	f1c1 0302 	rsb	r3, r1, #2
 800e42e:	9300      	str	r3, [sp, #0]
 800e430:	4b58      	ldr	r3, [pc, #352]	; (800e594 <__ieee754_pow+0x23c>)
 800e432:	429e      	cmp	r6, r3
 800e434:	d132      	bne.n	800e49c <__ieee754_pow+0x144>
 800e436:	2f00      	cmp	r7, #0
 800e438:	f280 846a 	bge.w	800ed10 <__ieee754_pow+0x9b8>
 800e43c:	4955      	ldr	r1, [pc, #340]	; (800e594 <__ieee754_pow+0x23c>)
 800e43e:	4642      	mov	r2, r8
 800e440:	464b      	mov	r3, r9
 800e442:	2000      	movs	r0, #0
 800e444:	f7f2 f9da 	bl	80007fc <__aeabi_ddiv>
 800e448:	e7a3      	b.n	800e392 <__ieee754_pow+0x3a>
 800e44a:	2300      	movs	r3, #0
 800e44c:	9300      	str	r3, [sp, #0]
 800e44e:	2a00      	cmp	r2, #0
 800e450:	d13c      	bne.n	800e4cc <__ieee754_pow+0x174>
 800e452:	4b4e      	ldr	r3, [pc, #312]	; (800e58c <__ieee754_pow+0x234>)
 800e454:	429e      	cmp	r6, r3
 800e456:	d1eb      	bne.n	800e430 <__ieee754_pow+0xd8>
 800e458:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e45c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e460:	ea53 030a 	orrs.w	r3, r3, sl
 800e464:	f000 8448 	beq.w	800ecf8 <__ieee754_pow+0x9a0>
 800e468:	4b4b      	ldr	r3, [pc, #300]	; (800e598 <__ieee754_pow+0x240>)
 800e46a:	429c      	cmp	r4, r3
 800e46c:	dd0b      	ble.n	800e486 <__ieee754_pow+0x12e>
 800e46e:	2f00      	cmp	r7, #0
 800e470:	f2c0 8448 	blt.w	800ed04 <__ieee754_pow+0x9ac>
 800e474:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800e478:	4658      	mov	r0, fp
 800e47a:	4661      	mov	r1, ip
 800e47c:	b013      	add	sp, #76	; 0x4c
 800e47e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e482:	2302      	movs	r3, #2
 800e484:	e7e2      	b.n	800e44c <__ieee754_pow+0xf4>
 800e486:	2f00      	cmp	r7, #0
 800e488:	f04f 0b00 	mov.w	fp, #0
 800e48c:	f04f 0c00 	mov.w	ip, #0
 800e490:	daf2      	bge.n	800e478 <__ieee754_pow+0x120>
 800e492:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800e496:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800e49a:	e7ed      	b.n	800e478 <__ieee754_pow+0x120>
 800e49c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800e4a0:	d106      	bne.n	800e4b0 <__ieee754_pow+0x158>
 800e4a2:	4642      	mov	r2, r8
 800e4a4:	464b      	mov	r3, r9
 800e4a6:	4640      	mov	r0, r8
 800e4a8:	4649      	mov	r1, r9
 800e4aa:	f7f2 f87d 	bl	80005a8 <__aeabi_dmul>
 800e4ae:	e770      	b.n	800e392 <__ieee754_pow+0x3a>
 800e4b0:	4b3a      	ldr	r3, [pc, #232]	; (800e59c <__ieee754_pow+0x244>)
 800e4b2:	429f      	cmp	r7, r3
 800e4b4:	d10a      	bne.n	800e4cc <__ieee754_pow+0x174>
 800e4b6:	2d00      	cmp	r5, #0
 800e4b8:	db08      	blt.n	800e4cc <__ieee754_pow+0x174>
 800e4ba:	4640      	mov	r0, r8
 800e4bc:	4649      	mov	r1, r9
 800e4be:	b013      	add	sp, #76	; 0x4c
 800e4c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4c4:	f000 bc5e 	b.w	800ed84 <__ieee754_sqrt>
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	9300      	str	r3, [sp, #0]
 800e4cc:	4640      	mov	r0, r8
 800e4ce:	4649      	mov	r1, r9
 800e4d0:	f000 fd32 	bl	800ef38 <fabs>
 800e4d4:	4683      	mov	fp, r0
 800e4d6:	468c      	mov	ip, r1
 800e4d8:	f1ba 0f00 	cmp.w	sl, #0
 800e4dc:	d128      	bne.n	800e530 <__ieee754_pow+0x1d8>
 800e4de:	b124      	cbz	r4, 800e4ea <__ieee754_pow+0x192>
 800e4e0:	4b2c      	ldr	r3, [pc, #176]	; (800e594 <__ieee754_pow+0x23c>)
 800e4e2:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	d122      	bne.n	800e530 <__ieee754_pow+0x1d8>
 800e4ea:	2f00      	cmp	r7, #0
 800e4ec:	da07      	bge.n	800e4fe <__ieee754_pow+0x1a6>
 800e4ee:	465a      	mov	r2, fp
 800e4f0:	4663      	mov	r3, ip
 800e4f2:	4928      	ldr	r1, [pc, #160]	; (800e594 <__ieee754_pow+0x23c>)
 800e4f4:	2000      	movs	r0, #0
 800e4f6:	f7f2 f981 	bl	80007fc <__aeabi_ddiv>
 800e4fa:	4683      	mov	fp, r0
 800e4fc:	468c      	mov	ip, r1
 800e4fe:	2d00      	cmp	r5, #0
 800e500:	daba      	bge.n	800e478 <__ieee754_pow+0x120>
 800e502:	9b00      	ldr	r3, [sp, #0]
 800e504:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e508:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e50c:	4323      	orrs	r3, r4
 800e50e:	d108      	bne.n	800e522 <__ieee754_pow+0x1ca>
 800e510:	465a      	mov	r2, fp
 800e512:	4663      	mov	r3, ip
 800e514:	4658      	mov	r0, fp
 800e516:	4661      	mov	r1, ip
 800e518:	f7f1 fe8e 	bl	8000238 <__aeabi_dsub>
 800e51c:	4602      	mov	r2, r0
 800e51e:	460b      	mov	r3, r1
 800e520:	e790      	b.n	800e444 <__ieee754_pow+0xec>
 800e522:	9b00      	ldr	r3, [sp, #0]
 800e524:	2b01      	cmp	r3, #1
 800e526:	d1a7      	bne.n	800e478 <__ieee754_pow+0x120>
 800e528:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800e52c:	469c      	mov	ip, r3
 800e52e:	e7a3      	b.n	800e478 <__ieee754_pow+0x120>
 800e530:	0feb      	lsrs	r3, r5, #31
 800e532:	3b01      	subs	r3, #1
 800e534:	930c      	str	r3, [sp, #48]	; 0x30
 800e536:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e538:	9b00      	ldr	r3, [sp, #0]
 800e53a:	4313      	orrs	r3, r2
 800e53c:	d104      	bne.n	800e548 <__ieee754_pow+0x1f0>
 800e53e:	4642      	mov	r2, r8
 800e540:	464b      	mov	r3, r9
 800e542:	4640      	mov	r0, r8
 800e544:	4649      	mov	r1, r9
 800e546:	e7e7      	b.n	800e518 <__ieee754_pow+0x1c0>
 800e548:	4b15      	ldr	r3, [pc, #84]	; (800e5a0 <__ieee754_pow+0x248>)
 800e54a:	429e      	cmp	r6, r3
 800e54c:	f340 80f6 	ble.w	800e73c <__ieee754_pow+0x3e4>
 800e550:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e554:	429e      	cmp	r6, r3
 800e556:	4b10      	ldr	r3, [pc, #64]	; (800e598 <__ieee754_pow+0x240>)
 800e558:	dd09      	ble.n	800e56e <__ieee754_pow+0x216>
 800e55a:	429c      	cmp	r4, r3
 800e55c:	dc0c      	bgt.n	800e578 <__ieee754_pow+0x220>
 800e55e:	2f00      	cmp	r7, #0
 800e560:	da0c      	bge.n	800e57c <__ieee754_pow+0x224>
 800e562:	2000      	movs	r0, #0
 800e564:	b013      	add	sp, #76	; 0x4c
 800e566:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e56a:	f000 bce0 	b.w	800ef2e <__math_oflow>
 800e56e:	429c      	cmp	r4, r3
 800e570:	dbf5      	blt.n	800e55e <__ieee754_pow+0x206>
 800e572:	4b08      	ldr	r3, [pc, #32]	; (800e594 <__ieee754_pow+0x23c>)
 800e574:	429c      	cmp	r4, r3
 800e576:	dd15      	ble.n	800e5a4 <__ieee754_pow+0x24c>
 800e578:	2f00      	cmp	r7, #0
 800e57a:	dcf2      	bgt.n	800e562 <__ieee754_pow+0x20a>
 800e57c:	2000      	movs	r0, #0
 800e57e:	b013      	add	sp, #76	; 0x4c
 800e580:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e584:	f000 bcce 	b.w	800ef24 <__math_uflow>
 800e588:	fff00000 	.word	0xfff00000
 800e58c:	7ff00000 	.word	0x7ff00000
 800e590:	433fffff 	.word	0x433fffff
 800e594:	3ff00000 	.word	0x3ff00000
 800e598:	3fefffff 	.word	0x3fefffff
 800e59c:	3fe00000 	.word	0x3fe00000
 800e5a0:	41e00000 	.word	0x41e00000
 800e5a4:	4661      	mov	r1, ip
 800e5a6:	4b60      	ldr	r3, [pc, #384]	; (800e728 <__ieee754_pow+0x3d0>)
 800e5a8:	2200      	movs	r2, #0
 800e5aa:	4658      	mov	r0, fp
 800e5ac:	f7f1 fe44 	bl	8000238 <__aeabi_dsub>
 800e5b0:	a355      	add	r3, pc, #340	; (adr r3, 800e708 <__ieee754_pow+0x3b0>)
 800e5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5b6:	4604      	mov	r4, r0
 800e5b8:	460d      	mov	r5, r1
 800e5ba:	f7f1 fff5 	bl	80005a8 <__aeabi_dmul>
 800e5be:	a354      	add	r3, pc, #336	; (adr r3, 800e710 <__ieee754_pow+0x3b8>)
 800e5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c4:	4606      	mov	r6, r0
 800e5c6:	460f      	mov	r7, r1
 800e5c8:	4620      	mov	r0, r4
 800e5ca:	4629      	mov	r1, r5
 800e5cc:	f7f1 ffec 	bl	80005a8 <__aeabi_dmul>
 800e5d0:	4b56      	ldr	r3, [pc, #344]	; (800e72c <__ieee754_pow+0x3d4>)
 800e5d2:	4682      	mov	sl, r0
 800e5d4:	468b      	mov	fp, r1
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	4620      	mov	r0, r4
 800e5da:	4629      	mov	r1, r5
 800e5dc:	f7f1 ffe4 	bl	80005a8 <__aeabi_dmul>
 800e5e0:	4602      	mov	r2, r0
 800e5e2:	460b      	mov	r3, r1
 800e5e4:	a14c      	add	r1, pc, #304	; (adr r1, 800e718 <__ieee754_pow+0x3c0>)
 800e5e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5ea:	f7f1 fe25 	bl	8000238 <__aeabi_dsub>
 800e5ee:	4622      	mov	r2, r4
 800e5f0:	462b      	mov	r3, r5
 800e5f2:	f7f1 ffd9 	bl	80005a8 <__aeabi_dmul>
 800e5f6:	4602      	mov	r2, r0
 800e5f8:	460b      	mov	r3, r1
 800e5fa:	2000      	movs	r0, #0
 800e5fc:	494c      	ldr	r1, [pc, #304]	; (800e730 <__ieee754_pow+0x3d8>)
 800e5fe:	f7f1 fe1b 	bl	8000238 <__aeabi_dsub>
 800e602:	4622      	mov	r2, r4
 800e604:	462b      	mov	r3, r5
 800e606:	4680      	mov	r8, r0
 800e608:	4689      	mov	r9, r1
 800e60a:	4620      	mov	r0, r4
 800e60c:	4629      	mov	r1, r5
 800e60e:	f7f1 ffcb 	bl	80005a8 <__aeabi_dmul>
 800e612:	4602      	mov	r2, r0
 800e614:	460b      	mov	r3, r1
 800e616:	4640      	mov	r0, r8
 800e618:	4649      	mov	r1, r9
 800e61a:	f7f1 ffc5 	bl	80005a8 <__aeabi_dmul>
 800e61e:	a340      	add	r3, pc, #256	; (adr r3, 800e720 <__ieee754_pow+0x3c8>)
 800e620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e624:	f7f1 ffc0 	bl	80005a8 <__aeabi_dmul>
 800e628:	4602      	mov	r2, r0
 800e62a:	460b      	mov	r3, r1
 800e62c:	4650      	mov	r0, sl
 800e62e:	4659      	mov	r1, fp
 800e630:	f7f1 fe02 	bl	8000238 <__aeabi_dsub>
 800e634:	4602      	mov	r2, r0
 800e636:	460b      	mov	r3, r1
 800e638:	4604      	mov	r4, r0
 800e63a:	460d      	mov	r5, r1
 800e63c:	4630      	mov	r0, r6
 800e63e:	4639      	mov	r1, r7
 800e640:	f7f1 fdfc 	bl	800023c <__adddf3>
 800e644:	f04f 0a00 	mov.w	sl, #0
 800e648:	4632      	mov	r2, r6
 800e64a:	463b      	mov	r3, r7
 800e64c:	4650      	mov	r0, sl
 800e64e:	468b      	mov	fp, r1
 800e650:	f7f1 fdf2 	bl	8000238 <__aeabi_dsub>
 800e654:	4602      	mov	r2, r0
 800e656:	460b      	mov	r3, r1
 800e658:	4620      	mov	r0, r4
 800e65a:	4629      	mov	r1, r5
 800e65c:	f7f1 fdec 	bl	8000238 <__aeabi_dsub>
 800e660:	9b00      	ldr	r3, [sp, #0]
 800e662:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e664:	3b01      	subs	r3, #1
 800e666:	4313      	orrs	r3, r2
 800e668:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e66c:	bf0c      	ite	eq
 800e66e:	4b31      	ldreq	r3, [pc, #196]	; (800e734 <__ieee754_pow+0x3dc>)
 800e670:	4b2d      	ldrne	r3, [pc, #180]	; (800e728 <__ieee754_pow+0x3d0>)
 800e672:	2600      	movs	r6, #0
 800e674:	2200      	movs	r2, #0
 800e676:	e9cd 2300 	strd	r2, r3, [sp]
 800e67a:	4604      	mov	r4, r0
 800e67c:	460d      	mov	r5, r1
 800e67e:	4632      	mov	r2, r6
 800e680:	463b      	mov	r3, r7
 800e682:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e686:	f7f1 fdd7 	bl	8000238 <__aeabi_dsub>
 800e68a:	4652      	mov	r2, sl
 800e68c:	465b      	mov	r3, fp
 800e68e:	f7f1 ff8b 	bl	80005a8 <__aeabi_dmul>
 800e692:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e696:	4680      	mov	r8, r0
 800e698:	4689      	mov	r9, r1
 800e69a:	4620      	mov	r0, r4
 800e69c:	4629      	mov	r1, r5
 800e69e:	f7f1 ff83 	bl	80005a8 <__aeabi_dmul>
 800e6a2:	4602      	mov	r2, r0
 800e6a4:	460b      	mov	r3, r1
 800e6a6:	4640      	mov	r0, r8
 800e6a8:	4649      	mov	r1, r9
 800e6aa:	f7f1 fdc7 	bl	800023c <__adddf3>
 800e6ae:	4632      	mov	r2, r6
 800e6b0:	463b      	mov	r3, r7
 800e6b2:	4680      	mov	r8, r0
 800e6b4:	4689      	mov	r9, r1
 800e6b6:	4650      	mov	r0, sl
 800e6b8:	4659      	mov	r1, fp
 800e6ba:	f7f1 ff75 	bl	80005a8 <__aeabi_dmul>
 800e6be:	460b      	mov	r3, r1
 800e6c0:	4604      	mov	r4, r0
 800e6c2:	460d      	mov	r5, r1
 800e6c4:	4602      	mov	r2, r0
 800e6c6:	4649      	mov	r1, r9
 800e6c8:	4640      	mov	r0, r8
 800e6ca:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800e6ce:	f7f1 fdb5 	bl	800023c <__adddf3>
 800e6d2:	4b19      	ldr	r3, [pc, #100]	; (800e738 <__ieee754_pow+0x3e0>)
 800e6d4:	4299      	cmp	r1, r3
 800e6d6:	4682      	mov	sl, r0
 800e6d8:	460f      	mov	r7, r1
 800e6da:	460e      	mov	r6, r1
 800e6dc:	f340 82e7 	ble.w	800ecae <__ieee754_pow+0x956>
 800e6e0:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e6e4:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e6e8:	4303      	orrs	r3, r0
 800e6ea:	f000 81e1 	beq.w	800eab0 <__ieee754_pow+0x758>
 800e6ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	f7f2 f9c9 	bl	8000a8c <__aeabi_dcmplt>
 800e6fa:	3800      	subs	r0, #0
 800e6fc:	bf18      	it	ne
 800e6fe:	2001      	movne	r0, #1
 800e700:	e730      	b.n	800e564 <__ieee754_pow+0x20c>
 800e702:	bf00      	nop
 800e704:	f3af 8000 	nop.w
 800e708:	60000000 	.word	0x60000000
 800e70c:	3ff71547 	.word	0x3ff71547
 800e710:	f85ddf44 	.word	0xf85ddf44
 800e714:	3e54ae0b 	.word	0x3e54ae0b
 800e718:	55555555 	.word	0x55555555
 800e71c:	3fd55555 	.word	0x3fd55555
 800e720:	652b82fe 	.word	0x652b82fe
 800e724:	3ff71547 	.word	0x3ff71547
 800e728:	3ff00000 	.word	0x3ff00000
 800e72c:	3fd00000 	.word	0x3fd00000
 800e730:	3fe00000 	.word	0x3fe00000
 800e734:	bff00000 	.word	0xbff00000
 800e738:	408fffff 	.word	0x408fffff
 800e73c:	4bd2      	ldr	r3, [pc, #840]	; (800ea88 <__ieee754_pow+0x730>)
 800e73e:	402b      	ands	r3, r5
 800e740:	2200      	movs	r2, #0
 800e742:	b943      	cbnz	r3, 800e756 <__ieee754_pow+0x3fe>
 800e744:	4658      	mov	r0, fp
 800e746:	4bd1      	ldr	r3, [pc, #836]	; (800ea8c <__ieee754_pow+0x734>)
 800e748:	4661      	mov	r1, ip
 800e74a:	f7f1 ff2d 	bl	80005a8 <__aeabi_dmul>
 800e74e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e752:	4683      	mov	fp, r0
 800e754:	460c      	mov	r4, r1
 800e756:	1523      	asrs	r3, r4, #20
 800e758:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e75c:	4413      	add	r3, r2
 800e75e:	930b      	str	r3, [sp, #44]	; 0x2c
 800e760:	4bcb      	ldr	r3, [pc, #812]	; (800ea90 <__ieee754_pow+0x738>)
 800e762:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e766:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e76a:	429c      	cmp	r4, r3
 800e76c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e770:	dd08      	ble.n	800e784 <__ieee754_pow+0x42c>
 800e772:	4bc8      	ldr	r3, [pc, #800]	; (800ea94 <__ieee754_pow+0x73c>)
 800e774:	429c      	cmp	r4, r3
 800e776:	f340 8199 	ble.w	800eaac <__ieee754_pow+0x754>
 800e77a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e77c:	3301      	adds	r3, #1
 800e77e:	930b      	str	r3, [sp, #44]	; 0x2c
 800e780:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e784:	2600      	movs	r6, #0
 800e786:	00f3      	lsls	r3, r6, #3
 800e788:	930d      	str	r3, [sp, #52]	; 0x34
 800e78a:	4bc3      	ldr	r3, [pc, #780]	; (800ea98 <__ieee754_pow+0x740>)
 800e78c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e790:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e794:	4658      	mov	r0, fp
 800e796:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800e79a:	461a      	mov	r2, r3
 800e79c:	4629      	mov	r1, r5
 800e79e:	4623      	mov	r3, r4
 800e7a0:	f7f1 fd4a 	bl	8000238 <__aeabi_dsub>
 800e7a4:	46da      	mov	sl, fp
 800e7a6:	4652      	mov	r2, sl
 800e7a8:	462b      	mov	r3, r5
 800e7aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800e7ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e7b2:	f7f1 fd43 	bl	800023c <__adddf3>
 800e7b6:	4602      	mov	r2, r0
 800e7b8:	460b      	mov	r3, r1
 800e7ba:	2000      	movs	r0, #0
 800e7bc:	49b7      	ldr	r1, [pc, #732]	; (800ea9c <__ieee754_pow+0x744>)
 800e7be:	f7f2 f81d 	bl	80007fc <__aeabi_ddiv>
 800e7c2:	4602      	mov	r2, r0
 800e7c4:	460b      	mov	r3, r1
 800e7c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e7ca:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e7ce:	f7f1 feeb 	bl	80005a8 <__aeabi_dmul>
 800e7d2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e7d6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800e7da:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e7de:	2300      	movs	r3, #0
 800e7e0:	9304      	str	r3, [sp, #16]
 800e7e2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800e7e6:	46ab      	mov	fp, r5
 800e7e8:	106d      	asrs	r5, r5, #1
 800e7ea:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e7ee:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e7f2:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	4640      	mov	r0, r8
 800e7fa:	4649      	mov	r1, r9
 800e7fc:	4614      	mov	r4, r2
 800e7fe:	461d      	mov	r5, r3
 800e800:	f7f1 fed2 	bl	80005a8 <__aeabi_dmul>
 800e804:	4602      	mov	r2, r0
 800e806:	460b      	mov	r3, r1
 800e808:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e80c:	f7f1 fd14 	bl	8000238 <__aeabi_dsub>
 800e810:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e814:	4606      	mov	r6, r0
 800e816:	460f      	mov	r7, r1
 800e818:	4620      	mov	r0, r4
 800e81a:	4629      	mov	r1, r5
 800e81c:	f7f1 fd0c 	bl	8000238 <__aeabi_dsub>
 800e820:	4602      	mov	r2, r0
 800e822:	460b      	mov	r3, r1
 800e824:	4650      	mov	r0, sl
 800e826:	4659      	mov	r1, fp
 800e828:	f7f1 fd06 	bl	8000238 <__aeabi_dsub>
 800e82c:	4642      	mov	r2, r8
 800e82e:	464b      	mov	r3, r9
 800e830:	f7f1 feba 	bl	80005a8 <__aeabi_dmul>
 800e834:	4602      	mov	r2, r0
 800e836:	460b      	mov	r3, r1
 800e838:	4630      	mov	r0, r6
 800e83a:	4639      	mov	r1, r7
 800e83c:	f7f1 fcfc 	bl	8000238 <__aeabi_dsub>
 800e840:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e844:	f7f1 feb0 	bl	80005a8 <__aeabi_dmul>
 800e848:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e84c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e850:	4610      	mov	r0, r2
 800e852:	4619      	mov	r1, r3
 800e854:	f7f1 fea8 	bl	80005a8 <__aeabi_dmul>
 800e858:	a379      	add	r3, pc, #484	; (adr r3, 800ea40 <__ieee754_pow+0x6e8>)
 800e85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e85e:	4604      	mov	r4, r0
 800e860:	460d      	mov	r5, r1
 800e862:	f7f1 fea1 	bl	80005a8 <__aeabi_dmul>
 800e866:	a378      	add	r3, pc, #480	; (adr r3, 800ea48 <__ieee754_pow+0x6f0>)
 800e868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e86c:	f7f1 fce6 	bl	800023c <__adddf3>
 800e870:	4622      	mov	r2, r4
 800e872:	462b      	mov	r3, r5
 800e874:	f7f1 fe98 	bl	80005a8 <__aeabi_dmul>
 800e878:	a375      	add	r3, pc, #468	; (adr r3, 800ea50 <__ieee754_pow+0x6f8>)
 800e87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e87e:	f7f1 fcdd 	bl	800023c <__adddf3>
 800e882:	4622      	mov	r2, r4
 800e884:	462b      	mov	r3, r5
 800e886:	f7f1 fe8f 	bl	80005a8 <__aeabi_dmul>
 800e88a:	a373      	add	r3, pc, #460	; (adr r3, 800ea58 <__ieee754_pow+0x700>)
 800e88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e890:	f7f1 fcd4 	bl	800023c <__adddf3>
 800e894:	4622      	mov	r2, r4
 800e896:	462b      	mov	r3, r5
 800e898:	f7f1 fe86 	bl	80005a8 <__aeabi_dmul>
 800e89c:	a370      	add	r3, pc, #448	; (adr r3, 800ea60 <__ieee754_pow+0x708>)
 800e89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8a2:	f7f1 fccb 	bl	800023c <__adddf3>
 800e8a6:	4622      	mov	r2, r4
 800e8a8:	462b      	mov	r3, r5
 800e8aa:	f7f1 fe7d 	bl	80005a8 <__aeabi_dmul>
 800e8ae:	a36e      	add	r3, pc, #440	; (adr r3, 800ea68 <__ieee754_pow+0x710>)
 800e8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8b4:	f7f1 fcc2 	bl	800023c <__adddf3>
 800e8b8:	4622      	mov	r2, r4
 800e8ba:	4606      	mov	r6, r0
 800e8bc:	460f      	mov	r7, r1
 800e8be:	462b      	mov	r3, r5
 800e8c0:	4620      	mov	r0, r4
 800e8c2:	4629      	mov	r1, r5
 800e8c4:	f7f1 fe70 	bl	80005a8 <__aeabi_dmul>
 800e8c8:	4602      	mov	r2, r0
 800e8ca:	460b      	mov	r3, r1
 800e8cc:	4630      	mov	r0, r6
 800e8ce:	4639      	mov	r1, r7
 800e8d0:	f7f1 fe6a 	bl	80005a8 <__aeabi_dmul>
 800e8d4:	4642      	mov	r2, r8
 800e8d6:	4604      	mov	r4, r0
 800e8d8:	460d      	mov	r5, r1
 800e8da:	464b      	mov	r3, r9
 800e8dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e8e0:	f7f1 fcac 	bl	800023c <__adddf3>
 800e8e4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e8e8:	f7f1 fe5e 	bl	80005a8 <__aeabi_dmul>
 800e8ec:	4622      	mov	r2, r4
 800e8ee:	462b      	mov	r3, r5
 800e8f0:	f7f1 fca4 	bl	800023c <__adddf3>
 800e8f4:	4642      	mov	r2, r8
 800e8f6:	4606      	mov	r6, r0
 800e8f8:	460f      	mov	r7, r1
 800e8fa:	464b      	mov	r3, r9
 800e8fc:	4640      	mov	r0, r8
 800e8fe:	4649      	mov	r1, r9
 800e900:	f7f1 fe52 	bl	80005a8 <__aeabi_dmul>
 800e904:	4b66      	ldr	r3, [pc, #408]	; (800eaa0 <__ieee754_pow+0x748>)
 800e906:	2200      	movs	r2, #0
 800e908:	4682      	mov	sl, r0
 800e90a:	468b      	mov	fp, r1
 800e90c:	f7f1 fc96 	bl	800023c <__adddf3>
 800e910:	4632      	mov	r2, r6
 800e912:	463b      	mov	r3, r7
 800e914:	f7f1 fc92 	bl	800023c <__adddf3>
 800e918:	2400      	movs	r4, #0
 800e91a:	460d      	mov	r5, r1
 800e91c:	4622      	mov	r2, r4
 800e91e:	460b      	mov	r3, r1
 800e920:	4640      	mov	r0, r8
 800e922:	4649      	mov	r1, r9
 800e924:	f7f1 fe40 	bl	80005a8 <__aeabi_dmul>
 800e928:	4b5d      	ldr	r3, [pc, #372]	; (800eaa0 <__ieee754_pow+0x748>)
 800e92a:	4680      	mov	r8, r0
 800e92c:	4689      	mov	r9, r1
 800e92e:	2200      	movs	r2, #0
 800e930:	4620      	mov	r0, r4
 800e932:	4629      	mov	r1, r5
 800e934:	f7f1 fc80 	bl	8000238 <__aeabi_dsub>
 800e938:	4652      	mov	r2, sl
 800e93a:	465b      	mov	r3, fp
 800e93c:	f7f1 fc7c 	bl	8000238 <__aeabi_dsub>
 800e940:	4602      	mov	r2, r0
 800e942:	460b      	mov	r3, r1
 800e944:	4630      	mov	r0, r6
 800e946:	4639      	mov	r1, r7
 800e948:	f7f1 fc76 	bl	8000238 <__aeabi_dsub>
 800e94c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e950:	f7f1 fe2a 	bl	80005a8 <__aeabi_dmul>
 800e954:	4622      	mov	r2, r4
 800e956:	4606      	mov	r6, r0
 800e958:	460f      	mov	r7, r1
 800e95a:	462b      	mov	r3, r5
 800e95c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e960:	f7f1 fe22 	bl	80005a8 <__aeabi_dmul>
 800e964:	4602      	mov	r2, r0
 800e966:	460b      	mov	r3, r1
 800e968:	4630      	mov	r0, r6
 800e96a:	4639      	mov	r1, r7
 800e96c:	f7f1 fc66 	bl	800023c <__adddf3>
 800e970:	4606      	mov	r6, r0
 800e972:	460f      	mov	r7, r1
 800e974:	4602      	mov	r2, r0
 800e976:	460b      	mov	r3, r1
 800e978:	4640      	mov	r0, r8
 800e97a:	4649      	mov	r1, r9
 800e97c:	f7f1 fc5e 	bl	800023c <__adddf3>
 800e980:	2400      	movs	r4, #0
 800e982:	a33b      	add	r3, pc, #236	; (adr r3, 800ea70 <__ieee754_pow+0x718>)
 800e984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e988:	4620      	mov	r0, r4
 800e98a:	460d      	mov	r5, r1
 800e98c:	f7f1 fe0c 	bl	80005a8 <__aeabi_dmul>
 800e990:	4642      	mov	r2, r8
 800e992:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e996:	464b      	mov	r3, r9
 800e998:	4620      	mov	r0, r4
 800e99a:	4629      	mov	r1, r5
 800e99c:	f7f1 fc4c 	bl	8000238 <__aeabi_dsub>
 800e9a0:	4602      	mov	r2, r0
 800e9a2:	460b      	mov	r3, r1
 800e9a4:	4630      	mov	r0, r6
 800e9a6:	4639      	mov	r1, r7
 800e9a8:	f7f1 fc46 	bl	8000238 <__aeabi_dsub>
 800e9ac:	a332      	add	r3, pc, #200	; (adr r3, 800ea78 <__ieee754_pow+0x720>)
 800e9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b2:	f7f1 fdf9 	bl	80005a8 <__aeabi_dmul>
 800e9b6:	a332      	add	r3, pc, #200	; (adr r3, 800ea80 <__ieee754_pow+0x728>)
 800e9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9bc:	4606      	mov	r6, r0
 800e9be:	460f      	mov	r7, r1
 800e9c0:	4620      	mov	r0, r4
 800e9c2:	4629      	mov	r1, r5
 800e9c4:	f7f1 fdf0 	bl	80005a8 <__aeabi_dmul>
 800e9c8:	4602      	mov	r2, r0
 800e9ca:	460b      	mov	r3, r1
 800e9cc:	4630      	mov	r0, r6
 800e9ce:	4639      	mov	r1, r7
 800e9d0:	f7f1 fc34 	bl	800023c <__adddf3>
 800e9d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e9d6:	4b33      	ldr	r3, [pc, #204]	; (800eaa4 <__ieee754_pow+0x74c>)
 800e9d8:	4413      	add	r3, r2
 800e9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9de:	f7f1 fc2d 	bl	800023c <__adddf3>
 800e9e2:	4680      	mov	r8, r0
 800e9e4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e9e6:	4689      	mov	r9, r1
 800e9e8:	f7f1 fd74 	bl	80004d4 <__aeabi_i2d>
 800e9ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e9ee:	4b2e      	ldr	r3, [pc, #184]	; (800eaa8 <__ieee754_pow+0x750>)
 800e9f0:	4413      	add	r3, r2
 800e9f2:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e9f6:	4604      	mov	r4, r0
 800e9f8:	460d      	mov	r5, r1
 800e9fa:	4642      	mov	r2, r8
 800e9fc:	464b      	mov	r3, r9
 800e9fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ea02:	f7f1 fc1b 	bl	800023c <__adddf3>
 800ea06:	4632      	mov	r2, r6
 800ea08:	463b      	mov	r3, r7
 800ea0a:	f7f1 fc17 	bl	800023c <__adddf3>
 800ea0e:	4622      	mov	r2, r4
 800ea10:	462b      	mov	r3, r5
 800ea12:	f7f1 fc13 	bl	800023c <__adddf3>
 800ea16:	f04f 0a00 	mov.w	sl, #0
 800ea1a:	4622      	mov	r2, r4
 800ea1c:	462b      	mov	r3, r5
 800ea1e:	4650      	mov	r0, sl
 800ea20:	468b      	mov	fp, r1
 800ea22:	f7f1 fc09 	bl	8000238 <__aeabi_dsub>
 800ea26:	4632      	mov	r2, r6
 800ea28:	463b      	mov	r3, r7
 800ea2a:	f7f1 fc05 	bl	8000238 <__aeabi_dsub>
 800ea2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ea32:	f7f1 fc01 	bl	8000238 <__aeabi_dsub>
 800ea36:	4602      	mov	r2, r0
 800ea38:	460b      	mov	r3, r1
 800ea3a:	4640      	mov	r0, r8
 800ea3c:	4649      	mov	r1, r9
 800ea3e:	e60d      	b.n	800e65c <__ieee754_pow+0x304>
 800ea40:	4a454eef 	.word	0x4a454eef
 800ea44:	3fca7e28 	.word	0x3fca7e28
 800ea48:	93c9db65 	.word	0x93c9db65
 800ea4c:	3fcd864a 	.word	0x3fcd864a
 800ea50:	a91d4101 	.word	0xa91d4101
 800ea54:	3fd17460 	.word	0x3fd17460
 800ea58:	518f264d 	.word	0x518f264d
 800ea5c:	3fd55555 	.word	0x3fd55555
 800ea60:	db6fabff 	.word	0xdb6fabff
 800ea64:	3fdb6db6 	.word	0x3fdb6db6
 800ea68:	33333303 	.word	0x33333303
 800ea6c:	3fe33333 	.word	0x3fe33333
 800ea70:	e0000000 	.word	0xe0000000
 800ea74:	3feec709 	.word	0x3feec709
 800ea78:	dc3a03fd 	.word	0xdc3a03fd
 800ea7c:	3feec709 	.word	0x3feec709
 800ea80:	145b01f5 	.word	0x145b01f5
 800ea84:	be3e2fe0 	.word	0xbe3e2fe0
 800ea88:	7ff00000 	.word	0x7ff00000
 800ea8c:	43400000 	.word	0x43400000
 800ea90:	0003988e 	.word	0x0003988e
 800ea94:	000bb679 	.word	0x000bb679
 800ea98:	0800fd18 	.word	0x0800fd18
 800ea9c:	3ff00000 	.word	0x3ff00000
 800eaa0:	40080000 	.word	0x40080000
 800eaa4:	0800fd38 	.word	0x0800fd38
 800eaa8:	0800fd28 	.word	0x0800fd28
 800eaac:	2601      	movs	r6, #1
 800eaae:	e66a      	b.n	800e786 <__ieee754_pow+0x42e>
 800eab0:	a39d      	add	r3, pc, #628	; (adr r3, 800ed28 <__ieee754_pow+0x9d0>)
 800eab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eab6:	4640      	mov	r0, r8
 800eab8:	4649      	mov	r1, r9
 800eaba:	f7f1 fbbf 	bl	800023c <__adddf3>
 800eabe:	4622      	mov	r2, r4
 800eac0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eac4:	462b      	mov	r3, r5
 800eac6:	4650      	mov	r0, sl
 800eac8:	4639      	mov	r1, r7
 800eaca:	f7f1 fbb5 	bl	8000238 <__aeabi_dsub>
 800eace:	4602      	mov	r2, r0
 800ead0:	460b      	mov	r3, r1
 800ead2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ead6:	f7f1 fff7 	bl	8000ac8 <__aeabi_dcmpgt>
 800eada:	2800      	cmp	r0, #0
 800eadc:	f47f ae07 	bne.w	800e6ee <__ieee754_pow+0x396>
 800eae0:	4aa3      	ldr	r2, [pc, #652]	; (800ed70 <__ieee754_pow+0xa18>)
 800eae2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800eae6:	4293      	cmp	r3, r2
 800eae8:	f340 8101 	ble.w	800ecee <__ieee754_pow+0x996>
 800eaec:	151b      	asrs	r3, r3, #20
 800eaee:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800eaf2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800eaf6:	fa4a f303 	asr.w	r3, sl, r3
 800eafa:	4433      	add	r3, r6
 800eafc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800eb00:	4f9c      	ldr	r7, [pc, #624]	; (800ed74 <__ieee754_pow+0xa1c>)
 800eb02:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800eb06:	4117      	asrs	r7, r2
 800eb08:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800eb0c:	2000      	movs	r0, #0
 800eb0e:	ea23 0107 	bic.w	r1, r3, r7
 800eb12:	f1c2 0214 	rsb	r2, r2, #20
 800eb16:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800eb1a:	fa4a fa02 	asr.w	sl, sl, r2
 800eb1e:	2e00      	cmp	r6, #0
 800eb20:	4602      	mov	r2, r0
 800eb22:	460b      	mov	r3, r1
 800eb24:	4620      	mov	r0, r4
 800eb26:	4629      	mov	r1, r5
 800eb28:	bfb8      	it	lt
 800eb2a:	f1ca 0a00 	rsblt	sl, sl, #0
 800eb2e:	f7f1 fb83 	bl	8000238 <__aeabi_dsub>
 800eb32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb36:	4642      	mov	r2, r8
 800eb38:	464b      	mov	r3, r9
 800eb3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb3e:	f7f1 fb7d 	bl	800023c <__adddf3>
 800eb42:	2400      	movs	r4, #0
 800eb44:	a37a      	add	r3, pc, #488	; (adr r3, 800ed30 <__ieee754_pow+0x9d8>)
 800eb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb4a:	4620      	mov	r0, r4
 800eb4c:	460d      	mov	r5, r1
 800eb4e:	f7f1 fd2b 	bl	80005a8 <__aeabi_dmul>
 800eb52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eb56:	4606      	mov	r6, r0
 800eb58:	460f      	mov	r7, r1
 800eb5a:	4620      	mov	r0, r4
 800eb5c:	4629      	mov	r1, r5
 800eb5e:	f7f1 fb6b 	bl	8000238 <__aeabi_dsub>
 800eb62:	4602      	mov	r2, r0
 800eb64:	460b      	mov	r3, r1
 800eb66:	4640      	mov	r0, r8
 800eb68:	4649      	mov	r1, r9
 800eb6a:	f7f1 fb65 	bl	8000238 <__aeabi_dsub>
 800eb6e:	a372      	add	r3, pc, #456	; (adr r3, 800ed38 <__ieee754_pow+0x9e0>)
 800eb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb74:	f7f1 fd18 	bl	80005a8 <__aeabi_dmul>
 800eb78:	a371      	add	r3, pc, #452	; (adr r3, 800ed40 <__ieee754_pow+0x9e8>)
 800eb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb7e:	4680      	mov	r8, r0
 800eb80:	4689      	mov	r9, r1
 800eb82:	4620      	mov	r0, r4
 800eb84:	4629      	mov	r1, r5
 800eb86:	f7f1 fd0f 	bl	80005a8 <__aeabi_dmul>
 800eb8a:	4602      	mov	r2, r0
 800eb8c:	460b      	mov	r3, r1
 800eb8e:	4640      	mov	r0, r8
 800eb90:	4649      	mov	r1, r9
 800eb92:	f7f1 fb53 	bl	800023c <__adddf3>
 800eb96:	4604      	mov	r4, r0
 800eb98:	460d      	mov	r5, r1
 800eb9a:	4602      	mov	r2, r0
 800eb9c:	460b      	mov	r3, r1
 800eb9e:	4630      	mov	r0, r6
 800eba0:	4639      	mov	r1, r7
 800eba2:	f7f1 fb4b 	bl	800023c <__adddf3>
 800eba6:	4632      	mov	r2, r6
 800eba8:	463b      	mov	r3, r7
 800ebaa:	4680      	mov	r8, r0
 800ebac:	4689      	mov	r9, r1
 800ebae:	f7f1 fb43 	bl	8000238 <__aeabi_dsub>
 800ebb2:	4602      	mov	r2, r0
 800ebb4:	460b      	mov	r3, r1
 800ebb6:	4620      	mov	r0, r4
 800ebb8:	4629      	mov	r1, r5
 800ebba:	f7f1 fb3d 	bl	8000238 <__aeabi_dsub>
 800ebbe:	4642      	mov	r2, r8
 800ebc0:	4606      	mov	r6, r0
 800ebc2:	460f      	mov	r7, r1
 800ebc4:	464b      	mov	r3, r9
 800ebc6:	4640      	mov	r0, r8
 800ebc8:	4649      	mov	r1, r9
 800ebca:	f7f1 fced 	bl	80005a8 <__aeabi_dmul>
 800ebce:	a35e      	add	r3, pc, #376	; (adr r3, 800ed48 <__ieee754_pow+0x9f0>)
 800ebd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebd4:	4604      	mov	r4, r0
 800ebd6:	460d      	mov	r5, r1
 800ebd8:	f7f1 fce6 	bl	80005a8 <__aeabi_dmul>
 800ebdc:	a35c      	add	r3, pc, #368	; (adr r3, 800ed50 <__ieee754_pow+0x9f8>)
 800ebde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebe2:	f7f1 fb29 	bl	8000238 <__aeabi_dsub>
 800ebe6:	4622      	mov	r2, r4
 800ebe8:	462b      	mov	r3, r5
 800ebea:	f7f1 fcdd 	bl	80005a8 <__aeabi_dmul>
 800ebee:	a35a      	add	r3, pc, #360	; (adr r3, 800ed58 <__ieee754_pow+0xa00>)
 800ebf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebf4:	f7f1 fb22 	bl	800023c <__adddf3>
 800ebf8:	4622      	mov	r2, r4
 800ebfa:	462b      	mov	r3, r5
 800ebfc:	f7f1 fcd4 	bl	80005a8 <__aeabi_dmul>
 800ec00:	a357      	add	r3, pc, #348	; (adr r3, 800ed60 <__ieee754_pow+0xa08>)
 800ec02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec06:	f7f1 fb17 	bl	8000238 <__aeabi_dsub>
 800ec0a:	4622      	mov	r2, r4
 800ec0c:	462b      	mov	r3, r5
 800ec0e:	f7f1 fccb 	bl	80005a8 <__aeabi_dmul>
 800ec12:	a355      	add	r3, pc, #340	; (adr r3, 800ed68 <__ieee754_pow+0xa10>)
 800ec14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec18:	f7f1 fb10 	bl	800023c <__adddf3>
 800ec1c:	4622      	mov	r2, r4
 800ec1e:	462b      	mov	r3, r5
 800ec20:	f7f1 fcc2 	bl	80005a8 <__aeabi_dmul>
 800ec24:	4602      	mov	r2, r0
 800ec26:	460b      	mov	r3, r1
 800ec28:	4640      	mov	r0, r8
 800ec2a:	4649      	mov	r1, r9
 800ec2c:	f7f1 fb04 	bl	8000238 <__aeabi_dsub>
 800ec30:	4604      	mov	r4, r0
 800ec32:	460d      	mov	r5, r1
 800ec34:	4602      	mov	r2, r0
 800ec36:	460b      	mov	r3, r1
 800ec38:	4640      	mov	r0, r8
 800ec3a:	4649      	mov	r1, r9
 800ec3c:	f7f1 fcb4 	bl	80005a8 <__aeabi_dmul>
 800ec40:	2200      	movs	r2, #0
 800ec42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ec4a:	4620      	mov	r0, r4
 800ec4c:	4629      	mov	r1, r5
 800ec4e:	f7f1 faf3 	bl	8000238 <__aeabi_dsub>
 800ec52:	4602      	mov	r2, r0
 800ec54:	460b      	mov	r3, r1
 800ec56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec5a:	f7f1 fdcf 	bl	80007fc <__aeabi_ddiv>
 800ec5e:	4632      	mov	r2, r6
 800ec60:	4604      	mov	r4, r0
 800ec62:	460d      	mov	r5, r1
 800ec64:	463b      	mov	r3, r7
 800ec66:	4640      	mov	r0, r8
 800ec68:	4649      	mov	r1, r9
 800ec6a:	f7f1 fc9d 	bl	80005a8 <__aeabi_dmul>
 800ec6e:	4632      	mov	r2, r6
 800ec70:	463b      	mov	r3, r7
 800ec72:	f7f1 fae3 	bl	800023c <__adddf3>
 800ec76:	4602      	mov	r2, r0
 800ec78:	460b      	mov	r3, r1
 800ec7a:	4620      	mov	r0, r4
 800ec7c:	4629      	mov	r1, r5
 800ec7e:	f7f1 fadb 	bl	8000238 <__aeabi_dsub>
 800ec82:	4642      	mov	r2, r8
 800ec84:	464b      	mov	r3, r9
 800ec86:	f7f1 fad7 	bl	8000238 <__aeabi_dsub>
 800ec8a:	4602      	mov	r2, r0
 800ec8c:	460b      	mov	r3, r1
 800ec8e:	2000      	movs	r0, #0
 800ec90:	4939      	ldr	r1, [pc, #228]	; (800ed78 <__ieee754_pow+0xa20>)
 800ec92:	f7f1 fad1 	bl	8000238 <__aeabi_dsub>
 800ec96:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800ec9a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800ec9e:	da29      	bge.n	800ecf4 <__ieee754_pow+0x99c>
 800eca0:	4652      	mov	r2, sl
 800eca2:	f000 f955 	bl	800ef50 <scalbn>
 800eca6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ecaa:	f7ff bbfe 	b.w	800e4aa <__ieee754_pow+0x152>
 800ecae:	4b33      	ldr	r3, [pc, #204]	; (800ed7c <__ieee754_pow+0xa24>)
 800ecb0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800ecb4:	429f      	cmp	r7, r3
 800ecb6:	f77f af13 	ble.w	800eae0 <__ieee754_pow+0x788>
 800ecba:	4b31      	ldr	r3, [pc, #196]	; (800ed80 <__ieee754_pow+0xa28>)
 800ecbc:	440b      	add	r3, r1
 800ecbe:	4303      	orrs	r3, r0
 800ecc0:	d009      	beq.n	800ecd6 <__ieee754_pow+0x97e>
 800ecc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	2300      	movs	r3, #0
 800ecca:	f7f1 fedf 	bl	8000a8c <__aeabi_dcmplt>
 800ecce:	3800      	subs	r0, #0
 800ecd0:	bf18      	it	ne
 800ecd2:	2001      	movne	r0, #1
 800ecd4:	e453      	b.n	800e57e <__ieee754_pow+0x226>
 800ecd6:	4622      	mov	r2, r4
 800ecd8:	462b      	mov	r3, r5
 800ecda:	f7f1 faad 	bl	8000238 <__aeabi_dsub>
 800ecde:	4642      	mov	r2, r8
 800ece0:	464b      	mov	r3, r9
 800ece2:	f7f1 fee7 	bl	8000ab4 <__aeabi_dcmpge>
 800ece6:	2800      	cmp	r0, #0
 800ece8:	f43f aefa 	beq.w	800eae0 <__ieee754_pow+0x788>
 800ecec:	e7e9      	b.n	800ecc2 <__ieee754_pow+0x96a>
 800ecee:	f04f 0a00 	mov.w	sl, #0
 800ecf2:	e720      	b.n	800eb36 <__ieee754_pow+0x7de>
 800ecf4:	4621      	mov	r1, r4
 800ecf6:	e7d6      	b.n	800eca6 <__ieee754_pow+0x94e>
 800ecf8:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ed78 <__ieee754_pow+0xa20>
 800ecfc:	f04f 0b00 	mov.w	fp, #0
 800ed00:	f7ff bbba 	b.w	800e478 <__ieee754_pow+0x120>
 800ed04:	f04f 0b00 	mov.w	fp, #0
 800ed08:	f04f 0c00 	mov.w	ip, #0
 800ed0c:	f7ff bbb4 	b.w	800e478 <__ieee754_pow+0x120>
 800ed10:	4640      	mov	r0, r8
 800ed12:	4649      	mov	r1, r9
 800ed14:	f7ff bb3d 	b.w	800e392 <__ieee754_pow+0x3a>
 800ed18:	9200      	str	r2, [sp, #0]
 800ed1a:	f7ff bb89 	b.w	800e430 <__ieee754_pow+0xd8>
 800ed1e:	2300      	movs	r3, #0
 800ed20:	f7ff bb73 	b.w	800e40a <__ieee754_pow+0xb2>
 800ed24:	f3af 8000 	nop.w
 800ed28:	652b82fe 	.word	0x652b82fe
 800ed2c:	3c971547 	.word	0x3c971547
 800ed30:	00000000 	.word	0x00000000
 800ed34:	3fe62e43 	.word	0x3fe62e43
 800ed38:	fefa39ef 	.word	0xfefa39ef
 800ed3c:	3fe62e42 	.word	0x3fe62e42
 800ed40:	0ca86c39 	.word	0x0ca86c39
 800ed44:	be205c61 	.word	0xbe205c61
 800ed48:	72bea4d0 	.word	0x72bea4d0
 800ed4c:	3e663769 	.word	0x3e663769
 800ed50:	c5d26bf1 	.word	0xc5d26bf1
 800ed54:	3ebbbd41 	.word	0x3ebbbd41
 800ed58:	af25de2c 	.word	0xaf25de2c
 800ed5c:	3f11566a 	.word	0x3f11566a
 800ed60:	16bebd93 	.word	0x16bebd93
 800ed64:	3f66c16c 	.word	0x3f66c16c
 800ed68:	5555553e 	.word	0x5555553e
 800ed6c:	3fc55555 	.word	0x3fc55555
 800ed70:	3fe00000 	.word	0x3fe00000
 800ed74:	000fffff 	.word	0x000fffff
 800ed78:	3ff00000 	.word	0x3ff00000
 800ed7c:	4090cbff 	.word	0x4090cbff
 800ed80:	3f6f3400 	.word	0x3f6f3400

0800ed84 <__ieee754_sqrt>:
 800ed84:	f8df c154 	ldr.w	ip, [pc, #340]	; 800eedc <__ieee754_sqrt+0x158>
 800ed88:	ea3c 0c01 	bics.w	ip, ip, r1
 800ed8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed90:	460a      	mov	r2, r1
 800ed92:	4606      	mov	r6, r0
 800ed94:	460d      	mov	r5, r1
 800ed96:	460c      	mov	r4, r1
 800ed98:	4607      	mov	r7, r0
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	d10f      	bne.n	800edbe <__ieee754_sqrt+0x3a>
 800ed9e:	4602      	mov	r2, r0
 800eda0:	460b      	mov	r3, r1
 800eda2:	f7f1 fc01 	bl	80005a8 <__aeabi_dmul>
 800eda6:	4602      	mov	r2, r0
 800eda8:	460b      	mov	r3, r1
 800edaa:	4630      	mov	r0, r6
 800edac:	4629      	mov	r1, r5
 800edae:	f7f1 fa45 	bl	800023c <__adddf3>
 800edb2:	4606      	mov	r6, r0
 800edb4:	460d      	mov	r5, r1
 800edb6:	4630      	mov	r0, r6
 800edb8:	4629      	mov	r1, r5
 800edba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edbe:	2900      	cmp	r1, #0
 800edc0:	dc0e      	bgt.n	800ede0 <__ieee754_sqrt+0x5c>
 800edc2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800edc6:	ea5c 0707 	orrs.w	r7, ip, r7
 800edca:	d0f4      	beq.n	800edb6 <__ieee754_sqrt+0x32>
 800edcc:	b141      	cbz	r1, 800ede0 <__ieee754_sqrt+0x5c>
 800edce:	4602      	mov	r2, r0
 800edd0:	460b      	mov	r3, r1
 800edd2:	f7f1 fa31 	bl	8000238 <__aeabi_dsub>
 800edd6:	4602      	mov	r2, r0
 800edd8:	460b      	mov	r3, r1
 800edda:	f7f1 fd0f 	bl	80007fc <__aeabi_ddiv>
 800edde:	e7e8      	b.n	800edb2 <__ieee754_sqrt+0x2e>
 800ede0:	1521      	asrs	r1, r4, #20
 800ede2:	d074      	beq.n	800eece <__ieee754_sqrt+0x14a>
 800ede4:	07cc      	lsls	r4, r1, #31
 800ede6:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800edea:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800edee:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800edf2:	bf5e      	ittt	pl
 800edf4:	0fd9      	lsrpl	r1, r3, #31
 800edf6:	005b      	lslpl	r3, r3, #1
 800edf8:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800edfc:	2400      	movs	r4, #0
 800edfe:	0fd9      	lsrs	r1, r3, #31
 800ee00:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800ee04:	107f      	asrs	r7, r7, #1
 800ee06:	005b      	lsls	r3, r3, #1
 800ee08:	2516      	movs	r5, #22
 800ee0a:	4620      	mov	r0, r4
 800ee0c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ee10:	1846      	adds	r6, r0, r1
 800ee12:	4296      	cmp	r6, r2
 800ee14:	bfde      	ittt	le
 800ee16:	1b92      	suble	r2, r2, r6
 800ee18:	1870      	addle	r0, r6, r1
 800ee1a:	1864      	addle	r4, r4, r1
 800ee1c:	0052      	lsls	r2, r2, #1
 800ee1e:	3d01      	subs	r5, #1
 800ee20:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ee24:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ee28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ee2c:	d1f0      	bne.n	800ee10 <__ieee754_sqrt+0x8c>
 800ee2e:	4629      	mov	r1, r5
 800ee30:	f04f 0e20 	mov.w	lr, #32
 800ee34:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ee38:	4282      	cmp	r2, r0
 800ee3a:	eb06 0c05 	add.w	ip, r6, r5
 800ee3e:	dc02      	bgt.n	800ee46 <__ieee754_sqrt+0xc2>
 800ee40:	d113      	bne.n	800ee6a <__ieee754_sqrt+0xe6>
 800ee42:	459c      	cmp	ip, r3
 800ee44:	d811      	bhi.n	800ee6a <__ieee754_sqrt+0xe6>
 800ee46:	f1bc 0f00 	cmp.w	ip, #0
 800ee4a:	eb0c 0506 	add.w	r5, ip, r6
 800ee4e:	da43      	bge.n	800eed8 <__ieee754_sqrt+0x154>
 800ee50:	2d00      	cmp	r5, #0
 800ee52:	db41      	blt.n	800eed8 <__ieee754_sqrt+0x154>
 800ee54:	f100 0801 	add.w	r8, r0, #1
 800ee58:	1a12      	subs	r2, r2, r0
 800ee5a:	459c      	cmp	ip, r3
 800ee5c:	bf88      	it	hi
 800ee5e:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800ee62:	eba3 030c 	sub.w	r3, r3, ip
 800ee66:	4431      	add	r1, r6
 800ee68:	4640      	mov	r0, r8
 800ee6a:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800ee6e:	f1be 0e01 	subs.w	lr, lr, #1
 800ee72:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800ee76:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ee7a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ee7e:	d1db      	bne.n	800ee38 <__ieee754_sqrt+0xb4>
 800ee80:	4313      	orrs	r3, r2
 800ee82:	d006      	beq.n	800ee92 <__ieee754_sqrt+0x10e>
 800ee84:	1c48      	adds	r0, r1, #1
 800ee86:	bf13      	iteet	ne
 800ee88:	3101      	addne	r1, #1
 800ee8a:	3401      	addeq	r4, #1
 800ee8c:	4671      	moveq	r1, lr
 800ee8e:	f021 0101 	bicne.w	r1, r1, #1
 800ee92:	1063      	asrs	r3, r4, #1
 800ee94:	0849      	lsrs	r1, r1, #1
 800ee96:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ee9a:	07e2      	lsls	r2, r4, #31
 800ee9c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800eea0:	bf48      	it	mi
 800eea2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800eea6:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800eeaa:	460e      	mov	r6, r1
 800eeac:	e783      	b.n	800edb6 <__ieee754_sqrt+0x32>
 800eeae:	0ada      	lsrs	r2, r3, #11
 800eeb0:	3815      	subs	r0, #21
 800eeb2:	055b      	lsls	r3, r3, #21
 800eeb4:	2a00      	cmp	r2, #0
 800eeb6:	d0fa      	beq.n	800eeae <__ieee754_sqrt+0x12a>
 800eeb8:	02d5      	lsls	r5, r2, #11
 800eeba:	d50a      	bpl.n	800eed2 <__ieee754_sqrt+0x14e>
 800eebc:	f1c1 0420 	rsb	r4, r1, #32
 800eec0:	fa23 f404 	lsr.w	r4, r3, r4
 800eec4:	1e4d      	subs	r5, r1, #1
 800eec6:	408b      	lsls	r3, r1
 800eec8:	4322      	orrs	r2, r4
 800eeca:	1b41      	subs	r1, r0, r5
 800eecc:	e78a      	b.n	800ede4 <__ieee754_sqrt+0x60>
 800eece:	4608      	mov	r0, r1
 800eed0:	e7f0      	b.n	800eeb4 <__ieee754_sqrt+0x130>
 800eed2:	0052      	lsls	r2, r2, #1
 800eed4:	3101      	adds	r1, #1
 800eed6:	e7ef      	b.n	800eeb8 <__ieee754_sqrt+0x134>
 800eed8:	4680      	mov	r8, r0
 800eeda:	e7bd      	b.n	800ee58 <__ieee754_sqrt+0xd4>
 800eedc:	7ff00000 	.word	0x7ff00000

0800eee0 <with_errno>:
 800eee0:	b570      	push	{r4, r5, r6, lr}
 800eee2:	4604      	mov	r4, r0
 800eee4:	460d      	mov	r5, r1
 800eee6:	4616      	mov	r6, r2
 800eee8:	f7fc f9c8 	bl	800b27c <__errno>
 800eeec:	4629      	mov	r1, r5
 800eeee:	6006      	str	r6, [r0, #0]
 800eef0:	4620      	mov	r0, r4
 800eef2:	bd70      	pop	{r4, r5, r6, pc}

0800eef4 <xflow>:
 800eef4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eef6:	4615      	mov	r5, r2
 800eef8:	461c      	mov	r4, r3
 800eefa:	b180      	cbz	r0, 800ef1e <xflow+0x2a>
 800eefc:	4610      	mov	r0, r2
 800eefe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ef02:	e9cd 0100 	strd	r0, r1, [sp]
 800ef06:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ef0a:	4628      	mov	r0, r5
 800ef0c:	4621      	mov	r1, r4
 800ef0e:	f7f1 fb4b 	bl	80005a8 <__aeabi_dmul>
 800ef12:	2222      	movs	r2, #34	; 0x22
 800ef14:	b003      	add	sp, #12
 800ef16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef1a:	f7ff bfe1 	b.w	800eee0 <with_errno>
 800ef1e:	4610      	mov	r0, r2
 800ef20:	4619      	mov	r1, r3
 800ef22:	e7ee      	b.n	800ef02 <xflow+0xe>

0800ef24 <__math_uflow>:
 800ef24:	2200      	movs	r2, #0
 800ef26:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ef2a:	f7ff bfe3 	b.w	800eef4 <xflow>

0800ef2e <__math_oflow>:
 800ef2e:	2200      	movs	r2, #0
 800ef30:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ef34:	f7ff bfde 	b.w	800eef4 <xflow>

0800ef38 <fabs>:
 800ef38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ef3c:	4770      	bx	lr

0800ef3e <finite>:
 800ef3e:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800ef42:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ef46:	0fc0      	lsrs	r0, r0, #31
 800ef48:	4770      	bx	lr
 800ef4a:	0000      	movs	r0, r0
 800ef4c:	0000      	movs	r0, r0
	...

0800ef50 <scalbn>:
 800ef50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef52:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800ef56:	4604      	mov	r4, r0
 800ef58:	460d      	mov	r5, r1
 800ef5a:	4617      	mov	r7, r2
 800ef5c:	460b      	mov	r3, r1
 800ef5e:	b996      	cbnz	r6, 800ef86 <scalbn+0x36>
 800ef60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ef64:	4303      	orrs	r3, r0
 800ef66:	d039      	beq.n	800efdc <scalbn+0x8c>
 800ef68:	4b33      	ldr	r3, [pc, #204]	; (800f038 <scalbn+0xe8>)
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	f7f1 fb1c 	bl	80005a8 <__aeabi_dmul>
 800ef70:	4b32      	ldr	r3, [pc, #200]	; (800f03c <scalbn+0xec>)
 800ef72:	429f      	cmp	r7, r3
 800ef74:	4604      	mov	r4, r0
 800ef76:	460d      	mov	r5, r1
 800ef78:	da0f      	bge.n	800ef9a <scalbn+0x4a>
 800ef7a:	a32b      	add	r3, pc, #172	; (adr r3, 800f028 <scalbn+0xd8>)
 800ef7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef80:	f7f1 fb12 	bl	80005a8 <__aeabi_dmul>
 800ef84:	e006      	b.n	800ef94 <scalbn+0x44>
 800ef86:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800ef8a:	4296      	cmp	r6, r2
 800ef8c:	d10a      	bne.n	800efa4 <scalbn+0x54>
 800ef8e:	4602      	mov	r2, r0
 800ef90:	f7f1 f954 	bl	800023c <__adddf3>
 800ef94:	4604      	mov	r4, r0
 800ef96:	460d      	mov	r5, r1
 800ef98:	e020      	b.n	800efdc <scalbn+0x8c>
 800ef9a:	460b      	mov	r3, r1
 800ef9c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800efa0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800efa4:	19b9      	adds	r1, r7, r6
 800efa6:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800efaa:	4291      	cmp	r1, r2
 800efac:	dd0e      	ble.n	800efcc <scalbn+0x7c>
 800efae:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800efb2:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800efb6:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800efba:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800efbe:	a31c      	add	r3, pc, #112	; (adr r3, 800f030 <scalbn+0xe0>)
 800efc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efc4:	481e      	ldr	r0, [pc, #120]	; (800f040 <scalbn+0xf0>)
 800efc6:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800efca:	e7d9      	b.n	800ef80 <scalbn+0x30>
 800efcc:	2900      	cmp	r1, #0
 800efce:	dd08      	ble.n	800efe2 <scalbn+0x92>
 800efd0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800efd4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800efd8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800efdc:	4620      	mov	r0, r4
 800efde:	4629      	mov	r1, r5
 800efe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800efe2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800efe6:	da12      	bge.n	800f00e <scalbn+0xbe>
 800efe8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800efec:	429f      	cmp	r7, r3
 800efee:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800eff2:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800eff6:	dcdc      	bgt.n	800efb2 <scalbn+0x62>
 800eff8:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800effc:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800f000:	a309      	add	r3, pc, #36	; (adr r3, 800f028 <scalbn+0xd8>)
 800f002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f006:	480f      	ldr	r0, [pc, #60]	; (800f044 <scalbn+0xf4>)
 800f008:	f041 011f 	orr.w	r1, r1, #31
 800f00c:	e7b8      	b.n	800ef80 <scalbn+0x30>
 800f00e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f012:	3136      	adds	r1, #54	; 0x36
 800f014:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f018:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800f01c:	4620      	mov	r0, r4
 800f01e:	4b0a      	ldr	r3, [pc, #40]	; (800f048 <scalbn+0xf8>)
 800f020:	4629      	mov	r1, r5
 800f022:	2200      	movs	r2, #0
 800f024:	e7ac      	b.n	800ef80 <scalbn+0x30>
 800f026:	bf00      	nop
 800f028:	c2f8f359 	.word	0xc2f8f359
 800f02c:	01a56e1f 	.word	0x01a56e1f
 800f030:	8800759c 	.word	0x8800759c
 800f034:	7e37e43c 	.word	0x7e37e43c
 800f038:	43500000 	.word	0x43500000
 800f03c:	ffff3cb0 	.word	0xffff3cb0
 800f040:	8800759c 	.word	0x8800759c
 800f044:	c2f8f359 	.word	0xc2f8f359
 800f048:	3c900000 	.word	0x3c900000

0800f04c <_init>:
 800f04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f04e:	bf00      	nop
 800f050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f052:	bc08      	pop	{r3}
 800f054:	469e      	mov	lr, r3
 800f056:	4770      	bx	lr

0800f058 <_fini>:
 800f058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f05a:	bf00      	nop
 800f05c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f05e:	bc08      	pop	{r3}
 800f060:	469e      	mov	lr, r3
 800f062:	4770      	bx	lr

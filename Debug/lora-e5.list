
lora-e5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc7c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c90  0800ddc0  0800ddc0  0001ddc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea50  0800ea50  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea50  0800ea50  0001ea50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea58  0800ea58  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea58  0800ea58  0001ea58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea5c  0800ea5c  0001ea5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800ea60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b28  200001e0  0800ec40  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d08  0800ec40  00021d08  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b642  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005919  00000000  00000000  0004b84c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002640  00000000  00000000  00051168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002408  00000000  00000000  000537a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022eb5  00000000  00000000  00055bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002be74  00000000  00000000  00078a65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c990e  00000000  00000000  000a48d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016e1e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b4b4  00000000  00000000  0016e238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800dda4 	.word	0x0800dda4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	0800dda4 	.word	0x0800dda4

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	4688      	mov	r8, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14d      	bne.n	8000cd4 <__udivmoddi4+0xac>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d968      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b152      	cbz	r2, 8000c5a <__udivmoddi4+0x32>
 8000c44:	fa01 f302 	lsl.w	r3, r1, r2
 8000c48:	f1c2 0120 	rsb	r1, r2, #32
 8000c4c:	fa20 f101 	lsr.w	r1, r0, r1
 8000c50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c54:	ea41 0803 	orr.w	r8, r1, r3
 8000c58:	4094      	lsls	r4, r2
 8000c5a:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000c5e:	0c21      	lsrs	r1, r4, #16
 8000c60:	fbb8 fef5 	udiv	lr, r8, r5
 8000c64:	fa1f f78c 	uxth.w	r7, ip
 8000c68:	fb05 831e 	mls	r3, r5, lr, r8
 8000c6c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c70:	fb0e f107 	mul.w	r1, lr, r7
 8000c74:	4299      	cmp	r1, r3
 8000c76:	d90b      	bls.n	8000c90 <__udivmoddi4+0x68>
 8000c78:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7c:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 8000c80:	f080 811e 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c84:	4299      	cmp	r1, r3
 8000c86:	f240 811b 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c8a:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c8e:	4463      	add	r3, ip
 8000c90:	1a5b      	subs	r3, r3, r1
 8000c92:	b2a4      	uxth	r4, r4
 8000c94:	fbb3 f0f5 	udiv	r0, r3, r5
 8000c98:	fb05 3310 	mls	r3, r5, r0, r3
 8000c9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca0:	fb00 f707 	mul.w	r7, r0, r7
 8000ca4:	42a7      	cmp	r7, r4
 8000ca6:	d90a      	bls.n	8000cbe <__udivmoddi4+0x96>
 8000ca8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cb0:	f080 8108 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb4:	42a7      	cmp	r7, r4
 8000cb6:	f240 8105 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cba:	4464      	add	r4, ip
 8000cbc:	3802      	subs	r0, #2
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	b11e      	cbz	r6, 8000cd0 <__udivmoddi4+0xa8>
 8000cc8:	40d4      	lsrs	r4, r2
 8000cca:	2300      	movs	r3, #0
 8000ccc:	e9c6 4300 	strd	r4, r3, [r6]
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	428b      	cmp	r3, r1
 8000cd6:	d908      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd8:	2e00      	cmp	r6, #0
 8000cda:	f000 80ee 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cde:	2100      	movs	r1, #0
 8000ce0:	e9c6 0500 	strd	r0, r5, [r6]
 8000ce4:	4608      	mov	r0, r1
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f183 	clz	r1, r3
 8000cee:	2900      	cmp	r1, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	42ab      	cmp	r3, r5
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb65 0303 	sbc.w	r3, r5, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	4698      	mov	r8, r3
 8000d06:	2e00      	cmp	r6, #0
 8000d08:	d0e2      	beq.n	8000cd0 <__udivmoddi4+0xa8>
 8000d0a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d0e:	e7df      	b.n	8000cd0 <__udivmoddi4+0xa8>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8091 	bne.w	8000e40 <__udivmoddi4+0x218>
 8000d1e:	eba1 050c 	sub.w	r5, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	fbb5 f3f7 	udiv	r3, r5, r7
 8000d30:	fb07 5013 	mls	r0, r7, r3, r5
 8000d34:	0c25      	lsrs	r5, r4, #16
 8000d36:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	42a8      	cmp	r0, r5
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0505 	adds.w	r5, ip, r5
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	42a8      	cmp	r0, r5
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a2d      	subs	r5, r5, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb5 f0f7 	udiv	r0, r5, r7
 8000d5c:	fb07 5510 	mls	r5, r7, r0, r5
 8000d60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4628      	mov	r0, r5
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79e      	b.n	8000cc6 <__udivmoddi4+0x9e>
 8000d88:	f1c1 0720 	rsb	r7, r1, #32
 8000d8c:	408b      	lsls	r3, r1
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa05 f301 	lsl.w	r3, r5, r1
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40fd      	lsrs	r5, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f301 	lsl.w	r3, r0, r1
 8000daa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 5518 	mls	r5, r9, r8, r5
 8000db8:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	42a8      	cmp	r0, r5
 8000dc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0505 	adds.w	r5, ip, r5
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	42a8      	cmp	r0, r5
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4465      	add	r5, ip
 8000de0:	1a2d      	subs	r5, r5, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb5 f0f9 	udiv	r0, r5, r9
 8000de8:	fb09 5510 	mls	r5, r9, r0, r5
 8000dec:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	45ae      	cmp	lr, r5
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0505 	adds.w	r5, ip, r5
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	45ae      	cmp	lr, r5
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4465      	add	r5, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba5 050e 	sub.w	r5, r5, lr
 8000e16:	42a5      	cmp	r5, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15e      	cbz	r6, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb65 050e 	sbc.w	r5, r5, lr
 8000e2a:	fa05 f707 	lsl.w	r7, r5, r7
 8000e2e:	fa22 f301 	lsr.w	r3, r2, r1
 8000e32:	40cd      	lsrs	r5, r1
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c6 7500 	strd	r7, r5, [r6]
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e40:	f1c2 0320 	rsb	r3, r2, #32
 8000e44:	fa20 f103 	lsr.w	r1, r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa25 f303 	lsr.w	r3, r5, r3
 8000e50:	4095      	lsls	r5, r2
 8000e52:	430d      	orrs	r5, r1
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f1f7 	udiv	r1, r3, r7
 8000e60:	fb07 3011 	mls	r0, r7, r1, r3
 8000e64:	0c2b      	lsrs	r3, r5, #16
 8000e66:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000e6a:	fb01 f00e 	mul.w	r0, r1, lr
 8000e6e:	4298      	cmp	r0, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	4298      	cmp	r0, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3902      	subs	r1, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1a1b      	subs	r3, r3, r0
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e90:	fb07 3310 	mls	r3, r7, r0, r3
 8000e94:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e98:	fb00 f30e 	mul.w	r3, r0, lr
 8000e9c:	42ab      	cmp	r3, r5
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0505 	adds.w	r5, ip, r5
 8000ea4:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	42ab      	cmp	r3, r5
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4465      	add	r5, ip
 8000eb2:	1aed      	subs	r5, r5, r3
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	4631      	mov	r1, r6
 8000ebc:	4630      	mov	r0, r6
 8000ebe:	e707      	b.n	8000cd0 <__udivmoddi4+0xa8>
 8000ec0:	4686      	mov	lr, r0
 8000ec2:	e6e5      	b.n	8000c90 <__udivmoddi4+0x68>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6fa      	b.n	8000cbe <__udivmoddi4+0x96>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4641      	mov	r1, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4465      	add	r5, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4608      	mov	r0, r1
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr

08000f08 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4a06      	ldr	r2, [pc, #24]	; (8000f30 <vApplicationGetIdleTaskMemory+0x28>)
 8000f18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	4a05      	ldr	r2, [pc, #20]	; (8000f34 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2280      	movs	r2, #128	; 0x80
 8000f24:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f26:	bf00      	nop
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr
 8000f30:	200001fc 	.word	0x200001fc
 8000f34:	200002b0 	.word	0x200002b0

08000f38 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4a07      	ldr	r2, [pc, #28]	; (8000f64 <vApplicationGetTimerTaskMemory+0x2c>)
 8000f48:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	4a06      	ldr	r2, [pc, #24]	; (8000f68 <vApplicationGetTimerTaskMemory+0x30>)
 8000f4e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f56:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f58:	bf00      	nop
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	200004b0 	.word	0x200004b0
 8000f68:	20000564 	.word	0x20000564

08000f6c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f7c:	f023 0218 	bic.w	r2, r3, #24
 8000f80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr

08000f96 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f96:	b480      	push	{r7}
 8000f98:	b085      	sub	sp, #20
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fa2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fa4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fba:	68fb      	ldr	r3, [r7, #12]
}
 8000fbc:	bf00      	nop
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr
	...

08000fc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc8:	b5b0      	push	{r4, r5, r7, lr}
 8000fca:	b094      	sub	sp, #80	; 0x50
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fce:	f000 ff19 	bl	8001e04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd2:	f000 f871 	bl	80010b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd6:	f000 fac5 	bl	8001564 <MX_GPIO_Init>
  MX_ADC_Init();
 8000fda:	f000 f8cb 	bl	8001174 <MX_ADC_Init>
  MX_LPUART1_UART_Init();
 8000fde:	f000 f957 	bl	8001290 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8000fe2:	f000 f99f 	bl	8001324 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000fe6:	f000 f9e9 	bl	80013bc <MX_RTC_Init>
  MX_SPI2_Init();
 8000fea:	f000 fa7d 	bl	80014e8 <MX_SPI2_Init>
  MX_I2C2_Init();
 8000fee:	f000 f90f 	bl	8001210 <MX_I2C2_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of UartMutex */
  osMutexDef(UartMutex);
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
  UartMutexHandle = osMutexCreate(osMutex(UartMutex));
 8000ffa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ffe:	4618      	mov	r0, r3
 8001000:	f007 fa38 	bl	8008474 <osMutexCreate>
 8001004:	4603      	mov	r3, r0
 8001006:	4a24      	ldr	r2, [pc, #144]	; (8001098 <main+0xd0>)
 8001008:	6013      	str	r3, [r2, #0]

  /* definition and creation of SpiMutex */
  osMutexDef(SpiMutex);
 800100a:	2300      	movs	r3, #0
 800100c:	643b      	str	r3, [r7, #64]	; 0x40
 800100e:	2300      	movs	r3, #0
 8001010:	647b      	str	r3, [r7, #68]	; 0x44
  SpiMutexHandle = osMutexCreate(osMutex(SpiMutex));
 8001012:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001016:	4618      	mov	r0, r3
 8001018:	f007 fa2c 	bl	8008474 <osMutexCreate>
 800101c:	4603      	mov	r3, r0
 800101e:	4a1f      	ldr	r2, [pc, #124]	; (800109c <main+0xd4>)
 8001020:	6013      	str	r3, [r2, #0]

  /* definition and creation of I2cMutex */
  osMutexDef(I2cMutex);
 8001022:	2300      	movs	r3, #0
 8001024:	63bb      	str	r3, [r7, #56]	; 0x38
 8001026:	2300      	movs	r3, #0
 8001028:	63fb      	str	r3, [r7, #60]	; 0x3c
  I2cMutexHandle = osMutexCreate(osMutex(I2cMutex));
 800102a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800102e:	4618      	mov	r0, r3
 8001030:	f007 fa20 	bl	8008474 <osMutexCreate>
 8001034:	4603      	mov	r3, r0
 8001036:	4a1a      	ldr	r2, [pc, #104]	; (80010a0 <main+0xd8>)
 8001038:	6013      	str	r3, [r2, #0]

  /* definition and creation of RtcMutex */
  osMutexDef(RtcMutex);
 800103a:	2300      	movs	r3, #0
 800103c:	633b      	str	r3, [r7, #48]	; 0x30
 800103e:	2300      	movs	r3, #0
 8001040:	637b      	str	r3, [r7, #52]	; 0x34
  RtcMutexHandle = osMutexCreate(osMutex(RtcMutex));
 8001042:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001046:	4618      	mov	r0, r3
 8001048:	f007 fa14 	bl	8008474 <osMutexCreate>
 800104c:	4603      	mov	r3, r0
 800104e:	4a15      	ldr	r2, [pc, #84]	; (80010a4 <main+0xdc>)
 8001050:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of xQueue1 */
  osMessageQDef(xQueue1, 100, uint16_t);
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <main+0xe0>)
 8001054:	f107 0420 	add.w	r4, r7, #32
 8001058:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800105a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  xQueue1Handle = osMessageCreate(osMessageQ(xQueue1), NULL);
 800105e:	f107 0320 	add.w	r3, r7, #32
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f007 fa1d 	bl	80084a4 <osMessageCreate>
 800106a:	4603      	mov	r3, r0
 800106c:	4a0f      	ldr	r2, [pc, #60]	; (80010ac <main+0xe4>)
 800106e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of terminalTask */
  osThreadDef(terminalTask, terminalTaskHandler, osPriorityNormal, 0, 128);
 8001070:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <main+0xe8>)
 8001072:	1d3c      	adds	r4, r7, #4
 8001074:	461d      	mov	r5, r3
 8001076:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001078:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800107a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800107e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  terminalTaskHandle = osThreadCreate(osThread(terminalTask), NULL);
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f007 f994 	bl	80083b4 <osThreadCreate>
 800108c:	4603      	mov	r3, r0
 800108e:	4a09      	ldr	r2, [pc, #36]	; (80010b4 <main+0xec>)
 8001090:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001092:	f007 f988 	bl	80083a6 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001096:	e7fe      	b.n	8001096 <main+0xce>
 8001098:	20000be8 	.word	0x20000be8
 800109c:	20000bec 	.word	0x20000bec
 80010a0:	20000bf0 	.word	0x20000bf0
 80010a4:	20000bf4 	.word	0x20000bf4
 80010a8:	0800ddd0 	.word	0x0800ddd0
 80010ac:	20000be4 	.word	0x20000be4
 80010b0:	0800dde0 	.word	0x0800dde0
 80010b4:	20000be0 	.word	0x20000be0

080010b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b09a      	sub	sp, #104	; 0x68
 80010bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010be:	f107 0320 	add.w	r3, r7, #32
 80010c2:	2248      	movs	r2, #72	; 0x48
 80010c4:	2100      	movs	r1, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f009 ff99 	bl	800affe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010cc:	f107 0308 	add.w	r3, r7, #8
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
 80010dc:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010de:	f002 fafd 	bl	80036dc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80010e2:	2000      	movs	r0, #0
 80010e4:	f7ff ff42 	bl	8000f6c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e8:	4b21      	ldr	r3, [pc, #132]	; (8001170 <SystemClock_Config+0xb8>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010f0:	4a1f      	ldr	r2, [pc, #124]	; (8001170 <SystemClock_Config+0xb8>)
 80010f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010f6:	6013      	str	r3, [r2, #0]
 80010f8:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <SystemClock_Config+0xb8>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8001104:	2326      	movs	r3, #38	; 0x26
 8001106:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001108:	2381      	movs	r3, #129	; 0x81
 800110a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800110c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001110:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001112:	2301      	movs	r3, #1
 8001114:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001116:	2340      	movs	r3, #64	; 0x40
 8001118:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800111a:	2300      	movs	r3, #0
 800111c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800111e:	23b0      	movs	r3, #176	; 0xb0
 8001120:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001122:	2300      	movs	r3, #0
 8001124:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001126:	f107 0320 	add.w	r3, r7, #32
 800112a:	4618      	mov	r0, r3
 800112c:	f002 fd80 	bl	8003c30 <HAL_RCC_OscConfig>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001136:	f000 faaf 	bl	8001698 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800113a:	234f      	movs	r3, #79	; 0x4f
 800113c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001152:	f107 0308 	add.w	r3, r7, #8
 8001156:	2102      	movs	r1, #2
 8001158:	4618      	mov	r0, r3
 800115a:	f003 f8eb 	bl	8004334 <HAL_RCC_ClockConfig>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001164:	f000 fa98 	bl	8001698 <Error_Handler>
  }
}
 8001168:	bf00      	nop
 800116a:	3768      	adds	r7, #104	; 0x68
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	58000400 	.word	0x58000400

08001174 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8001178:	4b23      	ldr	r3, [pc, #140]	; (8001208 <MX_ADC_Init+0x94>)
 800117a:	4a24      	ldr	r2, [pc, #144]	; (800120c <MX_ADC_Init+0x98>)
 800117c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800117e:	4b22      	ldr	r3, [pc, #136]	; (8001208 <MX_ADC_Init+0x94>)
 8001180:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001184:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001186:	4b20      	ldr	r3, [pc, #128]	; (8001208 <MX_ADC_Init+0x94>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800118c:	4b1e      	ldr	r3, [pc, #120]	; (8001208 <MX_ADC_Init+0x94>)
 800118e:	2200      	movs	r2, #0
 8001190:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001192:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <MX_ADC_Init+0x94>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001198:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <MX_ADC_Init+0x94>)
 800119a:	2204      	movs	r2, #4
 800119c:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800119e:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <MX_ADC_Init+0x94>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80011a4:	4b18      	ldr	r3, [pc, #96]	; (8001208 <MX_ADC_Init+0x94>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80011aa:	4b17      	ldr	r3, [pc, #92]	; (8001208 <MX_ADC_Init+0x94>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 80011b0:	4b15      	ldr	r3, [pc, #84]	; (8001208 <MX_ADC_Init+0x94>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80011b6:	4b14      	ldr	r3, [pc, #80]	; (8001208 <MX_ADC_Init+0x94>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011be:	4b12      	ldr	r3, [pc, #72]	; (8001208 <MX_ADC_Init+0x94>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011c4:	4b10      	ldr	r3, [pc, #64]	; (8001208 <MX_ADC_Init+0x94>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 80011ca:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <MX_ADC_Init+0x94>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80011d2:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <MX_ADC_Init+0x94>)
 80011d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011d8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80011da:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <MX_ADC_Init+0x94>)
 80011dc:	2207      	movs	r2, #7
 80011de:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80011e0:	4b09      	ldr	r3, [pc, #36]	; (8001208 <MX_ADC_Init+0x94>)
 80011e2:	2207      	movs	r2, #7
 80011e4:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 80011e6:	4b08      	ldr	r3, [pc, #32]	; (8001208 <MX_ADC_Init+0x94>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <MX_ADC_Init+0x94>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80011f4:	4804      	ldr	r0, [pc, #16]	; (8001208 <MX_ADC_Init+0x94>)
 80011f6:	f000 ffd1 	bl	800219c <HAL_ADC_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8001200:	f000 fa4a 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000964 	.word	0x20000964
 800120c:	40012400 	.word	0x40012400

08001210 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001214:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <MX_I2C2_Init+0x74>)
 8001216:	4a1c      	ldr	r2, [pc, #112]	; (8001288 <MX_I2C2_Init+0x78>)
 8001218:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 800121a:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <MX_I2C2_Init+0x74>)
 800121c:	4a1b      	ldr	r2, [pc, #108]	; (800128c <MX_I2C2_Init+0x7c>)
 800121e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001220:	4b18      	ldr	r3, [pc, #96]	; (8001284 <MX_I2C2_Init+0x74>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001226:	4b17      	ldr	r3, [pc, #92]	; (8001284 <MX_I2C2_Init+0x74>)
 8001228:	2201      	movs	r2, #1
 800122a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800122c:	4b15      	ldr	r3, [pc, #84]	; (8001284 <MX_I2C2_Init+0x74>)
 800122e:	2200      	movs	r2, #0
 8001230:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001232:	4b14      	ldr	r3, [pc, #80]	; (8001284 <MX_I2C2_Init+0x74>)
 8001234:	2200      	movs	r2, #0
 8001236:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001238:	4b12      	ldr	r3, [pc, #72]	; (8001284 <MX_I2C2_Init+0x74>)
 800123a:	2200      	movs	r2, #0
 800123c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <MX_I2C2_Init+0x74>)
 8001240:	2200      	movs	r2, #0
 8001242:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <MX_I2C2_Init+0x74>)
 8001246:	2200      	movs	r2, #0
 8001248:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800124a:	480e      	ldr	r0, [pc, #56]	; (8001284 <MX_I2C2_Init+0x74>)
 800124c:	f002 f921 	bl	8003492 <HAL_I2C_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001256:	f000 fa1f 	bl	8001698 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800125a:	2100      	movs	r1, #0
 800125c:	4809      	ldr	r0, [pc, #36]	; (8001284 <MX_I2C2_Init+0x74>)
 800125e:	f002 f9a7 	bl	80035b0 <HAL_I2CEx_ConfigAnalogFilter>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001268:	f000 fa16 	bl	8001698 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800126c:	2100      	movs	r1, #0
 800126e:	4805      	ldr	r0, [pc, #20]	; (8001284 <MX_I2C2_Init+0x74>)
 8001270:	f002 f9e8 	bl	8003644 <HAL_I2CEx_ConfigDigitalFilter>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800127a:	f000 fa0d 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200009c8 	.word	0x200009c8
 8001288:	40005800 	.word	0x40005800
 800128c:	20303e5d 	.word	0x20303e5d

08001290 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001294:	4b20      	ldr	r3, [pc, #128]	; (8001318 <MX_LPUART1_UART_Init+0x88>)
 8001296:	4a21      	ldr	r2, [pc, #132]	; (800131c <MX_LPUART1_UART_Init+0x8c>)
 8001298:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800129a:	4b1f      	ldr	r3, [pc, #124]	; (8001318 <MX_LPUART1_UART_Init+0x88>)
 800129c:	4a20      	ldr	r2, [pc, #128]	; (8001320 <MX_LPUART1_UART_Init+0x90>)
 800129e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012a0:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <MX_LPUART1_UART_Init+0x88>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80012a6:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <MX_LPUART1_UART_Init+0x88>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80012ac:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <MX_LPUART1_UART_Init+0x88>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_RX;
 80012b2:	4b19      	ldr	r3, [pc, #100]	; (8001318 <MX_LPUART1_UART_Init+0x88>)
 80012b4:	2204      	movs	r2, #4
 80012b6:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012b8:	4b17      	ldr	r3, [pc, #92]	; (8001318 <MX_LPUART1_UART_Init+0x88>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012be:	4b16      	ldr	r3, [pc, #88]	; (8001318 <MX_LPUART1_UART_Init+0x88>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012c4:	4b14      	ldr	r3, [pc, #80]	; (8001318 <MX_LPUART1_UART_Init+0x88>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ca:	4b13      	ldr	r3, [pc, #76]	; (8001318 <MX_LPUART1_UART_Init+0x88>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&hlpuart1) != HAL_OK)
 80012d0:	4811      	ldr	r0, [pc, #68]	; (8001318 <MX_LPUART1_UART_Init+0x88>)
 80012d2:	f004 fd03 	bl	8005cdc <HAL_HalfDuplex_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 80012dc:	f000 f9dc 	bl	8001698 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012e0:	2100      	movs	r1, #0
 80012e2:	480d      	ldr	r0, [pc, #52]	; (8001318 <MX_LPUART1_UART_Init+0x88>)
 80012e4:	f006 fcc7 	bl	8007c76 <HAL_UARTEx_SetTxFifoThreshold>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 80012ee:	f000 f9d3 	bl	8001698 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012f2:	2100      	movs	r1, #0
 80012f4:	4808      	ldr	r0, [pc, #32]	; (8001318 <MX_LPUART1_UART_Init+0x88>)
 80012f6:	f006 fcfc 	bl	8007cf2 <HAL_UARTEx_SetRxFifoThreshold>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8001300:	f000 f9ca 	bl	8001698 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001304:	4804      	ldr	r0, [pc, #16]	; (8001318 <MX_LPUART1_UART_Init+0x88>)
 8001306:	f006 fc7e 	bl	8007c06 <HAL_UARTEx_DisableFifoMode>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8001310:	f000 f9c2 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000a1c 	.word	0x20000a1c
 800131c:	40008000 	.word	0x40008000
 8001320:	00033324 	.word	0x00033324

08001324 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001328:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <MX_USART2_UART_Init+0x90>)
 800132a:	4a23      	ldr	r2, [pc, #140]	; (80013b8 <MX_USART2_UART_Init+0x94>)
 800132c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800132e:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <MX_USART2_UART_Init+0x90>)
 8001330:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001334:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001336:	4b1f      	ldr	r3, [pc, #124]	; (80013b4 <MX_USART2_UART_Init+0x90>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800133c:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <MX_USART2_UART_Init+0x90>)
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001342:	4b1c      	ldr	r3, [pc, #112]	; (80013b4 <MX_USART2_UART_Init+0x90>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001348:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <MX_USART2_UART_Init+0x90>)
 800134a:	220c      	movs	r2, #12
 800134c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800134e:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <MX_USART2_UART_Init+0x90>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001354:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <MX_USART2_UART_Init+0x90>)
 8001356:	2200      	movs	r2, #0
 8001358:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800135a:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <MX_USART2_UART_Init+0x90>)
 800135c:	2200      	movs	r2, #0
 800135e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001360:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <MX_USART2_UART_Init+0x90>)
 8001362:	2200      	movs	r2, #0
 8001364:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001366:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <MX_USART2_UART_Init+0x90>)
 8001368:	2200      	movs	r2, #0
 800136a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800136c:	4811      	ldr	r0, [pc, #68]	; (80013b4 <MX_USART2_UART_Init+0x90>)
 800136e:	f004 fc65 	bl	8005c3c <HAL_UART_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001378:	f000 f98e 	bl	8001698 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800137c:	2100      	movs	r1, #0
 800137e:	480d      	ldr	r0, [pc, #52]	; (80013b4 <MX_USART2_UART_Init+0x90>)
 8001380:	f006 fc79 	bl	8007c76 <HAL_UARTEx_SetTxFifoThreshold>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800138a:	f000 f985 	bl	8001698 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800138e:	2100      	movs	r1, #0
 8001390:	4808      	ldr	r0, [pc, #32]	; (80013b4 <MX_USART2_UART_Init+0x90>)
 8001392:	f006 fcae 	bl	8007cf2 <HAL_UARTEx_SetRxFifoThreshold>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800139c:	f000 f97c 	bl	8001698 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80013a0:	4804      	ldr	r0, [pc, #16]	; (80013b4 <MX_USART2_UART_Init+0x90>)
 80013a2:	f006 fc30 	bl	8007c06 <HAL_UARTEx_DisableFifoMode>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80013ac:	f000 f974 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000ab0 	.word	0x20000ab0
 80013b8:	40004400 	.word	0x40004400

080013bc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b092      	sub	sp, #72	; 0x48
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80013c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80013d2:	2300      	movs	r3, #0
 80013d4:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	222c      	movs	r2, #44	; 0x2c
 80013da:	2100      	movs	r1, #0
 80013dc:	4618      	mov	r0, r3
 80013de:	f009 fe0e 	bl	800affe <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80013e2:	4b3f      	ldr	r3, [pc, #252]	; (80014e0 <MX_RTC_Init+0x124>)
 80013e4:	4a3f      	ldr	r2, [pc, #252]	; (80014e4 <MX_RTC_Init+0x128>)
 80013e6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80013e8:	4b3d      	ldr	r3, [pc, #244]	; (80014e0 <MX_RTC_Init+0x124>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80013ee:	4b3c      	ldr	r3, [pc, #240]	; (80014e0 <MX_RTC_Init+0x124>)
 80013f0:	227f      	movs	r2, #127	; 0x7f
 80013f2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80013f4:	4b3a      	ldr	r3, [pc, #232]	; (80014e0 <MX_RTC_Init+0x124>)
 80013f6:	22ff      	movs	r2, #255	; 0xff
 80013f8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80013fa:	4b39      	ldr	r3, [pc, #228]	; (80014e0 <MX_RTC_Init+0x124>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001400:	4b37      	ldr	r3, [pc, #220]	; (80014e0 <MX_RTC_Init+0x124>)
 8001402:	2200      	movs	r2, #0
 8001404:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001406:	4b36      	ldr	r3, [pc, #216]	; (80014e0 <MX_RTC_Init+0x124>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800140c:	4b34      	ldr	r3, [pc, #208]	; (80014e0 <MX_RTC_Init+0x124>)
 800140e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001412:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001414:	4b32      	ldr	r3, [pc, #200]	; (80014e0 <MX_RTC_Init+0x124>)
 8001416:	2200      	movs	r2, #0
 8001418:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 800141a:	4b31      	ldr	r3, [pc, #196]	; (80014e0 <MX_RTC_Init+0x124>)
 800141c:	2200      	movs	r2, #0
 800141e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001420:	482f      	ldr	r0, [pc, #188]	; (80014e0 <MX_RTC_Init+0x124>)
 8001422:	f003 fc81 	bl	8004d28 <HAL_RTC_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 800142c:	f000 f934 	bl	8001698 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001430:	2300      	movs	r3, #0
 8001432:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8001436:	2300      	movs	r3, #0
 8001438:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 800143c:	2300      	movs	r3, #0
 800143e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001442:	2300      	movs	r3, #0
 8001444:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001446:	2300      	movs	r3, #0
 8001448:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800144a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800144e:	2201      	movs	r2, #1
 8001450:	4619      	mov	r1, r3
 8001452:	4823      	ldr	r0, [pc, #140]	; (80014e0 <MX_RTC_Init+0x124>)
 8001454:	f003 fcea 	bl	8004e2c <HAL_RTC_SetTime>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 800145e:	f000 f91b 	bl	8001698 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001462:	2301      	movs	r3, #1
 8001464:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8001468:	2301      	movs	r3, #1
 800146a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 800146e:	2301      	movs	r3, #1
 8001470:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8001474:	2300      	movs	r3, #0
 8001476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800147a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800147e:	2201      	movs	r2, #1
 8001480:	4619      	mov	r1, r3
 8001482:	4817      	ldr	r0, [pc, #92]	; (80014e0 <MX_RTC_Init+0x124>)
 8001484:	f003 fdd0 	bl	8005028 <HAL_RTC_SetDate>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_RTC_Init+0xd6>
  {
    Error_Handler();
 800148e:	f000 f903 	bl	8001698 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001492:	2300      	movs	r3, #0
 8001494:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001496:	2300      	movs	r3, #0
 8001498:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 800149a:	2300      	movs	r3, #0
 800149c:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 80014b6:	2301      	movs	r3, #1
 80014b8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 80014bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	2201      	movs	r2, #1
 80014c6:	4619      	mov	r1, r3
 80014c8:	4805      	ldr	r0, [pc, #20]	; (80014e0 <MX_RTC_Init+0x124>)
 80014ca:	f003 fe81 	bl	80051d0 <HAL_RTC_SetAlarm>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 80014d4:	f000 f8e0 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80014d8:	bf00      	nop
 80014da:	3748      	adds	r7, #72	; 0x48
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000b44 	.word	0x20000b44
 80014e4:	40002800 	.word	0x40002800

080014e8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80014ec:	4b1b      	ldr	r3, [pc, #108]	; (800155c <MX_SPI2_Init+0x74>)
 80014ee:	4a1c      	ldr	r2, [pc, #112]	; (8001560 <MX_SPI2_Init+0x78>)
 80014f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014f2:	4b1a      	ldr	r3, [pc, #104]	; (800155c <MX_SPI2_Init+0x74>)
 80014f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014fa:	4b18      	ldr	r3, [pc, #96]	; (800155c <MX_SPI2_Init+0x74>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001500:	4b16      	ldr	r3, [pc, #88]	; (800155c <MX_SPI2_Init+0x74>)
 8001502:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001506:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001508:	4b14      	ldr	r3, [pc, #80]	; (800155c <MX_SPI2_Init+0x74>)
 800150a:	2200      	movs	r2, #0
 800150c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800150e:	4b13      	ldr	r3, [pc, #76]	; (800155c <MX_SPI2_Init+0x74>)
 8001510:	2200      	movs	r2, #0
 8001512:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001514:	4b11      	ldr	r3, [pc, #68]	; (800155c <MX_SPI2_Init+0x74>)
 8001516:	f44f 7200 	mov.w	r2, #512	; 0x200
 800151a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800151c:	4b0f      	ldr	r3, [pc, #60]	; (800155c <MX_SPI2_Init+0x74>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <MX_SPI2_Init+0x74>)
 8001524:	2200      	movs	r2, #0
 8001526:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <MX_SPI2_Init+0x74>)
 800152a:	2200      	movs	r2, #0
 800152c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800152e:	4b0b      	ldr	r3, [pc, #44]	; (800155c <MX_SPI2_Init+0x74>)
 8001530:	2200      	movs	r2, #0
 8001532:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001534:	4b09      	ldr	r3, [pc, #36]	; (800155c <MX_SPI2_Init+0x74>)
 8001536:	2207      	movs	r2, #7
 8001538:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <MX_SPI2_Init+0x74>)
 800153c:	2200      	movs	r2, #0
 800153e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <MX_SPI2_Init+0x74>)
 8001542:	2208      	movs	r2, #8
 8001544:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001546:	4805      	ldr	r0, [pc, #20]	; (800155c <MX_SPI2_Init+0x74>)
 8001548:	f004 f816 	bl	8005578 <HAL_SPI_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001552:	f000 f8a1 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000b7c 	.word	0x20000b7c
 8001560:	40003800 	.word	0x40003800

08001564 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001578:	2001      	movs	r0, #1
 800157a:	f7ff fd0c 	bl	8000f96 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800157e:	2002      	movs	r0, #2
 8001580:	f7ff fd09 	bl	8000f96 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001584:	2004      	movs	r0, #4
 8001586:	f7ff fd06 	bl	8000f96 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ADC_SW_Pin|MB_OC_Pin|LED_Pin, GPIO_PIN_RESET);
 800158a:	2200      	movs	r2, #0
 800158c:	21e0      	movs	r1, #224	; 0xe0
 800158e:	481e      	ldr	r0, [pc, #120]	; (8001608 <MX_GPIO_Init+0xa4>)
 8001590:	f001 ff68 	bl	8003464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MB_PWR_Pin|EXT_PWR_Pin, GPIO_PIN_RESET);
 8001594:	2200      	movs	r2, #0
 8001596:	f240 2101 	movw	r1, #513	; 0x201
 800159a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800159e:	f001 ff61 	bl	8003464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MB_CTL_GPIO_Port, MB_CTL_Pin, GPIO_PIN_RESET);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2101      	movs	r1, #1
 80015a6:	4819      	ldr	r0, [pc, #100]	; (800160c <MX_GPIO_Init+0xa8>)
 80015a8:	f001 ff5c 	bl	8003464 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_SW_Pin MB_OC_Pin LED_Pin */
  GPIO_InitStruct.Pin = ADC_SW_Pin|MB_OC_Pin|LED_Pin;
 80015ac:	23e0      	movs	r3, #224	; 0xe0
 80015ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b0:	2301      	movs	r3, #1
 80015b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	4619      	mov	r1, r3
 80015c0:	4811      	ldr	r0, [pc, #68]	; (8001608 <MX_GPIO_Init+0xa4>)
 80015c2:	f001 fdef 	bl	80031a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MB_PWR_Pin EXT_PWR_Pin */
  GPIO_InitStruct.Pin = MB_PWR_Pin|EXT_PWR_Pin;
 80015c6:	f240 2301 	movw	r3, #513	; 0x201
 80015ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015cc:	2301      	movs	r3, #1
 80015ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d4:	2300      	movs	r3, #0
 80015d6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	4619      	mov	r1, r3
 80015dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e0:	f001 fde0 	bl	80031a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MB_CTL_Pin */
  GPIO_InitStruct.Pin = MB_CTL_Pin;
 80015e4:	2301      	movs	r3, #1
 80015e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e8:	2301      	movs	r3, #1
 80015ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f0:	2300      	movs	r3, #0
 80015f2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(MB_CTL_GPIO_Port, &GPIO_InitStruct);
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	4619      	mov	r1, r3
 80015f8:	4804      	ldr	r0, [pc, #16]	; (800160c <MX_GPIO_Init+0xa8>)
 80015fa:	f001 fdd3 	bl	80031a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015fe:	bf00      	nop
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	48000400 	.word	0x48000400
 800160c:	48000800 	.word	0x48000800

08001610 <Get_AdcHandle>:
  osDelay(Delay);
}


ADC_HandleTypeDef *Get_AdcHandle(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return &hadc;
 8001614:	4b02      	ldr	r3, [pc, #8]	; (8001620 <Get_AdcHandle+0x10>)
}
 8001616:	4618      	mov	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	20000964 	.word	0x20000964

08001624 <Get_DebugHandle>:


UART_HandleTypeDef *Get_DebugHandle(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return &huart2;
 8001628:	4b02      	ldr	r3, [pc, #8]	; (8001634 <Get_DebugHandle+0x10>)
}
 800162a:	4618      	mov	r0, r3
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	20000ab0 	.word	0x20000ab0

08001638 <Get_SonarHandle>:

UART_HandleTypeDef *Get_SonarHandle(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return &hlpuart1;;
 800163c:	4b02      	ldr	r3, [pc, #8]	; (8001648 <Get_SonarHandle+0x10>)
}
 800163e:	4618      	mov	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	20000a1c 	.word	0x20000a1c

0800164c <Get_RtcHandle>:

RTC_HandleTypeDef  *Get_RtcHandle(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return &hrtc;
 8001650:	4b02      	ldr	r3, [pc, #8]	; (800165c <Get_RtcHandle+0x10>)
}
 8001652:	4618      	mov	r0, r3
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000b44 	.word	0x20000b44

08001660 <Get_TerminalQueueHandle>:




osMessageQId Get_TerminalQueueHandle(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return xQueue1Handle;;
 8001664:	4b02      	ldr	r3, [pc, #8]	; (8001670 <Get_TerminalQueueHandle+0x10>)
 8001666:	681b      	ldr	r3, [r3, #0]
}
 8001668:	4618      	mov	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr
 8001670:	20000be4 	.word	0x20000be4

08001674 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a04      	ldr	r2, [pc, #16]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d101      	bne.n	800168a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001686:	f000 fbdd 	bl	8001e44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40012c00 	.word	0x40012c00

08001698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800169c:	b672      	cpsid	i
}
 800169e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <Error_Handler+0x8>

080016a2 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80016a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80016ba:	bf00      	nop
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr

080016c2 <LL_AHB2_GRP1_EnableClock>:
{
 80016c2:	b480      	push	{r7}
 80016c4:	b085      	sub	sp, #20
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80016ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80016da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4013      	ands	r3, r2
 80016e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016e6:	68fb      	ldr	r3, [r7, #12]
}
 80016e8:	bf00      	nop
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr

080016f2 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80016f2:	b480      	push	{r7}
 80016f4:	b085      	sub	sp, #20
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80016fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016fe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001700:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4313      	orrs	r3, r2
 8001708:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800170a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800170e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4013      	ands	r3, r2
 8001714:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001716:	68fb      	ldr	r3, [r7, #12]
}
 8001718:	bf00      	nop
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr

08001722 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001722:	b480      	push	{r7}
 8001724:	b085      	sub	sp, #20
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800172a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800172e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001730:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4313      	orrs	r3, r2
 8001738:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800173a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800173e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4013      	ands	r3, r2
 8001744:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001746:	68fb      	ldr	r3, [r7, #12]
}
 8001748:	bf00      	nop
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr

08001752 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001752:	b480      	push	{r7}
 8001754:	b085      	sub	sp, #20
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800175a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800175e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001760:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4313      	orrs	r3, r2
 8001768:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800176a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800176e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4013      	ands	r3, r2
 8001774:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001776:	68fb      	ldr	r3, [r7, #12]
}
 8001778:	bf00      	nop
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr

08001782 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001786:	2200      	movs	r2, #0
 8001788:	210f      	movs	r1, #15
 800178a:	f06f 0001 	mvn.w	r0, #1
 800178e:	f001 fc24 	bl	8002fda <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b088      	sub	sp, #32
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	f107 030c 	add.w	r3, r7, #12
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a0c      	ldr	r2, [pc, #48]	; (80017e8 <HAL_ADC_MspInit+0x50>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d112      	bne.n	80017e0 <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80017ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80017be:	f7ff ffc8 	bl	8001752 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c2:	2002      	movs	r0, #2
 80017c4:	f7ff ff7d 	bl	80016c2 <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB3     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017c8:	2308      	movs	r3, #8
 80017ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017cc:	2303      	movs	r3, #3
 80017ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d4:	f107 030c 	add.w	r3, r7, #12
 80017d8:	4619      	mov	r1, r3
 80017da:	4804      	ldr	r0, [pc, #16]	; (80017ec <HAL_ADC_MspInit+0x54>)
 80017dc:	f001 fce2 	bl	80031a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }

}
 80017e0:	bf00      	nop
 80017e2:	3720      	adds	r7, #32
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40012400 	.word	0x40012400
 80017ec:	48000400 	.word	0x48000400

080017f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b096      	sub	sp, #88	; 0x58
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001808:	f107 030c 	add.w	r3, r7, #12
 800180c:	2238      	movs	r2, #56	; 0x38
 800180e:	2100      	movs	r1, #0
 8001810:	4618      	mov	r0, r3
 8001812:	f009 fbf4 	bl	800affe <memset>
  if(hi2c->Instance==I2C2)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a21      	ldr	r2, [pc, #132]	; (80018a0 <HAL_I2C_MspInit+0xb0>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d13b      	bne.n	8001898 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001820:	2380      	movs	r3, #128	; 0x80
 8001822:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001824:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800182a:	f107 030c 	add.w	r3, r7, #12
 800182e:	4618      	mov	r0, r3
 8001830:	f003 f960 	bl	8004af4 <HAL_RCCEx_PeriphCLKConfig>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800183a:	f7ff ff2d 	bl	8001698 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183e:	2001      	movs	r0, #1
 8001840:	f7ff ff3f 	bl	80016c2 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001844:	2002      	movs	r0, #2
 8001846:	f7ff ff3c 	bl	80016c2 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800184a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800184e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001850:	2312      	movs	r3, #18
 8001852:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001858:	2300      	movs	r3, #0
 800185a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800185c:	2304      	movs	r3, #4
 800185e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001860:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001864:	4619      	mov	r1, r3
 8001866:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800186a:	f001 fc9b 	bl	80031a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800186e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001872:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001874:	2312      	movs	r3, #18
 8001876:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	2300      	movs	r3, #0
 800187e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001880:	2304      	movs	r3, #4
 8001882:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001884:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001888:	4619      	mov	r1, r3
 800188a:	4806      	ldr	r0, [pc, #24]	; (80018a4 <HAL_I2C_MspInit+0xb4>)
 800188c:	f001 fc8a 	bl	80031a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001890:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001894:	f7ff ff2d 	bl	80016f2 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001898:	bf00      	nop
 800189a:	3758      	adds	r7, #88	; 0x58
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40005800 	.word	0x40005800
 80018a4:	48000400 	.word	0x48000400

080018a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b096      	sub	sp, #88	; 0x58
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018c0:	f107 030c 	add.w	r3, r7, #12
 80018c4:	2238      	movs	r2, #56	; 0x38
 80018c6:	2100      	movs	r1, #0
 80018c8:	4618      	mov	r0, r3
 80018ca:	f009 fb98 	bl	800affe <memset>
  if(huart->Instance==LPUART1)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a34      	ldr	r2, [pc, #208]	; (80019a4 <HAL_UART_MspInit+0xfc>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d12c      	bne.n	8001932 <HAL_UART_MspInit+0x8a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80018d8:	2320      	movs	r3, #32
 80018da:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80018dc:	2300      	movs	r3, #0
 80018de:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018e0:	f107 030c 	add.w	r3, r7, #12
 80018e4:	4618      	mov	r0, r3
 80018e6:	f003 f905 	bl	8004af4 <HAL_RCCEx_PeriphCLKConfig>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018f0:	f7ff fed2 	bl	8001698 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80018f4:	2001      	movs	r0, #1
 80018f6:	f7ff ff14 	bl	8001722 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018fa:	2004      	movs	r0, #4
 80018fc:	f7ff fee1 	bl	80016c2 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = MB_RX_Pin;
 8001900:	2302      	movs	r3, #2
 8001902:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001904:	2312      	movs	r3, #18
 8001906:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001908:	2301      	movs	r3, #1
 800190a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190c:	2300      	movs	r3, #0
 800190e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001910:	2308      	movs	r3, #8
 8001912:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(MB_RX_GPIO_Port, &GPIO_InitStruct);
 8001914:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001918:	4619      	mov	r1, r3
 800191a:	4823      	ldr	r0, [pc, #140]	; (80019a8 <HAL_UART_MspInit+0x100>)
 800191c:	f001 fc42 	bl	80031a4 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8001920:	2200      	movs	r2, #0
 8001922:	2105      	movs	r1, #5
 8001924:	2026      	movs	r0, #38	; 0x26
 8001926:	f001 fb58 	bl	8002fda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800192a:	2026      	movs	r0, #38	; 0x26
 800192c:	f001 fb6f 	bl	800300e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001930:	e033      	b.n	800199a <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART2)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a1d      	ldr	r2, [pc, #116]	; (80019ac <HAL_UART_MspInit+0x104>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d12e      	bne.n	800199a <HAL_UART_MspInit+0xf2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800193c:	2302      	movs	r3, #2
 800193e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001940:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001944:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001946:	f107 030c 	add.w	r3, r7, #12
 800194a:	4618      	mov	r0, r3
 800194c:	f003 f8d2 	bl	8004af4 <HAL_RCCEx_PeriphCLKConfig>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_UART_MspInit+0xb2>
      Error_Handler();
 8001956:	f7ff fe9f 	bl	8001698 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800195a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800195e:	f7ff fec8 	bl	80016f2 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001962:	2001      	movs	r0, #1
 8001964:	f7ff fead 	bl	80016c2 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8001968:	230c      	movs	r3, #12
 800196a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	2300      	movs	r3, #0
 8001976:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001978:	2307      	movs	r3, #7
 800197a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001980:	4619      	mov	r1, r3
 8001982:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001986:	f001 fc0d 	bl	80031a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	2105      	movs	r1, #5
 800198e:	2025      	movs	r0, #37	; 0x25
 8001990:	f001 fb23 	bl	8002fda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001994:	2025      	movs	r0, #37	; 0x25
 8001996:	f001 fb3a 	bl	800300e <HAL_NVIC_EnableIRQ>
}
 800199a:	bf00      	nop
 800199c:	3758      	adds	r7, #88	; 0x58
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40008000 	.word	0x40008000
 80019a8:	48000800 	.word	0x48000800
 80019ac:	40004400 	.word	0x40004400

080019b0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b090      	sub	sp, #64	; 0x40
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019b8:	f107 0308 	add.w	r3, r7, #8
 80019bc:	2238      	movs	r2, #56	; 0x38
 80019be:	2100      	movs	r1, #0
 80019c0:	4618      	mov	r0, r3
 80019c2:	f009 fb1c 	bl	800affe <memset>
  if(hrtc->Instance==RTC)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a0e      	ldr	r2, [pc, #56]	; (8001a04 <HAL_RTC_MspInit+0x54>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d115      	bne.n	80019fc <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80019d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019d4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80019d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019da:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019dc:	f107 0308 	add.w	r3, r7, #8
 80019e0:	4618      	mov	r0, r3
 80019e2:	f003 f887 	bl	8004af4 <HAL_RCCEx_PeriphCLKConfig>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80019ec:	f7ff fe54 	bl	8001698 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80019f0:	f7ff fe57 	bl	80016a2 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80019f4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80019f8:	f7ff fe7b 	bl	80016f2 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80019fc:	bf00      	nop
 80019fe:	3740      	adds	r7, #64	; 0x40
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40002800 	.word	0x40002800

08001a08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b096      	sub	sp, #88	; 0x58
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a20:	f107 030c 	add.w	r3, r7, #12
 8001a24:	2238      	movs	r2, #56	; 0x38
 8001a26:	2100      	movs	r1, #0
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f009 fae8 	bl	800affe <memset>
  if(hspi->Instance==SPI2)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a21      	ldr	r2, [pc, #132]	; (8001ab8 <HAL_SPI_MspInit+0xb0>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d13b      	bne.n	8001ab0 <HAL_SPI_MspInit+0xa8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 8001a38:	2310      	movs	r3, #16
 8001a3a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 8001a3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a40:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a42:	f107 030c 	add.w	r3, r7, #12
 8001a46:	4618      	mov	r0, r3
 8001a48:	f003 f854 	bl	8004af4 <HAL_RCCEx_PeriphCLKConfig>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001a52:	f7ff fe21 	bl	8001698 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a56:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001a5a:	f7ff fe4a 	bl	80016f2 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5e:	2002      	movs	r0, #2
 8001a60:	f7ff fe2f 	bl	80016c2 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a64:	2001      	movs	r0, #1
 8001a66:	f7ff fe2c 	bl	80016c2 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PA10     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 8001a6a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001a6e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a70:	2302      	movs	r3, #2
 8001a72:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a7c:	2305      	movs	r3, #5
 8001a7e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a80:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a84:	4619      	mov	r1, r3
 8001a86:	480d      	ldr	r0, [pc, #52]	; (8001abc <HAL_SPI_MspInit+0xb4>)
 8001a88:	f001 fb8c 	bl	80031a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a90:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a92:	2302      	movs	r3, #2
 8001a94:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a9e:	2305      	movs	r3, #5
 8001aa0:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aac:	f001 fb7a 	bl	80031a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001ab0:	bf00      	nop
 8001ab2:	3758      	adds	r7, #88	; 0x58
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40003800 	.word	0x40003800
 8001abc:	48000400 	.word	0x48000400

08001ac0 <LL_APB2_GRP1_EnableClock>:
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001acc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ace:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001adc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
}
 8001ae6:	bf00      	nop
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr

08001af0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08c      	sub	sp, #48	; 0x30
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001b00:	2300      	movs	r3, #0
 8001b02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001b06:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001b0a:	f7ff ffd9 	bl	8001ac0 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b0e:	f107 0208 	add.w	r2, r7, #8
 8001b12:	f107 030c 	add.w	r3, r7, #12
 8001b16:	4611      	mov	r1, r2
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f002 fe07 	bl	800472c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001b1e:	f002 fdf3 	bl	8004708 <HAL_RCC_GetPCLK2Freq>
 8001b22:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b26:	4a21      	ldr	r2, [pc, #132]	; (8001bac <HAL_InitTick+0xbc>)
 8001b28:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2c:	0c9b      	lsrs	r3, r3, #18
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001b32:	4b1f      	ldr	r3, [pc, #124]	; (8001bb0 <HAL_InitTick+0xc0>)
 8001b34:	4a1f      	ldr	r2, [pc, #124]	; (8001bb4 <HAL_InitTick+0xc4>)
 8001b36:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001b38:	4b1d      	ldr	r3, [pc, #116]	; (8001bb0 <HAL_InitTick+0xc0>)
 8001b3a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b3e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b40:	4a1b      	ldr	r2, [pc, #108]	; (8001bb0 <HAL_InitTick+0xc0>)
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b46:	4b1a      	ldr	r3, [pc, #104]	; (8001bb0 <HAL_InitTick+0xc0>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4c:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <HAL_InitTick+0xc0>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001b52:	4817      	ldr	r0, [pc, #92]	; (8001bb0 <HAL_InitTick+0xc0>)
 8001b54:	f003 fde4 	bl	8005720 <HAL_TIM_Base_Init>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001b5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d11b      	bne.n	8001b9e <HAL_InitTick+0xae>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001b66:	4812      	ldr	r0, [pc, #72]	; (8001bb0 <HAL_InitTick+0xc0>)
 8001b68:	f003 fe3a 	bl	80057e0 <HAL_TIM_Base_Start_IT>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001b72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d111      	bne.n	8001b9e <HAL_InitTick+0xae>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001b7a:	2018      	movs	r0, #24
 8001b7c:	f001 fa47 	bl	800300e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b0f      	cmp	r3, #15
 8001b84:	d808      	bhi.n	8001b98 <HAL_InitTick+0xa8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001b86:	2200      	movs	r2, #0
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	2018      	movs	r0, #24
 8001b8c:	f001 fa25 	bl	8002fda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b90:	4a09      	ldr	r2, [pc, #36]	; (8001bb8 <HAL_InitTick+0xc8>)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	e002      	b.n	8001b9e <HAL_InitTick+0xae>
      }
      else
      {
        status = HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001b9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3730      	adds	r7, #48	; 0x30
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	431bde83 	.word	0x431bde83
 8001bb0:	20000bf8 	.word	0x20000bf8
 8001bb4:	40012c00 	.word	0x40012c00
 8001bb8:	20000004 	.word	0x20000004

08001bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <NMI_Handler+0x4>

08001bc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bc6:	e7fe      	b.n	8001bc6 <HardFault_Handler+0x4>

08001bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <MemManage_Handler+0x4>

08001bce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bd2:	e7fe      	b.n	8001bd2 <BusFault_Handler+0x4>

08001bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <UsageFault_Handler+0x4>

08001bda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr
	...

08001be8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update Interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bec:	4802      	ldr	r0, [pc, #8]	; (8001bf8 <TIM1_UP_IRQHandler+0x10>)
 8001bee:	f003 fe43 	bl	8005878 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000bf8 	.word	0x20000bf8

08001bfc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c00:	4802      	ldr	r0, [pc, #8]	; (8001c0c <USART2_IRQHandler+0x10>)
 8001c02:	f004 f995 	bl	8005f30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000ab0 	.word	0x20000ab0

08001c10 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001c14:	4802      	ldr	r0, [pc, #8]	; (8001c20 <LPUART1_IRQHandler+0x10>)
 8001c16:	f004 f98b 	bl	8005f30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000a1c 	.word	0x20000a1c

08001c24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return 1;
 8001c28:	2301      	movs	r3, #1
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr

08001c32 <_kill>:

int _kill(int pid, int sig)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
 8001c3a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c3c:	f009 f8ae 	bl	800ad9c <__errno>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2216      	movs	r2, #22
 8001c44:	601a      	str	r2, [r3, #0]
  return -1;
 8001c46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <_exit>:

void _exit (int status)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff ffe7 	bl	8001c32 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c64:	e7fe      	b.n	8001c64 <_exit+0x12>

08001c66 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b086      	sub	sp, #24
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	60f8      	str	r0, [r7, #12]
 8001c6e:	60b9      	str	r1, [r7, #8]
 8001c70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	e00a      	b.n	8001c8e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c78:	f3af 8000 	nop.w
 8001c7c:	4601      	mov	r1, r0
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	1c5a      	adds	r2, r3, #1
 8001c82:	60ba      	str	r2, [r7, #8]
 8001c84:	b2ca      	uxtb	r2, r1
 8001c86:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	dbf0      	blt.n	8001c78 <_read+0x12>
  }

  return len;
 8001c96:	687b      	ldr	r3, [r7, #4]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	e009      	b.n	8001cc6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	1c5a      	adds	r2, r3, #1
 8001cb6:	60ba      	str	r2, [r7, #8]
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	617b      	str	r3, [r7, #20]
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	dbf1      	blt.n	8001cb2 <_write+0x12>
  }
  return len;
 8001cce:	687b      	ldr	r3, [r7, #4]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <_close>:

int _close(int file)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ce0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr

08001cee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
 8001cf6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cfe:	605a      	str	r2, [r3, #4]
  return 0;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr

08001d0c <_isatty>:

int _isatty(int file)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d14:	2301      	movs	r3, #1
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr

08001d20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3714      	adds	r7, #20
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr

08001d38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d40:	4a14      	ldr	r2, [pc, #80]	; (8001d94 <_sbrk+0x5c>)
 8001d42:	4b15      	ldr	r3, [pc, #84]	; (8001d98 <_sbrk+0x60>)
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d4c:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <_sbrk+0x64>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d102      	bne.n	8001d5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d54:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <_sbrk+0x64>)
 8001d56:	4a12      	ldr	r2, [pc, #72]	; (8001da0 <_sbrk+0x68>)
 8001d58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d5a:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <_sbrk+0x64>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d207      	bcs.n	8001d78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d68:	f009 f818 	bl	800ad9c <__errno>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	220c      	movs	r2, #12
 8001d70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d76:	e009      	b.n	8001d8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d78:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <_sbrk+0x64>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d7e:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <_sbrk+0x64>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4413      	add	r3, r2
 8001d86:	4a05      	ldr	r2, [pc, #20]	; (8001d9c <_sbrk+0x64>)
 8001d88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20010000 	.word	0x20010000
 8001d98:	00000400 	.word	0x00000400
 8001d9c:	20000c44 	.word	0x20000c44
 8001da0:	20001d08 	.word	0x20001d08

08001da4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr

08001db0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001db0:	480d      	ldr	r0, [pc, #52]	; (8001de8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001db2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001db4:	f7ff fff6 	bl	8001da4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001db8:	480c      	ldr	r0, [pc, #48]	; (8001dec <LoopForever+0x6>)
  ldr r1, =_edata
 8001dba:	490d      	ldr	r1, [pc, #52]	; (8001df0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001dbc:	4a0d      	ldr	r2, [pc, #52]	; (8001df4 <LoopForever+0xe>)
  movs r3, #0
 8001dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc0:	e002      	b.n	8001dc8 <LoopCopyDataInit>

08001dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dc6:	3304      	adds	r3, #4

08001dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dcc:	d3f9      	bcc.n	8001dc2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dce:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dd0:	4c0a      	ldr	r4, [pc, #40]	; (8001dfc <LoopForever+0x16>)
  movs r3, #0
 8001dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd4:	e001      	b.n	8001dda <LoopFillZerobss>

08001dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dd8:	3204      	adds	r2, #4

08001dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ddc:	d3fb      	bcc.n	8001dd6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001dde:	f009 f8d9 	bl	800af94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001de2:	f7ff f8f1 	bl	8000fc8 <main>

08001de6 <LoopForever>:

LoopForever:
    b LoopForever
 8001de6:	e7fe      	b.n	8001de6 <LoopForever>
  ldr   r0, =_estack
 8001de8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001df4:	0800ea60 	.word	0x0800ea60
  ldr r2, =_sbss
 8001df8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001dfc:	20001d08 	.word	0x20001d08

08001e00 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e00:	e7fe      	b.n	8001e00 <ADC_IRQHandler>
	...

08001e04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e0e:	2003      	movs	r0, #3
 8001e10:	f001 f8d8 	bl	8002fc4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001e14:	f002 fc52 	bl	80046bc <HAL_RCC_GetHCLKFreq>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	4a09      	ldr	r2, [pc, #36]	; (8001e40 <HAL_Init+0x3c>)
 8001e1c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e1e:	200f      	movs	r0, #15
 8001e20:	f7ff fe66 	bl	8001af0 <HAL_InitTick>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d002      	beq.n	8001e30 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	71fb      	strb	r3, [r7, #7]
 8001e2e:	e001      	b.n	8001e34 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e30:	f7ff fca7 	bl	8001782 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e34:	79fb      	ldrb	r3, [r7, #7]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000000 	.word	0x20000000

08001e44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <HAL_IncTick+0x1c>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <HAL_IncTick+0x20>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4413      	add	r3, r2
 8001e54:	4a03      	ldr	r2, [pc, #12]	; (8001e64 <HAL_IncTick+0x20>)
 8001e56:	6013      	str	r3, [r2, #0]
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr
 8001e60:	20000008 	.word	0x20000008
 8001e64:	20000c48 	.word	0x20000c48

08001e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e6c:	4b02      	ldr	r3, [pc, #8]	; (8001e78 <HAL_GetTick+0x10>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr
 8001e78:	20000c48 	.word	0x20000c48

08001e7c <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8001e80:	4b02      	ldr	r3, [pc, #8]	; (8001e8c <HAL_GetUIDw0+0x10>)
 8001e82:	681b      	ldr	r3, [r3, #0]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr
 8001e8c:	1fff7590 	.word	0x1fff7590

08001e90 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8001e94:	4b02      	ldr	r3, [pc, #8]	; (8001ea0 <HAL_GetUIDw1+0x10>)
 8001e96:	681b      	ldr	r3, [r3, #0]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr
 8001ea0:	1fff7594 	.word	0x1fff7594

08001ea4 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8001ea8:	4b02      	ldr	r3, [pc, #8]	; (8001eb4 <HAL_GetUIDw2+0x10>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr
 8001eb4:	1fff7598 	.word	0x1fff7598

08001eb8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	601a      	str	r2, [r3, #0]
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr

08001edc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc80      	pop	{r7}
 8001ef4:	4770      	bx	lr

08001ef6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b085      	sub	sp, #20
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	60f8      	str	r0, [r7, #12]
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	695a      	ldr	r2, [r3, #20]
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2107      	movs	r1, #7
 8001f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	401a      	ands	r2, r3
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f22:	431a      	orrs	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001f28:	bf00      	nop
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr

08001f32 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	695a      	ldr	r2, [r3, #20]
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	2107      	movs	r1, #7
 8001f48:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4c:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr

08001f62 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f76:	2301      	movs	r3, #1
 8001f78:	e000      	b.n	8001f7c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bc80      	pop	{r7}
 8001f84:	4770      	bx	lr

08001f86 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b085      	sub	sp, #20
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	60f8      	str	r0, [r7, #12]
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	f003 031f 	and.w	r3, r3, #31
 8001f9c:	210f      	movs	r1, #15
 8001f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	401a      	ands	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	0e9b      	lsrs	r3, r3, #26
 8001faa:	f003 010f 	and.w	r1, r3, #15
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	f003 031f 	and.w	r3, r3, #31
 8001fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001fbe:	bf00      	nop
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr

08001fc8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr

08001fec <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002000:	43db      	mvns	r3, r3
 8002002:	401a      	ands	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	bc80      	pop	{r7}
 8002010:	4770      	bx	lr

08002012 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002012:	b480      	push	{r7}
 8002014:	b085      	sub	sp, #20
 8002016:	af00      	add	r7, sp, #0
 8002018:	60f8      	str	r0, [r7, #12]
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	695a      	ldr	r2, [r3, #20]
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	021b      	lsls	r3, r3, #8
 8002026:	43db      	mvns	r3, r3
 8002028:	401a      	ands	r2, r3
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	0219      	lsls	r1, r3, #8
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	400b      	ands	r3, r1
 8002032:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8002036:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800203a:	431a      	orrs	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002040:	bf00      	nop
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	bc80      	pop	{r7}
 8002048:	4770      	bx	lr

0800204a <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800205a:	f023 0317 	bic.w	r3, r3, #23
 800205e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr

08002070 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002080:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002084:	d101      	bne.n	800208a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	bc80      	pop	{r7}
 8002094:	4770      	bx	lr

08002096 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020a6:	f023 0317 	bic.w	r3, r3, #23
 80020aa:	f043 0201 	orr.w	r2, r3, #1
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr

080020bc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020cc:	f023 0317 	bic.w	r3, r3, #23
 80020d0:	f043 0202 	orr.w	r2, r3, #2
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr

080020e2 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d101      	bne.n	80020fa <LL_ADC_IsEnabled+0x18>
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <LL_ADC_IsEnabled+0x1a>
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr

08002106 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b02      	cmp	r3, #2
 8002118:	d101      	bne.n	800211e <LL_ADC_IsDisableOngoing+0x18>
 800211a:	2301      	movs	r3, #1
 800211c:	e000      	b.n	8002120 <LL_ADC_IsDisableOngoing+0x1a>
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	bc80      	pop	{r7}
 8002128:	4770      	bx	lr

0800212a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800213a:	f023 0317 	bic.w	r3, r3, #23
 800213e:	f043 0204 	orr.w	r2, r3, #4
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr

08002150 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002160:	f023 0317 	bic.w	r3, r3, #23
 8002164:	f043 0210 	orr.w	r2, r3, #16
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	bc80      	pop	{r7}
 8002174:	4770      	bx	lr

08002176 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 0304 	and.w	r3, r3, #4
 8002186:	2b04      	cmp	r3, #4
 8002188:	d101      	bne.n	800218e <LL_ADC_REG_IsConversionOngoing+0x18>
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr
	...

0800219c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b088      	sub	sp, #32
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021a4:	2300      	movs	r3, #0
 80021a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e17e      	b.n	80024bc <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d109      	bne.n	80021e0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7ff fae3 	bl	8001798 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ff43 	bl	8002070 <LL_ADC_IsInternalRegulatorEnabled>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d115      	bne.n	800221c <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff ff28 	bl	800204a <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021fa:	4b9e      	ldr	r3, [pc, #632]	; (8002474 <HAL_ADC_Init+0x2d8>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	099b      	lsrs	r3, r3, #6
 8002200:	4a9d      	ldr	r2, [pc, #628]	; (8002478 <HAL_ADC_Init+0x2dc>)
 8002202:	fba2 2303 	umull	r2, r3, r2, r3
 8002206:	099b      	lsrs	r3, r3, #6
 8002208:	3301      	adds	r3, #1
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800220e:	e002      	b.n	8002216 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	3b01      	subs	r3, #1
 8002214:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1f9      	bne.n	8002210 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff ff25 	bl	8002070 <LL_ADC_IsInternalRegulatorEnabled>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10d      	bne.n	8002248 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002230:	f043 0210 	orr.w	r2, r3, #16
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800223c:	f043 0201 	orr.w	r2, r3, #1
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff92 	bl	8002176 <LL_ADC_REG_IsConversionOngoing>
 8002252:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002258:	f003 0310 	and.w	r3, r3, #16
 800225c:	2b00      	cmp	r3, #0
 800225e:	f040 8124 	bne.w	80024aa <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	2b00      	cmp	r3, #0
 8002266:	f040 8120 	bne.w	80024aa <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002272:	f043 0202 	orr.w	r2, r3, #2
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff ff2f 	bl	80020e2 <LL_ADC_IsEnabled>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	f040 80a7 	bne.w	80023da <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	7e1b      	ldrb	r3, [r3, #24]
 8002294:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002296:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	7e5b      	ldrb	r3, [r3, #25]
 800229c:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800229e:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	7e9b      	ldrb	r3, [r3, #26]
 80022a4:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80022a6:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022ac:	2a00      	cmp	r2, #0
 80022ae:	d002      	beq.n	80022b6 <HAL_ADC_Init+0x11a>
 80022b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022b4:	e000      	b.n	80022b8 <HAL_ADC_Init+0x11c>
 80022b6:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80022b8:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80022be:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	da04      	bge.n	80022d2 <HAL_ADC_Init+0x136>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022d0:	e001      	b.n	80022d6 <HAL_ADC_Init+0x13a>
 80022d2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 80022d6:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80022de:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80022e0:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d114      	bne.n	800231c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	7e9b      	ldrb	r3, [r3, #26]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d104      	bne.n	8002304 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002300:	61bb      	str	r3, [r7, #24]
 8002302:	e00b      	b.n	800231c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002308:	f043 0220 	orr.w	r2, r3, #32
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002314:	f043 0201 	orr.w	r2, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002320:	2b00      	cmp	r3, #0
 8002322:	d009      	beq.n	8002338 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002330:	4313      	orrs	r3, r2
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8002342:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6812      	ldr	r2, [r2, #0]
 800234a:	69b9      	ldr	r1, [r7, #24]
 800234c:	430b      	orrs	r3, r1
 800234e:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800235c:	4313      	orrs	r3, r2
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	4313      	orrs	r3, r2
 8002362:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800236a:	2b01      	cmp	r3, #1
 800236c:	d111      	bne.n	8002392 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800237a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002380:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002386:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	4313      	orrs	r3, r2
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	691a      	ldr	r2, [r3, #16]
 8002398:	4b38      	ldr	r3, [pc, #224]	; (800247c <HAL_ADC_Init+0x2e0>)
 800239a:	4013      	ands	r3, r2
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	6979      	ldr	r1, [r7, #20]
 80023a2:	430b      	orrs	r3, r1
 80023a4:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80023ae:	d014      	beq.n	80023da <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80023b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023b8:	d00f      	beq.n	80023da <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80023be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023c2:	d00a      	beq.n	80023da <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 80023c4:	4b2e      	ldr	r3, [pc, #184]	; (8002480 <HAL_ADC_Init+0x2e4>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80023d4:	492a      	ldr	r1, [pc, #168]	; (8002480 <HAL_ADC_Init+0x2e4>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6818      	ldr	r0, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e2:	461a      	mov	r2, r3
 80023e4:	2100      	movs	r1, #0
 80023e6:	f7ff fd86 	bl	8001ef6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6818      	ldr	r0, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f2:	461a      	mov	r2, r3
 80023f4:	4923      	ldr	r1, [pc, #140]	; (8002484 <HAL_ADC_Init+0x2e8>)
 80023f6:	f7ff fd7e 	bl	8001ef6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d108      	bne.n	8002414 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f062 020f 	orn	r2, r2, #15
 8002410:	629a      	str	r2, [r3, #40]	; 0x28
 8002412:	e017      	b.n	8002444 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800241c:	d112      	bne.n	8002444 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	3b01      	subs	r3, #1
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	f003 031c 	and.w	r3, r3, #28
 8002430:	f06f 020f 	mvn.w	r2, #15
 8002434:	fa02 f103 	lsl.w	r1, r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2100      	movs	r1, #0
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff fd71 	bl	8001f32 <LL_ADC_GetSamplingTimeCommonChannels>
 8002450:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002456:	429a      	cmp	r2, r3
 8002458:	d116      	bne.n	8002488 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002464:	f023 0303 	bic.w	r3, r3, #3
 8002468:	f043 0201 	orr.w	r2, r3, #1
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002470:	e023      	b.n	80024ba <HAL_ADC_Init+0x31e>
 8002472:	bf00      	nop
 8002474:	20000000 	.word	0x20000000
 8002478:	053e2d63 	.word	0x053e2d63
 800247c:	1ffffc02 	.word	0x1ffffc02
 8002480:	40012708 	.word	0x40012708
 8002484:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248c:	f023 0312 	bic.w	r3, r3, #18
 8002490:	f043 0210 	orr.w	r2, r3, #16
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249c:	f043 0201 	orr.w	r2, r3, #1
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80024a8:	e007      	b.n	80024ba <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ae:	f043 0210 	orr.w	r2, r3, #16
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 80024ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3720      	adds	r7, #32
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff fe50 	bl	8002176 <LL_ADC_REG_IsConversionOngoing>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d132      	bne.n	8002542 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d101      	bne.n	80024ea <HAL_ADC_Start+0x26>
 80024e6:	2302      	movs	r3, #2
 80024e8:	e02e      	b.n	8002548 <HAL_ADC_Start+0x84>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 fa8a 	bl	8002a0c <ADC_Enable>
 80024f8:	4603      	mov	r3, r0
 80024fa:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d11a      	bne.n	8002538 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002506:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800250a:	f023 0301 	bic.w	r3, r3, #1
 800250e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	221c      	movs	r2, #28
 8002522:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff fdfa 	bl	800212a <LL_ADC_REG_StartConversion>
 8002536:	e006      	b.n	8002546 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002540:	e001      	b.n	8002546 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002542:	2302      	movs	r3, #2
 8002544:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8002546:	7bfb      	ldrb	r3, [r7, #15]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800255e:	2b01      	cmp	r3, #1
 8002560:	d101      	bne.n	8002566 <HAL_ADC_Stop+0x16>
 8002562:	2302      	movs	r3, #2
 8002564:	e022      	b.n	80025ac <HAL_ADC_Stop+0x5c>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 fa07 	bl	8002982 <ADC_ConversionStop>
 8002574:	4603      	mov	r3, r0
 8002576:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d111      	bne.n	80025a2 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 faca 	bl	8002b18 <ADC_Disable>
 8002584:	4603      	mov	r3, r0
 8002586:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002588:	7bfb      	ldrb	r3, [r7, #15]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d109      	bne.n	80025a2 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002592:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002596:	f023 0301 	bic.w	r3, r3, #1
 800259a:	f043 0201 	orr.w	r2, r3, #1
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d102      	bne.n	80025cc <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80025c6:	2308      	movs	r3, #8
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	e010      	b.n	80025ee <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d007      	beq.n	80025ea <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025de:	f043 0220 	orr.w	r2, r3, #32
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e077      	b.n	80026da <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80025ea:	2304      	movs	r3, #4
 80025ec:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80025ee:	f7ff fc3b 	bl	8001e68 <HAL_GetTick>
 80025f2:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80025f4:	e021      	b.n	800263a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025fc:	d01d      	beq.n	800263a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80025fe:	f7ff fc33 	bl	8001e68 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d302      	bcc.n	8002614 <HAL_ADC_PollForConversion+0x60>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d112      	bne.n	800263a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	4013      	ands	r3, r2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10b      	bne.n	800263a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002626:	f043 0204 	orr.w	r2, r3, #4
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e04f      	b.n	80026da <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4013      	ands	r3, r2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0d6      	beq.n	80025f6 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff fc82 	bl	8001f62 <LL_ADC_REG_IsTriggerSourceSWStart>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d031      	beq.n	80026c8 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	7e9b      	ldrb	r3, [r3, #26]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d12d      	bne.n	80026c8 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	2b08      	cmp	r3, #8
 8002678:	d126      	bne.n	80026c8 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff fd79 	bl	8002176 <LL_ADC_REG_IsConversionOngoing>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d112      	bne.n	80026b0 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 020c 	bic.w	r2, r2, #12
 8002698:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026a2:	f023 0301 	bic.w	r3, r3, #1
 80026a6:	f043 0201 	orr.w	r2, r3, #1
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	659a      	str	r2, [r3, #88]	; 0x58
 80026ae:	e00b      	b.n	80026c8 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b4:	f043 0220 	orr.w	r2, r3, #32
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c0:	f043 0201 	orr.w	r2, r3, #1
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	7e1b      	ldrb	r3, [r3, #24]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d103      	bne.n	80026d8 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	220c      	movs	r2, #12
 80026d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr
	...

080026fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b088      	sub	sp, #32
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002706:	2300      	movs	r3, #0
 8002708:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800270a:	2300      	movs	r3, #0
 800270c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800271c:	2b01      	cmp	r3, #1
 800271e:	d101      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x28>
 8002720:	2302      	movs	r3, #2
 8002722:	e110      	b.n	8002946 <HAL_ADC_ConfigChannel+0x24a>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff fd20 	bl	8002176 <LL_ADC_REG_IsConversionOngoing>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	f040 80f7 	bne.w	800292c <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b02      	cmp	r3, #2
 8002744:	f000 80b1 	beq.w	80028aa <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002750:	d004      	beq.n	800275c <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002756:	4a7e      	ldr	r2, [pc, #504]	; (8002950 <HAL_ADC_ConfigChannel+0x254>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d108      	bne.n	800276e <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4619      	mov	r1, r3
 8002766:	4610      	mov	r0, r2
 8002768:	f7ff fc2e 	bl	8001fc8 <LL_ADC_REG_SetSequencerChAdd>
 800276c:	e041      	b.n	80027f2 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f003 031f 	and.w	r3, r3, #31
 800277a:	210f      	movs	r1, #15
 800277c:	fa01 f303 	lsl.w	r3, r1, r3
 8002780:	43db      	mvns	r3, r3
 8002782:	401a      	ands	r2, r3
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800278c:	2b00      	cmp	r3, #0
 800278e:	d105      	bne.n	800279c <HAL_ADC_ConfigChannel+0xa0>
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	0e9b      	lsrs	r3, r3, #26
 8002796:	f003 031f 	and.w	r3, r3, #31
 800279a:	e011      	b.n	80027c0 <HAL_ADC_ConfigChannel+0xc4>
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	fa93 f3a3 	rbit	r3, r3
 80027a8:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 80027b4:	2320      	movs	r3, #32
 80027b6:	e003      	b.n	80027c0 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	fab3 f383 	clz	r3, r3
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	6839      	ldr	r1, [r7, #0]
 80027c2:	6849      	ldr	r1, [r1, #4]
 80027c4:	f001 011f 	and.w	r1, r1, #31
 80027c8:	408b      	lsls	r3, r1
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	089b      	lsrs	r3, r3, #2
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	69db      	ldr	r3, [r3, #28]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d808      	bhi.n	80027f2 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6818      	ldr	r0, [r3, #0]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	6859      	ldr	r1, [r3, #4]
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	461a      	mov	r2, r3
 80027ee:	f7ff fbca 	bl	8001f86 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6818      	ldr	r0, [r3, #0]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	6819      	ldr	r1, [r3, #0]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	461a      	mov	r2, r3
 8002800:	f7ff fc07 	bl	8002012 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	f280 8097 	bge.w	800293c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800280e:	4851      	ldr	r0, [pc, #324]	; (8002954 <HAL_ADC_ConfigChannel+0x258>)
 8002810:	f7ff fb64 	bl	8001edc <LL_ADC_GetCommonPathInternalCh>
 8002814:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a4f      	ldr	r2, [pc, #316]	; (8002958 <HAL_ADC_ConfigChannel+0x25c>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d120      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002826:	2b00      	cmp	r3, #0
 8002828:	d11b      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002830:	4619      	mov	r1, r3
 8002832:	4848      	ldr	r0, [pc, #288]	; (8002954 <HAL_ADC_ConfigChannel+0x258>)
 8002834:	f7ff fb40 	bl	8001eb8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002838:	4b48      	ldr	r3, [pc, #288]	; (800295c <HAL_ADC_ConfigChannel+0x260>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	099b      	lsrs	r3, r3, #6
 800283e:	4a48      	ldr	r2, [pc, #288]	; (8002960 <HAL_ADC_ConfigChannel+0x264>)
 8002840:	fba2 2303 	umull	r2, r3, r2, r3
 8002844:	099b      	lsrs	r3, r3, #6
 8002846:	1c5a      	adds	r2, r3, #1
 8002848:	4613      	mov	r3, r2
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	4413      	add	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002852:	e002      	b.n	800285a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	3b01      	subs	r3, #1
 8002858:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1f9      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002860:	e06c      	b.n	800293c <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a3f      	ldr	r2, [pc, #252]	; (8002964 <HAL_ADC_ConfigChannel+0x268>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d10c      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d107      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800287c:	4619      	mov	r1, r3
 800287e:	4835      	ldr	r0, [pc, #212]	; (8002954 <HAL_ADC_ConfigChannel+0x258>)
 8002880:	f7ff fb1a 	bl	8001eb8 <LL_ADC_SetCommonPathInternalCh>
 8002884:	e05a      	b.n	800293c <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a37      	ldr	r2, [pc, #220]	; (8002968 <HAL_ADC_ConfigChannel+0x26c>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d155      	bne.n	800293c <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002896:	2b00      	cmp	r3, #0
 8002898:	d150      	bne.n	800293c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028a0:	4619      	mov	r1, r3
 80028a2:	482c      	ldr	r0, [pc, #176]	; (8002954 <HAL_ADC_ConfigChannel+0x258>)
 80028a4:	f7ff fb08 	bl	8001eb8 <LL_ADC_SetCommonPathInternalCh>
 80028a8:	e048      	b.n	800293c <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028b2:	d004      	beq.n	80028be <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80028b8:	4a25      	ldr	r2, [pc, #148]	; (8002950 <HAL_ADC_ConfigChannel+0x254>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d107      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4619      	mov	r1, r3
 80028c8:	4610      	mov	r0, r2
 80028ca:	f7ff fb8f 	bl	8001fec <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	da32      	bge.n	800293c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028d6:	481f      	ldr	r0, [pc, #124]	; (8002954 <HAL_ADC_ConfigChannel+0x258>)
 80028d8:	f7ff fb00 	bl	8001edc <LL_ADC_GetCommonPathInternalCh>
 80028dc:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a1d      	ldr	r2, [pc, #116]	; (8002958 <HAL_ADC_ConfigChannel+0x25c>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d107      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80028ee:	4619      	mov	r1, r3
 80028f0:	4818      	ldr	r0, [pc, #96]	; (8002954 <HAL_ADC_ConfigChannel+0x258>)
 80028f2:	f7ff fae1 	bl	8001eb8 <LL_ADC_SetCommonPathInternalCh>
 80028f6:	e021      	b.n	800293c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a19      	ldr	r2, [pc, #100]	; (8002964 <HAL_ADC_ConfigChannel+0x268>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d107      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002908:	4619      	mov	r1, r3
 800290a:	4812      	ldr	r0, [pc, #72]	; (8002954 <HAL_ADC_ConfigChannel+0x258>)
 800290c:	f7ff fad4 	bl	8001eb8 <LL_ADC_SetCommonPathInternalCh>
 8002910:	e014      	b.n	800293c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a14      	ldr	r2, [pc, #80]	; (8002968 <HAL_ADC_ConfigChannel+0x26c>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d10f      	bne.n	800293c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002922:	4619      	mov	r1, r3
 8002924:	480b      	ldr	r0, [pc, #44]	; (8002954 <HAL_ADC_ConfigChannel+0x258>)
 8002926:	f7ff fac7 	bl	8001eb8 <LL_ADC_SetCommonPathInternalCh>
 800292a:	e007      	b.n	800293c <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002930:	f043 0220 	orr.w	r2, r3, #32
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8002944:	7ffb      	ldrb	r3, [r7, #31]
}
 8002946:	4618      	mov	r0, r3
 8002948:	3720      	adds	r7, #32
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	80000004 	.word	0x80000004
 8002954:	40012708 	.word	0x40012708
 8002958:	b0001000 	.word	0xb0001000
 800295c:	20000000 	.word	0x20000000
 8002960:	053e2d63 	.word	0x053e2d63
 8002964:	b8004000 	.word	0xb8004000
 8002968:	b4002000 	.word	0xb4002000

0800296c <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002978:	4618      	mov	r0, r3
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	bc80      	pop	{r7}
 8002980:	4770      	bx	lr

08002982 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b084      	sub	sp, #16
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff fbf1 	bl	8002176 <LL_ADC_REG_IsConversionOngoing>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d033      	beq.n	8002a02 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff fbb1 	bl	8002106 <LL_ADC_IsDisableOngoing>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d104      	bne.n	80029b4 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff fbce 	bl	8002150 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80029b4:	f7ff fa58 	bl	8001e68 <HAL_GetTick>
 80029b8:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80029ba:	e01b      	b.n	80029f4 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80029bc:	f7ff fa54 	bl	8001e68 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d914      	bls.n	80029f4 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00d      	beq.n	80029f4 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029dc:	f043 0210 	orr.w	r2, r3, #16
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e8:	f043 0201 	orr.w	r2, r3, #1
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e007      	b.n	8002a04 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 0304 	and.w	r3, r3, #4
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1dc      	bne.n	80029bc <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff fb60 	bl	80020e2 <LL_ADC_IsEnabled>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d169      	bne.n	8002afc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689a      	ldr	r2, [r3, #8]
 8002a2e:	4b36      	ldr	r3, [pc, #216]	; (8002b08 <ADC_Enable+0xfc>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00d      	beq.n	8002a52 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3a:	f043 0210 	orr.w	r2, r3, #16
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a46:	f043 0201 	orr.w	r2, r3, #1
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e055      	b.n	8002afe <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff fb1d 	bl	8002096 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8002a5c:	482b      	ldr	r0, [pc, #172]	; (8002b0c <ADC_Enable+0x100>)
 8002a5e:	f7ff fa3d 	bl	8001edc <LL_ADC_GetCommonPathInternalCh>
 8002a62:	4603      	mov	r3, r0
 8002a64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00f      	beq.n	8002a8c <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a6c:	4b28      	ldr	r3, [pc, #160]	; (8002b10 <ADC_Enable+0x104>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	099b      	lsrs	r3, r3, #6
 8002a72:	4a28      	ldr	r2, [pc, #160]	; (8002b14 <ADC_Enable+0x108>)
 8002a74:	fba2 2303 	umull	r2, r3, r2, r3
 8002a78:	099b      	lsrs	r3, r3, #6
 8002a7a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8002a7c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a7e:	e002      	b.n	8002a86 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1f9      	bne.n	8002a80 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	7e5b      	ldrb	r3, [r3, #25]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d033      	beq.n	8002afc <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002a94:	f7ff f9e8 	bl	8001e68 <HAL_GetTick>
 8002a98:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a9a:	e028      	b.n	8002aee <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff fb1e 	bl	80020e2 <LL_ADC_IsEnabled>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d104      	bne.n	8002ab6 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff faf0 	bl	8002096 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ab6:	f7ff f9d7 	bl	8001e68 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d914      	bls.n	8002aee <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d00d      	beq.n	8002aee <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad6:	f043 0210 	orr.w	r2, r3, #16
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae2:	f043 0201 	orr.w	r2, r3, #1
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e007      	b.n	8002afe <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d1cf      	bne.n	8002a9c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	80000017 	.word	0x80000017
 8002b0c:	40012708 	.word	0x40012708
 8002b10:	20000000 	.word	0x20000000
 8002b14:	053e2d63 	.word	0x053e2d63

08002b18 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff faee 	bl	8002106 <LL_ADC_IsDisableOngoing>
 8002b2a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff fad6 	bl	80020e2 <LL_ADC_IsEnabled>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d047      	beq.n	8002bcc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d144      	bne.n	8002bcc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 0305 	and.w	r3, r3, #5
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d10c      	bne.n	8002b6a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff fab1 	bl	80020bc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2203      	movs	r2, #3
 8002b60:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b62:	f7ff f981 	bl	8001e68 <HAL_GetTick>
 8002b66:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b68:	e029      	b.n	8002bbe <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6e:	f043 0210 	orr.w	r2, r3, #16
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7a:	f043 0201 	orr.w	r2, r3, #1
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e023      	b.n	8002bce <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b86:	f7ff f96f 	bl	8001e68 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d914      	bls.n	8002bbe <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00d      	beq.n	8002bbe <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba6:	f043 0210 	orr.w	r2, r3, #16
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb2:	f043 0201 	orr.w	r2, r3, #1
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e007      	b.n	8002bce <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1dc      	bne.n	8002b86 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <LL_ADC_SetCalibrationFactor>:
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
 8002bde:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002be6:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr

08002bfe <LL_ADC_GetCalibrationFactor>:
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr

08002c1a <LL_ADC_Enable>:
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c2a:	f023 0317 	bic.w	r3, r3, #23
 8002c2e:	f043 0201 	orr.w	r2, r3, #1
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	609a      	str	r2, [r3, #8]
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr

08002c40 <LL_ADC_Disable>:
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c50:	f023 0317 	bic.w	r3, r3, #23
 8002c54:	f043 0202 	orr.w	r2, r3, #2
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	609a      	str	r2, [r3, #8]
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc80      	pop	{r7}
 8002c64:	4770      	bx	lr

08002c66 <LL_ADC_IsEnabled>:
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d101      	bne.n	8002c7e <LL_ADC_IsEnabled+0x18>
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e000      	b.n	8002c80 <LL_ADC_IsEnabled+0x1a>
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bc80      	pop	{r7}
 8002c88:	4770      	bx	lr

08002c8a <LL_ADC_StartCalibration>:
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c9a:	f023 0317 	bic.w	r3, r3, #23
 8002c9e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	609a      	str	r2, [r3, #8]
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr

08002cb0 <LL_ADC_IsCalibrationOnGoing>:
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002cc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cc4:	d101      	bne.n	8002cca <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bc80      	pop	{r7}
 8002cd4:	4770      	bx	lr

08002cd6 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b088      	sub	sp, #32
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d101      	bne.n	8002cf4 <HAL_ADCEx_Calibration_Start+0x1e>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	e0b9      	b.n	8002e68 <HAL_ADCEx_Calibration_Start+0x192>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f7ff ff0b 	bl	8002b18 <ADC_Disable>
 8002d02:	4603      	mov	r3, r0
 8002d04:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff ffab 	bl	8002c66 <LL_ADC_IsEnabled>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f040 809d 	bne.w	8002e52 <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d1c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d20:	f043 0202 	orr.w	r2, r3, #2
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68da      	ldr	r2, [r3, #12]
 8002d2e:	f248 0303 	movw	r3, #32771	; 0x8003
 8002d32:	4013      	ands	r3, r2
 8002d34:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6812      	ldr	r2, [r2, #0]
 8002d40:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002d44:	f023 0303 	bic.w	r3, r3, #3
 8002d48:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61fb      	str	r3, [r7, #28]
 8002d4e:	e02e      	b.n	8002dae <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff ff98 	bl	8002c8a <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002d5a:	e014      	b.n	8002d86 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8002d68:	d30d      	bcc.n	8002d86 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6e:	f023 0312 	bic.w	r3, r3, #18
 8002d72:	f043 0210 	orr.w	r2, r3, #16
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e070      	b.n	8002e68 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff ff90 	bl	8002cb0 <LL_ADC_IsCalibrationOnGoing>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1e2      	bne.n	8002d5c <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff ff2f 	bl	8002bfe <LL_ADC_GetCalibrationFactor>
 8002da0:	4602      	mov	r2, r0
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	4413      	add	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	3301      	adds	r3, #1
 8002dac:	61fb      	str	r3, [r7, #28]
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	2b07      	cmp	r3, #7
 8002db2:	d9cd      	bls.n	8002d50 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dbc:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff ff29 	bl	8002c1a <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	69b9      	ldr	r1, [r7, #24]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff ff01 	bl	8002bd6 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff ff31 	bl	8002c40 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002dde:	f7ff f843 	bl	8001e68 <HAL_GetTick>
 8002de2:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002de4:	e01c      	b.n	8002e20 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002de6:	f7ff f83f 	bl	8001e68 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d915      	bls.n	8002e20 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff ff34 	bl	8002c66 <LL_ADC_IsEnabled>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00d      	beq.n	8002e20 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e08:	f043 0210 	orr.w	r2, r3, #16
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e14:	f043 0201 	orr.w	r2, r3, #1
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e023      	b.n	8002e68 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff ff1e 	bl	8002c66 <LL_ADC_IsEnabled>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1da      	bne.n	8002de6 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68d9      	ldr	r1, [r3, #12]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e44:	f023 0303 	bic.w	r3, r3, #3
 8002e48:	f043 0201 	orr.w	r2, r3, #1
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	659a      	str	r2, [r3, #88]	; 0x58
 8002e50:	e005      	b.n	8002e5e <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e56:	f043 0210 	orr.w	r2, r3, #16
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8002e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3720      	adds	r7, #32
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e80:	4b0c      	ldr	r3, [pc, #48]	; (8002eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ea2:	4a04      	ldr	r2, [pc, #16]	; (8002eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	60d3      	str	r3, [r2, #12]
}
 8002ea8:	bf00      	nop
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bc80      	pop	{r7}
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	e000ed00 	.word	0xe000ed00

08002eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ebc:	4b04      	ldr	r3, [pc, #16]	; (8002ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	0a1b      	lsrs	r3, r3, #8
 8002ec2:	f003 0307 	and.w	r3, r3, #7
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bc80      	pop	{r7}
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	e000ed00 	.word	0xe000ed00

08002ed4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	db0b      	blt.n	8002efe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ee6:	79fb      	ldrb	r3, [r7, #7]
 8002ee8:	f003 021f 	and.w	r2, r3, #31
 8002eec:	4906      	ldr	r1, [pc, #24]	; (8002f08 <__NVIC_EnableIRQ+0x34>)
 8002eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef2:	095b      	lsrs	r3, r3, #5
 8002ef4:	2001      	movs	r0, #1
 8002ef6:	fa00 f202 	lsl.w	r2, r0, r2
 8002efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr
 8002f08:	e000e100 	.word	0xe000e100

08002f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	6039      	str	r1, [r7, #0]
 8002f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	db0a      	blt.n	8002f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	490c      	ldr	r1, [pc, #48]	; (8002f58 <__NVIC_SetPriority+0x4c>)
 8002f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2a:	0112      	lsls	r2, r2, #4
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	440b      	add	r3, r1
 8002f30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f34:	e00a      	b.n	8002f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	4908      	ldr	r1, [pc, #32]	; (8002f5c <__NVIC_SetPriority+0x50>)
 8002f3c:	79fb      	ldrb	r3, [r7, #7]
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	3b04      	subs	r3, #4
 8002f44:	0112      	lsls	r2, r2, #4
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	440b      	add	r3, r1
 8002f4a:	761a      	strb	r2, [r3, #24]
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bc80      	pop	{r7}
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	e000e100 	.word	0xe000e100
 8002f5c:	e000ed00 	.word	0xe000ed00

08002f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b089      	sub	sp, #36	; 0x24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	f1c3 0307 	rsb	r3, r3, #7
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	bf28      	it	cs
 8002f7e:	2304      	movcs	r3, #4
 8002f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	3304      	adds	r3, #4
 8002f86:	2b06      	cmp	r3, #6
 8002f88:	d902      	bls.n	8002f90 <NVIC_EncodePriority+0x30>
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	3b03      	subs	r3, #3
 8002f8e:	e000      	b.n	8002f92 <NVIC_EncodePriority+0x32>
 8002f90:	2300      	movs	r3, #0
 8002f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	43da      	mvns	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	401a      	ands	r2, r3
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fa8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb2:	43d9      	mvns	r1, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb8:	4313      	orrs	r3, r2
         );
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3724      	adds	r7, #36	; 0x24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f7ff ff4f 	bl	8002e70 <__NVIC_SetPriorityGrouping>
}
 8002fd2:	bf00      	nop
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b086      	sub	sp, #24
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	60b9      	str	r1, [r7, #8]
 8002fe4:	607a      	str	r2, [r7, #4]
 8002fe6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002fe8:	f7ff ff66 	bl	8002eb8 <__NVIC_GetPriorityGrouping>
 8002fec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	68b9      	ldr	r1, [r7, #8]
 8002ff2:	6978      	ldr	r0, [r7, #20]
 8002ff4:	f7ff ffb4 	bl	8002f60 <NVIC_EncodePriority>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ffe:	4611      	mov	r1, r2
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff ff83 	bl	8002f0c <__NVIC_SetPriority>
}
 8003006:	bf00      	nop
 8003008:	3718      	adds	r7, #24
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b082      	sub	sp, #8
 8003012:	af00      	add	r7, sp, #0
 8003014:	4603      	mov	r3, r0
 8003016:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff ff59 	bl	8002ed4 <__NVIC_EnableIRQ>
}
 8003022:	bf00      	nop
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800302a:	b480      	push	{r7}
 800302c:	b083      	sub	sp, #12
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e04f      	b.n	80030dc <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d008      	beq.n	800305a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2204      	movs	r2, #4
 800304c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e040      	b.n	80030dc <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 020e 	bic.w	r2, r2, #14
 8003068:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003074:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003078:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 0201 	bic.w	r2, r2, #1
 8003088:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308e:	f003 021c 	and.w	r2, r3, #28
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	2101      	movs	r1, #1
 8003098:	fa01 f202 	lsl.w	r2, r1, r2
 800309c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80030a6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00c      	beq.n	80030ca <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030be:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80030c8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr

080030e6 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b084      	sub	sp, #16
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030ee:	2300      	movs	r3, #0
 80030f0:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d005      	beq.n	800310a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2204      	movs	r2, #4
 8003102:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	73fb      	strb	r3, [r7, #15]
 8003108:	e047      	b.n	800319a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 020e 	bic.w	r2, r2, #14
 8003118:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 0201 	bic.w	r2, r2, #1
 8003128:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003134:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003138:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313e:	f003 021c 	and.w	r2, r3, #28
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	2101      	movs	r1, #1
 8003148:	fa01 f202 	lsl.w	r2, r1, r2
 800314c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003156:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00c      	beq.n	800317a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800316e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003178:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	4798      	blx	r3
    }
  }
  return status;
 800319a:	7bfb      	ldrb	r3, [r7, #15]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b087      	sub	sp, #28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031ae:	2300      	movs	r3, #0
 80031b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031b2:	e140      	b.n	8003436 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	2101      	movs	r1, #1
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	fa01 f303 	lsl.w	r3, r1, r3
 80031c0:	4013      	ands	r3, r2
 80031c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 8132 	beq.w	8003430 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 0303 	and.w	r3, r3, #3
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d005      	beq.n	80031e4 <HAL_GPIO_Init+0x40>
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 0303 	and.w	r3, r3, #3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d130      	bne.n	8003246 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	2203      	movs	r2, #3
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	43db      	mvns	r3, r3
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	4013      	ands	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	68da      	ldr	r2, [r3, #12]
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	4313      	orrs	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800321a:	2201      	movs	r2, #1
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	43db      	mvns	r3, r3
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	4013      	ands	r3, r2
 8003228:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	091b      	lsrs	r3, r3, #4
 8003230:	f003 0201 	and.w	r2, r3, #1
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	4313      	orrs	r3, r2
 800323e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f003 0303 	and.w	r3, r3, #3
 800324e:	2b03      	cmp	r3, #3
 8003250:	d017      	beq.n	8003282 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	2203      	movs	r2, #3
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	43db      	mvns	r3, r3
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	4013      	ands	r3, r2
 8003268:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	4313      	orrs	r3, r2
 800327a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d123      	bne.n	80032d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	08da      	lsrs	r2, r3, #3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	3208      	adds	r2, #8
 8003296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800329a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	220f      	movs	r2, #15
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	43db      	mvns	r3, r3
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	4013      	ands	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	691a      	ldr	r2, [r3, #16]
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f003 0307 	and.w	r3, r3, #7
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	08da      	lsrs	r2, r3, #3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3208      	adds	r2, #8
 80032d0:	6939      	ldr	r1, [r7, #16]
 80032d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	2203      	movs	r2, #3
 80032e2:	fa02 f303 	lsl.w	r3, r2, r3
 80032e6:	43db      	mvns	r3, r3
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	4013      	ands	r3, r2
 80032ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f003 0203 	and.w	r2, r3, #3
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	4313      	orrs	r3, r2
 8003302:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 808c 	beq.w	8003430 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003318:	4a4e      	ldr	r2, [pc, #312]	; (8003454 <HAL_GPIO_Init+0x2b0>)
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	089b      	lsrs	r3, r3, #2
 800331e:	3302      	adds	r3, #2
 8003320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003324:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	f003 0303 	and.w	r3, r3, #3
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	2207      	movs	r2, #7
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	43db      	mvns	r3, r3
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4013      	ands	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003342:	d00d      	beq.n	8003360 <HAL_GPIO_Init+0x1bc>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a44      	ldr	r2, [pc, #272]	; (8003458 <HAL_GPIO_Init+0x2b4>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d007      	beq.n	800335c <HAL_GPIO_Init+0x1b8>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a43      	ldr	r2, [pc, #268]	; (800345c <HAL_GPIO_Init+0x2b8>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d101      	bne.n	8003358 <HAL_GPIO_Init+0x1b4>
 8003354:	2302      	movs	r3, #2
 8003356:	e004      	b.n	8003362 <HAL_GPIO_Init+0x1be>
 8003358:	2307      	movs	r3, #7
 800335a:	e002      	b.n	8003362 <HAL_GPIO_Init+0x1be>
 800335c:	2301      	movs	r3, #1
 800335e:	e000      	b.n	8003362 <HAL_GPIO_Init+0x1be>
 8003360:	2300      	movs	r3, #0
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	f002 0203 	and.w	r2, r2, #3
 8003368:	0092      	lsls	r2, r2, #2
 800336a:	4093      	lsls	r3, r2
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	4313      	orrs	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003372:	4938      	ldr	r1, [pc, #224]	; (8003454 <HAL_GPIO_Init+0x2b0>)
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	089b      	lsrs	r3, r3, #2
 8003378:	3302      	adds	r3, #2
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003380:	4b37      	ldr	r3, [pc, #220]	; (8003460 <HAL_GPIO_Init+0x2bc>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	43db      	mvns	r3, r3
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	4013      	ands	r3, r2
 800338e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d003      	beq.n	80033a4 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80033a4:	4a2e      	ldr	r2, [pc, #184]	; (8003460 <HAL_GPIO_Init+0x2bc>)
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80033aa:	4b2d      	ldr	r3, [pc, #180]	; (8003460 <HAL_GPIO_Init+0x2bc>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	43db      	mvns	r3, r3
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	4013      	ands	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80033ce:	4a24      	ldr	r2, [pc, #144]	; (8003460 <HAL_GPIO_Init+0x2bc>)
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80033d4:	4b22      	ldr	r3, [pc, #136]	; (8003460 <HAL_GPIO_Init+0x2bc>)
 80033d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033da:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	43db      	mvns	r3, r3
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	4013      	ands	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80033fa:	4a19      	ldr	r2, [pc, #100]	; (8003460 <HAL_GPIO_Init+0x2bc>)
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8003402:	4b17      	ldr	r3, [pc, #92]	; (8003460 <HAL_GPIO_Init+0x2bc>)
 8003404:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003408:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	43db      	mvns	r3, r3
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	4013      	ands	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d003      	beq.n	8003428 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	4313      	orrs	r3, r2
 8003426:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8003428:	4a0d      	ldr	r2, [pc, #52]	; (8003460 <HAL_GPIO_Init+0x2bc>)
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	3301      	adds	r3, #1
 8003434:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	fa22 f303 	lsr.w	r3, r2, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	f47f aeb7 	bne.w	80031b4 <HAL_GPIO_Init+0x10>
  }
}
 8003446:	bf00      	nop
 8003448:	bf00      	nop
 800344a:	371c      	adds	r7, #28
 800344c:	46bd      	mov	sp, r7
 800344e:	bc80      	pop	{r7}
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	40010000 	.word	0x40010000
 8003458:	48000400 	.word	0x48000400
 800345c:	48000800 	.word	0x48000800
 8003460:	58000800 	.word	0x58000800

08003464 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	460b      	mov	r3, r1
 800346e:	807b      	strh	r3, [r7, #2]
 8003470:	4613      	mov	r3, r2
 8003472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003474:	787b      	ldrb	r3, [r7, #1]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800347a:	887a      	ldrh	r2, [r7, #2]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003480:	e002      	b.n	8003488 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003482:	887a      	ldrh	r2, [r7, #2]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	bc80      	pop	{r7}
 8003490:	4770      	bx	lr

08003492 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b082      	sub	sp, #8
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e081      	b.n	80035a8 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d106      	bne.n	80034be <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f7fe f999 	bl	80017f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2224      	movs	r2, #36	; 0x24
 80034c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0201 	bic.w	r2, r2, #1
 80034d4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034e2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034f2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d107      	bne.n	800350c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003508:	609a      	str	r2, [r3, #8]
 800350a:	e006      	b.n	800351a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003518:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	2b02      	cmp	r3, #2
 8003520:	d104      	bne.n	800352c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800352a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	6812      	ldr	r2, [r2, #0]
 8003536:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800353a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800353e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68da      	ldr	r2, [r3, #12]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800354e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	691a      	ldr	r2, [r3, #16]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69d9      	ldr	r1, [r3, #28]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1a      	ldr	r2, [r3, #32]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	430a      	orrs	r2, r1
 8003578:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f042 0201 	orr.w	r2, r2, #1
 8003588:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2220      	movs	r2, #32
 8003594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b20      	cmp	r3, #32
 80035c4:	d138      	bne.n	8003638 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d101      	bne.n	80035d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80035d0:	2302      	movs	r3, #2
 80035d2:	e032      	b.n	800363a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2224      	movs	r2, #36	; 0x24
 80035e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 0201 	bic.w	r2, r2, #1
 80035f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003602:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6819      	ldr	r1, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0201 	orr.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2220      	movs	r2, #32
 8003628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003634:	2300      	movs	r3, #0
 8003636:	e000      	b.n	800363a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003638:	2302      	movs	r3, #2
  }
}
 800363a:	4618      	mov	r0, r3
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	bc80      	pop	{r7}
 8003642:	4770      	bx	lr

08003644 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b20      	cmp	r3, #32
 8003658:	d139      	bne.n	80036ce <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003660:	2b01      	cmp	r3, #1
 8003662:	d101      	bne.n	8003668 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003664:	2302      	movs	r3, #2
 8003666:	e033      	b.n	80036d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2224      	movs	r2, #36	; 0x24
 8003674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0201 	bic.w	r2, r2, #1
 8003686:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003696:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	021b      	lsls	r3, r3, #8
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	4313      	orrs	r3, r2
 80036a0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f042 0201 	orr.w	r2, r2, #1
 80036b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2220      	movs	r2, #32
 80036be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036ca:	2300      	movs	r3, #0
 80036cc:	e000      	b.n	80036d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80036ce:	2302      	movs	r3, #2
  }
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bc80      	pop	{r7}
 80036d8:	4770      	bx	lr
	...

080036dc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036e0:	4b04      	ldr	r3, [pc, #16]	; (80036f4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a03      	ldr	r2, [pc, #12]	; (80036f4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80036e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ea:	6013      	str	r3, [r2, #0]
}
 80036ec:	bf00      	nop
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bc80      	pop	{r7}
 80036f2:	4770      	bx	lr
 80036f4:	58000400 	.word	0x58000400

080036f8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80036fc:	4b03      	ldr	r3, [pc, #12]	; (800370c <HAL_PWREx_GetVoltageRange+0x14>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003704:	4618      	mov	r0, r3
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr
 800370c:	58000400 	.word	0x58000400

08003710 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8003714:	4b06      	ldr	r3, [pc, #24]	; (8003730 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003720:	d101      	bne.n	8003726 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8003722:	2301      	movs	r3, #1
 8003724:	e000      	b.n	8003728 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	46bd      	mov	sp, r7
 800372c:	bc80      	pop	{r7}
 800372e:	4770      	bx	lr
 8003730:	58000400 	.word	0x58000400

08003734 <LL_RCC_HSE_EnableTcxo>:
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003742:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003746:	6013      	str	r3, [r2, #0]
}
 8003748:	bf00      	nop
 800374a:	46bd      	mov	sp, r7
 800374c:	bc80      	pop	{r7}
 800374e:	4770      	bx	lr

08003750 <LL_RCC_HSE_DisableTcxo>:
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800375e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003762:	6013      	str	r3, [r2, #0]
}
 8003764:	bf00      	nop
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr

0800376c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800377a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800377e:	d101      	bne.n	8003784 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003780:	2301      	movs	r3, #1
 8003782:	e000      	b.n	8003786 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	46bd      	mov	sp, r7
 800378a:	bc80      	pop	{r7}
 800378c:	4770      	bx	lr

0800378e <LL_RCC_HSE_Enable>:
{
 800378e:	b480      	push	{r7}
 8003790:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800379c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a0:	6013      	str	r3, [r2, #0]
}
 80037a2:	bf00      	nop
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bc80      	pop	{r7}
 80037a8:	4770      	bx	lr

080037aa <LL_RCC_HSE_Disable>:
{
 80037aa:	b480      	push	{r7}
 80037ac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80037ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037bc:	6013      	str	r3, [r2, #0]
}
 80037be:	bf00      	nop
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bc80      	pop	{r7}
 80037c4:	4770      	bx	lr

080037c6 <LL_RCC_HSE_IsReady>:
{
 80037c6:	b480      	push	{r7}
 80037c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80037ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037d8:	d101      	bne.n	80037de <LL_RCC_HSE_IsReady+0x18>
 80037da:	2301      	movs	r3, #1
 80037dc:	e000      	b.n	80037e0 <LL_RCC_HSE_IsReady+0x1a>
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bc80      	pop	{r7}
 80037e6:	4770      	bx	lr

080037e8 <LL_RCC_HSI_Enable>:
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80037ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037fa:	6013      	str	r3, [r2, #0]
}
 80037fc:	bf00      	nop
 80037fe:	46bd      	mov	sp, r7
 8003800:	bc80      	pop	{r7}
 8003802:	4770      	bx	lr

08003804 <LL_RCC_HSI_Disable>:
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003812:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003816:	6013      	str	r3, [r2, #0]
}
 8003818:	bf00      	nop
 800381a:	46bd      	mov	sp, r7
 800381c:	bc80      	pop	{r7}
 800381e:	4770      	bx	lr

08003820 <LL_RCC_HSI_IsReady>:
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003824:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800382e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003832:	d101      	bne.n	8003838 <LL_RCC_HSI_IsReady+0x18>
 8003834:	2301      	movs	r3, #1
 8003836:	e000      	b.n	800383a <LL_RCC_HSI_IsReady+0x1a>
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	46bd      	mov	sp, r7
 800383e:	bc80      	pop	{r7}
 8003840:	4770      	bx	lr

08003842 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800384a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	061b      	lsls	r3, r3, #24
 8003858:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800385c:	4313      	orrs	r3, r2
 800385e:	604b      	str	r3, [r1, #4]
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	bc80      	pop	{r7}
 8003868:	4770      	bx	lr

0800386a <LL_RCC_LSE_IsReady>:
{
 800386a:	b480      	push	{r7}
 800386c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800386e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b02      	cmp	r3, #2
 800387c:	d101      	bne.n	8003882 <LL_RCC_LSE_IsReady+0x18>
 800387e:	2301      	movs	r3, #1
 8003880:	e000      	b.n	8003884 <LL_RCC_LSE_IsReady+0x1a>
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	46bd      	mov	sp, r7
 8003888:	bc80      	pop	{r7}
 800388a:	4770      	bx	lr

0800388c <LL_RCC_LSI_Enable>:
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8003890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003894:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003898:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800389c:	f043 0301 	orr.w	r3, r3, #1
 80038a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80038a4:	bf00      	nop
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bc80      	pop	{r7}
 80038aa:	4770      	bx	lr

080038ac <LL_RCC_LSI_Disable>:
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80038b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038bc:	f023 0301 	bic.w	r3, r3, #1
 80038c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80038c4:	bf00      	nop
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bc80      	pop	{r7}
 80038ca:	4770      	bx	lr

080038cc <LL_RCC_LSI_IsReady>:
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80038d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d101      	bne.n	80038e4 <LL_RCC_LSI_IsReady+0x18>
 80038e0:	2301      	movs	r3, #1
 80038e2:	e000      	b.n	80038e6 <LL_RCC_LSI_IsReady+0x1a>
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bc80      	pop	{r7}
 80038ec:	4770      	bx	lr

080038ee <LL_RCC_MSI_Enable>:
{
 80038ee:	b480      	push	{r7}
 80038f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80038f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038fc:	f043 0301 	orr.w	r3, r3, #1
 8003900:	6013      	str	r3, [r2, #0]
}
 8003902:	bf00      	nop
 8003904:	46bd      	mov	sp, r7
 8003906:	bc80      	pop	{r7}
 8003908:	4770      	bx	lr

0800390a <LL_RCC_MSI_Disable>:
{
 800390a:	b480      	push	{r7}
 800390c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800390e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003918:	f023 0301 	bic.w	r3, r3, #1
 800391c:	6013      	str	r3, [r2, #0]
}
 800391e:	bf00      	nop
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr

08003926 <LL_RCC_MSI_IsReady>:
{
 8003926:	b480      	push	{r7}
 8003928:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800392a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b02      	cmp	r3, #2
 8003936:	d101      	bne.n	800393c <LL_RCC_MSI_IsReady+0x16>
 8003938:	2301      	movs	r3, #1
 800393a:	e000      	b.n	800393e <LL_RCC_MSI_IsReady+0x18>
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	46bd      	mov	sp, r7
 8003942:	bc80      	pop	{r7}
 8003944:	4770      	bx	lr

08003946 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8003946:	b480      	push	{r7}
 8003948:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800394a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	2b08      	cmp	r3, #8
 8003956:	d101      	bne.n	800395c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8003958:	2301      	movs	r3, #1
 800395a:	e000      	b.n	800395e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	46bd      	mov	sp, r7
 8003962:	bc80      	pop	{r7}
 8003964:	4770      	bx	lr

08003966 <LL_RCC_MSI_GetRange>:
{
 8003966:	b480      	push	{r7}
 8003968:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800396a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003974:	4618      	mov	r0, r3
 8003976:	46bd      	mov	sp, r7
 8003978:	bc80      	pop	{r7}
 800397a:	4770      	bx	lr

0800397c <LL_RCC_MSI_GetRangeAfterStandby>:
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003984:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003988:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800398c:	4618      	mov	r0, r3
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr

08003994 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800399c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	021b      	lsls	r3, r3, #8
 80039aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039ae:	4313      	orrs	r3, r2
 80039b0:	604b      	str	r3, [r1, #4]
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bc80      	pop	{r7}
 80039ba:	4770      	bx	lr

080039bc <LL_RCC_SetSysClkSource>:
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80039c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f023 0203 	bic.w	r2, r3, #3
 80039ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	608b      	str	r3, [r1, #8]
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	bc80      	pop	{r7}
 80039e0:	4770      	bx	lr

080039e2 <LL_RCC_GetSysClkSource>:
{
 80039e2:	b480      	push	{r7}
 80039e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80039e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 030c 	and.w	r3, r3, #12
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr

080039f8 <LL_RCC_SetAHBPrescaler>:
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	608b      	str	r3, [r1, #8]
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bc80      	pop	{r7}
 8003a1c:	4770      	bx	lr

08003a1e <LL_RCC_SetAHB3Prescaler>:
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a2a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003a2e:	f023 020f 	bic.w	r2, r3, #15
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	091b      	lsrs	r3, r3, #4
 8003a36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bc80      	pop	{r7}
 8003a48:	4770      	bx	lr

08003a4a <LL_RCC_SetAPB1Prescaler>:
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	608b      	str	r3, [r1, #8]
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bc80      	pop	{r7}
 8003a6e:	4770      	bx	lr

08003a70 <LL_RCC_SetAPB2Prescaler>:
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	608b      	str	r3, [r1, #8]
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bc80      	pop	{r7}
 8003a94:	4770      	bx	lr

08003a96 <LL_RCC_GetAHBPrescaler>:
{
 8003a96:	b480      	push	{r7}
 8003a98:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr

08003aac <LL_RCC_GetAHB3Prescaler>:
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ab4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bc80      	pop	{r7}
 8003ac4:	4770      	bx	lr

08003ac6 <LL_RCC_GetAPB1Prescaler>:
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bc80      	pop	{r7}
 8003ada:	4770      	bx	lr

08003adc <LL_RCC_GetAPB2Prescaler>:
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bc80      	pop	{r7}
 8003af0:	4770      	bx	lr

08003af2 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003af2:	b480      	push	{r7}
 8003af4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003af6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b04:	6013      	str	r3, [r2, #0]
}
 8003b06:	bf00      	nop
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bc80      	pop	{r7}
 8003b0c:	4770      	bx	lr

08003b0e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b20:	6013      	str	r3, [r2, #0]
}
 8003b22:	bf00      	nop
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc80      	pop	{r7}
 8003b28:	4770      	bx	lr

08003b2a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b3c:	d101      	bne.n	8003b42 <LL_RCC_PLL_IsReady+0x18>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <LL_RCC_PLL_IsReady+0x1a>
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bc80      	pop	{r7}
 8003b4a:	4770      	bx	lr

08003b4c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	0a1b      	lsrs	r3, r3, #8
 8003b58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr

08003b64 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bc80      	pop	{r7}
 8003b78:	4770      	bx	lr

08003b7a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bc80      	pop	{r7}
 8003b8e:	4770      	bx	lr

08003b90 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	f003 0303 	and.w	r3, r3, #3
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bc80      	pop	{r7}
 8003ba4:	4770      	bx	lr

08003ba6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb8:	d101      	bne.n	8003bbe <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bc80      	pop	{r7}
 8003bc6:	4770      	bx	lr

08003bc8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bd0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003bd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bdc:	d101      	bne.n	8003be2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003bde:	2301      	movs	r3, #1
 8003be0:	e000      	b.n	8003be4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bc80      	pop	{r7}
 8003bea:	4770      	bx	lr

08003bec <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bfe:	d101      	bne.n	8003c04 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003c00:	2301      	movs	r3, #1
 8003c02:	e000      	b.n	8003c06 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bc80      	pop	{r7}
 8003c0c:	4770      	bx	lr

08003c0e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c20:	d101      	bne.n	8003c26 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003c22:	2301      	movs	r3, #1
 8003c24:	e000      	b.n	8003c28 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bc80      	pop	{r7}
 8003c2e:	4770      	bx	lr

08003c30 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b088      	sub	sp, #32
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e36f      	b.n	8004322 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c42:	f7ff fece 	bl	80039e2 <LL_RCC_GetSysClkSource>
 8003c46:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c48:	f7ff ffa2 	bl	8003b90 <LL_RCC_PLL_GetMainSource>
 8003c4c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0320 	and.w	r3, r3, #32
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f000 80c4 	beq.w	8003de4 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d005      	beq.n	8003c6e <HAL_RCC_OscConfig+0x3e>
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	2b0c      	cmp	r3, #12
 8003c66:	d176      	bne.n	8003d56 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d173      	bne.n	8003d56 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e353      	b.n	8004322 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0308 	and.w	r3, r3, #8
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d005      	beq.n	8003c98 <HAL_RCC_OscConfig+0x68>
 8003c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c96:	e006      	b.n	8003ca6 <HAL_RCC_OscConfig+0x76>
 8003c98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ca0:	091b      	lsrs	r3, r3, #4
 8003ca2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d222      	bcs.n	8003cf0 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 fd7a 	bl	80047a8 <RCC_SetFlashLatencyFromMSIRange>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e331      	b.n	8004322 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cc8:	f043 0308 	orr.w	r3, r3, #8
 8003ccc:	6013      	str	r3, [r2, #0]
 8003cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff fe53 	bl	8003994 <LL_RCC_MSI_SetCalibTrimming>
 8003cee:	e021      	b.n	8003d34 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cfa:	f043 0308 	orr.w	r3, r3, #8
 8003cfe:	6013      	str	r3, [r2, #0]
 8003d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d12:	4313      	orrs	r3, r2
 8003d14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff fe3a 	bl	8003994 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 fd3f 	bl	80047a8 <RCC_SetFlashLatencyFromMSIRange>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e2f6      	b.n	8004322 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003d34:	f000 fcc2 	bl	80046bc <HAL_RCC_GetHCLKFreq>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	4aa7      	ldr	r2, [pc, #668]	; (8003fd8 <HAL_RCC_OscConfig+0x3a8>)
 8003d3c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8003d3e:	4ba7      	ldr	r3, [pc, #668]	; (8003fdc <HAL_RCC_OscConfig+0x3ac>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fd fed4 	bl	8001af0 <HAL_InitTick>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8003d4c:	7cfb      	ldrb	r3, [r7, #19]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d047      	beq.n	8003de2 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8003d52:	7cfb      	ldrb	r3, [r7, #19]
 8003d54:	e2e5      	b.n	8004322 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d02c      	beq.n	8003db8 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d5e:	f7ff fdc6 	bl	80038ee <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d62:	f7fe f881 	bl	8001e68 <HAL_GetTick>
 8003d66:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003d68:	e008      	b.n	8003d7c <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d6a:	f7fe f87d 	bl	8001e68 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e2d2      	b.n	8004322 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003d7c:	f7ff fdd3 	bl	8003926 <LL_RCC_MSI_IsReady>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d0f1      	beq.n	8003d6a <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d90:	f043 0308 	orr.w	r3, r3, #8
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003da8:	4313      	orrs	r3, r2
 8003daa:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7ff fdef 	bl	8003994 <LL_RCC_MSI_SetCalibTrimming>
 8003db6:	e015      	b.n	8003de4 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003db8:	f7ff fda7 	bl	800390a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003dbc:	f7fe f854 	bl	8001e68 <HAL_GetTick>
 8003dc0:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003dc4:	f7fe f850 	bl	8001e68 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e2a5      	b.n	8004322 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003dd6:	f7ff fda6 	bl	8003926 <LL_RCC_MSI_IsReady>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1f1      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x194>
 8003de0:	e000      	b.n	8003de4 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003de2:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d058      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	2b08      	cmp	r3, #8
 8003df4:	d005      	beq.n	8003e02 <HAL_RCC_OscConfig+0x1d2>
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	2b0c      	cmp	r3, #12
 8003dfa:	d108      	bne.n	8003e0e <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	2b03      	cmp	r3, #3
 8003e00:	d105      	bne.n	8003e0e <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d14b      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e289      	b.n	8004322 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8003e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e20:	4313      	orrs	r3, r2
 8003e22:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e2c:	d102      	bne.n	8003e34 <HAL_RCC_OscConfig+0x204>
 8003e2e:	f7ff fcae 	bl	800378e <LL_RCC_HSE_Enable>
 8003e32:	e00d      	b.n	8003e50 <HAL_RCC_OscConfig+0x220>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8003e3c:	d104      	bne.n	8003e48 <HAL_RCC_OscConfig+0x218>
 8003e3e:	f7ff fc79 	bl	8003734 <LL_RCC_HSE_EnableTcxo>
 8003e42:	f7ff fca4 	bl	800378e <LL_RCC_HSE_Enable>
 8003e46:	e003      	b.n	8003e50 <HAL_RCC_OscConfig+0x220>
 8003e48:	f7ff fcaf 	bl	80037aa <LL_RCC_HSE_Disable>
 8003e4c:	f7ff fc80 	bl	8003750 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d012      	beq.n	8003e7e <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e58:	f7fe f806 	bl	8001e68 <HAL_GetTick>
 8003e5c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e60:	f7fe f802 	bl	8001e68 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b64      	cmp	r3, #100	; 0x64
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e257      	b.n	8004322 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003e72:	f7ff fca8 	bl	80037c6 <LL_RCC_HSE_IsReady>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d0f1      	beq.n	8003e60 <HAL_RCC_OscConfig+0x230>
 8003e7c:	e011      	b.n	8003ea2 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7e:	f7fd fff3 	bl	8001e68 <HAL_GetTick>
 8003e82:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e86:	f7fd ffef 	bl	8001e68 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b64      	cmp	r3, #100	; 0x64
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e244      	b.n	8004322 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003e98:	f7ff fc95 	bl	80037c6 <LL_RCC_HSE_IsReady>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1f1      	bne.n	8003e86 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d046      	beq.n	8003f3c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	2b04      	cmp	r3, #4
 8003eb2:	d005      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x290>
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	2b0c      	cmp	r3, #12
 8003eb8:	d10e      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d10b      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d101      	bne.n	8003ecc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e22a      	b.n	8004322 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7ff fcb6 	bl	8003842 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003ed6:	e031      	b.n	8003f3c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d019      	beq.n	8003f14 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ee0:	f7ff fc82 	bl	80037e8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee4:	f7fd ffc0 	bl	8001e68 <HAL_GetTick>
 8003ee8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003eea:	e008      	b.n	8003efe <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eec:	f7fd ffbc 	bl	8001e68 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e211      	b.n	8004322 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003efe:	f7ff fc8f 	bl	8003820 <LL_RCC_HSI_IsReady>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d0f1      	beq.n	8003eec <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7ff fc98 	bl	8003842 <LL_RCC_HSI_SetCalibTrimming>
 8003f12:	e013      	b.n	8003f3c <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f14:	f7ff fc76 	bl	8003804 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f18:	f7fd ffa6 	bl	8001e68 <HAL_GetTick>
 8003f1c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f20:	f7fd ffa2 	bl	8001e68 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e1f7      	b.n	8004322 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003f32:	f7ff fc75 	bl	8003820 <LL_RCC_HSI_IsReady>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1f1      	bne.n	8003f20 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0308 	and.w	r3, r3, #8
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d06e      	beq.n	8004026 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d056      	beq.n	8003ffe <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8003f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f58:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69da      	ldr	r2, [r3, #28]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f003 0310 	and.w	r3, r3, #16
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d031      	beq.n	8003fcc <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d006      	beq.n	8003f80 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e1d0      	b.n	8004322 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d013      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8003f8a:	f7ff fc8f 	bl	80038ac <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f8e:	f7fd ff6b 	bl	8001e68 <HAL_GetTick>
 8003f92:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8003f94:	e008      	b.n	8003fa8 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f96:	f7fd ff67 	bl	8001e68 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b11      	cmp	r3, #17
 8003fa2:	d901      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e1bc      	b.n	8004322 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8003fa8:	f7ff fc90 	bl	80038cc <LL_RCC_LSI_IsReady>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1f1      	bne.n	8003f96 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8003fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fba:	f023 0210 	bic.w	r2, r3, #16
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fcc:	f7ff fc5e 	bl	800388c <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fd0:	f7fd ff4a 	bl	8001e68 <HAL_GetTick>
 8003fd4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8003fd6:	e00c      	b.n	8003ff2 <HAL_RCC_OscConfig+0x3c2>
 8003fd8:	20000000 	.word	0x20000000
 8003fdc:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fe0:	f7fd ff42 	bl	8001e68 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b11      	cmp	r3, #17
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e197      	b.n	8004322 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8003ff2:	f7ff fc6b 	bl	80038cc <LL_RCC_LSI_IsReady>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0f1      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x3b0>
 8003ffc:	e013      	b.n	8004026 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ffe:	f7ff fc55 	bl	80038ac <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004002:	f7fd ff31 	bl	8001e68 <HAL_GetTick>
 8004006:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8004008:	e008      	b.n	800401c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800400a:	f7fd ff2d 	bl	8001e68 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b11      	cmp	r3, #17
 8004016:	d901      	bls.n	800401c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e182      	b.n	8004322 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 800401c:	f7ff fc56 	bl	80038cc <LL_RCC_LSI_IsReady>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1f1      	bne.n	800400a <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0304 	and.w	r3, r3, #4
 800402e:	2b00      	cmp	r3, #0
 8004030:	f000 80d8 	beq.w	80041e4 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004034:	f7ff fb6c 	bl	8003710 <LL_PWR_IsEnabledBkUpAccess>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d113      	bne.n	8004066 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800403e:	f7ff fb4d 	bl	80036dc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004042:	f7fd ff11 	bl	8001e68 <HAL_GetTick>
 8004046:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004048:	e008      	b.n	800405c <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800404a:	f7fd ff0d 	bl	8001e68 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e162      	b.n	8004322 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800405c:	f7ff fb58 	bl	8003710 <LL_PWR_IsEnabledBkUpAccess>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d0f1      	beq.n	800404a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d07b      	beq.n	8004166 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	2b85      	cmp	r3, #133	; 0x85
 8004074:	d003      	beq.n	800407e <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	2b05      	cmp	r3, #5
 800407c:	d109      	bne.n	8004092 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800407e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004086:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800408a:	f043 0304 	orr.w	r3, r3, #4
 800408e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004092:	f7fd fee9 	bl	8001e68 <HAL_GetTick>
 8004096:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800409c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040a4:	f043 0301 	orr.w	r3, r3, #1
 80040a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80040ac:	e00a      	b.n	80040c4 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ae:	f7fd fedb 	bl	8001e68 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040bc:	4293      	cmp	r3, r2
 80040be:	d901      	bls.n	80040c4 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e12e      	b.n	8004322 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80040c4:	f7ff fbd1 	bl	800386a <LL_RCC_LSE_IsReady>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0ef      	beq.n	80040ae <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	2b81      	cmp	r3, #129	; 0x81
 80040d4:	d003      	beq.n	80040de <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	2b85      	cmp	r3, #133	; 0x85
 80040dc:	d121      	bne.n	8004122 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040de:	f7fd fec3 	bl	8001e68 <HAL_GetTick>
 80040e2:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80040e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80040f8:	e00a      	b.n	8004110 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040fa:	f7fd feb5 	bl	8001e68 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	f241 3288 	movw	r2, #5000	; 0x1388
 8004108:	4293      	cmp	r3, r2
 800410a:	d901      	bls.n	8004110 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e108      	b.n	8004322 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004110:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004118:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800411c:	2b00      	cmp	r3, #0
 800411e:	d0ec      	beq.n	80040fa <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004120:	e060      	b.n	80041e4 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004122:	f7fd fea1 	bl	8001e68 <HAL_GetTick>
 8004126:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800412c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004130:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004134:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004138:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800413c:	e00a      	b.n	8004154 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800413e:	f7fd fe93 	bl	8001e68 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	f241 3288 	movw	r2, #5000	; 0x1388
 800414c:	4293      	cmp	r3, r2
 800414e:	d901      	bls.n	8004154 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e0e6      	b.n	8004322 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1ec      	bne.n	800413e <HAL_RCC_OscConfig+0x50e>
 8004164:	e03e      	b.n	80041e4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004166:	f7fd fe7f 	bl	8001e68 <HAL_GetTick>
 800416a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800416c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004174:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004178:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800417c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004180:	e00a      	b.n	8004198 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004182:	f7fd fe71 	bl	8001e68 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004190:	4293      	cmp	r3, r2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e0c4      	b.n	8004322 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800419c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1ec      	bne.n	8004182 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041a8:	f7fd fe5e 	bl	8001e68 <HAL_GetTick>
 80041ac:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80041ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041ba:	f023 0301 	bic.w	r3, r3, #1
 80041be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80041c2:	e00a      	b.n	80041da <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041c4:	f7fd fe50 	bl	8001e68 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e0a3      	b.n	8004322 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80041da:	f7ff fb46 	bl	800386a <LL_RCC_LSE_IsReady>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1ef      	bne.n	80041c4 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 8099 	beq.w	8004320 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	2b0c      	cmp	r3, #12
 80041f2:	d06c      	beq.n	80042ce <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d14b      	bne.n	8004294 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041fc:	f7ff fc87 	bl	8003b0e <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004200:	f7fd fe32 	bl	8001e68 <HAL_GetTick>
 8004204:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004208:	f7fd fe2e 	bl	8001e68 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b0a      	cmp	r3, #10
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e083      	b.n	8004322 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800421a:	f7ff fc86 	bl	8003b2a <LL_RCC_PLL_IsReady>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1f1      	bne.n	8004208 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004228:	68da      	ldr	r2, [r3, #12]
 800422a:	4b40      	ldr	r3, [pc, #256]	; (800432c <HAL_RCC_OscConfig+0x6fc>)
 800422c:	4013      	ands	r3, r2
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004236:	4311      	orrs	r1, r2
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800423c:	0212      	lsls	r2, r2, #8
 800423e:	4311      	orrs	r1, r2
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004244:	4311      	orrs	r1, r2
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800424a:	4311      	orrs	r1, r2
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004250:	430a      	orrs	r2, r1
 8004252:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004256:	4313      	orrs	r3, r2
 8004258:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800425a:	f7ff fc4a 	bl	8003af2 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800425e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800426c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800426e:	f7fd fdfb 	bl	8001e68 <HAL_GetTick>
 8004272:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8004274:	e008      	b.n	8004288 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004276:	f7fd fdf7 	bl	8001e68 <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	2b0a      	cmp	r3, #10
 8004282:	d901      	bls.n	8004288 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e04c      	b.n	8004322 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8004288:	f7ff fc4f 	bl	8003b2a <LL_RCC_PLL_IsReady>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d0f1      	beq.n	8004276 <HAL_RCC_OscConfig+0x646>
 8004292:	e045      	b.n	8004320 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004294:	f7ff fc3b 	bl	8003b0e <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004298:	f7fd fde6 	bl	8001e68 <HAL_GetTick>
 800429c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042a0:	f7fd fde2 	bl	8001e68 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b0a      	cmp	r3, #10
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e037      	b.n	8004322 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80042b2:	f7ff fc3a 	bl	8003b2a <LL_RCC_PLL_IsReady>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1f1      	bne.n	80042a0 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80042bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042c0:	68da      	ldr	r2, [r3, #12]
 80042c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042c6:	4b1a      	ldr	r3, [pc, #104]	; (8004330 <HAL_RCC_OscConfig+0x700>)
 80042c8:	4013      	ands	r3, r2
 80042ca:	60cb      	str	r3, [r1, #12]
 80042cc:	e028      	b.n	8004320 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d101      	bne.n	80042da <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e023      	b.n	8004322 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	f003 0203 	and.w	r2, r3, #3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d115      	bne.n	800431c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d10e      	bne.n	800431c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004308:	021b      	lsls	r3, r3, #8
 800430a:	429a      	cmp	r2, r3
 800430c:	d106      	bne.n	800431c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004318:	429a      	cmp	r2, r3
 800431a:	d001      	beq.n	8004320 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e000      	b.n	8004322 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3720      	adds	r7, #32
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	11c1808c 	.word	0x11c1808c
 8004330:	eefefffc 	.word	0xeefefffc

08004334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e10f      	b.n	8004568 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004348:	4b89      	ldr	r3, [pc, #548]	; (8004570 <HAL_RCC_ClockConfig+0x23c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0307 	and.w	r3, r3, #7
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	429a      	cmp	r2, r3
 8004354:	d91b      	bls.n	800438e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004356:	4b86      	ldr	r3, [pc, #536]	; (8004570 <HAL_RCC_ClockConfig+0x23c>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f023 0207 	bic.w	r2, r3, #7
 800435e:	4984      	ldr	r1, [pc, #528]	; (8004570 <HAL_RCC_ClockConfig+0x23c>)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	4313      	orrs	r3, r2
 8004364:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004366:	f7fd fd7f 	bl	8001e68 <HAL_GetTick>
 800436a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800436c:	e008      	b.n	8004380 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800436e:	f7fd fd7b 	bl	8001e68 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d901      	bls.n	8004380 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e0f3      	b.n	8004568 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004380:	4b7b      	ldr	r3, [pc, #492]	; (8004570 <HAL_RCC_ClockConfig+0x23c>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0307 	and.w	r3, r3, #7
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	429a      	cmp	r2, r3
 800438c:	d1ef      	bne.n	800436e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d016      	beq.n	80043c8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	4618      	mov	r0, r3
 80043a0:	f7ff fb2a 	bl	80039f8 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80043a4:	f7fd fd60 	bl	8001e68 <HAL_GetTick>
 80043a8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80043aa:	e008      	b.n	80043be <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80043ac:	f7fd fd5c 	bl	8001e68 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e0d4      	b.n	8004568 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80043be:	f7ff fbf2 	bl	8003ba6 <LL_RCC_IsActiveFlag_HPRE>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d0f1      	beq.n	80043ac <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d016      	beq.n	8004402 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff fb20 	bl	8003a1e <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80043de:	f7fd fd43 	bl	8001e68 <HAL_GetTick>
 80043e2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80043e4:	e008      	b.n	80043f8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80043e6:	f7fd fd3f 	bl	8001e68 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e0b7      	b.n	8004568 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80043f8:	f7ff fbe6 	bl	8003bc8 <LL_RCC_IsActiveFlag_SHDHPRE>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d0f1      	beq.n	80043e6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0304 	and.w	r3, r3, #4
 800440a:	2b00      	cmp	r3, #0
 800440c:	d016      	beq.n	800443c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	4618      	mov	r0, r3
 8004414:	f7ff fb19 	bl	8003a4a <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004418:	f7fd fd26 	bl	8001e68 <HAL_GetTick>
 800441c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800441e:	e008      	b.n	8004432 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004420:	f7fd fd22 	bl	8001e68 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d901      	bls.n	8004432 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e09a      	b.n	8004568 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004432:	f7ff fbdb 	bl	8003bec <LL_RCC_IsActiveFlag_PPRE1>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0f1      	beq.n	8004420 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0308 	and.w	r3, r3, #8
 8004444:	2b00      	cmp	r3, #0
 8004446:	d017      	beq.n	8004478 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	00db      	lsls	r3, r3, #3
 800444e:	4618      	mov	r0, r3
 8004450:	f7ff fb0e 	bl	8003a70 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004454:	f7fd fd08 	bl	8001e68 <HAL_GetTick>
 8004458:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800445a:	e008      	b.n	800446e <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800445c:	f7fd fd04 	bl	8001e68 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d901      	bls.n	800446e <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e07c      	b.n	8004568 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800446e:	f7ff fbce 	bl	8003c0e <LL_RCC_IsActiveFlag_PPRE2>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d0f1      	beq.n	800445c <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	2b00      	cmp	r3, #0
 8004482:	d043      	beq.n	800450c <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	2b02      	cmp	r3, #2
 800448a:	d106      	bne.n	800449a <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800448c:	f7ff f99b 	bl	80037c6 <LL_RCC_HSE_IsReady>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d11e      	bne.n	80044d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e066      	b.n	8004568 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	2b03      	cmp	r3, #3
 80044a0:	d106      	bne.n	80044b0 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80044a2:	f7ff fb42 	bl	8003b2a <LL_RCC_PLL_IsReady>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d113      	bne.n	80044d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e05b      	b.n	8004568 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d106      	bne.n	80044c6 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80044b8:	f7ff fa35 	bl	8003926 <LL_RCC_MSI_IsReady>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d108      	bne.n	80044d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e050      	b.n	8004568 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80044c6:	f7ff f9ab 	bl	8003820 <LL_RCC_HSI_IsReady>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d101      	bne.n	80044d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e049      	b.n	8004568 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	4618      	mov	r0, r3
 80044da:	f7ff fa6f 	bl	80039bc <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044de:	f7fd fcc3 	bl	8001e68 <HAL_GetTick>
 80044e2:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044e4:	e00a      	b.n	80044fc <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044e6:	f7fd fcbf 	bl	8001e68 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d901      	bls.n	80044fc <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e035      	b.n	8004568 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044fc:	f7ff fa71 	bl	80039e2 <LL_RCC_GetSysClkSource>
 8004500:	4602      	mov	r2, r0
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	429a      	cmp	r2, r3
 800450a:	d1ec      	bne.n	80044e6 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800450c:	4b18      	ldr	r3, [pc, #96]	; (8004570 <HAL_RCC_ClockConfig+0x23c>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	429a      	cmp	r2, r3
 8004518:	d21b      	bcs.n	8004552 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800451a:	4b15      	ldr	r3, [pc, #84]	; (8004570 <HAL_RCC_ClockConfig+0x23c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f023 0207 	bic.w	r2, r3, #7
 8004522:	4913      	ldr	r1, [pc, #76]	; (8004570 <HAL_RCC_ClockConfig+0x23c>)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	4313      	orrs	r3, r2
 8004528:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800452a:	f7fd fc9d 	bl	8001e68 <HAL_GetTick>
 800452e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004530:	e008      	b.n	8004544 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004532:	f7fd fc99 	bl	8001e68 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d901      	bls.n	8004544 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e011      	b.n	8004568 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004544:	4b0a      	ldr	r3, [pc, #40]	; (8004570 <HAL_RCC_ClockConfig+0x23c>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	429a      	cmp	r2, r3
 8004550:	d1ef      	bne.n	8004532 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004552:	f000 f8b3 	bl	80046bc <HAL_RCC_GetHCLKFreq>
 8004556:	4603      	mov	r3, r0
 8004558:	4a06      	ldr	r2, [pc, #24]	; (8004574 <HAL_RCC_ClockConfig+0x240>)
 800455a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800455c:	4b06      	ldr	r3, [pc, #24]	; (8004578 <HAL_RCC_ClockConfig+0x244>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4618      	mov	r0, r3
 8004562:	f7fd fac5 	bl	8001af0 <HAL_InitTick>
 8004566:	4603      	mov	r3, r0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	58004000 	.word	0x58004000
 8004574:	20000000 	.word	0x20000000
 8004578:	20000004 	.word	0x20000004

0800457c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800457c:	b590      	push	{r4, r7, lr}
 800457e:	b087      	sub	sp, #28
 8004580:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8004582:	2300      	movs	r3, #0
 8004584:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8004586:	2300      	movs	r3, #0
 8004588:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800458a:	f7ff fa2a 	bl	80039e2 <LL_RCC_GetSysClkSource>
 800458e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004590:	f7ff fafe 	bl	8003b90 <LL_RCC_PLL_GetMainSource>
 8004594:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d005      	beq.n	80045a8 <HAL_RCC_GetSysClockFreq+0x2c>
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	2b0c      	cmp	r3, #12
 80045a0:	d139      	bne.n	8004616 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d136      	bne.n	8004616 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80045a8:	f7ff f9cd 	bl	8003946 <LL_RCC_MSI_IsEnabledRangeSelect>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d115      	bne.n	80045de <HAL_RCC_GetSysClockFreq+0x62>
 80045b2:	f7ff f9c8 	bl	8003946 <LL_RCC_MSI_IsEnabledRangeSelect>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d106      	bne.n	80045ca <HAL_RCC_GetSysClockFreq+0x4e>
 80045bc:	f7ff f9d3 	bl	8003966 <LL_RCC_MSI_GetRange>
 80045c0:	4603      	mov	r3, r0
 80045c2:	0a1b      	lsrs	r3, r3, #8
 80045c4:	f003 030f 	and.w	r3, r3, #15
 80045c8:	e005      	b.n	80045d6 <HAL_RCC_GetSysClockFreq+0x5a>
 80045ca:	f7ff f9d7 	bl	800397c <LL_RCC_MSI_GetRangeAfterStandby>
 80045ce:	4603      	mov	r3, r0
 80045d0:	0a1b      	lsrs	r3, r3, #8
 80045d2:	f003 030f 	and.w	r3, r3, #15
 80045d6:	4a36      	ldr	r2, [pc, #216]	; (80046b0 <HAL_RCC_GetSysClockFreq+0x134>)
 80045d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045dc:	e014      	b.n	8004608 <HAL_RCC_GetSysClockFreq+0x8c>
 80045de:	f7ff f9b2 	bl	8003946 <LL_RCC_MSI_IsEnabledRangeSelect>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d106      	bne.n	80045f6 <HAL_RCC_GetSysClockFreq+0x7a>
 80045e8:	f7ff f9bd 	bl	8003966 <LL_RCC_MSI_GetRange>
 80045ec:	4603      	mov	r3, r0
 80045ee:	091b      	lsrs	r3, r3, #4
 80045f0:	f003 030f 	and.w	r3, r3, #15
 80045f4:	e005      	b.n	8004602 <HAL_RCC_GetSysClockFreq+0x86>
 80045f6:	f7ff f9c1 	bl	800397c <LL_RCC_MSI_GetRangeAfterStandby>
 80045fa:	4603      	mov	r3, r0
 80045fc:	091b      	lsrs	r3, r3, #4
 80045fe:	f003 030f 	and.w	r3, r3, #15
 8004602:	4a2b      	ldr	r2, [pc, #172]	; (80046b0 <HAL_RCC_GetSysClockFreq+0x134>)
 8004604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004608:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d115      	bne.n	800463c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004614:	e012      	b.n	800463c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2b04      	cmp	r3, #4
 800461a:	d102      	bne.n	8004622 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800461c:	4b25      	ldr	r3, [pc, #148]	; (80046b4 <HAL_RCC_GetSysClockFreq+0x138>)
 800461e:	617b      	str	r3, [r7, #20]
 8004620:	e00c      	b.n	800463c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	2b08      	cmp	r3, #8
 8004626:	d109      	bne.n	800463c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004628:	f7ff f8a0 	bl	800376c <LL_RCC_HSE_IsEnabledDiv2>
 800462c:	4603      	mov	r3, r0
 800462e:	2b01      	cmp	r3, #1
 8004630:	d102      	bne.n	8004638 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004632:	4b20      	ldr	r3, [pc, #128]	; (80046b4 <HAL_RCC_GetSysClockFreq+0x138>)
 8004634:	617b      	str	r3, [r7, #20]
 8004636:	e001      	b.n	800463c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004638:	4b1f      	ldr	r3, [pc, #124]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800463a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800463c:	f7ff f9d1 	bl	80039e2 <LL_RCC_GetSysClkSource>
 8004640:	4603      	mov	r3, r0
 8004642:	2b0c      	cmp	r3, #12
 8004644:	d12f      	bne.n	80046a6 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004646:	f7ff faa3 	bl	8003b90 <LL_RCC_PLL_GetMainSource>
 800464a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b02      	cmp	r3, #2
 8004650:	d003      	beq.n	800465a <HAL_RCC_GetSysClockFreq+0xde>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b03      	cmp	r3, #3
 8004656:	d003      	beq.n	8004660 <HAL_RCC_GetSysClockFreq+0xe4>
 8004658:	e00d      	b.n	8004676 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800465a:	4b16      	ldr	r3, [pc, #88]	; (80046b4 <HAL_RCC_GetSysClockFreq+0x138>)
 800465c:	60fb      	str	r3, [r7, #12]
        break;
 800465e:	e00d      	b.n	800467c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004660:	f7ff f884 	bl	800376c <LL_RCC_HSE_IsEnabledDiv2>
 8004664:	4603      	mov	r3, r0
 8004666:	2b01      	cmp	r3, #1
 8004668:	d102      	bne.n	8004670 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800466a:	4b12      	ldr	r3, [pc, #72]	; (80046b4 <HAL_RCC_GetSysClockFreq+0x138>)
 800466c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800466e:	e005      	b.n	800467c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8004670:	4b11      	ldr	r3, [pc, #68]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004672:	60fb      	str	r3, [r7, #12]
        break;
 8004674:	e002      	b.n	800467c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	60fb      	str	r3, [r7, #12]
        break;
 800467a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800467c:	f7ff fa66 	bl	8003b4c <LL_RCC_PLL_GetN>
 8004680:	4602      	mov	r2, r0
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	fb03 f402 	mul.w	r4, r3, r2
 8004688:	f7ff fa77 	bl	8003b7a <LL_RCC_PLL_GetDivider>
 800468c:	4603      	mov	r3, r0
 800468e:	091b      	lsrs	r3, r3, #4
 8004690:	3301      	adds	r3, #1
 8004692:	fbb4 f4f3 	udiv	r4, r4, r3
 8004696:	f7ff fa65 	bl	8003b64 <LL_RCC_PLL_GetR>
 800469a:	4603      	mov	r3, r0
 800469c:	0f5b      	lsrs	r3, r3, #29
 800469e:	3301      	adds	r3, #1
 80046a0:	fbb4 f3f3 	udiv	r3, r4, r3
 80046a4:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80046a6:	697b      	ldr	r3, [r7, #20]
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	371c      	adds	r7, #28
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd90      	pop	{r4, r7, pc}
 80046b0:	0800df70 	.word	0x0800df70
 80046b4:	00f42400 	.word	0x00f42400
 80046b8:	01e84800 	.word	0x01e84800

080046bc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046bc:	b598      	push	{r3, r4, r7, lr}
 80046be:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80046c0:	f7ff ff5c 	bl	800457c <HAL_RCC_GetSysClockFreq>
 80046c4:	4604      	mov	r4, r0
 80046c6:	f7ff f9e6 	bl	8003a96 <LL_RCC_GetAHBPrescaler>
 80046ca:	4603      	mov	r3, r0
 80046cc:	091b      	lsrs	r3, r3, #4
 80046ce:	f003 030f 	and.w	r3, r3, #15
 80046d2:	4a03      	ldr	r2, [pc, #12]	; (80046e0 <HAL_RCC_GetHCLKFreq+0x24>)
 80046d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046d8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80046dc:	4618      	mov	r0, r3
 80046de:	bd98      	pop	{r3, r4, r7, pc}
 80046e0:	0800df10 	.word	0x0800df10

080046e4 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046e4:	b598      	push	{r3, r4, r7, lr}
 80046e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80046e8:	f7ff ffe8 	bl	80046bc <HAL_RCC_GetHCLKFreq>
 80046ec:	4604      	mov	r4, r0
 80046ee:	f7ff f9ea 	bl	8003ac6 <LL_RCC_GetAPB1Prescaler>
 80046f2:	4603      	mov	r3, r0
 80046f4:	0a1b      	lsrs	r3, r3, #8
 80046f6:	4a03      	ldr	r2, [pc, #12]	; (8004704 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046fc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004700:	4618      	mov	r0, r3
 8004702:	bd98      	pop	{r3, r4, r7, pc}
 8004704:	0800df50 	.word	0x0800df50

08004708 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004708:	b598      	push	{r3, r4, r7, lr}
 800470a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800470c:	f7ff ffd6 	bl	80046bc <HAL_RCC_GetHCLKFreq>
 8004710:	4604      	mov	r4, r0
 8004712:	f7ff f9e3 	bl	8003adc <LL_RCC_GetAPB2Prescaler>
 8004716:	4603      	mov	r3, r0
 8004718:	0adb      	lsrs	r3, r3, #11
 800471a:	4a03      	ldr	r2, [pc, #12]	; (8004728 <HAL_RCC_GetPCLK2Freq+0x20>)
 800471c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004720:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004724:	4618      	mov	r0, r3
 8004726:	bd98      	pop	{r3, r4, r7, pc}
 8004728:	0800df50 	.word	0x0800df50

0800472c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer to the Flash Latency variable.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t regvalue;

  /* Check the parameters */
  if ((RCC_ClkInitStruct != NULL) && (pFLatency != NULL))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d02d      	beq.n	8004798 <HAL_RCC_GetClockConfig+0x6c>
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d02a      	beq.n	8004798 <HAL_RCC_GetClockConfig+0x6c>
  {
    /* Set all possible values for the Clock type parameter --------------------*/
    RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 \
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	224f      	movs	r2, #79	; 0x4f
 8004746:	601a      	str	r2, [r3, #0]
#if defined(DUAL_CORE)
    RCC_ClkInitStruct->ClockType |= RCC_CLOCKTYPE_HCLK2;
#endif  /* DUAL_CORE */

    /* Get Clock Configuration Register */
    regvalue = RCC->CFGR;
 8004748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	60fb      	str	r3, [r7, #12]

    /* Get the SYSCLK configuration --------------------------------------------*/
    RCC_ClkInitStruct->SYSCLKSource = (regvalue & RCC_CFGR_SWS);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f003 020c 	and.w	r2, r3, #12
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	605a      	str	r2, [r3, #4]

    /* Get the HCLK configuration ----------------------------------------------*/
    RCC_ClkInitStruct->AHBCLKDivider = (regvalue & RCC_CFGR_HPRE);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	609a      	str	r2, [r3, #8]

    /* Get the APB1 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB1CLKDivider = (regvalue & RCC_CFGR_PPRE1);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	60da      	str	r2, [r3, #12]

    /* Get the APB2 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB2CLKDivider = (regvalue & RCC_CFGR_PPRE2);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	611a      	str	r2, [r3, #16]

    /* Get Extended Clock Recovery Register */
    regvalue = RCC->EXTCFGR;
 8004778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800477c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004780:	60fb      	str	r3, [r7, #12]
    /* Get the AHBCLK2Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK2Divider =  (regvalue & RCC_EXTCFGR_C2HPRE);
#endif  /* DUAL_CORE */

    /* Get the AHBCLK3Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK3Divider = ((regvalue & RCC_EXTCFGR_SHDHPRE) << 4);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	011b      	lsls	r3, r3, #4
 8004786:	b2da      	uxtb	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	615a      	str	r2, [r3, #20]

    /* Get the Flash Wait State (Latency) configuration ------------------------*/
    *pFLatency = __HAL_FLASH_GET_LATENCY();
 800478c:	4b05      	ldr	r3, [pc, #20]	; (80047a4 <HAL_RCC_GetClockConfig+0x78>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0207 	and.w	r2, r3, #7
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	601a      	str	r2, [r3, #0]
  }
}
 8004798:	bf00      	nop
 800479a:	3714      	adds	r7, #20
 800479c:	46bd      	mov	sp, r7
 800479e:	bc80      	pop	{r7}
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	58004000 	.word	0x58004000

080047a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80047a8:	b590      	push	{r4, r7, lr}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	091b      	lsrs	r3, r3, #4
 80047b4:	f003 030f 	and.w	r3, r3, #15
 80047b8:	4a10      	ldr	r2, [pc, #64]	; (80047fc <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80047ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047be:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80047c0:	f7ff f974 	bl	8003aac <LL_RCC_GetAHB3Prescaler>
 80047c4:	4603      	mov	r3, r0
 80047c6:	091b      	lsrs	r3, r3, #4
 80047c8:	f003 030f 	and.w	r3, r3, #15
 80047cc:	4a0c      	ldr	r2, [pc, #48]	; (8004800 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80047ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d8:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	4a09      	ldr	r2, [pc, #36]	; (8004804 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80047de:	fba2 2303 	umull	r2, r3, r2, r3
 80047e2:	0c9c      	lsrs	r4, r3, #18
 80047e4:	f7fe ff88 	bl	80036f8 <HAL_PWREx_GetVoltageRange>
 80047e8:	4603      	mov	r3, r0
 80047ea:	4619      	mov	r1, r3
 80047ec:	4620      	mov	r0, r4
 80047ee:	f000 f80b 	bl	8004808 <RCC_SetFlashLatency>
 80047f2:	4603      	mov	r3, r0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3714      	adds	r7, #20
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd90      	pop	{r4, r7, pc}
 80047fc:	0800df70 	.word	0x0800df70
 8004800:	0800df10 	.word	0x0800df10
 8004804:	431bde83 	.word	0x431bde83

08004808 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b08e      	sub	sp, #56	; 0x38
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8004812:	4a3a      	ldr	r2, [pc, #232]	; (80048fc <RCC_SetFlashLatency+0xf4>)
 8004814:	f107 0320 	add.w	r3, r7, #32
 8004818:	e892 0003 	ldmia.w	r2, {r0, r1}
 800481c:	6018      	str	r0, [r3, #0]
 800481e:	3304      	adds	r3, #4
 8004820:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8004822:	4a37      	ldr	r2, [pc, #220]	; (8004900 <RCC_SetFlashLatency+0xf8>)
 8004824:	f107 0318 	add.w	r3, r7, #24
 8004828:	e892 0003 	ldmia.w	r2, {r0, r1}
 800482c:	6018      	str	r0, [r3, #0]
 800482e:	3304      	adds	r3, #4
 8004830:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8004832:	4a34      	ldr	r2, [pc, #208]	; (8004904 <RCC_SetFlashLatency+0xfc>)
 8004834:	f107 030c 	add.w	r3, r7, #12
 8004838:	ca07      	ldmia	r2, {r0, r1, r2}
 800483a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800483e:	2300      	movs	r3, #0
 8004840:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004848:	d11b      	bne.n	8004882 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800484a:	2300      	movs	r3, #0
 800484c:	633b      	str	r3, [r7, #48]	; 0x30
 800484e:	e014      	b.n	800487a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	3338      	adds	r3, #56	; 0x38
 8004856:	443b      	add	r3, r7
 8004858:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800485c:	461a      	mov	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4293      	cmp	r3, r2
 8004862:	d807      	bhi.n	8004874 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	3338      	adds	r3, #56	; 0x38
 800486a:	443b      	add	r3, r7
 800486c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004870:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004872:	e021      	b.n	80048b8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004876:	3301      	adds	r3, #1
 8004878:	633b      	str	r3, [r7, #48]	; 0x30
 800487a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487c:	2b02      	cmp	r3, #2
 800487e:	d9e7      	bls.n	8004850 <RCC_SetFlashLatency+0x48>
 8004880:	e01a      	b.n	80048b8 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004882:	2300      	movs	r3, #0
 8004884:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004886:	e014      	b.n	80048b2 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	3338      	adds	r3, #56	; 0x38
 800488e:	443b      	add	r3, r7
 8004890:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8004894:	461a      	mov	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4293      	cmp	r3, r2
 800489a:	d807      	bhi.n	80048ac <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800489c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	3338      	adds	r3, #56	; 0x38
 80048a2:	443b      	add	r3, r7
 80048a4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80048a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80048aa:	e005      	b.n	80048b8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80048ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ae:	3301      	adds	r3, #1
 80048b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d9e7      	bls.n	8004888 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80048b8:	4b13      	ldr	r3, [pc, #76]	; (8004908 <RCC_SetFlashLatency+0x100>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f023 0207 	bic.w	r2, r3, #7
 80048c0:	4911      	ldr	r1, [pc, #68]	; (8004908 <RCC_SetFlashLatency+0x100>)
 80048c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048c4:	4313      	orrs	r3, r2
 80048c6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80048c8:	f7fd face 	bl	8001e68 <HAL_GetTick>
 80048cc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80048ce:	e008      	b.n	80048e2 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80048d0:	f7fd faca 	bl	8001e68 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d901      	bls.n	80048e2 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e007      	b.n	80048f2 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80048e2:	4b09      	ldr	r3, [pc, #36]	; (8004908 <RCC_SetFlashLatency+0x100>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d1ef      	bne.n	80048d0 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3738      	adds	r7, #56	; 0x38
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	0800ddfc 	.word	0x0800ddfc
 8004900:	0800de04 	.word	0x0800de04
 8004904:	0800de0c 	.word	0x0800de0c
 8004908:	58004000 	.word	0x58004000

0800490c <LL_RCC_LSE_IsReady>:
{
 800490c:	b480      	push	{r7}
 800490e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004910:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b02      	cmp	r3, #2
 800491e:	d101      	bne.n	8004924 <LL_RCC_LSE_IsReady+0x18>
 8004920:	2301      	movs	r3, #1
 8004922:	e000      	b.n	8004926 <LL_RCC_LSE_IsReady+0x1a>
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	46bd      	mov	sp, r7
 800492a:	bc80      	pop	{r7}
 800492c:	4770      	bx	lr

0800492e <LL_RCC_SetUSARTClockSource>:
{
 800492e:	b480      	push	{r7}
 8004930:	b083      	sub	sp, #12
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8004936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800493a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	0c1b      	lsrs	r3, r3, #16
 8004942:	43db      	mvns	r3, r3
 8004944:	401a      	ands	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	b29b      	uxth	r3, r3
 800494a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800494e:	4313      	orrs	r3, r2
 8004950:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	bc80      	pop	{r7}
 800495c:	4770      	bx	lr

0800495e <LL_RCC_SetI2SClockSource>:
{
 800495e:	b480      	push	{r7}
 8004960:	b083      	sub	sp, #12
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8004966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800496a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800496e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004972:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4313      	orrs	r3, r2
 800497a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	bc80      	pop	{r7}
 8004986:	4770      	bx	lr

08004988 <LL_RCC_SetLPUARTClockSource>:
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004998:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800499c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bc80      	pop	{r7}
 80049b0:	4770      	bx	lr

080049b2 <LL_RCC_SetI2CClockSource>:
{
 80049b2:	b480      	push	{r7}
 80049b4:	b083      	sub	sp, #12
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80049ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049be:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	091b      	lsrs	r3, r3, #4
 80049c6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80049ca:	43db      	mvns	r3, r3
 80049cc:	401a      	ands	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	011b      	lsls	r3, r3, #4
 80049d2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80049d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049da:	4313      	orrs	r3, r2
 80049dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bc80      	pop	{r7}
 80049e8:	4770      	bx	lr

080049ea <LL_RCC_SetLPTIMClockSource>:
{
 80049ea:	b480      	push	{r7}
 80049ec:	b083      	sub	sp, #12
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80049f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	0c1b      	lsrs	r3, r3, #16
 80049fe:	041b      	lsls	r3, r3, #16
 8004a00:	43db      	mvns	r3, r3
 8004a02:	401a      	ands	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	041b      	lsls	r3, r3, #16
 8004a08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bc80      	pop	{r7}
 8004a1a:	4770      	bx	lr

08004a1c <LL_RCC_SetRNGClockSource>:
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004a30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bc80      	pop	{r7}
 8004a44:	4770      	bx	lr

08004a46 <LL_RCC_SetADCClockSource>:
{
 8004a46:	b480      	push	{r7}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a56:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a66:	bf00      	nop
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bc80      	pop	{r7}
 8004a6e:	4770      	bx	lr

08004a70 <LL_RCC_SetRTCClockSource>:
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bc80      	pop	{r7}
 8004a98:	4770      	bx	lr

08004a9a <LL_RCC_GetRTCClockSource>:
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bc80      	pop	{r7}
 8004ab0:	4770      	bx	lr

08004ab2 <LL_RCC_ForceBackupDomainReset>:
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004abe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ac2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ac6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004aca:	bf00      	nop
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bc80      	pop	{r7}
 8004ad0:	4770      	bx	lr

08004ad2 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ade:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ae6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004aea:	bf00      	nop
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bc80      	pop	{r7}
 8004af0:	4770      	bx	lr
	...

08004af4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8004afc:	2300      	movs	r3, #0
 8004afe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8004b00:	2300      	movs	r3, #0
 8004b02:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004b04:	2300      	movs	r3, #0
 8004b06:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d058      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8004b14:	f7fe fde2 	bl	80036dc <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b18:	f7fd f9a6 	bl	8001e68 <HAL_GetTick>
 8004b1c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004b1e:	e009      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b20:	f7fd f9a2 	bl	8001e68 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d902      	bls.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	74fb      	strb	r3, [r7, #19]
        break;
 8004b32:	e006      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004b34:	4b7b      	ldr	r3, [pc, #492]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b40:	d1ee      	bne.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8004b42:	7cfb      	ldrb	r3, [r7, #19]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d13c      	bne.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8004b48:	f7ff ffa7 	bl	8004a9a <LL_RCC_GetRTCClockSource>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d00f      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b62:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b64:	f7ff ffa5 	bl	8004ab2 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b68:	f7ff ffb3 	bl	8004ad2 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d014      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b80:	f7fd f972 	bl	8001e68 <HAL_GetTick>
 8004b84:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8004b86:	e00b      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b88:	f7fd f96e 	bl	8001e68 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d902      	bls.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	74fb      	strb	r3, [r7, #19]
            break;
 8004b9e:	e004      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8004ba0:	f7ff feb4 	bl	800490c <LL_RCC_LSE_IsReady>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d1ee      	bne.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8004baa:	7cfb      	ldrb	r3, [r7, #19]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d105      	bne.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7ff ff5b 	bl	8004a70 <LL_RCC_SetRTCClockSource>
 8004bba:	e004      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bbc:	7cfb      	ldrb	r3, [r7, #19]
 8004bbe:	74bb      	strb	r3, [r7, #18]
 8004bc0:	e001      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bc2:	7cfb      	ldrb	r3, [r7, #19]
 8004bc4:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d004      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7ff fea9 	bl	800492e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d004      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7ff fe9e 	bl	800492e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0320 	and.w	r3, r3, #32
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d004      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7ff fec0 	bl	8004988 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d004      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7ff fee6 	bl	80049ea <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d004      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7ff fedb 	bl	80049ea <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d004      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7ff fed0 	bl	80049ea <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d004      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7ff fea9 	bl	80049b2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d004      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7ff fe9e 	bl	80049b2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d004      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7ff fe93 	bl	80049b2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0310 	and.w	r3, r3, #16
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d011      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7ff fe5e 	bl	800495e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004caa:	d107      	bne.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8004cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d010      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7ff fea5 	bl	8004a1c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d107      	bne.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ce4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ce8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d011      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7ff fea3 	bl	8004a46 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d08:	d107      	bne.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d18:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004d1a:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3718      	adds	r7, #24
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	58000400 	.word	0x58000400

08004d28 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d071      	beq.n	8004e1e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d106      	bne.n	8004d54 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7fc fe2e 	bl	80019b0 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2202      	movs	r2, #2
 8004d58:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004d5c:	4b32      	ldr	r3, [pc, #200]	; (8004e28 <HAL_RTC_Init+0x100>)
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f003 0310 	and.w	r3, r3, #16
 8004d64:	2b10      	cmp	r3, #16
 8004d66:	d051      	beq.n	8004e0c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d68:	4b2f      	ldr	r3, [pc, #188]	; (8004e28 <HAL_RTC_Init+0x100>)
 8004d6a:	22ca      	movs	r2, #202	; 0xca
 8004d6c:	625a      	str	r2, [r3, #36]	; 0x24
 8004d6e:	4b2e      	ldr	r3, [pc, #184]	; (8004e28 <HAL_RTC_Init+0x100>)
 8004d70:	2253      	movs	r2, #83	; 0x53
 8004d72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 fb53 	bl	8005420 <RTC_EnterInitMode>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8004d7e:	7bfb      	ldrb	r3, [r7, #15]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d13f      	bne.n	8004e04 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8004d84:	4b28      	ldr	r3, [pc, #160]	; (8004e28 <HAL_RTC_Init+0x100>)
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	4a27      	ldr	r2, [pc, #156]	; (8004e28 <HAL_RTC_Init+0x100>)
 8004d8a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8004d8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d92:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8004d94:	4b24      	ldr	r3, [pc, #144]	; (8004e28 <HAL_RTC_Init+0x100>)
 8004d96:	699a      	ldr	r2, [r3, #24]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6859      	ldr	r1, [r3, #4]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	4319      	orrs	r1, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	430b      	orrs	r3, r1
 8004da8:	491f      	ldr	r1, [pc, #124]	; (8004e28 <HAL_RTC_Init+0x100>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68da      	ldr	r2, [r3, #12]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	041b      	lsls	r3, r3, #16
 8004db8:	491b      	ldr	r1, [pc, #108]	; (8004e28 <HAL_RTC_Init+0x100>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8004dbe:	4b1a      	ldr	r3, [pc, #104]	; (8004e28 <HAL_RTC_Init+0x100>)
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dce:	430b      	orrs	r3, r1
 8004dd0:	4915      	ldr	r1, [pc, #84]	; (8004e28 <HAL_RTC_Init+0x100>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 fb56 	bl	8005488 <RTC_ExitInitMode>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10e      	bne.n	8004e04 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8004de6:	4b10      	ldr	r3, [pc, #64]	; (8004e28 <HAL_RTC_Init+0x100>)
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a19      	ldr	r1, [r3, #32]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	4319      	orrs	r1, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	430b      	orrs	r3, r1
 8004dfe:	490a      	ldr	r1, [pc, #40]	; (8004e28 <HAL_RTC_Init+0x100>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e04:	4b08      	ldr	r3, [pc, #32]	; (8004e28 <HAL_RTC_Init+0x100>)
 8004e06:	22ff      	movs	r2, #255	; 0xff
 8004e08:	625a      	str	r2, [r3, #36]	; 0x24
 8004e0a:	e001      	b.n	8004e10 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004e10:	7bfb      	ldrb	r3, [r7, #15]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d103      	bne.n	8004e1e <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8004e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	40002800 	.word	0x40002800

08004e2c <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004e2c:	b590      	push	{r4, r7, lr}
 8004e2e:	b087      	sub	sp, #28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d101      	bne.n	8004e46 <HAL_RTC_SetTime+0x1a>
 8004e42:	2302      	movs	r3, #2
 8004e44:	e088      	b.n	8004f58 <HAL_RTC_SetTime+0x12c>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2202      	movs	r2, #2
 8004e52:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e56:	4b42      	ldr	r3, [pc, #264]	; (8004f60 <HAL_RTC_SetTime+0x134>)
 8004e58:	22ca      	movs	r2, #202	; 0xca
 8004e5a:	625a      	str	r2, [r3, #36]	; 0x24
 8004e5c:	4b40      	ldr	r3, [pc, #256]	; (8004f60 <HAL_RTC_SetTime+0x134>)
 8004e5e:	2253      	movs	r2, #83	; 0x53
 8004e60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f000 fadc 	bl	8005420 <RTC_EnterInitMode>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004e6c:	7cfb      	ldrb	r3, [r7, #19]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d15e      	bne.n	8004f30 <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8004e72:	4b3b      	ldr	r3, [pc, #236]	; (8004f60 <HAL_RTC_SetTime+0x134>)
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e7e:	d057      	beq.n	8004f30 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d125      	bne.n	8004ed2 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004e86:	4b36      	ldr	r3, [pc, #216]	; (8004f60 <HAL_RTC_SetTime+0x134>)
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d102      	bne.n	8004e98 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	2200      	movs	r2, #0
 8004e96:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f000 fb31 	bl	8005504 <RTC_ByteToBcd2>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	785b      	ldrb	r3, [r3, #1]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 fb2a 	bl	8005504 <RTC_ByteToBcd2>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004eb4:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	789b      	ldrb	r3, [r3, #2]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 fb22 	bl	8005504 <RTC_ByteToBcd2>
 8004ec0:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004ec2:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	78db      	ldrb	r3, [r3, #3]
 8004eca:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	617b      	str	r3, [r7, #20]
 8004ed0:	e017      	b.n	8004f02 <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004ed2:	4b23      	ldr	r3, [pc, #140]	; (8004f60 <HAL_RTC_SetTime+0x134>)
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d102      	bne.n	8004ee4 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	785b      	ldrb	r3, [r3, #1]
 8004eee:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004ef0:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004ef6:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	78db      	ldrb	r3, [r3, #3]
 8004efc:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004efe:	4313      	orrs	r3, r2
 8004f00:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8004f02:	4a17      	ldr	r2, [pc, #92]	; (8004f60 <HAL_RTC_SetTime+0x134>)
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004f0a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004f0e:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8004f10:	4b13      	ldr	r3, [pc, #76]	; (8004f60 <HAL_RTC_SetTime+0x134>)
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	4a12      	ldr	r2, [pc, #72]	; (8004f60 <HAL_RTC_SetTime+0x134>)
 8004f16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f1a:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8004f1c:	4b10      	ldr	r3, [pc, #64]	; (8004f60 <HAL_RTC_SetTime+0x134>)
 8004f1e:	699a      	ldr	r2, [r3, #24]
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	68d9      	ldr	r1, [r3, #12]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	430b      	orrs	r3, r1
 8004f2a:	490d      	ldr	r1, [pc, #52]	; (8004f60 <HAL_RTC_SetTime+0x134>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 faa9 	bl	8005488 <RTC_ExitInitMode>
 8004f36:	4603      	mov	r3, r0
 8004f38:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f3a:	4b09      	ldr	r3, [pc, #36]	; (8004f60 <HAL_RTC_SetTime+0x134>)
 8004f3c:	22ff      	movs	r2, #255	; 0xff
 8004f3e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004f40:	7cfb      	ldrb	r3, [r7, #19]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d103      	bne.n	8004f4e <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8004f56:	7cfb      	ldrb	r3, [r7, #19]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	371c      	adds	r7, #28
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd90      	pop	{r4, r7, pc}
 8004f60:	40002800 	.word	0x40002800

08004f64 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8004f70:	4b2c      	ldr	r3, [pc, #176]	; (8005024 <HAL_RTC_GetTime+0xc0>)
 8004f72:	689a      	ldr	r2, [r3, #8]
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8004f78:	4b2a      	ldr	r3, [pc, #168]	; (8005024 <HAL_RTC_GetTime+0xc0>)
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f84:	d049      	beq.n	800501a <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8004f86:	4b27      	ldr	r3, [pc, #156]	; (8005024 <HAL_RTC_GetTime+0xc0>)
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8004f92:	4b24      	ldr	r3, [pc, #144]	; (8005024 <HAL_RTC_GetTime+0xc0>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004f9a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004f9e:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	0c1b      	lsrs	r3, r3, #16
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004faa:	b2da      	uxtb	r2, r3
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	0a1b      	lsrs	r3, r3, #8
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fba:	b2da      	uxtb	r2, r3
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fc8:	b2da      	uxtb	r2, r3
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	0d9b      	lsrs	r3, r3, #22
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	b2da      	uxtb	r2, r3
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d11a      	bne.n	800501a <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f000 faaa 	bl	8005542 <RTC_Bcd2ToByte>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	785b      	ldrb	r3, [r3, #1]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 faa1 	bl	8005542 <RTC_Bcd2ToByte>
 8005000:	4603      	mov	r3, r0
 8005002:	461a      	mov	r2, r3
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	789b      	ldrb	r3, [r3, #2]
 800500c:	4618      	mov	r0, r3
 800500e:	f000 fa98 	bl	8005542 <RTC_Bcd2ToByte>
 8005012:	4603      	mov	r3, r0
 8005014:	461a      	mov	r2, r3
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3718      	adds	r7, #24
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	40002800 	.word	0x40002800

08005028 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005028:	b590      	push	{r4, r7, lr}
 800502a:	b087      	sub	sp, #28
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800503a:	2b01      	cmp	r3, #1
 800503c:	d101      	bne.n	8005042 <HAL_RTC_SetDate+0x1a>
 800503e:	2302      	movs	r3, #2
 8005040:	e071      	b.n	8005126 <HAL_RTC_SetDate+0xfe>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2202      	movs	r2, #2
 800504e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d10e      	bne.n	8005076 <HAL_RTC_SetDate+0x4e>
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	785b      	ldrb	r3, [r3, #1]
 800505c:	f003 0310 	and.w	r3, r3, #16
 8005060:	2b00      	cmp	r3, #0
 8005062:	d008      	beq.n	8005076 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	785b      	ldrb	r3, [r3, #1]
 8005068:	f023 0310 	bic.w	r3, r3, #16
 800506c:	b2db      	uxtb	r3, r3
 800506e:	330a      	adds	r3, #10
 8005070:	b2da      	uxtb	r2, r3
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d11c      	bne.n	80050b6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	78db      	ldrb	r3, [r3, #3]
 8005080:	4618      	mov	r0, r3
 8005082:	f000 fa3f 	bl	8005504 <RTC_ByteToBcd2>
 8005086:	4603      	mov	r3, r0
 8005088:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	785b      	ldrb	r3, [r3, #1]
 800508e:	4618      	mov	r0, r3
 8005090:	f000 fa38 	bl	8005504 <RTC_ByteToBcd2>
 8005094:	4603      	mov	r3, r0
 8005096:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005098:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	789b      	ldrb	r3, [r3, #2]
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 fa30 	bl	8005504 <RTC_ByteToBcd2>
 80050a4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80050a6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80050b0:	4313      	orrs	r3, r2
 80050b2:	617b      	str	r3, [r7, #20]
 80050b4:	e00e      	b.n	80050d4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	78db      	ldrb	r3, [r3, #3]
 80050ba:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	785b      	ldrb	r3, [r3, #1]
 80050c0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80050c2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80050c8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80050d0:	4313      	orrs	r3, r2
 80050d2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050d4:	4b16      	ldr	r3, [pc, #88]	; (8005130 <HAL_RTC_SetDate+0x108>)
 80050d6:	22ca      	movs	r2, #202	; 0xca
 80050d8:	625a      	str	r2, [r3, #36]	; 0x24
 80050da:	4b15      	ldr	r3, [pc, #84]	; (8005130 <HAL_RTC_SetDate+0x108>)
 80050dc:	2253      	movs	r2, #83	; 0x53
 80050de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f000 f99d 	bl	8005420 <RTC_EnterInitMode>
 80050e6:	4603      	mov	r3, r0
 80050e8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80050ea:	7cfb      	ldrb	r3, [r7, #19]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10b      	bne.n	8005108 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 80050f0:	4a0f      	ldr	r2, [pc, #60]	; (8005130 <HAL_RTC_SetDate+0x108>)
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80050f8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80050fc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f000 f9c2 	bl	8005488 <RTC_ExitInitMode>
 8005104:	4603      	mov	r3, r0
 8005106:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005108:	4b09      	ldr	r3, [pc, #36]	; (8005130 <HAL_RTC_SetDate+0x108>)
 800510a:	22ff      	movs	r2, #255	; 0xff
 800510c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800510e:	7cfb      	ldrb	r3, [r7, #19]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d103      	bne.n	800511c <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8005124:	7cfb      	ldrb	r3, [r7, #19]
}
 8005126:	4618      	mov	r0, r3
 8005128:	371c      	adds	r7, #28
 800512a:	46bd      	mov	sp, r7
 800512c:	bd90      	pop	{r4, r7, pc}
 800512e:	bf00      	nop
 8005130:	40002800 	.word	0x40002800

08005134 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8005140:	4b22      	ldr	r3, [pc, #136]	; (80051cc <HAL_RTC_GetDate+0x98>)
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005148:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800514c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	0c1b      	lsrs	r3, r3, #16
 8005152:	b2da      	uxtb	r2, r3
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	0a1b      	lsrs	r3, r3, #8
 800515c:	b2db      	uxtb	r3, r3
 800515e:	f003 031f 	and.w	r3, r3, #31
 8005162:	b2da      	uxtb	r2, r3
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	b2db      	uxtb	r3, r3
 800516c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005170:	b2da      	uxtb	r2, r3
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	0b5b      	lsrs	r3, r3, #13
 800517a:	b2db      	uxtb	r3, r3
 800517c:	f003 0307 	and.w	r3, r3, #7
 8005180:	b2da      	uxtb	r2, r3
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d11a      	bne.n	80051c2 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	78db      	ldrb	r3, [r3, #3]
 8005190:	4618      	mov	r0, r3
 8005192:	f000 f9d6 	bl	8005542 <RTC_Bcd2ToByte>
 8005196:	4603      	mov	r3, r0
 8005198:	461a      	mov	r2, r3
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	785b      	ldrb	r3, [r3, #1]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 f9cd 	bl	8005542 <RTC_Bcd2ToByte>
 80051a8:	4603      	mov	r3, r0
 80051aa:	461a      	mov	r2, r3
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	789b      	ldrb	r3, [r3, #2]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f000 f9c4 	bl	8005542 <RTC_Bcd2ToByte>
 80051ba:	4603      	mov	r3, r0
 80051bc:	461a      	mov	r2, r3
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3718      	adds	r7, #24
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	40002800 	.word	0x40002800

080051d0 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80051d0:	b590      	push	{r4, r7, lr}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80051dc:	2300      	movs	r3, #0
 80051de:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  __HAL_LOCK(hrtc);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d101      	bne.n	80051ee <HAL_RTC_SetAlarm+0x1e>
 80051ea:	2302      	movs	r3, #2
 80051ec:	e0eb      	b.n	80053c6 <HAL_RTC_SetAlarm+0x1f6>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2201      	movs	r2, #1
 80051f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2202      	movs	r2, #2
 80051fa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80051fe:	4b74      	ldr	r3, [pc, #464]	; (80053d0 <HAL_RTC_SetAlarm+0x200>)
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005206:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800520e:	d06a      	beq.n	80052e6 <HAL_RTC_SetAlarm+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d13a      	bne.n	800528c <HAL_RTC_SetAlarm+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005216:	4b6e      	ldr	r3, [pc, #440]	; (80053d0 <HAL_RTC_SetAlarm+0x200>)
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521e:	2b00      	cmp	r3, #0
 8005220:	d102      	bne.n	8005228 <HAL_RTC_SetAlarm+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	2200      	movs	r2, #0
 8005226:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	4618      	mov	r0, r3
 8005236:	f000 f965 	bl	8005504 <RTC_ByteToBcd2>
 800523a:	4603      	mov	r3, r0
 800523c:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	785b      	ldrb	r3, [r3, #1]
 8005242:	4618      	mov	r0, r3
 8005244:	f000 f95e 	bl	8005504 <RTC_ByteToBcd2>
 8005248:	4603      	mov	r3, r0
 800524a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800524c:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	789b      	ldrb	r3, [r3, #2]
 8005252:	4618      	mov	r0, r3
 8005254:	f000 f956 	bl	8005504 <RTC_ByteToBcd2>
 8005258:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800525a:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	78db      	ldrb	r3, [r3, #3]
 8005262:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005264:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800526e:	4618      	mov	r0, r3
 8005270:	f000 f948 	bl	8005504 <RTC_ByteToBcd2>
 8005274:	4603      	mov	r3, r0
 8005276:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005278:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005280:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005286:	4313      	orrs	r3, r2
 8005288:	617b      	str	r3, [r7, #20]
 800528a:	e02c      	b.n	80052e6 <HAL_RTC_SetAlarm+0x116>
    }
    else /* format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8005294:	d00d      	beq.n	80052b2 <HAL_RTC_SetAlarm+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800529e:	d008      	beq.n	80052b2 <HAL_RTC_SetAlarm+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80052a0:	4b4b      	ldr	r3, [pc, #300]	; (80053d0 <HAL_RTC_SetAlarm+0x200>)
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d102      	bne.n	80052b2 <HAL_RTC_SetAlarm+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	2200      	movs	r2, #0
 80052b0:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	785b      	ldrb	r3, [r3, #1]
 80052bc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80052be:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80052c4:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	78db      	ldrb	r3, [r3, #3]
 80052ca:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80052cc:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80052d4:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80052d6:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80052dc:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80052e2:	4313      	orrs	r3, r2
 80052e4:	617b      	str	r3, [r7, #20]
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80052e6:	4b3a      	ldr	r3, [pc, #232]	; (80053d0 <HAL_RTC_SetAlarm+0x200>)
 80052e8:	22ca      	movs	r2, #202	; 0xca
 80052ea:	625a      	str	r2, [r3, #36]	; 0x24
 80052ec:	4b38      	ldr	r3, [pc, #224]	; (80053d0 <HAL_RTC_SetAlarm+0x200>)
 80052ee:	2253      	movs	r2, #83	; 0x53
 80052f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052fa:	d12c      	bne.n	8005356 <HAL_RTC_SetAlarm+0x186>
  {
    /* Disable the Alarm A interrupt */
    /* In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRAE | RTC_CR_ALRAIE));
 80052fc:	4b34      	ldr	r3, [pc, #208]	; (80053d0 <HAL_RTC_SetAlarm+0x200>)
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	4a33      	ldr	r2, [pc, #204]	; (80053d0 <HAL_RTC_SetAlarm+0x200>)
 8005302:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005306:	6193      	str	r3, [r2, #24]

    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005308:	4b31      	ldr	r3, [pc, #196]	; (80053d0 <HAL_RTC_SetAlarm+0x200>)
 800530a:	2201      	movs	r2, #1
 800530c:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005314:	d107      	bne.n	8005326 <HAL_RTC_SetAlarm+0x156>
    {
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	699a      	ldr	r2, [r3, #24]
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	492c      	ldr	r1, [pc, #176]	; (80053d0 <HAL_RTC_SetAlarm+0x200>)
 8005320:	4313      	orrs	r3, r2
 8005322:	644b      	str	r3, [r1, #68]	; 0x44
 8005324:	e006      	b.n	8005334 <HAL_RTC_SetAlarm+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8005326:	4a2a      	ldr	r2, [pc, #168]	; (80053d0 <HAL_RTC_SetAlarm+0x200>)
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800532c:	4a28      	ldr	r2, [pc, #160]	; (80053d0 <HAL_RTC_SetAlarm+0x200>)
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8005334:	4a26      	ldr	r2, [pc, #152]	; (80053d0 <HAL_RTC_SetAlarm+0x200>)
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005340:	f043 0201 	orr.w	r2, r3, #1
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm state: Enable Alarm */
    SET_BIT(RTC->CR, RTC_CR_ALRAE);
 8005348:	4b21      	ldr	r3, [pc, #132]	; (80053d0 <HAL_RTC_SetAlarm+0x200>)
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	4a20      	ldr	r2, [pc, #128]	; (80053d0 <HAL_RTC_SetAlarm+0x200>)
 800534e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005352:	6193      	str	r3, [r2, #24]
 8005354:	e02b      	b.n	80053ae <HAL_RTC_SetAlarm+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    /* In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRBE | RTC_CR_ALRBIE));
 8005356:	4b1e      	ldr	r3, [pc, #120]	; (80053d0 <HAL_RTC_SetAlarm+0x200>)
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	4a1d      	ldr	r2, [pc, #116]	; (80053d0 <HAL_RTC_SetAlarm+0x200>)
 800535c:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8005360:	6193      	str	r3, [r2, #24]

    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005362:	4b1b      	ldr	r3, [pc, #108]	; (80053d0 <HAL_RTC_SetAlarm+0x200>)
 8005364:	2202      	movs	r2, #2
 8005366:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800536e:	d107      	bne.n	8005380 <HAL_RTC_SetAlarm+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	699a      	ldr	r2, [r3, #24]
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	69db      	ldr	r3, [r3, #28]
 8005378:	4915      	ldr	r1, [pc, #84]	; (80053d0 <HAL_RTC_SetAlarm+0x200>)
 800537a:	4313      	orrs	r3, r2
 800537c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800537e:	e006      	b.n	800538e <HAL_RTC_SetAlarm+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8005380:	4a13      	ldr	r2, [pc, #76]	; (80053d0 <HAL_RTC_SetAlarm+0x200>)
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8005386:	4a12      	ldr	r2, [pc, #72]	; (80053d0 <HAL_RTC_SetAlarm+0x200>)
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800538e:	4a10      	ldr	r2, [pc, #64]	; (80053d0 <HAL_RTC_SetAlarm+0x200>)
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539a:	f043 0202 	orr.w	r2, r3, #2
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm state: Enable Alarm */
    SET_BIT(RTC->CR, RTC_CR_ALRBE);
 80053a2:	4b0b      	ldr	r3, [pc, #44]	; (80053d0 <HAL_RTC_SetAlarm+0x200>)
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	4a0a      	ldr	r2, [pc, #40]	; (80053d0 <HAL_RTC_SetAlarm+0x200>)
 80053a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053ac:	6193      	str	r3, [r2, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053ae:	4b08      	ldr	r3, [pc, #32]	; (80053d0 <HAL_RTC_SetAlarm+0x200>)
 80053b0:	22ff      	movs	r2, #255	; 0xff
 80053b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	371c      	adds	r7, #28
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd90      	pop	{r4, r7, pc}
 80053ce:	bf00      	nop
 80053d0:	40002800 	.word	0x40002800

080053d4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80053dc:	4b0f      	ldr	r3, [pc, #60]	; (800541c <HAL_RTC_WaitForSynchro+0x48>)
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	4a0e      	ldr	r2, [pc, #56]	; (800541c <HAL_RTC_WaitForSynchro+0x48>)
 80053e2:	f023 0320 	bic.w	r3, r3, #32
 80053e6:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80053e8:	f7fc fd3e 	bl	8001e68 <HAL_GetTick>
 80053ec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80053ee:	e009      	b.n	8005404 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80053f0:	f7fc fd3a 	bl	8001e68 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053fe:	d901      	bls.n	8005404 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e006      	b.n	8005412 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005404:	4b05      	ldr	r3, [pc, #20]	; (800541c <HAL_RTC_WaitForSynchro+0x48>)
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	f003 0320 	and.w	r3, r3, #32
 800540c:	2b00      	cmp	r3, #0
 800540e:	d0ef      	beq.n	80053f0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	40002800 	.word	0x40002800

08005420 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005428:	2300      	movs	r3, #0
 800542a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800542c:	4b15      	ldr	r3, [pc, #84]	; (8005484 <RTC_EnterInitMode+0x64>)
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005434:	2b00      	cmp	r3, #0
 8005436:	d120      	bne.n	800547a <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005438:	4b12      	ldr	r3, [pc, #72]	; (8005484 <RTC_EnterInitMode+0x64>)
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	4a11      	ldr	r2, [pc, #68]	; (8005484 <RTC_EnterInitMode+0x64>)
 800543e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005442:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8005444:	f7fc fd10 	bl	8001e68 <HAL_GetTick>
 8005448:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800544a:	e00d      	b.n	8005468 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800544c:	f7fc fd0c 	bl	8001e68 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800545a:	d905      	bls.n	8005468 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2203      	movs	r2, #3
 8005464:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005468:	4b06      	ldr	r3, [pc, #24]	; (8005484 <RTC_EnterInitMode+0x64>)
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005470:	2b00      	cmp	r3, #0
 8005472:	d102      	bne.n	800547a <RTC_EnterInitMode+0x5a>
 8005474:	7bfb      	ldrb	r3, [r7, #15]
 8005476:	2b03      	cmp	r3, #3
 8005478:	d1e8      	bne.n	800544c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800547a:	7bfb      	ldrb	r3, [r7, #15]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	40002800 	.word	0x40002800

08005488 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005490:	2300      	movs	r3, #0
 8005492:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005494:	4b1a      	ldr	r3, [pc, #104]	; (8005500 <RTC_ExitInitMode+0x78>)
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	4a19      	ldr	r2, [pc, #100]	; (8005500 <RTC_ExitInitMode+0x78>)
 800549a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800549e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80054a0:	4b17      	ldr	r3, [pc, #92]	; (8005500 <RTC_ExitInitMode+0x78>)
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	f003 0320 	and.w	r3, r3, #32
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d10c      	bne.n	80054c6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f7ff ff91 	bl	80053d4 <HAL_RTC_WaitForSynchro>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d01e      	beq.n	80054f6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2203      	movs	r2, #3
 80054bc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	73fb      	strb	r3, [r7, #15]
 80054c4:	e017      	b.n	80054f6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80054c6:	4b0e      	ldr	r3, [pc, #56]	; (8005500 <RTC_ExitInitMode+0x78>)
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	4a0d      	ldr	r2, [pc, #52]	; (8005500 <RTC_ExitInitMode+0x78>)
 80054cc:	f023 0320 	bic.w	r3, r3, #32
 80054d0:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7ff ff7e 	bl	80053d4 <HAL_RTC_WaitForSynchro>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d005      	beq.n	80054ea <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2203      	movs	r2, #3
 80054e2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80054ea:	4b05      	ldr	r3, [pc, #20]	; (8005500 <RTC_ExitInitMode+0x78>)
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	4a04      	ldr	r2, [pc, #16]	; (8005500 <RTC_ExitInitMode+0x78>)
 80054f0:	f043 0320 	orr.w	r3, r3, #32
 80054f4:	6193      	str	r3, [r2, #24]
  }

  return status;
 80054f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	40002800 	.word	0x40002800

08005504 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	4603      	mov	r3, r0
 800550c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800550e:	2300      	movs	r3, #0
 8005510:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8005512:	79fb      	ldrb	r3, [r7, #7]
 8005514:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8005516:	e005      	b.n	8005524 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	3301      	adds	r3, #1
 800551c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800551e:	7afb      	ldrb	r3, [r7, #11]
 8005520:	3b0a      	subs	r3, #10
 8005522:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8005524:	7afb      	ldrb	r3, [r7, #11]
 8005526:	2b09      	cmp	r3, #9
 8005528:	d8f6      	bhi.n	8005518 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	b2db      	uxtb	r3, r3
 800552e:	011b      	lsls	r3, r3, #4
 8005530:	b2da      	uxtb	r2, r3
 8005532:	7afb      	ldrb	r3, [r7, #11]
 8005534:	4313      	orrs	r3, r2
 8005536:	b2db      	uxtb	r3, r3
}
 8005538:	4618      	mov	r0, r3
 800553a:	3714      	adds	r7, #20
 800553c:	46bd      	mov	sp, r7
 800553e:	bc80      	pop	{r7}
 8005540:	4770      	bx	lr

08005542 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005542:	b480      	push	{r7}
 8005544:	b085      	sub	sp, #20
 8005546:	af00      	add	r7, sp, #0
 8005548:	4603      	mov	r3, r0
 800554a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 800554c:	79fb      	ldrb	r3, [r7, #7]
 800554e:	091b      	lsrs	r3, r3, #4
 8005550:	b2db      	uxtb	r3, r3
 8005552:	461a      	mov	r2, r3
 8005554:	4613      	mov	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4413      	add	r3, r2
 800555a:	005b      	lsls	r3, r3, #1
 800555c:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	b2da      	uxtb	r2, r3
 8005562:	79fb      	ldrb	r3, [r7, #7]
 8005564:	f003 030f 	and.w	r3, r3, #15
 8005568:	b2db      	uxtb	r3, r3
 800556a:	4413      	add	r3, r2
 800556c:	b2db      	uxtb	r3, r3
}
 800556e:	4618      	mov	r0, r3
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	bc80      	pop	{r7}
 8005576:	4770      	bx	lr

08005578 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d101      	bne.n	800558a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e0c6      	b.n	8005718 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558e:	2b00      	cmp	r3, #0
 8005590:	d108      	bne.n	80055a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800559a:	d009      	beq.n	80055b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	61da      	str	r2, [r3, #28]
 80055a2:	e005      	b.n	80055b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d106      	bne.n	80055ca <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f7fc fa1f 	bl	8001a08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2202      	movs	r2, #2
 80055ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055e0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055ea:	d902      	bls.n	80055f2 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80055ec:	2300      	movs	r3, #0
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	e002      	b.n	80055f8 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80055f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055f6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005600:	d007      	beq.n	8005612 <HAL_SPI_Init+0x9a>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800560a:	d002      	beq.n	8005612 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005622:	431a      	orrs	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	431a      	orrs	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	431a      	orrs	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005640:	431a      	orrs	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800564a:	431a      	orrs	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a1b      	ldr	r3, [r3, #32]
 8005650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005654:	ea42 0103 	orr.w	r1, r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	430a      	orrs	r2, r1
 8005666:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005670:	d11b      	bne.n	80056aa <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10b      	bne.n	8005692 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005682:	d903      	bls.n	800568c <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2202      	movs	r2, #2
 8005688:	631a      	str	r2, [r3, #48]	; 0x30
 800568a:	e002      	b.n	8005692 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005696:	2b02      	cmp	r3, #2
 8005698:	d107      	bne.n	80056aa <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056a8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	0c1b      	lsrs	r3, r3, #16
 80056b0:	f003 0204 	and.w	r2, r3, #4
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b8:	f003 0310 	and.w	r3, r3, #16
 80056bc:	431a      	orrs	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c2:	f003 0308 	and.w	r3, r3, #8
 80056c6:	431a      	orrs	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80056d0:	ea42 0103 	orr.w	r1, r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	430a      	orrs	r2, r1
 80056e0:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ea:	d105      	bne.n	80056f8 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	b292      	uxth	r2, r2
 80056f6:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	69da      	ldr	r2, [r3, #28]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005706:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3710      	adds	r7, #16
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d101      	bne.n	8005732 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e049      	b.n	80057c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005738:	b2db      	uxtb	r3, r3
 800573a:	2b00      	cmp	r3, #0
 800573c:	d106      	bne.n	800574c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f841 	bl	80057ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2202      	movs	r2, #2
 8005750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	3304      	adds	r3, #4
 800575c:	4619      	mov	r1, r3
 800575e:	4610      	mov	r0, r2
 8005760:	f000 f9ce 	bl	8005b00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b083      	sub	sp, #12
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80057d6:	bf00      	nop
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	bc80      	pop	{r7}
 80057de:	4770      	bx	lr

080057e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d001      	beq.n	80057f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e036      	b.n	8005866 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2202      	movs	r2, #2
 80057fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68da      	ldr	r2, [r3, #12]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f042 0201 	orr.w	r2, r2, #1
 800580e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a16      	ldr	r2, [pc, #88]	; (8005870 <HAL_TIM_Base_Start_IT+0x90>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d004      	beq.n	8005824 <HAL_TIM_Base_Start_IT+0x44>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005822:	d115      	bne.n	8005850 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	689a      	ldr	r2, [r3, #8]
 800582a:	4b12      	ldr	r3, [pc, #72]	; (8005874 <HAL_TIM_Base_Start_IT+0x94>)
 800582c:	4013      	ands	r3, r2
 800582e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2b06      	cmp	r3, #6
 8005834:	d015      	beq.n	8005862 <HAL_TIM_Base_Start_IT+0x82>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800583c:	d011      	beq.n	8005862 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f042 0201 	orr.w	r2, r2, #1
 800584c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800584e:	e008      	b.n	8005862 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f042 0201 	orr.w	r2, r2, #1
 800585e:	601a      	str	r2, [r3, #0]
 8005860:	e000      	b.n	8005864 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005862:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	bc80      	pop	{r7}
 800586e:	4770      	bx	lr
 8005870:	40012c00 	.word	0x40012c00
 8005874:	00010007 	.word	0x00010007

08005878 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	f003 0302 	and.w	r3, r3, #2
 800588a:	2b02      	cmp	r3, #2
 800588c:	d122      	bne.n	80058d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	f003 0302 	and.w	r3, r3, #2
 8005898:	2b02      	cmp	r3, #2
 800589a:	d11b      	bne.n	80058d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f06f 0202 	mvn.w	r2, #2
 80058a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2201      	movs	r2, #1
 80058aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	f003 0303 	and.w	r3, r3, #3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f904 	bl	8005ac8 <HAL_TIM_IC_CaptureCallback>
 80058c0:	e005      	b.n	80058ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f8f7 	bl	8005ab6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 f906 	bl	8005ada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	f003 0304 	and.w	r3, r3, #4
 80058de:	2b04      	cmp	r3, #4
 80058e0:	d122      	bne.n	8005928 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	f003 0304 	and.w	r3, r3, #4
 80058ec:	2b04      	cmp	r3, #4
 80058ee:	d11b      	bne.n	8005928 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f06f 0204 	mvn.w	r2, #4
 80058f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2202      	movs	r2, #2
 80058fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800590a:	2b00      	cmp	r3, #0
 800590c:	d003      	beq.n	8005916 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f8da 	bl	8005ac8 <HAL_TIM_IC_CaptureCallback>
 8005914:	e005      	b.n	8005922 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f8cd 	bl	8005ab6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 f8dc 	bl	8005ada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	f003 0308 	and.w	r3, r3, #8
 8005932:	2b08      	cmp	r3, #8
 8005934:	d122      	bne.n	800597c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	f003 0308 	and.w	r3, r3, #8
 8005940:	2b08      	cmp	r3, #8
 8005942:	d11b      	bne.n	800597c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f06f 0208 	mvn.w	r2, #8
 800594c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2204      	movs	r2, #4
 8005952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	f003 0303 	and.w	r3, r3, #3
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f8b0 	bl	8005ac8 <HAL_TIM_IC_CaptureCallback>
 8005968:	e005      	b.n	8005976 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f8a3 	bl	8005ab6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 f8b2 	bl	8005ada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	f003 0310 	and.w	r3, r3, #16
 8005986:	2b10      	cmp	r3, #16
 8005988:	d122      	bne.n	80059d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	f003 0310 	and.w	r3, r3, #16
 8005994:	2b10      	cmp	r3, #16
 8005996:	d11b      	bne.n	80059d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f06f 0210 	mvn.w	r2, #16
 80059a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2208      	movs	r2, #8
 80059a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f886 	bl	8005ac8 <HAL_TIM_IC_CaptureCallback>
 80059bc:	e005      	b.n	80059ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f879 	bl	8005ab6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 f888 	bl	8005ada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d10e      	bne.n	80059fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f003 0301 	and.w	r3, r3, #1
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d107      	bne.n	80059fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f06f 0201 	mvn.w	r2, #1
 80059f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7fb fe3c 	bl	8001674 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a06:	2b80      	cmp	r3, #128	; 0x80
 8005a08:	d10e      	bne.n	8005a28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a14:	2b80      	cmp	r3, #128	; 0x80
 8005a16:	d107      	bne.n	8005a28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f8d7 	bl	8005bd6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a36:	d10e      	bne.n	8005a56 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a42:	2b80      	cmp	r3, #128	; 0x80
 8005a44:	d107      	bne.n	8005a56 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f8c9 	bl	8005be8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a60:	2b40      	cmp	r3, #64	; 0x40
 8005a62:	d10e      	bne.n	8005a82 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6e:	2b40      	cmp	r3, #64	; 0x40
 8005a70:	d107      	bne.n	8005a82 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 f835 	bl	8005aec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	f003 0320 	and.w	r3, r3, #32
 8005a8c:	2b20      	cmp	r3, #32
 8005a8e:	d10e      	bne.n	8005aae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	f003 0320 	and.w	r3, r3, #32
 8005a9a:	2b20      	cmp	r3, #32
 8005a9c:	d107      	bne.n	8005aae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f06f 0220 	mvn.w	r2, #32
 8005aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 f88b 	bl	8005bc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005aae:	bf00      	nop
 8005ab0:	3708      	adds	r7, #8
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b083      	sub	sp, #12
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005abe:	bf00      	nop
 8005ac0:	370c      	adds	r7, #12
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bc80      	pop	{r7}
 8005ac6:	4770      	bx	lr

08005ac8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ad0:	bf00      	nop
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bc80      	pop	{r7}
 8005ad8:	4770      	bx	lr

08005ada <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ada:	b480      	push	{r7}
 8005adc:	b083      	sub	sp, #12
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ae2:	bf00      	nop
 8005ae4:	370c      	adds	r7, #12
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bc80      	pop	{r7}
 8005aea:	4770      	bx	lr

08005aec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bc80      	pop	{r7}
 8005afc:	4770      	bx	lr
	...

08005b00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a29      	ldr	r2, [pc, #164]	; (8005bb8 <TIM_Base_SetConfig+0xb8>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d003      	beq.n	8005b20 <TIM_Base_SetConfig+0x20>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b1e:	d108      	bne.n	8005b32 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a20      	ldr	r2, [pc, #128]	; (8005bb8 <TIM_Base_SetConfig+0xb8>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d00b      	beq.n	8005b52 <TIM_Base_SetConfig+0x52>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b40:	d007      	beq.n	8005b52 <TIM_Base_SetConfig+0x52>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a1d      	ldr	r2, [pc, #116]	; (8005bbc <TIM_Base_SetConfig+0xbc>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d003      	beq.n	8005b52 <TIM_Base_SetConfig+0x52>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a1c      	ldr	r2, [pc, #112]	; (8005bc0 <TIM_Base_SetConfig+0xc0>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d108      	bne.n	8005b64 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	689a      	ldr	r2, [r3, #8]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a0b      	ldr	r2, [pc, #44]	; (8005bb8 <TIM_Base_SetConfig+0xb8>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d007      	beq.n	8005ba0 <TIM_Base_SetConfig+0xa0>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a0a      	ldr	r2, [pc, #40]	; (8005bbc <TIM_Base_SetConfig+0xbc>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d003      	beq.n	8005ba0 <TIM_Base_SetConfig+0xa0>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a09      	ldr	r2, [pc, #36]	; (8005bc0 <TIM_Base_SetConfig+0xc0>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d103      	bne.n	8005ba8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	691a      	ldr	r2, [r3, #16]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	615a      	str	r2, [r3, #20]
}
 8005bae:	bf00      	nop
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bc80      	pop	{r7}
 8005bb6:	4770      	bx	lr
 8005bb8:	40012c00 	.word	0x40012c00
 8005bbc:	40014400 	.word	0x40014400
 8005bc0:	40014800 	.word	0x40014800

08005bc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bcc:	bf00      	nop
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bc80      	pop	{r7}
 8005bd4:	4770      	bx	lr

08005bd6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b083      	sub	sp, #12
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bde:	bf00      	nop
 8005be0:	370c      	adds	r7, #12
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bc80      	pop	{r7}
 8005be6:	4770      	bx	lr

08005be8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bc80      	pop	{r7}
 8005bf8:	4770      	bx	lr

08005bfa <LL_RCC_GetUSARTClockSource>:
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b083      	sub	sp, #12
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8005c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c06:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	401a      	ands	r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	041b      	lsls	r3, r3, #16
 8005c12:	4313      	orrs	r3, r2
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bc80      	pop	{r7}
 8005c1c:	4770      	bx	lr

08005c1e <LL_RCC_GetLPUARTClockSource>:
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b083      	sub	sp, #12
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c2a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4013      	ands	r3, r2
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bc80      	pop	{r7}
 8005c3a:	4770      	bx	lr

08005c3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d101      	bne.n	8005c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e042      	b.n	8005cd4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d106      	bne.n	8005c66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f7fb fe21 	bl	80018a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2224      	movs	r2, #36	; 0x24
 8005c6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f022 0201 	bic.w	r2, r2, #1
 8005c7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 fc98 	bl	80065b4 <UART_SetConfig>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d101      	bne.n	8005c8e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e022      	b.n	8005cd4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d002      	beq.n	8005c9c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 ff00 	bl	8006a9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685a      	ldr	r2, [r3, #4]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005caa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689a      	ldr	r2, [r3, #8]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f042 0201 	orr.w	r2, r2, #1
 8005cca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 ff86 	bl	8006bde <UART_CheckIdleState>
 8005cd2:	4603      	mov	r3, r0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3708      	adds	r7, #8
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e04a      	b.n	8005d84 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d106      	bne.n	8005d06 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f7fb fdd1 	bl	80018a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2224      	movs	r2, #36	; 0x24
 8005d0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 0201 	bic.w	r2, r2, #1
 8005d1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 fc48 	bl	80065b4 <UART_SetConfig>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d101      	bne.n	8005d2e <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e02a      	b.n	8005d84 <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d002      	beq.n	8005d3c <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 feb0 	bl	8006a9c <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	685a      	ldr	r2, [r3, #4]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	689a      	ldr	r2, [r3, #8]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8005d5a:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	689a      	ldr	r2, [r3, #8]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f042 0208 	orr.w	r2, r2, #8
 8005d6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f042 0201 	orr.w	r2, r2, #1
 8005d7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 ff2e 	bl	8006bde <UART_CheckIdleState>
 8005d82:	4603      	mov	r3, r0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3708      	adds	r7, #8
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b08a      	sub	sp, #40	; 0x28
 8005d90:	af02      	add	r7, sp, #8
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	603b      	str	r3, [r7, #0]
 8005d98:	4613      	mov	r3, r2
 8005d9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da2:	2b20      	cmp	r3, #32
 8005da4:	d173      	bne.n	8005e8e <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d002      	beq.n	8005db2 <HAL_UART_Transmit+0x26>
 8005dac:	88fb      	ldrh	r3, [r7, #6]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d101      	bne.n	8005db6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e06c      	b.n	8005e90 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2221      	movs	r2, #33	; 0x21
 8005dc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005dc6:	f7fc f84f 	bl	8001e68 <HAL_GetTick>
 8005dca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	88fa      	ldrh	r2, [r7, #6]
 8005dd0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	88fa      	ldrh	r2, [r7, #6]
 8005dd8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005de4:	d108      	bne.n	8005df8 <HAL_UART_Transmit+0x6c>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d104      	bne.n	8005df8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005dee:	2300      	movs	r3, #0
 8005df0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	61bb      	str	r3, [r7, #24]
 8005df6:	e003      	b.n	8005e00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e00:	e02c      	b.n	8005e5c <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	9300      	str	r3, [sp, #0]
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	2180      	movs	r1, #128	; 0x80
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f000 ff34 	bl	8006c7a <UART_WaitOnFlagUntilTimeout>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e039      	b.n	8005e90 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10b      	bne.n	8005e3a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	881b      	ldrh	r3, [r3, #0]
 8005e26:	461a      	mov	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e30:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	3302      	adds	r3, #2
 8005e36:	61bb      	str	r3, [r7, #24]
 8005e38:	e007      	b.n	8005e4a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	781a      	ldrb	r2, [r3, #0]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	3301      	adds	r3, #1
 8005e48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	3b01      	subs	r3, #1
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1cc      	bne.n	8005e02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	9300      	str	r3, [sp, #0]
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	2140      	movs	r1, #64	; 0x40
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	f000 ff01 	bl	8006c7a <UART_WaitOnFlagUntilTimeout>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d001      	beq.n	8005e82 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e006      	b.n	8005e90 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2220      	movs	r2, #32
 8005e86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	e000      	b.n	8005e90 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8005e8e:	2302      	movs	r3, #2
  }
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3720      	adds	r7, #32
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b08a      	sub	sp, #40	; 0x28
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005eac:	2b20      	cmp	r3, #32
 8005eae:	d137      	bne.n	8005f20 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d002      	beq.n	8005ebc <HAL_UART_Receive_IT+0x24>
 8005eb6:	88fb      	ldrh	r3, [r7, #6]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d101      	bne.n	8005ec0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e030      	b.n	8005f22 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a18      	ldr	r2, [pc, #96]	; (8005f2c <HAL_UART_Receive_IT+0x94>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d01f      	beq.n	8005f10 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d018      	beq.n	8005f10 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	e853 3f00 	ldrex	r3, [r3]
 8005eea:	613b      	str	r3, [r7, #16]
   return(result);
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	461a      	mov	r2, r3
 8005efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efc:	623b      	str	r3, [r7, #32]
 8005efe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f00:	69f9      	ldr	r1, [r7, #28]
 8005f02:	6a3a      	ldr	r2, [r7, #32]
 8005f04:	e841 2300 	strex	r3, r2, [r1]
 8005f08:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1e6      	bne.n	8005ede <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005f10:	88fb      	ldrh	r3, [r7, #6]
 8005f12:	461a      	mov	r2, r3
 8005f14:	68b9      	ldr	r1, [r7, #8]
 8005f16:	68f8      	ldr	r0, [r7, #12]
 8005f18:	f000 ff78 	bl	8006e0c <UART_Start_Receive_IT>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	e000      	b.n	8005f22 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005f20:	2302      	movs	r3, #2
  }
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3728      	adds	r7, #40	; 0x28
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	40008000 	.word	0x40008000

08005f30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b0ba      	sub	sp, #232	; 0xe8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	69db      	ldr	r3, [r3, #28]
 8005f3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005f56:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005f5a:	f640 030f 	movw	r3, #2063	; 0x80f
 8005f5e:	4013      	ands	r3, r2
 8005f60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005f64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d11b      	bne.n	8005fa4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f70:	f003 0320 	and.w	r3, r3, #32
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d015      	beq.n	8005fa4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005f78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f7c:	f003 0320 	and.w	r3, r3, #32
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d105      	bne.n	8005f90 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005f84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d009      	beq.n	8005fa4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f000 82e3 	beq.w	8006560 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	4798      	blx	r3
      }
      return;
 8005fa2:	e2dd      	b.n	8006560 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005fa4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f000 8123 	beq.w	80061f4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005fae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005fb2:	4b8d      	ldr	r3, [pc, #564]	; (80061e8 <HAL_UART_IRQHandler+0x2b8>)
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d106      	bne.n	8005fc8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005fba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005fbe:	4b8b      	ldr	r3, [pc, #556]	; (80061ec <HAL_UART_IRQHandler+0x2bc>)
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	f000 8116 	beq.w	80061f4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fcc:	f003 0301 	and.w	r3, r3, #1
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d011      	beq.n	8005ff8 <HAL_UART_IRQHandler+0xc8>
 8005fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00b      	beq.n	8005ff8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fee:	f043 0201 	orr.w	r2, r3, #1
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ffc:	f003 0302 	and.w	r3, r3, #2
 8006000:	2b00      	cmp	r3, #0
 8006002:	d011      	beq.n	8006028 <HAL_UART_IRQHandler+0xf8>
 8006004:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006008:	f003 0301 	and.w	r3, r3, #1
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00b      	beq.n	8006028 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2202      	movs	r2, #2
 8006016:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800601e:	f043 0204 	orr.w	r2, r3, #4
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800602c:	f003 0304 	and.w	r3, r3, #4
 8006030:	2b00      	cmp	r3, #0
 8006032:	d011      	beq.n	8006058 <HAL_UART_IRQHandler+0x128>
 8006034:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006038:	f003 0301 	and.w	r3, r3, #1
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00b      	beq.n	8006058 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2204      	movs	r2, #4
 8006046:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800604e:	f043 0202 	orr.w	r2, r3, #2
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800605c:	f003 0308 	and.w	r3, r3, #8
 8006060:	2b00      	cmp	r3, #0
 8006062:	d017      	beq.n	8006094 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006068:	f003 0320 	and.w	r3, r3, #32
 800606c:	2b00      	cmp	r3, #0
 800606e:	d105      	bne.n	800607c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006070:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006074:	4b5c      	ldr	r3, [pc, #368]	; (80061e8 <HAL_UART_IRQHandler+0x2b8>)
 8006076:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00b      	beq.n	8006094 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2208      	movs	r2, #8
 8006082:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800608a:	f043 0208 	orr.w	r2, r3, #8
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006098:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800609c:	2b00      	cmp	r3, #0
 800609e:	d012      	beq.n	80060c6 <HAL_UART_IRQHandler+0x196>
 80060a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00c      	beq.n	80060c6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060bc:	f043 0220 	orr.w	r2, r3, #32
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f000 8249 	beq.w	8006564 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80060d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060d6:	f003 0320 	and.w	r3, r3, #32
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d013      	beq.n	8006106 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80060de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060e2:	f003 0320 	and.w	r3, r3, #32
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d105      	bne.n	80060f6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80060ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d007      	beq.n	8006106 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d003      	beq.n	8006106 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800610c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800611a:	2b40      	cmp	r3, #64	; 0x40
 800611c:	d005      	beq.n	800612a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800611e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006122:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006126:	2b00      	cmp	r3, #0
 8006128:	d054      	beq.n	80061d4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 ff8e 	bl	800704c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800613a:	2b40      	cmp	r3, #64	; 0x40
 800613c:	d146      	bne.n	80061cc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	3308      	adds	r3, #8
 8006144:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006148:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800614c:	e853 3f00 	ldrex	r3, [r3]
 8006150:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006154:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006158:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800615c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	3308      	adds	r3, #8
 8006166:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800616a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800616e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006172:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006176:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800617a:	e841 2300 	strex	r3, r2, [r1]
 800617e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006182:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1d9      	bne.n	800613e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006190:	2b00      	cmp	r3, #0
 8006192:	d017      	beq.n	80061c4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800619a:	4a15      	ldr	r2, [pc, #84]	; (80061f0 <HAL_UART_IRQHandler+0x2c0>)
 800619c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7fc ff9e 	bl	80030e6 <HAL_DMA_Abort_IT>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d019      	beq.n	80061e4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80061be:	4610      	mov	r0, r2
 80061c0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061c2:	e00f      	b.n	80061e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 f9e0 	bl	800658a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061ca:	e00b      	b.n	80061e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 f9dc 	bl	800658a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061d2:	e007      	b.n	80061e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 f9d8 	bl	800658a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80061e2:	e1bf      	b.n	8006564 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061e4:	bf00      	nop
    return;
 80061e6:	e1bd      	b.n	8006564 <HAL_UART_IRQHandler+0x634>
 80061e8:	10000001 	.word	0x10000001
 80061ec:	04000120 	.word	0x04000120
 80061f0:	08007117 	.word	0x08007117

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	f040 8153 	bne.w	80064a4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80061fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006202:	f003 0310 	and.w	r3, r3, #16
 8006206:	2b00      	cmp	r3, #0
 8006208:	f000 814c 	beq.w	80064a4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800620c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006210:	f003 0310 	and.w	r3, r3, #16
 8006214:	2b00      	cmp	r3, #0
 8006216:	f000 8145 	beq.w	80064a4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2210      	movs	r2, #16
 8006220:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800622c:	2b40      	cmp	r3, #64	; 0x40
 800622e:	f040 80bb 	bne.w	80063a8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006240:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006244:	2b00      	cmp	r3, #0
 8006246:	f000 818f 	beq.w	8006568 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006250:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006254:	429a      	cmp	r2, r3
 8006256:	f080 8187 	bcs.w	8006568 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006260:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0320 	and.w	r3, r3, #32
 8006272:	2b00      	cmp	r3, #0
 8006274:	f040 8087 	bne.w	8006386 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006280:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006284:	e853 3f00 	ldrex	r3, [r3]
 8006288:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800628c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006294:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	461a      	mov	r2, r3
 800629e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80062a6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80062ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80062b2:	e841 2300 	strex	r3, r2, [r1]
 80062b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80062ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1da      	bne.n	8006278 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	3308      	adds	r3, #8
 80062c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062cc:	e853 3f00 	ldrex	r3, [r3]
 80062d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80062d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062d4:	f023 0301 	bic.w	r3, r3, #1
 80062d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	3308      	adds	r3, #8
 80062e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80062e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80062ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80062ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80062f2:	e841 2300 	strex	r3, r2, [r1]
 80062f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80062f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1e1      	bne.n	80062c2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	3308      	adds	r3, #8
 8006304:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006306:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006308:	e853 3f00 	ldrex	r3, [r3]
 800630c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800630e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006310:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006314:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	3308      	adds	r3, #8
 800631e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006322:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006324:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006326:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006328:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800632a:	e841 2300 	strex	r3, r2, [r1]
 800632e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006330:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1e3      	bne.n	80062fe <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2220      	movs	r2, #32
 800633a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800634c:	e853 3f00 	ldrex	r3, [r3]
 8006350:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006354:	f023 0310 	bic.w	r3, r3, #16
 8006358:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	461a      	mov	r2, r3
 8006362:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006366:	65bb      	str	r3, [r7, #88]	; 0x58
 8006368:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800636c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800636e:	e841 2300 	strex	r3, r2, [r1]
 8006372:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006374:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1e4      	bne.n	8006344 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006380:	4618      	mov	r0, r3
 8006382:	f7fc fe52 	bl	800302a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2202      	movs	r2, #2
 800638a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006398:	b29b      	uxth	r3, r3
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	b29b      	uxth	r3, r3
 800639e:	4619      	mov	r1, r3
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 f8fb 	bl	800659c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80063a6:	e0df      	b.n	8006568 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f000 80d1 	beq.w	800656c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80063ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f000 80cc 	beq.w	800656c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063dc:	e853 3f00 	ldrex	r3, [r3]
 80063e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80063e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	461a      	mov	r2, r3
 80063f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80063f6:	647b      	str	r3, [r7, #68]	; 0x44
 80063f8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063fe:	e841 2300 	strex	r3, r2, [r1]
 8006402:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1e4      	bne.n	80063d4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	3308      	adds	r3, #8
 8006410:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006414:	e853 3f00 	ldrex	r3, [r3]
 8006418:	623b      	str	r3, [r7, #32]
   return(result);
 800641a:	6a3b      	ldr	r3, [r7, #32]
 800641c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006420:	f023 0301 	bic.w	r3, r3, #1
 8006424:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	3308      	adds	r3, #8
 800642e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006432:	633a      	str	r2, [r7, #48]	; 0x30
 8006434:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006436:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800643a:	e841 2300 	strex	r3, r2, [r1]
 800643e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1e1      	bne.n	800640a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2220      	movs	r2, #32
 800644a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	e853 3f00 	ldrex	r3, [r3]
 8006466:	60fb      	str	r3, [r7, #12]
   return(result);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f023 0310 	bic.w	r3, r3, #16
 800646e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	461a      	mov	r2, r3
 8006478:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800647c:	61fb      	str	r3, [r7, #28]
 800647e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006480:	69b9      	ldr	r1, [r7, #24]
 8006482:	69fa      	ldr	r2, [r7, #28]
 8006484:	e841 2300 	strex	r3, r2, [r1]
 8006488:	617b      	str	r3, [r7, #20]
   return(result);
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1e4      	bne.n	800645a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2202      	movs	r2, #2
 8006494:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006496:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800649a:	4619      	mov	r1, r3
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 f87d 	bl	800659c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80064a2:	e063      	b.n	800656c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80064a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00e      	beq.n	80064ce <HAL_UART_IRQHandler+0x59e>
 80064b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d008      	beq.n	80064ce <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80064c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f001 fb82 	bl	8007bd0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80064cc:	e051      	b.n	8006572 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80064ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d014      	beq.n	8006504 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80064da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d105      	bne.n	80064f2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80064e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d008      	beq.n	8006504 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d03a      	beq.n	8006570 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	4798      	blx	r3
    }
    return;
 8006502:	e035      	b.n	8006570 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800650c:	2b00      	cmp	r3, #0
 800650e:	d009      	beq.n	8006524 <HAL_UART_IRQHandler+0x5f4>
 8006510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006518:	2b00      	cmp	r3, #0
 800651a:	d003      	beq.n	8006524 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 fe10 	bl	8007142 <UART_EndTransmit_IT>
    return;
 8006522:	e026      	b.n	8006572 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006528:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d009      	beq.n	8006544 <HAL_UART_IRQHandler+0x614>
 8006530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006534:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d003      	beq.n	8006544 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f001 fb59 	bl	8007bf4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006542:	e016      	b.n	8006572 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006548:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800654c:	2b00      	cmp	r3, #0
 800654e:	d010      	beq.n	8006572 <HAL_UART_IRQHandler+0x642>
 8006550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006554:	2b00      	cmp	r3, #0
 8006556:	da0c      	bge.n	8006572 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f001 fb42 	bl	8007be2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800655e:	e008      	b.n	8006572 <HAL_UART_IRQHandler+0x642>
      return;
 8006560:	bf00      	nop
 8006562:	e006      	b.n	8006572 <HAL_UART_IRQHandler+0x642>
    return;
 8006564:	bf00      	nop
 8006566:	e004      	b.n	8006572 <HAL_UART_IRQHandler+0x642>
      return;
 8006568:	bf00      	nop
 800656a:	e002      	b.n	8006572 <HAL_UART_IRQHandler+0x642>
      return;
 800656c:	bf00      	nop
 800656e:	e000      	b.n	8006572 <HAL_UART_IRQHandler+0x642>
    return;
 8006570:	bf00      	nop
  }
}
 8006572:	37e8      	adds	r7, #232	; 0xe8
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	bc80      	pop	{r7}
 8006588:	4770      	bx	lr

0800658a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800658a:	b480      	push	{r7}
 800658c:	b083      	sub	sp, #12
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006592:	bf00      	nop
 8006594:	370c      	adds	r7, #12
 8006596:	46bd      	mov	sp, r7
 8006598:	bc80      	pop	{r7}
 800659a:	4770      	bx	lr

0800659c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	460b      	mov	r3, r1
 80065a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bc80      	pop	{r7}
 80065b0:	4770      	bx	lr
	...

080065b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065b8:	b08c      	sub	sp, #48	; 0x30
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065be:	2300      	movs	r3, #0
 80065c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	689a      	ldr	r2, [r3, #8]
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	431a      	orrs	r2, r3
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	431a      	orrs	r2, r3
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	69db      	ldr	r3, [r3, #28]
 80065d8:	4313      	orrs	r3, r2
 80065da:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	4b94      	ldr	r3, [pc, #592]	; (8006834 <UART_SetConfig+0x280>)
 80065e4:	4013      	ands	r3, r2
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	6812      	ldr	r2, [r2, #0]
 80065ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065ec:	430b      	orrs	r3, r1
 80065ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	68da      	ldr	r2, [r3, #12]
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	430a      	orrs	r2, r1
 8006604:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a89      	ldr	r2, [pc, #548]	; (8006838 <UART_SetConfig+0x284>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d004      	beq.n	8006620 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800661c:	4313      	orrs	r3, r2
 800661e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800662a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	6812      	ldr	r2, [r2, #0]
 8006632:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006634:	430b      	orrs	r3, r1
 8006636:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663e:	f023 010f 	bic.w	r1, r3, #15
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	430a      	orrs	r2, r1
 800664c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a7a      	ldr	r2, [pc, #488]	; (800683c <UART_SetConfig+0x288>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d127      	bne.n	80066a8 <UART_SetConfig+0xf4>
 8006658:	2003      	movs	r0, #3
 800665a:	f7ff face 	bl	8005bfa <LL_RCC_GetUSARTClockSource>
 800665e:	4603      	mov	r3, r0
 8006660:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8006664:	2b03      	cmp	r3, #3
 8006666:	d81b      	bhi.n	80066a0 <UART_SetConfig+0xec>
 8006668:	a201      	add	r2, pc, #4	; (adr r2, 8006670 <UART_SetConfig+0xbc>)
 800666a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800666e:	bf00      	nop
 8006670:	08006681 	.word	0x08006681
 8006674:	08006691 	.word	0x08006691
 8006678:	08006689 	.word	0x08006689
 800667c:	08006699 	.word	0x08006699
 8006680:	2301      	movs	r3, #1
 8006682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006686:	e080      	b.n	800678a <UART_SetConfig+0x1d6>
 8006688:	2302      	movs	r3, #2
 800668a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800668e:	e07c      	b.n	800678a <UART_SetConfig+0x1d6>
 8006690:	2304      	movs	r3, #4
 8006692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006696:	e078      	b.n	800678a <UART_SetConfig+0x1d6>
 8006698:	2308      	movs	r3, #8
 800669a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800669e:	e074      	b.n	800678a <UART_SetConfig+0x1d6>
 80066a0:	2310      	movs	r3, #16
 80066a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066a6:	e070      	b.n	800678a <UART_SetConfig+0x1d6>
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a64      	ldr	r2, [pc, #400]	; (8006840 <UART_SetConfig+0x28c>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d138      	bne.n	8006724 <UART_SetConfig+0x170>
 80066b2:	200c      	movs	r0, #12
 80066b4:	f7ff faa1 	bl	8005bfa <LL_RCC_GetUSARTClockSource>
 80066b8:	4603      	mov	r3, r0
 80066ba:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80066be:	2b0c      	cmp	r3, #12
 80066c0:	d82c      	bhi.n	800671c <UART_SetConfig+0x168>
 80066c2:	a201      	add	r2, pc, #4	; (adr r2, 80066c8 <UART_SetConfig+0x114>)
 80066c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c8:	080066fd 	.word	0x080066fd
 80066cc:	0800671d 	.word	0x0800671d
 80066d0:	0800671d 	.word	0x0800671d
 80066d4:	0800671d 	.word	0x0800671d
 80066d8:	0800670d 	.word	0x0800670d
 80066dc:	0800671d 	.word	0x0800671d
 80066e0:	0800671d 	.word	0x0800671d
 80066e4:	0800671d 	.word	0x0800671d
 80066e8:	08006705 	.word	0x08006705
 80066ec:	0800671d 	.word	0x0800671d
 80066f0:	0800671d 	.word	0x0800671d
 80066f4:	0800671d 	.word	0x0800671d
 80066f8:	08006715 	.word	0x08006715
 80066fc:	2300      	movs	r3, #0
 80066fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006702:	e042      	b.n	800678a <UART_SetConfig+0x1d6>
 8006704:	2302      	movs	r3, #2
 8006706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800670a:	e03e      	b.n	800678a <UART_SetConfig+0x1d6>
 800670c:	2304      	movs	r3, #4
 800670e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006712:	e03a      	b.n	800678a <UART_SetConfig+0x1d6>
 8006714:	2308      	movs	r3, #8
 8006716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800671a:	e036      	b.n	800678a <UART_SetConfig+0x1d6>
 800671c:	2310      	movs	r3, #16
 800671e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006722:	e032      	b.n	800678a <UART_SetConfig+0x1d6>
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a43      	ldr	r2, [pc, #268]	; (8006838 <UART_SetConfig+0x284>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d12a      	bne.n	8006784 <UART_SetConfig+0x1d0>
 800672e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8006732:	f7ff fa74 	bl	8005c1e <LL_RCC_GetLPUARTClockSource>
 8006736:	4603      	mov	r3, r0
 8006738:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800673c:	d01a      	beq.n	8006774 <UART_SetConfig+0x1c0>
 800673e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006742:	d81b      	bhi.n	800677c <UART_SetConfig+0x1c8>
 8006744:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006748:	d00c      	beq.n	8006764 <UART_SetConfig+0x1b0>
 800674a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800674e:	d815      	bhi.n	800677c <UART_SetConfig+0x1c8>
 8006750:	2b00      	cmp	r3, #0
 8006752:	d003      	beq.n	800675c <UART_SetConfig+0x1a8>
 8006754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006758:	d008      	beq.n	800676c <UART_SetConfig+0x1b8>
 800675a:	e00f      	b.n	800677c <UART_SetConfig+0x1c8>
 800675c:	2300      	movs	r3, #0
 800675e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006762:	e012      	b.n	800678a <UART_SetConfig+0x1d6>
 8006764:	2302      	movs	r3, #2
 8006766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800676a:	e00e      	b.n	800678a <UART_SetConfig+0x1d6>
 800676c:	2304      	movs	r3, #4
 800676e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006772:	e00a      	b.n	800678a <UART_SetConfig+0x1d6>
 8006774:	2308      	movs	r3, #8
 8006776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800677a:	e006      	b.n	800678a <UART_SetConfig+0x1d6>
 800677c:	2310      	movs	r3, #16
 800677e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006782:	e002      	b.n	800678a <UART_SetConfig+0x1d6>
 8006784:	2310      	movs	r3, #16
 8006786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a2a      	ldr	r2, [pc, #168]	; (8006838 <UART_SetConfig+0x284>)
 8006790:	4293      	cmp	r3, r2
 8006792:	f040 80a4 	bne.w	80068de <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006796:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800679a:	2b08      	cmp	r3, #8
 800679c:	d823      	bhi.n	80067e6 <UART_SetConfig+0x232>
 800679e:	a201      	add	r2, pc, #4	; (adr r2, 80067a4 <UART_SetConfig+0x1f0>)
 80067a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a4:	080067c9 	.word	0x080067c9
 80067a8:	080067e7 	.word	0x080067e7
 80067ac:	080067d1 	.word	0x080067d1
 80067b0:	080067e7 	.word	0x080067e7
 80067b4:	080067d7 	.word	0x080067d7
 80067b8:	080067e7 	.word	0x080067e7
 80067bc:	080067e7 	.word	0x080067e7
 80067c0:	080067e7 	.word	0x080067e7
 80067c4:	080067df 	.word	0x080067df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067c8:	f7fd ff8c 	bl	80046e4 <HAL_RCC_GetPCLK1Freq>
 80067cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80067ce:	e010      	b.n	80067f2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067d0:	4b1c      	ldr	r3, [pc, #112]	; (8006844 <UART_SetConfig+0x290>)
 80067d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80067d4:	e00d      	b.n	80067f2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067d6:	f7fd fed1 	bl	800457c <HAL_RCC_GetSysClockFreq>
 80067da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80067dc:	e009      	b.n	80067f2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80067e4:	e005      	b.n	80067f2 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80067e6:	2300      	movs	r3, #0
 80067e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80067f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80067f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 8137 	beq.w	8006a68 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fe:	4a12      	ldr	r2, [pc, #72]	; (8006848 <UART_SetConfig+0x294>)
 8006800:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006804:	461a      	mov	r2, r3
 8006806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006808:	fbb3 f3f2 	udiv	r3, r3, r2
 800680c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	685a      	ldr	r2, [r3, #4]
 8006812:	4613      	mov	r3, r2
 8006814:	005b      	lsls	r3, r3, #1
 8006816:	4413      	add	r3, r2
 8006818:	69ba      	ldr	r2, [r7, #24]
 800681a:	429a      	cmp	r2, r3
 800681c:	d305      	bcc.n	800682a <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006824:	69ba      	ldr	r2, [r7, #24]
 8006826:	429a      	cmp	r2, r3
 8006828:	d910      	bls.n	800684c <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006830:	e11a      	b.n	8006a68 <UART_SetConfig+0x4b4>
 8006832:	bf00      	nop
 8006834:	cfff69f3 	.word	0xcfff69f3
 8006838:	40008000 	.word	0x40008000
 800683c:	40013800 	.word	0x40013800
 8006840:	40004400 	.word	0x40004400
 8006844:	00f42400 	.word	0x00f42400
 8006848:	0800dfb0 	.word	0x0800dfb0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800684c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684e:	2200      	movs	r2, #0
 8006850:	60bb      	str	r3, [r7, #8]
 8006852:	60fa      	str	r2, [r7, #12]
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006858:	4a8e      	ldr	r2, [pc, #568]	; (8006a94 <UART_SetConfig+0x4e0>)
 800685a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800685e:	b29b      	uxth	r3, r3
 8006860:	2200      	movs	r2, #0
 8006862:	603b      	str	r3, [r7, #0]
 8006864:	607a      	str	r2, [r7, #4]
 8006866:	e9d7 2300 	ldrd	r2, r3, [r7]
 800686a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800686e:	f7fa f9c3 	bl	8000bf8 <__aeabi_uldivmod>
 8006872:	4602      	mov	r2, r0
 8006874:	460b      	mov	r3, r1
 8006876:	4610      	mov	r0, r2
 8006878:	4619      	mov	r1, r3
 800687a:	f04f 0200 	mov.w	r2, #0
 800687e:	f04f 0300 	mov.w	r3, #0
 8006882:	020b      	lsls	r3, r1, #8
 8006884:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006888:	0202      	lsls	r2, r0, #8
 800688a:	6979      	ldr	r1, [r7, #20]
 800688c:	6849      	ldr	r1, [r1, #4]
 800688e:	0849      	lsrs	r1, r1, #1
 8006890:	2000      	movs	r0, #0
 8006892:	460c      	mov	r4, r1
 8006894:	4605      	mov	r5, r0
 8006896:	eb12 0804 	adds.w	r8, r2, r4
 800689a:	eb43 0905 	adc.w	r9, r3, r5
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	469a      	mov	sl, r3
 80068a6:	4693      	mov	fp, r2
 80068a8:	4652      	mov	r2, sl
 80068aa:	465b      	mov	r3, fp
 80068ac:	4640      	mov	r0, r8
 80068ae:	4649      	mov	r1, r9
 80068b0:	f7fa f9a2 	bl	8000bf8 <__aeabi_uldivmod>
 80068b4:	4602      	mov	r2, r0
 80068b6:	460b      	mov	r3, r1
 80068b8:	4613      	mov	r3, r2
 80068ba:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80068bc:	6a3b      	ldr	r3, [r7, #32]
 80068be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068c2:	d308      	bcc.n	80068d6 <UART_SetConfig+0x322>
 80068c4:	6a3b      	ldr	r3, [r7, #32]
 80068c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068ca:	d204      	bcs.n	80068d6 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	6a3a      	ldr	r2, [r7, #32]
 80068d2:	60da      	str	r2, [r3, #12]
 80068d4:	e0c8      	b.n	8006a68 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80068dc:	e0c4      	b.n	8006a68 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	69db      	ldr	r3, [r3, #28]
 80068e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068e6:	d167      	bne.n	80069b8 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80068e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80068ec:	2b08      	cmp	r3, #8
 80068ee:	d828      	bhi.n	8006942 <UART_SetConfig+0x38e>
 80068f0:	a201      	add	r2, pc, #4	; (adr r2, 80068f8 <UART_SetConfig+0x344>)
 80068f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f6:	bf00      	nop
 80068f8:	0800691d 	.word	0x0800691d
 80068fc:	08006925 	.word	0x08006925
 8006900:	0800692d 	.word	0x0800692d
 8006904:	08006943 	.word	0x08006943
 8006908:	08006933 	.word	0x08006933
 800690c:	08006943 	.word	0x08006943
 8006910:	08006943 	.word	0x08006943
 8006914:	08006943 	.word	0x08006943
 8006918:	0800693b 	.word	0x0800693b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800691c:	f7fd fee2 	bl	80046e4 <HAL_RCC_GetPCLK1Freq>
 8006920:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006922:	e014      	b.n	800694e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006924:	f7fd fef0 	bl	8004708 <HAL_RCC_GetPCLK2Freq>
 8006928:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800692a:	e010      	b.n	800694e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800692c:	4b5a      	ldr	r3, [pc, #360]	; (8006a98 <UART_SetConfig+0x4e4>)
 800692e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006930:	e00d      	b.n	800694e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006932:	f7fd fe23 	bl	800457c <HAL_RCC_GetSysClockFreq>
 8006936:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006938:	e009      	b.n	800694e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800693a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800693e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006940:	e005      	b.n	800694e <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8006942:	2300      	movs	r3, #0
 8006944:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800694c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800694e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006950:	2b00      	cmp	r3, #0
 8006952:	f000 8089 	beq.w	8006a68 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695a:	4a4e      	ldr	r2, [pc, #312]	; (8006a94 <UART_SetConfig+0x4e0>)
 800695c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006960:	461a      	mov	r2, r3
 8006962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006964:	fbb3 f3f2 	udiv	r3, r3, r2
 8006968:	005a      	lsls	r2, r3, #1
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	085b      	lsrs	r3, r3, #1
 8006970:	441a      	add	r2, r3
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	fbb2 f3f3 	udiv	r3, r2, r3
 800697a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800697c:	6a3b      	ldr	r3, [r7, #32]
 800697e:	2b0f      	cmp	r3, #15
 8006980:	d916      	bls.n	80069b0 <UART_SetConfig+0x3fc>
 8006982:	6a3b      	ldr	r3, [r7, #32]
 8006984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006988:	d212      	bcs.n	80069b0 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800698a:	6a3b      	ldr	r3, [r7, #32]
 800698c:	b29b      	uxth	r3, r3
 800698e:	f023 030f 	bic.w	r3, r3, #15
 8006992:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006994:	6a3b      	ldr	r3, [r7, #32]
 8006996:	085b      	lsrs	r3, r3, #1
 8006998:	b29b      	uxth	r3, r3
 800699a:	f003 0307 	and.w	r3, r3, #7
 800699e:	b29a      	uxth	r2, r3
 80069a0:	8bfb      	ldrh	r3, [r7, #30]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	8bfa      	ldrh	r2, [r7, #30]
 80069ac:	60da      	str	r2, [r3, #12]
 80069ae:	e05b      	b.n	8006a68 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80069b6:	e057      	b.n	8006a68 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80069b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80069bc:	2b08      	cmp	r3, #8
 80069be:	d828      	bhi.n	8006a12 <UART_SetConfig+0x45e>
 80069c0:	a201      	add	r2, pc, #4	; (adr r2, 80069c8 <UART_SetConfig+0x414>)
 80069c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c6:	bf00      	nop
 80069c8:	080069ed 	.word	0x080069ed
 80069cc:	080069f5 	.word	0x080069f5
 80069d0:	080069fd 	.word	0x080069fd
 80069d4:	08006a13 	.word	0x08006a13
 80069d8:	08006a03 	.word	0x08006a03
 80069dc:	08006a13 	.word	0x08006a13
 80069e0:	08006a13 	.word	0x08006a13
 80069e4:	08006a13 	.word	0x08006a13
 80069e8:	08006a0b 	.word	0x08006a0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069ec:	f7fd fe7a 	bl	80046e4 <HAL_RCC_GetPCLK1Freq>
 80069f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80069f2:	e014      	b.n	8006a1e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069f4:	f7fd fe88 	bl	8004708 <HAL_RCC_GetPCLK2Freq>
 80069f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80069fa:	e010      	b.n	8006a1e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069fc:	4b26      	ldr	r3, [pc, #152]	; (8006a98 <UART_SetConfig+0x4e4>)
 80069fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a00:	e00d      	b.n	8006a1e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a02:	f7fd fdbb 	bl	800457c <HAL_RCC_GetSysClockFreq>
 8006a06:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a08:	e009      	b.n	8006a1e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a10:	e005      	b.n	8006a1e <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8006a12:	2300      	movs	r3, #0
 8006a14:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006a1c:	bf00      	nop
    }

    if (pclk != 0U)
 8006a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d021      	beq.n	8006a68 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a28:	4a1a      	ldr	r2, [pc, #104]	; (8006a94 <UART_SetConfig+0x4e0>)
 8006a2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a32:	fbb3 f2f2 	udiv	r2, r3, r2
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	085b      	lsrs	r3, r3, #1
 8006a3c:	441a      	add	r2, r3
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a46:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a48:	6a3b      	ldr	r3, [r7, #32]
 8006a4a:	2b0f      	cmp	r3, #15
 8006a4c:	d909      	bls.n	8006a62 <UART_SetConfig+0x4ae>
 8006a4e:	6a3b      	ldr	r3, [r7, #32]
 8006a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a54:	d205      	bcs.n	8006a62 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a56:	6a3b      	ldr	r3, [r7, #32]
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	60da      	str	r2, [r3, #12]
 8006a60:	e002      	b.n	8006a68 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	2200      	movs	r2, #0
 8006a82:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006a84:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3730      	adds	r7, #48	; 0x30
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a92:	bf00      	nop
 8006a94:	0800dfb0 	.word	0x0800dfb0
 8006a98:	00f42400 	.word	0x00f42400

08006a9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa8:	f003 0301 	and.w	r3, r3, #1
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d00a      	beq.n	8006ac6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	430a      	orrs	r2, r1
 8006ac4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aca:	f003 0302 	and.w	r3, r3, #2
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00a      	beq.n	8006ae8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	430a      	orrs	r2, r1
 8006ae6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aec:	f003 0304 	and.w	r3, r3, #4
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00a      	beq.n	8006b0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	430a      	orrs	r2, r1
 8006b08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b0e:	f003 0308 	and.w	r3, r3, #8
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00a      	beq.n	8006b2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	430a      	orrs	r2, r1
 8006b2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b30:	f003 0310 	and.w	r3, r3, #16
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00a      	beq.n	8006b4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	430a      	orrs	r2, r1
 8006b4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b52:	f003 0320 	and.w	r3, r3, #32
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d00a      	beq.n	8006b70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	430a      	orrs	r2, r1
 8006b6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d01a      	beq.n	8006bb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	430a      	orrs	r2, r1
 8006b90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b9a:	d10a      	bne.n	8006bb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	430a      	orrs	r2, r1
 8006bb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00a      	beq.n	8006bd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	430a      	orrs	r2, r1
 8006bd2:	605a      	str	r2, [r3, #4]
  }
}
 8006bd4:	bf00      	nop
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bc80      	pop	{r7}
 8006bdc:	4770      	bx	lr

08006bde <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b086      	sub	sp, #24
 8006be2:	af02      	add	r7, sp, #8
 8006be4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006bee:	f7fb f93b 	bl	8001e68 <HAL_GetTick>
 8006bf2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 0308 	and.w	r3, r3, #8
 8006bfe:	2b08      	cmp	r3, #8
 8006c00:	d10e      	bne.n	8006c20 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c02:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c06:	9300      	str	r3, [sp, #0]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 f832 	bl	8006c7a <UART_WaitOnFlagUntilTimeout>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d001      	beq.n	8006c20 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e028      	b.n	8006c72 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 0304 	and.w	r3, r3, #4
 8006c2a:	2b04      	cmp	r3, #4
 8006c2c:	d10e      	bne.n	8006c4c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c2e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c32:	9300      	str	r3, [sp, #0]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 f81c 	bl	8006c7a <UART_WaitOnFlagUntilTimeout>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d001      	beq.n	8006c4c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e012      	b.n	8006c72 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2220      	movs	r2, #32
 8006c50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2220      	movs	r2, #32
 8006c58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3710      	adds	r7, #16
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c7a:	b580      	push	{r7, lr}
 8006c7c:	b09c      	sub	sp, #112	; 0x70
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	60f8      	str	r0, [r7, #12]
 8006c82:	60b9      	str	r1, [r7, #8]
 8006c84:	603b      	str	r3, [r7, #0]
 8006c86:	4613      	mov	r3, r2
 8006c88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c8a:	e0a9      	b.n	8006de0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c92:	f000 80a5 	beq.w	8006de0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c96:	f7fb f8e7 	bl	8001e68 <HAL_GetTick>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d302      	bcc.n	8006cac <UART_WaitOnFlagUntilTimeout+0x32>
 8006ca6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d140      	bne.n	8006d2e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cb4:	e853 3f00 	ldrex	r3, [r3]
 8006cb8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006cba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cbc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006cc0:	667b      	str	r3, [r7, #100]	; 0x64
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ccc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006cd0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006cd2:	e841 2300 	strex	r3, r2, [r1]
 8006cd6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006cd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d1e6      	bne.n	8006cac <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	3308      	adds	r3, #8
 8006ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ce8:	e853 3f00 	ldrex	r3, [r3]
 8006cec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf0:	f023 0301 	bic.w	r3, r3, #1
 8006cf4:	663b      	str	r3, [r7, #96]	; 0x60
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	3308      	adds	r3, #8
 8006cfc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006cfe:	64ba      	str	r2, [r7, #72]	; 0x48
 8006d00:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d06:	e841 2300 	strex	r3, r2, [r1]
 8006d0a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006d0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1e5      	bne.n	8006cde <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2220      	movs	r2, #32
 8006d16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2220      	movs	r2, #32
 8006d1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e069      	b.n	8006e02 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0304 	and.w	r3, r3, #4
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d051      	beq.n	8006de0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	69db      	ldr	r3, [r3, #28]
 8006d42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d4a:	d149      	bne.n	8006de0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d54:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5e:	e853 3f00 	ldrex	r3, [r3]
 8006d62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d66:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	461a      	mov	r2, r3
 8006d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d74:	637b      	str	r3, [r7, #52]	; 0x34
 8006d76:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d7c:	e841 2300 	strex	r3, r2, [r1]
 8006d80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d1e6      	bne.n	8006d56 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	3308      	adds	r3, #8
 8006d8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	e853 3f00 	ldrex	r3, [r3]
 8006d96:	613b      	str	r3, [r7, #16]
   return(result);
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	f023 0301 	bic.w	r3, r3, #1
 8006d9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	3308      	adds	r3, #8
 8006da6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006da8:	623a      	str	r2, [r7, #32]
 8006daa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dac:	69f9      	ldr	r1, [r7, #28]
 8006dae:	6a3a      	ldr	r2, [r7, #32]
 8006db0:	e841 2300 	strex	r3, r2, [r1]
 8006db4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1e5      	bne.n	8006d88 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2220      	movs	r2, #32
 8006dc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2220      	movs	r2, #32
 8006dc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2220      	movs	r2, #32
 8006dd0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	e010      	b.n	8006e02 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	69da      	ldr	r2, [r3, #28]
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	4013      	ands	r3, r2
 8006dea:	68ba      	ldr	r2, [r7, #8]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	bf0c      	ite	eq
 8006df0:	2301      	moveq	r3, #1
 8006df2:	2300      	movne	r3, #0
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	461a      	mov	r2, r3
 8006df8:	79fb      	ldrb	r3, [r7, #7]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	f43f af46 	beq.w	8006c8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3770      	adds	r7, #112	; 0x70
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
	...

08006e0c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b0a3      	sub	sp, #140	; 0x8c
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	4613      	mov	r3, r2
 8006e18:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	68ba      	ldr	r2, [r7, #8]
 8006e1e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	88fa      	ldrh	r2, [r7, #6]
 8006e24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	88fa      	ldrh	r2, [r7, #6]
 8006e2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2200      	movs	r2, #0
 8006e34:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e3e:	d10e      	bne.n	8006e5e <UART_Start_Receive_IT+0x52>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d105      	bne.n	8006e54 <UART_Start_Receive_IT+0x48>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006e4e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006e52:	e02d      	b.n	8006eb0 <UART_Start_Receive_IT+0xa4>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	22ff      	movs	r2, #255	; 0xff
 8006e58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006e5c:	e028      	b.n	8006eb0 <UART_Start_Receive_IT+0xa4>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d10d      	bne.n	8006e82 <UART_Start_Receive_IT+0x76>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d104      	bne.n	8006e78 <UART_Start_Receive_IT+0x6c>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	22ff      	movs	r2, #255	; 0xff
 8006e72:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006e76:	e01b      	b.n	8006eb0 <UART_Start_Receive_IT+0xa4>
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	227f      	movs	r2, #127	; 0x7f
 8006e7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006e80:	e016      	b.n	8006eb0 <UART_Start_Receive_IT+0xa4>
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e8a:	d10d      	bne.n	8006ea8 <UART_Start_Receive_IT+0x9c>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d104      	bne.n	8006e9e <UART_Start_Receive_IT+0x92>
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	227f      	movs	r2, #127	; 0x7f
 8006e98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006e9c:	e008      	b.n	8006eb0 <UART_Start_Receive_IT+0xa4>
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	223f      	movs	r2, #63	; 0x3f
 8006ea2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006ea6:	e003      	b.n	8006eb0 <UART_Start_Receive_IT+0xa4>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2222      	movs	r2, #34	; 0x22
 8006ebc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	3308      	adds	r3, #8
 8006ec6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006eca:	e853 3f00 	ldrex	r3, [r3]
 8006ece:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006ed0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ed2:	f043 0301 	orr.w	r3, r3, #1
 8006ed6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	3308      	adds	r3, #8
 8006ee0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006ee4:	673a      	str	r2, [r7, #112]	; 0x70
 8006ee6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006eea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006eec:	e841 2300 	strex	r3, r2, [r1]
 8006ef0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006ef2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1e3      	bne.n	8006ec0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006efc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f00:	d14f      	bne.n	8006fa2 <UART_Start_Receive_IT+0x196>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006f08:	88fa      	ldrh	r2, [r7, #6]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d349      	bcc.n	8006fa2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f16:	d107      	bne.n	8006f28 <UART_Start_Receive_IT+0x11c>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d103      	bne.n	8006f28 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	4a46      	ldr	r2, [pc, #280]	; (800703c <UART_Start_Receive_IT+0x230>)
 8006f24:	675a      	str	r2, [r3, #116]	; 0x74
 8006f26:	e002      	b.n	8006f2e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	4a45      	ldr	r2, [pc, #276]	; (8007040 <UART_Start_Receive_IT+0x234>)
 8006f2c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d01a      	beq.n	8006f6c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f3e:	e853 3f00 	ldrex	r3, [r3]
 8006f42:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	461a      	mov	r2, r3
 8006f54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006f58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f5a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f5e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f60:	e841 2300 	strex	r3, r2, [r1]
 8006f64:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006f66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d1e4      	bne.n	8006f36 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	3308      	adds	r3, #8
 8006f72:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f76:	e853 3f00 	ldrex	r3, [r3]
 8006f7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f82:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	3308      	adds	r3, #8
 8006f8a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006f8c:	64ba      	str	r2, [r7, #72]	; 0x48
 8006f8e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f90:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f94:	e841 2300 	strex	r3, r2, [r1]
 8006f98:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006f9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1e5      	bne.n	8006f6c <UART_Start_Receive_IT+0x160>
 8006fa0:	e046      	b.n	8007030 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006faa:	d107      	bne.n	8006fbc <UART_Start_Receive_IT+0x1b0>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	691b      	ldr	r3, [r3, #16]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d103      	bne.n	8006fbc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	4a23      	ldr	r2, [pc, #140]	; (8007044 <UART_Start_Receive_IT+0x238>)
 8006fb8:	675a      	str	r2, [r3, #116]	; 0x74
 8006fba:	e002      	b.n	8006fc2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	4a22      	ldr	r2, [pc, #136]	; (8007048 <UART_Start_Receive_IT+0x23c>)
 8006fc0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d019      	beq.n	8006ffe <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd2:	e853 3f00 	ldrex	r3, [r3]
 8006fd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fda:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006fde:	677b      	str	r3, [r7, #116]	; 0x74
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fe8:	637b      	str	r3, [r7, #52]	; 0x34
 8006fea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006fee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ff0:	e841 2300 	strex	r3, r2, [r1]
 8006ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d1e6      	bne.n	8006fca <UART_Start_Receive_IT+0x1be>
 8006ffc:	e018      	b.n	8007030 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	e853 3f00 	ldrex	r3, [r3]
 800700a:	613b      	str	r3, [r7, #16]
   return(result);
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	f043 0320 	orr.w	r3, r3, #32
 8007012:	67bb      	str	r3, [r7, #120]	; 0x78
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	461a      	mov	r2, r3
 800701a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800701c:	623b      	str	r3, [r7, #32]
 800701e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007020:	69f9      	ldr	r1, [r7, #28]
 8007022:	6a3a      	ldr	r2, [r7, #32]
 8007024:	e841 2300 	strex	r3, r2, [r1]
 8007028:	61bb      	str	r3, [r7, #24]
   return(result);
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1e6      	bne.n	8006ffe <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	378c      	adds	r7, #140	; 0x8c
 8007036:	46bd      	mov	sp, r7
 8007038:	bc80      	pop	{r7}
 800703a:	4770      	bx	lr
 800703c:	08007869 	.word	0x08007869
 8007040:	08007509 	.word	0x08007509
 8007044:	08007351 	.word	0x08007351
 8007048:	08007199 	.word	0x08007199

0800704c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800704c:	b480      	push	{r7}
 800704e:	b095      	sub	sp, #84	; 0x54
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800705c:	e853 3f00 	ldrex	r3, [r3]
 8007060:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007064:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007068:	64fb      	str	r3, [r7, #76]	; 0x4c
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	461a      	mov	r2, r3
 8007070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007072:	643b      	str	r3, [r7, #64]	; 0x40
 8007074:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007076:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007078:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800707a:	e841 2300 	strex	r3, r2, [r1]
 800707e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1e6      	bne.n	8007054 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	3308      	adds	r3, #8
 800708c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708e:	6a3b      	ldr	r3, [r7, #32]
 8007090:	e853 3f00 	ldrex	r3, [r3]
 8007094:	61fb      	str	r3, [r7, #28]
   return(result);
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800709c:	f023 0301 	bic.w	r3, r3, #1
 80070a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	3308      	adds	r3, #8
 80070a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070b2:	e841 2300 	strex	r3, r2, [r1]
 80070b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d1e3      	bne.n	8007086 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d118      	bne.n	80070f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	e853 3f00 	ldrex	r3, [r3]
 80070d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	f023 0310 	bic.w	r3, r3, #16
 80070da:	647b      	str	r3, [r7, #68]	; 0x44
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	461a      	mov	r2, r3
 80070e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070e4:	61bb      	str	r3, [r7, #24]
 80070e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e8:	6979      	ldr	r1, [r7, #20]
 80070ea:	69ba      	ldr	r2, [r7, #24]
 80070ec:	e841 2300 	strex	r3, r2, [r1]
 80070f0:	613b      	str	r3, [r7, #16]
   return(result);
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d1e6      	bne.n	80070c6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2220      	movs	r2, #32
 80070fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800710c:	bf00      	nop
 800710e:	3754      	adds	r7, #84	; 0x54
 8007110:	46bd      	mov	sp, r7
 8007112:	bc80      	pop	{r7}
 8007114:	4770      	bx	lr

08007116 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007116:	b580      	push	{r7, lr}
 8007118:	b084      	sub	sp, #16
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007122:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2200      	movs	r2, #0
 8007128:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2200      	movs	r2, #0
 8007130:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	f7ff fa28 	bl	800658a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800713a:	bf00      	nop
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b088      	sub	sp, #32
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	e853 3f00 	ldrex	r3, [r3]
 8007156:	60bb      	str	r3, [r7, #8]
   return(result);
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800715e:	61fb      	str	r3, [r7, #28]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	461a      	mov	r2, r3
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	61bb      	str	r3, [r7, #24]
 800716a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716c:	6979      	ldr	r1, [r7, #20]
 800716e:	69ba      	ldr	r2, [r7, #24]
 8007170:	e841 2300 	strex	r3, r2, [r1]
 8007174:	613b      	str	r3, [r7, #16]
   return(result);
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1e6      	bne.n	800714a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2220      	movs	r2, #32
 8007180:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f7ff f9f4 	bl	8006578 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007190:	bf00      	nop
 8007192:	3720      	adds	r7, #32
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b09c      	sub	sp, #112	; 0x70
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80071a6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071b0:	2b22      	cmp	r3, #34	; 0x22
 80071b2:	f040 80be 	bne.w	8007332 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071bc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80071c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80071c4:	b2d9      	uxtb	r1, r3
 80071c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80071ca:	b2da      	uxtb	r2, r3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071d0:	400a      	ands	r2, r1
 80071d2:	b2d2      	uxtb	r2, r2
 80071d4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071da:	1c5a      	adds	r2, r3, #1
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	3b01      	subs	r3, #1
 80071ea:	b29a      	uxth	r2, r3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f040 80a1 	bne.w	8007342 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007208:	e853 3f00 	ldrex	r3, [r3]
 800720c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800720e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007210:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007214:	66bb      	str	r3, [r7, #104]	; 0x68
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	461a      	mov	r2, r3
 800721c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800721e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007220:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007222:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007224:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007226:	e841 2300 	strex	r3, r2, [r1]
 800722a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800722c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800722e:	2b00      	cmp	r3, #0
 8007230:	d1e6      	bne.n	8007200 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	3308      	adds	r3, #8
 8007238:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723c:	e853 3f00 	ldrex	r3, [r3]
 8007240:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007244:	f023 0301 	bic.w	r3, r3, #1
 8007248:	667b      	str	r3, [r7, #100]	; 0x64
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	3308      	adds	r3, #8
 8007250:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007252:	647a      	str	r2, [r7, #68]	; 0x44
 8007254:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007256:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007258:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800725a:	e841 2300 	strex	r3, r2, [r1]
 800725e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1e5      	bne.n	8007232 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2220      	movs	r2, #32
 800726a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a33      	ldr	r2, [pc, #204]	; (800734c <UART_RxISR_8BIT+0x1b4>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d01f      	beq.n	80072c4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800728e:	2b00      	cmp	r3, #0
 8007290:	d018      	beq.n	80072c4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729a:	e853 3f00 	ldrex	r3, [r3]
 800729e:	623b      	str	r3, [r7, #32]
   return(result);
 80072a0:	6a3b      	ldr	r3, [r7, #32]
 80072a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80072a6:	663b      	str	r3, [r7, #96]	; 0x60
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	461a      	mov	r2, r3
 80072ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072b0:	633b      	str	r3, [r7, #48]	; 0x30
 80072b2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072b8:	e841 2300 	strex	r3, r2, [r1]
 80072bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1e6      	bne.n	8007292 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d12e      	bne.n	800732a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	e853 3f00 	ldrex	r3, [r3]
 80072de:	60fb      	str	r3, [r7, #12]
   return(result);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f023 0310 	bic.w	r3, r3, #16
 80072e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	461a      	mov	r2, r3
 80072ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072f0:	61fb      	str	r3, [r7, #28]
 80072f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f4:	69b9      	ldr	r1, [r7, #24]
 80072f6:	69fa      	ldr	r2, [r7, #28]
 80072f8:	e841 2300 	strex	r3, r2, [r1]
 80072fc:	617b      	str	r3, [r7, #20]
   return(result);
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d1e6      	bne.n	80072d2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	69db      	ldr	r3, [r3, #28]
 800730a:	f003 0310 	and.w	r3, r3, #16
 800730e:	2b10      	cmp	r3, #16
 8007310:	d103      	bne.n	800731a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2210      	movs	r2, #16
 8007318:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007320:	4619      	mov	r1, r3
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f7ff f93a 	bl	800659c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007328:	e00b      	b.n	8007342 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 ffea 	bl	8008304 <HAL_UART_RxCpltCallback>
}
 8007330:	e007      	b.n	8007342 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	699a      	ldr	r2, [r3, #24]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f042 0208 	orr.w	r2, r2, #8
 8007340:	619a      	str	r2, [r3, #24]
}
 8007342:	bf00      	nop
 8007344:	3770      	adds	r7, #112	; 0x70
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	40008000 	.word	0x40008000

08007350 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b09c      	sub	sp, #112	; 0x70
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800735e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007368:	2b22      	cmp	r3, #34	; 0x22
 800736a:	f040 80be 	bne.w	80074ea <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007374:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800737c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800737e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007382:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007386:	4013      	ands	r3, r2
 8007388:	b29a      	uxth	r2, r3
 800738a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800738c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007392:	1c9a      	adds	r2, r3, #2
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800739e:	b29b      	uxth	r3, r3
 80073a0:	3b01      	subs	r3, #1
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	f040 80a1 	bne.w	80074fa <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073c0:	e853 3f00 	ldrex	r3, [r3]
 80073c4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80073c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073cc:	667b      	str	r3, [r7, #100]	; 0x64
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	461a      	mov	r2, r3
 80073d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073d6:	657b      	str	r3, [r7, #84]	; 0x54
 80073d8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80073dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80073de:	e841 2300 	strex	r3, r2, [r1]
 80073e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80073e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d1e6      	bne.n	80073b8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	3308      	adds	r3, #8
 80073f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073f4:	e853 3f00 	ldrex	r3, [r3]
 80073f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80073fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fc:	f023 0301 	bic.w	r3, r3, #1
 8007400:	663b      	str	r3, [r7, #96]	; 0x60
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	3308      	adds	r3, #8
 8007408:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800740a:	643a      	str	r2, [r7, #64]	; 0x40
 800740c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007410:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007412:	e841 2300 	strex	r3, r2, [r1]
 8007416:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1e5      	bne.n	80073ea <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2220      	movs	r2, #32
 8007422:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a33      	ldr	r2, [pc, #204]	; (8007504 <UART_RxISR_16BIT+0x1b4>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d01f      	beq.n	800747c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007446:	2b00      	cmp	r3, #0
 8007448:	d018      	beq.n	800747c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007450:	6a3b      	ldr	r3, [r7, #32]
 8007452:	e853 3f00 	ldrex	r3, [r3]
 8007456:	61fb      	str	r3, [r7, #28]
   return(result);
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800745e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	461a      	mov	r2, r3
 8007466:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007468:	62fb      	str	r3, [r7, #44]	; 0x2c
 800746a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800746e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007470:	e841 2300 	strex	r3, r2, [r1]
 8007474:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1e6      	bne.n	800744a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007480:	2b01      	cmp	r3, #1
 8007482:	d12e      	bne.n	80074e2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	e853 3f00 	ldrex	r3, [r3]
 8007496:	60bb      	str	r3, [r7, #8]
   return(result);
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	f023 0310 	bic.w	r3, r3, #16
 800749e:	65bb      	str	r3, [r7, #88]	; 0x58
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	461a      	mov	r2, r3
 80074a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80074a8:	61bb      	str	r3, [r7, #24]
 80074aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ac:	6979      	ldr	r1, [r7, #20]
 80074ae:	69ba      	ldr	r2, [r7, #24]
 80074b0:	e841 2300 	strex	r3, r2, [r1]
 80074b4:	613b      	str	r3, [r7, #16]
   return(result);
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1e6      	bne.n	800748a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	69db      	ldr	r3, [r3, #28]
 80074c2:	f003 0310 	and.w	r3, r3, #16
 80074c6:	2b10      	cmp	r3, #16
 80074c8:	d103      	bne.n	80074d2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2210      	movs	r2, #16
 80074d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80074d8:	4619      	mov	r1, r3
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f7ff f85e 	bl	800659c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80074e0:	e00b      	b.n	80074fa <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 ff0e 	bl	8008304 <HAL_UART_RxCpltCallback>
}
 80074e8:	e007      	b.n	80074fa <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	699a      	ldr	r2, [r3, #24]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f042 0208 	orr.w	r2, r2, #8
 80074f8:	619a      	str	r2, [r3, #24]
}
 80074fa:	bf00      	nop
 80074fc:	3770      	adds	r7, #112	; 0x70
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	40008000 	.word	0x40008000

08007508 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b0ac      	sub	sp, #176	; 0xb0
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007516:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	69db      	ldr	r3, [r3, #28]
 8007520:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800753e:	2b22      	cmp	r3, #34	; 0x22
 8007540:	f040 8182 	bne.w	8007848 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800754a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800754e:	e125      	b.n	800779c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007556:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800755a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800755e:	b2d9      	uxtb	r1, r3
 8007560:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007564:	b2da      	uxtb	r2, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800756a:	400a      	ands	r2, r1
 800756c:	b2d2      	uxtb	r2, r2
 800756e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007574:	1c5a      	adds	r2, r3, #1
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007580:	b29b      	uxth	r3, r3
 8007582:	3b01      	subs	r3, #1
 8007584:	b29a      	uxth	r2, r3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	69db      	ldr	r3, [r3, #28]
 8007592:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007596:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800759a:	f003 0307 	and.w	r3, r3, #7
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d053      	beq.n	800764a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80075a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80075a6:	f003 0301 	and.w	r3, r3, #1
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d011      	beq.n	80075d2 <UART_RxISR_8BIT_FIFOEN+0xca>
 80075ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80075b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00b      	beq.n	80075d2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2201      	movs	r2, #1
 80075c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075c8:	f043 0201 	orr.w	r2, r3, #1
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80075d6:	f003 0302 	and.w	r3, r3, #2
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d011      	beq.n	8007602 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80075de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80075e2:	f003 0301 	and.w	r3, r3, #1
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00b      	beq.n	8007602 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2202      	movs	r2, #2
 80075f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075f8:	f043 0204 	orr.w	r2, r3, #4
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007602:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007606:	f003 0304 	and.w	r3, r3, #4
 800760a:	2b00      	cmp	r3, #0
 800760c:	d011      	beq.n	8007632 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800760e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007612:	f003 0301 	and.w	r3, r3, #1
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00b      	beq.n	8007632 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2204      	movs	r2, #4
 8007620:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007628:	f043 0202 	orr.w	r2, r3, #2
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007638:	2b00      	cmp	r3, #0
 800763a:	d006      	beq.n	800764a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f7fe ffa4 	bl	800658a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007650:	b29b      	uxth	r3, r3
 8007652:	2b00      	cmp	r3, #0
 8007654:	f040 80a2 	bne.w	800779c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007660:	e853 3f00 	ldrex	r3, [r3]
 8007664:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8007666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007668:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800766c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	461a      	mov	r2, r3
 8007676:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800767a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800767c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007680:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007682:	e841 2300 	strex	r3, r2, [r1]
 8007686:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8007688:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1e4      	bne.n	8007658 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	3308      	adds	r3, #8
 8007694:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007696:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007698:	e853 3f00 	ldrex	r3, [r3]
 800769c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800769e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076a4:	f023 0301 	bic.w	r3, r3, #1
 80076a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	3308      	adds	r3, #8
 80076b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80076b6:	66ba      	str	r2, [r7, #104]	; 0x68
 80076b8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ba:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80076bc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80076be:	e841 2300 	strex	r3, r2, [r1]
 80076c2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80076c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d1e1      	bne.n	800768e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2220      	movs	r2, #32
 80076ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a5f      	ldr	r2, [pc, #380]	; (8007860 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d021      	beq.n	800772c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d01a      	beq.n	800772c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076fe:	e853 3f00 	ldrex	r3, [r3]
 8007702:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007706:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800770a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	461a      	mov	r2, r3
 8007714:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007718:	657b      	str	r3, [r7, #84]	; 0x54
 800771a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800771e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007720:	e841 2300 	strex	r3, r2, [r1]
 8007724:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1e4      	bne.n	80076f6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007730:	2b01      	cmp	r3, #1
 8007732:	d130      	bne.n	8007796 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007742:	e853 3f00 	ldrex	r3, [r3]
 8007746:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800774a:	f023 0310 	bic.w	r3, r3, #16
 800774e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	461a      	mov	r2, r3
 8007758:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800775c:	643b      	str	r3, [r7, #64]	; 0x40
 800775e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007760:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007762:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007764:	e841 2300 	strex	r3, r2, [r1]
 8007768:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800776a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776c:	2b00      	cmp	r3, #0
 800776e:	d1e4      	bne.n	800773a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	69db      	ldr	r3, [r3, #28]
 8007776:	f003 0310 	and.w	r3, r3, #16
 800777a:	2b10      	cmp	r3, #16
 800777c:	d103      	bne.n	8007786 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2210      	movs	r2, #16
 8007784:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800778c:	4619      	mov	r1, r3
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f7fe ff04 	bl	800659c <HAL_UARTEx_RxEventCallback>
 8007794:	e002      	b.n	800779c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 fdb4 	bl	8008304 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800779c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d006      	beq.n	80077b2 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80077a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077a8:	f003 0320 	and.w	r3, r3, #32
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f47f aecf 	bne.w	8007550 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077b8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80077bc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d049      	beq.n	8007858 <UART_RxISR_8BIT_FIFOEN+0x350>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80077ca:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d242      	bcs.n	8007858 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	3308      	adds	r3, #8
 80077d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077da:	6a3b      	ldr	r3, [r7, #32]
 80077dc:	e853 3f00 	ldrex	r3, [r3]
 80077e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	3308      	adds	r3, #8
 80077f2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80077f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077fe:	e841 2300 	strex	r3, r2, [r1]
 8007802:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1e3      	bne.n	80077d2 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a15      	ldr	r2, [pc, #84]	; (8007864 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800780e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	e853 3f00 	ldrex	r3, [r3]
 800781c:	60bb      	str	r3, [r7, #8]
   return(result);
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	f043 0320 	orr.w	r3, r3, #32
 8007824:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	461a      	mov	r2, r3
 800782e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007832:	61bb      	str	r3, [r7, #24]
 8007834:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007836:	6979      	ldr	r1, [r7, #20]
 8007838:	69ba      	ldr	r2, [r7, #24]
 800783a:	e841 2300 	strex	r3, r2, [r1]
 800783e:	613b      	str	r3, [r7, #16]
   return(result);
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1e4      	bne.n	8007810 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007846:	e007      	b.n	8007858 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	699a      	ldr	r2, [r3, #24]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f042 0208 	orr.w	r2, r2, #8
 8007856:	619a      	str	r2, [r3, #24]
}
 8007858:	bf00      	nop
 800785a:	37b0      	adds	r7, #176	; 0xb0
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	40008000 	.word	0x40008000
 8007864:	08007199 	.word	0x08007199

08007868 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b0ae      	sub	sp, #184	; 0xb8
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007876:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	69db      	ldr	r3, [r3, #28]
 8007880:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800789e:	2b22      	cmp	r3, #34	; 0x22
 80078a0:	f040 8186 	bne.w	8007bb0 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80078aa:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80078ae:	e129      	b.n	8007b04 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80078c2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80078c6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80078ca:	4013      	ands	r3, r2
 80078cc:	b29a      	uxth	r2, r3
 80078ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80078d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078d8:	1c9a      	adds	r2, r3, #2
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	3b01      	subs	r3, #1
 80078e8:	b29a      	uxth	r2, r3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	69db      	ldr	r3, [r3, #28]
 80078f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80078fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80078fe:	f003 0307 	and.w	r3, r3, #7
 8007902:	2b00      	cmp	r3, #0
 8007904:	d053      	beq.n	80079ae <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007906:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800790a:	f003 0301 	and.w	r3, r3, #1
 800790e:	2b00      	cmp	r3, #0
 8007910:	d011      	beq.n	8007936 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007912:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00b      	beq.n	8007936 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2201      	movs	r2, #1
 8007924:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800792c:	f043 0201 	orr.w	r2, r3, #1
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007936:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800793a:	f003 0302 	and.w	r3, r3, #2
 800793e:	2b00      	cmp	r3, #0
 8007940:	d011      	beq.n	8007966 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007942:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007946:	f003 0301 	and.w	r3, r3, #1
 800794a:	2b00      	cmp	r3, #0
 800794c:	d00b      	beq.n	8007966 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2202      	movs	r2, #2
 8007954:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800795c:	f043 0204 	orr.w	r2, r3, #4
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007966:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800796a:	f003 0304 	and.w	r3, r3, #4
 800796e:	2b00      	cmp	r3, #0
 8007970:	d011      	beq.n	8007996 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007972:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007976:	f003 0301 	and.w	r3, r3, #1
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00b      	beq.n	8007996 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2204      	movs	r2, #4
 8007984:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800798c:	f043 0202 	orr.w	r2, r3, #2
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800799c:	2b00      	cmp	r3, #0
 800799e:	d006      	beq.n	80079ae <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f7fe fdf2 	bl	800658a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	f040 80a4 	bne.w	8007b04 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079c4:	e853 3f00 	ldrex	r3, [r3]
 80079c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80079ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	461a      	mov	r2, r3
 80079da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80079de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80079e2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80079e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80079ea:	e841 2300 	strex	r3, r2, [r1]
 80079ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80079f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1e2      	bne.n	80079bc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	3308      	adds	r3, #8
 80079fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a00:	e853 3f00 	ldrex	r3, [r3]
 8007a04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007a06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a0c:	f023 0301 	bic.w	r3, r3, #1
 8007a10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	3308      	adds	r3, #8
 8007a1a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007a1e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007a20:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a22:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007a24:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007a26:	e841 2300 	strex	r3, r2, [r1]
 8007a2a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007a2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1e1      	bne.n	80079f6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2220      	movs	r2, #32
 8007a36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a5f      	ldr	r2, [pc, #380]	; (8007bc8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d021      	beq.n	8007a94 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d01a      	beq.n	8007a94 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a66:	e853 3f00 	ldrex	r3, [r3]
 8007a6a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007a72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a80:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a82:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a88:	e841 2300 	strex	r3, r2, [r1]
 8007a8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007a8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1e4      	bne.n	8007a5e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d130      	bne.n	8007afe <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aaa:	e853 3f00 	ldrex	r3, [r3]
 8007aae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ab2:	f023 0310 	bic.w	r3, r3, #16
 8007ab6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	461a      	mov	r2, r3
 8007ac0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ac4:	647b      	str	r3, [r7, #68]	; 0x44
 8007ac6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007aca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007acc:	e841 2300 	strex	r3, r2, [r1]
 8007ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1e4      	bne.n	8007aa2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	69db      	ldr	r3, [r3, #28]
 8007ade:	f003 0310 	and.w	r3, r3, #16
 8007ae2:	2b10      	cmp	r3, #16
 8007ae4:	d103      	bne.n	8007aee <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2210      	movs	r2, #16
 8007aec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007af4:	4619      	mov	r1, r3
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f7fe fd50 	bl	800659c <HAL_UARTEx_RxEventCallback>
 8007afc:	e002      	b.n	8007b04 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 fc00 	bl	8008304 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007b04:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d006      	beq.n	8007b1a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8007b0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007b10:	f003 0320 	and.w	r3, r3, #32
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f47f aecb 	bne.w	80078b0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b20:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007b24:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d049      	beq.n	8007bc0 <UART_RxISR_16BIT_FIFOEN+0x358>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007b32:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d242      	bcs.n	8007bc0 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	3308      	adds	r3, #8
 8007b40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b44:	e853 3f00 	ldrex	r3, [r3]
 8007b48:	623b      	str	r3, [r7, #32]
   return(result);
 8007b4a:	6a3b      	ldr	r3, [r7, #32]
 8007b4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	3308      	adds	r3, #8
 8007b5a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007b5e:	633a      	str	r2, [r7, #48]	; 0x30
 8007b60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b66:	e841 2300 	strex	r3, r2, [r1]
 8007b6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d1e3      	bne.n	8007b3a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4a15      	ldr	r2, [pc, #84]	; (8007bcc <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007b76:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	e853 3f00 	ldrex	r3, [r3]
 8007b84:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f043 0320 	orr.w	r3, r3, #32
 8007b8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	461a      	mov	r2, r3
 8007b96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b9a:	61fb      	str	r3, [r7, #28]
 8007b9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9e:	69b9      	ldr	r1, [r7, #24]
 8007ba0:	69fa      	ldr	r2, [r7, #28]
 8007ba2:	e841 2300 	strex	r3, r2, [r1]
 8007ba6:	617b      	str	r3, [r7, #20]
   return(result);
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1e4      	bne.n	8007b78 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007bae:	e007      	b.n	8007bc0 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	699a      	ldr	r2, [r3, #24]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f042 0208 	orr.w	r2, r2, #8
 8007bbe:	619a      	str	r2, [r3, #24]
}
 8007bc0:	bf00      	nop
 8007bc2:	37b8      	adds	r7, #184	; 0xb8
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	40008000 	.word	0x40008000
 8007bcc:	08007351 	.word	0x08007351

08007bd0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007bd8:	bf00      	nop
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bc80      	pop	{r7}
 8007be0:	4770      	bx	lr

08007be2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007be2:	b480      	push	{r7}
 8007be4:	b083      	sub	sp, #12
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007bea:	bf00      	nop
 8007bec:	370c      	adds	r7, #12
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bc80      	pop	{r7}
 8007bf2:	4770      	bx	lr

08007bf4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bc80      	pop	{r7}
 8007c04:	4770      	bx	lr

08007c06 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007c06:	b480      	push	{r7}
 8007c08:	b085      	sub	sp, #20
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d101      	bne.n	8007c1c <HAL_UARTEx_DisableFifoMode+0x16>
 8007c18:	2302      	movs	r3, #2
 8007c1a:	e027      	b.n	8007c6c <HAL_UARTEx_DisableFifoMode+0x66>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2224      	movs	r2, #36	; 0x24
 8007c28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f022 0201 	bic.w	r2, r2, #1
 8007c42:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007c4a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2220      	movs	r2, #32
 8007c5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3714      	adds	r7, #20
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bc80      	pop	{r7}
 8007c74:	4770      	bx	lr

08007c76 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b084      	sub	sp, #16
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
 8007c7e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d101      	bne.n	8007c8e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007c8a:	2302      	movs	r3, #2
 8007c8c:	e02d      	b.n	8007cea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2201      	movs	r2, #1
 8007c92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2224      	movs	r2, #36	; 0x24
 8007c9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f022 0201 	bic.w	r2, r2, #1
 8007cb4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	683a      	ldr	r2, [r7, #0]
 8007cc6:	430a      	orrs	r2, r1
 8007cc8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f850 	bl	8007d70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2220      	movs	r2, #32
 8007cdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3710      	adds	r7, #16
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b084      	sub	sp, #16
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
 8007cfa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d101      	bne.n	8007d0a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007d06:	2302      	movs	r3, #2
 8007d08:	e02d      	b.n	8007d66 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2224      	movs	r2, #36	; 0x24
 8007d16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f022 0201 	bic.w	r2, r2, #1
 8007d30:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	683a      	ldr	r2, [r7, #0]
 8007d42:	430a      	orrs	r2, r1
 8007d44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 f812 	bl	8007d70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	68fa      	ldr	r2, [r7, #12]
 8007d52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2220      	movs	r2, #32
 8007d58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
	...

08007d70 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d108      	bne.n	8007d92 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007d90:	e031      	b.n	8007df6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007d92:	2308      	movs	r3, #8
 8007d94:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007d96:	2308      	movs	r3, #8
 8007d98:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	0e5b      	lsrs	r3, r3, #25
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	f003 0307 	and.w	r3, r3, #7
 8007da8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	0f5b      	lsrs	r3, r3, #29
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	f003 0307 	and.w	r3, r3, #7
 8007db8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007dba:	7bbb      	ldrb	r3, [r7, #14]
 8007dbc:	7b3a      	ldrb	r2, [r7, #12]
 8007dbe:	4910      	ldr	r1, [pc, #64]	; (8007e00 <UARTEx_SetNbDataToProcess+0x90>)
 8007dc0:	5c8a      	ldrb	r2, [r1, r2]
 8007dc2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007dc6:	7b3a      	ldrb	r2, [r7, #12]
 8007dc8:	490e      	ldr	r1, [pc, #56]	; (8007e04 <UARTEx_SetNbDataToProcess+0x94>)
 8007dca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007dcc:	fb93 f3f2 	sdiv	r3, r3, r2
 8007dd0:	b29a      	uxth	r2, r3
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007dd8:	7bfb      	ldrb	r3, [r7, #15]
 8007dda:	7b7a      	ldrb	r2, [r7, #13]
 8007ddc:	4908      	ldr	r1, [pc, #32]	; (8007e00 <UARTEx_SetNbDataToProcess+0x90>)
 8007dde:	5c8a      	ldrb	r2, [r1, r2]
 8007de0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007de4:	7b7a      	ldrb	r2, [r7, #13]
 8007de6:	4907      	ldr	r1, [pc, #28]	; (8007e04 <UARTEx_SetNbDataToProcess+0x94>)
 8007de8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007dea:	fb93 f3f2 	sdiv	r3, r3, r2
 8007dee:	b29a      	uxth	r2, r3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007df6:	bf00      	nop
 8007df8:	3714      	adds	r7, #20
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bc80      	pop	{r7}
 8007dfe:	4770      	bx	lr
 8007e00:	0800dfc8 	.word	0x0800dfc8
 8007e04:	0800dfd0 	.word	0x0800dfd0

08007e08 <ReadADCChannel>:
#define CONVERSION_POLL_TIME 10

static uint16_t ReadADCChannel(uint32_t Channel);

static uint16_t ReadADCChannel(uint32_t Channel)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b086      	sub	sp, #24
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
	uint16_t result;
	if (HAL_ADCEx_Calibration_Start(Get_AdcHandle()) != HAL_OK) {
 8007e10:	f7f9 fbfe 	bl	8001610 <Get_AdcHandle>
 8007e14:	4603      	mov	r3, r0
 8007e16:	4618      	mov	r0, r3
 8007e18:	f7fa ff5d 	bl	8002cd6 <HAL_ADCEx_Calibration_Start>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d001      	beq.n	8007e26 <ReadADCChannel+0x1e>
	    Error_Handler();
 8007e22:	f7f9 fc39 	bl	8001698 <Error_Handler>
	  }
	ADC_ChannelConfTypeDef sConfig = {0};
 8007e26:	f107 0308 	add.w	r3, r7, #8
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	601a      	str	r2, [r3, #0]
 8007e2e:	605a      	str	r2, [r3, #4]
 8007e30:	609a      	str	r2, [r3, #8]
	sConfig.Channel = Channel;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8007e36:	2300      	movs	r3, #0
 8007e38:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(Get_AdcHandle(), &sConfig) != HAL_OK) {
 8007e3e:	f7f9 fbe7 	bl	8001610 <Get_AdcHandle>
 8007e42:	4602      	mov	r2, r0
 8007e44:	f107 0308 	add.w	r3, r7, #8
 8007e48:	4619      	mov	r1, r3
 8007e4a:	4610      	mov	r0, r2
 8007e4c:	f7fa fc56 	bl	80026fc <HAL_ADC_ConfigChannel>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d001      	beq.n	8007e5a <ReadADCChannel+0x52>
		Error_Handler();
 8007e56:	f7f9 fc1f 	bl	8001698 <Error_Handler>
	}
	if (HAL_ADC_Start(Get_AdcHandle()) != HAL_OK) {
 8007e5a:	f7f9 fbd9 	bl	8001610 <Get_AdcHandle>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7fa fb2f 	bl	80024c4 <HAL_ADC_Start>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d001      	beq.n	8007e70 <ReadADCChannel+0x68>
		Error_Handler();
 8007e6c:	f7f9 fc14 	bl	8001698 <Error_Handler>
	}
	HAL_ADC_PollForConversion(Get_AdcHandle(), HAL_MAX_DELAY);
 8007e70:	f7f9 fbce 	bl	8001610 <Get_AdcHandle>
 8007e74:	4603      	mov	r3, r0
 8007e76:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7fa fb9a 	bl	80025b4 <HAL_ADC_PollForConversion>
	HAL_ADC_Stop(Get_AdcHandle());
 8007e80:	f7f9 fbc6 	bl	8001610 <Get_AdcHandle>
 8007e84:	4603      	mov	r3, r0
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7fa fb62 	bl	8002550 <HAL_ADC_Stop>
	if((HAL_ADC_GetState(Get_AdcHandle()) & HAL_ADC_STATE_EOC_REG) == HAL_ADC_STATE_EOC_REG)
 8007e8c:	f7f9 fbc0 	bl	8001610 <Get_AdcHandle>
 8007e90:	4603      	mov	r3, r0
 8007e92:	4618      	mov	r0, r3
 8007e94:	f7fa fd6a 	bl	800296c <HAL_ADC_GetState>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ea2:	d107      	bne.n	8007eb4 <ReadADCChannel+0xac>
	{
		/*##-5- Get the converted value of regular channel  ######################*/
		result = (uint16_t)HAL_ADC_GetValue(Get_AdcHandle());
 8007ea4:	f7f9 fbb4 	bl	8001610 <Get_AdcHandle>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7fa fc19 	bl	80026e2 <HAL_ADC_GetValue>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	82fb      	strh	r3, [r7, #22]
	}
	return result;
 8007eb4:	8afb      	ldrh	r3, [r7, #22]
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3718      	adds	r7, #24
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
	...

08007ec0 <AdcRead_VBatt>:


float AdcRead_VBatt(void)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, ADC_SW_Pin, GPIO_PIN_RESET);
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	2180      	movs	r1, #128	; 0x80
 8007ec8:	4819      	ldr	r0, [pc, #100]	; (8007f30 <AdcRead_VBatt+0x70>)
 8007eca:	f7fb facb 	bl	8003464 <HAL_GPIO_WritePin>
	adcResult = (ReadADCChannel(ADC_CHANNEL_2) * 3.3 * 23) / (4096 * 13);
 8007ece:	4819      	ldr	r0, [pc, #100]	; (8007f34 <AdcRead_VBatt+0x74>)
 8007ed0:	f7ff ff9a 	bl	8007e08 <ReadADCChannel>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7f8 fafc 	bl	80004d4 <__aeabi_i2d>
 8007edc:	a312      	add	r3, pc, #72	; (adr r3, 8007f28 <AdcRead_VBatt+0x68>)
 8007ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee2:	f7f8 fb61 	bl	80005a8 <__aeabi_dmul>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	460b      	mov	r3, r1
 8007eea:	4610      	mov	r0, r2
 8007eec:	4619      	mov	r1, r3
 8007eee:	f04f 0200 	mov.w	r2, #0
 8007ef2:	4b11      	ldr	r3, [pc, #68]	; (8007f38 <AdcRead_VBatt+0x78>)
 8007ef4:	f7f8 fb58 	bl	80005a8 <__aeabi_dmul>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	460b      	mov	r3, r1
 8007efc:	4610      	mov	r0, r2
 8007efe:	4619      	mov	r1, r3
 8007f00:	f04f 0200 	mov.w	r2, #0
 8007f04:	4b0d      	ldr	r3, [pc, #52]	; (8007f3c <AdcRead_VBatt+0x7c>)
 8007f06:	f7f8 fc79 	bl	80007fc <__aeabi_ddiv>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	4610      	mov	r0, r2
 8007f10:	4619      	mov	r1, r3
 8007f12:	f7f8 fe21 	bl	8000b58 <__aeabi_d2f>
 8007f16:	4603      	mov	r3, r0
 8007f18:	4a09      	ldr	r2, [pc, #36]	; (8007f40 <AdcRead_VBatt+0x80>)
 8007f1a:	6013      	str	r3, [r2, #0]
	return adcResult;
 8007f1c:	4b08      	ldr	r3, [pc, #32]	; (8007f40 <AdcRead_VBatt+0x80>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	bd80      	pop	{r7, pc}
 8007f24:	f3af 8000 	nop.w
 8007f28:	66666666 	.word	0x66666666
 8007f2c:	400a6666 	.word	0x400a6666
 8007f30:	48000400 	.word	0x48000400
 8007f34:	08000004 	.word	0x08000004
 8007f38:	40370000 	.word	0x40370000
 8007f3c:	40ea0000 	.word	0x40ea0000
 8007f40:	20000c4c 	.word	0x20000c4c

08007f44 <commandReadDeviceId>:


char DataBuffer[200];

void commandReadDeviceId(char *data)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b096      	sub	sp, #88	; 0x58
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  /* Read MCU Id, 32-bit access */
  uint8_t i;
  char DeviceId[50];
  uint8_t serialNumber[12]={0};
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	61bb      	str	r3, [r7, #24]
 8007f50:	f107 031c 	add.w	r3, r7, #28
 8007f54:	2200      	movs	r2, #0
 8007f56:	601a      	str	r2, [r3, #0]
 8007f58:	605a      	str	r2, [r3, #4]
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = HAL_GetUIDw0();
 8007f5a:	f7f9 ff8f 	bl	8001e7c <HAL_GetUIDw0>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	617b      	str	r3, [r7, #20]
  deviceserial1 = HAL_GetUIDw1();
 8007f62:	f7f9 ff95 	bl	8001e90 <HAL_GetUIDw1>
 8007f66:	4603      	mov	r3, r0
 8007f68:	613b      	str	r3, [r7, #16]
  deviceserial2 = HAL_GetUIDw2();
 8007f6a:	f7f9 ff9b 	bl	8001ea4 <HAL_GetUIDw2>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	60fb      	str	r3, [r7, #12]
  memset(serialNumber, 0, 12);
 8007f72:	f107 0318 	add.w	r3, r7, #24
 8007f76:	220c      	movs	r2, #12
 8007f78:	2100      	movs	r1, #0
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f003 f83f 	bl	800affe <memset>
 8007f80:	697b      	ldr	r3, [r7, #20]
  memcpy(&serialNumber[0], &deviceserial0, 4);
 8007f82:	61bb      	str	r3, [r7, #24]
 8007f84:	693b      	ldr	r3, [r7, #16]
  memcpy(&serialNumber[4], &deviceserial1, 4);
 8007f86:	61fb      	str	r3, [r7, #28]
 8007f88:	68fb      	ldr	r3, [r7, #12]
  memcpy(&serialNumber[8], &deviceserial2, 4);
 8007f8a:	623b      	str	r3, [r7, #32]
  snprintf(DeviceId, sizeof(DeviceId), "OK,STDEVICEID,");
 8007f8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f90:	4a1e      	ldr	r2, [pc, #120]	; (800800c <commandReadDeviceId+0xc8>)
 8007f92:	2132      	movs	r1, #50	; 0x32
 8007f94:	4618      	mov	r0, r3
 8007f96:	f003 fda5 	bl	800bae4 <sniprintf>
  serialPutStr(DeviceId);
 8007f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f000 f8d2 	bl	8008148 <serialPutStr>
  for(i=0; i<12; i++)
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8007faa:	e026      	b.n	8007ffa <commandReadDeviceId+0xb6>
  {
    i < 11 ? snprintf(DeviceId, sizeof(DeviceId), "%x", serialNumber[i]) : snprintf(DeviceId, sizeof(DeviceId), "%d\n", serialNumber[i]);
 8007fac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007fb0:	2b0a      	cmp	r3, #10
 8007fb2:	d80c      	bhi.n	8007fce <commandReadDeviceId+0x8a>
 8007fb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007fb8:	3358      	adds	r3, #88	; 0x58
 8007fba:	443b      	add	r3, r7
 8007fbc:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8007fc0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007fc4:	4a12      	ldr	r2, [pc, #72]	; (8008010 <commandReadDeviceId+0xcc>)
 8007fc6:	2132      	movs	r1, #50	; 0x32
 8007fc8:	f003 fd8c 	bl	800bae4 <sniprintf>
 8007fcc:	e00b      	b.n	8007fe6 <commandReadDeviceId+0xa2>
 8007fce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007fd2:	3358      	adds	r3, #88	; 0x58
 8007fd4:	443b      	add	r3, r7
 8007fd6:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8007fda:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007fde:	4a0d      	ldr	r2, [pc, #52]	; (8008014 <commandReadDeviceId+0xd0>)
 8007fe0:	2132      	movs	r1, #50	; 0x32
 8007fe2:	f003 fd7f 	bl	800bae4 <sniprintf>
    serialPutStr(DeviceId);
 8007fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fea:	4618      	mov	r0, r3
 8007fec:	f000 f8ac 	bl	8008148 <serialPutStr>
  for(i=0; i<12; i++)
 8007ff0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8007ffa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ffe:	2b0b      	cmp	r3, #11
 8008000:	d9d4      	bls.n	8007fac <commandReadDeviceId+0x68>
  }
}
 8008002:	bf00      	nop
 8008004:	bf00      	nop
 8008006:	3758      	adds	r7, #88	; 0x58
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	0800de18 	.word	0x0800de18
 8008010:	0800de28 	.word	0x0800de28
 8008014:	0800de2c 	.word	0x0800de2c

08008018 <commandReadDeviceBattery>:


void commandReadDeviceBattery(char *data)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]

	 serialPutStr("OK,BATTREAD");
 8008020:	480a      	ldr	r0, [pc, #40]	; (800804c <commandReadDeviceBattery+0x34>)
 8008022:	f000 f891 	bl	8008148 <serialPutStr>
	 sprintf(DataBuffer,"OK,BATTREAD %f",AdcRead_VBatt());
 8008026:	f7ff ff4b 	bl	8007ec0 <AdcRead_VBatt>
 800802a:	4603      	mov	r3, r0
 800802c:	4618      	mov	r0, r3
 800802e:	f7f8 fa63 	bl	80004f8 <__aeabi_f2d>
 8008032:	4602      	mov	r2, r0
 8008034:	460b      	mov	r3, r1
 8008036:	4906      	ldr	r1, [pc, #24]	; (8008050 <commandReadDeviceBattery+0x38>)
 8008038:	4806      	ldr	r0, [pc, #24]	; (8008054 <commandReadDeviceBattery+0x3c>)
 800803a:	f003 fd87 	bl	800bb4c <siprintf>
	 serialPutStr(DataBuffer);
 800803e:	4805      	ldr	r0, [pc, #20]	; (8008054 <commandReadDeviceBattery+0x3c>)
 8008040:	f000 f882 	bl	8008148 <serialPutStr>
}
 8008044:	bf00      	nop
 8008046:	3708      	adds	r7, #8
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	0800de30 	.word	0x0800de30
 8008050:	0800de3c 	.word	0x0800de3c
 8008054:	20000c50 	.word	0x20000c50

08008058 <commandInvalid>:

void commandInvalid(char *data)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  serialPutStr("ERROR,Invalid Command Handler!\n");
 8008060:	4803      	ldr	r0, [pc, #12]	; (8008070 <commandInvalid+0x18>)
 8008062:	f000 f871 	bl	8008148 <serialPutStr>
}
 8008066:	bf00      	nop
 8008068:	3708      	adds	r7, #8
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	0800de4c 	.word	0x0800de4c

08008074 <commandGetTime>:

char dateTime[100];
void commandGetTime(char *data)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
	RTC_TimeShow(dateTime);
 800807c:	4806      	ldr	r0, [pc, #24]	; (8008098 <commandGetTime+0x24>)
 800807e:	f000 f825 	bl	80080cc <RTC_TimeShow>
	serialPutStr("OK,GETTIME\n");
 8008082:	4806      	ldr	r0, [pc, #24]	; (800809c <commandGetTime+0x28>)
 8008084:	f000 f860 	bl	8008148 <serialPutStr>
	serialPutStr(dateTime);
 8008088:	4803      	ldr	r0, [pc, #12]	; (8008098 <commandGetTime+0x24>)
 800808a:	f000 f85d 	bl	8008148 <serialPutStr>

}
 800808e:	bf00      	nop
 8008090:	3708      	adds	r7, #8
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	20000d18 	.word	0x20000d18
 800809c:	0800de6c 	.word	0x0800de6c

080080a0 <commandGetDate>:

void commandGetDate(char *data)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
	RTC_DateShow(dateTime);
 80080a8:	4806      	ldr	r0, [pc, #24]	; (80080c4 <commandGetDate+0x24>)
 80080aa:	f000 f82d 	bl	8008108 <RTC_DateShow>
    serialPutStr("OK,GETDATE\n");
 80080ae:	4806      	ldr	r0, [pc, #24]	; (80080c8 <commandGetDate+0x28>)
 80080b0:	f000 f84a 	bl	8008148 <serialPutStr>
    serialPutStr(dateTime);
 80080b4:	4803      	ldr	r0, [pc, #12]	; (80080c4 <commandGetDate+0x24>)
 80080b6:	f000 f847 	bl	8008148 <serialPutStr>
}
 80080ba:	bf00      	nop
 80080bc:	3708      	adds	r7, #8
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	20000d18 	.word	0x20000d18
 80080c8:	0800de78 	.word	0x0800de78

080080cc <RTC_TimeShow>:
  * @brief  Display the current time.
  * @param  showtime : pointer to buffer
  * @retval None
  */
void RTC_TimeShow(char *showtime)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b08a      	sub	sp, #40	; 0x28
 80080d0:	af02      	add	r7, sp, #8
 80080d2:	6078      	str	r0, [r7, #4]

  RTC_TimeTypeDef stimestructureget;
  /* Get the RTC current Time */
  HAL_RTC_GetTime(Get_RtcHandle(), &stimestructureget, RTC_FORMAT_BIN);
 80080d4:	f7f9 faba 	bl	800164c <Get_RtcHandle>
 80080d8:	f107 030c 	add.w	r3, r7, #12
 80080dc:	2200      	movs	r2, #0
 80080de:	4619      	mov	r1, r3
 80080e0:	f7fc ff40 	bl	8004f64 <HAL_RTC_GetTime>

  /* Display time Format : hh:mm:ss */
  sprintf((char *)showtime, "%02d:%02d:%02d", stimestructureget.Hours, stimestructureget.Minutes, stimestructureget.Seconds);
 80080e4:	7b3b      	ldrb	r3, [r7, #12]
 80080e6:	461a      	mov	r2, r3
 80080e8:	7b7b      	ldrb	r3, [r7, #13]
 80080ea:	4619      	mov	r1, r3
 80080ec:	7bbb      	ldrb	r3, [r7, #14]
 80080ee:	9300      	str	r3, [sp, #0]
 80080f0:	460b      	mov	r3, r1
 80080f2:	4904      	ldr	r1, [pc, #16]	; (8008104 <RTC_TimeShow+0x38>)
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f003 fd29 	bl	800bb4c <siprintf>
}
 80080fa:	bf00      	nop
 80080fc:	3720      	adds	r7, #32
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	0800de84 	.word	0x0800de84

08008108 <RTC_DateShow>:
  * @brief  Display the current time.
  * @param  showtime : pointer to buffer
  * @retval None
  */
void RTC_DateShow(char *showdate)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b086      	sub	sp, #24
 800810c:	af02      	add	r7, sp, #8
 800810e:	6078      	str	r0, [r7, #4]
  RTC_DateTypeDef sdatestructureget;

  /* Get the RTC current Date */
  HAL_RTC_GetDate(Get_RtcHandle(), &sdatestructureget, RTC_FORMAT_BIN);
 8008110:	f7f9 fa9c 	bl	800164c <Get_RtcHandle>
 8008114:	f107 030c 	add.w	r3, r7, #12
 8008118:	2200      	movs	r2, #0
 800811a:	4619      	mov	r1, r3
 800811c:	f7fd f80a 	bl	8005134 <HAL_RTC_GetDate>
  /* Display date Format: mm-dd-yy */
  sprintf((char *)showdate, "%02d:%02d:%02d", sdatestructureget.Date, sdatestructureget.Month, 2000 + sdatestructureget.Year);
 8008120:	7bbb      	ldrb	r3, [r7, #14]
 8008122:	461a      	mov	r2, r3
 8008124:	7b7b      	ldrb	r3, [r7, #13]
 8008126:	4619      	mov	r1, r3
 8008128:	7bfb      	ldrb	r3, [r7, #15]
 800812a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	460b      	mov	r3, r1
 8008132:	4904      	ldr	r1, [pc, #16]	; (8008144 <RTC_DateShow+0x3c>)
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f003 fd09 	bl	800bb4c <siprintf>
}
 800813a:	bf00      	nop
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop
 8008144:	0800de84 	.word	0x0800de84

08008148 <serialPutStr>:

#include "Uart.h"


void serialPutStr(const char *data)
{
 8008148:	b590      	push	{r4, r7, lr}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
   //Get exclusive access
  //osAcquireMutex(&uartMutex);
  HAL_UART_Transmit(Get_DebugHandle(),(uint8_t *)data, strlen(data),DEBUG_UART_TIMEOUT);
 8008150:	f7f9 fa68 	bl	8001624 <Get_DebugHandle>
 8008154:	4604      	mov	r4, r0
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f7f8 f812 	bl	8000180 <strlen>
 800815c:	4603      	mov	r3, r0
 800815e:	b29a      	uxth	r2, r3
 8008160:	230a      	movs	r3, #10
 8008162:	6879      	ldr	r1, [r7, #4]
 8008164:	4620      	mov	r0, r4
 8008166:	f7fd fe11 	bl	8005d8c <HAL_UART_Transmit>
  //osReleaseMutex(&uartMutex);

}
 800816a:	bf00      	nop
 800816c:	370c      	adds	r7, #12
 800816e:	46bd      	mov	sp, r7
 8008170:	bd90      	pop	{r4, r7, pc}
	...

08008174 <terminalTaskHandler>:



/* USER CODE END Header_terminalTaskHandler */
void terminalTaskHandler(void const * argument)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	int tCommandReady = 0;
 800817c:	2300      	movs	r3, #0
 800817e:	60fb      	str	r3, [r7, #12]
	char tRxedChar;
	HAL_UART_Receive_IT(Get_DebugHandle(),(uint8_t*)uartData,UART_RECEIVE_SIZE);
 8008180:	f7f9 fa50 	bl	8001624 <Get_DebugHandle>
 8008184:	4603      	mov	r3, r0
 8008186:	2201      	movs	r2, #1
 8008188:	4911      	ldr	r1, [pc, #68]	; (80081d0 <terminalTaskHandler+0x5c>)
 800818a:	4618      	mov	r0, r3
 800818c:	f7fd fe84 	bl	8005e98 <HAL_UART_Receive_IT>
	//HAL_UART_Receive_IT(Get_SonarHandle(),(uint8_t*)uartSonic,UART_RECEIVE_SIZE);

	/* Infinite loop */
	serialPutStr("Terminal Thread Initialized");
 8008190:	4810      	ldr	r0, [pc, #64]	; (80081d4 <terminalTaskHandler+0x60>)
 8008192:	f7ff ffd9 	bl	8008148 <serialPutStr>
	for(;;)
	{
		/* Process Terminal Commands */
		if(xQueueReceive(Get_TerminalQueueHandle(),&tRxedChar,QUEUE_TIMEOUT))
 8008196:	f7f9 fa63 	bl	8001660 <Get_TerminalQueueHandle>
 800819a:	f107 030b 	add.w	r3, r7, #11
 800819e:	220a      	movs	r2, #10
 80081a0:	4619      	mov	r1, r3
 80081a2:	f000 fd79 	bl	8008c98 <xQueueReceive>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00c      	beq.n	80081c6 <terminalTaskHandler+0x52>
		{
			tCommandReady = CommandLineBuildCommand(tRxedChar);
 80081ac:	7afb      	ldrb	r3, [r7, #11]
 80081ae:	4618      	mov	r0, r3
 80081b0:	f000 f814 	bl	80081dc <CommandLineBuildCommand>
 80081b4:	60f8      	str	r0, [r7, #12]
			if(tCommandReady)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d004      	beq.n	80081c6 <terminalTaskHandler+0x52>
			{
				CommandLineProcessCommand(gCommandBuffer);
 80081bc:	4806      	ldr	r0, [pc, #24]	; (80081d8 <terminalTaskHandler+0x64>)
 80081be:	f000 f855 	bl	800826c <CommandLineProcessCommand>
				tCommandReady = 0;
 80081c2:	2300      	movs	r3, #0
 80081c4:	60fb      	str	r3, [r7, #12]
			}
		}
		osDelay(1);
 80081c6:	2001      	movs	r0, #1
 80081c8:	f000 f940 	bl	800844c <osDelay>
		if(xQueueReceive(Get_TerminalQueueHandle(),&tRxedChar,QUEUE_TIMEOUT))
 80081cc:	e7e3      	b.n	8008196 <terminalTaskHandler+0x22>
 80081ce:	bf00      	nop
 80081d0:	20000d80 	.word	0x20000d80
 80081d4:	0800debc 	.word	0x0800debc
 80081d8:	20000d88 	.word	0x20000d88

080081dc <CommandLineBuildCommand>:
}


static uint16_t commandBuilderIdx = 0;
int CommandLineBuildCommand(char nextChar)
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	4603      	mov	r3, r0
 80081e4:	71fb      	strb	r3, [r7, #7]
	/* Don't store any new line characters or spaces. */
	if ((nextChar == '\n') || (nextChar == ' ') || (nextChar == '\t'))
 80081e6:	79fb      	ldrb	r3, [r7, #7]
 80081e8:	2b0a      	cmp	r3, #10
 80081ea:	d005      	beq.n	80081f8 <CommandLineBuildCommand+0x1c>
 80081ec:	79fb      	ldrb	r3, [r7, #7]
 80081ee:	2b20      	cmp	r3, #32
 80081f0:	d002      	beq.n	80081f8 <CommandLineBuildCommand+0x1c>
 80081f2:	79fb      	ldrb	r3, [r7, #7]
 80081f4:	2b09      	cmp	r3, #9
 80081f6:	d101      	bne.n	80081fc <CommandLineBuildCommand+0x20>
	{
		return false;
 80081f8:	2300      	movs	r3, #0
 80081fa:	e02d      	b.n	8008258 <CommandLineBuildCommand+0x7c>
	}
	/* The completed command has been received. Replace the final carriage
	 * return character with a NULL character to help with processing the
	 * command. */
	if (nextChar == '\r')
 80081fc:	79fb      	ldrb	r3, [r7, #7]
 80081fe:	2b0d      	cmp	r3, #13
 8008200:	d10a      	bne.n	8008218 <CommandLineBuildCommand+0x3c>
	{
		gCommandBuffer[commandBuilderIdx] = '\0';
 8008202:	4b18      	ldr	r3, [pc, #96]	; (8008264 <CommandLineBuildCommand+0x88>)
 8008204:	881b      	ldrh	r3, [r3, #0]
 8008206:	461a      	mov	r2, r3
 8008208:	4b17      	ldr	r3, [pc, #92]	; (8008268 <CommandLineBuildCommand+0x8c>)
 800820a:	2100      	movs	r1, #0
 800820c:	5499      	strb	r1, [r3, r2]
		commandBuilderIdx = 0;
 800820e:	4b15      	ldr	r3, [pc, #84]	; (8008264 <CommandLineBuildCommand+0x88>)
 8008210:	2200      	movs	r2, #0
 8008212:	801a      	strh	r2, [r3, #0]
		return true;
 8008214:	2301      	movs	r3, #1
 8008216:	e01f      	b.n	8008258 <CommandLineBuildCommand+0x7c>
	}
	/* Convert the incoming character to uppercase. This matches the case
	 * of commands in the command table. Then store the received character
	 * in the command buffer. */
	gCommandBuffer[commandBuilderIdx] = TO_UPPER(nextChar);
 8008218:	79fb      	ldrb	r3, [r7, #7]
 800821a:	2b60      	cmp	r3, #96	; 0x60
 800821c:	d906      	bls.n	800822c <CommandLineBuildCommand+0x50>
 800821e:	79fb      	ldrb	r3, [r7, #7]
 8008220:	2b7a      	cmp	r3, #122	; 0x7a
 8008222:	d803      	bhi.n	800822c <CommandLineBuildCommand+0x50>
 8008224:	79fb      	ldrb	r3, [r7, #7]
 8008226:	3b20      	subs	r3, #32
 8008228:	b2db      	uxtb	r3, r3
 800822a:	e000      	b.n	800822e <CommandLineBuildCommand+0x52>
 800822c:	79fb      	ldrb	r3, [r7, #7]
 800822e:	4a0d      	ldr	r2, [pc, #52]	; (8008264 <CommandLineBuildCommand+0x88>)
 8008230:	8812      	ldrh	r2, [r2, #0]
 8008232:	4611      	mov	r1, r2
 8008234:	4a0c      	ldr	r2, [pc, #48]	; (8008268 <CommandLineBuildCommand+0x8c>)
 8008236:	5453      	strb	r3, [r2, r1]
	commandBuilderIdx++;
 8008238:	4b0a      	ldr	r3, [pc, #40]	; (8008264 <CommandLineBuildCommand+0x88>)
 800823a:	881b      	ldrh	r3, [r3, #0]
 800823c:	3301      	adds	r3, #1
 800823e:	b29a      	uxth	r2, r3
 8008240:	4b08      	ldr	r3, [pc, #32]	; (8008264 <CommandLineBuildCommand+0x88>)
 8008242:	801a      	strh	r2, [r3, #0]
	/* If the command is too long, reset the index and process
	 * the current command buffer. */
	if (commandBuilderIdx >= MAX_COMMAND_LEN)
 8008244:	4b07      	ldr	r3, [pc, #28]	; (8008264 <CommandLineBuildCommand+0x88>)
 8008246:	881b      	ldrh	r3, [r3, #0]
 8008248:	2b77      	cmp	r3, #119	; 0x77
 800824a:	d904      	bls.n	8008256 <CommandLineBuildCommand+0x7a>
	{
		commandBuilderIdx = 0;
 800824c:	4b05      	ldr	r3, [pc, #20]	; (8008264 <CommandLineBuildCommand+0x88>)
 800824e:	2200      	movs	r2, #0
 8008250:	801a      	strh	r2, [r3, #0]
		return true;
 8008252:	2301      	movs	r3, #1
 8008254:	e000      	b.n	8008258 <CommandLineBuildCommand+0x7c>
	}

	return false;
 8008256:	2300      	movs	r3, #0

}
 8008258:	4618      	mov	r0, r3
 800825a:	370c      	adds	r7, #12
 800825c:	46bd      	mov	sp, r7
 800825e:	bc80      	pop	{r7}
 8008260:	4770      	bx	lr
 8008262:	bf00      	nop
 8008264:	20000e6c 	.word	0x20000e6c
 8008268:	20000d88 	.word	0x20000d88

0800826c <CommandLineProcessCommand>:

void CommandLineProcessCommand(char * buffer)
{
 800826c:	b590      	push	{r4, r7, lr}
 800826e:	b087      	sub	sp, #28
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]

	int idx;
	int CommandFound = false;
 8008274:	2300      	movs	r3, #0
 8008276:	613b      	str	r3, [r7, #16]
	//char *Com= strtok(buffer,"+");
	char *Arg = strtok(NULL,"+");
 8008278:	491e      	ldr	r1, [pc, #120]	; (80082f4 <CommandLineProcessCommand+0x88>)
 800827a:	2000      	movs	r0, #0
 800827c:	f003 fcde 	bl	800bc3c <strtok>
 8008280:	60f8      	str	r0, [r7, #12]

	/* Search for the command in the command table until it is found or
	 * the end of the table is reached. If the command is found, break
	 * out of the loop. */
	for (idx = 0; gCommandTable[idx].name != NULL; idx++)
 8008282:	2300      	movs	r3, #0
 8008284:	617b      	str	r3, [r7, #20]
 8008286:	e020      	b.n	80082ca <CommandLineProcessCommand+0x5e>
	{
		if (strncmp(gCommandTable[idx].name, buffer,strlen(gCommandTable[idx].name)) == 0)
 8008288:	4a1b      	ldr	r2, [pc, #108]	; (80082f8 <CommandLineProcessCommand+0x8c>)
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8008290:	4a19      	ldr	r2, [pc, #100]	; (80082f8 <CommandLineProcessCommand+0x8c>)
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008298:	4618      	mov	r0, r3
 800829a:	f7f7 ff71 	bl	8000180 <strlen>
 800829e:	4603      	mov	r3, r0
 80082a0:	461a      	mov	r2, r3
 80082a2:	6879      	ldr	r1, [r7, #4]
 80082a4:	4620      	mov	r0, r4
 80082a6:	f003 fcb4 	bl	800bc12 <strncmp>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d109      	bne.n	80082c4 <CommandLineProcessCommand+0x58>
		{
			CommandFound = true;
 80082b0:	2301      	movs	r3, #1
 80082b2:	613b      	str	r3, [r7, #16]
			(*gCommandTable[idx].function)(Arg);
 80082b4:	4a10      	ldr	r2, [pc, #64]	; (80082f8 <CommandLineProcessCommand+0x8c>)
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	00db      	lsls	r3, r3, #3
 80082ba:	4413      	add	r3, r2
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	68f8      	ldr	r0, [r7, #12]
 80082c0:	4798      	blx	r3
			break;
 80082c2:	e008      	b.n	80082d6 <CommandLineProcessCommand+0x6a>
	for (idx = 0; gCommandTable[idx].name != NULL; idx++)
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	3301      	adds	r3, #1
 80082c8:	617b      	str	r3, [r7, #20]
 80082ca:	4a0b      	ldr	r2, [pc, #44]	; (80082f8 <CommandLineProcessCommand+0x8c>)
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1d8      	bne.n	8008288 <CommandLineProcessCommand+0x1c>
		}
	}
	/* If the command was found, call the command function. Otherwise,
	 * output an error message.*/
	if (CommandFound==false)
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d107      	bne.n	80082ec <CommandLineProcessCommand+0x80>
	{
		snprintf(TerminalMsgBuffer, sizeof(TerminalMsgBuffer), "ERROR,Command not found\n");
 80082dc:	4a07      	ldr	r2, [pc, #28]	; (80082fc <CommandLineProcessCommand+0x90>)
 80082de:	2164      	movs	r1, #100	; 0x64
 80082e0:	4807      	ldr	r0, [pc, #28]	; (8008300 <CommandLineProcessCommand+0x94>)
 80082e2:	f003 fbff 	bl	800bae4 <sniprintf>
		serialPutStr(TerminalMsgBuffer);
 80082e6:	4806      	ldr	r0, [pc, #24]	; (8008300 <CommandLineProcessCommand+0x94>)
 80082e8:	f7ff ff2e 	bl	8008148 <serialPutStr>
	}
}
 80082ec:	bf00      	nop
 80082ee:	371c      	adds	r7, #28
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd90      	pop	{r4, r7, pc}
 80082f4:	0800ded8 	.word	0x0800ded8
 80082f8:	0800dfd8 	.word	0x0800dfd8
 80082fc:	0800dedc 	.word	0x0800dedc
 8008300:	20000e04 	.word	0x20000e04

08008304 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]

	if(huart->Instance==USART2)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a13      	ldr	r2, [pc, #76]	; (8008360 <HAL_UART_RxCpltCallback+0x5c>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d112      	bne.n	800833c <HAL_UART_RxCpltCallback+0x38>
	{
		HAL_UART_Receive_IT(Get_DebugHandle(),(uint8_t*)uartData,UART_RECEIVE_SIZE);
 8008316:	f7f9 f985 	bl	8001624 <Get_DebugHandle>
 800831a:	4603      	mov	r3, r0
 800831c:	2201      	movs	r2, #1
 800831e:	4911      	ldr	r1, [pc, #68]	; (8008364 <HAL_UART_RxCpltCallback+0x60>)
 8008320:	4618      	mov	r0, r3
 8008322:	f7fd fdb9 	bl	8005e98 <HAL_UART_Receive_IT>
		cValuetoPost = (char)uartData[0];
 8008326:	4b0f      	ldr	r3, [pc, #60]	; (8008364 <HAL_UART_RxCpltCallback+0x60>)
 8008328:	781a      	ldrb	r2, [r3, #0]
 800832a:	4b0f      	ldr	r3, [pc, #60]	; (8008368 <HAL_UART_RxCpltCallback+0x64>)
 800832c:	701a      	strb	r2, [r3, #0]
		xQueueSendToBackFromISR(Get_TerminalQueueHandle(),(void*)&cValuetoPost,&xHigherPrioritTaskWoken);
 800832e:	f7f9 f997 	bl	8001660 <Get_TerminalQueueHandle>
 8008332:	2300      	movs	r3, #0
 8008334:	4a0d      	ldr	r2, [pc, #52]	; (800836c <HAL_UART_RxCpltCallback+0x68>)
 8008336:	490c      	ldr	r1, [pc, #48]	; (8008368 <HAL_UART_RxCpltCallback+0x64>)
 8008338:	f000 fc16 	bl	8008b68 <xQueueGenericSendFromISR>
	}
	if(huart->Instance==LPUART1)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a0b      	ldr	r2, [pc, #44]	; (8008370 <HAL_UART_RxCpltCallback+0x6c>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d107      	bne.n	8008356 <HAL_UART_RxCpltCallback+0x52>
	{
		HAL_UART_Receive_IT(Get_SonarHandle(),(uint8_t*)uartSonic,UART_RECEIVE_SIZE);
 8008346:	f7f9 f977 	bl	8001638 <Get_SonarHandle>
 800834a:	4603      	mov	r3, r0
 800834c:	2201      	movs	r2, #1
 800834e:	4909      	ldr	r1, [pc, #36]	; (8008374 <HAL_UART_RxCpltCallback+0x70>)
 8008350:	4618      	mov	r0, r3
 8008352:	f7fd fda1 	bl	8005e98 <HAL_UART_Receive_IT>
		//cValuetoPost = (char)uartData[0];
		//xQueueSendToBackFromISR(Get_TerminalQueueHandle(),(void*)&cValuetoPost,&xHigherPrioritTaskWoken);
	}
	//HAL_UART_Receive_IT(Get_SonarHandle(),(uint8_t*)uartSonic,UART_RECEIVE_SIZE);
}
 8008356:	bf00      	nop
 8008358:	3708      	adds	r7, #8
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	40004400 	.word	0x40004400
 8008364:	20000d80 	.word	0x20000d80
 8008368:	20000d7c 	.word	0x20000d7c
 800836c:	20000e68 	.word	0x20000e68
 8008370:	40008000 	.word	0x40008000
 8008374:	20000d84 	.word	0x20000d84

08008378 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
 800837e:	4603      	mov	r3, r0
 8008380:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008382:	2300      	movs	r3, #0
 8008384:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008386:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800838a:	2b84      	cmp	r3, #132	; 0x84
 800838c:	d005      	beq.n	800839a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800838e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	4413      	add	r3, r2
 8008396:	3303      	adds	r3, #3
 8008398:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800839a:	68fb      	ldr	r3, [r7, #12]
}
 800839c:	4618      	mov	r0, r3
 800839e:	3714      	adds	r7, #20
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bc80      	pop	{r7}
 80083a4:	4770      	bx	lr

080083a6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80083a6:	b580      	push	{r7, lr}
 80083a8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80083aa:	f001 f89f 	bl	80094ec <vTaskStartScheduler>
  
  return osOK;
 80083ae:	2300      	movs	r3, #0
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80083b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083b6:	b089      	sub	sp, #36	; 0x24
 80083b8:	af04      	add	r7, sp, #16
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	695b      	ldr	r3, [r3, #20]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d020      	beq.n	8008408 <osThreadCreate+0x54>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	699b      	ldr	r3, [r3, #24]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d01c      	beq.n	8008408 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	685c      	ldr	r4, [r3, #4]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681d      	ldr	r5, [r3, #0]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	691e      	ldr	r6, [r3, #16]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7ff ffc9 	bl	8008378 <makeFreeRtosPriority>
 80083e6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	695b      	ldr	r3, [r3, #20]
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80083f0:	9202      	str	r2, [sp, #8]
 80083f2:	9301      	str	r3, [sp, #4]
 80083f4:	9100      	str	r1, [sp, #0]
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	4632      	mov	r2, r6
 80083fa:	4629      	mov	r1, r5
 80083fc:	4620      	mov	r0, r4
 80083fe:	f000 fe97 	bl	8009130 <xTaskCreateStatic>
 8008402:	4603      	mov	r3, r0
 8008404:	60fb      	str	r3, [r7, #12]
 8008406:	e01c      	b.n	8008442 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	685c      	ldr	r4, [r3, #4]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008414:	b29e      	uxth	r6, r3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800841c:	4618      	mov	r0, r3
 800841e:	f7ff ffab 	bl	8008378 <makeFreeRtosPriority>
 8008422:	4602      	mov	r2, r0
 8008424:	f107 030c 	add.w	r3, r7, #12
 8008428:	9301      	str	r3, [sp, #4]
 800842a:	9200      	str	r2, [sp, #0]
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	4632      	mov	r2, r6
 8008430:	4629      	mov	r1, r5
 8008432:	4620      	mov	r0, r4
 8008434:	f000 fed9 	bl	80091ea <xTaskCreate>
 8008438:	4603      	mov	r3, r0
 800843a:	2b01      	cmp	r3, #1
 800843c:	d001      	beq.n	8008442 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800843e:	2300      	movs	r3, #0
 8008440:	e000      	b.n	8008444 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008442:	68fb      	ldr	r3, [r7, #12]
}
 8008444:	4618      	mov	r0, r3
 8008446:	3714      	adds	r7, #20
 8008448:	46bd      	mov	sp, r7
 800844a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800844c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d001      	beq.n	8008462 <osDelay+0x16>
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	e000      	b.n	8008464 <osDelay+0x18>
 8008462:	2301      	movs	r3, #1
 8008464:	4618      	mov	r0, r3
 8008466:	f001 f80d 	bl	8009484 <vTaskDelay>
  
  return osOK;
 800846a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800846c:	4618      	mov	r0, r3
 800846e:	3710      	adds	r7, #16
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d007      	beq.n	8008494 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	4619      	mov	r1, r3
 800848a:	2001      	movs	r0, #1
 800848c:	f000 fa53 	bl	8008936 <xQueueCreateMutexStatic>
 8008490:	4603      	mov	r3, r0
 8008492:	e003      	b.n	800849c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8008494:	2001      	movs	r0, #1
 8008496:	f000 fa36 	bl	8008906 <xQueueCreateMutex>
 800849a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800849c:	4618      	mov	r0, r3
 800849e:	3708      	adds	r7, #8
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80084a4:	b590      	push	{r4, r7, lr}
 80084a6:	b085      	sub	sp, #20
 80084a8:	af02      	add	r7, sp, #8
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d011      	beq.n	80084da <osMessageCreate+0x36>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00d      	beq.n	80084da <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6818      	ldr	r0, [r3, #0]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6859      	ldr	r1, [r3, #4]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	689a      	ldr	r2, [r3, #8]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	2400      	movs	r4, #0
 80084d0:	9400      	str	r4, [sp, #0]
 80084d2:	f000 f927 	bl	8008724 <xQueueGenericCreateStatic>
 80084d6:	4603      	mov	r3, r0
 80084d8:	e008      	b.n	80084ec <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6818      	ldr	r0, [r3, #0]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	4619      	mov	r1, r3
 80084e6:	f000 f995 	bl	8008814 <xQueueGenericCreate>
 80084ea:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd90      	pop	{r4, r7, pc}

080084f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f103 0208 	add.w	r2, r3, #8
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800850c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f103 0208 	add.w	r2, r3, #8
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f103 0208 	add.w	r2, r3, #8
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008528:	bf00      	nop
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	bc80      	pop	{r7}
 8008530:	4770      	bx	lr

08008532 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008532:	b480      	push	{r7}
 8008534:	b083      	sub	sp, #12
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008540:	bf00      	nop
 8008542:	370c      	adds	r7, #12
 8008544:	46bd      	mov	sp, r7
 8008546:	bc80      	pop	{r7}
 8008548:	4770      	bx	lr

0800854a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800854a:	b480      	push	{r7}
 800854c:	b085      	sub	sp, #20
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
 8008552:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	689a      	ldr	r2, [r3, #8]
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	683a      	ldr	r2, [r7, #0]
 800856e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	683a      	ldr	r2, [r7, #0]
 8008574:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	1c5a      	adds	r2, r3, #1
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	601a      	str	r2, [r3, #0]
}
 8008586:	bf00      	nop
 8008588:	3714      	adds	r7, #20
 800858a:	46bd      	mov	sp, r7
 800858c:	bc80      	pop	{r7}
 800858e:	4770      	bx	lr

08008590 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008590:	b480      	push	{r7}
 8008592:	b085      	sub	sp, #20
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085a6:	d103      	bne.n	80085b0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	691b      	ldr	r3, [r3, #16]
 80085ac:	60fb      	str	r3, [r7, #12]
 80085ae:	e00c      	b.n	80085ca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	3308      	adds	r3, #8
 80085b4:	60fb      	str	r3, [r7, #12]
 80085b6:	e002      	b.n	80085be <vListInsert+0x2e>
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	60fb      	str	r3, [r7, #12]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	68ba      	ldr	r2, [r7, #8]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d2f6      	bcs.n	80085b8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	685a      	ldr	r2, [r3, #4]
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	683a      	ldr	r2, [r7, #0]
 80085d8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	683a      	ldr	r2, [r7, #0]
 80085e4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	1c5a      	adds	r2, r3, #1
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	601a      	str	r2, [r3, #0]
}
 80085f6:	bf00      	nop
 80085f8:	3714      	adds	r7, #20
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bc80      	pop	{r7}
 80085fe:	4770      	bx	lr

08008600 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008600:	b480      	push	{r7}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	6892      	ldr	r2, [r2, #8]
 8008616:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	6852      	ldr	r2, [r2, #4]
 8008620:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	429a      	cmp	r2, r3
 800862a:	d103      	bne.n	8008634 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	689a      	ldr	r2, [r3, #8]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	1e5a      	subs	r2, r3, #1
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
}
 8008648:	4618      	mov	r0, r3
 800864a:	3714      	adds	r7, #20
 800864c:	46bd      	mov	sp, r7
 800864e:	bc80      	pop	{r7}
 8008650:	4770      	bx	lr
	...

08008654 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d10a      	bne.n	800867e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866c:	f383 8811 	msr	BASEPRI, r3
 8008670:	f3bf 8f6f 	isb	sy
 8008674:	f3bf 8f4f 	dsb	sy
 8008678:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800867a:	bf00      	nop
 800867c:	e7fe      	b.n	800867c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800867e:	f002 f8b5 	bl	800a7ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800868a:	68f9      	ldr	r1, [r7, #12]
 800868c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800868e:	fb01 f303 	mul.w	r3, r1, r3
 8008692:	441a      	add	r2, r3
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2200      	movs	r2, #0
 800869c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681a      	ldr	r2, [r3, #0]
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ae:	3b01      	subs	r3, #1
 80086b0:	68f9      	ldr	r1, [r7, #12]
 80086b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80086b4:	fb01 f303 	mul.w	r3, r1, r3
 80086b8:	441a      	add	r2, r3
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	22ff      	movs	r2, #255	; 0xff
 80086c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	22ff      	movs	r2, #255	; 0xff
 80086ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d114      	bne.n	80086fe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	691b      	ldr	r3, [r3, #16]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d01a      	beq.n	8008712 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	3310      	adds	r3, #16
 80086e0:	4618      	mov	r0, r3
 80086e2:	f001 f995 	bl	8009a10 <xTaskRemoveFromEventList>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d012      	beq.n	8008712 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80086ec:	4b0c      	ldr	r3, [pc, #48]	; (8008720 <xQueueGenericReset+0xcc>)
 80086ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086f2:	601a      	str	r2, [r3, #0]
 80086f4:	f3bf 8f4f 	dsb	sy
 80086f8:	f3bf 8f6f 	isb	sy
 80086fc:	e009      	b.n	8008712 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	3310      	adds	r3, #16
 8008702:	4618      	mov	r0, r3
 8008704:	f7ff fef6 	bl	80084f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	3324      	adds	r3, #36	; 0x24
 800870c:	4618      	mov	r0, r3
 800870e:	f7ff fef1 	bl	80084f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008712:	f002 f89b 	bl	800a84c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008716:	2301      	movs	r3, #1
}
 8008718:	4618      	mov	r0, r3
 800871a:	3710      	adds	r7, #16
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}
 8008720:	e000ed04 	.word	0xe000ed04

08008724 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008724:	b580      	push	{r7, lr}
 8008726:	b08e      	sub	sp, #56	; 0x38
 8008728:	af02      	add	r7, sp, #8
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	607a      	str	r2, [r7, #4]
 8008730:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d10a      	bne.n	800874e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873c:	f383 8811 	msr	BASEPRI, r3
 8008740:	f3bf 8f6f 	isb	sy
 8008744:	f3bf 8f4f 	dsb	sy
 8008748:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800874a:	bf00      	nop
 800874c:	e7fe      	b.n	800874c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d10a      	bne.n	800876a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008758:	f383 8811 	msr	BASEPRI, r3
 800875c:	f3bf 8f6f 	isb	sy
 8008760:	f3bf 8f4f 	dsb	sy
 8008764:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008766:	bf00      	nop
 8008768:	e7fe      	b.n	8008768 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d002      	beq.n	8008776 <xQueueGenericCreateStatic+0x52>
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d001      	beq.n	800877a <xQueueGenericCreateStatic+0x56>
 8008776:	2301      	movs	r3, #1
 8008778:	e000      	b.n	800877c <xQueueGenericCreateStatic+0x58>
 800877a:	2300      	movs	r3, #0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d10a      	bne.n	8008796 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008784:	f383 8811 	msr	BASEPRI, r3
 8008788:	f3bf 8f6f 	isb	sy
 800878c:	f3bf 8f4f 	dsb	sy
 8008790:	623b      	str	r3, [r7, #32]
}
 8008792:	bf00      	nop
 8008794:	e7fe      	b.n	8008794 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d102      	bne.n	80087a2 <xQueueGenericCreateStatic+0x7e>
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d101      	bne.n	80087a6 <xQueueGenericCreateStatic+0x82>
 80087a2:	2301      	movs	r3, #1
 80087a4:	e000      	b.n	80087a8 <xQueueGenericCreateStatic+0x84>
 80087a6:	2300      	movs	r3, #0
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d10a      	bne.n	80087c2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80087ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b0:	f383 8811 	msr	BASEPRI, r3
 80087b4:	f3bf 8f6f 	isb	sy
 80087b8:	f3bf 8f4f 	dsb	sy
 80087bc:	61fb      	str	r3, [r7, #28]
}
 80087be:	bf00      	nop
 80087c0:	e7fe      	b.n	80087c0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80087c2:	2348      	movs	r3, #72	; 0x48
 80087c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	2b48      	cmp	r3, #72	; 0x48
 80087ca:	d00a      	beq.n	80087e2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80087cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d0:	f383 8811 	msr	BASEPRI, r3
 80087d4:	f3bf 8f6f 	isb	sy
 80087d8:	f3bf 8f4f 	dsb	sy
 80087dc:	61bb      	str	r3, [r7, #24]
}
 80087de:	bf00      	nop
 80087e0:	e7fe      	b.n	80087e0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80087e2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80087e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00d      	beq.n	800880a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80087ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f0:	2201      	movs	r2, #1
 80087f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80087f6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80087fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087fc:	9300      	str	r3, [sp, #0]
 80087fe:	4613      	mov	r3, r2
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	68b9      	ldr	r1, [r7, #8]
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f000 f845 	bl	8008894 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800880a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800880c:	4618      	mov	r0, r3
 800880e:	3730      	adds	r7, #48	; 0x30
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008814:	b580      	push	{r7, lr}
 8008816:	b08a      	sub	sp, #40	; 0x28
 8008818:	af02      	add	r7, sp, #8
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	4613      	mov	r3, r2
 8008820:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d10a      	bne.n	800883e <xQueueGenericCreate+0x2a>
	__asm volatile
 8008828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882c:	f383 8811 	msr	BASEPRI, r3
 8008830:	f3bf 8f6f 	isb	sy
 8008834:	f3bf 8f4f 	dsb	sy
 8008838:	613b      	str	r3, [r7, #16]
}
 800883a:	bf00      	nop
 800883c:	e7fe      	b.n	800883c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d102      	bne.n	800884a <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008844:	2300      	movs	r3, #0
 8008846:	61fb      	str	r3, [r7, #28]
 8008848:	e004      	b.n	8008854 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	68ba      	ldr	r2, [r7, #8]
 800884e:	fb02 f303 	mul.w	r3, r2, r3
 8008852:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008854:	69fb      	ldr	r3, [r7, #28]
 8008856:	3348      	adds	r3, #72	; 0x48
 8008858:	4618      	mov	r0, r3
 800885a:	f002 f8c7 	bl	800a9ec <pvPortMalloc>
 800885e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d011      	beq.n	800888a <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008866:	69bb      	ldr	r3, [r7, #24]
 8008868:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	3348      	adds	r3, #72	; 0x48
 800886e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	2200      	movs	r2, #0
 8008874:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008878:	79fa      	ldrb	r2, [r7, #7]
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	9300      	str	r3, [sp, #0]
 800887e:	4613      	mov	r3, r2
 8008880:	697a      	ldr	r2, [r7, #20]
 8008882:	68b9      	ldr	r1, [r7, #8]
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	f000 f805 	bl	8008894 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800888a:	69bb      	ldr	r3, [r7, #24]
	}
 800888c:	4618      	mov	r0, r3
 800888e:	3720      	adds	r7, #32
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	607a      	str	r2, [r7, #4]
 80088a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d103      	bne.n	80088b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80088a8:	69bb      	ldr	r3, [r7, #24]
 80088aa:	69ba      	ldr	r2, [r7, #24]
 80088ac:	601a      	str	r2, [r3, #0]
 80088ae:	e002      	b.n	80088b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80088b0:	69bb      	ldr	r3, [r7, #24]
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80088b6:	69bb      	ldr	r3, [r7, #24]
 80088b8:	68fa      	ldr	r2, [r7, #12]
 80088ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	68ba      	ldr	r2, [r7, #8]
 80088c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80088c2:	2101      	movs	r1, #1
 80088c4:	69b8      	ldr	r0, [r7, #24]
 80088c6:	f7ff fec5 	bl	8008654 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80088ca:	bf00      	nop
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b082      	sub	sp, #8
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d00e      	beq.n	80088fe <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2200      	movs	r2, #0
 80088e4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80088f2:	2300      	movs	r3, #0
 80088f4:	2200      	movs	r2, #0
 80088f6:	2100      	movs	r1, #0
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 f837 	bl	800896c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80088fe:	bf00      	nop
 8008900:	3708      	adds	r7, #8
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008906:	b580      	push	{r7, lr}
 8008908:	b086      	sub	sp, #24
 800890a:	af00      	add	r7, sp, #0
 800890c:	4603      	mov	r3, r0
 800890e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008910:	2301      	movs	r3, #1
 8008912:	617b      	str	r3, [r7, #20]
 8008914:	2300      	movs	r3, #0
 8008916:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008918:	79fb      	ldrb	r3, [r7, #7]
 800891a:	461a      	mov	r2, r3
 800891c:	6939      	ldr	r1, [r7, #16]
 800891e:	6978      	ldr	r0, [r7, #20]
 8008920:	f7ff ff78 	bl	8008814 <xQueueGenericCreate>
 8008924:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008926:	68f8      	ldr	r0, [r7, #12]
 8008928:	f7ff ffd3 	bl	80088d2 <prvInitialiseMutex>

		return xNewQueue;
 800892c:	68fb      	ldr	r3, [r7, #12]
	}
 800892e:	4618      	mov	r0, r3
 8008930:	3718      	adds	r7, #24
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008936:	b580      	push	{r7, lr}
 8008938:	b088      	sub	sp, #32
 800893a:	af02      	add	r7, sp, #8
 800893c:	4603      	mov	r3, r0
 800893e:	6039      	str	r1, [r7, #0]
 8008940:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008942:	2301      	movs	r3, #1
 8008944:	617b      	str	r3, [r7, #20]
 8008946:	2300      	movs	r3, #0
 8008948:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800894a:	79fb      	ldrb	r3, [r7, #7]
 800894c:	9300      	str	r3, [sp, #0]
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	2200      	movs	r2, #0
 8008952:	6939      	ldr	r1, [r7, #16]
 8008954:	6978      	ldr	r0, [r7, #20]
 8008956:	f7ff fee5 	bl	8008724 <xQueueGenericCreateStatic>
 800895a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800895c:	68f8      	ldr	r0, [r7, #12]
 800895e:	f7ff ffb8 	bl	80088d2 <prvInitialiseMutex>

		return xNewQueue;
 8008962:	68fb      	ldr	r3, [r7, #12]
	}
 8008964:	4618      	mov	r0, r3
 8008966:	3718      	adds	r7, #24
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b08e      	sub	sp, #56	; 0x38
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	607a      	str	r2, [r7, #4]
 8008978:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800897a:	2300      	movs	r3, #0
 800897c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008984:	2b00      	cmp	r3, #0
 8008986:	d10a      	bne.n	800899e <xQueueGenericSend+0x32>
	__asm volatile
 8008988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898c:	f383 8811 	msr	BASEPRI, r3
 8008990:	f3bf 8f6f 	isb	sy
 8008994:	f3bf 8f4f 	dsb	sy
 8008998:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800899a:	bf00      	nop
 800899c:	e7fe      	b.n	800899c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d103      	bne.n	80089ac <xQueueGenericSend+0x40>
 80089a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d101      	bne.n	80089b0 <xQueueGenericSend+0x44>
 80089ac:	2301      	movs	r3, #1
 80089ae:	e000      	b.n	80089b2 <xQueueGenericSend+0x46>
 80089b0:	2300      	movs	r3, #0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d10a      	bne.n	80089cc <xQueueGenericSend+0x60>
	__asm volatile
 80089b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ba:	f383 8811 	msr	BASEPRI, r3
 80089be:	f3bf 8f6f 	isb	sy
 80089c2:	f3bf 8f4f 	dsb	sy
 80089c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80089c8:	bf00      	nop
 80089ca:	e7fe      	b.n	80089ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	d103      	bne.n	80089da <xQueueGenericSend+0x6e>
 80089d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d101      	bne.n	80089de <xQueueGenericSend+0x72>
 80089da:	2301      	movs	r3, #1
 80089dc:	e000      	b.n	80089e0 <xQueueGenericSend+0x74>
 80089de:	2300      	movs	r3, #0
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d10a      	bne.n	80089fa <xQueueGenericSend+0x8e>
	__asm volatile
 80089e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e8:	f383 8811 	msr	BASEPRI, r3
 80089ec:	f3bf 8f6f 	isb	sy
 80089f0:	f3bf 8f4f 	dsb	sy
 80089f4:	623b      	str	r3, [r7, #32]
}
 80089f6:	bf00      	nop
 80089f8:	e7fe      	b.n	80089f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80089fa:	f001 f9cb 	bl	8009d94 <xTaskGetSchedulerState>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d102      	bne.n	8008a0a <xQueueGenericSend+0x9e>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d101      	bne.n	8008a0e <xQueueGenericSend+0xa2>
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e000      	b.n	8008a10 <xQueueGenericSend+0xa4>
 8008a0e:	2300      	movs	r3, #0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d10a      	bne.n	8008a2a <xQueueGenericSend+0xbe>
	__asm volatile
 8008a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a18:	f383 8811 	msr	BASEPRI, r3
 8008a1c:	f3bf 8f6f 	isb	sy
 8008a20:	f3bf 8f4f 	dsb	sy
 8008a24:	61fb      	str	r3, [r7, #28]
}
 8008a26:	bf00      	nop
 8008a28:	e7fe      	b.n	8008a28 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a2a:	f001 fedf 	bl	800a7ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d302      	bcc.n	8008a40 <xQueueGenericSend+0xd4>
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	2b02      	cmp	r3, #2
 8008a3e:	d129      	bne.n	8008a94 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a40:	683a      	ldr	r2, [r7, #0]
 8008a42:	68b9      	ldr	r1, [r7, #8]
 8008a44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a46:	f000 fa07 	bl	8008e58 <prvCopyDataToQueue>
 8008a4a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d010      	beq.n	8008a76 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a56:	3324      	adds	r3, #36	; 0x24
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f000 ffd9 	bl	8009a10 <xTaskRemoveFromEventList>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d013      	beq.n	8008a8c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008a64:	4b3f      	ldr	r3, [pc, #252]	; (8008b64 <xQueueGenericSend+0x1f8>)
 8008a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a6a:	601a      	str	r2, [r3, #0]
 8008a6c:	f3bf 8f4f 	dsb	sy
 8008a70:	f3bf 8f6f 	isb	sy
 8008a74:	e00a      	b.n	8008a8c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d007      	beq.n	8008a8c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008a7c:	4b39      	ldr	r3, [pc, #228]	; (8008b64 <xQueueGenericSend+0x1f8>)
 8008a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a82:	601a      	str	r2, [r3, #0]
 8008a84:	f3bf 8f4f 	dsb	sy
 8008a88:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008a8c:	f001 fede 	bl	800a84c <vPortExitCritical>
				return pdPASS;
 8008a90:	2301      	movs	r3, #1
 8008a92:	e063      	b.n	8008b5c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d103      	bne.n	8008aa2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a9a:	f001 fed7 	bl	800a84c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	e05c      	b.n	8008b5c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d106      	bne.n	8008ab6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008aa8:	f107 0314 	add.w	r3, r7, #20
 8008aac:	4618      	mov	r0, r3
 8008aae:	f001 f811 	bl	8009ad4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ab6:	f001 fec9 	bl	800a84c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008aba:	f000 fd87 	bl	80095cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008abe:	f001 fe95 	bl	800a7ec <vPortEnterCritical>
 8008ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ac8:	b25b      	sxtb	r3, r3
 8008aca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ace:	d103      	bne.n	8008ad8 <xQueueGenericSend+0x16c>
 8008ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ada:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ade:	b25b      	sxtb	r3, r3
 8008ae0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ae4:	d103      	bne.n	8008aee <xQueueGenericSend+0x182>
 8008ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008aee:	f001 fead 	bl	800a84c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008af2:	1d3a      	adds	r2, r7, #4
 8008af4:	f107 0314 	add.w	r3, r7, #20
 8008af8:	4611      	mov	r1, r2
 8008afa:	4618      	mov	r0, r3
 8008afc:	f001 f800 	bl	8009b00 <xTaskCheckForTimeOut>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d124      	bne.n	8008b50 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008b06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b08:	f000 fa9e 	bl	8009048 <prvIsQueueFull>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d018      	beq.n	8008b44 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b14:	3310      	adds	r3, #16
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	4611      	mov	r1, r2
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f000 ff28 	bl	8009970 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008b20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b22:	f000 fa29 	bl	8008f78 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008b26:	f000 fd5f 	bl	80095e8 <xTaskResumeAll>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	f47f af7c 	bne.w	8008a2a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008b32:	4b0c      	ldr	r3, [pc, #48]	; (8008b64 <xQueueGenericSend+0x1f8>)
 8008b34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b38:	601a      	str	r2, [r3, #0]
 8008b3a:	f3bf 8f4f 	dsb	sy
 8008b3e:	f3bf 8f6f 	isb	sy
 8008b42:	e772      	b.n	8008a2a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008b44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b46:	f000 fa17 	bl	8008f78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b4a:	f000 fd4d 	bl	80095e8 <xTaskResumeAll>
 8008b4e:	e76c      	b.n	8008a2a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008b50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b52:	f000 fa11 	bl	8008f78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b56:	f000 fd47 	bl	80095e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008b5a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3738      	adds	r7, #56	; 0x38
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	e000ed04 	.word	0xe000ed04

08008b68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b08e      	sub	sp, #56	; 0x38
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	607a      	str	r2, [r7, #4]
 8008b74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d10a      	bne.n	8008b96 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b84:	f383 8811 	msr	BASEPRI, r3
 8008b88:	f3bf 8f6f 	isb	sy
 8008b8c:	f3bf 8f4f 	dsb	sy
 8008b90:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008b92:	bf00      	nop
 8008b94:	e7fe      	b.n	8008b94 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d103      	bne.n	8008ba4 <xQueueGenericSendFromISR+0x3c>
 8008b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d101      	bne.n	8008ba8 <xQueueGenericSendFromISR+0x40>
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	e000      	b.n	8008baa <xQueueGenericSendFromISR+0x42>
 8008ba8:	2300      	movs	r3, #0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d10a      	bne.n	8008bc4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb2:	f383 8811 	msr	BASEPRI, r3
 8008bb6:	f3bf 8f6f 	isb	sy
 8008bba:	f3bf 8f4f 	dsb	sy
 8008bbe:	623b      	str	r3, [r7, #32]
}
 8008bc0:	bf00      	nop
 8008bc2:	e7fe      	b.n	8008bc2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	d103      	bne.n	8008bd2 <xQueueGenericSendFromISR+0x6a>
 8008bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d101      	bne.n	8008bd6 <xQueueGenericSendFromISR+0x6e>
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e000      	b.n	8008bd8 <xQueueGenericSendFromISR+0x70>
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d10a      	bne.n	8008bf2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be0:	f383 8811 	msr	BASEPRI, r3
 8008be4:	f3bf 8f6f 	isb	sy
 8008be8:	f3bf 8f4f 	dsb	sy
 8008bec:	61fb      	str	r3, [r7, #28]
}
 8008bee:	bf00      	nop
 8008bf0:	e7fe      	b.n	8008bf0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008bf2:	f001 febd 	bl	800a970 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008bf6:	f3ef 8211 	mrs	r2, BASEPRI
 8008bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfe:	f383 8811 	msr	BASEPRI, r3
 8008c02:	f3bf 8f6f 	isb	sy
 8008c06:	f3bf 8f4f 	dsb	sy
 8008c0a:	61ba      	str	r2, [r7, #24]
 8008c0c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008c0e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c10:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d302      	bcc.n	8008c24 <xQueueGenericSendFromISR+0xbc>
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	2b02      	cmp	r3, #2
 8008c22:	d12c      	bne.n	8008c7e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c2e:	683a      	ldr	r2, [r7, #0]
 8008c30:	68b9      	ldr	r1, [r7, #8]
 8008c32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c34:	f000 f910 	bl	8008e58 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008c38:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008c3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c40:	d112      	bne.n	8008c68 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d016      	beq.n	8008c78 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4c:	3324      	adds	r3, #36	; 0x24
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f000 fede 	bl	8009a10 <xTaskRemoveFromEventList>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d00e      	beq.n	8008c78 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d00b      	beq.n	8008c78 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2201      	movs	r2, #1
 8008c64:	601a      	str	r2, [r3, #0]
 8008c66:	e007      	b.n	8008c78 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008c68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	b25a      	sxtb	r2, r3
 8008c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008c7c:	e001      	b.n	8008c82 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	637b      	str	r3, [r7, #52]	; 0x34
 8008c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c84:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008c8c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3738      	adds	r7, #56	; 0x38
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b08c      	sub	sp, #48	; 0x30
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d10a      	bne.n	8008cc8 <xQueueReceive+0x30>
	__asm volatile
 8008cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb6:	f383 8811 	msr	BASEPRI, r3
 8008cba:	f3bf 8f6f 	isb	sy
 8008cbe:	f3bf 8f4f 	dsb	sy
 8008cc2:	623b      	str	r3, [r7, #32]
}
 8008cc4:	bf00      	nop
 8008cc6:	e7fe      	b.n	8008cc6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d103      	bne.n	8008cd6 <xQueueReceive+0x3e>
 8008cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d101      	bne.n	8008cda <xQueueReceive+0x42>
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e000      	b.n	8008cdc <xQueueReceive+0x44>
 8008cda:	2300      	movs	r3, #0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d10a      	bne.n	8008cf6 <xQueueReceive+0x5e>
	__asm volatile
 8008ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce4:	f383 8811 	msr	BASEPRI, r3
 8008ce8:	f3bf 8f6f 	isb	sy
 8008cec:	f3bf 8f4f 	dsb	sy
 8008cf0:	61fb      	str	r3, [r7, #28]
}
 8008cf2:	bf00      	nop
 8008cf4:	e7fe      	b.n	8008cf4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008cf6:	f001 f84d 	bl	8009d94 <xTaskGetSchedulerState>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d102      	bne.n	8008d06 <xQueueReceive+0x6e>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d101      	bne.n	8008d0a <xQueueReceive+0x72>
 8008d06:	2301      	movs	r3, #1
 8008d08:	e000      	b.n	8008d0c <xQueueReceive+0x74>
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d10a      	bne.n	8008d26 <xQueueReceive+0x8e>
	__asm volatile
 8008d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d14:	f383 8811 	msr	BASEPRI, r3
 8008d18:	f3bf 8f6f 	isb	sy
 8008d1c:	f3bf 8f4f 	dsb	sy
 8008d20:	61bb      	str	r3, [r7, #24]
}
 8008d22:	bf00      	nop
 8008d24:	e7fe      	b.n	8008d24 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d26:	f001 fd61 	bl	800a7ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d2e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d01f      	beq.n	8008d76 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d36:	68b9      	ldr	r1, [r7, #8]
 8008d38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d3a:	f000 f8f7 	bl	8008f2c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d40:	1e5a      	subs	r2, r3, #1
 8008d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d44:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d48:	691b      	ldr	r3, [r3, #16]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d00f      	beq.n	8008d6e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d50:	3310      	adds	r3, #16
 8008d52:	4618      	mov	r0, r3
 8008d54:	f000 fe5c 	bl	8009a10 <xTaskRemoveFromEventList>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d007      	beq.n	8008d6e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008d5e:	4b3d      	ldr	r3, [pc, #244]	; (8008e54 <xQueueReceive+0x1bc>)
 8008d60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d64:	601a      	str	r2, [r3, #0]
 8008d66:	f3bf 8f4f 	dsb	sy
 8008d6a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008d6e:	f001 fd6d 	bl	800a84c <vPortExitCritical>
				return pdPASS;
 8008d72:	2301      	movs	r3, #1
 8008d74:	e069      	b.n	8008e4a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d103      	bne.n	8008d84 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008d7c:	f001 fd66 	bl	800a84c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008d80:	2300      	movs	r3, #0
 8008d82:	e062      	b.n	8008e4a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d106      	bne.n	8008d98 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d8a:	f107 0310 	add.w	r3, r7, #16
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f000 fea0 	bl	8009ad4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d94:	2301      	movs	r3, #1
 8008d96:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d98:	f001 fd58 	bl	800a84c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d9c:	f000 fc16 	bl	80095cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008da0:	f001 fd24 	bl	800a7ec <vPortEnterCritical>
 8008da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008daa:	b25b      	sxtb	r3, r3
 8008dac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008db0:	d103      	bne.n	8008dba <xQueueReceive+0x122>
 8008db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db4:	2200      	movs	r2, #0
 8008db6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008dc0:	b25b      	sxtb	r3, r3
 8008dc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dc6:	d103      	bne.n	8008dd0 <xQueueReceive+0x138>
 8008dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008dd0:	f001 fd3c 	bl	800a84c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008dd4:	1d3a      	adds	r2, r7, #4
 8008dd6:	f107 0310 	add.w	r3, r7, #16
 8008dda:	4611      	mov	r1, r2
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f000 fe8f 	bl	8009b00 <xTaskCheckForTimeOut>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d123      	bne.n	8008e30 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008de8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dea:	f000 f917 	bl	800901c <prvIsQueueEmpty>
 8008dee:	4603      	mov	r3, r0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d017      	beq.n	8008e24 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df6:	3324      	adds	r3, #36	; 0x24
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	4611      	mov	r1, r2
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f000 fdb7 	bl	8009970 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e04:	f000 f8b8 	bl	8008f78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e08:	f000 fbee 	bl	80095e8 <xTaskResumeAll>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d189      	bne.n	8008d26 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008e12:	4b10      	ldr	r3, [pc, #64]	; (8008e54 <xQueueReceive+0x1bc>)
 8008e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e18:	601a      	str	r2, [r3, #0]
 8008e1a:	f3bf 8f4f 	dsb	sy
 8008e1e:	f3bf 8f6f 	isb	sy
 8008e22:	e780      	b.n	8008d26 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008e24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e26:	f000 f8a7 	bl	8008f78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e2a:	f000 fbdd 	bl	80095e8 <xTaskResumeAll>
 8008e2e:	e77a      	b.n	8008d26 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008e30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e32:	f000 f8a1 	bl	8008f78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e36:	f000 fbd7 	bl	80095e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e3c:	f000 f8ee 	bl	800901c <prvIsQueueEmpty>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	f43f af6f 	beq.w	8008d26 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3730      	adds	r7, #48	; 0x30
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	e000ed04 	.word	0xe000ed04

08008e58 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b086      	sub	sp, #24
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008e64:	2300      	movs	r3, #0
 8008e66:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e6c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d10d      	bne.n	8008e92 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d14d      	bne.n	8008f1a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	4618      	mov	r0, r3
 8008e84:	f000 ffa4 	bl	8009dd0 <xTaskPriorityDisinherit>
 8008e88:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	609a      	str	r2, [r3, #8]
 8008e90:	e043      	b.n	8008f1a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d119      	bne.n	8008ecc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6858      	ldr	r0, [r3, #4]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	68b9      	ldr	r1, [r7, #8]
 8008ea4:	f002 f89d 	bl	800afe2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	685a      	ldr	r2, [r3, #4]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb0:	441a      	add	r2, r3
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	685a      	ldr	r2, [r3, #4]
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	689b      	ldr	r3, [r3, #8]
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d32b      	bcc.n	8008f1a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	605a      	str	r2, [r3, #4]
 8008eca:	e026      	b.n	8008f1a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	68d8      	ldr	r0, [r3, #12]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	68b9      	ldr	r1, [r7, #8]
 8008ed8:	f002 f883 	bl	800afe2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	68da      	ldr	r2, [r3, #12]
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee4:	425b      	negs	r3, r3
 8008ee6:	441a      	add	r2, r3
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	68da      	ldr	r2, [r3, #12]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d207      	bcs.n	8008f08 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	689a      	ldr	r2, [r3, #8]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f00:	425b      	negs	r3, r3
 8008f02:	441a      	add	r2, r3
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2b02      	cmp	r3, #2
 8008f0c:	d105      	bne.n	8008f1a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d002      	beq.n	8008f1a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	3b01      	subs	r3, #1
 8008f18:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	1c5a      	adds	r2, r3, #1
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008f22:	697b      	ldr	r3, [r7, #20]
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3718      	adds	r7, #24
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d018      	beq.n	8008f70 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	68da      	ldr	r2, [r3, #12]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f46:	441a      	add	r2, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	68da      	ldr	r2, [r3, #12]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d303      	bcc.n	8008f60 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	68d9      	ldr	r1, [r3, #12]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f68:	461a      	mov	r2, r3
 8008f6a:	6838      	ldr	r0, [r7, #0]
 8008f6c:	f002 f839 	bl	800afe2 <memcpy>
	}
}
 8008f70:	bf00      	nop
 8008f72:	3708      	adds	r7, #8
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008f80:	f001 fc34 	bl	800a7ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f8a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f8c:	e011      	b.n	8008fb2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d012      	beq.n	8008fbc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	3324      	adds	r3, #36	; 0x24
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f000 fd38 	bl	8009a10 <xTaskRemoveFromEventList>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d001      	beq.n	8008faa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008fa6:	f000 fe0d 	bl	8009bc4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008faa:	7bfb      	ldrb	r3, [r7, #15]
 8008fac:	3b01      	subs	r3, #1
 8008fae:	b2db      	uxtb	r3, r3
 8008fb0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	dce9      	bgt.n	8008f8e <prvUnlockQueue+0x16>
 8008fba:	e000      	b.n	8008fbe <prvUnlockQueue+0x46>
					break;
 8008fbc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	22ff      	movs	r2, #255	; 0xff
 8008fc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008fc6:	f001 fc41 	bl	800a84c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008fca:	f001 fc0f 	bl	800a7ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008fd4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008fd6:	e011      	b.n	8008ffc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	691b      	ldr	r3, [r3, #16]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d012      	beq.n	8009006 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	3310      	adds	r3, #16
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f000 fd13 	bl	8009a10 <xTaskRemoveFromEventList>
 8008fea:	4603      	mov	r3, r0
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d001      	beq.n	8008ff4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008ff0:	f000 fde8 	bl	8009bc4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008ff4:	7bbb      	ldrb	r3, [r7, #14]
 8008ff6:	3b01      	subs	r3, #1
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ffc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009000:	2b00      	cmp	r3, #0
 8009002:	dce9      	bgt.n	8008fd8 <prvUnlockQueue+0x60>
 8009004:	e000      	b.n	8009008 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009006:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	22ff      	movs	r2, #255	; 0xff
 800900c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009010:	f001 fc1c 	bl	800a84c <vPortExitCritical>
}
 8009014:	bf00      	nop
 8009016:	3710      	adds	r7, #16
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009024:	f001 fbe2 	bl	800a7ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800902c:	2b00      	cmp	r3, #0
 800902e:	d102      	bne.n	8009036 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009030:	2301      	movs	r3, #1
 8009032:	60fb      	str	r3, [r7, #12]
 8009034:	e001      	b.n	800903a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009036:	2300      	movs	r3, #0
 8009038:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800903a:	f001 fc07 	bl	800a84c <vPortExitCritical>

	return xReturn;
 800903e:	68fb      	ldr	r3, [r7, #12]
}
 8009040:	4618      	mov	r0, r3
 8009042:	3710      	adds	r7, #16
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009050:	f001 fbcc 	bl	800a7ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800905c:	429a      	cmp	r2, r3
 800905e:	d102      	bne.n	8009066 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009060:	2301      	movs	r3, #1
 8009062:	60fb      	str	r3, [r7, #12]
 8009064:	e001      	b.n	800906a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009066:	2300      	movs	r3, #0
 8009068:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800906a:	f001 fbef 	bl	800a84c <vPortExitCritical>

	return xReturn;
 800906e:	68fb      	ldr	r3, [r7, #12]
}
 8009070:	4618      	mov	r0, r3
 8009072:	3710      	adds	r7, #16
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009078:	b480      	push	{r7}
 800907a:	b085      	sub	sp, #20
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009082:	2300      	movs	r3, #0
 8009084:	60fb      	str	r3, [r7, #12]
 8009086:	e014      	b.n	80090b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009088:	4a0e      	ldr	r2, [pc, #56]	; (80090c4 <vQueueAddToRegistry+0x4c>)
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d10b      	bne.n	80090ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009094:	490b      	ldr	r1, [pc, #44]	; (80090c4 <vQueueAddToRegistry+0x4c>)
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	683a      	ldr	r2, [r7, #0]
 800909a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800909e:	4a09      	ldr	r2, [pc, #36]	; (80090c4 <vQueueAddToRegistry+0x4c>)
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	00db      	lsls	r3, r3, #3
 80090a4:	4413      	add	r3, r2
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80090aa:	e006      	b.n	80090ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	3301      	adds	r3, #1
 80090b0:	60fb      	str	r3, [r7, #12]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2b07      	cmp	r3, #7
 80090b6:	d9e7      	bls.n	8009088 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80090b8:	bf00      	nop
 80090ba:	bf00      	nop
 80090bc:	3714      	adds	r7, #20
 80090be:	46bd      	mov	sp, r7
 80090c0:	bc80      	pop	{r7}
 80090c2:	4770      	bx	lr
 80090c4:	20000e70 	.word	0x20000e70

080090c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b086      	sub	sp, #24
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80090d8:	f001 fb88 	bl	800a7ec <vPortEnterCritical>
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80090e2:	b25b      	sxtb	r3, r3
 80090e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090e8:	d103      	bne.n	80090f2 <vQueueWaitForMessageRestricted+0x2a>
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	2200      	movs	r2, #0
 80090ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80090f8:	b25b      	sxtb	r3, r3
 80090fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090fe:	d103      	bne.n	8009108 <vQueueWaitForMessageRestricted+0x40>
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	2200      	movs	r2, #0
 8009104:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009108:	f001 fba0 	bl	800a84c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009110:	2b00      	cmp	r3, #0
 8009112:	d106      	bne.n	8009122 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	3324      	adds	r3, #36	; 0x24
 8009118:	687a      	ldr	r2, [r7, #4]
 800911a:	68b9      	ldr	r1, [r7, #8]
 800911c:	4618      	mov	r0, r3
 800911e:	f000 fc4b 	bl	80099b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009122:	6978      	ldr	r0, [r7, #20]
 8009124:	f7ff ff28 	bl	8008f78 <prvUnlockQueue>
	}
 8009128:	bf00      	nop
 800912a:	3718      	adds	r7, #24
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009130:	b580      	push	{r7, lr}
 8009132:	b08e      	sub	sp, #56	; 0x38
 8009134:	af04      	add	r7, sp, #16
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	607a      	str	r2, [r7, #4]
 800913c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800913e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009140:	2b00      	cmp	r3, #0
 8009142:	d10a      	bne.n	800915a <xTaskCreateStatic+0x2a>
	__asm volatile
 8009144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009148:	f383 8811 	msr	BASEPRI, r3
 800914c:	f3bf 8f6f 	isb	sy
 8009150:	f3bf 8f4f 	dsb	sy
 8009154:	623b      	str	r3, [r7, #32]
}
 8009156:	bf00      	nop
 8009158:	e7fe      	b.n	8009158 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800915a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800915c:	2b00      	cmp	r3, #0
 800915e:	d10a      	bne.n	8009176 <xTaskCreateStatic+0x46>
	__asm volatile
 8009160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009164:	f383 8811 	msr	BASEPRI, r3
 8009168:	f3bf 8f6f 	isb	sy
 800916c:	f3bf 8f4f 	dsb	sy
 8009170:	61fb      	str	r3, [r7, #28]
}
 8009172:	bf00      	nop
 8009174:	e7fe      	b.n	8009174 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009176:	23b4      	movs	r3, #180	; 0xb4
 8009178:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	2bb4      	cmp	r3, #180	; 0xb4
 800917e:	d00a      	beq.n	8009196 <xTaskCreateStatic+0x66>
	__asm volatile
 8009180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009184:	f383 8811 	msr	BASEPRI, r3
 8009188:	f3bf 8f6f 	isb	sy
 800918c:	f3bf 8f4f 	dsb	sy
 8009190:	61bb      	str	r3, [r7, #24]
}
 8009192:	bf00      	nop
 8009194:	e7fe      	b.n	8009194 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009196:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800919a:	2b00      	cmp	r3, #0
 800919c:	d01e      	beq.n	80091dc <xTaskCreateStatic+0xac>
 800919e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d01b      	beq.n	80091dc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80091a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80091a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091ac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80091ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b0:	2202      	movs	r2, #2
 80091b2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80091b6:	2300      	movs	r3, #0
 80091b8:	9303      	str	r3, [sp, #12]
 80091ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091bc:	9302      	str	r3, [sp, #8]
 80091be:	f107 0314 	add.w	r3, r7, #20
 80091c2:	9301      	str	r3, [sp, #4]
 80091c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c6:	9300      	str	r3, [sp, #0]
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	68b9      	ldr	r1, [r7, #8]
 80091ce:	68f8      	ldr	r0, [r7, #12]
 80091d0:	f000 f850 	bl	8009274 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80091d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80091d6:	f000 f8eb 	bl	80093b0 <prvAddNewTaskToReadyList>
 80091da:	e001      	b.n	80091e0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80091dc:	2300      	movs	r3, #0
 80091de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80091e0:	697b      	ldr	r3, [r7, #20]
	}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3728      	adds	r7, #40	; 0x28
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b08c      	sub	sp, #48	; 0x30
 80091ee:	af04      	add	r7, sp, #16
 80091f0:	60f8      	str	r0, [r7, #12]
 80091f2:	60b9      	str	r1, [r7, #8]
 80091f4:	603b      	str	r3, [r7, #0]
 80091f6:	4613      	mov	r3, r2
 80091f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80091fa:	88fb      	ldrh	r3, [r7, #6]
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	4618      	mov	r0, r3
 8009200:	f001 fbf4 	bl	800a9ec <pvPortMalloc>
 8009204:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d00e      	beq.n	800922a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800920c:	20b4      	movs	r0, #180	; 0xb4
 800920e:	f001 fbed 	bl	800a9ec <pvPortMalloc>
 8009212:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d003      	beq.n	8009222 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800921a:	69fb      	ldr	r3, [r7, #28]
 800921c:	697a      	ldr	r2, [r7, #20]
 800921e:	631a      	str	r2, [r3, #48]	; 0x30
 8009220:	e005      	b.n	800922e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009222:	6978      	ldr	r0, [r7, #20]
 8009224:	f001 fca6 	bl	800ab74 <vPortFree>
 8009228:	e001      	b.n	800922e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800922a:	2300      	movs	r3, #0
 800922c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800922e:	69fb      	ldr	r3, [r7, #28]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d017      	beq.n	8009264 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	2200      	movs	r2, #0
 8009238:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800923c:	88fa      	ldrh	r2, [r7, #6]
 800923e:	2300      	movs	r3, #0
 8009240:	9303      	str	r3, [sp, #12]
 8009242:	69fb      	ldr	r3, [r7, #28]
 8009244:	9302      	str	r3, [sp, #8]
 8009246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009248:	9301      	str	r3, [sp, #4]
 800924a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924c:	9300      	str	r3, [sp, #0]
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	68b9      	ldr	r1, [r7, #8]
 8009252:	68f8      	ldr	r0, [r7, #12]
 8009254:	f000 f80e 	bl	8009274 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009258:	69f8      	ldr	r0, [r7, #28]
 800925a:	f000 f8a9 	bl	80093b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800925e:	2301      	movs	r3, #1
 8009260:	61bb      	str	r3, [r7, #24]
 8009262:	e002      	b.n	800926a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009264:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009268:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800926a:	69bb      	ldr	r3, [r7, #24]
	}
 800926c:	4618      	mov	r0, r3
 800926e:	3720      	adds	r7, #32
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b088      	sub	sp, #32
 8009278:	af00      	add	r7, sp, #0
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	60b9      	str	r1, [r7, #8]
 800927e:	607a      	str	r2, [r7, #4]
 8009280:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009284:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800928c:	3b01      	subs	r3, #1
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	4413      	add	r3, r2
 8009292:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009294:	69bb      	ldr	r3, [r7, #24]
 8009296:	f023 0307 	bic.w	r3, r3, #7
 800929a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800929c:	69bb      	ldr	r3, [r7, #24]
 800929e:	f003 0307 	and.w	r3, r3, #7
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d00a      	beq.n	80092bc <prvInitialiseNewTask+0x48>
	__asm volatile
 80092a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092aa:	f383 8811 	msr	BASEPRI, r3
 80092ae:	f3bf 8f6f 	isb	sy
 80092b2:	f3bf 8f4f 	dsb	sy
 80092b6:	617b      	str	r3, [r7, #20]
}
 80092b8:	bf00      	nop
 80092ba:	e7fe      	b.n	80092ba <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d01f      	beq.n	8009302 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092c2:	2300      	movs	r3, #0
 80092c4:	61fb      	str	r3, [r7, #28]
 80092c6:	e012      	b.n	80092ee <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80092c8:	68ba      	ldr	r2, [r7, #8]
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	4413      	add	r3, r2
 80092ce:	7819      	ldrb	r1, [r3, #0]
 80092d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	4413      	add	r3, r2
 80092d6:	3334      	adds	r3, #52	; 0x34
 80092d8:	460a      	mov	r2, r1
 80092da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80092dc:	68ba      	ldr	r2, [r7, #8]
 80092de:	69fb      	ldr	r3, [r7, #28]
 80092e0:	4413      	add	r3, r2
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d006      	beq.n	80092f6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	3301      	adds	r3, #1
 80092ec:	61fb      	str	r3, [r7, #28]
 80092ee:	69fb      	ldr	r3, [r7, #28]
 80092f0:	2b0f      	cmp	r3, #15
 80092f2:	d9e9      	bls.n	80092c8 <prvInitialiseNewTask+0x54>
 80092f4:	e000      	b.n	80092f8 <prvInitialiseNewTask+0x84>
			{
				break;
 80092f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80092f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092fa:	2200      	movs	r2, #0
 80092fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009300:	e003      	b.n	800930a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009304:	2200      	movs	r2, #0
 8009306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800930a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800930c:	2b06      	cmp	r3, #6
 800930e:	d901      	bls.n	8009314 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009310:	2306      	movs	r3, #6
 8009312:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009316:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009318:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800931a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800931e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009322:	2200      	movs	r2, #0
 8009324:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009328:	3304      	adds	r3, #4
 800932a:	4618      	mov	r0, r3
 800932c:	f7ff f901 	bl	8008532 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009332:	3318      	adds	r3, #24
 8009334:	4618      	mov	r0, r3
 8009336:	f7ff f8fc 	bl	8008532 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800933a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800933c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800933e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009342:	f1c3 0207 	rsb	r2, r3, #7
 8009346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009348:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800934a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800934e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009352:	2200      	movs	r2, #0
 8009354:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935a:	2200      	movs	r2, #0
 800935c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009362:	334c      	adds	r3, #76	; 0x4c
 8009364:	2260      	movs	r2, #96	; 0x60
 8009366:	2100      	movs	r1, #0
 8009368:	4618      	mov	r0, r3
 800936a:	f001 fe48 	bl	800affe <memset>
 800936e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009370:	4a0c      	ldr	r2, [pc, #48]	; (80093a4 <prvInitialiseNewTask+0x130>)
 8009372:	651a      	str	r2, [r3, #80]	; 0x50
 8009374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009376:	4a0c      	ldr	r2, [pc, #48]	; (80093a8 <prvInitialiseNewTask+0x134>)
 8009378:	655a      	str	r2, [r3, #84]	; 0x54
 800937a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800937c:	4a0b      	ldr	r2, [pc, #44]	; (80093ac <prvInitialiseNewTask+0x138>)
 800937e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009380:	683a      	ldr	r2, [r7, #0]
 8009382:	68f9      	ldr	r1, [r7, #12]
 8009384:	69b8      	ldr	r0, [r7, #24]
 8009386:	f001 f93f 	bl	800a608 <pxPortInitialiseStack>
 800938a:	4602      	mov	r2, r0
 800938c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800938e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009392:	2b00      	cmp	r3, #0
 8009394:	d002      	beq.n	800939c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800939a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800939c:	bf00      	nop
 800939e:	3720      	adds	r7, #32
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	0800e638 	.word	0x0800e638
 80093a8:	0800e658 	.word	0x0800e658
 80093ac:	0800e618 	.word	0x0800e618

080093b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80093b8:	f001 fa18 	bl	800a7ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80093bc:	4b2a      	ldr	r3, [pc, #168]	; (8009468 <prvAddNewTaskToReadyList+0xb8>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	3301      	adds	r3, #1
 80093c2:	4a29      	ldr	r2, [pc, #164]	; (8009468 <prvAddNewTaskToReadyList+0xb8>)
 80093c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80093c6:	4b29      	ldr	r3, [pc, #164]	; (800946c <prvAddNewTaskToReadyList+0xbc>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d109      	bne.n	80093e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80093ce:	4a27      	ldr	r2, [pc, #156]	; (800946c <prvAddNewTaskToReadyList+0xbc>)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80093d4:	4b24      	ldr	r3, [pc, #144]	; (8009468 <prvAddNewTaskToReadyList+0xb8>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d110      	bne.n	80093fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80093dc:	f000 fc18 	bl	8009c10 <prvInitialiseTaskLists>
 80093e0:	e00d      	b.n	80093fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80093e2:	4b23      	ldr	r3, [pc, #140]	; (8009470 <prvAddNewTaskToReadyList+0xc0>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d109      	bne.n	80093fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80093ea:	4b20      	ldr	r3, [pc, #128]	; (800946c <prvAddNewTaskToReadyList+0xbc>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d802      	bhi.n	80093fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80093f8:	4a1c      	ldr	r2, [pc, #112]	; (800946c <prvAddNewTaskToReadyList+0xbc>)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80093fe:	4b1d      	ldr	r3, [pc, #116]	; (8009474 <prvAddNewTaskToReadyList+0xc4>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	3301      	adds	r3, #1
 8009404:	4a1b      	ldr	r2, [pc, #108]	; (8009474 <prvAddNewTaskToReadyList+0xc4>)
 8009406:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800940c:	2201      	movs	r2, #1
 800940e:	409a      	lsls	r2, r3
 8009410:	4b19      	ldr	r3, [pc, #100]	; (8009478 <prvAddNewTaskToReadyList+0xc8>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4313      	orrs	r3, r2
 8009416:	4a18      	ldr	r2, [pc, #96]	; (8009478 <prvAddNewTaskToReadyList+0xc8>)
 8009418:	6013      	str	r3, [r2, #0]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800941e:	4613      	mov	r3, r2
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	4413      	add	r3, r2
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	4a15      	ldr	r2, [pc, #84]	; (800947c <prvAddNewTaskToReadyList+0xcc>)
 8009428:	441a      	add	r2, r3
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	3304      	adds	r3, #4
 800942e:	4619      	mov	r1, r3
 8009430:	4610      	mov	r0, r2
 8009432:	f7ff f88a 	bl	800854a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009436:	f001 fa09 	bl	800a84c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800943a:	4b0d      	ldr	r3, [pc, #52]	; (8009470 <prvAddNewTaskToReadyList+0xc0>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d00e      	beq.n	8009460 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009442:	4b0a      	ldr	r3, [pc, #40]	; (800946c <prvAddNewTaskToReadyList+0xbc>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800944c:	429a      	cmp	r2, r3
 800944e:	d207      	bcs.n	8009460 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009450:	4b0b      	ldr	r3, [pc, #44]	; (8009480 <prvAddNewTaskToReadyList+0xd0>)
 8009452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009456:	601a      	str	r2, [r3, #0]
 8009458:	f3bf 8f4f 	dsb	sy
 800945c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009460:	bf00      	nop
 8009462:	3708      	adds	r7, #8
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}
 8009468:	20000fb0 	.word	0x20000fb0
 800946c:	20000eb0 	.word	0x20000eb0
 8009470:	20000fbc 	.word	0x20000fbc
 8009474:	20000fcc 	.word	0x20000fcc
 8009478:	20000fb8 	.word	0x20000fb8
 800947c:	20000eb4 	.word	0x20000eb4
 8009480:	e000ed04 	.word	0xe000ed04

08009484 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009484:	b580      	push	{r7, lr}
 8009486:	b084      	sub	sp, #16
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800948c:	2300      	movs	r3, #0
 800948e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d017      	beq.n	80094c6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009496:	4b13      	ldr	r3, [pc, #76]	; (80094e4 <vTaskDelay+0x60>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d00a      	beq.n	80094b4 <vTaskDelay+0x30>
	__asm volatile
 800949e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a2:	f383 8811 	msr	BASEPRI, r3
 80094a6:	f3bf 8f6f 	isb	sy
 80094aa:	f3bf 8f4f 	dsb	sy
 80094ae:	60bb      	str	r3, [r7, #8]
}
 80094b0:	bf00      	nop
 80094b2:	e7fe      	b.n	80094b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80094b4:	f000 f88a 	bl	80095cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80094b8:	2100      	movs	r1, #0
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 fd0e 	bl	8009edc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80094c0:	f000 f892 	bl	80095e8 <xTaskResumeAll>
 80094c4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d107      	bne.n	80094dc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80094cc:	4b06      	ldr	r3, [pc, #24]	; (80094e8 <vTaskDelay+0x64>)
 80094ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094d2:	601a      	str	r2, [r3, #0]
 80094d4:	f3bf 8f4f 	dsb	sy
 80094d8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80094dc:	bf00      	nop
 80094de:	3710      	adds	r7, #16
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}
 80094e4:	20000fd8 	.word	0x20000fd8
 80094e8:	e000ed04 	.word	0xe000ed04

080094ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b08a      	sub	sp, #40	; 0x28
 80094f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80094f2:	2300      	movs	r3, #0
 80094f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80094f6:	2300      	movs	r3, #0
 80094f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80094fa:	463a      	mov	r2, r7
 80094fc:	1d39      	adds	r1, r7, #4
 80094fe:	f107 0308 	add.w	r3, r7, #8
 8009502:	4618      	mov	r0, r3
 8009504:	f7f7 fd00 	bl	8000f08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009508:	6839      	ldr	r1, [r7, #0]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	68ba      	ldr	r2, [r7, #8]
 800950e:	9202      	str	r2, [sp, #8]
 8009510:	9301      	str	r3, [sp, #4]
 8009512:	2300      	movs	r3, #0
 8009514:	9300      	str	r3, [sp, #0]
 8009516:	2300      	movs	r3, #0
 8009518:	460a      	mov	r2, r1
 800951a:	4924      	ldr	r1, [pc, #144]	; (80095ac <vTaskStartScheduler+0xc0>)
 800951c:	4824      	ldr	r0, [pc, #144]	; (80095b0 <vTaskStartScheduler+0xc4>)
 800951e:	f7ff fe07 	bl	8009130 <xTaskCreateStatic>
 8009522:	4603      	mov	r3, r0
 8009524:	4a23      	ldr	r2, [pc, #140]	; (80095b4 <vTaskStartScheduler+0xc8>)
 8009526:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009528:	4b22      	ldr	r3, [pc, #136]	; (80095b4 <vTaskStartScheduler+0xc8>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d002      	beq.n	8009536 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009530:	2301      	movs	r3, #1
 8009532:	617b      	str	r3, [r7, #20]
 8009534:	e001      	b.n	800953a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009536:	2300      	movs	r3, #0
 8009538:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	2b01      	cmp	r3, #1
 800953e:	d102      	bne.n	8009546 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009540:	f000 fd32 	bl	8009fa8 <xTimerCreateTimerTask>
 8009544:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	2b01      	cmp	r3, #1
 800954a:	d11b      	bne.n	8009584 <vTaskStartScheduler+0x98>
	__asm volatile
 800954c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009550:	f383 8811 	msr	BASEPRI, r3
 8009554:	f3bf 8f6f 	isb	sy
 8009558:	f3bf 8f4f 	dsb	sy
 800955c:	613b      	str	r3, [r7, #16]
}
 800955e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009560:	4b15      	ldr	r3, [pc, #84]	; (80095b8 <vTaskStartScheduler+0xcc>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	334c      	adds	r3, #76	; 0x4c
 8009566:	4a15      	ldr	r2, [pc, #84]	; (80095bc <vTaskStartScheduler+0xd0>)
 8009568:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800956a:	4b15      	ldr	r3, [pc, #84]	; (80095c0 <vTaskStartScheduler+0xd4>)
 800956c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009570:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009572:	4b14      	ldr	r3, [pc, #80]	; (80095c4 <vTaskStartScheduler+0xd8>)
 8009574:	2201      	movs	r2, #1
 8009576:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009578:	4b13      	ldr	r3, [pc, #76]	; (80095c8 <vTaskStartScheduler+0xdc>)
 800957a:	2200      	movs	r2, #0
 800957c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800957e:	f001 f8c3 	bl	800a708 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009582:	e00e      	b.n	80095a2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800958a:	d10a      	bne.n	80095a2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800958c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009590:	f383 8811 	msr	BASEPRI, r3
 8009594:	f3bf 8f6f 	isb	sy
 8009598:	f3bf 8f4f 	dsb	sy
 800959c:	60fb      	str	r3, [r7, #12]
}
 800959e:	bf00      	nop
 80095a0:	e7fe      	b.n	80095a0 <vTaskStartScheduler+0xb4>
}
 80095a2:	bf00      	nop
 80095a4:	3718      	adds	r7, #24
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	0800def8 	.word	0x0800def8
 80095b0:	08009bdd 	.word	0x08009bdd
 80095b4:	20000fd4 	.word	0x20000fd4
 80095b8:	20000eb0 	.word	0x20000eb0
 80095bc:	20000010 	.word	0x20000010
 80095c0:	20000fd0 	.word	0x20000fd0
 80095c4:	20000fbc 	.word	0x20000fbc
 80095c8:	20000fb4 	.word	0x20000fb4

080095cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80095cc:	b480      	push	{r7}
 80095ce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80095d0:	4b04      	ldr	r3, [pc, #16]	; (80095e4 <vTaskSuspendAll+0x18>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	3301      	adds	r3, #1
 80095d6:	4a03      	ldr	r2, [pc, #12]	; (80095e4 <vTaskSuspendAll+0x18>)
 80095d8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80095da:	bf00      	nop
 80095dc:	46bd      	mov	sp, r7
 80095de:	bc80      	pop	{r7}
 80095e0:	4770      	bx	lr
 80095e2:	bf00      	nop
 80095e4:	20000fd8 	.word	0x20000fd8

080095e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80095ee:	2300      	movs	r3, #0
 80095f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80095f2:	2300      	movs	r3, #0
 80095f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80095f6:	4b41      	ldr	r3, [pc, #260]	; (80096fc <xTaskResumeAll+0x114>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d10a      	bne.n	8009614 <xTaskResumeAll+0x2c>
	__asm volatile
 80095fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009602:	f383 8811 	msr	BASEPRI, r3
 8009606:	f3bf 8f6f 	isb	sy
 800960a:	f3bf 8f4f 	dsb	sy
 800960e:	603b      	str	r3, [r7, #0]
}
 8009610:	bf00      	nop
 8009612:	e7fe      	b.n	8009612 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009614:	f001 f8ea 	bl	800a7ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009618:	4b38      	ldr	r3, [pc, #224]	; (80096fc <xTaskResumeAll+0x114>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	3b01      	subs	r3, #1
 800961e:	4a37      	ldr	r2, [pc, #220]	; (80096fc <xTaskResumeAll+0x114>)
 8009620:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009622:	4b36      	ldr	r3, [pc, #216]	; (80096fc <xTaskResumeAll+0x114>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d161      	bne.n	80096ee <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800962a:	4b35      	ldr	r3, [pc, #212]	; (8009700 <xTaskResumeAll+0x118>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d05d      	beq.n	80096ee <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009632:	e02e      	b.n	8009692 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009634:	4b33      	ldr	r3, [pc, #204]	; (8009704 <xTaskResumeAll+0x11c>)
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	68db      	ldr	r3, [r3, #12]
 800963a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	3318      	adds	r3, #24
 8009640:	4618      	mov	r0, r3
 8009642:	f7fe ffdd 	bl	8008600 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	3304      	adds	r3, #4
 800964a:	4618      	mov	r0, r3
 800964c:	f7fe ffd8 	bl	8008600 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009654:	2201      	movs	r2, #1
 8009656:	409a      	lsls	r2, r3
 8009658:	4b2b      	ldr	r3, [pc, #172]	; (8009708 <xTaskResumeAll+0x120>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4313      	orrs	r3, r2
 800965e:	4a2a      	ldr	r2, [pc, #168]	; (8009708 <xTaskResumeAll+0x120>)
 8009660:	6013      	str	r3, [r2, #0]
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009666:	4613      	mov	r3, r2
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	4413      	add	r3, r2
 800966c:	009b      	lsls	r3, r3, #2
 800966e:	4a27      	ldr	r2, [pc, #156]	; (800970c <xTaskResumeAll+0x124>)
 8009670:	441a      	add	r2, r3
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	3304      	adds	r3, #4
 8009676:	4619      	mov	r1, r3
 8009678:	4610      	mov	r0, r2
 800967a:	f7fe ff66 	bl	800854a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009682:	4b23      	ldr	r3, [pc, #140]	; (8009710 <xTaskResumeAll+0x128>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009688:	429a      	cmp	r2, r3
 800968a:	d302      	bcc.n	8009692 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800968c:	4b21      	ldr	r3, [pc, #132]	; (8009714 <xTaskResumeAll+0x12c>)
 800968e:	2201      	movs	r2, #1
 8009690:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009692:	4b1c      	ldr	r3, [pc, #112]	; (8009704 <xTaskResumeAll+0x11c>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d1cc      	bne.n	8009634 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d001      	beq.n	80096a4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80096a0:	f000 fb58 	bl	8009d54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80096a4:	4b1c      	ldr	r3, [pc, #112]	; (8009718 <xTaskResumeAll+0x130>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d010      	beq.n	80096d2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80096b0:	f000 f844 	bl	800973c <xTaskIncrementTick>
 80096b4:	4603      	mov	r3, r0
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d002      	beq.n	80096c0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80096ba:	4b16      	ldr	r3, [pc, #88]	; (8009714 <xTaskResumeAll+0x12c>)
 80096bc:	2201      	movs	r2, #1
 80096be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	3b01      	subs	r3, #1
 80096c4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d1f1      	bne.n	80096b0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80096cc:	4b12      	ldr	r3, [pc, #72]	; (8009718 <xTaskResumeAll+0x130>)
 80096ce:	2200      	movs	r2, #0
 80096d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80096d2:	4b10      	ldr	r3, [pc, #64]	; (8009714 <xTaskResumeAll+0x12c>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d009      	beq.n	80096ee <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80096da:	2301      	movs	r3, #1
 80096dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80096de:	4b0f      	ldr	r3, [pc, #60]	; (800971c <xTaskResumeAll+0x134>)
 80096e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096e4:	601a      	str	r2, [r3, #0]
 80096e6:	f3bf 8f4f 	dsb	sy
 80096ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80096ee:	f001 f8ad 	bl	800a84c <vPortExitCritical>

	return xAlreadyYielded;
 80096f2:	68bb      	ldr	r3, [r7, #8]
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3710      	adds	r7, #16
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}
 80096fc:	20000fd8 	.word	0x20000fd8
 8009700:	20000fb0 	.word	0x20000fb0
 8009704:	20000f70 	.word	0x20000f70
 8009708:	20000fb8 	.word	0x20000fb8
 800970c:	20000eb4 	.word	0x20000eb4
 8009710:	20000eb0 	.word	0x20000eb0
 8009714:	20000fc4 	.word	0x20000fc4
 8009718:	20000fc0 	.word	0x20000fc0
 800971c:	e000ed04 	.word	0xe000ed04

08009720 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009726:	4b04      	ldr	r3, [pc, #16]	; (8009738 <xTaskGetTickCount+0x18>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800972c:	687b      	ldr	r3, [r7, #4]
}
 800972e:	4618      	mov	r0, r3
 8009730:	370c      	adds	r7, #12
 8009732:	46bd      	mov	sp, r7
 8009734:	bc80      	pop	{r7}
 8009736:	4770      	bx	lr
 8009738:	20000fb4 	.word	0x20000fb4

0800973c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b086      	sub	sp, #24
 8009740:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009742:	2300      	movs	r3, #0
 8009744:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009746:	4b4e      	ldr	r3, [pc, #312]	; (8009880 <xTaskIncrementTick+0x144>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	2b00      	cmp	r3, #0
 800974c:	f040 8088 	bne.w	8009860 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009750:	4b4c      	ldr	r3, [pc, #304]	; (8009884 <xTaskIncrementTick+0x148>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	3301      	adds	r3, #1
 8009756:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009758:	4a4a      	ldr	r2, [pc, #296]	; (8009884 <xTaskIncrementTick+0x148>)
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d120      	bne.n	80097a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009764:	4b48      	ldr	r3, [pc, #288]	; (8009888 <xTaskIncrementTick+0x14c>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d00a      	beq.n	8009784 <xTaskIncrementTick+0x48>
	__asm volatile
 800976e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009772:	f383 8811 	msr	BASEPRI, r3
 8009776:	f3bf 8f6f 	isb	sy
 800977a:	f3bf 8f4f 	dsb	sy
 800977e:	603b      	str	r3, [r7, #0]
}
 8009780:	bf00      	nop
 8009782:	e7fe      	b.n	8009782 <xTaskIncrementTick+0x46>
 8009784:	4b40      	ldr	r3, [pc, #256]	; (8009888 <xTaskIncrementTick+0x14c>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	60fb      	str	r3, [r7, #12]
 800978a:	4b40      	ldr	r3, [pc, #256]	; (800988c <xTaskIncrementTick+0x150>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a3e      	ldr	r2, [pc, #248]	; (8009888 <xTaskIncrementTick+0x14c>)
 8009790:	6013      	str	r3, [r2, #0]
 8009792:	4a3e      	ldr	r2, [pc, #248]	; (800988c <xTaskIncrementTick+0x150>)
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	6013      	str	r3, [r2, #0]
 8009798:	4b3d      	ldr	r3, [pc, #244]	; (8009890 <xTaskIncrementTick+0x154>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	3301      	adds	r3, #1
 800979e:	4a3c      	ldr	r2, [pc, #240]	; (8009890 <xTaskIncrementTick+0x154>)
 80097a0:	6013      	str	r3, [r2, #0]
 80097a2:	f000 fad7 	bl	8009d54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80097a6:	4b3b      	ldr	r3, [pc, #236]	; (8009894 <xTaskIncrementTick+0x158>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	693a      	ldr	r2, [r7, #16]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d348      	bcc.n	8009842 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097b0:	4b35      	ldr	r3, [pc, #212]	; (8009888 <xTaskIncrementTick+0x14c>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d104      	bne.n	80097c4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097ba:	4b36      	ldr	r3, [pc, #216]	; (8009894 <xTaskIncrementTick+0x158>)
 80097bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097c0:	601a      	str	r2, [r3, #0]
					break;
 80097c2:	e03e      	b.n	8009842 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097c4:	4b30      	ldr	r3, [pc, #192]	; (8009888 <xTaskIncrementTick+0x14c>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	68db      	ldr	r3, [r3, #12]
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80097d4:	693a      	ldr	r2, [r7, #16]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	429a      	cmp	r2, r3
 80097da:	d203      	bcs.n	80097e4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80097dc:	4a2d      	ldr	r2, [pc, #180]	; (8009894 <xTaskIncrementTick+0x158>)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80097e2:	e02e      	b.n	8009842 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	3304      	adds	r3, #4
 80097e8:	4618      	mov	r0, r3
 80097ea:	f7fe ff09 	bl	8008600 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d004      	beq.n	8009800 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	3318      	adds	r3, #24
 80097fa:	4618      	mov	r0, r3
 80097fc:	f7fe ff00 	bl	8008600 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009804:	2201      	movs	r2, #1
 8009806:	409a      	lsls	r2, r3
 8009808:	4b23      	ldr	r3, [pc, #140]	; (8009898 <xTaskIncrementTick+0x15c>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4313      	orrs	r3, r2
 800980e:	4a22      	ldr	r2, [pc, #136]	; (8009898 <xTaskIncrementTick+0x15c>)
 8009810:	6013      	str	r3, [r2, #0]
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009816:	4613      	mov	r3, r2
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	4413      	add	r3, r2
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	4a1f      	ldr	r2, [pc, #124]	; (800989c <xTaskIncrementTick+0x160>)
 8009820:	441a      	add	r2, r3
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	3304      	adds	r3, #4
 8009826:	4619      	mov	r1, r3
 8009828:	4610      	mov	r0, r2
 800982a:	f7fe fe8e 	bl	800854a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009832:	4b1b      	ldr	r3, [pc, #108]	; (80098a0 <xTaskIncrementTick+0x164>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009838:	429a      	cmp	r2, r3
 800983a:	d3b9      	bcc.n	80097b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800983c:	2301      	movs	r3, #1
 800983e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009840:	e7b6      	b.n	80097b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009842:	4b17      	ldr	r3, [pc, #92]	; (80098a0 <xTaskIncrementTick+0x164>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009848:	4914      	ldr	r1, [pc, #80]	; (800989c <xTaskIncrementTick+0x160>)
 800984a:	4613      	mov	r3, r2
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	4413      	add	r3, r2
 8009850:	009b      	lsls	r3, r3, #2
 8009852:	440b      	add	r3, r1
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	2b01      	cmp	r3, #1
 8009858:	d907      	bls.n	800986a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800985a:	2301      	movs	r3, #1
 800985c:	617b      	str	r3, [r7, #20]
 800985e:	e004      	b.n	800986a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009860:	4b10      	ldr	r3, [pc, #64]	; (80098a4 <xTaskIncrementTick+0x168>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	3301      	adds	r3, #1
 8009866:	4a0f      	ldr	r2, [pc, #60]	; (80098a4 <xTaskIncrementTick+0x168>)
 8009868:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800986a:	4b0f      	ldr	r3, [pc, #60]	; (80098a8 <xTaskIncrementTick+0x16c>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d001      	beq.n	8009876 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8009872:	2301      	movs	r3, #1
 8009874:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009876:	697b      	ldr	r3, [r7, #20]
}
 8009878:	4618      	mov	r0, r3
 800987a:	3718      	adds	r7, #24
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}
 8009880:	20000fd8 	.word	0x20000fd8
 8009884:	20000fb4 	.word	0x20000fb4
 8009888:	20000f68 	.word	0x20000f68
 800988c:	20000f6c 	.word	0x20000f6c
 8009890:	20000fc8 	.word	0x20000fc8
 8009894:	20000fd0 	.word	0x20000fd0
 8009898:	20000fb8 	.word	0x20000fb8
 800989c:	20000eb4 	.word	0x20000eb4
 80098a0:	20000eb0 	.word	0x20000eb0
 80098a4:	20000fc0 	.word	0x20000fc0
 80098a8:	20000fc4 	.word	0x20000fc4

080098ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80098ac:	b480      	push	{r7}
 80098ae:	b087      	sub	sp, #28
 80098b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80098b2:	4b29      	ldr	r3, [pc, #164]	; (8009958 <vTaskSwitchContext+0xac>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d003      	beq.n	80098c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80098ba:	4b28      	ldr	r3, [pc, #160]	; (800995c <vTaskSwitchContext+0xb0>)
 80098bc:	2201      	movs	r2, #1
 80098be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80098c0:	e044      	b.n	800994c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80098c2:	4b26      	ldr	r3, [pc, #152]	; (800995c <vTaskSwitchContext+0xb0>)
 80098c4:	2200      	movs	r2, #0
 80098c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098c8:	4b25      	ldr	r3, [pc, #148]	; (8009960 <vTaskSwitchContext+0xb4>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	fab3 f383 	clz	r3, r3
 80098d4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80098d6:	7afb      	ldrb	r3, [r7, #11]
 80098d8:	f1c3 031f 	rsb	r3, r3, #31
 80098dc:	617b      	str	r3, [r7, #20]
 80098de:	4921      	ldr	r1, [pc, #132]	; (8009964 <vTaskSwitchContext+0xb8>)
 80098e0:	697a      	ldr	r2, [r7, #20]
 80098e2:	4613      	mov	r3, r2
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	4413      	add	r3, r2
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	440b      	add	r3, r1
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d10a      	bne.n	8009908 <vTaskSwitchContext+0x5c>
	__asm volatile
 80098f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f6:	f383 8811 	msr	BASEPRI, r3
 80098fa:	f3bf 8f6f 	isb	sy
 80098fe:	f3bf 8f4f 	dsb	sy
 8009902:	607b      	str	r3, [r7, #4]
}
 8009904:	bf00      	nop
 8009906:	e7fe      	b.n	8009906 <vTaskSwitchContext+0x5a>
 8009908:	697a      	ldr	r2, [r7, #20]
 800990a:	4613      	mov	r3, r2
 800990c:	009b      	lsls	r3, r3, #2
 800990e:	4413      	add	r3, r2
 8009910:	009b      	lsls	r3, r3, #2
 8009912:	4a14      	ldr	r2, [pc, #80]	; (8009964 <vTaskSwitchContext+0xb8>)
 8009914:	4413      	add	r3, r2
 8009916:	613b      	str	r3, [r7, #16]
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	685a      	ldr	r2, [r3, #4]
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	605a      	str	r2, [r3, #4]
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	685a      	ldr	r2, [r3, #4]
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	3308      	adds	r3, #8
 800992a:	429a      	cmp	r2, r3
 800992c:	d104      	bne.n	8009938 <vTaskSwitchContext+0x8c>
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	685a      	ldr	r2, [r3, #4]
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	605a      	str	r2, [r3, #4]
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	68db      	ldr	r3, [r3, #12]
 800993e:	4a0a      	ldr	r2, [pc, #40]	; (8009968 <vTaskSwitchContext+0xbc>)
 8009940:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009942:	4b09      	ldr	r3, [pc, #36]	; (8009968 <vTaskSwitchContext+0xbc>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	334c      	adds	r3, #76	; 0x4c
 8009948:	4a08      	ldr	r2, [pc, #32]	; (800996c <vTaskSwitchContext+0xc0>)
 800994a:	6013      	str	r3, [r2, #0]
}
 800994c:	bf00      	nop
 800994e:	371c      	adds	r7, #28
 8009950:	46bd      	mov	sp, r7
 8009952:	bc80      	pop	{r7}
 8009954:	4770      	bx	lr
 8009956:	bf00      	nop
 8009958:	20000fd8 	.word	0x20000fd8
 800995c:	20000fc4 	.word	0x20000fc4
 8009960:	20000fb8 	.word	0x20000fb8
 8009964:	20000eb4 	.word	0x20000eb4
 8009968:	20000eb0 	.word	0x20000eb0
 800996c:	20000010 	.word	0x20000010

08009970 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d10a      	bne.n	8009996 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009984:	f383 8811 	msr	BASEPRI, r3
 8009988:	f3bf 8f6f 	isb	sy
 800998c:	f3bf 8f4f 	dsb	sy
 8009990:	60fb      	str	r3, [r7, #12]
}
 8009992:	bf00      	nop
 8009994:	e7fe      	b.n	8009994 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009996:	4b07      	ldr	r3, [pc, #28]	; (80099b4 <vTaskPlaceOnEventList+0x44>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	3318      	adds	r3, #24
 800999c:	4619      	mov	r1, r3
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f7fe fdf6 	bl	8008590 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80099a4:	2101      	movs	r1, #1
 80099a6:	6838      	ldr	r0, [r7, #0]
 80099a8:	f000 fa98 	bl	8009edc <prvAddCurrentTaskToDelayedList>
}
 80099ac:	bf00      	nop
 80099ae:	3710      	adds	r7, #16
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}
 80099b4:	20000eb0 	.word	0x20000eb0

080099b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b086      	sub	sp, #24
 80099bc:	af00      	add	r7, sp, #0
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	60b9      	str	r1, [r7, #8]
 80099c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d10a      	bne.n	80099e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80099ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ce:	f383 8811 	msr	BASEPRI, r3
 80099d2:	f3bf 8f6f 	isb	sy
 80099d6:	f3bf 8f4f 	dsb	sy
 80099da:	617b      	str	r3, [r7, #20]
}
 80099dc:	bf00      	nop
 80099de:	e7fe      	b.n	80099de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099e0:	4b0a      	ldr	r3, [pc, #40]	; (8009a0c <vTaskPlaceOnEventListRestricted+0x54>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	3318      	adds	r3, #24
 80099e6:	4619      	mov	r1, r3
 80099e8:	68f8      	ldr	r0, [r7, #12]
 80099ea:	f7fe fdae 	bl	800854a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d002      	beq.n	80099fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80099f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80099f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80099fa:	6879      	ldr	r1, [r7, #4]
 80099fc:	68b8      	ldr	r0, [r7, #8]
 80099fe:	f000 fa6d 	bl	8009edc <prvAddCurrentTaskToDelayedList>
	}
 8009a02:	bf00      	nop
 8009a04:	3718      	adds	r7, #24
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	20000eb0 	.word	0x20000eb0

08009a10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b086      	sub	sp, #24
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	68db      	ldr	r3, [r3, #12]
 8009a1c:	68db      	ldr	r3, [r3, #12]
 8009a1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d10a      	bne.n	8009a3c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a2a:	f383 8811 	msr	BASEPRI, r3
 8009a2e:	f3bf 8f6f 	isb	sy
 8009a32:	f3bf 8f4f 	dsb	sy
 8009a36:	60fb      	str	r3, [r7, #12]
}
 8009a38:	bf00      	nop
 8009a3a:	e7fe      	b.n	8009a3a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	3318      	adds	r3, #24
 8009a40:	4618      	mov	r0, r3
 8009a42:	f7fe fddd 	bl	8008600 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a46:	4b1d      	ldr	r3, [pc, #116]	; (8009abc <xTaskRemoveFromEventList+0xac>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d11c      	bne.n	8009a88 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	3304      	adds	r3, #4
 8009a52:	4618      	mov	r0, r3
 8009a54:	f7fe fdd4 	bl	8008600 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	409a      	lsls	r2, r3
 8009a60:	4b17      	ldr	r3, [pc, #92]	; (8009ac0 <xTaskRemoveFromEventList+0xb0>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4313      	orrs	r3, r2
 8009a66:	4a16      	ldr	r2, [pc, #88]	; (8009ac0 <xTaskRemoveFromEventList+0xb0>)
 8009a68:	6013      	str	r3, [r2, #0]
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a6e:	4613      	mov	r3, r2
 8009a70:	009b      	lsls	r3, r3, #2
 8009a72:	4413      	add	r3, r2
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	4a13      	ldr	r2, [pc, #76]	; (8009ac4 <xTaskRemoveFromEventList+0xb4>)
 8009a78:	441a      	add	r2, r3
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	3304      	adds	r3, #4
 8009a7e:	4619      	mov	r1, r3
 8009a80:	4610      	mov	r0, r2
 8009a82:	f7fe fd62 	bl	800854a <vListInsertEnd>
 8009a86:	e005      	b.n	8009a94 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	3318      	adds	r3, #24
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	480e      	ldr	r0, [pc, #56]	; (8009ac8 <xTaskRemoveFromEventList+0xb8>)
 8009a90:	f7fe fd5b 	bl	800854a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a98:	4b0c      	ldr	r3, [pc, #48]	; (8009acc <xTaskRemoveFromEventList+0xbc>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	d905      	bls.n	8009aae <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009aa6:	4b0a      	ldr	r3, [pc, #40]	; (8009ad0 <xTaskRemoveFromEventList+0xc0>)
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	601a      	str	r2, [r3, #0]
 8009aac:	e001      	b.n	8009ab2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009ab2:	697b      	ldr	r3, [r7, #20]
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3718      	adds	r7, #24
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	20000fd8 	.word	0x20000fd8
 8009ac0:	20000fb8 	.word	0x20000fb8
 8009ac4:	20000eb4 	.word	0x20000eb4
 8009ac8:	20000f70 	.word	0x20000f70
 8009acc:	20000eb0 	.word	0x20000eb0
 8009ad0:	20000fc4 	.word	0x20000fc4

08009ad4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009adc:	4b06      	ldr	r3, [pc, #24]	; (8009af8 <vTaskInternalSetTimeOutState+0x24>)
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009ae4:	4b05      	ldr	r3, [pc, #20]	; (8009afc <vTaskInternalSetTimeOutState+0x28>)
 8009ae6:	681a      	ldr	r2, [r3, #0]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	605a      	str	r2, [r3, #4]
}
 8009aec:	bf00      	nop
 8009aee:	370c      	adds	r7, #12
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bc80      	pop	{r7}
 8009af4:	4770      	bx	lr
 8009af6:	bf00      	nop
 8009af8:	20000fc8 	.word	0x20000fc8
 8009afc:	20000fb4 	.word	0x20000fb4

08009b00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b088      	sub	sp, #32
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d10a      	bne.n	8009b26 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b14:	f383 8811 	msr	BASEPRI, r3
 8009b18:	f3bf 8f6f 	isb	sy
 8009b1c:	f3bf 8f4f 	dsb	sy
 8009b20:	613b      	str	r3, [r7, #16]
}
 8009b22:	bf00      	nop
 8009b24:	e7fe      	b.n	8009b24 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d10a      	bne.n	8009b42 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b30:	f383 8811 	msr	BASEPRI, r3
 8009b34:	f3bf 8f6f 	isb	sy
 8009b38:	f3bf 8f4f 	dsb	sy
 8009b3c:	60fb      	str	r3, [r7, #12]
}
 8009b3e:	bf00      	nop
 8009b40:	e7fe      	b.n	8009b40 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009b42:	f000 fe53 	bl	800a7ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009b46:	4b1d      	ldr	r3, [pc, #116]	; (8009bbc <xTaskCheckForTimeOut+0xbc>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	69ba      	ldr	r2, [r7, #24]
 8009b52:	1ad3      	subs	r3, r2, r3
 8009b54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b5e:	d102      	bne.n	8009b66 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009b60:	2300      	movs	r3, #0
 8009b62:	61fb      	str	r3, [r7, #28]
 8009b64:	e023      	b.n	8009bae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681a      	ldr	r2, [r3, #0]
 8009b6a:	4b15      	ldr	r3, [pc, #84]	; (8009bc0 <xTaskCheckForTimeOut+0xc0>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d007      	beq.n	8009b82 <xTaskCheckForTimeOut+0x82>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	69ba      	ldr	r2, [r7, #24]
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d302      	bcc.n	8009b82 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	61fb      	str	r3, [r7, #28]
 8009b80:	e015      	b.n	8009bae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	697a      	ldr	r2, [r7, #20]
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d20b      	bcs.n	8009ba4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	681a      	ldr	r2, [r3, #0]
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	1ad2      	subs	r2, r2, r3
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f7ff ff9b 	bl	8009ad4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	61fb      	str	r3, [r7, #28]
 8009ba2:	e004      	b.n	8009bae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009baa:	2301      	movs	r3, #1
 8009bac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009bae:	f000 fe4d 	bl	800a84c <vPortExitCritical>

	return xReturn;
 8009bb2:	69fb      	ldr	r3, [r7, #28]
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3720      	adds	r7, #32
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}
 8009bbc:	20000fb4 	.word	0x20000fb4
 8009bc0:	20000fc8 	.word	0x20000fc8

08009bc4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009bc8:	4b03      	ldr	r3, [pc, #12]	; (8009bd8 <vTaskMissedYield+0x14>)
 8009bca:	2201      	movs	r2, #1
 8009bcc:	601a      	str	r2, [r3, #0]
}
 8009bce:	bf00      	nop
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bc80      	pop	{r7}
 8009bd4:	4770      	bx	lr
 8009bd6:	bf00      	nop
 8009bd8:	20000fc4 	.word	0x20000fc4

08009bdc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b082      	sub	sp, #8
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009be4:	f000 f854 	bl	8009c90 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009be8:	4b07      	ldr	r3, [pc, #28]	; (8009c08 <prvIdleTask+0x2c>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d907      	bls.n	8009c00 <prvIdleTask+0x24>
			{
				taskYIELD();
 8009bf0:	4b06      	ldr	r3, [pc, #24]	; (8009c0c <prvIdleTask+0x30>)
 8009bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bf6:	601a      	str	r2, [r3, #0]
 8009bf8:	f3bf 8f4f 	dsb	sy
 8009bfc:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8009c00:	f7f7 f97c 	bl	8000efc <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8009c04:	e7ee      	b.n	8009be4 <prvIdleTask+0x8>
 8009c06:	bf00      	nop
 8009c08:	20000eb4 	.word	0x20000eb4
 8009c0c:	e000ed04 	.word	0xe000ed04

08009c10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c16:	2300      	movs	r3, #0
 8009c18:	607b      	str	r3, [r7, #4]
 8009c1a:	e00c      	b.n	8009c36 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	4613      	mov	r3, r2
 8009c20:	009b      	lsls	r3, r3, #2
 8009c22:	4413      	add	r3, r2
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	4a12      	ldr	r2, [pc, #72]	; (8009c70 <prvInitialiseTaskLists+0x60>)
 8009c28:	4413      	add	r3, r2
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f7fe fc62 	bl	80084f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	3301      	adds	r3, #1
 8009c34:	607b      	str	r3, [r7, #4]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2b06      	cmp	r3, #6
 8009c3a:	d9ef      	bls.n	8009c1c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009c3c:	480d      	ldr	r0, [pc, #52]	; (8009c74 <prvInitialiseTaskLists+0x64>)
 8009c3e:	f7fe fc59 	bl	80084f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009c42:	480d      	ldr	r0, [pc, #52]	; (8009c78 <prvInitialiseTaskLists+0x68>)
 8009c44:	f7fe fc56 	bl	80084f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009c48:	480c      	ldr	r0, [pc, #48]	; (8009c7c <prvInitialiseTaskLists+0x6c>)
 8009c4a:	f7fe fc53 	bl	80084f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009c4e:	480c      	ldr	r0, [pc, #48]	; (8009c80 <prvInitialiseTaskLists+0x70>)
 8009c50:	f7fe fc50 	bl	80084f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009c54:	480b      	ldr	r0, [pc, #44]	; (8009c84 <prvInitialiseTaskLists+0x74>)
 8009c56:	f7fe fc4d 	bl	80084f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009c5a:	4b0b      	ldr	r3, [pc, #44]	; (8009c88 <prvInitialiseTaskLists+0x78>)
 8009c5c:	4a05      	ldr	r2, [pc, #20]	; (8009c74 <prvInitialiseTaskLists+0x64>)
 8009c5e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009c60:	4b0a      	ldr	r3, [pc, #40]	; (8009c8c <prvInitialiseTaskLists+0x7c>)
 8009c62:	4a05      	ldr	r2, [pc, #20]	; (8009c78 <prvInitialiseTaskLists+0x68>)
 8009c64:	601a      	str	r2, [r3, #0]
}
 8009c66:	bf00      	nop
 8009c68:	3708      	adds	r7, #8
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	20000eb4 	.word	0x20000eb4
 8009c74:	20000f40 	.word	0x20000f40
 8009c78:	20000f54 	.word	0x20000f54
 8009c7c:	20000f70 	.word	0x20000f70
 8009c80:	20000f84 	.word	0x20000f84
 8009c84:	20000f9c 	.word	0x20000f9c
 8009c88:	20000f68 	.word	0x20000f68
 8009c8c:	20000f6c 	.word	0x20000f6c

08009c90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b082      	sub	sp, #8
 8009c94:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c96:	e019      	b.n	8009ccc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009c98:	f000 fda8 	bl	800a7ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c9c:	4b10      	ldr	r3, [pc, #64]	; (8009ce0 <prvCheckTasksWaitingTermination+0x50>)
 8009c9e:	68db      	ldr	r3, [r3, #12]
 8009ca0:	68db      	ldr	r3, [r3, #12]
 8009ca2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	3304      	adds	r3, #4
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f7fe fca9 	bl	8008600 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009cae:	4b0d      	ldr	r3, [pc, #52]	; (8009ce4 <prvCheckTasksWaitingTermination+0x54>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	3b01      	subs	r3, #1
 8009cb4:	4a0b      	ldr	r2, [pc, #44]	; (8009ce4 <prvCheckTasksWaitingTermination+0x54>)
 8009cb6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009cb8:	4b0b      	ldr	r3, [pc, #44]	; (8009ce8 <prvCheckTasksWaitingTermination+0x58>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	3b01      	subs	r3, #1
 8009cbe:	4a0a      	ldr	r2, [pc, #40]	; (8009ce8 <prvCheckTasksWaitingTermination+0x58>)
 8009cc0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009cc2:	f000 fdc3 	bl	800a84c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 f810 	bl	8009cec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ccc:	4b06      	ldr	r3, [pc, #24]	; (8009ce8 <prvCheckTasksWaitingTermination+0x58>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d1e1      	bne.n	8009c98 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009cd4:	bf00      	nop
 8009cd6:	bf00      	nop
 8009cd8:	3708      	adds	r7, #8
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}
 8009cde:	bf00      	nop
 8009ce0:	20000f84 	.word	0x20000f84
 8009ce4:	20000fb0 	.word	0x20000fb0
 8009ce8:	20000f98 	.word	0x20000f98

08009cec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	334c      	adds	r3, #76	; 0x4c
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f001 fe87 	bl	800ba0c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d108      	bne.n	8009d1a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f000 ff31 	bl	800ab74 <vPortFree>
				vPortFree( pxTCB );
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 ff2e 	bl	800ab74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009d18:	e018      	b.n	8009d4c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d103      	bne.n	8009d2c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f000 ff25 	bl	800ab74 <vPortFree>
	}
 8009d2a:	e00f      	b.n	8009d4c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009d32:	2b02      	cmp	r3, #2
 8009d34:	d00a      	beq.n	8009d4c <prvDeleteTCB+0x60>
	__asm volatile
 8009d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d3a:	f383 8811 	msr	BASEPRI, r3
 8009d3e:	f3bf 8f6f 	isb	sy
 8009d42:	f3bf 8f4f 	dsb	sy
 8009d46:	60fb      	str	r3, [r7, #12]
}
 8009d48:	bf00      	nop
 8009d4a:	e7fe      	b.n	8009d4a <prvDeleteTCB+0x5e>
	}
 8009d4c:	bf00      	nop
 8009d4e:	3710      	adds	r7, #16
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009d54:	b480      	push	{r7}
 8009d56:	b083      	sub	sp, #12
 8009d58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d5a:	4b0c      	ldr	r3, [pc, #48]	; (8009d8c <prvResetNextTaskUnblockTime+0x38>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d104      	bne.n	8009d6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009d64:	4b0a      	ldr	r3, [pc, #40]	; (8009d90 <prvResetNextTaskUnblockTime+0x3c>)
 8009d66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009d6c:	e008      	b.n	8009d80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d6e:	4b07      	ldr	r3, [pc, #28]	; (8009d8c <prvResetNextTaskUnblockTime+0x38>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	68db      	ldr	r3, [r3, #12]
 8009d74:	68db      	ldr	r3, [r3, #12]
 8009d76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	4a04      	ldr	r2, [pc, #16]	; (8009d90 <prvResetNextTaskUnblockTime+0x3c>)
 8009d7e:	6013      	str	r3, [r2, #0]
}
 8009d80:	bf00      	nop
 8009d82:	370c      	adds	r7, #12
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bc80      	pop	{r7}
 8009d88:	4770      	bx	lr
 8009d8a:	bf00      	nop
 8009d8c:	20000f68 	.word	0x20000f68
 8009d90:	20000fd0 	.word	0x20000fd0

08009d94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009d94:	b480      	push	{r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009d9a:	4b0b      	ldr	r3, [pc, #44]	; (8009dc8 <xTaskGetSchedulerState+0x34>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d102      	bne.n	8009da8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009da2:	2301      	movs	r3, #1
 8009da4:	607b      	str	r3, [r7, #4]
 8009da6:	e008      	b.n	8009dba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009da8:	4b08      	ldr	r3, [pc, #32]	; (8009dcc <xTaskGetSchedulerState+0x38>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d102      	bne.n	8009db6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009db0:	2302      	movs	r3, #2
 8009db2:	607b      	str	r3, [r7, #4]
 8009db4:	e001      	b.n	8009dba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009db6:	2300      	movs	r3, #0
 8009db8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009dba:	687b      	ldr	r3, [r7, #4]
	}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	370c      	adds	r7, #12
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bc80      	pop	{r7}
 8009dc4:	4770      	bx	lr
 8009dc6:	bf00      	nop
 8009dc8:	20000fbc 	.word	0x20000fbc
 8009dcc:	20000fd8 	.word	0x20000fd8

08009dd0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b086      	sub	sp, #24
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d06e      	beq.n	8009ec4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009de6:	4b3a      	ldr	r3, [pc, #232]	; (8009ed0 <xTaskPriorityDisinherit+0x100>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	693a      	ldr	r2, [r7, #16]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d00a      	beq.n	8009e06 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df4:	f383 8811 	msr	BASEPRI, r3
 8009df8:	f3bf 8f6f 	isb	sy
 8009dfc:	f3bf 8f4f 	dsb	sy
 8009e00:	60fb      	str	r3, [r7, #12]
}
 8009e02:	bf00      	nop
 8009e04:	e7fe      	b.n	8009e04 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d10a      	bne.n	8009e24 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e12:	f383 8811 	msr	BASEPRI, r3
 8009e16:	f3bf 8f6f 	isb	sy
 8009e1a:	f3bf 8f4f 	dsb	sy
 8009e1e:	60bb      	str	r3, [r7, #8]
}
 8009e20:	bf00      	nop
 8009e22:	e7fe      	b.n	8009e22 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e28:	1e5a      	subs	r2, r3, #1
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d044      	beq.n	8009ec4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d140      	bne.n	8009ec4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	3304      	adds	r3, #4
 8009e46:	4618      	mov	r0, r3
 8009e48:	f7fe fbda 	bl	8008600 <uxListRemove>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d115      	bne.n	8009e7e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e56:	491f      	ldr	r1, [pc, #124]	; (8009ed4 <xTaskPriorityDisinherit+0x104>)
 8009e58:	4613      	mov	r3, r2
 8009e5a:	009b      	lsls	r3, r3, #2
 8009e5c:	4413      	add	r3, r2
 8009e5e:	009b      	lsls	r3, r3, #2
 8009e60:	440b      	add	r3, r1
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d10a      	bne.n	8009e7e <xTaskPriorityDisinherit+0xae>
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e72:	43da      	mvns	r2, r3
 8009e74:	4b18      	ldr	r3, [pc, #96]	; (8009ed8 <xTaskPriorityDisinherit+0x108>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4013      	ands	r3, r2
 8009e7a:	4a17      	ldr	r2, [pc, #92]	; (8009ed8 <xTaskPriorityDisinherit+0x108>)
 8009e7c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e8a:	f1c3 0207 	rsb	r2, r3, #7
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e96:	2201      	movs	r2, #1
 8009e98:	409a      	lsls	r2, r3
 8009e9a:	4b0f      	ldr	r3, [pc, #60]	; (8009ed8 <xTaskPriorityDisinherit+0x108>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	4a0d      	ldr	r2, [pc, #52]	; (8009ed8 <xTaskPriorityDisinherit+0x108>)
 8009ea2:	6013      	str	r3, [r2, #0]
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ea8:	4613      	mov	r3, r2
 8009eaa:	009b      	lsls	r3, r3, #2
 8009eac:	4413      	add	r3, r2
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	4a08      	ldr	r2, [pc, #32]	; (8009ed4 <xTaskPriorityDisinherit+0x104>)
 8009eb2:	441a      	add	r2, r3
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	3304      	adds	r3, #4
 8009eb8:	4619      	mov	r1, r3
 8009eba:	4610      	mov	r0, r2
 8009ebc:	f7fe fb45 	bl	800854a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009ec4:	697b      	ldr	r3, [r7, #20]
	}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3718      	adds	r7, #24
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	20000eb0 	.word	0x20000eb0
 8009ed4:	20000eb4 	.word	0x20000eb4
 8009ed8:	20000fb8 	.word	0x20000fb8

08009edc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009ee6:	4b29      	ldr	r3, [pc, #164]	; (8009f8c <prvAddCurrentTaskToDelayedList+0xb0>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009eec:	4b28      	ldr	r3, [pc, #160]	; (8009f90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	3304      	adds	r3, #4
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7fe fb84 	bl	8008600 <uxListRemove>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d10b      	bne.n	8009f16 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009efe:	4b24      	ldr	r3, [pc, #144]	; (8009f90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f04:	2201      	movs	r2, #1
 8009f06:	fa02 f303 	lsl.w	r3, r2, r3
 8009f0a:	43da      	mvns	r2, r3
 8009f0c:	4b21      	ldr	r3, [pc, #132]	; (8009f94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4013      	ands	r3, r2
 8009f12:	4a20      	ldr	r2, [pc, #128]	; (8009f94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009f14:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f1c:	d10a      	bne.n	8009f34 <prvAddCurrentTaskToDelayedList+0x58>
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d007      	beq.n	8009f34 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f24:	4b1a      	ldr	r3, [pc, #104]	; (8009f90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	3304      	adds	r3, #4
 8009f2a:	4619      	mov	r1, r3
 8009f2c:	481a      	ldr	r0, [pc, #104]	; (8009f98 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009f2e:	f7fe fb0c 	bl	800854a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009f32:	e026      	b.n	8009f82 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009f34:	68fa      	ldr	r2, [r7, #12]
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	4413      	add	r3, r2
 8009f3a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009f3c:	4b14      	ldr	r3, [pc, #80]	; (8009f90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	68ba      	ldr	r2, [r7, #8]
 8009f42:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009f44:	68ba      	ldr	r2, [r7, #8]
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d209      	bcs.n	8009f60 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f4c:	4b13      	ldr	r3, [pc, #76]	; (8009f9c <prvAddCurrentTaskToDelayedList+0xc0>)
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	4b0f      	ldr	r3, [pc, #60]	; (8009f90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	3304      	adds	r3, #4
 8009f56:	4619      	mov	r1, r3
 8009f58:	4610      	mov	r0, r2
 8009f5a:	f7fe fb19 	bl	8008590 <vListInsert>
}
 8009f5e:	e010      	b.n	8009f82 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f60:	4b0f      	ldr	r3, [pc, #60]	; (8009fa0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009f62:	681a      	ldr	r2, [r3, #0]
 8009f64:	4b0a      	ldr	r3, [pc, #40]	; (8009f90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	3304      	adds	r3, #4
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	4610      	mov	r0, r2
 8009f6e:	f7fe fb0f 	bl	8008590 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009f72:	4b0c      	ldr	r3, [pc, #48]	; (8009fa4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	68ba      	ldr	r2, [r7, #8]
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d202      	bcs.n	8009f82 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009f7c:	4a09      	ldr	r2, [pc, #36]	; (8009fa4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	6013      	str	r3, [r2, #0]
}
 8009f82:	bf00      	nop
 8009f84:	3710      	adds	r7, #16
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}
 8009f8a:	bf00      	nop
 8009f8c:	20000fb4 	.word	0x20000fb4
 8009f90:	20000eb0 	.word	0x20000eb0
 8009f94:	20000fb8 	.word	0x20000fb8
 8009f98:	20000f9c 	.word	0x20000f9c
 8009f9c:	20000f6c 	.word	0x20000f6c
 8009fa0:	20000f68 	.word	0x20000f68
 8009fa4:	20000fd0 	.word	0x20000fd0

08009fa8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b08a      	sub	sp, #40	; 0x28
 8009fac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009fb2:	f000 fae9 	bl	800a588 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009fb6:	4b1c      	ldr	r3, [pc, #112]	; (800a028 <xTimerCreateTimerTask+0x80>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d021      	beq.n	800a002 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009fc6:	1d3a      	adds	r2, r7, #4
 8009fc8:	f107 0108 	add.w	r1, r7, #8
 8009fcc:	f107 030c 	add.w	r3, r7, #12
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f7f6 ffb1 	bl	8000f38 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009fd6:	6879      	ldr	r1, [r7, #4]
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	68fa      	ldr	r2, [r7, #12]
 8009fdc:	9202      	str	r2, [sp, #8]
 8009fde:	9301      	str	r3, [sp, #4]
 8009fe0:	2302      	movs	r3, #2
 8009fe2:	9300      	str	r3, [sp, #0]
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	460a      	mov	r2, r1
 8009fe8:	4910      	ldr	r1, [pc, #64]	; (800a02c <xTimerCreateTimerTask+0x84>)
 8009fea:	4811      	ldr	r0, [pc, #68]	; (800a030 <xTimerCreateTimerTask+0x88>)
 8009fec:	f7ff f8a0 	bl	8009130 <xTaskCreateStatic>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	4a10      	ldr	r2, [pc, #64]	; (800a034 <xTimerCreateTimerTask+0x8c>)
 8009ff4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009ff6:	4b0f      	ldr	r3, [pc, #60]	; (800a034 <xTimerCreateTimerTask+0x8c>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d001      	beq.n	800a002 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009ffe:	2301      	movs	r3, #1
 800a000:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d10a      	bne.n	800a01e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a00c:	f383 8811 	msr	BASEPRI, r3
 800a010:	f3bf 8f6f 	isb	sy
 800a014:	f3bf 8f4f 	dsb	sy
 800a018:	613b      	str	r3, [r7, #16]
}
 800a01a:	bf00      	nop
 800a01c:	e7fe      	b.n	800a01c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a01e:	697b      	ldr	r3, [r7, #20]
}
 800a020:	4618      	mov	r0, r3
 800a022:	3718      	adds	r7, #24
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}
 800a028:	2000100c 	.word	0x2000100c
 800a02c:	0800df00 	.word	0x0800df00
 800a030:	0800a16d 	.word	0x0800a16d
 800a034:	20001010 	.word	0x20001010

0800a038 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b08a      	sub	sp, #40	; 0x28
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	60f8      	str	r0, [r7, #12]
 800a040:	60b9      	str	r1, [r7, #8]
 800a042:	607a      	str	r2, [r7, #4]
 800a044:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a046:	2300      	movs	r3, #0
 800a048:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d10a      	bne.n	800a066 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a054:	f383 8811 	msr	BASEPRI, r3
 800a058:	f3bf 8f6f 	isb	sy
 800a05c:	f3bf 8f4f 	dsb	sy
 800a060:	623b      	str	r3, [r7, #32]
}
 800a062:	bf00      	nop
 800a064:	e7fe      	b.n	800a064 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a066:	4b1a      	ldr	r3, [pc, #104]	; (800a0d0 <xTimerGenericCommand+0x98>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d02a      	beq.n	800a0c4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	2b05      	cmp	r3, #5
 800a07e:	dc18      	bgt.n	800a0b2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a080:	f7ff fe88 	bl	8009d94 <xTaskGetSchedulerState>
 800a084:	4603      	mov	r3, r0
 800a086:	2b02      	cmp	r3, #2
 800a088:	d109      	bne.n	800a09e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a08a:	4b11      	ldr	r3, [pc, #68]	; (800a0d0 <xTimerGenericCommand+0x98>)
 800a08c:	6818      	ldr	r0, [r3, #0]
 800a08e:	f107 0114 	add.w	r1, r7, #20
 800a092:	2300      	movs	r3, #0
 800a094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a096:	f7fe fc69 	bl	800896c <xQueueGenericSend>
 800a09a:	6278      	str	r0, [r7, #36]	; 0x24
 800a09c:	e012      	b.n	800a0c4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a09e:	4b0c      	ldr	r3, [pc, #48]	; (800a0d0 <xTimerGenericCommand+0x98>)
 800a0a0:	6818      	ldr	r0, [r3, #0]
 800a0a2:	f107 0114 	add.w	r1, r7, #20
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	f7fe fc5f 	bl	800896c <xQueueGenericSend>
 800a0ae:	6278      	str	r0, [r7, #36]	; 0x24
 800a0b0:	e008      	b.n	800a0c4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a0b2:	4b07      	ldr	r3, [pc, #28]	; (800a0d0 <xTimerGenericCommand+0x98>)
 800a0b4:	6818      	ldr	r0, [r3, #0]
 800a0b6:	f107 0114 	add.w	r1, r7, #20
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	683a      	ldr	r2, [r7, #0]
 800a0be:	f7fe fd53 	bl	8008b68 <xQueueGenericSendFromISR>
 800a0c2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3728      	adds	r7, #40	; 0x28
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}
 800a0ce:	bf00      	nop
 800a0d0:	2000100c 	.word	0x2000100c

0800a0d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b088      	sub	sp, #32
 800a0d8:	af02      	add	r7, sp, #8
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0de:	4b22      	ldr	r3, [pc, #136]	; (800a168 <prvProcessExpiredTimer+0x94>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	68db      	ldr	r3, [r3, #12]
 800a0e4:	68db      	ldr	r3, [r3, #12]
 800a0e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	3304      	adds	r3, #4
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f7fe fa87 	bl	8008600 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a0f8:	f003 0304 	and.w	r3, r3, #4
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d022      	beq.n	800a146 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	699a      	ldr	r2, [r3, #24]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	18d1      	adds	r1, r2, r3
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	683a      	ldr	r2, [r7, #0]
 800a10c:	6978      	ldr	r0, [r7, #20]
 800a10e:	f000 f8cf 	bl	800a2b0 <prvInsertTimerInActiveList>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d01f      	beq.n	800a158 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a118:	2300      	movs	r3, #0
 800a11a:	9300      	str	r3, [sp, #0]
 800a11c:	2300      	movs	r3, #0
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	2100      	movs	r1, #0
 800a122:	6978      	ldr	r0, [r7, #20]
 800a124:	f7ff ff88 	bl	800a038 <xTimerGenericCommand>
 800a128:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d113      	bne.n	800a158 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a134:	f383 8811 	msr	BASEPRI, r3
 800a138:	f3bf 8f6f 	isb	sy
 800a13c:	f3bf 8f4f 	dsb	sy
 800a140:	60fb      	str	r3, [r7, #12]
}
 800a142:	bf00      	nop
 800a144:	e7fe      	b.n	800a144 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a14c:	f023 0301 	bic.w	r3, r3, #1
 800a150:	b2da      	uxtb	r2, r3
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	6a1b      	ldr	r3, [r3, #32]
 800a15c:	6978      	ldr	r0, [r7, #20]
 800a15e:	4798      	blx	r3
}
 800a160:	bf00      	nop
 800a162:	3718      	adds	r7, #24
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}
 800a168:	20001004 	.word	0x20001004

0800a16c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a174:	f107 0308 	add.w	r3, r7, #8
 800a178:	4618      	mov	r0, r3
 800a17a:	f000 f857 	bl	800a22c <prvGetNextExpireTime>
 800a17e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	4619      	mov	r1, r3
 800a184:	68f8      	ldr	r0, [r7, #12]
 800a186:	f000 f803 	bl	800a190 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a18a:	f000 f8d3 	bl	800a334 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a18e:	e7f1      	b.n	800a174 <prvTimerTask+0x8>

0800a190 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a19a:	f7ff fa17 	bl	80095cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a19e:	f107 0308 	add.w	r3, r7, #8
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f000 f864 	bl	800a270 <prvSampleTimeNow>
 800a1a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d130      	bne.n	800a212 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d10a      	bne.n	800a1cc <prvProcessTimerOrBlockTask+0x3c>
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d806      	bhi.n	800a1cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a1be:	f7ff fa13 	bl	80095e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a1c2:	68f9      	ldr	r1, [r7, #12]
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f7ff ff85 	bl	800a0d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a1ca:	e024      	b.n	800a216 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d008      	beq.n	800a1e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a1d2:	4b13      	ldr	r3, [pc, #76]	; (800a220 <prvProcessTimerOrBlockTask+0x90>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d101      	bne.n	800a1e0 <prvProcessTimerOrBlockTask+0x50>
 800a1dc:	2301      	movs	r3, #1
 800a1de:	e000      	b.n	800a1e2 <prvProcessTimerOrBlockTask+0x52>
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a1e4:	4b0f      	ldr	r3, [pc, #60]	; (800a224 <prvProcessTimerOrBlockTask+0x94>)
 800a1e6:	6818      	ldr	r0, [r3, #0]
 800a1e8:	687a      	ldr	r2, [r7, #4]
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	1ad3      	subs	r3, r2, r3
 800a1ee:	683a      	ldr	r2, [r7, #0]
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	f7fe ff69 	bl	80090c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a1f6:	f7ff f9f7 	bl	80095e8 <xTaskResumeAll>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d10a      	bne.n	800a216 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a200:	4b09      	ldr	r3, [pc, #36]	; (800a228 <prvProcessTimerOrBlockTask+0x98>)
 800a202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a206:	601a      	str	r2, [r3, #0]
 800a208:	f3bf 8f4f 	dsb	sy
 800a20c:	f3bf 8f6f 	isb	sy
}
 800a210:	e001      	b.n	800a216 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a212:	f7ff f9e9 	bl	80095e8 <xTaskResumeAll>
}
 800a216:	bf00      	nop
 800a218:	3710      	adds	r7, #16
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	20001008 	.word	0x20001008
 800a224:	2000100c 	.word	0x2000100c
 800a228:	e000ed04 	.word	0xe000ed04

0800a22c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a22c:	b480      	push	{r7}
 800a22e:	b085      	sub	sp, #20
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a234:	4b0d      	ldr	r3, [pc, #52]	; (800a26c <prvGetNextExpireTime+0x40>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d101      	bne.n	800a242 <prvGetNextExpireTime+0x16>
 800a23e:	2201      	movs	r2, #1
 800a240:	e000      	b.n	800a244 <prvGetNextExpireTime+0x18>
 800a242:	2200      	movs	r2, #0
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d105      	bne.n	800a25c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a250:	4b06      	ldr	r3, [pc, #24]	; (800a26c <prvGetNextExpireTime+0x40>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	68db      	ldr	r3, [r3, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	60fb      	str	r3, [r7, #12]
 800a25a:	e001      	b.n	800a260 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a25c:	2300      	movs	r3, #0
 800a25e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a260:	68fb      	ldr	r3, [r7, #12]
}
 800a262:	4618      	mov	r0, r3
 800a264:	3714      	adds	r7, #20
 800a266:	46bd      	mov	sp, r7
 800a268:	bc80      	pop	{r7}
 800a26a:	4770      	bx	lr
 800a26c:	20001004 	.word	0x20001004

0800a270 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b084      	sub	sp, #16
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a278:	f7ff fa52 	bl	8009720 <xTaskGetTickCount>
 800a27c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a27e:	4b0b      	ldr	r3, [pc, #44]	; (800a2ac <prvSampleTimeNow+0x3c>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	68fa      	ldr	r2, [r7, #12]
 800a284:	429a      	cmp	r2, r3
 800a286:	d205      	bcs.n	800a294 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a288:	f000 f91a 	bl	800a4c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2201      	movs	r2, #1
 800a290:	601a      	str	r2, [r3, #0]
 800a292:	e002      	b.n	800a29a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2200      	movs	r2, #0
 800a298:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a29a:	4a04      	ldr	r2, [pc, #16]	; (800a2ac <prvSampleTimeNow+0x3c>)
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3710      	adds	r7, #16
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
 800a2aa:	bf00      	nop
 800a2ac:	20001014 	.word	0x20001014

0800a2b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b086      	sub	sp, #24
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	60b9      	str	r1, [r7, #8]
 800a2ba:	607a      	str	r2, [r7, #4]
 800a2bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	68ba      	ldr	r2, [r7, #8]
 800a2c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	68fa      	ldr	r2, [r7, #12]
 800a2cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a2ce:	68ba      	ldr	r2, [r7, #8]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d812      	bhi.n	800a2fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2d6:	687a      	ldr	r2, [r7, #4]
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	1ad2      	subs	r2, r2, r3
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	699b      	ldr	r3, [r3, #24]
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d302      	bcc.n	800a2ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	617b      	str	r3, [r7, #20]
 800a2e8:	e01b      	b.n	800a322 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a2ea:	4b10      	ldr	r3, [pc, #64]	; (800a32c <prvInsertTimerInActiveList+0x7c>)
 800a2ec:	681a      	ldr	r2, [r3, #0]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	3304      	adds	r3, #4
 800a2f2:	4619      	mov	r1, r3
 800a2f4:	4610      	mov	r0, r2
 800a2f6:	f7fe f94b 	bl	8008590 <vListInsert>
 800a2fa:	e012      	b.n	800a322 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a2fc:	687a      	ldr	r2, [r7, #4]
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	429a      	cmp	r2, r3
 800a302:	d206      	bcs.n	800a312 <prvInsertTimerInActiveList+0x62>
 800a304:	68ba      	ldr	r2, [r7, #8]
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	429a      	cmp	r2, r3
 800a30a:	d302      	bcc.n	800a312 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a30c:	2301      	movs	r3, #1
 800a30e:	617b      	str	r3, [r7, #20]
 800a310:	e007      	b.n	800a322 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a312:	4b07      	ldr	r3, [pc, #28]	; (800a330 <prvInsertTimerInActiveList+0x80>)
 800a314:	681a      	ldr	r2, [r3, #0]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	3304      	adds	r3, #4
 800a31a:	4619      	mov	r1, r3
 800a31c:	4610      	mov	r0, r2
 800a31e:	f7fe f937 	bl	8008590 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a322:	697b      	ldr	r3, [r7, #20]
}
 800a324:	4618      	mov	r0, r3
 800a326:	3718      	adds	r7, #24
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}
 800a32c:	20001008 	.word	0x20001008
 800a330:	20001004 	.word	0x20001004

0800a334 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b08c      	sub	sp, #48	; 0x30
 800a338:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a33a:	e0ae      	b.n	800a49a <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	f2c0 80aa 	blt.w	800a498 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a34a:	695b      	ldr	r3, [r3, #20]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d004      	beq.n	800a35a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a352:	3304      	adds	r3, #4
 800a354:	4618      	mov	r0, r3
 800a356:	f7fe f953 	bl	8008600 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a35a:	1d3b      	adds	r3, r7, #4
 800a35c:	4618      	mov	r0, r3
 800a35e:	f7ff ff87 	bl	800a270 <prvSampleTimeNow>
 800a362:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	2b09      	cmp	r3, #9
 800a368:	f200 8097 	bhi.w	800a49a <prvProcessReceivedCommands+0x166>
 800a36c:	a201      	add	r2, pc, #4	; (adr r2, 800a374 <prvProcessReceivedCommands+0x40>)
 800a36e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a372:	bf00      	nop
 800a374:	0800a39d 	.word	0x0800a39d
 800a378:	0800a39d 	.word	0x0800a39d
 800a37c:	0800a39d 	.word	0x0800a39d
 800a380:	0800a411 	.word	0x0800a411
 800a384:	0800a425 	.word	0x0800a425
 800a388:	0800a46f 	.word	0x0800a46f
 800a38c:	0800a39d 	.word	0x0800a39d
 800a390:	0800a39d 	.word	0x0800a39d
 800a394:	0800a411 	.word	0x0800a411
 800a398:	0800a425 	.word	0x0800a425
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a3a2:	f043 0301 	orr.w	r3, r3, #1
 800a3a6:	b2da      	uxtb	r2, r3
 800a3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a3ae:	68fa      	ldr	r2, [r7, #12]
 800a3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b2:	699b      	ldr	r3, [r3, #24]
 800a3b4:	18d1      	adds	r1, r2, r3
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	6a3a      	ldr	r2, [r7, #32]
 800a3ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a3bc:	f7ff ff78 	bl	800a2b0 <prvInsertTimerInActiveList>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d069      	beq.n	800a49a <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c8:	6a1b      	ldr	r3, [r3, #32]
 800a3ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a3cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a3d4:	f003 0304 	and.w	r3, r3, #4
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d05e      	beq.n	800a49a <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a3dc:	68fa      	ldr	r2, [r7, #12]
 800a3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e0:	699b      	ldr	r3, [r3, #24]
 800a3e2:	441a      	add	r2, r3
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	9300      	str	r3, [sp, #0]
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	2100      	movs	r1, #0
 800a3ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a3ee:	f7ff fe23 	bl	800a038 <xTimerGenericCommand>
 800a3f2:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800a3f4:	69fb      	ldr	r3, [r7, #28]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d14f      	bne.n	800a49a <prvProcessReceivedCommands+0x166>
	__asm volatile
 800a3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3fe:	f383 8811 	msr	BASEPRI, r3
 800a402:	f3bf 8f6f 	isb	sy
 800a406:	f3bf 8f4f 	dsb	sy
 800a40a:	61bb      	str	r3, [r7, #24]
}
 800a40c:	bf00      	nop
 800a40e:	e7fe      	b.n	800a40e <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a412:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a416:	f023 0301 	bic.w	r3, r3, #1
 800a41a:	b2da      	uxtb	r2, r3
 800a41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800a422:	e03a      	b.n	800a49a <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a426:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a42a:	f043 0301 	orr.w	r3, r3, #1
 800a42e:	b2da      	uxtb	r2, r3
 800a430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a432:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a436:	68fa      	ldr	r2, [r7, #12]
 800a438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a43a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a43e:	699b      	ldr	r3, [r3, #24]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d10a      	bne.n	800a45a <prvProcessReceivedCommands+0x126>
	__asm volatile
 800a444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a448:	f383 8811 	msr	BASEPRI, r3
 800a44c:	f3bf 8f6f 	isb	sy
 800a450:	f3bf 8f4f 	dsb	sy
 800a454:	617b      	str	r3, [r7, #20]
}
 800a456:	bf00      	nop
 800a458:	e7fe      	b.n	800a458 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45c:	699a      	ldr	r2, [r3, #24]
 800a45e:	6a3b      	ldr	r3, [r7, #32]
 800a460:	18d1      	adds	r1, r2, r3
 800a462:	6a3b      	ldr	r3, [r7, #32]
 800a464:	6a3a      	ldr	r2, [r7, #32]
 800a466:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a468:	f7ff ff22 	bl	800a2b0 <prvInsertTimerInActiveList>
					break;
 800a46c:	e015      	b.n	800a49a <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a470:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a474:	f003 0302 	and.w	r3, r3, #2
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d103      	bne.n	800a484 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800a47c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a47e:	f000 fb79 	bl	800ab74 <vPortFree>
 800a482:	e00a      	b.n	800a49a <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a486:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a48a:	f023 0301 	bic.w	r3, r3, #1
 800a48e:	b2da      	uxtb	r2, r3
 800a490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a492:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a496:	e000      	b.n	800a49a <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a498:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a49a:	4b08      	ldr	r3, [pc, #32]	; (800a4bc <prvProcessReceivedCommands+0x188>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f107 0108 	add.w	r1, r7, #8
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f7fe fbf7 	bl	8008c98 <xQueueReceive>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	f47f af45 	bne.w	800a33c <prvProcessReceivedCommands+0x8>
	}
}
 800a4b2:	bf00      	nop
 800a4b4:	bf00      	nop
 800a4b6:	3728      	adds	r7, #40	; 0x28
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}
 800a4bc:	2000100c 	.word	0x2000100c

0800a4c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b088      	sub	sp, #32
 800a4c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a4c6:	e048      	b.n	800a55a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a4c8:	4b2d      	ldr	r3, [pc, #180]	; (800a580 <prvSwitchTimerLists+0xc0>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	68db      	ldr	r3, [r3, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4d2:	4b2b      	ldr	r3, [pc, #172]	; (800a580 <prvSwitchTimerLists+0xc0>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	68db      	ldr	r3, [r3, #12]
 800a4d8:	68db      	ldr	r3, [r3, #12]
 800a4da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	3304      	adds	r3, #4
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7fe f88d 	bl	8008600 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	6a1b      	ldr	r3, [r3, #32]
 800a4ea:	68f8      	ldr	r0, [r7, #12]
 800a4ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a4f4:	f003 0304 	and.w	r3, r3, #4
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d02e      	beq.n	800a55a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	699b      	ldr	r3, [r3, #24]
 800a500:	693a      	ldr	r2, [r7, #16]
 800a502:	4413      	add	r3, r2
 800a504:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a506:	68ba      	ldr	r2, [r7, #8]
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	429a      	cmp	r2, r3
 800a50c:	d90e      	bls.n	800a52c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	68ba      	ldr	r2, [r7, #8]
 800a512:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	68fa      	ldr	r2, [r7, #12]
 800a518:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a51a:	4b19      	ldr	r3, [pc, #100]	; (800a580 <prvSwitchTimerLists+0xc0>)
 800a51c:	681a      	ldr	r2, [r3, #0]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	3304      	adds	r3, #4
 800a522:	4619      	mov	r1, r3
 800a524:	4610      	mov	r0, r2
 800a526:	f7fe f833 	bl	8008590 <vListInsert>
 800a52a:	e016      	b.n	800a55a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a52c:	2300      	movs	r3, #0
 800a52e:	9300      	str	r3, [sp, #0]
 800a530:	2300      	movs	r3, #0
 800a532:	693a      	ldr	r2, [r7, #16]
 800a534:	2100      	movs	r1, #0
 800a536:	68f8      	ldr	r0, [r7, #12]
 800a538:	f7ff fd7e 	bl	800a038 <xTimerGenericCommand>
 800a53c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d10a      	bne.n	800a55a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a548:	f383 8811 	msr	BASEPRI, r3
 800a54c:	f3bf 8f6f 	isb	sy
 800a550:	f3bf 8f4f 	dsb	sy
 800a554:	603b      	str	r3, [r7, #0]
}
 800a556:	bf00      	nop
 800a558:	e7fe      	b.n	800a558 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a55a:	4b09      	ldr	r3, [pc, #36]	; (800a580 <prvSwitchTimerLists+0xc0>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d1b1      	bne.n	800a4c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a564:	4b06      	ldr	r3, [pc, #24]	; (800a580 <prvSwitchTimerLists+0xc0>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a56a:	4b06      	ldr	r3, [pc, #24]	; (800a584 <prvSwitchTimerLists+0xc4>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	4a04      	ldr	r2, [pc, #16]	; (800a580 <prvSwitchTimerLists+0xc0>)
 800a570:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a572:	4a04      	ldr	r2, [pc, #16]	; (800a584 <prvSwitchTimerLists+0xc4>)
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	6013      	str	r3, [r2, #0]
}
 800a578:	bf00      	nop
 800a57a:	3718      	adds	r7, #24
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}
 800a580:	20001004 	.word	0x20001004
 800a584:	20001008 	.word	0x20001008

0800a588 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b082      	sub	sp, #8
 800a58c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a58e:	f000 f92d 	bl	800a7ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a592:	4b15      	ldr	r3, [pc, #84]	; (800a5e8 <prvCheckForValidListAndQueue+0x60>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d120      	bne.n	800a5dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a59a:	4814      	ldr	r0, [pc, #80]	; (800a5ec <prvCheckForValidListAndQueue+0x64>)
 800a59c:	f7fd ffaa 	bl	80084f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a5a0:	4813      	ldr	r0, [pc, #76]	; (800a5f0 <prvCheckForValidListAndQueue+0x68>)
 800a5a2:	f7fd ffa7 	bl	80084f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a5a6:	4b13      	ldr	r3, [pc, #76]	; (800a5f4 <prvCheckForValidListAndQueue+0x6c>)
 800a5a8:	4a10      	ldr	r2, [pc, #64]	; (800a5ec <prvCheckForValidListAndQueue+0x64>)
 800a5aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a5ac:	4b12      	ldr	r3, [pc, #72]	; (800a5f8 <prvCheckForValidListAndQueue+0x70>)
 800a5ae:	4a10      	ldr	r2, [pc, #64]	; (800a5f0 <prvCheckForValidListAndQueue+0x68>)
 800a5b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	9300      	str	r3, [sp, #0]
 800a5b6:	4b11      	ldr	r3, [pc, #68]	; (800a5fc <prvCheckForValidListAndQueue+0x74>)
 800a5b8:	4a11      	ldr	r2, [pc, #68]	; (800a600 <prvCheckForValidListAndQueue+0x78>)
 800a5ba:	210c      	movs	r1, #12
 800a5bc:	200a      	movs	r0, #10
 800a5be:	f7fe f8b1 	bl	8008724 <xQueueGenericCreateStatic>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	4a08      	ldr	r2, [pc, #32]	; (800a5e8 <prvCheckForValidListAndQueue+0x60>)
 800a5c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a5c8:	4b07      	ldr	r3, [pc, #28]	; (800a5e8 <prvCheckForValidListAndQueue+0x60>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d005      	beq.n	800a5dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a5d0:	4b05      	ldr	r3, [pc, #20]	; (800a5e8 <prvCheckForValidListAndQueue+0x60>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	490b      	ldr	r1, [pc, #44]	; (800a604 <prvCheckForValidListAndQueue+0x7c>)
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f7fe fd4e 	bl	8009078 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a5dc:	f000 f936 	bl	800a84c <vPortExitCritical>
}
 800a5e0:	bf00      	nop
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	2000100c 	.word	0x2000100c
 800a5ec:	20000fdc 	.word	0x20000fdc
 800a5f0:	20000ff0 	.word	0x20000ff0
 800a5f4:	20001004 	.word	0x20001004
 800a5f8:	20001008 	.word	0x20001008
 800a5fc:	20001090 	.word	0x20001090
 800a600:	20001018 	.word	0x20001018
 800a604:	0800df08 	.word	0x0800df08

0800a608 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a608:	b480      	push	{r7}
 800a60a:	b085      	sub	sp, #20
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	60b9      	str	r1, [r7, #8]
 800a612:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	3b04      	subs	r3, #4
 800a618:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a620:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	3b04      	subs	r3, #4
 800a626:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	f023 0201 	bic.w	r2, r3, #1
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	3b04      	subs	r3, #4
 800a636:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a638:	4a08      	ldr	r2, [pc, #32]	; (800a65c <pxPortInitialiseStack+0x54>)
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	3b14      	subs	r3, #20
 800a642:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a644:	687a      	ldr	r2, [r7, #4]
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	3b20      	subs	r3, #32
 800a64e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a650:	68fb      	ldr	r3, [r7, #12]
}
 800a652:	4618      	mov	r0, r3
 800a654:	3714      	adds	r7, #20
 800a656:	46bd      	mov	sp, r7
 800a658:	bc80      	pop	{r7}
 800a65a:	4770      	bx	lr
 800a65c:	0800a661 	.word	0x0800a661

0800a660 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a660:	b480      	push	{r7}
 800a662:	b085      	sub	sp, #20
 800a664:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a666:	2300      	movs	r3, #0
 800a668:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a66a:	4b12      	ldr	r3, [pc, #72]	; (800a6b4 <prvTaskExitError+0x54>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a672:	d00a      	beq.n	800a68a <prvTaskExitError+0x2a>
	__asm volatile
 800a674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a678:	f383 8811 	msr	BASEPRI, r3
 800a67c:	f3bf 8f6f 	isb	sy
 800a680:	f3bf 8f4f 	dsb	sy
 800a684:	60fb      	str	r3, [r7, #12]
}
 800a686:	bf00      	nop
 800a688:	e7fe      	b.n	800a688 <prvTaskExitError+0x28>
	__asm volatile
 800a68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a68e:	f383 8811 	msr	BASEPRI, r3
 800a692:	f3bf 8f6f 	isb	sy
 800a696:	f3bf 8f4f 	dsb	sy
 800a69a:	60bb      	str	r3, [r7, #8]
}
 800a69c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a69e:	bf00      	nop
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d0fc      	beq.n	800a6a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a6a6:	bf00      	nop
 800a6a8:	bf00      	nop
 800a6aa:	3714      	adds	r7, #20
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bc80      	pop	{r7}
 800a6b0:	4770      	bx	lr
 800a6b2:	bf00      	nop
 800a6b4:	2000000c 	.word	0x2000000c
	...

0800a6c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a6c0:	4b07      	ldr	r3, [pc, #28]	; (800a6e0 <pxCurrentTCBConst2>)
 800a6c2:	6819      	ldr	r1, [r3, #0]
 800a6c4:	6808      	ldr	r0, [r1, #0]
 800a6c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a6ca:	f380 8809 	msr	PSP, r0
 800a6ce:	f3bf 8f6f 	isb	sy
 800a6d2:	f04f 0000 	mov.w	r0, #0
 800a6d6:	f380 8811 	msr	BASEPRI, r0
 800a6da:	f04e 0e0d 	orr.w	lr, lr, #13
 800a6de:	4770      	bx	lr

0800a6e0 <pxCurrentTCBConst2>:
 800a6e0:	20000eb0 	.word	0x20000eb0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a6e4:	bf00      	nop
 800a6e6:	bf00      	nop

0800a6e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a6e8:	4806      	ldr	r0, [pc, #24]	; (800a704 <prvPortStartFirstTask+0x1c>)
 800a6ea:	6800      	ldr	r0, [r0, #0]
 800a6ec:	6800      	ldr	r0, [r0, #0]
 800a6ee:	f380 8808 	msr	MSP, r0
 800a6f2:	b662      	cpsie	i
 800a6f4:	b661      	cpsie	f
 800a6f6:	f3bf 8f4f 	dsb	sy
 800a6fa:	f3bf 8f6f 	isb	sy
 800a6fe:	df00      	svc	0
 800a700:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a702:	bf00      	nop
 800a704:	e000ed08 	.word	0xe000ed08

0800a708 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a70e:	4b32      	ldr	r3, [pc, #200]	; (800a7d8 <xPortStartScheduler+0xd0>)
 800a710:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	781b      	ldrb	r3, [r3, #0]
 800a716:	b2db      	uxtb	r3, r3
 800a718:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	22ff      	movs	r2, #255	; 0xff
 800a71e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	781b      	ldrb	r3, [r3, #0]
 800a724:	b2db      	uxtb	r3, r3
 800a726:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a728:	78fb      	ldrb	r3, [r7, #3]
 800a72a:	b2db      	uxtb	r3, r3
 800a72c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a730:	b2da      	uxtb	r2, r3
 800a732:	4b2a      	ldr	r3, [pc, #168]	; (800a7dc <xPortStartScheduler+0xd4>)
 800a734:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a736:	4b2a      	ldr	r3, [pc, #168]	; (800a7e0 <xPortStartScheduler+0xd8>)
 800a738:	2207      	movs	r2, #7
 800a73a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a73c:	e009      	b.n	800a752 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a73e:	4b28      	ldr	r3, [pc, #160]	; (800a7e0 <xPortStartScheduler+0xd8>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	3b01      	subs	r3, #1
 800a744:	4a26      	ldr	r2, [pc, #152]	; (800a7e0 <xPortStartScheduler+0xd8>)
 800a746:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a748:	78fb      	ldrb	r3, [r7, #3]
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	005b      	lsls	r3, r3, #1
 800a74e:	b2db      	uxtb	r3, r3
 800a750:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a752:	78fb      	ldrb	r3, [r7, #3]
 800a754:	b2db      	uxtb	r3, r3
 800a756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a75a:	2b80      	cmp	r3, #128	; 0x80
 800a75c:	d0ef      	beq.n	800a73e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a75e:	4b20      	ldr	r3, [pc, #128]	; (800a7e0 <xPortStartScheduler+0xd8>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f1c3 0307 	rsb	r3, r3, #7
 800a766:	2b04      	cmp	r3, #4
 800a768:	d00a      	beq.n	800a780 <xPortStartScheduler+0x78>
	__asm volatile
 800a76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a76e:	f383 8811 	msr	BASEPRI, r3
 800a772:	f3bf 8f6f 	isb	sy
 800a776:	f3bf 8f4f 	dsb	sy
 800a77a:	60bb      	str	r3, [r7, #8]
}
 800a77c:	bf00      	nop
 800a77e:	e7fe      	b.n	800a77e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a780:	4b17      	ldr	r3, [pc, #92]	; (800a7e0 <xPortStartScheduler+0xd8>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	021b      	lsls	r3, r3, #8
 800a786:	4a16      	ldr	r2, [pc, #88]	; (800a7e0 <xPortStartScheduler+0xd8>)
 800a788:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a78a:	4b15      	ldr	r3, [pc, #84]	; (800a7e0 <xPortStartScheduler+0xd8>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a792:	4a13      	ldr	r2, [pc, #76]	; (800a7e0 <xPortStartScheduler+0xd8>)
 800a794:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	b2da      	uxtb	r2, r3
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a79e:	4b11      	ldr	r3, [pc, #68]	; (800a7e4 <xPortStartScheduler+0xdc>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4a10      	ldr	r2, [pc, #64]	; (800a7e4 <xPortStartScheduler+0xdc>)
 800a7a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a7a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a7aa:	4b0e      	ldr	r3, [pc, #56]	; (800a7e4 <xPortStartScheduler+0xdc>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4a0d      	ldr	r2, [pc, #52]	; (800a7e4 <xPortStartScheduler+0xdc>)
 800a7b0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a7b4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a7b6:	f000 f8b9 	bl	800a92c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a7ba:	4b0b      	ldr	r3, [pc, #44]	; (800a7e8 <xPortStartScheduler+0xe0>)
 800a7bc:	2200      	movs	r2, #0
 800a7be:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a7c0:	f7ff ff92 	bl	800a6e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a7c4:	f7ff f872 	bl	80098ac <vTaskSwitchContext>
	prvTaskExitError();
 800a7c8:	f7ff ff4a 	bl	800a660 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a7cc:	2300      	movs	r3, #0
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3710      	adds	r7, #16
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	e000e400 	.word	0xe000e400
 800a7dc:	200010d8 	.word	0x200010d8
 800a7e0:	200010dc 	.word	0x200010dc
 800a7e4:	e000ed20 	.word	0xe000ed20
 800a7e8:	2000000c 	.word	0x2000000c

0800a7ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
	__asm volatile
 800a7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f6:	f383 8811 	msr	BASEPRI, r3
 800a7fa:	f3bf 8f6f 	isb	sy
 800a7fe:	f3bf 8f4f 	dsb	sy
 800a802:	607b      	str	r3, [r7, #4]
}
 800a804:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a806:	4b0f      	ldr	r3, [pc, #60]	; (800a844 <vPortEnterCritical+0x58>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	3301      	adds	r3, #1
 800a80c:	4a0d      	ldr	r2, [pc, #52]	; (800a844 <vPortEnterCritical+0x58>)
 800a80e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a810:	4b0c      	ldr	r3, [pc, #48]	; (800a844 <vPortEnterCritical+0x58>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	2b01      	cmp	r3, #1
 800a816:	d10f      	bne.n	800a838 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a818:	4b0b      	ldr	r3, [pc, #44]	; (800a848 <vPortEnterCritical+0x5c>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	b2db      	uxtb	r3, r3
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d00a      	beq.n	800a838 <vPortEnterCritical+0x4c>
	__asm volatile
 800a822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a826:	f383 8811 	msr	BASEPRI, r3
 800a82a:	f3bf 8f6f 	isb	sy
 800a82e:	f3bf 8f4f 	dsb	sy
 800a832:	603b      	str	r3, [r7, #0]
}
 800a834:	bf00      	nop
 800a836:	e7fe      	b.n	800a836 <vPortEnterCritical+0x4a>
	}
}
 800a838:	bf00      	nop
 800a83a:	370c      	adds	r7, #12
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bc80      	pop	{r7}
 800a840:	4770      	bx	lr
 800a842:	bf00      	nop
 800a844:	2000000c 	.word	0x2000000c
 800a848:	e000ed04 	.word	0xe000ed04

0800a84c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a84c:	b480      	push	{r7}
 800a84e:	b083      	sub	sp, #12
 800a850:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a852:	4b11      	ldr	r3, [pc, #68]	; (800a898 <vPortExitCritical+0x4c>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d10a      	bne.n	800a870 <vPortExitCritical+0x24>
	__asm volatile
 800a85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a85e:	f383 8811 	msr	BASEPRI, r3
 800a862:	f3bf 8f6f 	isb	sy
 800a866:	f3bf 8f4f 	dsb	sy
 800a86a:	607b      	str	r3, [r7, #4]
}
 800a86c:	bf00      	nop
 800a86e:	e7fe      	b.n	800a86e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a870:	4b09      	ldr	r3, [pc, #36]	; (800a898 <vPortExitCritical+0x4c>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	3b01      	subs	r3, #1
 800a876:	4a08      	ldr	r2, [pc, #32]	; (800a898 <vPortExitCritical+0x4c>)
 800a878:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a87a:	4b07      	ldr	r3, [pc, #28]	; (800a898 <vPortExitCritical+0x4c>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d105      	bne.n	800a88e <vPortExitCritical+0x42>
 800a882:	2300      	movs	r3, #0
 800a884:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	f383 8811 	msr	BASEPRI, r3
}
 800a88c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a88e:	bf00      	nop
 800a890:	370c      	adds	r7, #12
 800a892:	46bd      	mov	sp, r7
 800a894:	bc80      	pop	{r7}
 800a896:	4770      	bx	lr
 800a898:	2000000c 	.word	0x2000000c
 800a89c:	00000000 	.word	0x00000000

0800a8a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a8a0:	f3ef 8009 	mrs	r0, PSP
 800a8a4:	f3bf 8f6f 	isb	sy
 800a8a8:	4b0d      	ldr	r3, [pc, #52]	; (800a8e0 <pxCurrentTCBConst>)
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a8b0:	6010      	str	r0, [r2, #0]
 800a8b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a8b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a8ba:	f380 8811 	msr	BASEPRI, r0
 800a8be:	f7fe fff5 	bl	80098ac <vTaskSwitchContext>
 800a8c2:	f04f 0000 	mov.w	r0, #0
 800a8c6:	f380 8811 	msr	BASEPRI, r0
 800a8ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a8ce:	6819      	ldr	r1, [r3, #0]
 800a8d0:	6808      	ldr	r0, [r1, #0]
 800a8d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a8d6:	f380 8809 	msr	PSP, r0
 800a8da:	f3bf 8f6f 	isb	sy
 800a8de:	4770      	bx	lr

0800a8e0 <pxCurrentTCBConst>:
 800a8e0:	20000eb0 	.word	0x20000eb0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a8e4:	bf00      	nop
 800a8e6:	bf00      	nop

0800a8e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b082      	sub	sp, #8
 800a8ec:	af00      	add	r7, sp, #0
	__asm volatile
 800a8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f2:	f383 8811 	msr	BASEPRI, r3
 800a8f6:	f3bf 8f6f 	isb	sy
 800a8fa:	f3bf 8f4f 	dsb	sy
 800a8fe:	607b      	str	r3, [r7, #4]
}
 800a900:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a902:	f7fe ff1b 	bl	800973c <xTaskIncrementTick>
 800a906:	4603      	mov	r3, r0
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d003      	beq.n	800a914 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a90c:	4b06      	ldr	r3, [pc, #24]	; (800a928 <SysTick_Handler+0x40>)
 800a90e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a912:	601a      	str	r2, [r3, #0]
 800a914:	2300      	movs	r3, #0
 800a916:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	f383 8811 	msr	BASEPRI, r3
}
 800a91e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a920:	bf00      	nop
 800a922:	3708      	adds	r7, #8
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}
 800a928:	e000ed04 	.word	0xe000ed04

0800a92c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a92c:	b480      	push	{r7}
 800a92e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a930:	4b0a      	ldr	r3, [pc, #40]	; (800a95c <vPortSetupTimerInterrupt+0x30>)
 800a932:	2200      	movs	r2, #0
 800a934:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a936:	4b0a      	ldr	r3, [pc, #40]	; (800a960 <vPortSetupTimerInterrupt+0x34>)
 800a938:	2200      	movs	r2, #0
 800a93a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a93c:	4b09      	ldr	r3, [pc, #36]	; (800a964 <vPortSetupTimerInterrupt+0x38>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	4a09      	ldr	r2, [pc, #36]	; (800a968 <vPortSetupTimerInterrupt+0x3c>)
 800a942:	fba2 2303 	umull	r2, r3, r2, r3
 800a946:	099b      	lsrs	r3, r3, #6
 800a948:	4a08      	ldr	r2, [pc, #32]	; (800a96c <vPortSetupTimerInterrupt+0x40>)
 800a94a:	3b01      	subs	r3, #1
 800a94c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a94e:	4b03      	ldr	r3, [pc, #12]	; (800a95c <vPortSetupTimerInterrupt+0x30>)
 800a950:	2207      	movs	r2, #7
 800a952:	601a      	str	r2, [r3, #0]
}
 800a954:	bf00      	nop
 800a956:	46bd      	mov	sp, r7
 800a958:	bc80      	pop	{r7}
 800a95a:	4770      	bx	lr
 800a95c:	e000e010 	.word	0xe000e010
 800a960:	e000e018 	.word	0xe000e018
 800a964:	20000000 	.word	0x20000000
 800a968:	10624dd3 	.word	0x10624dd3
 800a96c:	e000e014 	.word	0xe000e014

0800a970 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a970:	b480      	push	{r7}
 800a972:	b085      	sub	sp, #20
 800a974:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a976:	f3ef 8305 	mrs	r3, IPSR
 800a97a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2b0f      	cmp	r3, #15
 800a980:	d914      	bls.n	800a9ac <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a982:	4a16      	ldr	r2, [pc, #88]	; (800a9dc <vPortValidateInterruptPriority+0x6c>)
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	4413      	add	r3, r2
 800a988:	781b      	ldrb	r3, [r3, #0]
 800a98a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a98c:	4b14      	ldr	r3, [pc, #80]	; (800a9e0 <vPortValidateInterruptPriority+0x70>)
 800a98e:	781b      	ldrb	r3, [r3, #0]
 800a990:	7afa      	ldrb	r2, [r7, #11]
 800a992:	429a      	cmp	r2, r3
 800a994:	d20a      	bcs.n	800a9ac <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99a:	f383 8811 	msr	BASEPRI, r3
 800a99e:	f3bf 8f6f 	isb	sy
 800a9a2:	f3bf 8f4f 	dsb	sy
 800a9a6:	607b      	str	r3, [r7, #4]
}
 800a9a8:	bf00      	nop
 800a9aa:	e7fe      	b.n	800a9aa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a9ac:	4b0d      	ldr	r3, [pc, #52]	; (800a9e4 <vPortValidateInterruptPriority+0x74>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a9b4:	4b0c      	ldr	r3, [pc, #48]	; (800a9e8 <vPortValidateInterruptPriority+0x78>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d90a      	bls.n	800a9d2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c0:	f383 8811 	msr	BASEPRI, r3
 800a9c4:	f3bf 8f6f 	isb	sy
 800a9c8:	f3bf 8f4f 	dsb	sy
 800a9cc:	603b      	str	r3, [r7, #0]
}
 800a9ce:	bf00      	nop
 800a9d0:	e7fe      	b.n	800a9d0 <vPortValidateInterruptPriority+0x60>
	}
 800a9d2:	bf00      	nop
 800a9d4:	3714      	adds	r7, #20
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bc80      	pop	{r7}
 800a9da:	4770      	bx	lr
 800a9dc:	e000e3f0 	.word	0xe000e3f0
 800a9e0:	200010d8 	.word	0x200010d8
 800a9e4:	e000ed0c 	.word	0xe000ed0c
 800a9e8:	200010dc 	.word	0x200010dc

0800a9ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b08a      	sub	sp, #40	; 0x28
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a9f8:	f7fe fde8 	bl	80095cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a9fc:	4b58      	ldr	r3, [pc, #352]	; (800ab60 <pvPortMalloc+0x174>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d101      	bne.n	800aa08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aa04:	f000 f910 	bl	800ac28 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aa08:	4b56      	ldr	r3, [pc, #344]	; (800ab64 <pvPortMalloc+0x178>)
 800aa0a:	681a      	ldr	r2, [r3, #0]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	4013      	ands	r3, r2
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	f040 808e 	bne.w	800ab32 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d01d      	beq.n	800aa58 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800aa1c:	2208      	movs	r2, #8
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	4413      	add	r3, r2
 800aa22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f003 0307 	and.w	r3, r3, #7
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d014      	beq.n	800aa58 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f023 0307 	bic.w	r3, r3, #7
 800aa34:	3308      	adds	r3, #8
 800aa36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f003 0307 	and.w	r3, r3, #7
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d00a      	beq.n	800aa58 <pvPortMalloc+0x6c>
	__asm volatile
 800aa42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa46:	f383 8811 	msr	BASEPRI, r3
 800aa4a:	f3bf 8f6f 	isb	sy
 800aa4e:	f3bf 8f4f 	dsb	sy
 800aa52:	617b      	str	r3, [r7, #20]
}
 800aa54:	bf00      	nop
 800aa56:	e7fe      	b.n	800aa56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d069      	beq.n	800ab32 <pvPortMalloc+0x146>
 800aa5e:	4b42      	ldr	r3, [pc, #264]	; (800ab68 <pvPortMalloc+0x17c>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	687a      	ldr	r2, [r7, #4]
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d864      	bhi.n	800ab32 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aa68:	4b40      	ldr	r3, [pc, #256]	; (800ab6c <pvPortMalloc+0x180>)
 800aa6a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aa6c:	4b3f      	ldr	r3, [pc, #252]	; (800ab6c <pvPortMalloc+0x180>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa72:	e004      	b.n	800aa7e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800aa74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa76:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aa78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa80:	685b      	ldr	r3, [r3, #4]
 800aa82:	687a      	ldr	r2, [r7, #4]
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d903      	bls.n	800aa90 <pvPortMalloc+0xa4>
 800aa88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d1f1      	bne.n	800aa74 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aa90:	4b33      	ldr	r3, [pc, #204]	; (800ab60 <pvPortMalloc+0x174>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d04b      	beq.n	800ab32 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aa9a:	6a3b      	ldr	r3, [r7, #32]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	2208      	movs	r2, #8
 800aaa0:	4413      	add	r3, r2
 800aaa2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aaa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa6:	681a      	ldr	r2, [r3, #0]
 800aaa8:	6a3b      	ldr	r3, [r7, #32]
 800aaaa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aaac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaae:	685a      	ldr	r2, [r3, #4]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	1ad2      	subs	r2, r2, r3
 800aab4:	2308      	movs	r3, #8
 800aab6:	005b      	lsls	r3, r3, #1
 800aab8:	429a      	cmp	r2, r3
 800aaba:	d91f      	bls.n	800aafc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aabc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	4413      	add	r3, r2
 800aac2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aac4:	69bb      	ldr	r3, [r7, #24]
 800aac6:	f003 0307 	and.w	r3, r3, #7
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d00a      	beq.n	800aae4 <pvPortMalloc+0xf8>
	__asm volatile
 800aace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad2:	f383 8811 	msr	BASEPRI, r3
 800aad6:	f3bf 8f6f 	isb	sy
 800aada:	f3bf 8f4f 	dsb	sy
 800aade:	613b      	str	r3, [r7, #16]
}
 800aae0:	bf00      	nop
 800aae2:	e7fe      	b.n	800aae2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae6:	685a      	ldr	r2, [r3, #4]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	1ad2      	subs	r2, r2, r3
 800aaec:	69bb      	ldr	r3, [r7, #24]
 800aaee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aaf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf2:	687a      	ldr	r2, [r7, #4]
 800aaf4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aaf6:	69b8      	ldr	r0, [r7, #24]
 800aaf8:	f000 f8f8 	bl	800acec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aafc:	4b1a      	ldr	r3, [pc, #104]	; (800ab68 <pvPortMalloc+0x17c>)
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	1ad3      	subs	r3, r2, r3
 800ab06:	4a18      	ldr	r2, [pc, #96]	; (800ab68 <pvPortMalloc+0x17c>)
 800ab08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ab0a:	4b17      	ldr	r3, [pc, #92]	; (800ab68 <pvPortMalloc+0x17c>)
 800ab0c:	681a      	ldr	r2, [r3, #0]
 800ab0e:	4b18      	ldr	r3, [pc, #96]	; (800ab70 <pvPortMalloc+0x184>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d203      	bcs.n	800ab1e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ab16:	4b14      	ldr	r3, [pc, #80]	; (800ab68 <pvPortMalloc+0x17c>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	4a15      	ldr	r2, [pc, #84]	; (800ab70 <pvPortMalloc+0x184>)
 800ab1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ab1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab20:	685a      	ldr	r2, [r3, #4]
 800ab22:	4b10      	ldr	r3, [pc, #64]	; (800ab64 <pvPortMalloc+0x178>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	431a      	orrs	r2, r3
 800ab28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ab2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab2e:	2200      	movs	r2, #0
 800ab30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ab32:	f7fe fd59 	bl	80095e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab36:	69fb      	ldr	r3, [r7, #28]
 800ab38:	f003 0307 	and.w	r3, r3, #7
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d00a      	beq.n	800ab56 <pvPortMalloc+0x16a>
	__asm volatile
 800ab40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab44:	f383 8811 	msr	BASEPRI, r3
 800ab48:	f3bf 8f6f 	isb	sy
 800ab4c:	f3bf 8f4f 	dsb	sy
 800ab50:	60fb      	str	r3, [r7, #12]
}
 800ab52:	bf00      	nop
 800ab54:	e7fe      	b.n	800ab54 <pvPortMalloc+0x168>
	return pvReturn;
 800ab56:	69fb      	ldr	r3, [r7, #28]
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3728      	adds	r7, #40	; 0x28
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}
 800ab60:	20001ce8 	.word	0x20001ce8
 800ab64:	20001cf4 	.word	0x20001cf4
 800ab68:	20001cec 	.word	0x20001cec
 800ab6c:	20001ce0 	.word	0x20001ce0
 800ab70:	20001cf0 	.word	0x20001cf0

0800ab74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b086      	sub	sp, #24
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d048      	beq.n	800ac18 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ab86:	2308      	movs	r3, #8
 800ab88:	425b      	negs	r3, r3
 800ab8a:	697a      	ldr	r2, [r7, #20]
 800ab8c:	4413      	add	r3, r2
 800ab8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	685a      	ldr	r2, [r3, #4]
 800ab98:	4b21      	ldr	r3, [pc, #132]	; (800ac20 <vPortFree+0xac>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	4013      	ands	r3, r2
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d10a      	bne.n	800abb8 <vPortFree+0x44>
	__asm volatile
 800aba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba6:	f383 8811 	msr	BASEPRI, r3
 800abaa:	f3bf 8f6f 	isb	sy
 800abae:	f3bf 8f4f 	dsb	sy
 800abb2:	60fb      	str	r3, [r7, #12]
}
 800abb4:	bf00      	nop
 800abb6:	e7fe      	b.n	800abb6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d00a      	beq.n	800abd6 <vPortFree+0x62>
	__asm volatile
 800abc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc4:	f383 8811 	msr	BASEPRI, r3
 800abc8:	f3bf 8f6f 	isb	sy
 800abcc:	f3bf 8f4f 	dsb	sy
 800abd0:	60bb      	str	r3, [r7, #8]
}
 800abd2:	bf00      	nop
 800abd4:	e7fe      	b.n	800abd4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	685a      	ldr	r2, [r3, #4]
 800abda:	4b11      	ldr	r3, [pc, #68]	; (800ac20 <vPortFree+0xac>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	4013      	ands	r3, r2
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d019      	beq.n	800ac18 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d115      	bne.n	800ac18 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	685a      	ldr	r2, [r3, #4]
 800abf0:	4b0b      	ldr	r3, [pc, #44]	; (800ac20 <vPortFree+0xac>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	43db      	mvns	r3, r3
 800abf6:	401a      	ands	r2, r3
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800abfc:	f7fe fce6 	bl	80095cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	685a      	ldr	r2, [r3, #4]
 800ac04:	4b07      	ldr	r3, [pc, #28]	; (800ac24 <vPortFree+0xb0>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	4413      	add	r3, r2
 800ac0a:	4a06      	ldr	r2, [pc, #24]	; (800ac24 <vPortFree+0xb0>)
 800ac0c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ac0e:	6938      	ldr	r0, [r7, #16]
 800ac10:	f000 f86c 	bl	800acec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ac14:	f7fe fce8 	bl	80095e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ac18:	bf00      	nop
 800ac1a:	3718      	adds	r7, #24
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}
 800ac20:	20001cf4 	.word	0x20001cf4
 800ac24:	20001cec 	.word	0x20001cec

0800ac28 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b085      	sub	sp, #20
 800ac2c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ac2e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800ac32:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ac34:	4b27      	ldr	r3, [pc, #156]	; (800acd4 <prvHeapInit+0xac>)
 800ac36:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	f003 0307 	and.w	r3, r3, #7
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d00c      	beq.n	800ac5c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	3307      	adds	r3, #7
 800ac46:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f023 0307 	bic.w	r3, r3, #7
 800ac4e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ac50:	68ba      	ldr	r2, [r7, #8]
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	1ad3      	subs	r3, r2, r3
 800ac56:	4a1f      	ldr	r2, [pc, #124]	; (800acd4 <prvHeapInit+0xac>)
 800ac58:	4413      	add	r3, r2
 800ac5a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ac60:	4a1d      	ldr	r2, [pc, #116]	; (800acd8 <prvHeapInit+0xb0>)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ac66:	4b1c      	ldr	r3, [pc, #112]	; (800acd8 <prvHeapInit+0xb0>)
 800ac68:	2200      	movs	r2, #0
 800ac6a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	68ba      	ldr	r2, [r7, #8]
 800ac70:	4413      	add	r3, r2
 800ac72:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ac74:	2208      	movs	r2, #8
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	1a9b      	subs	r3, r3, r2
 800ac7a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f023 0307 	bic.w	r3, r3, #7
 800ac82:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	4a15      	ldr	r2, [pc, #84]	; (800acdc <prvHeapInit+0xb4>)
 800ac88:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ac8a:	4b14      	ldr	r3, [pc, #80]	; (800acdc <prvHeapInit+0xb4>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ac92:	4b12      	ldr	r3, [pc, #72]	; (800acdc <prvHeapInit+0xb4>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	2200      	movs	r2, #0
 800ac98:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	68fa      	ldr	r2, [r7, #12]
 800aca2:	1ad2      	subs	r2, r2, r3
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aca8:	4b0c      	ldr	r3, [pc, #48]	; (800acdc <prvHeapInit+0xb4>)
 800acaa:	681a      	ldr	r2, [r3, #0]
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	4a0a      	ldr	r2, [pc, #40]	; (800ace0 <prvHeapInit+0xb8>)
 800acb6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	4a09      	ldr	r2, [pc, #36]	; (800ace4 <prvHeapInit+0xbc>)
 800acbe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800acc0:	4b09      	ldr	r3, [pc, #36]	; (800ace8 <prvHeapInit+0xc0>)
 800acc2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800acc6:	601a      	str	r2, [r3, #0]
}
 800acc8:	bf00      	nop
 800acca:	3714      	adds	r7, #20
 800accc:	46bd      	mov	sp, r7
 800acce:	bc80      	pop	{r7}
 800acd0:	4770      	bx	lr
 800acd2:	bf00      	nop
 800acd4:	200010e0 	.word	0x200010e0
 800acd8:	20001ce0 	.word	0x20001ce0
 800acdc:	20001ce8 	.word	0x20001ce8
 800ace0:	20001cf0 	.word	0x20001cf0
 800ace4:	20001cec 	.word	0x20001cec
 800ace8:	20001cf4 	.word	0x20001cf4

0800acec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800acec:	b480      	push	{r7}
 800acee:	b085      	sub	sp, #20
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800acf4:	4b27      	ldr	r3, [pc, #156]	; (800ad94 <prvInsertBlockIntoFreeList+0xa8>)
 800acf6:	60fb      	str	r3, [r7, #12]
 800acf8:	e002      	b.n	800ad00 <prvInsertBlockIntoFreeList+0x14>
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	60fb      	str	r3, [r7, #12]
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	687a      	ldr	r2, [r7, #4]
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d8f7      	bhi.n	800acfa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	68ba      	ldr	r2, [r7, #8]
 800ad14:	4413      	add	r3, r2
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d108      	bne.n	800ad2e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	685a      	ldr	r2, [r3, #4]
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	441a      	add	r2, r3
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	68ba      	ldr	r2, [r7, #8]
 800ad38:	441a      	add	r2, r3
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d118      	bne.n	800ad74 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681a      	ldr	r2, [r3, #0]
 800ad46:	4b14      	ldr	r3, [pc, #80]	; (800ad98 <prvInsertBlockIntoFreeList+0xac>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	d00d      	beq.n	800ad6a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	685a      	ldr	r2, [r3, #4]
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	441a      	add	r2, r3
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	681a      	ldr	r2, [r3, #0]
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	601a      	str	r2, [r3, #0]
 800ad68:	e008      	b.n	800ad7c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ad6a:	4b0b      	ldr	r3, [pc, #44]	; (800ad98 <prvInsertBlockIntoFreeList+0xac>)
 800ad6c:	681a      	ldr	r2, [r3, #0]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	601a      	str	r2, [r3, #0]
 800ad72:	e003      	b.n	800ad7c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681a      	ldr	r2, [r3, #0]
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ad7c:	68fa      	ldr	r2, [r7, #12]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d002      	beq.n	800ad8a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	687a      	ldr	r2, [r7, #4]
 800ad88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad8a:	bf00      	nop
 800ad8c:	3714      	adds	r7, #20
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bc80      	pop	{r7}
 800ad92:	4770      	bx	lr
 800ad94:	20001ce0 	.word	0x20001ce0
 800ad98:	20001ce8 	.word	0x20001ce8

0800ad9c <__errno>:
 800ad9c:	4b01      	ldr	r3, [pc, #4]	; (800ada4 <__errno+0x8>)
 800ad9e:	6818      	ldr	r0, [r3, #0]
 800ada0:	4770      	bx	lr
 800ada2:	bf00      	nop
 800ada4:	20000010 	.word	0x20000010

0800ada8 <std>:
 800ada8:	2300      	movs	r3, #0
 800adaa:	b510      	push	{r4, lr}
 800adac:	4604      	mov	r4, r0
 800adae:	e9c0 3300 	strd	r3, r3, [r0]
 800adb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800adb6:	6083      	str	r3, [r0, #8]
 800adb8:	8181      	strh	r1, [r0, #12]
 800adba:	6643      	str	r3, [r0, #100]	; 0x64
 800adbc:	81c2      	strh	r2, [r0, #14]
 800adbe:	6183      	str	r3, [r0, #24]
 800adc0:	4619      	mov	r1, r3
 800adc2:	2208      	movs	r2, #8
 800adc4:	305c      	adds	r0, #92	; 0x5c
 800adc6:	f000 f91a 	bl	800affe <memset>
 800adca:	4b05      	ldr	r3, [pc, #20]	; (800ade0 <std+0x38>)
 800adcc:	6263      	str	r3, [r4, #36]	; 0x24
 800adce:	4b05      	ldr	r3, [pc, #20]	; (800ade4 <std+0x3c>)
 800add0:	62a3      	str	r3, [r4, #40]	; 0x28
 800add2:	4b05      	ldr	r3, [pc, #20]	; (800ade8 <std+0x40>)
 800add4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800add6:	4b05      	ldr	r3, [pc, #20]	; (800adec <std+0x44>)
 800add8:	6224      	str	r4, [r4, #32]
 800adda:	6323      	str	r3, [r4, #48]	; 0x30
 800addc:	bd10      	pop	{r4, pc}
 800adde:	bf00      	nop
 800ade0:	0800bb8d 	.word	0x0800bb8d
 800ade4:	0800bbaf 	.word	0x0800bbaf
 800ade8:	0800bbe7 	.word	0x0800bbe7
 800adec:	0800bc0b 	.word	0x0800bc0b

0800adf0 <_cleanup_r>:
 800adf0:	4901      	ldr	r1, [pc, #4]	; (800adf8 <_cleanup_r+0x8>)
 800adf2:	f000 b8af 	b.w	800af54 <_fwalk_reent>
 800adf6:	bf00      	nop
 800adf8:	0800cb69 	.word	0x0800cb69

0800adfc <__sfmoreglue>:
 800adfc:	b570      	push	{r4, r5, r6, lr}
 800adfe:	2268      	movs	r2, #104	; 0x68
 800ae00:	1e4d      	subs	r5, r1, #1
 800ae02:	4355      	muls	r5, r2
 800ae04:	460e      	mov	r6, r1
 800ae06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ae0a:	f000 f921 	bl	800b050 <_malloc_r>
 800ae0e:	4604      	mov	r4, r0
 800ae10:	b140      	cbz	r0, 800ae24 <__sfmoreglue+0x28>
 800ae12:	2100      	movs	r1, #0
 800ae14:	e9c0 1600 	strd	r1, r6, [r0]
 800ae18:	300c      	adds	r0, #12
 800ae1a:	60a0      	str	r0, [r4, #8]
 800ae1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ae20:	f000 f8ed 	bl	800affe <memset>
 800ae24:	4620      	mov	r0, r4
 800ae26:	bd70      	pop	{r4, r5, r6, pc}

0800ae28 <__sfp_lock_acquire>:
 800ae28:	4801      	ldr	r0, [pc, #4]	; (800ae30 <__sfp_lock_acquire+0x8>)
 800ae2a:	f000 b8d8 	b.w	800afde <__retarget_lock_acquire_recursive>
 800ae2e:	bf00      	nop
 800ae30:	20001cf9 	.word	0x20001cf9

0800ae34 <__sfp_lock_release>:
 800ae34:	4801      	ldr	r0, [pc, #4]	; (800ae3c <__sfp_lock_release+0x8>)
 800ae36:	f000 b8d3 	b.w	800afe0 <__retarget_lock_release_recursive>
 800ae3a:	bf00      	nop
 800ae3c:	20001cf9 	.word	0x20001cf9

0800ae40 <__sinit_lock_acquire>:
 800ae40:	4801      	ldr	r0, [pc, #4]	; (800ae48 <__sinit_lock_acquire+0x8>)
 800ae42:	f000 b8cc 	b.w	800afde <__retarget_lock_acquire_recursive>
 800ae46:	bf00      	nop
 800ae48:	20001cfa 	.word	0x20001cfa

0800ae4c <__sinit_lock_release>:
 800ae4c:	4801      	ldr	r0, [pc, #4]	; (800ae54 <__sinit_lock_release+0x8>)
 800ae4e:	f000 b8c7 	b.w	800afe0 <__retarget_lock_release_recursive>
 800ae52:	bf00      	nop
 800ae54:	20001cfa 	.word	0x20001cfa

0800ae58 <__sinit>:
 800ae58:	b510      	push	{r4, lr}
 800ae5a:	4604      	mov	r4, r0
 800ae5c:	f7ff fff0 	bl	800ae40 <__sinit_lock_acquire>
 800ae60:	69a3      	ldr	r3, [r4, #24]
 800ae62:	b11b      	cbz	r3, 800ae6c <__sinit+0x14>
 800ae64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae68:	f7ff bff0 	b.w	800ae4c <__sinit_lock_release>
 800ae6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ae70:	6523      	str	r3, [r4, #80]	; 0x50
 800ae72:	4b13      	ldr	r3, [pc, #76]	; (800aec0 <__sinit+0x68>)
 800ae74:	4a13      	ldr	r2, [pc, #76]	; (800aec4 <__sinit+0x6c>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	62a2      	str	r2, [r4, #40]	; 0x28
 800ae7a:	42a3      	cmp	r3, r4
 800ae7c:	bf04      	itt	eq
 800ae7e:	2301      	moveq	r3, #1
 800ae80:	61a3      	streq	r3, [r4, #24]
 800ae82:	4620      	mov	r0, r4
 800ae84:	f000 f820 	bl	800aec8 <__sfp>
 800ae88:	6060      	str	r0, [r4, #4]
 800ae8a:	4620      	mov	r0, r4
 800ae8c:	f000 f81c 	bl	800aec8 <__sfp>
 800ae90:	60a0      	str	r0, [r4, #8]
 800ae92:	4620      	mov	r0, r4
 800ae94:	f000 f818 	bl	800aec8 <__sfp>
 800ae98:	2200      	movs	r2, #0
 800ae9a:	60e0      	str	r0, [r4, #12]
 800ae9c:	2104      	movs	r1, #4
 800ae9e:	6860      	ldr	r0, [r4, #4]
 800aea0:	f7ff ff82 	bl	800ada8 <std>
 800aea4:	68a0      	ldr	r0, [r4, #8]
 800aea6:	2201      	movs	r2, #1
 800aea8:	2109      	movs	r1, #9
 800aeaa:	f7ff ff7d 	bl	800ada8 <std>
 800aeae:	68e0      	ldr	r0, [r4, #12]
 800aeb0:	2202      	movs	r2, #2
 800aeb2:	2112      	movs	r1, #18
 800aeb4:	f7ff ff78 	bl	800ada8 <std>
 800aeb8:	2301      	movs	r3, #1
 800aeba:	61a3      	str	r3, [r4, #24]
 800aebc:	e7d2      	b.n	800ae64 <__sinit+0xc>
 800aebe:	bf00      	nop
 800aec0:	0800e678 	.word	0x0800e678
 800aec4:	0800adf1 	.word	0x0800adf1

0800aec8 <__sfp>:
 800aec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeca:	4607      	mov	r7, r0
 800aecc:	f7ff ffac 	bl	800ae28 <__sfp_lock_acquire>
 800aed0:	4b1e      	ldr	r3, [pc, #120]	; (800af4c <__sfp+0x84>)
 800aed2:	681e      	ldr	r6, [r3, #0]
 800aed4:	69b3      	ldr	r3, [r6, #24]
 800aed6:	b913      	cbnz	r3, 800aede <__sfp+0x16>
 800aed8:	4630      	mov	r0, r6
 800aeda:	f7ff ffbd 	bl	800ae58 <__sinit>
 800aede:	3648      	adds	r6, #72	; 0x48
 800aee0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aee4:	3b01      	subs	r3, #1
 800aee6:	d503      	bpl.n	800aef0 <__sfp+0x28>
 800aee8:	6833      	ldr	r3, [r6, #0]
 800aeea:	b30b      	cbz	r3, 800af30 <__sfp+0x68>
 800aeec:	6836      	ldr	r6, [r6, #0]
 800aeee:	e7f7      	b.n	800aee0 <__sfp+0x18>
 800aef0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aef4:	b9d5      	cbnz	r5, 800af2c <__sfp+0x64>
 800aef6:	4b16      	ldr	r3, [pc, #88]	; (800af50 <__sfp+0x88>)
 800aef8:	60e3      	str	r3, [r4, #12]
 800aefa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aefe:	6665      	str	r5, [r4, #100]	; 0x64
 800af00:	f000 f86c 	bl	800afdc <__retarget_lock_init_recursive>
 800af04:	f7ff ff96 	bl	800ae34 <__sfp_lock_release>
 800af08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800af0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800af10:	6025      	str	r5, [r4, #0]
 800af12:	61a5      	str	r5, [r4, #24]
 800af14:	2208      	movs	r2, #8
 800af16:	4629      	mov	r1, r5
 800af18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800af1c:	f000 f86f 	bl	800affe <memset>
 800af20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800af24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800af28:	4620      	mov	r0, r4
 800af2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af2c:	3468      	adds	r4, #104	; 0x68
 800af2e:	e7d9      	b.n	800aee4 <__sfp+0x1c>
 800af30:	2104      	movs	r1, #4
 800af32:	4638      	mov	r0, r7
 800af34:	f7ff ff62 	bl	800adfc <__sfmoreglue>
 800af38:	4604      	mov	r4, r0
 800af3a:	6030      	str	r0, [r6, #0]
 800af3c:	2800      	cmp	r0, #0
 800af3e:	d1d5      	bne.n	800aeec <__sfp+0x24>
 800af40:	f7ff ff78 	bl	800ae34 <__sfp_lock_release>
 800af44:	230c      	movs	r3, #12
 800af46:	603b      	str	r3, [r7, #0]
 800af48:	e7ee      	b.n	800af28 <__sfp+0x60>
 800af4a:	bf00      	nop
 800af4c:	0800e678 	.word	0x0800e678
 800af50:	ffff0001 	.word	0xffff0001

0800af54 <_fwalk_reent>:
 800af54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af58:	4606      	mov	r6, r0
 800af5a:	4688      	mov	r8, r1
 800af5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800af60:	2700      	movs	r7, #0
 800af62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800af66:	f1b9 0901 	subs.w	r9, r9, #1
 800af6a:	d505      	bpl.n	800af78 <_fwalk_reent+0x24>
 800af6c:	6824      	ldr	r4, [r4, #0]
 800af6e:	2c00      	cmp	r4, #0
 800af70:	d1f7      	bne.n	800af62 <_fwalk_reent+0xe>
 800af72:	4638      	mov	r0, r7
 800af74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af78:	89ab      	ldrh	r3, [r5, #12]
 800af7a:	2b01      	cmp	r3, #1
 800af7c:	d907      	bls.n	800af8e <_fwalk_reent+0x3a>
 800af7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af82:	3301      	adds	r3, #1
 800af84:	d003      	beq.n	800af8e <_fwalk_reent+0x3a>
 800af86:	4629      	mov	r1, r5
 800af88:	4630      	mov	r0, r6
 800af8a:	47c0      	blx	r8
 800af8c:	4307      	orrs	r7, r0
 800af8e:	3568      	adds	r5, #104	; 0x68
 800af90:	e7e9      	b.n	800af66 <_fwalk_reent+0x12>
	...

0800af94 <__libc_init_array>:
 800af94:	b570      	push	{r4, r5, r6, lr}
 800af96:	4d0d      	ldr	r5, [pc, #52]	; (800afcc <__libc_init_array+0x38>)
 800af98:	4c0d      	ldr	r4, [pc, #52]	; (800afd0 <__libc_init_array+0x3c>)
 800af9a:	1b64      	subs	r4, r4, r5
 800af9c:	10a4      	asrs	r4, r4, #2
 800af9e:	2600      	movs	r6, #0
 800afa0:	42a6      	cmp	r6, r4
 800afa2:	d109      	bne.n	800afb8 <__libc_init_array+0x24>
 800afa4:	4d0b      	ldr	r5, [pc, #44]	; (800afd4 <__libc_init_array+0x40>)
 800afa6:	4c0c      	ldr	r4, [pc, #48]	; (800afd8 <__libc_init_array+0x44>)
 800afa8:	f002 fefc 	bl	800dda4 <_init>
 800afac:	1b64      	subs	r4, r4, r5
 800afae:	10a4      	asrs	r4, r4, #2
 800afb0:	2600      	movs	r6, #0
 800afb2:	42a6      	cmp	r6, r4
 800afb4:	d105      	bne.n	800afc2 <__libc_init_array+0x2e>
 800afb6:	bd70      	pop	{r4, r5, r6, pc}
 800afb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800afbc:	4798      	blx	r3
 800afbe:	3601      	adds	r6, #1
 800afc0:	e7ee      	b.n	800afa0 <__libc_init_array+0xc>
 800afc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800afc6:	4798      	blx	r3
 800afc8:	3601      	adds	r6, #1
 800afca:	e7f2      	b.n	800afb2 <__libc_init_array+0x1e>
 800afcc:	0800ea58 	.word	0x0800ea58
 800afd0:	0800ea58 	.word	0x0800ea58
 800afd4:	0800ea58 	.word	0x0800ea58
 800afd8:	0800ea5c 	.word	0x0800ea5c

0800afdc <__retarget_lock_init_recursive>:
 800afdc:	4770      	bx	lr

0800afde <__retarget_lock_acquire_recursive>:
 800afde:	4770      	bx	lr

0800afe0 <__retarget_lock_release_recursive>:
 800afe0:	4770      	bx	lr

0800afe2 <memcpy>:
 800afe2:	440a      	add	r2, r1
 800afe4:	4291      	cmp	r1, r2
 800afe6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800afea:	d100      	bne.n	800afee <memcpy+0xc>
 800afec:	4770      	bx	lr
 800afee:	b510      	push	{r4, lr}
 800aff0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aff4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aff8:	4291      	cmp	r1, r2
 800affa:	d1f9      	bne.n	800aff0 <memcpy+0xe>
 800affc:	bd10      	pop	{r4, pc}

0800affe <memset>:
 800affe:	4402      	add	r2, r0
 800b000:	4603      	mov	r3, r0
 800b002:	4293      	cmp	r3, r2
 800b004:	d100      	bne.n	800b008 <memset+0xa>
 800b006:	4770      	bx	lr
 800b008:	f803 1b01 	strb.w	r1, [r3], #1
 800b00c:	e7f9      	b.n	800b002 <memset+0x4>
	...

0800b010 <sbrk_aligned>:
 800b010:	b570      	push	{r4, r5, r6, lr}
 800b012:	4e0e      	ldr	r6, [pc, #56]	; (800b04c <sbrk_aligned+0x3c>)
 800b014:	460c      	mov	r4, r1
 800b016:	6831      	ldr	r1, [r6, #0]
 800b018:	4605      	mov	r5, r0
 800b01a:	b911      	cbnz	r1, 800b022 <sbrk_aligned+0x12>
 800b01c:	f000 fd52 	bl	800bac4 <_sbrk_r>
 800b020:	6030      	str	r0, [r6, #0]
 800b022:	4621      	mov	r1, r4
 800b024:	4628      	mov	r0, r5
 800b026:	f000 fd4d 	bl	800bac4 <_sbrk_r>
 800b02a:	1c43      	adds	r3, r0, #1
 800b02c:	d00a      	beq.n	800b044 <sbrk_aligned+0x34>
 800b02e:	1cc4      	adds	r4, r0, #3
 800b030:	f024 0403 	bic.w	r4, r4, #3
 800b034:	42a0      	cmp	r0, r4
 800b036:	d007      	beq.n	800b048 <sbrk_aligned+0x38>
 800b038:	1a21      	subs	r1, r4, r0
 800b03a:	4628      	mov	r0, r5
 800b03c:	f000 fd42 	bl	800bac4 <_sbrk_r>
 800b040:	3001      	adds	r0, #1
 800b042:	d101      	bne.n	800b048 <sbrk_aligned+0x38>
 800b044:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b048:	4620      	mov	r0, r4
 800b04a:	bd70      	pop	{r4, r5, r6, pc}
 800b04c:	20001d00 	.word	0x20001d00

0800b050 <_malloc_r>:
 800b050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b054:	1ccd      	adds	r5, r1, #3
 800b056:	f025 0503 	bic.w	r5, r5, #3
 800b05a:	3508      	adds	r5, #8
 800b05c:	2d0c      	cmp	r5, #12
 800b05e:	bf38      	it	cc
 800b060:	250c      	movcc	r5, #12
 800b062:	2d00      	cmp	r5, #0
 800b064:	4607      	mov	r7, r0
 800b066:	db01      	blt.n	800b06c <_malloc_r+0x1c>
 800b068:	42a9      	cmp	r1, r5
 800b06a:	d905      	bls.n	800b078 <_malloc_r+0x28>
 800b06c:	230c      	movs	r3, #12
 800b06e:	603b      	str	r3, [r7, #0]
 800b070:	2600      	movs	r6, #0
 800b072:	4630      	mov	r0, r6
 800b074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b078:	4e2e      	ldr	r6, [pc, #184]	; (800b134 <_malloc_r+0xe4>)
 800b07a:	f001 fde1 	bl	800cc40 <__malloc_lock>
 800b07e:	6833      	ldr	r3, [r6, #0]
 800b080:	461c      	mov	r4, r3
 800b082:	bb34      	cbnz	r4, 800b0d2 <_malloc_r+0x82>
 800b084:	4629      	mov	r1, r5
 800b086:	4638      	mov	r0, r7
 800b088:	f7ff ffc2 	bl	800b010 <sbrk_aligned>
 800b08c:	1c43      	adds	r3, r0, #1
 800b08e:	4604      	mov	r4, r0
 800b090:	d14d      	bne.n	800b12e <_malloc_r+0xde>
 800b092:	6834      	ldr	r4, [r6, #0]
 800b094:	4626      	mov	r6, r4
 800b096:	2e00      	cmp	r6, #0
 800b098:	d140      	bne.n	800b11c <_malloc_r+0xcc>
 800b09a:	6823      	ldr	r3, [r4, #0]
 800b09c:	4631      	mov	r1, r6
 800b09e:	4638      	mov	r0, r7
 800b0a0:	eb04 0803 	add.w	r8, r4, r3
 800b0a4:	f000 fd0e 	bl	800bac4 <_sbrk_r>
 800b0a8:	4580      	cmp	r8, r0
 800b0aa:	d13a      	bne.n	800b122 <_malloc_r+0xd2>
 800b0ac:	6821      	ldr	r1, [r4, #0]
 800b0ae:	3503      	adds	r5, #3
 800b0b0:	1a6d      	subs	r5, r5, r1
 800b0b2:	f025 0503 	bic.w	r5, r5, #3
 800b0b6:	3508      	adds	r5, #8
 800b0b8:	2d0c      	cmp	r5, #12
 800b0ba:	bf38      	it	cc
 800b0bc:	250c      	movcc	r5, #12
 800b0be:	4629      	mov	r1, r5
 800b0c0:	4638      	mov	r0, r7
 800b0c2:	f7ff ffa5 	bl	800b010 <sbrk_aligned>
 800b0c6:	3001      	adds	r0, #1
 800b0c8:	d02b      	beq.n	800b122 <_malloc_r+0xd2>
 800b0ca:	6823      	ldr	r3, [r4, #0]
 800b0cc:	442b      	add	r3, r5
 800b0ce:	6023      	str	r3, [r4, #0]
 800b0d0:	e00e      	b.n	800b0f0 <_malloc_r+0xa0>
 800b0d2:	6822      	ldr	r2, [r4, #0]
 800b0d4:	1b52      	subs	r2, r2, r5
 800b0d6:	d41e      	bmi.n	800b116 <_malloc_r+0xc6>
 800b0d8:	2a0b      	cmp	r2, #11
 800b0da:	d916      	bls.n	800b10a <_malloc_r+0xba>
 800b0dc:	1961      	adds	r1, r4, r5
 800b0de:	42a3      	cmp	r3, r4
 800b0e0:	6025      	str	r5, [r4, #0]
 800b0e2:	bf18      	it	ne
 800b0e4:	6059      	strne	r1, [r3, #4]
 800b0e6:	6863      	ldr	r3, [r4, #4]
 800b0e8:	bf08      	it	eq
 800b0ea:	6031      	streq	r1, [r6, #0]
 800b0ec:	5162      	str	r2, [r4, r5]
 800b0ee:	604b      	str	r3, [r1, #4]
 800b0f0:	4638      	mov	r0, r7
 800b0f2:	f104 060b 	add.w	r6, r4, #11
 800b0f6:	f001 fda9 	bl	800cc4c <__malloc_unlock>
 800b0fa:	f026 0607 	bic.w	r6, r6, #7
 800b0fe:	1d23      	adds	r3, r4, #4
 800b100:	1af2      	subs	r2, r6, r3
 800b102:	d0b6      	beq.n	800b072 <_malloc_r+0x22>
 800b104:	1b9b      	subs	r3, r3, r6
 800b106:	50a3      	str	r3, [r4, r2]
 800b108:	e7b3      	b.n	800b072 <_malloc_r+0x22>
 800b10a:	6862      	ldr	r2, [r4, #4]
 800b10c:	42a3      	cmp	r3, r4
 800b10e:	bf0c      	ite	eq
 800b110:	6032      	streq	r2, [r6, #0]
 800b112:	605a      	strne	r2, [r3, #4]
 800b114:	e7ec      	b.n	800b0f0 <_malloc_r+0xa0>
 800b116:	4623      	mov	r3, r4
 800b118:	6864      	ldr	r4, [r4, #4]
 800b11a:	e7b2      	b.n	800b082 <_malloc_r+0x32>
 800b11c:	4634      	mov	r4, r6
 800b11e:	6876      	ldr	r6, [r6, #4]
 800b120:	e7b9      	b.n	800b096 <_malloc_r+0x46>
 800b122:	230c      	movs	r3, #12
 800b124:	603b      	str	r3, [r7, #0]
 800b126:	4638      	mov	r0, r7
 800b128:	f001 fd90 	bl	800cc4c <__malloc_unlock>
 800b12c:	e7a1      	b.n	800b072 <_malloc_r+0x22>
 800b12e:	6025      	str	r5, [r4, #0]
 800b130:	e7de      	b.n	800b0f0 <_malloc_r+0xa0>
 800b132:	bf00      	nop
 800b134:	20001cfc 	.word	0x20001cfc

0800b138 <__cvt>:
 800b138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b13c:	b088      	sub	sp, #32
 800b13e:	2b00      	cmp	r3, #0
 800b140:	461f      	mov	r7, r3
 800b142:	4614      	mov	r4, r2
 800b144:	bfb8      	it	lt
 800b146:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800b14a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b14c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b14e:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800b152:	bfb6      	itet	lt
 800b154:	461f      	movlt	r7, r3
 800b156:	2300      	movge	r3, #0
 800b158:	232d      	movlt	r3, #45	; 0x2d
 800b15a:	7013      	strb	r3, [r2, #0]
 800b15c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b15e:	f023 0820 	bic.w	r8, r3, #32
 800b162:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b166:	d005      	beq.n	800b174 <__cvt+0x3c>
 800b168:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b16c:	d100      	bne.n	800b170 <__cvt+0x38>
 800b16e:	3501      	adds	r5, #1
 800b170:	2302      	movs	r3, #2
 800b172:	e000      	b.n	800b176 <__cvt+0x3e>
 800b174:	2303      	movs	r3, #3
 800b176:	aa07      	add	r2, sp, #28
 800b178:	9204      	str	r2, [sp, #16]
 800b17a:	aa06      	add	r2, sp, #24
 800b17c:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b180:	e9cd 3500 	strd	r3, r5, [sp]
 800b184:	4622      	mov	r2, r4
 800b186:	463b      	mov	r3, r7
 800b188:	f000 fe7e 	bl	800be88 <_dtoa_r>
 800b18c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b190:	4606      	mov	r6, r0
 800b192:	d102      	bne.n	800b19a <__cvt+0x62>
 800b194:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b196:	07db      	lsls	r3, r3, #31
 800b198:	d522      	bpl.n	800b1e0 <__cvt+0xa8>
 800b19a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b19e:	eb06 0905 	add.w	r9, r6, r5
 800b1a2:	d110      	bne.n	800b1c6 <__cvt+0x8e>
 800b1a4:	7833      	ldrb	r3, [r6, #0]
 800b1a6:	2b30      	cmp	r3, #48	; 0x30
 800b1a8:	d10a      	bne.n	800b1c0 <__cvt+0x88>
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	4620      	mov	r0, r4
 800b1b0:	4639      	mov	r1, r7
 800b1b2:	f7f5 fc61 	bl	8000a78 <__aeabi_dcmpeq>
 800b1b6:	b918      	cbnz	r0, 800b1c0 <__cvt+0x88>
 800b1b8:	f1c5 0501 	rsb	r5, r5, #1
 800b1bc:	f8ca 5000 	str.w	r5, [sl]
 800b1c0:	f8da 3000 	ldr.w	r3, [sl]
 800b1c4:	4499      	add	r9, r3
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	4639      	mov	r1, r7
 800b1ce:	f7f5 fc53 	bl	8000a78 <__aeabi_dcmpeq>
 800b1d2:	b108      	cbz	r0, 800b1d8 <__cvt+0xa0>
 800b1d4:	f8cd 901c 	str.w	r9, [sp, #28]
 800b1d8:	2230      	movs	r2, #48	; 0x30
 800b1da:	9b07      	ldr	r3, [sp, #28]
 800b1dc:	454b      	cmp	r3, r9
 800b1de:	d307      	bcc.n	800b1f0 <__cvt+0xb8>
 800b1e0:	9b07      	ldr	r3, [sp, #28]
 800b1e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b1e4:	1b9b      	subs	r3, r3, r6
 800b1e6:	4630      	mov	r0, r6
 800b1e8:	6013      	str	r3, [r2, #0]
 800b1ea:	b008      	add	sp, #32
 800b1ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1f0:	1c59      	adds	r1, r3, #1
 800b1f2:	9107      	str	r1, [sp, #28]
 800b1f4:	701a      	strb	r2, [r3, #0]
 800b1f6:	e7f0      	b.n	800b1da <__cvt+0xa2>

0800b1f8 <__exponent>:
 800b1f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	2900      	cmp	r1, #0
 800b1fe:	bfb8      	it	lt
 800b200:	4249      	neglt	r1, r1
 800b202:	f803 2b02 	strb.w	r2, [r3], #2
 800b206:	bfb4      	ite	lt
 800b208:	222d      	movlt	r2, #45	; 0x2d
 800b20a:	222b      	movge	r2, #43	; 0x2b
 800b20c:	2909      	cmp	r1, #9
 800b20e:	7042      	strb	r2, [r0, #1]
 800b210:	dd2a      	ble.n	800b268 <__exponent+0x70>
 800b212:	f10d 0407 	add.w	r4, sp, #7
 800b216:	46a4      	mov	ip, r4
 800b218:	270a      	movs	r7, #10
 800b21a:	46a6      	mov	lr, r4
 800b21c:	460a      	mov	r2, r1
 800b21e:	fb91 f6f7 	sdiv	r6, r1, r7
 800b222:	fb07 1516 	mls	r5, r7, r6, r1
 800b226:	3530      	adds	r5, #48	; 0x30
 800b228:	2a63      	cmp	r2, #99	; 0x63
 800b22a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800b22e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b232:	4631      	mov	r1, r6
 800b234:	dcf1      	bgt.n	800b21a <__exponent+0x22>
 800b236:	3130      	adds	r1, #48	; 0x30
 800b238:	f1ae 0502 	sub.w	r5, lr, #2
 800b23c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b240:	1c44      	adds	r4, r0, #1
 800b242:	4629      	mov	r1, r5
 800b244:	4561      	cmp	r1, ip
 800b246:	d30a      	bcc.n	800b25e <__exponent+0x66>
 800b248:	f10d 0209 	add.w	r2, sp, #9
 800b24c:	eba2 020e 	sub.w	r2, r2, lr
 800b250:	4565      	cmp	r5, ip
 800b252:	bf88      	it	hi
 800b254:	2200      	movhi	r2, #0
 800b256:	4413      	add	r3, r2
 800b258:	1a18      	subs	r0, r3, r0
 800b25a:	b003      	add	sp, #12
 800b25c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b25e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b262:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b266:	e7ed      	b.n	800b244 <__exponent+0x4c>
 800b268:	2330      	movs	r3, #48	; 0x30
 800b26a:	3130      	adds	r1, #48	; 0x30
 800b26c:	7083      	strb	r3, [r0, #2]
 800b26e:	70c1      	strb	r1, [r0, #3]
 800b270:	1d03      	adds	r3, r0, #4
 800b272:	e7f1      	b.n	800b258 <__exponent+0x60>

0800b274 <_printf_float>:
 800b274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b278:	b091      	sub	sp, #68	; 0x44
 800b27a:	460c      	mov	r4, r1
 800b27c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800b280:	4616      	mov	r6, r2
 800b282:	461f      	mov	r7, r3
 800b284:	4605      	mov	r5, r0
 800b286:	f001 fcbd 	bl	800cc04 <_localeconv_r>
 800b28a:	6803      	ldr	r3, [r0, #0]
 800b28c:	9309      	str	r3, [sp, #36]	; 0x24
 800b28e:	4618      	mov	r0, r3
 800b290:	f7f4 ff76 	bl	8000180 <strlen>
 800b294:	2300      	movs	r3, #0
 800b296:	930e      	str	r3, [sp, #56]	; 0x38
 800b298:	f8d8 3000 	ldr.w	r3, [r8]
 800b29c:	900a      	str	r0, [sp, #40]	; 0x28
 800b29e:	3307      	adds	r3, #7
 800b2a0:	f023 0307 	bic.w	r3, r3, #7
 800b2a4:	f103 0208 	add.w	r2, r3, #8
 800b2a8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b2ac:	f8d4 b000 	ldr.w	fp, [r4]
 800b2b0:	f8c8 2000 	str.w	r2, [r8]
 800b2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b2bc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800b2c0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800b2c4:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b2c8:	4b9c      	ldr	r3, [pc, #624]	; (800b53c <_printf_float+0x2c8>)
 800b2ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b2ce:	4640      	mov	r0, r8
 800b2d0:	f7f5 fc04 	bl	8000adc <__aeabi_dcmpun>
 800b2d4:	bb70      	cbnz	r0, 800b334 <_printf_float+0xc0>
 800b2d6:	4b99      	ldr	r3, [pc, #612]	; (800b53c <_printf_float+0x2c8>)
 800b2d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b2da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b2de:	4640      	mov	r0, r8
 800b2e0:	f7f5 fbde 	bl	8000aa0 <__aeabi_dcmple>
 800b2e4:	bb30      	cbnz	r0, 800b334 <_printf_float+0xc0>
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	4640      	mov	r0, r8
 800b2ec:	4651      	mov	r1, sl
 800b2ee:	f7f5 fbcd 	bl	8000a8c <__aeabi_dcmplt>
 800b2f2:	b110      	cbz	r0, 800b2fa <_printf_float+0x86>
 800b2f4:	232d      	movs	r3, #45	; 0x2d
 800b2f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2fa:	4b91      	ldr	r3, [pc, #580]	; (800b540 <_printf_float+0x2cc>)
 800b2fc:	4891      	ldr	r0, [pc, #580]	; (800b544 <_printf_float+0x2d0>)
 800b2fe:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b302:	bf94      	ite	ls
 800b304:	4698      	movls	r8, r3
 800b306:	4680      	movhi	r8, r0
 800b308:	2303      	movs	r3, #3
 800b30a:	6123      	str	r3, [r4, #16]
 800b30c:	f02b 0304 	bic.w	r3, fp, #4
 800b310:	6023      	str	r3, [r4, #0]
 800b312:	f04f 0a00 	mov.w	sl, #0
 800b316:	9700      	str	r7, [sp, #0]
 800b318:	4633      	mov	r3, r6
 800b31a:	aa0f      	add	r2, sp, #60	; 0x3c
 800b31c:	4621      	mov	r1, r4
 800b31e:	4628      	mov	r0, r5
 800b320:	f000 f9d2 	bl	800b6c8 <_printf_common>
 800b324:	3001      	adds	r0, #1
 800b326:	f040 808f 	bne.w	800b448 <_printf_float+0x1d4>
 800b32a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b32e:	b011      	add	sp, #68	; 0x44
 800b330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b334:	4642      	mov	r2, r8
 800b336:	4653      	mov	r3, sl
 800b338:	4640      	mov	r0, r8
 800b33a:	4651      	mov	r1, sl
 800b33c:	f7f5 fbce 	bl	8000adc <__aeabi_dcmpun>
 800b340:	b140      	cbz	r0, 800b354 <_printf_float+0xe0>
 800b342:	f1ba 0f00 	cmp.w	sl, #0
 800b346:	bfbc      	itt	lt
 800b348:	232d      	movlt	r3, #45	; 0x2d
 800b34a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b34e:	487e      	ldr	r0, [pc, #504]	; (800b548 <_printf_float+0x2d4>)
 800b350:	4b7e      	ldr	r3, [pc, #504]	; (800b54c <_printf_float+0x2d8>)
 800b352:	e7d4      	b.n	800b2fe <_printf_float+0x8a>
 800b354:	6863      	ldr	r3, [r4, #4]
 800b356:	1c5a      	adds	r2, r3, #1
 800b358:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800b35c:	d142      	bne.n	800b3e4 <_printf_float+0x170>
 800b35e:	2306      	movs	r3, #6
 800b360:	6063      	str	r3, [r4, #4]
 800b362:	2200      	movs	r2, #0
 800b364:	9206      	str	r2, [sp, #24]
 800b366:	aa0e      	add	r2, sp, #56	; 0x38
 800b368:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800b36c:	aa0d      	add	r2, sp, #52	; 0x34
 800b36e:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800b372:	9203      	str	r2, [sp, #12]
 800b374:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800b378:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b37c:	6023      	str	r3, [r4, #0]
 800b37e:	6863      	ldr	r3, [r4, #4]
 800b380:	9300      	str	r3, [sp, #0]
 800b382:	4642      	mov	r2, r8
 800b384:	4653      	mov	r3, sl
 800b386:	4628      	mov	r0, r5
 800b388:	910b      	str	r1, [sp, #44]	; 0x2c
 800b38a:	f7ff fed5 	bl	800b138 <__cvt>
 800b38e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b390:	2947      	cmp	r1, #71	; 0x47
 800b392:	4680      	mov	r8, r0
 800b394:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b396:	d108      	bne.n	800b3aa <_printf_float+0x136>
 800b398:	1cc8      	adds	r0, r1, #3
 800b39a:	db02      	blt.n	800b3a2 <_printf_float+0x12e>
 800b39c:	6863      	ldr	r3, [r4, #4]
 800b39e:	4299      	cmp	r1, r3
 800b3a0:	dd40      	ble.n	800b424 <_printf_float+0x1b0>
 800b3a2:	f1a9 0902 	sub.w	r9, r9, #2
 800b3a6:	fa5f f989 	uxtb.w	r9, r9
 800b3aa:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b3ae:	d81f      	bhi.n	800b3f0 <_printf_float+0x17c>
 800b3b0:	3901      	subs	r1, #1
 800b3b2:	464a      	mov	r2, r9
 800b3b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b3b8:	910d      	str	r1, [sp, #52]	; 0x34
 800b3ba:	f7ff ff1d 	bl	800b1f8 <__exponent>
 800b3be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b3c0:	1813      	adds	r3, r2, r0
 800b3c2:	2a01      	cmp	r2, #1
 800b3c4:	4682      	mov	sl, r0
 800b3c6:	6123      	str	r3, [r4, #16]
 800b3c8:	dc02      	bgt.n	800b3d0 <_printf_float+0x15c>
 800b3ca:	6822      	ldr	r2, [r4, #0]
 800b3cc:	07d2      	lsls	r2, r2, #31
 800b3ce:	d501      	bpl.n	800b3d4 <_printf_float+0x160>
 800b3d0:	3301      	adds	r3, #1
 800b3d2:	6123      	str	r3, [r4, #16]
 800b3d4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d09c      	beq.n	800b316 <_printf_float+0xa2>
 800b3dc:	232d      	movs	r3, #45	; 0x2d
 800b3de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3e2:	e798      	b.n	800b316 <_printf_float+0xa2>
 800b3e4:	2947      	cmp	r1, #71	; 0x47
 800b3e6:	d1bc      	bne.n	800b362 <_printf_float+0xee>
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d1ba      	bne.n	800b362 <_printf_float+0xee>
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	e7b7      	b.n	800b360 <_printf_float+0xec>
 800b3f0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b3f4:	d118      	bne.n	800b428 <_printf_float+0x1b4>
 800b3f6:	2900      	cmp	r1, #0
 800b3f8:	6863      	ldr	r3, [r4, #4]
 800b3fa:	dd0b      	ble.n	800b414 <_printf_float+0x1a0>
 800b3fc:	6121      	str	r1, [r4, #16]
 800b3fe:	b913      	cbnz	r3, 800b406 <_printf_float+0x192>
 800b400:	6822      	ldr	r2, [r4, #0]
 800b402:	07d0      	lsls	r0, r2, #31
 800b404:	d502      	bpl.n	800b40c <_printf_float+0x198>
 800b406:	3301      	adds	r3, #1
 800b408:	440b      	add	r3, r1
 800b40a:	6123      	str	r3, [r4, #16]
 800b40c:	65a1      	str	r1, [r4, #88]	; 0x58
 800b40e:	f04f 0a00 	mov.w	sl, #0
 800b412:	e7df      	b.n	800b3d4 <_printf_float+0x160>
 800b414:	b913      	cbnz	r3, 800b41c <_printf_float+0x1a8>
 800b416:	6822      	ldr	r2, [r4, #0]
 800b418:	07d2      	lsls	r2, r2, #31
 800b41a:	d501      	bpl.n	800b420 <_printf_float+0x1ac>
 800b41c:	3302      	adds	r3, #2
 800b41e:	e7f4      	b.n	800b40a <_printf_float+0x196>
 800b420:	2301      	movs	r3, #1
 800b422:	e7f2      	b.n	800b40a <_printf_float+0x196>
 800b424:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b428:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b42a:	4299      	cmp	r1, r3
 800b42c:	db05      	blt.n	800b43a <_printf_float+0x1c6>
 800b42e:	6823      	ldr	r3, [r4, #0]
 800b430:	6121      	str	r1, [r4, #16]
 800b432:	07d8      	lsls	r0, r3, #31
 800b434:	d5ea      	bpl.n	800b40c <_printf_float+0x198>
 800b436:	1c4b      	adds	r3, r1, #1
 800b438:	e7e7      	b.n	800b40a <_printf_float+0x196>
 800b43a:	2900      	cmp	r1, #0
 800b43c:	bfd4      	ite	le
 800b43e:	f1c1 0202 	rsble	r2, r1, #2
 800b442:	2201      	movgt	r2, #1
 800b444:	4413      	add	r3, r2
 800b446:	e7e0      	b.n	800b40a <_printf_float+0x196>
 800b448:	6823      	ldr	r3, [r4, #0]
 800b44a:	055a      	lsls	r2, r3, #21
 800b44c:	d407      	bmi.n	800b45e <_printf_float+0x1ea>
 800b44e:	6923      	ldr	r3, [r4, #16]
 800b450:	4642      	mov	r2, r8
 800b452:	4631      	mov	r1, r6
 800b454:	4628      	mov	r0, r5
 800b456:	47b8      	blx	r7
 800b458:	3001      	adds	r0, #1
 800b45a:	d12b      	bne.n	800b4b4 <_printf_float+0x240>
 800b45c:	e765      	b.n	800b32a <_printf_float+0xb6>
 800b45e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b462:	f240 80dc 	bls.w	800b61e <_printf_float+0x3aa>
 800b466:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b46a:	2200      	movs	r2, #0
 800b46c:	2300      	movs	r3, #0
 800b46e:	f7f5 fb03 	bl	8000a78 <__aeabi_dcmpeq>
 800b472:	2800      	cmp	r0, #0
 800b474:	d033      	beq.n	800b4de <_printf_float+0x26a>
 800b476:	4a36      	ldr	r2, [pc, #216]	; (800b550 <_printf_float+0x2dc>)
 800b478:	2301      	movs	r3, #1
 800b47a:	4631      	mov	r1, r6
 800b47c:	4628      	mov	r0, r5
 800b47e:	47b8      	blx	r7
 800b480:	3001      	adds	r0, #1
 800b482:	f43f af52 	beq.w	800b32a <_printf_float+0xb6>
 800b486:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b48a:	429a      	cmp	r2, r3
 800b48c:	db02      	blt.n	800b494 <_printf_float+0x220>
 800b48e:	6823      	ldr	r3, [r4, #0]
 800b490:	07d8      	lsls	r0, r3, #31
 800b492:	d50f      	bpl.n	800b4b4 <_printf_float+0x240>
 800b494:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b498:	4631      	mov	r1, r6
 800b49a:	4628      	mov	r0, r5
 800b49c:	47b8      	blx	r7
 800b49e:	3001      	adds	r0, #1
 800b4a0:	f43f af43 	beq.w	800b32a <_printf_float+0xb6>
 800b4a4:	f04f 0800 	mov.w	r8, #0
 800b4a8:	f104 091a 	add.w	r9, r4, #26
 800b4ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b4ae:	3b01      	subs	r3, #1
 800b4b0:	4543      	cmp	r3, r8
 800b4b2:	dc09      	bgt.n	800b4c8 <_printf_float+0x254>
 800b4b4:	6823      	ldr	r3, [r4, #0]
 800b4b6:	079b      	lsls	r3, r3, #30
 800b4b8:	f100 8101 	bmi.w	800b6be <_printf_float+0x44a>
 800b4bc:	68e0      	ldr	r0, [r4, #12]
 800b4be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b4c0:	4298      	cmp	r0, r3
 800b4c2:	bfb8      	it	lt
 800b4c4:	4618      	movlt	r0, r3
 800b4c6:	e732      	b.n	800b32e <_printf_float+0xba>
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	464a      	mov	r2, r9
 800b4cc:	4631      	mov	r1, r6
 800b4ce:	4628      	mov	r0, r5
 800b4d0:	47b8      	blx	r7
 800b4d2:	3001      	adds	r0, #1
 800b4d4:	f43f af29 	beq.w	800b32a <_printf_float+0xb6>
 800b4d8:	f108 0801 	add.w	r8, r8, #1
 800b4dc:	e7e6      	b.n	800b4ac <_printf_float+0x238>
 800b4de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	dc37      	bgt.n	800b554 <_printf_float+0x2e0>
 800b4e4:	4a1a      	ldr	r2, [pc, #104]	; (800b550 <_printf_float+0x2dc>)
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	4631      	mov	r1, r6
 800b4ea:	4628      	mov	r0, r5
 800b4ec:	47b8      	blx	r7
 800b4ee:	3001      	adds	r0, #1
 800b4f0:	f43f af1b 	beq.w	800b32a <_printf_float+0xb6>
 800b4f4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b4f8:	4313      	orrs	r3, r2
 800b4fa:	d102      	bne.n	800b502 <_printf_float+0x28e>
 800b4fc:	6823      	ldr	r3, [r4, #0]
 800b4fe:	07d9      	lsls	r1, r3, #31
 800b500:	d5d8      	bpl.n	800b4b4 <_printf_float+0x240>
 800b502:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b506:	4631      	mov	r1, r6
 800b508:	4628      	mov	r0, r5
 800b50a:	47b8      	blx	r7
 800b50c:	3001      	adds	r0, #1
 800b50e:	f43f af0c 	beq.w	800b32a <_printf_float+0xb6>
 800b512:	f04f 0900 	mov.w	r9, #0
 800b516:	f104 0a1a 	add.w	sl, r4, #26
 800b51a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b51c:	425b      	negs	r3, r3
 800b51e:	454b      	cmp	r3, r9
 800b520:	dc01      	bgt.n	800b526 <_printf_float+0x2b2>
 800b522:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b524:	e794      	b.n	800b450 <_printf_float+0x1dc>
 800b526:	2301      	movs	r3, #1
 800b528:	4652      	mov	r2, sl
 800b52a:	4631      	mov	r1, r6
 800b52c:	4628      	mov	r0, r5
 800b52e:	47b8      	blx	r7
 800b530:	3001      	adds	r0, #1
 800b532:	f43f aefa 	beq.w	800b32a <_printf_float+0xb6>
 800b536:	f109 0901 	add.w	r9, r9, #1
 800b53a:	e7ee      	b.n	800b51a <_printf_float+0x2a6>
 800b53c:	7fefffff 	.word	0x7fefffff
 800b540:	0800e67c 	.word	0x0800e67c
 800b544:	0800e680 	.word	0x0800e680
 800b548:	0800e688 	.word	0x0800e688
 800b54c:	0800e684 	.word	0x0800e684
 800b550:	0800e68c 	.word	0x0800e68c
 800b554:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b556:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b558:	429a      	cmp	r2, r3
 800b55a:	bfa8      	it	ge
 800b55c:	461a      	movge	r2, r3
 800b55e:	2a00      	cmp	r2, #0
 800b560:	4691      	mov	r9, r2
 800b562:	dc37      	bgt.n	800b5d4 <_printf_float+0x360>
 800b564:	f04f 0b00 	mov.w	fp, #0
 800b568:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b56c:	f104 021a 	add.w	r2, r4, #26
 800b570:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b574:	ebaa 0309 	sub.w	r3, sl, r9
 800b578:	455b      	cmp	r3, fp
 800b57a:	dc33      	bgt.n	800b5e4 <_printf_float+0x370>
 800b57c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b580:	429a      	cmp	r2, r3
 800b582:	db3b      	blt.n	800b5fc <_printf_float+0x388>
 800b584:	6823      	ldr	r3, [r4, #0]
 800b586:	07da      	lsls	r2, r3, #31
 800b588:	d438      	bmi.n	800b5fc <_printf_float+0x388>
 800b58a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b58c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b58e:	eba3 020a 	sub.w	r2, r3, sl
 800b592:	eba3 0901 	sub.w	r9, r3, r1
 800b596:	4591      	cmp	r9, r2
 800b598:	bfa8      	it	ge
 800b59a:	4691      	movge	r9, r2
 800b59c:	f1b9 0f00 	cmp.w	r9, #0
 800b5a0:	dc34      	bgt.n	800b60c <_printf_float+0x398>
 800b5a2:	f04f 0800 	mov.w	r8, #0
 800b5a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b5aa:	f104 0a1a 	add.w	sl, r4, #26
 800b5ae:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b5b2:	1a9b      	subs	r3, r3, r2
 800b5b4:	eba3 0309 	sub.w	r3, r3, r9
 800b5b8:	4543      	cmp	r3, r8
 800b5ba:	f77f af7b 	ble.w	800b4b4 <_printf_float+0x240>
 800b5be:	2301      	movs	r3, #1
 800b5c0:	4652      	mov	r2, sl
 800b5c2:	4631      	mov	r1, r6
 800b5c4:	4628      	mov	r0, r5
 800b5c6:	47b8      	blx	r7
 800b5c8:	3001      	adds	r0, #1
 800b5ca:	f43f aeae 	beq.w	800b32a <_printf_float+0xb6>
 800b5ce:	f108 0801 	add.w	r8, r8, #1
 800b5d2:	e7ec      	b.n	800b5ae <_printf_float+0x33a>
 800b5d4:	4613      	mov	r3, r2
 800b5d6:	4631      	mov	r1, r6
 800b5d8:	4642      	mov	r2, r8
 800b5da:	4628      	mov	r0, r5
 800b5dc:	47b8      	blx	r7
 800b5de:	3001      	adds	r0, #1
 800b5e0:	d1c0      	bne.n	800b564 <_printf_float+0x2f0>
 800b5e2:	e6a2      	b.n	800b32a <_printf_float+0xb6>
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	4631      	mov	r1, r6
 800b5e8:	4628      	mov	r0, r5
 800b5ea:	920b      	str	r2, [sp, #44]	; 0x2c
 800b5ec:	47b8      	blx	r7
 800b5ee:	3001      	adds	r0, #1
 800b5f0:	f43f ae9b 	beq.w	800b32a <_printf_float+0xb6>
 800b5f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b5f6:	f10b 0b01 	add.w	fp, fp, #1
 800b5fa:	e7b9      	b.n	800b570 <_printf_float+0x2fc>
 800b5fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b600:	4631      	mov	r1, r6
 800b602:	4628      	mov	r0, r5
 800b604:	47b8      	blx	r7
 800b606:	3001      	adds	r0, #1
 800b608:	d1bf      	bne.n	800b58a <_printf_float+0x316>
 800b60a:	e68e      	b.n	800b32a <_printf_float+0xb6>
 800b60c:	464b      	mov	r3, r9
 800b60e:	eb08 020a 	add.w	r2, r8, sl
 800b612:	4631      	mov	r1, r6
 800b614:	4628      	mov	r0, r5
 800b616:	47b8      	blx	r7
 800b618:	3001      	adds	r0, #1
 800b61a:	d1c2      	bne.n	800b5a2 <_printf_float+0x32e>
 800b61c:	e685      	b.n	800b32a <_printf_float+0xb6>
 800b61e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b620:	2a01      	cmp	r2, #1
 800b622:	dc01      	bgt.n	800b628 <_printf_float+0x3b4>
 800b624:	07db      	lsls	r3, r3, #31
 800b626:	d537      	bpl.n	800b698 <_printf_float+0x424>
 800b628:	2301      	movs	r3, #1
 800b62a:	4642      	mov	r2, r8
 800b62c:	4631      	mov	r1, r6
 800b62e:	4628      	mov	r0, r5
 800b630:	47b8      	blx	r7
 800b632:	3001      	adds	r0, #1
 800b634:	f43f ae79 	beq.w	800b32a <_printf_float+0xb6>
 800b638:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b63c:	4631      	mov	r1, r6
 800b63e:	4628      	mov	r0, r5
 800b640:	47b8      	blx	r7
 800b642:	3001      	adds	r0, #1
 800b644:	f43f ae71 	beq.w	800b32a <_printf_float+0xb6>
 800b648:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b64c:	2200      	movs	r2, #0
 800b64e:	2300      	movs	r3, #0
 800b650:	f7f5 fa12 	bl	8000a78 <__aeabi_dcmpeq>
 800b654:	b9d8      	cbnz	r0, 800b68e <_printf_float+0x41a>
 800b656:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b658:	f108 0201 	add.w	r2, r8, #1
 800b65c:	3b01      	subs	r3, #1
 800b65e:	4631      	mov	r1, r6
 800b660:	4628      	mov	r0, r5
 800b662:	47b8      	blx	r7
 800b664:	3001      	adds	r0, #1
 800b666:	d10e      	bne.n	800b686 <_printf_float+0x412>
 800b668:	e65f      	b.n	800b32a <_printf_float+0xb6>
 800b66a:	2301      	movs	r3, #1
 800b66c:	464a      	mov	r2, r9
 800b66e:	4631      	mov	r1, r6
 800b670:	4628      	mov	r0, r5
 800b672:	47b8      	blx	r7
 800b674:	3001      	adds	r0, #1
 800b676:	f43f ae58 	beq.w	800b32a <_printf_float+0xb6>
 800b67a:	f108 0801 	add.w	r8, r8, #1
 800b67e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b680:	3b01      	subs	r3, #1
 800b682:	4543      	cmp	r3, r8
 800b684:	dcf1      	bgt.n	800b66a <_printf_float+0x3f6>
 800b686:	4653      	mov	r3, sl
 800b688:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b68c:	e6e1      	b.n	800b452 <_printf_float+0x1de>
 800b68e:	f04f 0800 	mov.w	r8, #0
 800b692:	f104 091a 	add.w	r9, r4, #26
 800b696:	e7f2      	b.n	800b67e <_printf_float+0x40a>
 800b698:	2301      	movs	r3, #1
 800b69a:	4642      	mov	r2, r8
 800b69c:	e7df      	b.n	800b65e <_printf_float+0x3ea>
 800b69e:	2301      	movs	r3, #1
 800b6a0:	464a      	mov	r2, r9
 800b6a2:	4631      	mov	r1, r6
 800b6a4:	4628      	mov	r0, r5
 800b6a6:	47b8      	blx	r7
 800b6a8:	3001      	adds	r0, #1
 800b6aa:	f43f ae3e 	beq.w	800b32a <_printf_float+0xb6>
 800b6ae:	f108 0801 	add.w	r8, r8, #1
 800b6b2:	68e3      	ldr	r3, [r4, #12]
 800b6b4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b6b6:	1a5b      	subs	r3, r3, r1
 800b6b8:	4543      	cmp	r3, r8
 800b6ba:	dcf0      	bgt.n	800b69e <_printf_float+0x42a>
 800b6bc:	e6fe      	b.n	800b4bc <_printf_float+0x248>
 800b6be:	f04f 0800 	mov.w	r8, #0
 800b6c2:	f104 0919 	add.w	r9, r4, #25
 800b6c6:	e7f4      	b.n	800b6b2 <_printf_float+0x43e>

0800b6c8 <_printf_common>:
 800b6c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6cc:	4616      	mov	r6, r2
 800b6ce:	4699      	mov	r9, r3
 800b6d0:	688a      	ldr	r2, [r1, #8]
 800b6d2:	690b      	ldr	r3, [r1, #16]
 800b6d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	bfb8      	it	lt
 800b6dc:	4613      	movlt	r3, r2
 800b6de:	6033      	str	r3, [r6, #0]
 800b6e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b6e4:	4607      	mov	r7, r0
 800b6e6:	460c      	mov	r4, r1
 800b6e8:	b10a      	cbz	r2, 800b6ee <_printf_common+0x26>
 800b6ea:	3301      	adds	r3, #1
 800b6ec:	6033      	str	r3, [r6, #0]
 800b6ee:	6823      	ldr	r3, [r4, #0]
 800b6f0:	0699      	lsls	r1, r3, #26
 800b6f2:	bf42      	ittt	mi
 800b6f4:	6833      	ldrmi	r3, [r6, #0]
 800b6f6:	3302      	addmi	r3, #2
 800b6f8:	6033      	strmi	r3, [r6, #0]
 800b6fa:	6825      	ldr	r5, [r4, #0]
 800b6fc:	f015 0506 	ands.w	r5, r5, #6
 800b700:	d106      	bne.n	800b710 <_printf_common+0x48>
 800b702:	f104 0a19 	add.w	sl, r4, #25
 800b706:	68e3      	ldr	r3, [r4, #12]
 800b708:	6832      	ldr	r2, [r6, #0]
 800b70a:	1a9b      	subs	r3, r3, r2
 800b70c:	42ab      	cmp	r3, r5
 800b70e:	dc26      	bgt.n	800b75e <_printf_common+0x96>
 800b710:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b714:	1e13      	subs	r3, r2, #0
 800b716:	6822      	ldr	r2, [r4, #0]
 800b718:	bf18      	it	ne
 800b71a:	2301      	movne	r3, #1
 800b71c:	0692      	lsls	r2, r2, #26
 800b71e:	d42b      	bmi.n	800b778 <_printf_common+0xb0>
 800b720:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b724:	4649      	mov	r1, r9
 800b726:	4638      	mov	r0, r7
 800b728:	47c0      	blx	r8
 800b72a:	3001      	adds	r0, #1
 800b72c:	d01e      	beq.n	800b76c <_printf_common+0xa4>
 800b72e:	6823      	ldr	r3, [r4, #0]
 800b730:	68e5      	ldr	r5, [r4, #12]
 800b732:	6832      	ldr	r2, [r6, #0]
 800b734:	f003 0306 	and.w	r3, r3, #6
 800b738:	2b04      	cmp	r3, #4
 800b73a:	bf08      	it	eq
 800b73c:	1aad      	subeq	r5, r5, r2
 800b73e:	68a3      	ldr	r3, [r4, #8]
 800b740:	6922      	ldr	r2, [r4, #16]
 800b742:	bf0c      	ite	eq
 800b744:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b748:	2500      	movne	r5, #0
 800b74a:	4293      	cmp	r3, r2
 800b74c:	bfc4      	itt	gt
 800b74e:	1a9b      	subgt	r3, r3, r2
 800b750:	18ed      	addgt	r5, r5, r3
 800b752:	2600      	movs	r6, #0
 800b754:	341a      	adds	r4, #26
 800b756:	42b5      	cmp	r5, r6
 800b758:	d11a      	bne.n	800b790 <_printf_common+0xc8>
 800b75a:	2000      	movs	r0, #0
 800b75c:	e008      	b.n	800b770 <_printf_common+0xa8>
 800b75e:	2301      	movs	r3, #1
 800b760:	4652      	mov	r2, sl
 800b762:	4649      	mov	r1, r9
 800b764:	4638      	mov	r0, r7
 800b766:	47c0      	blx	r8
 800b768:	3001      	adds	r0, #1
 800b76a:	d103      	bne.n	800b774 <_printf_common+0xac>
 800b76c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b774:	3501      	adds	r5, #1
 800b776:	e7c6      	b.n	800b706 <_printf_common+0x3e>
 800b778:	18e1      	adds	r1, r4, r3
 800b77a:	1c5a      	adds	r2, r3, #1
 800b77c:	2030      	movs	r0, #48	; 0x30
 800b77e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b782:	4422      	add	r2, r4
 800b784:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b788:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b78c:	3302      	adds	r3, #2
 800b78e:	e7c7      	b.n	800b720 <_printf_common+0x58>
 800b790:	2301      	movs	r3, #1
 800b792:	4622      	mov	r2, r4
 800b794:	4649      	mov	r1, r9
 800b796:	4638      	mov	r0, r7
 800b798:	47c0      	blx	r8
 800b79a:	3001      	adds	r0, #1
 800b79c:	d0e6      	beq.n	800b76c <_printf_common+0xa4>
 800b79e:	3601      	adds	r6, #1
 800b7a0:	e7d9      	b.n	800b756 <_printf_common+0x8e>
	...

0800b7a4 <_printf_i>:
 800b7a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b7a8:	7e0f      	ldrb	r7, [r1, #24]
 800b7aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b7ac:	2f78      	cmp	r7, #120	; 0x78
 800b7ae:	4691      	mov	r9, r2
 800b7b0:	4680      	mov	r8, r0
 800b7b2:	460c      	mov	r4, r1
 800b7b4:	469a      	mov	sl, r3
 800b7b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b7ba:	d807      	bhi.n	800b7cc <_printf_i+0x28>
 800b7bc:	2f62      	cmp	r7, #98	; 0x62
 800b7be:	d80a      	bhi.n	800b7d6 <_printf_i+0x32>
 800b7c0:	2f00      	cmp	r7, #0
 800b7c2:	f000 80d8 	beq.w	800b976 <_printf_i+0x1d2>
 800b7c6:	2f58      	cmp	r7, #88	; 0x58
 800b7c8:	f000 80a3 	beq.w	800b912 <_printf_i+0x16e>
 800b7cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b7d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b7d4:	e03a      	b.n	800b84c <_printf_i+0xa8>
 800b7d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b7da:	2b15      	cmp	r3, #21
 800b7dc:	d8f6      	bhi.n	800b7cc <_printf_i+0x28>
 800b7de:	a101      	add	r1, pc, #4	; (adr r1, 800b7e4 <_printf_i+0x40>)
 800b7e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b7e4:	0800b83d 	.word	0x0800b83d
 800b7e8:	0800b851 	.word	0x0800b851
 800b7ec:	0800b7cd 	.word	0x0800b7cd
 800b7f0:	0800b7cd 	.word	0x0800b7cd
 800b7f4:	0800b7cd 	.word	0x0800b7cd
 800b7f8:	0800b7cd 	.word	0x0800b7cd
 800b7fc:	0800b851 	.word	0x0800b851
 800b800:	0800b7cd 	.word	0x0800b7cd
 800b804:	0800b7cd 	.word	0x0800b7cd
 800b808:	0800b7cd 	.word	0x0800b7cd
 800b80c:	0800b7cd 	.word	0x0800b7cd
 800b810:	0800b95d 	.word	0x0800b95d
 800b814:	0800b881 	.word	0x0800b881
 800b818:	0800b93f 	.word	0x0800b93f
 800b81c:	0800b7cd 	.word	0x0800b7cd
 800b820:	0800b7cd 	.word	0x0800b7cd
 800b824:	0800b97f 	.word	0x0800b97f
 800b828:	0800b7cd 	.word	0x0800b7cd
 800b82c:	0800b881 	.word	0x0800b881
 800b830:	0800b7cd 	.word	0x0800b7cd
 800b834:	0800b7cd 	.word	0x0800b7cd
 800b838:	0800b947 	.word	0x0800b947
 800b83c:	682b      	ldr	r3, [r5, #0]
 800b83e:	1d1a      	adds	r2, r3, #4
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	602a      	str	r2, [r5, #0]
 800b844:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b848:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b84c:	2301      	movs	r3, #1
 800b84e:	e0a3      	b.n	800b998 <_printf_i+0x1f4>
 800b850:	6820      	ldr	r0, [r4, #0]
 800b852:	6829      	ldr	r1, [r5, #0]
 800b854:	0606      	lsls	r6, r0, #24
 800b856:	f101 0304 	add.w	r3, r1, #4
 800b85a:	d50a      	bpl.n	800b872 <_printf_i+0xce>
 800b85c:	680e      	ldr	r6, [r1, #0]
 800b85e:	602b      	str	r3, [r5, #0]
 800b860:	2e00      	cmp	r6, #0
 800b862:	da03      	bge.n	800b86c <_printf_i+0xc8>
 800b864:	232d      	movs	r3, #45	; 0x2d
 800b866:	4276      	negs	r6, r6
 800b868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b86c:	485e      	ldr	r0, [pc, #376]	; (800b9e8 <_printf_i+0x244>)
 800b86e:	230a      	movs	r3, #10
 800b870:	e019      	b.n	800b8a6 <_printf_i+0x102>
 800b872:	680e      	ldr	r6, [r1, #0]
 800b874:	602b      	str	r3, [r5, #0]
 800b876:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b87a:	bf18      	it	ne
 800b87c:	b236      	sxthne	r6, r6
 800b87e:	e7ef      	b.n	800b860 <_printf_i+0xbc>
 800b880:	682b      	ldr	r3, [r5, #0]
 800b882:	6820      	ldr	r0, [r4, #0]
 800b884:	1d19      	adds	r1, r3, #4
 800b886:	6029      	str	r1, [r5, #0]
 800b888:	0601      	lsls	r1, r0, #24
 800b88a:	d501      	bpl.n	800b890 <_printf_i+0xec>
 800b88c:	681e      	ldr	r6, [r3, #0]
 800b88e:	e002      	b.n	800b896 <_printf_i+0xf2>
 800b890:	0646      	lsls	r6, r0, #25
 800b892:	d5fb      	bpl.n	800b88c <_printf_i+0xe8>
 800b894:	881e      	ldrh	r6, [r3, #0]
 800b896:	4854      	ldr	r0, [pc, #336]	; (800b9e8 <_printf_i+0x244>)
 800b898:	2f6f      	cmp	r7, #111	; 0x6f
 800b89a:	bf0c      	ite	eq
 800b89c:	2308      	moveq	r3, #8
 800b89e:	230a      	movne	r3, #10
 800b8a0:	2100      	movs	r1, #0
 800b8a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b8a6:	6865      	ldr	r5, [r4, #4]
 800b8a8:	60a5      	str	r5, [r4, #8]
 800b8aa:	2d00      	cmp	r5, #0
 800b8ac:	bfa2      	ittt	ge
 800b8ae:	6821      	ldrge	r1, [r4, #0]
 800b8b0:	f021 0104 	bicge.w	r1, r1, #4
 800b8b4:	6021      	strge	r1, [r4, #0]
 800b8b6:	b90e      	cbnz	r6, 800b8bc <_printf_i+0x118>
 800b8b8:	2d00      	cmp	r5, #0
 800b8ba:	d04d      	beq.n	800b958 <_printf_i+0x1b4>
 800b8bc:	4615      	mov	r5, r2
 800b8be:	fbb6 f1f3 	udiv	r1, r6, r3
 800b8c2:	fb03 6711 	mls	r7, r3, r1, r6
 800b8c6:	5dc7      	ldrb	r7, [r0, r7]
 800b8c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b8cc:	4637      	mov	r7, r6
 800b8ce:	42bb      	cmp	r3, r7
 800b8d0:	460e      	mov	r6, r1
 800b8d2:	d9f4      	bls.n	800b8be <_printf_i+0x11a>
 800b8d4:	2b08      	cmp	r3, #8
 800b8d6:	d10b      	bne.n	800b8f0 <_printf_i+0x14c>
 800b8d8:	6823      	ldr	r3, [r4, #0]
 800b8da:	07de      	lsls	r6, r3, #31
 800b8dc:	d508      	bpl.n	800b8f0 <_printf_i+0x14c>
 800b8de:	6923      	ldr	r3, [r4, #16]
 800b8e0:	6861      	ldr	r1, [r4, #4]
 800b8e2:	4299      	cmp	r1, r3
 800b8e4:	bfde      	ittt	le
 800b8e6:	2330      	movle	r3, #48	; 0x30
 800b8e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b8ec:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b8f0:	1b52      	subs	r2, r2, r5
 800b8f2:	6122      	str	r2, [r4, #16]
 800b8f4:	f8cd a000 	str.w	sl, [sp]
 800b8f8:	464b      	mov	r3, r9
 800b8fa:	aa03      	add	r2, sp, #12
 800b8fc:	4621      	mov	r1, r4
 800b8fe:	4640      	mov	r0, r8
 800b900:	f7ff fee2 	bl	800b6c8 <_printf_common>
 800b904:	3001      	adds	r0, #1
 800b906:	d14c      	bne.n	800b9a2 <_printf_i+0x1fe>
 800b908:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b90c:	b004      	add	sp, #16
 800b90e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b912:	4835      	ldr	r0, [pc, #212]	; (800b9e8 <_printf_i+0x244>)
 800b914:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b918:	6829      	ldr	r1, [r5, #0]
 800b91a:	6823      	ldr	r3, [r4, #0]
 800b91c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b920:	6029      	str	r1, [r5, #0]
 800b922:	061d      	lsls	r5, r3, #24
 800b924:	d514      	bpl.n	800b950 <_printf_i+0x1ac>
 800b926:	07df      	lsls	r7, r3, #31
 800b928:	bf44      	itt	mi
 800b92a:	f043 0320 	orrmi.w	r3, r3, #32
 800b92e:	6023      	strmi	r3, [r4, #0]
 800b930:	b91e      	cbnz	r6, 800b93a <_printf_i+0x196>
 800b932:	6823      	ldr	r3, [r4, #0]
 800b934:	f023 0320 	bic.w	r3, r3, #32
 800b938:	6023      	str	r3, [r4, #0]
 800b93a:	2310      	movs	r3, #16
 800b93c:	e7b0      	b.n	800b8a0 <_printf_i+0xfc>
 800b93e:	6823      	ldr	r3, [r4, #0]
 800b940:	f043 0320 	orr.w	r3, r3, #32
 800b944:	6023      	str	r3, [r4, #0]
 800b946:	2378      	movs	r3, #120	; 0x78
 800b948:	4828      	ldr	r0, [pc, #160]	; (800b9ec <_printf_i+0x248>)
 800b94a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b94e:	e7e3      	b.n	800b918 <_printf_i+0x174>
 800b950:	0659      	lsls	r1, r3, #25
 800b952:	bf48      	it	mi
 800b954:	b2b6      	uxthmi	r6, r6
 800b956:	e7e6      	b.n	800b926 <_printf_i+0x182>
 800b958:	4615      	mov	r5, r2
 800b95a:	e7bb      	b.n	800b8d4 <_printf_i+0x130>
 800b95c:	682b      	ldr	r3, [r5, #0]
 800b95e:	6826      	ldr	r6, [r4, #0]
 800b960:	6961      	ldr	r1, [r4, #20]
 800b962:	1d18      	adds	r0, r3, #4
 800b964:	6028      	str	r0, [r5, #0]
 800b966:	0635      	lsls	r5, r6, #24
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	d501      	bpl.n	800b970 <_printf_i+0x1cc>
 800b96c:	6019      	str	r1, [r3, #0]
 800b96e:	e002      	b.n	800b976 <_printf_i+0x1d2>
 800b970:	0670      	lsls	r0, r6, #25
 800b972:	d5fb      	bpl.n	800b96c <_printf_i+0x1c8>
 800b974:	8019      	strh	r1, [r3, #0]
 800b976:	2300      	movs	r3, #0
 800b978:	6123      	str	r3, [r4, #16]
 800b97a:	4615      	mov	r5, r2
 800b97c:	e7ba      	b.n	800b8f4 <_printf_i+0x150>
 800b97e:	682b      	ldr	r3, [r5, #0]
 800b980:	1d1a      	adds	r2, r3, #4
 800b982:	602a      	str	r2, [r5, #0]
 800b984:	681d      	ldr	r5, [r3, #0]
 800b986:	6862      	ldr	r2, [r4, #4]
 800b988:	2100      	movs	r1, #0
 800b98a:	4628      	mov	r0, r5
 800b98c:	f7f4 fc00 	bl	8000190 <memchr>
 800b990:	b108      	cbz	r0, 800b996 <_printf_i+0x1f2>
 800b992:	1b40      	subs	r0, r0, r5
 800b994:	6060      	str	r0, [r4, #4]
 800b996:	6863      	ldr	r3, [r4, #4]
 800b998:	6123      	str	r3, [r4, #16]
 800b99a:	2300      	movs	r3, #0
 800b99c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9a0:	e7a8      	b.n	800b8f4 <_printf_i+0x150>
 800b9a2:	6923      	ldr	r3, [r4, #16]
 800b9a4:	462a      	mov	r2, r5
 800b9a6:	4649      	mov	r1, r9
 800b9a8:	4640      	mov	r0, r8
 800b9aa:	47d0      	blx	sl
 800b9ac:	3001      	adds	r0, #1
 800b9ae:	d0ab      	beq.n	800b908 <_printf_i+0x164>
 800b9b0:	6823      	ldr	r3, [r4, #0]
 800b9b2:	079b      	lsls	r3, r3, #30
 800b9b4:	d413      	bmi.n	800b9de <_printf_i+0x23a>
 800b9b6:	68e0      	ldr	r0, [r4, #12]
 800b9b8:	9b03      	ldr	r3, [sp, #12]
 800b9ba:	4298      	cmp	r0, r3
 800b9bc:	bfb8      	it	lt
 800b9be:	4618      	movlt	r0, r3
 800b9c0:	e7a4      	b.n	800b90c <_printf_i+0x168>
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	4632      	mov	r2, r6
 800b9c6:	4649      	mov	r1, r9
 800b9c8:	4640      	mov	r0, r8
 800b9ca:	47d0      	blx	sl
 800b9cc:	3001      	adds	r0, #1
 800b9ce:	d09b      	beq.n	800b908 <_printf_i+0x164>
 800b9d0:	3501      	adds	r5, #1
 800b9d2:	68e3      	ldr	r3, [r4, #12]
 800b9d4:	9903      	ldr	r1, [sp, #12]
 800b9d6:	1a5b      	subs	r3, r3, r1
 800b9d8:	42ab      	cmp	r3, r5
 800b9da:	dcf2      	bgt.n	800b9c2 <_printf_i+0x21e>
 800b9dc:	e7eb      	b.n	800b9b6 <_printf_i+0x212>
 800b9de:	2500      	movs	r5, #0
 800b9e0:	f104 0619 	add.w	r6, r4, #25
 800b9e4:	e7f5      	b.n	800b9d2 <_printf_i+0x22e>
 800b9e6:	bf00      	nop
 800b9e8:	0800e68e 	.word	0x0800e68e
 800b9ec:	0800e69f 	.word	0x0800e69f

0800b9f0 <cleanup_glue>:
 800b9f0:	b538      	push	{r3, r4, r5, lr}
 800b9f2:	460c      	mov	r4, r1
 800b9f4:	6809      	ldr	r1, [r1, #0]
 800b9f6:	4605      	mov	r5, r0
 800b9f8:	b109      	cbz	r1, 800b9fe <cleanup_glue+0xe>
 800b9fa:	f7ff fff9 	bl	800b9f0 <cleanup_glue>
 800b9fe:	4621      	mov	r1, r4
 800ba00:	4628      	mov	r0, r5
 800ba02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba06:	f001 bcb9 	b.w	800d37c <_free_r>
	...

0800ba0c <_reclaim_reent>:
 800ba0c:	4b2c      	ldr	r3, [pc, #176]	; (800bac0 <_reclaim_reent+0xb4>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	4283      	cmp	r3, r0
 800ba12:	b570      	push	{r4, r5, r6, lr}
 800ba14:	4604      	mov	r4, r0
 800ba16:	d051      	beq.n	800babc <_reclaim_reent+0xb0>
 800ba18:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ba1a:	b143      	cbz	r3, 800ba2e <_reclaim_reent+0x22>
 800ba1c:	68db      	ldr	r3, [r3, #12]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d14a      	bne.n	800bab8 <_reclaim_reent+0xac>
 800ba22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba24:	6819      	ldr	r1, [r3, #0]
 800ba26:	b111      	cbz	r1, 800ba2e <_reclaim_reent+0x22>
 800ba28:	4620      	mov	r0, r4
 800ba2a:	f001 fca7 	bl	800d37c <_free_r>
 800ba2e:	6961      	ldr	r1, [r4, #20]
 800ba30:	b111      	cbz	r1, 800ba38 <_reclaim_reent+0x2c>
 800ba32:	4620      	mov	r0, r4
 800ba34:	f001 fca2 	bl	800d37c <_free_r>
 800ba38:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ba3a:	b111      	cbz	r1, 800ba42 <_reclaim_reent+0x36>
 800ba3c:	4620      	mov	r0, r4
 800ba3e:	f001 fc9d 	bl	800d37c <_free_r>
 800ba42:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ba44:	b111      	cbz	r1, 800ba4c <_reclaim_reent+0x40>
 800ba46:	4620      	mov	r0, r4
 800ba48:	f001 fc98 	bl	800d37c <_free_r>
 800ba4c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ba4e:	b111      	cbz	r1, 800ba56 <_reclaim_reent+0x4a>
 800ba50:	4620      	mov	r0, r4
 800ba52:	f001 fc93 	bl	800d37c <_free_r>
 800ba56:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ba58:	b111      	cbz	r1, 800ba60 <_reclaim_reent+0x54>
 800ba5a:	4620      	mov	r0, r4
 800ba5c:	f001 fc8e 	bl	800d37c <_free_r>
 800ba60:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ba62:	b111      	cbz	r1, 800ba6a <_reclaim_reent+0x5e>
 800ba64:	4620      	mov	r0, r4
 800ba66:	f001 fc89 	bl	800d37c <_free_r>
 800ba6a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ba6c:	b111      	cbz	r1, 800ba74 <_reclaim_reent+0x68>
 800ba6e:	4620      	mov	r0, r4
 800ba70:	f001 fc84 	bl	800d37c <_free_r>
 800ba74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba76:	b111      	cbz	r1, 800ba7e <_reclaim_reent+0x72>
 800ba78:	4620      	mov	r0, r4
 800ba7a:	f001 fc7f 	bl	800d37c <_free_r>
 800ba7e:	69a3      	ldr	r3, [r4, #24]
 800ba80:	b1e3      	cbz	r3, 800babc <_reclaim_reent+0xb0>
 800ba82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ba84:	4620      	mov	r0, r4
 800ba86:	4798      	blx	r3
 800ba88:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ba8a:	b1b9      	cbz	r1, 800babc <_reclaim_reent+0xb0>
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ba92:	f7ff bfad 	b.w	800b9f0 <cleanup_glue>
 800ba96:	5949      	ldr	r1, [r1, r5]
 800ba98:	b941      	cbnz	r1, 800baac <_reclaim_reent+0xa0>
 800ba9a:	3504      	adds	r5, #4
 800ba9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba9e:	2d80      	cmp	r5, #128	; 0x80
 800baa0:	68d9      	ldr	r1, [r3, #12]
 800baa2:	d1f8      	bne.n	800ba96 <_reclaim_reent+0x8a>
 800baa4:	4620      	mov	r0, r4
 800baa6:	f001 fc69 	bl	800d37c <_free_r>
 800baaa:	e7ba      	b.n	800ba22 <_reclaim_reent+0x16>
 800baac:	680e      	ldr	r6, [r1, #0]
 800baae:	4620      	mov	r0, r4
 800bab0:	f001 fc64 	bl	800d37c <_free_r>
 800bab4:	4631      	mov	r1, r6
 800bab6:	e7ef      	b.n	800ba98 <_reclaim_reent+0x8c>
 800bab8:	2500      	movs	r5, #0
 800baba:	e7ef      	b.n	800ba9c <_reclaim_reent+0x90>
 800babc:	bd70      	pop	{r4, r5, r6, pc}
 800babe:	bf00      	nop
 800bac0:	20000010 	.word	0x20000010

0800bac4 <_sbrk_r>:
 800bac4:	b538      	push	{r3, r4, r5, lr}
 800bac6:	4d06      	ldr	r5, [pc, #24]	; (800bae0 <_sbrk_r+0x1c>)
 800bac8:	2300      	movs	r3, #0
 800baca:	4604      	mov	r4, r0
 800bacc:	4608      	mov	r0, r1
 800bace:	602b      	str	r3, [r5, #0]
 800bad0:	f7f6 f932 	bl	8001d38 <_sbrk>
 800bad4:	1c43      	adds	r3, r0, #1
 800bad6:	d102      	bne.n	800bade <_sbrk_r+0x1a>
 800bad8:	682b      	ldr	r3, [r5, #0]
 800bada:	b103      	cbz	r3, 800bade <_sbrk_r+0x1a>
 800badc:	6023      	str	r3, [r4, #0]
 800bade:	bd38      	pop	{r3, r4, r5, pc}
 800bae0:	20001d04 	.word	0x20001d04

0800bae4 <sniprintf>:
 800bae4:	b40c      	push	{r2, r3}
 800bae6:	b530      	push	{r4, r5, lr}
 800bae8:	4b17      	ldr	r3, [pc, #92]	; (800bb48 <sniprintf+0x64>)
 800baea:	1e0c      	subs	r4, r1, #0
 800baec:	681d      	ldr	r5, [r3, #0]
 800baee:	b09d      	sub	sp, #116	; 0x74
 800baf0:	da08      	bge.n	800bb04 <sniprintf+0x20>
 800baf2:	238b      	movs	r3, #139	; 0x8b
 800baf4:	602b      	str	r3, [r5, #0]
 800baf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bafa:	b01d      	add	sp, #116	; 0x74
 800bafc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb00:	b002      	add	sp, #8
 800bb02:	4770      	bx	lr
 800bb04:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bb08:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bb0c:	bf14      	ite	ne
 800bb0e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800bb12:	4623      	moveq	r3, r4
 800bb14:	9304      	str	r3, [sp, #16]
 800bb16:	9307      	str	r3, [sp, #28]
 800bb18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bb1c:	9002      	str	r0, [sp, #8]
 800bb1e:	9006      	str	r0, [sp, #24]
 800bb20:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bb24:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bb26:	ab21      	add	r3, sp, #132	; 0x84
 800bb28:	a902      	add	r1, sp, #8
 800bb2a:	4628      	mov	r0, r5
 800bb2c:	9301      	str	r3, [sp, #4]
 800bb2e:	f001 fccb 	bl	800d4c8 <_svfiprintf_r>
 800bb32:	1c43      	adds	r3, r0, #1
 800bb34:	bfbc      	itt	lt
 800bb36:	238b      	movlt	r3, #139	; 0x8b
 800bb38:	602b      	strlt	r3, [r5, #0]
 800bb3a:	2c00      	cmp	r4, #0
 800bb3c:	d0dd      	beq.n	800bafa <sniprintf+0x16>
 800bb3e:	9b02      	ldr	r3, [sp, #8]
 800bb40:	2200      	movs	r2, #0
 800bb42:	701a      	strb	r2, [r3, #0]
 800bb44:	e7d9      	b.n	800bafa <sniprintf+0x16>
 800bb46:	bf00      	nop
 800bb48:	20000010 	.word	0x20000010

0800bb4c <siprintf>:
 800bb4c:	b40e      	push	{r1, r2, r3}
 800bb4e:	b500      	push	{lr}
 800bb50:	b09c      	sub	sp, #112	; 0x70
 800bb52:	ab1d      	add	r3, sp, #116	; 0x74
 800bb54:	9002      	str	r0, [sp, #8]
 800bb56:	9006      	str	r0, [sp, #24]
 800bb58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bb5c:	4809      	ldr	r0, [pc, #36]	; (800bb84 <siprintf+0x38>)
 800bb5e:	9107      	str	r1, [sp, #28]
 800bb60:	9104      	str	r1, [sp, #16]
 800bb62:	4909      	ldr	r1, [pc, #36]	; (800bb88 <siprintf+0x3c>)
 800bb64:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb68:	9105      	str	r1, [sp, #20]
 800bb6a:	6800      	ldr	r0, [r0, #0]
 800bb6c:	9301      	str	r3, [sp, #4]
 800bb6e:	a902      	add	r1, sp, #8
 800bb70:	f001 fcaa 	bl	800d4c8 <_svfiprintf_r>
 800bb74:	9b02      	ldr	r3, [sp, #8]
 800bb76:	2200      	movs	r2, #0
 800bb78:	701a      	strb	r2, [r3, #0]
 800bb7a:	b01c      	add	sp, #112	; 0x70
 800bb7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb80:	b003      	add	sp, #12
 800bb82:	4770      	bx	lr
 800bb84:	20000010 	.word	0x20000010
 800bb88:	ffff0208 	.word	0xffff0208

0800bb8c <__sread>:
 800bb8c:	b510      	push	{r4, lr}
 800bb8e:	460c      	mov	r4, r1
 800bb90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb94:	f001 fef0 	bl	800d978 <_read_r>
 800bb98:	2800      	cmp	r0, #0
 800bb9a:	bfab      	itete	ge
 800bb9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bb9e:	89a3      	ldrhlt	r3, [r4, #12]
 800bba0:	181b      	addge	r3, r3, r0
 800bba2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bba6:	bfac      	ite	ge
 800bba8:	6563      	strge	r3, [r4, #84]	; 0x54
 800bbaa:	81a3      	strhlt	r3, [r4, #12]
 800bbac:	bd10      	pop	{r4, pc}

0800bbae <__swrite>:
 800bbae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbb2:	461f      	mov	r7, r3
 800bbb4:	898b      	ldrh	r3, [r1, #12]
 800bbb6:	05db      	lsls	r3, r3, #23
 800bbb8:	4605      	mov	r5, r0
 800bbba:	460c      	mov	r4, r1
 800bbbc:	4616      	mov	r6, r2
 800bbbe:	d505      	bpl.n	800bbcc <__swrite+0x1e>
 800bbc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbc4:	2302      	movs	r3, #2
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	f001 f820 	bl	800cc0c <_lseek_r>
 800bbcc:	89a3      	ldrh	r3, [r4, #12]
 800bbce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bbd6:	81a3      	strh	r3, [r4, #12]
 800bbd8:	4632      	mov	r2, r6
 800bbda:	463b      	mov	r3, r7
 800bbdc:	4628      	mov	r0, r5
 800bbde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbe2:	f000 b887 	b.w	800bcf4 <_write_r>

0800bbe6 <__sseek>:
 800bbe6:	b510      	push	{r4, lr}
 800bbe8:	460c      	mov	r4, r1
 800bbea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbee:	f001 f80d 	bl	800cc0c <_lseek_r>
 800bbf2:	1c43      	adds	r3, r0, #1
 800bbf4:	89a3      	ldrh	r3, [r4, #12]
 800bbf6:	bf15      	itete	ne
 800bbf8:	6560      	strne	r0, [r4, #84]	; 0x54
 800bbfa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bbfe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bc02:	81a3      	strheq	r3, [r4, #12]
 800bc04:	bf18      	it	ne
 800bc06:	81a3      	strhne	r3, [r4, #12]
 800bc08:	bd10      	pop	{r4, pc}

0800bc0a <__sclose>:
 800bc0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc0e:	f000 b8a1 	b.w	800bd54 <_close_r>

0800bc12 <strncmp>:
 800bc12:	b510      	push	{r4, lr}
 800bc14:	4603      	mov	r3, r0
 800bc16:	b172      	cbz	r2, 800bc36 <strncmp+0x24>
 800bc18:	3901      	subs	r1, #1
 800bc1a:	1884      	adds	r4, r0, r2
 800bc1c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bc20:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bc24:	4290      	cmp	r0, r2
 800bc26:	d101      	bne.n	800bc2c <strncmp+0x1a>
 800bc28:	42a3      	cmp	r3, r4
 800bc2a:	d101      	bne.n	800bc30 <strncmp+0x1e>
 800bc2c:	1a80      	subs	r0, r0, r2
 800bc2e:	bd10      	pop	{r4, pc}
 800bc30:	2800      	cmp	r0, #0
 800bc32:	d1f3      	bne.n	800bc1c <strncmp+0xa>
 800bc34:	e7fa      	b.n	800bc2c <strncmp+0x1a>
 800bc36:	4610      	mov	r0, r2
 800bc38:	e7f9      	b.n	800bc2e <strncmp+0x1c>
	...

0800bc3c <strtok>:
 800bc3c:	4b16      	ldr	r3, [pc, #88]	; (800bc98 <strtok+0x5c>)
 800bc3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc42:	681f      	ldr	r7, [r3, #0]
 800bc44:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800bc46:	4605      	mov	r5, r0
 800bc48:	460e      	mov	r6, r1
 800bc4a:	b9ec      	cbnz	r4, 800bc88 <strtok+0x4c>
 800bc4c:	2050      	movs	r0, #80	; 0x50
 800bc4e:	f000 ffef 	bl	800cc30 <malloc>
 800bc52:	4602      	mov	r2, r0
 800bc54:	65b8      	str	r0, [r7, #88]	; 0x58
 800bc56:	b920      	cbnz	r0, 800bc62 <strtok+0x26>
 800bc58:	4b10      	ldr	r3, [pc, #64]	; (800bc9c <strtok+0x60>)
 800bc5a:	4811      	ldr	r0, [pc, #68]	; (800bca0 <strtok+0x64>)
 800bc5c:	2157      	movs	r1, #87	; 0x57
 800bc5e:	f000 f85b 	bl	800bd18 <__assert_func>
 800bc62:	e9c0 4400 	strd	r4, r4, [r0]
 800bc66:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800bc6a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800bc6e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800bc72:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800bc76:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800bc7a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800bc7e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800bc82:	6184      	str	r4, [r0, #24]
 800bc84:	7704      	strb	r4, [r0, #28]
 800bc86:	6244      	str	r4, [r0, #36]	; 0x24
 800bc88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bc8a:	4631      	mov	r1, r6
 800bc8c:	4628      	mov	r0, r5
 800bc8e:	2301      	movs	r3, #1
 800bc90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc94:	f000 b806 	b.w	800bca4 <__strtok_r>
 800bc98:	20000010 	.word	0x20000010
 800bc9c:	0800e6b0 	.word	0x0800e6b0
 800bca0:	0800e6c7 	.word	0x0800e6c7

0800bca4 <__strtok_r>:
 800bca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bca6:	b908      	cbnz	r0, 800bcac <__strtok_r+0x8>
 800bca8:	6810      	ldr	r0, [r2, #0]
 800bcaa:	b188      	cbz	r0, 800bcd0 <__strtok_r+0x2c>
 800bcac:	4604      	mov	r4, r0
 800bcae:	4620      	mov	r0, r4
 800bcb0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800bcb4:	460f      	mov	r7, r1
 800bcb6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800bcba:	b91e      	cbnz	r6, 800bcc4 <__strtok_r+0x20>
 800bcbc:	b965      	cbnz	r5, 800bcd8 <__strtok_r+0x34>
 800bcbe:	6015      	str	r5, [r2, #0]
 800bcc0:	4628      	mov	r0, r5
 800bcc2:	e005      	b.n	800bcd0 <__strtok_r+0x2c>
 800bcc4:	42b5      	cmp	r5, r6
 800bcc6:	d1f6      	bne.n	800bcb6 <__strtok_r+0x12>
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d1f0      	bne.n	800bcae <__strtok_r+0xa>
 800bccc:	6014      	str	r4, [r2, #0]
 800bcce:	7003      	strb	r3, [r0, #0]
 800bcd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcd2:	461c      	mov	r4, r3
 800bcd4:	e00c      	b.n	800bcf0 <__strtok_r+0x4c>
 800bcd6:	b915      	cbnz	r5, 800bcde <__strtok_r+0x3a>
 800bcd8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bcdc:	460e      	mov	r6, r1
 800bcde:	f816 5b01 	ldrb.w	r5, [r6], #1
 800bce2:	42ab      	cmp	r3, r5
 800bce4:	d1f7      	bne.n	800bcd6 <__strtok_r+0x32>
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d0f3      	beq.n	800bcd2 <__strtok_r+0x2e>
 800bcea:	2300      	movs	r3, #0
 800bcec:	f804 3c01 	strb.w	r3, [r4, #-1]
 800bcf0:	6014      	str	r4, [r2, #0]
 800bcf2:	e7ed      	b.n	800bcd0 <__strtok_r+0x2c>

0800bcf4 <_write_r>:
 800bcf4:	b538      	push	{r3, r4, r5, lr}
 800bcf6:	4d07      	ldr	r5, [pc, #28]	; (800bd14 <_write_r+0x20>)
 800bcf8:	4604      	mov	r4, r0
 800bcfa:	4608      	mov	r0, r1
 800bcfc:	4611      	mov	r1, r2
 800bcfe:	2200      	movs	r2, #0
 800bd00:	602a      	str	r2, [r5, #0]
 800bd02:	461a      	mov	r2, r3
 800bd04:	f7f5 ffcc 	bl	8001ca0 <_write>
 800bd08:	1c43      	adds	r3, r0, #1
 800bd0a:	d102      	bne.n	800bd12 <_write_r+0x1e>
 800bd0c:	682b      	ldr	r3, [r5, #0]
 800bd0e:	b103      	cbz	r3, 800bd12 <_write_r+0x1e>
 800bd10:	6023      	str	r3, [r4, #0]
 800bd12:	bd38      	pop	{r3, r4, r5, pc}
 800bd14:	20001d04 	.word	0x20001d04

0800bd18 <__assert_func>:
 800bd18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd1a:	4614      	mov	r4, r2
 800bd1c:	461a      	mov	r2, r3
 800bd1e:	4b09      	ldr	r3, [pc, #36]	; (800bd44 <__assert_func+0x2c>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	4605      	mov	r5, r0
 800bd24:	68d8      	ldr	r0, [r3, #12]
 800bd26:	b14c      	cbz	r4, 800bd3c <__assert_func+0x24>
 800bd28:	4b07      	ldr	r3, [pc, #28]	; (800bd48 <__assert_func+0x30>)
 800bd2a:	9100      	str	r1, [sp, #0]
 800bd2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bd30:	4906      	ldr	r1, [pc, #24]	; (800bd4c <__assert_func+0x34>)
 800bd32:	462b      	mov	r3, r5
 800bd34:	f000 ff54 	bl	800cbe0 <fiprintf>
 800bd38:	f001 fef0 	bl	800db1c <abort>
 800bd3c:	4b04      	ldr	r3, [pc, #16]	; (800bd50 <__assert_func+0x38>)
 800bd3e:	461c      	mov	r4, r3
 800bd40:	e7f3      	b.n	800bd2a <__assert_func+0x12>
 800bd42:	bf00      	nop
 800bd44:	20000010 	.word	0x20000010
 800bd48:	0800e724 	.word	0x0800e724
 800bd4c:	0800e731 	.word	0x0800e731
 800bd50:	0800e75f 	.word	0x0800e75f

0800bd54 <_close_r>:
 800bd54:	b538      	push	{r3, r4, r5, lr}
 800bd56:	4d06      	ldr	r5, [pc, #24]	; (800bd70 <_close_r+0x1c>)
 800bd58:	2300      	movs	r3, #0
 800bd5a:	4604      	mov	r4, r0
 800bd5c:	4608      	mov	r0, r1
 800bd5e:	602b      	str	r3, [r5, #0]
 800bd60:	f7f5 ffba 	bl	8001cd8 <_close>
 800bd64:	1c43      	adds	r3, r0, #1
 800bd66:	d102      	bne.n	800bd6e <_close_r+0x1a>
 800bd68:	682b      	ldr	r3, [r5, #0]
 800bd6a:	b103      	cbz	r3, 800bd6e <_close_r+0x1a>
 800bd6c:	6023      	str	r3, [r4, #0]
 800bd6e:	bd38      	pop	{r3, r4, r5, pc}
 800bd70:	20001d04 	.word	0x20001d04

0800bd74 <quorem>:
 800bd74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd78:	6903      	ldr	r3, [r0, #16]
 800bd7a:	690c      	ldr	r4, [r1, #16]
 800bd7c:	42a3      	cmp	r3, r4
 800bd7e:	4607      	mov	r7, r0
 800bd80:	db7d      	blt.n	800be7e <quorem+0x10a>
 800bd82:	3c01      	subs	r4, #1
 800bd84:	f101 0814 	add.w	r8, r1, #20
 800bd88:	f100 0514 	add.w	r5, r0, #20
 800bd8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd90:	9301      	str	r3, [sp, #4]
 800bd92:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bd96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd9a:	3301      	adds	r3, #1
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bda2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bda6:	fbb2 f6f3 	udiv	r6, r2, r3
 800bdaa:	d32e      	bcc.n	800be0a <quorem+0x96>
 800bdac:	f04f 0e00 	mov.w	lr, #0
 800bdb0:	4640      	mov	r0, r8
 800bdb2:	46ac      	mov	ip, r5
 800bdb4:	46f2      	mov	sl, lr
 800bdb6:	f850 2b04 	ldr.w	r2, [r0], #4
 800bdba:	b293      	uxth	r3, r2
 800bdbc:	fb06 e303 	mla	r3, r6, r3, lr
 800bdc0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bdc4:	0c12      	lsrs	r2, r2, #16
 800bdc6:	b29b      	uxth	r3, r3
 800bdc8:	fb06 e202 	mla	r2, r6, r2, lr
 800bdcc:	ebaa 0303 	sub.w	r3, sl, r3
 800bdd0:	f8dc a000 	ldr.w	sl, [ip]
 800bdd4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bdd8:	b292      	uxth	r2, r2
 800bdda:	fa13 f38a 	uxtah	r3, r3, sl
 800bdde:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bde2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bde6:	b29b      	uxth	r3, r3
 800bde8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bdec:	4581      	cmp	r9, r0
 800bdee:	f84c 3b04 	str.w	r3, [ip], #4
 800bdf2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bdf6:	d2de      	bcs.n	800bdb6 <quorem+0x42>
 800bdf8:	f855 300b 	ldr.w	r3, [r5, fp]
 800bdfc:	b92b      	cbnz	r3, 800be0a <quorem+0x96>
 800bdfe:	9b01      	ldr	r3, [sp, #4]
 800be00:	3b04      	subs	r3, #4
 800be02:	429d      	cmp	r5, r3
 800be04:	461a      	mov	r2, r3
 800be06:	d32e      	bcc.n	800be66 <quorem+0xf2>
 800be08:	613c      	str	r4, [r7, #16]
 800be0a:	4638      	mov	r0, r7
 800be0c:	f001 f9a2 	bl	800d154 <__mcmp>
 800be10:	2800      	cmp	r0, #0
 800be12:	db24      	blt.n	800be5e <quorem+0xea>
 800be14:	3601      	adds	r6, #1
 800be16:	4628      	mov	r0, r5
 800be18:	f04f 0c00 	mov.w	ip, #0
 800be1c:	f858 2b04 	ldr.w	r2, [r8], #4
 800be20:	f8d0 e000 	ldr.w	lr, [r0]
 800be24:	b293      	uxth	r3, r2
 800be26:	ebac 0303 	sub.w	r3, ip, r3
 800be2a:	0c12      	lsrs	r2, r2, #16
 800be2c:	fa13 f38e 	uxtah	r3, r3, lr
 800be30:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800be34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800be38:	b29b      	uxth	r3, r3
 800be3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be3e:	45c1      	cmp	r9, r8
 800be40:	f840 3b04 	str.w	r3, [r0], #4
 800be44:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800be48:	d2e8      	bcs.n	800be1c <quorem+0xa8>
 800be4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be52:	b922      	cbnz	r2, 800be5e <quorem+0xea>
 800be54:	3b04      	subs	r3, #4
 800be56:	429d      	cmp	r5, r3
 800be58:	461a      	mov	r2, r3
 800be5a:	d30a      	bcc.n	800be72 <quorem+0xfe>
 800be5c:	613c      	str	r4, [r7, #16]
 800be5e:	4630      	mov	r0, r6
 800be60:	b003      	add	sp, #12
 800be62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be66:	6812      	ldr	r2, [r2, #0]
 800be68:	3b04      	subs	r3, #4
 800be6a:	2a00      	cmp	r2, #0
 800be6c:	d1cc      	bne.n	800be08 <quorem+0x94>
 800be6e:	3c01      	subs	r4, #1
 800be70:	e7c7      	b.n	800be02 <quorem+0x8e>
 800be72:	6812      	ldr	r2, [r2, #0]
 800be74:	3b04      	subs	r3, #4
 800be76:	2a00      	cmp	r2, #0
 800be78:	d1f0      	bne.n	800be5c <quorem+0xe8>
 800be7a:	3c01      	subs	r4, #1
 800be7c:	e7eb      	b.n	800be56 <quorem+0xe2>
 800be7e:	2000      	movs	r0, #0
 800be80:	e7ee      	b.n	800be60 <quorem+0xec>
 800be82:	0000      	movs	r0, r0
 800be84:	0000      	movs	r0, r0
	...

0800be88 <_dtoa_r>:
 800be88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be8c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800be8e:	b099      	sub	sp, #100	; 0x64
 800be90:	4616      	mov	r6, r2
 800be92:	461f      	mov	r7, r3
 800be94:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800be98:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800be9c:	4605      	mov	r5, r0
 800be9e:	b974      	cbnz	r4, 800bebe <_dtoa_r+0x36>
 800bea0:	2010      	movs	r0, #16
 800bea2:	f000 fec5 	bl	800cc30 <malloc>
 800bea6:	4602      	mov	r2, r0
 800bea8:	6268      	str	r0, [r5, #36]	; 0x24
 800beaa:	b920      	cbnz	r0, 800beb6 <_dtoa_r+0x2e>
 800beac:	4ba8      	ldr	r3, [pc, #672]	; (800c150 <_dtoa_r+0x2c8>)
 800beae:	21ea      	movs	r1, #234	; 0xea
 800beb0:	48a8      	ldr	r0, [pc, #672]	; (800c154 <_dtoa_r+0x2cc>)
 800beb2:	f7ff ff31 	bl	800bd18 <__assert_func>
 800beb6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800beba:	6004      	str	r4, [r0, #0]
 800bebc:	60c4      	str	r4, [r0, #12]
 800bebe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bec0:	6819      	ldr	r1, [r3, #0]
 800bec2:	b151      	cbz	r1, 800beda <_dtoa_r+0x52>
 800bec4:	685a      	ldr	r2, [r3, #4]
 800bec6:	604a      	str	r2, [r1, #4]
 800bec8:	2301      	movs	r3, #1
 800beca:	4093      	lsls	r3, r2
 800becc:	608b      	str	r3, [r1, #8]
 800bece:	4628      	mov	r0, r5
 800bed0:	f000 ff02 	bl	800ccd8 <_Bfree>
 800bed4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bed6:	2200      	movs	r2, #0
 800bed8:	601a      	str	r2, [r3, #0]
 800beda:	1e3b      	subs	r3, r7, #0
 800bedc:	bfb9      	ittee	lt
 800bede:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bee2:	9305      	strlt	r3, [sp, #20]
 800bee4:	2300      	movge	r3, #0
 800bee6:	f8c8 3000 	strge.w	r3, [r8]
 800beea:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800beee:	4b9a      	ldr	r3, [pc, #616]	; (800c158 <_dtoa_r+0x2d0>)
 800bef0:	bfbc      	itt	lt
 800bef2:	2201      	movlt	r2, #1
 800bef4:	f8c8 2000 	strlt.w	r2, [r8]
 800bef8:	ea33 0309 	bics.w	r3, r3, r9
 800befc:	d119      	bne.n	800bf32 <_dtoa_r+0xaa>
 800befe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bf00:	f242 730f 	movw	r3, #9999	; 0x270f
 800bf04:	6013      	str	r3, [r2, #0]
 800bf06:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bf0a:	4333      	orrs	r3, r6
 800bf0c:	f000 8580 	beq.w	800ca10 <_dtoa_r+0xb88>
 800bf10:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bf12:	b953      	cbnz	r3, 800bf2a <_dtoa_r+0xa2>
 800bf14:	4b91      	ldr	r3, [pc, #580]	; (800c15c <_dtoa_r+0x2d4>)
 800bf16:	e022      	b.n	800bf5e <_dtoa_r+0xd6>
 800bf18:	4b91      	ldr	r3, [pc, #580]	; (800c160 <_dtoa_r+0x2d8>)
 800bf1a:	9303      	str	r3, [sp, #12]
 800bf1c:	3308      	adds	r3, #8
 800bf1e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800bf20:	6013      	str	r3, [r2, #0]
 800bf22:	9803      	ldr	r0, [sp, #12]
 800bf24:	b019      	add	sp, #100	; 0x64
 800bf26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf2a:	4b8c      	ldr	r3, [pc, #560]	; (800c15c <_dtoa_r+0x2d4>)
 800bf2c:	9303      	str	r3, [sp, #12]
 800bf2e:	3303      	adds	r3, #3
 800bf30:	e7f5      	b.n	800bf1e <_dtoa_r+0x96>
 800bf32:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800bf36:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800bf3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bf3e:	2200      	movs	r2, #0
 800bf40:	2300      	movs	r3, #0
 800bf42:	f7f4 fd99 	bl	8000a78 <__aeabi_dcmpeq>
 800bf46:	4680      	mov	r8, r0
 800bf48:	b158      	cbz	r0, 800bf62 <_dtoa_r+0xda>
 800bf4a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	6013      	str	r3, [r2, #0]
 800bf50:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	f000 8559 	beq.w	800ca0a <_dtoa_r+0xb82>
 800bf58:	4882      	ldr	r0, [pc, #520]	; (800c164 <_dtoa_r+0x2dc>)
 800bf5a:	6018      	str	r0, [r3, #0]
 800bf5c:	1e43      	subs	r3, r0, #1
 800bf5e:	9303      	str	r3, [sp, #12]
 800bf60:	e7df      	b.n	800bf22 <_dtoa_r+0x9a>
 800bf62:	ab16      	add	r3, sp, #88	; 0x58
 800bf64:	9301      	str	r3, [sp, #4]
 800bf66:	ab17      	add	r3, sp, #92	; 0x5c
 800bf68:	9300      	str	r3, [sp, #0]
 800bf6a:	4628      	mov	r0, r5
 800bf6c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bf70:	f001 f994 	bl	800d29c <__d2b>
 800bf74:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800bf78:	4683      	mov	fp, r0
 800bf7a:	2c00      	cmp	r4, #0
 800bf7c:	d07e      	beq.n	800c07c <_dtoa_r+0x1f4>
 800bf7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf80:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800bf84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bf8c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800bf90:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800bf94:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800bf98:	4b73      	ldr	r3, [pc, #460]	; (800c168 <_dtoa_r+0x2e0>)
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	f7f4 f94c 	bl	8000238 <__aeabi_dsub>
 800bfa0:	a365      	add	r3, pc, #404	; (adr r3, 800c138 <_dtoa_r+0x2b0>)
 800bfa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa6:	f7f4 faff 	bl	80005a8 <__aeabi_dmul>
 800bfaa:	a365      	add	r3, pc, #404	; (adr r3, 800c140 <_dtoa_r+0x2b8>)
 800bfac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb0:	f7f4 f944 	bl	800023c <__adddf3>
 800bfb4:	4606      	mov	r6, r0
 800bfb6:	4620      	mov	r0, r4
 800bfb8:	460f      	mov	r7, r1
 800bfba:	f7f4 fa8b 	bl	80004d4 <__aeabi_i2d>
 800bfbe:	a362      	add	r3, pc, #392	; (adr r3, 800c148 <_dtoa_r+0x2c0>)
 800bfc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc4:	f7f4 faf0 	bl	80005a8 <__aeabi_dmul>
 800bfc8:	4602      	mov	r2, r0
 800bfca:	460b      	mov	r3, r1
 800bfcc:	4630      	mov	r0, r6
 800bfce:	4639      	mov	r1, r7
 800bfd0:	f7f4 f934 	bl	800023c <__adddf3>
 800bfd4:	4606      	mov	r6, r0
 800bfd6:	460f      	mov	r7, r1
 800bfd8:	f7f4 fd96 	bl	8000b08 <__aeabi_d2iz>
 800bfdc:	2200      	movs	r2, #0
 800bfde:	4682      	mov	sl, r0
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	4630      	mov	r0, r6
 800bfe4:	4639      	mov	r1, r7
 800bfe6:	f7f4 fd51 	bl	8000a8c <__aeabi_dcmplt>
 800bfea:	b148      	cbz	r0, 800c000 <_dtoa_r+0x178>
 800bfec:	4650      	mov	r0, sl
 800bfee:	f7f4 fa71 	bl	80004d4 <__aeabi_i2d>
 800bff2:	4632      	mov	r2, r6
 800bff4:	463b      	mov	r3, r7
 800bff6:	f7f4 fd3f 	bl	8000a78 <__aeabi_dcmpeq>
 800bffa:	b908      	cbnz	r0, 800c000 <_dtoa_r+0x178>
 800bffc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c000:	f1ba 0f16 	cmp.w	sl, #22
 800c004:	d857      	bhi.n	800c0b6 <_dtoa_r+0x22e>
 800c006:	4b59      	ldr	r3, [pc, #356]	; (800c16c <_dtoa_r+0x2e4>)
 800c008:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c010:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c014:	f7f4 fd3a 	bl	8000a8c <__aeabi_dcmplt>
 800c018:	2800      	cmp	r0, #0
 800c01a:	d04e      	beq.n	800c0ba <_dtoa_r+0x232>
 800c01c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c020:	2300      	movs	r3, #0
 800c022:	930f      	str	r3, [sp, #60]	; 0x3c
 800c024:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c026:	1b1c      	subs	r4, r3, r4
 800c028:	1e63      	subs	r3, r4, #1
 800c02a:	9309      	str	r3, [sp, #36]	; 0x24
 800c02c:	bf45      	ittet	mi
 800c02e:	f1c4 0301 	rsbmi	r3, r4, #1
 800c032:	9306      	strmi	r3, [sp, #24]
 800c034:	2300      	movpl	r3, #0
 800c036:	2300      	movmi	r3, #0
 800c038:	bf4c      	ite	mi
 800c03a:	9309      	strmi	r3, [sp, #36]	; 0x24
 800c03c:	9306      	strpl	r3, [sp, #24]
 800c03e:	f1ba 0f00 	cmp.w	sl, #0
 800c042:	db3c      	blt.n	800c0be <_dtoa_r+0x236>
 800c044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c046:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800c04a:	4453      	add	r3, sl
 800c04c:	9309      	str	r3, [sp, #36]	; 0x24
 800c04e:	2300      	movs	r3, #0
 800c050:	930a      	str	r3, [sp, #40]	; 0x28
 800c052:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c054:	2b09      	cmp	r3, #9
 800c056:	f200 808d 	bhi.w	800c174 <_dtoa_r+0x2ec>
 800c05a:	2b05      	cmp	r3, #5
 800c05c:	bfc4      	itt	gt
 800c05e:	3b04      	subgt	r3, #4
 800c060:	9322      	strgt	r3, [sp, #136]	; 0x88
 800c062:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c064:	f1a3 0302 	sub.w	r3, r3, #2
 800c068:	bfcc      	ite	gt
 800c06a:	2400      	movgt	r4, #0
 800c06c:	2401      	movle	r4, #1
 800c06e:	2b03      	cmp	r3, #3
 800c070:	f200 808c 	bhi.w	800c18c <_dtoa_r+0x304>
 800c074:	e8df f003 	tbb	[pc, r3]
 800c078:	5b4d4f2d 	.word	0x5b4d4f2d
 800c07c:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800c080:	441c      	add	r4, r3
 800c082:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800c086:	2b20      	cmp	r3, #32
 800c088:	bfc3      	ittte	gt
 800c08a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c08e:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800c092:	fa09 f303 	lslgt.w	r3, r9, r3
 800c096:	f1c3 0320 	rsble	r3, r3, #32
 800c09a:	bfc6      	itte	gt
 800c09c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c0a0:	4318      	orrgt	r0, r3
 800c0a2:	fa06 f003 	lslle.w	r0, r6, r3
 800c0a6:	f7f4 fa05 	bl	80004b4 <__aeabi_ui2d>
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800c0b0:	3c01      	subs	r4, #1
 800c0b2:	9313      	str	r3, [sp, #76]	; 0x4c
 800c0b4:	e770      	b.n	800bf98 <_dtoa_r+0x110>
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	e7b3      	b.n	800c022 <_dtoa_r+0x19a>
 800c0ba:	900f      	str	r0, [sp, #60]	; 0x3c
 800c0bc:	e7b2      	b.n	800c024 <_dtoa_r+0x19c>
 800c0be:	9b06      	ldr	r3, [sp, #24]
 800c0c0:	eba3 030a 	sub.w	r3, r3, sl
 800c0c4:	9306      	str	r3, [sp, #24]
 800c0c6:	f1ca 0300 	rsb	r3, sl, #0
 800c0ca:	930a      	str	r3, [sp, #40]	; 0x28
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	930e      	str	r3, [sp, #56]	; 0x38
 800c0d0:	e7bf      	b.n	800c052 <_dtoa_r+0x1ca>
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	930b      	str	r3, [sp, #44]	; 0x2c
 800c0d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	dc5a      	bgt.n	800c192 <_dtoa_r+0x30a>
 800c0dc:	f04f 0901 	mov.w	r9, #1
 800c0e0:	f8cd 9020 	str.w	r9, [sp, #32]
 800c0e4:	464b      	mov	r3, r9
 800c0e6:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800c0ea:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	6042      	str	r2, [r0, #4]
 800c0f0:	2204      	movs	r2, #4
 800c0f2:	f102 0614 	add.w	r6, r2, #20
 800c0f6:	429e      	cmp	r6, r3
 800c0f8:	6841      	ldr	r1, [r0, #4]
 800c0fa:	d950      	bls.n	800c19e <_dtoa_r+0x316>
 800c0fc:	4628      	mov	r0, r5
 800c0fe:	f000 fdab 	bl	800cc58 <_Balloc>
 800c102:	9003      	str	r0, [sp, #12]
 800c104:	2800      	cmp	r0, #0
 800c106:	d14e      	bne.n	800c1a6 <_dtoa_r+0x31e>
 800c108:	4b19      	ldr	r3, [pc, #100]	; (800c170 <_dtoa_r+0x2e8>)
 800c10a:	4602      	mov	r2, r0
 800c10c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c110:	e6ce      	b.n	800beb0 <_dtoa_r+0x28>
 800c112:	2301      	movs	r3, #1
 800c114:	e7de      	b.n	800c0d4 <_dtoa_r+0x24c>
 800c116:	2300      	movs	r3, #0
 800c118:	930b      	str	r3, [sp, #44]	; 0x2c
 800c11a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c11c:	eb0a 0903 	add.w	r9, sl, r3
 800c120:	f109 0301 	add.w	r3, r9, #1
 800c124:	2b01      	cmp	r3, #1
 800c126:	9308      	str	r3, [sp, #32]
 800c128:	bfb8      	it	lt
 800c12a:	2301      	movlt	r3, #1
 800c12c:	e7dd      	b.n	800c0ea <_dtoa_r+0x262>
 800c12e:	2301      	movs	r3, #1
 800c130:	e7f2      	b.n	800c118 <_dtoa_r+0x290>
 800c132:	bf00      	nop
 800c134:	f3af 8000 	nop.w
 800c138:	636f4361 	.word	0x636f4361
 800c13c:	3fd287a7 	.word	0x3fd287a7
 800c140:	8b60c8b3 	.word	0x8b60c8b3
 800c144:	3fc68a28 	.word	0x3fc68a28
 800c148:	509f79fb 	.word	0x509f79fb
 800c14c:	3fd34413 	.word	0x3fd34413
 800c150:	0800e6b0 	.word	0x0800e6b0
 800c154:	0800e76d 	.word	0x0800e76d
 800c158:	7ff00000 	.word	0x7ff00000
 800c15c:	0800e769 	.word	0x0800e769
 800c160:	0800e760 	.word	0x0800e760
 800c164:	0800e68d 	.word	0x0800e68d
 800c168:	3ff80000 	.word	0x3ff80000
 800c16c:	0800e860 	.word	0x0800e860
 800c170:	0800e7c8 	.word	0x0800e7c8
 800c174:	2401      	movs	r4, #1
 800c176:	2300      	movs	r3, #0
 800c178:	9322      	str	r3, [sp, #136]	; 0x88
 800c17a:	940b      	str	r4, [sp, #44]	; 0x2c
 800c17c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800c180:	2200      	movs	r2, #0
 800c182:	f8cd 9020 	str.w	r9, [sp, #32]
 800c186:	2312      	movs	r3, #18
 800c188:	9223      	str	r2, [sp, #140]	; 0x8c
 800c18a:	e7ae      	b.n	800c0ea <_dtoa_r+0x262>
 800c18c:	2301      	movs	r3, #1
 800c18e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c190:	e7f4      	b.n	800c17c <_dtoa_r+0x2f4>
 800c192:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800c196:	f8cd 9020 	str.w	r9, [sp, #32]
 800c19a:	464b      	mov	r3, r9
 800c19c:	e7a5      	b.n	800c0ea <_dtoa_r+0x262>
 800c19e:	3101      	adds	r1, #1
 800c1a0:	6041      	str	r1, [r0, #4]
 800c1a2:	0052      	lsls	r2, r2, #1
 800c1a4:	e7a5      	b.n	800c0f2 <_dtoa_r+0x26a>
 800c1a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c1a8:	9a03      	ldr	r2, [sp, #12]
 800c1aa:	601a      	str	r2, [r3, #0]
 800c1ac:	9b08      	ldr	r3, [sp, #32]
 800c1ae:	2b0e      	cmp	r3, #14
 800c1b0:	f200 80a8 	bhi.w	800c304 <_dtoa_r+0x47c>
 800c1b4:	2c00      	cmp	r4, #0
 800c1b6:	f000 80a5 	beq.w	800c304 <_dtoa_r+0x47c>
 800c1ba:	f1ba 0f00 	cmp.w	sl, #0
 800c1be:	dd34      	ble.n	800c22a <_dtoa_r+0x3a2>
 800c1c0:	4a9a      	ldr	r2, [pc, #616]	; (800c42c <_dtoa_r+0x5a4>)
 800c1c2:	f00a 030f 	and.w	r3, sl, #15
 800c1c6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c1ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c1ce:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800c1d2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800c1d6:	ea4f 142a 	mov.w	r4, sl, asr #4
 800c1da:	d016      	beq.n	800c20a <_dtoa_r+0x382>
 800c1dc:	4b94      	ldr	r3, [pc, #592]	; (800c430 <_dtoa_r+0x5a8>)
 800c1de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c1e2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c1e6:	f7f4 fb09 	bl	80007fc <__aeabi_ddiv>
 800c1ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c1ee:	f004 040f 	and.w	r4, r4, #15
 800c1f2:	2703      	movs	r7, #3
 800c1f4:	4e8e      	ldr	r6, [pc, #568]	; (800c430 <_dtoa_r+0x5a8>)
 800c1f6:	b954      	cbnz	r4, 800c20e <_dtoa_r+0x386>
 800c1f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c1fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c200:	f7f4 fafc 	bl	80007fc <__aeabi_ddiv>
 800c204:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c208:	e029      	b.n	800c25e <_dtoa_r+0x3d6>
 800c20a:	2702      	movs	r7, #2
 800c20c:	e7f2      	b.n	800c1f4 <_dtoa_r+0x36c>
 800c20e:	07e1      	lsls	r1, r4, #31
 800c210:	d508      	bpl.n	800c224 <_dtoa_r+0x39c>
 800c212:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c216:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c21a:	f7f4 f9c5 	bl	80005a8 <__aeabi_dmul>
 800c21e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c222:	3701      	adds	r7, #1
 800c224:	1064      	asrs	r4, r4, #1
 800c226:	3608      	adds	r6, #8
 800c228:	e7e5      	b.n	800c1f6 <_dtoa_r+0x36e>
 800c22a:	f000 80a5 	beq.w	800c378 <_dtoa_r+0x4f0>
 800c22e:	f1ca 0400 	rsb	r4, sl, #0
 800c232:	4b7e      	ldr	r3, [pc, #504]	; (800c42c <_dtoa_r+0x5a4>)
 800c234:	4e7e      	ldr	r6, [pc, #504]	; (800c430 <_dtoa_r+0x5a8>)
 800c236:	f004 020f 	and.w	r2, r4, #15
 800c23a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c242:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c246:	f7f4 f9af 	bl	80005a8 <__aeabi_dmul>
 800c24a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c24e:	1124      	asrs	r4, r4, #4
 800c250:	2300      	movs	r3, #0
 800c252:	2702      	movs	r7, #2
 800c254:	2c00      	cmp	r4, #0
 800c256:	f040 8084 	bne.w	800c362 <_dtoa_r+0x4da>
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d1d2      	bne.n	800c204 <_dtoa_r+0x37c>
 800c25e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c260:	2b00      	cmp	r3, #0
 800c262:	f000 808b 	beq.w	800c37c <_dtoa_r+0x4f4>
 800c266:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800c26a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800c26e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c272:	4b70      	ldr	r3, [pc, #448]	; (800c434 <_dtoa_r+0x5ac>)
 800c274:	2200      	movs	r2, #0
 800c276:	f7f4 fc09 	bl	8000a8c <__aeabi_dcmplt>
 800c27a:	2800      	cmp	r0, #0
 800c27c:	d07e      	beq.n	800c37c <_dtoa_r+0x4f4>
 800c27e:	9b08      	ldr	r3, [sp, #32]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d07b      	beq.n	800c37c <_dtoa_r+0x4f4>
 800c284:	f1b9 0f00 	cmp.w	r9, #0
 800c288:	dd38      	ble.n	800c2fc <_dtoa_r+0x474>
 800c28a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c28e:	4b6a      	ldr	r3, [pc, #424]	; (800c438 <_dtoa_r+0x5b0>)
 800c290:	2200      	movs	r2, #0
 800c292:	f7f4 f989 	bl	80005a8 <__aeabi_dmul>
 800c296:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c29a:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 800c29e:	3701      	adds	r7, #1
 800c2a0:	464c      	mov	r4, r9
 800c2a2:	4638      	mov	r0, r7
 800c2a4:	f7f4 f916 	bl	80004d4 <__aeabi_i2d>
 800c2a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c2ac:	f7f4 f97c 	bl	80005a8 <__aeabi_dmul>
 800c2b0:	4b62      	ldr	r3, [pc, #392]	; (800c43c <_dtoa_r+0x5b4>)
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	f7f3 ffc2 	bl	800023c <__adddf3>
 800c2b8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c2bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c2c0:	9611      	str	r6, [sp, #68]	; 0x44
 800c2c2:	2c00      	cmp	r4, #0
 800c2c4:	d15d      	bne.n	800c382 <_dtoa_r+0x4fa>
 800c2c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2ca:	4b5d      	ldr	r3, [pc, #372]	; (800c440 <_dtoa_r+0x5b8>)
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	f7f3 ffb3 	bl	8000238 <__aeabi_dsub>
 800c2d2:	4602      	mov	r2, r0
 800c2d4:	460b      	mov	r3, r1
 800c2d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c2da:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c2dc:	4633      	mov	r3, r6
 800c2de:	f7f4 fbf3 	bl	8000ac8 <__aeabi_dcmpgt>
 800c2e2:	2800      	cmp	r0, #0
 800c2e4:	f040 829c 	bne.w	800c820 <_dtoa_r+0x998>
 800c2e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c2ee:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c2f2:	f7f4 fbcb 	bl	8000a8c <__aeabi_dcmplt>
 800c2f6:	2800      	cmp	r0, #0
 800c2f8:	f040 8290 	bne.w	800c81c <_dtoa_r+0x994>
 800c2fc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800c300:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c304:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c306:	2b00      	cmp	r3, #0
 800c308:	f2c0 8152 	blt.w	800c5b0 <_dtoa_r+0x728>
 800c30c:	f1ba 0f0e 	cmp.w	sl, #14
 800c310:	f300 814e 	bgt.w	800c5b0 <_dtoa_r+0x728>
 800c314:	4b45      	ldr	r3, [pc, #276]	; (800c42c <_dtoa_r+0x5a4>)
 800c316:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c31a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c31e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800c322:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c324:	2b00      	cmp	r3, #0
 800c326:	f280 80db 	bge.w	800c4e0 <_dtoa_r+0x658>
 800c32a:	9b08      	ldr	r3, [sp, #32]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	f300 80d7 	bgt.w	800c4e0 <_dtoa_r+0x658>
 800c332:	f040 8272 	bne.w	800c81a <_dtoa_r+0x992>
 800c336:	4b42      	ldr	r3, [pc, #264]	; (800c440 <_dtoa_r+0x5b8>)
 800c338:	2200      	movs	r2, #0
 800c33a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c33e:	f7f4 f933 	bl	80005a8 <__aeabi_dmul>
 800c342:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c346:	f7f4 fbb5 	bl	8000ab4 <__aeabi_dcmpge>
 800c34a:	9c08      	ldr	r4, [sp, #32]
 800c34c:	4626      	mov	r6, r4
 800c34e:	2800      	cmp	r0, #0
 800c350:	f040 8248 	bne.w	800c7e4 <_dtoa_r+0x95c>
 800c354:	9f03      	ldr	r7, [sp, #12]
 800c356:	2331      	movs	r3, #49	; 0x31
 800c358:	f807 3b01 	strb.w	r3, [r7], #1
 800c35c:	f10a 0a01 	add.w	sl, sl, #1
 800c360:	e244      	b.n	800c7ec <_dtoa_r+0x964>
 800c362:	07e2      	lsls	r2, r4, #31
 800c364:	d505      	bpl.n	800c372 <_dtoa_r+0x4ea>
 800c366:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c36a:	f7f4 f91d 	bl	80005a8 <__aeabi_dmul>
 800c36e:	3701      	adds	r7, #1
 800c370:	2301      	movs	r3, #1
 800c372:	1064      	asrs	r4, r4, #1
 800c374:	3608      	adds	r6, #8
 800c376:	e76d      	b.n	800c254 <_dtoa_r+0x3cc>
 800c378:	2702      	movs	r7, #2
 800c37a:	e770      	b.n	800c25e <_dtoa_r+0x3d6>
 800c37c:	9c08      	ldr	r4, [sp, #32]
 800c37e:	46d0      	mov	r8, sl
 800c380:	e78f      	b.n	800c2a2 <_dtoa_r+0x41a>
 800c382:	9903      	ldr	r1, [sp, #12]
 800c384:	4b29      	ldr	r3, [pc, #164]	; (800c42c <_dtoa_r+0x5a4>)
 800c386:	4421      	add	r1, r4
 800c388:	9112      	str	r1, [sp, #72]	; 0x48
 800c38a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c38c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c390:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800c394:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c398:	2900      	cmp	r1, #0
 800c39a:	d055      	beq.n	800c448 <_dtoa_r+0x5c0>
 800c39c:	4929      	ldr	r1, [pc, #164]	; (800c444 <_dtoa_r+0x5bc>)
 800c39e:	2000      	movs	r0, #0
 800c3a0:	f7f4 fa2c 	bl	80007fc <__aeabi_ddiv>
 800c3a4:	463b      	mov	r3, r7
 800c3a6:	4632      	mov	r2, r6
 800c3a8:	f7f3 ff46 	bl	8000238 <__aeabi_dsub>
 800c3ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c3b0:	9f03      	ldr	r7, [sp, #12]
 800c3b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3b6:	f7f4 fba7 	bl	8000b08 <__aeabi_d2iz>
 800c3ba:	4604      	mov	r4, r0
 800c3bc:	f7f4 f88a 	bl	80004d4 <__aeabi_i2d>
 800c3c0:	4602      	mov	r2, r0
 800c3c2:	460b      	mov	r3, r1
 800c3c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3c8:	f7f3 ff36 	bl	8000238 <__aeabi_dsub>
 800c3cc:	3430      	adds	r4, #48	; 0x30
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	460b      	mov	r3, r1
 800c3d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c3d6:	f807 4b01 	strb.w	r4, [r7], #1
 800c3da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c3de:	f7f4 fb55 	bl	8000a8c <__aeabi_dcmplt>
 800c3e2:	2800      	cmp	r0, #0
 800c3e4:	d174      	bne.n	800c4d0 <_dtoa_r+0x648>
 800c3e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3ea:	4912      	ldr	r1, [pc, #72]	; (800c434 <_dtoa_r+0x5ac>)
 800c3ec:	2000      	movs	r0, #0
 800c3ee:	f7f3 ff23 	bl	8000238 <__aeabi_dsub>
 800c3f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c3f6:	f7f4 fb49 	bl	8000a8c <__aeabi_dcmplt>
 800c3fa:	2800      	cmp	r0, #0
 800c3fc:	f040 80b7 	bne.w	800c56e <_dtoa_r+0x6e6>
 800c400:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c402:	429f      	cmp	r7, r3
 800c404:	f43f af7a 	beq.w	800c2fc <_dtoa_r+0x474>
 800c408:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c40c:	4b0a      	ldr	r3, [pc, #40]	; (800c438 <_dtoa_r+0x5b0>)
 800c40e:	2200      	movs	r2, #0
 800c410:	f7f4 f8ca 	bl	80005a8 <__aeabi_dmul>
 800c414:	4b08      	ldr	r3, [pc, #32]	; (800c438 <_dtoa_r+0x5b0>)
 800c416:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c41a:	2200      	movs	r2, #0
 800c41c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c420:	f7f4 f8c2 	bl	80005a8 <__aeabi_dmul>
 800c424:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c428:	e7c3      	b.n	800c3b2 <_dtoa_r+0x52a>
 800c42a:	bf00      	nop
 800c42c:	0800e860 	.word	0x0800e860
 800c430:	0800e838 	.word	0x0800e838
 800c434:	3ff00000 	.word	0x3ff00000
 800c438:	40240000 	.word	0x40240000
 800c43c:	401c0000 	.word	0x401c0000
 800c440:	40140000 	.word	0x40140000
 800c444:	3fe00000 	.word	0x3fe00000
 800c448:	4630      	mov	r0, r6
 800c44a:	4639      	mov	r1, r7
 800c44c:	f7f4 f8ac 	bl	80005a8 <__aeabi_dmul>
 800c450:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c454:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c456:	9c03      	ldr	r4, [sp, #12]
 800c458:	9314      	str	r3, [sp, #80]	; 0x50
 800c45a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c45e:	f7f4 fb53 	bl	8000b08 <__aeabi_d2iz>
 800c462:	9015      	str	r0, [sp, #84]	; 0x54
 800c464:	f7f4 f836 	bl	80004d4 <__aeabi_i2d>
 800c468:	4602      	mov	r2, r0
 800c46a:	460b      	mov	r3, r1
 800c46c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c470:	f7f3 fee2 	bl	8000238 <__aeabi_dsub>
 800c474:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c476:	3330      	adds	r3, #48	; 0x30
 800c478:	f804 3b01 	strb.w	r3, [r4], #1
 800c47c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c47e:	429c      	cmp	r4, r3
 800c480:	4606      	mov	r6, r0
 800c482:	460f      	mov	r7, r1
 800c484:	f04f 0200 	mov.w	r2, #0
 800c488:	d124      	bne.n	800c4d4 <_dtoa_r+0x64c>
 800c48a:	4ba4      	ldr	r3, [pc, #656]	; (800c71c <_dtoa_r+0x894>)
 800c48c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c490:	f7f3 fed4 	bl	800023c <__adddf3>
 800c494:	4602      	mov	r2, r0
 800c496:	460b      	mov	r3, r1
 800c498:	4630      	mov	r0, r6
 800c49a:	4639      	mov	r1, r7
 800c49c:	f7f4 fb14 	bl	8000ac8 <__aeabi_dcmpgt>
 800c4a0:	2800      	cmp	r0, #0
 800c4a2:	d163      	bne.n	800c56c <_dtoa_r+0x6e4>
 800c4a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c4a8:	499c      	ldr	r1, [pc, #624]	; (800c71c <_dtoa_r+0x894>)
 800c4aa:	2000      	movs	r0, #0
 800c4ac:	f7f3 fec4 	bl	8000238 <__aeabi_dsub>
 800c4b0:	4602      	mov	r2, r0
 800c4b2:	460b      	mov	r3, r1
 800c4b4:	4630      	mov	r0, r6
 800c4b6:	4639      	mov	r1, r7
 800c4b8:	f7f4 fae8 	bl	8000a8c <__aeabi_dcmplt>
 800c4bc:	2800      	cmp	r0, #0
 800c4be:	f43f af1d 	beq.w	800c2fc <_dtoa_r+0x474>
 800c4c2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800c4c4:	1e7b      	subs	r3, r7, #1
 800c4c6:	9314      	str	r3, [sp, #80]	; 0x50
 800c4c8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800c4cc:	2b30      	cmp	r3, #48	; 0x30
 800c4ce:	d0f8      	beq.n	800c4c2 <_dtoa_r+0x63a>
 800c4d0:	46c2      	mov	sl, r8
 800c4d2:	e03b      	b.n	800c54c <_dtoa_r+0x6c4>
 800c4d4:	4b92      	ldr	r3, [pc, #584]	; (800c720 <_dtoa_r+0x898>)
 800c4d6:	f7f4 f867 	bl	80005a8 <__aeabi_dmul>
 800c4da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c4de:	e7bc      	b.n	800c45a <_dtoa_r+0x5d2>
 800c4e0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c4e4:	9f03      	ldr	r7, [sp, #12]
 800c4e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c4ea:	4640      	mov	r0, r8
 800c4ec:	4649      	mov	r1, r9
 800c4ee:	f7f4 f985 	bl	80007fc <__aeabi_ddiv>
 800c4f2:	f7f4 fb09 	bl	8000b08 <__aeabi_d2iz>
 800c4f6:	4604      	mov	r4, r0
 800c4f8:	f7f3 ffec 	bl	80004d4 <__aeabi_i2d>
 800c4fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c500:	f7f4 f852 	bl	80005a8 <__aeabi_dmul>
 800c504:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800c508:	4602      	mov	r2, r0
 800c50a:	460b      	mov	r3, r1
 800c50c:	4640      	mov	r0, r8
 800c50e:	4649      	mov	r1, r9
 800c510:	f7f3 fe92 	bl	8000238 <__aeabi_dsub>
 800c514:	f807 6b01 	strb.w	r6, [r7], #1
 800c518:	9e03      	ldr	r6, [sp, #12]
 800c51a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800c51e:	1bbe      	subs	r6, r7, r6
 800c520:	45b4      	cmp	ip, r6
 800c522:	4602      	mov	r2, r0
 800c524:	460b      	mov	r3, r1
 800c526:	d136      	bne.n	800c596 <_dtoa_r+0x70e>
 800c528:	f7f3 fe88 	bl	800023c <__adddf3>
 800c52c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c530:	4680      	mov	r8, r0
 800c532:	4689      	mov	r9, r1
 800c534:	f7f4 fac8 	bl	8000ac8 <__aeabi_dcmpgt>
 800c538:	bb58      	cbnz	r0, 800c592 <_dtoa_r+0x70a>
 800c53a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c53e:	4640      	mov	r0, r8
 800c540:	4649      	mov	r1, r9
 800c542:	f7f4 fa99 	bl	8000a78 <__aeabi_dcmpeq>
 800c546:	b108      	cbz	r0, 800c54c <_dtoa_r+0x6c4>
 800c548:	07e1      	lsls	r1, r4, #31
 800c54a:	d422      	bmi.n	800c592 <_dtoa_r+0x70a>
 800c54c:	4628      	mov	r0, r5
 800c54e:	4659      	mov	r1, fp
 800c550:	f000 fbc2 	bl	800ccd8 <_Bfree>
 800c554:	2300      	movs	r3, #0
 800c556:	703b      	strb	r3, [r7, #0]
 800c558:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c55a:	f10a 0001 	add.w	r0, sl, #1
 800c55e:	6018      	str	r0, [r3, #0]
 800c560:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c562:	2b00      	cmp	r3, #0
 800c564:	f43f acdd 	beq.w	800bf22 <_dtoa_r+0x9a>
 800c568:	601f      	str	r7, [r3, #0]
 800c56a:	e4da      	b.n	800bf22 <_dtoa_r+0x9a>
 800c56c:	4627      	mov	r7, r4
 800c56e:	463b      	mov	r3, r7
 800c570:	461f      	mov	r7, r3
 800c572:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c576:	2a39      	cmp	r2, #57	; 0x39
 800c578:	d107      	bne.n	800c58a <_dtoa_r+0x702>
 800c57a:	9a03      	ldr	r2, [sp, #12]
 800c57c:	429a      	cmp	r2, r3
 800c57e:	d1f7      	bne.n	800c570 <_dtoa_r+0x6e8>
 800c580:	9903      	ldr	r1, [sp, #12]
 800c582:	2230      	movs	r2, #48	; 0x30
 800c584:	f108 0801 	add.w	r8, r8, #1
 800c588:	700a      	strb	r2, [r1, #0]
 800c58a:	781a      	ldrb	r2, [r3, #0]
 800c58c:	3201      	adds	r2, #1
 800c58e:	701a      	strb	r2, [r3, #0]
 800c590:	e79e      	b.n	800c4d0 <_dtoa_r+0x648>
 800c592:	46d0      	mov	r8, sl
 800c594:	e7eb      	b.n	800c56e <_dtoa_r+0x6e6>
 800c596:	4b62      	ldr	r3, [pc, #392]	; (800c720 <_dtoa_r+0x898>)
 800c598:	2200      	movs	r2, #0
 800c59a:	f7f4 f805 	bl	80005a8 <__aeabi_dmul>
 800c59e:	2200      	movs	r2, #0
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	4680      	mov	r8, r0
 800c5a4:	4689      	mov	r9, r1
 800c5a6:	f7f4 fa67 	bl	8000a78 <__aeabi_dcmpeq>
 800c5aa:	2800      	cmp	r0, #0
 800c5ac:	d09b      	beq.n	800c4e6 <_dtoa_r+0x65e>
 800c5ae:	e7cd      	b.n	800c54c <_dtoa_r+0x6c4>
 800c5b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c5b2:	2a00      	cmp	r2, #0
 800c5b4:	f000 80d0 	beq.w	800c758 <_dtoa_r+0x8d0>
 800c5b8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c5ba:	2a01      	cmp	r2, #1
 800c5bc:	f300 80b2 	bgt.w	800c724 <_dtoa_r+0x89c>
 800c5c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c5c2:	2a00      	cmp	r2, #0
 800c5c4:	f000 80a6 	beq.w	800c714 <_dtoa_r+0x88c>
 800c5c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c5cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c5ce:	9f06      	ldr	r7, [sp, #24]
 800c5d0:	9a06      	ldr	r2, [sp, #24]
 800c5d2:	441a      	add	r2, r3
 800c5d4:	9206      	str	r2, [sp, #24]
 800c5d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5d8:	2101      	movs	r1, #1
 800c5da:	441a      	add	r2, r3
 800c5dc:	4628      	mov	r0, r5
 800c5de:	9209      	str	r2, [sp, #36]	; 0x24
 800c5e0:	f000 fc30 	bl	800ce44 <__i2b>
 800c5e4:	4606      	mov	r6, r0
 800c5e6:	2f00      	cmp	r7, #0
 800c5e8:	dd0c      	ble.n	800c604 <_dtoa_r+0x77c>
 800c5ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	dd09      	ble.n	800c604 <_dtoa_r+0x77c>
 800c5f0:	42bb      	cmp	r3, r7
 800c5f2:	9a06      	ldr	r2, [sp, #24]
 800c5f4:	bfa8      	it	ge
 800c5f6:	463b      	movge	r3, r7
 800c5f8:	1ad2      	subs	r2, r2, r3
 800c5fa:	9206      	str	r2, [sp, #24]
 800c5fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5fe:	1aff      	subs	r7, r7, r3
 800c600:	1ad3      	subs	r3, r2, r3
 800c602:	9309      	str	r3, [sp, #36]	; 0x24
 800c604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c606:	b1f3      	cbz	r3, 800c646 <_dtoa_r+0x7be>
 800c608:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	f000 80a8 	beq.w	800c760 <_dtoa_r+0x8d8>
 800c610:	2c00      	cmp	r4, #0
 800c612:	dd10      	ble.n	800c636 <_dtoa_r+0x7ae>
 800c614:	4631      	mov	r1, r6
 800c616:	4622      	mov	r2, r4
 800c618:	4628      	mov	r0, r5
 800c61a:	f000 fcd1 	bl	800cfc0 <__pow5mult>
 800c61e:	465a      	mov	r2, fp
 800c620:	4601      	mov	r1, r0
 800c622:	4606      	mov	r6, r0
 800c624:	4628      	mov	r0, r5
 800c626:	f000 fc23 	bl	800ce70 <__multiply>
 800c62a:	4659      	mov	r1, fp
 800c62c:	4680      	mov	r8, r0
 800c62e:	4628      	mov	r0, r5
 800c630:	f000 fb52 	bl	800ccd8 <_Bfree>
 800c634:	46c3      	mov	fp, r8
 800c636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c638:	1b1a      	subs	r2, r3, r4
 800c63a:	d004      	beq.n	800c646 <_dtoa_r+0x7be>
 800c63c:	4659      	mov	r1, fp
 800c63e:	4628      	mov	r0, r5
 800c640:	f000 fcbe 	bl	800cfc0 <__pow5mult>
 800c644:	4683      	mov	fp, r0
 800c646:	2101      	movs	r1, #1
 800c648:	4628      	mov	r0, r5
 800c64a:	f000 fbfb 	bl	800ce44 <__i2b>
 800c64e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c650:	2b00      	cmp	r3, #0
 800c652:	4604      	mov	r4, r0
 800c654:	f340 8086 	ble.w	800c764 <_dtoa_r+0x8dc>
 800c658:	461a      	mov	r2, r3
 800c65a:	4601      	mov	r1, r0
 800c65c:	4628      	mov	r0, r5
 800c65e:	f000 fcaf 	bl	800cfc0 <__pow5mult>
 800c662:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c664:	2b01      	cmp	r3, #1
 800c666:	4604      	mov	r4, r0
 800c668:	dd7f      	ble.n	800c76a <_dtoa_r+0x8e2>
 800c66a:	f04f 0800 	mov.w	r8, #0
 800c66e:	6923      	ldr	r3, [r4, #16]
 800c670:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c674:	6918      	ldr	r0, [r3, #16]
 800c676:	f000 fb97 	bl	800cda8 <__hi0bits>
 800c67a:	f1c0 0020 	rsb	r0, r0, #32
 800c67e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c680:	4418      	add	r0, r3
 800c682:	f010 001f 	ands.w	r0, r0, #31
 800c686:	f000 8092 	beq.w	800c7ae <_dtoa_r+0x926>
 800c68a:	f1c0 0320 	rsb	r3, r0, #32
 800c68e:	2b04      	cmp	r3, #4
 800c690:	f340 808a 	ble.w	800c7a8 <_dtoa_r+0x920>
 800c694:	f1c0 001c 	rsb	r0, r0, #28
 800c698:	9b06      	ldr	r3, [sp, #24]
 800c69a:	4403      	add	r3, r0
 800c69c:	9306      	str	r3, [sp, #24]
 800c69e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6a0:	4403      	add	r3, r0
 800c6a2:	4407      	add	r7, r0
 800c6a4:	9309      	str	r3, [sp, #36]	; 0x24
 800c6a6:	9b06      	ldr	r3, [sp, #24]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	dd05      	ble.n	800c6b8 <_dtoa_r+0x830>
 800c6ac:	4659      	mov	r1, fp
 800c6ae:	461a      	mov	r2, r3
 800c6b0:	4628      	mov	r0, r5
 800c6b2:	f000 fcdf 	bl	800d074 <__lshift>
 800c6b6:	4683      	mov	fp, r0
 800c6b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	dd05      	ble.n	800c6ca <_dtoa_r+0x842>
 800c6be:	4621      	mov	r1, r4
 800c6c0:	461a      	mov	r2, r3
 800c6c2:	4628      	mov	r0, r5
 800c6c4:	f000 fcd6 	bl	800d074 <__lshift>
 800c6c8:	4604      	mov	r4, r0
 800c6ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d070      	beq.n	800c7b2 <_dtoa_r+0x92a>
 800c6d0:	4621      	mov	r1, r4
 800c6d2:	4658      	mov	r0, fp
 800c6d4:	f000 fd3e 	bl	800d154 <__mcmp>
 800c6d8:	2800      	cmp	r0, #0
 800c6da:	da6a      	bge.n	800c7b2 <_dtoa_r+0x92a>
 800c6dc:	2300      	movs	r3, #0
 800c6de:	4659      	mov	r1, fp
 800c6e0:	220a      	movs	r2, #10
 800c6e2:	4628      	mov	r0, r5
 800c6e4:	f000 fb1a 	bl	800cd1c <__multadd>
 800c6e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6ea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c6ee:	4683      	mov	fp, r0
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	f000 8194 	beq.w	800ca1e <_dtoa_r+0xb96>
 800c6f6:	4631      	mov	r1, r6
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	220a      	movs	r2, #10
 800c6fc:	4628      	mov	r0, r5
 800c6fe:	f000 fb0d 	bl	800cd1c <__multadd>
 800c702:	f1b9 0f00 	cmp.w	r9, #0
 800c706:	4606      	mov	r6, r0
 800c708:	f300 8093 	bgt.w	800c832 <_dtoa_r+0x9aa>
 800c70c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c70e:	2b02      	cmp	r3, #2
 800c710:	dc57      	bgt.n	800c7c2 <_dtoa_r+0x93a>
 800c712:	e08e      	b.n	800c832 <_dtoa_r+0x9aa>
 800c714:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c716:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c71a:	e757      	b.n	800c5cc <_dtoa_r+0x744>
 800c71c:	3fe00000 	.word	0x3fe00000
 800c720:	40240000 	.word	0x40240000
 800c724:	9b08      	ldr	r3, [sp, #32]
 800c726:	1e5c      	subs	r4, r3, #1
 800c728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c72a:	42a3      	cmp	r3, r4
 800c72c:	bfbf      	itttt	lt
 800c72e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c730:	940a      	strlt	r4, [sp, #40]	; 0x28
 800c732:	1ae2      	sublt	r2, r4, r3
 800c734:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c736:	bfb6      	itet	lt
 800c738:	189b      	addlt	r3, r3, r2
 800c73a:	1b1c      	subge	r4, r3, r4
 800c73c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c73e:	9b08      	ldr	r3, [sp, #32]
 800c740:	bfb8      	it	lt
 800c742:	2400      	movlt	r4, #0
 800c744:	2b00      	cmp	r3, #0
 800c746:	bfb9      	ittee	lt
 800c748:	9b06      	ldrlt	r3, [sp, #24]
 800c74a:	9a08      	ldrlt	r2, [sp, #32]
 800c74c:	9f06      	ldrge	r7, [sp, #24]
 800c74e:	9b08      	ldrge	r3, [sp, #32]
 800c750:	bfbc      	itt	lt
 800c752:	1a9f      	sublt	r7, r3, r2
 800c754:	2300      	movlt	r3, #0
 800c756:	e73b      	b.n	800c5d0 <_dtoa_r+0x748>
 800c758:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c75a:	9f06      	ldr	r7, [sp, #24]
 800c75c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c75e:	e742      	b.n	800c5e6 <_dtoa_r+0x75e>
 800c760:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c762:	e76b      	b.n	800c63c <_dtoa_r+0x7b4>
 800c764:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c766:	2b01      	cmp	r3, #1
 800c768:	dc19      	bgt.n	800c79e <_dtoa_r+0x916>
 800c76a:	9b04      	ldr	r3, [sp, #16]
 800c76c:	b9bb      	cbnz	r3, 800c79e <_dtoa_r+0x916>
 800c76e:	9b05      	ldr	r3, [sp, #20]
 800c770:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c774:	b99b      	cbnz	r3, 800c79e <_dtoa_r+0x916>
 800c776:	9b05      	ldr	r3, [sp, #20]
 800c778:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c77c:	0d1b      	lsrs	r3, r3, #20
 800c77e:	051b      	lsls	r3, r3, #20
 800c780:	b183      	cbz	r3, 800c7a4 <_dtoa_r+0x91c>
 800c782:	9b06      	ldr	r3, [sp, #24]
 800c784:	3301      	adds	r3, #1
 800c786:	9306      	str	r3, [sp, #24]
 800c788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c78a:	3301      	adds	r3, #1
 800c78c:	9309      	str	r3, [sp, #36]	; 0x24
 800c78e:	f04f 0801 	mov.w	r8, #1
 800c792:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c794:	2b00      	cmp	r3, #0
 800c796:	f47f af6a 	bne.w	800c66e <_dtoa_r+0x7e6>
 800c79a:	2001      	movs	r0, #1
 800c79c:	e76f      	b.n	800c67e <_dtoa_r+0x7f6>
 800c79e:	f04f 0800 	mov.w	r8, #0
 800c7a2:	e7f6      	b.n	800c792 <_dtoa_r+0x90a>
 800c7a4:	4698      	mov	r8, r3
 800c7a6:	e7f4      	b.n	800c792 <_dtoa_r+0x90a>
 800c7a8:	f43f af7d 	beq.w	800c6a6 <_dtoa_r+0x81e>
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	301c      	adds	r0, #28
 800c7b0:	e772      	b.n	800c698 <_dtoa_r+0x810>
 800c7b2:	9b08      	ldr	r3, [sp, #32]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	dc36      	bgt.n	800c826 <_dtoa_r+0x99e>
 800c7b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c7ba:	2b02      	cmp	r3, #2
 800c7bc:	dd33      	ble.n	800c826 <_dtoa_r+0x99e>
 800c7be:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c7c2:	f1b9 0f00 	cmp.w	r9, #0
 800c7c6:	d10d      	bne.n	800c7e4 <_dtoa_r+0x95c>
 800c7c8:	4621      	mov	r1, r4
 800c7ca:	464b      	mov	r3, r9
 800c7cc:	2205      	movs	r2, #5
 800c7ce:	4628      	mov	r0, r5
 800c7d0:	f000 faa4 	bl	800cd1c <__multadd>
 800c7d4:	4601      	mov	r1, r0
 800c7d6:	4604      	mov	r4, r0
 800c7d8:	4658      	mov	r0, fp
 800c7da:	f000 fcbb 	bl	800d154 <__mcmp>
 800c7de:	2800      	cmp	r0, #0
 800c7e0:	f73f adb8 	bgt.w	800c354 <_dtoa_r+0x4cc>
 800c7e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c7e6:	9f03      	ldr	r7, [sp, #12]
 800c7e8:	ea6f 0a03 	mvn.w	sl, r3
 800c7ec:	f04f 0800 	mov.w	r8, #0
 800c7f0:	4621      	mov	r1, r4
 800c7f2:	4628      	mov	r0, r5
 800c7f4:	f000 fa70 	bl	800ccd8 <_Bfree>
 800c7f8:	2e00      	cmp	r6, #0
 800c7fa:	f43f aea7 	beq.w	800c54c <_dtoa_r+0x6c4>
 800c7fe:	f1b8 0f00 	cmp.w	r8, #0
 800c802:	d005      	beq.n	800c810 <_dtoa_r+0x988>
 800c804:	45b0      	cmp	r8, r6
 800c806:	d003      	beq.n	800c810 <_dtoa_r+0x988>
 800c808:	4641      	mov	r1, r8
 800c80a:	4628      	mov	r0, r5
 800c80c:	f000 fa64 	bl	800ccd8 <_Bfree>
 800c810:	4631      	mov	r1, r6
 800c812:	4628      	mov	r0, r5
 800c814:	f000 fa60 	bl	800ccd8 <_Bfree>
 800c818:	e698      	b.n	800c54c <_dtoa_r+0x6c4>
 800c81a:	2400      	movs	r4, #0
 800c81c:	4626      	mov	r6, r4
 800c81e:	e7e1      	b.n	800c7e4 <_dtoa_r+0x95c>
 800c820:	46c2      	mov	sl, r8
 800c822:	4626      	mov	r6, r4
 800c824:	e596      	b.n	800c354 <_dtoa_r+0x4cc>
 800c826:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c828:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	f000 80fd 	beq.w	800ca2c <_dtoa_r+0xba4>
 800c832:	2f00      	cmp	r7, #0
 800c834:	dd05      	ble.n	800c842 <_dtoa_r+0x9ba>
 800c836:	4631      	mov	r1, r6
 800c838:	463a      	mov	r2, r7
 800c83a:	4628      	mov	r0, r5
 800c83c:	f000 fc1a 	bl	800d074 <__lshift>
 800c840:	4606      	mov	r6, r0
 800c842:	f1b8 0f00 	cmp.w	r8, #0
 800c846:	d05c      	beq.n	800c902 <_dtoa_r+0xa7a>
 800c848:	6871      	ldr	r1, [r6, #4]
 800c84a:	4628      	mov	r0, r5
 800c84c:	f000 fa04 	bl	800cc58 <_Balloc>
 800c850:	4607      	mov	r7, r0
 800c852:	b928      	cbnz	r0, 800c860 <_dtoa_r+0x9d8>
 800c854:	4b80      	ldr	r3, [pc, #512]	; (800ca58 <_dtoa_r+0xbd0>)
 800c856:	4602      	mov	r2, r0
 800c858:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c85c:	f7ff bb28 	b.w	800beb0 <_dtoa_r+0x28>
 800c860:	6932      	ldr	r2, [r6, #16]
 800c862:	3202      	adds	r2, #2
 800c864:	0092      	lsls	r2, r2, #2
 800c866:	f106 010c 	add.w	r1, r6, #12
 800c86a:	300c      	adds	r0, #12
 800c86c:	f7fe fbb9 	bl	800afe2 <memcpy>
 800c870:	2201      	movs	r2, #1
 800c872:	4639      	mov	r1, r7
 800c874:	4628      	mov	r0, r5
 800c876:	f000 fbfd 	bl	800d074 <__lshift>
 800c87a:	9b03      	ldr	r3, [sp, #12]
 800c87c:	3301      	adds	r3, #1
 800c87e:	9308      	str	r3, [sp, #32]
 800c880:	9b03      	ldr	r3, [sp, #12]
 800c882:	444b      	add	r3, r9
 800c884:	930a      	str	r3, [sp, #40]	; 0x28
 800c886:	9b04      	ldr	r3, [sp, #16]
 800c888:	f003 0301 	and.w	r3, r3, #1
 800c88c:	46b0      	mov	r8, r6
 800c88e:	9309      	str	r3, [sp, #36]	; 0x24
 800c890:	4606      	mov	r6, r0
 800c892:	9b08      	ldr	r3, [sp, #32]
 800c894:	4621      	mov	r1, r4
 800c896:	3b01      	subs	r3, #1
 800c898:	4658      	mov	r0, fp
 800c89a:	9304      	str	r3, [sp, #16]
 800c89c:	f7ff fa6a 	bl	800bd74 <quorem>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	3330      	adds	r3, #48	; 0x30
 800c8a4:	9006      	str	r0, [sp, #24]
 800c8a6:	4641      	mov	r1, r8
 800c8a8:	4658      	mov	r0, fp
 800c8aa:	930b      	str	r3, [sp, #44]	; 0x2c
 800c8ac:	f000 fc52 	bl	800d154 <__mcmp>
 800c8b0:	4632      	mov	r2, r6
 800c8b2:	4681      	mov	r9, r0
 800c8b4:	4621      	mov	r1, r4
 800c8b6:	4628      	mov	r0, r5
 800c8b8:	f000 fc68 	bl	800d18c <__mdiff>
 800c8bc:	68c2      	ldr	r2, [r0, #12]
 800c8be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8c0:	4607      	mov	r7, r0
 800c8c2:	bb02      	cbnz	r2, 800c906 <_dtoa_r+0xa7e>
 800c8c4:	4601      	mov	r1, r0
 800c8c6:	4658      	mov	r0, fp
 800c8c8:	f000 fc44 	bl	800d154 <__mcmp>
 800c8cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8ce:	4602      	mov	r2, r0
 800c8d0:	4639      	mov	r1, r7
 800c8d2:	4628      	mov	r0, r5
 800c8d4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800c8d8:	f000 f9fe 	bl	800ccd8 <_Bfree>
 800c8dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c8de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c8e0:	9f08      	ldr	r7, [sp, #32]
 800c8e2:	ea43 0102 	orr.w	r1, r3, r2
 800c8e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8e8:	430b      	orrs	r3, r1
 800c8ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8ec:	d10d      	bne.n	800c90a <_dtoa_r+0xa82>
 800c8ee:	2b39      	cmp	r3, #57	; 0x39
 800c8f0:	d029      	beq.n	800c946 <_dtoa_r+0xabe>
 800c8f2:	f1b9 0f00 	cmp.w	r9, #0
 800c8f6:	dd01      	ble.n	800c8fc <_dtoa_r+0xa74>
 800c8f8:	9b06      	ldr	r3, [sp, #24]
 800c8fa:	3331      	adds	r3, #49	; 0x31
 800c8fc:	9a04      	ldr	r2, [sp, #16]
 800c8fe:	7013      	strb	r3, [r2, #0]
 800c900:	e776      	b.n	800c7f0 <_dtoa_r+0x968>
 800c902:	4630      	mov	r0, r6
 800c904:	e7b9      	b.n	800c87a <_dtoa_r+0x9f2>
 800c906:	2201      	movs	r2, #1
 800c908:	e7e2      	b.n	800c8d0 <_dtoa_r+0xa48>
 800c90a:	f1b9 0f00 	cmp.w	r9, #0
 800c90e:	db06      	blt.n	800c91e <_dtoa_r+0xa96>
 800c910:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c912:	ea41 0909 	orr.w	r9, r1, r9
 800c916:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c918:	ea59 0101 	orrs.w	r1, r9, r1
 800c91c:	d120      	bne.n	800c960 <_dtoa_r+0xad8>
 800c91e:	2a00      	cmp	r2, #0
 800c920:	ddec      	ble.n	800c8fc <_dtoa_r+0xa74>
 800c922:	4659      	mov	r1, fp
 800c924:	2201      	movs	r2, #1
 800c926:	4628      	mov	r0, r5
 800c928:	9308      	str	r3, [sp, #32]
 800c92a:	f000 fba3 	bl	800d074 <__lshift>
 800c92e:	4621      	mov	r1, r4
 800c930:	4683      	mov	fp, r0
 800c932:	f000 fc0f 	bl	800d154 <__mcmp>
 800c936:	2800      	cmp	r0, #0
 800c938:	9b08      	ldr	r3, [sp, #32]
 800c93a:	dc02      	bgt.n	800c942 <_dtoa_r+0xaba>
 800c93c:	d1de      	bne.n	800c8fc <_dtoa_r+0xa74>
 800c93e:	07da      	lsls	r2, r3, #31
 800c940:	d5dc      	bpl.n	800c8fc <_dtoa_r+0xa74>
 800c942:	2b39      	cmp	r3, #57	; 0x39
 800c944:	d1d8      	bne.n	800c8f8 <_dtoa_r+0xa70>
 800c946:	9a04      	ldr	r2, [sp, #16]
 800c948:	2339      	movs	r3, #57	; 0x39
 800c94a:	7013      	strb	r3, [r2, #0]
 800c94c:	463b      	mov	r3, r7
 800c94e:	461f      	mov	r7, r3
 800c950:	3b01      	subs	r3, #1
 800c952:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800c956:	2a39      	cmp	r2, #57	; 0x39
 800c958:	d050      	beq.n	800c9fc <_dtoa_r+0xb74>
 800c95a:	3201      	adds	r2, #1
 800c95c:	701a      	strb	r2, [r3, #0]
 800c95e:	e747      	b.n	800c7f0 <_dtoa_r+0x968>
 800c960:	2a00      	cmp	r2, #0
 800c962:	dd03      	ble.n	800c96c <_dtoa_r+0xae4>
 800c964:	2b39      	cmp	r3, #57	; 0x39
 800c966:	d0ee      	beq.n	800c946 <_dtoa_r+0xabe>
 800c968:	3301      	adds	r3, #1
 800c96a:	e7c7      	b.n	800c8fc <_dtoa_r+0xa74>
 800c96c:	9a08      	ldr	r2, [sp, #32]
 800c96e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c970:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c974:	428a      	cmp	r2, r1
 800c976:	d02a      	beq.n	800c9ce <_dtoa_r+0xb46>
 800c978:	4659      	mov	r1, fp
 800c97a:	2300      	movs	r3, #0
 800c97c:	220a      	movs	r2, #10
 800c97e:	4628      	mov	r0, r5
 800c980:	f000 f9cc 	bl	800cd1c <__multadd>
 800c984:	45b0      	cmp	r8, r6
 800c986:	4683      	mov	fp, r0
 800c988:	f04f 0300 	mov.w	r3, #0
 800c98c:	f04f 020a 	mov.w	r2, #10
 800c990:	4641      	mov	r1, r8
 800c992:	4628      	mov	r0, r5
 800c994:	d107      	bne.n	800c9a6 <_dtoa_r+0xb1e>
 800c996:	f000 f9c1 	bl	800cd1c <__multadd>
 800c99a:	4680      	mov	r8, r0
 800c99c:	4606      	mov	r6, r0
 800c99e:	9b08      	ldr	r3, [sp, #32]
 800c9a0:	3301      	adds	r3, #1
 800c9a2:	9308      	str	r3, [sp, #32]
 800c9a4:	e775      	b.n	800c892 <_dtoa_r+0xa0a>
 800c9a6:	f000 f9b9 	bl	800cd1c <__multadd>
 800c9aa:	4631      	mov	r1, r6
 800c9ac:	4680      	mov	r8, r0
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	220a      	movs	r2, #10
 800c9b2:	4628      	mov	r0, r5
 800c9b4:	f000 f9b2 	bl	800cd1c <__multadd>
 800c9b8:	4606      	mov	r6, r0
 800c9ba:	e7f0      	b.n	800c99e <_dtoa_r+0xb16>
 800c9bc:	f1b9 0f00 	cmp.w	r9, #0
 800c9c0:	9a03      	ldr	r2, [sp, #12]
 800c9c2:	bfcc      	ite	gt
 800c9c4:	464f      	movgt	r7, r9
 800c9c6:	2701      	movle	r7, #1
 800c9c8:	4417      	add	r7, r2
 800c9ca:	f04f 0800 	mov.w	r8, #0
 800c9ce:	4659      	mov	r1, fp
 800c9d0:	2201      	movs	r2, #1
 800c9d2:	4628      	mov	r0, r5
 800c9d4:	9308      	str	r3, [sp, #32]
 800c9d6:	f000 fb4d 	bl	800d074 <__lshift>
 800c9da:	4621      	mov	r1, r4
 800c9dc:	4683      	mov	fp, r0
 800c9de:	f000 fbb9 	bl	800d154 <__mcmp>
 800c9e2:	2800      	cmp	r0, #0
 800c9e4:	dcb2      	bgt.n	800c94c <_dtoa_r+0xac4>
 800c9e6:	d102      	bne.n	800c9ee <_dtoa_r+0xb66>
 800c9e8:	9b08      	ldr	r3, [sp, #32]
 800c9ea:	07db      	lsls	r3, r3, #31
 800c9ec:	d4ae      	bmi.n	800c94c <_dtoa_r+0xac4>
 800c9ee:	463b      	mov	r3, r7
 800c9f0:	461f      	mov	r7, r3
 800c9f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c9f6:	2a30      	cmp	r2, #48	; 0x30
 800c9f8:	d0fa      	beq.n	800c9f0 <_dtoa_r+0xb68>
 800c9fa:	e6f9      	b.n	800c7f0 <_dtoa_r+0x968>
 800c9fc:	9a03      	ldr	r2, [sp, #12]
 800c9fe:	429a      	cmp	r2, r3
 800ca00:	d1a5      	bne.n	800c94e <_dtoa_r+0xac6>
 800ca02:	f10a 0a01 	add.w	sl, sl, #1
 800ca06:	2331      	movs	r3, #49	; 0x31
 800ca08:	e779      	b.n	800c8fe <_dtoa_r+0xa76>
 800ca0a:	4b14      	ldr	r3, [pc, #80]	; (800ca5c <_dtoa_r+0xbd4>)
 800ca0c:	f7ff baa7 	b.w	800bf5e <_dtoa_r+0xd6>
 800ca10:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	f47f aa80 	bne.w	800bf18 <_dtoa_r+0x90>
 800ca18:	4b11      	ldr	r3, [pc, #68]	; (800ca60 <_dtoa_r+0xbd8>)
 800ca1a:	f7ff baa0 	b.w	800bf5e <_dtoa_r+0xd6>
 800ca1e:	f1b9 0f00 	cmp.w	r9, #0
 800ca22:	dc03      	bgt.n	800ca2c <_dtoa_r+0xba4>
 800ca24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ca26:	2b02      	cmp	r3, #2
 800ca28:	f73f aecb 	bgt.w	800c7c2 <_dtoa_r+0x93a>
 800ca2c:	9f03      	ldr	r7, [sp, #12]
 800ca2e:	4621      	mov	r1, r4
 800ca30:	4658      	mov	r0, fp
 800ca32:	f7ff f99f 	bl	800bd74 <quorem>
 800ca36:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ca3a:	f807 3b01 	strb.w	r3, [r7], #1
 800ca3e:	9a03      	ldr	r2, [sp, #12]
 800ca40:	1aba      	subs	r2, r7, r2
 800ca42:	4591      	cmp	r9, r2
 800ca44:	ddba      	ble.n	800c9bc <_dtoa_r+0xb34>
 800ca46:	4659      	mov	r1, fp
 800ca48:	2300      	movs	r3, #0
 800ca4a:	220a      	movs	r2, #10
 800ca4c:	4628      	mov	r0, r5
 800ca4e:	f000 f965 	bl	800cd1c <__multadd>
 800ca52:	4683      	mov	fp, r0
 800ca54:	e7eb      	b.n	800ca2e <_dtoa_r+0xba6>
 800ca56:	bf00      	nop
 800ca58:	0800e7c8 	.word	0x0800e7c8
 800ca5c:	0800e68c 	.word	0x0800e68c
 800ca60:	0800e760 	.word	0x0800e760

0800ca64 <__sflush_r>:
 800ca64:	898a      	ldrh	r2, [r1, #12]
 800ca66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca68:	4605      	mov	r5, r0
 800ca6a:	0710      	lsls	r0, r2, #28
 800ca6c:	460c      	mov	r4, r1
 800ca6e:	d457      	bmi.n	800cb20 <__sflush_r+0xbc>
 800ca70:	684b      	ldr	r3, [r1, #4]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	dc04      	bgt.n	800ca80 <__sflush_r+0x1c>
 800ca76:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	dc01      	bgt.n	800ca80 <__sflush_r+0x1c>
 800ca7c:	2000      	movs	r0, #0
 800ca7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ca82:	2e00      	cmp	r6, #0
 800ca84:	d0fa      	beq.n	800ca7c <__sflush_r+0x18>
 800ca86:	2300      	movs	r3, #0
 800ca88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ca8c:	682f      	ldr	r7, [r5, #0]
 800ca8e:	602b      	str	r3, [r5, #0]
 800ca90:	d032      	beq.n	800caf8 <__sflush_r+0x94>
 800ca92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ca94:	89a3      	ldrh	r3, [r4, #12]
 800ca96:	075a      	lsls	r2, r3, #29
 800ca98:	d505      	bpl.n	800caa6 <__sflush_r+0x42>
 800ca9a:	6863      	ldr	r3, [r4, #4]
 800ca9c:	1ac0      	subs	r0, r0, r3
 800ca9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800caa0:	b10b      	cbz	r3, 800caa6 <__sflush_r+0x42>
 800caa2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800caa4:	1ac0      	subs	r0, r0, r3
 800caa6:	2300      	movs	r3, #0
 800caa8:	4602      	mov	r2, r0
 800caaa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800caac:	6a21      	ldr	r1, [r4, #32]
 800caae:	4628      	mov	r0, r5
 800cab0:	47b0      	blx	r6
 800cab2:	1c43      	adds	r3, r0, #1
 800cab4:	89a3      	ldrh	r3, [r4, #12]
 800cab6:	d106      	bne.n	800cac6 <__sflush_r+0x62>
 800cab8:	6829      	ldr	r1, [r5, #0]
 800caba:	291d      	cmp	r1, #29
 800cabc:	d82c      	bhi.n	800cb18 <__sflush_r+0xb4>
 800cabe:	4a29      	ldr	r2, [pc, #164]	; (800cb64 <__sflush_r+0x100>)
 800cac0:	40ca      	lsrs	r2, r1
 800cac2:	07d6      	lsls	r6, r2, #31
 800cac4:	d528      	bpl.n	800cb18 <__sflush_r+0xb4>
 800cac6:	2200      	movs	r2, #0
 800cac8:	6062      	str	r2, [r4, #4]
 800caca:	04d9      	lsls	r1, r3, #19
 800cacc:	6922      	ldr	r2, [r4, #16]
 800cace:	6022      	str	r2, [r4, #0]
 800cad0:	d504      	bpl.n	800cadc <__sflush_r+0x78>
 800cad2:	1c42      	adds	r2, r0, #1
 800cad4:	d101      	bne.n	800cada <__sflush_r+0x76>
 800cad6:	682b      	ldr	r3, [r5, #0]
 800cad8:	b903      	cbnz	r3, 800cadc <__sflush_r+0x78>
 800cada:	6560      	str	r0, [r4, #84]	; 0x54
 800cadc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cade:	602f      	str	r7, [r5, #0]
 800cae0:	2900      	cmp	r1, #0
 800cae2:	d0cb      	beq.n	800ca7c <__sflush_r+0x18>
 800cae4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cae8:	4299      	cmp	r1, r3
 800caea:	d002      	beq.n	800caf2 <__sflush_r+0x8e>
 800caec:	4628      	mov	r0, r5
 800caee:	f000 fc45 	bl	800d37c <_free_r>
 800caf2:	2000      	movs	r0, #0
 800caf4:	6360      	str	r0, [r4, #52]	; 0x34
 800caf6:	e7c2      	b.n	800ca7e <__sflush_r+0x1a>
 800caf8:	6a21      	ldr	r1, [r4, #32]
 800cafa:	2301      	movs	r3, #1
 800cafc:	4628      	mov	r0, r5
 800cafe:	47b0      	blx	r6
 800cb00:	1c41      	adds	r1, r0, #1
 800cb02:	d1c7      	bne.n	800ca94 <__sflush_r+0x30>
 800cb04:	682b      	ldr	r3, [r5, #0]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d0c4      	beq.n	800ca94 <__sflush_r+0x30>
 800cb0a:	2b1d      	cmp	r3, #29
 800cb0c:	d001      	beq.n	800cb12 <__sflush_r+0xae>
 800cb0e:	2b16      	cmp	r3, #22
 800cb10:	d101      	bne.n	800cb16 <__sflush_r+0xb2>
 800cb12:	602f      	str	r7, [r5, #0]
 800cb14:	e7b2      	b.n	800ca7c <__sflush_r+0x18>
 800cb16:	89a3      	ldrh	r3, [r4, #12]
 800cb18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb1c:	81a3      	strh	r3, [r4, #12]
 800cb1e:	e7ae      	b.n	800ca7e <__sflush_r+0x1a>
 800cb20:	690f      	ldr	r7, [r1, #16]
 800cb22:	2f00      	cmp	r7, #0
 800cb24:	d0aa      	beq.n	800ca7c <__sflush_r+0x18>
 800cb26:	0793      	lsls	r3, r2, #30
 800cb28:	680e      	ldr	r6, [r1, #0]
 800cb2a:	bf08      	it	eq
 800cb2c:	694b      	ldreq	r3, [r1, #20]
 800cb2e:	600f      	str	r7, [r1, #0]
 800cb30:	bf18      	it	ne
 800cb32:	2300      	movne	r3, #0
 800cb34:	1bf6      	subs	r6, r6, r7
 800cb36:	608b      	str	r3, [r1, #8]
 800cb38:	2e00      	cmp	r6, #0
 800cb3a:	dd9f      	ble.n	800ca7c <__sflush_r+0x18>
 800cb3c:	6a21      	ldr	r1, [r4, #32]
 800cb3e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800cb42:	4633      	mov	r3, r6
 800cb44:	463a      	mov	r2, r7
 800cb46:	4628      	mov	r0, r5
 800cb48:	47e0      	blx	ip
 800cb4a:	2800      	cmp	r0, #0
 800cb4c:	dc06      	bgt.n	800cb5c <__sflush_r+0xf8>
 800cb4e:	89a3      	ldrh	r3, [r4, #12]
 800cb50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb54:	81a3      	strh	r3, [r4, #12]
 800cb56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb5a:	e790      	b.n	800ca7e <__sflush_r+0x1a>
 800cb5c:	4407      	add	r7, r0
 800cb5e:	1a36      	subs	r6, r6, r0
 800cb60:	e7ea      	b.n	800cb38 <__sflush_r+0xd4>
 800cb62:	bf00      	nop
 800cb64:	20400001 	.word	0x20400001

0800cb68 <_fflush_r>:
 800cb68:	b538      	push	{r3, r4, r5, lr}
 800cb6a:	690b      	ldr	r3, [r1, #16]
 800cb6c:	4605      	mov	r5, r0
 800cb6e:	460c      	mov	r4, r1
 800cb70:	b913      	cbnz	r3, 800cb78 <_fflush_r+0x10>
 800cb72:	2500      	movs	r5, #0
 800cb74:	4628      	mov	r0, r5
 800cb76:	bd38      	pop	{r3, r4, r5, pc}
 800cb78:	b118      	cbz	r0, 800cb82 <_fflush_r+0x1a>
 800cb7a:	6983      	ldr	r3, [r0, #24]
 800cb7c:	b90b      	cbnz	r3, 800cb82 <_fflush_r+0x1a>
 800cb7e:	f7fe f96b 	bl	800ae58 <__sinit>
 800cb82:	4b14      	ldr	r3, [pc, #80]	; (800cbd4 <_fflush_r+0x6c>)
 800cb84:	429c      	cmp	r4, r3
 800cb86:	d11b      	bne.n	800cbc0 <_fflush_r+0x58>
 800cb88:	686c      	ldr	r4, [r5, #4]
 800cb8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d0ef      	beq.n	800cb72 <_fflush_r+0xa>
 800cb92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cb94:	07d0      	lsls	r0, r2, #31
 800cb96:	d404      	bmi.n	800cba2 <_fflush_r+0x3a>
 800cb98:	0599      	lsls	r1, r3, #22
 800cb9a:	d402      	bmi.n	800cba2 <_fflush_r+0x3a>
 800cb9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb9e:	f7fe fa1e 	bl	800afde <__retarget_lock_acquire_recursive>
 800cba2:	4628      	mov	r0, r5
 800cba4:	4621      	mov	r1, r4
 800cba6:	f7ff ff5d 	bl	800ca64 <__sflush_r>
 800cbaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cbac:	07da      	lsls	r2, r3, #31
 800cbae:	4605      	mov	r5, r0
 800cbb0:	d4e0      	bmi.n	800cb74 <_fflush_r+0xc>
 800cbb2:	89a3      	ldrh	r3, [r4, #12]
 800cbb4:	059b      	lsls	r3, r3, #22
 800cbb6:	d4dd      	bmi.n	800cb74 <_fflush_r+0xc>
 800cbb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbba:	f7fe fa11 	bl	800afe0 <__retarget_lock_release_recursive>
 800cbbe:	e7d9      	b.n	800cb74 <_fflush_r+0xc>
 800cbc0:	4b05      	ldr	r3, [pc, #20]	; (800cbd8 <_fflush_r+0x70>)
 800cbc2:	429c      	cmp	r4, r3
 800cbc4:	d101      	bne.n	800cbca <_fflush_r+0x62>
 800cbc6:	68ac      	ldr	r4, [r5, #8]
 800cbc8:	e7df      	b.n	800cb8a <_fflush_r+0x22>
 800cbca:	4b04      	ldr	r3, [pc, #16]	; (800cbdc <_fflush_r+0x74>)
 800cbcc:	429c      	cmp	r4, r3
 800cbce:	bf08      	it	eq
 800cbd0:	68ec      	ldreq	r4, [r5, #12]
 800cbd2:	e7da      	b.n	800cb8a <_fflush_r+0x22>
 800cbd4:	0800e638 	.word	0x0800e638
 800cbd8:	0800e658 	.word	0x0800e658
 800cbdc:	0800e618 	.word	0x0800e618

0800cbe0 <fiprintf>:
 800cbe0:	b40e      	push	{r1, r2, r3}
 800cbe2:	b503      	push	{r0, r1, lr}
 800cbe4:	4601      	mov	r1, r0
 800cbe6:	ab03      	add	r3, sp, #12
 800cbe8:	4805      	ldr	r0, [pc, #20]	; (800cc00 <fiprintf+0x20>)
 800cbea:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbee:	6800      	ldr	r0, [r0, #0]
 800cbf0:	9301      	str	r3, [sp, #4]
 800cbf2:	f000 fd91 	bl	800d718 <_vfiprintf_r>
 800cbf6:	b002      	add	sp, #8
 800cbf8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbfc:	b003      	add	sp, #12
 800cbfe:	4770      	bx	lr
 800cc00:	20000010 	.word	0x20000010

0800cc04 <_localeconv_r>:
 800cc04:	4800      	ldr	r0, [pc, #0]	; (800cc08 <_localeconv_r+0x4>)
 800cc06:	4770      	bx	lr
 800cc08:	20000164 	.word	0x20000164

0800cc0c <_lseek_r>:
 800cc0c:	b538      	push	{r3, r4, r5, lr}
 800cc0e:	4d07      	ldr	r5, [pc, #28]	; (800cc2c <_lseek_r+0x20>)
 800cc10:	4604      	mov	r4, r0
 800cc12:	4608      	mov	r0, r1
 800cc14:	4611      	mov	r1, r2
 800cc16:	2200      	movs	r2, #0
 800cc18:	602a      	str	r2, [r5, #0]
 800cc1a:	461a      	mov	r2, r3
 800cc1c:	f7f5 f880 	bl	8001d20 <_lseek>
 800cc20:	1c43      	adds	r3, r0, #1
 800cc22:	d102      	bne.n	800cc2a <_lseek_r+0x1e>
 800cc24:	682b      	ldr	r3, [r5, #0]
 800cc26:	b103      	cbz	r3, 800cc2a <_lseek_r+0x1e>
 800cc28:	6023      	str	r3, [r4, #0]
 800cc2a:	bd38      	pop	{r3, r4, r5, pc}
 800cc2c:	20001d04 	.word	0x20001d04

0800cc30 <malloc>:
 800cc30:	4b02      	ldr	r3, [pc, #8]	; (800cc3c <malloc+0xc>)
 800cc32:	4601      	mov	r1, r0
 800cc34:	6818      	ldr	r0, [r3, #0]
 800cc36:	f7fe ba0b 	b.w	800b050 <_malloc_r>
 800cc3a:	bf00      	nop
 800cc3c:	20000010 	.word	0x20000010

0800cc40 <__malloc_lock>:
 800cc40:	4801      	ldr	r0, [pc, #4]	; (800cc48 <__malloc_lock+0x8>)
 800cc42:	f7fe b9cc 	b.w	800afde <__retarget_lock_acquire_recursive>
 800cc46:	bf00      	nop
 800cc48:	20001cf8 	.word	0x20001cf8

0800cc4c <__malloc_unlock>:
 800cc4c:	4801      	ldr	r0, [pc, #4]	; (800cc54 <__malloc_unlock+0x8>)
 800cc4e:	f7fe b9c7 	b.w	800afe0 <__retarget_lock_release_recursive>
 800cc52:	bf00      	nop
 800cc54:	20001cf8 	.word	0x20001cf8

0800cc58 <_Balloc>:
 800cc58:	b570      	push	{r4, r5, r6, lr}
 800cc5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cc5c:	4604      	mov	r4, r0
 800cc5e:	460d      	mov	r5, r1
 800cc60:	b976      	cbnz	r6, 800cc80 <_Balloc+0x28>
 800cc62:	2010      	movs	r0, #16
 800cc64:	f7ff ffe4 	bl	800cc30 <malloc>
 800cc68:	4602      	mov	r2, r0
 800cc6a:	6260      	str	r0, [r4, #36]	; 0x24
 800cc6c:	b920      	cbnz	r0, 800cc78 <_Balloc+0x20>
 800cc6e:	4b18      	ldr	r3, [pc, #96]	; (800ccd0 <_Balloc+0x78>)
 800cc70:	4818      	ldr	r0, [pc, #96]	; (800ccd4 <_Balloc+0x7c>)
 800cc72:	2166      	movs	r1, #102	; 0x66
 800cc74:	f7ff f850 	bl	800bd18 <__assert_func>
 800cc78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc7c:	6006      	str	r6, [r0, #0]
 800cc7e:	60c6      	str	r6, [r0, #12]
 800cc80:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cc82:	68f3      	ldr	r3, [r6, #12]
 800cc84:	b183      	cbz	r3, 800cca8 <_Balloc+0x50>
 800cc86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc88:	68db      	ldr	r3, [r3, #12]
 800cc8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cc8e:	b9b8      	cbnz	r0, 800ccc0 <_Balloc+0x68>
 800cc90:	2101      	movs	r1, #1
 800cc92:	fa01 f605 	lsl.w	r6, r1, r5
 800cc96:	1d72      	adds	r2, r6, #5
 800cc98:	0092      	lsls	r2, r2, #2
 800cc9a:	4620      	mov	r0, r4
 800cc9c:	f000 fb5a 	bl	800d354 <_calloc_r>
 800cca0:	b160      	cbz	r0, 800ccbc <_Balloc+0x64>
 800cca2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cca6:	e00e      	b.n	800ccc6 <_Balloc+0x6e>
 800cca8:	2221      	movs	r2, #33	; 0x21
 800ccaa:	2104      	movs	r1, #4
 800ccac:	4620      	mov	r0, r4
 800ccae:	f000 fb51 	bl	800d354 <_calloc_r>
 800ccb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ccb4:	60f0      	str	r0, [r6, #12]
 800ccb6:	68db      	ldr	r3, [r3, #12]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d1e4      	bne.n	800cc86 <_Balloc+0x2e>
 800ccbc:	2000      	movs	r0, #0
 800ccbe:	bd70      	pop	{r4, r5, r6, pc}
 800ccc0:	6802      	ldr	r2, [r0, #0]
 800ccc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cccc:	e7f7      	b.n	800ccbe <_Balloc+0x66>
 800ccce:	bf00      	nop
 800ccd0:	0800e6b0 	.word	0x0800e6b0
 800ccd4:	0800e7d9 	.word	0x0800e7d9

0800ccd8 <_Bfree>:
 800ccd8:	b570      	push	{r4, r5, r6, lr}
 800ccda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ccdc:	4605      	mov	r5, r0
 800ccde:	460c      	mov	r4, r1
 800cce0:	b976      	cbnz	r6, 800cd00 <_Bfree+0x28>
 800cce2:	2010      	movs	r0, #16
 800cce4:	f7ff ffa4 	bl	800cc30 <malloc>
 800cce8:	4602      	mov	r2, r0
 800ccea:	6268      	str	r0, [r5, #36]	; 0x24
 800ccec:	b920      	cbnz	r0, 800ccf8 <_Bfree+0x20>
 800ccee:	4b09      	ldr	r3, [pc, #36]	; (800cd14 <_Bfree+0x3c>)
 800ccf0:	4809      	ldr	r0, [pc, #36]	; (800cd18 <_Bfree+0x40>)
 800ccf2:	218a      	movs	r1, #138	; 0x8a
 800ccf4:	f7ff f810 	bl	800bd18 <__assert_func>
 800ccf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ccfc:	6006      	str	r6, [r0, #0]
 800ccfe:	60c6      	str	r6, [r0, #12]
 800cd00:	b13c      	cbz	r4, 800cd12 <_Bfree+0x3a>
 800cd02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cd04:	6862      	ldr	r2, [r4, #4]
 800cd06:	68db      	ldr	r3, [r3, #12]
 800cd08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cd0c:	6021      	str	r1, [r4, #0]
 800cd0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cd12:	bd70      	pop	{r4, r5, r6, pc}
 800cd14:	0800e6b0 	.word	0x0800e6b0
 800cd18:	0800e7d9 	.word	0x0800e7d9

0800cd1c <__multadd>:
 800cd1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd20:	690d      	ldr	r5, [r1, #16]
 800cd22:	4607      	mov	r7, r0
 800cd24:	460c      	mov	r4, r1
 800cd26:	461e      	mov	r6, r3
 800cd28:	f101 0c14 	add.w	ip, r1, #20
 800cd2c:	2000      	movs	r0, #0
 800cd2e:	f8dc 3000 	ldr.w	r3, [ip]
 800cd32:	b299      	uxth	r1, r3
 800cd34:	fb02 6101 	mla	r1, r2, r1, r6
 800cd38:	0c1e      	lsrs	r6, r3, #16
 800cd3a:	0c0b      	lsrs	r3, r1, #16
 800cd3c:	fb02 3306 	mla	r3, r2, r6, r3
 800cd40:	b289      	uxth	r1, r1
 800cd42:	3001      	adds	r0, #1
 800cd44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cd48:	4285      	cmp	r5, r0
 800cd4a:	f84c 1b04 	str.w	r1, [ip], #4
 800cd4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cd52:	dcec      	bgt.n	800cd2e <__multadd+0x12>
 800cd54:	b30e      	cbz	r6, 800cd9a <__multadd+0x7e>
 800cd56:	68a3      	ldr	r3, [r4, #8]
 800cd58:	42ab      	cmp	r3, r5
 800cd5a:	dc19      	bgt.n	800cd90 <__multadd+0x74>
 800cd5c:	6861      	ldr	r1, [r4, #4]
 800cd5e:	4638      	mov	r0, r7
 800cd60:	3101      	adds	r1, #1
 800cd62:	f7ff ff79 	bl	800cc58 <_Balloc>
 800cd66:	4680      	mov	r8, r0
 800cd68:	b928      	cbnz	r0, 800cd76 <__multadd+0x5a>
 800cd6a:	4602      	mov	r2, r0
 800cd6c:	4b0c      	ldr	r3, [pc, #48]	; (800cda0 <__multadd+0x84>)
 800cd6e:	480d      	ldr	r0, [pc, #52]	; (800cda4 <__multadd+0x88>)
 800cd70:	21b5      	movs	r1, #181	; 0xb5
 800cd72:	f7fe ffd1 	bl	800bd18 <__assert_func>
 800cd76:	6922      	ldr	r2, [r4, #16]
 800cd78:	3202      	adds	r2, #2
 800cd7a:	f104 010c 	add.w	r1, r4, #12
 800cd7e:	0092      	lsls	r2, r2, #2
 800cd80:	300c      	adds	r0, #12
 800cd82:	f7fe f92e 	bl	800afe2 <memcpy>
 800cd86:	4621      	mov	r1, r4
 800cd88:	4638      	mov	r0, r7
 800cd8a:	f7ff ffa5 	bl	800ccd8 <_Bfree>
 800cd8e:	4644      	mov	r4, r8
 800cd90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cd94:	3501      	adds	r5, #1
 800cd96:	615e      	str	r6, [r3, #20]
 800cd98:	6125      	str	r5, [r4, #16]
 800cd9a:	4620      	mov	r0, r4
 800cd9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cda0:	0800e7c8 	.word	0x0800e7c8
 800cda4:	0800e7d9 	.word	0x0800e7d9

0800cda8 <__hi0bits>:
 800cda8:	0c02      	lsrs	r2, r0, #16
 800cdaa:	0412      	lsls	r2, r2, #16
 800cdac:	4603      	mov	r3, r0
 800cdae:	b9ca      	cbnz	r2, 800cde4 <__hi0bits+0x3c>
 800cdb0:	0403      	lsls	r3, r0, #16
 800cdb2:	2010      	movs	r0, #16
 800cdb4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800cdb8:	bf04      	itt	eq
 800cdba:	021b      	lsleq	r3, r3, #8
 800cdbc:	3008      	addeq	r0, #8
 800cdbe:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800cdc2:	bf04      	itt	eq
 800cdc4:	011b      	lsleq	r3, r3, #4
 800cdc6:	3004      	addeq	r0, #4
 800cdc8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800cdcc:	bf04      	itt	eq
 800cdce:	009b      	lsleq	r3, r3, #2
 800cdd0:	3002      	addeq	r0, #2
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	db05      	blt.n	800cde2 <__hi0bits+0x3a>
 800cdd6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800cdda:	f100 0001 	add.w	r0, r0, #1
 800cdde:	bf08      	it	eq
 800cde0:	2020      	moveq	r0, #32
 800cde2:	4770      	bx	lr
 800cde4:	2000      	movs	r0, #0
 800cde6:	e7e5      	b.n	800cdb4 <__hi0bits+0xc>

0800cde8 <__lo0bits>:
 800cde8:	6803      	ldr	r3, [r0, #0]
 800cdea:	4602      	mov	r2, r0
 800cdec:	f013 0007 	ands.w	r0, r3, #7
 800cdf0:	d00b      	beq.n	800ce0a <__lo0bits+0x22>
 800cdf2:	07d9      	lsls	r1, r3, #31
 800cdf4:	d421      	bmi.n	800ce3a <__lo0bits+0x52>
 800cdf6:	0798      	lsls	r0, r3, #30
 800cdf8:	bf49      	itett	mi
 800cdfa:	085b      	lsrmi	r3, r3, #1
 800cdfc:	089b      	lsrpl	r3, r3, #2
 800cdfe:	2001      	movmi	r0, #1
 800ce00:	6013      	strmi	r3, [r2, #0]
 800ce02:	bf5c      	itt	pl
 800ce04:	6013      	strpl	r3, [r2, #0]
 800ce06:	2002      	movpl	r0, #2
 800ce08:	4770      	bx	lr
 800ce0a:	b299      	uxth	r1, r3
 800ce0c:	b909      	cbnz	r1, 800ce12 <__lo0bits+0x2a>
 800ce0e:	0c1b      	lsrs	r3, r3, #16
 800ce10:	2010      	movs	r0, #16
 800ce12:	b2d9      	uxtb	r1, r3
 800ce14:	b909      	cbnz	r1, 800ce1a <__lo0bits+0x32>
 800ce16:	3008      	adds	r0, #8
 800ce18:	0a1b      	lsrs	r3, r3, #8
 800ce1a:	0719      	lsls	r1, r3, #28
 800ce1c:	bf04      	itt	eq
 800ce1e:	091b      	lsreq	r3, r3, #4
 800ce20:	3004      	addeq	r0, #4
 800ce22:	0799      	lsls	r1, r3, #30
 800ce24:	bf04      	itt	eq
 800ce26:	089b      	lsreq	r3, r3, #2
 800ce28:	3002      	addeq	r0, #2
 800ce2a:	07d9      	lsls	r1, r3, #31
 800ce2c:	d403      	bmi.n	800ce36 <__lo0bits+0x4e>
 800ce2e:	085b      	lsrs	r3, r3, #1
 800ce30:	f100 0001 	add.w	r0, r0, #1
 800ce34:	d003      	beq.n	800ce3e <__lo0bits+0x56>
 800ce36:	6013      	str	r3, [r2, #0]
 800ce38:	4770      	bx	lr
 800ce3a:	2000      	movs	r0, #0
 800ce3c:	4770      	bx	lr
 800ce3e:	2020      	movs	r0, #32
 800ce40:	4770      	bx	lr
	...

0800ce44 <__i2b>:
 800ce44:	b510      	push	{r4, lr}
 800ce46:	460c      	mov	r4, r1
 800ce48:	2101      	movs	r1, #1
 800ce4a:	f7ff ff05 	bl	800cc58 <_Balloc>
 800ce4e:	4602      	mov	r2, r0
 800ce50:	b928      	cbnz	r0, 800ce5e <__i2b+0x1a>
 800ce52:	4b05      	ldr	r3, [pc, #20]	; (800ce68 <__i2b+0x24>)
 800ce54:	4805      	ldr	r0, [pc, #20]	; (800ce6c <__i2b+0x28>)
 800ce56:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ce5a:	f7fe ff5d 	bl	800bd18 <__assert_func>
 800ce5e:	2301      	movs	r3, #1
 800ce60:	6144      	str	r4, [r0, #20]
 800ce62:	6103      	str	r3, [r0, #16]
 800ce64:	bd10      	pop	{r4, pc}
 800ce66:	bf00      	nop
 800ce68:	0800e7c8 	.word	0x0800e7c8
 800ce6c:	0800e7d9 	.word	0x0800e7d9

0800ce70 <__multiply>:
 800ce70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce74:	4691      	mov	r9, r2
 800ce76:	690a      	ldr	r2, [r1, #16]
 800ce78:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	bfb8      	it	lt
 800ce80:	460b      	movlt	r3, r1
 800ce82:	460c      	mov	r4, r1
 800ce84:	bfbc      	itt	lt
 800ce86:	464c      	movlt	r4, r9
 800ce88:	4699      	movlt	r9, r3
 800ce8a:	6927      	ldr	r7, [r4, #16]
 800ce8c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ce90:	68a3      	ldr	r3, [r4, #8]
 800ce92:	6861      	ldr	r1, [r4, #4]
 800ce94:	eb07 060a 	add.w	r6, r7, sl
 800ce98:	42b3      	cmp	r3, r6
 800ce9a:	b085      	sub	sp, #20
 800ce9c:	bfb8      	it	lt
 800ce9e:	3101      	addlt	r1, #1
 800cea0:	f7ff feda 	bl	800cc58 <_Balloc>
 800cea4:	b930      	cbnz	r0, 800ceb4 <__multiply+0x44>
 800cea6:	4602      	mov	r2, r0
 800cea8:	4b43      	ldr	r3, [pc, #268]	; (800cfb8 <__multiply+0x148>)
 800ceaa:	4844      	ldr	r0, [pc, #272]	; (800cfbc <__multiply+0x14c>)
 800ceac:	f240 115d 	movw	r1, #349	; 0x15d
 800ceb0:	f7fe ff32 	bl	800bd18 <__assert_func>
 800ceb4:	f100 0514 	add.w	r5, r0, #20
 800ceb8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cebc:	462b      	mov	r3, r5
 800cebe:	2200      	movs	r2, #0
 800cec0:	4543      	cmp	r3, r8
 800cec2:	d321      	bcc.n	800cf08 <__multiply+0x98>
 800cec4:	f104 0314 	add.w	r3, r4, #20
 800cec8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cecc:	f109 0314 	add.w	r3, r9, #20
 800ced0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ced4:	9202      	str	r2, [sp, #8]
 800ced6:	1b3a      	subs	r2, r7, r4
 800ced8:	3a15      	subs	r2, #21
 800ceda:	f022 0203 	bic.w	r2, r2, #3
 800cede:	3204      	adds	r2, #4
 800cee0:	f104 0115 	add.w	r1, r4, #21
 800cee4:	428f      	cmp	r7, r1
 800cee6:	bf38      	it	cc
 800cee8:	2204      	movcc	r2, #4
 800ceea:	9201      	str	r2, [sp, #4]
 800ceec:	9a02      	ldr	r2, [sp, #8]
 800ceee:	9303      	str	r3, [sp, #12]
 800cef0:	429a      	cmp	r2, r3
 800cef2:	d80c      	bhi.n	800cf0e <__multiply+0x9e>
 800cef4:	2e00      	cmp	r6, #0
 800cef6:	dd03      	ble.n	800cf00 <__multiply+0x90>
 800cef8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d059      	beq.n	800cfb4 <__multiply+0x144>
 800cf00:	6106      	str	r6, [r0, #16]
 800cf02:	b005      	add	sp, #20
 800cf04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf08:	f843 2b04 	str.w	r2, [r3], #4
 800cf0c:	e7d8      	b.n	800cec0 <__multiply+0x50>
 800cf0e:	f8b3 a000 	ldrh.w	sl, [r3]
 800cf12:	f1ba 0f00 	cmp.w	sl, #0
 800cf16:	d023      	beq.n	800cf60 <__multiply+0xf0>
 800cf18:	f104 0e14 	add.w	lr, r4, #20
 800cf1c:	46a9      	mov	r9, r5
 800cf1e:	f04f 0c00 	mov.w	ip, #0
 800cf22:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cf26:	f8d9 1000 	ldr.w	r1, [r9]
 800cf2a:	fa1f fb82 	uxth.w	fp, r2
 800cf2e:	b289      	uxth	r1, r1
 800cf30:	fb0a 110b 	mla	r1, sl, fp, r1
 800cf34:	4461      	add	r1, ip
 800cf36:	f8d9 c000 	ldr.w	ip, [r9]
 800cf3a:	0c12      	lsrs	r2, r2, #16
 800cf3c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800cf40:	fb0a c202 	mla	r2, sl, r2, ip
 800cf44:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cf48:	b289      	uxth	r1, r1
 800cf4a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cf4e:	4577      	cmp	r7, lr
 800cf50:	f849 1b04 	str.w	r1, [r9], #4
 800cf54:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cf58:	d8e3      	bhi.n	800cf22 <__multiply+0xb2>
 800cf5a:	9a01      	ldr	r2, [sp, #4]
 800cf5c:	f845 c002 	str.w	ip, [r5, r2]
 800cf60:	9a03      	ldr	r2, [sp, #12]
 800cf62:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cf66:	3304      	adds	r3, #4
 800cf68:	f1b9 0f00 	cmp.w	r9, #0
 800cf6c:	d020      	beq.n	800cfb0 <__multiply+0x140>
 800cf6e:	6829      	ldr	r1, [r5, #0]
 800cf70:	f104 0c14 	add.w	ip, r4, #20
 800cf74:	46ae      	mov	lr, r5
 800cf76:	f04f 0a00 	mov.w	sl, #0
 800cf7a:	f8bc b000 	ldrh.w	fp, [ip]
 800cf7e:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cf82:	fb09 220b 	mla	r2, r9, fp, r2
 800cf86:	4492      	add	sl, r2
 800cf88:	b289      	uxth	r1, r1
 800cf8a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cf8e:	f84e 1b04 	str.w	r1, [lr], #4
 800cf92:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cf96:	f8be 1000 	ldrh.w	r1, [lr]
 800cf9a:	0c12      	lsrs	r2, r2, #16
 800cf9c:	fb09 1102 	mla	r1, r9, r2, r1
 800cfa0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800cfa4:	4567      	cmp	r7, ip
 800cfa6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cfaa:	d8e6      	bhi.n	800cf7a <__multiply+0x10a>
 800cfac:	9a01      	ldr	r2, [sp, #4]
 800cfae:	50a9      	str	r1, [r5, r2]
 800cfb0:	3504      	adds	r5, #4
 800cfb2:	e79b      	b.n	800ceec <__multiply+0x7c>
 800cfb4:	3e01      	subs	r6, #1
 800cfb6:	e79d      	b.n	800cef4 <__multiply+0x84>
 800cfb8:	0800e7c8 	.word	0x0800e7c8
 800cfbc:	0800e7d9 	.word	0x0800e7d9

0800cfc0 <__pow5mult>:
 800cfc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfc4:	4615      	mov	r5, r2
 800cfc6:	f012 0203 	ands.w	r2, r2, #3
 800cfca:	4606      	mov	r6, r0
 800cfcc:	460f      	mov	r7, r1
 800cfce:	d007      	beq.n	800cfe0 <__pow5mult+0x20>
 800cfd0:	4c25      	ldr	r4, [pc, #148]	; (800d068 <__pow5mult+0xa8>)
 800cfd2:	3a01      	subs	r2, #1
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cfda:	f7ff fe9f 	bl	800cd1c <__multadd>
 800cfde:	4607      	mov	r7, r0
 800cfe0:	10ad      	asrs	r5, r5, #2
 800cfe2:	d03d      	beq.n	800d060 <__pow5mult+0xa0>
 800cfe4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cfe6:	b97c      	cbnz	r4, 800d008 <__pow5mult+0x48>
 800cfe8:	2010      	movs	r0, #16
 800cfea:	f7ff fe21 	bl	800cc30 <malloc>
 800cfee:	4602      	mov	r2, r0
 800cff0:	6270      	str	r0, [r6, #36]	; 0x24
 800cff2:	b928      	cbnz	r0, 800d000 <__pow5mult+0x40>
 800cff4:	4b1d      	ldr	r3, [pc, #116]	; (800d06c <__pow5mult+0xac>)
 800cff6:	481e      	ldr	r0, [pc, #120]	; (800d070 <__pow5mult+0xb0>)
 800cff8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cffc:	f7fe fe8c 	bl	800bd18 <__assert_func>
 800d000:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d004:	6004      	str	r4, [r0, #0]
 800d006:	60c4      	str	r4, [r0, #12]
 800d008:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d00c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d010:	b94c      	cbnz	r4, 800d026 <__pow5mult+0x66>
 800d012:	f240 2171 	movw	r1, #625	; 0x271
 800d016:	4630      	mov	r0, r6
 800d018:	f7ff ff14 	bl	800ce44 <__i2b>
 800d01c:	2300      	movs	r3, #0
 800d01e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d022:	4604      	mov	r4, r0
 800d024:	6003      	str	r3, [r0, #0]
 800d026:	f04f 0900 	mov.w	r9, #0
 800d02a:	07eb      	lsls	r3, r5, #31
 800d02c:	d50a      	bpl.n	800d044 <__pow5mult+0x84>
 800d02e:	4639      	mov	r1, r7
 800d030:	4622      	mov	r2, r4
 800d032:	4630      	mov	r0, r6
 800d034:	f7ff ff1c 	bl	800ce70 <__multiply>
 800d038:	4639      	mov	r1, r7
 800d03a:	4680      	mov	r8, r0
 800d03c:	4630      	mov	r0, r6
 800d03e:	f7ff fe4b 	bl	800ccd8 <_Bfree>
 800d042:	4647      	mov	r7, r8
 800d044:	106d      	asrs	r5, r5, #1
 800d046:	d00b      	beq.n	800d060 <__pow5mult+0xa0>
 800d048:	6820      	ldr	r0, [r4, #0]
 800d04a:	b938      	cbnz	r0, 800d05c <__pow5mult+0x9c>
 800d04c:	4622      	mov	r2, r4
 800d04e:	4621      	mov	r1, r4
 800d050:	4630      	mov	r0, r6
 800d052:	f7ff ff0d 	bl	800ce70 <__multiply>
 800d056:	6020      	str	r0, [r4, #0]
 800d058:	f8c0 9000 	str.w	r9, [r0]
 800d05c:	4604      	mov	r4, r0
 800d05e:	e7e4      	b.n	800d02a <__pow5mult+0x6a>
 800d060:	4638      	mov	r0, r7
 800d062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d066:	bf00      	nop
 800d068:	0800e928 	.word	0x0800e928
 800d06c:	0800e6b0 	.word	0x0800e6b0
 800d070:	0800e7d9 	.word	0x0800e7d9

0800d074 <__lshift>:
 800d074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d078:	460c      	mov	r4, r1
 800d07a:	6849      	ldr	r1, [r1, #4]
 800d07c:	6923      	ldr	r3, [r4, #16]
 800d07e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d082:	68a3      	ldr	r3, [r4, #8]
 800d084:	4607      	mov	r7, r0
 800d086:	4691      	mov	r9, r2
 800d088:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d08c:	f108 0601 	add.w	r6, r8, #1
 800d090:	42b3      	cmp	r3, r6
 800d092:	db0b      	blt.n	800d0ac <__lshift+0x38>
 800d094:	4638      	mov	r0, r7
 800d096:	f7ff fddf 	bl	800cc58 <_Balloc>
 800d09a:	4605      	mov	r5, r0
 800d09c:	b948      	cbnz	r0, 800d0b2 <__lshift+0x3e>
 800d09e:	4602      	mov	r2, r0
 800d0a0:	4b2a      	ldr	r3, [pc, #168]	; (800d14c <__lshift+0xd8>)
 800d0a2:	482b      	ldr	r0, [pc, #172]	; (800d150 <__lshift+0xdc>)
 800d0a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d0a8:	f7fe fe36 	bl	800bd18 <__assert_func>
 800d0ac:	3101      	adds	r1, #1
 800d0ae:	005b      	lsls	r3, r3, #1
 800d0b0:	e7ee      	b.n	800d090 <__lshift+0x1c>
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	f100 0114 	add.w	r1, r0, #20
 800d0b8:	f100 0210 	add.w	r2, r0, #16
 800d0bc:	4618      	mov	r0, r3
 800d0be:	4553      	cmp	r3, sl
 800d0c0:	db37      	blt.n	800d132 <__lshift+0xbe>
 800d0c2:	6920      	ldr	r0, [r4, #16]
 800d0c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d0c8:	f104 0314 	add.w	r3, r4, #20
 800d0cc:	f019 091f 	ands.w	r9, r9, #31
 800d0d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d0d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d0d8:	d02f      	beq.n	800d13a <__lshift+0xc6>
 800d0da:	f1c9 0e20 	rsb	lr, r9, #32
 800d0de:	468a      	mov	sl, r1
 800d0e0:	f04f 0c00 	mov.w	ip, #0
 800d0e4:	681a      	ldr	r2, [r3, #0]
 800d0e6:	fa02 f209 	lsl.w	r2, r2, r9
 800d0ea:	ea42 020c 	orr.w	r2, r2, ip
 800d0ee:	f84a 2b04 	str.w	r2, [sl], #4
 800d0f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0f6:	4298      	cmp	r0, r3
 800d0f8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d0fc:	d8f2      	bhi.n	800d0e4 <__lshift+0x70>
 800d0fe:	1b03      	subs	r3, r0, r4
 800d100:	3b15      	subs	r3, #21
 800d102:	f023 0303 	bic.w	r3, r3, #3
 800d106:	3304      	adds	r3, #4
 800d108:	f104 0215 	add.w	r2, r4, #21
 800d10c:	4290      	cmp	r0, r2
 800d10e:	bf38      	it	cc
 800d110:	2304      	movcc	r3, #4
 800d112:	f841 c003 	str.w	ip, [r1, r3]
 800d116:	f1bc 0f00 	cmp.w	ip, #0
 800d11a:	d001      	beq.n	800d120 <__lshift+0xac>
 800d11c:	f108 0602 	add.w	r6, r8, #2
 800d120:	3e01      	subs	r6, #1
 800d122:	4638      	mov	r0, r7
 800d124:	612e      	str	r6, [r5, #16]
 800d126:	4621      	mov	r1, r4
 800d128:	f7ff fdd6 	bl	800ccd8 <_Bfree>
 800d12c:	4628      	mov	r0, r5
 800d12e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d132:	f842 0f04 	str.w	r0, [r2, #4]!
 800d136:	3301      	adds	r3, #1
 800d138:	e7c1      	b.n	800d0be <__lshift+0x4a>
 800d13a:	3904      	subs	r1, #4
 800d13c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d140:	f841 2f04 	str.w	r2, [r1, #4]!
 800d144:	4298      	cmp	r0, r3
 800d146:	d8f9      	bhi.n	800d13c <__lshift+0xc8>
 800d148:	e7ea      	b.n	800d120 <__lshift+0xac>
 800d14a:	bf00      	nop
 800d14c:	0800e7c8 	.word	0x0800e7c8
 800d150:	0800e7d9 	.word	0x0800e7d9

0800d154 <__mcmp>:
 800d154:	690a      	ldr	r2, [r1, #16]
 800d156:	4603      	mov	r3, r0
 800d158:	6900      	ldr	r0, [r0, #16]
 800d15a:	1a80      	subs	r0, r0, r2
 800d15c:	b530      	push	{r4, r5, lr}
 800d15e:	d10d      	bne.n	800d17c <__mcmp+0x28>
 800d160:	3314      	adds	r3, #20
 800d162:	3114      	adds	r1, #20
 800d164:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d168:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d16c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d170:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d174:	4295      	cmp	r5, r2
 800d176:	d002      	beq.n	800d17e <__mcmp+0x2a>
 800d178:	d304      	bcc.n	800d184 <__mcmp+0x30>
 800d17a:	2001      	movs	r0, #1
 800d17c:	bd30      	pop	{r4, r5, pc}
 800d17e:	42a3      	cmp	r3, r4
 800d180:	d3f4      	bcc.n	800d16c <__mcmp+0x18>
 800d182:	e7fb      	b.n	800d17c <__mcmp+0x28>
 800d184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d188:	e7f8      	b.n	800d17c <__mcmp+0x28>
	...

0800d18c <__mdiff>:
 800d18c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d190:	460d      	mov	r5, r1
 800d192:	4607      	mov	r7, r0
 800d194:	4611      	mov	r1, r2
 800d196:	4628      	mov	r0, r5
 800d198:	4614      	mov	r4, r2
 800d19a:	f7ff ffdb 	bl	800d154 <__mcmp>
 800d19e:	1e06      	subs	r6, r0, #0
 800d1a0:	d111      	bne.n	800d1c6 <__mdiff+0x3a>
 800d1a2:	4631      	mov	r1, r6
 800d1a4:	4638      	mov	r0, r7
 800d1a6:	f7ff fd57 	bl	800cc58 <_Balloc>
 800d1aa:	4602      	mov	r2, r0
 800d1ac:	b928      	cbnz	r0, 800d1ba <__mdiff+0x2e>
 800d1ae:	4b39      	ldr	r3, [pc, #228]	; (800d294 <__mdiff+0x108>)
 800d1b0:	f240 2132 	movw	r1, #562	; 0x232
 800d1b4:	4838      	ldr	r0, [pc, #224]	; (800d298 <__mdiff+0x10c>)
 800d1b6:	f7fe fdaf 	bl	800bd18 <__assert_func>
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d1c0:	4610      	mov	r0, r2
 800d1c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1c6:	bfa4      	itt	ge
 800d1c8:	4623      	movge	r3, r4
 800d1ca:	462c      	movge	r4, r5
 800d1cc:	4638      	mov	r0, r7
 800d1ce:	6861      	ldr	r1, [r4, #4]
 800d1d0:	bfa6      	itte	ge
 800d1d2:	461d      	movge	r5, r3
 800d1d4:	2600      	movge	r6, #0
 800d1d6:	2601      	movlt	r6, #1
 800d1d8:	f7ff fd3e 	bl	800cc58 <_Balloc>
 800d1dc:	4602      	mov	r2, r0
 800d1de:	b918      	cbnz	r0, 800d1e8 <__mdiff+0x5c>
 800d1e0:	4b2c      	ldr	r3, [pc, #176]	; (800d294 <__mdiff+0x108>)
 800d1e2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d1e6:	e7e5      	b.n	800d1b4 <__mdiff+0x28>
 800d1e8:	6927      	ldr	r7, [r4, #16]
 800d1ea:	60c6      	str	r6, [r0, #12]
 800d1ec:	692e      	ldr	r6, [r5, #16]
 800d1ee:	f104 0014 	add.w	r0, r4, #20
 800d1f2:	f105 0914 	add.w	r9, r5, #20
 800d1f6:	f102 0e14 	add.w	lr, r2, #20
 800d1fa:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 800d1fe:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d202:	3410      	adds	r4, #16
 800d204:	46f2      	mov	sl, lr
 800d206:	2100      	movs	r1, #0
 800d208:	f859 3b04 	ldr.w	r3, [r9], #4
 800d20c:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800d210:	fa1f f883 	uxth.w	r8, r3
 800d214:	fa11 f18b 	uxtah	r1, r1, fp
 800d218:	0c1b      	lsrs	r3, r3, #16
 800d21a:	eba1 0808 	sub.w	r8, r1, r8
 800d21e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d222:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d226:	fa1f f888 	uxth.w	r8, r8
 800d22a:	1419      	asrs	r1, r3, #16
 800d22c:	454e      	cmp	r6, r9
 800d22e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d232:	f84a 3b04 	str.w	r3, [sl], #4
 800d236:	d8e7      	bhi.n	800d208 <__mdiff+0x7c>
 800d238:	1b73      	subs	r3, r6, r5
 800d23a:	3b15      	subs	r3, #21
 800d23c:	f023 0303 	bic.w	r3, r3, #3
 800d240:	3304      	adds	r3, #4
 800d242:	3515      	adds	r5, #21
 800d244:	42ae      	cmp	r6, r5
 800d246:	bf38      	it	cc
 800d248:	2304      	movcc	r3, #4
 800d24a:	4418      	add	r0, r3
 800d24c:	4473      	add	r3, lr
 800d24e:	469e      	mov	lr, r3
 800d250:	4606      	mov	r6, r0
 800d252:	4566      	cmp	r6, ip
 800d254:	d30e      	bcc.n	800d274 <__mdiff+0xe8>
 800d256:	f10c 0103 	add.w	r1, ip, #3
 800d25a:	1a09      	subs	r1, r1, r0
 800d25c:	f021 0103 	bic.w	r1, r1, #3
 800d260:	3803      	subs	r0, #3
 800d262:	4584      	cmp	ip, r0
 800d264:	bf38      	it	cc
 800d266:	2100      	movcc	r1, #0
 800d268:	4419      	add	r1, r3
 800d26a:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800d26e:	b17b      	cbz	r3, 800d290 <__mdiff+0x104>
 800d270:	6117      	str	r7, [r2, #16]
 800d272:	e7a5      	b.n	800d1c0 <__mdiff+0x34>
 800d274:	f856 8b04 	ldr.w	r8, [r6], #4
 800d278:	fa11 f488 	uxtah	r4, r1, r8
 800d27c:	1425      	asrs	r5, r4, #16
 800d27e:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 800d282:	b2a4      	uxth	r4, r4
 800d284:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800d288:	f84e 4b04 	str.w	r4, [lr], #4
 800d28c:	1429      	asrs	r1, r5, #16
 800d28e:	e7e0      	b.n	800d252 <__mdiff+0xc6>
 800d290:	3f01      	subs	r7, #1
 800d292:	e7ea      	b.n	800d26a <__mdiff+0xde>
 800d294:	0800e7c8 	.word	0x0800e7c8
 800d298:	0800e7d9 	.word	0x0800e7d9

0800d29c <__d2b>:
 800d29c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d2a0:	2101      	movs	r1, #1
 800d2a2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800d2a6:	4690      	mov	r8, r2
 800d2a8:	461d      	mov	r5, r3
 800d2aa:	f7ff fcd5 	bl	800cc58 <_Balloc>
 800d2ae:	4604      	mov	r4, r0
 800d2b0:	b930      	cbnz	r0, 800d2c0 <__d2b+0x24>
 800d2b2:	4602      	mov	r2, r0
 800d2b4:	4b25      	ldr	r3, [pc, #148]	; (800d34c <__d2b+0xb0>)
 800d2b6:	4826      	ldr	r0, [pc, #152]	; (800d350 <__d2b+0xb4>)
 800d2b8:	f240 310a 	movw	r1, #778	; 0x30a
 800d2bc:	f7fe fd2c 	bl	800bd18 <__assert_func>
 800d2c0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800d2c4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800d2c8:	bb2d      	cbnz	r5, 800d316 <__d2b+0x7a>
 800d2ca:	9301      	str	r3, [sp, #4]
 800d2cc:	f1b8 0300 	subs.w	r3, r8, #0
 800d2d0:	d026      	beq.n	800d320 <__d2b+0x84>
 800d2d2:	4668      	mov	r0, sp
 800d2d4:	9300      	str	r3, [sp, #0]
 800d2d6:	f7ff fd87 	bl	800cde8 <__lo0bits>
 800d2da:	9900      	ldr	r1, [sp, #0]
 800d2dc:	b1f0      	cbz	r0, 800d31c <__d2b+0x80>
 800d2de:	9a01      	ldr	r2, [sp, #4]
 800d2e0:	f1c0 0320 	rsb	r3, r0, #32
 800d2e4:	fa02 f303 	lsl.w	r3, r2, r3
 800d2e8:	430b      	orrs	r3, r1
 800d2ea:	40c2      	lsrs	r2, r0
 800d2ec:	6163      	str	r3, [r4, #20]
 800d2ee:	9201      	str	r2, [sp, #4]
 800d2f0:	9b01      	ldr	r3, [sp, #4]
 800d2f2:	61a3      	str	r3, [r4, #24]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	bf14      	ite	ne
 800d2f8:	2102      	movne	r1, #2
 800d2fa:	2101      	moveq	r1, #1
 800d2fc:	6121      	str	r1, [r4, #16]
 800d2fe:	b1c5      	cbz	r5, 800d332 <__d2b+0x96>
 800d300:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d304:	4405      	add	r5, r0
 800d306:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d30a:	603d      	str	r5, [r7, #0]
 800d30c:	6030      	str	r0, [r6, #0]
 800d30e:	4620      	mov	r0, r4
 800d310:	b002      	add	sp, #8
 800d312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d316:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d31a:	e7d6      	b.n	800d2ca <__d2b+0x2e>
 800d31c:	6161      	str	r1, [r4, #20]
 800d31e:	e7e7      	b.n	800d2f0 <__d2b+0x54>
 800d320:	a801      	add	r0, sp, #4
 800d322:	f7ff fd61 	bl	800cde8 <__lo0bits>
 800d326:	9b01      	ldr	r3, [sp, #4]
 800d328:	6163      	str	r3, [r4, #20]
 800d32a:	2101      	movs	r1, #1
 800d32c:	6121      	str	r1, [r4, #16]
 800d32e:	3020      	adds	r0, #32
 800d330:	e7e5      	b.n	800d2fe <__d2b+0x62>
 800d332:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800d336:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d33a:	6038      	str	r0, [r7, #0]
 800d33c:	6918      	ldr	r0, [r3, #16]
 800d33e:	f7ff fd33 	bl	800cda8 <__hi0bits>
 800d342:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800d346:	6031      	str	r1, [r6, #0]
 800d348:	e7e1      	b.n	800d30e <__d2b+0x72>
 800d34a:	bf00      	nop
 800d34c:	0800e7c8 	.word	0x0800e7c8
 800d350:	0800e7d9 	.word	0x0800e7d9

0800d354 <_calloc_r>:
 800d354:	b570      	push	{r4, r5, r6, lr}
 800d356:	fba1 5402 	umull	r5, r4, r1, r2
 800d35a:	b934      	cbnz	r4, 800d36a <_calloc_r+0x16>
 800d35c:	4629      	mov	r1, r5
 800d35e:	f7fd fe77 	bl	800b050 <_malloc_r>
 800d362:	4606      	mov	r6, r0
 800d364:	b928      	cbnz	r0, 800d372 <_calloc_r+0x1e>
 800d366:	4630      	mov	r0, r6
 800d368:	bd70      	pop	{r4, r5, r6, pc}
 800d36a:	220c      	movs	r2, #12
 800d36c:	6002      	str	r2, [r0, #0]
 800d36e:	2600      	movs	r6, #0
 800d370:	e7f9      	b.n	800d366 <_calloc_r+0x12>
 800d372:	462a      	mov	r2, r5
 800d374:	4621      	mov	r1, r4
 800d376:	f7fd fe42 	bl	800affe <memset>
 800d37a:	e7f4      	b.n	800d366 <_calloc_r+0x12>

0800d37c <_free_r>:
 800d37c:	b538      	push	{r3, r4, r5, lr}
 800d37e:	4605      	mov	r5, r0
 800d380:	2900      	cmp	r1, #0
 800d382:	d041      	beq.n	800d408 <_free_r+0x8c>
 800d384:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d388:	1f0c      	subs	r4, r1, #4
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	bfb8      	it	lt
 800d38e:	18e4      	addlt	r4, r4, r3
 800d390:	f7ff fc56 	bl	800cc40 <__malloc_lock>
 800d394:	4a1d      	ldr	r2, [pc, #116]	; (800d40c <_free_r+0x90>)
 800d396:	6813      	ldr	r3, [r2, #0]
 800d398:	b933      	cbnz	r3, 800d3a8 <_free_r+0x2c>
 800d39a:	6063      	str	r3, [r4, #4]
 800d39c:	6014      	str	r4, [r2, #0]
 800d39e:	4628      	mov	r0, r5
 800d3a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3a4:	f7ff bc52 	b.w	800cc4c <__malloc_unlock>
 800d3a8:	42a3      	cmp	r3, r4
 800d3aa:	d908      	bls.n	800d3be <_free_r+0x42>
 800d3ac:	6820      	ldr	r0, [r4, #0]
 800d3ae:	1821      	adds	r1, r4, r0
 800d3b0:	428b      	cmp	r3, r1
 800d3b2:	bf01      	itttt	eq
 800d3b4:	6819      	ldreq	r1, [r3, #0]
 800d3b6:	685b      	ldreq	r3, [r3, #4]
 800d3b8:	1809      	addeq	r1, r1, r0
 800d3ba:	6021      	streq	r1, [r4, #0]
 800d3bc:	e7ed      	b.n	800d39a <_free_r+0x1e>
 800d3be:	461a      	mov	r2, r3
 800d3c0:	685b      	ldr	r3, [r3, #4]
 800d3c2:	b10b      	cbz	r3, 800d3c8 <_free_r+0x4c>
 800d3c4:	42a3      	cmp	r3, r4
 800d3c6:	d9fa      	bls.n	800d3be <_free_r+0x42>
 800d3c8:	6811      	ldr	r1, [r2, #0]
 800d3ca:	1850      	adds	r0, r2, r1
 800d3cc:	42a0      	cmp	r0, r4
 800d3ce:	d10b      	bne.n	800d3e8 <_free_r+0x6c>
 800d3d0:	6820      	ldr	r0, [r4, #0]
 800d3d2:	4401      	add	r1, r0
 800d3d4:	1850      	adds	r0, r2, r1
 800d3d6:	4283      	cmp	r3, r0
 800d3d8:	6011      	str	r1, [r2, #0]
 800d3da:	d1e0      	bne.n	800d39e <_free_r+0x22>
 800d3dc:	6818      	ldr	r0, [r3, #0]
 800d3de:	685b      	ldr	r3, [r3, #4]
 800d3e0:	6053      	str	r3, [r2, #4]
 800d3e2:	4401      	add	r1, r0
 800d3e4:	6011      	str	r1, [r2, #0]
 800d3e6:	e7da      	b.n	800d39e <_free_r+0x22>
 800d3e8:	d902      	bls.n	800d3f0 <_free_r+0x74>
 800d3ea:	230c      	movs	r3, #12
 800d3ec:	602b      	str	r3, [r5, #0]
 800d3ee:	e7d6      	b.n	800d39e <_free_r+0x22>
 800d3f0:	6820      	ldr	r0, [r4, #0]
 800d3f2:	1821      	adds	r1, r4, r0
 800d3f4:	428b      	cmp	r3, r1
 800d3f6:	bf04      	itt	eq
 800d3f8:	6819      	ldreq	r1, [r3, #0]
 800d3fa:	685b      	ldreq	r3, [r3, #4]
 800d3fc:	6063      	str	r3, [r4, #4]
 800d3fe:	bf04      	itt	eq
 800d400:	1809      	addeq	r1, r1, r0
 800d402:	6021      	streq	r1, [r4, #0]
 800d404:	6054      	str	r4, [r2, #4]
 800d406:	e7ca      	b.n	800d39e <_free_r+0x22>
 800d408:	bd38      	pop	{r3, r4, r5, pc}
 800d40a:	bf00      	nop
 800d40c:	20001cfc 	.word	0x20001cfc

0800d410 <__ssputs_r>:
 800d410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d414:	688e      	ldr	r6, [r1, #8]
 800d416:	429e      	cmp	r6, r3
 800d418:	4682      	mov	sl, r0
 800d41a:	460c      	mov	r4, r1
 800d41c:	4690      	mov	r8, r2
 800d41e:	461f      	mov	r7, r3
 800d420:	d838      	bhi.n	800d494 <__ssputs_r+0x84>
 800d422:	898a      	ldrh	r2, [r1, #12]
 800d424:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d428:	d032      	beq.n	800d490 <__ssputs_r+0x80>
 800d42a:	6825      	ldr	r5, [r4, #0]
 800d42c:	6909      	ldr	r1, [r1, #16]
 800d42e:	eba5 0901 	sub.w	r9, r5, r1
 800d432:	6965      	ldr	r5, [r4, #20]
 800d434:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d438:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d43c:	3301      	adds	r3, #1
 800d43e:	444b      	add	r3, r9
 800d440:	106d      	asrs	r5, r5, #1
 800d442:	429d      	cmp	r5, r3
 800d444:	bf38      	it	cc
 800d446:	461d      	movcc	r5, r3
 800d448:	0553      	lsls	r3, r2, #21
 800d44a:	d531      	bpl.n	800d4b0 <__ssputs_r+0xa0>
 800d44c:	4629      	mov	r1, r5
 800d44e:	f7fd fdff 	bl	800b050 <_malloc_r>
 800d452:	4606      	mov	r6, r0
 800d454:	b950      	cbnz	r0, 800d46c <__ssputs_r+0x5c>
 800d456:	230c      	movs	r3, #12
 800d458:	f8ca 3000 	str.w	r3, [sl]
 800d45c:	89a3      	ldrh	r3, [r4, #12]
 800d45e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d462:	81a3      	strh	r3, [r4, #12]
 800d464:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d46c:	6921      	ldr	r1, [r4, #16]
 800d46e:	464a      	mov	r2, r9
 800d470:	f7fd fdb7 	bl	800afe2 <memcpy>
 800d474:	89a3      	ldrh	r3, [r4, #12]
 800d476:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d47a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d47e:	81a3      	strh	r3, [r4, #12]
 800d480:	6126      	str	r6, [r4, #16]
 800d482:	6165      	str	r5, [r4, #20]
 800d484:	444e      	add	r6, r9
 800d486:	eba5 0509 	sub.w	r5, r5, r9
 800d48a:	6026      	str	r6, [r4, #0]
 800d48c:	60a5      	str	r5, [r4, #8]
 800d48e:	463e      	mov	r6, r7
 800d490:	42be      	cmp	r6, r7
 800d492:	d900      	bls.n	800d496 <__ssputs_r+0x86>
 800d494:	463e      	mov	r6, r7
 800d496:	6820      	ldr	r0, [r4, #0]
 800d498:	4632      	mov	r2, r6
 800d49a:	4641      	mov	r1, r8
 800d49c:	f000 fbbc 	bl	800dc18 <memmove>
 800d4a0:	68a3      	ldr	r3, [r4, #8]
 800d4a2:	1b9b      	subs	r3, r3, r6
 800d4a4:	60a3      	str	r3, [r4, #8]
 800d4a6:	6823      	ldr	r3, [r4, #0]
 800d4a8:	4433      	add	r3, r6
 800d4aa:	6023      	str	r3, [r4, #0]
 800d4ac:	2000      	movs	r0, #0
 800d4ae:	e7db      	b.n	800d468 <__ssputs_r+0x58>
 800d4b0:	462a      	mov	r2, r5
 800d4b2:	f000 fbcb 	bl	800dc4c <_realloc_r>
 800d4b6:	4606      	mov	r6, r0
 800d4b8:	2800      	cmp	r0, #0
 800d4ba:	d1e1      	bne.n	800d480 <__ssputs_r+0x70>
 800d4bc:	6921      	ldr	r1, [r4, #16]
 800d4be:	4650      	mov	r0, sl
 800d4c0:	f7ff ff5c 	bl	800d37c <_free_r>
 800d4c4:	e7c7      	b.n	800d456 <__ssputs_r+0x46>
	...

0800d4c8 <_svfiprintf_r>:
 800d4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4cc:	4698      	mov	r8, r3
 800d4ce:	898b      	ldrh	r3, [r1, #12]
 800d4d0:	061b      	lsls	r3, r3, #24
 800d4d2:	b09d      	sub	sp, #116	; 0x74
 800d4d4:	4607      	mov	r7, r0
 800d4d6:	460d      	mov	r5, r1
 800d4d8:	4614      	mov	r4, r2
 800d4da:	d50e      	bpl.n	800d4fa <_svfiprintf_r+0x32>
 800d4dc:	690b      	ldr	r3, [r1, #16]
 800d4de:	b963      	cbnz	r3, 800d4fa <_svfiprintf_r+0x32>
 800d4e0:	2140      	movs	r1, #64	; 0x40
 800d4e2:	f7fd fdb5 	bl	800b050 <_malloc_r>
 800d4e6:	6028      	str	r0, [r5, #0]
 800d4e8:	6128      	str	r0, [r5, #16]
 800d4ea:	b920      	cbnz	r0, 800d4f6 <_svfiprintf_r+0x2e>
 800d4ec:	230c      	movs	r3, #12
 800d4ee:	603b      	str	r3, [r7, #0]
 800d4f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d4f4:	e0d1      	b.n	800d69a <_svfiprintf_r+0x1d2>
 800d4f6:	2340      	movs	r3, #64	; 0x40
 800d4f8:	616b      	str	r3, [r5, #20]
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	9309      	str	r3, [sp, #36]	; 0x24
 800d4fe:	2320      	movs	r3, #32
 800d500:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d504:	f8cd 800c 	str.w	r8, [sp, #12]
 800d508:	2330      	movs	r3, #48	; 0x30
 800d50a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d6b4 <_svfiprintf_r+0x1ec>
 800d50e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d512:	f04f 0901 	mov.w	r9, #1
 800d516:	4623      	mov	r3, r4
 800d518:	469a      	mov	sl, r3
 800d51a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d51e:	b10a      	cbz	r2, 800d524 <_svfiprintf_r+0x5c>
 800d520:	2a25      	cmp	r2, #37	; 0x25
 800d522:	d1f9      	bne.n	800d518 <_svfiprintf_r+0x50>
 800d524:	ebba 0b04 	subs.w	fp, sl, r4
 800d528:	d00b      	beq.n	800d542 <_svfiprintf_r+0x7a>
 800d52a:	465b      	mov	r3, fp
 800d52c:	4622      	mov	r2, r4
 800d52e:	4629      	mov	r1, r5
 800d530:	4638      	mov	r0, r7
 800d532:	f7ff ff6d 	bl	800d410 <__ssputs_r>
 800d536:	3001      	adds	r0, #1
 800d538:	f000 80aa 	beq.w	800d690 <_svfiprintf_r+0x1c8>
 800d53c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d53e:	445a      	add	r2, fp
 800d540:	9209      	str	r2, [sp, #36]	; 0x24
 800d542:	f89a 3000 	ldrb.w	r3, [sl]
 800d546:	2b00      	cmp	r3, #0
 800d548:	f000 80a2 	beq.w	800d690 <_svfiprintf_r+0x1c8>
 800d54c:	2300      	movs	r3, #0
 800d54e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d552:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d556:	f10a 0a01 	add.w	sl, sl, #1
 800d55a:	9304      	str	r3, [sp, #16]
 800d55c:	9307      	str	r3, [sp, #28]
 800d55e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d562:	931a      	str	r3, [sp, #104]	; 0x68
 800d564:	4654      	mov	r4, sl
 800d566:	2205      	movs	r2, #5
 800d568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d56c:	4851      	ldr	r0, [pc, #324]	; (800d6b4 <_svfiprintf_r+0x1ec>)
 800d56e:	f7f2 fe0f 	bl	8000190 <memchr>
 800d572:	9a04      	ldr	r2, [sp, #16]
 800d574:	b9d8      	cbnz	r0, 800d5ae <_svfiprintf_r+0xe6>
 800d576:	06d0      	lsls	r0, r2, #27
 800d578:	bf44      	itt	mi
 800d57a:	2320      	movmi	r3, #32
 800d57c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d580:	0711      	lsls	r1, r2, #28
 800d582:	bf44      	itt	mi
 800d584:	232b      	movmi	r3, #43	; 0x2b
 800d586:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d58a:	f89a 3000 	ldrb.w	r3, [sl]
 800d58e:	2b2a      	cmp	r3, #42	; 0x2a
 800d590:	d015      	beq.n	800d5be <_svfiprintf_r+0xf6>
 800d592:	9a07      	ldr	r2, [sp, #28]
 800d594:	4654      	mov	r4, sl
 800d596:	2000      	movs	r0, #0
 800d598:	f04f 0c0a 	mov.w	ip, #10
 800d59c:	4621      	mov	r1, r4
 800d59e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d5a2:	3b30      	subs	r3, #48	; 0x30
 800d5a4:	2b09      	cmp	r3, #9
 800d5a6:	d94e      	bls.n	800d646 <_svfiprintf_r+0x17e>
 800d5a8:	b1b0      	cbz	r0, 800d5d8 <_svfiprintf_r+0x110>
 800d5aa:	9207      	str	r2, [sp, #28]
 800d5ac:	e014      	b.n	800d5d8 <_svfiprintf_r+0x110>
 800d5ae:	eba0 0308 	sub.w	r3, r0, r8
 800d5b2:	fa09 f303 	lsl.w	r3, r9, r3
 800d5b6:	4313      	orrs	r3, r2
 800d5b8:	9304      	str	r3, [sp, #16]
 800d5ba:	46a2      	mov	sl, r4
 800d5bc:	e7d2      	b.n	800d564 <_svfiprintf_r+0x9c>
 800d5be:	9b03      	ldr	r3, [sp, #12]
 800d5c0:	1d19      	adds	r1, r3, #4
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	9103      	str	r1, [sp, #12]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	bfbb      	ittet	lt
 800d5ca:	425b      	neglt	r3, r3
 800d5cc:	f042 0202 	orrlt.w	r2, r2, #2
 800d5d0:	9307      	strge	r3, [sp, #28]
 800d5d2:	9307      	strlt	r3, [sp, #28]
 800d5d4:	bfb8      	it	lt
 800d5d6:	9204      	strlt	r2, [sp, #16]
 800d5d8:	7823      	ldrb	r3, [r4, #0]
 800d5da:	2b2e      	cmp	r3, #46	; 0x2e
 800d5dc:	d10c      	bne.n	800d5f8 <_svfiprintf_r+0x130>
 800d5de:	7863      	ldrb	r3, [r4, #1]
 800d5e0:	2b2a      	cmp	r3, #42	; 0x2a
 800d5e2:	d135      	bne.n	800d650 <_svfiprintf_r+0x188>
 800d5e4:	9b03      	ldr	r3, [sp, #12]
 800d5e6:	1d1a      	adds	r2, r3, #4
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	9203      	str	r2, [sp, #12]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	bfb8      	it	lt
 800d5f0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d5f4:	3402      	adds	r4, #2
 800d5f6:	9305      	str	r3, [sp, #20]
 800d5f8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800d6b8 <_svfiprintf_r+0x1f0>
 800d5fc:	7821      	ldrb	r1, [r4, #0]
 800d5fe:	2203      	movs	r2, #3
 800d600:	4650      	mov	r0, sl
 800d602:	f7f2 fdc5 	bl	8000190 <memchr>
 800d606:	b140      	cbz	r0, 800d61a <_svfiprintf_r+0x152>
 800d608:	2340      	movs	r3, #64	; 0x40
 800d60a:	eba0 000a 	sub.w	r0, r0, sl
 800d60e:	fa03 f000 	lsl.w	r0, r3, r0
 800d612:	9b04      	ldr	r3, [sp, #16]
 800d614:	4303      	orrs	r3, r0
 800d616:	3401      	adds	r4, #1
 800d618:	9304      	str	r3, [sp, #16]
 800d61a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d61e:	4827      	ldr	r0, [pc, #156]	; (800d6bc <_svfiprintf_r+0x1f4>)
 800d620:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d624:	2206      	movs	r2, #6
 800d626:	f7f2 fdb3 	bl	8000190 <memchr>
 800d62a:	2800      	cmp	r0, #0
 800d62c:	d038      	beq.n	800d6a0 <_svfiprintf_r+0x1d8>
 800d62e:	4b24      	ldr	r3, [pc, #144]	; (800d6c0 <_svfiprintf_r+0x1f8>)
 800d630:	bb1b      	cbnz	r3, 800d67a <_svfiprintf_r+0x1b2>
 800d632:	9b03      	ldr	r3, [sp, #12]
 800d634:	3307      	adds	r3, #7
 800d636:	f023 0307 	bic.w	r3, r3, #7
 800d63a:	3308      	adds	r3, #8
 800d63c:	9303      	str	r3, [sp, #12]
 800d63e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d640:	4433      	add	r3, r6
 800d642:	9309      	str	r3, [sp, #36]	; 0x24
 800d644:	e767      	b.n	800d516 <_svfiprintf_r+0x4e>
 800d646:	fb0c 3202 	mla	r2, ip, r2, r3
 800d64a:	460c      	mov	r4, r1
 800d64c:	2001      	movs	r0, #1
 800d64e:	e7a5      	b.n	800d59c <_svfiprintf_r+0xd4>
 800d650:	2300      	movs	r3, #0
 800d652:	3401      	adds	r4, #1
 800d654:	9305      	str	r3, [sp, #20]
 800d656:	4619      	mov	r1, r3
 800d658:	f04f 0c0a 	mov.w	ip, #10
 800d65c:	4620      	mov	r0, r4
 800d65e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d662:	3a30      	subs	r2, #48	; 0x30
 800d664:	2a09      	cmp	r2, #9
 800d666:	d903      	bls.n	800d670 <_svfiprintf_r+0x1a8>
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d0c5      	beq.n	800d5f8 <_svfiprintf_r+0x130>
 800d66c:	9105      	str	r1, [sp, #20]
 800d66e:	e7c3      	b.n	800d5f8 <_svfiprintf_r+0x130>
 800d670:	fb0c 2101 	mla	r1, ip, r1, r2
 800d674:	4604      	mov	r4, r0
 800d676:	2301      	movs	r3, #1
 800d678:	e7f0      	b.n	800d65c <_svfiprintf_r+0x194>
 800d67a:	ab03      	add	r3, sp, #12
 800d67c:	9300      	str	r3, [sp, #0]
 800d67e:	462a      	mov	r2, r5
 800d680:	4b10      	ldr	r3, [pc, #64]	; (800d6c4 <_svfiprintf_r+0x1fc>)
 800d682:	a904      	add	r1, sp, #16
 800d684:	4638      	mov	r0, r7
 800d686:	f7fd fdf5 	bl	800b274 <_printf_float>
 800d68a:	1c42      	adds	r2, r0, #1
 800d68c:	4606      	mov	r6, r0
 800d68e:	d1d6      	bne.n	800d63e <_svfiprintf_r+0x176>
 800d690:	89ab      	ldrh	r3, [r5, #12]
 800d692:	065b      	lsls	r3, r3, #25
 800d694:	f53f af2c 	bmi.w	800d4f0 <_svfiprintf_r+0x28>
 800d698:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d69a:	b01d      	add	sp, #116	; 0x74
 800d69c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6a0:	ab03      	add	r3, sp, #12
 800d6a2:	9300      	str	r3, [sp, #0]
 800d6a4:	462a      	mov	r2, r5
 800d6a6:	4b07      	ldr	r3, [pc, #28]	; (800d6c4 <_svfiprintf_r+0x1fc>)
 800d6a8:	a904      	add	r1, sp, #16
 800d6aa:	4638      	mov	r0, r7
 800d6ac:	f7fe f87a 	bl	800b7a4 <_printf_i>
 800d6b0:	e7eb      	b.n	800d68a <_svfiprintf_r+0x1c2>
 800d6b2:	bf00      	nop
 800d6b4:	0800e934 	.word	0x0800e934
 800d6b8:	0800e93a 	.word	0x0800e93a
 800d6bc:	0800e93e 	.word	0x0800e93e
 800d6c0:	0800b275 	.word	0x0800b275
 800d6c4:	0800d411 	.word	0x0800d411

0800d6c8 <__sfputc_r>:
 800d6c8:	6893      	ldr	r3, [r2, #8]
 800d6ca:	3b01      	subs	r3, #1
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	b410      	push	{r4}
 800d6d0:	6093      	str	r3, [r2, #8]
 800d6d2:	da07      	bge.n	800d6e4 <__sfputc_r+0x1c>
 800d6d4:	6994      	ldr	r4, [r2, #24]
 800d6d6:	42a3      	cmp	r3, r4
 800d6d8:	db01      	blt.n	800d6de <__sfputc_r+0x16>
 800d6da:	290a      	cmp	r1, #10
 800d6dc:	d102      	bne.n	800d6e4 <__sfputc_r+0x1c>
 800d6de:	bc10      	pop	{r4}
 800d6e0:	f000 b95c 	b.w	800d99c <__swbuf_r>
 800d6e4:	6813      	ldr	r3, [r2, #0]
 800d6e6:	1c58      	adds	r0, r3, #1
 800d6e8:	6010      	str	r0, [r2, #0]
 800d6ea:	7019      	strb	r1, [r3, #0]
 800d6ec:	4608      	mov	r0, r1
 800d6ee:	bc10      	pop	{r4}
 800d6f0:	4770      	bx	lr

0800d6f2 <__sfputs_r>:
 800d6f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6f4:	4606      	mov	r6, r0
 800d6f6:	460f      	mov	r7, r1
 800d6f8:	4614      	mov	r4, r2
 800d6fa:	18d5      	adds	r5, r2, r3
 800d6fc:	42ac      	cmp	r4, r5
 800d6fe:	d101      	bne.n	800d704 <__sfputs_r+0x12>
 800d700:	2000      	movs	r0, #0
 800d702:	e007      	b.n	800d714 <__sfputs_r+0x22>
 800d704:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d708:	463a      	mov	r2, r7
 800d70a:	4630      	mov	r0, r6
 800d70c:	f7ff ffdc 	bl	800d6c8 <__sfputc_r>
 800d710:	1c43      	adds	r3, r0, #1
 800d712:	d1f3      	bne.n	800d6fc <__sfputs_r+0xa>
 800d714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d718 <_vfiprintf_r>:
 800d718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d71c:	460d      	mov	r5, r1
 800d71e:	b09d      	sub	sp, #116	; 0x74
 800d720:	4614      	mov	r4, r2
 800d722:	4698      	mov	r8, r3
 800d724:	4606      	mov	r6, r0
 800d726:	b118      	cbz	r0, 800d730 <_vfiprintf_r+0x18>
 800d728:	6983      	ldr	r3, [r0, #24]
 800d72a:	b90b      	cbnz	r3, 800d730 <_vfiprintf_r+0x18>
 800d72c:	f7fd fb94 	bl	800ae58 <__sinit>
 800d730:	4b89      	ldr	r3, [pc, #548]	; (800d958 <_vfiprintf_r+0x240>)
 800d732:	429d      	cmp	r5, r3
 800d734:	d11b      	bne.n	800d76e <_vfiprintf_r+0x56>
 800d736:	6875      	ldr	r5, [r6, #4]
 800d738:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d73a:	07d9      	lsls	r1, r3, #31
 800d73c:	d405      	bmi.n	800d74a <_vfiprintf_r+0x32>
 800d73e:	89ab      	ldrh	r3, [r5, #12]
 800d740:	059a      	lsls	r2, r3, #22
 800d742:	d402      	bmi.n	800d74a <_vfiprintf_r+0x32>
 800d744:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d746:	f7fd fc4a 	bl	800afde <__retarget_lock_acquire_recursive>
 800d74a:	89ab      	ldrh	r3, [r5, #12]
 800d74c:	071b      	lsls	r3, r3, #28
 800d74e:	d501      	bpl.n	800d754 <_vfiprintf_r+0x3c>
 800d750:	692b      	ldr	r3, [r5, #16]
 800d752:	b9eb      	cbnz	r3, 800d790 <_vfiprintf_r+0x78>
 800d754:	4629      	mov	r1, r5
 800d756:	4630      	mov	r0, r6
 800d758:	f000 f972 	bl	800da40 <__swsetup_r>
 800d75c:	b1c0      	cbz	r0, 800d790 <_vfiprintf_r+0x78>
 800d75e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d760:	07dc      	lsls	r4, r3, #31
 800d762:	d50e      	bpl.n	800d782 <_vfiprintf_r+0x6a>
 800d764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d768:	b01d      	add	sp, #116	; 0x74
 800d76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d76e:	4b7b      	ldr	r3, [pc, #492]	; (800d95c <_vfiprintf_r+0x244>)
 800d770:	429d      	cmp	r5, r3
 800d772:	d101      	bne.n	800d778 <_vfiprintf_r+0x60>
 800d774:	68b5      	ldr	r5, [r6, #8]
 800d776:	e7df      	b.n	800d738 <_vfiprintf_r+0x20>
 800d778:	4b79      	ldr	r3, [pc, #484]	; (800d960 <_vfiprintf_r+0x248>)
 800d77a:	429d      	cmp	r5, r3
 800d77c:	bf08      	it	eq
 800d77e:	68f5      	ldreq	r5, [r6, #12]
 800d780:	e7da      	b.n	800d738 <_vfiprintf_r+0x20>
 800d782:	89ab      	ldrh	r3, [r5, #12]
 800d784:	0598      	lsls	r0, r3, #22
 800d786:	d4ed      	bmi.n	800d764 <_vfiprintf_r+0x4c>
 800d788:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d78a:	f7fd fc29 	bl	800afe0 <__retarget_lock_release_recursive>
 800d78e:	e7e9      	b.n	800d764 <_vfiprintf_r+0x4c>
 800d790:	2300      	movs	r3, #0
 800d792:	9309      	str	r3, [sp, #36]	; 0x24
 800d794:	2320      	movs	r3, #32
 800d796:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d79a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d79e:	2330      	movs	r3, #48	; 0x30
 800d7a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d964 <_vfiprintf_r+0x24c>
 800d7a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d7a8:	f04f 0901 	mov.w	r9, #1
 800d7ac:	4623      	mov	r3, r4
 800d7ae:	469a      	mov	sl, r3
 800d7b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7b4:	b10a      	cbz	r2, 800d7ba <_vfiprintf_r+0xa2>
 800d7b6:	2a25      	cmp	r2, #37	; 0x25
 800d7b8:	d1f9      	bne.n	800d7ae <_vfiprintf_r+0x96>
 800d7ba:	ebba 0b04 	subs.w	fp, sl, r4
 800d7be:	d00b      	beq.n	800d7d8 <_vfiprintf_r+0xc0>
 800d7c0:	465b      	mov	r3, fp
 800d7c2:	4622      	mov	r2, r4
 800d7c4:	4629      	mov	r1, r5
 800d7c6:	4630      	mov	r0, r6
 800d7c8:	f7ff ff93 	bl	800d6f2 <__sfputs_r>
 800d7cc:	3001      	adds	r0, #1
 800d7ce:	f000 80aa 	beq.w	800d926 <_vfiprintf_r+0x20e>
 800d7d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d7d4:	445a      	add	r2, fp
 800d7d6:	9209      	str	r2, [sp, #36]	; 0x24
 800d7d8:	f89a 3000 	ldrb.w	r3, [sl]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	f000 80a2 	beq.w	800d926 <_vfiprintf_r+0x20e>
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d7e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d7ec:	f10a 0a01 	add.w	sl, sl, #1
 800d7f0:	9304      	str	r3, [sp, #16]
 800d7f2:	9307      	str	r3, [sp, #28]
 800d7f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d7f8:	931a      	str	r3, [sp, #104]	; 0x68
 800d7fa:	4654      	mov	r4, sl
 800d7fc:	2205      	movs	r2, #5
 800d7fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d802:	4858      	ldr	r0, [pc, #352]	; (800d964 <_vfiprintf_r+0x24c>)
 800d804:	f7f2 fcc4 	bl	8000190 <memchr>
 800d808:	9a04      	ldr	r2, [sp, #16]
 800d80a:	b9d8      	cbnz	r0, 800d844 <_vfiprintf_r+0x12c>
 800d80c:	06d1      	lsls	r1, r2, #27
 800d80e:	bf44      	itt	mi
 800d810:	2320      	movmi	r3, #32
 800d812:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d816:	0713      	lsls	r3, r2, #28
 800d818:	bf44      	itt	mi
 800d81a:	232b      	movmi	r3, #43	; 0x2b
 800d81c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d820:	f89a 3000 	ldrb.w	r3, [sl]
 800d824:	2b2a      	cmp	r3, #42	; 0x2a
 800d826:	d015      	beq.n	800d854 <_vfiprintf_r+0x13c>
 800d828:	9a07      	ldr	r2, [sp, #28]
 800d82a:	4654      	mov	r4, sl
 800d82c:	2000      	movs	r0, #0
 800d82e:	f04f 0c0a 	mov.w	ip, #10
 800d832:	4621      	mov	r1, r4
 800d834:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d838:	3b30      	subs	r3, #48	; 0x30
 800d83a:	2b09      	cmp	r3, #9
 800d83c:	d94e      	bls.n	800d8dc <_vfiprintf_r+0x1c4>
 800d83e:	b1b0      	cbz	r0, 800d86e <_vfiprintf_r+0x156>
 800d840:	9207      	str	r2, [sp, #28]
 800d842:	e014      	b.n	800d86e <_vfiprintf_r+0x156>
 800d844:	eba0 0308 	sub.w	r3, r0, r8
 800d848:	fa09 f303 	lsl.w	r3, r9, r3
 800d84c:	4313      	orrs	r3, r2
 800d84e:	9304      	str	r3, [sp, #16]
 800d850:	46a2      	mov	sl, r4
 800d852:	e7d2      	b.n	800d7fa <_vfiprintf_r+0xe2>
 800d854:	9b03      	ldr	r3, [sp, #12]
 800d856:	1d19      	adds	r1, r3, #4
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	9103      	str	r1, [sp, #12]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	bfbb      	ittet	lt
 800d860:	425b      	neglt	r3, r3
 800d862:	f042 0202 	orrlt.w	r2, r2, #2
 800d866:	9307      	strge	r3, [sp, #28]
 800d868:	9307      	strlt	r3, [sp, #28]
 800d86a:	bfb8      	it	lt
 800d86c:	9204      	strlt	r2, [sp, #16]
 800d86e:	7823      	ldrb	r3, [r4, #0]
 800d870:	2b2e      	cmp	r3, #46	; 0x2e
 800d872:	d10c      	bne.n	800d88e <_vfiprintf_r+0x176>
 800d874:	7863      	ldrb	r3, [r4, #1]
 800d876:	2b2a      	cmp	r3, #42	; 0x2a
 800d878:	d135      	bne.n	800d8e6 <_vfiprintf_r+0x1ce>
 800d87a:	9b03      	ldr	r3, [sp, #12]
 800d87c:	1d1a      	adds	r2, r3, #4
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	9203      	str	r2, [sp, #12]
 800d882:	2b00      	cmp	r3, #0
 800d884:	bfb8      	it	lt
 800d886:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d88a:	3402      	adds	r4, #2
 800d88c:	9305      	str	r3, [sp, #20]
 800d88e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800d968 <_vfiprintf_r+0x250>
 800d892:	7821      	ldrb	r1, [r4, #0]
 800d894:	2203      	movs	r2, #3
 800d896:	4650      	mov	r0, sl
 800d898:	f7f2 fc7a 	bl	8000190 <memchr>
 800d89c:	b140      	cbz	r0, 800d8b0 <_vfiprintf_r+0x198>
 800d89e:	2340      	movs	r3, #64	; 0x40
 800d8a0:	eba0 000a 	sub.w	r0, r0, sl
 800d8a4:	fa03 f000 	lsl.w	r0, r3, r0
 800d8a8:	9b04      	ldr	r3, [sp, #16]
 800d8aa:	4303      	orrs	r3, r0
 800d8ac:	3401      	adds	r4, #1
 800d8ae:	9304      	str	r3, [sp, #16]
 800d8b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8b4:	482d      	ldr	r0, [pc, #180]	; (800d96c <_vfiprintf_r+0x254>)
 800d8b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d8ba:	2206      	movs	r2, #6
 800d8bc:	f7f2 fc68 	bl	8000190 <memchr>
 800d8c0:	2800      	cmp	r0, #0
 800d8c2:	d03f      	beq.n	800d944 <_vfiprintf_r+0x22c>
 800d8c4:	4b2a      	ldr	r3, [pc, #168]	; (800d970 <_vfiprintf_r+0x258>)
 800d8c6:	bb1b      	cbnz	r3, 800d910 <_vfiprintf_r+0x1f8>
 800d8c8:	9b03      	ldr	r3, [sp, #12]
 800d8ca:	3307      	adds	r3, #7
 800d8cc:	f023 0307 	bic.w	r3, r3, #7
 800d8d0:	3308      	adds	r3, #8
 800d8d2:	9303      	str	r3, [sp, #12]
 800d8d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8d6:	443b      	add	r3, r7
 800d8d8:	9309      	str	r3, [sp, #36]	; 0x24
 800d8da:	e767      	b.n	800d7ac <_vfiprintf_r+0x94>
 800d8dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800d8e0:	460c      	mov	r4, r1
 800d8e2:	2001      	movs	r0, #1
 800d8e4:	e7a5      	b.n	800d832 <_vfiprintf_r+0x11a>
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	3401      	adds	r4, #1
 800d8ea:	9305      	str	r3, [sp, #20]
 800d8ec:	4619      	mov	r1, r3
 800d8ee:	f04f 0c0a 	mov.w	ip, #10
 800d8f2:	4620      	mov	r0, r4
 800d8f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8f8:	3a30      	subs	r2, #48	; 0x30
 800d8fa:	2a09      	cmp	r2, #9
 800d8fc:	d903      	bls.n	800d906 <_vfiprintf_r+0x1ee>
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d0c5      	beq.n	800d88e <_vfiprintf_r+0x176>
 800d902:	9105      	str	r1, [sp, #20]
 800d904:	e7c3      	b.n	800d88e <_vfiprintf_r+0x176>
 800d906:	fb0c 2101 	mla	r1, ip, r1, r2
 800d90a:	4604      	mov	r4, r0
 800d90c:	2301      	movs	r3, #1
 800d90e:	e7f0      	b.n	800d8f2 <_vfiprintf_r+0x1da>
 800d910:	ab03      	add	r3, sp, #12
 800d912:	9300      	str	r3, [sp, #0]
 800d914:	462a      	mov	r2, r5
 800d916:	4b17      	ldr	r3, [pc, #92]	; (800d974 <_vfiprintf_r+0x25c>)
 800d918:	a904      	add	r1, sp, #16
 800d91a:	4630      	mov	r0, r6
 800d91c:	f7fd fcaa 	bl	800b274 <_printf_float>
 800d920:	4607      	mov	r7, r0
 800d922:	1c78      	adds	r0, r7, #1
 800d924:	d1d6      	bne.n	800d8d4 <_vfiprintf_r+0x1bc>
 800d926:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d928:	07d9      	lsls	r1, r3, #31
 800d92a:	d405      	bmi.n	800d938 <_vfiprintf_r+0x220>
 800d92c:	89ab      	ldrh	r3, [r5, #12]
 800d92e:	059a      	lsls	r2, r3, #22
 800d930:	d402      	bmi.n	800d938 <_vfiprintf_r+0x220>
 800d932:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d934:	f7fd fb54 	bl	800afe0 <__retarget_lock_release_recursive>
 800d938:	89ab      	ldrh	r3, [r5, #12]
 800d93a:	065b      	lsls	r3, r3, #25
 800d93c:	f53f af12 	bmi.w	800d764 <_vfiprintf_r+0x4c>
 800d940:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d942:	e711      	b.n	800d768 <_vfiprintf_r+0x50>
 800d944:	ab03      	add	r3, sp, #12
 800d946:	9300      	str	r3, [sp, #0]
 800d948:	462a      	mov	r2, r5
 800d94a:	4b0a      	ldr	r3, [pc, #40]	; (800d974 <_vfiprintf_r+0x25c>)
 800d94c:	a904      	add	r1, sp, #16
 800d94e:	4630      	mov	r0, r6
 800d950:	f7fd ff28 	bl	800b7a4 <_printf_i>
 800d954:	e7e4      	b.n	800d920 <_vfiprintf_r+0x208>
 800d956:	bf00      	nop
 800d958:	0800e638 	.word	0x0800e638
 800d95c:	0800e658 	.word	0x0800e658
 800d960:	0800e618 	.word	0x0800e618
 800d964:	0800e934 	.word	0x0800e934
 800d968:	0800e93a 	.word	0x0800e93a
 800d96c:	0800e93e 	.word	0x0800e93e
 800d970:	0800b275 	.word	0x0800b275
 800d974:	0800d6f3 	.word	0x0800d6f3

0800d978 <_read_r>:
 800d978:	b538      	push	{r3, r4, r5, lr}
 800d97a:	4d07      	ldr	r5, [pc, #28]	; (800d998 <_read_r+0x20>)
 800d97c:	4604      	mov	r4, r0
 800d97e:	4608      	mov	r0, r1
 800d980:	4611      	mov	r1, r2
 800d982:	2200      	movs	r2, #0
 800d984:	602a      	str	r2, [r5, #0]
 800d986:	461a      	mov	r2, r3
 800d988:	f7f4 f96d 	bl	8001c66 <_read>
 800d98c:	1c43      	adds	r3, r0, #1
 800d98e:	d102      	bne.n	800d996 <_read_r+0x1e>
 800d990:	682b      	ldr	r3, [r5, #0]
 800d992:	b103      	cbz	r3, 800d996 <_read_r+0x1e>
 800d994:	6023      	str	r3, [r4, #0]
 800d996:	bd38      	pop	{r3, r4, r5, pc}
 800d998:	20001d04 	.word	0x20001d04

0800d99c <__swbuf_r>:
 800d99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d99e:	460e      	mov	r6, r1
 800d9a0:	4614      	mov	r4, r2
 800d9a2:	4605      	mov	r5, r0
 800d9a4:	b118      	cbz	r0, 800d9ae <__swbuf_r+0x12>
 800d9a6:	6983      	ldr	r3, [r0, #24]
 800d9a8:	b90b      	cbnz	r3, 800d9ae <__swbuf_r+0x12>
 800d9aa:	f7fd fa55 	bl	800ae58 <__sinit>
 800d9ae:	4b21      	ldr	r3, [pc, #132]	; (800da34 <__swbuf_r+0x98>)
 800d9b0:	429c      	cmp	r4, r3
 800d9b2:	d12b      	bne.n	800da0c <__swbuf_r+0x70>
 800d9b4:	686c      	ldr	r4, [r5, #4]
 800d9b6:	69a3      	ldr	r3, [r4, #24]
 800d9b8:	60a3      	str	r3, [r4, #8]
 800d9ba:	89a3      	ldrh	r3, [r4, #12]
 800d9bc:	071a      	lsls	r2, r3, #28
 800d9be:	d52f      	bpl.n	800da20 <__swbuf_r+0x84>
 800d9c0:	6923      	ldr	r3, [r4, #16]
 800d9c2:	b36b      	cbz	r3, 800da20 <__swbuf_r+0x84>
 800d9c4:	6923      	ldr	r3, [r4, #16]
 800d9c6:	6820      	ldr	r0, [r4, #0]
 800d9c8:	1ac0      	subs	r0, r0, r3
 800d9ca:	6963      	ldr	r3, [r4, #20]
 800d9cc:	b2f6      	uxtb	r6, r6
 800d9ce:	4283      	cmp	r3, r0
 800d9d0:	4637      	mov	r7, r6
 800d9d2:	dc04      	bgt.n	800d9de <__swbuf_r+0x42>
 800d9d4:	4621      	mov	r1, r4
 800d9d6:	4628      	mov	r0, r5
 800d9d8:	f7ff f8c6 	bl	800cb68 <_fflush_r>
 800d9dc:	bb30      	cbnz	r0, 800da2c <__swbuf_r+0x90>
 800d9de:	68a3      	ldr	r3, [r4, #8]
 800d9e0:	3b01      	subs	r3, #1
 800d9e2:	60a3      	str	r3, [r4, #8]
 800d9e4:	6823      	ldr	r3, [r4, #0]
 800d9e6:	1c5a      	adds	r2, r3, #1
 800d9e8:	6022      	str	r2, [r4, #0]
 800d9ea:	701e      	strb	r6, [r3, #0]
 800d9ec:	6963      	ldr	r3, [r4, #20]
 800d9ee:	3001      	adds	r0, #1
 800d9f0:	4283      	cmp	r3, r0
 800d9f2:	d004      	beq.n	800d9fe <__swbuf_r+0x62>
 800d9f4:	89a3      	ldrh	r3, [r4, #12]
 800d9f6:	07db      	lsls	r3, r3, #31
 800d9f8:	d506      	bpl.n	800da08 <__swbuf_r+0x6c>
 800d9fa:	2e0a      	cmp	r6, #10
 800d9fc:	d104      	bne.n	800da08 <__swbuf_r+0x6c>
 800d9fe:	4621      	mov	r1, r4
 800da00:	4628      	mov	r0, r5
 800da02:	f7ff f8b1 	bl	800cb68 <_fflush_r>
 800da06:	b988      	cbnz	r0, 800da2c <__swbuf_r+0x90>
 800da08:	4638      	mov	r0, r7
 800da0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da0c:	4b0a      	ldr	r3, [pc, #40]	; (800da38 <__swbuf_r+0x9c>)
 800da0e:	429c      	cmp	r4, r3
 800da10:	d101      	bne.n	800da16 <__swbuf_r+0x7a>
 800da12:	68ac      	ldr	r4, [r5, #8]
 800da14:	e7cf      	b.n	800d9b6 <__swbuf_r+0x1a>
 800da16:	4b09      	ldr	r3, [pc, #36]	; (800da3c <__swbuf_r+0xa0>)
 800da18:	429c      	cmp	r4, r3
 800da1a:	bf08      	it	eq
 800da1c:	68ec      	ldreq	r4, [r5, #12]
 800da1e:	e7ca      	b.n	800d9b6 <__swbuf_r+0x1a>
 800da20:	4621      	mov	r1, r4
 800da22:	4628      	mov	r0, r5
 800da24:	f000 f80c 	bl	800da40 <__swsetup_r>
 800da28:	2800      	cmp	r0, #0
 800da2a:	d0cb      	beq.n	800d9c4 <__swbuf_r+0x28>
 800da2c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800da30:	e7ea      	b.n	800da08 <__swbuf_r+0x6c>
 800da32:	bf00      	nop
 800da34:	0800e638 	.word	0x0800e638
 800da38:	0800e658 	.word	0x0800e658
 800da3c:	0800e618 	.word	0x0800e618

0800da40 <__swsetup_r>:
 800da40:	4b32      	ldr	r3, [pc, #200]	; (800db0c <__swsetup_r+0xcc>)
 800da42:	b570      	push	{r4, r5, r6, lr}
 800da44:	681d      	ldr	r5, [r3, #0]
 800da46:	4606      	mov	r6, r0
 800da48:	460c      	mov	r4, r1
 800da4a:	b125      	cbz	r5, 800da56 <__swsetup_r+0x16>
 800da4c:	69ab      	ldr	r3, [r5, #24]
 800da4e:	b913      	cbnz	r3, 800da56 <__swsetup_r+0x16>
 800da50:	4628      	mov	r0, r5
 800da52:	f7fd fa01 	bl	800ae58 <__sinit>
 800da56:	4b2e      	ldr	r3, [pc, #184]	; (800db10 <__swsetup_r+0xd0>)
 800da58:	429c      	cmp	r4, r3
 800da5a:	d10f      	bne.n	800da7c <__swsetup_r+0x3c>
 800da5c:	686c      	ldr	r4, [r5, #4]
 800da5e:	89a3      	ldrh	r3, [r4, #12]
 800da60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800da64:	0719      	lsls	r1, r3, #28
 800da66:	d42c      	bmi.n	800dac2 <__swsetup_r+0x82>
 800da68:	06dd      	lsls	r5, r3, #27
 800da6a:	d411      	bmi.n	800da90 <__swsetup_r+0x50>
 800da6c:	2309      	movs	r3, #9
 800da6e:	6033      	str	r3, [r6, #0]
 800da70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800da74:	81a3      	strh	r3, [r4, #12]
 800da76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da7a:	e03e      	b.n	800dafa <__swsetup_r+0xba>
 800da7c:	4b25      	ldr	r3, [pc, #148]	; (800db14 <__swsetup_r+0xd4>)
 800da7e:	429c      	cmp	r4, r3
 800da80:	d101      	bne.n	800da86 <__swsetup_r+0x46>
 800da82:	68ac      	ldr	r4, [r5, #8]
 800da84:	e7eb      	b.n	800da5e <__swsetup_r+0x1e>
 800da86:	4b24      	ldr	r3, [pc, #144]	; (800db18 <__swsetup_r+0xd8>)
 800da88:	429c      	cmp	r4, r3
 800da8a:	bf08      	it	eq
 800da8c:	68ec      	ldreq	r4, [r5, #12]
 800da8e:	e7e6      	b.n	800da5e <__swsetup_r+0x1e>
 800da90:	0758      	lsls	r0, r3, #29
 800da92:	d512      	bpl.n	800daba <__swsetup_r+0x7a>
 800da94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800da96:	b141      	cbz	r1, 800daaa <__swsetup_r+0x6a>
 800da98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800da9c:	4299      	cmp	r1, r3
 800da9e:	d002      	beq.n	800daa6 <__swsetup_r+0x66>
 800daa0:	4630      	mov	r0, r6
 800daa2:	f7ff fc6b 	bl	800d37c <_free_r>
 800daa6:	2300      	movs	r3, #0
 800daa8:	6363      	str	r3, [r4, #52]	; 0x34
 800daaa:	89a3      	ldrh	r3, [r4, #12]
 800daac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dab0:	81a3      	strh	r3, [r4, #12]
 800dab2:	2300      	movs	r3, #0
 800dab4:	6063      	str	r3, [r4, #4]
 800dab6:	6923      	ldr	r3, [r4, #16]
 800dab8:	6023      	str	r3, [r4, #0]
 800daba:	89a3      	ldrh	r3, [r4, #12]
 800dabc:	f043 0308 	orr.w	r3, r3, #8
 800dac0:	81a3      	strh	r3, [r4, #12]
 800dac2:	6923      	ldr	r3, [r4, #16]
 800dac4:	b94b      	cbnz	r3, 800dada <__swsetup_r+0x9a>
 800dac6:	89a3      	ldrh	r3, [r4, #12]
 800dac8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dacc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dad0:	d003      	beq.n	800dada <__swsetup_r+0x9a>
 800dad2:	4621      	mov	r1, r4
 800dad4:	4630      	mov	r0, r6
 800dad6:	f000 f84d 	bl	800db74 <__smakebuf_r>
 800dada:	89a0      	ldrh	r0, [r4, #12]
 800dadc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dae0:	f010 0301 	ands.w	r3, r0, #1
 800dae4:	d00a      	beq.n	800dafc <__swsetup_r+0xbc>
 800dae6:	2300      	movs	r3, #0
 800dae8:	60a3      	str	r3, [r4, #8]
 800daea:	6963      	ldr	r3, [r4, #20]
 800daec:	425b      	negs	r3, r3
 800daee:	61a3      	str	r3, [r4, #24]
 800daf0:	6923      	ldr	r3, [r4, #16]
 800daf2:	b943      	cbnz	r3, 800db06 <__swsetup_r+0xc6>
 800daf4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800daf8:	d1ba      	bne.n	800da70 <__swsetup_r+0x30>
 800dafa:	bd70      	pop	{r4, r5, r6, pc}
 800dafc:	0781      	lsls	r1, r0, #30
 800dafe:	bf58      	it	pl
 800db00:	6963      	ldrpl	r3, [r4, #20]
 800db02:	60a3      	str	r3, [r4, #8]
 800db04:	e7f4      	b.n	800daf0 <__swsetup_r+0xb0>
 800db06:	2000      	movs	r0, #0
 800db08:	e7f7      	b.n	800dafa <__swsetup_r+0xba>
 800db0a:	bf00      	nop
 800db0c:	20000010 	.word	0x20000010
 800db10:	0800e638 	.word	0x0800e638
 800db14:	0800e658 	.word	0x0800e658
 800db18:	0800e618 	.word	0x0800e618

0800db1c <abort>:
 800db1c:	b508      	push	{r3, lr}
 800db1e:	2006      	movs	r0, #6
 800db20:	f000 f8ec 	bl	800dcfc <raise>
 800db24:	2001      	movs	r0, #1
 800db26:	f7f4 f894 	bl	8001c52 <_exit>

0800db2a <__swhatbuf_r>:
 800db2a:	b570      	push	{r4, r5, r6, lr}
 800db2c:	460e      	mov	r6, r1
 800db2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db32:	2900      	cmp	r1, #0
 800db34:	b096      	sub	sp, #88	; 0x58
 800db36:	4614      	mov	r4, r2
 800db38:	461d      	mov	r5, r3
 800db3a:	da08      	bge.n	800db4e <__swhatbuf_r+0x24>
 800db3c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800db40:	2200      	movs	r2, #0
 800db42:	602a      	str	r2, [r5, #0]
 800db44:	061a      	lsls	r2, r3, #24
 800db46:	d410      	bmi.n	800db6a <__swhatbuf_r+0x40>
 800db48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db4c:	e00e      	b.n	800db6c <__swhatbuf_r+0x42>
 800db4e:	466a      	mov	r2, sp
 800db50:	f000 f8fe 	bl	800dd50 <_fstat_r>
 800db54:	2800      	cmp	r0, #0
 800db56:	dbf1      	blt.n	800db3c <__swhatbuf_r+0x12>
 800db58:	9a01      	ldr	r2, [sp, #4]
 800db5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800db5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800db62:	425a      	negs	r2, r3
 800db64:	415a      	adcs	r2, r3
 800db66:	602a      	str	r2, [r5, #0]
 800db68:	e7ee      	b.n	800db48 <__swhatbuf_r+0x1e>
 800db6a:	2340      	movs	r3, #64	; 0x40
 800db6c:	2000      	movs	r0, #0
 800db6e:	6023      	str	r3, [r4, #0]
 800db70:	b016      	add	sp, #88	; 0x58
 800db72:	bd70      	pop	{r4, r5, r6, pc}

0800db74 <__smakebuf_r>:
 800db74:	898b      	ldrh	r3, [r1, #12]
 800db76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800db78:	079d      	lsls	r5, r3, #30
 800db7a:	4606      	mov	r6, r0
 800db7c:	460c      	mov	r4, r1
 800db7e:	d507      	bpl.n	800db90 <__smakebuf_r+0x1c>
 800db80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800db84:	6023      	str	r3, [r4, #0]
 800db86:	6123      	str	r3, [r4, #16]
 800db88:	2301      	movs	r3, #1
 800db8a:	6163      	str	r3, [r4, #20]
 800db8c:	b002      	add	sp, #8
 800db8e:	bd70      	pop	{r4, r5, r6, pc}
 800db90:	ab01      	add	r3, sp, #4
 800db92:	466a      	mov	r2, sp
 800db94:	f7ff ffc9 	bl	800db2a <__swhatbuf_r>
 800db98:	9900      	ldr	r1, [sp, #0]
 800db9a:	4605      	mov	r5, r0
 800db9c:	4630      	mov	r0, r6
 800db9e:	f7fd fa57 	bl	800b050 <_malloc_r>
 800dba2:	b948      	cbnz	r0, 800dbb8 <__smakebuf_r+0x44>
 800dba4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dba8:	059a      	lsls	r2, r3, #22
 800dbaa:	d4ef      	bmi.n	800db8c <__smakebuf_r+0x18>
 800dbac:	f023 0303 	bic.w	r3, r3, #3
 800dbb0:	f043 0302 	orr.w	r3, r3, #2
 800dbb4:	81a3      	strh	r3, [r4, #12]
 800dbb6:	e7e3      	b.n	800db80 <__smakebuf_r+0xc>
 800dbb8:	4b0d      	ldr	r3, [pc, #52]	; (800dbf0 <__smakebuf_r+0x7c>)
 800dbba:	62b3      	str	r3, [r6, #40]	; 0x28
 800dbbc:	89a3      	ldrh	r3, [r4, #12]
 800dbbe:	6020      	str	r0, [r4, #0]
 800dbc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dbc4:	81a3      	strh	r3, [r4, #12]
 800dbc6:	9b00      	ldr	r3, [sp, #0]
 800dbc8:	6163      	str	r3, [r4, #20]
 800dbca:	9b01      	ldr	r3, [sp, #4]
 800dbcc:	6120      	str	r0, [r4, #16]
 800dbce:	b15b      	cbz	r3, 800dbe8 <__smakebuf_r+0x74>
 800dbd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dbd4:	4630      	mov	r0, r6
 800dbd6:	f000 f8cd 	bl	800dd74 <_isatty_r>
 800dbda:	b128      	cbz	r0, 800dbe8 <__smakebuf_r+0x74>
 800dbdc:	89a3      	ldrh	r3, [r4, #12]
 800dbde:	f023 0303 	bic.w	r3, r3, #3
 800dbe2:	f043 0301 	orr.w	r3, r3, #1
 800dbe6:	81a3      	strh	r3, [r4, #12]
 800dbe8:	89a0      	ldrh	r0, [r4, #12]
 800dbea:	4305      	orrs	r5, r0
 800dbec:	81a5      	strh	r5, [r4, #12]
 800dbee:	e7cd      	b.n	800db8c <__smakebuf_r+0x18>
 800dbf0:	0800adf1 	.word	0x0800adf1

0800dbf4 <__ascii_mbtowc>:
 800dbf4:	b082      	sub	sp, #8
 800dbf6:	b901      	cbnz	r1, 800dbfa <__ascii_mbtowc+0x6>
 800dbf8:	a901      	add	r1, sp, #4
 800dbfa:	b142      	cbz	r2, 800dc0e <__ascii_mbtowc+0x1a>
 800dbfc:	b14b      	cbz	r3, 800dc12 <__ascii_mbtowc+0x1e>
 800dbfe:	7813      	ldrb	r3, [r2, #0]
 800dc00:	600b      	str	r3, [r1, #0]
 800dc02:	7812      	ldrb	r2, [r2, #0]
 800dc04:	1e10      	subs	r0, r2, #0
 800dc06:	bf18      	it	ne
 800dc08:	2001      	movne	r0, #1
 800dc0a:	b002      	add	sp, #8
 800dc0c:	4770      	bx	lr
 800dc0e:	4610      	mov	r0, r2
 800dc10:	e7fb      	b.n	800dc0a <__ascii_mbtowc+0x16>
 800dc12:	f06f 0001 	mvn.w	r0, #1
 800dc16:	e7f8      	b.n	800dc0a <__ascii_mbtowc+0x16>

0800dc18 <memmove>:
 800dc18:	4288      	cmp	r0, r1
 800dc1a:	b510      	push	{r4, lr}
 800dc1c:	eb01 0402 	add.w	r4, r1, r2
 800dc20:	d902      	bls.n	800dc28 <memmove+0x10>
 800dc22:	4284      	cmp	r4, r0
 800dc24:	4623      	mov	r3, r4
 800dc26:	d807      	bhi.n	800dc38 <memmove+0x20>
 800dc28:	1e43      	subs	r3, r0, #1
 800dc2a:	42a1      	cmp	r1, r4
 800dc2c:	d008      	beq.n	800dc40 <memmove+0x28>
 800dc2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc32:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dc36:	e7f8      	b.n	800dc2a <memmove+0x12>
 800dc38:	4402      	add	r2, r0
 800dc3a:	4601      	mov	r1, r0
 800dc3c:	428a      	cmp	r2, r1
 800dc3e:	d100      	bne.n	800dc42 <memmove+0x2a>
 800dc40:	bd10      	pop	{r4, pc}
 800dc42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dc46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dc4a:	e7f7      	b.n	800dc3c <memmove+0x24>

0800dc4c <_realloc_r>:
 800dc4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc50:	4680      	mov	r8, r0
 800dc52:	4614      	mov	r4, r2
 800dc54:	460e      	mov	r6, r1
 800dc56:	b921      	cbnz	r1, 800dc62 <_realloc_r+0x16>
 800dc58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc5c:	4611      	mov	r1, r2
 800dc5e:	f7fd b9f7 	b.w	800b050 <_malloc_r>
 800dc62:	b92a      	cbnz	r2, 800dc70 <_realloc_r+0x24>
 800dc64:	f7ff fb8a 	bl	800d37c <_free_r>
 800dc68:	4625      	mov	r5, r4
 800dc6a:	4628      	mov	r0, r5
 800dc6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc70:	f000 f890 	bl	800dd94 <_malloc_usable_size_r>
 800dc74:	4284      	cmp	r4, r0
 800dc76:	4607      	mov	r7, r0
 800dc78:	d802      	bhi.n	800dc80 <_realloc_r+0x34>
 800dc7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dc7e:	d812      	bhi.n	800dca6 <_realloc_r+0x5a>
 800dc80:	4621      	mov	r1, r4
 800dc82:	4640      	mov	r0, r8
 800dc84:	f7fd f9e4 	bl	800b050 <_malloc_r>
 800dc88:	4605      	mov	r5, r0
 800dc8a:	2800      	cmp	r0, #0
 800dc8c:	d0ed      	beq.n	800dc6a <_realloc_r+0x1e>
 800dc8e:	42bc      	cmp	r4, r7
 800dc90:	4622      	mov	r2, r4
 800dc92:	4631      	mov	r1, r6
 800dc94:	bf28      	it	cs
 800dc96:	463a      	movcs	r2, r7
 800dc98:	f7fd f9a3 	bl	800afe2 <memcpy>
 800dc9c:	4631      	mov	r1, r6
 800dc9e:	4640      	mov	r0, r8
 800dca0:	f7ff fb6c 	bl	800d37c <_free_r>
 800dca4:	e7e1      	b.n	800dc6a <_realloc_r+0x1e>
 800dca6:	4635      	mov	r5, r6
 800dca8:	e7df      	b.n	800dc6a <_realloc_r+0x1e>

0800dcaa <_raise_r>:
 800dcaa:	291f      	cmp	r1, #31
 800dcac:	b538      	push	{r3, r4, r5, lr}
 800dcae:	4604      	mov	r4, r0
 800dcb0:	460d      	mov	r5, r1
 800dcb2:	d904      	bls.n	800dcbe <_raise_r+0x14>
 800dcb4:	2316      	movs	r3, #22
 800dcb6:	6003      	str	r3, [r0, #0]
 800dcb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dcbc:	bd38      	pop	{r3, r4, r5, pc}
 800dcbe:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dcc0:	b112      	cbz	r2, 800dcc8 <_raise_r+0x1e>
 800dcc2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dcc6:	b94b      	cbnz	r3, 800dcdc <_raise_r+0x32>
 800dcc8:	4620      	mov	r0, r4
 800dcca:	f000 f831 	bl	800dd30 <_getpid_r>
 800dcce:	462a      	mov	r2, r5
 800dcd0:	4601      	mov	r1, r0
 800dcd2:	4620      	mov	r0, r4
 800dcd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dcd8:	f000 b818 	b.w	800dd0c <_kill_r>
 800dcdc:	2b01      	cmp	r3, #1
 800dcde:	d00a      	beq.n	800dcf6 <_raise_r+0x4c>
 800dce0:	1c59      	adds	r1, r3, #1
 800dce2:	d103      	bne.n	800dcec <_raise_r+0x42>
 800dce4:	2316      	movs	r3, #22
 800dce6:	6003      	str	r3, [r0, #0]
 800dce8:	2001      	movs	r0, #1
 800dcea:	e7e7      	b.n	800dcbc <_raise_r+0x12>
 800dcec:	2400      	movs	r4, #0
 800dcee:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dcf2:	4628      	mov	r0, r5
 800dcf4:	4798      	blx	r3
 800dcf6:	2000      	movs	r0, #0
 800dcf8:	e7e0      	b.n	800dcbc <_raise_r+0x12>
	...

0800dcfc <raise>:
 800dcfc:	4b02      	ldr	r3, [pc, #8]	; (800dd08 <raise+0xc>)
 800dcfe:	4601      	mov	r1, r0
 800dd00:	6818      	ldr	r0, [r3, #0]
 800dd02:	f7ff bfd2 	b.w	800dcaa <_raise_r>
 800dd06:	bf00      	nop
 800dd08:	20000010 	.word	0x20000010

0800dd0c <_kill_r>:
 800dd0c:	b538      	push	{r3, r4, r5, lr}
 800dd0e:	4d07      	ldr	r5, [pc, #28]	; (800dd2c <_kill_r+0x20>)
 800dd10:	2300      	movs	r3, #0
 800dd12:	4604      	mov	r4, r0
 800dd14:	4608      	mov	r0, r1
 800dd16:	4611      	mov	r1, r2
 800dd18:	602b      	str	r3, [r5, #0]
 800dd1a:	f7f3 ff8a 	bl	8001c32 <_kill>
 800dd1e:	1c43      	adds	r3, r0, #1
 800dd20:	d102      	bne.n	800dd28 <_kill_r+0x1c>
 800dd22:	682b      	ldr	r3, [r5, #0]
 800dd24:	b103      	cbz	r3, 800dd28 <_kill_r+0x1c>
 800dd26:	6023      	str	r3, [r4, #0]
 800dd28:	bd38      	pop	{r3, r4, r5, pc}
 800dd2a:	bf00      	nop
 800dd2c:	20001d04 	.word	0x20001d04

0800dd30 <_getpid_r>:
 800dd30:	f7f3 bf78 	b.w	8001c24 <_getpid>

0800dd34 <__ascii_wctomb>:
 800dd34:	4603      	mov	r3, r0
 800dd36:	4608      	mov	r0, r1
 800dd38:	b141      	cbz	r1, 800dd4c <__ascii_wctomb+0x18>
 800dd3a:	2aff      	cmp	r2, #255	; 0xff
 800dd3c:	d904      	bls.n	800dd48 <__ascii_wctomb+0x14>
 800dd3e:	228a      	movs	r2, #138	; 0x8a
 800dd40:	601a      	str	r2, [r3, #0]
 800dd42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dd46:	4770      	bx	lr
 800dd48:	700a      	strb	r2, [r1, #0]
 800dd4a:	2001      	movs	r0, #1
 800dd4c:	4770      	bx	lr
	...

0800dd50 <_fstat_r>:
 800dd50:	b538      	push	{r3, r4, r5, lr}
 800dd52:	4d07      	ldr	r5, [pc, #28]	; (800dd70 <_fstat_r+0x20>)
 800dd54:	2300      	movs	r3, #0
 800dd56:	4604      	mov	r4, r0
 800dd58:	4608      	mov	r0, r1
 800dd5a:	4611      	mov	r1, r2
 800dd5c:	602b      	str	r3, [r5, #0]
 800dd5e:	f7f3 ffc6 	bl	8001cee <_fstat>
 800dd62:	1c43      	adds	r3, r0, #1
 800dd64:	d102      	bne.n	800dd6c <_fstat_r+0x1c>
 800dd66:	682b      	ldr	r3, [r5, #0]
 800dd68:	b103      	cbz	r3, 800dd6c <_fstat_r+0x1c>
 800dd6a:	6023      	str	r3, [r4, #0]
 800dd6c:	bd38      	pop	{r3, r4, r5, pc}
 800dd6e:	bf00      	nop
 800dd70:	20001d04 	.word	0x20001d04

0800dd74 <_isatty_r>:
 800dd74:	b538      	push	{r3, r4, r5, lr}
 800dd76:	4d06      	ldr	r5, [pc, #24]	; (800dd90 <_isatty_r+0x1c>)
 800dd78:	2300      	movs	r3, #0
 800dd7a:	4604      	mov	r4, r0
 800dd7c:	4608      	mov	r0, r1
 800dd7e:	602b      	str	r3, [r5, #0]
 800dd80:	f7f3 ffc4 	bl	8001d0c <_isatty>
 800dd84:	1c43      	adds	r3, r0, #1
 800dd86:	d102      	bne.n	800dd8e <_isatty_r+0x1a>
 800dd88:	682b      	ldr	r3, [r5, #0]
 800dd8a:	b103      	cbz	r3, 800dd8e <_isatty_r+0x1a>
 800dd8c:	6023      	str	r3, [r4, #0]
 800dd8e:	bd38      	pop	{r3, r4, r5, pc}
 800dd90:	20001d04 	.word	0x20001d04

0800dd94 <_malloc_usable_size_r>:
 800dd94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd98:	1f18      	subs	r0, r3, #4
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	bfbc      	itt	lt
 800dd9e:	580b      	ldrlt	r3, [r1, r0]
 800dda0:	18c0      	addlt	r0, r0, r3
 800dda2:	4770      	bx	lr

0800dda4 <_init>:
 800dda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dda6:	bf00      	nop
 800dda8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddaa:	bc08      	pop	{r3}
 800ddac:	469e      	mov	lr, r3
 800ddae:	4770      	bx	lr

0800ddb0 <_fini>:
 800ddb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddb2:	bf00      	nop
 800ddb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddb6:	bc08      	pop	{r3}
 800ddb8:	469e      	mov	lr, r3
 800ddba:	4770      	bx	lr

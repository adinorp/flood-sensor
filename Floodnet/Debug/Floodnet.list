
Floodnet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a81c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a70  0800a960  0800a960  0001a960  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3d0  0800b3d0  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800b3d0  0800b3d0  0001b3d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3d8  0800b3d8  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3d8  0800b3d8  0001b3d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b3dc  0800b3dc  0001b3dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  0800b3e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000548  200000ac  0800b48c  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005f4  0800b48c  000205f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002195d  00000000  00000000  000200d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004537  00000000  00000000  00041a33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002040  00000000  00000000  00045f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e28  00000000  00000000  00047fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021912  00000000  00000000  00049dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027216  00000000  00000000  0006b6ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c29b0  00000000  00000000  00092900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001552b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000982c  00000000  00000000  00155300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000ac 	.word	0x200000ac
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a944 	.word	0x0800a944

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000b0 	.word	0x200000b0
 800017c:	0800a944 	.word	0x0800a944

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2uiz>:
 8000b08:	004a      	lsls	r2, r1, #1
 8000b0a:	d211      	bcs.n	8000b30 <__aeabi_d2uiz+0x28>
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d211      	bcs.n	8000b36 <__aeabi_d2uiz+0x2e>
 8000b12:	d50d      	bpl.n	8000b30 <__aeabi_d2uiz+0x28>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d40e      	bmi.n	8000b3c <__aeabi_d2uiz+0x34>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_d2uiz+0x3a>
 8000b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0000 	mov.w	r0, #0
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_frsub>:
 8000b48:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b4c:	e002      	b.n	8000b54 <__addsf3>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_fsub>:
 8000b50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b54 <__addsf3>:
 8000b54:	0042      	lsls	r2, r0, #1
 8000b56:	bf1f      	itttt	ne
 8000b58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b5c:	ea92 0f03 	teqne	r2, r3
 8000b60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b68:	d06a      	beq.n	8000c40 <__addsf3+0xec>
 8000b6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b72:	bfc1      	itttt	gt
 8000b74:	18d2      	addgt	r2, r2, r3
 8000b76:	4041      	eorgt	r1, r0
 8000b78:	4048      	eorgt	r0, r1
 8000b7a:	4041      	eorgt	r1, r0
 8000b7c:	bfb8      	it	lt
 8000b7e:	425b      	neglt	r3, r3
 8000b80:	2b19      	cmp	r3, #25
 8000b82:	bf88      	it	hi
 8000b84:	4770      	bxhi	lr
 8000b86:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b9e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4249      	negne	r1, r1
 8000ba6:	ea92 0f03 	teq	r2, r3
 8000baa:	d03f      	beq.n	8000c2c <__addsf3+0xd8>
 8000bac:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bb4:	eb10 000c 	adds.w	r0, r0, ip
 8000bb8:	f1c3 0320 	rsb	r3, r3, #32
 8000bbc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bc4:	d502      	bpl.n	8000bcc <__addsf3+0x78>
 8000bc6:	4249      	negs	r1, r1
 8000bc8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bcc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd0:	d313      	bcc.n	8000bfa <__addsf3+0xa6>
 8000bd2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bd6:	d306      	bcc.n	8000be6 <__addsf3+0x92>
 8000bd8:	0840      	lsrs	r0, r0, #1
 8000bda:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bde:	f102 0201 	add.w	r2, r2, #1
 8000be2:	2afe      	cmp	r2, #254	; 0xfe
 8000be4:	d251      	bcs.n	8000c8a <__addsf3+0x136>
 8000be6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bee:	bf08      	it	eq
 8000bf0:	f020 0001 	biceq.w	r0, r0, #1
 8000bf4:	ea40 0003 	orr.w	r0, r0, r3
 8000bf8:	4770      	bx	lr
 8000bfa:	0049      	lsls	r1, r1, #1
 8000bfc:	eb40 0000 	adc.w	r0, r0, r0
 8000c00:	3a01      	subs	r2, #1
 8000c02:	bf28      	it	cs
 8000c04:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c08:	d2ed      	bcs.n	8000be6 <__addsf3+0x92>
 8000c0a:	fab0 fc80 	clz	ip, r0
 8000c0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c12:	ebb2 020c 	subs.w	r2, r2, ip
 8000c16:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c1a:	bfaa      	itet	ge
 8000c1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c20:	4252      	neglt	r2, r2
 8000c22:	4318      	orrge	r0, r3
 8000c24:	bfbc      	itt	lt
 8000c26:	40d0      	lsrlt	r0, r2
 8000c28:	4318      	orrlt	r0, r3
 8000c2a:	4770      	bx	lr
 8000c2c:	f092 0f00 	teq	r2, #0
 8000c30:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c34:	bf06      	itte	eq
 8000c36:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c3a:	3201      	addeq	r2, #1
 8000c3c:	3b01      	subne	r3, #1
 8000c3e:	e7b5      	b.n	8000bac <__addsf3+0x58>
 8000c40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c48:	bf18      	it	ne
 8000c4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c4e:	d021      	beq.n	8000c94 <__addsf3+0x140>
 8000c50:	ea92 0f03 	teq	r2, r3
 8000c54:	d004      	beq.n	8000c60 <__addsf3+0x10c>
 8000c56:	f092 0f00 	teq	r2, #0
 8000c5a:	bf08      	it	eq
 8000c5c:	4608      	moveq	r0, r1
 8000c5e:	4770      	bx	lr
 8000c60:	ea90 0f01 	teq	r0, r1
 8000c64:	bf1c      	itt	ne
 8000c66:	2000      	movne	r0, #0
 8000c68:	4770      	bxne	lr
 8000c6a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c6e:	d104      	bne.n	8000c7a <__addsf3+0x126>
 8000c70:	0040      	lsls	r0, r0, #1
 8000c72:	bf28      	it	cs
 8000c74:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c78:	4770      	bx	lr
 8000c7a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c7e:	bf3c      	itt	cc
 8000c80:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bxcc	lr
 8000c86:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c8a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c92:	4770      	bx	lr
 8000c94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c98:	bf16      	itet	ne
 8000c9a:	4608      	movne	r0, r1
 8000c9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca0:	4601      	movne	r1, r0
 8000ca2:	0242      	lsls	r2, r0, #9
 8000ca4:	bf06      	itte	eq
 8000ca6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000caa:	ea90 0f01 	teqeq	r0, r1
 8000cae:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cb2:	4770      	bx	lr

08000cb4 <__aeabi_ui2f>:
 8000cb4:	f04f 0300 	mov.w	r3, #0
 8000cb8:	e004      	b.n	8000cc4 <__aeabi_i2f+0x8>
 8000cba:	bf00      	nop

08000cbc <__aeabi_i2f>:
 8000cbc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc0:	bf48      	it	mi
 8000cc2:	4240      	negmi	r0, r0
 8000cc4:	ea5f 0c00 	movs.w	ip, r0
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd0:	4601      	mov	r1, r0
 8000cd2:	f04f 0000 	mov.w	r0, #0
 8000cd6:	e01c      	b.n	8000d12 <__aeabi_l2f+0x2a>

08000cd8 <__aeabi_ul2f>:
 8000cd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cdc:	bf08      	it	eq
 8000cde:	4770      	bxeq	lr
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	e00a      	b.n	8000cfc <__aeabi_l2f+0x14>
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_l2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cf4:	d502      	bpl.n	8000cfc <__aeabi_l2f+0x14>
 8000cf6:	4240      	negs	r0, r0
 8000cf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cfc:	ea5f 0c01 	movs.w	ip, r1
 8000d00:	bf02      	ittt	eq
 8000d02:	4684      	moveq	ip, r0
 8000d04:	4601      	moveq	r1, r0
 8000d06:	2000      	moveq	r0, #0
 8000d08:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d0c:	bf08      	it	eq
 8000d0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d12:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d16:	fabc f28c 	clz	r2, ip
 8000d1a:	3a08      	subs	r2, #8
 8000d1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d20:	db10      	blt.n	8000d44 <__aeabi_l2f+0x5c>
 8000d22:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d26:	4463      	add	r3, ip
 8000d28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d34:	fa20 f202 	lsr.w	r2, r0, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	f020 0001 	biceq.w	r0, r0, #1
 8000d42:	4770      	bx	lr
 8000d44:	f102 0220 	add.w	r2, r2, #32
 8000d48:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d54:	fa21 f202 	lsr.w	r2, r1, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d62:	4770      	bx	lr

08000d64 <__aeabi_f2uiz>:
 8000d64:	0042      	lsls	r2, r0, #1
 8000d66:	d20e      	bcs.n	8000d86 <__aeabi_f2uiz+0x22>
 8000d68:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d6c:	d30b      	bcc.n	8000d86 <__aeabi_f2uiz+0x22>
 8000d6e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d72:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d76:	d409      	bmi.n	8000d8c <__aeabi_f2uiz+0x28>
 8000d78:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d80:	fa23 f002 	lsr.w	r0, r3, r2
 8000d84:	4770      	bx	lr
 8000d86:	f04f 0000 	mov.w	r0, #0
 8000d8a:	4770      	bx	lr
 8000d8c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d90:	d101      	bne.n	8000d96 <__aeabi_f2uiz+0x32>
 8000d92:	0242      	lsls	r2, r0, #9
 8000d94:	d102      	bne.n	8000d9c <__aeabi_f2uiz+0x38>
 8000d96:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9a:	4770      	bx	lr
 8000d9c:	f04f 0000 	mov.w	r0, #0
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop

08000da4 <__aeabi_uldivmod>:
 8000da4:	b953      	cbnz	r3, 8000dbc <__aeabi_uldivmod+0x18>
 8000da6:	b94a      	cbnz	r2, 8000dbc <__aeabi_uldivmod+0x18>
 8000da8:	2900      	cmp	r1, #0
 8000daa:	bf08      	it	eq
 8000dac:	2800      	cmpeq	r0, #0
 8000dae:	bf1c      	itt	ne
 8000db0:	f04f 31ff 	movne.w	r1, #4294967295
 8000db4:	f04f 30ff 	movne.w	r0, #4294967295
 8000db8:	f000 b974 	b.w	80010a4 <__aeabi_idiv0>
 8000dbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dc4:	f000 f806 	bl	8000dd4 <__udivmoddi4>
 8000dc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dd0:	b004      	add	sp, #16
 8000dd2:	4770      	bx	lr

08000dd4 <__udivmoddi4>:
 8000dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd8:	9e08      	ldr	r6, [sp, #32]
 8000dda:	460d      	mov	r5, r1
 8000ddc:	4604      	mov	r4, r0
 8000dde:	4688      	mov	r8, r1
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d14d      	bne.n	8000e80 <__udivmoddi4+0xac>
 8000de4:	428a      	cmp	r2, r1
 8000de6:	4694      	mov	ip, r2
 8000de8:	d968      	bls.n	8000ebc <__udivmoddi4+0xe8>
 8000dea:	fab2 f282 	clz	r2, r2
 8000dee:	b152      	cbz	r2, 8000e06 <__udivmoddi4+0x32>
 8000df0:	fa01 f302 	lsl.w	r3, r1, r2
 8000df4:	f1c2 0120 	rsb	r1, r2, #32
 8000df8:	fa20 f101 	lsr.w	r1, r0, r1
 8000dfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e00:	ea41 0803 	orr.w	r8, r1, r3
 8000e04:	4094      	lsls	r4, r2
 8000e06:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000e0a:	0c21      	lsrs	r1, r4, #16
 8000e0c:	fbb8 fef5 	udiv	lr, r8, r5
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	fb05 831e 	mls	r3, r5, lr, r8
 8000e18:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e1c:	fb0e f107 	mul.w	r1, lr, r7
 8000e20:	4299      	cmp	r1, r3
 8000e22:	d90b      	bls.n	8000e3c <__udivmoddi4+0x68>
 8000e24:	eb1c 0303 	adds.w	r3, ip, r3
 8000e28:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000e2c:	f080 811e 	bcs.w	800106c <__udivmoddi4+0x298>
 8000e30:	4299      	cmp	r1, r3
 8000e32:	f240 811b 	bls.w	800106c <__udivmoddi4+0x298>
 8000e36:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb3 f0f5 	udiv	r0, r3, r5
 8000e44:	fb05 3310 	mls	r3, r5, r0, r3
 8000e48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e4c:	fb00 f707 	mul.w	r7, r0, r7
 8000e50:	42a7      	cmp	r7, r4
 8000e52:	d90a      	bls.n	8000e6a <__udivmoddi4+0x96>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5c:	f080 8108 	bcs.w	8001070 <__udivmoddi4+0x29c>
 8000e60:	42a7      	cmp	r7, r4
 8000e62:	f240 8105 	bls.w	8001070 <__udivmoddi4+0x29c>
 8000e66:	4464      	add	r4, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	1be4      	subs	r4, r4, r7
 8000e6c:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000e70:	2100      	movs	r1, #0
 8000e72:	b11e      	cbz	r6, 8000e7c <__udivmoddi4+0xa8>
 8000e74:	40d4      	lsrs	r4, r2
 8000e76:	2300      	movs	r3, #0
 8000e78:	e9c6 4300 	strd	r4, r3, [r6]
 8000e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e80:	428b      	cmp	r3, r1
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0xc2>
 8000e84:	2e00      	cmp	r6, #0
 8000e86:	f000 80ee 	beq.w	8001066 <__udivmoddi4+0x292>
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	e9c6 0500 	strd	r0, r5, [r6]
 8000e90:	4608      	mov	r0, r1
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	fab3 f183 	clz	r1, r3
 8000e9a:	2900      	cmp	r1, #0
 8000e9c:	d14a      	bne.n	8000f34 <__udivmoddi4+0x160>
 8000e9e:	42ab      	cmp	r3, r5
 8000ea0:	d302      	bcc.n	8000ea8 <__udivmoddi4+0xd4>
 8000ea2:	4282      	cmp	r2, r0
 8000ea4:	f200 80f9 	bhi.w	800109a <__udivmoddi4+0x2c6>
 8000ea8:	1a84      	subs	r4, r0, r2
 8000eaa:	eb65 0303 	sbc.w	r3, r5, r3
 8000eae:	2001      	movs	r0, #1
 8000eb0:	4698      	mov	r8, r3
 8000eb2:	2e00      	cmp	r6, #0
 8000eb4:	d0e2      	beq.n	8000e7c <__udivmoddi4+0xa8>
 8000eb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000eba:	e7df      	b.n	8000e7c <__udivmoddi4+0xa8>
 8000ebc:	b902      	cbnz	r2, 8000ec0 <__udivmoddi4+0xec>
 8000ebe:	deff      	udf	#255	; 0xff
 8000ec0:	fab2 f282 	clz	r2, r2
 8000ec4:	2a00      	cmp	r2, #0
 8000ec6:	f040 8091 	bne.w	8000fec <__udivmoddi4+0x218>
 8000eca:	eba1 050c 	sub.w	r5, r1, ip
 8000ece:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed2:	fa1f fe8c 	uxth.w	lr, ip
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	fbb5 f3f7 	udiv	r3, r5, r7
 8000edc:	fb07 5013 	mls	r0, r7, r3, r5
 8000ee0:	0c25      	lsrs	r5, r4, #16
 8000ee2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000ee6:	fb0e f003 	mul.w	r0, lr, r3
 8000eea:	42a8      	cmp	r0, r5
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x12c>
 8000eee:	eb1c 0505 	adds.w	r5, ip, r5
 8000ef2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ef6:	d202      	bcs.n	8000efe <__udivmoddi4+0x12a>
 8000ef8:	42a8      	cmp	r0, r5
 8000efa:	f200 80cb 	bhi.w	8001094 <__udivmoddi4+0x2c0>
 8000efe:	4643      	mov	r3, r8
 8000f00:	1a2d      	subs	r5, r5, r0
 8000f02:	b2a4      	uxth	r4, r4
 8000f04:	fbb5 f0f7 	udiv	r0, r5, r7
 8000f08:	fb07 5510 	mls	r5, r7, r0, r5
 8000f0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f10:	fb0e fe00 	mul.w	lr, lr, r0
 8000f14:	45a6      	cmp	lr, r4
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x156>
 8000f18:	eb1c 0404 	adds.w	r4, ip, r4
 8000f1c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f20:	d202      	bcs.n	8000f28 <__udivmoddi4+0x154>
 8000f22:	45a6      	cmp	lr, r4
 8000f24:	f200 80bb 	bhi.w	800109e <__udivmoddi4+0x2ca>
 8000f28:	4628      	mov	r0, r5
 8000f2a:	eba4 040e 	sub.w	r4, r4, lr
 8000f2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f32:	e79e      	b.n	8000e72 <__udivmoddi4+0x9e>
 8000f34:	f1c1 0720 	rsb	r7, r1, #32
 8000f38:	408b      	lsls	r3, r1
 8000f3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f42:	fa20 f407 	lsr.w	r4, r0, r7
 8000f46:	fa05 f301 	lsl.w	r3, r5, r1
 8000f4a:	431c      	orrs	r4, r3
 8000f4c:	40fd      	lsrs	r5, r7
 8000f4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f52:	fa00 f301 	lsl.w	r3, r0, r1
 8000f56:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f5a:	0c20      	lsrs	r0, r4, #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fb09 5518 	mls	r5, r9, r8, r5
 8000f64:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000f68:	fb08 f00e 	mul.w	r0, r8, lr
 8000f6c:	42a8      	cmp	r0, r5
 8000f6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f72:	d90b      	bls.n	8000f8c <__udivmoddi4+0x1b8>
 8000f74:	eb1c 0505 	adds.w	r5, ip, r5
 8000f78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f7c:	f080 8088 	bcs.w	8001090 <__udivmoddi4+0x2bc>
 8000f80:	42a8      	cmp	r0, r5
 8000f82:	f240 8085 	bls.w	8001090 <__udivmoddi4+0x2bc>
 8000f86:	f1a8 0802 	sub.w	r8, r8, #2
 8000f8a:	4465      	add	r5, ip
 8000f8c:	1a2d      	subs	r5, r5, r0
 8000f8e:	b2a4      	uxth	r4, r4
 8000f90:	fbb5 f0f9 	udiv	r0, r5, r9
 8000f94:	fb09 5510 	mls	r5, r9, r0, r5
 8000f98:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000f9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fa0:	45ae      	cmp	lr, r5
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x1e2>
 8000fa4:	eb1c 0505 	adds.w	r5, ip, r5
 8000fa8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fac:	d26c      	bcs.n	8001088 <__udivmoddi4+0x2b4>
 8000fae:	45ae      	cmp	lr, r5
 8000fb0:	d96a      	bls.n	8001088 <__udivmoddi4+0x2b4>
 8000fb2:	3802      	subs	r0, #2
 8000fb4:	4465      	add	r5, ip
 8000fb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fba:	fba0 9402 	umull	r9, r4, r0, r2
 8000fbe:	eba5 050e 	sub.w	r5, r5, lr
 8000fc2:	42a5      	cmp	r5, r4
 8000fc4:	46c8      	mov	r8, r9
 8000fc6:	46a6      	mov	lr, r4
 8000fc8:	d356      	bcc.n	8001078 <__udivmoddi4+0x2a4>
 8000fca:	d053      	beq.n	8001074 <__udivmoddi4+0x2a0>
 8000fcc:	b15e      	cbz	r6, 8000fe6 <__udivmoddi4+0x212>
 8000fce:	ebb3 0208 	subs.w	r2, r3, r8
 8000fd2:	eb65 050e 	sbc.w	r5, r5, lr
 8000fd6:	fa05 f707 	lsl.w	r7, r5, r7
 8000fda:	fa22 f301 	lsr.w	r3, r2, r1
 8000fde:	40cd      	lsrs	r5, r1
 8000fe0:	431f      	orrs	r7, r3
 8000fe2:	e9c6 7500 	strd	r7, r5, [r6]
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fec:	f1c2 0320 	rsb	r3, r2, #32
 8000ff0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ff4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ff8:	fa25 f303 	lsr.w	r3, r5, r3
 8000ffc:	4095      	lsls	r5, r2
 8000ffe:	430d      	orrs	r5, r1
 8001000:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001004:	fa1f fe8c 	uxth.w	lr, ip
 8001008:	fbb3 f1f7 	udiv	r1, r3, r7
 800100c:	fb07 3011 	mls	r0, r7, r1, r3
 8001010:	0c2b      	lsrs	r3, r5, #16
 8001012:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001016:	fb01 f00e 	mul.w	r0, r1, lr
 800101a:	4298      	cmp	r0, r3
 800101c:	fa04 f402 	lsl.w	r4, r4, r2
 8001020:	d908      	bls.n	8001034 <__udivmoddi4+0x260>
 8001022:	eb1c 0303 	adds.w	r3, ip, r3
 8001026:	f101 38ff 	add.w	r8, r1, #4294967295
 800102a:	d22f      	bcs.n	800108c <__udivmoddi4+0x2b8>
 800102c:	4298      	cmp	r0, r3
 800102e:	d92d      	bls.n	800108c <__udivmoddi4+0x2b8>
 8001030:	3902      	subs	r1, #2
 8001032:	4463      	add	r3, ip
 8001034:	1a1b      	subs	r3, r3, r0
 8001036:	b2ad      	uxth	r5, r5
 8001038:	fbb3 f0f7 	udiv	r0, r3, r7
 800103c:	fb07 3310 	mls	r3, r7, r0, r3
 8001040:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8001044:	fb00 f30e 	mul.w	r3, r0, lr
 8001048:	42ab      	cmp	r3, r5
 800104a:	d908      	bls.n	800105e <__udivmoddi4+0x28a>
 800104c:	eb1c 0505 	adds.w	r5, ip, r5
 8001050:	f100 38ff 	add.w	r8, r0, #4294967295
 8001054:	d216      	bcs.n	8001084 <__udivmoddi4+0x2b0>
 8001056:	42ab      	cmp	r3, r5
 8001058:	d914      	bls.n	8001084 <__udivmoddi4+0x2b0>
 800105a:	3802      	subs	r0, #2
 800105c:	4465      	add	r5, ip
 800105e:	1aed      	subs	r5, r5, r3
 8001060:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001064:	e738      	b.n	8000ed8 <__udivmoddi4+0x104>
 8001066:	4631      	mov	r1, r6
 8001068:	4630      	mov	r0, r6
 800106a:	e707      	b.n	8000e7c <__udivmoddi4+0xa8>
 800106c:	4686      	mov	lr, r0
 800106e:	e6e5      	b.n	8000e3c <__udivmoddi4+0x68>
 8001070:	4618      	mov	r0, r3
 8001072:	e6fa      	b.n	8000e6a <__udivmoddi4+0x96>
 8001074:	454b      	cmp	r3, r9
 8001076:	d2a9      	bcs.n	8000fcc <__udivmoddi4+0x1f8>
 8001078:	ebb9 0802 	subs.w	r8, r9, r2
 800107c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001080:	3801      	subs	r0, #1
 8001082:	e7a3      	b.n	8000fcc <__udivmoddi4+0x1f8>
 8001084:	4640      	mov	r0, r8
 8001086:	e7ea      	b.n	800105e <__udivmoddi4+0x28a>
 8001088:	4620      	mov	r0, r4
 800108a:	e794      	b.n	8000fb6 <__udivmoddi4+0x1e2>
 800108c:	4641      	mov	r1, r8
 800108e:	e7d1      	b.n	8001034 <__udivmoddi4+0x260>
 8001090:	46d0      	mov	r8, sl
 8001092:	e77b      	b.n	8000f8c <__udivmoddi4+0x1b8>
 8001094:	3b02      	subs	r3, #2
 8001096:	4465      	add	r5, ip
 8001098:	e732      	b.n	8000f00 <__udivmoddi4+0x12c>
 800109a:	4608      	mov	r0, r1
 800109c:	e709      	b.n	8000eb2 <__udivmoddi4+0xde>
 800109e:	4464      	add	r4, ip
 80010a0:	3802      	subs	r0, #2
 80010a2:	e742      	b.n	8000f2a <__udivmoddi4+0x156>

080010a4 <__aeabi_idiv0>:
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <ReadADCChannel>:
#define CONVERSION_POLL_TIME 10

static uint16_t ReadADCChannel(uint32_t Channel);

static uint16_t ReadADCChannel(uint32_t Channel)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	uint16_t result;
	if (HAL_ADCEx_Calibration_Start(Get_AdcHandle()) != HAL_OK) {
 80010b0:	f000 fe0c 	bl	8001ccc <Get_AdcHandle>
 80010b4:	4603      	mov	r3, r0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f002 fa01 	bl	80034be <HAL_ADCEx_Calibration_Start>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <ReadADCChannel+0x1e>
	    Error_Handler();
 80010c2:	f000 fe21 	bl	8001d08 <Error_Handler>
	  }
	ADC_ChannelConfTypeDef sConfig = {0};
 80010c6:	f107 0308 	add.w	r3, r7, #8
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
	sConfig.Channel = Channel;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(Get_AdcHandle(), &sConfig) != HAL_OK) {
 80010de:	f000 fdf5 	bl	8001ccc <Get_AdcHandle>
 80010e2:	4602      	mov	r2, r0
 80010e4:	f107 0308 	add.w	r3, r7, #8
 80010e8:	4619      	mov	r1, r3
 80010ea:	4610      	mov	r0, r2
 80010ec:	f001 fefa 	bl	8002ee4 <HAL_ADC_ConfigChannel>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <ReadADCChannel+0x52>
		Error_Handler();
 80010f6:	f000 fe07 	bl	8001d08 <Error_Handler>
	}
	if (HAL_ADC_Start(Get_AdcHandle()) != HAL_OK) {
 80010fa:	f000 fde7 	bl	8001ccc <Get_AdcHandle>
 80010fe:	4603      	mov	r3, r0
 8001100:	4618      	mov	r0, r3
 8001102:	f001 fdd3 	bl	8002cac <HAL_ADC_Start>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <ReadADCChannel+0x68>
		Error_Handler();
 800110c:	f000 fdfc 	bl	8001d08 <Error_Handler>
	}
	HAL_ADC_PollForConversion(Get_AdcHandle(), HAL_MAX_DELAY);
 8001110:	f000 fddc 	bl	8001ccc <Get_AdcHandle>
 8001114:	4603      	mov	r3, r0
 8001116:	f04f 31ff 	mov.w	r1, #4294967295
 800111a:	4618      	mov	r0, r3
 800111c:	f001 fe3e 	bl	8002d9c <HAL_ADC_PollForConversion>
	HAL_ADC_Stop(Get_AdcHandle());
 8001120:	f000 fdd4 	bl	8001ccc <Get_AdcHandle>
 8001124:	4603      	mov	r3, r0
 8001126:	4618      	mov	r0, r3
 8001128:	f001 fe06 	bl	8002d38 <HAL_ADC_Stop>
	if((HAL_ADC_GetState(Get_AdcHandle()) & HAL_ADC_STATE_EOC_REG) == HAL_ADC_STATE_EOC_REG)
 800112c:	f000 fdce 	bl	8001ccc <Get_AdcHandle>
 8001130:	4603      	mov	r3, r0
 8001132:	4618      	mov	r0, r3
 8001134:	f002 f80e 	bl	8003154 <HAL_ADC_GetState>
 8001138:	4603      	mov	r3, r0
 800113a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800113e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001142:	d107      	bne.n	8001154 <ReadADCChannel+0xac>
	{
		/*##-5- Get the converted value of regular channel  ######################*/
		result = (uint16_t)HAL_ADC_GetValue(Get_AdcHandle());
 8001144:	f000 fdc2 	bl	8001ccc <Get_AdcHandle>
 8001148:	4603      	mov	r3, r0
 800114a:	4618      	mov	r0, r3
 800114c:	f001 febd 	bl	8002eca <HAL_ADC_GetValue>
 8001150:	4603      	mov	r3, r0
 8001152:	82fb      	strh	r3, [r7, #22]
	}
	return result;
 8001154:	8afb      	ldrh	r3, [r7, #22]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <AdcRead_VBatt>:


uint16_t AdcRead_VBatt(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, ADC_SW_Pin, GPIO_PIN_RESET);
 8001164:	2200      	movs	r2, #0
 8001166:	2180      	movs	r1, #128	; 0x80
 8001168:	480a      	ldr	r0, [pc, #40]	; (8001194 <AdcRead_VBatt+0x34>)
 800116a:	f002 fd9d 	bl	8003ca8 <HAL_GPIO_WritePin>
	adcResult = ReadADCChannel(ADC_CHANNEL_2);
 800116e:	480a      	ldr	r0, [pc, #40]	; (8001198 <AdcRead_VBatt+0x38>)
 8001170:	f7ff ff9a 	bl	80010a8 <ReadADCChannel>
 8001174:	4603      	mov	r3, r0
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fd9c 	bl	8000cb4 <__aeabi_ui2f>
 800117c:	4603      	mov	r3, r0
 800117e:	4a07      	ldr	r2, [pc, #28]	; (800119c <AdcRead_VBatt+0x3c>)
 8001180:	6013      	str	r3, [r2, #0]
	return adcResult;
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <AdcRead_VBatt+0x3c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fdec 	bl	8000d64 <__aeabi_f2uiz>
 800118c:	4603      	mov	r3, r0
 800118e:	b29b      	uxth	r3, r3
}
 8001190:	4618      	mov	r0, r3
 8001192:	bd80      	pop	{r7, pc}
 8001194:	48000400 	.word	0x48000400
 8001198:	08000004 	.word	0x08000004
 800119c:	200000c8 	.word	0x200000c8

080011a0 <commandReadDeviceId>:


char DataBuffer[200];

void commandReadDeviceId(char *data)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b096      	sub	sp, #88	; 0x58
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Read MCU Id, 32-bit access */
  uint8_t i;
  char DeviceId[50];
  uint8_t serialNumber[12]={0};
 80011a8:	2300      	movs	r3, #0
 80011aa:	61bb      	str	r3, [r7, #24]
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = HAL_GetUIDw0();
 80011b6:	f001 fa55 	bl	8002664 <HAL_GetUIDw0>
 80011ba:	4603      	mov	r3, r0
 80011bc:	617b      	str	r3, [r7, #20]
  deviceserial1 = HAL_GetUIDw1();
 80011be:	f001 fa5b 	bl	8002678 <HAL_GetUIDw1>
 80011c2:	4603      	mov	r3, r0
 80011c4:	613b      	str	r3, [r7, #16]
  deviceserial2 = HAL_GetUIDw2();
 80011c6:	f001 fa61 	bl	800268c <HAL_GetUIDw2>
 80011ca:	4603      	mov	r3, r0
 80011cc:	60fb      	str	r3, [r7, #12]
  memset(serialNumber, 0, 12);
 80011ce:	f107 0318 	add.w	r3, r7, #24
 80011d2:	220c      	movs	r2, #12
 80011d4:	2100      	movs	r1, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f007 fa56 	bl	8008688 <memset>
 80011dc:	697b      	ldr	r3, [r7, #20]
  memcpy(&serialNumber[0], &deviceserial0, 4);
 80011de:	61bb      	str	r3, [r7, #24]
 80011e0:	693b      	ldr	r3, [r7, #16]
  memcpy(&serialNumber[4], &deviceserial1, 4);
 80011e2:	61fb      	str	r3, [r7, #28]
 80011e4:	68fb      	ldr	r3, [r7, #12]
  memcpy(&serialNumber[8], &deviceserial2, 4);
 80011e6:	623b      	str	r3, [r7, #32]
  snprintf(DeviceId, sizeof(DeviceId), "OK,STDEVICEID,");
 80011e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ec:	4a1e      	ldr	r2, [pc, #120]	; (8001268 <commandReadDeviceId+0xc8>)
 80011ee:	2132      	movs	r1, #50	; 0x32
 80011f0:	4618      	mov	r0, r3
 80011f2:	f007 fa51 	bl	8008698 <sniprintf>
  serialPutStr(DeviceId);
 80011f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 fa3e 	bl	800167c <serialPutStr>
  for(i=0; i<12; i++)
 8001200:	2300      	movs	r3, #0
 8001202:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001206:	e026      	b.n	8001256 <commandReadDeviceId+0xb6>
  {
    i < 11 ? snprintf(DeviceId, sizeof(DeviceId), "%x", serialNumber[i]) : snprintf(DeviceId, sizeof(DeviceId), "%d\n", serialNumber[i]);
 8001208:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800120c:	2b0a      	cmp	r3, #10
 800120e:	d80c      	bhi.n	800122a <commandReadDeviceId+0x8a>
 8001210:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001214:	3358      	adds	r3, #88	; 0x58
 8001216:	443b      	add	r3, r7
 8001218:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 800121c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001220:	4a12      	ldr	r2, [pc, #72]	; (800126c <commandReadDeviceId+0xcc>)
 8001222:	2132      	movs	r1, #50	; 0x32
 8001224:	f007 fa38 	bl	8008698 <sniprintf>
 8001228:	e00b      	b.n	8001242 <commandReadDeviceId+0xa2>
 800122a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800122e:	3358      	adds	r3, #88	; 0x58
 8001230:	443b      	add	r3, r7
 8001232:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8001236:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800123a:	4a0d      	ldr	r2, [pc, #52]	; (8001270 <commandReadDeviceId+0xd0>)
 800123c:	2132      	movs	r1, #50	; 0x32
 800123e:	f007 fa2b 	bl	8008698 <sniprintf>
    serialPutStr(DeviceId);
 8001242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001246:	4618      	mov	r0, r3
 8001248:	f000 fa18 	bl	800167c <serialPutStr>
  for(i=0; i<12; i++)
 800124c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001250:	3301      	adds	r3, #1
 8001252:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001256:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800125a:	2b0b      	cmp	r3, #11
 800125c:	d9d4      	bls.n	8001208 <commandReadDeviceId+0x68>
  }
}
 800125e:	bf00      	nop
 8001260:	bf00      	nop
 8001262:	3758      	adds	r7, #88	; 0x58
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	0800a960 	.word	0x0800a960
 800126c:	0800a970 	.word	0x0800a970
 8001270:	0800a974 	.word	0x0800a974

08001274 <commandReadDeviceBattery>:


void commandReadDeviceBattery(char *data)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]

	 serialPutStr("OK,BATTREAD");
 800127c:	4808      	ldr	r0, [pc, #32]	; (80012a0 <commandReadDeviceBattery+0x2c>)
 800127e:	f000 f9fd 	bl	800167c <serialPutStr>
	 sprintf(DataBuffer,"OK,BATTREAD %d",AdcRead_VBatt());
 8001282:	f7ff ff6d 	bl	8001160 <AdcRead_VBatt>
 8001286:	4603      	mov	r3, r0
 8001288:	461a      	mov	r2, r3
 800128a:	4906      	ldr	r1, [pc, #24]	; (80012a4 <commandReadDeviceBattery+0x30>)
 800128c:	4806      	ldr	r0, [pc, #24]	; (80012a8 <commandReadDeviceBattery+0x34>)
 800128e:	f007 fa37 	bl	8008700 <siprintf>
	 serialPutStr(DataBuffer);
 8001292:	4805      	ldr	r0, [pc, #20]	; (80012a8 <commandReadDeviceBattery+0x34>)
 8001294:	f000 f9f2 	bl	800167c <serialPutStr>
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	0800a978 	.word	0x0800a978
 80012a4:	0800a984 	.word	0x0800a984
 80012a8:	200000cc 	.word	0x200000cc

080012ac <commandInvalid>:

void commandInvalid(char *data)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  serialPutStr("ERROR,Invalid Command Handler!\n");
 80012b4:	4803      	ldr	r0, [pc, #12]	; (80012c4 <commandInvalid+0x18>)
 80012b6:	f000 f9e1 	bl	800167c <serialPutStr>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	0800a994 	.word	0x0800a994

080012c8 <commandGetTime>:

char dateTime[100];
void commandGetTime(char *data)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]


}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr

080012da <commandGetDate>:

void commandGetDate(char *data)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]

}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <commandGetDistance>:

char sonarBuffer[100];
void commandGetDistance(char *data)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(MB_PWR_GPIO_Port, MB_PWR_Pin, GPIO_PIN_SET);
 80012f4:	2201      	movs	r2, #1
 80012f6:	2101      	movs	r1, #1
 80012f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012fc:	f002 fcd4 	bl	8003ca8 <HAL_GPIO_WritePin>
	sprintf(sonarBuffer,"OK,DISTREAD %d",getSonarDistance());
 8001300:	f000 f812 	bl	8001328 <getSonarDistance>
 8001304:	4603      	mov	r3, r0
 8001306:	461a      	mov	r2, r3
 8001308:	4905      	ldr	r1, [pc, #20]	; (8001320 <commandGetDistance+0x34>)
 800130a:	4806      	ldr	r0, [pc, #24]	; (8001324 <commandGetDistance+0x38>)
 800130c:	f007 f9f8 	bl	8008700 <siprintf>
	serialPutStr(sonarBuffer);
 8001310:	4804      	ldr	r0, [pc, #16]	; (8001324 <commandGetDistance+0x38>)
 8001312:	f000 f9b3 	bl	800167c <serialPutStr>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	0800a9b4 	.word	0x0800a9b4
 8001324:	20000194 	.word	0x20000194

08001328 <getSonarDistance>:
 */

#include "Maxbotix.h"


uint16_t getSonarDistance(void){
 8001328:	b5b0      	push	{r4, r5, r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
	  unsigned char RxBuffer[4];
	  bool newData = false;
 800132e:	2300      	movs	r3, #0
 8001330:	75fb      	strb	r3, [r7, #23]
	  uint16_t dist_mm = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	82bb      	strh	r3, [r7, #20]
	  unsigned char rx;
	  uint8_t tries = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	74fb      	strb	r3, [r7, #19]
	  do {
	    HAL_GPIO_WritePin(MB_CTL_GPIO_Port, MB_CTL_Pin, GPIO_PIN_SET);
 800133a:	2201      	movs	r2, #1
 800133c:	2102      	movs	r1, #2
 800133e:	4844      	ldr	r0, [pc, #272]	; (8001450 <getSonarDistance+0x128>)
 8001340:	f002 fcb2 	bl	8003ca8 <HAL_GPIO_WritePin>
	    HAL_Delay(1); // todo: implement HAL_Delay_Microseconds()
 8001344:	2001      	movs	r0, #1
 8001346:	f001 f969 	bl	800261c <HAL_Delay>
	    HAL_GPIO_WritePin(MB_CTL_GPIO_Port, MB_CTL_Pin, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	2102      	movs	r1, #2
 800134e:	4840      	ldr	r0, [pc, #256]	; (8001450 <getSonarDistance+0x128>)
 8001350:	f002 fcaa 	bl	8003ca8 <HAL_GPIO_WritePin>
	    if (HAL_UART_Receive(Get_SonarHandle(), (uint8_t *)&rx, 1, 20) == HAL_OK) {
 8001354:	f000 fcce 	bl	8001cf4 <Get_SonarHandle>
 8001358:	1df9      	adds	r1, r7, #7
 800135a:	2314      	movs	r3, #20
 800135c:	2201      	movs	r2, #1
 800135e:	f005 f8b3 	bl	80064c8 <HAL_UART_Receive>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d160      	bne.n	800142a <getSonarDistance+0x102>
	      if ((char)rx == 'R') {
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	2b52      	cmp	r3, #82	; 0x52
 800136c:	d15a      	bne.n	8001424 <getSonarDistance+0xfc>
	        if (HAL_UART_Receive(Get_SonarHandle(), (uint8_t *)&RxBuffer, 4, 20) == HAL_OK) {
 800136e:	f000 fcc1 	bl	8001cf4 <Get_SonarHandle>
 8001372:	f107 0108 	add.w	r1, r7, #8
 8001376:	2314      	movs	r3, #20
 8001378:	2204      	movs	r2, #4
 800137a:	f005 f8a5 	bl	80064c8 <HAL_UART_Receive>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d155      	bne.n	8001430 <getSonarDistance+0x108>
	          if (isdigit(RxBuffer[3])) {
 8001384:	7afb      	ldrb	r3, [r7, #11]
 8001386:	3301      	adds	r3, #1
 8001388:	4a32      	ldr	r2, [pc, #200]	; (8001454 <getSonarDistance+0x12c>)
 800138a:	4413      	add	r3, r2
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <getSonarDistance+0x72>
	            newData = true;
 8001396:	2301      	movs	r3, #1
 8001398:	75fb      	strb	r3, [r7, #23]
	          }
	          if (newData) {
 800139a:	7dfb      	ldrb	r3, [r7, #23]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d047      	beq.n	8001430 <getSonarDistance+0x108>
	            for (int i = 0; i < 4; i++)
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	e035      	b.n	8001412 <getSonarDistance+0xea>
	              dist_mm += (RxBuffer[3 - i] - '0') * pow(10, i);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f1c3 0303 	rsb	r3, r3, #3
 80013ac:	3318      	adds	r3, #24
 80013ae:	443b      	add	r3, r7
 80013b0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80013b4:	3b30      	subs	r3, #48	; 0x30
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff f88c 	bl	80004d4 <__aeabi_i2d>
 80013bc:	4604      	mov	r4, r0
 80013be:	460d      	mov	r5, r1
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f7ff f887 	bl	80004d4 <__aeabi_i2d>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	f04f 0000 	mov.w	r0, #0
 80013ce:	4922      	ldr	r1, [pc, #136]	; (8001458 <getSonarDistance+0x130>)
 80013d0:	f008 fbd4 	bl	8009b7c <pow>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4620      	mov	r0, r4
 80013da:	4629      	mov	r1, r5
 80013dc:	f7ff f8e4 	bl	80005a8 <__aeabi_dmul>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4614      	mov	r4, r2
 80013e6:	461d      	mov	r5, r3
 80013e8:	8abb      	ldrh	r3, [r7, #20]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff f872 	bl	80004d4 <__aeabi_i2d>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4620      	mov	r0, r4
 80013f6:	4629      	mov	r1, r5
 80013f8:	f7fe ff20 	bl	800023c <__adddf3>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	4610      	mov	r0, r2
 8001402:	4619      	mov	r1, r3
 8001404:	f7ff fb80 	bl	8000b08 <__aeabi_d2uiz>
 8001408:	4603      	mov	r3, r0
 800140a:	82bb      	strh	r3, [r7, #20]
	            for (int i = 0; i < 4; i++)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	3301      	adds	r3, #1
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2b03      	cmp	r3, #3
 8001416:	ddc6      	ble.n	80013a6 <getSonarDistance+0x7e>
	            if (dist_mm==0)
 8001418:	8abb      	ldrh	r3, [r7, #20]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d108      	bne.n	8001430 <getSonarDistance+0x108>
	            	newData = false;
 800141e:	2300      	movs	r3, #0
 8001420:	75fb      	strb	r3, [r7, #23]
 8001422:	e005      	b.n	8001430 <getSonarDistance+0x108>
	          }
	        }
	      } else {
	        newData = false;
 8001424:	2300      	movs	r3, #0
 8001426:	75fb      	strb	r3, [r7, #23]
 8001428:	e002      	b.n	8001430 <getSonarDistance+0x108>
	      }
	    } else {
	      tries++;
 800142a:	7cfb      	ldrb	r3, [r7, #19]
 800142c:	3301      	adds	r3, #1
 800142e:	74fb      	strb	r3, [r7, #19]
	    }
	  } while (newData == false && tries < MAX_SONAR_TRIES - 1);
 8001430:	7dfb      	ldrb	r3, [r7, #23]
 8001432:	f083 0301 	eor.w	r3, r3, #1
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <getSonarDistance+0x11c>
 800143c:	7cfb      	ldrb	r3, [r7, #19]
 800143e:	2b03      	cmp	r3, #3
 8001440:	f67f af7b 	bls.w	800133a <getSonarDistance+0x12>
	  return dist_mm;
 8001444:	8abb      	ldrh	r3, [r7, #20]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bdb0      	pop	{r4, r5, r7, pc}
 800144e:	bf00      	nop
 8001450:	48000800 	.word	0x48000800
 8001454:	0800b154 	.word	0x0800b154
 8001458:	40240000 	.word	0x40240000

0800145c <SensorReadTask>:
#include <SensorsTask.h>
#include <stdbool.h>


void SensorReadTask(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0

}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr

08001468 <CommandLineBuildCommand>:



static uint16_t commandBuilderIdx = 0;
int CommandLineBuildCommand(char nextChar)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
	/* Don't store any new line characters or spaces. */
	if ((nextChar == '\n') || (nextChar == ' ') || (nextChar == '\t'))
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	2b0a      	cmp	r3, #10
 8001476:	d005      	beq.n	8001484 <CommandLineBuildCommand+0x1c>
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	2b20      	cmp	r3, #32
 800147c:	d002      	beq.n	8001484 <CommandLineBuildCommand+0x1c>
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	2b09      	cmp	r3, #9
 8001482:	d101      	bne.n	8001488 <CommandLineBuildCommand+0x20>
	{
		return false;
 8001484:	2300      	movs	r3, #0
 8001486:	e02d      	b.n	80014e4 <CommandLineBuildCommand+0x7c>
	}
	/* The completed command has been received. Replace the final carriage
	 * return character with a NULL character to help with processing the
	 * command. */
	if (nextChar == '\r')
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	2b0d      	cmp	r3, #13
 800148c:	d10a      	bne.n	80014a4 <CommandLineBuildCommand+0x3c>
	{
		gCommandBuffer[commandBuilderIdx] = '\0';
 800148e:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <CommandLineBuildCommand+0x88>)
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	461a      	mov	r2, r3
 8001494:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <CommandLineBuildCommand+0x8c>)
 8001496:	2100      	movs	r1, #0
 8001498:	5499      	strb	r1, [r3, r2]
		commandBuilderIdx = 0;
 800149a:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <CommandLineBuildCommand+0x88>)
 800149c:	2200      	movs	r2, #0
 800149e:	801a      	strh	r2, [r3, #0]
		return true;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e01f      	b.n	80014e4 <CommandLineBuildCommand+0x7c>
	}
	/* Convert the incoming character to uppercase. This matches the case
	 * of commands in the command table. Then store the received character
	 * in the command buffer. */
	gCommandBuffer[commandBuilderIdx] = TO_UPPER(nextChar);
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	2b60      	cmp	r3, #96	; 0x60
 80014a8:	d906      	bls.n	80014b8 <CommandLineBuildCommand+0x50>
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	2b7a      	cmp	r3, #122	; 0x7a
 80014ae:	d803      	bhi.n	80014b8 <CommandLineBuildCommand+0x50>
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	3b20      	subs	r3, #32
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	e000      	b.n	80014ba <CommandLineBuildCommand+0x52>
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	4a0d      	ldr	r2, [pc, #52]	; (80014f0 <CommandLineBuildCommand+0x88>)
 80014bc:	8812      	ldrh	r2, [r2, #0]
 80014be:	4611      	mov	r1, r2
 80014c0:	4a0c      	ldr	r2, [pc, #48]	; (80014f4 <CommandLineBuildCommand+0x8c>)
 80014c2:	5453      	strb	r3, [r2, r1]
	commandBuilderIdx++;
 80014c4:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <CommandLineBuildCommand+0x88>)
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	3301      	adds	r3, #1
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <CommandLineBuildCommand+0x88>)
 80014ce:	801a      	strh	r2, [r3, #0]
	/* If the command is too long, reset the index and process
	 * the current command buffer. */
	if (commandBuilderIdx >= MAX_COMMAND_LEN)
 80014d0:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <CommandLineBuildCommand+0x88>)
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	2b77      	cmp	r3, #119	; 0x77
 80014d6:	d904      	bls.n	80014e2 <CommandLineBuildCommand+0x7a>
	{
		commandBuilderIdx = 0;
 80014d8:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <CommandLineBuildCommand+0x88>)
 80014da:	2200      	movs	r2, #0
 80014dc:	801a      	strh	r2, [r3, #0]
		return true;
 80014de:	2301      	movs	r3, #1
 80014e0:	e000      	b.n	80014e4 <CommandLineBuildCommand+0x7c>
	}

	return false;
 80014e2:	2300      	movs	r3, #0

}
 80014e4:	4618      	mov	r0, r3
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	20000300 	.word	0x20000300
 80014f4:	20000220 	.word	0x20000220

080014f8 <CommandLineProcessCommand>:

void CommandLineProcessCommand(char * buffer)
{
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b087      	sub	sp, #28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]

	int idx;
	int CommandFound = false;
 8001500:	2300      	movs	r3, #0
 8001502:	613b      	str	r3, [r7, #16]
	//char *Com= strtok(buffer,"+");
	char *Arg = strtok(NULL,"+");
 8001504:	491e      	ldr	r1, [pc, #120]	; (8001580 <CommandLineProcessCommand+0x88>)
 8001506:	2000      	movs	r0, #0
 8001508:	f007 f92e 	bl	8008768 <strtok>
 800150c:	60f8      	str	r0, [r7, #12]

	/* Search for the command in the command table until it is found or
	 * the end of the table is reached. If the command is found, break
	 * out of the loop. */
	for (idx = 0; gCommandTable[idx].name != NULL; idx++)
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	e020      	b.n	8001556 <CommandLineProcessCommand+0x5e>
	{
		if (strncmp(gCommandTable[idx].name, buffer,strlen(gCommandTable[idx].name)) == 0)
 8001514:	4a1b      	ldr	r2, [pc, #108]	; (8001584 <CommandLineProcessCommand+0x8c>)
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 800151c:	4a19      	ldr	r2, [pc, #100]	; (8001584 <CommandLineProcessCommand+0x8c>)
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001524:	4618      	mov	r0, r3
 8001526:	f7fe fe2b 	bl	8000180 <strlen>
 800152a:	4603      	mov	r3, r0
 800152c:	461a      	mov	r2, r3
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	4620      	mov	r0, r4
 8001532:	f007 f905 	bl	8008740 <strncmp>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d109      	bne.n	8001550 <CommandLineProcessCommand+0x58>
		{
			CommandFound = true;
 800153c:	2301      	movs	r3, #1
 800153e:	613b      	str	r3, [r7, #16]
			(*gCommandTable[idx].function)(Arg);
 8001540:	4a10      	ldr	r2, [pc, #64]	; (8001584 <CommandLineProcessCommand+0x8c>)
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	4413      	add	r3, r2
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	4798      	blx	r3
			break;
 800154e:	e008      	b.n	8001562 <CommandLineProcessCommand+0x6a>
	for (idx = 0; gCommandTable[idx].name != NULL; idx++)
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	3301      	adds	r3, #1
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	4a0b      	ldr	r2, [pc, #44]	; (8001584 <CommandLineProcessCommand+0x8c>)
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1d8      	bne.n	8001514 <CommandLineProcessCommand+0x1c>
		}
	}
	/* If the command was found, call the command function. Otherwise,
	 * output an error message.*/
	if (CommandFound==false)
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d107      	bne.n	8001578 <CommandLineProcessCommand+0x80>
	{
		snprintf(TerminalMsgBuffer, sizeof(TerminalMsgBuffer), "ERROR,Command not found\n");
 8001568:	4a07      	ldr	r2, [pc, #28]	; (8001588 <CommandLineProcessCommand+0x90>)
 800156a:	2164      	movs	r1, #100	; 0x64
 800156c:	4807      	ldr	r0, [pc, #28]	; (800158c <CommandLineProcessCommand+0x94>)
 800156e:	f007 f893 	bl	8008698 <sniprintf>
		serialPutStr(TerminalMsgBuffer);
 8001572:	4806      	ldr	r0, [pc, #24]	; (800158c <CommandLineProcessCommand+0x94>)
 8001574:	f000 f882 	bl	800167c <serialPutStr>
	}
}
 8001578:	bf00      	nop
 800157a:	371c      	adds	r7, #28
 800157c:	46bd      	mov	sp, r7
 800157e:	bd90      	pop	{r4, r7, pc}
 8001580:	0800a9f8 	.word	0x0800a9f8
 8001584:	0800aa4c 	.word	0x0800aa4c
 8001588:	0800a9fc 	.word	0x0800a9fc
 800158c:	2000029c 	.word	0x2000029c

08001590 <Task_Terminal>:



void Task_Terminal(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
	int tCommandReady = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	607b      	str	r3, [r7, #4]
	char ch;
	if(!initStatus)
 800159a:	4b1c      	ldr	r3, [pc, #112]	; (800160c <Task_Terminal+0x7c>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	f083 0301 	eor.w	r3, r3, #1
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d00c      	beq.n	80015c2 <Task_Terminal+0x32>
	{
		CBUF_Init(RxDataBuffer);
 80015a8:	4b19      	ldr	r3, [pc, #100]	; (8001610 <Task_Terminal+0x80>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	705a      	strb	r2, [r3, #1]
 80015ae:	4b18      	ldr	r3, [pc, #96]	; (8001610 <Task_Terminal+0x80>)
 80015b0:	785a      	ldrb	r2, [r3, #1]
 80015b2:	4b17      	ldr	r3, [pc, #92]	; (8001610 <Task_Terminal+0x80>)
 80015b4:	701a      	strb	r2, [r3, #0]
		//HAL_UART_Receive_IT(Get_DebugHandle(),(uint8_t*)uartData,UART_DMA_RECEIVE_SIZE);
		serialPutStr("Terminal Task Started\n");
 80015b6:	4817      	ldr	r0, [pc, #92]	; (8001614 <Task_Terminal+0x84>)
 80015b8:	f000 f860 	bl	800167c <serialPutStr>
		initStatus = true;
 80015bc:	4b13      	ldr	r3, [pc, #76]	; (800160c <Task_Terminal+0x7c>)
 80015be:	2201      	movs	r2, #1
 80015c0:	701a      	strb	r2, [r3, #0]
	}
	if(dataRdy)
 80015c2:	4b15      	ldr	r3, [pc, #84]	; (8001618 <Task_Terminal+0x88>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d01b      	beq.n	8001604 <Task_Terminal+0x74>
	{
		ch = CBUF_Pop(RxDataBuffer);
 80015cc:	4b10      	ldr	r3, [pc, #64]	; (8001610 <Task_Terminal+0x80>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	1c5a      	adds	r2, r3, #1
 80015d2:	b2d1      	uxtb	r1, r2
 80015d4:	4a0e      	ldr	r2, [pc, #56]	; (8001610 <Task_Terminal+0x80>)
 80015d6:	7011      	strb	r1, [r2, #0]
 80015d8:	f003 031f 	and.w	r3, r3, #31
 80015dc:	4a0c      	ldr	r2, [pc, #48]	; (8001610 <Task_Terminal+0x80>)
 80015de:	4413      	add	r3, r2
 80015e0:	789b      	ldrb	r3, [r3, #2]
 80015e2:	70fb      	strb	r3, [r7, #3]
		tCommandReady = CommandLineBuildCommand(ch);
 80015e4:	78fb      	ldrb	r3, [r7, #3]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff ff3e 	bl	8001468 <CommandLineBuildCommand>
 80015ec:	6078      	str	r0, [r7, #4]
		if(tCommandReady)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d004      	beq.n	80015fe <Task_Terminal+0x6e>
		{
			CommandLineProcessCommand(gCommandBuffer);
 80015f4:	4809      	ldr	r0, [pc, #36]	; (800161c <Task_Terminal+0x8c>)
 80015f6:	f7ff ff7f 	bl	80014f8 <CommandLineProcessCommand>
			tCommandReady = 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
		}
		dataRdy = false;
 80015fe:	4b06      	ldr	r3, [pc, #24]	; (8001618 <Task_Terminal+0x88>)
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
	}
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	200001fa 	.word	0x200001fa
 8001610:	200001fc 	.word	0x200001fc
 8001614:	0800aa18 	.word	0x0800aa18
 8001618:	200001f9 	.word	0x200001f9
 800161c:	20000220 	.word	0x20000220

08001620 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART2)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a0f      	ldr	r2, [pc, #60]	; (800166c <HAL_UART_RxCpltCallback+0x4c>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d118      	bne.n	8001664 <HAL_UART_RxCpltCallback+0x44>
	{
		HAL_UART_Receive_IT(Get_DebugHandle(),(uint8_t*)uartData,UART_DMA_RECEIVE_SIZE);
 8001632:	f000 fb55 	bl	8001ce0 <Get_DebugHandle>
 8001636:	4603      	mov	r3, r0
 8001638:	2201      	movs	r2, #1
 800163a:	490d      	ldr	r1, [pc, #52]	; (8001670 <HAL_UART_RxCpltCallback+0x50>)
 800163c:	4618      	mov	r0, r3
 800163e:	f005 f807 	bl	8006650 <HAL_UART_Receive_IT>
		//serialPutStr(data[0]);
		//HAL_UART_Transmit(Get_DebugHandle(),(uint8_t *)uartData, 1,DEBUG_UART_TIMEOUT);
		CBUF_Push(RxDataBuffer, uartData[0]);
 8001642:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <HAL_UART_RxCpltCallback+0x54>)
 8001644:	785b      	ldrb	r3, [r3, #1]
 8001646:	1c5a      	adds	r2, r3, #1
 8001648:	b2d1      	uxtb	r1, r2
 800164a:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <HAL_UART_RxCpltCallback+0x54>)
 800164c:	7051      	strb	r1, [r2, #1]
 800164e:	f003 031f 	and.w	r3, r3, #31
 8001652:	4a07      	ldr	r2, [pc, #28]	; (8001670 <HAL_UART_RxCpltCallback+0x50>)
 8001654:	7811      	ldrb	r1, [r2, #0]
 8001656:	4a07      	ldr	r2, [pc, #28]	; (8001674 <HAL_UART_RxCpltCallback+0x54>)
 8001658:	4413      	add	r3, r2
 800165a:	460a      	mov	r2, r1
 800165c:	709a      	strb	r2, [r3, #2]
		dataRdy = true;
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_UART_RxCpltCallback+0x58>)
 8001660:	2201      	movs	r2, #1
 8001662:	701a      	strb	r2, [r3, #0]
	}
}
 8001664:	bf00      	nop
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40004400 	.word	0x40004400
 8001670:	200001f8 	.word	0x200001f8
 8001674:	200001fc 	.word	0x200001fc
 8001678:	200001f9 	.word	0x200001f9

0800167c <serialPutStr>:

#include "Uart.h"


void serialPutStr(const char *data)
{
 800167c:	b590      	push	{r4, r7, lr}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]

  HAL_UART_Transmit(Get_DebugHandle(),(uint8_t *)data, strlen(data),DEBUG_UART_TIMEOUT);
 8001684:	f000 fb2c 	bl	8001ce0 <Get_DebugHandle>
 8001688:	4604      	mov	r4, r0
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7fe fd78 	bl	8000180 <strlen>
 8001690:	4603      	mov	r3, r0
 8001692:	b29a      	uxth	r2, r3
 8001694:	230a      	movs	r3, #10
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	4620      	mov	r0, r4
 800169a:	f004 fe8f 	bl	80063bc <HAL_UART_Transmit>

}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd90      	pop	{r4, r7, pc}

080016a6 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b085      	sub	sp, #20
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80016ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80016be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4013      	ands	r3, r2
 80016c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016ca:	68fb      	ldr	r3, [r7, #12]
}
 80016cc:	bf00      	nop
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr

080016d6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016dc:	f000 ff28 	bl	8002530 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016e0:	f000 f81e 	bl	8001720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016e4:	f000 fa9a 	bl	8001c1c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80016e8:	f000 f904 	bl	80018f4 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 80016ec:	f000 f950 	bl	8001990 <MX_USART2_UART_Init>
  MX_ADC_Init();
 80016f0:	f000 f872 	bl	80017d8 <MX_ADC_Init>
  MX_I2C2_Init();
 80016f4:	f000 f8be 	bl	8001874 <MX_I2C2_Init>
  MX_SPI2_Init();
 80016f8:	f000 fa2c 	bl	8001b54 <MX_SPI2_Init>
  MX_RTC_Init();
 80016fc:	f000 f994 	bl	8001a28 <MX_RTC_Init>
  MX_TIM16_Init();
 8001700:	f000 fa66 	bl	8001bd0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  uint8_t uartData[1];
  HAL_UART_Receive_IT(Get_DebugHandle(),(uint8_t*)uartData,UART_DMA_RECEIVE_SIZE);
 8001704:	f000 faec 	bl	8001ce0 <Get_DebugHandle>
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	2201      	movs	r2, #1
 800170c:	4619      	mov	r1, r3
 800170e:	f004 ff9f 	bl	8006650 <HAL_UART_Receive_IT>
  Tick_Init();
 8001712:	f000 fdb5 	bl	8002280 <Tick_Init>
  OS_Init();
 8001716:	f000 fafd 	bl	8001d14 <OS_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 OS_Run();
 800171a:	f000 fb07 	bl	8001d2c <OS_Run>
 800171e:	e7fc      	b.n	800171a <main+0x44>

08001720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b09a      	sub	sp, #104	; 0x68
 8001724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001726:	f107 0320 	add.w	r3, r7, #32
 800172a:	2248      	movs	r2, #72	; 0x48
 800172c:	2100      	movs	r1, #0
 800172e:	4618      	mov	r0, r3
 8001730:	f006 ffaa 	bl	8008688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001734:	f107 0308 	add.w	r3, r7, #8
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	611a      	str	r2, [r3, #16]
 8001744:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001746:	4b23      	ldr	r3, [pc, #140]	; (80017d4 <SystemClock_Config+0xb4>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800174e:	4a21      	ldr	r2, [pc, #132]	; (80017d4 <SystemClock_Config+0xb4>)
 8001750:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	4b1f      	ldr	r3, [pc, #124]	; (80017d4 <SystemClock_Config+0xb4>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8001762:	232a      	movs	r3, #42	; 0x2a
 8001764:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001766:	f44f 7380 	mov.w	r3, #256	; 0x100
 800176a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800176c:	2301      	movs	r3, #1
 800176e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001770:	2340      	movs	r3, #64	; 0x40
 8001772:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001774:	2300      	movs	r3, #0
 8001776:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001778:	23b0      	movs	r3, #176	; 0xb0
 800177a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 800177c:	2300      	movs	r3, #0
 800177e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001780:	2301      	movs	r3, #1
 8001782:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001784:	2300      	movs	r3, #0
 8001786:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001788:	f107 0320 	add.w	r3, r7, #32
 800178c:	4618      	mov	r0, r3
 800178e:	f002 fe71 	bl	8004474 <HAL_RCC_OscConfig>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001798:	f000 fab6 	bl	8001d08 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800179c:	234f      	movs	r3, #79	; 0x4f
 800179e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017a4:	2300      	movs	r3, #0
 80017a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017ac:	2300      	movs	r3, #0
 80017ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017b4:	f107 0308 	add.w	r3, r7, #8
 80017b8:	2102      	movs	r1, #2
 80017ba:	4618      	mov	r0, r3
 80017bc:	f003 f9dc 	bl	8004b78 <HAL_RCC_ClockConfig>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80017c6:	f000 fa9f 	bl	8001d08 <Error_Handler>
  }
}
 80017ca:	bf00      	nop
 80017cc:	3768      	adds	r7, #104	; 0x68
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	58000400 	.word	0x58000400

080017d8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80017dc:	4b23      	ldr	r3, [pc, #140]	; (800186c <MX_ADC_Init+0x94>)
 80017de:	4a24      	ldr	r2, [pc, #144]	; (8001870 <MX_ADC_Init+0x98>)
 80017e0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80017e2:	4b22      	ldr	r3, [pc, #136]	; (800186c <MX_ADC_Init+0x94>)
 80017e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017e8:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80017ea:	4b20      	ldr	r3, [pc, #128]	; (800186c <MX_ADC_Init+0x94>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017f0:	4b1e      	ldr	r3, [pc, #120]	; (800186c <MX_ADC_Init+0x94>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017f6:	4b1d      	ldr	r3, [pc, #116]	; (800186c <MX_ADC_Init+0x94>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017fc:	4b1b      	ldr	r3, [pc, #108]	; (800186c <MX_ADC_Init+0x94>)
 80017fe:	2204      	movs	r2, #4
 8001800:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001802:	4b1a      	ldr	r3, [pc, #104]	; (800186c <MX_ADC_Init+0x94>)
 8001804:	2200      	movs	r2, #0
 8001806:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001808:	4b18      	ldr	r3, [pc, #96]	; (800186c <MX_ADC_Init+0x94>)
 800180a:	2200      	movs	r2, #0
 800180c:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800180e:	4b17      	ldr	r3, [pc, #92]	; (800186c <MX_ADC_Init+0x94>)
 8001810:	2200      	movs	r2, #0
 8001812:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8001814:	4b15      	ldr	r3, [pc, #84]	; (800186c <MX_ADC_Init+0x94>)
 8001816:	2201      	movs	r2, #1
 8001818:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800181a:	4b14      	ldr	r3, [pc, #80]	; (800186c <MX_ADC_Init+0x94>)
 800181c:	2200      	movs	r2, #0
 800181e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001822:	4b12      	ldr	r3, [pc, #72]	; (800186c <MX_ADC_Init+0x94>)
 8001824:	2200      	movs	r2, #0
 8001826:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001828:	4b10      	ldr	r3, [pc, #64]	; (800186c <MX_ADC_Init+0x94>)
 800182a:	2200      	movs	r2, #0
 800182c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 800182e:	4b0f      	ldr	r3, [pc, #60]	; (800186c <MX_ADC_Init+0x94>)
 8001830:	2200      	movs	r2, #0
 8001832:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001836:	4b0d      	ldr	r3, [pc, #52]	; (800186c <MX_ADC_Init+0x94>)
 8001838:	2200      	movs	r2, #0
 800183a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800183c:	4b0b      	ldr	r3, [pc, #44]	; (800186c <MX_ADC_Init+0x94>)
 800183e:	2200      	movs	r2, #0
 8001840:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <MX_ADC_Init+0x94>)
 8001844:	2200      	movs	r2, #0
 8001846:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8001848:	4b08      	ldr	r3, [pc, #32]	; (800186c <MX_ADC_Init+0x94>)
 800184a:	2200      	movs	r2, #0
 800184c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <MX_ADC_Init+0x94>)
 8001852:	2200      	movs	r2, #0
 8001854:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001856:	4805      	ldr	r0, [pc, #20]	; (800186c <MX_ADC_Init+0x94>)
 8001858:	f001 f894 	bl	8002984 <HAL_ADC_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_ADC_Init+0x8e>
  {
    Error_Handler();
 8001862:	f000 fa51 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000304 	.word	0x20000304
 8001870:	40012400 	.word	0x40012400

08001874 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001878:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <MX_I2C2_Init+0x74>)
 800187a:	4a1c      	ldr	r2, [pc, #112]	; (80018ec <MX_I2C2_Init+0x78>)
 800187c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 800187e:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <MX_I2C2_Init+0x74>)
 8001880:	4a1b      	ldr	r2, [pc, #108]	; (80018f0 <MX_I2C2_Init+0x7c>)
 8001882:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001884:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <MX_I2C2_Init+0x74>)
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800188a:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <MX_I2C2_Init+0x74>)
 800188c:	2201      	movs	r2, #1
 800188e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001890:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <MX_I2C2_Init+0x74>)
 8001892:	2200      	movs	r2, #0
 8001894:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001896:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <MX_I2C2_Init+0x74>)
 8001898:	2200      	movs	r2, #0
 800189a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <MX_I2C2_Init+0x74>)
 800189e:	2200      	movs	r2, #0
 80018a0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018a2:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <MX_I2C2_Init+0x74>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018a8:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <MX_I2C2_Init+0x74>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80018ae:	480e      	ldr	r0, [pc, #56]	; (80018e8 <MX_I2C2_Init+0x74>)
 80018b0:	f002 fa11 	bl	8003cd6 <HAL_I2C_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80018ba:	f000 fa25 	bl	8001d08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018be:	2100      	movs	r1, #0
 80018c0:	4809      	ldr	r0, [pc, #36]	; (80018e8 <MX_I2C2_Init+0x74>)
 80018c2:	f002 fa97 	bl	8003df4 <HAL_I2CEx_ConfigAnalogFilter>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80018cc:	f000 fa1c 	bl	8001d08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80018d0:	2100      	movs	r1, #0
 80018d2:	4805      	ldr	r0, [pc, #20]	; (80018e8 <MX_I2C2_Init+0x74>)
 80018d4:	f002 fad8 	bl	8003e88 <HAL_I2CEx_ConfigDigitalFilter>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80018de:	f000 fa13 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000368 	.word	0x20000368
 80018ec:	40005800 	.word	0x40005800
 80018f0:	20303e5d 	.word	0x20303e5d

080018f4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80018f8:	4b23      	ldr	r3, [pc, #140]	; (8001988 <MX_LPUART1_UART_Init+0x94>)
 80018fa:	4a24      	ldr	r2, [pc, #144]	; (800198c <MX_LPUART1_UART_Init+0x98>)
 80018fc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 80018fe:	4b22      	ldr	r3, [pc, #136]	; (8001988 <MX_LPUART1_UART_Init+0x94>)
 8001900:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001904:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001906:	4b20      	ldr	r3, [pc, #128]	; (8001988 <MX_LPUART1_UART_Init+0x94>)
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800190c:	4b1e      	ldr	r3, [pc, #120]	; (8001988 <MX_LPUART1_UART_Init+0x94>)
 800190e:	2200      	movs	r2, #0
 8001910:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001912:	4b1d      	ldr	r3, [pc, #116]	; (8001988 <MX_LPUART1_UART_Init+0x94>)
 8001914:	2200      	movs	r2, #0
 8001916:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_RX;
 8001918:	4b1b      	ldr	r3, [pc, #108]	; (8001988 <MX_LPUART1_UART_Init+0x94>)
 800191a:	2204      	movs	r2, #4
 800191c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800191e:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <MX_LPUART1_UART_Init+0x94>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001924:	4b18      	ldr	r3, [pc, #96]	; (8001988 <MX_LPUART1_UART_Init+0x94>)
 8001926:	2200      	movs	r2, #0
 8001928:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800192a:	4b17      	ldr	r3, [pc, #92]	; (8001988 <MX_LPUART1_UART_Init+0x94>)
 800192c:	2200      	movs	r2, #0
 800192e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8001930:	4b15      	ldr	r3, [pc, #84]	; (8001988 <MX_LPUART1_UART_Init+0x94>)
 8001932:	2208      	movs	r2, #8
 8001934:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8001936:	4b14      	ldr	r3, [pc, #80]	; (8001988 <MX_LPUART1_UART_Init+0x94>)
 8001938:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800193c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_HalfDuplex_Init(&hlpuart1) != HAL_OK)
 800193e:	4812      	ldr	r0, [pc, #72]	; (8001988 <MX_LPUART1_UART_Init+0x94>)
 8001940:	f004 fce4 	bl	800630c <HAL_HalfDuplex_Init>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_LPUART1_UART_Init+0x5a>
  {
    Error_Handler();
 800194a:	f000 f9dd 	bl	8001d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800194e:	2100      	movs	r1, #0
 8001950:	480d      	ldr	r0, [pc, #52]	; (8001988 <MX_LPUART1_UART_Init+0x94>)
 8001952:	f006 fda7 	bl	80084a4 <HAL_UARTEx_SetTxFifoThreshold>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_LPUART1_UART_Init+0x6c>
  {
    Error_Handler();
 800195c:	f000 f9d4 	bl	8001d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001960:	2100      	movs	r1, #0
 8001962:	4809      	ldr	r0, [pc, #36]	; (8001988 <MX_LPUART1_UART_Init+0x94>)
 8001964:	f006 fddc 	bl	8008520 <HAL_UARTEx_SetRxFifoThreshold>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_LPUART1_UART_Init+0x7e>
  {
    Error_Handler();
 800196e:	f000 f9cb 	bl	8001d08 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&hlpuart1) != HAL_OK)
 8001972:	4805      	ldr	r0, [pc, #20]	; (8001988 <MX_LPUART1_UART_Init+0x94>)
 8001974:	f006 fd23 	bl	80083be <HAL_UARTEx_EnableFifoMode>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_LPUART1_UART_Init+0x8e>
  {
    Error_Handler();
 800197e:	f000 f9c3 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	200003bc 	.word	0x200003bc
 800198c:	40008000 	.word	0x40008000

08001990 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001994:	4b22      	ldr	r3, [pc, #136]	; (8001a20 <MX_USART2_UART_Init+0x90>)
 8001996:	4a23      	ldr	r2, [pc, #140]	; (8001a24 <MX_USART2_UART_Init+0x94>)
 8001998:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800199a:	4b21      	ldr	r3, [pc, #132]	; (8001a20 <MX_USART2_UART_Init+0x90>)
 800199c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019a2:	4b1f      	ldr	r3, [pc, #124]	; (8001a20 <MX_USART2_UART_Init+0x90>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019a8:	4b1d      	ldr	r3, [pc, #116]	; (8001a20 <MX_USART2_UART_Init+0x90>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019ae:	4b1c      	ldr	r3, [pc, #112]	; (8001a20 <MX_USART2_UART_Init+0x90>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019b4:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <MX_USART2_UART_Init+0x90>)
 80019b6:	220c      	movs	r2, #12
 80019b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ba:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <MX_USART2_UART_Init+0x90>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c0:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <MX_USART2_UART_Init+0x90>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019c6:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <MX_USART2_UART_Init+0x90>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019cc:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <MX_USART2_UART_Init+0x90>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019d2:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <MX_USART2_UART_Init+0x90>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019d8:	4811      	ldr	r0, [pc, #68]	; (8001a20 <MX_USART2_UART_Init+0x90>)
 80019da:	f004 fc47 	bl	800626c <HAL_UART_Init>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80019e4:	f000 f990 	bl	8001d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019e8:	2100      	movs	r1, #0
 80019ea:	480d      	ldr	r0, [pc, #52]	; (8001a20 <MX_USART2_UART_Init+0x90>)
 80019ec:	f006 fd5a 	bl	80084a4 <HAL_UARTEx_SetTxFifoThreshold>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80019f6:	f000 f987 	bl	8001d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019fa:	2100      	movs	r1, #0
 80019fc:	4808      	ldr	r0, [pc, #32]	; (8001a20 <MX_USART2_UART_Init+0x90>)
 80019fe:	f006 fd8f 	bl	8008520 <HAL_UARTEx_SetRxFifoThreshold>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001a08:	f000 f97e 	bl	8001d08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001a0c:	4804      	ldr	r0, [pc, #16]	; (8001a20 <MX_USART2_UART_Init+0x90>)
 8001a0e:	f006 fd11 	bl	8008434 <HAL_UARTEx_DisableFifoMode>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001a18:	f000 f976 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000450 	.word	0x20000450
 8001a24:	40004400 	.word	0x40004400

08001a28 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b092      	sub	sp, #72	; 0x48
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001a2e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	609a      	str	r2, [r3, #8]
 8001a3a:	60da      	str	r2, [r3, #12]
 8001a3c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001a3e:	2300      	movs	r3, #0
 8001a40:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	222c      	movs	r2, #44	; 0x2c
 8001a46:	2100      	movs	r1, #0
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f006 fe1d 	bl	8008688 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a4e:	4b3f      	ldr	r3, [pc, #252]	; (8001b4c <MX_RTC_Init+0x124>)
 8001a50:	4a3f      	ldr	r2, [pc, #252]	; (8001b50 <MX_RTC_Init+0x128>)
 8001a52:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a54:	4b3d      	ldr	r3, [pc, #244]	; (8001b4c <MX_RTC_Init+0x124>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001a5a:	4b3c      	ldr	r3, [pc, #240]	; (8001b4c <MX_RTC_Init+0x124>)
 8001a5c:	227f      	movs	r2, #127	; 0x7f
 8001a5e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001a60:	4b3a      	ldr	r3, [pc, #232]	; (8001b4c <MX_RTC_Init+0x124>)
 8001a62:	22ff      	movs	r2, #255	; 0xff
 8001a64:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a66:	4b39      	ldr	r3, [pc, #228]	; (8001b4c <MX_RTC_Init+0x124>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a6c:	4b37      	ldr	r3, [pc, #220]	; (8001b4c <MX_RTC_Init+0x124>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a72:	4b36      	ldr	r3, [pc, #216]	; (8001b4c <MX_RTC_Init+0x124>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a78:	4b34      	ldr	r3, [pc, #208]	; (8001b4c <MX_RTC_Init+0x124>)
 8001a7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a7e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001a80:	4b32      	ldr	r3, [pc, #200]	; (8001b4c <MX_RTC_Init+0x124>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001a86:	4b31      	ldr	r3, [pc, #196]	; (8001b4c <MX_RTC_Init+0x124>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a8c:	482f      	ldr	r0, [pc, #188]	; (8001b4c <MX_RTC_Init+0x124>)
 8001a8e:	f003 fd2f 	bl	80054f0 <HAL_RTC_Init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8001a98:	f000 f936 	bl	8001d08 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001ab6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001aba:	2201      	movs	r2, #1
 8001abc:	4619      	mov	r1, r3
 8001abe:	4823      	ldr	r0, [pc, #140]	; (8001b4c <MX_RTC_Init+0x124>)
 8001ac0:	f003 fd98 	bl	80055f4 <HAL_RTC_SetTime>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8001aca:	f000 f91d 	bl	8001d08 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8001ada:	2301      	movs	r3, #1
 8001adc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001ae6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001aea:	2201      	movs	r2, #1
 8001aec:	4619      	mov	r1, r3
 8001aee:	4817      	ldr	r0, [pc, #92]	; (8001b4c <MX_RTC_Init+0x124>)
 8001af0:	f003 fe1c 	bl	800572c <HAL_RTC_SetDate>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_RTC_Init+0xd6>
  {
    Error_Handler();
 8001afa:	f000 f905 	bl	8001d08 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8001b22:	2301      	movs	r3, #1
 8001b24:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8001b28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001b2e:	1d3b      	adds	r3, r7, #4
 8001b30:	2201      	movs	r2, #1
 8001b32:	4619      	mov	r1, r3
 8001b34:	4805      	ldr	r0, [pc, #20]	; (8001b4c <MX_RTC_Init+0x124>)
 8001b36:	f003 fe7f 	bl	8005838 <HAL_RTC_SetAlarm>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 8001b40:	f000 f8e2 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001b44:	bf00      	nop
 8001b46:	3748      	adds	r7, #72	; 0x48
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	200004e4 	.word	0x200004e4
 8001b50:	40002800 	.word	0x40002800

08001b54 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001b58:	4b1b      	ldr	r3, [pc, #108]	; (8001bc8 <MX_SPI2_Init+0x74>)
 8001b5a:	4a1c      	ldr	r2, [pc, #112]	; (8001bcc <MX_SPI2_Init+0x78>)
 8001b5c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b5e:	4b1a      	ldr	r3, [pc, #104]	; (8001bc8 <MX_SPI2_Init+0x74>)
 8001b60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b64:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b66:	4b18      	ldr	r3, [pc, #96]	; (8001bc8 <MX_SPI2_Init+0x74>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b6c:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <MX_SPI2_Init+0x74>)
 8001b6e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001b72:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b74:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <MX_SPI2_Init+0x74>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b7a:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <MX_SPI2_Init+0x74>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b80:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <MX_SPI2_Init+0x74>)
 8001b82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b86:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b88:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <MX_SPI2_Init+0x74>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	; (8001bc8 <MX_SPI2_Init+0x74>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <MX_SPI2_Init+0x74>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <MX_SPI2_Init+0x74>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001ba0:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <MX_SPI2_Init+0x74>)
 8001ba2:	2207      	movs	r2, #7
 8001ba4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ba6:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <MX_SPI2_Init+0x74>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <MX_SPI2_Init+0x74>)
 8001bae:	2208      	movs	r2, #8
 8001bb0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001bb2:	4805      	ldr	r0, [pc, #20]	; (8001bc8 <MX_SPI2_Init+0x74>)
 8001bb4:	f003 fff9 	bl	8005baa <HAL_SPI_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001bbe:	f000 f8a3 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	2000051c 	.word	0x2000051c
 8001bcc:	40003800 	.word	0x40003800

08001bd0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001bd4:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <MX_TIM16_Init+0x44>)
 8001bd6:	4a10      	ldr	r2, [pc, #64]	; (8001c18 <MX_TIM16_Init+0x48>)
 8001bd8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001bda:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <MX_TIM16_Init+0x44>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <MX_TIM16_Init+0x44>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 47999;
 8001be6:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <MX_TIM16_Init+0x44>)
 8001be8:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8001bec:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bee:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <MX_TIM16_Init+0x44>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001bf4:	4b07      	ldr	r3, [pc, #28]	; (8001c14 <MX_TIM16_Init+0x44>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bfa:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <MX_TIM16_Init+0x44>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001c00:	4804      	ldr	r0, [pc, #16]	; (8001c14 <MX_TIM16_Init+0x44>)
 8001c02:	f004 f8a6 	bl	8005d52 <HAL_TIM_Base_Init>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001c0c:	f000 f87c 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000580 	.word	0x20000580
 8001c18:	40014400 	.word	0x40014400

08001c1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c22:	1d3b      	adds	r3, r7, #4
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c30:	2001      	movs	r0, #1
 8001c32:	f7ff fd38 	bl	80016a6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c36:	2002      	movs	r0, #2
 8001c38:	f7ff fd35 	bl	80016a6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c3c:	2004      	movs	r0, #4
 8001c3e:	f7ff fd32 	bl	80016a6 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PG_Pin|ADC_SW_Pin|FLASH_CS_Pin|MB_OC_Pin
 8001c42:	2200      	movs	r2, #0
 8001c44:	f44f 61de 	mov.w	r1, #1776	; 0x6f0
 8001c48:	481e      	ldr	r0, [pc, #120]	; (8001cc4 <MX_GPIO_Init+0xa8>)
 8001c4a:	f002 f82d 	bl	8003ca8 <HAL_GPIO_WritePin>
                          |LED_Pin|EXT_OC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MB_PWR_Pin|EXT_PWR_Pin, GPIO_PIN_RESET);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f240 2101 	movw	r1, #513	; 0x201
 8001c54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c58:	f002 f826 	bl	8003ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MB_CTL_GPIO_Port, MB_CTL_Pin, GPIO_PIN_RESET);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	2102      	movs	r1, #2
 8001c60:	4819      	ldr	r0, [pc, #100]	; (8001cc8 <MX_GPIO_Init+0xac>)
 8001c62:	f002 f821 	bl	8003ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG_Pin ADC_SW_Pin FLASH_CS_Pin MB_OC_Pin
                           LED_Pin EXT_OC_Pin */
  GPIO_InitStruct.Pin = PG_Pin|ADC_SW_Pin|FLASH_CS_Pin|MB_OC_Pin
 8001c66:	f44f 63de 	mov.w	r3, #1776	; 0x6f0
 8001c6a:	607b      	str	r3, [r7, #4]
                          |LED_Pin|EXT_OC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c74:	2300      	movs	r3, #0
 8001c76:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c78:	1d3b      	adds	r3, r7, #4
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4811      	ldr	r0, [pc, #68]	; (8001cc4 <MX_GPIO_Init+0xa8>)
 8001c7e:	f001 feb3 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MB_PWR_Pin EXT_PWR_Pin */
  GPIO_InitStruct.Pin = MB_PWR_Pin|EXT_PWR_Pin;
 8001c82:	f240 2301 	movw	r3, #513	; 0x201
 8001c86:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c90:	2300      	movs	r3, #0
 8001c92:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c94:	1d3b      	adds	r3, r7, #4
 8001c96:	4619      	mov	r1, r3
 8001c98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c9c:	f001 fea4 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MB_CTL_Pin */
  GPIO_InitStruct.Pin = MB_CTL_Pin;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cac:	2300      	movs	r3, #0
 8001cae:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(MB_CTL_GPIO_Port, &GPIO_InitStruct);
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4804      	ldr	r0, [pc, #16]	; (8001cc8 <MX_GPIO_Init+0xac>)
 8001cb6:	f001 fe97 	bl	80039e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cba:	bf00      	nop
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	48000400 	.word	0x48000400
 8001cc8:	48000800 	.word	0x48000800

08001ccc <Get_AdcHandle>:

/* USER CODE BEGIN 4 */


ADC_HandleTypeDef *Get_AdcHandle(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return &hadc;
 8001cd0:	4b02      	ldr	r3, [pc, #8]	; (8001cdc <Get_AdcHandle+0x10>)
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	20000304 	.word	0x20000304

08001ce0 <Get_DebugHandle>:


UART_HandleTypeDef *Get_DebugHandle(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return &huart2;
 8001ce4:	4b02      	ldr	r3, [pc, #8]	; (8001cf0 <Get_DebugHandle+0x10>)
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	20000450 	.word	0x20000450

08001cf4 <Get_SonarHandle>:

UART_HandleTypeDef *Get_SonarHandle(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return &hlpuart1;
 8001cf8:	4b02      	ldr	r3, [pc, #8]	; (8001d04 <Get_SonarHandle+0x10>)
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	200003bc 	.word	0x200003bc

08001d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d0c:	b672      	cpsid	i
}
 8001d0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d10:	e7fe      	b.n	8001d10 <Error_Handler+0x8>
	...

08001d14 <OS_Init>:




void OS_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
	TaskPointer = Task_ConfigGet();    // Get a pointer to the task configuration
 8001d18:	f000 fbce 	bl	80024b8 <Task_ConfigGet>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	4a02      	ldr	r2, [pc, #8]	; (8001d28 <OS_Init+0x14>)
 8001d20:	6013      	str	r3, [r2, #0]
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	200005d0 	.word	0x200005d0

08001d2c <OS_Run>:


void OS_Run(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
	const uint8_t NumTasks = Task_NumTasksGet();		// Number of tasks
 8001d32:	f000 fbcb 	bl	80024cc <Task_NumTasksGet>
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]

	Tick = SysTick_Get();		// Get current system tick
 8001d3a:	f000 facb 	bl	80022d4 <SysTick_Get>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	4a24      	ldr	r2, [pc, #144]	; (8001dd4 <OS_Run+0xa8>)
 8001d42:	6013      	str	r3, [r2, #0]

	/* Loop through the task configuration block and calculate whether there is
	 * a task that is ready to execute. If there is, execute that task. Otherwise
	 * continue looping.
	 */
	for(TaskIndex = 0; TaskIndex < NumTasks; TaskIndex++)
 8001d44:	4b24      	ldr	r3, [pc, #144]	; (8001dd8 <OS_Run+0xac>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	701a      	strb	r2, [r3, #0]
 8001d4a:	e039      	b.n	8001dc0 <OS_Run+0x94>
	{
		if((Tick - TaskPointer[TaskIndex].LastTick) >= TaskPointer[TaskIndex].Interval)
 8001d4c:	4b21      	ldr	r3, [pc, #132]	; (8001dd4 <OS_Run+0xa8>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	4b22      	ldr	r3, [pc, #136]	; (8001ddc <OS_Run+0xb0>)
 8001d52:	6819      	ldr	r1, [r3, #0]
 8001d54:	4b20      	ldr	r3, [pc, #128]	; (8001dd8 <OS_Run+0xac>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	4403      	add	r3, r0
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	440b      	add	r3, r1
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	1ad2      	subs	r2, r2, r3
 8001d68:	4b1c      	ldr	r3, [pc, #112]	; (8001ddc <OS_Run+0xb0>)
 8001d6a:	6819      	ldr	r1, [r3, #0]
 8001d6c:	4b1a      	ldr	r3, [pc, #104]	; (8001dd8 <OS_Run+0xac>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	4603      	mov	r3, r0
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4403      	add	r3, r0
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	881b      	ldrh	r3, [r3, #0]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d318      	bcc.n	8001db4 <OS_Run+0x88>
		{
			(*TaskPointer[TaskIndex].Func)();         // Execute Task
 8001d82:	4b16      	ldr	r3, [pc, #88]	; (8001ddc <OS_Run+0xb0>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <OS_Run+0xac>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	440b      	add	r3, r1
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	4798      	blx	r3
			TaskPointer[TaskIndex].LastTick = Tick;  // Save last tick the task was ran.
 8001d9a:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <OS_Run+0xb0>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <OS_Run+0xac>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	4619      	mov	r1, r3
 8001da4:	460b      	mov	r3, r1
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	440b      	add	r3, r1
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	4a09      	ldr	r2, [pc, #36]	; (8001dd4 <OS_Run+0xa8>)
 8001db0:	6812      	ldr	r2, [r2, #0]
 8001db2:	605a      	str	r2, [r3, #4]
	for(TaskIndex = 0; TaskIndex < NumTasks; TaskIndex++)
 8001db4:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <OS_Run+0xac>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	3301      	adds	r3, #1
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <OS_Run+0xac>)
 8001dbe:	701a      	strb	r2, [r3, #0]
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <OS_Run+0xac>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	79fa      	ldrb	r2, [r7, #7]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d8c0      	bhi.n	8001d4c <OS_Run+0x20>
		}
	}// end for
}
 8001dca:	bf00      	nop
 8001dcc:	bf00      	nop
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	200005cc 	.word	0x200005cc
 8001dd8:	200005d4 	.word	0x200005d4
 8001ddc:	200005d0 	.word	0x200005d0

08001de0 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001df0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001df4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr

08001e00 <LL_AHB2_GRP1_EnableClock>:
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4013      	ands	r3, r2
 8001e22:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e24:	68fb      	ldr	r3, [r7, #12]
}
 8001e26:	bf00      	nop
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr

08001e30 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4013      	ands	r3, r2
 8001e52:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e54:	68fb      	ldr	r3, [r7, #12]
}
 8001e56:	bf00      	nop
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr

08001e60 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e7c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4013      	ands	r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e84:	68fb      	ldr	r3, [r7, #12]
}
 8001e86:	bf00      	nop
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr

08001e90 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e9c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
}
 8001eb6:	bf00      	nop
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr

08001ecc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b088      	sub	sp, #32
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed4:	f107 030c 	add.w	r3, r7, #12
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
 8001ee2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a0c      	ldr	r2, [pc, #48]	; (8001f1c <HAL_ADC_MspInit+0x50>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d112      	bne.n	8001f14 <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001eee:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ef2:	f7ff ffcd 	bl	8001e90 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef6:	2002      	movs	r0, #2
 8001ef8:	f7ff ff82 	bl	8001e00 <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB3     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = ADC_IN_Pin;
 8001efc:	2308      	movs	r3, #8
 8001efe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f00:	2303      	movs	r3, #3
 8001f02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC_IN_GPIO_Port, &GPIO_InitStruct);
 8001f08:	f107 030c 	add.w	r3, r7, #12
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4804      	ldr	r0, [pc, #16]	; (8001f20 <HAL_ADC_MspInit+0x54>)
 8001f10:	f001 fd6a 	bl	80039e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }

}
 8001f14:	bf00      	nop
 8001f16:	3720      	adds	r7, #32
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40012400 	.word	0x40012400
 8001f20:	48000400 	.word	0x48000400

08001f24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b096      	sub	sp, #88	; 0x58
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f3c:	f107 030c 	add.w	r3, r7, #12
 8001f40:	2238      	movs	r2, #56	; 0x38
 8001f42:	2100      	movs	r1, #0
 8001f44:	4618      	mov	r0, r3
 8001f46:	f006 fb9f 	bl	8008688 <memset>
  if(hi2c->Instance==I2C2)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a21      	ldr	r2, [pc, #132]	; (8001fd4 <HAL_I2C_MspInit+0xb0>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d13b      	bne.n	8001fcc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001f54:	2380      	movs	r3, #128	; 0x80
 8001f56:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001f58:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f5e:	f107 030c 	add.w	r3, r7, #12
 8001f62:	4618      	mov	r0, r3
 8001f64:	f003 f9aa 	bl	80052bc <HAL_RCCEx_PeriphCLKConfig>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001f6e:	f7ff fecb 	bl	8001d08 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f72:	2001      	movs	r0, #1
 8001f74:	f7ff ff44 	bl	8001e00 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f78:	2002      	movs	r0, #2
 8001f7a:	f7ff ff41 	bl	8001e00 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = EXT_SDA_Pin;
 8001f7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f82:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f84:	2312      	movs	r3, #18
 8001f86:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f90:	2304      	movs	r3, #4
 8001f92:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(EXT_SDA_GPIO_Port, &GPIO_InitStruct);
 8001f94:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f98:	4619      	mov	r1, r3
 8001f9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f9e:	f001 fd23 	bl	80039e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EXT_SCL_Pin;
 8001fa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fa6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fa8:	2312      	movs	r3, #18
 8001faa:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001fb4:	2304      	movs	r3, #4
 8001fb6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(EXT_SCL_GPIO_Port, &GPIO_InitStruct);
 8001fb8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4806      	ldr	r0, [pc, #24]	; (8001fd8 <HAL_I2C_MspInit+0xb4>)
 8001fc0:	f001 fd12 	bl	80039e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001fc4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001fc8:	f7ff ff32 	bl	8001e30 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001fcc:	bf00      	nop
 8001fce:	3758      	adds	r7, #88	; 0x58
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40005800 	.word	0x40005800
 8001fd8:	48000400 	.word	0x48000400

08001fdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b096      	sub	sp, #88	; 0x58
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ff4:	f107 030c 	add.w	r3, r7, #12
 8001ff8:	2238      	movs	r2, #56	; 0x38
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f006 fb43 	bl	8008688 <memset>
  if(huart->Instance==LPUART1)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a30      	ldr	r2, [pc, #192]	; (80020c8 <HAL_UART_MspInit+0xec>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d125      	bne.n	8002058 <HAL_UART_MspInit+0x7c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800200c:	2320      	movs	r3, #32
 800200e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 8002010:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002014:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002016:	f107 030c 	add.w	r3, r7, #12
 800201a:	4618      	mov	r0, r3
 800201c:	f003 f94e 	bl	80052bc <HAL_RCCEx_PeriphCLKConfig>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002026:	f7ff fe6f 	bl	8001d08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800202a:	2001      	movs	r0, #1
 800202c:	f7ff ff18 	bl	8001e60 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002030:	2004      	movs	r0, #4
 8002032:	f7ff fee5 	bl	8001e00 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = MB_RX_Pin;
 8002036:	2301      	movs	r3, #1
 8002038:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800203a:	2312      	movs	r3, #18
 800203c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800203e:	2301      	movs	r3, #1
 8002040:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002042:	2300      	movs	r3, #0
 8002044:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002046:	2308      	movs	r3, #8
 8002048:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(MB_RX_GPIO_Port, &GPIO_InitStruct);
 800204a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800204e:	4619      	mov	r1, r3
 8002050:	481e      	ldr	r0, [pc, #120]	; (80020cc <HAL_UART_MspInit+0xf0>)
 8002052:	f001 fcc9 	bl	80039e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002056:	e033      	b.n	80020c0 <HAL_UART_MspInit+0xe4>
  else if(huart->Instance==USART2)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a1c      	ldr	r2, [pc, #112]	; (80020d0 <HAL_UART_MspInit+0xf4>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d12e      	bne.n	80020c0 <HAL_UART_MspInit+0xe4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002062:	2302      	movs	r3, #2
 8002064:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002066:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800206a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800206c:	f107 030c 	add.w	r3, r7, #12
 8002070:	4618      	mov	r0, r3
 8002072:	f003 f923 	bl	80052bc <HAL_RCCEx_PeriphCLKConfig>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <HAL_UART_MspInit+0xa4>
      Error_Handler();
 800207c:	f7ff fe44 	bl	8001d08 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002080:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002084:	f7ff fed4 	bl	8001e30 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002088:	2001      	movs	r0, #1
 800208a:	f7ff feb9 	bl	8001e00 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = UART_RX_Pin|UART_TX_Pin;
 800208e:	230c      	movs	r3, #12
 8002090:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002092:	2302      	movs	r3, #2
 8002094:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209a:	2300      	movs	r3, #0
 800209c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800209e:	2307      	movs	r3, #7
 80020a0:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80020a6:	4619      	mov	r1, r3
 80020a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ac:	f001 fc9c 	bl	80039e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80020b0:	2200      	movs	r2, #0
 80020b2:	2105      	movs	r1, #5
 80020b4:	2025      	movs	r0, #37	; 0x25
 80020b6:	f001 fba6 	bl	8003806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020ba:	2025      	movs	r0, #37	; 0x25
 80020bc:	f001 fbbd 	bl	800383a <HAL_NVIC_EnableIRQ>
}
 80020c0:	bf00      	nop
 80020c2:	3758      	adds	r7, #88	; 0x58
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40008000 	.word	0x40008000
 80020cc:	48000800 	.word	0x48000800
 80020d0:	40004400 	.word	0x40004400

080020d4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b090      	sub	sp, #64	; 0x40
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020dc:	f107 0308 	add.w	r3, r7, #8
 80020e0:	2238      	movs	r2, #56	; 0x38
 80020e2:	2100      	movs	r1, #0
 80020e4:	4618      	mov	r0, r3
 80020e6:	f006 facf 	bl	8008688 <memset>
  if(hrtc->Instance==RTC)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a0e      	ldr	r2, [pc, #56]	; (8002128 <HAL_RTC_MspInit+0x54>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d115      	bne.n	8002120 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80020f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020f8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80020fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020fe:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002100:	f107 0308 	add.w	r3, r7, #8
 8002104:	4618      	mov	r0, r3
 8002106:	f003 f8d9 	bl	80052bc <HAL_RCCEx_PeriphCLKConfig>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002110:	f7ff fdfa 	bl	8001d08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002114:	f7ff fe64 	bl	8001de0 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002118:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800211c:	f7ff fe88 	bl	8001e30 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002120:	bf00      	nop
 8002122:	3740      	adds	r7, #64	; 0x40
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40002800 	.word	0x40002800

0800212c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b096      	sub	sp, #88	; 0x58
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002134:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	60da      	str	r2, [r3, #12]
 8002142:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002144:	f107 030c 	add.w	r3, r7, #12
 8002148:	2238      	movs	r2, #56	; 0x38
 800214a:	2100      	movs	r1, #0
 800214c:	4618      	mov	r0, r3
 800214e:	f006 fa9b 	bl	8008688 <memset>
  if(hspi->Instance==SPI2)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a21      	ldr	r2, [pc, #132]	; (80021dc <HAL_SPI_MspInit+0xb0>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d13b      	bne.n	80021d4 <HAL_SPI_MspInit+0xa8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 800215c:	2310      	movs	r3, #16
 800215e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 8002160:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002164:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002166:	f107 030c 	add.w	r3, r7, #12
 800216a:	4618      	mov	r0, r3
 800216c:	f003 f8a6 	bl	80052bc <HAL_RCCEx_PeriphCLKConfig>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002176:	f7ff fdc7 	bl	8001d08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800217a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800217e:	f7ff fe57 	bl	8001e30 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002182:	2002      	movs	r0, #2
 8002184:	f7ff fe3c 	bl	8001e00 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002188:	2001      	movs	r0, #1
 800218a:	f7ff fe39 	bl	8001e00 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PA10     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = MISO_Pin|SCK_Pin;
 800218e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002192:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002194:	2302      	movs	r3, #2
 8002196:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219c:	2300      	movs	r3, #0
 800219e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021a0:	2305      	movs	r3, #5
 80021a2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80021a8:	4619      	mov	r1, r3
 80021aa:	480d      	ldr	r0, [pc, #52]	; (80021e0 <HAL_SPI_MspInit+0xb4>)
 80021ac:	f001 fc1c 	bl	80039e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOSI_Pin;
 80021b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021b4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b6:	2302      	movs	r3, #2
 80021b8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021be:	2300      	movs	r3, #0
 80021c0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021c2:	2305      	movs	r3, #5
 80021c4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(MOSI_GPIO_Port, &GPIO_InitStruct);
 80021c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80021ca:	4619      	mov	r1, r3
 80021cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021d0:	f001 fc0a 	bl	80039e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80021d4:	bf00      	nop
 80021d6:	3758      	adds	r7, #88	; 0x58
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40003800 	.word	0x40003800
 80021e0:	48000400 	.word	0x48000400

080021e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a09      	ldr	r2, [pc, #36]	; (8002218 <HAL_TIM_Base_MspInit+0x34>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d10b      	bne.n	800220e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80021f6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80021fa:	f7ff fe49 	bl	8001e90 <LL_APB2_GRP1_EnableClock>
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 15, 0);
 80021fe:	2200      	movs	r2, #0
 8002200:	210f      	movs	r1, #15
 8002202:	201c      	movs	r0, #28
 8002204:	f001 faff 	bl	8003806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002208:	201c      	movs	r0, #28
 800220a:	f001 fb16 	bl	800383a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800220e:	bf00      	nop
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40014400 	.word	0x40014400

0800221c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002220:	e7fe      	b.n	8002220 <NMI_Handler+0x4>

08002222 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002226:	e7fe      	b.n	8002226 <HardFault_Handler+0x4>

08002228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800222c:	e7fe      	b.n	800222c <MemManage_Handler+0x4>

0800222e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800222e:	b480      	push	{r7}
 8002230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002232:	e7fe      	b.n	8002232 <BusFault_Handler+0x4>

08002234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002238:	e7fe      	b.n	8002238 <UsageFault_Handler+0x4>

0800223a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	46bd      	mov	sp, r7
 8002242:	bc80      	pop	{r7}
 8002244:	4770      	bx	lr

08002246 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002246:	b480      	push	{r7}
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr

08002252 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	46bd      	mov	sp, r7
 800225a:	bc80      	pop	{r7}
 800225c:	4770      	bx	lr

0800225e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002262:	f000 f9bf 	bl	80025e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002270:	4802      	ldr	r0, [pc, #8]	; (800227c <USART2_IRQHandler+0x10>)
 8002272:	f004 fa39 	bl	80066e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20000450 	.word	0x20000450

08002280 <Tick_Init>:
 */
static volatile uint32_t Tick = 0;
extern TIM_HandleTypeDef htim16;

void Tick_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 8002284:	4b11      	ldr	r3, [pc, #68]	; (80022cc <Tick_Init+0x4c>)
 8002286:	4a12      	ldr	r2, [pc, #72]	; (80022d0 <Tick_Init+0x50>)
 8002288:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 0;
 800228a:	4b10      	ldr	r3, [pc, #64]	; (80022cc <Tick_Init+0x4c>)
 800228c:	2200      	movs	r2, #0
 800228e:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002290:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <Tick_Init+0x4c>)
 8002292:	2200      	movs	r2, #0
 8002294:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 47999;
 8002296:	4b0d      	ldr	r3, [pc, #52]	; (80022cc <Tick_Init+0x4c>)
 8002298:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 800229c:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800229e:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <Tick_Init+0x4c>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 80022a4:	4b09      	ldr	r3, [pc, #36]	; (80022cc <Tick_Init+0x4c>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022aa:	4b08      	ldr	r3, [pc, #32]	; (80022cc <Tick_Init+0x4c>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80022b0:	4806      	ldr	r0, [pc, #24]	; (80022cc <Tick_Init+0x4c>)
 80022b2:	f003 fd4e 	bl	8005d52 <HAL_TIM_Base_Init>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <Tick_Init+0x40>
	{
		Error_Handler();
 80022bc:	f7ff fd24 	bl	8001d08 <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */
	HAL_TIM_Base_Start_IT(&htim16);
 80022c0:	4802      	ldr	r0, [pc, #8]	; (80022cc <Tick_Init+0x4c>)
 80022c2:	f003 fd9d 	bl	8005e00 <HAL_TIM_Base_Start_IT>
	/* USER CODE END TIM16_Init 2 */
}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20000580 	.word	0x20000580
 80022d0:	40014400 	.word	0x40014400

080022d4 <SysTick_Get>:

uint32_t SysTick_Get()
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
	return Tick;
 80022d8:	4b02      	ldr	r3, [pc, #8]	; (80022e4 <SysTick_Get+0x10>)
 80022da:	681b      	ldr	r3, [r3, #0]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr
 80022e4:	200005d8 	.word	0x200005d8

080022e8 <TIM16_IRQHandler>:

/**
 * @brief This function handles TIM16 global interrupt.
 */
void TIM16_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM16_IRQn 0 */

	/* USER CODE END TIM16_IRQn 0 */
	HAL_TIM_IRQHandler(&htim16);
 80022ec:	4804      	ldr	r0, [pc, #16]	; (8002300 <TIM16_IRQHandler+0x18>)
 80022ee:	f003 fdd3 	bl	8005e98 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM16_IRQn 1 */
	Tick++;
 80022f2:	4b04      	ldr	r3, [pc, #16]	; (8002304 <TIM16_IRQHandler+0x1c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	3301      	adds	r3, #1
 80022f8:	4a02      	ldr	r2, [pc, #8]	; (8002304 <TIM16_IRQHandler+0x1c>)
 80022fa:	6013      	str	r3, [r2, #0]
	/* USER CODE END TIM16_IRQn 1 */
}
 80022fc:	bf00      	nop
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	20000580 	.word	0x20000580
 8002304:	200005d8 	.word	0x200005d8

08002308 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  return 1;
 800230c:	2301      	movs	r3, #1
}
 800230e:	4618      	mov	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	bc80      	pop	{r7}
 8002314:	4770      	bx	lr

08002316 <_kill>:

int _kill(int pid, int sig)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002320:	f006 f988 	bl	8008634 <__errno>
 8002324:	4603      	mov	r3, r0
 8002326:	2216      	movs	r2, #22
 8002328:	601a      	str	r2, [r3, #0]
  return -1;
 800232a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <_exit>:

void _exit (int status)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b082      	sub	sp, #8
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800233e:	f04f 31ff 	mov.w	r1, #4294967295
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7ff ffe7 	bl	8002316 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002348:	e7fe      	b.n	8002348 <_exit+0x12>

0800234a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b086      	sub	sp, #24
 800234e:	af00      	add	r7, sp, #0
 8002350:	60f8      	str	r0, [r7, #12]
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]
 800235a:	e00a      	b.n	8002372 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800235c:	f3af 8000 	nop.w
 8002360:	4601      	mov	r1, r0
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	1c5a      	adds	r2, r3, #1
 8002366:	60ba      	str	r2, [r7, #8]
 8002368:	b2ca      	uxtb	r2, r1
 800236a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	3301      	adds	r3, #1
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	429a      	cmp	r2, r3
 8002378:	dbf0      	blt.n	800235c <_read+0x12>
  }

  return len;
 800237a:	687b      	ldr	r3, [r7, #4]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	e009      	b.n	80023aa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	1c5a      	adds	r2, r3, #1
 800239a:	60ba      	str	r2, [r7, #8]
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	3301      	adds	r3, #1
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	dbf1      	blt.n	8002396 <_write+0x12>
  }
  return len;
 80023b2:	687b      	ldr	r3, [r7, #4]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3718      	adds	r7, #24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <_close>:

int _close(int file)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr

080023d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b083      	sub	sp, #12
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
 80023da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023e2:	605a      	str	r2, [r3, #4]
  return 0;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr

080023f0 <_isatty>:

int _isatty(int file)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023f8:	2301      	movs	r3, #1
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr

08002404 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002424:	4a14      	ldr	r2, [pc, #80]	; (8002478 <_sbrk+0x5c>)
 8002426:	4b15      	ldr	r3, [pc, #84]	; (800247c <_sbrk+0x60>)
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002430:	4b13      	ldr	r3, [pc, #76]	; (8002480 <_sbrk+0x64>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d102      	bne.n	800243e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002438:	4b11      	ldr	r3, [pc, #68]	; (8002480 <_sbrk+0x64>)
 800243a:	4a12      	ldr	r2, [pc, #72]	; (8002484 <_sbrk+0x68>)
 800243c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800243e:	4b10      	ldr	r3, [pc, #64]	; (8002480 <_sbrk+0x64>)
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4413      	add	r3, r2
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	429a      	cmp	r2, r3
 800244a:	d207      	bcs.n	800245c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800244c:	f006 f8f2 	bl	8008634 <__errno>
 8002450:	4603      	mov	r3, r0
 8002452:	220c      	movs	r2, #12
 8002454:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002456:	f04f 33ff 	mov.w	r3, #4294967295
 800245a:	e009      	b.n	8002470 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800245c:	4b08      	ldr	r3, [pc, #32]	; (8002480 <_sbrk+0x64>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002462:	4b07      	ldr	r3, [pc, #28]	; (8002480 <_sbrk+0x64>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4413      	add	r3, r2
 800246a:	4a05      	ldr	r2, [pc, #20]	; (8002480 <_sbrk+0x64>)
 800246c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800246e:	68fb      	ldr	r3, [r7, #12]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	20010000 	.word	0x20010000
 800247c:	00000400 	.word	0x00000400
 8002480:	200005dc 	.word	0x200005dc
 8002484:	200005f8 	.word	0x200005f8

08002488 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr

08002494 <Task>:

#include <task.h>					// For this modules definitions

void Task(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  // Place your idle task code here
}
 8002498:	bf00      	nop
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr

080024a0 <Task_100ms>:
#include <stdbool.h>



void Task_100ms(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
	//serialPutStr("100ms\n");
}
 80024a4:	bf00      	nop
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr

080024ac <Task_10ms>:
*******************************************************************************/
#include <task_10ms.h>					// For this modules definitions


void Task_10ms(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
	//serialPutStr("10ms\n");
}
 80024b0:	bf00      	nop
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr

080024b8 <Task_ConfigGet>:
 */
static uint8_t const TaskTotalNumber = sizeof(Tasks) / sizeof(*Tasks);


Task_t *Task_ConfigGet(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
   	return Tasks;
 80024bc:	4b02      	ldr	r3, [pc, #8]	; (80024c8 <Task_ConfigGet+0x10>)
}
 80024be:	4618      	mov	r0, r3
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bc80      	pop	{r7}
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	20000004 	.word	0x20000004

080024cc <Task_NumTasksGet>:


uint8_t const Task_NumTasksGet(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
	return TaskTotalNumber;
 80024d0:	2305      	movs	r3, #5
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr
	...

080024dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024dc:	480d      	ldr	r0, [pc, #52]	; (8002514 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024de:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80024e0:	f7ff ffd2 	bl	8002488 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024e4:	480c      	ldr	r0, [pc, #48]	; (8002518 <LoopForever+0x6>)
  ldr r1, =_edata
 80024e6:	490d      	ldr	r1, [pc, #52]	; (800251c <LoopForever+0xa>)
  ldr r2, =_sidata
 80024e8:	4a0d      	ldr	r2, [pc, #52]	; (8002520 <LoopForever+0xe>)
  movs r3, #0
 80024ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024ec:	e002      	b.n	80024f4 <LoopCopyDataInit>

080024ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024f2:	3304      	adds	r3, #4

080024f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024f8:	d3f9      	bcc.n	80024ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024fa:	4a0a      	ldr	r2, [pc, #40]	; (8002524 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024fc:	4c0a      	ldr	r4, [pc, #40]	; (8002528 <LoopForever+0x16>)
  movs r3, #0
 80024fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002500:	e001      	b.n	8002506 <LoopFillZerobss>

08002502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002504:	3204      	adds	r2, #4

08002506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002508:	d3fb      	bcc.n	8002502 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800250a:	f006 f899 	bl	8008640 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800250e:	f7ff f8e2 	bl	80016d6 <main>

08002512 <LoopForever>:

LoopForever:
    b LoopForever
 8002512:	e7fe      	b.n	8002512 <LoopForever>
  ldr   r0, =_estack
 8002514:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800251c:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8002520:	0800b3e0 	.word	0x0800b3e0
  ldr r2, =_sbss
 8002524:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8002528:	200005f4 	.word	0x200005f4

0800252c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800252c:	e7fe      	b.n	800252c <ADC_IRQHandler>
	...

08002530 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002536:	2300      	movs	r3, #0
 8002538:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800253a:	2003      	movs	r0, #3
 800253c:	f001 f958 	bl	80037f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002540:	f002 fcde 	bl	8004f00 <HAL_RCC_GetHCLKFreq>
 8002544:	4603      	mov	r3, r0
 8002546:	4a09      	ldr	r2, [pc, #36]	; (800256c <HAL_Init+0x3c>)
 8002548:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800254a:	200f      	movs	r0, #15
 800254c:	f000 f810 	bl	8002570 <HAL_InitTick>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	71fb      	strb	r3, [r7, #7]
 800255a:	e001      	b.n	8002560 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800255c:	f7ff fcb0 	bl	8001ec0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002560:	79fb      	ldrb	r3, [r7, #7]
}
 8002562:	4618      	mov	r0, r3
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	20000000 	.word	0x20000000

08002570 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002578:	2300      	movs	r3, #0
 800257a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800257c:	4b17      	ldr	r3, [pc, #92]	; (80025dc <HAL_InitTick+0x6c>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d024      	beq.n	80025ce <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002584:	f002 fcbc 	bl	8004f00 <HAL_RCC_GetHCLKFreq>
 8002588:	4602      	mov	r2, r0
 800258a:	4b14      	ldr	r3, [pc, #80]	; (80025dc <HAL_InitTick+0x6c>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	4619      	mov	r1, r3
 8002590:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002594:	fbb3 f3f1 	udiv	r3, r3, r1
 8002598:	fbb2 f3f3 	udiv	r3, r2, r3
 800259c:	4618      	mov	r0, r3
 800259e:	f001 f95a 	bl	8003856 <HAL_SYSTICK_Config>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10f      	bne.n	80025c8 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b0f      	cmp	r3, #15
 80025ac:	d809      	bhi.n	80025c2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025ae:	2200      	movs	r2, #0
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	f04f 30ff 	mov.w	r0, #4294967295
 80025b6:	f001 f926 	bl	8003806 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025ba:	4a09      	ldr	r2, [pc, #36]	; (80025e0 <HAL_InitTick+0x70>)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6013      	str	r3, [r2, #0]
 80025c0:	e007      	b.n	80025d2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	73fb      	strb	r3, [r7, #15]
 80025c6:	e004      	b.n	80025d2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	73fb      	strb	r3, [r7, #15]
 80025cc:	e001      	b.n	80025d2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	20000044 	.word	0x20000044
 80025e0:	20000040 	.word	0x20000040

080025e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025e8:	4b05      	ldr	r3, [pc, #20]	; (8002600 <HAL_IncTick+0x1c>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	461a      	mov	r2, r3
 80025ee:	4b05      	ldr	r3, [pc, #20]	; (8002604 <HAL_IncTick+0x20>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4413      	add	r3, r2
 80025f4:	4a03      	ldr	r2, [pc, #12]	; (8002604 <HAL_IncTick+0x20>)
 80025f6:	6013      	str	r3, [r2, #0]
}
 80025f8:	bf00      	nop
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr
 8002600:	20000044 	.word	0x20000044
 8002604:	200005e0 	.word	0x200005e0

08002608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  return uwTick;
 800260c:	4b02      	ldr	r3, [pc, #8]	; (8002618 <HAL_GetTick+0x10>)
 800260e:	681b      	ldr	r3, [r3, #0]
}
 8002610:	4618      	mov	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr
 8002618:	200005e0 	.word	0x200005e0

0800261c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002624:	f7ff fff0 	bl	8002608 <HAL_GetTick>
 8002628:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002634:	d005      	beq.n	8002642 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002636:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <HAL_Delay+0x44>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4413      	add	r3, r2
 8002640:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002642:	bf00      	nop
 8002644:	f7ff ffe0 	bl	8002608 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	429a      	cmp	r2, r3
 8002652:	d8f7      	bhi.n	8002644 <HAL_Delay+0x28>
  {
  }
}
 8002654:	bf00      	nop
 8002656:	bf00      	nop
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000044 	.word	0x20000044

08002664 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8002668:	4b02      	ldr	r3, [pc, #8]	; (8002674 <HAL_GetUIDw0+0x10>)
 800266a:	681b      	ldr	r3, [r3, #0]
}
 800266c:	4618      	mov	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr
 8002674:	1fff7590 	.word	0x1fff7590

08002678 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 800267c:	4b02      	ldr	r3, [pc, #8]	; (8002688 <HAL_GetUIDw1+0x10>)
 800267e:	681b      	ldr	r3, [r3, #0]
}
 8002680:	4618      	mov	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr
 8002688:	1fff7594 	.word	0x1fff7594

0800268c <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002690:	4b02      	ldr	r3, [pc, #8]	; (800269c <HAL_GetUIDw2+0x10>)
 8002692:	681b      	ldr	r3, [r3, #0]
}
 8002694:	4618      	mov	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr
 800269c:	1fff7598 	.word	0x1fff7598

080026a0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	431a      	orrs	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	601a      	str	r2, [r3, #0]
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr

080026c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr

080026de <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80026de:	b480      	push	{r7}
 80026e0:	b085      	sub	sp, #20
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	60f8      	str	r0, [r7, #12]
 80026e6:	60b9      	str	r1, [r7, #8]
 80026e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	695a      	ldr	r2, [r3, #20]
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2107      	movs	r1, #7
 80026f6:	fa01 f303 	lsl.w	r3, r1, r3
 80026fa:	43db      	mvns	r3, r3
 80026fc:	401a      	ands	r2, r3
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	fa01 f303 	lsl.w	r3, r1, r3
 800270a:	431a      	orrs	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002710:	bf00      	nop
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr

0800271a <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
 8002722:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	695a      	ldr	r2, [r3, #20]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	f003 0304 	and.w	r3, r3, #4
 800272e:	2107      	movs	r1, #7
 8002730:	fa01 f303 	lsl.w	r3, r1, r3
 8002734:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800273c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002740:	4618      	mov	r0, r3
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr

0800274a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800275e:	2301      	movs	r3, #1
 8002760:	e000      	b.n	8002764 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr

0800276e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800276e:	b480      	push	{r7}
 8002770:	b085      	sub	sp, #20
 8002772:	af00      	add	r7, sp, #0
 8002774:	60f8      	str	r0, [r7, #12]
 8002776:	60b9      	str	r1, [r7, #8]
 8002778:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	f003 031f 	and.w	r3, r3, #31
 8002784:	210f      	movs	r1, #15
 8002786:	fa01 f303 	lsl.w	r3, r1, r3
 800278a:	43db      	mvns	r3, r3
 800278c:	401a      	ands	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	0e9b      	lsrs	r3, r3, #26
 8002792:	f003 010f 	and.w	r1, r3, #15
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	f003 031f 	and.w	r3, r3, #31
 800279c:	fa01 f303 	lsl.w	r3, r1, r3
 80027a0:	431a      	orrs	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80027a6:	bf00      	nop
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr

080027b0 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80027c4:	431a      	orrs	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr

080027d4 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80027e8:	43db      	mvns	r3, r3
 80027ea:	401a      	ands	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr

080027fa <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b085      	sub	sp, #20
 80027fe:	af00      	add	r7, sp, #0
 8002800:	60f8      	str	r0, [r7, #12]
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	695a      	ldr	r2, [r3, #20]
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	021b      	lsls	r3, r3, #8
 800280e:	43db      	mvns	r3, r3
 8002810:	401a      	ands	r2, r3
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	0219      	lsls	r1, r3, #8
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	400b      	ands	r3, r1
 800281a:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 800281e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002822:	431a      	orrs	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002828:	bf00      	nop
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr

08002832 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002832:	b480      	push	{r7}
 8002834:	b083      	sub	sp, #12
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002842:	f023 0317 	bic.w	r3, r3, #23
 8002846:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002868:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800286c:	d101      	bne.n	8002872 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800286e:	2301      	movs	r3, #1
 8002870:	e000      	b.n	8002874 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr

0800287e <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800288e:	f023 0317 	bic.w	r3, r3, #23
 8002892:	f043 0201 	orr.w	r2, r3, #1
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr

080028a4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028b4:	f023 0317 	bic.w	r3, r3, #23
 80028b8:	f043 0202 	orr.w	r2, r3, #2
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr

080028ca <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d101      	bne.n	80028e2 <LL_ADC_IsEnabled+0x18>
 80028de:	2301      	movs	r3, #1
 80028e0:	e000      	b.n	80028e4 <LL_ADC_IsEnabled+0x1a>
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr

080028ee <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d101      	bne.n	8002906 <LL_ADC_IsDisableOngoing+0x18>
 8002902:	2301      	movs	r3, #1
 8002904:	e000      	b.n	8002908 <LL_ADC_IsDisableOngoing+0x1a>
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr

08002912 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002912:	b480      	push	{r7}
 8002914:	b083      	sub	sp, #12
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002922:	f023 0317 	bic.w	r3, r3, #23
 8002926:	f043 0204 	orr.w	r2, r3, #4
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr

08002938 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002948:	f023 0317 	bic.w	r3, r3, #23
 800294c:	f043 0210 	orr.w	r2, r3, #16
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr

0800295e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 0304 	and.w	r3, r3, #4
 800296e:	2b04      	cmp	r3, #4
 8002970:	d101      	bne.n	8002976 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	bc80      	pop	{r7}
 8002980:	4770      	bx	lr
	...

08002984 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8002990:	2300      	movs	r3, #0
 8002992:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002994:	2300      	movs	r3, #0
 8002996:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002998:	2300      	movs	r3, #0
 800299a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e17e      	b.n	8002ca4 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d109      	bne.n	80029c8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f7ff fa89 	bl	8001ecc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff ff43 	bl	8002858 <LL_ADC_IsInternalRegulatorEnabled>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d115      	bne.n	8002a04 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff ff28 	bl	8002832 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029e2:	4b9e      	ldr	r3, [pc, #632]	; (8002c5c <HAL_ADC_Init+0x2d8>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	099b      	lsrs	r3, r3, #6
 80029e8:	4a9d      	ldr	r2, [pc, #628]	; (8002c60 <HAL_ADC_Init+0x2dc>)
 80029ea:	fba2 2303 	umull	r2, r3, r2, r3
 80029ee:	099b      	lsrs	r3, r3, #6
 80029f0:	3301      	adds	r3, #1
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80029f6:	e002      	b.n	80029fe <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	3b01      	subs	r3, #1
 80029fc:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1f9      	bne.n	80029f8 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff ff25 	bl	8002858 <LL_ADC_IsInternalRegulatorEnabled>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10d      	bne.n	8002a30 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a18:	f043 0210 	orr.w	r2, r3, #16
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a24:	f043 0201 	orr.w	r2, r3, #1
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff ff92 	bl	800295e <LL_ADC_REG_IsConversionOngoing>
 8002a3a:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a40:	f003 0310 	and.w	r3, r3, #16
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f040 8124 	bne.w	8002c92 <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f040 8120 	bne.w	8002c92 <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a56:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002a5a:	f043 0202 	orr.w	r2, r3, #2
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff ff2f 	bl	80028ca <LL_ADC_IsEnabled>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f040 80a7 	bne.w	8002bc2 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	7e1b      	ldrb	r3, [r3, #24]
 8002a7c:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002a7e:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	7e5b      	ldrb	r3, [r3, #25]
 8002a84:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002a86:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	7e9b      	ldrb	r3, [r3, #26]
 8002a8c:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002a8e:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a94:	2a00      	cmp	r2, #0
 8002a96:	d002      	beq.n	8002a9e <HAL_ADC_Init+0x11a>
 8002a98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a9c:	e000      	b.n	8002aa0 <HAL_ADC_Init+0x11c>
 8002a9e:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002aa0:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002aa6:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	da04      	bge.n	8002aba <HAL_ADC_Init+0x136>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ab8:	e001      	b.n	8002abe <HAL_ADC_Init+0x13a>
 8002aba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8002abe:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002ac6:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002ac8:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d114      	bne.n	8002b04 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	7e9b      	ldrb	r3, [r3, #26]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d104      	bne.n	8002aec <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae8:	61bb      	str	r3, [r7, #24]
 8002aea:	e00b      	b.n	8002b04 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af0:	f043 0220 	orr.w	r2, r3, #32
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afc:	f043 0201 	orr.w	r2, r3, #1
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d009      	beq.n	8002b20 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b10:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8002b2a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6812      	ldr	r2, [r2, #0]
 8002b32:	69b9      	ldr	r1, [r7, #24]
 8002b34:	430b      	orrs	r3, r1
 8002b36:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002b44:	4313      	orrs	r3, r2
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d111      	bne.n	8002b7a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002b62:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002b68:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002b6e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	691a      	ldr	r2, [r3, #16]
 8002b80:	4b38      	ldr	r3, [pc, #224]	; (8002c64 <HAL_ADC_Init+0x2e0>)
 8002b82:	4013      	ands	r3, r2
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	6812      	ldr	r2, [r2, #0]
 8002b88:	6979      	ldr	r1, [r7, #20]
 8002b8a:	430b      	orrs	r3, r1
 8002b8c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002b96:	d014      	beq.n	8002bc2 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ba0:	d00f      	beq.n	8002bc2 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002ba6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002baa:	d00a      	beq.n	8002bc2 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002bac:	4b2e      	ldr	r3, [pc, #184]	; (8002c68 <HAL_ADC_Init+0x2e4>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002bbc:	492a      	ldr	r1, [pc, #168]	; (8002c68 <HAL_ADC_Init+0x2e4>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6818      	ldr	r0, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bca:	461a      	mov	r2, r3
 8002bcc:	2100      	movs	r1, #0
 8002bce:	f7ff fd86 	bl	80026de <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6818      	ldr	r0, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bda:	461a      	mov	r2, r3
 8002bdc:	4923      	ldr	r1, [pc, #140]	; (8002c6c <HAL_ADC_Init+0x2e8>)
 8002bde:	f7ff fd7e 	bl	80026de <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d108      	bne.n	8002bfc <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f062 020f 	orn	r2, r2, #15
 8002bf8:	629a      	str	r2, [r3, #40]	; 0x28
 8002bfa:	e017      	b.n	8002c2c <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c04:	d112      	bne.n	8002c2c <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	69db      	ldr	r3, [r3, #28]
 8002c10:	3b01      	subs	r3, #1
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	f003 031c 	and.w	r3, r3, #28
 8002c18:	f06f 020f 	mvn.w	r2, #15
 8002c1c:	fa02 f103 	lsl.w	r1, r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2100      	movs	r1, #0
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff fd71 	bl	800271a <LL_ADC_GetSamplingTimeCommonChannels>
 8002c38:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d116      	bne.n	8002c70 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4c:	f023 0303 	bic.w	r3, r3, #3
 8002c50:	f043 0201 	orr.w	r2, r3, #1
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002c58:	e023      	b.n	8002ca2 <HAL_ADC_Init+0x31e>
 8002c5a:	bf00      	nop
 8002c5c:	20000000 	.word	0x20000000
 8002c60:	053e2d63 	.word	0x053e2d63
 8002c64:	1ffffc02 	.word	0x1ffffc02
 8002c68:	40012708 	.word	0x40012708
 8002c6c:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c74:	f023 0312 	bic.w	r3, r3, #18
 8002c78:	f043 0210 	orr.w	r2, r3, #16
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c84:	f043 0201 	orr.w	r2, r3, #1
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002c90:	e007      	b.n	8002ca2 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c96:	f043 0210 	orr.w	r2, r3, #16
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8002ca2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3720      	adds	r7, #32
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff fe50 	bl	800295e <LL_ADC_REG_IsConversionOngoing>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d132      	bne.n	8002d2a <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d101      	bne.n	8002cd2 <HAL_ADC_Start+0x26>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	e02e      	b.n	8002d30 <HAL_ADC_Start+0x84>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 fa8a 	bl	80031f4 <ADC_Enable>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002ce4:	7bfb      	ldrb	r3, [r7, #15]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d11a      	bne.n	8002d20 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002cf2:	f023 0301 	bic.w	r3, r3, #1
 8002cf6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	221c      	movs	r2, #28
 8002d0a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff fdfa 	bl	8002912 <LL_ADC_REG_StartConversion>
 8002d1e:	e006      	b.n	8002d2e <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002d28:	e001      	b.n	8002d2e <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d101      	bne.n	8002d4e <HAL_ADC_Stop+0x16>
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	e022      	b.n	8002d94 <HAL_ADC_Stop+0x5c>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 fa07 	bl	800316a <ADC_ConversionStop>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d111      	bne.n	8002d8a <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 faca 	bl	8003300 <ADC_Disable>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d109      	bne.n	8002d8a <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d7e:	f023 0301 	bic.w	r3, r3, #1
 8002d82:	f043 0201 	orr.w	r2, r3, #1
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	2b08      	cmp	r3, #8
 8002dac:	d102      	bne.n	8002db4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8002dae:	2308      	movs	r3, #8
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	e010      	b.n	8002dd6 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d007      	beq.n	8002dd2 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc6:	f043 0220 	orr.w	r2, r3, #32
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e077      	b.n	8002ec2 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002dd2:	2304      	movs	r3, #4
 8002dd4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002dd6:	f7ff fc17 	bl	8002608 <HAL_GetTick>
 8002dda:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002ddc:	e021      	b.n	8002e22 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de4:	d01d      	beq.n	8002e22 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002de6:	f7ff fc0f 	bl	8002608 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d302      	bcc.n	8002dfc <HAL_ADC_PollForConversion+0x60>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d112      	bne.n	8002e22 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	4013      	ands	r3, r2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10b      	bne.n	8002e22 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0e:	f043 0204 	orr.w	r2, r3, #4
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e04f      	b.n	8002ec2 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0d6      	beq.n	8002dde <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e34:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff fc82 	bl	800274a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d031      	beq.n	8002eb0 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	7e9b      	ldrb	r3, [r3, #26]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d12d      	bne.n	8002eb0 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0308 	and.w	r3, r3, #8
 8002e5e:	2b08      	cmp	r3, #8
 8002e60:	d126      	bne.n	8002eb0 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff fd79 	bl	800295e <LL_ADC_REG_IsConversionOngoing>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d112      	bne.n	8002e98 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 020c 	bic.w	r2, r2, #12
 8002e80:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e8a:	f023 0301 	bic.w	r3, r3, #1
 8002e8e:	f043 0201 	orr.w	r2, r3, #1
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	659a      	str	r2, [r3, #88]	; 0x58
 8002e96:	e00b      	b.n	8002eb0 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9c:	f043 0220 	orr.w	r2, r3, #32
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea8:	f043 0201 	orr.w	r2, r3, #1
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	7e1b      	ldrb	r3, [r3, #24]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d103      	bne.n	8002ec0 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	220c      	movs	r2, #12
 8002ebe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bc80      	pop	{r7}
 8002ee0:	4770      	bx	lr
	...

08002ee4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b088      	sub	sp, #32
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d101      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x28>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	e110      	b.n	800312e <HAL_ADC_ConfigChannel+0x24a>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff fd20 	bl	800295e <LL_ADC_REG_IsConversionOngoing>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f040 80f7 	bne.w	8003114 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	f000 80b1 	beq.w	8003092 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f38:	d004      	beq.n	8002f44 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002f3e:	4a7e      	ldr	r2, [pc, #504]	; (8003138 <HAL_ADC_ConfigChannel+0x254>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d108      	bne.n	8002f56 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4610      	mov	r0, r2
 8002f50:	f7ff fc2e 	bl	80027b0 <LL_ADC_REG_SetSequencerChAdd>
 8002f54:	e041      	b.n	8002fda <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f003 031f 	and.w	r3, r3, #31
 8002f62:	210f      	movs	r1, #15
 8002f64:	fa01 f303 	lsl.w	r3, r1, r3
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	401a      	ands	r2, r3
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d105      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0xa0>
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	0e9b      	lsrs	r3, r3, #26
 8002f7e:	f003 031f 	and.w	r3, r3, #31
 8002f82:	e011      	b.n	8002fa8 <HAL_ADC_ConfigChannel+0xc4>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	fa93 f3a3 	rbit	r3, r3
 8002f90:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d101      	bne.n	8002fa0 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8002f9c:	2320      	movs	r3, #32
 8002f9e:	e003      	b.n	8002fa8 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	fab3 f383 	clz	r3, r3
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	6839      	ldr	r1, [r7, #0]
 8002faa:	6849      	ldr	r1, [r1, #4]
 8002fac:	f001 011f 	and.w	r1, r1, #31
 8002fb0:	408b      	lsls	r3, r1
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	089b      	lsrs	r3, r3, #2
 8002fbe:	1c5a      	adds	r2, r3, #1
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	69db      	ldr	r3, [r3, #28]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d808      	bhi.n	8002fda <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6818      	ldr	r0, [r3, #0]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	6859      	ldr	r1, [r3, #4]
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	f7ff fbca 	bl	800276e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6818      	ldr	r0, [r3, #0]
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	6819      	ldr	r1, [r3, #0]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	f7ff fc07 	bl	80027fa <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f280 8097 	bge.w	8003124 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ff6:	4851      	ldr	r0, [pc, #324]	; (800313c <HAL_ADC_ConfigChannel+0x258>)
 8002ff8:	f7ff fb64 	bl	80026c4 <LL_ADC_GetCommonPathInternalCh>
 8002ffc:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a4f      	ldr	r2, [pc, #316]	; (8003140 <HAL_ADC_ConfigChannel+0x25c>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d120      	bne.n	800304a <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800300e:	2b00      	cmp	r3, #0
 8003010:	d11b      	bne.n	800304a <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003018:	4619      	mov	r1, r3
 800301a:	4848      	ldr	r0, [pc, #288]	; (800313c <HAL_ADC_ConfigChannel+0x258>)
 800301c:	f7ff fb40 	bl	80026a0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003020:	4b48      	ldr	r3, [pc, #288]	; (8003144 <HAL_ADC_ConfigChannel+0x260>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	099b      	lsrs	r3, r3, #6
 8003026:	4a48      	ldr	r2, [pc, #288]	; (8003148 <HAL_ADC_ConfigChannel+0x264>)
 8003028:	fba2 2303 	umull	r2, r3, r2, r3
 800302c:	099b      	lsrs	r3, r3, #6
 800302e:	1c5a      	adds	r2, r3, #1
 8003030:	4613      	mov	r3, r2
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	4413      	add	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800303a:	e002      	b.n	8003042 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	3b01      	subs	r3, #1
 8003040:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1f9      	bne.n	800303c <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003048:	e06c      	b.n	8003124 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a3f      	ldr	r2, [pc, #252]	; (800314c <HAL_ADC_ConfigChannel+0x268>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d10c      	bne.n	800306e <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d107      	bne.n	800306e <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003064:	4619      	mov	r1, r3
 8003066:	4835      	ldr	r0, [pc, #212]	; (800313c <HAL_ADC_ConfigChannel+0x258>)
 8003068:	f7ff fb1a 	bl	80026a0 <LL_ADC_SetCommonPathInternalCh>
 800306c:	e05a      	b.n	8003124 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a37      	ldr	r2, [pc, #220]	; (8003150 <HAL_ADC_ConfigChannel+0x26c>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d155      	bne.n	8003124 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800307e:	2b00      	cmp	r3, #0
 8003080:	d150      	bne.n	8003124 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003088:	4619      	mov	r1, r3
 800308a:	482c      	ldr	r0, [pc, #176]	; (800313c <HAL_ADC_ConfigChannel+0x258>)
 800308c:	f7ff fb08 	bl	80026a0 <LL_ADC_SetCommonPathInternalCh>
 8003090:	e048      	b.n	8003124 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800309a:	d004      	beq.n	80030a6 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80030a0:	4a25      	ldr	r2, [pc, #148]	; (8003138 <HAL_ADC_ConfigChannel+0x254>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d107      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4619      	mov	r1, r3
 80030b0:	4610      	mov	r0, r2
 80030b2:	f7ff fb8f 	bl	80027d4 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	da32      	bge.n	8003124 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030be:	481f      	ldr	r0, [pc, #124]	; (800313c <HAL_ADC_ConfigChannel+0x258>)
 80030c0:	f7ff fb00 	bl	80026c4 <LL_ADC_GetCommonPathInternalCh>
 80030c4:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a1d      	ldr	r2, [pc, #116]	; (8003140 <HAL_ADC_ConfigChannel+0x25c>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d107      	bne.n	80030e0 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80030d6:	4619      	mov	r1, r3
 80030d8:	4818      	ldr	r0, [pc, #96]	; (800313c <HAL_ADC_ConfigChannel+0x258>)
 80030da:	f7ff fae1 	bl	80026a0 <LL_ADC_SetCommonPathInternalCh>
 80030de:	e021      	b.n	8003124 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a19      	ldr	r2, [pc, #100]	; (800314c <HAL_ADC_ConfigChannel+0x268>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d107      	bne.n	80030fa <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030f0:	4619      	mov	r1, r3
 80030f2:	4812      	ldr	r0, [pc, #72]	; (800313c <HAL_ADC_ConfigChannel+0x258>)
 80030f4:	f7ff fad4 	bl	80026a0 <LL_ADC_SetCommonPathInternalCh>
 80030f8:	e014      	b.n	8003124 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a14      	ldr	r2, [pc, #80]	; (8003150 <HAL_ADC_ConfigChannel+0x26c>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d10f      	bne.n	8003124 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800310a:	4619      	mov	r1, r3
 800310c:	480b      	ldr	r0, [pc, #44]	; (800313c <HAL_ADC_ConfigChannel+0x258>)
 800310e:	f7ff fac7 	bl	80026a0 <LL_ADC_SetCommonPathInternalCh>
 8003112:	e007      	b.n	8003124 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003118:	f043 0220 	orr.w	r2, r3, #32
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800312c:	7ffb      	ldrb	r3, [r7, #31]
}
 800312e:	4618      	mov	r0, r3
 8003130:	3720      	adds	r7, #32
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	80000004 	.word	0x80000004
 800313c:	40012708 	.word	0x40012708
 8003140:	b0001000 	.word	0xb0001000
 8003144:	20000000 	.word	0x20000000
 8003148:	053e2d63 	.word	0x053e2d63
 800314c:	b8004000 	.word	0xb8004000
 8003150:	b4002000 	.word	0xb4002000

08003154 <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003160:	4618      	mov	r0, r3
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	bc80      	pop	{r7}
 8003168:	4770      	bx	lr

0800316a <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b084      	sub	sp, #16
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f7ff fbf1 	bl	800295e <LL_ADC_REG_IsConversionOngoing>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d033      	beq.n	80031ea <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff fbb1 	bl	80028ee <LL_ADC_IsDisableOngoing>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d104      	bne.n	800319c <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff fbce 	bl	8002938 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800319c:	f7ff fa34 	bl	8002608 <HAL_GetTick>
 80031a0:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80031a2:	e01b      	b.n	80031dc <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80031a4:	f7ff fa30 	bl	8002608 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d914      	bls.n	80031dc <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00d      	beq.n	80031dc <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c4:	f043 0210 	orr.w	r2, r3, #16
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d0:	f043 0201 	orr.w	r2, r3, #1
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e007      	b.n	80031ec <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 0304 	and.w	r3, r3, #4
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1dc      	bne.n	80031a4 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80031fc:	2300      	movs	r3, #0
 80031fe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff fb60 	bl	80028ca <LL_ADC_IsEnabled>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d169      	bne.n	80032e4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	4b36      	ldr	r3, [pc, #216]	; (80032f0 <ADC_Enable+0xfc>)
 8003218:	4013      	ands	r3, r2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00d      	beq.n	800323a <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003222:	f043 0210 	orr.w	r2, r3, #16
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322e:	f043 0201 	orr.w	r2, r3, #1
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e055      	b.n	80032e6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff fb1d 	bl	800287e <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8003244:	482b      	ldr	r0, [pc, #172]	; (80032f4 <ADC_Enable+0x100>)
 8003246:	f7ff fa3d 	bl	80026c4 <LL_ADC_GetCommonPathInternalCh>
 800324a:	4603      	mov	r3, r0
 800324c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00f      	beq.n	8003274 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003254:	4b28      	ldr	r3, [pc, #160]	; (80032f8 <ADC_Enable+0x104>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	099b      	lsrs	r3, r3, #6
 800325a:	4a28      	ldr	r2, [pc, #160]	; (80032fc <ADC_Enable+0x108>)
 800325c:	fba2 2303 	umull	r2, r3, r2, r3
 8003260:	099b      	lsrs	r3, r3, #6
 8003262:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8003264:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003266:	e002      	b.n	800326e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	3b01      	subs	r3, #1
 800326c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1f9      	bne.n	8003268 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	7e5b      	ldrb	r3, [r3, #25]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d033      	beq.n	80032e4 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800327c:	f7ff f9c4 	bl	8002608 <HAL_GetTick>
 8003280:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003282:	e028      	b.n	80032d6 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff fb1e 	bl	80028ca <LL_ADC_IsEnabled>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d104      	bne.n	800329e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff faf0 	bl	800287e <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800329e:	f7ff f9b3 	bl	8002608 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d914      	bls.n	80032d6 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d00d      	beq.n	80032d6 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032be:	f043 0210 	orr.w	r2, r3, #16
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ca:	f043 0201 	orr.w	r2, r3, #1
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e007      	b.n	80032e6 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d1cf      	bne.n	8003284 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	80000017 	.word	0x80000017
 80032f4:	40012708 	.word	0x40012708
 80032f8:	20000000 	.word	0x20000000
 80032fc:	053e2d63 	.word	0x053e2d63

08003300 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff faee 	bl	80028ee <LL_ADC_IsDisableOngoing>
 8003312:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff fad6 	bl	80028ca <LL_ADC_IsEnabled>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d047      	beq.n	80033b4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d144      	bne.n	80033b4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 0305 	and.w	r3, r3, #5
 8003334:	2b01      	cmp	r3, #1
 8003336:	d10c      	bne.n	8003352 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff fab1 	bl	80028a4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2203      	movs	r2, #3
 8003348:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800334a:	f7ff f95d 	bl	8002608 <HAL_GetTick>
 800334e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003350:	e029      	b.n	80033a6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003356:	f043 0210 	orr.w	r2, r3, #16
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003362:	f043 0201 	orr.w	r2, r3, #1
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e023      	b.n	80033b6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800336e:	f7ff f94b 	bl	8002608 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d914      	bls.n	80033a6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00d      	beq.n	80033a6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338e:	f043 0210 	orr.w	r2, r3, #16
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339a:	f043 0201 	orr.w	r2, r3, #1
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e007      	b.n	80033b6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1dc      	bne.n	800336e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <LL_ADC_SetCalibrationFactor>:
{
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
 80033c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80033ce:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	431a      	orrs	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bc80      	pop	{r7}
 80033e4:	4770      	bx	lr

080033e6 <LL_ADC_GetCalibrationFactor>:
{
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80033f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bc80      	pop	{r7}
 8003400:	4770      	bx	lr

08003402 <LL_ADC_Enable>:
{
 8003402:	b480      	push	{r7}
 8003404:	b083      	sub	sp, #12
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003412:	f023 0317 	bic.w	r3, r3, #23
 8003416:	f043 0201 	orr.w	r2, r3, #1
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	609a      	str	r2, [r3, #8]
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	bc80      	pop	{r7}
 8003426:	4770      	bx	lr

08003428 <LL_ADC_Disable>:
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003438:	f023 0317 	bic.w	r3, r3, #23
 800343c:	f043 0202 	orr.w	r2, r3, #2
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	609a      	str	r2, [r3, #8]
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	bc80      	pop	{r7}
 800344c:	4770      	bx	lr

0800344e <LL_ADC_IsEnabled>:
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b01      	cmp	r3, #1
 8003460:	d101      	bne.n	8003466 <LL_ADC_IsEnabled+0x18>
 8003462:	2301      	movs	r3, #1
 8003464:	e000      	b.n	8003468 <LL_ADC_IsEnabled+0x1a>
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	bc80      	pop	{r7}
 8003470:	4770      	bx	lr

08003472 <LL_ADC_StartCalibration>:
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003482:	f023 0317 	bic.w	r3, r3, #23
 8003486:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	609a      	str	r2, [r3, #8]
}
 800348e:	bf00      	nop
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	bc80      	pop	{r7}
 8003496:	4770      	bx	lr

08003498 <LL_ADC_IsCalibrationOnGoing>:
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034ac:	d101      	bne.n	80034b2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80034ae:	2301      	movs	r3, #1
 80034b0:	e000      	b.n	80034b4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bc80      	pop	{r7}
 80034bc:	4770      	bx	lr

080034be <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b088      	sub	sp, #32
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80034c6:	2300      	movs	r3, #0
 80034c8:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80034ca:	2300      	movs	r3, #0
 80034cc:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d101      	bne.n	80034dc <HAL_ADCEx_Calibration_Start+0x1e>
 80034d8:	2302      	movs	r3, #2
 80034da:	e0b9      	b.n	8003650 <HAL_ADCEx_Calibration_Start+0x192>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7ff ff0b 	bl	8003300 <ADC_Disable>
 80034ea:	4603      	mov	r3, r0
 80034ec:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7ff ffab 	bl	800344e <LL_ADC_IsEnabled>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f040 809d 	bne.w	800363a <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003504:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003508:	f043 0202 	orr.w	r2, r3, #2
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68da      	ldr	r2, [r3, #12]
 8003516:	f248 0303 	movw	r3, #32771	; 0x8003
 800351a:	4013      	ands	r3, r2
 800351c:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6812      	ldr	r2, [r2, #0]
 8003528:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800352c:	f023 0303 	bic.w	r3, r3, #3
 8003530:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003532:	2300      	movs	r3, #0
 8003534:	61fb      	str	r3, [r7, #28]
 8003536:	e02e      	b.n	8003596 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff ff98 	bl	8003472 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003542:	e014      	b.n	800356e <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	3301      	adds	r3, #1
 8003548:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003550:	d30d      	bcc.n	800356e <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003556:	f023 0312 	bic.w	r3, r3, #18
 800355a:	f043 0210 	orr.w	r2, r3, #16
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e070      	b.n	8003650 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff ff90 	bl	8003498 <LL_ADC_IsCalibrationOnGoing>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1e2      	bne.n	8003544 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff ff2f 	bl	80033e6 <LL_ADC_GetCalibrationFactor>
 8003588:	4602      	mov	r2, r0
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	4413      	add	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	3301      	adds	r3, #1
 8003594:	61fb      	str	r3, [r7, #28]
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	2b07      	cmp	r3, #7
 800359a:	d9cd      	bls.n	8003538 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a4:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff ff29 	bl	8003402 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	69b9      	ldr	r1, [r7, #24]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff ff01 	bl	80033be <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff ff31 	bl	8003428 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80035c6:	f7ff f81f 	bl	8002608 <HAL_GetTick>
 80035ca:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80035cc:	e01c      	b.n	8003608 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80035ce:	f7ff f81b 	bl	8002608 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d915      	bls.n	8003608 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff ff34 	bl	800344e <LL_ADC_IsEnabled>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00d      	beq.n	8003608 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f0:	f043 0210 	orr.w	r2, r3, #16
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035fc:	f043 0201 	orr.w	r2, r3, #1
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e023      	b.n	8003650 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff ff1e 	bl	800344e <LL_ADC_IsEnabled>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1da      	bne.n	80035ce <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68d9      	ldr	r1, [r3, #12]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	430a      	orrs	r2, r1
 8003626:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362c:	f023 0303 	bic.w	r3, r3, #3
 8003630:	f043 0201 	orr.w	r2, r3, #1
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	659a      	str	r2, [r3, #88]	; 0x58
 8003638:	e005      	b.n	8003646 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363e:	f043 0210 	orr.w	r2, r3, #16
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800364e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3720      	adds	r7, #32
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003668:	4b0c      	ldr	r3, [pc, #48]	; (800369c <__NVIC_SetPriorityGrouping+0x44>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003674:	4013      	ands	r3, r2
 8003676:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003680:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800368a:	4a04      	ldr	r2, [pc, #16]	; (800369c <__NVIC_SetPriorityGrouping+0x44>)
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	60d3      	str	r3, [r2, #12]
}
 8003690:	bf00      	nop
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	bc80      	pop	{r7}
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	e000ed00 	.word	0xe000ed00

080036a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036a4:	4b04      	ldr	r3, [pc, #16]	; (80036b8 <__NVIC_GetPriorityGrouping+0x18>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	0a1b      	lsrs	r3, r3, #8
 80036aa:	f003 0307 	and.w	r3, r3, #7
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bc80      	pop	{r7}
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	e000ed00 	.word	0xe000ed00

080036bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	4603      	mov	r3, r0
 80036c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	db0b      	blt.n	80036e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ce:	79fb      	ldrb	r3, [r7, #7]
 80036d0:	f003 021f 	and.w	r2, r3, #31
 80036d4:	4906      	ldr	r1, [pc, #24]	; (80036f0 <__NVIC_EnableIRQ+0x34>)
 80036d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036da:	095b      	lsrs	r3, r3, #5
 80036dc:	2001      	movs	r0, #1
 80036de:	fa00 f202 	lsl.w	r2, r0, r2
 80036e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr
 80036f0:	e000e100 	.word	0xe000e100

080036f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	4603      	mov	r3, r0
 80036fc:	6039      	str	r1, [r7, #0]
 80036fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003704:	2b00      	cmp	r3, #0
 8003706:	db0a      	blt.n	800371e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	b2da      	uxtb	r2, r3
 800370c:	490c      	ldr	r1, [pc, #48]	; (8003740 <__NVIC_SetPriority+0x4c>)
 800370e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003712:	0112      	lsls	r2, r2, #4
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	440b      	add	r3, r1
 8003718:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800371c:	e00a      	b.n	8003734 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	b2da      	uxtb	r2, r3
 8003722:	4908      	ldr	r1, [pc, #32]	; (8003744 <__NVIC_SetPriority+0x50>)
 8003724:	79fb      	ldrb	r3, [r7, #7]
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	3b04      	subs	r3, #4
 800372c:	0112      	lsls	r2, r2, #4
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	440b      	add	r3, r1
 8003732:	761a      	strb	r2, [r3, #24]
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	bc80      	pop	{r7}
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	e000e100 	.word	0xe000e100
 8003744:	e000ed00 	.word	0xe000ed00

08003748 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003748:	b480      	push	{r7}
 800374a:	b089      	sub	sp, #36	; 0x24
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	f1c3 0307 	rsb	r3, r3, #7
 8003762:	2b04      	cmp	r3, #4
 8003764:	bf28      	it	cs
 8003766:	2304      	movcs	r3, #4
 8003768:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	3304      	adds	r3, #4
 800376e:	2b06      	cmp	r3, #6
 8003770:	d902      	bls.n	8003778 <NVIC_EncodePriority+0x30>
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	3b03      	subs	r3, #3
 8003776:	e000      	b.n	800377a <NVIC_EncodePriority+0x32>
 8003778:	2300      	movs	r3, #0
 800377a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800377c:	f04f 32ff 	mov.w	r2, #4294967295
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	43da      	mvns	r2, r3
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	401a      	ands	r2, r3
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003790:	f04f 31ff 	mov.w	r1, #4294967295
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	fa01 f303 	lsl.w	r3, r1, r3
 800379a:	43d9      	mvns	r1, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037a0:	4313      	orrs	r3, r2
         );
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3724      	adds	r7, #36	; 0x24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bc80      	pop	{r7}
 80037aa:	4770      	bx	lr

080037ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3b01      	subs	r3, #1
 80037b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037bc:	d301      	bcc.n	80037c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037be:	2301      	movs	r3, #1
 80037c0:	e00f      	b.n	80037e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037c2:	4a0a      	ldr	r2, [pc, #40]	; (80037ec <SysTick_Config+0x40>)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3b01      	subs	r3, #1
 80037c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037ca:	210f      	movs	r1, #15
 80037cc:	f04f 30ff 	mov.w	r0, #4294967295
 80037d0:	f7ff ff90 	bl	80036f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037d4:	4b05      	ldr	r3, [pc, #20]	; (80037ec <SysTick_Config+0x40>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037da:	4b04      	ldr	r3, [pc, #16]	; (80037ec <SysTick_Config+0x40>)
 80037dc:	2207      	movs	r2, #7
 80037de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	e000e010 	.word	0xe000e010

080037f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7ff ff2d 	bl	8003658 <__NVIC_SetPriorityGrouping>
}
 80037fe:	bf00      	nop
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b086      	sub	sp, #24
 800380a:	af00      	add	r7, sp, #0
 800380c:	4603      	mov	r3, r0
 800380e:	60b9      	str	r1, [r7, #8]
 8003810:	607a      	str	r2, [r7, #4]
 8003812:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003814:	f7ff ff44 	bl	80036a0 <__NVIC_GetPriorityGrouping>
 8003818:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	68b9      	ldr	r1, [r7, #8]
 800381e:	6978      	ldr	r0, [r7, #20]
 8003820:	f7ff ff92 	bl	8003748 <NVIC_EncodePriority>
 8003824:	4602      	mov	r2, r0
 8003826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800382a:	4611      	mov	r1, r2
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff ff61 	bl	80036f4 <__NVIC_SetPriority>
}
 8003832:	bf00      	nop
 8003834:	3718      	adds	r7, #24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b082      	sub	sp, #8
 800383e:	af00      	add	r7, sp, #0
 8003840:	4603      	mov	r3, r0
 8003842:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff ff37 	bl	80036bc <__NVIC_EnableIRQ>
}
 800384e:	bf00      	nop
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b082      	sub	sp, #8
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7ff ffa4 	bl	80037ac <SysTick_Config>
 8003864:	4603      	mov	r3, r0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e04f      	b.n	8003920 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d008      	beq.n	800389e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2204      	movs	r2, #4
 8003890:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e040      	b.n	8003920 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 020e 	bic.w	r2, r2, #14
 80038ac:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0201 	bic.w	r2, r2, #1
 80038cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d2:	f003 021c 	and.w	r2, r3, #28
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	2101      	movs	r1, #1
 80038dc:	fa01 f202 	lsl.w	r2, r1, r2
 80038e0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80038ea:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00c      	beq.n	800390e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003902:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800390c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr

0800392a <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b084      	sub	sp, #16
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003932:	2300      	movs	r3, #0
 8003934:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d005      	beq.n	800394e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2204      	movs	r2, #4
 8003946:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	73fb      	strb	r3, [r7, #15]
 800394c:	e047      	b.n	80039de <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 020e 	bic.w	r2, r2, #14
 800395c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 0201 	bic.w	r2, r2, #1
 800396c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003978:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800397c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003982:	f003 021c 	and.w	r2, r3, #28
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	2101      	movs	r1, #1
 800398c:	fa01 f202 	lsl.w	r2, r1, r2
 8003990:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800399a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00c      	beq.n	80039be <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039b2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80039bc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	4798      	blx	r3
    }
  }
  return status;
 80039de:	7bfb      	ldrb	r3, [r7, #15]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b087      	sub	sp, #28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039f2:	2300      	movs	r3, #0
 80039f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039f6:	e140      	b.n	8003c7a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	2101      	movs	r1, #1
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	fa01 f303 	lsl.w	r3, r1, r3
 8003a04:	4013      	ands	r3, r2
 8003a06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 8132 	beq.w	8003c74 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f003 0303 	and.w	r3, r3, #3
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d005      	beq.n	8003a28 <HAL_GPIO_Init+0x40>
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f003 0303 	and.w	r3, r3, #3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d130      	bne.n	8003a8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	2203      	movs	r2, #3
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	43db      	mvns	r3, r3
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	68da      	ldr	r2, [r3, #12]
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a5e:	2201      	movs	r2, #1
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	fa02 f303 	lsl.w	r3, r2, r3
 8003a66:	43db      	mvns	r3, r3
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	091b      	lsrs	r3, r3, #4
 8003a74:	f003 0201 	and.w	r2, r3, #1
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f003 0303 	and.w	r3, r3, #3
 8003a92:	2b03      	cmp	r3, #3
 8003a94:	d017      	beq.n	8003ac6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	2203      	movs	r2, #3
 8003aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa6:	43db      	mvns	r3, r3
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	689a      	ldr	r2, [r3, #8]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f003 0303 	and.w	r3, r3, #3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d123      	bne.n	8003b1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	08da      	lsrs	r2, r3, #3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	3208      	adds	r2, #8
 8003ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ade:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	220f      	movs	r2, #15
 8003aea:	fa02 f303 	lsl.w	r3, r2, r3
 8003aee:	43db      	mvns	r3, r3
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	4013      	ands	r3, r2
 8003af4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	691a      	ldr	r2, [r3, #16]
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f003 0307 	and.w	r3, r3, #7
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	08da      	lsrs	r2, r3, #3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3208      	adds	r2, #8
 8003b14:	6939      	ldr	r1, [r7, #16]
 8003b16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	2203      	movs	r2, #3
 8003b26:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2a:	43db      	mvns	r3, r3
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f003 0203 	and.w	r2, r3, #3
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 808c 	beq.w	8003c74 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003b5c:	4a4e      	ldr	r2, [pc, #312]	; (8003c98 <HAL_GPIO_Init+0x2b0>)
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	089b      	lsrs	r3, r3, #2
 8003b62:	3302      	adds	r3, #2
 8003b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f003 0303 	and.w	r3, r3, #3
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	2207      	movs	r2, #7
 8003b74:	fa02 f303 	lsl.w	r3, r2, r3
 8003b78:	43db      	mvns	r3, r3
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b86:	d00d      	beq.n	8003ba4 <HAL_GPIO_Init+0x1bc>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a44      	ldr	r2, [pc, #272]	; (8003c9c <HAL_GPIO_Init+0x2b4>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d007      	beq.n	8003ba0 <HAL_GPIO_Init+0x1b8>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a43      	ldr	r2, [pc, #268]	; (8003ca0 <HAL_GPIO_Init+0x2b8>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d101      	bne.n	8003b9c <HAL_GPIO_Init+0x1b4>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	e004      	b.n	8003ba6 <HAL_GPIO_Init+0x1be>
 8003b9c:	2307      	movs	r3, #7
 8003b9e:	e002      	b.n	8003ba6 <HAL_GPIO_Init+0x1be>
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e000      	b.n	8003ba6 <HAL_GPIO_Init+0x1be>
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	f002 0203 	and.w	r2, r2, #3
 8003bac:	0092      	lsls	r2, r2, #2
 8003bae:	4093      	lsls	r3, r2
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003bb6:	4938      	ldr	r1, [pc, #224]	; (8003c98 <HAL_GPIO_Init+0x2b0>)
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	089b      	lsrs	r3, r3, #2
 8003bbc:	3302      	adds	r3, #2
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bc4:	4b37      	ldr	r3, [pc, #220]	; (8003ca4 <HAL_GPIO_Init+0x2bc>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003be8:	4a2e      	ldr	r2, [pc, #184]	; (8003ca4 <HAL_GPIO_Init+0x2bc>)
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003bee:	4b2d      	ldr	r3, [pc, #180]	; (8003ca4 <HAL_GPIO_Init+0x2bc>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	43db      	mvns	r3, r3
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c12:	4a24      	ldr	r2, [pc, #144]	; (8003ca4 <HAL_GPIO_Init+0x2bc>)
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8003c18:	4b22      	ldr	r3, [pc, #136]	; (8003ca4 <HAL_GPIO_Init+0x2bc>)
 8003c1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c1e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	43db      	mvns	r3, r3
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	4013      	ands	r3, r2
 8003c28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8003c3e:	4a19      	ldr	r2, [pc, #100]	; (8003ca4 <HAL_GPIO_Init+0x2bc>)
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8003c46:	4b17      	ldr	r3, [pc, #92]	; (8003ca4 <HAL_GPIO_Init+0x2bc>)
 8003c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c4c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	43db      	mvns	r3, r3
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	4013      	ands	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8003c6c:	4a0d      	ldr	r2, [pc, #52]	; (8003ca4 <HAL_GPIO_Init+0x2bc>)
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	3301      	adds	r3, #1
 8003c78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	fa22 f303 	lsr.w	r3, r2, r3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f47f aeb7 	bne.w	80039f8 <HAL_GPIO_Init+0x10>
  }
}
 8003c8a:	bf00      	nop
 8003c8c:	bf00      	nop
 8003c8e:	371c      	adds	r7, #28
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bc80      	pop	{r7}
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	40010000 	.word	0x40010000
 8003c9c:	48000400 	.word	0x48000400
 8003ca0:	48000800 	.word	0x48000800
 8003ca4:	58000800 	.word	0x58000800

08003ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	807b      	strh	r3, [r7, #2]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cb8:	787b      	ldrb	r3, [r7, #1]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cbe:	887a      	ldrh	r2, [r7, #2]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cc4:	e002      	b.n	8003ccc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cc6:	887a      	ldrh	r2, [r7, #2]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bc80      	pop	{r7}
 8003cd4:	4770      	bx	lr

08003cd6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b082      	sub	sp, #8
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d101      	bne.n	8003ce8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e081      	b.n	8003dec <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d106      	bne.n	8003d02 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f7fe f911 	bl	8001f24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2224      	movs	r2, #36	; 0x24
 8003d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0201 	bic.w	r2, r2, #1
 8003d18:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d26:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689a      	ldr	r2, [r3, #8]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d36:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d107      	bne.n	8003d50 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689a      	ldr	r2, [r3, #8]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d4c:	609a      	str	r2, [r3, #8]
 8003d4e:	e006      	b.n	8003d5e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003d5c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d104      	bne.n	8003d70 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d6e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6812      	ldr	r2, [r2, #0]
 8003d7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d82:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68da      	ldr	r2, [r3, #12]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d92:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	691a      	ldr	r2, [r3, #16]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	69d9      	ldr	r1, [r3, #28]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a1a      	ldr	r2, [r3, #32]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f042 0201 	orr.w	r2, r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b20      	cmp	r3, #32
 8003e08:	d138      	bne.n	8003e7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d101      	bne.n	8003e18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e14:	2302      	movs	r3, #2
 8003e16:	e032      	b.n	8003e7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2224      	movs	r2, #36	; 0x24
 8003e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0201 	bic.w	r2, r2, #1
 8003e36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6819      	ldr	r1, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0201 	orr.w	r2, r2, #1
 8003e66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	e000      	b.n	8003e7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e7c:	2302      	movs	r3, #2
  }
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bc80      	pop	{r7}
 8003e86:	4770      	bx	lr

08003e88 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b20      	cmp	r3, #32
 8003e9c:	d139      	bne.n	8003f12 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d101      	bne.n	8003eac <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e033      	b.n	8003f14 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2224      	movs	r2, #36	; 0x24
 8003eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0201 	bic.w	r2, r2, #1
 8003eca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003eda:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	021b      	lsls	r3, r3, #8
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f042 0201 	orr.w	r2, r2, #1
 8003efc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2220      	movs	r2, #32
 8003f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	e000      	b.n	8003f14 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f12:	2302      	movs	r3, #2
  }
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bc80      	pop	{r7}
 8003f1c:	4770      	bx	lr
	...

08003f20 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f24:	4b04      	ldr	r3, [pc, #16]	; (8003f38 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a03      	ldr	r2, [pc, #12]	; (8003f38 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f2e:	6013      	str	r3, [r2, #0]
}
 8003f30:	bf00      	nop
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bc80      	pop	{r7}
 8003f36:	4770      	bx	lr
 8003f38:	58000400 	.word	0x58000400

08003f3c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003f40:	4b03      	ldr	r3, [pc, #12]	; (8003f50 <HAL_PWREx_GetVoltageRange+0x14>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bc80      	pop	{r7}
 8003f4e:	4770      	bx	lr
 8003f50:	58000400 	.word	0x58000400

08003f54 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8003f58:	4b06      	ldr	r3, [pc, #24]	; (8003f74 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f64:	d101      	bne.n	8003f6a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8003f66:	2301      	movs	r3, #1
 8003f68:	e000      	b.n	8003f6c <LL_PWR_IsEnabledBkUpAccess+0x18>
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bc80      	pop	{r7}
 8003f72:	4770      	bx	lr
 8003f74:	58000400 	.word	0x58000400

08003f78 <LL_RCC_HSE_EnableTcxo>:
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f8a:	6013      	str	r3, [r2, #0]
}
 8003f8c:	bf00      	nop
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bc80      	pop	{r7}
 8003f92:	4770      	bx	lr

08003f94 <LL_RCC_HSE_DisableTcxo>:
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fa2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fa6:	6013      	str	r3, [r2, #0]
}
 8003fa8:	bf00      	nop
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bc80      	pop	{r7}
 8003fae:	4770      	bx	lr

08003fb0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fc2:	d101      	bne.n	8003fc8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e000      	b.n	8003fca <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bc80      	pop	{r7}
 8003fd0:	4770      	bx	lr

08003fd2 <LL_RCC_HSE_Enable>:
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe4:	6013      	str	r3, [r2, #0]
}
 8003fe6:	bf00      	nop
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bc80      	pop	{r7}
 8003fec:	4770      	bx	lr

08003fee <LL_RCC_HSE_Disable>:
{
 8003fee:	b480      	push	{r7}
 8003ff0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ffc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004000:	6013      	str	r3, [r2, #0]
}
 8004002:	bf00      	nop
 8004004:	46bd      	mov	sp, r7
 8004006:	bc80      	pop	{r7}
 8004008:	4770      	bx	lr

0800400a <LL_RCC_HSE_IsReady>:
{
 800400a:	b480      	push	{r7}
 800400c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800400e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004018:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800401c:	d101      	bne.n	8004022 <LL_RCC_HSE_IsReady+0x18>
 800401e:	2301      	movs	r3, #1
 8004020:	e000      	b.n	8004024 <LL_RCC_HSE_IsReady+0x1a>
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	46bd      	mov	sp, r7
 8004028:	bc80      	pop	{r7}
 800402a:	4770      	bx	lr

0800402c <LL_RCC_HSI_Enable>:
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800403a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800403e:	6013      	str	r3, [r2, #0]
}
 8004040:	bf00      	nop
 8004042:	46bd      	mov	sp, r7
 8004044:	bc80      	pop	{r7}
 8004046:	4770      	bx	lr

08004048 <LL_RCC_HSI_Disable>:
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800404c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004056:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800405a:	6013      	str	r3, [r2, #0]
}
 800405c:	bf00      	nop
 800405e:	46bd      	mov	sp, r7
 8004060:	bc80      	pop	{r7}
 8004062:	4770      	bx	lr

08004064 <LL_RCC_HSI_IsReady>:
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004076:	d101      	bne.n	800407c <LL_RCC_HSI_IsReady+0x18>
 8004078:	2301      	movs	r3, #1
 800407a:	e000      	b.n	800407e <LL_RCC_HSI_IsReady+0x1a>
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	46bd      	mov	sp, r7
 8004082:	bc80      	pop	{r7}
 8004084:	4770      	bx	lr

08004086 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004086:	b480      	push	{r7}
 8004088:	b083      	sub	sp, #12
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800408e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	061b      	lsls	r3, r3, #24
 800409c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040a0:	4313      	orrs	r3, r2
 80040a2:	604b      	str	r3, [r1, #4]
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bc80      	pop	{r7}
 80040ac:	4770      	bx	lr

080040ae <LL_RCC_LSE_IsReady>:
{
 80040ae:	b480      	push	{r7}
 80040b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80040b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d101      	bne.n	80040c6 <LL_RCC_LSE_IsReady+0x18>
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <LL_RCC_LSE_IsReady+0x1a>
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bc80      	pop	{r7}
 80040ce:	4770      	bx	lr

080040d0 <LL_RCC_LSI_Enable>:
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80040d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040e0:	f043 0301 	orr.w	r3, r3, #1
 80040e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80040e8:	bf00      	nop
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bc80      	pop	{r7}
 80040ee:	4770      	bx	lr

080040f0 <LL_RCC_LSI_Disable>:
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80040f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004100:	f023 0301 	bic.w	r3, r3, #1
 8004104:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004108:	bf00      	nop
 800410a:	46bd      	mov	sp, r7
 800410c:	bc80      	pop	{r7}
 800410e:	4770      	bx	lr

08004110 <LL_RCC_LSI_IsReady>:
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004118:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b02      	cmp	r3, #2
 8004122:	d101      	bne.n	8004128 <LL_RCC_LSI_IsReady+0x18>
 8004124:	2301      	movs	r3, #1
 8004126:	e000      	b.n	800412a <LL_RCC_LSI_IsReady+0x1a>
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	46bd      	mov	sp, r7
 800412e:	bc80      	pop	{r7}
 8004130:	4770      	bx	lr

08004132 <LL_RCC_MSI_Enable>:
{
 8004132:	b480      	push	{r7}
 8004134:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004140:	f043 0301 	orr.w	r3, r3, #1
 8004144:	6013      	str	r3, [r2, #0]
}
 8004146:	bf00      	nop
 8004148:	46bd      	mov	sp, r7
 800414a:	bc80      	pop	{r7}
 800414c:	4770      	bx	lr

0800414e <LL_RCC_MSI_Disable>:
{
 800414e:	b480      	push	{r7}
 8004150:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004152:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800415c:	f023 0301 	bic.w	r3, r3, #1
 8004160:	6013      	str	r3, [r2, #0]
}
 8004162:	bf00      	nop
 8004164:	46bd      	mov	sp, r7
 8004166:	bc80      	pop	{r7}
 8004168:	4770      	bx	lr

0800416a <LL_RCC_MSI_IsReady>:
{
 800416a:	b480      	push	{r7}
 800416c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800416e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b02      	cmp	r3, #2
 800417a:	d101      	bne.n	8004180 <LL_RCC_MSI_IsReady+0x16>
 800417c:	2301      	movs	r3, #1
 800417e:	e000      	b.n	8004182 <LL_RCC_MSI_IsReady+0x18>
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	46bd      	mov	sp, r7
 8004186:	bc80      	pop	{r7}
 8004188:	4770      	bx	lr

0800418a <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 800418a:	b480      	push	{r7}
 800418c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800418e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0308 	and.w	r3, r3, #8
 8004198:	2b08      	cmp	r3, #8
 800419a:	d101      	bne.n	80041a0 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800419c:	2301      	movs	r3, #1
 800419e:	e000      	b.n	80041a2 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bc80      	pop	{r7}
 80041a8:	4770      	bx	lr

080041aa <LL_RCC_MSI_GetRange>:
{
 80041aa:	b480      	push	{r7}
 80041ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80041ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bc80      	pop	{r7}
 80041be:	4770      	bx	lr

080041c0 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80041c0:	b480      	push	{r7}
 80041c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80041c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041cc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bc80      	pop	{r7}
 80041d6:	4770      	bx	lr

080041d8 <LL_RCC_MSI_SetCalibTrimming>:
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80041e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	021b      	lsls	r3, r3, #8
 80041ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041f2:	4313      	orrs	r3, r2
 80041f4:	604b      	str	r3, [r1, #4]
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bc80      	pop	{r7}
 80041fe:	4770      	bx	lr

08004200 <LL_RCC_SetSysClkSource>:
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f023 0203 	bic.w	r2, r3, #3
 8004212:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4313      	orrs	r3, r2
 800421a:	608b      	str	r3, [r1, #8]
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	bc80      	pop	{r7}
 8004224:	4770      	bx	lr

08004226 <LL_RCC_GetSysClkSource>:
{
 8004226:	b480      	push	{r7}
 8004228:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800422a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f003 030c 	and.w	r3, r3, #12
}
 8004234:	4618      	mov	r0, r3
 8004236:	46bd      	mov	sp, r7
 8004238:	bc80      	pop	{r7}
 800423a:	4770      	bx	lr

0800423c <LL_RCC_SetAHBPrescaler>:
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800424e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4313      	orrs	r3, r2
 8004256:	608b      	str	r3, [r1, #8]
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	bc80      	pop	{r7}
 8004260:	4770      	bx	lr

08004262 <LL_RCC_SetAHB3Prescaler>:
{
 8004262:	b480      	push	{r7}
 8004264:	b083      	sub	sp, #12
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800426a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800426e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004272:	f023 020f 	bic.w	r2, r3, #15
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	091b      	lsrs	r3, r3, #4
 800427a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800427e:	4313      	orrs	r3, r2
 8004280:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	bc80      	pop	{r7}
 800428c:	4770      	bx	lr

0800428e <LL_RCC_SetAPB1Prescaler>:
{
 800428e:	b480      	push	{r7}
 8004290:	b083      	sub	sp, #12
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	608b      	str	r3, [r1, #8]
}
 80042aa:	bf00      	nop
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bc80      	pop	{r7}
 80042b2:	4770      	bx	lr

080042b4 <LL_RCC_SetAPB2Prescaler>:
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80042bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	608b      	str	r3, [r1, #8]
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bc80      	pop	{r7}
 80042d8:	4770      	bx	lr

080042da <LL_RCC_GetAHBPrescaler>:
{
 80042da:	b480      	push	{r7}
 80042dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80042de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bc80      	pop	{r7}
 80042ee:	4770      	bx	lr

080042f0 <LL_RCC_GetAHB3Prescaler>:
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80042f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042f8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004302:	4618      	mov	r0, r3
 8004304:	46bd      	mov	sp, r7
 8004306:	bc80      	pop	{r7}
 8004308:	4770      	bx	lr

0800430a <LL_RCC_GetAPB1Prescaler>:
{
 800430a:	b480      	push	{r7}
 800430c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800430e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004318:	4618      	mov	r0, r3
 800431a:	46bd      	mov	sp, r7
 800431c:	bc80      	pop	{r7}
 800431e:	4770      	bx	lr

08004320 <LL_RCC_GetAPB2Prescaler>:
{
 8004320:	b480      	push	{r7}
 8004322:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800432e:	4618      	mov	r0, r3
 8004330:	46bd      	mov	sp, r7
 8004332:	bc80      	pop	{r7}
 8004334:	4770      	bx	lr

08004336 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004336:	b480      	push	{r7}
 8004338:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800433a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004344:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004348:	6013      	str	r3, [r2, #0]
}
 800434a:	bf00      	nop
 800434c:	46bd      	mov	sp, r7
 800434e:	bc80      	pop	{r7}
 8004350:	4770      	bx	lr

08004352 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004352:	b480      	push	{r7}
 8004354:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004360:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004364:	6013      	str	r3, [r2, #0]
}
 8004366:	bf00      	nop
 8004368:	46bd      	mov	sp, r7
 800436a:	bc80      	pop	{r7}
 800436c:	4770      	bx	lr

0800436e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800436e:	b480      	push	{r7}
 8004370:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004372:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800437c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004380:	d101      	bne.n	8004386 <LL_RCC_PLL_IsReady+0x18>
 8004382:	2301      	movs	r3, #1
 8004384:	e000      	b.n	8004388 <LL_RCC_PLL_IsReady+0x1a>
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	46bd      	mov	sp, r7
 800438c:	bc80      	pop	{r7}
 800438e:	4770      	bx	lr

08004390 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	0a1b      	lsrs	r3, r3, #8
 800439c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bc80      	pop	{r7}
 80043a6:	4770      	bx	lr

080043a8 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80043ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bc80      	pop	{r7}
 80043bc:	4770      	bx	lr

080043be <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80043be:	b480      	push	{r7}
 80043c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80043c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bc80      	pop	{r7}
 80043d2:	4770      	bx	lr

080043d4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80043d4:	b480      	push	{r7}
 80043d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80043d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	f003 0303 	and.w	r3, r3, #3
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bc80      	pop	{r7}
 80043e8:	4770      	bx	lr

080043ea <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80043ea:	b480      	push	{r7}
 80043ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80043ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043fc:	d101      	bne.n	8004402 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80043fe:	2301      	movs	r3, #1
 8004400:	e000      	b.n	8004404 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	46bd      	mov	sp, r7
 8004408:	bc80      	pop	{r7}
 800440a:	4770      	bx	lr

0800440c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004414:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800441c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004420:	d101      	bne.n	8004426 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004422:	2301      	movs	r3, #1
 8004424:	e000      	b.n	8004428 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	46bd      	mov	sp, r7
 800442c:	bc80      	pop	{r7}
 800442e:	4770      	bx	lr

08004430 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004430:	b480      	push	{r7}
 8004432:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800443e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004442:	d101      	bne.n	8004448 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004444:	2301      	movs	r3, #1
 8004446:	e000      	b.n	800444a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	46bd      	mov	sp, r7
 800444e:	bc80      	pop	{r7}
 8004450:	4770      	bx	lr

08004452 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004452:	b480      	push	{r7}
 8004454:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004460:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004464:	d101      	bne.n	800446a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004466:	2301      	movs	r3, #1
 8004468:	e000      	b.n	800446c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	46bd      	mov	sp, r7
 8004470:	bc80      	pop	{r7}
 8004472:	4770      	bx	lr

08004474 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b088      	sub	sp, #32
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e36f      	b.n	8004b66 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004486:	f7ff fece 	bl	8004226 <LL_RCC_GetSysClkSource>
 800448a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800448c:	f7ff ffa2 	bl	80043d4 <LL_RCC_PLL_GetMainSource>
 8004490:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0320 	and.w	r3, r3, #32
 800449a:	2b00      	cmp	r3, #0
 800449c:	f000 80c4 	beq.w	8004628 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d005      	beq.n	80044b2 <HAL_RCC_OscConfig+0x3e>
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	2b0c      	cmp	r3, #12
 80044aa:	d176      	bne.n	800459a <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d173      	bne.n	800459a <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e353      	b.n	8004b66 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0308 	and.w	r3, r3, #8
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d005      	beq.n	80044dc <HAL_RCC_OscConfig+0x68>
 80044d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044da:	e006      	b.n	80044ea <HAL_RCC_OscConfig+0x76>
 80044dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044e4:	091b      	lsrs	r3, r3, #4
 80044e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d222      	bcs.n	8004534 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 fd3c 	bl	8004f70 <RCC_SetFlashLatencyFromMSIRange>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e331      	b.n	8004b66 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800450c:	f043 0308 	orr.w	r3, r3, #8
 8004510:	6013      	str	r3, [r2, #0]
 8004512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004520:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004524:	4313      	orrs	r3, r2
 8004526:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	4618      	mov	r0, r3
 800452e:	f7ff fe53 	bl	80041d8 <LL_RCC_MSI_SetCalibTrimming>
 8004532:	e021      	b.n	8004578 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800453e:	f043 0308 	orr.w	r3, r3, #8
 8004542:	6013      	str	r3, [r2, #0]
 8004544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004552:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004556:	4313      	orrs	r3, r2
 8004558:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	4618      	mov	r0, r3
 8004560:	f7ff fe3a 	bl	80041d8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004568:	4618      	mov	r0, r3
 800456a:	f000 fd01 	bl	8004f70 <RCC_SetFlashLatencyFromMSIRange>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e2f6      	b.n	8004b66 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004578:	f000 fcc2 	bl	8004f00 <HAL_RCC_GetHCLKFreq>
 800457c:	4603      	mov	r3, r0
 800457e:	4aa7      	ldr	r2, [pc, #668]	; (800481c <HAL_RCC_OscConfig+0x3a8>)
 8004580:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8004582:	4ba7      	ldr	r3, [pc, #668]	; (8004820 <HAL_RCC_OscConfig+0x3ac>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4618      	mov	r0, r3
 8004588:	f7fd fff2 	bl	8002570 <HAL_InitTick>
 800458c:	4603      	mov	r3, r0
 800458e:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8004590:	7cfb      	ldrb	r3, [r7, #19]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d047      	beq.n	8004626 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8004596:	7cfb      	ldrb	r3, [r7, #19]
 8004598:	e2e5      	b.n	8004b66 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d02c      	beq.n	80045fc <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80045a2:	f7ff fdc6 	bl	8004132 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045a6:	f7fe f82f 	bl	8002608 <HAL_GetTick>
 80045aa:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80045ac:	e008      	b.n	80045c0 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045ae:	f7fe f82b 	bl	8002608 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d901      	bls.n	80045c0 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e2d2      	b.n	8004b66 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80045c0:	f7ff fdd3 	bl	800416a <LL_RCC_MSI_IsReady>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d0f1      	beq.n	80045ae <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045d4:	f043 0308 	orr.w	r3, r3, #8
 80045d8:	6013      	str	r3, [r2, #0]
 80045da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045ec:	4313      	orrs	r3, r2
 80045ee:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7ff fdef 	bl	80041d8 <LL_RCC_MSI_SetCalibTrimming>
 80045fa:	e015      	b.n	8004628 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80045fc:	f7ff fda7 	bl	800414e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004600:	f7fe f802 	bl	8002608 <HAL_GetTick>
 8004604:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004608:	f7fd fffe 	bl	8002608 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e2a5      	b.n	8004b66 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800461a:	f7ff fda6 	bl	800416a <LL_RCC_MSI_IsReady>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1f1      	bne.n	8004608 <HAL_RCC_OscConfig+0x194>
 8004624:	e000      	b.n	8004628 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004626:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b00      	cmp	r3, #0
 8004632:	d058      	beq.n	80046e6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	2b08      	cmp	r3, #8
 8004638:	d005      	beq.n	8004646 <HAL_RCC_OscConfig+0x1d2>
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	2b0c      	cmp	r3, #12
 800463e:	d108      	bne.n	8004652 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	2b03      	cmp	r3, #3
 8004644:	d105      	bne.n	8004652 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d14b      	bne.n	80046e6 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e289      	b.n	8004b66 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8004652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004664:	4313      	orrs	r3, r2
 8004666:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004670:	d102      	bne.n	8004678 <HAL_RCC_OscConfig+0x204>
 8004672:	f7ff fcae 	bl	8003fd2 <LL_RCC_HSE_Enable>
 8004676:	e00d      	b.n	8004694 <HAL_RCC_OscConfig+0x220>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8004680:	d104      	bne.n	800468c <HAL_RCC_OscConfig+0x218>
 8004682:	f7ff fc79 	bl	8003f78 <LL_RCC_HSE_EnableTcxo>
 8004686:	f7ff fca4 	bl	8003fd2 <LL_RCC_HSE_Enable>
 800468a:	e003      	b.n	8004694 <HAL_RCC_OscConfig+0x220>
 800468c:	f7ff fcaf 	bl	8003fee <LL_RCC_HSE_Disable>
 8004690:	f7ff fc80 	bl	8003f94 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d012      	beq.n	80046c2 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469c:	f7fd ffb4 	bl	8002608 <HAL_GetTick>
 80046a0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80046a2:	e008      	b.n	80046b6 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046a4:	f7fd ffb0 	bl	8002608 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b64      	cmp	r3, #100	; 0x64
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e257      	b.n	8004b66 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80046b6:	f7ff fca8 	bl	800400a <LL_RCC_HSE_IsReady>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d0f1      	beq.n	80046a4 <HAL_RCC_OscConfig+0x230>
 80046c0:	e011      	b.n	80046e6 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c2:	f7fd ffa1 	bl	8002608 <HAL_GetTick>
 80046c6:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80046c8:	e008      	b.n	80046dc <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046ca:	f7fd ff9d 	bl	8002608 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b64      	cmp	r3, #100	; 0x64
 80046d6:	d901      	bls.n	80046dc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e244      	b.n	8004b66 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80046dc:	f7ff fc95 	bl	800400a <LL_RCC_HSE_IsReady>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1f1      	bne.n	80046ca <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d046      	beq.n	8004780 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	2b04      	cmp	r3, #4
 80046f6:	d005      	beq.n	8004704 <HAL_RCC_OscConfig+0x290>
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	2b0c      	cmp	r3, #12
 80046fc:	d10e      	bne.n	800471c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	2b02      	cmp	r3, #2
 8004702:	d10b      	bne.n	800471c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e22a      	b.n	8004b66 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	4618      	mov	r0, r3
 8004716:	f7ff fcb6 	bl	8004086 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800471a:	e031      	b.n	8004780 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d019      	beq.n	8004758 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004724:	f7ff fc82 	bl	800402c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004728:	f7fd ff6e 	bl	8002608 <HAL_GetTick>
 800472c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004730:	f7fd ff6a 	bl	8002608 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e211      	b.n	8004b66 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004742:	f7ff fc8f 	bl	8004064 <LL_RCC_HSI_IsReady>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d0f1      	beq.n	8004730 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	695b      	ldr	r3, [r3, #20]
 8004750:	4618      	mov	r0, r3
 8004752:	f7ff fc98 	bl	8004086 <LL_RCC_HSI_SetCalibTrimming>
 8004756:	e013      	b.n	8004780 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004758:	f7ff fc76 	bl	8004048 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475c:	f7fd ff54 	bl	8002608 <HAL_GetTick>
 8004760:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004764:	f7fd ff50 	bl	8002608 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e1f7      	b.n	8004b66 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004776:	f7ff fc75 	bl	8004064 <LL_RCC_HSI_IsReady>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1f1      	bne.n	8004764 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0308 	and.w	r3, r3, #8
 8004788:	2b00      	cmp	r3, #0
 800478a:	d06e      	beq.n	800486a <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d056      	beq.n	8004842 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8004794:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004798:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800479c:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	69da      	ldr	r2, [r3, #28]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f003 0310 	and.w	r3, r3, #16
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d031      	beq.n	8004810 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d006      	beq.n	80047c4 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e1d0      	b.n	8004b66 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d013      	beq.n	80047f6 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80047ce:	f7ff fc8f 	bl	80040f0 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047d2:	f7fd ff19 	bl	8002608 <HAL_GetTick>
 80047d6:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80047d8:	e008      	b.n	80047ec <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047da:	f7fd ff15 	bl	8002608 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	2b11      	cmp	r3, #17
 80047e6:	d901      	bls.n	80047ec <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e1bc      	b.n	8004b66 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80047ec:	f7ff fc90 	bl	8004110 <LL_RCC_LSI_IsReady>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1f1      	bne.n	80047da <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80047f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047fe:	f023 0210 	bic.w	r2, r3, #16
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800480a:	4313      	orrs	r3, r2
 800480c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004810:	f7ff fc5e 	bl	80040d0 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004814:	f7fd fef8 	bl	8002608 <HAL_GetTick>
 8004818:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800481a:	e00c      	b.n	8004836 <HAL_RCC_OscConfig+0x3c2>
 800481c:	20000000 	.word	0x20000000
 8004820:	20000040 	.word	0x20000040
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004824:	f7fd fef0 	bl	8002608 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b11      	cmp	r3, #17
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e197      	b.n	8004b66 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8004836:	f7ff fc6b 	bl	8004110 <LL_RCC_LSI_IsReady>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0f1      	beq.n	8004824 <HAL_RCC_OscConfig+0x3b0>
 8004840:	e013      	b.n	800486a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004842:	f7ff fc55 	bl	80040f0 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004846:	f7fd fedf 	bl	8002608 <HAL_GetTick>
 800484a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800484c:	e008      	b.n	8004860 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800484e:	f7fd fedb 	bl	8002608 <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	2b11      	cmp	r3, #17
 800485a:	d901      	bls.n	8004860 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e182      	b.n	8004b66 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8004860:	f7ff fc56 	bl	8004110 <LL_RCC_LSI_IsReady>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1f1      	bne.n	800484e <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0304 	and.w	r3, r3, #4
 8004872:	2b00      	cmp	r3, #0
 8004874:	f000 80d8 	beq.w	8004a28 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004878:	f7ff fb6c 	bl	8003f54 <LL_PWR_IsEnabledBkUpAccess>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d113      	bne.n	80048aa <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004882:	f7ff fb4d 	bl	8003f20 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004886:	f7fd febf 	bl	8002608 <HAL_GetTick>
 800488a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800488c:	e008      	b.n	80048a0 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800488e:	f7fd febb 	bl	8002608 <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	2b02      	cmp	r3, #2
 800489a:	d901      	bls.n	80048a0 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e162      	b.n	8004b66 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80048a0:	f7ff fb58 	bl	8003f54 <LL_PWR_IsEnabledBkUpAccess>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d0f1      	beq.n	800488e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d07b      	beq.n	80049aa <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	2b85      	cmp	r3, #133	; 0x85
 80048b8:	d003      	beq.n	80048c2 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	2b05      	cmp	r3, #5
 80048c0:	d109      	bne.n	80048d6 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80048c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048ce:	f043 0304 	orr.w	r3, r3, #4
 80048d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048d6:	f7fd fe97 	bl	8002608 <HAL_GetTick>
 80048da:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80048dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048e8:	f043 0301 	orr.w	r3, r3, #1
 80048ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80048f0:	e00a      	b.n	8004908 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048f2:	f7fd fe89 	bl	8002608 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004900:	4293      	cmp	r3, r2
 8004902:	d901      	bls.n	8004908 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e12e      	b.n	8004b66 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004908:	f7ff fbd1 	bl	80040ae <LL_RCC_LSE_IsReady>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d0ef      	beq.n	80048f2 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	2b81      	cmp	r3, #129	; 0x81
 8004918:	d003      	beq.n	8004922 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	2b85      	cmp	r3, #133	; 0x85
 8004920:	d121      	bne.n	8004966 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004922:	f7fd fe71 	bl	8002608 <HAL_GetTick>
 8004926:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800492c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004930:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004938:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800493c:	e00a      	b.n	8004954 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800493e:	f7fd fe63 	bl	8002608 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	f241 3288 	movw	r2, #5000	; 0x1388
 800494c:	4293      	cmp	r3, r2
 800494e:	d901      	bls.n	8004954 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e108      	b.n	8004b66 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800495c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004960:	2b00      	cmp	r3, #0
 8004962:	d0ec      	beq.n	800493e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004964:	e060      	b.n	8004a28 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004966:	f7fd fe4f 	bl	8002608 <HAL_GetTick>
 800496a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800496c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004974:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004978:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800497c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004980:	e00a      	b.n	8004998 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004982:	f7fd fe41 	bl	8002608 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004990:	4293      	cmp	r3, r2
 8004992:	d901      	bls.n	8004998 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e0e6      	b.n	8004b66 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800499c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1ec      	bne.n	8004982 <HAL_RCC_OscConfig+0x50e>
 80049a8:	e03e      	b.n	8004a28 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049aa:	f7fd fe2d 	bl	8002608 <HAL_GetTick>
 80049ae:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80049b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80049c4:	e00a      	b.n	80049dc <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049c6:	f7fd fe1f 	bl	8002608 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d901      	bls.n	80049dc <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e0c4      	b.n	8004b66 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80049dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1ec      	bne.n	80049c6 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ec:	f7fd fe0c 	bl	8002608 <HAL_GetTick>
 80049f0:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80049f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049fe:	f023 0301 	bic.w	r3, r3, #1
 8004a02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004a06:	e00a      	b.n	8004a1e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a08:	f7fd fdfe 	bl	8002608 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e0a3      	b.n	8004b66 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004a1e:	f7ff fb46 	bl	80040ae <LL_RCC_LSE_IsReady>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1ef      	bne.n	8004a08 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 8099 	beq.w	8004b64 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	2b0c      	cmp	r3, #12
 8004a36:	d06c      	beq.n	8004b12 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d14b      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a40:	f7ff fc87 	bl	8004352 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a44:	f7fd fde0 	bl	8002608 <HAL_GetTick>
 8004a48:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a4c:	f7fd fddc 	bl	8002608 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b0a      	cmp	r3, #10
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e083      	b.n	8004b66 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004a5e:	f7ff fc86 	bl	800436e <LL_RCC_PLL_IsReady>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1f1      	bne.n	8004a4c <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a6c:	68da      	ldr	r2, [r3, #12]
 8004a6e:	4b40      	ldr	r3, [pc, #256]	; (8004b70 <HAL_RCC_OscConfig+0x6fc>)
 8004a70:	4013      	ands	r3, r2
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a7a:	4311      	orrs	r1, r2
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a80:	0212      	lsls	r2, r2, #8
 8004a82:	4311      	orrs	r1, r2
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a88:	4311      	orrs	r1, r2
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a8e:	4311      	orrs	r1, r2
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004a94:	430a      	orrs	r2, r1
 8004a96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a9e:	f7ff fc4a 	bl	8004336 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ab0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab2:	f7fd fda9 	bl	8002608 <HAL_GetTick>
 8004ab6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8004ab8:	e008      	b.n	8004acc <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aba:	f7fd fda5 	bl	8002608 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b0a      	cmp	r3, #10
 8004ac6:	d901      	bls.n	8004acc <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e04c      	b.n	8004b66 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8004acc:	f7ff fc4f 	bl	800436e <LL_RCC_PLL_IsReady>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d0f1      	beq.n	8004aba <HAL_RCC_OscConfig+0x646>
 8004ad6:	e045      	b.n	8004b64 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ad8:	f7ff fc3b 	bl	8004352 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004adc:	f7fd fd94 	bl	8002608 <HAL_GetTick>
 8004ae0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae4:	f7fd fd90 	bl	8002608 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b0a      	cmp	r3, #10
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e037      	b.n	8004b66 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004af6:	f7ff fc3a 	bl	800436e <LL_RCC_PLL_IsReady>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1f1      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b04:	68da      	ldr	r2, [r3, #12]
 8004b06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b0a:	4b1a      	ldr	r3, [pc, #104]	; (8004b74 <HAL_RCC_OscConfig+0x700>)
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	60cb      	str	r3, [r1, #12]
 8004b10:	e028      	b.n	8004b64 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d101      	bne.n	8004b1e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e023      	b.n	8004b66 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	f003 0203 	and.w	r2, r3, #3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d115      	bne.n	8004b60 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d10e      	bne.n	8004b60 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4c:	021b      	lsls	r3, r3, #8
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d106      	bne.n	8004b60 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d001      	beq.n	8004b64 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e000      	b.n	8004b66 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3720      	adds	r7, #32
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	11c1808c 	.word	0x11c1808c
 8004b74:	eefefffc 	.word	0xeefefffc

08004b78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e10f      	b.n	8004dac <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b8c:	4b89      	ldr	r3, [pc, #548]	; (8004db4 <HAL_RCC_ClockConfig+0x23c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0307 	and.w	r3, r3, #7
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d91b      	bls.n	8004bd2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b9a:	4b86      	ldr	r3, [pc, #536]	; (8004db4 <HAL_RCC_ClockConfig+0x23c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f023 0207 	bic.w	r2, r3, #7
 8004ba2:	4984      	ldr	r1, [pc, #528]	; (8004db4 <HAL_RCC_ClockConfig+0x23c>)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004baa:	f7fd fd2d 	bl	8002608 <HAL_GetTick>
 8004bae:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bb0:	e008      	b.n	8004bc4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004bb2:	f7fd fd29 	bl	8002608 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d901      	bls.n	8004bc4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e0f3      	b.n	8004dac <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bc4:	4b7b      	ldr	r3, [pc, #492]	; (8004db4 <HAL_RCC_ClockConfig+0x23c>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d1ef      	bne.n	8004bb2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d016      	beq.n	8004c0c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7ff fb2a 	bl	800423c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004be8:	f7fd fd0e 	bl	8002608 <HAL_GetTick>
 8004bec:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004bee:	e008      	b.n	8004c02 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004bf0:	f7fd fd0a 	bl	8002608 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e0d4      	b.n	8004dac <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004c02:	f7ff fbf2 	bl	80043ea <LL_RCC_IsActiveFlag_HPRE>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d0f1      	beq.n	8004bf0 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d016      	beq.n	8004c46 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7ff fb20 	bl	8004262 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004c22:	f7fd fcf1 	bl	8002608 <HAL_GetTick>
 8004c26:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004c28:	e008      	b.n	8004c3c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004c2a:	f7fd fced 	bl	8002608 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d901      	bls.n	8004c3c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e0b7      	b.n	8004dac <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004c3c:	f7ff fbe6 	bl	800440c <LL_RCC_IsActiveFlag_SHDHPRE>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d0f1      	beq.n	8004c2a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0304 	and.w	r3, r3, #4
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d016      	beq.n	8004c80 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7ff fb19 	bl	800428e <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004c5c:	f7fd fcd4 	bl	8002608 <HAL_GetTick>
 8004c60:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004c62:	e008      	b.n	8004c76 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004c64:	f7fd fcd0 	bl	8002608 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d901      	bls.n	8004c76 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e09a      	b.n	8004dac <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004c76:	f7ff fbdb 	bl	8004430 <LL_RCC_IsActiveFlag_PPRE1>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d0f1      	beq.n	8004c64 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0308 	and.w	r3, r3, #8
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d017      	beq.n	8004cbc <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	00db      	lsls	r3, r3, #3
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7ff fb0e 	bl	80042b4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004c98:	f7fd fcb6 	bl	8002608 <HAL_GetTick>
 8004c9c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004ca0:	f7fd fcb2 	bl	8002608 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e07c      	b.n	8004dac <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004cb2:	f7ff fbce 	bl	8004452 <LL_RCC_IsActiveFlag_PPRE2>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d0f1      	beq.n	8004ca0 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d043      	beq.n	8004d50 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d106      	bne.n	8004cde <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004cd0:	f7ff f99b 	bl	800400a <LL_RCC_HSE_IsReady>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d11e      	bne.n	8004d18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e066      	b.n	8004dac <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2b03      	cmp	r3, #3
 8004ce4:	d106      	bne.n	8004cf4 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004ce6:	f7ff fb42 	bl	800436e <LL_RCC_PLL_IsReady>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d113      	bne.n	8004d18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e05b      	b.n	8004dac <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d106      	bne.n	8004d0a <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004cfc:	f7ff fa35 	bl	800416a <LL_RCC_MSI_IsReady>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d108      	bne.n	8004d18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e050      	b.n	8004dac <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004d0a:	f7ff f9ab 	bl	8004064 <LL_RCC_HSI_IsReady>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d101      	bne.n	8004d18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e049      	b.n	8004dac <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7ff fa6f 	bl	8004200 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d22:	f7fd fc71 	bl	8002608 <HAL_GetTick>
 8004d26:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d28:	e00a      	b.n	8004d40 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d2a:	f7fd fc6d 	bl	8002608 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e035      	b.n	8004dac <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d40:	f7ff fa71 	bl	8004226 <LL_RCC_GetSysClkSource>
 8004d44:	4602      	mov	r2, r0
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d1ec      	bne.n	8004d2a <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d50:	4b18      	ldr	r3, [pc, #96]	; (8004db4 <HAL_RCC_ClockConfig+0x23c>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0307 	and.w	r3, r3, #7
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d21b      	bcs.n	8004d96 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d5e:	4b15      	ldr	r3, [pc, #84]	; (8004db4 <HAL_RCC_ClockConfig+0x23c>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f023 0207 	bic.w	r2, r3, #7
 8004d66:	4913      	ldr	r1, [pc, #76]	; (8004db4 <HAL_RCC_ClockConfig+0x23c>)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d6e:	f7fd fc4b 	bl	8002608 <HAL_GetTick>
 8004d72:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d74:	e008      	b.n	8004d88 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004d76:	f7fd fc47 	bl	8002608 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d901      	bls.n	8004d88 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e011      	b.n	8004dac <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d88:	4b0a      	ldr	r3, [pc, #40]	; (8004db4 <HAL_RCC_ClockConfig+0x23c>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0307 	and.w	r3, r3, #7
 8004d90:	683a      	ldr	r2, [r7, #0]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d1ef      	bne.n	8004d76 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004d96:	f000 f8b3 	bl	8004f00 <HAL_RCC_GetHCLKFreq>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	4a06      	ldr	r2, [pc, #24]	; (8004db8 <HAL_RCC_ClockConfig+0x240>)
 8004d9e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8004da0:	4b06      	ldr	r3, [pc, #24]	; (8004dbc <HAL_RCC_ClockConfig+0x244>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7fd fbe3 	bl	8002570 <HAL_InitTick>
 8004daa:	4603      	mov	r3, r0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	58004000 	.word	0x58004000
 8004db8:	20000000 	.word	0x20000000
 8004dbc:	20000040 	.word	0x20000040

08004dc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dc0:	b590      	push	{r4, r7, lr}
 8004dc2:	b087      	sub	sp, #28
 8004dc4:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dce:	f7ff fa2a 	bl	8004226 <LL_RCC_GetSysClkSource>
 8004dd2:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004dd4:	f7ff fafe 	bl	80043d4 <LL_RCC_PLL_GetMainSource>
 8004dd8:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d005      	beq.n	8004dec <HAL_RCC_GetSysClockFreq+0x2c>
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	2b0c      	cmp	r3, #12
 8004de4:	d139      	bne.n	8004e5a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d136      	bne.n	8004e5a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004dec:	f7ff f9cd 	bl	800418a <LL_RCC_MSI_IsEnabledRangeSelect>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d115      	bne.n	8004e22 <HAL_RCC_GetSysClockFreq+0x62>
 8004df6:	f7ff f9c8 	bl	800418a <LL_RCC_MSI_IsEnabledRangeSelect>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d106      	bne.n	8004e0e <HAL_RCC_GetSysClockFreq+0x4e>
 8004e00:	f7ff f9d3 	bl	80041aa <LL_RCC_MSI_GetRange>
 8004e04:	4603      	mov	r3, r0
 8004e06:	0a1b      	lsrs	r3, r3, #8
 8004e08:	f003 030f 	and.w	r3, r3, #15
 8004e0c:	e005      	b.n	8004e1a <HAL_RCC_GetSysClockFreq+0x5a>
 8004e0e:	f7ff f9d7 	bl	80041c0 <LL_RCC_MSI_GetRangeAfterStandby>
 8004e12:	4603      	mov	r3, r0
 8004e14:	0a1b      	lsrs	r3, r3, #8
 8004e16:	f003 030f 	and.w	r3, r3, #15
 8004e1a:	4a36      	ldr	r2, [pc, #216]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x134>)
 8004e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e20:	e014      	b.n	8004e4c <HAL_RCC_GetSysClockFreq+0x8c>
 8004e22:	f7ff f9b2 	bl	800418a <LL_RCC_MSI_IsEnabledRangeSelect>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d106      	bne.n	8004e3a <HAL_RCC_GetSysClockFreq+0x7a>
 8004e2c:	f7ff f9bd 	bl	80041aa <LL_RCC_MSI_GetRange>
 8004e30:	4603      	mov	r3, r0
 8004e32:	091b      	lsrs	r3, r3, #4
 8004e34:	f003 030f 	and.w	r3, r3, #15
 8004e38:	e005      	b.n	8004e46 <HAL_RCC_GetSysClockFreq+0x86>
 8004e3a:	f7ff f9c1 	bl	80041c0 <LL_RCC_MSI_GetRangeAfterStandby>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	091b      	lsrs	r3, r3, #4
 8004e42:	f003 030f 	and.w	r3, r3, #15
 8004e46:	4a2b      	ldr	r2, [pc, #172]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x134>)
 8004e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e4c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d115      	bne.n	8004e80 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004e58:	e012      	b.n	8004e80 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	2b04      	cmp	r3, #4
 8004e5e:	d102      	bne.n	8004e66 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e60:	4b25      	ldr	r3, [pc, #148]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x138>)
 8004e62:	617b      	str	r3, [r7, #20]
 8004e64:	e00c      	b.n	8004e80 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	2b08      	cmp	r3, #8
 8004e6a:	d109      	bne.n	8004e80 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004e6c:	f7ff f8a0 	bl	8003fb0 <LL_RCC_HSE_IsEnabledDiv2>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d102      	bne.n	8004e7c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004e76:	4b20      	ldr	r3, [pc, #128]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x138>)
 8004e78:	617b      	str	r3, [r7, #20]
 8004e7a:	e001      	b.n	8004e80 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004e7c:	4b1f      	ldr	r3, [pc, #124]	; (8004efc <HAL_RCC_GetSysClockFreq+0x13c>)
 8004e7e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e80:	f7ff f9d1 	bl	8004226 <LL_RCC_GetSysClkSource>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b0c      	cmp	r3, #12
 8004e88:	d12f      	bne.n	8004eea <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004e8a:	f7ff faa3 	bl	80043d4 <LL_RCC_PLL_GetMainSource>
 8004e8e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d003      	beq.n	8004e9e <HAL_RCC_GetSysClockFreq+0xde>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b03      	cmp	r3, #3
 8004e9a:	d003      	beq.n	8004ea4 <HAL_RCC_GetSysClockFreq+0xe4>
 8004e9c:	e00d      	b.n	8004eba <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004e9e:	4b16      	ldr	r3, [pc, #88]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x138>)
 8004ea0:	60fb      	str	r3, [r7, #12]
        break;
 8004ea2:	e00d      	b.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004ea4:	f7ff f884 	bl	8003fb0 <LL_RCC_HSE_IsEnabledDiv2>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d102      	bne.n	8004eb4 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004eae:	4b12      	ldr	r3, [pc, #72]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x138>)
 8004eb0:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004eb2:	e005      	b.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8004eb4:	4b11      	ldr	r3, [pc, #68]	; (8004efc <HAL_RCC_GetSysClockFreq+0x13c>)
 8004eb6:	60fb      	str	r3, [r7, #12]
        break;
 8004eb8:	e002      	b.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	60fb      	str	r3, [r7, #12]
        break;
 8004ebe:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004ec0:	f7ff fa66 	bl	8004390 <LL_RCC_PLL_GetN>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	fb03 f402 	mul.w	r4, r3, r2
 8004ecc:	f7ff fa77 	bl	80043be <LL_RCC_PLL_GetDivider>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	091b      	lsrs	r3, r3, #4
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	fbb4 f4f3 	udiv	r4, r4, r3
 8004eda:	f7ff fa65 	bl	80043a8 <LL_RCC_PLL_GetR>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	0f5b      	lsrs	r3, r3, #29
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	fbb4 f3f3 	udiv	r3, r4, r3
 8004ee8:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004eea:	697b      	ldr	r3, [r7, #20]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	371c      	adds	r7, #28
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd90      	pop	{r4, r7, pc}
 8004ef4:	0800b0ec 	.word	0x0800b0ec
 8004ef8:	00f42400 	.word	0x00f42400
 8004efc:	01e84800 	.word	0x01e84800

08004f00 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f00:	b598      	push	{r3, r4, r7, lr}
 8004f02:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004f04:	f7ff ff5c 	bl	8004dc0 <HAL_RCC_GetSysClockFreq>
 8004f08:	4604      	mov	r4, r0
 8004f0a:	f7ff f9e6 	bl	80042da <LL_RCC_GetAHBPrescaler>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	091b      	lsrs	r3, r3, #4
 8004f12:	f003 030f 	and.w	r3, r3, #15
 8004f16:	4a03      	ldr	r2, [pc, #12]	; (8004f24 <HAL_RCC_GetHCLKFreq+0x24>)
 8004f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f1c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	bd98      	pop	{r3, r4, r7, pc}
 8004f24:	0800b08c 	.word	0x0800b08c

08004f28 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f28:	b598      	push	{r3, r4, r7, lr}
 8004f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004f2c:	f7ff ffe8 	bl	8004f00 <HAL_RCC_GetHCLKFreq>
 8004f30:	4604      	mov	r4, r0
 8004f32:	f7ff f9ea 	bl	800430a <LL_RCC_GetAPB1Prescaler>
 8004f36:	4603      	mov	r3, r0
 8004f38:	0a1b      	lsrs	r3, r3, #8
 8004f3a:	4a03      	ldr	r2, [pc, #12]	; (8004f48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f40:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	bd98      	pop	{r3, r4, r7, pc}
 8004f48:	0800b0cc 	.word	0x0800b0cc

08004f4c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f4c:	b598      	push	{r3, r4, r7, lr}
 8004f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004f50:	f7ff ffd6 	bl	8004f00 <HAL_RCC_GetHCLKFreq>
 8004f54:	4604      	mov	r4, r0
 8004f56:	f7ff f9e3 	bl	8004320 <LL_RCC_GetAPB2Prescaler>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	0adb      	lsrs	r3, r3, #11
 8004f5e:	4a03      	ldr	r2, [pc, #12]	; (8004f6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f64:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	bd98      	pop	{r3, r4, r7, pc}
 8004f6c:	0800b0cc 	.word	0x0800b0cc

08004f70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004f70:	b590      	push	{r4, r7, lr}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	091b      	lsrs	r3, r3, #4
 8004f7c:	f003 030f 	and.w	r3, r3, #15
 8004f80:	4a10      	ldr	r2, [pc, #64]	; (8004fc4 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8004f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f86:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8004f88:	f7ff f9b2 	bl	80042f0 <LL_RCC_GetAHB3Prescaler>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	091b      	lsrs	r3, r3, #4
 8004f90:	f003 030f 	and.w	r3, r3, #15
 8004f94:	4a0c      	ldr	r2, [pc, #48]	; (8004fc8 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8004f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa0:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	4a09      	ldr	r2, [pc, #36]	; (8004fcc <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8004fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8004faa:	0c9c      	lsrs	r4, r3, #18
 8004fac:	f7fe ffc6 	bl	8003f3c <HAL_PWREx_GetVoltageRange>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	4620      	mov	r0, r4
 8004fb6:	f000 f80b 	bl	8004fd0 <RCC_SetFlashLatency>
 8004fba:	4603      	mov	r3, r0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3714      	adds	r7, #20
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd90      	pop	{r4, r7, pc}
 8004fc4:	0800b0ec 	.word	0x0800b0ec
 8004fc8:	0800b08c 	.word	0x0800b08c
 8004fcc:	431bde83 	.word	0x431bde83

08004fd0 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b08e      	sub	sp, #56	; 0x38
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8004fda:	4a3a      	ldr	r2, [pc, #232]	; (80050c4 <RCC_SetFlashLatency+0xf4>)
 8004fdc:	f107 0320 	add.w	r3, r7, #32
 8004fe0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004fe4:	6018      	str	r0, [r3, #0]
 8004fe6:	3304      	adds	r3, #4
 8004fe8:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8004fea:	4a37      	ldr	r2, [pc, #220]	; (80050c8 <RCC_SetFlashLatency+0xf8>)
 8004fec:	f107 0318 	add.w	r3, r7, #24
 8004ff0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ff4:	6018      	str	r0, [r3, #0]
 8004ff6:	3304      	adds	r3, #4
 8004ff8:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8004ffa:	4a34      	ldr	r2, [pc, #208]	; (80050cc <RCC_SetFlashLatency+0xfc>)
 8004ffc:	f107 030c 	add.w	r3, r7, #12
 8005000:	ca07      	ldmia	r2, {r0, r1, r2}
 8005002:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005006:	2300      	movs	r3, #0
 8005008:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005010:	d11b      	bne.n	800504a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005012:	2300      	movs	r3, #0
 8005014:	633b      	str	r3, [r7, #48]	; 0x30
 8005016:	e014      	b.n	8005042 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501a:	005b      	lsls	r3, r3, #1
 800501c:	3338      	adds	r3, #56	; 0x38
 800501e:	443b      	add	r3, r7
 8005020:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005024:	461a      	mov	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4293      	cmp	r3, r2
 800502a:	d807      	bhi.n	800503c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800502c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	3338      	adds	r3, #56	; 0x38
 8005032:	443b      	add	r3, r7
 8005034:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005038:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800503a:	e021      	b.n	8005080 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800503c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503e:	3301      	adds	r3, #1
 8005040:	633b      	str	r3, [r7, #48]	; 0x30
 8005042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005044:	2b02      	cmp	r3, #2
 8005046:	d9e7      	bls.n	8005018 <RCC_SetFlashLatency+0x48>
 8005048:	e01a      	b.n	8005080 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800504a:	2300      	movs	r3, #0
 800504c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800504e:	e014      	b.n	800507a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005052:	005b      	lsls	r3, r3, #1
 8005054:	3338      	adds	r3, #56	; 0x38
 8005056:	443b      	add	r3, r7
 8005058:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800505c:	461a      	mov	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4293      	cmp	r3, r2
 8005062:	d807      	bhi.n	8005074 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	3338      	adds	r3, #56	; 0x38
 800506a:	443b      	add	r3, r7
 800506c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005070:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005072:	e005      	b.n	8005080 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005076:	3301      	adds	r3, #1
 8005078:	62fb      	str	r3, [r7, #44]	; 0x2c
 800507a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507c:	2b02      	cmp	r3, #2
 800507e:	d9e7      	bls.n	8005050 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005080:	4b13      	ldr	r3, [pc, #76]	; (80050d0 <RCC_SetFlashLatency+0x100>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f023 0207 	bic.w	r2, r3, #7
 8005088:	4911      	ldr	r1, [pc, #68]	; (80050d0 <RCC_SetFlashLatency+0x100>)
 800508a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800508c:	4313      	orrs	r3, r2
 800508e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005090:	f7fd faba 	bl	8002608 <HAL_GetTick>
 8005094:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005096:	e008      	b.n	80050aa <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005098:	f7fd fab6 	bl	8002608 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d901      	bls.n	80050aa <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e007      	b.n	80050ba <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80050aa:	4b09      	ldr	r3, [pc, #36]	; (80050d0 <RCC_SetFlashLatency+0x100>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0307 	and.w	r3, r3, #7
 80050b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d1ef      	bne.n	8005098 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3738      	adds	r7, #56	; 0x38
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	0800aa30 	.word	0x0800aa30
 80050c8:	0800aa38 	.word	0x0800aa38
 80050cc:	0800aa40 	.word	0x0800aa40
 80050d0:	58004000 	.word	0x58004000

080050d4 <LL_RCC_LSE_IsReady>:
{
 80050d4:	b480      	push	{r7}
 80050d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80050d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d101      	bne.n	80050ec <LL_RCC_LSE_IsReady+0x18>
 80050e8:	2301      	movs	r3, #1
 80050ea:	e000      	b.n	80050ee <LL_RCC_LSE_IsReady+0x1a>
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bc80      	pop	{r7}
 80050f4:	4770      	bx	lr

080050f6 <LL_RCC_SetUSARTClockSource>:
{
 80050f6:	b480      	push	{r7}
 80050f8:	b083      	sub	sp, #12
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80050fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005102:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	0c1b      	lsrs	r3, r3, #16
 800510a:	43db      	mvns	r3, r3
 800510c:	401a      	ands	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	b29b      	uxth	r3, r3
 8005112:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005116:	4313      	orrs	r3, r2
 8005118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	bc80      	pop	{r7}
 8005124:	4770      	bx	lr

08005126 <LL_RCC_SetI2SClockSource>:
{
 8005126:	b480      	push	{r7}
 8005128:	b083      	sub	sp, #12
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800512e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005136:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800513a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4313      	orrs	r3, r2
 8005142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005146:	bf00      	nop
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	bc80      	pop	{r7}
 800514e:	4770      	bx	lr

08005150 <LL_RCC_SetLPUARTClockSource>:
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800515c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005160:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005164:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4313      	orrs	r3, r2
 800516c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	bc80      	pop	{r7}
 8005178:	4770      	bx	lr

0800517a <LL_RCC_SetI2CClockSource>:
{
 800517a:	b480      	push	{r7}
 800517c:	b083      	sub	sp, #12
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005186:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	091b      	lsrs	r3, r3, #4
 800518e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005192:	43db      	mvns	r3, r3
 8005194:	401a      	ands	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	011b      	lsls	r3, r3, #4
 800519a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800519e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051a2:	4313      	orrs	r3, r2
 80051a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bc80      	pop	{r7}
 80051b0:	4770      	bx	lr

080051b2 <LL_RCC_SetLPTIMClockSource>:
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80051ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051be:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	0c1b      	lsrs	r3, r3, #16
 80051c6:	041b      	lsls	r3, r3, #16
 80051c8:	43db      	mvns	r3, r3
 80051ca:	401a      	ands	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	041b      	lsls	r3, r3, #16
 80051d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051d4:	4313      	orrs	r3, r2
 80051d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80051da:	bf00      	nop
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	bc80      	pop	{r7}
 80051e2:	4770      	bx	lr

080051e4 <LL_RCC_SetRNGClockSource>:
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80051ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80051f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4313      	orrs	r3, r2
 8005200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	bc80      	pop	{r7}
 800520c:	4770      	bx	lr

0800520e <LL_RCC_SetADCClockSource>:
{
 800520e:	b480      	push	{r7}
 8005210:	b083      	sub	sp, #12
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800521a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005222:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4313      	orrs	r3, r2
 800522a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800522e:	bf00      	nop
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	bc80      	pop	{r7}
 8005236:	4770      	bx	lr

08005238 <LL_RCC_SetRTCClockSource>:
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005248:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800524c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4313      	orrs	r3, r2
 8005254:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	bc80      	pop	{r7}
 8005260:	4770      	bx	lr

08005262 <LL_RCC_GetRTCClockSource>:
{
 8005262:	b480      	push	{r7}
 8005264:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800526a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800526e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005272:	4618      	mov	r0, r3
 8005274:	46bd      	mov	sp, r7
 8005276:	bc80      	pop	{r7}
 8005278:	4770      	bx	lr

0800527a <LL_RCC_ForceBackupDomainReset>:
{
 800527a:	b480      	push	{r7}
 800527c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800527e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005286:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800528a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800528e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005292:	bf00      	nop
 8005294:	46bd      	mov	sp, r7
 8005296:	bc80      	pop	{r7}
 8005298:	4770      	bx	lr

0800529a <LL_RCC_ReleaseBackupDomainReset>:
{
 800529a:	b480      	push	{r7}
 800529c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800529e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80052b2:	bf00      	nop
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bc80      	pop	{r7}
 80052b8:	4770      	bx	lr
	...

080052bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80052c4:	2300      	movs	r3, #0
 80052c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80052c8:	2300      	movs	r3, #0
 80052ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80052cc:	2300      	movs	r3, #0
 80052ce:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d058      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80052dc:	f7fe fe20 	bl	8003f20 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052e0:	f7fd f992 	bl	8002608 <HAL_GetTick>
 80052e4:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80052e6:	e009      	b.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052e8:	f7fd f98e 	bl	8002608 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d902      	bls.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	74fb      	strb	r3, [r7, #19]
        break;
 80052fa:	e006      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80052fc:	4b7b      	ldr	r3, [pc, #492]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005308:	d1ee      	bne.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800530a:	7cfb      	ldrb	r3, [r7, #19]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d13c      	bne.n	800538a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8005310:	f7ff ffa7 	bl	8005262 <LL_RCC_GetRTCClockSource>
 8005314:	4602      	mov	r2, r0
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800531a:	429a      	cmp	r2, r3
 800531c:	d00f      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800531e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800532a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800532c:	f7ff ffa5 	bl	800527a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005330:	f7ff ffb3 	bl	800529a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005334:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	2b00      	cmp	r3, #0
 8005346:	d014      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005348:	f7fd f95e 	bl	8002608 <HAL_GetTick>
 800534c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800534e:	e00b      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005350:	f7fd f95a 	bl	8002608 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	f241 3288 	movw	r2, #5000	; 0x1388
 800535e:	4293      	cmp	r3, r2
 8005360:	d902      	bls.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	74fb      	strb	r3, [r7, #19]
            break;
 8005366:	e004      	b.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8005368:	f7ff feb4 	bl	80050d4 <LL_RCC_LSE_IsReady>
 800536c:	4603      	mov	r3, r0
 800536e:	2b01      	cmp	r3, #1
 8005370:	d1ee      	bne.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8005372:	7cfb      	ldrb	r3, [r7, #19]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d105      	bne.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800537c:	4618      	mov	r0, r3
 800537e:	f7ff ff5b 	bl	8005238 <LL_RCC_SetRTCClockSource>
 8005382:	e004      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005384:	7cfb      	ldrb	r3, [r7, #19]
 8005386:	74bb      	strb	r3, [r7, #18]
 8005388:	e001      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800538a:	7cfb      	ldrb	r3, [r7, #19]
 800538c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b00      	cmp	r3, #0
 8005398:	d004      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	4618      	mov	r0, r3
 80053a0:	f7ff fea9 	bl	80050f6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0302 	and.w	r3, r3, #2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d004      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	4618      	mov	r0, r3
 80053b6:	f7ff fe9e 	bl	80050f6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0320 	and.w	r3, r3, #32
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d004      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7ff fec0 	bl	8005150 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d004      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7ff fee6 	bl	80051b2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d004      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7ff fedb 	bl	80051b2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005404:	2b00      	cmp	r3, #0
 8005406:	d004      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540c:	4618      	mov	r0, r3
 800540e:	f7ff fed0 	bl	80051b2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541a:	2b00      	cmp	r3, #0
 800541c:	d004      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	4618      	mov	r0, r3
 8005424:	f7ff fea9 	bl	800517a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005430:	2b00      	cmp	r3, #0
 8005432:	d004      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	4618      	mov	r0, r3
 800543a:	f7ff fe9e 	bl	800517a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005446:	2b00      	cmp	r3, #0
 8005448:	d004      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	69db      	ldr	r3, [r3, #28]
 800544e:	4618      	mov	r0, r3
 8005450:	f7ff fe93 	bl	800517a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0310 	and.w	r3, r3, #16
 800545c:	2b00      	cmp	r3, #0
 800545e:	d011      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	4618      	mov	r0, r3
 8005466:	f7ff fe5e 	bl	8005126 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005472:	d107      	bne.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8005474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800547e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005482:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d010      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005494:	4618      	mov	r0, r3
 8005496:	f7ff fea5 	bl	80051e4 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d107      	bne.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80054a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054b0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d011      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7ff fea3 	bl	800520e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054d0:	d107      	bne.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80054d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054e0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80054e2:	7cbb      	ldrb	r3, [r7, #18]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3718      	adds	r7, #24
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	58000400 	.word	0x58000400

080054f0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d071      	beq.n	80055e6 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d106      	bne.n	800551c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7fc fddc 	bl	80020d4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2202      	movs	r2, #2
 8005520:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005524:	4b32      	ldr	r3, [pc, #200]	; (80055f0 <HAL_RTC_Init+0x100>)
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	f003 0310 	and.w	r3, r3, #16
 800552c:	2b10      	cmp	r3, #16
 800552e:	d051      	beq.n	80055d4 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005530:	4b2f      	ldr	r3, [pc, #188]	; (80055f0 <HAL_RTC_Init+0x100>)
 8005532:	22ca      	movs	r2, #202	; 0xca
 8005534:	625a      	str	r2, [r3, #36]	; 0x24
 8005536:	4b2e      	ldr	r3, [pc, #184]	; (80055f0 <HAL_RTC_Init+0x100>)
 8005538:	2253      	movs	r2, #83	; 0x53
 800553a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 faa3 	bl	8005a88 <RTC_EnterInitMode>
 8005542:	4603      	mov	r3, r0
 8005544:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8005546:	7bfb      	ldrb	r3, [r7, #15]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d13f      	bne.n	80055cc <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800554c:	4b28      	ldr	r3, [pc, #160]	; (80055f0 <HAL_RTC_Init+0x100>)
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	4a27      	ldr	r2, [pc, #156]	; (80055f0 <HAL_RTC_Init+0x100>)
 8005552:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8005556:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800555a:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800555c:	4b24      	ldr	r3, [pc, #144]	; (80055f0 <HAL_RTC_Init+0x100>)
 800555e:	699a      	ldr	r2, [r3, #24]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6859      	ldr	r1, [r3, #4]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	4319      	orrs	r1, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	430b      	orrs	r3, r1
 8005570:	491f      	ldr	r1, [pc, #124]	; (80055f0 <HAL_RTC_Init+0x100>)
 8005572:	4313      	orrs	r3, r2
 8005574:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	68da      	ldr	r2, [r3, #12]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	041b      	lsls	r3, r3, #16
 8005580:	491b      	ldr	r1, [pc, #108]	; (80055f0 <HAL_RTC_Init+0x100>)
 8005582:	4313      	orrs	r3, r2
 8005584:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8005586:	4b1a      	ldr	r3, [pc, #104]	; (80055f0 <HAL_RTC_Init+0x100>)
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005596:	430b      	orrs	r3, r1
 8005598:	4915      	ldr	r1, [pc, #84]	; (80055f0 <HAL_RTC_Init+0x100>)
 800559a:	4313      	orrs	r3, r2
 800559c:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 faa6 	bl	8005af0 <RTC_ExitInitMode>
 80055a4:	4603      	mov	r3, r0
 80055a6:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 80055a8:	7bfb      	ldrb	r3, [r7, #15]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10e      	bne.n	80055cc <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 80055ae:	4b10      	ldr	r3, [pc, #64]	; (80055f0 <HAL_RTC_Init+0x100>)
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a19      	ldr	r1, [r3, #32]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	4319      	orrs	r1, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	430b      	orrs	r3, r1
 80055c6:	490a      	ldr	r1, [pc, #40]	; (80055f0 <HAL_RTC_Init+0x100>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055cc:	4b08      	ldr	r3, [pc, #32]	; (80055f0 <HAL_RTC_Init+0x100>)
 80055ce:	22ff      	movs	r2, #255	; 0xff
 80055d0:	625a      	str	r2, [r3, #36]	; 0x24
 80055d2:	e001      	b.n	80055d8 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 80055d4:	2300      	movs	r3, #0
 80055d6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80055d8:	7bfb      	ldrb	r3, [r7, #15]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d103      	bne.n	80055e6 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 80055e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	40002800 	.word	0x40002800

080055f4 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80055f4:	b590      	push	{r4, r7, lr}
 80055f6:	b087      	sub	sp, #28
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005606:	2b01      	cmp	r3, #1
 8005608:	d101      	bne.n	800560e <HAL_RTC_SetTime+0x1a>
 800560a:	2302      	movs	r3, #2
 800560c:	e088      	b.n	8005720 <HAL_RTC_SetTime+0x12c>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2202      	movs	r2, #2
 800561a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800561e:	4b42      	ldr	r3, [pc, #264]	; (8005728 <HAL_RTC_SetTime+0x134>)
 8005620:	22ca      	movs	r2, #202	; 0xca
 8005622:	625a      	str	r2, [r3, #36]	; 0x24
 8005624:	4b40      	ldr	r3, [pc, #256]	; (8005728 <HAL_RTC_SetTime+0x134>)
 8005626:	2253      	movs	r2, #83	; 0x53
 8005628:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f000 fa2c 	bl	8005a88 <RTC_EnterInitMode>
 8005630:	4603      	mov	r3, r0
 8005632:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005634:	7cfb      	ldrb	r3, [r7, #19]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d15e      	bne.n	80056f8 <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800563a:	4b3b      	ldr	r3, [pc, #236]	; (8005728 <HAL_RTC_SetTime+0x134>)
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005646:	d057      	beq.n	80056f8 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d125      	bne.n	800569a <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800564e:	4b36      	ldr	r3, [pc, #216]	; (8005728 <HAL_RTC_SetTime+0x134>)
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005656:	2b00      	cmp	r3, #0
 8005658:	d102      	bne.n	8005660 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	2200      	movs	r2, #0
 800565e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	4618      	mov	r0, r3
 8005666:	f000 fa81 	bl	8005b6c <RTC_ByteToBcd2>
 800566a:	4603      	mov	r3, r0
 800566c:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	785b      	ldrb	r3, [r3, #1]
 8005672:	4618      	mov	r0, r3
 8005674:	f000 fa7a 	bl	8005b6c <RTC_ByteToBcd2>
 8005678:	4603      	mov	r3, r0
 800567a:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800567c:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	789b      	ldrb	r3, [r3, #2]
 8005682:	4618      	mov	r0, r3
 8005684:	f000 fa72 	bl	8005b6c <RTC_ByteToBcd2>
 8005688:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800568a:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	78db      	ldrb	r3, [r3, #3]
 8005692:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005694:	4313      	orrs	r3, r2
 8005696:	617b      	str	r3, [r7, #20]
 8005698:	e017      	b.n	80056ca <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800569a:	4b23      	ldr	r3, [pc, #140]	; (8005728 <HAL_RTC_SetTime+0x134>)
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d102      	bne.n	80056ac <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	2200      	movs	r2, #0
 80056aa:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	785b      	ldrb	r3, [r3, #1]
 80056b6:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80056b8:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80056ba:	68ba      	ldr	r2, [r7, #8]
 80056bc:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80056be:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	78db      	ldrb	r3, [r3, #3]
 80056c4:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80056c6:	4313      	orrs	r3, r2
 80056c8:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 80056ca:	4a17      	ldr	r2, [pc, #92]	; (8005728 <HAL_RTC_SetTime+0x134>)
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80056d2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80056d6:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 80056d8:	4b13      	ldr	r3, [pc, #76]	; (8005728 <HAL_RTC_SetTime+0x134>)
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	4a12      	ldr	r2, [pc, #72]	; (8005728 <HAL_RTC_SetTime+0x134>)
 80056de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056e2:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 80056e4:	4b10      	ldr	r3, [pc, #64]	; (8005728 <HAL_RTC_SetTime+0x134>)
 80056e6:	699a      	ldr	r2, [r3, #24]
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	68d9      	ldr	r1, [r3, #12]
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	430b      	orrs	r3, r1
 80056f2:	490d      	ldr	r1, [pc, #52]	; (8005728 <HAL_RTC_SetTime+0x134>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 f9f9 	bl	8005af0 <RTC_ExitInitMode>
 80056fe:	4603      	mov	r3, r0
 8005700:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005702:	4b09      	ldr	r3, [pc, #36]	; (8005728 <HAL_RTC_SetTime+0x134>)
 8005704:	22ff      	movs	r2, #255	; 0xff
 8005706:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005708:	7cfb      	ldrb	r3, [r7, #19]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d103      	bne.n	8005716 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 800571e:	7cfb      	ldrb	r3, [r7, #19]
}
 8005720:	4618      	mov	r0, r3
 8005722:	371c      	adds	r7, #28
 8005724:	46bd      	mov	sp, r7
 8005726:	bd90      	pop	{r4, r7, pc}
 8005728:	40002800 	.word	0x40002800

0800572c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800572c:	b590      	push	{r4, r7, lr}
 800572e:	b087      	sub	sp, #28
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800573e:	2b01      	cmp	r3, #1
 8005740:	d101      	bne.n	8005746 <HAL_RTC_SetDate+0x1a>
 8005742:	2302      	movs	r3, #2
 8005744:	e071      	b.n	800582a <HAL_RTC_SetDate+0xfe>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2202      	movs	r2, #2
 8005752:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10e      	bne.n	800577a <HAL_RTC_SetDate+0x4e>
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	785b      	ldrb	r3, [r3, #1]
 8005760:	f003 0310 	and.w	r3, r3, #16
 8005764:	2b00      	cmp	r3, #0
 8005766:	d008      	beq.n	800577a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	785b      	ldrb	r3, [r3, #1]
 800576c:	f023 0310 	bic.w	r3, r3, #16
 8005770:	b2db      	uxtb	r3, r3
 8005772:	330a      	adds	r3, #10
 8005774:	b2da      	uxtb	r2, r3
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d11c      	bne.n	80057ba <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	78db      	ldrb	r3, [r3, #3]
 8005784:	4618      	mov	r0, r3
 8005786:	f000 f9f1 	bl	8005b6c <RTC_ByteToBcd2>
 800578a:	4603      	mov	r3, r0
 800578c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	785b      	ldrb	r3, [r3, #1]
 8005792:	4618      	mov	r0, r3
 8005794:	f000 f9ea 	bl	8005b6c <RTC_ByteToBcd2>
 8005798:	4603      	mov	r3, r0
 800579a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800579c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	789b      	ldrb	r3, [r3, #2]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 f9e2 	bl	8005b6c <RTC_ByteToBcd2>
 80057a8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80057aa:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80057b4:	4313      	orrs	r3, r2
 80057b6:	617b      	str	r3, [r7, #20]
 80057b8:	e00e      	b.n	80057d8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	78db      	ldrb	r3, [r3, #3]
 80057be:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	785b      	ldrb	r3, [r3, #1]
 80057c4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80057c6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80057cc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80057d4:	4313      	orrs	r3, r2
 80057d6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057d8:	4b16      	ldr	r3, [pc, #88]	; (8005834 <HAL_RTC_SetDate+0x108>)
 80057da:	22ca      	movs	r2, #202	; 0xca
 80057dc:	625a      	str	r2, [r3, #36]	; 0x24
 80057de:	4b15      	ldr	r3, [pc, #84]	; (8005834 <HAL_RTC_SetDate+0x108>)
 80057e0:	2253      	movs	r2, #83	; 0x53
 80057e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f000 f94f 	bl	8005a88 <RTC_EnterInitMode>
 80057ea:	4603      	mov	r3, r0
 80057ec:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80057ee:	7cfb      	ldrb	r3, [r7, #19]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10b      	bne.n	800580c <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 80057f4:	4a0f      	ldr	r2, [pc, #60]	; (8005834 <HAL_RTC_SetDate+0x108>)
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80057fc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005800:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f000 f974 	bl	8005af0 <RTC_ExitInitMode>
 8005808:	4603      	mov	r3, r0
 800580a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800580c:	4b09      	ldr	r3, [pc, #36]	; (8005834 <HAL_RTC_SetDate+0x108>)
 800580e:	22ff      	movs	r2, #255	; 0xff
 8005810:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005812:	7cfb      	ldrb	r3, [r7, #19]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d103      	bne.n	8005820 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8005828:	7cfb      	ldrb	r3, [r7, #19]
}
 800582a:	4618      	mov	r0, r3
 800582c:	371c      	adds	r7, #28
 800582e:	46bd      	mov	sp, r7
 8005830:	bd90      	pop	{r4, r7, pc}
 8005832:	bf00      	nop
 8005834:	40002800 	.word	0x40002800

08005838 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005838:	b590      	push	{r4, r7, lr}
 800583a:	b087      	sub	sp, #28
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8005844:	2300      	movs	r3, #0
 8005846:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  __HAL_LOCK(hrtc);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800584e:	2b01      	cmp	r3, #1
 8005850:	d101      	bne.n	8005856 <HAL_RTC_SetAlarm+0x1e>
 8005852:	2302      	movs	r3, #2
 8005854:	e0eb      	b.n	8005a2e <HAL_RTC_SetAlarm+0x1f6>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2202      	movs	r2, #2
 8005862:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8005866:	4b74      	ldr	r3, [pc, #464]	; (8005a38 <HAL_RTC_SetAlarm+0x200>)
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800586e:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005876:	d06a      	beq.n	800594e <HAL_RTC_SetAlarm+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d13a      	bne.n	80058f4 <HAL_RTC_SetAlarm+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800587e:	4b6e      	ldr	r3, [pc, #440]	; (8005a38 <HAL_RTC_SetAlarm+0x200>)
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005886:	2b00      	cmp	r3, #0
 8005888:	d102      	bne.n	8005890 <HAL_RTC_SetAlarm+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	2200      	movs	r2, #0
 800588e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	4618      	mov	r0, r3
 800589e:	f000 f965 	bl	8005b6c <RTC_ByteToBcd2>
 80058a2:	4603      	mov	r3, r0
 80058a4:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	785b      	ldrb	r3, [r3, #1]
 80058aa:	4618      	mov	r0, r3
 80058ac:	f000 f95e 	bl	8005b6c <RTC_ByteToBcd2>
 80058b0:	4603      	mov	r3, r0
 80058b2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80058b4:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	789b      	ldrb	r3, [r3, #2]
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 f956 	bl	8005b6c <RTC_ByteToBcd2>
 80058c0:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80058c2:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	78db      	ldrb	r3, [r3, #3]
 80058ca:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80058cc:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80058d6:	4618      	mov	r0, r3
 80058d8:	f000 f948 	bl	8005b6c <RTC_ByteToBcd2>
 80058dc:	4603      	mov	r3, r0
 80058de:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80058e0:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80058e8:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80058ee:	4313      	orrs	r3, r2
 80058f0:	617b      	str	r3, [r7, #20]
 80058f2:	e02c      	b.n	800594e <HAL_RTC_SetAlarm+0x116>
    }
    else /* format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 80058fc:	d00d      	beq.n	800591a <HAL_RTC_SetAlarm+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005906:	d008      	beq.n	800591a <HAL_RTC_SetAlarm+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005908:	4b4b      	ldr	r3, [pc, #300]	; (8005a38 <HAL_RTC_SetAlarm+0x200>)
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005910:	2b00      	cmp	r3, #0
 8005912:	d102      	bne.n	800591a <HAL_RTC_SetAlarm+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	2200      	movs	r2, #0
 8005918:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	785b      	ldrb	r3, [r3, #1]
 8005924:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005926:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800592c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	78db      	ldrb	r3, [r3, #3]
 8005932:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005934:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800593c:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800593e:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005944:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800594a:	4313      	orrs	r3, r2
 800594c:	617b      	str	r3, [r7, #20]
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800594e:	4b3a      	ldr	r3, [pc, #232]	; (8005a38 <HAL_RTC_SetAlarm+0x200>)
 8005950:	22ca      	movs	r2, #202	; 0xca
 8005952:	625a      	str	r2, [r3, #36]	; 0x24
 8005954:	4b38      	ldr	r3, [pc, #224]	; (8005a38 <HAL_RTC_SetAlarm+0x200>)
 8005956:	2253      	movs	r2, #83	; 0x53
 8005958:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005962:	d12c      	bne.n	80059be <HAL_RTC_SetAlarm+0x186>
  {
    /* Disable the Alarm A interrupt */
    /* In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRAE | RTC_CR_ALRAIE));
 8005964:	4b34      	ldr	r3, [pc, #208]	; (8005a38 <HAL_RTC_SetAlarm+0x200>)
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	4a33      	ldr	r2, [pc, #204]	; (8005a38 <HAL_RTC_SetAlarm+0x200>)
 800596a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800596e:	6193      	str	r3, [r2, #24]

    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005970:	4b31      	ldr	r3, [pc, #196]	; (8005a38 <HAL_RTC_SetAlarm+0x200>)
 8005972:	2201      	movs	r2, #1
 8005974:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800597c:	d107      	bne.n	800598e <HAL_RTC_SetAlarm+0x156>
    {
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	699a      	ldr	r2, [r3, #24]
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	69db      	ldr	r3, [r3, #28]
 8005986:	492c      	ldr	r1, [pc, #176]	; (8005a38 <HAL_RTC_SetAlarm+0x200>)
 8005988:	4313      	orrs	r3, r2
 800598a:	644b      	str	r3, [r1, #68]	; 0x44
 800598c:	e006      	b.n	800599c <HAL_RTC_SetAlarm+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800598e:	4a2a      	ldr	r2, [pc, #168]	; (8005a38 <HAL_RTC_SetAlarm+0x200>)
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8005994:	4a28      	ldr	r2, [pc, #160]	; (8005a38 <HAL_RTC_SetAlarm+0x200>)
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 800599c:	4a26      	ldr	r2, [pc, #152]	; (8005a38 <HAL_RTC_SetAlarm+0x200>)
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a8:	f043 0201 	orr.w	r2, r3, #1
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm state: Enable Alarm */
    SET_BIT(RTC->CR, RTC_CR_ALRAE);
 80059b0:	4b21      	ldr	r3, [pc, #132]	; (8005a38 <HAL_RTC_SetAlarm+0x200>)
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	4a20      	ldr	r2, [pc, #128]	; (8005a38 <HAL_RTC_SetAlarm+0x200>)
 80059b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059ba:	6193      	str	r3, [r2, #24]
 80059bc:	e02b      	b.n	8005a16 <HAL_RTC_SetAlarm+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    /* In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRBE | RTC_CR_ALRBIE));
 80059be:	4b1e      	ldr	r3, [pc, #120]	; (8005a38 <HAL_RTC_SetAlarm+0x200>)
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	4a1d      	ldr	r2, [pc, #116]	; (8005a38 <HAL_RTC_SetAlarm+0x200>)
 80059c4:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80059c8:	6193      	str	r3, [r2, #24]

    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80059ca:	4b1b      	ldr	r3, [pc, #108]	; (8005a38 <HAL_RTC_SetAlarm+0x200>)
 80059cc:	2202      	movs	r2, #2
 80059ce:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059d6:	d107      	bne.n	80059e8 <HAL_RTC_SetAlarm+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	699a      	ldr	r2, [r3, #24]
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	69db      	ldr	r3, [r3, #28]
 80059e0:	4915      	ldr	r1, [pc, #84]	; (8005a38 <HAL_RTC_SetAlarm+0x200>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80059e6:	e006      	b.n	80059f6 <HAL_RTC_SetAlarm+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80059e8:	4a13      	ldr	r2, [pc, #76]	; (8005a38 <HAL_RTC_SetAlarm+0x200>)
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80059ee:	4a12      	ldr	r2, [pc, #72]	; (8005a38 <HAL_RTC_SetAlarm+0x200>)
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80059f6:	4a10      	ldr	r2, [pc, #64]	; (8005a38 <HAL_RTC_SetAlarm+0x200>)
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a02:	f043 0202 	orr.w	r2, r3, #2
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm state: Enable Alarm */
    SET_BIT(RTC->CR, RTC_CR_ALRBE);
 8005a0a:	4b0b      	ldr	r3, [pc, #44]	; (8005a38 <HAL_RTC_SetAlarm+0x200>)
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	4a0a      	ldr	r2, [pc, #40]	; (8005a38 <HAL_RTC_SetAlarm+0x200>)
 8005a10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a14:	6193      	str	r3, [r2, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a16:	4b08      	ldr	r3, [pc, #32]	; (8005a38 <HAL_RTC_SetAlarm+0x200>)
 8005a18:	22ff      	movs	r2, #255	; 0xff
 8005a1a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	371c      	adds	r7, #28
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd90      	pop	{r4, r7, pc}
 8005a36:	bf00      	nop
 8005a38:	40002800 	.word	0x40002800

08005a3c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8005a44:	4b0f      	ldr	r3, [pc, #60]	; (8005a84 <HAL_RTC_WaitForSynchro+0x48>)
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	4a0e      	ldr	r2, [pc, #56]	; (8005a84 <HAL_RTC_WaitForSynchro+0x48>)
 8005a4a:	f023 0320 	bic.w	r3, r3, #32
 8005a4e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8005a50:	f7fc fdda 	bl	8002608 <HAL_GetTick>
 8005a54:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005a56:	e009      	b.n	8005a6c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005a58:	f7fc fdd6 	bl	8002608 <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a66:	d901      	bls.n	8005a6c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e006      	b.n	8005a7a <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005a6c:	4b05      	ldr	r3, [pc, #20]	; (8005a84 <HAL_RTC_WaitForSynchro+0x48>)
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	f003 0320 	and.w	r3, r3, #32
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d0ef      	beq.n	8005a58 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	40002800 	.word	0x40002800

08005a88 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a90:	2300      	movs	r3, #0
 8005a92:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8005a94:	4b15      	ldr	r3, [pc, #84]	; (8005aec <RTC_EnterInitMode+0x64>)
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d120      	bne.n	8005ae2 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005aa0:	4b12      	ldr	r3, [pc, #72]	; (8005aec <RTC_EnterInitMode+0x64>)
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	4a11      	ldr	r2, [pc, #68]	; (8005aec <RTC_EnterInitMode+0x64>)
 8005aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aaa:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8005aac:	f7fc fdac 	bl	8002608 <HAL_GetTick>
 8005ab0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005ab2:	e00d      	b.n	8005ad0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005ab4:	f7fc fda8 	bl	8002608 <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ac2:	d905      	bls.n	8005ad0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2203      	movs	r2, #3
 8005acc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005ad0:	4b06      	ldr	r3, [pc, #24]	; (8005aec <RTC_EnterInitMode+0x64>)
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d102      	bne.n	8005ae2 <RTC_EnterInitMode+0x5a>
 8005adc:	7bfb      	ldrb	r3, [r7, #15]
 8005ade:	2b03      	cmp	r3, #3
 8005ae0:	d1e8      	bne.n	8005ab4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8005ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3710      	adds	r7, #16
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	40002800 	.word	0x40002800

08005af0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005af8:	2300      	movs	r3, #0
 8005afa:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005afc:	4b1a      	ldr	r3, [pc, #104]	; (8005b68 <RTC_ExitInitMode+0x78>)
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	4a19      	ldr	r2, [pc, #100]	; (8005b68 <RTC_ExitInitMode+0x78>)
 8005b02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b06:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005b08:	4b17      	ldr	r3, [pc, #92]	; (8005b68 <RTC_ExitInitMode+0x78>)
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	f003 0320 	and.w	r3, r3, #32
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d10c      	bne.n	8005b2e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f7ff ff91 	bl	8005a3c <HAL_RTC_WaitForSynchro>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d01e      	beq.n	8005b5e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2203      	movs	r2, #3
 8005b24:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	73fb      	strb	r3, [r7, #15]
 8005b2c:	e017      	b.n	8005b5e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005b2e:	4b0e      	ldr	r3, [pc, #56]	; (8005b68 <RTC_ExitInitMode+0x78>)
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	4a0d      	ldr	r2, [pc, #52]	; (8005b68 <RTC_ExitInitMode+0x78>)
 8005b34:	f023 0320 	bic.w	r3, r3, #32
 8005b38:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f7ff ff7e 	bl	8005a3c <HAL_RTC_WaitForSynchro>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d005      	beq.n	8005b52 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2203      	movs	r2, #3
 8005b4a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005b52:	4b05      	ldr	r3, [pc, #20]	; (8005b68 <RTC_ExitInitMode+0x78>)
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	4a04      	ldr	r2, [pc, #16]	; (8005b68 <RTC_ExitInitMode+0x78>)
 8005b58:	f043 0320 	orr.w	r3, r3, #32
 8005b5c:	6193      	str	r3, [r2, #24]
  }

  return status;
 8005b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	40002800 	.word	0x40002800

08005b6c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	4603      	mov	r3, r0
 8005b74:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005b76:	2300      	movs	r3, #0
 8005b78:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8005b7a:	79fb      	ldrb	r3, [r7, #7]
 8005b7c:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8005b7e:	e005      	b.n	8005b8c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	3301      	adds	r3, #1
 8005b84:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8005b86:	7afb      	ldrb	r3, [r7, #11]
 8005b88:	3b0a      	subs	r3, #10
 8005b8a:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8005b8c:	7afb      	ldrb	r3, [r7, #11]
 8005b8e:	2b09      	cmp	r3, #9
 8005b90:	d8f6      	bhi.n	8005b80 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	011b      	lsls	r3, r3, #4
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	7afb      	ldrb	r3, [r7, #11]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	b2db      	uxtb	r3, r3
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3714      	adds	r7, #20
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bc80      	pop	{r7}
 8005ba8:	4770      	bx	lr

08005baa <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b084      	sub	sp, #16
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d101      	bne.n	8005bbc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e0c6      	b.n	8005d4a <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d108      	bne.n	8005bd6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bcc:	d009      	beq.n	8005be2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	61da      	str	r2, [r3, #28]
 8005bd4:	e005      	b.n	8005be2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d106      	bne.n	8005bfc <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f7fc fa98 	bl	800212c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2202      	movs	r2, #2
 8005c00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c12:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c1c:	d902      	bls.n	8005c24 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	60fb      	str	r3, [r7, #12]
 8005c22:	e002      	b.n	8005c2a <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005c24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c28:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005c32:	d007      	beq.n	8005c44 <HAL_SPI_Init+0x9a>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c3c:	d002      	beq.n	8005c44 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005c54:	431a      	orrs	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	f003 0302 	and.w	r3, r3, #2
 8005c5e:	431a      	orrs	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	695b      	ldr	r3, [r3, #20]
 8005c64:	f003 0301 	and.w	r3, r3, #1
 8005c68:	431a      	orrs	r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c72:	431a      	orrs	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	69db      	ldr	r3, [r3, #28]
 8005c78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c7c:	431a      	orrs	r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c86:	ea42 0103 	orr.w	r1, r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c8e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ca2:	d11b      	bne.n	8005cdc <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d10b      	bne.n	8005cc4 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cb4:	d903      	bls.n	8005cbe <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2202      	movs	r2, #2
 8005cba:	631a      	str	r2, [r3, #48]	; 0x30
 8005cbc:	e002      	b.n	8005cc4 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d107      	bne.n	8005cdc <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cda:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	0c1b      	lsrs	r3, r3, #16
 8005ce2:	f003 0204 	and.w	r2, r3, #4
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cea:	f003 0310 	and.w	r3, r3, #16
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf4:	f003 0308 	and.w	r3, r3, #8
 8005cf8:	431a      	orrs	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005d02:	ea42 0103 	orr.w	r1, r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	430a      	orrs	r2, r1
 8005d12:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d1c:	d105      	bne.n	8005d2a <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	b292      	uxth	r2, r2
 8005d28:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	69da      	ldr	r2, [r3, #28]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b082      	sub	sp, #8
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d101      	bne.n	8005d64 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e049      	b.n	8005df8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d106      	bne.n	8005d7e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f7fc fa33 	bl	80021e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2202      	movs	r2, #2
 8005d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	3304      	adds	r3, #4
 8005d8e:	4619      	mov	r1, r3
 8005d90:	4610      	mov	r0, r2
 8005d92:	f000 f9cd 	bl	8006130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3708      	adds	r7, #8
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d001      	beq.n	8005e18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e036      	b.n	8005e86 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2202      	movs	r2, #2
 8005e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68da      	ldr	r2, [r3, #12]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f042 0201 	orr.w	r2, r2, #1
 8005e2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a16      	ldr	r2, [pc, #88]	; (8005e90 <HAL_TIM_Base_Start_IT+0x90>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d004      	beq.n	8005e44 <HAL_TIM_Base_Start_IT+0x44>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e42:	d115      	bne.n	8005e70 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	689a      	ldr	r2, [r3, #8]
 8005e4a:	4b12      	ldr	r3, [pc, #72]	; (8005e94 <HAL_TIM_Base_Start_IT+0x94>)
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2b06      	cmp	r3, #6
 8005e54:	d015      	beq.n	8005e82 <HAL_TIM_Base_Start_IT+0x82>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e5c:	d011      	beq.n	8005e82 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f042 0201 	orr.w	r2, r2, #1
 8005e6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e6e:	e008      	b.n	8005e82 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f042 0201 	orr.w	r2, r2, #1
 8005e7e:	601a      	str	r2, [r3, #0]
 8005e80:	e000      	b.n	8005e84 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bc80      	pop	{r7}
 8005e8e:	4770      	bx	lr
 8005e90:	40012c00 	.word	0x40012c00
 8005e94:	00010007 	.word	0x00010007

08005e98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d122      	bne.n	8005ef4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	f003 0302 	and.w	r3, r3, #2
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d11b      	bne.n	8005ef4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f06f 0202 	mvn.w	r2, #2
 8005ec4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	f003 0303 	and.w	r3, r3, #3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d003      	beq.n	8005ee2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f90d 	bl	80060fa <HAL_TIM_IC_CaptureCallback>
 8005ee0:	e005      	b.n	8005eee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f900 	bl	80060e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 f90f 	bl	800610c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	f003 0304 	and.w	r3, r3, #4
 8005efe:	2b04      	cmp	r3, #4
 8005f00:	d122      	bne.n	8005f48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	f003 0304 	and.w	r3, r3, #4
 8005f0c:	2b04      	cmp	r3, #4
 8005f0e:	d11b      	bne.n	8005f48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f06f 0204 	mvn.w	r2, #4
 8005f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2202      	movs	r2, #2
 8005f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d003      	beq.n	8005f36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f8e3 	bl	80060fa <HAL_TIM_IC_CaptureCallback>
 8005f34:	e005      	b.n	8005f42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f8d6 	bl	80060e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 f8e5 	bl	800610c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	f003 0308 	and.w	r3, r3, #8
 8005f52:	2b08      	cmp	r3, #8
 8005f54:	d122      	bne.n	8005f9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	f003 0308 	and.w	r3, r3, #8
 8005f60:	2b08      	cmp	r3, #8
 8005f62:	d11b      	bne.n	8005f9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f06f 0208 	mvn.w	r2, #8
 8005f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2204      	movs	r2, #4
 8005f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	f003 0303 	and.w	r3, r3, #3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d003      	beq.n	8005f8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 f8b9 	bl	80060fa <HAL_TIM_IC_CaptureCallback>
 8005f88:	e005      	b.n	8005f96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f8ac 	bl	80060e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 f8bb 	bl	800610c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	f003 0310 	and.w	r3, r3, #16
 8005fa6:	2b10      	cmp	r3, #16
 8005fa8:	d122      	bne.n	8005ff0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	f003 0310 	and.w	r3, r3, #16
 8005fb4:	2b10      	cmp	r3, #16
 8005fb6:	d11b      	bne.n	8005ff0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f06f 0210 	mvn.w	r2, #16
 8005fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2208      	movs	r2, #8
 8005fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f88f 	bl	80060fa <HAL_TIM_IC_CaptureCallback>
 8005fdc:	e005      	b.n	8005fea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f882 	bl	80060e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 f891 	bl	800610c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d10e      	bne.n	800601c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	f003 0301 	and.w	r3, r3, #1
 8006008:	2b01      	cmp	r3, #1
 800600a:	d107      	bne.n	800601c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f06f 0201 	mvn.w	r2, #1
 8006014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f85d 	bl	80060d6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006026:	2b80      	cmp	r3, #128	; 0x80
 8006028:	d10e      	bne.n	8006048 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006034:	2b80      	cmp	r3, #128	; 0x80
 8006036:	d107      	bne.n	8006048 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 f8df 	bl	8006206 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006056:	d10e      	bne.n	8006076 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006062:	2b80      	cmp	r3, #128	; 0x80
 8006064:	d107      	bne.n	8006076 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800606e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 f8d1 	bl	8006218 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006080:	2b40      	cmp	r3, #64	; 0x40
 8006082:	d10e      	bne.n	80060a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800608e:	2b40      	cmp	r3, #64	; 0x40
 8006090:	d107      	bne.n	80060a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800609a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 f83e 	bl	800611e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	f003 0320 	and.w	r3, r3, #32
 80060ac:	2b20      	cmp	r3, #32
 80060ae:	d10e      	bne.n	80060ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	f003 0320 	and.w	r3, r3, #32
 80060ba:	2b20      	cmp	r3, #32
 80060bc:	d107      	bne.n	80060ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f06f 0220 	mvn.w	r2, #32
 80060c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 f893 	bl	80061f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060ce:	bf00      	nop
 80060d0:	3708      	adds	r7, #8
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060d6:	b480      	push	{r7}
 80060d8:	b083      	sub	sp, #12
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80060de:	bf00      	nop
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bc80      	pop	{r7}
 80060e6:	4770      	bx	lr

080060e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bc80      	pop	{r7}
 80060f8:	4770      	bx	lr

080060fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060fa:	b480      	push	{r7}
 80060fc:	b083      	sub	sp, #12
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006102:	bf00      	nop
 8006104:	370c      	adds	r7, #12
 8006106:	46bd      	mov	sp, r7
 8006108:	bc80      	pop	{r7}
 800610a:	4770      	bx	lr

0800610c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	bc80      	pop	{r7}
 800611c:	4770      	bx	lr

0800611e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800611e:	b480      	push	{r7}
 8006120:	b083      	sub	sp, #12
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006126:	bf00      	nop
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	bc80      	pop	{r7}
 800612e:	4770      	bx	lr

08006130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a29      	ldr	r2, [pc, #164]	; (80061e8 <TIM_Base_SetConfig+0xb8>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d003      	beq.n	8006150 <TIM_Base_SetConfig+0x20>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800614e:	d108      	bne.n	8006162 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006156:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	4313      	orrs	r3, r2
 8006160:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a20      	ldr	r2, [pc, #128]	; (80061e8 <TIM_Base_SetConfig+0xb8>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d00b      	beq.n	8006182 <TIM_Base_SetConfig+0x52>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006170:	d007      	beq.n	8006182 <TIM_Base_SetConfig+0x52>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a1d      	ldr	r2, [pc, #116]	; (80061ec <TIM_Base_SetConfig+0xbc>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d003      	beq.n	8006182 <TIM_Base_SetConfig+0x52>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a1c      	ldr	r2, [pc, #112]	; (80061f0 <TIM_Base_SetConfig+0xc0>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d108      	bne.n	8006194 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006188:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	4313      	orrs	r3, r2
 8006192:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	4313      	orrs	r3, r2
 80061a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	689a      	ldr	r2, [r3, #8]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a0b      	ldr	r2, [pc, #44]	; (80061e8 <TIM_Base_SetConfig+0xb8>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d007      	beq.n	80061d0 <TIM_Base_SetConfig+0xa0>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a0a      	ldr	r2, [pc, #40]	; (80061ec <TIM_Base_SetConfig+0xbc>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d003      	beq.n	80061d0 <TIM_Base_SetConfig+0xa0>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a09      	ldr	r2, [pc, #36]	; (80061f0 <TIM_Base_SetConfig+0xc0>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d103      	bne.n	80061d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	691a      	ldr	r2, [r3, #16]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	615a      	str	r2, [r3, #20]
}
 80061de:	bf00      	nop
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bc80      	pop	{r7}
 80061e6:	4770      	bx	lr
 80061e8:	40012c00 	.word	0x40012c00
 80061ec:	40014400 	.word	0x40014400
 80061f0:	40014800 	.word	0x40014800

080061f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	bc80      	pop	{r7}
 8006204:	4770      	bx	lr

08006206 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006206:	b480      	push	{r7}
 8006208:	b083      	sub	sp, #12
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800620e:	bf00      	nop
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	bc80      	pop	{r7}
 8006216:	4770      	bx	lr

08006218 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	bc80      	pop	{r7}
 8006228:	4770      	bx	lr

0800622a <LL_RCC_GetUSARTClockSource>:
{
 800622a:	b480      	push	{r7}
 800622c:	b083      	sub	sp, #12
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8006232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006236:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	401a      	ands	r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	041b      	lsls	r3, r3, #16
 8006242:	4313      	orrs	r3, r2
}
 8006244:	4618      	mov	r0, r3
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	bc80      	pop	{r7}
 800624c:	4770      	bx	lr

0800624e <LL_RCC_GetLPUARTClockSource>:
{
 800624e:	b480      	push	{r7}
 8006250:	b083      	sub	sp, #12
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800625a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4013      	ands	r3, r2
}
 8006262:	4618      	mov	r0, r3
 8006264:	370c      	adds	r7, #12
 8006266:	46bd      	mov	sp, r7
 8006268:	bc80      	pop	{r7}
 800626a:	4770      	bx	lr

0800626c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e042      	b.n	8006304 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006284:	2b00      	cmp	r3, #0
 8006286:	d106      	bne.n	8006296 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f7fb fea3 	bl	8001fdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2224      	movs	r2, #36	; 0x24
 800629a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f022 0201 	bic.w	r2, r2, #1
 80062ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fd5c 	bl	8006d6c <UART_SetConfig>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d101      	bne.n	80062be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e022      	b.n	8006304 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d002      	beq.n	80062cc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 ffc4 	bl	8007254 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	685a      	ldr	r2, [r3, #4]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	689a      	ldr	r2, [r3, #8]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f042 0201 	orr.w	r2, r2, #1
 80062fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f001 f84a 	bl	8007396 <UART_CheckIdleState>
 8006302:	4603      	mov	r3, r0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3708      	adds	r7, #8
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d101      	bne.n	800631e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e04a      	b.n	80063b4 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006324:	2b00      	cmp	r3, #0
 8006326:	d106      	bne.n	8006336 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f7fb fe53 	bl	8001fdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2224      	movs	r2, #36	; 0x24
 800633a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f022 0201 	bic.w	r2, r2, #1
 800634c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 fd0c 	bl	8006d6c <UART_SetConfig>
 8006354:	4603      	mov	r3, r0
 8006356:	2b01      	cmp	r3, #1
 8006358:	d101      	bne.n	800635e <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e02a      	b.n	80063b4 <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006362:	2b00      	cmp	r3, #0
 8006364:	d002      	beq.n	800636c <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 ff74 	bl	8007254 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	685a      	ldr	r2, [r3, #4]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800637a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	689a      	ldr	r2, [r3, #8]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800638a:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	689a      	ldr	r2, [r3, #8]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f042 0208 	orr.w	r2, r2, #8
 800639a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f042 0201 	orr.w	r2, r2, #1
 80063aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 fff2 	bl	8007396 <UART_CheckIdleState>
 80063b2:	4603      	mov	r3, r0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3708      	adds	r7, #8
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b08a      	sub	sp, #40	; 0x28
 80063c0:	af02      	add	r7, sp, #8
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	603b      	str	r3, [r7, #0]
 80063c8:	4613      	mov	r3, r2
 80063ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d2:	2b20      	cmp	r3, #32
 80063d4:	d173      	bne.n	80064be <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d002      	beq.n	80063e2 <HAL_UART_Transmit+0x26>
 80063dc:	88fb      	ldrh	r3, [r7, #6]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d101      	bne.n	80063e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e06c      	b.n	80064c0 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2221      	movs	r2, #33	; 0x21
 80063f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063f6:	f7fc f907 	bl	8002608 <HAL_GetTick>
 80063fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	88fa      	ldrh	r2, [r7, #6]
 8006400:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	88fa      	ldrh	r2, [r7, #6]
 8006408:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006414:	d108      	bne.n	8006428 <HAL_UART_Transmit+0x6c>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d104      	bne.n	8006428 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800641e:	2300      	movs	r3, #0
 8006420:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	61bb      	str	r3, [r7, #24]
 8006426:	e003      	b.n	8006430 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800642c:	2300      	movs	r3, #0
 800642e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006430:	e02c      	b.n	800648c <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	9300      	str	r3, [sp, #0]
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	2200      	movs	r2, #0
 800643a:	2180      	movs	r1, #128	; 0x80
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f000 fff8 	bl	8007432 <UART_WaitOnFlagUntilTimeout>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d001      	beq.n	800644c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	e039      	b.n	80064c0 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10b      	bne.n	800646a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	881b      	ldrh	r3, [r3, #0]
 8006456:	461a      	mov	r2, r3
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006460:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	3302      	adds	r3, #2
 8006466:	61bb      	str	r3, [r7, #24]
 8006468:	e007      	b.n	800647a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	781a      	ldrb	r2, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	3301      	adds	r3, #1
 8006478:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006480:	b29b      	uxth	r3, r3
 8006482:	3b01      	subs	r3, #1
 8006484:	b29a      	uxth	r2, r3
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006492:	b29b      	uxth	r3, r3
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1cc      	bne.n	8006432 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	2200      	movs	r2, #0
 80064a0:	2140      	movs	r1, #64	; 0x40
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f000 ffc5 	bl	8007432 <UART_WaitOnFlagUntilTimeout>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e006      	b.n	80064c0 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2220      	movs	r2, #32
 80064b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80064ba:	2300      	movs	r3, #0
 80064bc:	e000      	b.n	80064c0 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 80064be:	2302      	movs	r3, #2
  }
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3720      	adds	r7, #32
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b08a      	sub	sp, #40	; 0x28
 80064cc:	af02      	add	r7, sp, #8
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	603b      	str	r3, [r7, #0]
 80064d4:	4613      	mov	r3, r2
 80064d6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064de:	2b20      	cmp	r3, #32
 80064e0:	f040 80b1 	bne.w	8006646 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d002      	beq.n	80064f0 <HAL_UART_Receive+0x28>
 80064ea:	88fb      	ldrh	r3, [r7, #6]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d101      	bne.n	80064f4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e0a9      	b.n	8006648 <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2222      	movs	r2, #34	; 0x22
 8006500:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800650a:	f7fc f87d 	bl	8002608 <HAL_GetTick>
 800650e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	88fa      	ldrh	r2, [r7, #6]
 8006514:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	88fa      	ldrh	r2, [r7, #6]
 800651c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006528:	d10e      	bne.n	8006548 <HAL_UART_Receive+0x80>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d105      	bne.n	800653e <HAL_UART_Receive+0x76>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006538:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800653c:	e02d      	b.n	800659a <HAL_UART_Receive+0xd2>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	22ff      	movs	r2, #255	; 0xff
 8006542:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006546:	e028      	b.n	800659a <HAL_UART_Receive+0xd2>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10d      	bne.n	800656c <HAL_UART_Receive+0xa4>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d104      	bne.n	8006562 <HAL_UART_Receive+0x9a>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	22ff      	movs	r2, #255	; 0xff
 800655c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006560:	e01b      	b.n	800659a <HAL_UART_Receive+0xd2>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	227f      	movs	r2, #127	; 0x7f
 8006566:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800656a:	e016      	b.n	800659a <HAL_UART_Receive+0xd2>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006574:	d10d      	bne.n	8006592 <HAL_UART_Receive+0xca>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d104      	bne.n	8006588 <HAL_UART_Receive+0xc0>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	227f      	movs	r2, #127	; 0x7f
 8006582:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006586:	e008      	b.n	800659a <HAL_UART_Receive+0xd2>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	223f      	movs	r2, #63	; 0x3f
 800658c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006590:	e003      	b.n	800659a <HAL_UART_Receive+0xd2>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80065a0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065aa:	d108      	bne.n	80065be <HAL_UART_Receive+0xf6>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d104      	bne.n	80065be <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80065b4:	2300      	movs	r3, #0
 80065b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	61bb      	str	r3, [r7, #24]
 80065bc:	e003      	b.n	80065c6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065c2:	2300      	movs	r3, #0
 80065c4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80065c6:	e032      	b.n	800662e <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	9300      	str	r3, [sp, #0]
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	2200      	movs	r2, #0
 80065d0:	2120      	movs	r1, #32
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f000 ff2d 	bl	8007432 <UART_WaitOnFlagUntilTimeout>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e032      	b.n	8006648 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10c      	bne.n	8006602 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	8a7b      	ldrh	r3, [r7, #18]
 80065f2:	4013      	ands	r3, r2
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	3302      	adds	r3, #2
 80065fe:	61bb      	str	r3, [r7, #24]
 8006600:	e00c      	b.n	800661c <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006608:	b2da      	uxtb	r2, r3
 800660a:	8a7b      	ldrh	r3, [r7, #18]
 800660c:	b2db      	uxtb	r3, r3
 800660e:	4013      	ands	r3, r2
 8006610:	b2da      	uxtb	r2, r3
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	3301      	adds	r3, #1
 800661a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006622:	b29b      	uxth	r3, r3
 8006624:	3b01      	subs	r3, #1
 8006626:	b29a      	uxth	r2, r3
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006634:	b29b      	uxth	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1c6      	bne.n	80065c8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2220      	movs	r2, #32
 800663e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8006642:	2300      	movs	r3, #0
 8006644:	e000      	b.n	8006648 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8006646:	2302      	movs	r3, #2
  }
}
 8006648:	4618      	mov	r0, r3
 800664a:	3720      	adds	r7, #32
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b08a      	sub	sp, #40	; 0x28
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	4613      	mov	r3, r2
 800665c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006664:	2b20      	cmp	r3, #32
 8006666:	d137      	bne.n	80066d8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d002      	beq.n	8006674 <HAL_UART_Receive_IT+0x24>
 800666e:	88fb      	ldrh	r3, [r7, #6]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d101      	bne.n	8006678 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e030      	b.n	80066da <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a18      	ldr	r2, [pc, #96]	; (80066e4 <HAL_UART_Receive_IT+0x94>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d01f      	beq.n	80066c8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d018      	beq.n	80066c8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	e853 3f00 	ldrex	r3, [r3]
 80066a2:	613b      	str	r3, [r7, #16]
   return(result);
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80066aa:	627b      	str	r3, [r7, #36]	; 0x24
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	461a      	mov	r2, r3
 80066b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b4:	623b      	str	r3, [r7, #32]
 80066b6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b8:	69f9      	ldr	r1, [r7, #28]
 80066ba:	6a3a      	ldr	r2, [r7, #32]
 80066bc:	e841 2300 	strex	r3, r2, [r1]
 80066c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1e6      	bne.n	8006696 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80066c8:	88fb      	ldrh	r3, [r7, #6]
 80066ca:	461a      	mov	r2, r3
 80066cc:	68b9      	ldr	r1, [r7, #8]
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f000 ff78 	bl	80075c4 <UART_Start_Receive_IT>
 80066d4:	4603      	mov	r3, r0
 80066d6:	e000      	b.n	80066da <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80066d8:	2302      	movs	r3, #2
  }
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3728      	adds	r7, #40	; 0x28
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	40008000 	.word	0x40008000

080066e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b0ba      	sub	sp, #232	; 0xe8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	69db      	ldr	r3, [r3, #28]
 80066f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800670e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006712:	f640 030f 	movw	r3, #2063	; 0x80f
 8006716:	4013      	ands	r3, r2
 8006718:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800671c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006720:	2b00      	cmp	r3, #0
 8006722:	d11b      	bne.n	800675c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006728:	f003 0320 	and.w	r3, r3, #32
 800672c:	2b00      	cmp	r3, #0
 800672e:	d015      	beq.n	800675c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006734:	f003 0320 	and.w	r3, r3, #32
 8006738:	2b00      	cmp	r3, #0
 800673a:	d105      	bne.n	8006748 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800673c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d009      	beq.n	800675c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800674c:	2b00      	cmp	r3, #0
 800674e:	f000 82e3 	beq.w	8006d18 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	4798      	blx	r3
      }
      return;
 800675a:	e2dd      	b.n	8006d18 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800675c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006760:	2b00      	cmp	r3, #0
 8006762:	f000 8123 	beq.w	80069ac <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006766:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800676a:	4b8d      	ldr	r3, [pc, #564]	; (80069a0 <HAL_UART_IRQHandler+0x2b8>)
 800676c:	4013      	ands	r3, r2
 800676e:	2b00      	cmp	r3, #0
 8006770:	d106      	bne.n	8006780 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006772:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006776:	4b8b      	ldr	r3, [pc, #556]	; (80069a4 <HAL_UART_IRQHandler+0x2bc>)
 8006778:	4013      	ands	r3, r2
 800677a:	2b00      	cmp	r3, #0
 800677c:	f000 8116 	beq.w	80069ac <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	2b00      	cmp	r3, #0
 800678a:	d011      	beq.n	80067b0 <HAL_UART_IRQHandler+0xc8>
 800678c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00b      	beq.n	80067b0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2201      	movs	r2, #1
 800679e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067a6:	f043 0201 	orr.w	r2, r3, #1
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067b4:	f003 0302 	and.w	r3, r3, #2
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d011      	beq.n	80067e0 <HAL_UART_IRQHandler+0xf8>
 80067bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00b      	beq.n	80067e0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2202      	movs	r2, #2
 80067ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067d6:	f043 0204 	orr.w	r2, r3, #4
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e4:	f003 0304 	and.w	r3, r3, #4
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d011      	beq.n	8006810 <HAL_UART_IRQHandler+0x128>
 80067ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067f0:	f003 0301 	and.w	r3, r3, #1
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00b      	beq.n	8006810 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2204      	movs	r2, #4
 80067fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006806:	f043 0202 	orr.w	r2, r3, #2
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006814:	f003 0308 	and.w	r3, r3, #8
 8006818:	2b00      	cmp	r3, #0
 800681a:	d017      	beq.n	800684c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800681c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006820:	f003 0320 	and.w	r3, r3, #32
 8006824:	2b00      	cmp	r3, #0
 8006826:	d105      	bne.n	8006834 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006828:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800682c:	4b5c      	ldr	r3, [pc, #368]	; (80069a0 <HAL_UART_IRQHandler+0x2b8>)
 800682e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00b      	beq.n	800684c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2208      	movs	r2, #8
 800683a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006842:	f043 0208 	orr.w	r2, r3, #8
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800684c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006850:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006854:	2b00      	cmp	r3, #0
 8006856:	d012      	beq.n	800687e <HAL_UART_IRQHandler+0x196>
 8006858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800685c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00c      	beq.n	800687e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800686c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006874:	f043 0220 	orr.w	r2, r3, #32
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006884:	2b00      	cmp	r3, #0
 8006886:	f000 8249 	beq.w	8006d1c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800688a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800688e:	f003 0320 	and.w	r3, r3, #32
 8006892:	2b00      	cmp	r3, #0
 8006894:	d013      	beq.n	80068be <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800689a:	f003 0320 	and.w	r3, r3, #32
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d105      	bne.n	80068ae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80068a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d007      	beq.n	80068be <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d003      	beq.n	80068be <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068d2:	2b40      	cmp	r3, #64	; 0x40
 80068d4:	d005      	beq.n	80068e2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80068d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d054      	beq.n	800698c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 ff8e 	bl	8007804 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f2:	2b40      	cmp	r3, #64	; 0x40
 80068f4:	d146      	bne.n	8006984 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	3308      	adds	r3, #8
 80068fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006900:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006904:	e853 3f00 	ldrex	r3, [r3]
 8006908:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800690c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006910:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006914:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	3308      	adds	r3, #8
 800691e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006922:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006926:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800692e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006932:	e841 2300 	strex	r3, r2, [r1]
 8006936:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800693a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1d9      	bne.n	80068f6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006948:	2b00      	cmp	r3, #0
 800694a:	d017      	beq.n	800697c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006952:	4a15      	ldr	r2, [pc, #84]	; (80069a8 <HAL_UART_IRQHandler+0x2c0>)
 8006954:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800695c:	4618      	mov	r0, r3
 800695e:	f7fc ffe4 	bl	800392a <HAL_DMA_Abort_IT>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d019      	beq.n	800699c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800696e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006976:	4610      	mov	r0, r2
 8006978:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800697a:	e00f      	b.n	800699c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 f9e0 	bl	8006d42 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006982:	e00b      	b.n	800699c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 f9dc 	bl	8006d42 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800698a:	e007      	b.n	800699c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 f9d8 	bl	8006d42 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800699a:	e1bf      	b.n	8006d1c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800699c:	bf00      	nop
    return;
 800699e:	e1bd      	b.n	8006d1c <HAL_UART_IRQHandler+0x634>
 80069a0:	10000001 	.word	0x10000001
 80069a4:	04000120 	.word	0x04000120
 80069a8:	080078cf 	.word	0x080078cf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	f040 8153 	bne.w	8006c5c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80069b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069ba:	f003 0310 	and.w	r3, r3, #16
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f000 814c 	beq.w	8006c5c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80069c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069c8:	f003 0310 	and.w	r3, r3, #16
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f000 8145 	beq.w	8006c5c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2210      	movs	r2, #16
 80069d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069e4:	2b40      	cmp	r3, #64	; 0x40
 80069e6:	f040 80bb 	bne.w	8006b60 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80069f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f000 818f 	beq.w	8006d20 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a08:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	f080 8187 	bcs.w	8006d20 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a18:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 0320 	and.w	r3, r3, #32
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f040 8087 	bne.w	8006b3e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a3c:	e853 3f00 	ldrex	r3, [r3]
 8006a40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006a44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	461a      	mov	r2, r3
 8006a56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006a5e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a62:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006a66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a6a:	e841 2300 	strex	r3, r2, [r1]
 8006a6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006a72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1da      	bne.n	8006a30 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	3308      	adds	r3, #8
 8006a80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a84:	e853 3f00 	ldrex	r3, [r3]
 8006a88:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a8c:	f023 0301 	bic.w	r3, r3, #1
 8006a90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	3308      	adds	r3, #8
 8006a9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006a9e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006aa2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006aa6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006aaa:	e841 2300 	strex	r3, r2, [r1]
 8006aae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ab0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1e1      	bne.n	8006a7a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	3308      	adds	r3, #8
 8006abc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ac0:	e853 3f00 	ldrex	r3, [r3]
 8006ac4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006ac6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ac8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006acc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	3308      	adds	r3, #8
 8006ad6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006ada:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006adc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ade:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ae0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ae2:	e841 2300 	strex	r3, r2, [r1]
 8006ae6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006ae8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1e3      	bne.n	8006ab6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2220      	movs	r2, #32
 8006af2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b04:	e853 3f00 	ldrex	r3, [r3]
 8006b08:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b0c:	f023 0310 	bic.w	r3, r3, #16
 8006b10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	461a      	mov	r2, r3
 8006b1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b20:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b26:	e841 2300 	strex	r3, r2, [r1]
 8006b2a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d1e4      	bne.n	8006afc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f7fc fe98 	bl	800386e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2202      	movs	r2, #2
 8006b42:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	4619      	mov	r1, r3
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 f8fb 	bl	8006d54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b5e:	e0df      	b.n	8006d20 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f000 80d1 	beq.w	8006d24 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006b82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	f000 80cc 	beq.w	8006d24 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b94:	e853 3f00 	ldrex	r3, [r3]
 8006b98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ba0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	461a      	mov	r2, r3
 8006baa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006bae:	647b      	str	r3, [r7, #68]	; 0x44
 8006bb0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006bb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bb6:	e841 2300 	strex	r3, r2, [r1]
 8006bba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d1e4      	bne.n	8006b8c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	3308      	adds	r3, #8
 8006bc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bcc:	e853 3f00 	ldrex	r3, [r3]
 8006bd0:	623b      	str	r3, [r7, #32]
   return(result);
 8006bd2:	6a3b      	ldr	r3, [r7, #32]
 8006bd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bd8:	f023 0301 	bic.w	r3, r3, #1
 8006bdc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	3308      	adds	r3, #8
 8006be6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006bea:	633a      	str	r2, [r7, #48]	; 0x30
 8006bec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bf2:	e841 2300 	strex	r3, r2, [r1]
 8006bf6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d1e1      	bne.n	8006bc2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2220      	movs	r2, #32
 8006c02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	e853 3f00 	ldrex	r3, [r3]
 8006c1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f023 0310 	bic.w	r3, r3, #16
 8006c26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006c34:	61fb      	str	r3, [r7, #28]
 8006c36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c38:	69b9      	ldr	r1, [r7, #24]
 8006c3a:	69fa      	ldr	r2, [r7, #28]
 8006c3c:	e841 2300 	strex	r3, r2, [r1]
 8006c40:	617b      	str	r3, [r7, #20]
   return(result);
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1e4      	bne.n	8006c12 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c52:	4619      	mov	r1, r3
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 f87d 	bl	8006d54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c5a:	e063      	b.n	8006d24 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00e      	beq.n	8006c86 <HAL_UART_IRQHandler+0x59e>
 8006c68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d008      	beq.n	8006c86 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006c7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f001 fb82 	bl	8008388 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c84:	e051      	b.n	8006d2a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d014      	beq.n	8006cbc <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006c92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d105      	bne.n	8006caa <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006c9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ca2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d008      	beq.n	8006cbc <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d03a      	beq.n	8006d28 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	4798      	blx	r3
    }
    return;
 8006cba:	e035      	b.n	8006d28 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d009      	beq.n	8006cdc <HAL_UART_IRQHandler+0x5f4>
 8006cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d003      	beq.n	8006cdc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 fe10 	bl	80078fa <UART_EndTransmit_IT>
    return;
 8006cda:	e026      	b.n	8006d2a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ce0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d009      	beq.n	8006cfc <HAL_UART_IRQHandler+0x614>
 8006ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d003      	beq.n	8006cfc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f001 fb59 	bl	80083ac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006cfa:	e016      	b.n	8006d2a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d010      	beq.n	8006d2a <HAL_UART_IRQHandler+0x642>
 8006d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	da0c      	bge.n	8006d2a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f001 fb42 	bl	800839a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d16:	e008      	b.n	8006d2a <HAL_UART_IRQHandler+0x642>
      return;
 8006d18:	bf00      	nop
 8006d1a:	e006      	b.n	8006d2a <HAL_UART_IRQHandler+0x642>
    return;
 8006d1c:	bf00      	nop
 8006d1e:	e004      	b.n	8006d2a <HAL_UART_IRQHandler+0x642>
      return;
 8006d20:	bf00      	nop
 8006d22:	e002      	b.n	8006d2a <HAL_UART_IRQHandler+0x642>
      return;
 8006d24:	bf00      	nop
 8006d26:	e000      	b.n	8006d2a <HAL_UART_IRQHandler+0x642>
    return;
 8006d28:	bf00      	nop
  }
}
 8006d2a:	37e8      	adds	r7, #232	; 0xe8
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006d38:	bf00      	nop
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bc80      	pop	{r7}
 8006d40:	4770      	bx	lr

08006d42 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d42:	b480      	push	{r7}
 8006d44:	b083      	sub	sp, #12
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006d4a:	bf00      	nop
 8006d4c:	370c      	adds	r7, #12
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bc80      	pop	{r7}
 8006d52:	4770      	bx	lr

08006d54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d60:	bf00      	nop
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bc80      	pop	{r7}
 8006d68:	4770      	bx	lr
	...

08006d6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d70:	b08c      	sub	sp, #48	; 0x30
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d76:	2300      	movs	r3, #0
 8006d78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	689a      	ldr	r2, [r3, #8]
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	431a      	orrs	r2, r3
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	695b      	ldr	r3, [r3, #20]
 8006d8a:	431a      	orrs	r2, r3
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	69db      	ldr	r3, [r3, #28]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	4b94      	ldr	r3, [pc, #592]	; (8006fec <UART_SetConfig+0x280>)
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	697a      	ldr	r2, [r7, #20]
 8006da0:	6812      	ldr	r2, [r2, #0]
 8006da2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006da4:	430b      	orrs	r3, r1
 8006da6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	68da      	ldr	r2, [r3, #12]
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	430a      	orrs	r2, r1
 8006dbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a89      	ldr	r2, [pc, #548]	; (8006ff0 <UART_SetConfig+0x284>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d004      	beq.n	8006dd8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006de2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	6812      	ldr	r2, [r2, #0]
 8006dea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006dec:	430b      	orrs	r3, r1
 8006dee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df6:	f023 010f 	bic.w	r1, r3, #15
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	430a      	orrs	r2, r1
 8006e04:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a7a      	ldr	r2, [pc, #488]	; (8006ff4 <UART_SetConfig+0x288>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d127      	bne.n	8006e60 <UART_SetConfig+0xf4>
 8006e10:	2003      	movs	r0, #3
 8006e12:	f7ff fa0a 	bl	800622a <LL_RCC_GetUSARTClockSource>
 8006e16:	4603      	mov	r3, r0
 8006e18:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8006e1c:	2b03      	cmp	r3, #3
 8006e1e:	d81b      	bhi.n	8006e58 <UART_SetConfig+0xec>
 8006e20:	a201      	add	r2, pc, #4	; (adr r2, 8006e28 <UART_SetConfig+0xbc>)
 8006e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e26:	bf00      	nop
 8006e28:	08006e39 	.word	0x08006e39
 8006e2c:	08006e49 	.word	0x08006e49
 8006e30:	08006e41 	.word	0x08006e41
 8006e34:	08006e51 	.word	0x08006e51
 8006e38:	2301      	movs	r3, #1
 8006e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e3e:	e080      	b.n	8006f42 <UART_SetConfig+0x1d6>
 8006e40:	2302      	movs	r3, #2
 8006e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e46:	e07c      	b.n	8006f42 <UART_SetConfig+0x1d6>
 8006e48:	2304      	movs	r3, #4
 8006e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e4e:	e078      	b.n	8006f42 <UART_SetConfig+0x1d6>
 8006e50:	2308      	movs	r3, #8
 8006e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e56:	e074      	b.n	8006f42 <UART_SetConfig+0x1d6>
 8006e58:	2310      	movs	r3, #16
 8006e5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e5e:	e070      	b.n	8006f42 <UART_SetConfig+0x1d6>
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a64      	ldr	r2, [pc, #400]	; (8006ff8 <UART_SetConfig+0x28c>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d138      	bne.n	8006edc <UART_SetConfig+0x170>
 8006e6a:	200c      	movs	r0, #12
 8006e6c:	f7ff f9dd 	bl	800622a <LL_RCC_GetUSARTClockSource>
 8006e70:	4603      	mov	r3, r0
 8006e72:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8006e76:	2b0c      	cmp	r3, #12
 8006e78:	d82c      	bhi.n	8006ed4 <UART_SetConfig+0x168>
 8006e7a:	a201      	add	r2, pc, #4	; (adr r2, 8006e80 <UART_SetConfig+0x114>)
 8006e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e80:	08006eb5 	.word	0x08006eb5
 8006e84:	08006ed5 	.word	0x08006ed5
 8006e88:	08006ed5 	.word	0x08006ed5
 8006e8c:	08006ed5 	.word	0x08006ed5
 8006e90:	08006ec5 	.word	0x08006ec5
 8006e94:	08006ed5 	.word	0x08006ed5
 8006e98:	08006ed5 	.word	0x08006ed5
 8006e9c:	08006ed5 	.word	0x08006ed5
 8006ea0:	08006ebd 	.word	0x08006ebd
 8006ea4:	08006ed5 	.word	0x08006ed5
 8006ea8:	08006ed5 	.word	0x08006ed5
 8006eac:	08006ed5 	.word	0x08006ed5
 8006eb0:	08006ecd 	.word	0x08006ecd
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eba:	e042      	b.n	8006f42 <UART_SetConfig+0x1d6>
 8006ebc:	2302      	movs	r3, #2
 8006ebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ec2:	e03e      	b.n	8006f42 <UART_SetConfig+0x1d6>
 8006ec4:	2304      	movs	r3, #4
 8006ec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eca:	e03a      	b.n	8006f42 <UART_SetConfig+0x1d6>
 8006ecc:	2308      	movs	r3, #8
 8006ece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ed2:	e036      	b.n	8006f42 <UART_SetConfig+0x1d6>
 8006ed4:	2310      	movs	r3, #16
 8006ed6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eda:	e032      	b.n	8006f42 <UART_SetConfig+0x1d6>
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a43      	ldr	r2, [pc, #268]	; (8006ff0 <UART_SetConfig+0x284>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d12a      	bne.n	8006f3c <UART_SetConfig+0x1d0>
 8006ee6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8006eea:	f7ff f9b0 	bl	800624e <LL_RCC_GetLPUARTClockSource>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ef4:	d01a      	beq.n	8006f2c <UART_SetConfig+0x1c0>
 8006ef6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006efa:	d81b      	bhi.n	8006f34 <UART_SetConfig+0x1c8>
 8006efc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f00:	d00c      	beq.n	8006f1c <UART_SetConfig+0x1b0>
 8006f02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f06:	d815      	bhi.n	8006f34 <UART_SetConfig+0x1c8>
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d003      	beq.n	8006f14 <UART_SetConfig+0x1a8>
 8006f0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f10:	d008      	beq.n	8006f24 <UART_SetConfig+0x1b8>
 8006f12:	e00f      	b.n	8006f34 <UART_SetConfig+0x1c8>
 8006f14:	2300      	movs	r3, #0
 8006f16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f1a:	e012      	b.n	8006f42 <UART_SetConfig+0x1d6>
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f22:	e00e      	b.n	8006f42 <UART_SetConfig+0x1d6>
 8006f24:	2304      	movs	r3, #4
 8006f26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f2a:	e00a      	b.n	8006f42 <UART_SetConfig+0x1d6>
 8006f2c:	2308      	movs	r3, #8
 8006f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f32:	e006      	b.n	8006f42 <UART_SetConfig+0x1d6>
 8006f34:	2310      	movs	r3, #16
 8006f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f3a:	e002      	b.n	8006f42 <UART_SetConfig+0x1d6>
 8006f3c:	2310      	movs	r3, #16
 8006f3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a2a      	ldr	r2, [pc, #168]	; (8006ff0 <UART_SetConfig+0x284>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	f040 80a4 	bne.w	8007096 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f52:	2b08      	cmp	r3, #8
 8006f54:	d823      	bhi.n	8006f9e <UART_SetConfig+0x232>
 8006f56:	a201      	add	r2, pc, #4	; (adr r2, 8006f5c <UART_SetConfig+0x1f0>)
 8006f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f5c:	08006f81 	.word	0x08006f81
 8006f60:	08006f9f 	.word	0x08006f9f
 8006f64:	08006f89 	.word	0x08006f89
 8006f68:	08006f9f 	.word	0x08006f9f
 8006f6c:	08006f8f 	.word	0x08006f8f
 8006f70:	08006f9f 	.word	0x08006f9f
 8006f74:	08006f9f 	.word	0x08006f9f
 8006f78:	08006f9f 	.word	0x08006f9f
 8006f7c:	08006f97 	.word	0x08006f97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f80:	f7fd ffd2 	bl	8004f28 <HAL_RCC_GetPCLK1Freq>
 8006f84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f86:	e010      	b.n	8006faa <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f88:	4b1c      	ldr	r3, [pc, #112]	; (8006ffc <UART_SetConfig+0x290>)
 8006f8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f8c:	e00d      	b.n	8006faa <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f8e:	f7fd ff17 	bl	8004dc0 <HAL_RCC_GetSysClockFreq>
 8006f92:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f94:	e009      	b.n	8006faa <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f9c:	e005      	b.n	8006faa <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006fa8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f000 8137 	beq.w	8007220 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb6:	4a12      	ldr	r2, [pc, #72]	; (8007000 <UART_SetConfig+0x294>)
 8006fb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fc4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	685a      	ldr	r2, [r3, #4]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	005b      	lsls	r3, r3, #1
 8006fce:	4413      	add	r3, r2
 8006fd0:	69ba      	ldr	r2, [r7, #24]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d305      	bcc.n	8006fe2 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006fdc:	69ba      	ldr	r2, [r7, #24]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d910      	bls.n	8007004 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006fe8:	e11a      	b.n	8007220 <UART_SetConfig+0x4b4>
 8006fea:	bf00      	nop
 8006fec:	cfff69f3 	.word	0xcfff69f3
 8006ff0:	40008000 	.word	0x40008000
 8006ff4:	40013800 	.word	0x40013800
 8006ff8:	40004400 	.word	0x40004400
 8006ffc:	00f42400 	.word	0x00f42400
 8007000:	0800b12c 	.word	0x0800b12c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007006:	2200      	movs	r2, #0
 8007008:	60bb      	str	r3, [r7, #8]
 800700a:	60fa      	str	r2, [r7, #12]
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007010:	4a8e      	ldr	r2, [pc, #568]	; (800724c <UART_SetConfig+0x4e0>)
 8007012:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007016:	b29b      	uxth	r3, r3
 8007018:	2200      	movs	r2, #0
 800701a:	603b      	str	r3, [r7, #0]
 800701c:	607a      	str	r2, [r7, #4]
 800701e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007022:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007026:	f7f9 febd 	bl	8000da4 <__aeabi_uldivmod>
 800702a:	4602      	mov	r2, r0
 800702c:	460b      	mov	r3, r1
 800702e:	4610      	mov	r0, r2
 8007030:	4619      	mov	r1, r3
 8007032:	f04f 0200 	mov.w	r2, #0
 8007036:	f04f 0300 	mov.w	r3, #0
 800703a:	020b      	lsls	r3, r1, #8
 800703c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007040:	0202      	lsls	r2, r0, #8
 8007042:	6979      	ldr	r1, [r7, #20]
 8007044:	6849      	ldr	r1, [r1, #4]
 8007046:	0849      	lsrs	r1, r1, #1
 8007048:	2000      	movs	r0, #0
 800704a:	460c      	mov	r4, r1
 800704c:	4605      	mov	r5, r0
 800704e:	eb12 0804 	adds.w	r8, r2, r4
 8007052:	eb43 0905 	adc.w	r9, r3, r5
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	469a      	mov	sl, r3
 800705e:	4693      	mov	fp, r2
 8007060:	4652      	mov	r2, sl
 8007062:	465b      	mov	r3, fp
 8007064:	4640      	mov	r0, r8
 8007066:	4649      	mov	r1, r9
 8007068:	f7f9 fe9c 	bl	8000da4 <__aeabi_uldivmod>
 800706c:	4602      	mov	r2, r0
 800706e:	460b      	mov	r3, r1
 8007070:	4613      	mov	r3, r2
 8007072:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007074:	6a3b      	ldr	r3, [r7, #32]
 8007076:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800707a:	d308      	bcc.n	800708e <UART_SetConfig+0x322>
 800707c:	6a3b      	ldr	r3, [r7, #32]
 800707e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007082:	d204      	bcs.n	800708e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	6a3a      	ldr	r2, [r7, #32]
 800708a:	60da      	str	r2, [r3, #12]
 800708c:	e0c8      	b.n	8007220 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007094:	e0c4      	b.n	8007220 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	69db      	ldr	r3, [r3, #28]
 800709a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800709e:	d167      	bne.n	8007170 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80070a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80070a4:	2b08      	cmp	r3, #8
 80070a6:	d828      	bhi.n	80070fa <UART_SetConfig+0x38e>
 80070a8:	a201      	add	r2, pc, #4	; (adr r2, 80070b0 <UART_SetConfig+0x344>)
 80070aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ae:	bf00      	nop
 80070b0:	080070d5 	.word	0x080070d5
 80070b4:	080070dd 	.word	0x080070dd
 80070b8:	080070e5 	.word	0x080070e5
 80070bc:	080070fb 	.word	0x080070fb
 80070c0:	080070eb 	.word	0x080070eb
 80070c4:	080070fb 	.word	0x080070fb
 80070c8:	080070fb 	.word	0x080070fb
 80070cc:	080070fb 	.word	0x080070fb
 80070d0:	080070f3 	.word	0x080070f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070d4:	f7fd ff28 	bl	8004f28 <HAL_RCC_GetPCLK1Freq>
 80070d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80070da:	e014      	b.n	8007106 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070dc:	f7fd ff36 	bl	8004f4c <HAL_RCC_GetPCLK2Freq>
 80070e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80070e2:	e010      	b.n	8007106 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070e4:	4b5a      	ldr	r3, [pc, #360]	; (8007250 <UART_SetConfig+0x4e4>)
 80070e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80070e8:	e00d      	b.n	8007106 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070ea:	f7fd fe69 	bl	8004dc0 <HAL_RCC_GetSysClockFreq>
 80070ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80070f0:	e009      	b.n	8007106 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80070f8:	e005      	b.n	8007106 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80070fa:	2300      	movs	r3, #0
 80070fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007104:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007108:	2b00      	cmp	r3, #0
 800710a:	f000 8089 	beq.w	8007220 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007112:	4a4e      	ldr	r2, [pc, #312]	; (800724c <UART_SetConfig+0x4e0>)
 8007114:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007118:	461a      	mov	r2, r3
 800711a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007120:	005a      	lsls	r2, r3, #1
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	085b      	lsrs	r3, r3, #1
 8007128:	441a      	add	r2, r3
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007132:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007134:	6a3b      	ldr	r3, [r7, #32]
 8007136:	2b0f      	cmp	r3, #15
 8007138:	d916      	bls.n	8007168 <UART_SetConfig+0x3fc>
 800713a:	6a3b      	ldr	r3, [r7, #32]
 800713c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007140:	d212      	bcs.n	8007168 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007142:	6a3b      	ldr	r3, [r7, #32]
 8007144:	b29b      	uxth	r3, r3
 8007146:	f023 030f 	bic.w	r3, r3, #15
 800714a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800714c:	6a3b      	ldr	r3, [r7, #32]
 800714e:	085b      	lsrs	r3, r3, #1
 8007150:	b29b      	uxth	r3, r3
 8007152:	f003 0307 	and.w	r3, r3, #7
 8007156:	b29a      	uxth	r2, r3
 8007158:	8bfb      	ldrh	r3, [r7, #30]
 800715a:	4313      	orrs	r3, r2
 800715c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	8bfa      	ldrh	r2, [r7, #30]
 8007164:	60da      	str	r2, [r3, #12]
 8007166:	e05b      	b.n	8007220 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800716e:	e057      	b.n	8007220 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007170:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007174:	2b08      	cmp	r3, #8
 8007176:	d828      	bhi.n	80071ca <UART_SetConfig+0x45e>
 8007178:	a201      	add	r2, pc, #4	; (adr r2, 8007180 <UART_SetConfig+0x414>)
 800717a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800717e:	bf00      	nop
 8007180:	080071a5 	.word	0x080071a5
 8007184:	080071ad 	.word	0x080071ad
 8007188:	080071b5 	.word	0x080071b5
 800718c:	080071cb 	.word	0x080071cb
 8007190:	080071bb 	.word	0x080071bb
 8007194:	080071cb 	.word	0x080071cb
 8007198:	080071cb 	.word	0x080071cb
 800719c:	080071cb 	.word	0x080071cb
 80071a0:	080071c3 	.word	0x080071c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071a4:	f7fd fec0 	bl	8004f28 <HAL_RCC_GetPCLK1Freq>
 80071a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80071aa:	e014      	b.n	80071d6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071ac:	f7fd fece 	bl	8004f4c <HAL_RCC_GetPCLK2Freq>
 80071b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80071b2:	e010      	b.n	80071d6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071b4:	4b26      	ldr	r3, [pc, #152]	; (8007250 <UART_SetConfig+0x4e4>)
 80071b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80071b8:	e00d      	b.n	80071d6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071ba:	f7fd fe01 	bl	8004dc0 <HAL_RCC_GetSysClockFreq>
 80071be:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80071c0:	e009      	b.n	80071d6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80071c8:	e005      	b.n	80071d6 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80071ca:	2300      	movs	r3, #0
 80071cc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80071d4:	bf00      	nop
    }

    if (pclk != 0U)
 80071d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d021      	beq.n	8007220 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e0:	4a1a      	ldr	r2, [pc, #104]	; (800724c <UART_SetConfig+0x4e0>)
 80071e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071e6:	461a      	mov	r2, r3
 80071e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	085b      	lsrs	r3, r3, #1
 80071f4:	441a      	add	r2, r3
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80071fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007200:	6a3b      	ldr	r3, [r7, #32]
 8007202:	2b0f      	cmp	r3, #15
 8007204:	d909      	bls.n	800721a <UART_SetConfig+0x4ae>
 8007206:	6a3b      	ldr	r3, [r7, #32]
 8007208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800720c:	d205      	bcs.n	800721a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800720e:	6a3b      	ldr	r3, [r7, #32]
 8007210:	b29a      	uxth	r2, r3
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	60da      	str	r2, [r3, #12]
 8007218:	e002      	b.n	8007220 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	2201      	movs	r2, #1
 8007224:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	2201      	movs	r2, #1
 800722c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	2200      	movs	r2, #0
 8007234:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	2200      	movs	r2, #0
 800723a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800723c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007240:	4618      	mov	r0, r3
 8007242:	3730      	adds	r7, #48	; 0x30
 8007244:	46bd      	mov	sp, r7
 8007246:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800724a:	bf00      	nop
 800724c:	0800b12c 	.word	0x0800b12c
 8007250:	00f42400 	.word	0x00f42400

08007254 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007260:	f003 0301 	and.w	r3, r3, #1
 8007264:	2b00      	cmp	r3, #0
 8007266:	d00a      	beq.n	800727e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	430a      	orrs	r2, r1
 800727c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007282:	f003 0302 	and.w	r3, r3, #2
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00a      	beq.n	80072a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	430a      	orrs	r2, r1
 800729e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a4:	f003 0304 	and.w	r3, r3, #4
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00a      	beq.n	80072c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	430a      	orrs	r2, r1
 80072c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c6:	f003 0308 	and.w	r3, r3, #8
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00a      	beq.n	80072e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	430a      	orrs	r2, r1
 80072e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e8:	f003 0310 	and.w	r3, r3, #16
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00a      	beq.n	8007306 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	430a      	orrs	r2, r1
 8007304:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800730a:	f003 0320 	and.w	r3, r3, #32
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00a      	beq.n	8007328 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	430a      	orrs	r2, r1
 8007326:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007330:	2b00      	cmp	r3, #0
 8007332:	d01a      	beq.n	800736a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	430a      	orrs	r2, r1
 8007348:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800734e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007352:	d10a      	bne.n	800736a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	430a      	orrs	r2, r1
 8007368:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800736e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00a      	beq.n	800738c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	430a      	orrs	r2, r1
 800738a:	605a      	str	r2, [r3, #4]
  }
}
 800738c:	bf00      	nop
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	bc80      	pop	{r7}
 8007394:	4770      	bx	lr

08007396 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b086      	sub	sp, #24
 800739a:	af02      	add	r7, sp, #8
 800739c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80073a6:	f7fb f92f 	bl	8002608 <HAL_GetTick>
 80073aa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 0308 	and.w	r3, r3, #8
 80073b6:	2b08      	cmp	r3, #8
 80073b8:	d10e      	bne.n	80073d8 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073be:	9300      	str	r3, [sp, #0]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 f832 	bl	8007432 <UART_WaitOnFlagUntilTimeout>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d001      	beq.n	80073d8 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073d4:	2303      	movs	r3, #3
 80073d6:	e028      	b.n	800742a <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 0304 	and.w	r3, r3, #4
 80073e2:	2b04      	cmp	r3, #4
 80073e4:	d10e      	bne.n	8007404 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073ea:	9300      	str	r3, [sp, #0]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 f81c 	bl	8007432 <UART_WaitOnFlagUntilTimeout>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d001      	beq.n	8007404 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007400:	2303      	movs	r3, #3
 8007402:	e012      	b.n	800742a <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2220      	movs	r2, #32
 8007408:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2220      	movs	r2, #32
 8007410:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007432:	b580      	push	{r7, lr}
 8007434:	b09c      	sub	sp, #112	; 0x70
 8007436:	af00      	add	r7, sp, #0
 8007438:	60f8      	str	r0, [r7, #12]
 800743a:	60b9      	str	r1, [r7, #8]
 800743c:	603b      	str	r3, [r7, #0]
 800743e:	4613      	mov	r3, r2
 8007440:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007442:	e0a9      	b.n	8007598 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007444:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800744a:	f000 80a5 	beq.w	8007598 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800744e:	f7fb f8db 	bl	8002608 <HAL_GetTick>
 8007452:	4602      	mov	r2, r0
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	1ad3      	subs	r3, r2, r3
 8007458:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800745a:	429a      	cmp	r2, r3
 800745c:	d302      	bcc.n	8007464 <UART_WaitOnFlagUntilTimeout+0x32>
 800745e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007460:	2b00      	cmp	r3, #0
 8007462:	d140      	bne.n	80074e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800746c:	e853 3f00 	ldrex	r3, [r3]
 8007470:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007474:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007478:	667b      	str	r3, [r7, #100]	; 0x64
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	461a      	mov	r2, r3
 8007480:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007482:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007484:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007486:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007488:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800748a:	e841 2300 	strex	r3, r2, [r1]
 800748e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007492:	2b00      	cmp	r3, #0
 8007494:	d1e6      	bne.n	8007464 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	3308      	adds	r3, #8
 800749c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800749e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074a0:	e853 3f00 	ldrex	r3, [r3]
 80074a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a8:	f023 0301 	bic.w	r3, r3, #1
 80074ac:	663b      	str	r3, [r7, #96]	; 0x60
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	3308      	adds	r3, #8
 80074b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80074b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80074b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80074bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074be:	e841 2300 	strex	r3, r2, [r1]
 80074c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80074c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d1e5      	bne.n	8007496 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2220      	movs	r2, #32
 80074ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2220      	movs	r2, #32
 80074d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e069      	b.n	80075ba <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0304 	and.w	r3, r3, #4
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d051      	beq.n	8007598 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	69db      	ldr	r3, [r3, #28]
 80074fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007502:	d149      	bne.n	8007598 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800750c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007516:	e853 3f00 	ldrex	r3, [r3]
 800751a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800751c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007522:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	461a      	mov	r2, r3
 800752a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800752c:	637b      	str	r3, [r7, #52]	; 0x34
 800752e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007530:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007532:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007534:	e841 2300 	strex	r3, r2, [r1]
 8007538:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800753a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1e6      	bne.n	800750e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	3308      	adds	r3, #8
 8007546:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	e853 3f00 	ldrex	r3, [r3]
 800754e:	613b      	str	r3, [r7, #16]
   return(result);
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	f023 0301 	bic.w	r3, r3, #1
 8007556:	66bb      	str	r3, [r7, #104]	; 0x68
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	3308      	adds	r3, #8
 800755e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007560:	623a      	str	r2, [r7, #32]
 8007562:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007564:	69f9      	ldr	r1, [r7, #28]
 8007566:	6a3a      	ldr	r2, [r7, #32]
 8007568:	e841 2300 	strex	r3, r2, [r1]
 800756c:	61bb      	str	r3, [r7, #24]
   return(result);
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d1e5      	bne.n	8007540 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2220      	movs	r2, #32
 8007578:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2220      	movs	r2, #32
 8007580:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2220      	movs	r2, #32
 8007588:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007594:	2303      	movs	r3, #3
 8007596:	e010      	b.n	80075ba <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	69da      	ldr	r2, [r3, #28]
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	4013      	ands	r3, r2
 80075a2:	68ba      	ldr	r2, [r7, #8]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	bf0c      	ite	eq
 80075a8:	2301      	moveq	r3, #1
 80075aa:	2300      	movne	r3, #0
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	461a      	mov	r2, r3
 80075b0:	79fb      	ldrb	r3, [r7, #7]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	f43f af46 	beq.w	8007444 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3770      	adds	r7, #112	; 0x70
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
	...

080075c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b0a3      	sub	sp, #140	; 0x8c
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	4613      	mov	r3, r2
 80075d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	68ba      	ldr	r2, [r7, #8]
 80075d6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	88fa      	ldrh	r2, [r7, #6]
 80075dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	88fa      	ldrh	r2, [r7, #6]
 80075e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2200      	movs	r2, #0
 80075ec:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075f6:	d10e      	bne.n	8007616 <UART_Start_Receive_IT+0x52>
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d105      	bne.n	800760c <UART_Start_Receive_IT+0x48>
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007606:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800760a:	e02d      	b.n	8007668 <UART_Start_Receive_IT+0xa4>
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	22ff      	movs	r2, #255	; 0xff
 8007610:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007614:	e028      	b.n	8007668 <UART_Start_Receive_IT+0xa4>
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10d      	bne.n	800763a <UART_Start_Receive_IT+0x76>
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d104      	bne.n	8007630 <UART_Start_Receive_IT+0x6c>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	22ff      	movs	r2, #255	; 0xff
 800762a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800762e:	e01b      	b.n	8007668 <UART_Start_Receive_IT+0xa4>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	227f      	movs	r2, #127	; 0x7f
 8007634:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007638:	e016      	b.n	8007668 <UART_Start_Receive_IT+0xa4>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007642:	d10d      	bne.n	8007660 <UART_Start_Receive_IT+0x9c>
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d104      	bne.n	8007656 <UART_Start_Receive_IT+0x92>
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	227f      	movs	r2, #127	; 0x7f
 8007650:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007654:	e008      	b.n	8007668 <UART_Start_Receive_IT+0xa4>
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	223f      	movs	r2, #63	; 0x3f
 800765a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800765e:	e003      	b.n	8007668 <UART_Start_Receive_IT+0xa4>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2200      	movs	r2, #0
 8007664:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2200      	movs	r2, #0
 800766c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2222      	movs	r2, #34	; 0x22
 8007674:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	3308      	adds	r3, #8
 800767e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007680:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007682:	e853 3f00 	ldrex	r3, [r3]
 8007686:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007688:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800768a:	f043 0301 	orr.w	r3, r3, #1
 800768e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	3308      	adds	r3, #8
 8007698:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800769c:	673a      	str	r2, [r7, #112]	; 0x70
 800769e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80076a2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80076a4:	e841 2300 	strex	r3, r2, [r1]
 80076a8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80076aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1e3      	bne.n	8007678 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076b8:	d14f      	bne.n	800775a <UART_Start_Receive_IT+0x196>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80076c0:	88fa      	ldrh	r2, [r7, #6]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d349      	bcc.n	800775a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076ce:	d107      	bne.n	80076e0 <UART_Start_Receive_IT+0x11c>
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d103      	bne.n	80076e0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	4a46      	ldr	r2, [pc, #280]	; (80077f4 <UART_Start_Receive_IT+0x230>)
 80076dc:	675a      	str	r2, [r3, #116]	; 0x74
 80076de:	e002      	b.n	80076e6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	4a45      	ldr	r2, [pc, #276]	; (80077f8 <UART_Start_Receive_IT+0x234>)
 80076e4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d01a      	beq.n	8007724 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076f6:	e853 3f00 	ldrex	r3, [r3]
 80076fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80076fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007702:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	461a      	mov	r2, r3
 800770c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007710:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007712:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007714:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007716:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007718:	e841 2300 	strex	r3, r2, [r1]
 800771c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800771e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1e4      	bne.n	80076ee <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	3308      	adds	r3, #8
 800772a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800772e:	e853 3f00 	ldrex	r3, [r3]
 8007732:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800773a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	3308      	adds	r3, #8
 8007742:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007744:	64ba      	str	r2, [r7, #72]	; 0x48
 8007746:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007748:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800774a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800774c:	e841 2300 	strex	r3, r2, [r1]
 8007750:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1e5      	bne.n	8007724 <UART_Start_Receive_IT+0x160>
 8007758:	e046      	b.n	80077e8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007762:	d107      	bne.n	8007774 <UART_Start_Receive_IT+0x1b0>
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	691b      	ldr	r3, [r3, #16]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d103      	bne.n	8007774 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	4a23      	ldr	r2, [pc, #140]	; (80077fc <UART_Start_Receive_IT+0x238>)
 8007770:	675a      	str	r2, [r3, #116]	; 0x74
 8007772:	e002      	b.n	800777a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	4a22      	ldr	r2, [pc, #136]	; (8007800 <UART_Start_Receive_IT+0x23c>)
 8007778:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d019      	beq.n	80077b6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778a:	e853 3f00 	ldrex	r3, [r3]
 800778e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007792:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007796:	677b      	str	r3, [r7, #116]	; 0x74
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	461a      	mov	r2, r3
 800779e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077a0:	637b      	str	r3, [r7, #52]	; 0x34
 80077a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80077a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077a8:	e841 2300 	strex	r3, r2, [r1]
 80077ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80077ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d1e6      	bne.n	8007782 <UART_Start_Receive_IT+0x1be>
 80077b4:	e018      	b.n	80077e8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	e853 3f00 	ldrex	r3, [r3]
 80077c2:	613b      	str	r3, [r7, #16]
   return(result);
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	f043 0320 	orr.w	r3, r3, #32
 80077ca:	67bb      	str	r3, [r7, #120]	; 0x78
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	461a      	mov	r2, r3
 80077d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077d4:	623b      	str	r3, [r7, #32]
 80077d6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d8:	69f9      	ldr	r1, [r7, #28]
 80077da:	6a3a      	ldr	r2, [r7, #32]
 80077dc:	e841 2300 	strex	r3, r2, [r1]
 80077e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d1e6      	bne.n	80077b6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	378c      	adds	r7, #140	; 0x8c
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bc80      	pop	{r7}
 80077f2:	4770      	bx	lr
 80077f4:	08008021 	.word	0x08008021
 80077f8:	08007cc1 	.word	0x08007cc1
 80077fc:	08007b09 	.word	0x08007b09
 8007800:	08007951 	.word	0x08007951

08007804 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007804:	b480      	push	{r7}
 8007806:	b095      	sub	sp, #84	; 0x54
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007814:	e853 3f00 	ldrex	r3, [r3]
 8007818:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800781a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007820:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	461a      	mov	r2, r3
 8007828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800782a:	643b      	str	r3, [r7, #64]	; 0x40
 800782c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007830:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007832:	e841 2300 	strex	r3, r2, [r1]
 8007836:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1e6      	bne.n	800780c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	3308      	adds	r3, #8
 8007844:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007846:	6a3b      	ldr	r3, [r7, #32]
 8007848:	e853 3f00 	ldrex	r3, [r3]
 800784c:	61fb      	str	r3, [r7, #28]
   return(result);
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007854:	f023 0301 	bic.w	r3, r3, #1
 8007858:	64bb      	str	r3, [r7, #72]	; 0x48
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	3308      	adds	r3, #8
 8007860:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007862:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007864:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007866:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800786a:	e841 2300 	strex	r3, r2, [r1]
 800786e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007872:	2b00      	cmp	r3, #0
 8007874:	d1e3      	bne.n	800783e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800787a:	2b01      	cmp	r3, #1
 800787c:	d118      	bne.n	80078b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	e853 3f00 	ldrex	r3, [r3]
 800788a:	60bb      	str	r3, [r7, #8]
   return(result);
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	f023 0310 	bic.w	r3, r3, #16
 8007892:	647b      	str	r3, [r7, #68]	; 0x44
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	461a      	mov	r2, r3
 800789a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800789c:	61bb      	str	r3, [r7, #24]
 800789e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a0:	6979      	ldr	r1, [r7, #20]
 80078a2:	69ba      	ldr	r2, [r7, #24]
 80078a4:	e841 2300 	strex	r3, r2, [r1]
 80078a8:	613b      	str	r3, [r7, #16]
   return(result);
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d1e6      	bne.n	800787e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2220      	movs	r2, #32
 80078b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80078c4:	bf00      	nop
 80078c6:	3754      	adds	r7, #84	; 0x54
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bc80      	pop	{r7}
 80078cc:	4770      	bx	lr

080078ce <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b084      	sub	sp, #16
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2200      	movs	r2, #0
 80078e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f7ff fa28 	bl	8006d42 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078f2:	bf00      	nop
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b088      	sub	sp, #32
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	e853 3f00 	ldrex	r3, [r3]
 800790e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007916:	61fb      	str	r3, [r7, #28]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	461a      	mov	r2, r3
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	61bb      	str	r3, [r7, #24]
 8007922:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007924:	6979      	ldr	r1, [r7, #20]
 8007926:	69ba      	ldr	r2, [r7, #24]
 8007928:	e841 2300 	strex	r3, r2, [r1]
 800792c:	613b      	str	r3, [r7, #16]
   return(result);
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d1e6      	bne.n	8007902 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2220      	movs	r2, #32
 8007938:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f7ff f9f4 	bl	8006d30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007948:	bf00      	nop
 800794a:	3720      	adds	r7, #32
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b09c      	sub	sp, #112	; 0x70
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800795e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007968:	2b22      	cmp	r3, #34	; 0x22
 800796a:	f040 80be 	bne.w	8007aea <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007974:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007978:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800797c:	b2d9      	uxtb	r1, r3
 800797e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007982:	b2da      	uxtb	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007988:	400a      	ands	r2, r1
 800798a:	b2d2      	uxtb	r2, r2
 800798c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007992:	1c5a      	adds	r2, r3, #1
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800799e:	b29b      	uxth	r3, r3
 80079a0:	3b01      	subs	r3, #1
 80079a2:	b29a      	uxth	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	f040 80a1 	bne.w	8007afa <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079c0:	e853 3f00 	ldrex	r3, [r3]
 80079c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80079c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	461a      	mov	r2, r3
 80079d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80079d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80079d8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80079dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079de:	e841 2300 	strex	r3, r2, [r1]
 80079e2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80079e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1e6      	bne.n	80079b8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	3308      	adds	r3, #8
 80079f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f4:	e853 3f00 	ldrex	r3, [r3]
 80079f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079fc:	f023 0301 	bic.w	r3, r3, #1
 8007a00:	667b      	str	r3, [r7, #100]	; 0x64
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	3308      	adds	r3, #8
 8007a08:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007a0a:	647a      	str	r2, [r7, #68]	; 0x44
 8007a0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a12:	e841 2300 	strex	r3, r2, [r1]
 8007a16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1e5      	bne.n	80079ea <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2220      	movs	r2, #32
 8007a22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a33      	ldr	r2, [pc, #204]	; (8007b04 <UART_RxISR_8BIT+0x1b4>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d01f      	beq.n	8007a7c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d018      	beq.n	8007a7c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a52:	e853 3f00 	ldrex	r3, [r3]
 8007a56:	623b      	str	r3, [r7, #32]
   return(result);
 8007a58:	6a3b      	ldr	r3, [r7, #32]
 8007a5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007a5e:	663b      	str	r3, [r7, #96]	; 0x60
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	461a      	mov	r2, r3
 8007a66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a68:	633b      	str	r3, [r7, #48]	; 0x30
 8007a6a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a70:	e841 2300 	strex	r3, r2, [r1]
 8007a74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d1e6      	bne.n	8007a4a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d12e      	bne.n	8007ae2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	e853 3f00 	ldrex	r3, [r3]
 8007a96:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f023 0310 	bic.w	r3, r3, #16
 8007a9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007aa8:	61fb      	str	r3, [r7, #28]
 8007aaa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aac:	69b9      	ldr	r1, [r7, #24]
 8007aae:	69fa      	ldr	r2, [r7, #28]
 8007ab0:	e841 2300 	strex	r3, r2, [r1]
 8007ab4:	617b      	str	r3, [r7, #20]
   return(result);
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d1e6      	bne.n	8007a8a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	69db      	ldr	r3, [r3, #28]
 8007ac2:	f003 0310 	and.w	r3, r3, #16
 8007ac6:	2b10      	cmp	r3, #16
 8007ac8:	d103      	bne.n	8007ad2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2210      	movs	r2, #16
 8007ad0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007ad8:	4619      	mov	r1, r3
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f7ff f93a 	bl	8006d54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ae0:	e00b      	b.n	8007afa <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f7f9 fd9c 	bl	8001620 <HAL_UART_RxCpltCallback>
}
 8007ae8:	e007      	b.n	8007afa <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	699a      	ldr	r2, [r3, #24]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f042 0208 	orr.w	r2, r2, #8
 8007af8:	619a      	str	r2, [r3, #24]
}
 8007afa:	bf00      	nop
 8007afc:	3770      	adds	r7, #112	; 0x70
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	40008000 	.word	0x40008000

08007b08 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b09c      	sub	sp, #112	; 0x70
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007b16:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b20:	2b22      	cmp	r3, #34	; 0x22
 8007b22:	f040 80be 	bne.w	8007ca2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b34:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007b36:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007b3a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007b3e:	4013      	ands	r3, r2
 8007b40:	b29a      	uxth	r2, r3
 8007b42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b44:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b4a:	1c9a      	adds	r2, r3, #2
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	3b01      	subs	r3, #1
 8007b5a:	b29a      	uxth	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f040 80a1 	bne.w	8007cb2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b78:	e853 3f00 	ldrex	r3, [r3]
 8007b7c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007b7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b84:	667b      	str	r3, [r7, #100]	; 0x64
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b8e:	657b      	str	r3, [r7, #84]	; 0x54
 8007b90:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b92:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007b94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007b96:	e841 2300 	strex	r3, r2, [r1]
 8007b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1e6      	bne.n	8007b70 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	3308      	adds	r3, #8
 8007ba8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bac:	e853 3f00 	ldrex	r3, [r3]
 8007bb0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb4:	f023 0301 	bic.w	r3, r3, #1
 8007bb8:	663b      	str	r3, [r7, #96]	; 0x60
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	3308      	adds	r3, #8
 8007bc0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007bc2:	643a      	str	r2, [r7, #64]	; 0x40
 8007bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007bc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007bca:	e841 2300 	strex	r3, r2, [r1]
 8007bce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d1e5      	bne.n	8007ba2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2220      	movs	r2, #32
 8007bda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a33      	ldr	r2, [pc, #204]	; (8007cbc <UART_RxISR_16BIT+0x1b4>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d01f      	beq.n	8007c34 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d018      	beq.n	8007c34 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c08:	6a3b      	ldr	r3, [r7, #32]
 8007c0a:	e853 3f00 	ldrex	r3, [r3]
 8007c0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c22:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c28:	e841 2300 	strex	r3, r2, [r1]
 8007c2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d1e6      	bne.n	8007c02 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d12e      	bne.n	8007c9a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	e853 3f00 	ldrex	r3, [r3]
 8007c4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	f023 0310 	bic.w	r3, r3, #16
 8007c56:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c60:	61bb      	str	r3, [r7, #24]
 8007c62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c64:	6979      	ldr	r1, [r7, #20]
 8007c66:	69ba      	ldr	r2, [r7, #24]
 8007c68:	e841 2300 	strex	r3, r2, [r1]
 8007c6c:	613b      	str	r3, [r7, #16]
   return(result);
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d1e6      	bne.n	8007c42 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	69db      	ldr	r3, [r3, #28]
 8007c7a:	f003 0310 	and.w	r3, r3, #16
 8007c7e:	2b10      	cmp	r3, #16
 8007c80:	d103      	bne.n	8007c8a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2210      	movs	r2, #16
 8007c88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c90:	4619      	mov	r1, r3
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f7ff f85e 	bl	8006d54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c98:	e00b      	b.n	8007cb2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f7f9 fcc0 	bl	8001620 <HAL_UART_RxCpltCallback>
}
 8007ca0:	e007      	b.n	8007cb2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	699a      	ldr	r2, [r3, #24]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f042 0208 	orr.w	r2, r2, #8
 8007cb0:	619a      	str	r2, [r3, #24]
}
 8007cb2:	bf00      	nop
 8007cb4:	3770      	adds	r7, #112	; 0x70
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	40008000 	.word	0x40008000

08007cc0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b0ac      	sub	sp, #176	; 0xb0
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007cce:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	69db      	ldr	r3, [r3, #28]
 8007cd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cf6:	2b22      	cmp	r3, #34	; 0x22
 8007cf8:	f040 8182 	bne.w	8008000 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007d02:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007d06:	e125      	b.n	8007f54 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007d12:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8007d16:	b2d9      	uxtb	r1, r3
 8007d18:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007d1c:	b2da      	uxtb	r2, r3
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d22:	400a      	ands	r2, r1
 8007d24:	b2d2      	uxtb	r2, r2
 8007d26:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d2c:	1c5a      	adds	r2, r3, #1
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	b29a      	uxth	r2, r3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	69db      	ldr	r3, [r3, #28]
 8007d4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007d4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d52:	f003 0307 	and.w	r3, r3, #7
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d053      	beq.n	8007e02 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007d5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d5e:	f003 0301 	and.w	r3, r3, #1
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d011      	beq.n	8007d8a <UART_RxISR_8BIT_FIFOEN+0xca>
 8007d66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d00b      	beq.n	8007d8a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2201      	movs	r2, #1
 8007d78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d80:	f043 0201 	orr.w	r2, r3, #1
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d8e:	f003 0302 	and.w	r3, r3, #2
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d011      	beq.n	8007dba <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007d96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007d9a:	f003 0301 	and.w	r3, r3, #1
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00b      	beq.n	8007dba <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	2202      	movs	r2, #2
 8007da8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007db0:	f043 0204 	orr.w	r2, r3, #4
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007dba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007dbe:	f003 0304 	and.w	r3, r3, #4
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d011      	beq.n	8007dea <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007dc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007dca:	f003 0301 	and.w	r3, r3, #1
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d00b      	beq.n	8007dea <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2204      	movs	r2, #4
 8007dd8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007de0:	f043 0202 	orr.w	r2, r3, #2
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d006      	beq.n	8007e02 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f7fe ffa4 	bl	8006d42 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	f040 80a2 	bne.w	8007f54 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e18:	e853 3f00 	ldrex	r3, [r3]
 8007e1c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8007e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e32:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007e34:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e36:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007e38:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007e3a:	e841 2300 	strex	r3, r2, [r1]
 8007e3e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8007e40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1e4      	bne.n	8007e10 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	3308      	adds	r3, #8
 8007e4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e50:	e853 3f00 	ldrex	r3, [r3]
 8007e54:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007e56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e5c:	f023 0301 	bic.w	r3, r3, #1
 8007e60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	3308      	adds	r3, #8
 8007e6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007e6e:	66ba      	str	r2, [r7, #104]	; 0x68
 8007e70:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e72:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007e74:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e76:	e841 2300 	strex	r3, r2, [r1]
 8007e7a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007e7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1e1      	bne.n	8007e46 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2220      	movs	r2, #32
 8007e86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a5f      	ldr	r2, [pc, #380]	; (8008018 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d021      	beq.n	8007ee4 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d01a      	beq.n	8007ee4 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007eb6:	e853 3f00 	ldrex	r3, [r3]
 8007eba:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007ebc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ebe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ec2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	461a      	mov	r2, r3
 8007ecc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ed0:	657b      	str	r3, [r7, #84]	; 0x54
 8007ed2:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007ed6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007ed8:	e841 2300 	strex	r3, r2, [r1]
 8007edc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007ede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d1e4      	bne.n	8007eae <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d130      	bne.n	8007f4e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007efa:	e853 3f00 	ldrex	r3, [r3]
 8007efe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f02:	f023 0310 	bic.w	r3, r3, #16
 8007f06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	461a      	mov	r2, r3
 8007f10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f14:	643b      	str	r3, [r7, #64]	; 0x40
 8007f16:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f1c:	e841 2300 	strex	r3, r2, [r1]
 8007f20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d1e4      	bne.n	8007ef2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	69db      	ldr	r3, [r3, #28]
 8007f2e:	f003 0310 	and.w	r3, r3, #16
 8007f32:	2b10      	cmp	r3, #16
 8007f34:	d103      	bne.n	8007f3e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2210      	movs	r2, #16
 8007f3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f44:	4619      	mov	r1, r3
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f7fe ff04 	bl	8006d54 <HAL_UARTEx_RxEventCallback>
 8007f4c:	e002      	b.n	8007f54 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f7f9 fb66 	bl	8001620 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007f54:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d006      	beq.n	8007f6a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8007f5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f60:	f003 0320 	and.w	r3, r3, #32
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f47f aecf 	bne.w	8007d08 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f70:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007f74:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d049      	beq.n	8008010 <UART_RxISR_8BIT_FIFOEN+0x350>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007f82:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d242      	bcs.n	8008010 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	3308      	adds	r3, #8
 8007f90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f92:	6a3b      	ldr	r3, [r7, #32]
 8007f94:	e853 3f00 	ldrex	r3, [r3]
 8007f98:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	3308      	adds	r3, #8
 8007faa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007fae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fb6:	e841 2300 	strex	r3, r2, [r1]
 8007fba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1e3      	bne.n	8007f8a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a15      	ldr	r2, [pc, #84]	; (800801c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007fc6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	e853 3f00 	ldrex	r3, [r3]
 8007fd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	f043 0320 	orr.w	r3, r3, #32
 8007fdc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007fea:	61bb      	str	r3, [r7, #24]
 8007fec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fee:	6979      	ldr	r1, [r7, #20]
 8007ff0:	69ba      	ldr	r2, [r7, #24]
 8007ff2:	e841 2300 	strex	r3, r2, [r1]
 8007ff6:	613b      	str	r3, [r7, #16]
   return(result);
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1e4      	bne.n	8007fc8 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ffe:	e007      	b.n	8008010 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	699a      	ldr	r2, [r3, #24]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f042 0208 	orr.w	r2, r2, #8
 800800e:	619a      	str	r2, [r3, #24]
}
 8008010:	bf00      	nop
 8008012:	37b0      	adds	r7, #176	; 0xb0
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	40008000 	.word	0x40008000
 800801c:	08007951 	.word	0x08007951

08008020 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b0ae      	sub	sp, #184	; 0xb8
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800802e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	69db      	ldr	r3, [r3, #28]
 8008038:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008056:	2b22      	cmp	r3, #34	; 0x22
 8008058:	f040 8186 	bne.w	8008368 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008062:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008066:	e129      	b.n	80082bc <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008076:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800807a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800807e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008082:	4013      	ands	r3, r2
 8008084:	b29a      	uxth	r2, r3
 8008086:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800808a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008090:	1c9a      	adds	r2, r3, #2
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800809c:	b29b      	uxth	r3, r3
 800809e:	3b01      	subs	r3, #1
 80080a0:	b29a      	uxth	r2, r3
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	69db      	ldr	r3, [r3, #28]
 80080ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80080b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80080b6:	f003 0307 	and.w	r3, r3, #7
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d053      	beq.n	8008166 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80080be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80080c2:	f003 0301 	and.w	r3, r3, #1
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d011      	beq.n	80080ee <UART_RxISR_16BIT_FIFOEN+0xce>
 80080ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80080ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00b      	beq.n	80080ee <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	2201      	movs	r2, #1
 80080dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080e4:	f043 0201 	orr.w	r2, r3, #1
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80080f2:	f003 0302 	and.w	r3, r3, #2
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d011      	beq.n	800811e <UART_RxISR_16BIT_FIFOEN+0xfe>
 80080fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80080fe:	f003 0301 	and.w	r3, r3, #1
 8008102:	2b00      	cmp	r3, #0
 8008104:	d00b      	beq.n	800811e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	2202      	movs	r2, #2
 800810c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008114:	f043 0204 	orr.w	r2, r3, #4
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800811e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008122:	f003 0304 	and.w	r3, r3, #4
 8008126:	2b00      	cmp	r3, #0
 8008128:	d011      	beq.n	800814e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800812a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800812e:	f003 0301 	and.w	r3, r3, #1
 8008132:	2b00      	cmp	r3, #0
 8008134:	d00b      	beq.n	800814e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2204      	movs	r2, #4
 800813c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008144:	f043 0202 	orr.w	r2, r3, #2
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008154:	2b00      	cmp	r3, #0
 8008156:	d006      	beq.n	8008166 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f7fe fdf2 	bl	8006d42 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800816c:	b29b      	uxth	r3, r3
 800816e:	2b00      	cmp	r3, #0
 8008170:	f040 80a4 	bne.w	80082bc <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800817a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800817c:	e853 3f00 	ldrex	r3, [r3]
 8008180:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008182:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008184:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008188:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	461a      	mov	r2, r3
 8008192:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008196:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800819a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800819c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800819e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80081a2:	e841 2300 	strex	r3, r2, [r1]
 80081a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80081a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d1e2      	bne.n	8008174 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	3308      	adds	r3, #8
 80081b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081b8:	e853 3f00 	ldrex	r3, [r3]
 80081bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80081be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081c4:	f023 0301 	bic.w	r3, r3, #1
 80081c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	3308      	adds	r3, #8
 80081d2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80081d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80081d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80081dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80081de:	e841 2300 	strex	r3, r2, [r1]
 80081e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80081e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d1e1      	bne.n	80081ae <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2220      	movs	r2, #32
 80081ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a5f      	ldr	r2, [pc, #380]	; (8008380 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d021      	beq.n	800824c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008212:	2b00      	cmp	r3, #0
 8008214:	d01a      	beq.n	800824c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800821e:	e853 3f00 	ldrex	r3, [r3]
 8008222:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008224:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008226:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800822a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	461a      	mov	r2, r3
 8008234:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008238:	65bb      	str	r3, [r7, #88]	; 0x58
 800823a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800823e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008240:	e841 2300 	strex	r3, r2, [r1]
 8008244:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008248:	2b00      	cmp	r3, #0
 800824a:	d1e4      	bne.n	8008216 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008250:	2b01      	cmp	r3, #1
 8008252:	d130      	bne.n	80082b6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008262:	e853 3f00 	ldrex	r3, [r3]
 8008266:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800826a:	f023 0310 	bic.w	r3, r3, #16
 800826e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	461a      	mov	r2, r3
 8008278:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800827c:	647b      	str	r3, [r7, #68]	; 0x44
 800827e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008280:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008282:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008284:	e841 2300 	strex	r3, r2, [r1]
 8008288:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800828a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800828c:	2b00      	cmp	r3, #0
 800828e:	d1e4      	bne.n	800825a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	69db      	ldr	r3, [r3, #28]
 8008296:	f003 0310 	and.w	r3, r3, #16
 800829a:	2b10      	cmp	r3, #16
 800829c:	d103      	bne.n	80082a6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2210      	movs	r2, #16
 80082a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80082ac:	4619      	mov	r1, r3
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f7fe fd50 	bl	8006d54 <HAL_UARTEx_RxEventCallback>
 80082b4:	e002      	b.n	80082bc <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f7f9 f9b2 	bl	8001620 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80082bc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d006      	beq.n	80082d2 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80082c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80082c8:	f003 0320 	and.w	r3, r3, #32
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f47f aecb 	bne.w	8008068 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80082d8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80082dc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d049      	beq.n	8008378 <UART_RxISR_16BIT_FIFOEN+0x358>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80082ea:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d242      	bcs.n	8008378 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	3308      	adds	r3, #8
 80082f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fc:	e853 3f00 	ldrex	r3, [r3]
 8008300:	623b      	str	r3, [r7, #32]
   return(result);
 8008302:	6a3b      	ldr	r3, [r7, #32]
 8008304:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008308:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	3308      	adds	r3, #8
 8008312:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008316:	633a      	str	r2, [r7, #48]	; 0x30
 8008318:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800831c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800831e:	e841 2300 	strex	r3, r2, [r1]
 8008322:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008326:	2b00      	cmp	r3, #0
 8008328:	d1e3      	bne.n	80082f2 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4a15      	ldr	r2, [pc, #84]	; (8008384 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800832e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	e853 3f00 	ldrex	r3, [r3]
 800833c:	60fb      	str	r3, [r7, #12]
   return(result);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f043 0320 	orr.w	r3, r3, #32
 8008344:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	461a      	mov	r2, r3
 800834e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008352:	61fb      	str	r3, [r7, #28]
 8008354:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008356:	69b9      	ldr	r1, [r7, #24]
 8008358:	69fa      	ldr	r2, [r7, #28]
 800835a:	e841 2300 	strex	r3, r2, [r1]
 800835e:	617b      	str	r3, [r7, #20]
   return(result);
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d1e4      	bne.n	8008330 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008366:	e007      	b.n	8008378 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	699a      	ldr	r2, [r3, #24]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f042 0208 	orr.w	r2, r2, #8
 8008376:	619a      	str	r2, [r3, #24]
}
 8008378:	bf00      	nop
 800837a:	37b8      	adds	r7, #184	; 0xb8
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}
 8008380:	40008000 	.word	0x40008000
 8008384:	08007b09 	.word	0x08007b09

08008388 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008388:	b480      	push	{r7}
 800838a:	b083      	sub	sp, #12
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008390:	bf00      	nop
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	bc80      	pop	{r7}
 8008398:	4770      	bx	lr

0800839a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800839a:	b480      	push	{r7}
 800839c:	b083      	sub	sp, #12
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80083a2:	bf00      	nop
 80083a4:	370c      	adds	r7, #12
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bc80      	pop	{r7}
 80083aa:	4770      	bx	lr

080083ac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80083b4:	bf00      	nop
 80083b6:	370c      	adds	r7, #12
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bc80      	pop	{r7}
 80083bc:	4770      	bx	lr

080083be <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b084      	sub	sp, #16
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d101      	bne.n	80083d4 <HAL_UARTEx_EnableFifoMode+0x16>
 80083d0:	2302      	movs	r3, #2
 80083d2:	e02b      	b.n	800842c <HAL_UARTEx_EnableFifoMode+0x6e>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2224      	movs	r2, #36	; 0x24
 80083e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f022 0201 	bic.w	r2, r2, #1
 80083fa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008402:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800840a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	68fa      	ldr	r2, [r7, #12]
 8008412:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 f8c1 	bl	800859c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2220      	movs	r2, #32
 800841e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	3710      	adds	r7, #16
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008434:	b480      	push	{r7}
 8008436:	b085      	sub	sp, #20
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008442:	2b01      	cmp	r3, #1
 8008444:	d101      	bne.n	800844a <HAL_UARTEx_DisableFifoMode+0x16>
 8008446:	2302      	movs	r3, #2
 8008448:	e027      	b.n	800849a <HAL_UARTEx_DisableFifoMode+0x66>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2201      	movs	r2, #1
 800844e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2224      	movs	r2, #36	; 0x24
 8008456:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f022 0201 	bic.w	r2, r2, #1
 8008470:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008478:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	68fa      	ldr	r2, [r7, #12]
 8008486:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2220      	movs	r2, #32
 800848c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3714      	adds	r7, #20
 800849e:	46bd      	mov	sp, r7
 80084a0:	bc80      	pop	{r7}
 80084a2:	4770      	bx	lr

080084a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d101      	bne.n	80084bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80084b8:	2302      	movs	r3, #2
 80084ba:	e02d      	b.n	8008518 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2224      	movs	r2, #36	; 0x24
 80084c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f022 0201 	bic.w	r2, r2, #1
 80084e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	683a      	ldr	r2, [r7, #0]
 80084f4:	430a      	orrs	r2, r1
 80084f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 f84f 	bl	800859c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	68fa      	ldr	r2, [r7, #12]
 8008504:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2220      	movs	r2, #32
 800850a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2200      	movs	r2, #0
 8008512:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008516:	2300      	movs	r3, #0
}
 8008518:	4618      	mov	r0, r3
 800851a:	3710      	adds	r7, #16
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008530:	2b01      	cmp	r3, #1
 8008532:	d101      	bne.n	8008538 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008534:	2302      	movs	r3, #2
 8008536:	e02d      	b.n	8008594 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2201      	movs	r2, #1
 800853c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2224      	movs	r2, #36	; 0x24
 8008544:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	681a      	ldr	r2, [r3, #0]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f022 0201 	bic.w	r2, r2, #1
 800855e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	683a      	ldr	r2, [r7, #0]
 8008570:	430a      	orrs	r2, r1
 8008572:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 f811 	bl	800859c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2220      	movs	r2, #32
 8008586:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	3710      	adds	r7, #16
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800859c:	b480      	push	{r7}
 800859e:	b085      	sub	sp, #20
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d108      	bne.n	80085be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2201      	movs	r2, #1
 80085b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2201      	movs	r2, #1
 80085b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80085bc:	e031      	b.n	8008622 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80085be:	2308      	movs	r3, #8
 80085c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80085c2:	2308      	movs	r3, #8
 80085c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	0e5b      	lsrs	r3, r3, #25
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	f003 0307 	and.w	r3, r3, #7
 80085d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	0f5b      	lsrs	r3, r3, #29
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	f003 0307 	and.w	r3, r3, #7
 80085e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80085e6:	7bbb      	ldrb	r3, [r7, #14]
 80085e8:	7b3a      	ldrb	r2, [r7, #12]
 80085ea:	4910      	ldr	r1, [pc, #64]	; (800862c <UARTEx_SetNbDataToProcess+0x90>)
 80085ec:	5c8a      	ldrb	r2, [r1, r2]
 80085ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80085f2:	7b3a      	ldrb	r2, [r7, #12]
 80085f4:	490e      	ldr	r1, [pc, #56]	; (8008630 <UARTEx_SetNbDataToProcess+0x94>)
 80085f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80085f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80085fc:	b29a      	uxth	r2, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008604:	7bfb      	ldrb	r3, [r7, #15]
 8008606:	7b7a      	ldrb	r2, [r7, #13]
 8008608:	4908      	ldr	r1, [pc, #32]	; (800862c <UARTEx_SetNbDataToProcess+0x90>)
 800860a:	5c8a      	ldrb	r2, [r1, r2]
 800860c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008610:	7b7a      	ldrb	r2, [r7, #13]
 8008612:	4907      	ldr	r1, [pc, #28]	; (8008630 <UARTEx_SetNbDataToProcess+0x94>)
 8008614:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008616:	fb93 f3f2 	sdiv	r3, r3, r2
 800861a:	b29a      	uxth	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008622:	bf00      	nop
 8008624:	3714      	adds	r7, #20
 8008626:	46bd      	mov	sp, r7
 8008628:	bc80      	pop	{r7}
 800862a:	4770      	bx	lr
 800862c:	0800b144 	.word	0x0800b144
 8008630:	0800b14c 	.word	0x0800b14c

08008634 <__errno>:
 8008634:	4b01      	ldr	r3, [pc, #4]	; (800863c <__errno+0x8>)
 8008636:	6818      	ldr	r0, [r3, #0]
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	20000048 	.word	0x20000048

08008640 <__libc_init_array>:
 8008640:	b570      	push	{r4, r5, r6, lr}
 8008642:	4d0d      	ldr	r5, [pc, #52]	; (8008678 <__libc_init_array+0x38>)
 8008644:	4c0d      	ldr	r4, [pc, #52]	; (800867c <__libc_init_array+0x3c>)
 8008646:	1b64      	subs	r4, r4, r5
 8008648:	10a4      	asrs	r4, r4, #2
 800864a:	2600      	movs	r6, #0
 800864c:	42a6      	cmp	r6, r4
 800864e:	d109      	bne.n	8008664 <__libc_init_array+0x24>
 8008650:	4d0b      	ldr	r5, [pc, #44]	; (8008680 <__libc_init_array+0x40>)
 8008652:	4c0c      	ldr	r4, [pc, #48]	; (8008684 <__libc_init_array+0x44>)
 8008654:	f002 f976 	bl	800a944 <_init>
 8008658:	1b64      	subs	r4, r4, r5
 800865a:	10a4      	asrs	r4, r4, #2
 800865c:	2600      	movs	r6, #0
 800865e:	42a6      	cmp	r6, r4
 8008660:	d105      	bne.n	800866e <__libc_init_array+0x2e>
 8008662:	bd70      	pop	{r4, r5, r6, pc}
 8008664:	f855 3b04 	ldr.w	r3, [r5], #4
 8008668:	4798      	blx	r3
 800866a:	3601      	adds	r6, #1
 800866c:	e7ee      	b.n	800864c <__libc_init_array+0xc>
 800866e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008672:	4798      	blx	r3
 8008674:	3601      	adds	r6, #1
 8008676:	e7f2      	b.n	800865e <__libc_init_array+0x1e>
 8008678:	0800b3d8 	.word	0x0800b3d8
 800867c:	0800b3d8 	.word	0x0800b3d8
 8008680:	0800b3d8 	.word	0x0800b3d8
 8008684:	0800b3dc 	.word	0x0800b3dc

08008688 <memset>:
 8008688:	4402      	add	r2, r0
 800868a:	4603      	mov	r3, r0
 800868c:	4293      	cmp	r3, r2
 800868e:	d100      	bne.n	8008692 <memset+0xa>
 8008690:	4770      	bx	lr
 8008692:	f803 1b01 	strb.w	r1, [r3], #1
 8008696:	e7f9      	b.n	800868c <memset+0x4>

08008698 <sniprintf>:
 8008698:	b40c      	push	{r2, r3}
 800869a:	b530      	push	{r4, r5, lr}
 800869c:	4b17      	ldr	r3, [pc, #92]	; (80086fc <sniprintf+0x64>)
 800869e:	1e0c      	subs	r4, r1, #0
 80086a0:	681d      	ldr	r5, [r3, #0]
 80086a2:	b09d      	sub	sp, #116	; 0x74
 80086a4:	da08      	bge.n	80086b8 <sniprintf+0x20>
 80086a6:	238b      	movs	r3, #139	; 0x8b
 80086a8:	602b      	str	r3, [r5, #0]
 80086aa:	f04f 30ff 	mov.w	r0, #4294967295
 80086ae:	b01d      	add	sp, #116	; 0x74
 80086b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086b4:	b002      	add	sp, #8
 80086b6:	4770      	bx	lr
 80086b8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80086bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80086c0:	bf14      	ite	ne
 80086c2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80086c6:	4623      	moveq	r3, r4
 80086c8:	9304      	str	r3, [sp, #16]
 80086ca:	9307      	str	r3, [sp, #28]
 80086cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80086d0:	9002      	str	r0, [sp, #8]
 80086d2:	9006      	str	r0, [sp, #24]
 80086d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80086d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80086da:	ab21      	add	r3, sp, #132	; 0x84
 80086dc:	a902      	add	r1, sp, #8
 80086de:	4628      	mov	r0, r5
 80086e0:	9301      	str	r3, [sp, #4]
 80086e2:	f000 fa0f 	bl	8008b04 <_svfiprintf_r>
 80086e6:	1c43      	adds	r3, r0, #1
 80086e8:	bfbc      	itt	lt
 80086ea:	238b      	movlt	r3, #139	; 0x8b
 80086ec:	602b      	strlt	r3, [r5, #0]
 80086ee:	2c00      	cmp	r4, #0
 80086f0:	d0dd      	beq.n	80086ae <sniprintf+0x16>
 80086f2:	9b02      	ldr	r3, [sp, #8]
 80086f4:	2200      	movs	r2, #0
 80086f6:	701a      	strb	r2, [r3, #0]
 80086f8:	e7d9      	b.n	80086ae <sniprintf+0x16>
 80086fa:	bf00      	nop
 80086fc:	20000048 	.word	0x20000048

08008700 <siprintf>:
 8008700:	b40e      	push	{r1, r2, r3}
 8008702:	b500      	push	{lr}
 8008704:	b09c      	sub	sp, #112	; 0x70
 8008706:	ab1d      	add	r3, sp, #116	; 0x74
 8008708:	9002      	str	r0, [sp, #8]
 800870a:	9006      	str	r0, [sp, #24]
 800870c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008710:	4809      	ldr	r0, [pc, #36]	; (8008738 <siprintf+0x38>)
 8008712:	9107      	str	r1, [sp, #28]
 8008714:	9104      	str	r1, [sp, #16]
 8008716:	4909      	ldr	r1, [pc, #36]	; (800873c <siprintf+0x3c>)
 8008718:	f853 2b04 	ldr.w	r2, [r3], #4
 800871c:	9105      	str	r1, [sp, #20]
 800871e:	6800      	ldr	r0, [r0, #0]
 8008720:	9301      	str	r3, [sp, #4]
 8008722:	a902      	add	r1, sp, #8
 8008724:	f000 f9ee 	bl	8008b04 <_svfiprintf_r>
 8008728:	9b02      	ldr	r3, [sp, #8]
 800872a:	2200      	movs	r2, #0
 800872c:	701a      	strb	r2, [r3, #0]
 800872e:	b01c      	add	sp, #112	; 0x70
 8008730:	f85d eb04 	ldr.w	lr, [sp], #4
 8008734:	b003      	add	sp, #12
 8008736:	4770      	bx	lr
 8008738:	20000048 	.word	0x20000048
 800873c:	ffff0208 	.word	0xffff0208

08008740 <strncmp>:
 8008740:	b510      	push	{r4, lr}
 8008742:	4603      	mov	r3, r0
 8008744:	b172      	cbz	r2, 8008764 <strncmp+0x24>
 8008746:	3901      	subs	r1, #1
 8008748:	1884      	adds	r4, r0, r2
 800874a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800874e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008752:	4290      	cmp	r0, r2
 8008754:	d101      	bne.n	800875a <strncmp+0x1a>
 8008756:	42a3      	cmp	r3, r4
 8008758:	d101      	bne.n	800875e <strncmp+0x1e>
 800875a:	1a80      	subs	r0, r0, r2
 800875c:	bd10      	pop	{r4, pc}
 800875e:	2800      	cmp	r0, #0
 8008760:	d1f3      	bne.n	800874a <strncmp+0xa>
 8008762:	e7fa      	b.n	800875a <strncmp+0x1a>
 8008764:	4610      	mov	r0, r2
 8008766:	e7f9      	b.n	800875c <strncmp+0x1c>

08008768 <strtok>:
 8008768:	4b16      	ldr	r3, [pc, #88]	; (80087c4 <strtok+0x5c>)
 800876a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800876e:	681f      	ldr	r7, [r3, #0]
 8008770:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8008772:	4605      	mov	r5, r0
 8008774:	460e      	mov	r6, r1
 8008776:	b9ec      	cbnz	r4, 80087b4 <strtok+0x4c>
 8008778:	2050      	movs	r0, #80	; 0x50
 800877a:	f000 f881 	bl	8008880 <malloc>
 800877e:	4602      	mov	r2, r0
 8008780:	65b8      	str	r0, [r7, #88]	; 0x58
 8008782:	b920      	cbnz	r0, 800878e <strtok+0x26>
 8008784:	4b10      	ldr	r3, [pc, #64]	; (80087c8 <strtok+0x60>)
 8008786:	4811      	ldr	r0, [pc, #68]	; (80087cc <strtok+0x64>)
 8008788:	2157      	movs	r1, #87	; 0x57
 800878a:	f000 f849 	bl	8008820 <__assert_func>
 800878e:	e9c0 4400 	strd	r4, r4, [r0]
 8008792:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008796:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800879a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800879e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80087a2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80087a6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80087aa:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80087ae:	6184      	str	r4, [r0, #24]
 80087b0:	7704      	strb	r4, [r0, #28]
 80087b2:	6244      	str	r4, [r0, #36]	; 0x24
 80087b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80087b6:	4631      	mov	r1, r6
 80087b8:	4628      	mov	r0, r5
 80087ba:	2301      	movs	r3, #1
 80087bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087c0:	f000 b806 	b.w	80087d0 <__strtok_r>
 80087c4:	20000048 	.word	0x20000048
 80087c8:	0800b25c 	.word	0x0800b25c
 80087cc:	0800b273 	.word	0x0800b273

080087d0 <__strtok_r>:
 80087d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087d2:	b908      	cbnz	r0, 80087d8 <__strtok_r+0x8>
 80087d4:	6810      	ldr	r0, [r2, #0]
 80087d6:	b188      	cbz	r0, 80087fc <__strtok_r+0x2c>
 80087d8:	4604      	mov	r4, r0
 80087da:	4620      	mov	r0, r4
 80087dc:	f814 5b01 	ldrb.w	r5, [r4], #1
 80087e0:	460f      	mov	r7, r1
 80087e2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80087e6:	b91e      	cbnz	r6, 80087f0 <__strtok_r+0x20>
 80087e8:	b965      	cbnz	r5, 8008804 <__strtok_r+0x34>
 80087ea:	6015      	str	r5, [r2, #0]
 80087ec:	4628      	mov	r0, r5
 80087ee:	e005      	b.n	80087fc <__strtok_r+0x2c>
 80087f0:	42b5      	cmp	r5, r6
 80087f2:	d1f6      	bne.n	80087e2 <__strtok_r+0x12>
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d1f0      	bne.n	80087da <__strtok_r+0xa>
 80087f8:	6014      	str	r4, [r2, #0]
 80087fa:	7003      	strb	r3, [r0, #0]
 80087fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087fe:	461c      	mov	r4, r3
 8008800:	e00c      	b.n	800881c <__strtok_r+0x4c>
 8008802:	b915      	cbnz	r5, 800880a <__strtok_r+0x3a>
 8008804:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008808:	460e      	mov	r6, r1
 800880a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800880e:	42ab      	cmp	r3, r5
 8008810:	d1f7      	bne.n	8008802 <__strtok_r+0x32>
 8008812:	2b00      	cmp	r3, #0
 8008814:	d0f3      	beq.n	80087fe <__strtok_r+0x2e>
 8008816:	2300      	movs	r3, #0
 8008818:	f804 3c01 	strb.w	r3, [r4, #-1]
 800881c:	6014      	str	r4, [r2, #0]
 800881e:	e7ed      	b.n	80087fc <__strtok_r+0x2c>

08008820 <__assert_func>:
 8008820:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008822:	4614      	mov	r4, r2
 8008824:	461a      	mov	r2, r3
 8008826:	4b09      	ldr	r3, [pc, #36]	; (800884c <__assert_func+0x2c>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4605      	mov	r5, r0
 800882c:	68d8      	ldr	r0, [r3, #12]
 800882e:	b14c      	cbz	r4, 8008844 <__assert_func+0x24>
 8008830:	4b07      	ldr	r3, [pc, #28]	; (8008850 <__assert_func+0x30>)
 8008832:	9100      	str	r1, [sp, #0]
 8008834:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008838:	4906      	ldr	r1, [pc, #24]	; (8008854 <__assert_func+0x34>)
 800883a:	462b      	mov	r3, r5
 800883c:	f000 f80e 	bl	800885c <fiprintf>
 8008840:	f000 fe1c 	bl	800947c <abort>
 8008844:	4b04      	ldr	r3, [pc, #16]	; (8008858 <__assert_func+0x38>)
 8008846:	461c      	mov	r4, r3
 8008848:	e7f3      	b.n	8008832 <__assert_func+0x12>
 800884a:	bf00      	nop
 800884c:	20000048 	.word	0x20000048
 8008850:	0800b2d0 	.word	0x0800b2d0
 8008854:	0800b2dd 	.word	0x0800b2dd
 8008858:	0800b30b 	.word	0x0800b30b

0800885c <fiprintf>:
 800885c:	b40e      	push	{r1, r2, r3}
 800885e:	b503      	push	{r0, r1, lr}
 8008860:	4601      	mov	r1, r0
 8008862:	ab03      	add	r3, sp, #12
 8008864:	4805      	ldr	r0, [pc, #20]	; (800887c <fiprintf+0x20>)
 8008866:	f853 2b04 	ldr.w	r2, [r3], #4
 800886a:	6800      	ldr	r0, [r0, #0]
 800886c:	9301      	str	r3, [sp, #4]
 800886e:	f000 fa71 	bl	8008d54 <_vfiprintf_r>
 8008872:	b002      	add	sp, #8
 8008874:	f85d eb04 	ldr.w	lr, [sp], #4
 8008878:	b003      	add	sp, #12
 800887a:	4770      	bx	lr
 800887c:	20000048 	.word	0x20000048

08008880 <malloc>:
 8008880:	4b02      	ldr	r3, [pc, #8]	; (800888c <malloc+0xc>)
 8008882:	4601      	mov	r1, r0
 8008884:	6818      	ldr	r0, [r3, #0]
 8008886:	f000 b86d 	b.w	8008964 <_malloc_r>
 800888a:	bf00      	nop
 800888c:	20000048 	.word	0x20000048

08008890 <_free_r>:
 8008890:	b538      	push	{r3, r4, r5, lr}
 8008892:	4605      	mov	r5, r0
 8008894:	2900      	cmp	r1, #0
 8008896:	d041      	beq.n	800891c <_free_r+0x8c>
 8008898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800889c:	1f0c      	subs	r4, r1, #4
 800889e:	2b00      	cmp	r3, #0
 80088a0:	bfb8      	it	lt
 80088a2:	18e4      	addlt	r4, r4, r3
 80088a4:	f001 f836 	bl	8009914 <__malloc_lock>
 80088a8:	4a1d      	ldr	r2, [pc, #116]	; (8008920 <_free_r+0x90>)
 80088aa:	6813      	ldr	r3, [r2, #0]
 80088ac:	b933      	cbnz	r3, 80088bc <_free_r+0x2c>
 80088ae:	6063      	str	r3, [r4, #4]
 80088b0:	6014      	str	r4, [r2, #0]
 80088b2:	4628      	mov	r0, r5
 80088b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088b8:	f001 b832 	b.w	8009920 <__malloc_unlock>
 80088bc:	42a3      	cmp	r3, r4
 80088be:	d908      	bls.n	80088d2 <_free_r+0x42>
 80088c0:	6820      	ldr	r0, [r4, #0]
 80088c2:	1821      	adds	r1, r4, r0
 80088c4:	428b      	cmp	r3, r1
 80088c6:	bf01      	itttt	eq
 80088c8:	6819      	ldreq	r1, [r3, #0]
 80088ca:	685b      	ldreq	r3, [r3, #4]
 80088cc:	1809      	addeq	r1, r1, r0
 80088ce:	6021      	streq	r1, [r4, #0]
 80088d0:	e7ed      	b.n	80088ae <_free_r+0x1e>
 80088d2:	461a      	mov	r2, r3
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	b10b      	cbz	r3, 80088dc <_free_r+0x4c>
 80088d8:	42a3      	cmp	r3, r4
 80088da:	d9fa      	bls.n	80088d2 <_free_r+0x42>
 80088dc:	6811      	ldr	r1, [r2, #0]
 80088de:	1850      	adds	r0, r2, r1
 80088e0:	42a0      	cmp	r0, r4
 80088e2:	d10b      	bne.n	80088fc <_free_r+0x6c>
 80088e4:	6820      	ldr	r0, [r4, #0]
 80088e6:	4401      	add	r1, r0
 80088e8:	1850      	adds	r0, r2, r1
 80088ea:	4283      	cmp	r3, r0
 80088ec:	6011      	str	r1, [r2, #0]
 80088ee:	d1e0      	bne.n	80088b2 <_free_r+0x22>
 80088f0:	6818      	ldr	r0, [r3, #0]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	6053      	str	r3, [r2, #4]
 80088f6:	4401      	add	r1, r0
 80088f8:	6011      	str	r1, [r2, #0]
 80088fa:	e7da      	b.n	80088b2 <_free_r+0x22>
 80088fc:	d902      	bls.n	8008904 <_free_r+0x74>
 80088fe:	230c      	movs	r3, #12
 8008900:	602b      	str	r3, [r5, #0]
 8008902:	e7d6      	b.n	80088b2 <_free_r+0x22>
 8008904:	6820      	ldr	r0, [r4, #0]
 8008906:	1821      	adds	r1, r4, r0
 8008908:	428b      	cmp	r3, r1
 800890a:	bf04      	itt	eq
 800890c:	6819      	ldreq	r1, [r3, #0]
 800890e:	685b      	ldreq	r3, [r3, #4]
 8008910:	6063      	str	r3, [r4, #4]
 8008912:	bf04      	itt	eq
 8008914:	1809      	addeq	r1, r1, r0
 8008916:	6021      	streq	r1, [r4, #0]
 8008918:	6054      	str	r4, [r2, #4]
 800891a:	e7ca      	b.n	80088b2 <_free_r+0x22>
 800891c:	bd38      	pop	{r3, r4, r5, pc}
 800891e:	bf00      	nop
 8008920:	200005e4 	.word	0x200005e4

08008924 <sbrk_aligned>:
 8008924:	b570      	push	{r4, r5, r6, lr}
 8008926:	4e0e      	ldr	r6, [pc, #56]	; (8008960 <sbrk_aligned+0x3c>)
 8008928:	460c      	mov	r4, r1
 800892a:	6831      	ldr	r1, [r6, #0]
 800892c:	4605      	mov	r5, r0
 800892e:	b911      	cbnz	r1, 8008936 <sbrk_aligned+0x12>
 8008930:	f000 fcd4 	bl	80092dc <_sbrk_r>
 8008934:	6030      	str	r0, [r6, #0]
 8008936:	4621      	mov	r1, r4
 8008938:	4628      	mov	r0, r5
 800893a:	f000 fccf 	bl	80092dc <_sbrk_r>
 800893e:	1c43      	adds	r3, r0, #1
 8008940:	d00a      	beq.n	8008958 <sbrk_aligned+0x34>
 8008942:	1cc4      	adds	r4, r0, #3
 8008944:	f024 0403 	bic.w	r4, r4, #3
 8008948:	42a0      	cmp	r0, r4
 800894a:	d007      	beq.n	800895c <sbrk_aligned+0x38>
 800894c:	1a21      	subs	r1, r4, r0
 800894e:	4628      	mov	r0, r5
 8008950:	f000 fcc4 	bl	80092dc <_sbrk_r>
 8008954:	3001      	adds	r0, #1
 8008956:	d101      	bne.n	800895c <sbrk_aligned+0x38>
 8008958:	f04f 34ff 	mov.w	r4, #4294967295
 800895c:	4620      	mov	r0, r4
 800895e:	bd70      	pop	{r4, r5, r6, pc}
 8008960:	200005e8 	.word	0x200005e8

08008964 <_malloc_r>:
 8008964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008968:	1ccd      	adds	r5, r1, #3
 800896a:	f025 0503 	bic.w	r5, r5, #3
 800896e:	3508      	adds	r5, #8
 8008970:	2d0c      	cmp	r5, #12
 8008972:	bf38      	it	cc
 8008974:	250c      	movcc	r5, #12
 8008976:	2d00      	cmp	r5, #0
 8008978:	4607      	mov	r7, r0
 800897a:	db01      	blt.n	8008980 <_malloc_r+0x1c>
 800897c:	42a9      	cmp	r1, r5
 800897e:	d905      	bls.n	800898c <_malloc_r+0x28>
 8008980:	230c      	movs	r3, #12
 8008982:	603b      	str	r3, [r7, #0]
 8008984:	2600      	movs	r6, #0
 8008986:	4630      	mov	r0, r6
 8008988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800898c:	4e2e      	ldr	r6, [pc, #184]	; (8008a48 <_malloc_r+0xe4>)
 800898e:	f000 ffc1 	bl	8009914 <__malloc_lock>
 8008992:	6833      	ldr	r3, [r6, #0]
 8008994:	461c      	mov	r4, r3
 8008996:	bb34      	cbnz	r4, 80089e6 <_malloc_r+0x82>
 8008998:	4629      	mov	r1, r5
 800899a:	4638      	mov	r0, r7
 800899c:	f7ff ffc2 	bl	8008924 <sbrk_aligned>
 80089a0:	1c43      	adds	r3, r0, #1
 80089a2:	4604      	mov	r4, r0
 80089a4:	d14d      	bne.n	8008a42 <_malloc_r+0xde>
 80089a6:	6834      	ldr	r4, [r6, #0]
 80089a8:	4626      	mov	r6, r4
 80089aa:	2e00      	cmp	r6, #0
 80089ac:	d140      	bne.n	8008a30 <_malloc_r+0xcc>
 80089ae:	6823      	ldr	r3, [r4, #0]
 80089b0:	4631      	mov	r1, r6
 80089b2:	4638      	mov	r0, r7
 80089b4:	eb04 0803 	add.w	r8, r4, r3
 80089b8:	f000 fc90 	bl	80092dc <_sbrk_r>
 80089bc:	4580      	cmp	r8, r0
 80089be:	d13a      	bne.n	8008a36 <_malloc_r+0xd2>
 80089c0:	6821      	ldr	r1, [r4, #0]
 80089c2:	3503      	adds	r5, #3
 80089c4:	1a6d      	subs	r5, r5, r1
 80089c6:	f025 0503 	bic.w	r5, r5, #3
 80089ca:	3508      	adds	r5, #8
 80089cc:	2d0c      	cmp	r5, #12
 80089ce:	bf38      	it	cc
 80089d0:	250c      	movcc	r5, #12
 80089d2:	4629      	mov	r1, r5
 80089d4:	4638      	mov	r0, r7
 80089d6:	f7ff ffa5 	bl	8008924 <sbrk_aligned>
 80089da:	3001      	adds	r0, #1
 80089dc:	d02b      	beq.n	8008a36 <_malloc_r+0xd2>
 80089de:	6823      	ldr	r3, [r4, #0]
 80089e0:	442b      	add	r3, r5
 80089e2:	6023      	str	r3, [r4, #0]
 80089e4:	e00e      	b.n	8008a04 <_malloc_r+0xa0>
 80089e6:	6822      	ldr	r2, [r4, #0]
 80089e8:	1b52      	subs	r2, r2, r5
 80089ea:	d41e      	bmi.n	8008a2a <_malloc_r+0xc6>
 80089ec:	2a0b      	cmp	r2, #11
 80089ee:	d916      	bls.n	8008a1e <_malloc_r+0xba>
 80089f0:	1961      	adds	r1, r4, r5
 80089f2:	42a3      	cmp	r3, r4
 80089f4:	6025      	str	r5, [r4, #0]
 80089f6:	bf18      	it	ne
 80089f8:	6059      	strne	r1, [r3, #4]
 80089fa:	6863      	ldr	r3, [r4, #4]
 80089fc:	bf08      	it	eq
 80089fe:	6031      	streq	r1, [r6, #0]
 8008a00:	5162      	str	r2, [r4, r5]
 8008a02:	604b      	str	r3, [r1, #4]
 8008a04:	4638      	mov	r0, r7
 8008a06:	f104 060b 	add.w	r6, r4, #11
 8008a0a:	f000 ff89 	bl	8009920 <__malloc_unlock>
 8008a0e:	f026 0607 	bic.w	r6, r6, #7
 8008a12:	1d23      	adds	r3, r4, #4
 8008a14:	1af2      	subs	r2, r6, r3
 8008a16:	d0b6      	beq.n	8008986 <_malloc_r+0x22>
 8008a18:	1b9b      	subs	r3, r3, r6
 8008a1a:	50a3      	str	r3, [r4, r2]
 8008a1c:	e7b3      	b.n	8008986 <_malloc_r+0x22>
 8008a1e:	6862      	ldr	r2, [r4, #4]
 8008a20:	42a3      	cmp	r3, r4
 8008a22:	bf0c      	ite	eq
 8008a24:	6032      	streq	r2, [r6, #0]
 8008a26:	605a      	strne	r2, [r3, #4]
 8008a28:	e7ec      	b.n	8008a04 <_malloc_r+0xa0>
 8008a2a:	4623      	mov	r3, r4
 8008a2c:	6864      	ldr	r4, [r4, #4]
 8008a2e:	e7b2      	b.n	8008996 <_malloc_r+0x32>
 8008a30:	4634      	mov	r4, r6
 8008a32:	6876      	ldr	r6, [r6, #4]
 8008a34:	e7b9      	b.n	80089aa <_malloc_r+0x46>
 8008a36:	230c      	movs	r3, #12
 8008a38:	603b      	str	r3, [r7, #0]
 8008a3a:	4638      	mov	r0, r7
 8008a3c:	f000 ff70 	bl	8009920 <__malloc_unlock>
 8008a40:	e7a1      	b.n	8008986 <_malloc_r+0x22>
 8008a42:	6025      	str	r5, [r4, #0]
 8008a44:	e7de      	b.n	8008a04 <_malloc_r+0xa0>
 8008a46:	bf00      	nop
 8008a48:	200005e4 	.word	0x200005e4

08008a4c <__ssputs_r>:
 8008a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a50:	688e      	ldr	r6, [r1, #8]
 8008a52:	429e      	cmp	r6, r3
 8008a54:	4682      	mov	sl, r0
 8008a56:	460c      	mov	r4, r1
 8008a58:	4690      	mov	r8, r2
 8008a5a:	461f      	mov	r7, r3
 8008a5c:	d838      	bhi.n	8008ad0 <__ssputs_r+0x84>
 8008a5e:	898a      	ldrh	r2, [r1, #12]
 8008a60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a64:	d032      	beq.n	8008acc <__ssputs_r+0x80>
 8008a66:	6825      	ldr	r5, [r4, #0]
 8008a68:	6909      	ldr	r1, [r1, #16]
 8008a6a:	eba5 0901 	sub.w	r9, r5, r1
 8008a6e:	6965      	ldr	r5, [r4, #20]
 8008a70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a78:	3301      	adds	r3, #1
 8008a7a:	444b      	add	r3, r9
 8008a7c:	106d      	asrs	r5, r5, #1
 8008a7e:	429d      	cmp	r5, r3
 8008a80:	bf38      	it	cc
 8008a82:	461d      	movcc	r5, r3
 8008a84:	0553      	lsls	r3, r2, #21
 8008a86:	d531      	bpl.n	8008aec <__ssputs_r+0xa0>
 8008a88:	4629      	mov	r1, r5
 8008a8a:	f7ff ff6b 	bl	8008964 <_malloc_r>
 8008a8e:	4606      	mov	r6, r0
 8008a90:	b950      	cbnz	r0, 8008aa8 <__ssputs_r+0x5c>
 8008a92:	230c      	movs	r3, #12
 8008a94:	f8ca 3000 	str.w	r3, [sl]
 8008a98:	89a3      	ldrh	r3, [r4, #12]
 8008a9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a9e:	81a3      	strh	r3, [r4, #12]
 8008aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aa8:	6921      	ldr	r1, [r4, #16]
 8008aaa:	464a      	mov	r2, r9
 8008aac:	f000 ff0a 	bl	80098c4 <memcpy>
 8008ab0:	89a3      	ldrh	r3, [r4, #12]
 8008ab2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aba:	81a3      	strh	r3, [r4, #12]
 8008abc:	6126      	str	r6, [r4, #16]
 8008abe:	6165      	str	r5, [r4, #20]
 8008ac0:	444e      	add	r6, r9
 8008ac2:	eba5 0509 	sub.w	r5, r5, r9
 8008ac6:	6026      	str	r6, [r4, #0]
 8008ac8:	60a5      	str	r5, [r4, #8]
 8008aca:	463e      	mov	r6, r7
 8008acc:	42be      	cmp	r6, r7
 8008ace:	d900      	bls.n	8008ad2 <__ssputs_r+0x86>
 8008ad0:	463e      	mov	r6, r7
 8008ad2:	6820      	ldr	r0, [r4, #0]
 8008ad4:	4632      	mov	r2, r6
 8008ad6:	4641      	mov	r1, r8
 8008ad8:	f000 ff02 	bl	80098e0 <memmove>
 8008adc:	68a3      	ldr	r3, [r4, #8]
 8008ade:	1b9b      	subs	r3, r3, r6
 8008ae0:	60a3      	str	r3, [r4, #8]
 8008ae2:	6823      	ldr	r3, [r4, #0]
 8008ae4:	4433      	add	r3, r6
 8008ae6:	6023      	str	r3, [r4, #0]
 8008ae8:	2000      	movs	r0, #0
 8008aea:	e7db      	b.n	8008aa4 <__ssputs_r+0x58>
 8008aec:	462a      	mov	r2, r5
 8008aee:	f000 ff1d 	bl	800992c <_realloc_r>
 8008af2:	4606      	mov	r6, r0
 8008af4:	2800      	cmp	r0, #0
 8008af6:	d1e1      	bne.n	8008abc <__ssputs_r+0x70>
 8008af8:	6921      	ldr	r1, [r4, #16]
 8008afa:	4650      	mov	r0, sl
 8008afc:	f7ff fec8 	bl	8008890 <_free_r>
 8008b00:	e7c7      	b.n	8008a92 <__ssputs_r+0x46>
	...

08008b04 <_svfiprintf_r>:
 8008b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b08:	4698      	mov	r8, r3
 8008b0a:	898b      	ldrh	r3, [r1, #12]
 8008b0c:	061b      	lsls	r3, r3, #24
 8008b0e:	b09d      	sub	sp, #116	; 0x74
 8008b10:	4607      	mov	r7, r0
 8008b12:	460d      	mov	r5, r1
 8008b14:	4614      	mov	r4, r2
 8008b16:	d50e      	bpl.n	8008b36 <_svfiprintf_r+0x32>
 8008b18:	690b      	ldr	r3, [r1, #16]
 8008b1a:	b963      	cbnz	r3, 8008b36 <_svfiprintf_r+0x32>
 8008b1c:	2140      	movs	r1, #64	; 0x40
 8008b1e:	f7ff ff21 	bl	8008964 <_malloc_r>
 8008b22:	6028      	str	r0, [r5, #0]
 8008b24:	6128      	str	r0, [r5, #16]
 8008b26:	b920      	cbnz	r0, 8008b32 <_svfiprintf_r+0x2e>
 8008b28:	230c      	movs	r3, #12
 8008b2a:	603b      	str	r3, [r7, #0]
 8008b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b30:	e0d1      	b.n	8008cd6 <_svfiprintf_r+0x1d2>
 8008b32:	2340      	movs	r3, #64	; 0x40
 8008b34:	616b      	str	r3, [r5, #20]
 8008b36:	2300      	movs	r3, #0
 8008b38:	9309      	str	r3, [sp, #36]	; 0x24
 8008b3a:	2320      	movs	r3, #32
 8008b3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b40:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b44:	2330      	movs	r3, #48	; 0x30
 8008b46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008cf0 <_svfiprintf_r+0x1ec>
 8008b4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b4e:	f04f 0901 	mov.w	r9, #1
 8008b52:	4623      	mov	r3, r4
 8008b54:	469a      	mov	sl, r3
 8008b56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b5a:	b10a      	cbz	r2, 8008b60 <_svfiprintf_r+0x5c>
 8008b5c:	2a25      	cmp	r2, #37	; 0x25
 8008b5e:	d1f9      	bne.n	8008b54 <_svfiprintf_r+0x50>
 8008b60:	ebba 0b04 	subs.w	fp, sl, r4
 8008b64:	d00b      	beq.n	8008b7e <_svfiprintf_r+0x7a>
 8008b66:	465b      	mov	r3, fp
 8008b68:	4622      	mov	r2, r4
 8008b6a:	4629      	mov	r1, r5
 8008b6c:	4638      	mov	r0, r7
 8008b6e:	f7ff ff6d 	bl	8008a4c <__ssputs_r>
 8008b72:	3001      	adds	r0, #1
 8008b74:	f000 80aa 	beq.w	8008ccc <_svfiprintf_r+0x1c8>
 8008b78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b7a:	445a      	add	r2, fp
 8008b7c:	9209      	str	r2, [sp, #36]	; 0x24
 8008b7e:	f89a 3000 	ldrb.w	r3, [sl]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	f000 80a2 	beq.w	8008ccc <_svfiprintf_r+0x1c8>
 8008b88:	2300      	movs	r3, #0
 8008b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b92:	f10a 0a01 	add.w	sl, sl, #1
 8008b96:	9304      	str	r3, [sp, #16]
 8008b98:	9307      	str	r3, [sp, #28]
 8008b9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b9e:	931a      	str	r3, [sp, #104]	; 0x68
 8008ba0:	4654      	mov	r4, sl
 8008ba2:	2205      	movs	r2, #5
 8008ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ba8:	4851      	ldr	r0, [pc, #324]	; (8008cf0 <_svfiprintf_r+0x1ec>)
 8008baa:	f7f7 faf1 	bl	8000190 <memchr>
 8008bae:	9a04      	ldr	r2, [sp, #16]
 8008bb0:	b9d8      	cbnz	r0, 8008bea <_svfiprintf_r+0xe6>
 8008bb2:	06d0      	lsls	r0, r2, #27
 8008bb4:	bf44      	itt	mi
 8008bb6:	2320      	movmi	r3, #32
 8008bb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bbc:	0711      	lsls	r1, r2, #28
 8008bbe:	bf44      	itt	mi
 8008bc0:	232b      	movmi	r3, #43	; 0x2b
 8008bc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bc6:	f89a 3000 	ldrb.w	r3, [sl]
 8008bca:	2b2a      	cmp	r3, #42	; 0x2a
 8008bcc:	d015      	beq.n	8008bfa <_svfiprintf_r+0xf6>
 8008bce:	9a07      	ldr	r2, [sp, #28]
 8008bd0:	4654      	mov	r4, sl
 8008bd2:	2000      	movs	r0, #0
 8008bd4:	f04f 0c0a 	mov.w	ip, #10
 8008bd8:	4621      	mov	r1, r4
 8008bda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bde:	3b30      	subs	r3, #48	; 0x30
 8008be0:	2b09      	cmp	r3, #9
 8008be2:	d94e      	bls.n	8008c82 <_svfiprintf_r+0x17e>
 8008be4:	b1b0      	cbz	r0, 8008c14 <_svfiprintf_r+0x110>
 8008be6:	9207      	str	r2, [sp, #28]
 8008be8:	e014      	b.n	8008c14 <_svfiprintf_r+0x110>
 8008bea:	eba0 0308 	sub.w	r3, r0, r8
 8008bee:	fa09 f303 	lsl.w	r3, r9, r3
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	9304      	str	r3, [sp, #16]
 8008bf6:	46a2      	mov	sl, r4
 8008bf8:	e7d2      	b.n	8008ba0 <_svfiprintf_r+0x9c>
 8008bfa:	9b03      	ldr	r3, [sp, #12]
 8008bfc:	1d19      	adds	r1, r3, #4
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	9103      	str	r1, [sp, #12]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	bfbb      	ittet	lt
 8008c06:	425b      	neglt	r3, r3
 8008c08:	f042 0202 	orrlt.w	r2, r2, #2
 8008c0c:	9307      	strge	r3, [sp, #28]
 8008c0e:	9307      	strlt	r3, [sp, #28]
 8008c10:	bfb8      	it	lt
 8008c12:	9204      	strlt	r2, [sp, #16]
 8008c14:	7823      	ldrb	r3, [r4, #0]
 8008c16:	2b2e      	cmp	r3, #46	; 0x2e
 8008c18:	d10c      	bne.n	8008c34 <_svfiprintf_r+0x130>
 8008c1a:	7863      	ldrb	r3, [r4, #1]
 8008c1c:	2b2a      	cmp	r3, #42	; 0x2a
 8008c1e:	d135      	bne.n	8008c8c <_svfiprintf_r+0x188>
 8008c20:	9b03      	ldr	r3, [sp, #12]
 8008c22:	1d1a      	adds	r2, r3, #4
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	9203      	str	r2, [sp, #12]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	bfb8      	it	lt
 8008c2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c30:	3402      	adds	r4, #2
 8008c32:	9305      	str	r3, [sp, #20]
 8008c34:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008cf4 <_svfiprintf_r+0x1f0>
 8008c38:	7821      	ldrb	r1, [r4, #0]
 8008c3a:	2203      	movs	r2, #3
 8008c3c:	4650      	mov	r0, sl
 8008c3e:	f7f7 faa7 	bl	8000190 <memchr>
 8008c42:	b140      	cbz	r0, 8008c56 <_svfiprintf_r+0x152>
 8008c44:	2340      	movs	r3, #64	; 0x40
 8008c46:	eba0 000a 	sub.w	r0, r0, sl
 8008c4a:	fa03 f000 	lsl.w	r0, r3, r0
 8008c4e:	9b04      	ldr	r3, [sp, #16]
 8008c50:	4303      	orrs	r3, r0
 8008c52:	3401      	adds	r4, #1
 8008c54:	9304      	str	r3, [sp, #16]
 8008c56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c5a:	4827      	ldr	r0, [pc, #156]	; (8008cf8 <_svfiprintf_r+0x1f4>)
 8008c5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c60:	2206      	movs	r2, #6
 8008c62:	f7f7 fa95 	bl	8000190 <memchr>
 8008c66:	2800      	cmp	r0, #0
 8008c68:	d038      	beq.n	8008cdc <_svfiprintf_r+0x1d8>
 8008c6a:	4b24      	ldr	r3, [pc, #144]	; (8008cfc <_svfiprintf_r+0x1f8>)
 8008c6c:	bb1b      	cbnz	r3, 8008cb6 <_svfiprintf_r+0x1b2>
 8008c6e:	9b03      	ldr	r3, [sp, #12]
 8008c70:	3307      	adds	r3, #7
 8008c72:	f023 0307 	bic.w	r3, r3, #7
 8008c76:	3308      	adds	r3, #8
 8008c78:	9303      	str	r3, [sp, #12]
 8008c7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c7c:	4433      	add	r3, r6
 8008c7e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c80:	e767      	b.n	8008b52 <_svfiprintf_r+0x4e>
 8008c82:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c86:	460c      	mov	r4, r1
 8008c88:	2001      	movs	r0, #1
 8008c8a:	e7a5      	b.n	8008bd8 <_svfiprintf_r+0xd4>
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	3401      	adds	r4, #1
 8008c90:	9305      	str	r3, [sp, #20]
 8008c92:	4619      	mov	r1, r3
 8008c94:	f04f 0c0a 	mov.w	ip, #10
 8008c98:	4620      	mov	r0, r4
 8008c9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c9e:	3a30      	subs	r2, #48	; 0x30
 8008ca0:	2a09      	cmp	r2, #9
 8008ca2:	d903      	bls.n	8008cac <_svfiprintf_r+0x1a8>
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d0c5      	beq.n	8008c34 <_svfiprintf_r+0x130>
 8008ca8:	9105      	str	r1, [sp, #20]
 8008caa:	e7c3      	b.n	8008c34 <_svfiprintf_r+0x130>
 8008cac:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cb0:	4604      	mov	r4, r0
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e7f0      	b.n	8008c98 <_svfiprintf_r+0x194>
 8008cb6:	ab03      	add	r3, sp, #12
 8008cb8:	9300      	str	r3, [sp, #0]
 8008cba:	462a      	mov	r2, r5
 8008cbc:	4b10      	ldr	r3, [pc, #64]	; (8008d00 <_svfiprintf_r+0x1fc>)
 8008cbe:	a904      	add	r1, sp, #16
 8008cc0:	4638      	mov	r0, r7
 8008cc2:	f3af 8000 	nop.w
 8008cc6:	1c42      	adds	r2, r0, #1
 8008cc8:	4606      	mov	r6, r0
 8008cca:	d1d6      	bne.n	8008c7a <_svfiprintf_r+0x176>
 8008ccc:	89ab      	ldrh	r3, [r5, #12]
 8008cce:	065b      	lsls	r3, r3, #25
 8008cd0:	f53f af2c 	bmi.w	8008b2c <_svfiprintf_r+0x28>
 8008cd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cd6:	b01d      	add	sp, #116	; 0x74
 8008cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cdc:	ab03      	add	r3, sp, #12
 8008cde:	9300      	str	r3, [sp, #0]
 8008ce0:	462a      	mov	r2, r5
 8008ce2:	4b07      	ldr	r3, [pc, #28]	; (8008d00 <_svfiprintf_r+0x1fc>)
 8008ce4:	a904      	add	r1, sp, #16
 8008ce6:	4638      	mov	r0, r7
 8008ce8:	f000 f9d2 	bl	8009090 <_printf_i>
 8008cec:	e7eb      	b.n	8008cc6 <_svfiprintf_r+0x1c2>
 8008cee:	bf00      	nop
 8008cf0:	0800b30c 	.word	0x0800b30c
 8008cf4:	0800b312 	.word	0x0800b312
 8008cf8:	0800b316 	.word	0x0800b316
 8008cfc:	00000000 	.word	0x00000000
 8008d00:	08008a4d 	.word	0x08008a4d

08008d04 <__sfputc_r>:
 8008d04:	6893      	ldr	r3, [r2, #8]
 8008d06:	3b01      	subs	r3, #1
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	b410      	push	{r4}
 8008d0c:	6093      	str	r3, [r2, #8]
 8008d0e:	da07      	bge.n	8008d20 <__sfputc_r+0x1c>
 8008d10:	6994      	ldr	r4, [r2, #24]
 8008d12:	42a3      	cmp	r3, r4
 8008d14:	db01      	blt.n	8008d1a <__sfputc_r+0x16>
 8008d16:	290a      	cmp	r1, #10
 8008d18:	d102      	bne.n	8008d20 <__sfputc_r+0x1c>
 8008d1a:	bc10      	pop	{r4}
 8008d1c:	f000 baee 	b.w	80092fc <__swbuf_r>
 8008d20:	6813      	ldr	r3, [r2, #0]
 8008d22:	1c58      	adds	r0, r3, #1
 8008d24:	6010      	str	r0, [r2, #0]
 8008d26:	7019      	strb	r1, [r3, #0]
 8008d28:	4608      	mov	r0, r1
 8008d2a:	bc10      	pop	{r4}
 8008d2c:	4770      	bx	lr

08008d2e <__sfputs_r>:
 8008d2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d30:	4606      	mov	r6, r0
 8008d32:	460f      	mov	r7, r1
 8008d34:	4614      	mov	r4, r2
 8008d36:	18d5      	adds	r5, r2, r3
 8008d38:	42ac      	cmp	r4, r5
 8008d3a:	d101      	bne.n	8008d40 <__sfputs_r+0x12>
 8008d3c:	2000      	movs	r0, #0
 8008d3e:	e007      	b.n	8008d50 <__sfputs_r+0x22>
 8008d40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d44:	463a      	mov	r2, r7
 8008d46:	4630      	mov	r0, r6
 8008d48:	f7ff ffdc 	bl	8008d04 <__sfputc_r>
 8008d4c:	1c43      	adds	r3, r0, #1
 8008d4e:	d1f3      	bne.n	8008d38 <__sfputs_r+0xa>
 8008d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008d54 <_vfiprintf_r>:
 8008d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d58:	460d      	mov	r5, r1
 8008d5a:	b09d      	sub	sp, #116	; 0x74
 8008d5c:	4614      	mov	r4, r2
 8008d5e:	4698      	mov	r8, r3
 8008d60:	4606      	mov	r6, r0
 8008d62:	b118      	cbz	r0, 8008d6c <_vfiprintf_r+0x18>
 8008d64:	6983      	ldr	r3, [r0, #24]
 8008d66:	b90b      	cbnz	r3, 8008d6c <_vfiprintf_r+0x18>
 8008d68:	f000 fca6 	bl	80096b8 <__sinit>
 8008d6c:	4b89      	ldr	r3, [pc, #548]	; (8008f94 <_vfiprintf_r+0x240>)
 8008d6e:	429d      	cmp	r5, r3
 8008d70:	d11b      	bne.n	8008daa <_vfiprintf_r+0x56>
 8008d72:	6875      	ldr	r5, [r6, #4]
 8008d74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d76:	07d9      	lsls	r1, r3, #31
 8008d78:	d405      	bmi.n	8008d86 <_vfiprintf_r+0x32>
 8008d7a:	89ab      	ldrh	r3, [r5, #12]
 8008d7c:	059a      	lsls	r2, r3, #22
 8008d7e:	d402      	bmi.n	8008d86 <_vfiprintf_r+0x32>
 8008d80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d82:	f000 fd37 	bl	80097f4 <__retarget_lock_acquire_recursive>
 8008d86:	89ab      	ldrh	r3, [r5, #12]
 8008d88:	071b      	lsls	r3, r3, #28
 8008d8a:	d501      	bpl.n	8008d90 <_vfiprintf_r+0x3c>
 8008d8c:	692b      	ldr	r3, [r5, #16]
 8008d8e:	b9eb      	cbnz	r3, 8008dcc <_vfiprintf_r+0x78>
 8008d90:	4629      	mov	r1, r5
 8008d92:	4630      	mov	r0, r6
 8008d94:	f000 fb04 	bl	80093a0 <__swsetup_r>
 8008d98:	b1c0      	cbz	r0, 8008dcc <_vfiprintf_r+0x78>
 8008d9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d9c:	07dc      	lsls	r4, r3, #31
 8008d9e:	d50e      	bpl.n	8008dbe <_vfiprintf_r+0x6a>
 8008da0:	f04f 30ff 	mov.w	r0, #4294967295
 8008da4:	b01d      	add	sp, #116	; 0x74
 8008da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008daa:	4b7b      	ldr	r3, [pc, #492]	; (8008f98 <_vfiprintf_r+0x244>)
 8008dac:	429d      	cmp	r5, r3
 8008dae:	d101      	bne.n	8008db4 <_vfiprintf_r+0x60>
 8008db0:	68b5      	ldr	r5, [r6, #8]
 8008db2:	e7df      	b.n	8008d74 <_vfiprintf_r+0x20>
 8008db4:	4b79      	ldr	r3, [pc, #484]	; (8008f9c <_vfiprintf_r+0x248>)
 8008db6:	429d      	cmp	r5, r3
 8008db8:	bf08      	it	eq
 8008dba:	68f5      	ldreq	r5, [r6, #12]
 8008dbc:	e7da      	b.n	8008d74 <_vfiprintf_r+0x20>
 8008dbe:	89ab      	ldrh	r3, [r5, #12]
 8008dc0:	0598      	lsls	r0, r3, #22
 8008dc2:	d4ed      	bmi.n	8008da0 <_vfiprintf_r+0x4c>
 8008dc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008dc6:	f000 fd16 	bl	80097f6 <__retarget_lock_release_recursive>
 8008dca:	e7e9      	b.n	8008da0 <_vfiprintf_r+0x4c>
 8008dcc:	2300      	movs	r3, #0
 8008dce:	9309      	str	r3, [sp, #36]	; 0x24
 8008dd0:	2320      	movs	r3, #32
 8008dd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008dd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008dda:	2330      	movs	r3, #48	; 0x30
 8008ddc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008fa0 <_vfiprintf_r+0x24c>
 8008de0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008de4:	f04f 0901 	mov.w	r9, #1
 8008de8:	4623      	mov	r3, r4
 8008dea:	469a      	mov	sl, r3
 8008dec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008df0:	b10a      	cbz	r2, 8008df6 <_vfiprintf_r+0xa2>
 8008df2:	2a25      	cmp	r2, #37	; 0x25
 8008df4:	d1f9      	bne.n	8008dea <_vfiprintf_r+0x96>
 8008df6:	ebba 0b04 	subs.w	fp, sl, r4
 8008dfa:	d00b      	beq.n	8008e14 <_vfiprintf_r+0xc0>
 8008dfc:	465b      	mov	r3, fp
 8008dfe:	4622      	mov	r2, r4
 8008e00:	4629      	mov	r1, r5
 8008e02:	4630      	mov	r0, r6
 8008e04:	f7ff ff93 	bl	8008d2e <__sfputs_r>
 8008e08:	3001      	adds	r0, #1
 8008e0a:	f000 80aa 	beq.w	8008f62 <_vfiprintf_r+0x20e>
 8008e0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e10:	445a      	add	r2, fp
 8008e12:	9209      	str	r2, [sp, #36]	; 0x24
 8008e14:	f89a 3000 	ldrb.w	r3, [sl]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	f000 80a2 	beq.w	8008f62 <_vfiprintf_r+0x20e>
 8008e1e:	2300      	movs	r3, #0
 8008e20:	f04f 32ff 	mov.w	r2, #4294967295
 8008e24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e28:	f10a 0a01 	add.w	sl, sl, #1
 8008e2c:	9304      	str	r3, [sp, #16]
 8008e2e:	9307      	str	r3, [sp, #28]
 8008e30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e34:	931a      	str	r3, [sp, #104]	; 0x68
 8008e36:	4654      	mov	r4, sl
 8008e38:	2205      	movs	r2, #5
 8008e3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e3e:	4858      	ldr	r0, [pc, #352]	; (8008fa0 <_vfiprintf_r+0x24c>)
 8008e40:	f7f7 f9a6 	bl	8000190 <memchr>
 8008e44:	9a04      	ldr	r2, [sp, #16]
 8008e46:	b9d8      	cbnz	r0, 8008e80 <_vfiprintf_r+0x12c>
 8008e48:	06d1      	lsls	r1, r2, #27
 8008e4a:	bf44      	itt	mi
 8008e4c:	2320      	movmi	r3, #32
 8008e4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e52:	0713      	lsls	r3, r2, #28
 8008e54:	bf44      	itt	mi
 8008e56:	232b      	movmi	r3, #43	; 0x2b
 8008e58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e5c:	f89a 3000 	ldrb.w	r3, [sl]
 8008e60:	2b2a      	cmp	r3, #42	; 0x2a
 8008e62:	d015      	beq.n	8008e90 <_vfiprintf_r+0x13c>
 8008e64:	9a07      	ldr	r2, [sp, #28]
 8008e66:	4654      	mov	r4, sl
 8008e68:	2000      	movs	r0, #0
 8008e6a:	f04f 0c0a 	mov.w	ip, #10
 8008e6e:	4621      	mov	r1, r4
 8008e70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e74:	3b30      	subs	r3, #48	; 0x30
 8008e76:	2b09      	cmp	r3, #9
 8008e78:	d94e      	bls.n	8008f18 <_vfiprintf_r+0x1c4>
 8008e7a:	b1b0      	cbz	r0, 8008eaa <_vfiprintf_r+0x156>
 8008e7c:	9207      	str	r2, [sp, #28]
 8008e7e:	e014      	b.n	8008eaa <_vfiprintf_r+0x156>
 8008e80:	eba0 0308 	sub.w	r3, r0, r8
 8008e84:	fa09 f303 	lsl.w	r3, r9, r3
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	9304      	str	r3, [sp, #16]
 8008e8c:	46a2      	mov	sl, r4
 8008e8e:	e7d2      	b.n	8008e36 <_vfiprintf_r+0xe2>
 8008e90:	9b03      	ldr	r3, [sp, #12]
 8008e92:	1d19      	adds	r1, r3, #4
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	9103      	str	r1, [sp, #12]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	bfbb      	ittet	lt
 8008e9c:	425b      	neglt	r3, r3
 8008e9e:	f042 0202 	orrlt.w	r2, r2, #2
 8008ea2:	9307      	strge	r3, [sp, #28]
 8008ea4:	9307      	strlt	r3, [sp, #28]
 8008ea6:	bfb8      	it	lt
 8008ea8:	9204      	strlt	r2, [sp, #16]
 8008eaa:	7823      	ldrb	r3, [r4, #0]
 8008eac:	2b2e      	cmp	r3, #46	; 0x2e
 8008eae:	d10c      	bne.n	8008eca <_vfiprintf_r+0x176>
 8008eb0:	7863      	ldrb	r3, [r4, #1]
 8008eb2:	2b2a      	cmp	r3, #42	; 0x2a
 8008eb4:	d135      	bne.n	8008f22 <_vfiprintf_r+0x1ce>
 8008eb6:	9b03      	ldr	r3, [sp, #12]
 8008eb8:	1d1a      	adds	r2, r3, #4
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	9203      	str	r2, [sp, #12]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	bfb8      	it	lt
 8008ec2:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ec6:	3402      	adds	r4, #2
 8008ec8:	9305      	str	r3, [sp, #20]
 8008eca:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008fa4 <_vfiprintf_r+0x250>
 8008ece:	7821      	ldrb	r1, [r4, #0]
 8008ed0:	2203      	movs	r2, #3
 8008ed2:	4650      	mov	r0, sl
 8008ed4:	f7f7 f95c 	bl	8000190 <memchr>
 8008ed8:	b140      	cbz	r0, 8008eec <_vfiprintf_r+0x198>
 8008eda:	2340      	movs	r3, #64	; 0x40
 8008edc:	eba0 000a 	sub.w	r0, r0, sl
 8008ee0:	fa03 f000 	lsl.w	r0, r3, r0
 8008ee4:	9b04      	ldr	r3, [sp, #16]
 8008ee6:	4303      	orrs	r3, r0
 8008ee8:	3401      	adds	r4, #1
 8008eea:	9304      	str	r3, [sp, #16]
 8008eec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ef0:	482d      	ldr	r0, [pc, #180]	; (8008fa8 <_vfiprintf_r+0x254>)
 8008ef2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ef6:	2206      	movs	r2, #6
 8008ef8:	f7f7 f94a 	bl	8000190 <memchr>
 8008efc:	2800      	cmp	r0, #0
 8008efe:	d03f      	beq.n	8008f80 <_vfiprintf_r+0x22c>
 8008f00:	4b2a      	ldr	r3, [pc, #168]	; (8008fac <_vfiprintf_r+0x258>)
 8008f02:	bb1b      	cbnz	r3, 8008f4c <_vfiprintf_r+0x1f8>
 8008f04:	9b03      	ldr	r3, [sp, #12]
 8008f06:	3307      	adds	r3, #7
 8008f08:	f023 0307 	bic.w	r3, r3, #7
 8008f0c:	3308      	adds	r3, #8
 8008f0e:	9303      	str	r3, [sp, #12]
 8008f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f12:	443b      	add	r3, r7
 8008f14:	9309      	str	r3, [sp, #36]	; 0x24
 8008f16:	e767      	b.n	8008de8 <_vfiprintf_r+0x94>
 8008f18:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f1c:	460c      	mov	r4, r1
 8008f1e:	2001      	movs	r0, #1
 8008f20:	e7a5      	b.n	8008e6e <_vfiprintf_r+0x11a>
 8008f22:	2300      	movs	r3, #0
 8008f24:	3401      	adds	r4, #1
 8008f26:	9305      	str	r3, [sp, #20]
 8008f28:	4619      	mov	r1, r3
 8008f2a:	f04f 0c0a 	mov.w	ip, #10
 8008f2e:	4620      	mov	r0, r4
 8008f30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f34:	3a30      	subs	r2, #48	; 0x30
 8008f36:	2a09      	cmp	r2, #9
 8008f38:	d903      	bls.n	8008f42 <_vfiprintf_r+0x1ee>
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d0c5      	beq.n	8008eca <_vfiprintf_r+0x176>
 8008f3e:	9105      	str	r1, [sp, #20]
 8008f40:	e7c3      	b.n	8008eca <_vfiprintf_r+0x176>
 8008f42:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f46:	4604      	mov	r4, r0
 8008f48:	2301      	movs	r3, #1
 8008f4a:	e7f0      	b.n	8008f2e <_vfiprintf_r+0x1da>
 8008f4c:	ab03      	add	r3, sp, #12
 8008f4e:	9300      	str	r3, [sp, #0]
 8008f50:	462a      	mov	r2, r5
 8008f52:	4b17      	ldr	r3, [pc, #92]	; (8008fb0 <_vfiprintf_r+0x25c>)
 8008f54:	a904      	add	r1, sp, #16
 8008f56:	4630      	mov	r0, r6
 8008f58:	f3af 8000 	nop.w
 8008f5c:	4607      	mov	r7, r0
 8008f5e:	1c78      	adds	r0, r7, #1
 8008f60:	d1d6      	bne.n	8008f10 <_vfiprintf_r+0x1bc>
 8008f62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f64:	07d9      	lsls	r1, r3, #31
 8008f66:	d405      	bmi.n	8008f74 <_vfiprintf_r+0x220>
 8008f68:	89ab      	ldrh	r3, [r5, #12]
 8008f6a:	059a      	lsls	r2, r3, #22
 8008f6c:	d402      	bmi.n	8008f74 <_vfiprintf_r+0x220>
 8008f6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f70:	f000 fc41 	bl	80097f6 <__retarget_lock_release_recursive>
 8008f74:	89ab      	ldrh	r3, [r5, #12]
 8008f76:	065b      	lsls	r3, r3, #25
 8008f78:	f53f af12 	bmi.w	8008da0 <_vfiprintf_r+0x4c>
 8008f7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f7e:	e711      	b.n	8008da4 <_vfiprintf_r+0x50>
 8008f80:	ab03      	add	r3, sp, #12
 8008f82:	9300      	str	r3, [sp, #0]
 8008f84:	462a      	mov	r2, r5
 8008f86:	4b0a      	ldr	r3, [pc, #40]	; (8008fb0 <_vfiprintf_r+0x25c>)
 8008f88:	a904      	add	r1, sp, #16
 8008f8a:	4630      	mov	r0, r6
 8008f8c:	f000 f880 	bl	8009090 <_printf_i>
 8008f90:	e7e4      	b.n	8008f5c <_vfiprintf_r+0x208>
 8008f92:	bf00      	nop
 8008f94:	0800b360 	.word	0x0800b360
 8008f98:	0800b380 	.word	0x0800b380
 8008f9c:	0800b340 	.word	0x0800b340
 8008fa0:	0800b30c 	.word	0x0800b30c
 8008fa4:	0800b312 	.word	0x0800b312
 8008fa8:	0800b316 	.word	0x0800b316
 8008fac:	00000000 	.word	0x00000000
 8008fb0:	08008d2f 	.word	0x08008d2f

08008fb4 <_printf_common>:
 8008fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fb8:	4616      	mov	r6, r2
 8008fba:	4699      	mov	r9, r3
 8008fbc:	688a      	ldr	r2, [r1, #8]
 8008fbe:	690b      	ldr	r3, [r1, #16]
 8008fc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	bfb8      	it	lt
 8008fc8:	4613      	movlt	r3, r2
 8008fca:	6033      	str	r3, [r6, #0]
 8008fcc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008fd0:	4607      	mov	r7, r0
 8008fd2:	460c      	mov	r4, r1
 8008fd4:	b10a      	cbz	r2, 8008fda <_printf_common+0x26>
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	6033      	str	r3, [r6, #0]
 8008fda:	6823      	ldr	r3, [r4, #0]
 8008fdc:	0699      	lsls	r1, r3, #26
 8008fde:	bf42      	ittt	mi
 8008fe0:	6833      	ldrmi	r3, [r6, #0]
 8008fe2:	3302      	addmi	r3, #2
 8008fe4:	6033      	strmi	r3, [r6, #0]
 8008fe6:	6825      	ldr	r5, [r4, #0]
 8008fe8:	f015 0506 	ands.w	r5, r5, #6
 8008fec:	d106      	bne.n	8008ffc <_printf_common+0x48>
 8008fee:	f104 0a19 	add.w	sl, r4, #25
 8008ff2:	68e3      	ldr	r3, [r4, #12]
 8008ff4:	6832      	ldr	r2, [r6, #0]
 8008ff6:	1a9b      	subs	r3, r3, r2
 8008ff8:	42ab      	cmp	r3, r5
 8008ffa:	dc26      	bgt.n	800904a <_printf_common+0x96>
 8008ffc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009000:	1e13      	subs	r3, r2, #0
 8009002:	6822      	ldr	r2, [r4, #0]
 8009004:	bf18      	it	ne
 8009006:	2301      	movne	r3, #1
 8009008:	0692      	lsls	r2, r2, #26
 800900a:	d42b      	bmi.n	8009064 <_printf_common+0xb0>
 800900c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009010:	4649      	mov	r1, r9
 8009012:	4638      	mov	r0, r7
 8009014:	47c0      	blx	r8
 8009016:	3001      	adds	r0, #1
 8009018:	d01e      	beq.n	8009058 <_printf_common+0xa4>
 800901a:	6823      	ldr	r3, [r4, #0]
 800901c:	68e5      	ldr	r5, [r4, #12]
 800901e:	6832      	ldr	r2, [r6, #0]
 8009020:	f003 0306 	and.w	r3, r3, #6
 8009024:	2b04      	cmp	r3, #4
 8009026:	bf08      	it	eq
 8009028:	1aad      	subeq	r5, r5, r2
 800902a:	68a3      	ldr	r3, [r4, #8]
 800902c:	6922      	ldr	r2, [r4, #16]
 800902e:	bf0c      	ite	eq
 8009030:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009034:	2500      	movne	r5, #0
 8009036:	4293      	cmp	r3, r2
 8009038:	bfc4      	itt	gt
 800903a:	1a9b      	subgt	r3, r3, r2
 800903c:	18ed      	addgt	r5, r5, r3
 800903e:	2600      	movs	r6, #0
 8009040:	341a      	adds	r4, #26
 8009042:	42b5      	cmp	r5, r6
 8009044:	d11a      	bne.n	800907c <_printf_common+0xc8>
 8009046:	2000      	movs	r0, #0
 8009048:	e008      	b.n	800905c <_printf_common+0xa8>
 800904a:	2301      	movs	r3, #1
 800904c:	4652      	mov	r2, sl
 800904e:	4649      	mov	r1, r9
 8009050:	4638      	mov	r0, r7
 8009052:	47c0      	blx	r8
 8009054:	3001      	adds	r0, #1
 8009056:	d103      	bne.n	8009060 <_printf_common+0xac>
 8009058:	f04f 30ff 	mov.w	r0, #4294967295
 800905c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009060:	3501      	adds	r5, #1
 8009062:	e7c6      	b.n	8008ff2 <_printf_common+0x3e>
 8009064:	18e1      	adds	r1, r4, r3
 8009066:	1c5a      	adds	r2, r3, #1
 8009068:	2030      	movs	r0, #48	; 0x30
 800906a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800906e:	4422      	add	r2, r4
 8009070:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009074:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009078:	3302      	adds	r3, #2
 800907a:	e7c7      	b.n	800900c <_printf_common+0x58>
 800907c:	2301      	movs	r3, #1
 800907e:	4622      	mov	r2, r4
 8009080:	4649      	mov	r1, r9
 8009082:	4638      	mov	r0, r7
 8009084:	47c0      	blx	r8
 8009086:	3001      	adds	r0, #1
 8009088:	d0e6      	beq.n	8009058 <_printf_common+0xa4>
 800908a:	3601      	adds	r6, #1
 800908c:	e7d9      	b.n	8009042 <_printf_common+0x8e>
	...

08009090 <_printf_i>:
 8009090:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009094:	7e0f      	ldrb	r7, [r1, #24]
 8009096:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009098:	2f78      	cmp	r7, #120	; 0x78
 800909a:	4691      	mov	r9, r2
 800909c:	4680      	mov	r8, r0
 800909e:	460c      	mov	r4, r1
 80090a0:	469a      	mov	sl, r3
 80090a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80090a6:	d807      	bhi.n	80090b8 <_printf_i+0x28>
 80090a8:	2f62      	cmp	r7, #98	; 0x62
 80090aa:	d80a      	bhi.n	80090c2 <_printf_i+0x32>
 80090ac:	2f00      	cmp	r7, #0
 80090ae:	f000 80d8 	beq.w	8009262 <_printf_i+0x1d2>
 80090b2:	2f58      	cmp	r7, #88	; 0x58
 80090b4:	f000 80a3 	beq.w	80091fe <_printf_i+0x16e>
 80090b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80090c0:	e03a      	b.n	8009138 <_printf_i+0xa8>
 80090c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80090c6:	2b15      	cmp	r3, #21
 80090c8:	d8f6      	bhi.n	80090b8 <_printf_i+0x28>
 80090ca:	a101      	add	r1, pc, #4	; (adr r1, 80090d0 <_printf_i+0x40>)
 80090cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80090d0:	08009129 	.word	0x08009129
 80090d4:	0800913d 	.word	0x0800913d
 80090d8:	080090b9 	.word	0x080090b9
 80090dc:	080090b9 	.word	0x080090b9
 80090e0:	080090b9 	.word	0x080090b9
 80090e4:	080090b9 	.word	0x080090b9
 80090e8:	0800913d 	.word	0x0800913d
 80090ec:	080090b9 	.word	0x080090b9
 80090f0:	080090b9 	.word	0x080090b9
 80090f4:	080090b9 	.word	0x080090b9
 80090f8:	080090b9 	.word	0x080090b9
 80090fc:	08009249 	.word	0x08009249
 8009100:	0800916d 	.word	0x0800916d
 8009104:	0800922b 	.word	0x0800922b
 8009108:	080090b9 	.word	0x080090b9
 800910c:	080090b9 	.word	0x080090b9
 8009110:	0800926b 	.word	0x0800926b
 8009114:	080090b9 	.word	0x080090b9
 8009118:	0800916d 	.word	0x0800916d
 800911c:	080090b9 	.word	0x080090b9
 8009120:	080090b9 	.word	0x080090b9
 8009124:	08009233 	.word	0x08009233
 8009128:	682b      	ldr	r3, [r5, #0]
 800912a:	1d1a      	adds	r2, r3, #4
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	602a      	str	r2, [r5, #0]
 8009130:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009134:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009138:	2301      	movs	r3, #1
 800913a:	e0a3      	b.n	8009284 <_printf_i+0x1f4>
 800913c:	6820      	ldr	r0, [r4, #0]
 800913e:	6829      	ldr	r1, [r5, #0]
 8009140:	0606      	lsls	r6, r0, #24
 8009142:	f101 0304 	add.w	r3, r1, #4
 8009146:	d50a      	bpl.n	800915e <_printf_i+0xce>
 8009148:	680e      	ldr	r6, [r1, #0]
 800914a:	602b      	str	r3, [r5, #0]
 800914c:	2e00      	cmp	r6, #0
 800914e:	da03      	bge.n	8009158 <_printf_i+0xc8>
 8009150:	232d      	movs	r3, #45	; 0x2d
 8009152:	4276      	negs	r6, r6
 8009154:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009158:	485e      	ldr	r0, [pc, #376]	; (80092d4 <_printf_i+0x244>)
 800915a:	230a      	movs	r3, #10
 800915c:	e019      	b.n	8009192 <_printf_i+0x102>
 800915e:	680e      	ldr	r6, [r1, #0]
 8009160:	602b      	str	r3, [r5, #0]
 8009162:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009166:	bf18      	it	ne
 8009168:	b236      	sxthne	r6, r6
 800916a:	e7ef      	b.n	800914c <_printf_i+0xbc>
 800916c:	682b      	ldr	r3, [r5, #0]
 800916e:	6820      	ldr	r0, [r4, #0]
 8009170:	1d19      	adds	r1, r3, #4
 8009172:	6029      	str	r1, [r5, #0]
 8009174:	0601      	lsls	r1, r0, #24
 8009176:	d501      	bpl.n	800917c <_printf_i+0xec>
 8009178:	681e      	ldr	r6, [r3, #0]
 800917a:	e002      	b.n	8009182 <_printf_i+0xf2>
 800917c:	0646      	lsls	r6, r0, #25
 800917e:	d5fb      	bpl.n	8009178 <_printf_i+0xe8>
 8009180:	881e      	ldrh	r6, [r3, #0]
 8009182:	4854      	ldr	r0, [pc, #336]	; (80092d4 <_printf_i+0x244>)
 8009184:	2f6f      	cmp	r7, #111	; 0x6f
 8009186:	bf0c      	ite	eq
 8009188:	2308      	moveq	r3, #8
 800918a:	230a      	movne	r3, #10
 800918c:	2100      	movs	r1, #0
 800918e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009192:	6865      	ldr	r5, [r4, #4]
 8009194:	60a5      	str	r5, [r4, #8]
 8009196:	2d00      	cmp	r5, #0
 8009198:	bfa2      	ittt	ge
 800919a:	6821      	ldrge	r1, [r4, #0]
 800919c:	f021 0104 	bicge.w	r1, r1, #4
 80091a0:	6021      	strge	r1, [r4, #0]
 80091a2:	b90e      	cbnz	r6, 80091a8 <_printf_i+0x118>
 80091a4:	2d00      	cmp	r5, #0
 80091a6:	d04d      	beq.n	8009244 <_printf_i+0x1b4>
 80091a8:	4615      	mov	r5, r2
 80091aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80091ae:	fb03 6711 	mls	r7, r3, r1, r6
 80091b2:	5dc7      	ldrb	r7, [r0, r7]
 80091b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80091b8:	4637      	mov	r7, r6
 80091ba:	42bb      	cmp	r3, r7
 80091bc:	460e      	mov	r6, r1
 80091be:	d9f4      	bls.n	80091aa <_printf_i+0x11a>
 80091c0:	2b08      	cmp	r3, #8
 80091c2:	d10b      	bne.n	80091dc <_printf_i+0x14c>
 80091c4:	6823      	ldr	r3, [r4, #0]
 80091c6:	07de      	lsls	r6, r3, #31
 80091c8:	d508      	bpl.n	80091dc <_printf_i+0x14c>
 80091ca:	6923      	ldr	r3, [r4, #16]
 80091cc:	6861      	ldr	r1, [r4, #4]
 80091ce:	4299      	cmp	r1, r3
 80091d0:	bfde      	ittt	le
 80091d2:	2330      	movle	r3, #48	; 0x30
 80091d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80091d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80091dc:	1b52      	subs	r2, r2, r5
 80091de:	6122      	str	r2, [r4, #16]
 80091e0:	f8cd a000 	str.w	sl, [sp]
 80091e4:	464b      	mov	r3, r9
 80091e6:	aa03      	add	r2, sp, #12
 80091e8:	4621      	mov	r1, r4
 80091ea:	4640      	mov	r0, r8
 80091ec:	f7ff fee2 	bl	8008fb4 <_printf_common>
 80091f0:	3001      	adds	r0, #1
 80091f2:	d14c      	bne.n	800928e <_printf_i+0x1fe>
 80091f4:	f04f 30ff 	mov.w	r0, #4294967295
 80091f8:	b004      	add	sp, #16
 80091fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091fe:	4835      	ldr	r0, [pc, #212]	; (80092d4 <_printf_i+0x244>)
 8009200:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009204:	6829      	ldr	r1, [r5, #0]
 8009206:	6823      	ldr	r3, [r4, #0]
 8009208:	f851 6b04 	ldr.w	r6, [r1], #4
 800920c:	6029      	str	r1, [r5, #0]
 800920e:	061d      	lsls	r5, r3, #24
 8009210:	d514      	bpl.n	800923c <_printf_i+0x1ac>
 8009212:	07df      	lsls	r7, r3, #31
 8009214:	bf44      	itt	mi
 8009216:	f043 0320 	orrmi.w	r3, r3, #32
 800921a:	6023      	strmi	r3, [r4, #0]
 800921c:	b91e      	cbnz	r6, 8009226 <_printf_i+0x196>
 800921e:	6823      	ldr	r3, [r4, #0]
 8009220:	f023 0320 	bic.w	r3, r3, #32
 8009224:	6023      	str	r3, [r4, #0]
 8009226:	2310      	movs	r3, #16
 8009228:	e7b0      	b.n	800918c <_printf_i+0xfc>
 800922a:	6823      	ldr	r3, [r4, #0]
 800922c:	f043 0320 	orr.w	r3, r3, #32
 8009230:	6023      	str	r3, [r4, #0]
 8009232:	2378      	movs	r3, #120	; 0x78
 8009234:	4828      	ldr	r0, [pc, #160]	; (80092d8 <_printf_i+0x248>)
 8009236:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800923a:	e7e3      	b.n	8009204 <_printf_i+0x174>
 800923c:	0659      	lsls	r1, r3, #25
 800923e:	bf48      	it	mi
 8009240:	b2b6      	uxthmi	r6, r6
 8009242:	e7e6      	b.n	8009212 <_printf_i+0x182>
 8009244:	4615      	mov	r5, r2
 8009246:	e7bb      	b.n	80091c0 <_printf_i+0x130>
 8009248:	682b      	ldr	r3, [r5, #0]
 800924a:	6826      	ldr	r6, [r4, #0]
 800924c:	6961      	ldr	r1, [r4, #20]
 800924e:	1d18      	adds	r0, r3, #4
 8009250:	6028      	str	r0, [r5, #0]
 8009252:	0635      	lsls	r5, r6, #24
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	d501      	bpl.n	800925c <_printf_i+0x1cc>
 8009258:	6019      	str	r1, [r3, #0]
 800925a:	e002      	b.n	8009262 <_printf_i+0x1d2>
 800925c:	0670      	lsls	r0, r6, #25
 800925e:	d5fb      	bpl.n	8009258 <_printf_i+0x1c8>
 8009260:	8019      	strh	r1, [r3, #0]
 8009262:	2300      	movs	r3, #0
 8009264:	6123      	str	r3, [r4, #16]
 8009266:	4615      	mov	r5, r2
 8009268:	e7ba      	b.n	80091e0 <_printf_i+0x150>
 800926a:	682b      	ldr	r3, [r5, #0]
 800926c:	1d1a      	adds	r2, r3, #4
 800926e:	602a      	str	r2, [r5, #0]
 8009270:	681d      	ldr	r5, [r3, #0]
 8009272:	6862      	ldr	r2, [r4, #4]
 8009274:	2100      	movs	r1, #0
 8009276:	4628      	mov	r0, r5
 8009278:	f7f6 ff8a 	bl	8000190 <memchr>
 800927c:	b108      	cbz	r0, 8009282 <_printf_i+0x1f2>
 800927e:	1b40      	subs	r0, r0, r5
 8009280:	6060      	str	r0, [r4, #4]
 8009282:	6863      	ldr	r3, [r4, #4]
 8009284:	6123      	str	r3, [r4, #16]
 8009286:	2300      	movs	r3, #0
 8009288:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800928c:	e7a8      	b.n	80091e0 <_printf_i+0x150>
 800928e:	6923      	ldr	r3, [r4, #16]
 8009290:	462a      	mov	r2, r5
 8009292:	4649      	mov	r1, r9
 8009294:	4640      	mov	r0, r8
 8009296:	47d0      	blx	sl
 8009298:	3001      	adds	r0, #1
 800929a:	d0ab      	beq.n	80091f4 <_printf_i+0x164>
 800929c:	6823      	ldr	r3, [r4, #0]
 800929e:	079b      	lsls	r3, r3, #30
 80092a0:	d413      	bmi.n	80092ca <_printf_i+0x23a>
 80092a2:	68e0      	ldr	r0, [r4, #12]
 80092a4:	9b03      	ldr	r3, [sp, #12]
 80092a6:	4298      	cmp	r0, r3
 80092a8:	bfb8      	it	lt
 80092aa:	4618      	movlt	r0, r3
 80092ac:	e7a4      	b.n	80091f8 <_printf_i+0x168>
 80092ae:	2301      	movs	r3, #1
 80092b0:	4632      	mov	r2, r6
 80092b2:	4649      	mov	r1, r9
 80092b4:	4640      	mov	r0, r8
 80092b6:	47d0      	blx	sl
 80092b8:	3001      	adds	r0, #1
 80092ba:	d09b      	beq.n	80091f4 <_printf_i+0x164>
 80092bc:	3501      	adds	r5, #1
 80092be:	68e3      	ldr	r3, [r4, #12]
 80092c0:	9903      	ldr	r1, [sp, #12]
 80092c2:	1a5b      	subs	r3, r3, r1
 80092c4:	42ab      	cmp	r3, r5
 80092c6:	dcf2      	bgt.n	80092ae <_printf_i+0x21e>
 80092c8:	e7eb      	b.n	80092a2 <_printf_i+0x212>
 80092ca:	2500      	movs	r5, #0
 80092cc:	f104 0619 	add.w	r6, r4, #25
 80092d0:	e7f5      	b.n	80092be <_printf_i+0x22e>
 80092d2:	bf00      	nop
 80092d4:	0800b31d 	.word	0x0800b31d
 80092d8:	0800b32e 	.word	0x0800b32e

080092dc <_sbrk_r>:
 80092dc:	b538      	push	{r3, r4, r5, lr}
 80092de:	4d06      	ldr	r5, [pc, #24]	; (80092f8 <_sbrk_r+0x1c>)
 80092e0:	2300      	movs	r3, #0
 80092e2:	4604      	mov	r4, r0
 80092e4:	4608      	mov	r0, r1
 80092e6:	602b      	str	r3, [r5, #0]
 80092e8:	f7f9 f898 	bl	800241c <_sbrk>
 80092ec:	1c43      	adds	r3, r0, #1
 80092ee:	d102      	bne.n	80092f6 <_sbrk_r+0x1a>
 80092f0:	682b      	ldr	r3, [r5, #0]
 80092f2:	b103      	cbz	r3, 80092f6 <_sbrk_r+0x1a>
 80092f4:	6023      	str	r3, [r4, #0]
 80092f6:	bd38      	pop	{r3, r4, r5, pc}
 80092f8:	200005f0 	.word	0x200005f0

080092fc <__swbuf_r>:
 80092fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092fe:	460e      	mov	r6, r1
 8009300:	4614      	mov	r4, r2
 8009302:	4605      	mov	r5, r0
 8009304:	b118      	cbz	r0, 800930e <__swbuf_r+0x12>
 8009306:	6983      	ldr	r3, [r0, #24]
 8009308:	b90b      	cbnz	r3, 800930e <__swbuf_r+0x12>
 800930a:	f000 f9d5 	bl	80096b8 <__sinit>
 800930e:	4b21      	ldr	r3, [pc, #132]	; (8009394 <__swbuf_r+0x98>)
 8009310:	429c      	cmp	r4, r3
 8009312:	d12b      	bne.n	800936c <__swbuf_r+0x70>
 8009314:	686c      	ldr	r4, [r5, #4]
 8009316:	69a3      	ldr	r3, [r4, #24]
 8009318:	60a3      	str	r3, [r4, #8]
 800931a:	89a3      	ldrh	r3, [r4, #12]
 800931c:	071a      	lsls	r2, r3, #28
 800931e:	d52f      	bpl.n	8009380 <__swbuf_r+0x84>
 8009320:	6923      	ldr	r3, [r4, #16]
 8009322:	b36b      	cbz	r3, 8009380 <__swbuf_r+0x84>
 8009324:	6923      	ldr	r3, [r4, #16]
 8009326:	6820      	ldr	r0, [r4, #0]
 8009328:	1ac0      	subs	r0, r0, r3
 800932a:	6963      	ldr	r3, [r4, #20]
 800932c:	b2f6      	uxtb	r6, r6
 800932e:	4283      	cmp	r3, r0
 8009330:	4637      	mov	r7, r6
 8009332:	dc04      	bgt.n	800933e <__swbuf_r+0x42>
 8009334:	4621      	mov	r1, r4
 8009336:	4628      	mov	r0, r5
 8009338:	f000 f92a 	bl	8009590 <_fflush_r>
 800933c:	bb30      	cbnz	r0, 800938c <__swbuf_r+0x90>
 800933e:	68a3      	ldr	r3, [r4, #8]
 8009340:	3b01      	subs	r3, #1
 8009342:	60a3      	str	r3, [r4, #8]
 8009344:	6823      	ldr	r3, [r4, #0]
 8009346:	1c5a      	adds	r2, r3, #1
 8009348:	6022      	str	r2, [r4, #0]
 800934a:	701e      	strb	r6, [r3, #0]
 800934c:	6963      	ldr	r3, [r4, #20]
 800934e:	3001      	adds	r0, #1
 8009350:	4283      	cmp	r3, r0
 8009352:	d004      	beq.n	800935e <__swbuf_r+0x62>
 8009354:	89a3      	ldrh	r3, [r4, #12]
 8009356:	07db      	lsls	r3, r3, #31
 8009358:	d506      	bpl.n	8009368 <__swbuf_r+0x6c>
 800935a:	2e0a      	cmp	r6, #10
 800935c:	d104      	bne.n	8009368 <__swbuf_r+0x6c>
 800935e:	4621      	mov	r1, r4
 8009360:	4628      	mov	r0, r5
 8009362:	f000 f915 	bl	8009590 <_fflush_r>
 8009366:	b988      	cbnz	r0, 800938c <__swbuf_r+0x90>
 8009368:	4638      	mov	r0, r7
 800936a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800936c:	4b0a      	ldr	r3, [pc, #40]	; (8009398 <__swbuf_r+0x9c>)
 800936e:	429c      	cmp	r4, r3
 8009370:	d101      	bne.n	8009376 <__swbuf_r+0x7a>
 8009372:	68ac      	ldr	r4, [r5, #8]
 8009374:	e7cf      	b.n	8009316 <__swbuf_r+0x1a>
 8009376:	4b09      	ldr	r3, [pc, #36]	; (800939c <__swbuf_r+0xa0>)
 8009378:	429c      	cmp	r4, r3
 800937a:	bf08      	it	eq
 800937c:	68ec      	ldreq	r4, [r5, #12]
 800937e:	e7ca      	b.n	8009316 <__swbuf_r+0x1a>
 8009380:	4621      	mov	r1, r4
 8009382:	4628      	mov	r0, r5
 8009384:	f000 f80c 	bl	80093a0 <__swsetup_r>
 8009388:	2800      	cmp	r0, #0
 800938a:	d0cb      	beq.n	8009324 <__swbuf_r+0x28>
 800938c:	f04f 37ff 	mov.w	r7, #4294967295
 8009390:	e7ea      	b.n	8009368 <__swbuf_r+0x6c>
 8009392:	bf00      	nop
 8009394:	0800b360 	.word	0x0800b360
 8009398:	0800b380 	.word	0x0800b380
 800939c:	0800b340 	.word	0x0800b340

080093a0 <__swsetup_r>:
 80093a0:	4b32      	ldr	r3, [pc, #200]	; (800946c <__swsetup_r+0xcc>)
 80093a2:	b570      	push	{r4, r5, r6, lr}
 80093a4:	681d      	ldr	r5, [r3, #0]
 80093a6:	4606      	mov	r6, r0
 80093a8:	460c      	mov	r4, r1
 80093aa:	b125      	cbz	r5, 80093b6 <__swsetup_r+0x16>
 80093ac:	69ab      	ldr	r3, [r5, #24]
 80093ae:	b913      	cbnz	r3, 80093b6 <__swsetup_r+0x16>
 80093b0:	4628      	mov	r0, r5
 80093b2:	f000 f981 	bl	80096b8 <__sinit>
 80093b6:	4b2e      	ldr	r3, [pc, #184]	; (8009470 <__swsetup_r+0xd0>)
 80093b8:	429c      	cmp	r4, r3
 80093ba:	d10f      	bne.n	80093dc <__swsetup_r+0x3c>
 80093bc:	686c      	ldr	r4, [r5, #4]
 80093be:	89a3      	ldrh	r3, [r4, #12]
 80093c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093c4:	0719      	lsls	r1, r3, #28
 80093c6:	d42c      	bmi.n	8009422 <__swsetup_r+0x82>
 80093c8:	06dd      	lsls	r5, r3, #27
 80093ca:	d411      	bmi.n	80093f0 <__swsetup_r+0x50>
 80093cc:	2309      	movs	r3, #9
 80093ce:	6033      	str	r3, [r6, #0]
 80093d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80093d4:	81a3      	strh	r3, [r4, #12]
 80093d6:	f04f 30ff 	mov.w	r0, #4294967295
 80093da:	e03e      	b.n	800945a <__swsetup_r+0xba>
 80093dc:	4b25      	ldr	r3, [pc, #148]	; (8009474 <__swsetup_r+0xd4>)
 80093de:	429c      	cmp	r4, r3
 80093e0:	d101      	bne.n	80093e6 <__swsetup_r+0x46>
 80093e2:	68ac      	ldr	r4, [r5, #8]
 80093e4:	e7eb      	b.n	80093be <__swsetup_r+0x1e>
 80093e6:	4b24      	ldr	r3, [pc, #144]	; (8009478 <__swsetup_r+0xd8>)
 80093e8:	429c      	cmp	r4, r3
 80093ea:	bf08      	it	eq
 80093ec:	68ec      	ldreq	r4, [r5, #12]
 80093ee:	e7e6      	b.n	80093be <__swsetup_r+0x1e>
 80093f0:	0758      	lsls	r0, r3, #29
 80093f2:	d512      	bpl.n	800941a <__swsetup_r+0x7a>
 80093f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093f6:	b141      	cbz	r1, 800940a <__swsetup_r+0x6a>
 80093f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093fc:	4299      	cmp	r1, r3
 80093fe:	d002      	beq.n	8009406 <__swsetup_r+0x66>
 8009400:	4630      	mov	r0, r6
 8009402:	f7ff fa45 	bl	8008890 <_free_r>
 8009406:	2300      	movs	r3, #0
 8009408:	6363      	str	r3, [r4, #52]	; 0x34
 800940a:	89a3      	ldrh	r3, [r4, #12]
 800940c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009410:	81a3      	strh	r3, [r4, #12]
 8009412:	2300      	movs	r3, #0
 8009414:	6063      	str	r3, [r4, #4]
 8009416:	6923      	ldr	r3, [r4, #16]
 8009418:	6023      	str	r3, [r4, #0]
 800941a:	89a3      	ldrh	r3, [r4, #12]
 800941c:	f043 0308 	orr.w	r3, r3, #8
 8009420:	81a3      	strh	r3, [r4, #12]
 8009422:	6923      	ldr	r3, [r4, #16]
 8009424:	b94b      	cbnz	r3, 800943a <__swsetup_r+0x9a>
 8009426:	89a3      	ldrh	r3, [r4, #12]
 8009428:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800942c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009430:	d003      	beq.n	800943a <__swsetup_r+0x9a>
 8009432:	4621      	mov	r1, r4
 8009434:	4630      	mov	r0, r6
 8009436:	f000 fa05 	bl	8009844 <__smakebuf_r>
 800943a:	89a0      	ldrh	r0, [r4, #12]
 800943c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009440:	f010 0301 	ands.w	r3, r0, #1
 8009444:	d00a      	beq.n	800945c <__swsetup_r+0xbc>
 8009446:	2300      	movs	r3, #0
 8009448:	60a3      	str	r3, [r4, #8]
 800944a:	6963      	ldr	r3, [r4, #20]
 800944c:	425b      	negs	r3, r3
 800944e:	61a3      	str	r3, [r4, #24]
 8009450:	6923      	ldr	r3, [r4, #16]
 8009452:	b943      	cbnz	r3, 8009466 <__swsetup_r+0xc6>
 8009454:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009458:	d1ba      	bne.n	80093d0 <__swsetup_r+0x30>
 800945a:	bd70      	pop	{r4, r5, r6, pc}
 800945c:	0781      	lsls	r1, r0, #30
 800945e:	bf58      	it	pl
 8009460:	6963      	ldrpl	r3, [r4, #20]
 8009462:	60a3      	str	r3, [r4, #8]
 8009464:	e7f4      	b.n	8009450 <__swsetup_r+0xb0>
 8009466:	2000      	movs	r0, #0
 8009468:	e7f7      	b.n	800945a <__swsetup_r+0xba>
 800946a:	bf00      	nop
 800946c:	20000048 	.word	0x20000048
 8009470:	0800b360 	.word	0x0800b360
 8009474:	0800b380 	.word	0x0800b380
 8009478:	0800b340 	.word	0x0800b340

0800947c <abort>:
 800947c:	b508      	push	{r3, lr}
 800947e:	2006      	movs	r0, #6
 8009480:	f000 faac 	bl	80099dc <raise>
 8009484:	2001      	movs	r0, #1
 8009486:	f7f8 ff56 	bl	8002336 <_exit>
	...

0800948c <__sflush_r>:
 800948c:	898a      	ldrh	r2, [r1, #12]
 800948e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009490:	4605      	mov	r5, r0
 8009492:	0710      	lsls	r0, r2, #28
 8009494:	460c      	mov	r4, r1
 8009496:	d457      	bmi.n	8009548 <__sflush_r+0xbc>
 8009498:	684b      	ldr	r3, [r1, #4]
 800949a:	2b00      	cmp	r3, #0
 800949c:	dc04      	bgt.n	80094a8 <__sflush_r+0x1c>
 800949e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	dc01      	bgt.n	80094a8 <__sflush_r+0x1c>
 80094a4:	2000      	movs	r0, #0
 80094a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094aa:	2e00      	cmp	r6, #0
 80094ac:	d0fa      	beq.n	80094a4 <__sflush_r+0x18>
 80094ae:	2300      	movs	r3, #0
 80094b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80094b4:	682f      	ldr	r7, [r5, #0]
 80094b6:	602b      	str	r3, [r5, #0]
 80094b8:	d032      	beq.n	8009520 <__sflush_r+0x94>
 80094ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80094bc:	89a3      	ldrh	r3, [r4, #12]
 80094be:	075a      	lsls	r2, r3, #29
 80094c0:	d505      	bpl.n	80094ce <__sflush_r+0x42>
 80094c2:	6863      	ldr	r3, [r4, #4]
 80094c4:	1ac0      	subs	r0, r0, r3
 80094c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80094c8:	b10b      	cbz	r3, 80094ce <__sflush_r+0x42>
 80094ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80094cc:	1ac0      	subs	r0, r0, r3
 80094ce:	2300      	movs	r3, #0
 80094d0:	4602      	mov	r2, r0
 80094d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094d4:	6a21      	ldr	r1, [r4, #32]
 80094d6:	4628      	mov	r0, r5
 80094d8:	47b0      	blx	r6
 80094da:	1c43      	adds	r3, r0, #1
 80094dc:	89a3      	ldrh	r3, [r4, #12]
 80094de:	d106      	bne.n	80094ee <__sflush_r+0x62>
 80094e0:	6829      	ldr	r1, [r5, #0]
 80094e2:	291d      	cmp	r1, #29
 80094e4:	d82c      	bhi.n	8009540 <__sflush_r+0xb4>
 80094e6:	4a29      	ldr	r2, [pc, #164]	; (800958c <__sflush_r+0x100>)
 80094e8:	40ca      	lsrs	r2, r1
 80094ea:	07d6      	lsls	r6, r2, #31
 80094ec:	d528      	bpl.n	8009540 <__sflush_r+0xb4>
 80094ee:	2200      	movs	r2, #0
 80094f0:	6062      	str	r2, [r4, #4]
 80094f2:	04d9      	lsls	r1, r3, #19
 80094f4:	6922      	ldr	r2, [r4, #16]
 80094f6:	6022      	str	r2, [r4, #0]
 80094f8:	d504      	bpl.n	8009504 <__sflush_r+0x78>
 80094fa:	1c42      	adds	r2, r0, #1
 80094fc:	d101      	bne.n	8009502 <__sflush_r+0x76>
 80094fe:	682b      	ldr	r3, [r5, #0]
 8009500:	b903      	cbnz	r3, 8009504 <__sflush_r+0x78>
 8009502:	6560      	str	r0, [r4, #84]	; 0x54
 8009504:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009506:	602f      	str	r7, [r5, #0]
 8009508:	2900      	cmp	r1, #0
 800950a:	d0cb      	beq.n	80094a4 <__sflush_r+0x18>
 800950c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009510:	4299      	cmp	r1, r3
 8009512:	d002      	beq.n	800951a <__sflush_r+0x8e>
 8009514:	4628      	mov	r0, r5
 8009516:	f7ff f9bb 	bl	8008890 <_free_r>
 800951a:	2000      	movs	r0, #0
 800951c:	6360      	str	r0, [r4, #52]	; 0x34
 800951e:	e7c2      	b.n	80094a6 <__sflush_r+0x1a>
 8009520:	6a21      	ldr	r1, [r4, #32]
 8009522:	2301      	movs	r3, #1
 8009524:	4628      	mov	r0, r5
 8009526:	47b0      	blx	r6
 8009528:	1c41      	adds	r1, r0, #1
 800952a:	d1c7      	bne.n	80094bc <__sflush_r+0x30>
 800952c:	682b      	ldr	r3, [r5, #0]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d0c4      	beq.n	80094bc <__sflush_r+0x30>
 8009532:	2b1d      	cmp	r3, #29
 8009534:	d001      	beq.n	800953a <__sflush_r+0xae>
 8009536:	2b16      	cmp	r3, #22
 8009538:	d101      	bne.n	800953e <__sflush_r+0xb2>
 800953a:	602f      	str	r7, [r5, #0]
 800953c:	e7b2      	b.n	80094a4 <__sflush_r+0x18>
 800953e:	89a3      	ldrh	r3, [r4, #12]
 8009540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009544:	81a3      	strh	r3, [r4, #12]
 8009546:	e7ae      	b.n	80094a6 <__sflush_r+0x1a>
 8009548:	690f      	ldr	r7, [r1, #16]
 800954a:	2f00      	cmp	r7, #0
 800954c:	d0aa      	beq.n	80094a4 <__sflush_r+0x18>
 800954e:	0793      	lsls	r3, r2, #30
 8009550:	680e      	ldr	r6, [r1, #0]
 8009552:	bf08      	it	eq
 8009554:	694b      	ldreq	r3, [r1, #20]
 8009556:	600f      	str	r7, [r1, #0]
 8009558:	bf18      	it	ne
 800955a:	2300      	movne	r3, #0
 800955c:	1bf6      	subs	r6, r6, r7
 800955e:	608b      	str	r3, [r1, #8]
 8009560:	2e00      	cmp	r6, #0
 8009562:	dd9f      	ble.n	80094a4 <__sflush_r+0x18>
 8009564:	6a21      	ldr	r1, [r4, #32]
 8009566:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800956a:	4633      	mov	r3, r6
 800956c:	463a      	mov	r2, r7
 800956e:	4628      	mov	r0, r5
 8009570:	47e0      	blx	ip
 8009572:	2800      	cmp	r0, #0
 8009574:	dc06      	bgt.n	8009584 <__sflush_r+0xf8>
 8009576:	89a3      	ldrh	r3, [r4, #12]
 8009578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800957c:	81a3      	strh	r3, [r4, #12]
 800957e:	f04f 30ff 	mov.w	r0, #4294967295
 8009582:	e790      	b.n	80094a6 <__sflush_r+0x1a>
 8009584:	4407      	add	r7, r0
 8009586:	1a36      	subs	r6, r6, r0
 8009588:	e7ea      	b.n	8009560 <__sflush_r+0xd4>
 800958a:	bf00      	nop
 800958c:	20400001 	.word	0x20400001

08009590 <_fflush_r>:
 8009590:	b538      	push	{r3, r4, r5, lr}
 8009592:	690b      	ldr	r3, [r1, #16]
 8009594:	4605      	mov	r5, r0
 8009596:	460c      	mov	r4, r1
 8009598:	b913      	cbnz	r3, 80095a0 <_fflush_r+0x10>
 800959a:	2500      	movs	r5, #0
 800959c:	4628      	mov	r0, r5
 800959e:	bd38      	pop	{r3, r4, r5, pc}
 80095a0:	b118      	cbz	r0, 80095aa <_fflush_r+0x1a>
 80095a2:	6983      	ldr	r3, [r0, #24]
 80095a4:	b90b      	cbnz	r3, 80095aa <_fflush_r+0x1a>
 80095a6:	f000 f887 	bl	80096b8 <__sinit>
 80095aa:	4b14      	ldr	r3, [pc, #80]	; (80095fc <_fflush_r+0x6c>)
 80095ac:	429c      	cmp	r4, r3
 80095ae:	d11b      	bne.n	80095e8 <_fflush_r+0x58>
 80095b0:	686c      	ldr	r4, [r5, #4]
 80095b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d0ef      	beq.n	800959a <_fflush_r+0xa>
 80095ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80095bc:	07d0      	lsls	r0, r2, #31
 80095be:	d404      	bmi.n	80095ca <_fflush_r+0x3a>
 80095c0:	0599      	lsls	r1, r3, #22
 80095c2:	d402      	bmi.n	80095ca <_fflush_r+0x3a>
 80095c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095c6:	f000 f915 	bl	80097f4 <__retarget_lock_acquire_recursive>
 80095ca:	4628      	mov	r0, r5
 80095cc:	4621      	mov	r1, r4
 80095ce:	f7ff ff5d 	bl	800948c <__sflush_r>
 80095d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095d4:	07da      	lsls	r2, r3, #31
 80095d6:	4605      	mov	r5, r0
 80095d8:	d4e0      	bmi.n	800959c <_fflush_r+0xc>
 80095da:	89a3      	ldrh	r3, [r4, #12]
 80095dc:	059b      	lsls	r3, r3, #22
 80095de:	d4dd      	bmi.n	800959c <_fflush_r+0xc>
 80095e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095e2:	f000 f908 	bl	80097f6 <__retarget_lock_release_recursive>
 80095e6:	e7d9      	b.n	800959c <_fflush_r+0xc>
 80095e8:	4b05      	ldr	r3, [pc, #20]	; (8009600 <_fflush_r+0x70>)
 80095ea:	429c      	cmp	r4, r3
 80095ec:	d101      	bne.n	80095f2 <_fflush_r+0x62>
 80095ee:	68ac      	ldr	r4, [r5, #8]
 80095f0:	e7df      	b.n	80095b2 <_fflush_r+0x22>
 80095f2:	4b04      	ldr	r3, [pc, #16]	; (8009604 <_fflush_r+0x74>)
 80095f4:	429c      	cmp	r4, r3
 80095f6:	bf08      	it	eq
 80095f8:	68ec      	ldreq	r4, [r5, #12]
 80095fa:	e7da      	b.n	80095b2 <_fflush_r+0x22>
 80095fc:	0800b360 	.word	0x0800b360
 8009600:	0800b380 	.word	0x0800b380
 8009604:	0800b340 	.word	0x0800b340

08009608 <std>:
 8009608:	2300      	movs	r3, #0
 800960a:	b510      	push	{r4, lr}
 800960c:	4604      	mov	r4, r0
 800960e:	e9c0 3300 	strd	r3, r3, [r0]
 8009612:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009616:	6083      	str	r3, [r0, #8]
 8009618:	8181      	strh	r1, [r0, #12]
 800961a:	6643      	str	r3, [r0, #100]	; 0x64
 800961c:	81c2      	strh	r2, [r0, #14]
 800961e:	6183      	str	r3, [r0, #24]
 8009620:	4619      	mov	r1, r3
 8009622:	2208      	movs	r2, #8
 8009624:	305c      	adds	r0, #92	; 0x5c
 8009626:	f7ff f82f 	bl	8008688 <memset>
 800962a:	4b05      	ldr	r3, [pc, #20]	; (8009640 <std+0x38>)
 800962c:	6263      	str	r3, [r4, #36]	; 0x24
 800962e:	4b05      	ldr	r3, [pc, #20]	; (8009644 <std+0x3c>)
 8009630:	62a3      	str	r3, [r4, #40]	; 0x28
 8009632:	4b05      	ldr	r3, [pc, #20]	; (8009648 <std+0x40>)
 8009634:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009636:	4b05      	ldr	r3, [pc, #20]	; (800964c <std+0x44>)
 8009638:	6224      	str	r4, [r4, #32]
 800963a:	6323      	str	r3, [r4, #48]	; 0x30
 800963c:	bd10      	pop	{r4, pc}
 800963e:	bf00      	nop
 8009640:	08009a15 	.word	0x08009a15
 8009644:	08009a37 	.word	0x08009a37
 8009648:	08009a6f 	.word	0x08009a6f
 800964c:	08009a93 	.word	0x08009a93

08009650 <_cleanup_r>:
 8009650:	4901      	ldr	r1, [pc, #4]	; (8009658 <_cleanup_r+0x8>)
 8009652:	f000 b8af 	b.w	80097b4 <_fwalk_reent>
 8009656:	bf00      	nop
 8009658:	08009591 	.word	0x08009591

0800965c <__sfmoreglue>:
 800965c:	b570      	push	{r4, r5, r6, lr}
 800965e:	2268      	movs	r2, #104	; 0x68
 8009660:	1e4d      	subs	r5, r1, #1
 8009662:	4355      	muls	r5, r2
 8009664:	460e      	mov	r6, r1
 8009666:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800966a:	f7ff f97b 	bl	8008964 <_malloc_r>
 800966e:	4604      	mov	r4, r0
 8009670:	b140      	cbz	r0, 8009684 <__sfmoreglue+0x28>
 8009672:	2100      	movs	r1, #0
 8009674:	e9c0 1600 	strd	r1, r6, [r0]
 8009678:	300c      	adds	r0, #12
 800967a:	60a0      	str	r0, [r4, #8]
 800967c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009680:	f7ff f802 	bl	8008688 <memset>
 8009684:	4620      	mov	r0, r4
 8009686:	bd70      	pop	{r4, r5, r6, pc}

08009688 <__sfp_lock_acquire>:
 8009688:	4801      	ldr	r0, [pc, #4]	; (8009690 <__sfp_lock_acquire+0x8>)
 800968a:	f000 b8b3 	b.w	80097f4 <__retarget_lock_acquire_recursive>
 800968e:	bf00      	nop
 8009690:	200005ed 	.word	0x200005ed

08009694 <__sfp_lock_release>:
 8009694:	4801      	ldr	r0, [pc, #4]	; (800969c <__sfp_lock_release+0x8>)
 8009696:	f000 b8ae 	b.w	80097f6 <__retarget_lock_release_recursive>
 800969a:	bf00      	nop
 800969c:	200005ed 	.word	0x200005ed

080096a0 <__sinit_lock_acquire>:
 80096a0:	4801      	ldr	r0, [pc, #4]	; (80096a8 <__sinit_lock_acquire+0x8>)
 80096a2:	f000 b8a7 	b.w	80097f4 <__retarget_lock_acquire_recursive>
 80096a6:	bf00      	nop
 80096a8:	200005ee 	.word	0x200005ee

080096ac <__sinit_lock_release>:
 80096ac:	4801      	ldr	r0, [pc, #4]	; (80096b4 <__sinit_lock_release+0x8>)
 80096ae:	f000 b8a2 	b.w	80097f6 <__retarget_lock_release_recursive>
 80096b2:	bf00      	nop
 80096b4:	200005ee 	.word	0x200005ee

080096b8 <__sinit>:
 80096b8:	b510      	push	{r4, lr}
 80096ba:	4604      	mov	r4, r0
 80096bc:	f7ff fff0 	bl	80096a0 <__sinit_lock_acquire>
 80096c0:	69a3      	ldr	r3, [r4, #24]
 80096c2:	b11b      	cbz	r3, 80096cc <__sinit+0x14>
 80096c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096c8:	f7ff bff0 	b.w	80096ac <__sinit_lock_release>
 80096cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80096d0:	6523      	str	r3, [r4, #80]	; 0x50
 80096d2:	4b13      	ldr	r3, [pc, #76]	; (8009720 <__sinit+0x68>)
 80096d4:	4a13      	ldr	r2, [pc, #76]	; (8009724 <__sinit+0x6c>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80096da:	42a3      	cmp	r3, r4
 80096dc:	bf04      	itt	eq
 80096de:	2301      	moveq	r3, #1
 80096e0:	61a3      	streq	r3, [r4, #24]
 80096e2:	4620      	mov	r0, r4
 80096e4:	f000 f820 	bl	8009728 <__sfp>
 80096e8:	6060      	str	r0, [r4, #4]
 80096ea:	4620      	mov	r0, r4
 80096ec:	f000 f81c 	bl	8009728 <__sfp>
 80096f0:	60a0      	str	r0, [r4, #8]
 80096f2:	4620      	mov	r0, r4
 80096f4:	f000 f818 	bl	8009728 <__sfp>
 80096f8:	2200      	movs	r2, #0
 80096fa:	60e0      	str	r0, [r4, #12]
 80096fc:	2104      	movs	r1, #4
 80096fe:	6860      	ldr	r0, [r4, #4]
 8009700:	f7ff ff82 	bl	8009608 <std>
 8009704:	68a0      	ldr	r0, [r4, #8]
 8009706:	2201      	movs	r2, #1
 8009708:	2109      	movs	r1, #9
 800970a:	f7ff ff7d 	bl	8009608 <std>
 800970e:	68e0      	ldr	r0, [r4, #12]
 8009710:	2202      	movs	r2, #2
 8009712:	2112      	movs	r1, #18
 8009714:	f7ff ff78 	bl	8009608 <std>
 8009718:	2301      	movs	r3, #1
 800971a:	61a3      	str	r3, [r4, #24]
 800971c:	e7d2      	b.n	80096c4 <__sinit+0xc>
 800971e:	bf00      	nop
 8009720:	0800b258 	.word	0x0800b258
 8009724:	08009651 	.word	0x08009651

08009728 <__sfp>:
 8009728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800972a:	4607      	mov	r7, r0
 800972c:	f7ff ffac 	bl	8009688 <__sfp_lock_acquire>
 8009730:	4b1e      	ldr	r3, [pc, #120]	; (80097ac <__sfp+0x84>)
 8009732:	681e      	ldr	r6, [r3, #0]
 8009734:	69b3      	ldr	r3, [r6, #24]
 8009736:	b913      	cbnz	r3, 800973e <__sfp+0x16>
 8009738:	4630      	mov	r0, r6
 800973a:	f7ff ffbd 	bl	80096b8 <__sinit>
 800973e:	3648      	adds	r6, #72	; 0x48
 8009740:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009744:	3b01      	subs	r3, #1
 8009746:	d503      	bpl.n	8009750 <__sfp+0x28>
 8009748:	6833      	ldr	r3, [r6, #0]
 800974a:	b30b      	cbz	r3, 8009790 <__sfp+0x68>
 800974c:	6836      	ldr	r6, [r6, #0]
 800974e:	e7f7      	b.n	8009740 <__sfp+0x18>
 8009750:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009754:	b9d5      	cbnz	r5, 800978c <__sfp+0x64>
 8009756:	4b16      	ldr	r3, [pc, #88]	; (80097b0 <__sfp+0x88>)
 8009758:	60e3      	str	r3, [r4, #12]
 800975a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800975e:	6665      	str	r5, [r4, #100]	; 0x64
 8009760:	f000 f847 	bl	80097f2 <__retarget_lock_init_recursive>
 8009764:	f7ff ff96 	bl	8009694 <__sfp_lock_release>
 8009768:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800976c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009770:	6025      	str	r5, [r4, #0]
 8009772:	61a5      	str	r5, [r4, #24]
 8009774:	2208      	movs	r2, #8
 8009776:	4629      	mov	r1, r5
 8009778:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800977c:	f7fe ff84 	bl	8008688 <memset>
 8009780:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009784:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009788:	4620      	mov	r0, r4
 800978a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800978c:	3468      	adds	r4, #104	; 0x68
 800978e:	e7d9      	b.n	8009744 <__sfp+0x1c>
 8009790:	2104      	movs	r1, #4
 8009792:	4638      	mov	r0, r7
 8009794:	f7ff ff62 	bl	800965c <__sfmoreglue>
 8009798:	4604      	mov	r4, r0
 800979a:	6030      	str	r0, [r6, #0]
 800979c:	2800      	cmp	r0, #0
 800979e:	d1d5      	bne.n	800974c <__sfp+0x24>
 80097a0:	f7ff ff78 	bl	8009694 <__sfp_lock_release>
 80097a4:	230c      	movs	r3, #12
 80097a6:	603b      	str	r3, [r7, #0]
 80097a8:	e7ee      	b.n	8009788 <__sfp+0x60>
 80097aa:	bf00      	nop
 80097ac:	0800b258 	.word	0x0800b258
 80097b0:	ffff0001 	.word	0xffff0001

080097b4 <_fwalk_reent>:
 80097b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097b8:	4606      	mov	r6, r0
 80097ba:	4688      	mov	r8, r1
 80097bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80097c0:	2700      	movs	r7, #0
 80097c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80097c6:	f1b9 0901 	subs.w	r9, r9, #1
 80097ca:	d505      	bpl.n	80097d8 <_fwalk_reent+0x24>
 80097cc:	6824      	ldr	r4, [r4, #0]
 80097ce:	2c00      	cmp	r4, #0
 80097d0:	d1f7      	bne.n	80097c2 <_fwalk_reent+0xe>
 80097d2:	4638      	mov	r0, r7
 80097d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097d8:	89ab      	ldrh	r3, [r5, #12]
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d907      	bls.n	80097ee <_fwalk_reent+0x3a>
 80097de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80097e2:	3301      	adds	r3, #1
 80097e4:	d003      	beq.n	80097ee <_fwalk_reent+0x3a>
 80097e6:	4629      	mov	r1, r5
 80097e8:	4630      	mov	r0, r6
 80097ea:	47c0      	blx	r8
 80097ec:	4307      	orrs	r7, r0
 80097ee:	3568      	adds	r5, #104	; 0x68
 80097f0:	e7e9      	b.n	80097c6 <_fwalk_reent+0x12>

080097f2 <__retarget_lock_init_recursive>:
 80097f2:	4770      	bx	lr

080097f4 <__retarget_lock_acquire_recursive>:
 80097f4:	4770      	bx	lr

080097f6 <__retarget_lock_release_recursive>:
 80097f6:	4770      	bx	lr

080097f8 <__swhatbuf_r>:
 80097f8:	b570      	push	{r4, r5, r6, lr}
 80097fa:	460e      	mov	r6, r1
 80097fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009800:	2900      	cmp	r1, #0
 8009802:	b096      	sub	sp, #88	; 0x58
 8009804:	4614      	mov	r4, r2
 8009806:	461d      	mov	r5, r3
 8009808:	da08      	bge.n	800981c <__swhatbuf_r+0x24>
 800980a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800980e:	2200      	movs	r2, #0
 8009810:	602a      	str	r2, [r5, #0]
 8009812:	061a      	lsls	r2, r3, #24
 8009814:	d410      	bmi.n	8009838 <__swhatbuf_r+0x40>
 8009816:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800981a:	e00e      	b.n	800983a <__swhatbuf_r+0x42>
 800981c:	466a      	mov	r2, sp
 800981e:	f000 f95f 	bl	8009ae0 <_fstat_r>
 8009822:	2800      	cmp	r0, #0
 8009824:	dbf1      	blt.n	800980a <__swhatbuf_r+0x12>
 8009826:	9a01      	ldr	r2, [sp, #4]
 8009828:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800982c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009830:	425a      	negs	r2, r3
 8009832:	415a      	adcs	r2, r3
 8009834:	602a      	str	r2, [r5, #0]
 8009836:	e7ee      	b.n	8009816 <__swhatbuf_r+0x1e>
 8009838:	2340      	movs	r3, #64	; 0x40
 800983a:	2000      	movs	r0, #0
 800983c:	6023      	str	r3, [r4, #0]
 800983e:	b016      	add	sp, #88	; 0x58
 8009840:	bd70      	pop	{r4, r5, r6, pc}
	...

08009844 <__smakebuf_r>:
 8009844:	898b      	ldrh	r3, [r1, #12]
 8009846:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009848:	079d      	lsls	r5, r3, #30
 800984a:	4606      	mov	r6, r0
 800984c:	460c      	mov	r4, r1
 800984e:	d507      	bpl.n	8009860 <__smakebuf_r+0x1c>
 8009850:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009854:	6023      	str	r3, [r4, #0]
 8009856:	6123      	str	r3, [r4, #16]
 8009858:	2301      	movs	r3, #1
 800985a:	6163      	str	r3, [r4, #20]
 800985c:	b002      	add	sp, #8
 800985e:	bd70      	pop	{r4, r5, r6, pc}
 8009860:	ab01      	add	r3, sp, #4
 8009862:	466a      	mov	r2, sp
 8009864:	f7ff ffc8 	bl	80097f8 <__swhatbuf_r>
 8009868:	9900      	ldr	r1, [sp, #0]
 800986a:	4605      	mov	r5, r0
 800986c:	4630      	mov	r0, r6
 800986e:	f7ff f879 	bl	8008964 <_malloc_r>
 8009872:	b948      	cbnz	r0, 8009888 <__smakebuf_r+0x44>
 8009874:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009878:	059a      	lsls	r2, r3, #22
 800987a:	d4ef      	bmi.n	800985c <__smakebuf_r+0x18>
 800987c:	f023 0303 	bic.w	r3, r3, #3
 8009880:	f043 0302 	orr.w	r3, r3, #2
 8009884:	81a3      	strh	r3, [r4, #12]
 8009886:	e7e3      	b.n	8009850 <__smakebuf_r+0xc>
 8009888:	4b0d      	ldr	r3, [pc, #52]	; (80098c0 <__smakebuf_r+0x7c>)
 800988a:	62b3      	str	r3, [r6, #40]	; 0x28
 800988c:	89a3      	ldrh	r3, [r4, #12]
 800988e:	6020      	str	r0, [r4, #0]
 8009890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009894:	81a3      	strh	r3, [r4, #12]
 8009896:	9b00      	ldr	r3, [sp, #0]
 8009898:	6163      	str	r3, [r4, #20]
 800989a:	9b01      	ldr	r3, [sp, #4]
 800989c:	6120      	str	r0, [r4, #16]
 800989e:	b15b      	cbz	r3, 80098b8 <__smakebuf_r+0x74>
 80098a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098a4:	4630      	mov	r0, r6
 80098a6:	f000 f92d 	bl	8009b04 <_isatty_r>
 80098aa:	b128      	cbz	r0, 80098b8 <__smakebuf_r+0x74>
 80098ac:	89a3      	ldrh	r3, [r4, #12]
 80098ae:	f023 0303 	bic.w	r3, r3, #3
 80098b2:	f043 0301 	orr.w	r3, r3, #1
 80098b6:	81a3      	strh	r3, [r4, #12]
 80098b8:	89a0      	ldrh	r0, [r4, #12]
 80098ba:	4305      	orrs	r5, r0
 80098bc:	81a5      	strh	r5, [r4, #12]
 80098be:	e7cd      	b.n	800985c <__smakebuf_r+0x18>
 80098c0:	08009651 	.word	0x08009651

080098c4 <memcpy>:
 80098c4:	440a      	add	r2, r1
 80098c6:	4291      	cmp	r1, r2
 80098c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80098cc:	d100      	bne.n	80098d0 <memcpy+0xc>
 80098ce:	4770      	bx	lr
 80098d0:	b510      	push	{r4, lr}
 80098d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098da:	4291      	cmp	r1, r2
 80098dc:	d1f9      	bne.n	80098d2 <memcpy+0xe>
 80098de:	bd10      	pop	{r4, pc}

080098e0 <memmove>:
 80098e0:	4288      	cmp	r0, r1
 80098e2:	b510      	push	{r4, lr}
 80098e4:	eb01 0402 	add.w	r4, r1, r2
 80098e8:	d902      	bls.n	80098f0 <memmove+0x10>
 80098ea:	4284      	cmp	r4, r0
 80098ec:	4623      	mov	r3, r4
 80098ee:	d807      	bhi.n	8009900 <memmove+0x20>
 80098f0:	1e43      	subs	r3, r0, #1
 80098f2:	42a1      	cmp	r1, r4
 80098f4:	d008      	beq.n	8009908 <memmove+0x28>
 80098f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80098fe:	e7f8      	b.n	80098f2 <memmove+0x12>
 8009900:	4402      	add	r2, r0
 8009902:	4601      	mov	r1, r0
 8009904:	428a      	cmp	r2, r1
 8009906:	d100      	bne.n	800990a <memmove+0x2a>
 8009908:	bd10      	pop	{r4, pc}
 800990a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800990e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009912:	e7f7      	b.n	8009904 <memmove+0x24>

08009914 <__malloc_lock>:
 8009914:	4801      	ldr	r0, [pc, #4]	; (800991c <__malloc_lock+0x8>)
 8009916:	f7ff bf6d 	b.w	80097f4 <__retarget_lock_acquire_recursive>
 800991a:	bf00      	nop
 800991c:	200005ec 	.word	0x200005ec

08009920 <__malloc_unlock>:
 8009920:	4801      	ldr	r0, [pc, #4]	; (8009928 <__malloc_unlock+0x8>)
 8009922:	f7ff bf68 	b.w	80097f6 <__retarget_lock_release_recursive>
 8009926:	bf00      	nop
 8009928:	200005ec 	.word	0x200005ec

0800992c <_realloc_r>:
 800992c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009930:	4680      	mov	r8, r0
 8009932:	4614      	mov	r4, r2
 8009934:	460e      	mov	r6, r1
 8009936:	b921      	cbnz	r1, 8009942 <_realloc_r+0x16>
 8009938:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800993c:	4611      	mov	r1, r2
 800993e:	f7ff b811 	b.w	8008964 <_malloc_r>
 8009942:	b92a      	cbnz	r2, 8009950 <_realloc_r+0x24>
 8009944:	f7fe ffa4 	bl	8008890 <_free_r>
 8009948:	4625      	mov	r5, r4
 800994a:	4628      	mov	r0, r5
 800994c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009950:	f000 f8fa 	bl	8009b48 <_malloc_usable_size_r>
 8009954:	4284      	cmp	r4, r0
 8009956:	4607      	mov	r7, r0
 8009958:	d802      	bhi.n	8009960 <_realloc_r+0x34>
 800995a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800995e:	d812      	bhi.n	8009986 <_realloc_r+0x5a>
 8009960:	4621      	mov	r1, r4
 8009962:	4640      	mov	r0, r8
 8009964:	f7fe fffe 	bl	8008964 <_malloc_r>
 8009968:	4605      	mov	r5, r0
 800996a:	2800      	cmp	r0, #0
 800996c:	d0ed      	beq.n	800994a <_realloc_r+0x1e>
 800996e:	42bc      	cmp	r4, r7
 8009970:	4622      	mov	r2, r4
 8009972:	4631      	mov	r1, r6
 8009974:	bf28      	it	cs
 8009976:	463a      	movcs	r2, r7
 8009978:	f7ff ffa4 	bl	80098c4 <memcpy>
 800997c:	4631      	mov	r1, r6
 800997e:	4640      	mov	r0, r8
 8009980:	f7fe ff86 	bl	8008890 <_free_r>
 8009984:	e7e1      	b.n	800994a <_realloc_r+0x1e>
 8009986:	4635      	mov	r5, r6
 8009988:	e7df      	b.n	800994a <_realloc_r+0x1e>

0800998a <_raise_r>:
 800998a:	291f      	cmp	r1, #31
 800998c:	b538      	push	{r3, r4, r5, lr}
 800998e:	4604      	mov	r4, r0
 8009990:	460d      	mov	r5, r1
 8009992:	d904      	bls.n	800999e <_raise_r+0x14>
 8009994:	2316      	movs	r3, #22
 8009996:	6003      	str	r3, [r0, #0]
 8009998:	f04f 30ff 	mov.w	r0, #4294967295
 800999c:	bd38      	pop	{r3, r4, r5, pc}
 800999e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80099a0:	b112      	cbz	r2, 80099a8 <_raise_r+0x1e>
 80099a2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80099a6:	b94b      	cbnz	r3, 80099bc <_raise_r+0x32>
 80099a8:	4620      	mov	r0, r4
 80099aa:	f000 f831 	bl	8009a10 <_getpid_r>
 80099ae:	462a      	mov	r2, r5
 80099b0:	4601      	mov	r1, r0
 80099b2:	4620      	mov	r0, r4
 80099b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099b8:	f000 b818 	b.w	80099ec <_kill_r>
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d00a      	beq.n	80099d6 <_raise_r+0x4c>
 80099c0:	1c59      	adds	r1, r3, #1
 80099c2:	d103      	bne.n	80099cc <_raise_r+0x42>
 80099c4:	2316      	movs	r3, #22
 80099c6:	6003      	str	r3, [r0, #0]
 80099c8:	2001      	movs	r0, #1
 80099ca:	e7e7      	b.n	800999c <_raise_r+0x12>
 80099cc:	2400      	movs	r4, #0
 80099ce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80099d2:	4628      	mov	r0, r5
 80099d4:	4798      	blx	r3
 80099d6:	2000      	movs	r0, #0
 80099d8:	e7e0      	b.n	800999c <_raise_r+0x12>
	...

080099dc <raise>:
 80099dc:	4b02      	ldr	r3, [pc, #8]	; (80099e8 <raise+0xc>)
 80099de:	4601      	mov	r1, r0
 80099e0:	6818      	ldr	r0, [r3, #0]
 80099e2:	f7ff bfd2 	b.w	800998a <_raise_r>
 80099e6:	bf00      	nop
 80099e8:	20000048 	.word	0x20000048

080099ec <_kill_r>:
 80099ec:	b538      	push	{r3, r4, r5, lr}
 80099ee:	4d07      	ldr	r5, [pc, #28]	; (8009a0c <_kill_r+0x20>)
 80099f0:	2300      	movs	r3, #0
 80099f2:	4604      	mov	r4, r0
 80099f4:	4608      	mov	r0, r1
 80099f6:	4611      	mov	r1, r2
 80099f8:	602b      	str	r3, [r5, #0]
 80099fa:	f7f8 fc8c 	bl	8002316 <_kill>
 80099fe:	1c43      	adds	r3, r0, #1
 8009a00:	d102      	bne.n	8009a08 <_kill_r+0x1c>
 8009a02:	682b      	ldr	r3, [r5, #0]
 8009a04:	b103      	cbz	r3, 8009a08 <_kill_r+0x1c>
 8009a06:	6023      	str	r3, [r4, #0]
 8009a08:	bd38      	pop	{r3, r4, r5, pc}
 8009a0a:	bf00      	nop
 8009a0c:	200005f0 	.word	0x200005f0

08009a10 <_getpid_r>:
 8009a10:	f7f8 bc7a 	b.w	8002308 <_getpid>

08009a14 <__sread>:
 8009a14:	b510      	push	{r4, lr}
 8009a16:	460c      	mov	r4, r1
 8009a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a1c:	f000 f89c 	bl	8009b58 <_read_r>
 8009a20:	2800      	cmp	r0, #0
 8009a22:	bfab      	itete	ge
 8009a24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a26:	89a3      	ldrhlt	r3, [r4, #12]
 8009a28:	181b      	addge	r3, r3, r0
 8009a2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a2e:	bfac      	ite	ge
 8009a30:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a32:	81a3      	strhlt	r3, [r4, #12]
 8009a34:	bd10      	pop	{r4, pc}

08009a36 <__swrite>:
 8009a36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a3a:	461f      	mov	r7, r3
 8009a3c:	898b      	ldrh	r3, [r1, #12]
 8009a3e:	05db      	lsls	r3, r3, #23
 8009a40:	4605      	mov	r5, r0
 8009a42:	460c      	mov	r4, r1
 8009a44:	4616      	mov	r6, r2
 8009a46:	d505      	bpl.n	8009a54 <__swrite+0x1e>
 8009a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a4c:	2302      	movs	r3, #2
 8009a4e:	2200      	movs	r2, #0
 8009a50:	f000 f868 	bl	8009b24 <_lseek_r>
 8009a54:	89a3      	ldrh	r3, [r4, #12]
 8009a56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a5e:	81a3      	strh	r3, [r4, #12]
 8009a60:	4632      	mov	r2, r6
 8009a62:	463b      	mov	r3, r7
 8009a64:	4628      	mov	r0, r5
 8009a66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a6a:	f000 b817 	b.w	8009a9c <_write_r>

08009a6e <__sseek>:
 8009a6e:	b510      	push	{r4, lr}
 8009a70:	460c      	mov	r4, r1
 8009a72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a76:	f000 f855 	bl	8009b24 <_lseek_r>
 8009a7a:	1c43      	adds	r3, r0, #1
 8009a7c:	89a3      	ldrh	r3, [r4, #12]
 8009a7e:	bf15      	itete	ne
 8009a80:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a8a:	81a3      	strheq	r3, [r4, #12]
 8009a8c:	bf18      	it	ne
 8009a8e:	81a3      	strhne	r3, [r4, #12]
 8009a90:	bd10      	pop	{r4, pc}

08009a92 <__sclose>:
 8009a92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a96:	f000 b813 	b.w	8009ac0 <_close_r>
	...

08009a9c <_write_r>:
 8009a9c:	b538      	push	{r3, r4, r5, lr}
 8009a9e:	4d07      	ldr	r5, [pc, #28]	; (8009abc <_write_r+0x20>)
 8009aa0:	4604      	mov	r4, r0
 8009aa2:	4608      	mov	r0, r1
 8009aa4:	4611      	mov	r1, r2
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	602a      	str	r2, [r5, #0]
 8009aaa:	461a      	mov	r2, r3
 8009aac:	f7f8 fc6a 	bl	8002384 <_write>
 8009ab0:	1c43      	adds	r3, r0, #1
 8009ab2:	d102      	bne.n	8009aba <_write_r+0x1e>
 8009ab4:	682b      	ldr	r3, [r5, #0]
 8009ab6:	b103      	cbz	r3, 8009aba <_write_r+0x1e>
 8009ab8:	6023      	str	r3, [r4, #0]
 8009aba:	bd38      	pop	{r3, r4, r5, pc}
 8009abc:	200005f0 	.word	0x200005f0

08009ac0 <_close_r>:
 8009ac0:	b538      	push	{r3, r4, r5, lr}
 8009ac2:	4d06      	ldr	r5, [pc, #24]	; (8009adc <_close_r+0x1c>)
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	4604      	mov	r4, r0
 8009ac8:	4608      	mov	r0, r1
 8009aca:	602b      	str	r3, [r5, #0]
 8009acc:	f7f8 fc76 	bl	80023bc <_close>
 8009ad0:	1c43      	adds	r3, r0, #1
 8009ad2:	d102      	bne.n	8009ada <_close_r+0x1a>
 8009ad4:	682b      	ldr	r3, [r5, #0]
 8009ad6:	b103      	cbz	r3, 8009ada <_close_r+0x1a>
 8009ad8:	6023      	str	r3, [r4, #0]
 8009ada:	bd38      	pop	{r3, r4, r5, pc}
 8009adc:	200005f0 	.word	0x200005f0

08009ae0 <_fstat_r>:
 8009ae0:	b538      	push	{r3, r4, r5, lr}
 8009ae2:	4d07      	ldr	r5, [pc, #28]	; (8009b00 <_fstat_r+0x20>)
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	4604      	mov	r4, r0
 8009ae8:	4608      	mov	r0, r1
 8009aea:	4611      	mov	r1, r2
 8009aec:	602b      	str	r3, [r5, #0]
 8009aee:	f7f8 fc70 	bl	80023d2 <_fstat>
 8009af2:	1c43      	adds	r3, r0, #1
 8009af4:	d102      	bne.n	8009afc <_fstat_r+0x1c>
 8009af6:	682b      	ldr	r3, [r5, #0]
 8009af8:	b103      	cbz	r3, 8009afc <_fstat_r+0x1c>
 8009afa:	6023      	str	r3, [r4, #0]
 8009afc:	bd38      	pop	{r3, r4, r5, pc}
 8009afe:	bf00      	nop
 8009b00:	200005f0 	.word	0x200005f0

08009b04 <_isatty_r>:
 8009b04:	b538      	push	{r3, r4, r5, lr}
 8009b06:	4d06      	ldr	r5, [pc, #24]	; (8009b20 <_isatty_r+0x1c>)
 8009b08:	2300      	movs	r3, #0
 8009b0a:	4604      	mov	r4, r0
 8009b0c:	4608      	mov	r0, r1
 8009b0e:	602b      	str	r3, [r5, #0]
 8009b10:	f7f8 fc6e 	bl	80023f0 <_isatty>
 8009b14:	1c43      	adds	r3, r0, #1
 8009b16:	d102      	bne.n	8009b1e <_isatty_r+0x1a>
 8009b18:	682b      	ldr	r3, [r5, #0]
 8009b1a:	b103      	cbz	r3, 8009b1e <_isatty_r+0x1a>
 8009b1c:	6023      	str	r3, [r4, #0]
 8009b1e:	bd38      	pop	{r3, r4, r5, pc}
 8009b20:	200005f0 	.word	0x200005f0

08009b24 <_lseek_r>:
 8009b24:	b538      	push	{r3, r4, r5, lr}
 8009b26:	4d07      	ldr	r5, [pc, #28]	; (8009b44 <_lseek_r+0x20>)
 8009b28:	4604      	mov	r4, r0
 8009b2a:	4608      	mov	r0, r1
 8009b2c:	4611      	mov	r1, r2
 8009b2e:	2200      	movs	r2, #0
 8009b30:	602a      	str	r2, [r5, #0]
 8009b32:	461a      	mov	r2, r3
 8009b34:	f7f8 fc66 	bl	8002404 <_lseek>
 8009b38:	1c43      	adds	r3, r0, #1
 8009b3a:	d102      	bne.n	8009b42 <_lseek_r+0x1e>
 8009b3c:	682b      	ldr	r3, [r5, #0]
 8009b3e:	b103      	cbz	r3, 8009b42 <_lseek_r+0x1e>
 8009b40:	6023      	str	r3, [r4, #0]
 8009b42:	bd38      	pop	{r3, r4, r5, pc}
 8009b44:	200005f0 	.word	0x200005f0

08009b48 <_malloc_usable_size_r>:
 8009b48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b4c:	1f18      	subs	r0, r3, #4
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	bfbc      	itt	lt
 8009b52:	580b      	ldrlt	r3, [r1, r0]
 8009b54:	18c0      	addlt	r0, r0, r3
 8009b56:	4770      	bx	lr

08009b58 <_read_r>:
 8009b58:	b538      	push	{r3, r4, r5, lr}
 8009b5a:	4d07      	ldr	r5, [pc, #28]	; (8009b78 <_read_r+0x20>)
 8009b5c:	4604      	mov	r4, r0
 8009b5e:	4608      	mov	r0, r1
 8009b60:	4611      	mov	r1, r2
 8009b62:	2200      	movs	r2, #0
 8009b64:	602a      	str	r2, [r5, #0]
 8009b66:	461a      	mov	r2, r3
 8009b68:	f7f8 fbef 	bl	800234a <_read>
 8009b6c:	1c43      	adds	r3, r0, #1
 8009b6e:	d102      	bne.n	8009b76 <_read_r+0x1e>
 8009b70:	682b      	ldr	r3, [r5, #0]
 8009b72:	b103      	cbz	r3, 8009b76 <_read_r+0x1e>
 8009b74:	6023      	str	r3, [r4, #0]
 8009b76:	bd38      	pop	{r3, r4, r5, pc}
 8009b78:	200005f0 	.word	0x200005f0

08009b7c <pow>:
 8009b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b80:	4614      	mov	r4, r2
 8009b82:	461d      	mov	r5, r3
 8009b84:	4680      	mov	r8, r0
 8009b86:	4689      	mov	r9, r1
 8009b88:	f000 f862 	bl	8009c50 <__ieee754_pow>
 8009b8c:	4622      	mov	r2, r4
 8009b8e:	4606      	mov	r6, r0
 8009b90:	460f      	mov	r7, r1
 8009b92:	462b      	mov	r3, r5
 8009b94:	4620      	mov	r0, r4
 8009b96:	4629      	mov	r1, r5
 8009b98:	f7f6 ffa0 	bl	8000adc <__aeabi_dcmpun>
 8009b9c:	bbc8      	cbnz	r0, 8009c12 <pow+0x96>
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	4640      	mov	r0, r8
 8009ba4:	4649      	mov	r1, r9
 8009ba6:	f7f6 ff67 	bl	8000a78 <__aeabi_dcmpeq>
 8009baa:	b1b8      	cbz	r0, 8009bdc <pow+0x60>
 8009bac:	2200      	movs	r2, #0
 8009bae:	2300      	movs	r3, #0
 8009bb0:	4620      	mov	r0, r4
 8009bb2:	4629      	mov	r1, r5
 8009bb4:	f7f6 ff60 	bl	8000a78 <__aeabi_dcmpeq>
 8009bb8:	2800      	cmp	r0, #0
 8009bba:	d141      	bne.n	8009c40 <pow+0xc4>
 8009bbc:	4620      	mov	r0, r4
 8009bbe:	4629      	mov	r1, r5
 8009bc0:	f000 fe39 	bl	800a836 <finite>
 8009bc4:	b328      	cbz	r0, 8009c12 <pow+0x96>
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	2300      	movs	r3, #0
 8009bca:	4620      	mov	r0, r4
 8009bcc:	4629      	mov	r1, r5
 8009bce:	f7f6 ff5d 	bl	8000a8c <__aeabi_dcmplt>
 8009bd2:	b1f0      	cbz	r0, 8009c12 <pow+0x96>
 8009bd4:	f7fe fd2e 	bl	8008634 <__errno>
 8009bd8:	2322      	movs	r3, #34	; 0x22
 8009bda:	e019      	b.n	8009c10 <pow+0x94>
 8009bdc:	4630      	mov	r0, r6
 8009bde:	4639      	mov	r1, r7
 8009be0:	f000 fe29 	bl	800a836 <finite>
 8009be4:	b9c8      	cbnz	r0, 8009c1a <pow+0x9e>
 8009be6:	4640      	mov	r0, r8
 8009be8:	4649      	mov	r1, r9
 8009bea:	f000 fe24 	bl	800a836 <finite>
 8009bee:	b1a0      	cbz	r0, 8009c1a <pow+0x9e>
 8009bf0:	4620      	mov	r0, r4
 8009bf2:	4629      	mov	r1, r5
 8009bf4:	f000 fe1f 	bl	800a836 <finite>
 8009bf8:	b178      	cbz	r0, 8009c1a <pow+0x9e>
 8009bfa:	4632      	mov	r2, r6
 8009bfc:	463b      	mov	r3, r7
 8009bfe:	4630      	mov	r0, r6
 8009c00:	4639      	mov	r1, r7
 8009c02:	f7f6 ff6b 	bl	8000adc <__aeabi_dcmpun>
 8009c06:	2800      	cmp	r0, #0
 8009c08:	d0e4      	beq.n	8009bd4 <pow+0x58>
 8009c0a:	f7fe fd13 	bl	8008634 <__errno>
 8009c0e:	2321      	movs	r3, #33	; 0x21
 8009c10:	6003      	str	r3, [r0, #0]
 8009c12:	4630      	mov	r0, r6
 8009c14:	4639      	mov	r1, r7
 8009c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	4630      	mov	r0, r6
 8009c20:	4639      	mov	r1, r7
 8009c22:	f7f6 ff29 	bl	8000a78 <__aeabi_dcmpeq>
 8009c26:	2800      	cmp	r0, #0
 8009c28:	d0f3      	beq.n	8009c12 <pow+0x96>
 8009c2a:	4640      	mov	r0, r8
 8009c2c:	4649      	mov	r1, r9
 8009c2e:	f000 fe02 	bl	800a836 <finite>
 8009c32:	2800      	cmp	r0, #0
 8009c34:	d0ed      	beq.n	8009c12 <pow+0x96>
 8009c36:	4620      	mov	r0, r4
 8009c38:	4629      	mov	r1, r5
 8009c3a:	f000 fdfc 	bl	800a836 <finite>
 8009c3e:	e7c8      	b.n	8009bd2 <pow+0x56>
 8009c40:	4f01      	ldr	r7, [pc, #4]	; (8009c48 <pow+0xcc>)
 8009c42:	2600      	movs	r6, #0
 8009c44:	e7e5      	b.n	8009c12 <pow+0x96>
 8009c46:	bf00      	nop
 8009c48:	3ff00000 	.word	0x3ff00000
 8009c4c:	00000000 	.word	0x00000000

08009c50 <__ieee754_pow>:
 8009c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c54:	b093      	sub	sp, #76	; 0x4c
 8009c56:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009c5a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8009c5e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8009c62:	4689      	mov	r9, r1
 8009c64:	ea56 0102 	orrs.w	r1, r6, r2
 8009c68:	4680      	mov	r8, r0
 8009c6a:	d111      	bne.n	8009c90 <__ieee754_pow+0x40>
 8009c6c:	1803      	adds	r3, r0, r0
 8009c6e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8009c72:	4152      	adcs	r2, r2
 8009c74:	4299      	cmp	r1, r3
 8009c76:	4b82      	ldr	r3, [pc, #520]	; (8009e80 <__ieee754_pow+0x230>)
 8009c78:	4193      	sbcs	r3, r2
 8009c7a:	f080 84b9 	bcs.w	800a5f0 <__ieee754_pow+0x9a0>
 8009c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c82:	4640      	mov	r0, r8
 8009c84:	4649      	mov	r1, r9
 8009c86:	f7f6 fad9 	bl	800023c <__adddf3>
 8009c8a:	4683      	mov	fp, r0
 8009c8c:	468c      	mov	ip, r1
 8009c8e:	e06f      	b.n	8009d70 <__ieee754_pow+0x120>
 8009c90:	4b7c      	ldr	r3, [pc, #496]	; (8009e84 <__ieee754_pow+0x234>)
 8009c92:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8009c96:	429c      	cmp	r4, r3
 8009c98:	464d      	mov	r5, r9
 8009c9a:	4682      	mov	sl, r0
 8009c9c:	dc06      	bgt.n	8009cac <__ieee754_pow+0x5c>
 8009c9e:	d101      	bne.n	8009ca4 <__ieee754_pow+0x54>
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	d1ec      	bne.n	8009c7e <__ieee754_pow+0x2e>
 8009ca4:	429e      	cmp	r6, r3
 8009ca6:	dc01      	bgt.n	8009cac <__ieee754_pow+0x5c>
 8009ca8:	d10f      	bne.n	8009cca <__ieee754_pow+0x7a>
 8009caa:	b172      	cbz	r2, 8009cca <__ieee754_pow+0x7a>
 8009cac:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009cb0:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009cb4:	ea55 050a 	orrs.w	r5, r5, sl
 8009cb8:	d1e1      	bne.n	8009c7e <__ieee754_pow+0x2e>
 8009cba:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009cbe:	18db      	adds	r3, r3, r3
 8009cc0:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009cc4:	4152      	adcs	r2, r2
 8009cc6:	429d      	cmp	r5, r3
 8009cc8:	e7d5      	b.n	8009c76 <__ieee754_pow+0x26>
 8009cca:	2d00      	cmp	r5, #0
 8009ccc:	da39      	bge.n	8009d42 <__ieee754_pow+0xf2>
 8009cce:	4b6e      	ldr	r3, [pc, #440]	; (8009e88 <__ieee754_pow+0x238>)
 8009cd0:	429e      	cmp	r6, r3
 8009cd2:	dc52      	bgt.n	8009d7a <__ieee754_pow+0x12a>
 8009cd4:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009cd8:	429e      	cmp	r6, r3
 8009cda:	f340 849c 	ble.w	800a616 <__ieee754_pow+0x9c6>
 8009cde:	1533      	asrs	r3, r6, #20
 8009ce0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009ce4:	2b14      	cmp	r3, #20
 8009ce6:	dd0f      	ble.n	8009d08 <__ieee754_pow+0xb8>
 8009ce8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009cec:	fa22 f103 	lsr.w	r1, r2, r3
 8009cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	f040 848e 	bne.w	800a616 <__ieee754_pow+0x9c6>
 8009cfa:	f001 0101 	and.w	r1, r1, #1
 8009cfe:	f1c1 0302 	rsb	r3, r1, #2
 8009d02:	9300      	str	r3, [sp, #0]
 8009d04:	b182      	cbz	r2, 8009d28 <__ieee754_pow+0xd8>
 8009d06:	e05d      	b.n	8009dc4 <__ieee754_pow+0x174>
 8009d08:	2a00      	cmp	r2, #0
 8009d0a:	d159      	bne.n	8009dc0 <__ieee754_pow+0x170>
 8009d0c:	f1c3 0314 	rsb	r3, r3, #20
 8009d10:	fa46 f103 	asr.w	r1, r6, r3
 8009d14:	fa01 f303 	lsl.w	r3, r1, r3
 8009d18:	42b3      	cmp	r3, r6
 8009d1a:	f040 8479 	bne.w	800a610 <__ieee754_pow+0x9c0>
 8009d1e:	f001 0101 	and.w	r1, r1, #1
 8009d22:	f1c1 0302 	rsb	r3, r1, #2
 8009d26:	9300      	str	r3, [sp, #0]
 8009d28:	4b58      	ldr	r3, [pc, #352]	; (8009e8c <__ieee754_pow+0x23c>)
 8009d2a:	429e      	cmp	r6, r3
 8009d2c:	d132      	bne.n	8009d94 <__ieee754_pow+0x144>
 8009d2e:	2f00      	cmp	r7, #0
 8009d30:	f280 846a 	bge.w	800a608 <__ieee754_pow+0x9b8>
 8009d34:	4955      	ldr	r1, [pc, #340]	; (8009e8c <__ieee754_pow+0x23c>)
 8009d36:	4642      	mov	r2, r8
 8009d38:	464b      	mov	r3, r9
 8009d3a:	2000      	movs	r0, #0
 8009d3c:	f7f6 fd5e 	bl	80007fc <__aeabi_ddiv>
 8009d40:	e7a3      	b.n	8009c8a <__ieee754_pow+0x3a>
 8009d42:	2300      	movs	r3, #0
 8009d44:	9300      	str	r3, [sp, #0]
 8009d46:	2a00      	cmp	r2, #0
 8009d48:	d13c      	bne.n	8009dc4 <__ieee754_pow+0x174>
 8009d4a:	4b4e      	ldr	r3, [pc, #312]	; (8009e84 <__ieee754_pow+0x234>)
 8009d4c:	429e      	cmp	r6, r3
 8009d4e:	d1eb      	bne.n	8009d28 <__ieee754_pow+0xd8>
 8009d50:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009d54:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009d58:	ea53 030a 	orrs.w	r3, r3, sl
 8009d5c:	f000 8448 	beq.w	800a5f0 <__ieee754_pow+0x9a0>
 8009d60:	4b4b      	ldr	r3, [pc, #300]	; (8009e90 <__ieee754_pow+0x240>)
 8009d62:	429c      	cmp	r4, r3
 8009d64:	dd0b      	ble.n	8009d7e <__ieee754_pow+0x12e>
 8009d66:	2f00      	cmp	r7, #0
 8009d68:	f2c0 8448 	blt.w	800a5fc <__ieee754_pow+0x9ac>
 8009d6c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8009d70:	4658      	mov	r0, fp
 8009d72:	4661      	mov	r1, ip
 8009d74:	b013      	add	sp, #76	; 0x4c
 8009d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d7a:	2302      	movs	r3, #2
 8009d7c:	e7e2      	b.n	8009d44 <__ieee754_pow+0xf4>
 8009d7e:	2f00      	cmp	r7, #0
 8009d80:	f04f 0b00 	mov.w	fp, #0
 8009d84:	f04f 0c00 	mov.w	ip, #0
 8009d88:	daf2      	bge.n	8009d70 <__ieee754_pow+0x120>
 8009d8a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8009d8e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8009d92:	e7ed      	b.n	8009d70 <__ieee754_pow+0x120>
 8009d94:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8009d98:	d106      	bne.n	8009da8 <__ieee754_pow+0x158>
 8009d9a:	4642      	mov	r2, r8
 8009d9c:	464b      	mov	r3, r9
 8009d9e:	4640      	mov	r0, r8
 8009da0:	4649      	mov	r1, r9
 8009da2:	f7f6 fc01 	bl	80005a8 <__aeabi_dmul>
 8009da6:	e770      	b.n	8009c8a <__ieee754_pow+0x3a>
 8009da8:	4b3a      	ldr	r3, [pc, #232]	; (8009e94 <__ieee754_pow+0x244>)
 8009daa:	429f      	cmp	r7, r3
 8009dac:	d10a      	bne.n	8009dc4 <__ieee754_pow+0x174>
 8009dae:	2d00      	cmp	r5, #0
 8009db0:	db08      	blt.n	8009dc4 <__ieee754_pow+0x174>
 8009db2:	4640      	mov	r0, r8
 8009db4:	4649      	mov	r1, r9
 8009db6:	b013      	add	sp, #76	; 0x4c
 8009db8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dbc:	f000 bc5e 	b.w	800a67c <__ieee754_sqrt>
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	9300      	str	r3, [sp, #0]
 8009dc4:	4640      	mov	r0, r8
 8009dc6:	4649      	mov	r1, r9
 8009dc8:	f000 fd32 	bl	800a830 <fabs>
 8009dcc:	4683      	mov	fp, r0
 8009dce:	468c      	mov	ip, r1
 8009dd0:	f1ba 0f00 	cmp.w	sl, #0
 8009dd4:	d128      	bne.n	8009e28 <__ieee754_pow+0x1d8>
 8009dd6:	b124      	cbz	r4, 8009de2 <__ieee754_pow+0x192>
 8009dd8:	4b2c      	ldr	r3, [pc, #176]	; (8009e8c <__ieee754_pow+0x23c>)
 8009dda:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d122      	bne.n	8009e28 <__ieee754_pow+0x1d8>
 8009de2:	2f00      	cmp	r7, #0
 8009de4:	da07      	bge.n	8009df6 <__ieee754_pow+0x1a6>
 8009de6:	465a      	mov	r2, fp
 8009de8:	4663      	mov	r3, ip
 8009dea:	4928      	ldr	r1, [pc, #160]	; (8009e8c <__ieee754_pow+0x23c>)
 8009dec:	2000      	movs	r0, #0
 8009dee:	f7f6 fd05 	bl	80007fc <__aeabi_ddiv>
 8009df2:	4683      	mov	fp, r0
 8009df4:	468c      	mov	ip, r1
 8009df6:	2d00      	cmp	r5, #0
 8009df8:	daba      	bge.n	8009d70 <__ieee754_pow+0x120>
 8009dfa:	9b00      	ldr	r3, [sp, #0]
 8009dfc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009e00:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009e04:	4323      	orrs	r3, r4
 8009e06:	d108      	bne.n	8009e1a <__ieee754_pow+0x1ca>
 8009e08:	465a      	mov	r2, fp
 8009e0a:	4663      	mov	r3, ip
 8009e0c:	4658      	mov	r0, fp
 8009e0e:	4661      	mov	r1, ip
 8009e10:	f7f6 fa12 	bl	8000238 <__aeabi_dsub>
 8009e14:	4602      	mov	r2, r0
 8009e16:	460b      	mov	r3, r1
 8009e18:	e790      	b.n	8009d3c <__ieee754_pow+0xec>
 8009e1a:	9b00      	ldr	r3, [sp, #0]
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d1a7      	bne.n	8009d70 <__ieee754_pow+0x120>
 8009e20:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8009e24:	469c      	mov	ip, r3
 8009e26:	e7a3      	b.n	8009d70 <__ieee754_pow+0x120>
 8009e28:	0feb      	lsrs	r3, r5, #31
 8009e2a:	3b01      	subs	r3, #1
 8009e2c:	930c      	str	r3, [sp, #48]	; 0x30
 8009e2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e30:	9b00      	ldr	r3, [sp, #0]
 8009e32:	4313      	orrs	r3, r2
 8009e34:	d104      	bne.n	8009e40 <__ieee754_pow+0x1f0>
 8009e36:	4642      	mov	r2, r8
 8009e38:	464b      	mov	r3, r9
 8009e3a:	4640      	mov	r0, r8
 8009e3c:	4649      	mov	r1, r9
 8009e3e:	e7e7      	b.n	8009e10 <__ieee754_pow+0x1c0>
 8009e40:	4b15      	ldr	r3, [pc, #84]	; (8009e98 <__ieee754_pow+0x248>)
 8009e42:	429e      	cmp	r6, r3
 8009e44:	f340 80f6 	ble.w	800a034 <__ieee754_pow+0x3e4>
 8009e48:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009e4c:	429e      	cmp	r6, r3
 8009e4e:	4b10      	ldr	r3, [pc, #64]	; (8009e90 <__ieee754_pow+0x240>)
 8009e50:	dd09      	ble.n	8009e66 <__ieee754_pow+0x216>
 8009e52:	429c      	cmp	r4, r3
 8009e54:	dc0c      	bgt.n	8009e70 <__ieee754_pow+0x220>
 8009e56:	2f00      	cmp	r7, #0
 8009e58:	da0c      	bge.n	8009e74 <__ieee754_pow+0x224>
 8009e5a:	2000      	movs	r0, #0
 8009e5c:	b013      	add	sp, #76	; 0x4c
 8009e5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e62:	f000 bce0 	b.w	800a826 <__math_oflow>
 8009e66:	429c      	cmp	r4, r3
 8009e68:	dbf5      	blt.n	8009e56 <__ieee754_pow+0x206>
 8009e6a:	4b08      	ldr	r3, [pc, #32]	; (8009e8c <__ieee754_pow+0x23c>)
 8009e6c:	429c      	cmp	r4, r3
 8009e6e:	dd15      	ble.n	8009e9c <__ieee754_pow+0x24c>
 8009e70:	2f00      	cmp	r7, #0
 8009e72:	dcf2      	bgt.n	8009e5a <__ieee754_pow+0x20a>
 8009e74:	2000      	movs	r0, #0
 8009e76:	b013      	add	sp, #76	; 0x4c
 8009e78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e7c:	f000 bcce 	b.w	800a81c <__math_uflow>
 8009e80:	fff00000 	.word	0xfff00000
 8009e84:	7ff00000 	.word	0x7ff00000
 8009e88:	433fffff 	.word	0x433fffff
 8009e8c:	3ff00000 	.word	0x3ff00000
 8009e90:	3fefffff 	.word	0x3fefffff
 8009e94:	3fe00000 	.word	0x3fe00000
 8009e98:	41e00000 	.word	0x41e00000
 8009e9c:	4661      	mov	r1, ip
 8009e9e:	4b60      	ldr	r3, [pc, #384]	; (800a020 <__ieee754_pow+0x3d0>)
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	4658      	mov	r0, fp
 8009ea4:	f7f6 f9c8 	bl	8000238 <__aeabi_dsub>
 8009ea8:	a355      	add	r3, pc, #340	; (adr r3, 800a000 <__ieee754_pow+0x3b0>)
 8009eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eae:	4604      	mov	r4, r0
 8009eb0:	460d      	mov	r5, r1
 8009eb2:	f7f6 fb79 	bl	80005a8 <__aeabi_dmul>
 8009eb6:	a354      	add	r3, pc, #336	; (adr r3, 800a008 <__ieee754_pow+0x3b8>)
 8009eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ebc:	4606      	mov	r6, r0
 8009ebe:	460f      	mov	r7, r1
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	4629      	mov	r1, r5
 8009ec4:	f7f6 fb70 	bl	80005a8 <__aeabi_dmul>
 8009ec8:	4b56      	ldr	r3, [pc, #344]	; (800a024 <__ieee754_pow+0x3d4>)
 8009eca:	4682      	mov	sl, r0
 8009ecc:	468b      	mov	fp, r1
 8009ece:	2200      	movs	r2, #0
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	4629      	mov	r1, r5
 8009ed4:	f7f6 fb68 	bl	80005a8 <__aeabi_dmul>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	460b      	mov	r3, r1
 8009edc:	a14c      	add	r1, pc, #304	; (adr r1, 800a010 <__ieee754_pow+0x3c0>)
 8009ede:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ee2:	f7f6 f9a9 	bl	8000238 <__aeabi_dsub>
 8009ee6:	4622      	mov	r2, r4
 8009ee8:	462b      	mov	r3, r5
 8009eea:	f7f6 fb5d 	bl	80005a8 <__aeabi_dmul>
 8009eee:	4602      	mov	r2, r0
 8009ef0:	460b      	mov	r3, r1
 8009ef2:	2000      	movs	r0, #0
 8009ef4:	494c      	ldr	r1, [pc, #304]	; (800a028 <__ieee754_pow+0x3d8>)
 8009ef6:	f7f6 f99f 	bl	8000238 <__aeabi_dsub>
 8009efa:	4622      	mov	r2, r4
 8009efc:	462b      	mov	r3, r5
 8009efe:	4680      	mov	r8, r0
 8009f00:	4689      	mov	r9, r1
 8009f02:	4620      	mov	r0, r4
 8009f04:	4629      	mov	r1, r5
 8009f06:	f7f6 fb4f 	bl	80005a8 <__aeabi_dmul>
 8009f0a:	4602      	mov	r2, r0
 8009f0c:	460b      	mov	r3, r1
 8009f0e:	4640      	mov	r0, r8
 8009f10:	4649      	mov	r1, r9
 8009f12:	f7f6 fb49 	bl	80005a8 <__aeabi_dmul>
 8009f16:	a340      	add	r3, pc, #256	; (adr r3, 800a018 <__ieee754_pow+0x3c8>)
 8009f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1c:	f7f6 fb44 	bl	80005a8 <__aeabi_dmul>
 8009f20:	4602      	mov	r2, r0
 8009f22:	460b      	mov	r3, r1
 8009f24:	4650      	mov	r0, sl
 8009f26:	4659      	mov	r1, fp
 8009f28:	f7f6 f986 	bl	8000238 <__aeabi_dsub>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	460b      	mov	r3, r1
 8009f30:	4604      	mov	r4, r0
 8009f32:	460d      	mov	r5, r1
 8009f34:	4630      	mov	r0, r6
 8009f36:	4639      	mov	r1, r7
 8009f38:	f7f6 f980 	bl	800023c <__adddf3>
 8009f3c:	f04f 0a00 	mov.w	sl, #0
 8009f40:	4632      	mov	r2, r6
 8009f42:	463b      	mov	r3, r7
 8009f44:	4650      	mov	r0, sl
 8009f46:	468b      	mov	fp, r1
 8009f48:	f7f6 f976 	bl	8000238 <__aeabi_dsub>
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	460b      	mov	r3, r1
 8009f50:	4620      	mov	r0, r4
 8009f52:	4629      	mov	r1, r5
 8009f54:	f7f6 f970 	bl	8000238 <__aeabi_dsub>
 8009f58:	9b00      	ldr	r3, [sp, #0]
 8009f5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f5c:	3b01      	subs	r3, #1
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009f64:	bf0c      	ite	eq
 8009f66:	4b31      	ldreq	r3, [pc, #196]	; (800a02c <__ieee754_pow+0x3dc>)
 8009f68:	4b2d      	ldrne	r3, [pc, #180]	; (800a020 <__ieee754_pow+0x3d0>)
 8009f6a:	2600      	movs	r6, #0
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	e9cd 2300 	strd	r2, r3, [sp]
 8009f72:	4604      	mov	r4, r0
 8009f74:	460d      	mov	r5, r1
 8009f76:	4632      	mov	r2, r6
 8009f78:	463b      	mov	r3, r7
 8009f7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f7e:	f7f6 f95b 	bl	8000238 <__aeabi_dsub>
 8009f82:	4652      	mov	r2, sl
 8009f84:	465b      	mov	r3, fp
 8009f86:	f7f6 fb0f 	bl	80005a8 <__aeabi_dmul>
 8009f8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f8e:	4680      	mov	r8, r0
 8009f90:	4689      	mov	r9, r1
 8009f92:	4620      	mov	r0, r4
 8009f94:	4629      	mov	r1, r5
 8009f96:	f7f6 fb07 	bl	80005a8 <__aeabi_dmul>
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	4640      	mov	r0, r8
 8009fa0:	4649      	mov	r1, r9
 8009fa2:	f7f6 f94b 	bl	800023c <__adddf3>
 8009fa6:	4632      	mov	r2, r6
 8009fa8:	463b      	mov	r3, r7
 8009faa:	4680      	mov	r8, r0
 8009fac:	4689      	mov	r9, r1
 8009fae:	4650      	mov	r0, sl
 8009fb0:	4659      	mov	r1, fp
 8009fb2:	f7f6 faf9 	bl	80005a8 <__aeabi_dmul>
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	4604      	mov	r4, r0
 8009fba:	460d      	mov	r5, r1
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	4649      	mov	r1, r9
 8009fc0:	4640      	mov	r0, r8
 8009fc2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009fc6:	f7f6 f939 	bl	800023c <__adddf3>
 8009fca:	4b19      	ldr	r3, [pc, #100]	; (800a030 <__ieee754_pow+0x3e0>)
 8009fcc:	4299      	cmp	r1, r3
 8009fce:	4682      	mov	sl, r0
 8009fd0:	460f      	mov	r7, r1
 8009fd2:	460e      	mov	r6, r1
 8009fd4:	f340 82e7 	ble.w	800a5a6 <__ieee754_pow+0x956>
 8009fd8:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009fdc:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009fe0:	4303      	orrs	r3, r0
 8009fe2:	f000 81e1 	beq.w	800a3a8 <__ieee754_pow+0x758>
 8009fe6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009fea:	2200      	movs	r2, #0
 8009fec:	2300      	movs	r3, #0
 8009fee:	f7f6 fd4d 	bl	8000a8c <__aeabi_dcmplt>
 8009ff2:	3800      	subs	r0, #0
 8009ff4:	bf18      	it	ne
 8009ff6:	2001      	movne	r0, #1
 8009ff8:	e730      	b.n	8009e5c <__ieee754_pow+0x20c>
 8009ffa:	bf00      	nop
 8009ffc:	f3af 8000 	nop.w
 800a000:	60000000 	.word	0x60000000
 800a004:	3ff71547 	.word	0x3ff71547
 800a008:	f85ddf44 	.word	0xf85ddf44
 800a00c:	3e54ae0b 	.word	0x3e54ae0b
 800a010:	55555555 	.word	0x55555555
 800a014:	3fd55555 	.word	0x3fd55555
 800a018:	652b82fe 	.word	0x652b82fe
 800a01c:	3ff71547 	.word	0x3ff71547
 800a020:	3ff00000 	.word	0x3ff00000
 800a024:	3fd00000 	.word	0x3fd00000
 800a028:	3fe00000 	.word	0x3fe00000
 800a02c:	bff00000 	.word	0xbff00000
 800a030:	408fffff 	.word	0x408fffff
 800a034:	4bd2      	ldr	r3, [pc, #840]	; (800a380 <__ieee754_pow+0x730>)
 800a036:	402b      	ands	r3, r5
 800a038:	2200      	movs	r2, #0
 800a03a:	b943      	cbnz	r3, 800a04e <__ieee754_pow+0x3fe>
 800a03c:	4658      	mov	r0, fp
 800a03e:	4bd1      	ldr	r3, [pc, #836]	; (800a384 <__ieee754_pow+0x734>)
 800a040:	4661      	mov	r1, ip
 800a042:	f7f6 fab1 	bl	80005a8 <__aeabi_dmul>
 800a046:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a04a:	4683      	mov	fp, r0
 800a04c:	460c      	mov	r4, r1
 800a04e:	1523      	asrs	r3, r4, #20
 800a050:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a054:	4413      	add	r3, r2
 800a056:	930b      	str	r3, [sp, #44]	; 0x2c
 800a058:	4bcb      	ldr	r3, [pc, #812]	; (800a388 <__ieee754_pow+0x738>)
 800a05a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a05e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a062:	429c      	cmp	r4, r3
 800a064:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a068:	dd08      	ble.n	800a07c <__ieee754_pow+0x42c>
 800a06a:	4bc8      	ldr	r3, [pc, #800]	; (800a38c <__ieee754_pow+0x73c>)
 800a06c:	429c      	cmp	r4, r3
 800a06e:	f340 8199 	ble.w	800a3a4 <__ieee754_pow+0x754>
 800a072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a074:	3301      	adds	r3, #1
 800a076:	930b      	str	r3, [sp, #44]	; 0x2c
 800a078:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a07c:	2600      	movs	r6, #0
 800a07e:	00f3      	lsls	r3, r6, #3
 800a080:	930d      	str	r3, [sp, #52]	; 0x34
 800a082:	4bc3      	ldr	r3, [pc, #780]	; (800a390 <__ieee754_pow+0x740>)
 800a084:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a088:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a08c:	4658      	mov	r0, fp
 800a08e:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800a092:	461a      	mov	r2, r3
 800a094:	4629      	mov	r1, r5
 800a096:	4623      	mov	r3, r4
 800a098:	f7f6 f8ce 	bl	8000238 <__aeabi_dsub>
 800a09c:	46da      	mov	sl, fp
 800a09e:	4652      	mov	r2, sl
 800a0a0:	462b      	mov	r3, r5
 800a0a2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a0a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a0aa:	f7f6 f8c7 	bl	800023c <__adddf3>
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	2000      	movs	r0, #0
 800a0b4:	49b7      	ldr	r1, [pc, #732]	; (800a394 <__ieee754_pow+0x744>)
 800a0b6:	f7f6 fba1 	bl	80007fc <__aeabi_ddiv>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	460b      	mov	r3, r1
 800a0be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a0c2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a0c6:	f7f6 fa6f 	bl	80005a8 <__aeabi_dmul>
 800a0ca:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a0ce:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800a0d2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	9304      	str	r3, [sp, #16]
 800a0da:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a0de:	46ab      	mov	fp, r5
 800a0e0:	106d      	asrs	r5, r5, #1
 800a0e2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a0e6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a0ea:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	4640      	mov	r0, r8
 800a0f2:	4649      	mov	r1, r9
 800a0f4:	4614      	mov	r4, r2
 800a0f6:	461d      	mov	r5, r3
 800a0f8:	f7f6 fa56 	bl	80005a8 <__aeabi_dmul>
 800a0fc:	4602      	mov	r2, r0
 800a0fe:	460b      	mov	r3, r1
 800a100:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a104:	f7f6 f898 	bl	8000238 <__aeabi_dsub>
 800a108:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a10c:	4606      	mov	r6, r0
 800a10e:	460f      	mov	r7, r1
 800a110:	4620      	mov	r0, r4
 800a112:	4629      	mov	r1, r5
 800a114:	f7f6 f890 	bl	8000238 <__aeabi_dsub>
 800a118:	4602      	mov	r2, r0
 800a11a:	460b      	mov	r3, r1
 800a11c:	4650      	mov	r0, sl
 800a11e:	4659      	mov	r1, fp
 800a120:	f7f6 f88a 	bl	8000238 <__aeabi_dsub>
 800a124:	4642      	mov	r2, r8
 800a126:	464b      	mov	r3, r9
 800a128:	f7f6 fa3e 	bl	80005a8 <__aeabi_dmul>
 800a12c:	4602      	mov	r2, r0
 800a12e:	460b      	mov	r3, r1
 800a130:	4630      	mov	r0, r6
 800a132:	4639      	mov	r1, r7
 800a134:	f7f6 f880 	bl	8000238 <__aeabi_dsub>
 800a138:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a13c:	f7f6 fa34 	bl	80005a8 <__aeabi_dmul>
 800a140:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a144:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a148:	4610      	mov	r0, r2
 800a14a:	4619      	mov	r1, r3
 800a14c:	f7f6 fa2c 	bl	80005a8 <__aeabi_dmul>
 800a150:	a379      	add	r3, pc, #484	; (adr r3, 800a338 <__ieee754_pow+0x6e8>)
 800a152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a156:	4604      	mov	r4, r0
 800a158:	460d      	mov	r5, r1
 800a15a:	f7f6 fa25 	bl	80005a8 <__aeabi_dmul>
 800a15e:	a378      	add	r3, pc, #480	; (adr r3, 800a340 <__ieee754_pow+0x6f0>)
 800a160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a164:	f7f6 f86a 	bl	800023c <__adddf3>
 800a168:	4622      	mov	r2, r4
 800a16a:	462b      	mov	r3, r5
 800a16c:	f7f6 fa1c 	bl	80005a8 <__aeabi_dmul>
 800a170:	a375      	add	r3, pc, #468	; (adr r3, 800a348 <__ieee754_pow+0x6f8>)
 800a172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a176:	f7f6 f861 	bl	800023c <__adddf3>
 800a17a:	4622      	mov	r2, r4
 800a17c:	462b      	mov	r3, r5
 800a17e:	f7f6 fa13 	bl	80005a8 <__aeabi_dmul>
 800a182:	a373      	add	r3, pc, #460	; (adr r3, 800a350 <__ieee754_pow+0x700>)
 800a184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a188:	f7f6 f858 	bl	800023c <__adddf3>
 800a18c:	4622      	mov	r2, r4
 800a18e:	462b      	mov	r3, r5
 800a190:	f7f6 fa0a 	bl	80005a8 <__aeabi_dmul>
 800a194:	a370      	add	r3, pc, #448	; (adr r3, 800a358 <__ieee754_pow+0x708>)
 800a196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a19a:	f7f6 f84f 	bl	800023c <__adddf3>
 800a19e:	4622      	mov	r2, r4
 800a1a0:	462b      	mov	r3, r5
 800a1a2:	f7f6 fa01 	bl	80005a8 <__aeabi_dmul>
 800a1a6:	a36e      	add	r3, pc, #440	; (adr r3, 800a360 <__ieee754_pow+0x710>)
 800a1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ac:	f7f6 f846 	bl	800023c <__adddf3>
 800a1b0:	4622      	mov	r2, r4
 800a1b2:	4606      	mov	r6, r0
 800a1b4:	460f      	mov	r7, r1
 800a1b6:	462b      	mov	r3, r5
 800a1b8:	4620      	mov	r0, r4
 800a1ba:	4629      	mov	r1, r5
 800a1bc:	f7f6 f9f4 	bl	80005a8 <__aeabi_dmul>
 800a1c0:	4602      	mov	r2, r0
 800a1c2:	460b      	mov	r3, r1
 800a1c4:	4630      	mov	r0, r6
 800a1c6:	4639      	mov	r1, r7
 800a1c8:	f7f6 f9ee 	bl	80005a8 <__aeabi_dmul>
 800a1cc:	4642      	mov	r2, r8
 800a1ce:	4604      	mov	r4, r0
 800a1d0:	460d      	mov	r5, r1
 800a1d2:	464b      	mov	r3, r9
 800a1d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a1d8:	f7f6 f830 	bl	800023c <__adddf3>
 800a1dc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a1e0:	f7f6 f9e2 	bl	80005a8 <__aeabi_dmul>
 800a1e4:	4622      	mov	r2, r4
 800a1e6:	462b      	mov	r3, r5
 800a1e8:	f7f6 f828 	bl	800023c <__adddf3>
 800a1ec:	4642      	mov	r2, r8
 800a1ee:	4606      	mov	r6, r0
 800a1f0:	460f      	mov	r7, r1
 800a1f2:	464b      	mov	r3, r9
 800a1f4:	4640      	mov	r0, r8
 800a1f6:	4649      	mov	r1, r9
 800a1f8:	f7f6 f9d6 	bl	80005a8 <__aeabi_dmul>
 800a1fc:	4b66      	ldr	r3, [pc, #408]	; (800a398 <__ieee754_pow+0x748>)
 800a1fe:	2200      	movs	r2, #0
 800a200:	4682      	mov	sl, r0
 800a202:	468b      	mov	fp, r1
 800a204:	f7f6 f81a 	bl	800023c <__adddf3>
 800a208:	4632      	mov	r2, r6
 800a20a:	463b      	mov	r3, r7
 800a20c:	f7f6 f816 	bl	800023c <__adddf3>
 800a210:	2400      	movs	r4, #0
 800a212:	460d      	mov	r5, r1
 800a214:	4622      	mov	r2, r4
 800a216:	460b      	mov	r3, r1
 800a218:	4640      	mov	r0, r8
 800a21a:	4649      	mov	r1, r9
 800a21c:	f7f6 f9c4 	bl	80005a8 <__aeabi_dmul>
 800a220:	4b5d      	ldr	r3, [pc, #372]	; (800a398 <__ieee754_pow+0x748>)
 800a222:	4680      	mov	r8, r0
 800a224:	4689      	mov	r9, r1
 800a226:	2200      	movs	r2, #0
 800a228:	4620      	mov	r0, r4
 800a22a:	4629      	mov	r1, r5
 800a22c:	f7f6 f804 	bl	8000238 <__aeabi_dsub>
 800a230:	4652      	mov	r2, sl
 800a232:	465b      	mov	r3, fp
 800a234:	f7f6 f800 	bl	8000238 <__aeabi_dsub>
 800a238:	4602      	mov	r2, r0
 800a23a:	460b      	mov	r3, r1
 800a23c:	4630      	mov	r0, r6
 800a23e:	4639      	mov	r1, r7
 800a240:	f7f5 fffa 	bl	8000238 <__aeabi_dsub>
 800a244:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a248:	f7f6 f9ae 	bl	80005a8 <__aeabi_dmul>
 800a24c:	4622      	mov	r2, r4
 800a24e:	4606      	mov	r6, r0
 800a250:	460f      	mov	r7, r1
 800a252:	462b      	mov	r3, r5
 800a254:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a258:	f7f6 f9a6 	bl	80005a8 <__aeabi_dmul>
 800a25c:	4602      	mov	r2, r0
 800a25e:	460b      	mov	r3, r1
 800a260:	4630      	mov	r0, r6
 800a262:	4639      	mov	r1, r7
 800a264:	f7f5 ffea 	bl	800023c <__adddf3>
 800a268:	4606      	mov	r6, r0
 800a26a:	460f      	mov	r7, r1
 800a26c:	4602      	mov	r2, r0
 800a26e:	460b      	mov	r3, r1
 800a270:	4640      	mov	r0, r8
 800a272:	4649      	mov	r1, r9
 800a274:	f7f5 ffe2 	bl	800023c <__adddf3>
 800a278:	2400      	movs	r4, #0
 800a27a:	a33b      	add	r3, pc, #236	; (adr r3, 800a368 <__ieee754_pow+0x718>)
 800a27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a280:	4620      	mov	r0, r4
 800a282:	460d      	mov	r5, r1
 800a284:	f7f6 f990 	bl	80005a8 <__aeabi_dmul>
 800a288:	4642      	mov	r2, r8
 800a28a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a28e:	464b      	mov	r3, r9
 800a290:	4620      	mov	r0, r4
 800a292:	4629      	mov	r1, r5
 800a294:	f7f5 ffd0 	bl	8000238 <__aeabi_dsub>
 800a298:	4602      	mov	r2, r0
 800a29a:	460b      	mov	r3, r1
 800a29c:	4630      	mov	r0, r6
 800a29e:	4639      	mov	r1, r7
 800a2a0:	f7f5 ffca 	bl	8000238 <__aeabi_dsub>
 800a2a4:	a332      	add	r3, pc, #200	; (adr r3, 800a370 <__ieee754_pow+0x720>)
 800a2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2aa:	f7f6 f97d 	bl	80005a8 <__aeabi_dmul>
 800a2ae:	a332      	add	r3, pc, #200	; (adr r3, 800a378 <__ieee754_pow+0x728>)
 800a2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b4:	4606      	mov	r6, r0
 800a2b6:	460f      	mov	r7, r1
 800a2b8:	4620      	mov	r0, r4
 800a2ba:	4629      	mov	r1, r5
 800a2bc:	f7f6 f974 	bl	80005a8 <__aeabi_dmul>
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	4630      	mov	r0, r6
 800a2c6:	4639      	mov	r1, r7
 800a2c8:	f7f5 ffb8 	bl	800023c <__adddf3>
 800a2cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a2ce:	4b33      	ldr	r3, [pc, #204]	; (800a39c <__ieee754_pow+0x74c>)
 800a2d0:	4413      	add	r3, r2
 800a2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d6:	f7f5 ffb1 	bl	800023c <__adddf3>
 800a2da:	4680      	mov	r8, r0
 800a2dc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a2de:	4689      	mov	r9, r1
 800a2e0:	f7f6 f8f8 	bl	80004d4 <__aeabi_i2d>
 800a2e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a2e6:	4b2e      	ldr	r3, [pc, #184]	; (800a3a0 <__ieee754_pow+0x750>)
 800a2e8:	4413      	add	r3, r2
 800a2ea:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a2ee:	4604      	mov	r4, r0
 800a2f0:	460d      	mov	r5, r1
 800a2f2:	4642      	mov	r2, r8
 800a2f4:	464b      	mov	r3, r9
 800a2f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2fa:	f7f5 ff9f 	bl	800023c <__adddf3>
 800a2fe:	4632      	mov	r2, r6
 800a300:	463b      	mov	r3, r7
 800a302:	f7f5 ff9b 	bl	800023c <__adddf3>
 800a306:	4622      	mov	r2, r4
 800a308:	462b      	mov	r3, r5
 800a30a:	f7f5 ff97 	bl	800023c <__adddf3>
 800a30e:	f04f 0a00 	mov.w	sl, #0
 800a312:	4622      	mov	r2, r4
 800a314:	462b      	mov	r3, r5
 800a316:	4650      	mov	r0, sl
 800a318:	468b      	mov	fp, r1
 800a31a:	f7f5 ff8d 	bl	8000238 <__aeabi_dsub>
 800a31e:	4632      	mov	r2, r6
 800a320:	463b      	mov	r3, r7
 800a322:	f7f5 ff89 	bl	8000238 <__aeabi_dsub>
 800a326:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a32a:	f7f5 ff85 	bl	8000238 <__aeabi_dsub>
 800a32e:	4602      	mov	r2, r0
 800a330:	460b      	mov	r3, r1
 800a332:	4640      	mov	r0, r8
 800a334:	4649      	mov	r1, r9
 800a336:	e60d      	b.n	8009f54 <__ieee754_pow+0x304>
 800a338:	4a454eef 	.word	0x4a454eef
 800a33c:	3fca7e28 	.word	0x3fca7e28
 800a340:	93c9db65 	.word	0x93c9db65
 800a344:	3fcd864a 	.word	0x3fcd864a
 800a348:	a91d4101 	.word	0xa91d4101
 800a34c:	3fd17460 	.word	0x3fd17460
 800a350:	518f264d 	.word	0x518f264d
 800a354:	3fd55555 	.word	0x3fd55555
 800a358:	db6fabff 	.word	0xdb6fabff
 800a35c:	3fdb6db6 	.word	0x3fdb6db6
 800a360:	33333303 	.word	0x33333303
 800a364:	3fe33333 	.word	0x3fe33333
 800a368:	e0000000 	.word	0xe0000000
 800a36c:	3feec709 	.word	0x3feec709
 800a370:	dc3a03fd 	.word	0xdc3a03fd
 800a374:	3feec709 	.word	0x3feec709
 800a378:	145b01f5 	.word	0x145b01f5
 800a37c:	be3e2fe0 	.word	0xbe3e2fe0
 800a380:	7ff00000 	.word	0x7ff00000
 800a384:	43400000 	.word	0x43400000
 800a388:	0003988e 	.word	0x0003988e
 800a38c:	000bb679 	.word	0x000bb679
 800a390:	0800b3a0 	.word	0x0800b3a0
 800a394:	3ff00000 	.word	0x3ff00000
 800a398:	40080000 	.word	0x40080000
 800a39c:	0800b3c0 	.word	0x0800b3c0
 800a3a0:	0800b3b0 	.word	0x0800b3b0
 800a3a4:	2601      	movs	r6, #1
 800a3a6:	e66a      	b.n	800a07e <__ieee754_pow+0x42e>
 800a3a8:	a39d      	add	r3, pc, #628	; (adr r3, 800a620 <__ieee754_pow+0x9d0>)
 800a3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ae:	4640      	mov	r0, r8
 800a3b0:	4649      	mov	r1, r9
 800a3b2:	f7f5 ff43 	bl	800023c <__adddf3>
 800a3b6:	4622      	mov	r2, r4
 800a3b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a3bc:	462b      	mov	r3, r5
 800a3be:	4650      	mov	r0, sl
 800a3c0:	4639      	mov	r1, r7
 800a3c2:	f7f5 ff39 	bl	8000238 <__aeabi_dsub>
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	460b      	mov	r3, r1
 800a3ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3ce:	f7f6 fb7b 	bl	8000ac8 <__aeabi_dcmpgt>
 800a3d2:	2800      	cmp	r0, #0
 800a3d4:	f47f ae07 	bne.w	8009fe6 <__ieee754_pow+0x396>
 800a3d8:	4aa3      	ldr	r2, [pc, #652]	; (800a668 <__ieee754_pow+0xa18>)
 800a3da:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	f340 8101 	ble.w	800a5e6 <__ieee754_pow+0x996>
 800a3e4:	151b      	asrs	r3, r3, #20
 800a3e6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a3ea:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a3ee:	fa4a f303 	asr.w	r3, sl, r3
 800a3f2:	4433      	add	r3, r6
 800a3f4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a3f8:	4f9c      	ldr	r7, [pc, #624]	; (800a66c <__ieee754_pow+0xa1c>)
 800a3fa:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a3fe:	4117      	asrs	r7, r2
 800a400:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a404:	2000      	movs	r0, #0
 800a406:	ea23 0107 	bic.w	r1, r3, r7
 800a40a:	f1c2 0214 	rsb	r2, r2, #20
 800a40e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a412:	fa4a fa02 	asr.w	sl, sl, r2
 800a416:	2e00      	cmp	r6, #0
 800a418:	4602      	mov	r2, r0
 800a41a:	460b      	mov	r3, r1
 800a41c:	4620      	mov	r0, r4
 800a41e:	4629      	mov	r1, r5
 800a420:	bfb8      	it	lt
 800a422:	f1ca 0a00 	rsblt	sl, sl, #0
 800a426:	f7f5 ff07 	bl	8000238 <__aeabi_dsub>
 800a42a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a42e:	4642      	mov	r2, r8
 800a430:	464b      	mov	r3, r9
 800a432:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a436:	f7f5 ff01 	bl	800023c <__adddf3>
 800a43a:	2400      	movs	r4, #0
 800a43c:	a37a      	add	r3, pc, #488	; (adr r3, 800a628 <__ieee754_pow+0x9d8>)
 800a43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a442:	4620      	mov	r0, r4
 800a444:	460d      	mov	r5, r1
 800a446:	f7f6 f8af 	bl	80005a8 <__aeabi_dmul>
 800a44a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a44e:	4606      	mov	r6, r0
 800a450:	460f      	mov	r7, r1
 800a452:	4620      	mov	r0, r4
 800a454:	4629      	mov	r1, r5
 800a456:	f7f5 feef 	bl	8000238 <__aeabi_dsub>
 800a45a:	4602      	mov	r2, r0
 800a45c:	460b      	mov	r3, r1
 800a45e:	4640      	mov	r0, r8
 800a460:	4649      	mov	r1, r9
 800a462:	f7f5 fee9 	bl	8000238 <__aeabi_dsub>
 800a466:	a372      	add	r3, pc, #456	; (adr r3, 800a630 <__ieee754_pow+0x9e0>)
 800a468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a46c:	f7f6 f89c 	bl	80005a8 <__aeabi_dmul>
 800a470:	a371      	add	r3, pc, #452	; (adr r3, 800a638 <__ieee754_pow+0x9e8>)
 800a472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a476:	4680      	mov	r8, r0
 800a478:	4689      	mov	r9, r1
 800a47a:	4620      	mov	r0, r4
 800a47c:	4629      	mov	r1, r5
 800a47e:	f7f6 f893 	bl	80005a8 <__aeabi_dmul>
 800a482:	4602      	mov	r2, r0
 800a484:	460b      	mov	r3, r1
 800a486:	4640      	mov	r0, r8
 800a488:	4649      	mov	r1, r9
 800a48a:	f7f5 fed7 	bl	800023c <__adddf3>
 800a48e:	4604      	mov	r4, r0
 800a490:	460d      	mov	r5, r1
 800a492:	4602      	mov	r2, r0
 800a494:	460b      	mov	r3, r1
 800a496:	4630      	mov	r0, r6
 800a498:	4639      	mov	r1, r7
 800a49a:	f7f5 fecf 	bl	800023c <__adddf3>
 800a49e:	4632      	mov	r2, r6
 800a4a0:	463b      	mov	r3, r7
 800a4a2:	4680      	mov	r8, r0
 800a4a4:	4689      	mov	r9, r1
 800a4a6:	f7f5 fec7 	bl	8000238 <__aeabi_dsub>
 800a4aa:	4602      	mov	r2, r0
 800a4ac:	460b      	mov	r3, r1
 800a4ae:	4620      	mov	r0, r4
 800a4b0:	4629      	mov	r1, r5
 800a4b2:	f7f5 fec1 	bl	8000238 <__aeabi_dsub>
 800a4b6:	4642      	mov	r2, r8
 800a4b8:	4606      	mov	r6, r0
 800a4ba:	460f      	mov	r7, r1
 800a4bc:	464b      	mov	r3, r9
 800a4be:	4640      	mov	r0, r8
 800a4c0:	4649      	mov	r1, r9
 800a4c2:	f7f6 f871 	bl	80005a8 <__aeabi_dmul>
 800a4c6:	a35e      	add	r3, pc, #376	; (adr r3, 800a640 <__ieee754_pow+0x9f0>)
 800a4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4cc:	4604      	mov	r4, r0
 800a4ce:	460d      	mov	r5, r1
 800a4d0:	f7f6 f86a 	bl	80005a8 <__aeabi_dmul>
 800a4d4:	a35c      	add	r3, pc, #368	; (adr r3, 800a648 <__ieee754_pow+0x9f8>)
 800a4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4da:	f7f5 fead 	bl	8000238 <__aeabi_dsub>
 800a4de:	4622      	mov	r2, r4
 800a4e0:	462b      	mov	r3, r5
 800a4e2:	f7f6 f861 	bl	80005a8 <__aeabi_dmul>
 800a4e6:	a35a      	add	r3, pc, #360	; (adr r3, 800a650 <__ieee754_pow+0xa00>)
 800a4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ec:	f7f5 fea6 	bl	800023c <__adddf3>
 800a4f0:	4622      	mov	r2, r4
 800a4f2:	462b      	mov	r3, r5
 800a4f4:	f7f6 f858 	bl	80005a8 <__aeabi_dmul>
 800a4f8:	a357      	add	r3, pc, #348	; (adr r3, 800a658 <__ieee754_pow+0xa08>)
 800a4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fe:	f7f5 fe9b 	bl	8000238 <__aeabi_dsub>
 800a502:	4622      	mov	r2, r4
 800a504:	462b      	mov	r3, r5
 800a506:	f7f6 f84f 	bl	80005a8 <__aeabi_dmul>
 800a50a:	a355      	add	r3, pc, #340	; (adr r3, 800a660 <__ieee754_pow+0xa10>)
 800a50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a510:	f7f5 fe94 	bl	800023c <__adddf3>
 800a514:	4622      	mov	r2, r4
 800a516:	462b      	mov	r3, r5
 800a518:	f7f6 f846 	bl	80005a8 <__aeabi_dmul>
 800a51c:	4602      	mov	r2, r0
 800a51e:	460b      	mov	r3, r1
 800a520:	4640      	mov	r0, r8
 800a522:	4649      	mov	r1, r9
 800a524:	f7f5 fe88 	bl	8000238 <__aeabi_dsub>
 800a528:	4604      	mov	r4, r0
 800a52a:	460d      	mov	r5, r1
 800a52c:	4602      	mov	r2, r0
 800a52e:	460b      	mov	r3, r1
 800a530:	4640      	mov	r0, r8
 800a532:	4649      	mov	r1, r9
 800a534:	f7f6 f838 	bl	80005a8 <__aeabi_dmul>
 800a538:	2200      	movs	r2, #0
 800a53a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a53e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a542:	4620      	mov	r0, r4
 800a544:	4629      	mov	r1, r5
 800a546:	f7f5 fe77 	bl	8000238 <__aeabi_dsub>
 800a54a:	4602      	mov	r2, r0
 800a54c:	460b      	mov	r3, r1
 800a54e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a552:	f7f6 f953 	bl	80007fc <__aeabi_ddiv>
 800a556:	4632      	mov	r2, r6
 800a558:	4604      	mov	r4, r0
 800a55a:	460d      	mov	r5, r1
 800a55c:	463b      	mov	r3, r7
 800a55e:	4640      	mov	r0, r8
 800a560:	4649      	mov	r1, r9
 800a562:	f7f6 f821 	bl	80005a8 <__aeabi_dmul>
 800a566:	4632      	mov	r2, r6
 800a568:	463b      	mov	r3, r7
 800a56a:	f7f5 fe67 	bl	800023c <__adddf3>
 800a56e:	4602      	mov	r2, r0
 800a570:	460b      	mov	r3, r1
 800a572:	4620      	mov	r0, r4
 800a574:	4629      	mov	r1, r5
 800a576:	f7f5 fe5f 	bl	8000238 <__aeabi_dsub>
 800a57a:	4642      	mov	r2, r8
 800a57c:	464b      	mov	r3, r9
 800a57e:	f7f5 fe5b 	bl	8000238 <__aeabi_dsub>
 800a582:	4602      	mov	r2, r0
 800a584:	460b      	mov	r3, r1
 800a586:	2000      	movs	r0, #0
 800a588:	4939      	ldr	r1, [pc, #228]	; (800a670 <__ieee754_pow+0xa20>)
 800a58a:	f7f5 fe55 	bl	8000238 <__aeabi_dsub>
 800a58e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a592:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a596:	da29      	bge.n	800a5ec <__ieee754_pow+0x99c>
 800a598:	4652      	mov	r2, sl
 800a59a:	f000 f955 	bl	800a848 <scalbn>
 800a59e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5a2:	f7ff bbfe 	b.w	8009da2 <__ieee754_pow+0x152>
 800a5a6:	4b33      	ldr	r3, [pc, #204]	; (800a674 <__ieee754_pow+0xa24>)
 800a5a8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800a5ac:	429f      	cmp	r7, r3
 800a5ae:	f77f af13 	ble.w	800a3d8 <__ieee754_pow+0x788>
 800a5b2:	4b31      	ldr	r3, [pc, #196]	; (800a678 <__ieee754_pow+0xa28>)
 800a5b4:	440b      	add	r3, r1
 800a5b6:	4303      	orrs	r3, r0
 800a5b8:	d009      	beq.n	800a5ce <__ieee754_pow+0x97e>
 800a5ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	f7f6 fa63 	bl	8000a8c <__aeabi_dcmplt>
 800a5c6:	3800      	subs	r0, #0
 800a5c8:	bf18      	it	ne
 800a5ca:	2001      	movne	r0, #1
 800a5cc:	e453      	b.n	8009e76 <__ieee754_pow+0x226>
 800a5ce:	4622      	mov	r2, r4
 800a5d0:	462b      	mov	r3, r5
 800a5d2:	f7f5 fe31 	bl	8000238 <__aeabi_dsub>
 800a5d6:	4642      	mov	r2, r8
 800a5d8:	464b      	mov	r3, r9
 800a5da:	f7f6 fa6b 	bl	8000ab4 <__aeabi_dcmpge>
 800a5de:	2800      	cmp	r0, #0
 800a5e0:	f43f aefa 	beq.w	800a3d8 <__ieee754_pow+0x788>
 800a5e4:	e7e9      	b.n	800a5ba <__ieee754_pow+0x96a>
 800a5e6:	f04f 0a00 	mov.w	sl, #0
 800a5ea:	e720      	b.n	800a42e <__ieee754_pow+0x7de>
 800a5ec:	4621      	mov	r1, r4
 800a5ee:	e7d6      	b.n	800a59e <__ieee754_pow+0x94e>
 800a5f0:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a670 <__ieee754_pow+0xa20>
 800a5f4:	f04f 0b00 	mov.w	fp, #0
 800a5f8:	f7ff bbba 	b.w	8009d70 <__ieee754_pow+0x120>
 800a5fc:	f04f 0b00 	mov.w	fp, #0
 800a600:	f04f 0c00 	mov.w	ip, #0
 800a604:	f7ff bbb4 	b.w	8009d70 <__ieee754_pow+0x120>
 800a608:	4640      	mov	r0, r8
 800a60a:	4649      	mov	r1, r9
 800a60c:	f7ff bb3d 	b.w	8009c8a <__ieee754_pow+0x3a>
 800a610:	9200      	str	r2, [sp, #0]
 800a612:	f7ff bb89 	b.w	8009d28 <__ieee754_pow+0xd8>
 800a616:	2300      	movs	r3, #0
 800a618:	f7ff bb73 	b.w	8009d02 <__ieee754_pow+0xb2>
 800a61c:	f3af 8000 	nop.w
 800a620:	652b82fe 	.word	0x652b82fe
 800a624:	3c971547 	.word	0x3c971547
 800a628:	00000000 	.word	0x00000000
 800a62c:	3fe62e43 	.word	0x3fe62e43
 800a630:	fefa39ef 	.word	0xfefa39ef
 800a634:	3fe62e42 	.word	0x3fe62e42
 800a638:	0ca86c39 	.word	0x0ca86c39
 800a63c:	be205c61 	.word	0xbe205c61
 800a640:	72bea4d0 	.word	0x72bea4d0
 800a644:	3e663769 	.word	0x3e663769
 800a648:	c5d26bf1 	.word	0xc5d26bf1
 800a64c:	3ebbbd41 	.word	0x3ebbbd41
 800a650:	af25de2c 	.word	0xaf25de2c
 800a654:	3f11566a 	.word	0x3f11566a
 800a658:	16bebd93 	.word	0x16bebd93
 800a65c:	3f66c16c 	.word	0x3f66c16c
 800a660:	5555553e 	.word	0x5555553e
 800a664:	3fc55555 	.word	0x3fc55555
 800a668:	3fe00000 	.word	0x3fe00000
 800a66c:	000fffff 	.word	0x000fffff
 800a670:	3ff00000 	.word	0x3ff00000
 800a674:	4090cbff 	.word	0x4090cbff
 800a678:	3f6f3400 	.word	0x3f6f3400

0800a67c <__ieee754_sqrt>:
 800a67c:	f8df c154 	ldr.w	ip, [pc, #340]	; 800a7d4 <__ieee754_sqrt+0x158>
 800a680:	ea3c 0c01 	bics.w	ip, ip, r1
 800a684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a688:	460a      	mov	r2, r1
 800a68a:	4606      	mov	r6, r0
 800a68c:	460d      	mov	r5, r1
 800a68e:	460c      	mov	r4, r1
 800a690:	4607      	mov	r7, r0
 800a692:	4603      	mov	r3, r0
 800a694:	d10f      	bne.n	800a6b6 <__ieee754_sqrt+0x3a>
 800a696:	4602      	mov	r2, r0
 800a698:	460b      	mov	r3, r1
 800a69a:	f7f5 ff85 	bl	80005a8 <__aeabi_dmul>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	460b      	mov	r3, r1
 800a6a2:	4630      	mov	r0, r6
 800a6a4:	4629      	mov	r1, r5
 800a6a6:	f7f5 fdc9 	bl	800023c <__adddf3>
 800a6aa:	4606      	mov	r6, r0
 800a6ac:	460d      	mov	r5, r1
 800a6ae:	4630      	mov	r0, r6
 800a6b0:	4629      	mov	r1, r5
 800a6b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6b6:	2900      	cmp	r1, #0
 800a6b8:	dc0e      	bgt.n	800a6d8 <__ieee754_sqrt+0x5c>
 800a6ba:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800a6be:	ea5c 0707 	orrs.w	r7, ip, r7
 800a6c2:	d0f4      	beq.n	800a6ae <__ieee754_sqrt+0x32>
 800a6c4:	b141      	cbz	r1, 800a6d8 <__ieee754_sqrt+0x5c>
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	f7f5 fdb5 	bl	8000238 <__aeabi_dsub>
 800a6ce:	4602      	mov	r2, r0
 800a6d0:	460b      	mov	r3, r1
 800a6d2:	f7f6 f893 	bl	80007fc <__aeabi_ddiv>
 800a6d6:	e7e8      	b.n	800a6aa <__ieee754_sqrt+0x2e>
 800a6d8:	1521      	asrs	r1, r4, #20
 800a6da:	d074      	beq.n	800a7c6 <__ieee754_sqrt+0x14a>
 800a6dc:	07cc      	lsls	r4, r1, #31
 800a6de:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a6e2:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800a6e6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a6ea:	bf5e      	ittt	pl
 800a6ec:	0fd9      	lsrpl	r1, r3, #31
 800a6ee:	005b      	lslpl	r3, r3, #1
 800a6f0:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800a6f4:	2400      	movs	r4, #0
 800a6f6:	0fd9      	lsrs	r1, r3, #31
 800a6f8:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800a6fc:	107f      	asrs	r7, r7, #1
 800a6fe:	005b      	lsls	r3, r3, #1
 800a700:	2516      	movs	r5, #22
 800a702:	4620      	mov	r0, r4
 800a704:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a708:	1846      	adds	r6, r0, r1
 800a70a:	4296      	cmp	r6, r2
 800a70c:	bfde      	ittt	le
 800a70e:	1b92      	suble	r2, r2, r6
 800a710:	1870      	addle	r0, r6, r1
 800a712:	1864      	addle	r4, r4, r1
 800a714:	0052      	lsls	r2, r2, #1
 800a716:	3d01      	subs	r5, #1
 800a718:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a71c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a720:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a724:	d1f0      	bne.n	800a708 <__ieee754_sqrt+0x8c>
 800a726:	4629      	mov	r1, r5
 800a728:	f04f 0e20 	mov.w	lr, #32
 800a72c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a730:	4282      	cmp	r2, r0
 800a732:	eb06 0c05 	add.w	ip, r6, r5
 800a736:	dc02      	bgt.n	800a73e <__ieee754_sqrt+0xc2>
 800a738:	d113      	bne.n	800a762 <__ieee754_sqrt+0xe6>
 800a73a:	459c      	cmp	ip, r3
 800a73c:	d811      	bhi.n	800a762 <__ieee754_sqrt+0xe6>
 800a73e:	f1bc 0f00 	cmp.w	ip, #0
 800a742:	eb0c 0506 	add.w	r5, ip, r6
 800a746:	da43      	bge.n	800a7d0 <__ieee754_sqrt+0x154>
 800a748:	2d00      	cmp	r5, #0
 800a74a:	db41      	blt.n	800a7d0 <__ieee754_sqrt+0x154>
 800a74c:	f100 0801 	add.w	r8, r0, #1
 800a750:	1a12      	subs	r2, r2, r0
 800a752:	459c      	cmp	ip, r3
 800a754:	bf88      	it	hi
 800a756:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800a75a:	eba3 030c 	sub.w	r3, r3, ip
 800a75e:	4431      	add	r1, r6
 800a760:	4640      	mov	r0, r8
 800a762:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a766:	f1be 0e01 	subs.w	lr, lr, #1
 800a76a:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800a76e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a772:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a776:	d1db      	bne.n	800a730 <__ieee754_sqrt+0xb4>
 800a778:	4313      	orrs	r3, r2
 800a77a:	d006      	beq.n	800a78a <__ieee754_sqrt+0x10e>
 800a77c:	1c48      	adds	r0, r1, #1
 800a77e:	bf13      	iteet	ne
 800a780:	3101      	addne	r1, #1
 800a782:	3401      	addeq	r4, #1
 800a784:	4671      	moveq	r1, lr
 800a786:	f021 0101 	bicne.w	r1, r1, #1
 800a78a:	1063      	asrs	r3, r4, #1
 800a78c:	0849      	lsrs	r1, r1, #1
 800a78e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a792:	07e2      	lsls	r2, r4, #31
 800a794:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a798:	bf48      	it	mi
 800a79a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800a79e:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a7a2:	460e      	mov	r6, r1
 800a7a4:	e783      	b.n	800a6ae <__ieee754_sqrt+0x32>
 800a7a6:	0ada      	lsrs	r2, r3, #11
 800a7a8:	3815      	subs	r0, #21
 800a7aa:	055b      	lsls	r3, r3, #21
 800a7ac:	2a00      	cmp	r2, #0
 800a7ae:	d0fa      	beq.n	800a7a6 <__ieee754_sqrt+0x12a>
 800a7b0:	02d5      	lsls	r5, r2, #11
 800a7b2:	d50a      	bpl.n	800a7ca <__ieee754_sqrt+0x14e>
 800a7b4:	f1c1 0420 	rsb	r4, r1, #32
 800a7b8:	fa23 f404 	lsr.w	r4, r3, r4
 800a7bc:	1e4d      	subs	r5, r1, #1
 800a7be:	408b      	lsls	r3, r1
 800a7c0:	4322      	orrs	r2, r4
 800a7c2:	1b41      	subs	r1, r0, r5
 800a7c4:	e78a      	b.n	800a6dc <__ieee754_sqrt+0x60>
 800a7c6:	4608      	mov	r0, r1
 800a7c8:	e7f0      	b.n	800a7ac <__ieee754_sqrt+0x130>
 800a7ca:	0052      	lsls	r2, r2, #1
 800a7cc:	3101      	adds	r1, #1
 800a7ce:	e7ef      	b.n	800a7b0 <__ieee754_sqrt+0x134>
 800a7d0:	4680      	mov	r8, r0
 800a7d2:	e7bd      	b.n	800a750 <__ieee754_sqrt+0xd4>
 800a7d4:	7ff00000 	.word	0x7ff00000

0800a7d8 <with_errno>:
 800a7d8:	b570      	push	{r4, r5, r6, lr}
 800a7da:	4604      	mov	r4, r0
 800a7dc:	460d      	mov	r5, r1
 800a7de:	4616      	mov	r6, r2
 800a7e0:	f7fd ff28 	bl	8008634 <__errno>
 800a7e4:	4629      	mov	r1, r5
 800a7e6:	6006      	str	r6, [r0, #0]
 800a7e8:	4620      	mov	r0, r4
 800a7ea:	bd70      	pop	{r4, r5, r6, pc}

0800a7ec <xflow>:
 800a7ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a7ee:	4615      	mov	r5, r2
 800a7f0:	461c      	mov	r4, r3
 800a7f2:	b180      	cbz	r0, 800a816 <xflow+0x2a>
 800a7f4:	4610      	mov	r0, r2
 800a7f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a7fa:	e9cd 0100 	strd	r0, r1, [sp]
 800a7fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a802:	4628      	mov	r0, r5
 800a804:	4621      	mov	r1, r4
 800a806:	f7f5 fecf 	bl	80005a8 <__aeabi_dmul>
 800a80a:	2222      	movs	r2, #34	; 0x22
 800a80c:	b003      	add	sp, #12
 800a80e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a812:	f7ff bfe1 	b.w	800a7d8 <with_errno>
 800a816:	4610      	mov	r0, r2
 800a818:	4619      	mov	r1, r3
 800a81a:	e7ee      	b.n	800a7fa <xflow+0xe>

0800a81c <__math_uflow>:
 800a81c:	2200      	movs	r2, #0
 800a81e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a822:	f7ff bfe3 	b.w	800a7ec <xflow>

0800a826 <__math_oflow>:
 800a826:	2200      	movs	r2, #0
 800a828:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a82c:	f7ff bfde 	b.w	800a7ec <xflow>

0800a830 <fabs>:
 800a830:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a834:	4770      	bx	lr

0800a836 <finite>:
 800a836:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800a83a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a83e:	0fc0      	lsrs	r0, r0, #31
 800a840:	4770      	bx	lr
 800a842:	0000      	movs	r0, r0
 800a844:	0000      	movs	r0, r0
	...

0800a848 <scalbn>:
 800a848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a84a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800a84e:	4604      	mov	r4, r0
 800a850:	460d      	mov	r5, r1
 800a852:	4617      	mov	r7, r2
 800a854:	460b      	mov	r3, r1
 800a856:	b996      	cbnz	r6, 800a87e <scalbn+0x36>
 800a858:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a85c:	4303      	orrs	r3, r0
 800a85e:	d039      	beq.n	800a8d4 <scalbn+0x8c>
 800a860:	4b33      	ldr	r3, [pc, #204]	; (800a930 <scalbn+0xe8>)
 800a862:	2200      	movs	r2, #0
 800a864:	f7f5 fea0 	bl	80005a8 <__aeabi_dmul>
 800a868:	4b32      	ldr	r3, [pc, #200]	; (800a934 <scalbn+0xec>)
 800a86a:	429f      	cmp	r7, r3
 800a86c:	4604      	mov	r4, r0
 800a86e:	460d      	mov	r5, r1
 800a870:	da0f      	bge.n	800a892 <scalbn+0x4a>
 800a872:	a32b      	add	r3, pc, #172	; (adr r3, 800a920 <scalbn+0xd8>)
 800a874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a878:	f7f5 fe96 	bl	80005a8 <__aeabi_dmul>
 800a87c:	e006      	b.n	800a88c <scalbn+0x44>
 800a87e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a882:	4296      	cmp	r6, r2
 800a884:	d10a      	bne.n	800a89c <scalbn+0x54>
 800a886:	4602      	mov	r2, r0
 800a888:	f7f5 fcd8 	bl	800023c <__adddf3>
 800a88c:	4604      	mov	r4, r0
 800a88e:	460d      	mov	r5, r1
 800a890:	e020      	b.n	800a8d4 <scalbn+0x8c>
 800a892:	460b      	mov	r3, r1
 800a894:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a898:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800a89c:	19b9      	adds	r1, r7, r6
 800a89e:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800a8a2:	4291      	cmp	r1, r2
 800a8a4:	dd0e      	ble.n	800a8c4 <scalbn+0x7c>
 800a8a6:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800a8aa:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800a8ae:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800a8b2:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800a8b6:	a31c      	add	r3, pc, #112	; (adr r3, 800a928 <scalbn+0xe0>)
 800a8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8bc:	481e      	ldr	r0, [pc, #120]	; (800a938 <scalbn+0xf0>)
 800a8be:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800a8c2:	e7d9      	b.n	800a878 <scalbn+0x30>
 800a8c4:	2900      	cmp	r1, #0
 800a8c6:	dd08      	ble.n	800a8da <scalbn+0x92>
 800a8c8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a8cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a8d0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	4629      	mov	r1, r5
 800a8d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8da:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800a8de:	da12      	bge.n	800a906 <scalbn+0xbe>
 800a8e0:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a8e4:	429f      	cmp	r7, r3
 800a8e6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800a8ea:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800a8ee:	dcdc      	bgt.n	800a8aa <scalbn+0x62>
 800a8f0:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800a8f4:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800a8f8:	a309      	add	r3, pc, #36	; (adr r3, 800a920 <scalbn+0xd8>)
 800a8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fe:	480f      	ldr	r0, [pc, #60]	; (800a93c <scalbn+0xf4>)
 800a900:	f041 011f 	orr.w	r1, r1, #31
 800a904:	e7b8      	b.n	800a878 <scalbn+0x30>
 800a906:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a90a:	3136      	adds	r1, #54	; 0x36
 800a90c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a910:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800a914:	4620      	mov	r0, r4
 800a916:	4b0a      	ldr	r3, [pc, #40]	; (800a940 <scalbn+0xf8>)
 800a918:	4629      	mov	r1, r5
 800a91a:	2200      	movs	r2, #0
 800a91c:	e7ac      	b.n	800a878 <scalbn+0x30>
 800a91e:	bf00      	nop
 800a920:	c2f8f359 	.word	0xc2f8f359
 800a924:	01a56e1f 	.word	0x01a56e1f
 800a928:	8800759c 	.word	0x8800759c
 800a92c:	7e37e43c 	.word	0x7e37e43c
 800a930:	43500000 	.word	0x43500000
 800a934:	ffff3cb0 	.word	0xffff3cb0
 800a938:	8800759c 	.word	0x8800759c
 800a93c:	c2f8f359 	.word	0xc2f8f359
 800a940:	3c900000 	.word	0x3c900000

0800a944 <_init>:
 800a944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a946:	bf00      	nop
 800a948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a94a:	bc08      	pop	{r3}
 800a94c:	469e      	mov	lr, r3
 800a94e:	4770      	bx	lr

0800a950 <_fini>:
 800a950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a952:	bf00      	nop
 800a954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a956:	bc08      	pop	{r3}
 800a958:	469e      	mov	lr, r3
 800a95a:	4770      	bx	lr

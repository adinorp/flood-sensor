
Floodnet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d324  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae0  0800d468  0800d468  0001d468  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df48  0800df48  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800df48  0800df48  0001df48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df50  0800df50  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df50  0800df50  0001df50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df54  0800df54  0001df54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800df58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000149c  20000074  0800dfcc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001510  0800dfcc  00021510  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027a66  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005686  00000000  00000000  00047b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002548  00000000  00000000  0004d190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002310  00000000  00000000  0004f6d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022ba8  00000000  00000000  000519e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002dd36  00000000  00000000  00074590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3d29  00000000  00000000  000a22c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00165fef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ae2c  00000000  00000000  00166040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000074 	.word	0x20000074
 800015c:	00000000 	.word	0x00000000
 8000160:	0800d44c 	.word	0x0800d44c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000078 	.word	0x20000078
 800017c:	0800d44c 	.word	0x0800d44c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2uiz>:
 8000b08:	004a      	lsls	r2, r1, #1
 8000b0a:	d211      	bcs.n	8000b30 <__aeabi_d2uiz+0x28>
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d211      	bcs.n	8000b36 <__aeabi_d2uiz+0x2e>
 8000b12:	d50d      	bpl.n	8000b30 <__aeabi_d2uiz+0x28>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d40e      	bmi.n	8000b3c <__aeabi_d2uiz+0x34>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_d2uiz+0x3a>
 8000b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0000 	mov.w	r0, #0
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_frsub>:
 8000b48:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b4c:	e002      	b.n	8000b54 <__addsf3>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_fsub>:
 8000b50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b54 <__addsf3>:
 8000b54:	0042      	lsls	r2, r0, #1
 8000b56:	bf1f      	itttt	ne
 8000b58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b5c:	ea92 0f03 	teqne	r2, r3
 8000b60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b68:	d06a      	beq.n	8000c40 <__addsf3+0xec>
 8000b6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b72:	bfc1      	itttt	gt
 8000b74:	18d2      	addgt	r2, r2, r3
 8000b76:	4041      	eorgt	r1, r0
 8000b78:	4048      	eorgt	r0, r1
 8000b7a:	4041      	eorgt	r1, r0
 8000b7c:	bfb8      	it	lt
 8000b7e:	425b      	neglt	r3, r3
 8000b80:	2b19      	cmp	r3, #25
 8000b82:	bf88      	it	hi
 8000b84:	4770      	bxhi	lr
 8000b86:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b9e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4249      	negne	r1, r1
 8000ba6:	ea92 0f03 	teq	r2, r3
 8000baa:	d03f      	beq.n	8000c2c <__addsf3+0xd8>
 8000bac:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bb4:	eb10 000c 	adds.w	r0, r0, ip
 8000bb8:	f1c3 0320 	rsb	r3, r3, #32
 8000bbc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bc4:	d502      	bpl.n	8000bcc <__addsf3+0x78>
 8000bc6:	4249      	negs	r1, r1
 8000bc8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bcc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd0:	d313      	bcc.n	8000bfa <__addsf3+0xa6>
 8000bd2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bd6:	d306      	bcc.n	8000be6 <__addsf3+0x92>
 8000bd8:	0840      	lsrs	r0, r0, #1
 8000bda:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bde:	f102 0201 	add.w	r2, r2, #1
 8000be2:	2afe      	cmp	r2, #254	; 0xfe
 8000be4:	d251      	bcs.n	8000c8a <__addsf3+0x136>
 8000be6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bee:	bf08      	it	eq
 8000bf0:	f020 0001 	biceq.w	r0, r0, #1
 8000bf4:	ea40 0003 	orr.w	r0, r0, r3
 8000bf8:	4770      	bx	lr
 8000bfa:	0049      	lsls	r1, r1, #1
 8000bfc:	eb40 0000 	adc.w	r0, r0, r0
 8000c00:	3a01      	subs	r2, #1
 8000c02:	bf28      	it	cs
 8000c04:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c08:	d2ed      	bcs.n	8000be6 <__addsf3+0x92>
 8000c0a:	fab0 fc80 	clz	ip, r0
 8000c0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c12:	ebb2 020c 	subs.w	r2, r2, ip
 8000c16:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c1a:	bfaa      	itet	ge
 8000c1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c20:	4252      	neglt	r2, r2
 8000c22:	4318      	orrge	r0, r3
 8000c24:	bfbc      	itt	lt
 8000c26:	40d0      	lsrlt	r0, r2
 8000c28:	4318      	orrlt	r0, r3
 8000c2a:	4770      	bx	lr
 8000c2c:	f092 0f00 	teq	r2, #0
 8000c30:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c34:	bf06      	itte	eq
 8000c36:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c3a:	3201      	addeq	r2, #1
 8000c3c:	3b01      	subne	r3, #1
 8000c3e:	e7b5      	b.n	8000bac <__addsf3+0x58>
 8000c40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c48:	bf18      	it	ne
 8000c4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c4e:	d021      	beq.n	8000c94 <__addsf3+0x140>
 8000c50:	ea92 0f03 	teq	r2, r3
 8000c54:	d004      	beq.n	8000c60 <__addsf3+0x10c>
 8000c56:	f092 0f00 	teq	r2, #0
 8000c5a:	bf08      	it	eq
 8000c5c:	4608      	moveq	r0, r1
 8000c5e:	4770      	bx	lr
 8000c60:	ea90 0f01 	teq	r0, r1
 8000c64:	bf1c      	itt	ne
 8000c66:	2000      	movne	r0, #0
 8000c68:	4770      	bxne	lr
 8000c6a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c6e:	d104      	bne.n	8000c7a <__addsf3+0x126>
 8000c70:	0040      	lsls	r0, r0, #1
 8000c72:	bf28      	it	cs
 8000c74:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c78:	4770      	bx	lr
 8000c7a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c7e:	bf3c      	itt	cc
 8000c80:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bxcc	lr
 8000c86:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c8a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c92:	4770      	bx	lr
 8000c94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c98:	bf16      	itet	ne
 8000c9a:	4608      	movne	r0, r1
 8000c9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca0:	4601      	movne	r1, r0
 8000ca2:	0242      	lsls	r2, r0, #9
 8000ca4:	bf06      	itte	eq
 8000ca6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000caa:	ea90 0f01 	teqeq	r0, r1
 8000cae:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cb2:	4770      	bx	lr

08000cb4 <__aeabi_ui2f>:
 8000cb4:	f04f 0300 	mov.w	r3, #0
 8000cb8:	e004      	b.n	8000cc4 <__aeabi_i2f+0x8>
 8000cba:	bf00      	nop

08000cbc <__aeabi_i2f>:
 8000cbc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc0:	bf48      	it	mi
 8000cc2:	4240      	negmi	r0, r0
 8000cc4:	ea5f 0c00 	movs.w	ip, r0
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd0:	4601      	mov	r1, r0
 8000cd2:	f04f 0000 	mov.w	r0, #0
 8000cd6:	e01c      	b.n	8000d12 <__aeabi_l2f+0x2a>

08000cd8 <__aeabi_ul2f>:
 8000cd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cdc:	bf08      	it	eq
 8000cde:	4770      	bxeq	lr
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	e00a      	b.n	8000cfc <__aeabi_l2f+0x14>
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_l2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cf4:	d502      	bpl.n	8000cfc <__aeabi_l2f+0x14>
 8000cf6:	4240      	negs	r0, r0
 8000cf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cfc:	ea5f 0c01 	movs.w	ip, r1
 8000d00:	bf02      	ittt	eq
 8000d02:	4684      	moveq	ip, r0
 8000d04:	4601      	moveq	r1, r0
 8000d06:	2000      	moveq	r0, #0
 8000d08:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d0c:	bf08      	it	eq
 8000d0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d12:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d16:	fabc f28c 	clz	r2, ip
 8000d1a:	3a08      	subs	r2, #8
 8000d1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d20:	db10      	blt.n	8000d44 <__aeabi_l2f+0x5c>
 8000d22:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d26:	4463      	add	r3, ip
 8000d28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d34:	fa20 f202 	lsr.w	r2, r0, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	f020 0001 	biceq.w	r0, r0, #1
 8000d42:	4770      	bx	lr
 8000d44:	f102 0220 	add.w	r2, r2, #32
 8000d48:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d54:	fa21 f202 	lsr.w	r2, r1, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d62:	4770      	bx	lr

08000d64 <__aeabi_f2uiz>:
 8000d64:	0042      	lsls	r2, r0, #1
 8000d66:	d20e      	bcs.n	8000d86 <__aeabi_f2uiz+0x22>
 8000d68:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d6c:	d30b      	bcc.n	8000d86 <__aeabi_f2uiz+0x22>
 8000d6e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d72:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d76:	d409      	bmi.n	8000d8c <__aeabi_f2uiz+0x28>
 8000d78:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d80:	fa23 f002 	lsr.w	r0, r3, r2
 8000d84:	4770      	bx	lr
 8000d86:	f04f 0000 	mov.w	r0, #0
 8000d8a:	4770      	bx	lr
 8000d8c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d90:	d101      	bne.n	8000d96 <__aeabi_f2uiz+0x32>
 8000d92:	0242      	lsls	r2, r0, #9
 8000d94:	d102      	bne.n	8000d9c <__aeabi_f2uiz+0x38>
 8000d96:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9a:	4770      	bx	lr
 8000d9c:	f04f 0000 	mov.w	r0, #0
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop

08000da4 <__aeabi_uldivmod>:
 8000da4:	b953      	cbnz	r3, 8000dbc <__aeabi_uldivmod+0x18>
 8000da6:	b94a      	cbnz	r2, 8000dbc <__aeabi_uldivmod+0x18>
 8000da8:	2900      	cmp	r1, #0
 8000daa:	bf08      	it	eq
 8000dac:	2800      	cmpeq	r0, #0
 8000dae:	bf1c      	itt	ne
 8000db0:	f04f 31ff 	movne.w	r1, #4294967295
 8000db4:	f04f 30ff 	movne.w	r0, #4294967295
 8000db8:	f000 b974 	b.w	80010a4 <__aeabi_idiv0>
 8000dbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dc4:	f000 f806 	bl	8000dd4 <__udivmoddi4>
 8000dc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dd0:	b004      	add	sp, #16
 8000dd2:	4770      	bx	lr

08000dd4 <__udivmoddi4>:
 8000dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd8:	9e08      	ldr	r6, [sp, #32]
 8000dda:	460d      	mov	r5, r1
 8000ddc:	4604      	mov	r4, r0
 8000dde:	4688      	mov	r8, r1
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d14d      	bne.n	8000e80 <__udivmoddi4+0xac>
 8000de4:	428a      	cmp	r2, r1
 8000de6:	4694      	mov	ip, r2
 8000de8:	d968      	bls.n	8000ebc <__udivmoddi4+0xe8>
 8000dea:	fab2 f282 	clz	r2, r2
 8000dee:	b152      	cbz	r2, 8000e06 <__udivmoddi4+0x32>
 8000df0:	fa01 f302 	lsl.w	r3, r1, r2
 8000df4:	f1c2 0120 	rsb	r1, r2, #32
 8000df8:	fa20 f101 	lsr.w	r1, r0, r1
 8000dfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e00:	ea41 0803 	orr.w	r8, r1, r3
 8000e04:	4094      	lsls	r4, r2
 8000e06:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000e0a:	0c21      	lsrs	r1, r4, #16
 8000e0c:	fbb8 fef5 	udiv	lr, r8, r5
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	fb05 831e 	mls	r3, r5, lr, r8
 8000e18:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e1c:	fb0e f107 	mul.w	r1, lr, r7
 8000e20:	4299      	cmp	r1, r3
 8000e22:	d90b      	bls.n	8000e3c <__udivmoddi4+0x68>
 8000e24:	eb1c 0303 	adds.w	r3, ip, r3
 8000e28:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000e2c:	f080 811e 	bcs.w	800106c <__udivmoddi4+0x298>
 8000e30:	4299      	cmp	r1, r3
 8000e32:	f240 811b 	bls.w	800106c <__udivmoddi4+0x298>
 8000e36:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb3 f0f5 	udiv	r0, r3, r5
 8000e44:	fb05 3310 	mls	r3, r5, r0, r3
 8000e48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e4c:	fb00 f707 	mul.w	r7, r0, r7
 8000e50:	42a7      	cmp	r7, r4
 8000e52:	d90a      	bls.n	8000e6a <__udivmoddi4+0x96>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5c:	f080 8108 	bcs.w	8001070 <__udivmoddi4+0x29c>
 8000e60:	42a7      	cmp	r7, r4
 8000e62:	f240 8105 	bls.w	8001070 <__udivmoddi4+0x29c>
 8000e66:	4464      	add	r4, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	1be4      	subs	r4, r4, r7
 8000e6c:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000e70:	2100      	movs	r1, #0
 8000e72:	b11e      	cbz	r6, 8000e7c <__udivmoddi4+0xa8>
 8000e74:	40d4      	lsrs	r4, r2
 8000e76:	2300      	movs	r3, #0
 8000e78:	e9c6 4300 	strd	r4, r3, [r6]
 8000e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e80:	428b      	cmp	r3, r1
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0xc2>
 8000e84:	2e00      	cmp	r6, #0
 8000e86:	f000 80ee 	beq.w	8001066 <__udivmoddi4+0x292>
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	e9c6 0500 	strd	r0, r5, [r6]
 8000e90:	4608      	mov	r0, r1
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	fab3 f183 	clz	r1, r3
 8000e9a:	2900      	cmp	r1, #0
 8000e9c:	d14a      	bne.n	8000f34 <__udivmoddi4+0x160>
 8000e9e:	42ab      	cmp	r3, r5
 8000ea0:	d302      	bcc.n	8000ea8 <__udivmoddi4+0xd4>
 8000ea2:	4282      	cmp	r2, r0
 8000ea4:	f200 80f9 	bhi.w	800109a <__udivmoddi4+0x2c6>
 8000ea8:	1a84      	subs	r4, r0, r2
 8000eaa:	eb65 0303 	sbc.w	r3, r5, r3
 8000eae:	2001      	movs	r0, #1
 8000eb0:	4698      	mov	r8, r3
 8000eb2:	2e00      	cmp	r6, #0
 8000eb4:	d0e2      	beq.n	8000e7c <__udivmoddi4+0xa8>
 8000eb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000eba:	e7df      	b.n	8000e7c <__udivmoddi4+0xa8>
 8000ebc:	b902      	cbnz	r2, 8000ec0 <__udivmoddi4+0xec>
 8000ebe:	deff      	udf	#255	; 0xff
 8000ec0:	fab2 f282 	clz	r2, r2
 8000ec4:	2a00      	cmp	r2, #0
 8000ec6:	f040 8091 	bne.w	8000fec <__udivmoddi4+0x218>
 8000eca:	eba1 050c 	sub.w	r5, r1, ip
 8000ece:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed2:	fa1f fe8c 	uxth.w	lr, ip
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	fbb5 f3f7 	udiv	r3, r5, r7
 8000edc:	fb07 5013 	mls	r0, r7, r3, r5
 8000ee0:	0c25      	lsrs	r5, r4, #16
 8000ee2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000ee6:	fb0e f003 	mul.w	r0, lr, r3
 8000eea:	42a8      	cmp	r0, r5
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x12c>
 8000eee:	eb1c 0505 	adds.w	r5, ip, r5
 8000ef2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ef6:	d202      	bcs.n	8000efe <__udivmoddi4+0x12a>
 8000ef8:	42a8      	cmp	r0, r5
 8000efa:	f200 80cb 	bhi.w	8001094 <__udivmoddi4+0x2c0>
 8000efe:	4643      	mov	r3, r8
 8000f00:	1a2d      	subs	r5, r5, r0
 8000f02:	b2a4      	uxth	r4, r4
 8000f04:	fbb5 f0f7 	udiv	r0, r5, r7
 8000f08:	fb07 5510 	mls	r5, r7, r0, r5
 8000f0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f10:	fb0e fe00 	mul.w	lr, lr, r0
 8000f14:	45a6      	cmp	lr, r4
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x156>
 8000f18:	eb1c 0404 	adds.w	r4, ip, r4
 8000f1c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f20:	d202      	bcs.n	8000f28 <__udivmoddi4+0x154>
 8000f22:	45a6      	cmp	lr, r4
 8000f24:	f200 80bb 	bhi.w	800109e <__udivmoddi4+0x2ca>
 8000f28:	4628      	mov	r0, r5
 8000f2a:	eba4 040e 	sub.w	r4, r4, lr
 8000f2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f32:	e79e      	b.n	8000e72 <__udivmoddi4+0x9e>
 8000f34:	f1c1 0720 	rsb	r7, r1, #32
 8000f38:	408b      	lsls	r3, r1
 8000f3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f42:	fa20 f407 	lsr.w	r4, r0, r7
 8000f46:	fa05 f301 	lsl.w	r3, r5, r1
 8000f4a:	431c      	orrs	r4, r3
 8000f4c:	40fd      	lsrs	r5, r7
 8000f4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f52:	fa00 f301 	lsl.w	r3, r0, r1
 8000f56:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f5a:	0c20      	lsrs	r0, r4, #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fb09 5518 	mls	r5, r9, r8, r5
 8000f64:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000f68:	fb08 f00e 	mul.w	r0, r8, lr
 8000f6c:	42a8      	cmp	r0, r5
 8000f6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f72:	d90b      	bls.n	8000f8c <__udivmoddi4+0x1b8>
 8000f74:	eb1c 0505 	adds.w	r5, ip, r5
 8000f78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f7c:	f080 8088 	bcs.w	8001090 <__udivmoddi4+0x2bc>
 8000f80:	42a8      	cmp	r0, r5
 8000f82:	f240 8085 	bls.w	8001090 <__udivmoddi4+0x2bc>
 8000f86:	f1a8 0802 	sub.w	r8, r8, #2
 8000f8a:	4465      	add	r5, ip
 8000f8c:	1a2d      	subs	r5, r5, r0
 8000f8e:	b2a4      	uxth	r4, r4
 8000f90:	fbb5 f0f9 	udiv	r0, r5, r9
 8000f94:	fb09 5510 	mls	r5, r9, r0, r5
 8000f98:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000f9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fa0:	45ae      	cmp	lr, r5
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x1e2>
 8000fa4:	eb1c 0505 	adds.w	r5, ip, r5
 8000fa8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fac:	d26c      	bcs.n	8001088 <__udivmoddi4+0x2b4>
 8000fae:	45ae      	cmp	lr, r5
 8000fb0:	d96a      	bls.n	8001088 <__udivmoddi4+0x2b4>
 8000fb2:	3802      	subs	r0, #2
 8000fb4:	4465      	add	r5, ip
 8000fb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fba:	fba0 9402 	umull	r9, r4, r0, r2
 8000fbe:	eba5 050e 	sub.w	r5, r5, lr
 8000fc2:	42a5      	cmp	r5, r4
 8000fc4:	46c8      	mov	r8, r9
 8000fc6:	46a6      	mov	lr, r4
 8000fc8:	d356      	bcc.n	8001078 <__udivmoddi4+0x2a4>
 8000fca:	d053      	beq.n	8001074 <__udivmoddi4+0x2a0>
 8000fcc:	b15e      	cbz	r6, 8000fe6 <__udivmoddi4+0x212>
 8000fce:	ebb3 0208 	subs.w	r2, r3, r8
 8000fd2:	eb65 050e 	sbc.w	r5, r5, lr
 8000fd6:	fa05 f707 	lsl.w	r7, r5, r7
 8000fda:	fa22 f301 	lsr.w	r3, r2, r1
 8000fde:	40cd      	lsrs	r5, r1
 8000fe0:	431f      	orrs	r7, r3
 8000fe2:	e9c6 7500 	strd	r7, r5, [r6]
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fec:	f1c2 0320 	rsb	r3, r2, #32
 8000ff0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ff4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ff8:	fa25 f303 	lsr.w	r3, r5, r3
 8000ffc:	4095      	lsls	r5, r2
 8000ffe:	430d      	orrs	r5, r1
 8001000:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001004:	fa1f fe8c 	uxth.w	lr, ip
 8001008:	fbb3 f1f7 	udiv	r1, r3, r7
 800100c:	fb07 3011 	mls	r0, r7, r1, r3
 8001010:	0c2b      	lsrs	r3, r5, #16
 8001012:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001016:	fb01 f00e 	mul.w	r0, r1, lr
 800101a:	4298      	cmp	r0, r3
 800101c:	fa04 f402 	lsl.w	r4, r4, r2
 8001020:	d908      	bls.n	8001034 <__udivmoddi4+0x260>
 8001022:	eb1c 0303 	adds.w	r3, ip, r3
 8001026:	f101 38ff 	add.w	r8, r1, #4294967295
 800102a:	d22f      	bcs.n	800108c <__udivmoddi4+0x2b8>
 800102c:	4298      	cmp	r0, r3
 800102e:	d92d      	bls.n	800108c <__udivmoddi4+0x2b8>
 8001030:	3902      	subs	r1, #2
 8001032:	4463      	add	r3, ip
 8001034:	1a1b      	subs	r3, r3, r0
 8001036:	b2ad      	uxth	r5, r5
 8001038:	fbb3 f0f7 	udiv	r0, r3, r7
 800103c:	fb07 3310 	mls	r3, r7, r0, r3
 8001040:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8001044:	fb00 f30e 	mul.w	r3, r0, lr
 8001048:	42ab      	cmp	r3, r5
 800104a:	d908      	bls.n	800105e <__udivmoddi4+0x28a>
 800104c:	eb1c 0505 	adds.w	r5, ip, r5
 8001050:	f100 38ff 	add.w	r8, r0, #4294967295
 8001054:	d216      	bcs.n	8001084 <__udivmoddi4+0x2b0>
 8001056:	42ab      	cmp	r3, r5
 8001058:	d914      	bls.n	8001084 <__udivmoddi4+0x2b0>
 800105a:	3802      	subs	r0, #2
 800105c:	4465      	add	r5, ip
 800105e:	1aed      	subs	r5, r5, r3
 8001060:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001064:	e738      	b.n	8000ed8 <__udivmoddi4+0x104>
 8001066:	4631      	mov	r1, r6
 8001068:	4630      	mov	r0, r6
 800106a:	e707      	b.n	8000e7c <__udivmoddi4+0xa8>
 800106c:	4686      	mov	lr, r0
 800106e:	e6e5      	b.n	8000e3c <__udivmoddi4+0x68>
 8001070:	4618      	mov	r0, r3
 8001072:	e6fa      	b.n	8000e6a <__udivmoddi4+0x96>
 8001074:	454b      	cmp	r3, r9
 8001076:	d2a9      	bcs.n	8000fcc <__udivmoddi4+0x1f8>
 8001078:	ebb9 0802 	subs.w	r8, r9, r2
 800107c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001080:	3801      	subs	r0, #1
 8001082:	e7a3      	b.n	8000fcc <__udivmoddi4+0x1f8>
 8001084:	4640      	mov	r0, r8
 8001086:	e7ea      	b.n	800105e <__udivmoddi4+0x28a>
 8001088:	4620      	mov	r0, r4
 800108a:	e794      	b.n	8000fb6 <__udivmoddi4+0x1e2>
 800108c:	4641      	mov	r1, r8
 800108e:	e7d1      	b.n	8001034 <__udivmoddi4+0x260>
 8001090:	46d0      	mov	r8, sl
 8001092:	e77b      	b.n	8000f8c <__udivmoddi4+0x1b8>
 8001094:	3b02      	subs	r3, #2
 8001096:	4465      	add	r5, ip
 8001098:	e732      	b.n	8000f00 <__udivmoddi4+0x12c>
 800109a:	4608      	mov	r0, r1
 800109c:	e709      	b.n	8000eb2 <__udivmoddi4+0xde>
 800109e:	4464      	add	r4, ip
 80010a0:	3802      	subs	r0, #2
 80010a2:	e742      	b.n	8000f2a <__udivmoddi4+0x156>

080010a4 <__aeabi_idiv0>:
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <ReadADCChannel>:
#define CONVERSION_POLL_TIME 10

static uint16_t ReadADCChannel(uint32_t Channel);

static uint16_t ReadADCChannel(uint32_t Channel)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	uint16_t result;
	if (HAL_ADCEx_Calibration_Start(Get_AdcHandle()) != HAL_OK) {
 80010b0:	f000 fe6a 	bl	8001d88 <Get_AdcHandle>
 80010b4:	4603      	mov	r3, r0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f002 f99f 	bl	80033fa <HAL_ADCEx_Calibration_Start>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <ReadADCChannel+0x1e>
	    Error_Handler();
 80010c2:	f000 fea5 	bl	8001e10 <Error_Handler>
	  }
	ADC_ChannelConfTypeDef sConfig = {0};
 80010c6:	f107 0308 	add.w	r3, r7, #8
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
	sConfig.Channel = Channel;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(Get_AdcHandle(), &sConfig) != HAL_OK) {
 80010de:	f000 fe53 	bl	8001d88 <Get_AdcHandle>
 80010e2:	4602      	mov	r2, r0
 80010e4:	f107 0308 	add.w	r3, r7, #8
 80010e8:	4619      	mov	r1, r3
 80010ea:	4610      	mov	r0, r2
 80010ec:	f001 fe98 	bl	8002e20 <HAL_ADC_ConfigChannel>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <ReadADCChannel+0x52>
		Error_Handler();
 80010f6:	f000 fe8b 	bl	8001e10 <Error_Handler>
	}
	if (HAL_ADC_Start(Get_AdcHandle()) != HAL_OK) {
 80010fa:	f000 fe45 	bl	8001d88 <Get_AdcHandle>
 80010fe:	4603      	mov	r3, r0
 8001100:	4618      	mov	r0, r3
 8001102:	f001 fd71 	bl	8002be8 <HAL_ADC_Start>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <ReadADCChannel+0x68>
		Error_Handler();
 800110c:	f000 fe80 	bl	8001e10 <Error_Handler>
	}
	HAL_ADC_PollForConversion(Get_AdcHandle(), HAL_MAX_DELAY);
 8001110:	f000 fe3a 	bl	8001d88 <Get_AdcHandle>
 8001114:	4603      	mov	r3, r0
 8001116:	f04f 31ff 	mov.w	r1, #4294967295
 800111a:	4618      	mov	r0, r3
 800111c:	f001 fddc 	bl	8002cd8 <HAL_ADC_PollForConversion>
	HAL_ADC_Stop(Get_AdcHandle());
 8001120:	f000 fe32 	bl	8001d88 <Get_AdcHandle>
 8001124:	4603      	mov	r3, r0
 8001126:	4618      	mov	r0, r3
 8001128:	f001 fda4 	bl	8002c74 <HAL_ADC_Stop>
	if((HAL_ADC_GetState(Get_AdcHandle()) & HAL_ADC_STATE_EOC_REG) == HAL_ADC_STATE_EOC_REG)
 800112c:	f000 fe2c 	bl	8001d88 <Get_AdcHandle>
 8001130:	4603      	mov	r3, r0
 8001132:	4618      	mov	r0, r3
 8001134:	f001 ffac 	bl	8003090 <HAL_ADC_GetState>
 8001138:	4603      	mov	r3, r0
 800113a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800113e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001142:	d107      	bne.n	8001154 <ReadADCChannel+0xac>
	{
		/*##-5- Get the converted value of regular channel  ######################*/
		result = (uint16_t)HAL_ADC_GetValue(Get_AdcHandle());
 8001144:	f000 fe20 	bl	8001d88 <Get_AdcHandle>
 8001148:	4603      	mov	r3, r0
 800114a:	4618      	mov	r0, r3
 800114c:	f001 fe5b 	bl	8002e06 <HAL_ADC_GetValue>
 8001150:	4603      	mov	r3, r0
 8001152:	82fb      	strh	r3, [r7, #22]
	}
	return result;
 8001154:	8afb      	ldrh	r3, [r7, #22]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <AdcRead_VBatt>:


uint16_t AdcRead_VBatt(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, ADC_SW_Pin, GPIO_PIN_RESET);
 8001164:	2200      	movs	r2, #0
 8001166:	2180      	movs	r1, #128	; 0x80
 8001168:	480a      	ldr	r0, [pc, #40]	; (8001194 <AdcRead_VBatt+0x34>)
 800116a:	f002 fd0d 	bl	8003b88 <HAL_GPIO_WritePin>
	adcResult = ReadADCChannel(ADC_CHANNEL_2);
 800116e:	480a      	ldr	r0, [pc, #40]	; (8001198 <AdcRead_VBatt+0x38>)
 8001170:	f7ff ff9a 	bl	80010a8 <ReadADCChannel>
 8001174:	4603      	mov	r3, r0
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fd9c 	bl	8000cb4 <__aeabi_ui2f>
 800117c:	4603      	mov	r3, r0
 800117e:	4a07      	ldr	r2, [pc, #28]	; (800119c <AdcRead_VBatt+0x3c>)
 8001180:	6013      	str	r3, [r2, #0]
	return adcResult;
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <AdcRead_VBatt+0x3c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fdec 	bl	8000d64 <__aeabi_f2uiz>
 800118c:	4603      	mov	r3, r0
 800118e:	b29b      	uxth	r3, r3
}
 8001190:	4618      	mov	r0, r3
 8001192:	bd80      	pop	{r7, pc}
 8001194:	48000400 	.word	0x48000400
 8001198:	08000004 	.word	0x08000004
 800119c:	20000090 	.word	0x20000090

080011a0 <commandReadDeviceId>:


char DataBuffer[200];

void commandReadDeviceId(char *data)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b096      	sub	sp, #88	; 0x58
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Read MCU Id, 32-bit access */
  uint8_t i;
  char DeviceId[50];
  uint8_t serialNumber[12]={0};
 80011a8:	2300      	movs	r3, #0
 80011aa:	61bb      	str	r3, [r7, #24]
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = HAL_GetUIDw0();
 80011b6:	f001 f9f3 	bl	80025a0 <HAL_GetUIDw0>
 80011ba:	4603      	mov	r3, r0
 80011bc:	617b      	str	r3, [r7, #20]
  deviceserial1 = HAL_GetUIDw1();
 80011be:	f001 f9f9 	bl	80025b4 <HAL_GetUIDw1>
 80011c2:	4603      	mov	r3, r0
 80011c4:	613b      	str	r3, [r7, #16]
  deviceserial2 = HAL_GetUIDw2();
 80011c6:	f001 f9ff 	bl	80025c8 <HAL_GetUIDw2>
 80011ca:	4603      	mov	r3, r0
 80011cc:	60fb      	str	r3, [r7, #12]
  memset(serialNumber, 0, 12);
 80011ce:	f107 0318 	add.w	r3, r7, #24
 80011d2:	220c      	movs	r2, #12
 80011d4:	2100      	movs	r1, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f009 ffe8 	bl	800b1ac <memset>
 80011dc:	697b      	ldr	r3, [r7, #20]
  memcpy(&serialNumber[0], &deviceserial0, 4);
 80011de:	61bb      	str	r3, [r7, #24]
 80011e0:	693b      	ldr	r3, [r7, #16]
  memcpy(&serialNumber[4], &deviceserial1, 4);
 80011e2:	61fb      	str	r3, [r7, #28]
 80011e4:	68fb      	ldr	r3, [r7, #12]
  memcpy(&serialNumber[8], &deviceserial2, 4);
 80011e6:	623b      	str	r3, [r7, #32]
  snprintf(DeviceId, sizeof(DeviceId), "OK,STDEVICEID,");
 80011e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ec:	4a1e      	ldr	r2, [pc, #120]	; (8001268 <commandReadDeviceId+0xc8>)
 80011ee:	2132      	movs	r1, #50	; 0x32
 80011f0:	4618      	mov	r0, r3
 80011f2:	f009 ffe3 	bl	800b1bc <sniprintf>
  serialPutStr(DeviceId);
 80011f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 fadc 	bl	80017b8 <serialPutStr>
  for(i=0; i<12; i++)
 8001200:	2300      	movs	r3, #0
 8001202:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001206:	e026      	b.n	8001256 <commandReadDeviceId+0xb6>
  {
    i < 11 ? snprintf(DeviceId, sizeof(DeviceId), "%x", serialNumber[i]) : snprintf(DeviceId, sizeof(DeviceId), "%d\n", serialNumber[i]);
 8001208:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800120c:	2b0a      	cmp	r3, #10
 800120e:	d80c      	bhi.n	800122a <commandReadDeviceId+0x8a>
 8001210:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001214:	3358      	adds	r3, #88	; 0x58
 8001216:	443b      	add	r3, r7
 8001218:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 800121c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001220:	4a12      	ldr	r2, [pc, #72]	; (800126c <commandReadDeviceId+0xcc>)
 8001222:	2132      	movs	r1, #50	; 0x32
 8001224:	f009 ffca 	bl	800b1bc <sniprintf>
 8001228:	e00b      	b.n	8001242 <commandReadDeviceId+0xa2>
 800122a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800122e:	3358      	adds	r3, #88	; 0x58
 8001230:	443b      	add	r3, r7
 8001232:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8001236:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800123a:	4a0d      	ldr	r2, [pc, #52]	; (8001270 <commandReadDeviceId+0xd0>)
 800123c:	2132      	movs	r1, #50	; 0x32
 800123e:	f009 ffbd 	bl	800b1bc <sniprintf>
    serialPutStr(DeviceId);
 8001242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001246:	4618      	mov	r0, r3
 8001248:	f000 fab6 	bl	80017b8 <serialPutStr>
  for(i=0; i<12; i++)
 800124c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001250:	3301      	adds	r3, #1
 8001252:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001256:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800125a:	2b0b      	cmp	r3, #11
 800125c:	d9d4      	bls.n	8001208 <commandReadDeviceId+0x68>
  }
}
 800125e:	bf00      	nop
 8001260:	bf00      	nop
 8001262:	3758      	adds	r7, #88	; 0x58
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	0800d468 	.word	0x0800d468
 800126c:	0800d478 	.word	0x0800d478
 8001270:	0800d47c 	.word	0x0800d47c

08001274 <commandReadDeviceBattery>:


void commandReadDeviceBattery(char *data)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]

	 serialPutStr("OK,BATTREAD");
 800127c:	4808      	ldr	r0, [pc, #32]	; (80012a0 <commandReadDeviceBattery+0x2c>)
 800127e:	f000 fa9b 	bl	80017b8 <serialPutStr>
	 sprintf(DataBuffer,"OK,BATTREAD %d",AdcRead_VBatt());
 8001282:	f7ff ff6d 	bl	8001160 <AdcRead_VBatt>
 8001286:	4603      	mov	r3, r0
 8001288:	461a      	mov	r2, r3
 800128a:	4906      	ldr	r1, [pc, #24]	; (80012a4 <commandReadDeviceBattery+0x30>)
 800128c:	4806      	ldr	r0, [pc, #24]	; (80012a8 <commandReadDeviceBattery+0x34>)
 800128e:	f009 ffc9 	bl	800b224 <siprintf>
	 serialPutStr(DataBuffer);
 8001292:	4805      	ldr	r0, [pc, #20]	; (80012a8 <commandReadDeviceBattery+0x34>)
 8001294:	f000 fa90 	bl	80017b8 <serialPutStr>
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	0800d480 	.word	0x0800d480
 80012a4:	0800d48c 	.word	0x0800d48c
 80012a8:	20000094 	.word	0x20000094

080012ac <commandInvalid>:

void commandInvalid(char *data)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  serialPutStr("ERROR,Invalid Command Handler!\n");
 80012b4:	4803      	ldr	r0, [pc, #12]	; (80012c4 <commandInvalid+0x18>)
 80012b6:	f000 fa7f 	bl	80017b8 <serialPutStr>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	0800d49c 	.word	0x0800d49c

080012c8 <commandGetTime>:

char dateTime[100];
void commandGetTime(char *data)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]


}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr

080012da <commandGetDate>:

void commandGetDate(char *data)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]

}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <commandGetDistance>:

char sonarBuffer[100];
void commandGetDistance(char *data)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(MB_PWR_GPIO_Port, MB_PWR_Pin, GPIO_PIN_SET);
 80012f4:	2201      	movs	r2, #1
 80012f6:	2101      	movs	r1, #1
 80012f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012fc:	f002 fc44 	bl	8003b88 <HAL_GPIO_WritePin>
	sprintf(sonarBuffer,"OK,DISTREAD %d",getSonarDistance());
 8001300:	f000 f870 	bl	80013e4 <getSonarDistance>
 8001304:	4603      	mov	r3, r0
 8001306:	461a      	mov	r2, r3
 8001308:	4905      	ldr	r1, [pc, #20]	; (8001320 <commandGetDistance+0x34>)
 800130a:	4806      	ldr	r0, [pc, #24]	; (8001324 <commandGetDistance+0x38>)
 800130c:	f009 ff8a 	bl	800b224 <siprintf>
	serialPutStr(sonarBuffer);
 8001310:	4804      	ldr	r0, [pc, #16]	; (8001324 <commandGetDistance+0x38>)
 8001312:	f000 fa51 	bl	80017b8 <serialPutStr>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	0800d4bc 	.word	0x0800d4bc
 8001324:	2000015c 	.word	0x2000015c

08001328 <Flash__Init>:
/**
 * @brief Flash Init routine
 **/

bool Flash__Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
	uint32_t jedecId;

	HAL_Delay(100);
 800132e:	2064      	movs	r0, #100	; 0x64
 8001330:	f001 f912 	bl	8002558 <HAL_Delay>
	//Assert Spi CS pin
	Spi1_AssertCs();
 8001334:	f000 f8f0 	bl	8001518 <Spi1_AssertCs>
	HAL_Delay(100);
 8001338:	2064      	movs	r0, #100	; 0x64
 800133a:	f001 f90d 	bl	8002558 <HAL_Delay>

	Flash__GetJEDEC_ID(&jedecId);
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	4618      	mov	r0, r3
 8001342:	f000 f82a 	bl	800139a <Flash__GetJEDEC_ID>

	if(jedecId != WINBOND_JEDEC_ID)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a04      	ldr	r2, [pc, #16]	; (800135c <Flash__Init+0x34>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d001      	beq.n	8001352 <Flash__Init+0x2a>
	{
		return false;
 800134e:	2300      	movs	r3, #0
 8001350:	e000      	b.n	8001354 <Flash__Init+0x2c>
	}
	else
	{
		return true;
 8001352:	2301      	movs	r3, #1
	}
}
 8001354:	4618      	mov	r0, r3
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	00ef4014 	.word	0x00ef4014

08001360 <Flash__SpiWrite>:
/**
 * @brief Flash Spi write routine
 **/

void Flash__SpiWrite(unsigned char data)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
	Spi1_Transmit(&data, sizeof(data));
 800136a:	1dfb      	adds	r3, r7, #7
 800136c:	2101      	movs	r1, #1
 800136e:	4618      	mov	r0, r3
 8001370:	f000 f8ea 	bl	8001548 <Spi1_Transmit>
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <Flash__SpiRead>:
/**
 * @brief Flash Spi read routine
 **/

unsigned char Flash__SpiRead(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
	unsigned char ret = 0x00;
 8001382:	2300      	movs	r3, #0
 8001384:	71fb      	strb	r3, [r7, #7]
	Spi1_Receive(&ret, sizeof(ret));
 8001386:	1dfb      	adds	r3, r7, #7
 8001388:	2101      	movs	r1, #1
 800138a:	4618      	mov	r0, r3
 800138c:	f000 f8f5 	bl	800157a <Spi1_Receive>
	return ret;
 8001390:	79fb      	ldrb	r3, [r7, #7]
}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <Flash__GetJEDEC_ID>:
 *
 * @param[out] jdecId Flash JEDEC id to be read
 **/

void Flash__GetJEDEC_ID(uint32_t *jdecId)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b084      	sub	sp, #16
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
	uint8_t read_buff[3];

	//Deassert Spi CS pin
	Spi1_DeassertCs();
 80013a2:	f000 f8c5 	bl	8001530 <Spi1_DeassertCs>
	//Send Read JEDEC ID Command
	Flash__SpiWrite(CMD_JEDEC_ID);
 80013a6:	209f      	movs	r0, #159	; 0x9f
 80013a8:	f7ff ffda 	bl	8001360 <Flash__SpiWrite>
	read_buff[0] = Flash__SpiRead();
 80013ac:	f7ff ffe6 	bl	800137c <Flash__SpiRead>
 80013b0:	4603      	mov	r3, r0
 80013b2:	733b      	strb	r3, [r7, #12]
	read_buff[1] = Flash__SpiRead();
 80013b4:	f7ff ffe2 	bl	800137c <Flash__SpiRead>
 80013b8:	4603      	mov	r3, r0
 80013ba:	737b      	strb	r3, [r7, #13]
	read_buff[2] = Flash__SpiRead();
 80013bc:	f7ff ffde 	bl	800137c <Flash__SpiRead>
 80013c0:	4603      	mov	r3, r0
 80013c2:	73bb      	strb	r3, [r7, #14]
	//Assert Spi CS pin
	Spi1_AssertCs();
 80013c4:	f000 f8a8 	bl	8001518 <Spi1_AssertCs>

	//Format JEDEC ID
	*jdecId = (read_buff[0] << 16) | (read_buff[1] << 8) | read_buff[2];
 80013c8:	7b3b      	ldrb	r3, [r7, #12]
 80013ca:	041a      	lsls	r2, r3, #16
 80013cc:	7b7b      	ldrb	r3, [r7, #13]
 80013ce:	021b      	lsls	r3, r3, #8
 80013d0:	4313      	orrs	r3, r2
 80013d2:	7bba      	ldrb	r2, [r7, #14]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	461a      	mov	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	601a      	str	r2, [r3, #0]
}
 80013dc:	bf00      	nop
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <getSonarDistance>:
 */

#include "Maxbotix.h"


uint16_t getSonarDistance(void){
 80013e4:	b5b0      	push	{r4, r5, r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
	  unsigned char RxBuffer[4];
	  bool newData = false;
 80013ea:	2300      	movs	r3, #0
 80013ec:	75fb      	strb	r3, [r7, #23]
	  uint16_t dist_mm = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	82bb      	strh	r3, [r7, #20]
	  unsigned char rx;
	  uint8_t tries = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	74fb      	strb	r3, [r7, #19]
	  do {
	    HAL_GPIO_WritePin(MB_CTL_GPIO_Port, MB_CTL_Pin, GPIO_PIN_SET);
 80013f6:	2201      	movs	r2, #1
 80013f8:	2102      	movs	r1, #2
 80013fa:	4844      	ldr	r0, [pc, #272]	; (800150c <getSonarDistance+0x128>)
 80013fc:	f002 fbc4 	bl	8003b88 <HAL_GPIO_WritePin>
	    HAL_Delay(1); // todo: implement HAL_Delay_Microseconds()
 8001400:	2001      	movs	r0, #1
 8001402:	f001 f8a9 	bl	8002558 <HAL_Delay>
	    HAL_GPIO_WritePin(MB_CTL_GPIO_Port, MB_CTL_Pin, GPIO_PIN_RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	2102      	movs	r1, #2
 800140a:	4840      	ldr	r0, [pc, #256]	; (800150c <getSonarDistance+0x128>)
 800140c:	f002 fbbc 	bl	8003b88 <HAL_GPIO_WritePin>
	    if (HAL_UART_Receive(Get_SonarHandle(), (uint8_t *)&rx, 1, 20) == HAL_OK) {
 8001410:	f000 fcce 	bl	8001db0 <Get_SonarHandle>
 8001414:	1df9      	adds	r1, r7, #7
 8001416:	2314      	movs	r3, #20
 8001418:	2201      	movs	r2, #1
 800141a:	f005 fcc1 	bl	8006da0 <HAL_UART_Receive>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d160      	bne.n	80014e6 <getSonarDistance+0x102>
	      if ((char)rx == 'R') {
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	2b52      	cmp	r3, #82	; 0x52
 8001428:	d15a      	bne.n	80014e0 <getSonarDistance+0xfc>
	        if (HAL_UART_Receive(Get_SonarHandle(), (uint8_t *)&RxBuffer, 4, 20) == HAL_OK) {
 800142a:	f000 fcc1 	bl	8001db0 <Get_SonarHandle>
 800142e:	f107 0108 	add.w	r1, r7, #8
 8001432:	2314      	movs	r3, #20
 8001434:	2204      	movs	r2, #4
 8001436:	f005 fcb3 	bl	8006da0 <HAL_UART_Receive>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d155      	bne.n	80014ec <getSonarDistance+0x108>
	          if (isdigit(RxBuffer[3])) {
 8001440:	7afb      	ldrb	r3, [r7, #11]
 8001442:	3301      	adds	r3, #1
 8001444:	4a32      	ldr	r2, [pc, #200]	; (8001510 <getSonarDistance+0x12c>)
 8001446:	4413      	add	r3, r2
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	f003 0304 	and.w	r3, r3, #4
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <getSonarDistance+0x72>
	            newData = true;
 8001452:	2301      	movs	r3, #1
 8001454:	75fb      	strb	r3, [r7, #23]
	          }
	          if (newData) {
 8001456:	7dfb      	ldrb	r3, [r7, #23]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d047      	beq.n	80014ec <getSonarDistance+0x108>
	            for (int i = 0; i < 4; i++)
 800145c:	2300      	movs	r3, #0
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	e035      	b.n	80014ce <getSonarDistance+0xea>
	              dist_mm += (RxBuffer[3 - i] - '0') * pow(10, i);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f1c3 0303 	rsb	r3, r3, #3
 8001468:	3318      	adds	r3, #24
 800146a:	443b      	add	r3, r7
 800146c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001470:	3b30      	subs	r3, #48	; 0x30
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff f82e 	bl	80004d4 <__aeabi_i2d>
 8001478:	4604      	mov	r4, r0
 800147a:	460d      	mov	r5, r1
 800147c:	68f8      	ldr	r0, [r7, #12]
 800147e:	f7ff f829 	bl	80004d4 <__aeabi_i2d>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	f04f 0000 	mov.w	r0, #0
 800148a:	4922      	ldr	r1, [pc, #136]	; (8001514 <getSonarDistance+0x130>)
 800148c:	f00b f8fa 	bl	800c684 <pow>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	4620      	mov	r0, r4
 8001496:	4629      	mov	r1, r5
 8001498:	f7ff f886 	bl	80005a8 <__aeabi_dmul>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	4614      	mov	r4, r2
 80014a2:	461d      	mov	r5, r3
 80014a4:	8abb      	ldrh	r3, [r7, #20]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff f814 	bl	80004d4 <__aeabi_i2d>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4620      	mov	r0, r4
 80014b2:	4629      	mov	r1, r5
 80014b4:	f7fe fec2 	bl	800023c <__adddf3>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	4610      	mov	r0, r2
 80014be:	4619      	mov	r1, r3
 80014c0:	f7ff fb22 	bl	8000b08 <__aeabi_d2uiz>
 80014c4:	4603      	mov	r3, r0
 80014c6:	82bb      	strh	r3, [r7, #20]
	            for (int i = 0; i < 4; i++)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	3301      	adds	r3, #1
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2b03      	cmp	r3, #3
 80014d2:	ddc6      	ble.n	8001462 <getSonarDistance+0x7e>
	            if (dist_mm==0)
 80014d4:	8abb      	ldrh	r3, [r7, #20]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d108      	bne.n	80014ec <getSonarDistance+0x108>
	            	newData = false;
 80014da:	2300      	movs	r3, #0
 80014dc:	75fb      	strb	r3, [r7, #23]
 80014de:	e005      	b.n	80014ec <getSonarDistance+0x108>
	          }
	        }
	      } else {
	        newData = false;
 80014e0:	2300      	movs	r3, #0
 80014e2:	75fb      	strb	r3, [r7, #23]
 80014e4:	e002      	b.n	80014ec <getSonarDistance+0x108>
	      }
	    } else {
	      tries++;
 80014e6:	7cfb      	ldrb	r3, [r7, #19]
 80014e8:	3301      	adds	r3, #1
 80014ea:	74fb      	strb	r3, [r7, #19]
	    }
	  } while (newData == false && tries < MAX_SONAR_TRIES - 1);
 80014ec:	7dfb      	ldrb	r3, [r7, #23]
 80014ee:	f083 0301 	eor.w	r3, r3, #1
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <getSonarDistance+0x11c>
 80014f8:	7cfb      	ldrb	r3, [r7, #19]
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	f67f af7b 	bls.w	80013f6 <getSonarDistance+0x12>
	  return dist_mm;
 8001500:	8abb      	ldrh	r3, [r7, #20]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bdb0      	pop	{r4, r5, r7, pc}
 800150a:	bf00      	nop
 800150c:	48000800 	.word	0x48000800
 8001510:	0800dcc8 	.word	0x0800dcc8
 8001514:	40240000 	.word	0x40240000

08001518 <Spi1_AssertCs>:
 */

#include "Spi.h"

void Spi1_AssertCs(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
	//Assert SPI1_NSS pin
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 800151c:	2201      	movs	r2, #1
 800151e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001522:	4802      	ldr	r0, [pc, #8]	; (800152c <Spi1_AssertCs+0x14>)
 8001524:	f002 fb30 	bl	8003b88 <HAL_GPIO_WritePin>
}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}
 800152c:	48000400 	.word	0x48000400

08001530 <Spi1_DeassertCs>:

void Spi1_DeassertCs(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
	//Deassert SPI1_NSS pin
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8001534:	2200      	movs	r2, #0
 8001536:	f44f 7100 	mov.w	r1, #512	; 0x200
 800153a:	4802      	ldr	r0, [pc, #8]	; (8001544 <Spi1_DeassertCs+0x14>)
 800153c:	f002 fb24 	bl	8003b88 <HAL_GPIO_WritePin>
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}
 8001544:	48000400 	.word	0x48000400

08001548 <Spi1_Transmit>:

bool Spi1_Transmit(uint8_t *buff, uint16_t size)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	807b      	strh	r3, [r7, #2]
  bool status = false;
 8001554:	2300      	movs	r3, #0
 8001556:	73fb      	strb	r3, [r7, #15]
  if(HAL_SPI_Transmit(Get_SpiHandle(), buff, size, SPI_TIMEOUT) == HAL_OK)
 8001558:	f000 fc34 	bl	8001dc4 <Get_SpiHandle>
 800155c:	887a      	ldrh	r2, [r7, #2]
 800155e:	2364      	movs	r3, #100	; 0x64
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	f004 f847 	bl	80055f4 <HAL_SPI_Transmit>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <Spi1_Transmit+0x28>
  {
    status  = true;
 800156c:	2301      	movs	r3, #1
 800156e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001570:	7bfb      	ldrb	r3, [r7, #15]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <Spi1_Receive>:


bool Spi1_Receive(uint8_t *buff, uint16_t size)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b084      	sub	sp, #16
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
 8001582:	460b      	mov	r3, r1
 8001584:	807b      	strh	r3, [r7, #2]
  bool status = false;
 8001586:	2300      	movs	r3, #0
 8001588:	73fb      	strb	r3, [r7, #15]
  if(HAL_SPI_Receive(Get_SpiHandle(), buff, size, SPI_TIMEOUT) == HAL_OK)
 800158a:	f000 fc1b 	bl	8001dc4 <Get_SpiHandle>
 800158e:	887a      	ldrh	r2, [r7, #2]
 8001590:	2364      	movs	r3, #100	; 0x64
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	f004 f9be 	bl	8005914 <HAL_SPI_Receive>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <Spi1_Receive+0x28>
  {
    status = true;
 800159e:	2301      	movs	r3, #1
 80015a0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <terminalTaskHandler>:



/* USER CODE END Header_terminalTaskHandler */
void terminalTaskHandler(void const * argument)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	int tCommandReady = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60fb      	str	r3, [r7, #12]
	char tRxedChar;
	HAL_UART_Receive_IT(Get_DebugHandle(),(uint8_t*)uartData,UART_RECEIVE_SIZE);
 80015b8:	f000 fbf0 	bl	8001d9c <Get_DebugHandle>
 80015bc:	4603      	mov	r3, r0
 80015be:	2201      	movs	r2, #1
 80015c0:	4912      	ldr	r1, [pc, #72]	; (800160c <terminalTaskHandler+0x60>)
 80015c2:	4618      	mov	r0, r3
 80015c4:	f005 fcb0 	bl	8006f28 <HAL_UART_Receive_IT>




	/* Infinite loop */
	serialPutStr("Terminal Thread Initialized");
 80015c8:	4811      	ldr	r0, [pc, #68]	; (8001610 <terminalTaskHandler+0x64>)
 80015ca:	f000 f8f5 	bl	80017b8 <serialPutStr>
	for(;;)
	{
		/* Process Terminal Commands */
		if(xQueueReceive(Get_TerminalQueueHandle(),&tRxedChar,QUEUE_TIMEOUT))
 80015ce:	f000 fc03 	bl	8001dd8 <Get_TerminalQueueHandle>
 80015d2:	4603      	mov	r3, r0
 80015d4:	4618      	mov	r0, r3
 80015d6:	f107 030b 	add.w	r3, r7, #11
 80015da:	220a      	movs	r2, #10
 80015dc:	4619      	mov	r1, r3
 80015de:	f008 f925 	bl	800982c <xQueueReceive>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d00c      	beq.n	8001602 <terminalTaskHandler+0x56>
		{
			tCommandReady = CommandLineBuildCommand(tRxedChar);
 80015e8:	7afb      	ldrb	r3, [r7, #11]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 f814 	bl	8001618 <CommandLineBuildCommand>
 80015f0:	60f8      	str	r0, [r7, #12]
			if(tCommandReady)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d004      	beq.n	8001602 <terminalTaskHandler+0x56>
			{
				CommandLineProcessCommand(gCommandBuffer);
 80015f8:	4806      	ldr	r0, [pc, #24]	; (8001614 <terminalTaskHandler+0x68>)
 80015fa:	f000 f855 	bl	80016a8 <CommandLineProcessCommand>
				tCommandReady = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
			}
		}
		osDelay(1);
 8001602:	2001      	movs	r0, #1
 8001604:	f007 fcec 	bl	8008fe0 <osDelay>
		if(xQueueReceive(Get_TerminalQueueHandle(),&tRxedChar,QUEUE_TIMEOUT))
 8001608:	e7e1      	b.n	80015ce <terminalTaskHandler+0x22>
 800160a:	bf00      	nop
 800160c:	200001c4 	.word	0x200001c4
 8001610:	0800d500 	.word	0x0800d500
 8001614:	200001cc 	.word	0x200001cc

08001618 <CommandLineBuildCommand>:
}


static uint16_t commandBuilderIdx = 0;
int CommandLineBuildCommand(char nextChar)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
	/* Don't store any new line characters or spaces. */
	if ((nextChar == '\n') || (nextChar == ' ') || (nextChar == '\t'))
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	2b0a      	cmp	r3, #10
 8001626:	d005      	beq.n	8001634 <CommandLineBuildCommand+0x1c>
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	2b20      	cmp	r3, #32
 800162c:	d002      	beq.n	8001634 <CommandLineBuildCommand+0x1c>
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	2b09      	cmp	r3, #9
 8001632:	d101      	bne.n	8001638 <CommandLineBuildCommand+0x20>
	{
		return false;
 8001634:	2300      	movs	r3, #0
 8001636:	e02d      	b.n	8001694 <CommandLineBuildCommand+0x7c>
	}
	/* The completed command has been received. Replace the final carriage
	 * return character with a NULL character to help with processing the
	 * command. */
	if (nextChar == '\r')
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	2b0d      	cmp	r3, #13
 800163c:	d10a      	bne.n	8001654 <CommandLineBuildCommand+0x3c>
	{
		gCommandBuffer[commandBuilderIdx] = '\0';
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <CommandLineBuildCommand+0x88>)
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	461a      	mov	r2, r3
 8001644:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <CommandLineBuildCommand+0x8c>)
 8001646:	2100      	movs	r1, #0
 8001648:	5499      	strb	r1, [r3, r2]
		commandBuilderIdx = 0;
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <CommandLineBuildCommand+0x88>)
 800164c:	2200      	movs	r2, #0
 800164e:	801a      	strh	r2, [r3, #0]
		return true;
 8001650:	2301      	movs	r3, #1
 8001652:	e01f      	b.n	8001694 <CommandLineBuildCommand+0x7c>
	}
	/* Convert the incoming character to uppercase. This matches the case
	 * of commands in the command table. Then store the received character
	 * in the command buffer. */
	gCommandBuffer[commandBuilderIdx] = TO_UPPER(nextChar);
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	2b60      	cmp	r3, #96	; 0x60
 8001658:	d906      	bls.n	8001668 <CommandLineBuildCommand+0x50>
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	2b7a      	cmp	r3, #122	; 0x7a
 800165e:	d803      	bhi.n	8001668 <CommandLineBuildCommand+0x50>
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	3b20      	subs	r3, #32
 8001664:	b2db      	uxtb	r3, r3
 8001666:	e000      	b.n	800166a <CommandLineBuildCommand+0x52>
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	4a0d      	ldr	r2, [pc, #52]	; (80016a0 <CommandLineBuildCommand+0x88>)
 800166c:	8812      	ldrh	r2, [r2, #0]
 800166e:	4611      	mov	r1, r2
 8001670:	4a0c      	ldr	r2, [pc, #48]	; (80016a4 <CommandLineBuildCommand+0x8c>)
 8001672:	5453      	strb	r3, [r2, r1]
	commandBuilderIdx++;
 8001674:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <CommandLineBuildCommand+0x88>)
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	3301      	adds	r3, #1
 800167a:	b29a      	uxth	r2, r3
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <CommandLineBuildCommand+0x88>)
 800167e:	801a      	strh	r2, [r3, #0]
	/* If the command is too long, reset the index and process
	 * the current command buffer. */
	if (commandBuilderIdx >= MAX_COMMAND_LEN)
 8001680:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <CommandLineBuildCommand+0x88>)
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	2b77      	cmp	r3, #119	; 0x77
 8001686:	d904      	bls.n	8001692 <CommandLineBuildCommand+0x7a>
	{
		commandBuilderIdx = 0;
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <CommandLineBuildCommand+0x88>)
 800168a:	2200      	movs	r2, #0
 800168c:	801a      	strh	r2, [r3, #0]
		return true;
 800168e:	2301      	movs	r3, #1
 8001690:	e000      	b.n	8001694 <CommandLineBuildCommand+0x7c>
	}

	return false;
 8001692:	2300      	movs	r3, #0

}
 8001694:	4618      	mov	r0, r3
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	bc80      	pop	{r7}
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	200002b0 	.word	0x200002b0
 80016a4:	200001cc 	.word	0x200001cc

080016a8 <CommandLineProcessCommand>:

void CommandLineProcessCommand(char * buffer)
{
 80016a8:	b590      	push	{r4, r7, lr}
 80016aa:	b087      	sub	sp, #28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]

	int idx;
	int CommandFound = false;
 80016b0:	2300      	movs	r3, #0
 80016b2:	613b      	str	r3, [r7, #16]
	//char *Com= strtok(buffer,"+");
	char *Arg = strtok(NULL,"+");
 80016b4:	491e      	ldr	r1, [pc, #120]	; (8001730 <CommandLineProcessCommand+0x88>)
 80016b6:	2000      	movs	r0, #0
 80016b8:	f009 fde8 	bl	800b28c <strtok>
 80016bc:	60f8      	str	r0, [r7, #12]

	/* Search for the command in the command table until it is found or
	 * the end of the table is reached. If the command is found, break
	 * out of the loop. */
	for (idx = 0; gCommandTable[idx].name != NULL; idx++)
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	e020      	b.n	8001706 <CommandLineProcessCommand+0x5e>
	{
		if (strncmp(gCommandTable[idx].name, buffer,strlen(gCommandTable[idx].name)) == 0)
 80016c4:	4a1b      	ldr	r2, [pc, #108]	; (8001734 <CommandLineProcessCommand+0x8c>)
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 80016cc:	4a19      	ldr	r2, [pc, #100]	; (8001734 <CommandLineProcessCommand+0x8c>)
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe fd53 	bl	8000180 <strlen>
 80016da:	4603      	mov	r3, r0
 80016dc:	461a      	mov	r2, r3
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	4620      	mov	r0, r4
 80016e2:	f009 fdbf 	bl	800b264 <strncmp>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d109      	bne.n	8001700 <CommandLineProcessCommand+0x58>
		{
			CommandFound = true;
 80016ec:	2301      	movs	r3, #1
 80016ee:	613b      	str	r3, [r7, #16]
			(*gCommandTable[idx].function)(Arg);
 80016f0:	4a10      	ldr	r2, [pc, #64]	; (8001734 <CommandLineProcessCommand+0x8c>)
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	4413      	add	r3, r2
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	68f8      	ldr	r0, [r7, #12]
 80016fc:	4798      	blx	r3
			break;
 80016fe:	e008      	b.n	8001712 <CommandLineProcessCommand+0x6a>
	for (idx = 0; gCommandTable[idx].name != NULL; idx++)
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	3301      	adds	r3, #1
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	4a0b      	ldr	r2, [pc, #44]	; (8001734 <CommandLineProcessCommand+0x8c>)
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1d8      	bne.n	80016c4 <CommandLineProcessCommand+0x1c>
		}
	}
	/* If the command was found, call the command function. Otherwise,
	 * output an error message.*/
	if (CommandFound==false)
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d107      	bne.n	8001728 <CommandLineProcessCommand+0x80>
	{
		snprintf(TerminalMsgBuffer, sizeof(TerminalMsgBuffer), "ERROR,Command not found\n");
 8001718:	4a07      	ldr	r2, [pc, #28]	; (8001738 <CommandLineProcessCommand+0x90>)
 800171a:	2164      	movs	r1, #100	; 0x64
 800171c:	4807      	ldr	r0, [pc, #28]	; (800173c <CommandLineProcessCommand+0x94>)
 800171e:	f009 fd4d 	bl	800b1bc <sniprintf>
		serialPutStr(TerminalMsgBuffer);
 8001722:	4806      	ldr	r0, [pc, #24]	; (800173c <CommandLineProcessCommand+0x94>)
 8001724:	f000 f848 	bl	80017b8 <serialPutStr>
	}
}
 8001728:	bf00      	nop
 800172a:	371c      	adds	r7, #28
 800172c:	46bd      	mov	sp, r7
 800172e:	bd90      	pop	{r4, r7, pc}
 8001730:	0800d51c 	.word	0x0800d51c
 8001734:	0800d5c0 	.word	0x0800d5c0
 8001738:	0800d520 	.word	0x0800d520
 800173c:	20000248 	.word	0x20000248

08001740 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]

	if(huart->Instance==USART2)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a14      	ldr	r2, [pc, #80]	; (80017a0 <HAL_UART_RxCpltCallback+0x60>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d114      	bne.n	800177c <HAL_UART_RxCpltCallback+0x3c>
	{
		HAL_UART_Receive_IT(Get_DebugHandle(),(uint8_t*)uartData,UART_RECEIVE_SIZE);
 8001752:	f000 fb23 	bl	8001d9c <Get_DebugHandle>
 8001756:	4603      	mov	r3, r0
 8001758:	2201      	movs	r2, #1
 800175a:	4912      	ldr	r1, [pc, #72]	; (80017a4 <HAL_UART_RxCpltCallback+0x64>)
 800175c:	4618      	mov	r0, r3
 800175e:	f005 fbe3 	bl	8006f28 <HAL_UART_Receive_IT>
		cValuetoPost = (char)uartData[0];
 8001762:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <HAL_UART_RxCpltCallback+0x64>)
 8001764:	781a      	ldrb	r2, [r3, #0]
 8001766:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <HAL_UART_RxCpltCallback+0x68>)
 8001768:	701a      	strb	r2, [r3, #0]
		xQueueSendToBackFromISR(Get_TerminalQueueHandle(),(void*)&cValuetoPost,&xHigherPrioritTaskWoken);
 800176a:	f000 fb35 	bl	8001dd8 <Get_TerminalQueueHandle>
 800176e:	4603      	mov	r3, r0
 8001770:	4618      	mov	r0, r3
 8001772:	2300      	movs	r3, #0
 8001774:	4a0d      	ldr	r2, [pc, #52]	; (80017ac <HAL_UART_RxCpltCallback+0x6c>)
 8001776:	490c      	ldr	r1, [pc, #48]	; (80017a8 <HAL_UART_RxCpltCallback+0x68>)
 8001778:	f007 ffc0 	bl	80096fc <xQueueGenericSendFromISR>
	}
	if(huart->Instance==LPUART1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a0b      	ldr	r2, [pc, #44]	; (80017b0 <HAL_UART_RxCpltCallback+0x70>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d107      	bne.n	8001796 <HAL_UART_RxCpltCallback+0x56>
	{
		HAL_UART_Receive_IT(Get_SonarHandle(),(uint8_t*)uartSonic,UART_RECEIVE_SIZE);
 8001786:	f000 fb13 	bl	8001db0 <Get_SonarHandle>
 800178a:	4603      	mov	r3, r0
 800178c:	2201      	movs	r2, #1
 800178e:	4909      	ldr	r1, [pc, #36]	; (80017b4 <HAL_UART_RxCpltCallback+0x74>)
 8001790:	4618      	mov	r0, r3
 8001792:	f005 fbc9 	bl	8006f28 <HAL_UART_Receive_IT>
		//cValuetoPost = (char)uartData[0];
		//xQueueSendToBackFromISR(Get_TerminalQueueHandle(),(void*)&cValuetoPost,&xHigherPrioritTaskWoken);
	}
	//HAL_UART_Receive_IT(Get_SonarHandle(),(uint8_t*)uartSonic,UART_RECEIVE_SIZE);
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40004400 	.word	0x40004400
 80017a4:	200001c4 	.word	0x200001c4
 80017a8:	200001c0 	.word	0x200001c0
 80017ac:	200002ac 	.word	0x200002ac
 80017b0:	40008000 	.word	0x40008000
 80017b4:	200001c8 	.word	0x200001c8

080017b8 <serialPutStr>:

#include "Uart.h"


void serialPutStr(const char *data)
{
 80017b8:	b590      	push	{r4, r7, lr}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
   //Get exclusive access
  //osAcquireMutex(&uartMutex);
  HAL_UART_Transmit(Get_DebugHandle(),(uint8_t *)data, strlen(data),DEBUG_UART_TIMEOUT);
 80017c0:	f000 faec 	bl	8001d9c <Get_DebugHandle>
 80017c4:	4604      	mov	r4, r0
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7fe fcda 	bl	8000180 <strlen>
 80017cc:	4603      	mov	r3, r0
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	230a      	movs	r3, #10
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	4620      	mov	r0, r4
 80017d6:	f005 fa5d 	bl	8006c94 <HAL_UART_Transmit>
  //osReleaseMutex(&uartMutex);

}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd90      	pop	{r4, r7, pc}

080017e2 <serialPutStrNoMutex>:


void serialPutStrNoMutex(const char *data)
{
 80017e2:	b590      	push	{r4, r7, lr}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(Get_DebugHandle(),(uint8_t *)data, strlen(data),DEBUG_UART_TIMEOUT);
 80017ea:	f000 fad7 	bl	8001d9c <Get_DebugHandle>
 80017ee:	4604      	mov	r4, r0
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7fe fcc5 	bl	8000180 <strlen>
 80017f6:	4603      	mov	r3, r0
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	230a      	movs	r3, #10
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	4620      	mov	r0, r4
 8001800:	f005 fa48 	bl	8006c94 <HAL_UART_Transmit>
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	bd90      	pop	{r4, r7, pc}

0800180c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4a06      	ldr	r2, [pc, #24]	; (8001834 <vApplicationGetIdleTaskMemory+0x28>)
 800181c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	4a05      	ldr	r2, [pc, #20]	; (8001838 <vApplicationGetIdleTaskMemory+0x2c>)
 8001822:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2280      	movs	r2, #128	; 0x80
 8001828:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800182a:	bf00      	nop
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr
 8001834:	200002b4 	.word	0x200002b4
 8001838:	20000308 	.word	0x20000308

0800183c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001848:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800184a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4313      	orrs	r3, r2
 8001852:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001858:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4013      	ands	r3, r2
 800185e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001860:	68fb      	ldr	r3, [r7, #12]
}
 8001862:	bf00      	nop
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr

0800186c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800186c:	b5b0      	push	{r4, r5, r7, lr}
 800186e:	b092      	sub	sp, #72	; 0x48
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001872:	f000 fe35 	bl	80024e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001876:	f000 f871 	bl	800195c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800187a:	f000 fa2d 	bl	8001cd8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800187e:	f000 f953 	bl	8001b28 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8001882:	f000 f99f 	bl	8001bc4 <MX_USART2_UART_Init>
  MX_ADC_Init();
 8001886:	f000 f8c1 	bl	8001a0c <MX_ADC_Init>
  MX_I2C2_Init();
 800188a:	f000 f90d 	bl	8001aa8 <MX_I2C2_Init>
  MX_SPI2_Init();
 800188e:	f000 f9e5 	bl	8001c5c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  Flash__Init() ? serialPutStrNoMutex("Flash Test OK\n") : serialPutStrNoMutex("Flash FAIL Test \n");
 8001892:	f7ff fd49 	bl	8001328 <Flash__Init>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <main+0x38>
 800189c:	4826      	ldr	r0, [pc, #152]	; (8001938 <main+0xcc>)
 800189e:	f7ff ffa0 	bl	80017e2 <serialPutStrNoMutex>
 80018a2:	e002      	b.n	80018aa <main+0x3e>
 80018a4:	4825      	ldr	r0, [pc, #148]	; (800193c <main+0xd0>)
 80018a6:	f7ff ff9c 	bl	80017e2 <serialPutStrNoMutex>

  /* Create the mutex(es) */
  /* definition and creation of UartMutex */
  osMutexDef(UartMutex);
 80018aa:	2300      	movs	r3, #0
 80018ac:	643b      	str	r3, [r7, #64]	; 0x40
 80018ae:	2300      	movs	r3, #0
 80018b0:	647b      	str	r3, [r7, #68]	; 0x44
  UartMutexHandle = osMutexCreate(osMutex(UartMutex));
 80018b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018b6:	4618      	mov	r0, r3
 80018b8:	f007 fba6 	bl	8009008 <osMutexCreate>
 80018bc:	4603      	mov	r3, r0
 80018be:	4a20      	ldr	r2, [pc, #128]	; (8001940 <main+0xd4>)
 80018c0:	6013      	str	r3, [r2, #0]

  /* definition and creation of SpiMutex */
  osMutexDef(SpiMutex);
 80018c2:	2300      	movs	r3, #0
 80018c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80018c6:	2300      	movs	r3, #0
 80018c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  SpiMutexHandle = osMutexCreate(osMutex(SpiMutex));
 80018ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018ce:	4618      	mov	r0, r3
 80018d0:	f007 fb9a 	bl	8009008 <osMutexCreate>
 80018d4:	4603      	mov	r3, r0
 80018d6:	4a1b      	ldr	r2, [pc, #108]	; (8001944 <main+0xd8>)
 80018d8:	6013      	str	r3, [r2, #0]

  /* definition and creation of I2cMutex */
  osMutexDef(I2cMutex);
 80018da:	2300      	movs	r3, #0
 80018dc:	633b      	str	r3, [r7, #48]	; 0x30
 80018de:	2300      	movs	r3, #0
 80018e0:	637b      	str	r3, [r7, #52]	; 0x34
  I2cMutexHandle = osMutexCreate(osMutex(I2cMutex));
 80018e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018e6:	4618      	mov	r0, r3
 80018e8:	f007 fb8e 	bl	8009008 <osMutexCreate>
 80018ec:	4603      	mov	r3, r0
 80018ee:	4a16      	ldr	r2, [pc, #88]	; (8001948 <main+0xdc>)
 80018f0:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of xQueue1 */
  osMessageQDef(xQueue1, 99, uint16_t);
 80018f2:	4b16      	ldr	r3, [pc, #88]	; (800194c <main+0xe0>)
 80018f4:	f107 0420 	add.w	r4, r7, #32
 80018f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  xQueue1Handle = osMessageCreate(osMessageQ(xQueue1), NULL);
 80018fe:	f107 0320 	add.w	r3, r7, #32
 8001902:	2100      	movs	r1, #0
 8001904:	4618      	mov	r0, r3
 8001906:	f007 fb97 	bl	8009038 <osMessageCreate>
 800190a:	4603      	mov	r3, r0
 800190c:	4a10      	ldr	r2, [pc, #64]	; (8001950 <main+0xe4>)
 800190e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of terminalTask */
  osThreadDef(terminalTask, terminalTaskHandler, osPriorityNormal, 0, 128);
 8001910:	4b10      	ldr	r3, [pc, #64]	; (8001954 <main+0xe8>)
 8001912:	1d3c      	adds	r4, r7, #4
 8001914:	461d      	mov	r5, r3
 8001916:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001918:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800191a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800191e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  terminalTaskHandle = osThreadCreate(osThread(terminalTask), NULL);
 8001922:	1d3b      	adds	r3, r7, #4
 8001924:	2100      	movs	r1, #0
 8001926:	4618      	mov	r0, r3
 8001928:	f007 fb0e 	bl	8008f48 <osThreadCreate>
 800192c:	4603      	mov	r3, r0
 800192e:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <main+0xec>)
 8001930:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001932:	f007 fb02 	bl	8008f3a <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001936:	e7fe      	b.n	8001936 <main+0xca>
 8001938:	0800d54c 	.word	0x0800d54c
 800193c:	0800d55c 	.word	0x0800d55c
 8001940:	20000754 	.word	0x20000754
 8001944:	20000758 	.word	0x20000758
 8001948:	2000075c 	.word	0x2000075c
 800194c:	0800d570 	.word	0x0800d570
 8001950:	20000750 	.word	0x20000750
 8001954:	0800d580 	.word	0x0800d580
 8001958:	2000074c 	.word	0x2000074c

0800195c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b09a      	sub	sp, #104	; 0x68
 8001960:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001962:	f107 0320 	add.w	r3, r7, #32
 8001966:	2248      	movs	r2, #72	; 0x48
 8001968:	2100      	movs	r1, #0
 800196a:	4618      	mov	r0, r3
 800196c:	f009 fc1e 	bl	800b1ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001970:	f107 0308 	add.w	r3, r7, #8
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
 8001980:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001982:	4b21      	ldr	r3, [pc, #132]	; (8001a08 <SystemClock_Config+0xac>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800198a:	4a1f      	ldr	r2, [pc, #124]	; (8001a08 <SystemClock_Config+0xac>)
 800198c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001990:	6013      	str	r3, [r2, #0]
 8001992:	4b1d      	ldr	r3, [pc, #116]	; (8001a08 <SystemClock_Config+0xac>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 800199e:	2322      	movs	r3, #34	; 0x22
 80019a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80019a8:	2301      	movs	r3, #1
 80019aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019ac:	2340      	movs	r3, #64	; 0x40
 80019ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80019b0:	2300      	movs	r3, #0
 80019b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80019b4:	23b0      	movs	r3, #176	; 0xb0
 80019b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019b8:	2300      	movs	r3, #0
 80019ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019bc:	f107 0320 	add.w	r3, r7, #32
 80019c0:	4618      	mov	r0, r3
 80019c2:	f002 fcc7 	bl	8004354 <HAL_RCC_OscConfig>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80019cc:	f000 fa20 	bl	8001e10 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80019d0:	234f      	movs	r3, #79	; 0x4f
 80019d2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019d8:	2300      	movs	r3, #0
 80019da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80019e4:	2300      	movs	r3, #0
 80019e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019e8:	f107 0308 	add.w	r3, r7, #8
 80019ec:	2102      	movs	r1, #2
 80019ee:	4618      	mov	r0, r3
 80019f0:	f003 f832 	bl	8004a58 <HAL_RCC_ClockConfig>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80019fa:	f000 fa09 	bl	8001e10 <Error_Handler>
  }
}
 80019fe:	bf00      	nop
 8001a00:	3768      	adds	r7, #104	; 0x68
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	58000400 	.word	0x58000400

08001a0c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8001a10:	4b23      	ldr	r3, [pc, #140]	; (8001aa0 <MX_ADC_Init+0x94>)
 8001a12:	4a24      	ldr	r2, [pc, #144]	; (8001aa4 <MX_ADC_Init+0x98>)
 8001a14:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a16:	4b22      	ldr	r3, [pc, #136]	; (8001aa0 <MX_ADC_Init+0x94>)
 8001a18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a1c:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001a1e:	4b20      	ldr	r3, [pc, #128]	; (8001aa0 <MX_ADC_Init+0x94>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a24:	4b1e      	ldr	r3, [pc, #120]	; (8001aa0 <MX_ADC_Init+0x94>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a2a:	4b1d      	ldr	r3, [pc, #116]	; (8001aa0 <MX_ADC_Init+0x94>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a30:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <MX_ADC_Init+0x94>)
 8001a32:	2204      	movs	r2, #4
 8001a34:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001a36:	4b1a      	ldr	r3, [pc, #104]	; (8001aa0 <MX_ADC_Init+0x94>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001a3c:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <MX_ADC_Init+0x94>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001a42:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <MX_ADC_Init+0x94>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8001a48:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <MX_ADC_Init+0x94>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001a4e:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <MX_ADC_Init+0x94>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a56:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <MX_ADC_Init+0x94>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a5c:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <MX_ADC_Init+0x94>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001a62:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <MX_ADC_Init+0x94>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a6a:	4b0d      	ldr	r3, [pc, #52]	; (8001aa0 <MX_ADC_Init+0x94>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <MX_ADC_Init+0x94>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001a76:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <MX_ADC_Init+0x94>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8001a7c:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <MX_ADC_Init+0x94>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <MX_ADC_Init+0x94>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001a8a:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <MX_ADC_Init+0x94>)
 8001a8c:	f000 ff18 	bl	80028c0 <HAL_ADC_Init>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_ADC_Init+0x8e>
  {
    Error_Handler();
 8001a96:	f000 f9bb 	bl	8001e10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000508 	.word	0x20000508
 8001aa4:	40012400 	.word	0x40012400

08001aa8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001aac:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <MX_I2C2_Init+0x74>)
 8001aae:	4a1c      	ldr	r2, [pc, #112]	; (8001b20 <MX_I2C2_Init+0x78>)
 8001ab0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001ab2:	4b1a      	ldr	r3, [pc, #104]	; (8001b1c <MX_I2C2_Init+0x74>)
 8001ab4:	4a1b      	ldr	r2, [pc, #108]	; (8001b24 <MX_I2C2_Init+0x7c>)
 8001ab6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001ab8:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <MX_I2C2_Init+0x74>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001abe:	4b17      	ldr	r3, [pc, #92]	; (8001b1c <MX_I2C2_Init+0x74>)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ac4:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <MX_I2C2_Init+0x74>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001aca:	4b14      	ldr	r3, [pc, #80]	; (8001b1c <MX_I2C2_Init+0x74>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ad0:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <MX_I2C2_Init+0x74>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <MX_I2C2_Init+0x74>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001adc:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <MX_I2C2_Init+0x74>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ae2:	480e      	ldr	r0, [pc, #56]	; (8001b1c <MX_I2C2_Init+0x74>)
 8001ae4:	f002 f867 	bl	8003bb6 <HAL_I2C_Init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001aee:	f000 f98f 	bl	8001e10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001af2:	2100      	movs	r1, #0
 8001af4:	4809      	ldr	r0, [pc, #36]	; (8001b1c <MX_I2C2_Init+0x74>)
 8001af6:	f002 f8ed 	bl	8003cd4 <HAL_I2CEx_ConfigAnalogFilter>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001b00:	f000 f986 	bl	8001e10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001b04:	2100      	movs	r1, #0
 8001b06:	4805      	ldr	r0, [pc, #20]	; (8001b1c <MX_I2C2_Init+0x74>)
 8001b08:	f002 f92e 	bl	8003d68 <HAL_I2CEx_ConfigDigitalFilter>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001b12:	f000 f97d 	bl	8001e10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	2000056c 	.word	0x2000056c
 8001b20:	40005800 	.word	0x40005800
 8001b24:	20303e5d 	.word	0x20303e5d

08001b28 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001b2c:	4b23      	ldr	r3, [pc, #140]	; (8001bbc <MX_LPUART1_UART_Init+0x94>)
 8001b2e:	4a24      	ldr	r2, [pc, #144]	; (8001bc0 <MX_LPUART1_UART_Init+0x98>)
 8001b30:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8001b32:	4b22      	ldr	r3, [pc, #136]	; (8001bbc <MX_LPUART1_UART_Init+0x94>)
 8001b34:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b38:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b3a:	4b20      	ldr	r3, [pc, #128]	; (8001bbc <MX_LPUART1_UART_Init+0x94>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001b40:	4b1e      	ldr	r3, [pc, #120]	; (8001bbc <MX_LPUART1_UART_Init+0x94>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001b46:	4b1d      	ldr	r3, [pc, #116]	; (8001bbc <MX_LPUART1_UART_Init+0x94>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_RX;
 8001b4c:	4b1b      	ldr	r3, [pc, #108]	; (8001bbc <MX_LPUART1_UART_Init+0x94>)
 8001b4e:	2204      	movs	r2, #4
 8001b50:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b52:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <MX_LPUART1_UART_Init+0x94>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b58:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <MX_LPUART1_UART_Init+0x94>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b5e:	4b17      	ldr	r3, [pc, #92]	; (8001bbc <MX_LPUART1_UART_Init+0x94>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8001b64:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <MX_LPUART1_UART_Init+0x94>)
 8001b66:	2208      	movs	r2, #8
 8001b68:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8001b6a:	4b14      	ldr	r3, [pc, #80]	; (8001bbc <MX_LPUART1_UART_Init+0x94>)
 8001b6c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b70:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_HalfDuplex_Init(&hlpuart1) != HAL_OK)
 8001b72:	4812      	ldr	r0, [pc, #72]	; (8001bbc <MX_LPUART1_UART_Init+0x94>)
 8001b74:	f005 f836 	bl	8006be4 <HAL_HalfDuplex_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_LPUART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001b7e:	f000 f947 	bl	8001e10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b82:	2100      	movs	r1, #0
 8001b84:	480d      	ldr	r0, [pc, #52]	; (8001bbc <MX_LPUART1_UART_Init+0x94>)
 8001b86:	f007 f8f9 	bl	8008d7c <HAL_UARTEx_SetTxFifoThreshold>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_LPUART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001b90:	f000 f93e 	bl	8001e10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b94:	2100      	movs	r1, #0
 8001b96:	4809      	ldr	r0, [pc, #36]	; (8001bbc <MX_LPUART1_UART_Init+0x94>)
 8001b98:	f007 f92e 	bl	8008df8 <HAL_UARTEx_SetRxFifoThreshold>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_LPUART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001ba2:	f000 f935 	bl	8001e10 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&hlpuart1) != HAL_OK)
 8001ba6:	4805      	ldr	r0, [pc, #20]	; (8001bbc <MX_LPUART1_UART_Init+0x94>)
 8001ba8:	f007 f875 	bl	8008c96 <HAL_UARTEx_EnableFifoMode>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_LPUART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001bb2:	f000 f92d 	bl	8001e10 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	200005c0 	.word	0x200005c0
 8001bc0:	40008000 	.word	0x40008000

08001bc4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bc8:	4b22      	ldr	r3, [pc, #136]	; (8001c54 <MX_USART2_UART_Init+0x90>)
 8001bca:	4a23      	ldr	r2, [pc, #140]	; (8001c58 <MX_USART2_UART_Init+0x94>)
 8001bcc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bce:	4b21      	ldr	r3, [pc, #132]	; (8001c54 <MX_USART2_UART_Init+0x90>)
 8001bd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bd6:	4b1f      	ldr	r3, [pc, #124]	; (8001c54 <MX_USART2_UART_Init+0x90>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bdc:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <MX_USART2_UART_Init+0x90>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001be2:	4b1c      	ldr	r3, [pc, #112]	; (8001c54 <MX_USART2_UART_Init+0x90>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001be8:	4b1a      	ldr	r3, [pc, #104]	; (8001c54 <MX_USART2_UART_Init+0x90>)
 8001bea:	220c      	movs	r2, #12
 8001bec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bee:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <MX_USART2_UART_Init+0x90>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf4:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <MX_USART2_UART_Init+0x90>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bfa:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <MX_USART2_UART_Init+0x90>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c00:	4b14      	ldr	r3, [pc, #80]	; (8001c54 <MX_USART2_UART_Init+0x90>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c06:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <MX_USART2_UART_Init+0x90>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c0c:	4811      	ldr	r0, [pc, #68]	; (8001c54 <MX_USART2_UART_Init+0x90>)
 8001c0e:	f004 ff99 	bl	8006b44 <HAL_UART_Init>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001c18:	f000 f8fa 	bl	8001e10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	480d      	ldr	r0, [pc, #52]	; (8001c54 <MX_USART2_UART_Init+0x90>)
 8001c20:	f007 f8ac 	bl	8008d7c <HAL_UARTEx_SetTxFifoThreshold>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001c2a:	f000 f8f1 	bl	8001e10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4808      	ldr	r0, [pc, #32]	; (8001c54 <MX_USART2_UART_Init+0x90>)
 8001c32:	f007 f8e1 	bl	8008df8 <HAL_UARTEx_SetRxFifoThreshold>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001c3c:	f000 f8e8 	bl	8001e10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001c40:	4804      	ldr	r0, [pc, #16]	; (8001c54 <MX_USART2_UART_Init+0x90>)
 8001c42:	f007 f863 	bl	8008d0c <HAL_UARTEx_DisableFifoMode>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001c4c:	f000 f8e0 	bl	8001e10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20000654 	.word	0x20000654
 8001c58:	40004400 	.word	0x40004400

08001c5c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001c60:	4b1b      	ldr	r3, [pc, #108]	; (8001cd0 <MX_SPI2_Init+0x74>)
 8001c62:	4a1c      	ldr	r2, [pc, #112]	; (8001cd4 <MX_SPI2_Init+0x78>)
 8001c64:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c66:	4b1a      	ldr	r3, [pc, #104]	; (8001cd0 <MX_SPI2_Init+0x74>)
 8001c68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c6c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c6e:	4b18      	ldr	r3, [pc, #96]	; (8001cd0 <MX_SPI2_Init+0x74>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c74:	4b16      	ldr	r3, [pc, #88]	; (8001cd0 <MX_SPI2_Init+0x74>)
 8001c76:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001c7a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c7c:	4b14      	ldr	r3, [pc, #80]	; (8001cd0 <MX_SPI2_Init+0x74>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c82:	4b13      	ldr	r3, [pc, #76]	; (8001cd0 <MX_SPI2_Init+0x74>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c88:	4b11      	ldr	r3, [pc, #68]	; (8001cd0 <MX_SPI2_Init+0x74>)
 8001c8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c8e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c90:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <MX_SPI2_Init+0x74>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c96:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <MX_SPI2_Init+0x74>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <MX_SPI2_Init+0x74>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ca2:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <MX_SPI2_Init+0x74>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001ca8:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <MX_SPI2_Init+0x74>)
 8001caa:	2207      	movs	r2, #7
 8001cac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001cae:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <MX_SPI2_Init+0x74>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001cb4:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <MX_SPI2_Init+0x74>)
 8001cb6:	2208      	movs	r2, #8
 8001cb8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001cba:	4805      	ldr	r0, [pc, #20]	; (8001cd0 <MX_SPI2_Init+0x74>)
 8001cbc:	f003 fbc6 	bl	800544c <HAL_SPI_Init>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001cc6:	f000 f8a3 	bl	8001e10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	200006e8 	.word	0x200006e8
 8001cd4:	40003800 	.word	0x40003800

08001cd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cde:	1d3b      	adds	r3, r7, #4
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cec:	2001      	movs	r0, #1
 8001cee:	f7ff fda5 	bl	800183c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf2:	2002      	movs	r0, #2
 8001cf4:	f7ff fda2 	bl	800183c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf8:	2004      	movs	r0, #4
 8001cfa:	f7ff fd9f 	bl	800183c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PG_Pin|ADC_SW_Pin|FLASH_CS_Pin|MB_OC_Pin
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f44f 61de 	mov.w	r1, #1776	; 0x6f0
 8001d04:	481e      	ldr	r0, [pc, #120]	; (8001d80 <MX_GPIO_Init+0xa8>)
 8001d06:	f001 ff3f 	bl	8003b88 <HAL_GPIO_WritePin>
                          |LED_Pin|EXT_OC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MB_PWR_Pin|EXT_PWR_Pin, GPIO_PIN_RESET);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f240 2101 	movw	r1, #513	; 0x201
 8001d10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d14:	f001 ff38 	bl	8003b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MB_CTL_GPIO_Port, MB_CTL_Pin, GPIO_PIN_RESET);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	2102      	movs	r1, #2
 8001d1c:	4819      	ldr	r0, [pc, #100]	; (8001d84 <MX_GPIO_Init+0xac>)
 8001d1e:	f001 ff33 	bl	8003b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG_Pin ADC_SW_Pin FLASH_CS_Pin MB_OC_Pin
                           LED_Pin EXT_OC_Pin */
  GPIO_InitStruct.Pin = PG_Pin|ADC_SW_Pin|FLASH_CS_Pin|MB_OC_Pin
 8001d22:	f44f 63de 	mov.w	r3, #1776	; 0x6f0
 8001d26:	607b      	str	r3, [r7, #4]
                          |LED_Pin|EXT_OC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d30:	2300      	movs	r3, #0
 8001d32:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d34:	1d3b      	adds	r3, r7, #4
 8001d36:	4619      	mov	r1, r3
 8001d38:	4811      	ldr	r0, [pc, #68]	; (8001d80 <MX_GPIO_Init+0xa8>)
 8001d3a:	f001 fdc5 	bl	80038c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MB_PWR_Pin EXT_PWR_Pin */
  GPIO_InitStruct.Pin = MB_PWR_Pin|EXT_PWR_Pin;
 8001d3e:	f240 2301 	movw	r3, #513	; 0x201
 8001d42:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d44:	2301      	movs	r3, #1
 8001d46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d50:	1d3b      	adds	r3, r7, #4
 8001d52:	4619      	mov	r1, r3
 8001d54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d58:	f001 fdb6 	bl	80038c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MB_CTL_Pin */
  GPIO_InitStruct.Pin = MB_CTL_Pin;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d60:	2301      	movs	r3, #1
 8001d62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d64:	2300      	movs	r3, #0
 8001d66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(MB_CTL_GPIO_Port, &GPIO_InitStruct);
 8001d6c:	1d3b      	adds	r3, r7, #4
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4804      	ldr	r0, [pc, #16]	; (8001d84 <MX_GPIO_Init+0xac>)
 8001d72:	f001 fda9 	bl	80038c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d76:	bf00      	nop
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	48000400 	.word	0x48000400
 8001d84:	48000800 	.word	0x48000800

08001d88 <Get_AdcHandle>:
  osDelay(Delay);
}


ADC_HandleTypeDef *Get_AdcHandle(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return &hadc;
 8001d8c:	4b02      	ldr	r3, [pc, #8]	; (8001d98 <Get_AdcHandle+0x10>)
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	20000508 	.word	0x20000508

08001d9c <Get_DebugHandle>:


UART_HandleTypeDef *Get_DebugHandle(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  return &huart2;
 8001da0:	4b02      	ldr	r3, [pc, #8]	; (8001dac <Get_DebugHandle+0x10>)
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	20000654 	.word	0x20000654

08001db0 <Get_SonarHandle>:

UART_HandleTypeDef *Get_SonarHandle(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  return &hlpuart1;
 8001db4:	4b02      	ldr	r3, [pc, #8]	; (8001dc0 <Get_SonarHandle+0x10>)
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	200005c0 	.word	0x200005c0

08001dc4 <Get_SpiHandle>:



SPI_HandleTypeDef   *Get_SpiHandle(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  return &hspi2;
 8001dc8:	4b02      	ldr	r3, [pc, #8]	; (8001dd4 <Get_SpiHandle+0x10>)
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	200006e8 	.word	0x200006e8

08001dd8 <Get_TerminalQueueHandle>:
{
  return &hi2c2;
}

osMessageQId Get_TerminalQueueHandle(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return xQueue1Handle;;
 8001ddc:	4b02      	ldr	r3, [pc, #8]	; (8001de8 <Get_TerminalQueueHandle+0x10>)
 8001dde:	681b      	ldr	r3, [r3, #0]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr
 8001de8:	20000750 	.word	0x20000750

08001dec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a04      	ldr	r2, [pc, #16]	; (8001e0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d101      	bne.n	8001e02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001dfe:	f000 fb8f 	bl	8002520 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40012c00 	.word	0x40012c00

08001e10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e14:	b672      	cpsid	i
}
 8001e16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e18:	e7fe      	b.n	8001e18 <Error_Handler+0x8>

08001e1a <LL_AHB2_GRP1_EnableClock>:
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b085      	sub	sp, #20
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
}
 8001e40:	bf00      	nop
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr

08001e4a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b085      	sub	sp, #20
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e56:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e66:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
}
 8001e70:	bf00      	nop
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr

08001e7a <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b085      	sub	sp, #20
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ea0:	bf00      	nop
 8001ea2:	3714      	adds	r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bc80      	pop	{r7}
 8001ea8:	4770      	bx	lr

08001eaa <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b085      	sub	sp, #20
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001eb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001eb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001ec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ece:	68fb      	ldr	r3, [r7, #12]
}
 8001ed0:	bf00      	nop
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr

08001eda <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	210f      	movs	r1, #15
 8001ee2:	f06f 0001 	mvn.w	r0, #1
 8001ee6:	f001 fc0a 	bl	80036fe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b088      	sub	sp, #32
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 030c 	add.w	r3, r7, #12
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a0c      	ldr	r2, [pc, #48]	; (8001f40 <HAL_ADC_MspInit+0x50>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d112      	bne.n	8001f38 <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001f12:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f16:	f7ff ffc8 	bl	8001eaa <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f1a:	2002      	movs	r0, #2
 8001f1c:	f7ff ff7d 	bl	8001e1a <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB3     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = ADC_IN_Pin;
 8001f20:	2308      	movs	r3, #8
 8001f22:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f24:	2303      	movs	r3, #3
 8001f26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC_IN_GPIO_Port, &GPIO_InitStruct);
 8001f2c:	f107 030c 	add.w	r3, r7, #12
 8001f30:	4619      	mov	r1, r3
 8001f32:	4804      	ldr	r0, [pc, #16]	; (8001f44 <HAL_ADC_MspInit+0x54>)
 8001f34:	f001 fcc8 	bl	80038c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }

}
 8001f38:	bf00      	nop
 8001f3a:	3720      	adds	r7, #32
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40012400 	.word	0x40012400
 8001f44:	48000400 	.word	0x48000400

08001f48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b096      	sub	sp, #88	; 0x58
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f50:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f60:	f107 030c 	add.w	r3, r7, #12
 8001f64:	2238      	movs	r2, #56	; 0x38
 8001f66:	2100      	movs	r1, #0
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f009 f91f 	bl	800b1ac <memset>
  if(hi2c->Instance==I2C2)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a21      	ldr	r2, [pc, #132]	; (8001ff8 <HAL_I2C_MspInit+0xb0>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d13b      	bne.n	8001ff0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001f78:	2380      	movs	r3, #128	; 0x80
 8001f7a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001f7c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f82:	f107 030c 	add.w	r3, r7, #12
 8001f86:	4618      	mov	r0, r3
 8001f88:	f003 f946 	bl	8005218 <HAL_RCCEx_PeriphCLKConfig>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001f92:	f7ff ff3d 	bl	8001e10 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f96:	2001      	movs	r0, #1
 8001f98:	f7ff ff3f 	bl	8001e1a <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9c:	2002      	movs	r0, #2
 8001f9e:	f7ff ff3c 	bl	8001e1a <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = EXT_SDA_Pin;
 8001fa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fa6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fa8:	2312      	movs	r3, #18
 8001faa:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001fb4:	2304      	movs	r3, #4
 8001fb6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(EXT_SDA_GPIO_Port, &GPIO_InitStruct);
 8001fb8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fc2:	f001 fc81 	bl	80038c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EXT_SCL_Pin;
 8001fc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fca:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fcc:	2312      	movs	r3, #18
 8001fce:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001fd8:	2304      	movs	r3, #4
 8001fda:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(EXT_SCL_GPIO_Port, &GPIO_InitStruct);
 8001fdc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4806      	ldr	r0, [pc, #24]	; (8001ffc <HAL_I2C_MspInit+0xb4>)
 8001fe4:	f001 fc70 	bl	80038c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001fe8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001fec:	f7ff ff2d 	bl	8001e4a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ff0:	bf00      	nop
 8001ff2:	3758      	adds	r7, #88	; 0x58
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40005800 	.word	0x40005800
 8001ffc:	48000400 	.word	0x48000400

08002000 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b096      	sub	sp, #88	; 0x58
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002008:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	60da      	str	r2, [r3, #12]
 8002016:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002018:	f107 030c 	add.w	r3, r7, #12
 800201c:	2238      	movs	r2, #56	; 0x38
 800201e:	2100      	movs	r1, #0
 8002020:	4618      	mov	r0, r3
 8002022:	f009 f8c3 	bl	800b1ac <memset>
  if(huart->Instance==LPUART1)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a30      	ldr	r2, [pc, #192]	; (80020ec <HAL_UART_MspInit+0xec>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d125      	bne.n	800207c <HAL_UART_MspInit+0x7c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002030:	2320      	movs	r3, #32
 8002032:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 8002034:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002038:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800203a:	f107 030c 	add.w	r3, r7, #12
 800203e:	4618      	mov	r0, r3
 8002040:	f003 f8ea 	bl	8005218 <HAL_RCCEx_PeriphCLKConfig>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800204a:	f7ff fee1 	bl	8001e10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800204e:	2001      	movs	r0, #1
 8002050:	f7ff ff13 	bl	8001e7a <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002054:	2004      	movs	r0, #4
 8002056:	f7ff fee0 	bl	8001e1a <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = MB_RX_Pin;
 800205a:	2301      	movs	r3, #1
 800205c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800205e:	2312      	movs	r3, #18
 8002060:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002062:	2301      	movs	r3, #1
 8002064:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002066:	2300      	movs	r3, #0
 8002068:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800206a:	2308      	movs	r3, #8
 800206c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(MB_RX_GPIO_Port, &GPIO_InitStruct);
 800206e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002072:	4619      	mov	r1, r3
 8002074:	481e      	ldr	r0, [pc, #120]	; (80020f0 <HAL_UART_MspInit+0xf0>)
 8002076:	f001 fc27 	bl	80038c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800207a:	e033      	b.n	80020e4 <HAL_UART_MspInit+0xe4>
  else if(huart->Instance==USART2)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a1c      	ldr	r2, [pc, #112]	; (80020f4 <HAL_UART_MspInit+0xf4>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d12e      	bne.n	80020e4 <HAL_UART_MspInit+0xe4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002086:	2302      	movs	r3, #2
 8002088:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800208a:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800208e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002090:	f107 030c 	add.w	r3, r7, #12
 8002094:	4618      	mov	r0, r3
 8002096:	f003 f8bf 	bl	8005218 <HAL_RCCEx_PeriphCLKConfig>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <HAL_UART_MspInit+0xa4>
      Error_Handler();
 80020a0:	f7ff feb6 	bl	8001e10 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80020a4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80020a8:	f7ff fecf 	bl	8001e4a <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ac:	2001      	movs	r0, #1
 80020ae:	f7ff feb4 	bl	8001e1a <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = UART_RX_Pin|UART_TX_Pin;
 80020b2:	230c      	movs	r3, #12
 80020b4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b6:	2302      	movs	r3, #2
 80020b8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020be:	2300      	movs	r3, #0
 80020c0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020c2:	2307      	movs	r3, #7
 80020c4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80020ca:	4619      	mov	r1, r3
 80020cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020d0:	f001 fbfa 	bl	80038c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80020d4:	2200      	movs	r2, #0
 80020d6:	2105      	movs	r1, #5
 80020d8:	2025      	movs	r0, #37	; 0x25
 80020da:	f001 fb10 	bl	80036fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020de:	2025      	movs	r0, #37	; 0x25
 80020e0:	f001 fb27 	bl	8003732 <HAL_NVIC_EnableIRQ>
}
 80020e4:	bf00      	nop
 80020e6:	3758      	adds	r7, #88	; 0x58
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40008000 	.word	0x40008000
 80020f0:	48000800 	.word	0x48000800
 80020f4:	40004400 	.word	0x40004400

080020f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b096      	sub	sp, #88	; 0x58
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002100:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	60da      	str	r2, [r3, #12]
 800210e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002110:	f107 030c 	add.w	r3, r7, #12
 8002114:	2238      	movs	r2, #56	; 0x38
 8002116:	2100      	movs	r1, #0
 8002118:	4618      	mov	r0, r3
 800211a:	f009 f847 	bl	800b1ac <memset>
  if(hspi->Instance==SPI2)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a21      	ldr	r2, [pc, #132]	; (80021a8 <HAL_SPI_MspInit+0xb0>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d13b      	bne.n	80021a0 <HAL_SPI_MspInit+0xa8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 8002128:	2310      	movs	r3, #16
 800212a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 800212c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002130:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002132:	f107 030c 	add.w	r3, r7, #12
 8002136:	4618      	mov	r0, r3
 8002138:	f003 f86e 	bl	8005218 <HAL_RCCEx_PeriphCLKConfig>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002142:	f7ff fe65 	bl	8001e10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002146:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800214a:	f7ff fe7e 	bl	8001e4a <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800214e:	2002      	movs	r0, #2
 8002150:	f7ff fe63 	bl	8001e1a <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002154:	2001      	movs	r0, #1
 8002156:	f7ff fe60 	bl	8001e1a <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PA10     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = MISO_Pin|SCK_Pin;
 800215a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800215e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002160:	2302      	movs	r3, #2
 8002162:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002168:	2300      	movs	r3, #0
 800216a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800216c:	2305      	movs	r3, #5
 800216e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002170:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002174:	4619      	mov	r1, r3
 8002176:	480d      	ldr	r0, [pc, #52]	; (80021ac <HAL_SPI_MspInit+0xb4>)
 8002178:	f001 fba6 	bl	80038c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOSI_Pin;
 800217c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002180:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002182:	2302      	movs	r3, #2
 8002184:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002186:	2300      	movs	r3, #0
 8002188:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218a:	2300      	movs	r3, #0
 800218c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800218e:	2305      	movs	r3, #5
 8002190:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(MOSI_GPIO_Port, &GPIO_InitStruct);
 8002192:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002196:	4619      	mov	r1, r3
 8002198:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800219c:	f001 fb94 	bl	80038c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80021a0:	bf00      	nop
 80021a2:	3758      	adds	r7, #88	; 0x58
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40003800 	.word	0x40003800
 80021ac:	48000400 	.word	0x48000400

080021b0 <LL_APB2_GRP1_EnableClock>:
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80021b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80021c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4013      	ands	r3, r2
 80021d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021d4:	68fb      	ldr	r3, [r7, #12]
}
 80021d6:	bf00      	nop
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr

080021e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08c      	sub	sp, #48	; 0x30
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80021e8:	2300      	movs	r3, #0
 80021ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80021f0:	2300      	movs	r3, #0
 80021f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80021f6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80021fa:	f7ff ffd9 	bl	80021b0 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021fe:	f107 0208 	add.w	r2, r7, #8
 8002202:	f107 030c 	add.w	r3, r7, #12
 8002206:	4611      	mov	r1, r2
 8002208:	4618      	mov	r0, r3
 800220a:	f002 fe21 	bl	8004e50 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800220e:	f002 fe0d 	bl	8004e2c <HAL_RCC_GetPCLK2Freq>
 8002212:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002216:	4a21      	ldr	r2, [pc, #132]	; (800229c <HAL_InitTick+0xbc>)
 8002218:	fba2 2303 	umull	r2, r3, r2, r3
 800221c:	0c9b      	lsrs	r3, r3, #18
 800221e:	3b01      	subs	r3, #1
 8002220:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002222:	4b1f      	ldr	r3, [pc, #124]	; (80022a0 <HAL_InitTick+0xc0>)
 8002224:	4a1f      	ldr	r2, [pc, #124]	; (80022a4 <HAL_InitTick+0xc4>)
 8002226:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002228:	4b1d      	ldr	r3, [pc, #116]	; (80022a0 <HAL_InitTick+0xc0>)
 800222a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800222e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002230:	4a1b      	ldr	r2, [pc, #108]	; (80022a0 <HAL_InitTick+0xc0>)
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002236:	4b1a      	ldr	r3, [pc, #104]	; (80022a0 <HAL_InitTick+0xc0>)
 8002238:	2200      	movs	r2, #0
 800223a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800223c:	4b18      	ldr	r3, [pc, #96]	; (80022a0 <HAL_InitTick+0xc0>)
 800223e:	2200      	movs	r2, #0
 8002240:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8002242:	4817      	ldr	r0, [pc, #92]	; (80022a0 <HAL_InitTick+0xc0>)
 8002244:	f004 f9f0 	bl	8006628 <HAL_TIM_Base_Init>
 8002248:	4603      	mov	r3, r0
 800224a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800224e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002252:	2b00      	cmp	r3, #0
 8002254:	d11b      	bne.n	800228e <HAL_InitTick+0xae>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002256:	4812      	ldr	r0, [pc, #72]	; (80022a0 <HAL_InitTick+0xc0>)
 8002258:	f004 fa46 	bl	80066e8 <HAL_TIM_Base_Start_IT>
 800225c:	4603      	mov	r3, r0
 800225e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002262:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002266:	2b00      	cmp	r3, #0
 8002268:	d111      	bne.n	800228e <HAL_InitTick+0xae>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800226a:	2018      	movs	r0, #24
 800226c:	f001 fa61 	bl	8003732 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b0f      	cmp	r3, #15
 8002274:	d808      	bhi.n	8002288 <HAL_InitTick+0xa8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8002276:	2200      	movs	r2, #0
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	2018      	movs	r0, #24
 800227c:	f001 fa3f 	bl	80036fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002280:	4a09      	ldr	r2, [pc, #36]	; (80022a8 <HAL_InitTick+0xc8>)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	e002      	b.n	800228e <HAL_InitTick+0xae>
      }
      else
      {
        status = HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800228e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002292:	4618      	mov	r0, r3
 8002294:	3730      	adds	r7, #48	; 0x30
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	431bde83 	.word	0x431bde83
 80022a0:	20000760 	.word	0x20000760
 80022a4:	40012c00 	.word	0x40012c00
 80022a8:	20000004 	.word	0x20000004

080022ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022b0:	e7fe      	b.n	80022b0 <NMI_Handler+0x4>

080022b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022b6:	e7fe      	b.n	80022b6 <HardFault_Handler+0x4>

080022b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022bc:	e7fe      	b.n	80022bc <MemManage_Handler+0x4>

080022be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022c2:	e7fe      	b.n	80022c2 <BusFault_Handler+0x4>

080022c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022c8:	e7fe      	b.n	80022c8 <UsageFault_Handler+0x4>

080022ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022ca:	b480      	push	{r7}
 80022cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr
	...

080022d8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update Interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022dc:	4802      	ldr	r0, [pc, #8]	; (80022e8 <TIM1_UP_IRQHandler+0x10>)
 80022de:	f004 fa4f 	bl	8006780 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20000760 	.word	0x20000760

080022ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022f0:	4802      	ldr	r0, [pc, #8]	; (80022fc <USART2_IRQHandler+0x10>)
 80022f2:	f004 fe65 	bl	8006fc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20000654 	.word	0x20000654

08002300 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return 1;
 8002304:	2301      	movs	r3, #1
}
 8002306:	4618      	mov	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr

0800230e <_kill>:

int _kill(int pid, int sig)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b082      	sub	sp, #8
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002318:	f008 ff10 	bl	800b13c <__errno>
 800231c:	4603      	mov	r3, r0
 800231e:	2216      	movs	r2, #22
 8002320:	601a      	str	r2, [r3, #0]
  return -1;
 8002322:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <_exit>:

void _exit (int status)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002336:	f04f 31ff 	mov.w	r1, #4294967295
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7ff ffe7 	bl	800230e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002340:	e7fe      	b.n	8002340 <_exit+0x12>

08002342 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b086      	sub	sp, #24
 8002346:	af00      	add	r7, sp, #0
 8002348:	60f8      	str	r0, [r7, #12]
 800234a:	60b9      	str	r1, [r7, #8]
 800234c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]
 8002352:	e00a      	b.n	800236a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002354:	f3af 8000 	nop.w
 8002358:	4601      	mov	r1, r0
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	1c5a      	adds	r2, r3, #1
 800235e:	60ba      	str	r2, [r7, #8]
 8002360:	b2ca      	uxtb	r2, r1
 8002362:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	3301      	adds	r3, #1
 8002368:	617b      	str	r3, [r7, #20]
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	429a      	cmp	r2, r3
 8002370:	dbf0      	blt.n	8002354 <_read+0x12>
  }

  return len;
 8002372:	687b      	ldr	r3, [r7, #4]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	e009      	b.n	80023a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	1c5a      	adds	r2, r3, #1
 8002392:	60ba      	str	r2, [r7, #8]
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	3301      	adds	r3, #1
 80023a0:	617b      	str	r3, [r7, #20]
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	dbf1      	blt.n	800238e <_write+0x12>
  }
  return len;
 80023aa:	687b      	ldr	r3, [r7, #4]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3718      	adds	r7, #24
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <_close>:

int _close(int file)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr

080023ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b083      	sub	sp, #12
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
 80023d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023da:	605a      	str	r2, [r3, #4]
  return 0;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr

080023e8 <_isatty>:

int _isatty(int file)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023f0:	2301      	movs	r3, #1
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr

080023fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr

08002414 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800241c:	4a14      	ldr	r2, [pc, #80]	; (8002470 <_sbrk+0x5c>)
 800241e:	4b15      	ldr	r3, [pc, #84]	; (8002474 <_sbrk+0x60>)
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002428:	4b13      	ldr	r3, [pc, #76]	; (8002478 <_sbrk+0x64>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d102      	bne.n	8002436 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002430:	4b11      	ldr	r3, [pc, #68]	; (8002478 <_sbrk+0x64>)
 8002432:	4a12      	ldr	r2, [pc, #72]	; (800247c <_sbrk+0x68>)
 8002434:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002436:	4b10      	ldr	r3, [pc, #64]	; (8002478 <_sbrk+0x64>)
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4413      	add	r3, r2
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	429a      	cmp	r2, r3
 8002442:	d207      	bcs.n	8002454 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002444:	f008 fe7a 	bl	800b13c <__errno>
 8002448:	4603      	mov	r3, r0
 800244a:	220c      	movs	r2, #12
 800244c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800244e:	f04f 33ff 	mov.w	r3, #4294967295
 8002452:	e009      	b.n	8002468 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002454:	4b08      	ldr	r3, [pc, #32]	; (8002478 <_sbrk+0x64>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800245a:	4b07      	ldr	r3, [pc, #28]	; (8002478 <_sbrk+0x64>)
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4413      	add	r3, r2
 8002462:	4a05      	ldr	r2, [pc, #20]	; (8002478 <_sbrk+0x64>)
 8002464:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002466:	68fb      	ldr	r3, [r7, #12]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20010000 	.word	0x20010000
 8002474:	00000400 	.word	0x00000400
 8002478:	200007ac 	.word	0x200007ac
 800247c:	20001510 	.word	0x20001510

08002480 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002484:	bf00      	nop
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr

0800248c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800248c:	480d      	ldr	r0, [pc, #52]	; (80024c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800248e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002490:	f7ff fff6 	bl	8002480 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002494:	480c      	ldr	r0, [pc, #48]	; (80024c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002496:	490d      	ldr	r1, [pc, #52]	; (80024cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002498:	4a0d      	ldr	r2, [pc, #52]	; (80024d0 <LoopForever+0xe>)
  movs r3, #0
 800249a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800249c:	e002      	b.n	80024a4 <LoopCopyDataInit>

0800249e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800249e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024a2:	3304      	adds	r3, #4

080024a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024a8:	d3f9      	bcc.n	800249e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024aa:	4a0a      	ldr	r2, [pc, #40]	; (80024d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024ac:	4c0a      	ldr	r4, [pc, #40]	; (80024d8 <LoopForever+0x16>)
  movs r3, #0
 80024ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024b0:	e001      	b.n	80024b6 <LoopFillZerobss>

080024b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024b4:	3204      	adds	r2, #4

080024b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024b8:	d3fb      	bcc.n	80024b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80024ba:	f008 fe45 	bl	800b148 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024be:	f7ff f9d5 	bl	800186c <main>

080024c2 <LoopForever>:

LoopForever:
    b LoopForever
 80024c2:	e7fe      	b.n	80024c2 <LoopForever>
  ldr   r0, =_estack
 80024c4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80024c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024cc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80024d0:	0800df58 	.word	0x0800df58
  ldr r2, =_sbss
 80024d4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80024d8:	20001510 	.word	0x20001510

080024dc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024dc:	e7fe      	b.n	80024dc <ADC_IRQHandler>
	...

080024e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024e6:	2300      	movs	r3, #0
 80024e8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024ea:	2003      	movs	r0, #3
 80024ec:	f001 f8fc 	bl	80036e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80024f0:	f002 fc76 	bl	8004de0 <HAL_RCC_GetHCLKFreq>
 80024f4:	4603      	mov	r3, r0
 80024f6:	4a09      	ldr	r2, [pc, #36]	; (800251c <HAL_Init+0x3c>)
 80024f8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024fa:	200f      	movs	r0, #15
 80024fc:	f7ff fe70 	bl	80021e0 <HAL_InitTick>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d002      	beq.n	800250c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	71fb      	strb	r3, [r7, #7]
 800250a:	e001      	b.n	8002510 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800250c:	f7ff fce5 	bl	8001eda <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002510:	79fb      	ldrb	r3, [r7, #7]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20000000 	.word	0x20000000

08002520 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002524:	4b05      	ldr	r3, [pc, #20]	; (800253c <HAL_IncTick+0x1c>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	461a      	mov	r2, r3
 800252a:	4b05      	ldr	r3, [pc, #20]	; (8002540 <HAL_IncTick+0x20>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4413      	add	r3, r2
 8002530:	4a03      	ldr	r2, [pc, #12]	; (8002540 <HAL_IncTick+0x20>)
 8002532:	6013      	str	r3, [r2, #0]
}
 8002534:	bf00      	nop
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr
 800253c:	20000008 	.word	0x20000008
 8002540:	200007b0 	.word	0x200007b0

08002544 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return uwTick;
 8002548:	4b02      	ldr	r3, [pc, #8]	; (8002554 <HAL_GetTick+0x10>)
 800254a:	681b      	ldr	r3, [r3, #0]
}
 800254c:	4618      	mov	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr
 8002554:	200007b0 	.word	0x200007b0

08002558 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002560:	f7ff fff0 	bl	8002544 <HAL_GetTick>
 8002564:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002570:	d005      	beq.n	800257e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002572:	4b0a      	ldr	r3, [pc, #40]	; (800259c <HAL_Delay+0x44>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	461a      	mov	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4413      	add	r3, r2
 800257c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800257e:	bf00      	nop
 8002580:	f7ff ffe0 	bl	8002544 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	429a      	cmp	r2, r3
 800258e:	d8f7      	bhi.n	8002580 <HAL_Delay+0x28>
  {
  }
}
 8002590:	bf00      	nop
 8002592:	bf00      	nop
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	20000008 	.word	0x20000008

080025a0 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80025a4:	4b02      	ldr	r3, [pc, #8]	; (80025b0 <HAL_GetUIDw0+0x10>)
 80025a6:	681b      	ldr	r3, [r3, #0]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr
 80025b0:	1fff7590 	.word	0x1fff7590

080025b4 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80025b8:	4b02      	ldr	r3, [pc, #8]	; (80025c4 <HAL_GetUIDw1+0x10>)
 80025ba:	681b      	ldr	r3, [r3, #0]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr
 80025c4:	1fff7594 	.word	0x1fff7594

080025c8 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80025cc:	4b02      	ldr	r3, [pc, #8]	; (80025d8 <HAL_GetUIDw2+0x10>)
 80025ce:	681b      	ldr	r3, [r3, #0]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr
 80025d8:	1fff7598 	.word	0x1fff7598

080025dc <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	431a      	orrs	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	601a      	str	r2, [r3, #0]
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr

08002600 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002610:	4618      	mov	r0, r3
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr

0800261a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800261a:	b480      	push	{r7}
 800261c:	b085      	sub	sp, #20
 800261e:	af00      	add	r7, sp, #0
 8002620:	60f8      	str	r0, [r7, #12]
 8002622:	60b9      	str	r1, [r7, #8]
 8002624:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	695a      	ldr	r2, [r3, #20]
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2107      	movs	r1, #7
 8002632:	fa01 f303 	lsl.w	r3, r1, r3
 8002636:	43db      	mvns	r3, r3
 8002638:	401a      	ands	r2, r3
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	6879      	ldr	r1, [r7, #4]
 8002642:	fa01 f303 	lsl.w	r3, r1, r3
 8002646:	431a      	orrs	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800264c:	bf00      	nop
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr

08002656 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	695a      	ldr	r2, [r3, #20]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	f003 0304 	and.w	r3, r3, #4
 800266a:	2107      	movs	r1, #7
 800266c:	fa01 f303 	lsl.w	r3, r1, r3
 8002670:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800267c:	4618      	mov	r0, r3
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr

08002686 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002686:	b480      	push	{r7}
 8002688:	b083      	sub	sp, #12
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bc80      	pop	{r7}
 80026a8:	4770      	bx	lr

080026aa <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b085      	sub	sp, #20
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	60f8      	str	r0, [r7, #12]
 80026b2:	60b9      	str	r1, [r7, #8]
 80026b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	f003 031f 	and.w	r3, r3, #31
 80026c0:	210f      	movs	r1, #15
 80026c2:	fa01 f303 	lsl.w	r3, r1, r3
 80026c6:	43db      	mvns	r3, r3
 80026c8:	401a      	ands	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	0e9b      	lsrs	r3, r3, #26
 80026ce:	f003 010f 	and.w	r1, r3, #15
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	f003 031f 	and.w	r3, r3, #31
 80026d8:	fa01 f303 	lsl.w	r3, r1, r3
 80026dc:	431a      	orrs	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80026e2:	bf00      	nop
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr

080026ec <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002700:	431a      	orrs	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	bc80      	pop	{r7}
 800270e:	4770      	bx	lr

08002710 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002724:	43db      	mvns	r3, r3
 8002726:	401a      	ands	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	bc80      	pop	{r7}
 8002734:	4770      	bx	lr

08002736 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002736:	b480      	push	{r7}
 8002738:	b085      	sub	sp, #20
 800273a:	af00      	add	r7, sp, #0
 800273c:	60f8      	str	r0, [r7, #12]
 800273e:	60b9      	str	r1, [r7, #8]
 8002740:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	695a      	ldr	r2, [r3, #20]
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	021b      	lsls	r3, r3, #8
 800274a:	43db      	mvns	r3, r3
 800274c:	401a      	ands	r2, r3
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	0219      	lsls	r1, r3, #8
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	400b      	ands	r3, r1
 8002756:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 800275a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800275e:	431a      	orrs	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002764:	bf00      	nop
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr

0800276e <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800277e:	f023 0317 	bic.w	r3, r3, #23
 8002782:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr

08002794 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027a8:	d101      	bne.n	80027ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80027aa:	2301      	movs	r3, #1
 80027ac:	e000      	b.n	80027b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr

080027ba <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027ca:	f023 0317 	bic.w	r3, r3, #23
 80027ce:	f043 0201 	orr.w	r2, r3, #1
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr

080027e0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027f0:	f023 0317 	bic.w	r3, r3, #23
 80027f4:	f043 0202 	orr.w	r2, r3, #2
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr

08002806 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b01      	cmp	r3, #1
 8002818:	d101      	bne.n	800281e <LL_ADC_IsEnabled+0x18>
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <LL_ADC_IsEnabled+0x1a>
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	bc80      	pop	{r7}
 8002828:	4770      	bx	lr

0800282a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800282a:	b480      	push	{r7}
 800282c:	b083      	sub	sp, #12
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b02      	cmp	r3, #2
 800283c:	d101      	bne.n	8002842 <LL_ADC_IsDisableOngoing+0x18>
 800283e:	2301      	movs	r3, #1
 8002840:	e000      	b.n	8002844 <LL_ADC_IsDisableOngoing+0x1a>
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr

0800284e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800285e:	f023 0317 	bic.w	r3, r3, #23
 8002862:	f043 0204 	orr.w	r2, r3, #4
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr

08002874 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002884:	f023 0317 	bic.w	r3, r3, #23
 8002888:	f043 0210 	orr.w	r2, r3, #16
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	bc80      	pop	{r7}
 8002898:	4770      	bx	lr

0800289a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 0304 	and.w	r3, r3, #4
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	d101      	bne.n	80028b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80028ae:	2301      	movs	r3, #1
 80028b0:	e000      	b.n	80028b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr
	...

080028c0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b088      	sub	sp, #32
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028c8:	2300      	movs	r3, #0
 80028ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 80028cc:	2300      	movs	r3, #0
 80028ce:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e17e      	b.n	8002be0 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d109      	bne.n	8002904 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f7ff fafd 	bl	8001ef0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff ff43 	bl	8002794 <LL_ADC_IsInternalRegulatorEnabled>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d115      	bne.n	8002940 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff ff28 	bl	800276e <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800291e:	4b9e      	ldr	r3, [pc, #632]	; (8002b98 <HAL_ADC_Init+0x2d8>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	099b      	lsrs	r3, r3, #6
 8002924:	4a9d      	ldr	r2, [pc, #628]	; (8002b9c <HAL_ADC_Init+0x2dc>)
 8002926:	fba2 2303 	umull	r2, r3, r2, r3
 800292a:	099b      	lsrs	r3, r3, #6
 800292c:	3301      	adds	r3, #1
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002932:	e002      	b.n	800293a <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	3b01      	subs	r3, #1
 8002938:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1f9      	bne.n	8002934 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff ff25 	bl	8002794 <LL_ADC_IsInternalRegulatorEnabled>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10d      	bne.n	800296c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002954:	f043 0210 	orr.w	r2, r3, #16
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002960:	f043 0201 	orr.w	r2, r3, #1
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff ff92 	bl	800289a <LL_ADC_REG_IsConversionOngoing>
 8002976:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297c:	f003 0310 	and.w	r3, r3, #16
 8002980:	2b00      	cmp	r3, #0
 8002982:	f040 8124 	bne.w	8002bce <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	2b00      	cmp	r3, #0
 800298a:	f040 8120 	bne.w	8002bce <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002992:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002996:	f043 0202 	orr.w	r2, r3, #2
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff ff2f 	bl	8002806 <LL_ADC_IsEnabled>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f040 80a7 	bne.w	8002afe <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	7e1b      	ldrb	r3, [r3, #24]
 80029b8:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80029ba:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	7e5b      	ldrb	r3, [r3, #25]
 80029c0:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80029c2:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	7e9b      	ldrb	r3, [r3, #26]
 80029c8:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80029ca:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80029d0:	2a00      	cmp	r2, #0
 80029d2:	d002      	beq.n	80029da <HAL_ADC_Init+0x11a>
 80029d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029d8:	e000      	b.n	80029dc <HAL_ADC_Init+0x11c>
 80029da:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80029dc:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80029e2:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	da04      	bge.n	80029f6 <HAL_ADC_Init+0x136>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029f4:	e001      	b.n	80029fa <HAL_ADC_Init+0x13a>
 80029f6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 80029fa:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002a02:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002a04:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d114      	bne.n	8002a40 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	7e9b      	ldrb	r3, [r3, #26]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d104      	bne.n	8002a28 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a24:	61bb      	str	r3, [r7, #24]
 8002a26:	e00b      	b.n	8002a40 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2c:	f043 0220 	orr.w	r2, r3, #32
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a38:	f043 0201 	orr.w	r2, r3, #1
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d009      	beq.n	8002a5c <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002a54:	4313      	orrs	r3, r2
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8002a66:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	6812      	ldr	r2, [r2, #0]
 8002a6e:	69b9      	ldr	r1, [r7, #24]
 8002a70:	430b      	orrs	r3, r1
 8002a72:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002a80:	4313      	orrs	r3, r2
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d111      	bne.n	8002ab6 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002a9e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002aa4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002aaa:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	f043 0301 	orr.w	r3, r3, #1
 8002ab4:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	691a      	ldr	r2, [r3, #16]
 8002abc:	4b38      	ldr	r3, [pc, #224]	; (8002ba0 <HAL_ADC_Init+0x2e0>)
 8002abe:	4013      	ands	r3, r2
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	6812      	ldr	r2, [r2, #0]
 8002ac4:	6979      	ldr	r1, [r7, #20]
 8002ac6:	430b      	orrs	r3, r1
 8002ac8:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002ad2:	d014      	beq.n	8002afe <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002adc:	d00f      	beq.n	8002afe <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002ae2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ae6:	d00a      	beq.n	8002afe <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002ae8:	4b2e      	ldr	r3, [pc, #184]	; (8002ba4 <HAL_ADC_Init+0x2e4>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002af8:	492a      	ldr	r1, [pc, #168]	; (8002ba4 <HAL_ADC_Init+0x2e4>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6818      	ldr	r0, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b06:	461a      	mov	r2, r3
 8002b08:	2100      	movs	r1, #0
 8002b0a:	f7ff fd86 	bl	800261a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6818      	ldr	r0, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b16:	461a      	mov	r2, r3
 8002b18:	4923      	ldr	r1, [pc, #140]	; (8002ba8 <HAL_ADC_Init+0x2e8>)
 8002b1a:	f7ff fd7e 	bl	800261a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d108      	bne.n	8002b38 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f062 020f 	orn	r2, r2, #15
 8002b34:	629a      	str	r2, [r3, #40]	; 0x28
 8002b36:	e017      	b.n	8002b68 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b40:	d112      	bne.n	8002b68 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	f003 031c 	and.w	r3, r3, #28
 8002b54:	f06f 020f 	mvn.w	r2, #15
 8002b58:	fa02 f103 	lsl.w	r1, r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fd71 	bl	8002656 <LL_ADC_GetSamplingTimeCommonChannels>
 8002b74:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d116      	bne.n	8002bac <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b88:	f023 0303 	bic.w	r3, r3, #3
 8002b8c:	f043 0201 	orr.w	r2, r3, #1
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002b94:	e023      	b.n	8002bde <HAL_ADC_Init+0x31e>
 8002b96:	bf00      	nop
 8002b98:	20000000 	.word	0x20000000
 8002b9c:	053e2d63 	.word	0x053e2d63
 8002ba0:	1ffffc02 	.word	0x1ffffc02
 8002ba4:	40012708 	.word	0x40012708
 8002ba8:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb0:	f023 0312 	bic.w	r3, r3, #18
 8002bb4:	f043 0210 	orr.w	r2, r3, #16
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc0:	f043 0201 	orr.w	r2, r3, #1
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002bcc:	e007      	b.n	8002bde <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd2:	f043 0210 	orr.w	r2, r3, #16
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8002bde:	7ffb      	ldrb	r3, [r7, #31]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3720      	adds	r7, #32
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff fe50 	bl	800289a <LL_ADC_REG_IsConversionOngoing>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d132      	bne.n	8002c66 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d101      	bne.n	8002c0e <HAL_ADC_Start+0x26>
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	e02e      	b.n	8002c6c <HAL_ADC_Start+0x84>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 fa8a 	bl	8003130 <ADC_Enable>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002c20:	7bfb      	ldrb	r3, [r7, #15]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d11a      	bne.n	8002c5c <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c2e:	f023 0301 	bic.w	r3, r3, #1
 8002c32:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	221c      	movs	r2, #28
 8002c46:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff fdfa 	bl	800284e <LL_ADC_REG_StartConversion>
 8002c5a:	e006      	b.n	8002c6a <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002c64:	e001      	b.n	8002c6a <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c66:	2302      	movs	r3, #2
 8002c68:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d101      	bne.n	8002c8a <HAL_ADC_Stop+0x16>
 8002c86:	2302      	movs	r3, #2
 8002c88:	e022      	b.n	8002cd0 <HAL_ADC_Stop+0x5c>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 fa07 	bl	80030a6 <ADC_ConversionStop>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d111      	bne.n	8002cc6 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 faca 	bl	800323c <ADC_Disable>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d109      	bne.n	8002cc6 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cba:	f023 0301 	bic.w	r3, r3, #1
 8002cbe:	f043 0201 	orr.w	r2, r3, #1
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	2b08      	cmp	r3, #8
 8002ce8:	d102      	bne.n	8002cf0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8002cea:	2308      	movs	r3, #8
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	e010      	b.n	8002d12 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d007      	beq.n	8002d0e <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d02:	f043 0220 	orr.w	r2, r3, #32
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e077      	b.n	8002dfe <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002d0e:	2304      	movs	r3, #4
 8002d10:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002d12:	f7ff fc17 	bl	8002544 <HAL_GetTick>
 8002d16:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002d18:	e021      	b.n	8002d5e <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d20:	d01d      	beq.n	8002d5e <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002d22:	f7ff fc0f 	bl	8002544 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d302      	bcc.n	8002d38 <HAL_ADC_PollForConversion+0x60>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d112      	bne.n	8002d5e <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	4013      	ands	r3, r2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10b      	bne.n	8002d5e <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d4a:	f043 0204 	orr.w	r2, r3, #4
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e04f      	b.n	8002dfe <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4013      	ands	r3, r2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0d6      	beq.n	8002d1a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d70:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff fc82 	bl	8002686 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d031      	beq.n	8002dec <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	7e9b      	ldrb	r3, [r3, #26]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d12d      	bne.n	8002dec <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0308 	and.w	r3, r3, #8
 8002d9a:	2b08      	cmp	r3, #8
 8002d9c:	d126      	bne.n	8002dec <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff fd79 	bl	800289a <LL_ADC_REG_IsConversionOngoing>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d112      	bne.n	8002dd4 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 020c 	bic.w	r2, r2, #12
 8002dbc:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dc6:	f023 0301 	bic.w	r3, r3, #1
 8002dca:	f043 0201 	orr.w	r2, r3, #1
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	659a      	str	r2, [r3, #88]	; 0x58
 8002dd2:	e00b      	b.n	8002dec <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd8:	f043 0220 	orr.w	r2, r3, #32
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de4:	f043 0201 	orr.w	r2, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	7e1b      	ldrb	r3, [r3, #24]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d103      	bne.n	8002dfc <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	220c      	movs	r2, #12
 8002dfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bc80      	pop	{r7}
 8002e1c:	4770      	bx	lr
	...

08002e20 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b088      	sub	sp, #32
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <HAL_ADC_ConfigChannel+0x28>
 8002e44:	2302      	movs	r3, #2
 8002e46:	e110      	b.n	800306a <HAL_ADC_ConfigChannel+0x24a>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff fd20 	bl	800289a <LL_ADC_REG_IsConversionOngoing>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f040 80f7 	bne.w	8003050 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	f000 80b1 	beq.w	8002fce <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e74:	d004      	beq.n	8002e80 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002e7a:	4a7e      	ldr	r2, [pc, #504]	; (8003074 <HAL_ADC_ConfigChannel+0x254>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d108      	bne.n	8002e92 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	f7ff fc2e 	bl	80026ec <LL_ADC_REG_SetSequencerChAdd>
 8002e90:	e041      	b.n	8002f16 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f003 031f 	and.w	r3, r3, #31
 8002e9e:	210f      	movs	r1, #15
 8002ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	401a      	ands	r2, r3
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d105      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0xa0>
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	0e9b      	lsrs	r3, r3, #26
 8002eba:	f003 031f 	and.w	r3, r3, #31
 8002ebe:	e011      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0xc4>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	fa93 f3a3 	rbit	r3, r3
 8002ecc:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8002ed8:	2320      	movs	r3, #32
 8002eda:	e003      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	fab3 f383 	clz	r3, r3
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	6839      	ldr	r1, [r7, #0]
 8002ee6:	6849      	ldr	r1, [r1, #4]
 8002ee8:	f001 011f 	and.w	r1, r1, #31
 8002eec:	408b      	lsls	r3, r1
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	089b      	lsrs	r3, r3, #2
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d808      	bhi.n	8002f16 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6818      	ldr	r0, [r3, #0]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	6859      	ldr	r1, [r3, #4]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	461a      	mov	r2, r3
 8002f12:	f7ff fbca 	bl	80026aa <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6818      	ldr	r0, [r3, #0]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	6819      	ldr	r1, [r3, #0]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	461a      	mov	r2, r3
 8002f24:	f7ff fc07 	bl	8002736 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f280 8097 	bge.w	8003060 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f32:	4851      	ldr	r0, [pc, #324]	; (8003078 <HAL_ADC_ConfigChannel+0x258>)
 8002f34:	f7ff fb64 	bl	8002600 <LL_ADC_GetCommonPathInternalCh>
 8002f38:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a4f      	ldr	r2, [pc, #316]	; (800307c <HAL_ADC_ConfigChannel+0x25c>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d120      	bne.n	8002f86 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d11b      	bne.n	8002f86 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f54:	4619      	mov	r1, r3
 8002f56:	4848      	ldr	r0, [pc, #288]	; (8003078 <HAL_ADC_ConfigChannel+0x258>)
 8002f58:	f7ff fb40 	bl	80025dc <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f5c:	4b48      	ldr	r3, [pc, #288]	; (8003080 <HAL_ADC_ConfigChannel+0x260>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	099b      	lsrs	r3, r3, #6
 8002f62:	4a48      	ldr	r2, [pc, #288]	; (8003084 <HAL_ADC_ConfigChannel+0x264>)
 8002f64:	fba2 2303 	umull	r2, r3, r2, r3
 8002f68:	099b      	lsrs	r3, r3, #6
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	4413      	add	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002f76:	e002      	b.n	8002f7e <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1f9      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002f84:	e06c      	b.n	8003060 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a3f      	ldr	r2, [pc, #252]	; (8003088 <HAL_ADC_ConfigChannel+0x268>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d10c      	bne.n	8002faa <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d107      	bne.n	8002faa <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4835      	ldr	r0, [pc, #212]	; (8003078 <HAL_ADC_ConfigChannel+0x258>)
 8002fa4:	f7ff fb1a 	bl	80025dc <LL_ADC_SetCommonPathInternalCh>
 8002fa8:	e05a      	b.n	8003060 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a37      	ldr	r2, [pc, #220]	; (800308c <HAL_ADC_ConfigChannel+0x26c>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d155      	bne.n	8003060 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d150      	bne.n	8003060 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	482c      	ldr	r0, [pc, #176]	; (8003078 <HAL_ADC_ConfigChannel+0x258>)
 8002fc8:	f7ff fb08 	bl	80025dc <LL_ADC_SetCommonPathInternalCh>
 8002fcc:	e048      	b.n	8003060 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fd6:	d004      	beq.n	8002fe2 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002fdc:	4a25      	ldr	r2, [pc, #148]	; (8003074 <HAL_ADC_ConfigChannel+0x254>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d107      	bne.n	8002ff2 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4619      	mov	r1, r3
 8002fec:	4610      	mov	r0, r2
 8002fee:	f7ff fb8f 	bl	8002710 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	da32      	bge.n	8003060 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ffa:	481f      	ldr	r0, [pc, #124]	; (8003078 <HAL_ADC_ConfigChannel+0x258>)
 8002ffc:	f7ff fb00 	bl	8002600 <LL_ADC_GetCommonPathInternalCh>
 8003000:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a1d      	ldr	r2, [pc, #116]	; (800307c <HAL_ADC_ConfigChannel+0x25c>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d107      	bne.n	800301c <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003012:	4619      	mov	r1, r3
 8003014:	4818      	ldr	r0, [pc, #96]	; (8003078 <HAL_ADC_ConfigChannel+0x258>)
 8003016:	f7ff fae1 	bl	80025dc <LL_ADC_SetCommonPathInternalCh>
 800301a:	e021      	b.n	8003060 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a19      	ldr	r2, [pc, #100]	; (8003088 <HAL_ADC_ConfigChannel+0x268>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d107      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800302c:	4619      	mov	r1, r3
 800302e:	4812      	ldr	r0, [pc, #72]	; (8003078 <HAL_ADC_ConfigChannel+0x258>)
 8003030:	f7ff fad4 	bl	80025dc <LL_ADC_SetCommonPathInternalCh>
 8003034:	e014      	b.n	8003060 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a14      	ldr	r2, [pc, #80]	; (800308c <HAL_ADC_ConfigChannel+0x26c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d10f      	bne.n	8003060 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003046:	4619      	mov	r1, r3
 8003048:	480b      	ldr	r0, [pc, #44]	; (8003078 <HAL_ADC_ConfigChannel+0x258>)
 800304a:	f7ff fac7 	bl	80025dc <LL_ADC_SetCommonPathInternalCh>
 800304e:	e007      	b.n	8003060 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003054:	f043 0220 	orr.w	r2, r3, #32
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003068:	7ffb      	ldrb	r3, [r7, #31]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3720      	adds	r7, #32
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	80000004 	.word	0x80000004
 8003078:	40012708 	.word	0x40012708
 800307c:	b0001000 	.word	0xb0001000
 8003080:	20000000 	.word	0x20000000
 8003084:	053e2d63 	.word	0x053e2d63
 8003088:	b8004000 	.word	0xb8004000
 800308c:	b4002000 	.word	0xb4002000

08003090 <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800309c:	4618      	mov	r0, r3
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bc80      	pop	{r7}
 80030a4:	4770      	bx	lr

080030a6 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b084      	sub	sp, #16
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff fbf1 	bl	800289a <LL_ADC_REG_IsConversionOngoing>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d033      	beq.n	8003126 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff fbb1 	bl	800282a <LL_ADC_IsDisableOngoing>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d104      	bne.n	80030d8 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff fbce 	bl	8002874 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80030d8:	f7ff fa34 	bl	8002544 <HAL_GetTick>
 80030dc:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80030de:	e01b      	b.n	8003118 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80030e0:	f7ff fa30 	bl	8002544 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d914      	bls.n	8003118 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00d      	beq.n	8003118 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003100:	f043 0210 	orr.w	r2, r3, #16
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310c:	f043 0201 	orr.w	r2, r3, #1
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e007      	b.n	8003128 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f003 0304 	and.w	r3, r3, #4
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1dc      	bne.n	80030e0 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003138:	2300      	movs	r3, #0
 800313a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff fb60 	bl	8002806 <LL_ADC_IsEnabled>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d169      	bne.n	8003220 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689a      	ldr	r2, [r3, #8]
 8003152:	4b36      	ldr	r3, [pc, #216]	; (800322c <ADC_Enable+0xfc>)
 8003154:	4013      	ands	r3, r2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00d      	beq.n	8003176 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315e:	f043 0210 	orr.w	r2, r3, #16
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800316a:	f043 0201 	orr.w	r2, r3, #1
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e055      	b.n	8003222 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff fb1d 	bl	80027ba <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8003180:	482b      	ldr	r0, [pc, #172]	; (8003230 <ADC_Enable+0x100>)
 8003182:	f7ff fa3d 	bl	8002600 <LL_ADC_GetCommonPathInternalCh>
 8003186:	4603      	mov	r3, r0
 8003188:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00f      	beq.n	80031b0 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003190:	4b28      	ldr	r3, [pc, #160]	; (8003234 <ADC_Enable+0x104>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	099b      	lsrs	r3, r3, #6
 8003196:	4a28      	ldr	r2, [pc, #160]	; (8003238 <ADC_Enable+0x108>)
 8003198:	fba2 2303 	umull	r2, r3, r2, r3
 800319c:	099b      	lsrs	r3, r3, #6
 800319e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80031a0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80031a2:	e002      	b.n	80031aa <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	3b01      	subs	r3, #1
 80031a8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1f9      	bne.n	80031a4 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	7e5b      	ldrb	r3, [r3, #25]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d033      	beq.n	8003220 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80031b8:	f7ff f9c4 	bl	8002544 <HAL_GetTick>
 80031bc:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031be:	e028      	b.n	8003212 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff fb1e 	bl	8002806 <LL_ADC_IsEnabled>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d104      	bne.n	80031da <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff faf0 	bl	80027ba <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031da:	f7ff f9b3 	bl	8002544 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d914      	bls.n	8003212 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d00d      	beq.n	8003212 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fa:	f043 0210 	orr.w	r2, r3, #16
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003206:	f043 0201 	orr.w	r2, r3, #1
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e007      	b.n	8003222 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b01      	cmp	r3, #1
 800321e:	d1cf      	bne.n	80031c0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	80000017 	.word	0x80000017
 8003230:	40012708 	.word	0x40012708
 8003234:	20000000 	.word	0x20000000
 8003238:	053e2d63 	.word	0x053e2d63

0800323c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff faee 	bl	800282a <LL_ADC_IsDisableOngoing>
 800324e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff fad6 	bl	8002806 <LL_ADC_IsEnabled>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d047      	beq.n	80032f0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d144      	bne.n	80032f0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 0305 	and.w	r3, r3, #5
 8003270:	2b01      	cmp	r3, #1
 8003272:	d10c      	bne.n	800328e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff fab1 	bl	80027e0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2203      	movs	r2, #3
 8003284:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003286:	f7ff f95d 	bl	8002544 <HAL_GetTick>
 800328a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800328c:	e029      	b.n	80032e2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003292:	f043 0210 	orr.w	r2, r3, #16
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329e:	f043 0201 	orr.w	r2, r3, #1
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e023      	b.n	80032f2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80032aa:	f7ff f94b 	bl	8002544 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d914      	bls.n	80032e2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00d      	beq.n	80032e2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ca:	f043 0210 	orr.w	r2, r3, #16
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d6:	f043 0201 	orr.w	r2, r3, #1
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e007      	b.n	80032f2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1dc      	bne.n	80032aa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <LL_ADC_SetCalibrationFactor>:
{
 80032fa:	b480      	push	{r7}
 80032fc:	b083      	sub	sp, #12
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
 8003302:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800330a:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	431a      	orrs	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	bc80      	pop	{r7}
 8003320:	4770      	bx	lr

08003322 <LL_ADC_GetCalibrationFactor>:
{
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003330:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003334:	4618      	mov	r0, r3
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	bc80      	pop	{r7}
 800333c:	4770      	bx	lr

0800333e <LL_ADC_Enable>:
{
 800333e:	b480      	push	{r7}
 8003340:	b083      	sub	sp, #12
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800334e:	f023 0317 	bic.w	r3, r3, #23
 8003352:	f043 0201 	orr.w	r2, r3, #1
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	609a      	str	r2, [r3, #8]
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	bc80      	pop	{r7}
 8003362:	4770      	bx	lr

08003364 <LL_ADC_Disable>:
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003374:	f023 0317 	bic.w	r3, r3, #23
 8003378:	f043 0202 	orr.w	r2, r3, #2
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	609a      	str	r2, [r3, #8]
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	bc80      	pop	{r7}
 8003388:	4770      	bx	lr

0800338a <LL_ADC_IsEnabled>:
{
 800338a:	b480      	push	{r7}
 800338c:	b083      	sub	sp, #12
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b01      	cmp	r3, #1
 800339c:	d101      	bne.n	80033a2 <LL_ADC_IsEnabled+0x18>
 800339e:	2301      	movs	r3, #1
 80033a0:	e000      	b.n	80033a4 <LL_ADC_IsEnabled+0x1a>
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bc80      	pop	{r7}
 80033ac:	4770      	bx	lr

080033ae <LL_ADC_StartCalibration>:
{
 80033ae:	b480      	push	{r7}
 80033b0:	b083      	sub	sp, #12
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80033be:	f023 0317 	bic.w	r3, r3, #23
 80033c2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	609a      	str	r2, [r3, #8]
}
 80033ca:	bf00      	nop
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr

080033d4 <LL_ADC_IsCalibrationOnGoing>:
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033e8:	d101      	bne.n	80033ee <LL_ADC_IsCalibrationOnGoing+0x1a>
 80033ea:	2301      	movs	r3, #1
 80033ec:	e000      	b.n	80033f0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bc80      	pop	{r7}
 80033f8:	4770      	bx	lr

080033fa <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b088      	sub	sp, #32
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003402:	2300      	movs	r3, #0
 8003404:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8003406:	2300      	movs	r3, #0
 8003408:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003410:	2b01      	cmp	r3, #1
 8003412:	d101      	bne.n	8003418 <HAL_ADCEx_Calibration_Start+0x1e>
 8003414:	2302      	movs	r3, #2
 8003416:	e0b9      	b.n	800358c <HAL_ADCEx_Calibration_Start+0x192>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f7ff ff0b 	bl	800323c <ADC_Disable>
 8003426:	4603      	mov	r3, r0
 8003428:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff ffab 	bl	800338a <LL_ADC_IsEnabled>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	f040 809d 	bne.w	8003576 <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003440:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003444:	f043 0202 	orr.w	r2, r3, #2
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68da      	ldr	r2, [r3, #12]
 8003452:	f248 0303 	movw	r3, #32771	; 0x8003
 8003456:	4013      	ands	r3, r2
 8003458:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6812      	ldr	r2, [r2, #0]
 8003464:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003468:	f023 0303 	bic.w	r3, r3, #3
 800346c:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800346e:	2300      	movs	r3, #0
 8003470:	61fb      	str	r3, [r7, #28]
 8003472:	e02e      	b.n	80034d2 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f7ff ff98 	bl	80033ae <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800347e:	e014      	b.n	80034aa <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	3301      	adds	r3, #1
 8003484:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 800348c:	d30d      	bcc.n	80034aa <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003492:	f023 0312 	bic.w	r3, r3, #18
 8003496:	f043 0210 	orr.w	r2, r3, #16
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e070      	b.n	800358c <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff ff90 	bl	80033d4 <LL_ADC_IsCalibrationOnGoing>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1e2      	bne.n	8003480 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4618      	mov	r0, r3
 80034c0:	f7ff ff2f 	bl	8003322 <LL_ADC_GetCalibrationFactor>
 80034c4:	4602      	mov	r2, r0
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	4413      	add	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	3301      	adds	r3, #1
 80034d0:	61fb      	str	r3, [r7, #28]
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	2b07      	cmp	r3, #7
 80034d6:	d9cd      	bls.n	8003474 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e0:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7ff ff29 	bl	800333e <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	69b9      	ldr	r1, [r7, #24]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7ff ff01 	bl	80032fa <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff ff31 	bl	8003364 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003502:	f7ff f81f 	bl	8002544 <HAL_GetTick>
 8003506:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003508:	e01c      	b.n	8003544 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800350a:	f7ff f81b 	bl	8002544 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d915      	bls.n	8003544 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff ff34 	bl	800338a <LL_ADC_IsEnabled>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00d      	beq.n	8003544 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352c:	f043 0210 	orr.w	r2, r3, #16
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003538:	f043 0201 	orr.w	r2, r3, #1
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e023      	b.n	800358c <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff ff1e 	bl	800338a <LL_ADC_IsEnabled>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1da      	bne.n	800350a <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68d9      	ldr	r1, [r3, #12]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	430a      	orrs	r2, r1
 8003562:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003568:	f023 0303 	bic.w	r3, r3, #3
 800356c:	f043 0201 	orr.w	r2, r3, #1
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	659a      	str	r2, [r3, #88]	; 0x58
 8003574:	e005      	b.n	8003582 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357a:	f043 0210 	orr.w	r2, r3, #16
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800358a:	7dfb      	ldrb	r3, [r7, #23]
}
 800358c:	4618      	mov	r0, r3
 800358e:	3720      	adds	r7, #32
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035a4:	4b0c      	ldr	r3, [pc, #48]	; (80035d8 <__NVIC_SetPriorityGrouping+0x44>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035b0:	4013      	ands	r3, r2
 80035b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035c6:	4a04      	ldr	r2, [pc, #16]	; (80035d8 <__NVIC_SetPriorityGrouping+0x44>)
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	60d3      	str	r3, [r2, #12]
}
 80035cc:	bf00      	nop
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bc80      	pop	{r7}
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	e000ed00 	.word	0xe000ed00

080035dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035e0:	4b04      	ldr	r3, [pc, #16]	; (80035f4 <__NVIC_GetPriorityGrouping+0x18>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	0a1b      	lsrs	r3, r3, #8
 80035e6:	f003 0307 	and.w	r3, r3, #7
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bc80      	pop	{r7}
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	e000ed00 	.word	0xe000ed00

080035f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	4603      	mov	r3, r0
 8003600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003606:	2b00      	cmp	r3, #0
 8003608:	db0b      	blt.n	8003622 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	f003 021f 	and.w	r2, r3, #31
 8003610:	4906      	ldr	r1, [pc, #24]	; (800362c <__NVIC_EnableIRQ+0x34>)
 8003612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003616:	095b      	lsrs	r3, r3, #5
 8003618:	2001      	movs	r0, #1
 800361a:	fa00 f202 	lsl.w	r2, r0, r2
 800361e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	bc80      	pop	{r7}
 800362a:	4770      	bx	lr
 800362c:	e000e100 	.word	0xe000e100

08003630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	4603      	mov	r3, r0
 8003638:	6039      	str	r1, [r7, #0]
 800363a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800363c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003640:	2b00      	cmp	r3, #0
 8003642:	db0a      	blt.n	800365a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	b2da      	uxtb	r2, r3
 8003648:	490c      	ldr	r1, [pc, #48]	; (800367c <__NVIC_SetPriority+0x4c>)
 800364a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800364e:	0112      	lsls	r2, r2, #4
 8003650:	b2d2      	uxtb	r2, r2
 8003652:	440b      	add	r3, r1
 8003654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003658:	e00a      	b.n	8003670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	b2da      	uxtb	r2, r3
 800365e:	4908      	ldr	r1, [pc, #32]	; (8003680 <__NVIC_SetPriority+0x50>)
 8003660:	79fb      	ldrb	r3, [r7, #7]
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	3b04      	subs	r3, #4
 8003668:	0112      	lsls	r2, r2, #4
 800366a:	b2d2      	uxtb	r2, r2
 800366c:	440b      	add	r3, r1
 800366e:	761a      	strb	r2, [r3, #24]
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	bc80      	pop	{r7}
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	e000e100 	.word	0xe000e100
 8003680:	e000ed00 	.word	0xe000ed00

08003684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003684:	b480      	push	{r7}
 8003686:	b089      	sub	sp, #36	; 0x24
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	f1c3 0307 	rsb	r3, r3, #7
 800369e:	2b04      	cmp	r3, #4
 80036a0:	bf28      	it	cs
 80036a2:	2304      	movcs	r3, #4
 80036a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	3304      	adds	r3, #4
 80036aa:	2b06      	cmp	r3, #6
 80036ac:	d902      	bls.n	80036b4 <NVIC_EncodePriority+0x30>
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	3b03      	subs	r3, #3
 80036b2:	e000      	b.n	80036b6 <NVIC_EncodePriority+0x32>
 80036b4:	2300      	movs	r3, #0
 80036b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036b8:	f04f 32ff 	mov.w	r2, #4294967295
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	43da      	mvns	r2, r3
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	401a      	ands	r2, r3
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036cc:	f04f 31ff 	mov.w	r1, #4294967295
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	fa01 f303 	lsl.w	r3, r1, r3
 80036d6:	43d9      	mvns	r1, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036dc:	4313      	orrs	r3, r2
         );
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3724      	adds	r7, #36	; 0x24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bc80      	pop	{r7}
 80036e6:	4770      	bx	lr

080036e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f7ff ff4f 	bl	8003594 <__NVIC_SetPriorityGrouping>
}
 80036f6:	bf00      	nop
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b086      	sub	sp, #24
 8003702:	af00      	add	r7, sp, #0
 8003704:	4603      	mov	r3, r0
 8003706:	60b9      	str	r1, [r7, #8]
 8003708:	607a      	str	r2, [r7, #4]
 800370a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800370c:	f7ff ff66 	bl	80035dc <__NVIC_GetPriorityGrouping>
 8003710:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	68b9      	ldr	r1, [r7, #8]
 8003716:	6978      	ldr	r0, [r7, #20]
 8003718:	f7ff ffb4 	bl	8003684 <NVIC_EncodePriority>
 800371c:	4602      	mov	r2, r0
 800371e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003722:	4611      	mov	r1, r2
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff ff83 	bl	8003630 <__NVIC_SetPriority>
}
 800372a:	bf00      	nop
 800372c:	3718      	adds	r7, #24
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b082      	sub	sp, #8
 8003736:	af00      	add	r7, sp, #0
 8003738:	4603      	mov	r3, r0
 800373a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800373c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff ff59 	bl	80035f8 <__NVIC_EnableIRQ>
}
 8003746:	bf00      	nop
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d101      	bne.n	8003760 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e04f      	b.n	8003800 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d008      	beq.n	800377e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2204      	movs	r2, #4
 8003770:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e040      	b.n	8003800 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 020e 	bic.w	r2, r2, #14
 800378c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003798:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800379c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0201 	bic.w	r2, r2, #1
 80037ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b2:	f003 021c 	and.w	r2, r3, #28
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	2101      	movs	r1, #1
 80037bc:	fa01 f202 	lsl.w	r2, r1, r2
 80037c0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80037ca:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00c      	beq.n	80037ee <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037e2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80037ec:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	bc80      	pop	{r7}
 8003808:	4770      	bx	lr

0800380a <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b084      	sub	sp, #16
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003812:	2300      	movs	r3, #0
 8003814:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d005      	beq.n	800382e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2204      	movs	r2, #4
 8003826:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	73fb      	strb	r3, [r7, #15]
 800382c:	e047      	b.n	80038be <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 020e 	bic.w	r2, r2, #14
 800383c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0201 	bic.w	r2, r2, #1
 800384c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003858:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800385c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003862:	f003 021c 	and.w	r2, r3, #28
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	2101      	movs	r1, #1
 800386c:	fa01 f202 	lsl.w	r2, r1, r2
 8003870:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800387a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00c      	beq.n	800389e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003892:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800389c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	4798      	blx	r3
    }
  }
  return status;
 80038be:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b087      	sub	sp, #28
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038d2:	2300      	movs	r3, #0
 80038d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038d6:	e140      	b.n	8003b5a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	2101      	movs	r1, #1
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	fa01 f303 	lsl.w	r3, r1, r3
 80038e4:	4013      	ands	r3, r2
 80038e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f000 8132 	beq.w	8003b54 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f003 0303 	and.w	r3, r3, #3
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d005      	beq.n	8003908 <HAL_GPIO_Init+0x40>
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f003 0303 	and.w	r3, r3, #3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d130      	bne.n	800396a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	2203      	movs	r2, #3
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	43db      	mvns	r3, r3
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	4013      	ands	r3, r2
 800391e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	68da      	ldr	r2, [r3, #12]
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	4313      	orrs	r3, r2
 8003930:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800393e:	2201      	movs	r2, #1
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	43db      	mvns	r3, r3
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	4013      	ands	r3, r2
 800394c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	091b      	lsrs	r3, r3, #4
 8003954:	f003 0201 	and.w	r2, r3, #1
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	fa02 f303 	lsl.w	r3, r2, r3
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	4313      	orrs	r3, r2
 8003962:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f003 0303 	and.w	r3, r3, #3
 8003972:	2b03      	cmp	r3, #3
 8003974:	d017      	beq.n	80039a6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	2203      	movs	r2, #3
 8003982:	fa02 f303 	lsl.w	r3, r2, r3
 8003986:	43db      	mvns	r3, r3
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	4013      	ands	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	689a      	ldr	r2, [r3, #8]
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	fa02 f303 	lsl.w	r3, r2, r3
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	4313      	orrs	r3, r2
 800399e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d123      	bne.n	80039fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	08da      	lsrs	r2, r3, #3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	3208      	adds	r2, #8
 80039ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f003 0307 	and.w	r3, r3, #7
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	220f      	movs	r2, #15
 80039ca:	fa02 f303 	lsl.w	r3, r2, r3
 80039ce:	43db      	mvns	r3, r3
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	4013      	ands	r3, r2
 80039d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	691a      	ldr	r2, [r3, #16]
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	fa02 f303 	lsl.w	r3, r2, r3
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	08da      	lsrs	r2, r3, #3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3208      	adds	r2, #8
 80039f4:	6939      	ldr	r1, [r7, #16]
 80039f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	2203      	movs	r2, #3
 8003a06:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0a:	43db      	mvns	r3, r3
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f003 0203 	and.w	r2, r3, #3
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 808c 	beq.w	8003b54 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003a3c:	4a4e      	ldr	r2, [pc, #312]	; (8003b78 <HAL_GPIO_Init+0x2b0>)
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	089b      	lsrs	r3, r3, #2
 8003a42:	3302      	adds	r3, #2
 8003a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f003 0303 	and.w	r3, r3, #3
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	2207      	movs	r2, #7
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003a66:	d00d      	beq.n	8003a84 <HAL_GPIO_Init+0x1bc>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a44      	ldr	r2, [pc, #272]	; (8003b7c <HAL_GPIO_Init+0x2b4>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d007      	beq.n	8003a80 <HAL_GPIO_Init+0x1b8>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a43      	ldr	r2, [pc, #268]	; (8003b80 <HAL_GPIO_Init+0x2b8>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d101      	bne.n	8003a7c <HAL_GPIO_Init+0x1b4>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	e004      	b.n	8003a86 <HAL_GPIO_Init+0x1be>
 8003a7c:	2307      	movs	r3, #7
 8003a7e:	e002      	b.n	8003a86 <HAL_GPIO_Init+0x1be>
 8003a80:	2301      	movs	r3, #1
 8003a82:	e000      	b.n	8003a86 <HAL_GPIO_Init+0x1be>
 8003a84:	2300      	movs	r3, #0
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	f002 0203 	and.w	r2, r2, #3
 8003a8c:	0092      	lsls	r2, r2, #2
 8003a8e:	4093      	lsls	r3, r2
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a96:	4938      	ldr	r1, [pc, #224]	; (8003b78 <HAL_GPIO_Init+0x2b0>)
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	089b      	lsrs	r3, r3, #2
 8003a9c:	3302      	adds	r3, #2
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003aa4:	4b37      	ldr	r3, [pc, #220]	; (8003b84 <HAL_GPIO_Init+0x2bc>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	43db      	mvns	r3, r3
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ac8:	4a2e      	ldr	r2, [pc, #184]	; (8003b84 <HAL_GPIO_Init+0x2bc>)
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003ace:	4b2d      	ldr	r3, [pc, #180]	; (8003b84 <HAL_GPIO_Init+0x2bc>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	43db      	mvns	r3, r3
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	4013      	ands	r3, r2
 8003adc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003af2:	4a24      	ldr	r2, [pc, #144]	; (8003b84 <HAL_GPIO_Init+0x2bc>)
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8003af8:	4b22      	ldr	r3, [pc, #136]	; (8003b84 <HAL_GPIO_Init+0x2bc>)
 8003afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003afe:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	43db      	mvns	r3, r3
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	4013      	ands	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8003b1e:	4a19      	ldr	r2, [pc, #100]	; (8003b84 <HAL_GPIO_Init+0x2bc>)
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8003b26:	4b17      	ldr	r3, [pc, #92]	; (8003b84 <HAL_GPIO_Init+0x2bc>)
 8003b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b2c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	43db      	mvns	r3, r3
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	4013      	ands	r3, r2
 8003b36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d003      	beq.n	8003b4c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8003b4c:	4a0d      	ldr	r2, [pc, #52]	; (8003b84 <HAL_GPIO_Init+0x2bc>)
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	3301      	adds	r3, #1
 8003b58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	fa22 f303 	lsr.w	r3, r2, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f47f aeb7 	bne.w	80038d8 <HAL_GPIO_Init+0x10>
  }
}
 8003b6a:	bf00      	nop
 8003b6c:	bf00      	nop
 8003b6e:	371c      	adds	r7, #28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bc80      	pop	{r7}
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	40010000 	.word	0x40010000
 8003b7c:	48000400 	.word	0x48000400
 8003b80:	48000800 	.word	0x48000800
 8003b84:	58000800 	.word	0x58000800

08003b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	460b      	mov	r3, r1
 8003b92:	807b      	strh	r3, [r7, #2]
 8003b94:	4613      	mov	r3, r2
 8003b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b98:	787b      	ldrb	r3, [r7, #1]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b9e:	887a      	ldrh	r2, [r7, #2]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ba4:	e002      	b.n	8003bac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ba6:	887a      	ldrh	r2, [r7, #2]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bc80      	pop	{r7}
 8003bb4:	4770      	bx	lr

08003bb6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b082      	sub	sp, #8
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d101      	bne.n	8003bc8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e081      	b.n	8003ccc <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d106      	bne.n	8003be2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7fe f9b3 	bl	8001f48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2224      	movs	r2, #36	; 0x24
 8003be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 0201 	bic.w	r2, r2, #1
 8003bf8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c06:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689a      	ldr	r2, [r3, #8]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c16:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d107      	bne.n	8003c30 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c2c:	609a      	str	r2, [r3, #8]
 8003c2e:	e006      	b.n	8003c3e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003c3c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d104      	bne.n	8003c50 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c4e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6812      	ldr	r2, [r2, #0]
 8003c5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c62:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c72:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691a      	ldr	r2, [r3, #16]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69d9      	ldr	r1, [r3, #28]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a1a      	ldr	r2, [r3, #32]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 0201 	orr.w	r2, r2, #1
 8003cac:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b20      	cmp	r3, #32
 8003ce8:	d138      	bne.n	8003d5c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d101      	bne.n	8003cf8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	e032      	b.n	8003d5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2224      	movs	r2, #36	; 0x24
 8003d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 0201 	bic.w	r2, r2, #1
 8003d16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d26:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6819      	ldr	r1, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0201 	orr.w	r2, r2, #1
 8003d46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	e000      	b.n	8003d5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d5c:	2302      	movs	r3, #2
  }
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bc80      	pop	{r7}
 8003d66:	4770      	bx	lr

08003d68 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b20      	cmp	r3, #32
 8003d7c:	d139      	bne.n	8003df2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d101      	bne.n	8003d8c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d88:	2302      	movs	r3, #2
 8003d8a:	e033      	b.n	8003df4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2224      	movs	r2, #36	; 0x24
 8003d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0201 	bic.w	r2, r2, #1
 8003daa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003dba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	021b      	lsls	r3, r3, #8
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f042 0201 	orr.w	r2, r2, #1
 8003ddc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2220      	movs	r2, #32
 8003de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dee:	2300      	movs	r3, #0
 8003df0:	e000      	b.n	8003df4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003df2:	2302      	movs	r3, #2
  }
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bc80      	pop	{r7}
 8003dfc:	4770      	bx	lr
	...

08003e00 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e04:	4b04      	ldr	r3, [pc, #16]	; (8003e18 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a03      	ldr	r2, [pc, #12]	; (8003e18 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e0e:	6013      	str	r3, [r2, #0]
}
 8003e10:	bf00      	nop
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bc80      	pop	{r7}
 8003e16:	4770      	bx	lr
 8003e18:	58000400 	.word	0x58000400

08003e1c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003e20:	4b03      	ldr	r3, [pc, #12]	; (8003e30 <HAL_PWREx_GetVoltageRange+0x14>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bc80      	pop	{r7}
 8003e2e:	4770      	bx	lr
 8003e30:	58000400 	.word	0x58000400

08003e34 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8003e38:	4b06      	ldr	r3, [pc, #24]	; (8003e54 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e44:	d101      	bne.n	8003e4a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8003e46:	2301      	movs	r3, #1
 8003e48:	e000      	b.n	8003e4c <LL_PWR_IsEnabledBkUpAccess+0x18>
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bc80      	pop	{r7}
 8003e52:	4770      	bx	lr
 8003e54:	58000400 	.word	0x58000400

08003e58 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e6a:	6013      	str	r3, [r2, #0]
}
 8003e6c:	bf00      	nop
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bc80      	pop	{r7}
 8003e72:	4770      	bx	lr

08003e74 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e86:	6013      	str	r3, [r2, #0]
}
 8003e88:	bf00      	nop
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bc80      	pop	{r7}
 8003e8e:	4770      	bx	lr

08003e90 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ea2:	d101      	bne.n	8003ea8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e000      	b.n	8003eaa <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bc80      	pop	{r7}
 8003eb0:	4770      	bx	lr

08003eb2 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec4:	6013      	str	r3, [r2, #0]
}
 8003ec6:	bf00      	nop
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bc80      	pop	{r7}
 8003ecc:	4770      	bx	lr

08003ece <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003ed2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003edc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ee0:	6013      	str	r3, [r2, #0]
}
 8003ee2:	bf00      	nop
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bc80      	pop	{r7}
 8003ee8:	4770      	bx	lr

08003eea <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8003eea:	b480      	push	{r7}
 8003eec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003efc:	d101      	bne.n	8003f02 <LL_RCC_HSE_IsReady+0x18>
 8003efe:	2301      	movs	r3, #1
 8003f00:	e000      	b.n	8003f04 <LL_RCC_HSE_IsReady+0x1a>
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr

08003f0c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f1e:	6013      	str	r3, [r2, #0]
}
 8003f20:	bf00      	nop
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bc80      	pop	{r7}
 8003f26:	4770      	bx	lr

08003f28 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f3a:	6013      	str	r3, [r2, #0]
}
 8003f3c:	bf00      	nop
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bc80      	pop	{r7}
 8003f42:	4770      	bx	lr

08003f44 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f56:	d101      	bne.n	8003f5c <LL_RCC_HSI_IsReady+0x18>
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e000      	b.n	8003f5e <LL_RCC_HSI_IsReady+0x1a>
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bc80      	pop	{r7}
 8003f64:	4770      	bx	lr

08003f66 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	061b      	lsls	r3, r3, #24
 8003f7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f80:	4313      	orrs	r3, r2
 8003f82:	604b      	str	r3, [r1, #4]
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bc80      	pop	{r7}
 8003f8c:	4770      	bx	lr

08003f8e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d101      	bne.n	8003fa6 <LL_RCC_LSE_IsReady+0x18>
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e000      	b.n	8003fa8 <LL_RCC_LSE_IsReady+0x1a>
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bc80      	pop	{r7}
 8003fae:	4770      	bx	lr

08003fb0 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8003fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fc0:	f043 0301 	orr.w	r3, r3, #1
 8003fc4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003fc8:	bf00      	nop
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bc80      	pop	{r7}
 8003fce:	4770      	bx	lr

08003fd0 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fe0:	f023 0301 	bic.w	r3, r3, #1
 8003fe4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003fe8:	bf00      	nop
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bc80      	pop	{r7}
 8003fee:	4770      	bx	lr

08003ff0 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8003ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ff8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b02      	cmp	r3, #2
 8004002:	d101      	bne.n	8004008 <LL_RCC_LSI_IsReady+0x18>
 8004004:	2301      	movs	r3, #1
 8004006:	e000      	b.n	800400a <LL_RCC_LSI_IsReady+0x1a>
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	46bd      	mov	sp, r7
 800400e:	bc80      	pop	{r7}
 8004010:	4770      	bx	lr

08004012 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8004012:	b480      	push	{r7}
 8004014:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004020:	f043 0301 	orr.w	r3, r3, #1
 8004024:	6013      	str	r3, [r2, #0]
}
 8004026:	bf00      	nop
 8004028:	46bd      	mov	sp, r7
 800402a:	bc80      	pop	{r7}
 800402c:	4770      	bx	lr

0800402e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800402e:	b480      	push	{r7}
 8004030:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800403c:	f023 0301 	bic.w	r3, r3, #1
 8004040:	6013      	str	r3, [r2, #0]
}
 8004042:	bf00      	nop
 8004044:	46bd      	mov	sp, r7
 8004046:	bc80      	pop	{r7}
 8004048:	4770      	bx	lr

0800404a <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800404a:	b480      	push	{r7}
 800404c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800404e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b02      	cmp	r3, #2
 800405a:	d101      	bne.n	8004060 <LL_RCC_MSI_IsReady+0x16>
 800405c:	2301      	movs	r3, #1
 800405e:	e000      	b.n	8004062 <LL_RCC_MSI_IsReady+0x18>
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	46bd      	mov	sp, r7
 8004066:	bc80      	pop	{r7}
 8004068:	4770      	bx	lr

0800406a <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800406a:	b480      	push	{r7}
 800406c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800406e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0308 	and.w	r3, r3, #8
 8004078:	2b08      	cmp	r3, #8
 800407a:	d101      	bne.n	8004080 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800407c:	2301      	movs	r3, #1
 800407e:	e000      	b.n	8004082 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	46bd      	mov	sp, r7
 8004086:	bc80      	pop	{r7}
 8004088:	4770      	bx	lr

0800408a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800408a:	b480      	push	{r7}
 800408c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800408e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004098:	4618      	mov	r0, r3
 800409a:	46bd      	mov	sp, r7
 800409c:	bc80      	pop	{r7}
 800409e:	4770      	bx	lr

080040a0 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80040a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bc80      	pop	{r7}
 80040b6:	4770      	bx	lr

080040b8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80040c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	021b      	lsls	r3, r3, #8
 80040ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040d2:	4313      	orrs	r3, r2
 80040d4:	604b      	str	r3, [r1, #4]
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	bc80      	pop	{r7}
 80040de:	4770      	bx	lr

080040e0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80040e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f023 0203 	bic.w	r2, r3, #3
 80040f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	608b      	str	r3, [r1, #8]
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	bc80      	pop	{r7}
 8004104:	4770      	bx	lr

08004106 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004106:	b480      	push	{r7}
 8004108:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800410a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f003 030c 	and.w	r3, r3, #12
}
 8004114:	4618      	mov	r0, r3
 8004116:	46bd      	mov	sp, r7
 8004118:	bc80      	pop	{r7}
 800411a:	4770      	bx	lr

0800411c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800412e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4313      	orrs	r3, r2
 8004136:	608b      	str	r3, [r1, #8]
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	bc80      	pop	{r7}
 8004140:	4770      	bx	lr

08004142 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800414a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800414e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004152:	f023 020f 	bic.w	r2, r3, #15
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	091b      	lsrs	r3, r3, #4
 800415a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800415e:	4313      	orrs	r3, r2
 8004160:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	bc80      	pop	{r7}
 800416c:	4770      	bx	lr

0800416e <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800416e:	b480      	push	{r7}
 8004170:	b083      	sub	sp, #12
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004180:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4313      	orrs	r3, r2
 8004188:	608b      	str	r3, [r1, #8]
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	bc80      	pop	{r7}
 8004192:	4770      	bx	lr

08004194 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800419c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	608b      	str	r3, [r1, #8]
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bc80      	pop	{r7}
 80041b8:	4770      	bx	lr

080041ba <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80041ba:	b480      	push	{r7}
 80041bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80041be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bc80      	pop	{r7}
 80041ce:	4770      	bx	lr

080041d0 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80041d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bc80      	pop	{r7}
 80041e8:	4770      	bx	lr

080041ea <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80041ea:	b480      	push	{r7}
 80041ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80041ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bc80      	pop	{r7}
 80041fe:	4770      	bx	lr

08004200 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800420e:	4618      	mov	r0, r3
 8004210:	46bd      	mov	sp, r7
 8004212:	bc80      	pop	{r7}
 8004214:	4770      	bx	lr

08004216 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004216:	b480      	push	{r7}
 8004218:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800421a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004224:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004228:	6013      	str	r3, [r2, #0]
}
 800422a:	bf00      	nop
 800422c:	46bd      	mov	sp, r7
 800422e:	bc80      	pop	{r7}
 8004230:	4770      	bx	lr

08004232 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004232:	b480      	push	{r7}
 8004234:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004240:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004244:	6013      	str	r3, [r2, #0]
}
 8004246:	bf00      	nop
 8004248:	46bd      	mov	sp, r7
 800424a:	bc80      	pop	{r7}
 800424c:	4770      	bx	lr

0800424e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800424e:	b480      	push	{r7}
 8004250:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004260:	d101      	bne.n	8004266 <LL_RCC_PLL_IsReady+0x18>
 8004262:	2301      	movs	r3, #1
 8004264:	e000      	b.n	8004268 <LL_RCC_PLL_IsReady+0x1a>
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	46bd      	mov	sp, r7
 800426c:	bc80      	pop	{r7}
 800426e:	4770      	bx	lr

08004270 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	0a1b      	lsrs	r3, r3, #8
 800427c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004280:	4618      	mov	r0, r3
 8004282:	46bd      	mov	sp, r7
 8004284:	bc80      	pop	{r7}
 8004286:	4770      	bx	lr

08004288 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800428c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004296:	4618      	mov	r0, r3
 8004298:	46bd      	mov	sp, r7
 800429a:	bc80      	pop	{r7}
 800429c:	4770      	bx	lr

0800429e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800429e:	b480      	push	{r7}
 80042a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80042a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bc80      	pop	{r7}
 80042b2:	4770      	bx	lr

080042b4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80042b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f003 0303 	and.w	r3, r3, #3
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bc80      	pop	{r7}
 80042c8:	4770      	bx	lr

080042ca <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80042ca:	b480      	push	{r7}
 80042cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80042ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042dc:	d101      	bne.n	80042e2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80042de:	2301      	movs	r3, #1
 80042e0:	e000      	b.n	80042e4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bc80      	pop	{r7}
 80042ea:	4770      	bx	lr

080042ec <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80042f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80042f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004300:	d101      	bne.n	8004306 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004302:	2301      	movs	r3, #1
 8004304:	e000      	b.n	8004308 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	46bd      	mov	sp, r7
 800430c:	bc80      	pop	{r7}
 800430e:	4770      	bx	lr

08004310 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004322:	d101      	bne.n	8004328 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004324:	2301      	movs	r3, #1
 8004326:	e000      	b.n	800432a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	46bd      	mov	sp, r7
 800432e:	bc80      	pop	{r7}
 8004330:	4770      	bx	lr

08004332 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004332:	b480      	push	{r7}
 8004334:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004340:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004344:	d101      	bne.n	800434a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004346:	2301      	movs	r3, #1
 8004348:	e000      	b.n	800434c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	46bd      	mov	sp, r7
 8004350:	bc80      	pop	{r7}
 8004352:	4770      	bx	lr

08004354 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b088      	sub	sp, #32
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e36f      	b.n	8004a46 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004366:	f7ff fece 	bl	8004106 <LL_RCC_GetSysClkSource>
 800436a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800436c:	f7ff ffa2 	bl	80042b4 <LL_RCC_PLL_GetMainSource>
 8004370:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0320 	and.w	r3, r3, #32
 800437a:	2b00      	cmp	r3, #0
 800437c:	f000 80c4 	beq.w	8004508 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d005      	beq.n	8004392 <HAL_RCC_OscConfig+0x3e>
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	2b0c      	cmp	r3, #12
 800438a:	d176      	bne.n	800447a <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d173      	bne.n	800447a <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e353      	b.n	8004a46 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0308 	and.w	r3, r3, #8
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d005      	beq.n	80043bc <HAL_RCC_OscConfig+0x68>
 80043b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043ba:	e006      	b.n	80043ca <HAL_RCC_OscConfig+0x76>
 80043bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043c4:	091b      	lsrs	r3, r3, #4
 80043c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d222      	bcs.n	8004414 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 fd7a 	bl	8004ecc <RCC_SetFlashLatencyFromMSIRange>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e331      	b.n	8004a46 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043ec:	f043 0308 	orr.w	r3, r3, #8
 80043f0:	6013      	str	r3, [r2, #0]
 80043f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004400:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004404:	4313      	orrs	r3, r2
 8004406:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	4618      	mov	r0, r3
 800440e:	f7ff fe53 	bl	80040b8 <LL_RCC_MSI_SetCalibTrimming>
 8004412:	e021      	b.n	8004458 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800441e:	f043 0308 	orr.w	r3, r3, #8
 8004422:	6013      	str	r3, [r2, #0]
 8004424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004432:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004436:	4313      	orrs	r3, r2
 8004438:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	4618      	mov	r0, r3
 8004440:	f7ff fe3a 	bl	80040b8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004448:	4618      	mov	r0, r3
 800444a:	f000 fd3f 	bl	8004ecc <RCC_SetFlashLatencyFromMSIRange>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e2f6      	b.n	8004a46 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004458:	f000 fcc2 	bl	8004de0 <HAL_RCC_GetHCLKFreq>
 800445c:	4603      	mov	r3, r0
 800445e:	4aa7      	ldr	r2, [pc, #668]	; (80046fc <HAL_RCC_OscConfig+0x3a8>)
 8004460:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8004462:	4ba7      	ldr	r3, [pc, #668]	; (8004700 <HAL_RCC_OscConfig+0x3ac>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4618      	mov	r0, r3
 8004468:	f7fd feba 	bl	80021e0 <HAL_InitTick>
 800446c:	4603      	mov	r3, r0
 800446e:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8004470:	7cfb      	ldrb	r3, [r7, #19]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d047      	beq.n	8004506 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8004476:	7cfb      	ldrb	r3, [r7, #19]
 8004478:	e2e5      	b.n	8004a46 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d02c      	beq.n	80044dc <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004482:	f7ff fdc6 	bl	8004012 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004486:	f7fe f85d 	bl	8002544 <HAL_GetTick>
 800448a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800448c:	e008      	b.n	80044a0 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800448e:	f7fe f859 	bl	8002544 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b02      	cmp	r3, #2
 800449a:	d901      	bls.n	80044a0 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e2d2      	b.n	8004a46 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80044a0:	f7ff fdd3 	bl	800404a <LL_RCC_MSI_IsReady>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0f1      	beq.n	800448e <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044b4:	f043 0308 	orr.w	r3, r3, #8
 80044b8:	6013      	str	r3, [r2, #0]
 80044ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044cc:	4313      	orrs	r3, r2
 80044ce:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7ff fdef 	bl	80040b8 <LL_RCC_MSI_SetCalibTrimming>
 80044da:	e015      	b.n	8004508 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80044dc:	f7ff fda7 	bl	800402e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044e0:	f7fe f830 	bl	8002544 <HAL_GetTick>
 80044e4:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80044e6:	e008      	b.n	80044fa <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044e8:	f7fe f82c 	bl	8002544 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e2a5      	b.n	8004a46 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80044fa:	f7ff fda6 	bl	800404a <LL_RCC_MSI_IsReady>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1f1      	bne.n	80044e8 <HAL_RCC_OscConfig+0x194>
 8004504:	e000      	b.n	8004508 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004506:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b00      	cmp	r3, #0
 8004512:	d058      	beq.n	80045c6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	2b08      	cmp	r3, #8
 8004518:	d005      	beq.n	8004526 <HAL_RCC_OscConfig+0x1d2>
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	2b0c      	cmp	r3, #12
 800451e:	d108      	bne.n	8004532 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	2b03      	cmp	r3, #3
 8004524:	d105      	bne.n	8004532 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d14b      	bne.n	80045c6 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e289      	b.n	8004a46 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8004532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004544:	4313      	orrs	r3, r2
 8004546:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004550:	d102      	bne.n	8004558 <HAL_RCC_OscConfig+0x204>
 8004552:	f7ff fcae 	bl	8003eb2 <LL_RCC_HSE_Enable>
 8004556:	e00d      	b.n	8004574 <HAL_RCC_OscConfig+0x220>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8004560:	d104      	bne.n	800456c <HAL_RCC_OscConfig+0x218>
 8004562:	f7ff fc79 	bl	8003e58 <LL_RCC_HSE_EnableTcxo>
 8004566:	f7ff fca4 	bl	8003eb2 <LL_RCC_HSE_Enable>
 800456a:	e003      	b.n	8004574 <HAL_RCC_OscConfig+0x220>
 800456c:	f7ff fcaf 	bl	8003ece <LL_RCC_HSE_Disable>
 8004570:	f7ff fc80 	bl	8003e74 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d012      	beq.n	80045a2 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457c:	f7fd ffe2 	bl	8002544 <HAL_GetTick>
 8004580:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004584:	f7fd ffde 	bl	8002544 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b64      	cmp	r3, #100	; 0x64
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e257      	b.n	8004a46 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004596:	f7ff fca8 	bl	8003eea <LL_RCC_HSE_IsReady>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0f1      	beq.n	8004584 <HAL_RCC_OscConfig+0x230>
 80045a0:	e011      	b.n	80045c6 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a2:	f7fd ffcf 	bl	8002544 <HAL_GetTick>
 80045a6:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80045a8:	e008      	b.n	80045bc <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045aa:	f7fd ffcb 	bl	8002544 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b64      	cmp	r3, #100	; 0x64
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e244      	b.n	8004a46 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80045bc:	f7ff fc95 	bl	8003eea <LL_RCC_HSE_IsReady>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1f1      	bne.n	80045aa <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d046      	beq.n	8004660 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	2b04      	cmp	r3, #4
 80045d6:	d005      	beq.n	80045e4 <HAL_RCC_OscConfig+0x290>
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	2b0c      	cmp	r3, #12
 80045dc:	d10e      	bne.n	80045fc <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d10b      	bne.n	80045fc <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d101      	bne.n	80045f0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e22a      	b.n	8004a46 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7ff fcb6 	bl	8003f66 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80045fa:	e031      	b.n	8004660 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d019      	beq.n	8004638 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004604:	f7ff fc82 	bl	8003f0c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004608:	f7fd ff9c 	bl	8002544 <HAL_GetTick>
 800460c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004610:	f7fd ff98 	bl	8002544 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e211      	b.n	8004a46 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004622:	f7ff fc8f 	bl	8003f44 <LL_RCC_HSI_IsReady>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d0f1      	beq.n	8004610 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	4618      	mov	r0, r3
 8004632:	f7ff fc98 	bl	8003f66 <LL_RCC_HSI_SetCalibTrimming>
 8004636:	e013      	b.n	8004660 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004638:	f7ff fc76 	bl	8003f28 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463c:	f7fd ff82 	bl	8002544 <HAL_GetTick>
 8004640:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004644:	f7fd ff7e 	bl	8002544 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e1f7      	b.n	8004a46 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004656:	f7ff fc75 	bl	8003f44 <LL_RCC_HSI_IsReady>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1f1      	bne.n	8004644 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0308 	and.w	r3, r3, #8
 8004668:	2b00      	cmp	r3, #0
 800466a:	d06e      	beq.n	800474a <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d056      	beq.n	8004722 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8004674:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004678:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800467c:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	69da      	ldr	r2, [r3, #28]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f003 0310 	and.w	r3, r3, #16
 8004688:	429a      	cmp	r2, r3
 800468a:	d031      	beq.n	80046f0 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d006      	beq.n	80046a4 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e1d0      	b.n	8004a46 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d013      	beq.n	80046d6 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80046ae:	f7ff fc8f 	bl	8003fd0 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80046b2:	f7fd ff47 	bl	8002544 <HAL_GetTick>
 80046b6:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80046b8:	e008      	b.n	80046cc <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ba:	f7fd ff43 	bl	8002544 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b11      	cmp	r3, #17
 80046c6:	d901      	bls.n	80046cc <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e1bc      	b.n	8004a46 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80046cc:	f7ff fc90 	bl	8003ff0 <LL_RCC_LSI_IsReady>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1f1      	bne.n	80046ba <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80046d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046de:	f023 0210 	bic.w	r2, r3, #16
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046ea:	4313      	orrs	r3, r2
 80046ec:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046f0:	f7ff fc5e 	bl	8003fb0 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046f4:	f7fd ff26 	bl	8002544 <HAL_GetTick>
 80046f8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80046fa:	e00c      	b.n	8004716 <HAL_RCC_OscConfig+0x3c2>
 80046fc:	20000000 	.word	0x20000000
 8004700:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004704:	f7fd ff1e 	bl	8002544 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b11      	cmp	r3, #17
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e197      	b.n	8004a46 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8004716:	f7ff fc6b 	bl	8003ff0 <LL_RCC_LSI_IsReady>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d0f1      	beq.n	8004704 <HAL_RCC_OscConfig+0x3b0>
 8004720:	e013      	b.n	800474a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004722:	f7ff fc55 	bl	8003fd0 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004726:	f7fd ff0d 	bl	8002544 <HAL_GetTick>
 800472a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800472c:	e008      	b.n	8004740 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800472e:	f7fd ff09 	bl	8002544 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b11      	cmp	r3, #17
 800473a:	d901      	bls.n	8004740 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e182      	b.n	8004a46 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8004740:	f7ff fc56 	bl	8003ff0 <LL_RCC_LSI_IsReady>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1f1      	bne.n	800472e <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0304 	and.w	r3, r3, #4
 8004752:	2b00      	cmp	r3, #0
 8004754:	f000 80d8 	beq.w	8004908 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004758:	f7ff fb6c 	bl	8003e34 <LL_PWR_IsEnabledBkUpAccess>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d113      	bne.n	800478a <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004762:	f7ff fb4d 	bl	8003e00 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004766:	f7fd feed 	bl	8002544 <HAL_GetTick>
 800476a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800476c:	e008      	b.n	8004780 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800476e:	f7fd fee9 	bl	8002544 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d901      	bls.n	8004780 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e162      	b.n	8004a46 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004780:	f7ff fb58 	bl	8003e34 <LL_PWR_IsEnabledBkUpAccess>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0f1      	beq.n	800476e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d07b      	beq.n	800488a <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	2b85      	cmp	r3, #133	; 0x85
 8004798:	d003      	beq.n	80047a2 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	2b05      	cmp	r3, #5
 80047a0:	d109      	bne.n	80047b6 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80047a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047ae:	f043 0304 	orr.w	r3, r3, #4
 80047b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047b6:	f7fd fec5 	bl	8002544 <HAL_GetTick>
 80047ba:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80047bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047c8:	f043 0301 	orr.w	r3, r3, #1
 80047cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80047d0:	e00a      	b.n	80047e8 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d2:	f7fd feb7 	bl	8002544 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e12e      	b.n	8004a46 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80047e8:	f7ff fbd1 	bl	8003f8e <LL_RCC_LSE_IsReady>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0ef      	beq.n	80047d2 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	2b81      	cmp	r3, #129	; 0x81
 80047f8:	d003      	beq.n	8004802 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	2b85      	cmp	r3, #133	; 0x85
 8004800:	d121      	bne.n	8004846 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004802:	f7fd fe9f 	bl	8002544 <HAL_GetTick>
 8004806:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800480c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004810:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004818:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800481c:	e00a      	b.n	8004834 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800481e:	f7fd fe91 	bl	8002544 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	f241 3288 	movw	r2, #5000	; 0x1388
 800482c:	4293      	cmp	r3, r2
 800482e:	d901      	bls.n	8004834 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e108      	b.n	8004a46 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004840:	2b00      	cmp	r3, #0
 8004842:	d0ec      	beq.n	800481e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004844:	e060      	b.n	8004908 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004846:	f7fd fe7d 	bl	8002544 <HAL_GetTick>
 800484a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800484c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004854:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004858:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800485c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004860:	e00a      	b.n	8004878 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004862:	f7fd fe6f 	bl	8002544 <HAL_GetTick>
 8004866:	4602      	mov	r2, r0
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004870:	4293      	cmp	r3, r2
 8004872:	d901      	bls.n	8004878 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e0e6      	b.n	8004a46 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800487c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1ec      	bne.n	8004862 <HAL_RCC_OscConfig+0x50e>
 8004888:	e03e      	b.n	8004908 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800488a:	f7fd fe5b 	bl	8002544 <HAL_GetTick>
 800488e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004898:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800489c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80048a4:	e00a      	b.n	80048bc <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048a6:	f7fd fe4d 	bl	8002544 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d901      	bls.n	80048bc <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e0c4      	b.n	8004a46 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80048bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1ec      	bne.n	80048a6 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048cc:	f7fd fe3a 	bl	8002544 <HAL_GetTick>
 80048d0:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80048d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048de:	f023 0301 	bic.w	r3, r3, #1
 80048e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80048e6:	e00a      	b.n	80048fe <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048e8:	f7fd fe2c 	bl	8002544 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e0a3      	b.n	8004a46 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80048fe:	f7ff fb46 	bl	8003f8e <LL_RCC_LSE_IsReady>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1ef      	bne.n	80048e8 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 8099 	beq.w	8004a44 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	2b0c      	cmp	r3, #12
 8004916:	d06c      	beq.n	80049f2 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491c:	2b02      	cmp	r3, #2
 800491e:	d14b      	bne.n	80049b8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004920:	f7ff fc87 	bl	8004232 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004924:	f7fd fe0e 	bl	8002544 <HAL_GetTick>
 8004928:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800492a:	e008      	b.n	800493e <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800492c:	f7fd fe0a 	bl	8002544 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b0a      	cmp	r3, #10
 8004938:	d901      	bls.n	800493e <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e083      	b.n	8004a46 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800493e:	f7ff fc86 	bl	800424e <LL_RCC_PLL_IsReady>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1f1      	bne.n	800492c <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800494c:	68da      	ldr	r2, [r3, #12]
 800494e:	4b40      	ldr	r3, [pc, #256]	; (8004a50 <HAL_RCC_OscConfig+0x6fc>)
 8004950:	4013      	ands	r3, r2
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800495a:	4311      	orrs	r1, r2
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004960:	0212      	lsls	r2, r2, #8
 8004962:	4311      	orrs	r1, r2
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004968:	4311      	orrs	r1, r2
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800496e:	4311      	orrs	r1, r2
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004974:	430a      	orrs	r2, r1
 8004976:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800497a:	4313      	orrs	r3, r2
 800497c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800497e:	f7ff fc4a 	bl	8004216 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800498c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004990:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004992:	f7fd fdd7 	bl	8002544 <HAL_GetTick>
 8004996:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8004998:	e008      	b.n	80049ac <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800499a:	f7fd fdd3 	bl	8002544 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b0a      	cmp	r3, #10
 80049a6:	d901      	bls.n	80049ac <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e04c      	b.n	8004a46 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80049ac:	f7ff fc4f 	bl	800424e <LL_RCC_PLL_IsReady>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d0f1      	beq.n	800499a <HAL_RCC_OscConfig+0x646>
 80049b6:	e045      	b.n	8004a44 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049b8:	f7ff fc3b 	bl	8004232 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049bc:	f7fd fdc2 	bl	8002544 <HAL_GetTick>
 80049c0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80049c2:	e008      	b.n	80049d6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049c4:	f7fd fdbe 	bl	8002544 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b0a      	cmp	r3, #10
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e037      	b.n	8004a46 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80049d6:	f7ff fc3a 	bl	800424e <LL_RCC_PLL_IsReady>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1f1      	bne.n	80049c4 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80049e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049e4:	68da      	ldr	r2, [r3, #12]
 80049e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049ea:	4b1a      	ldr	r3, [pc, #104]	; (8004a54 <HAL_RCC_OscConfig+0x700>)
 80049ec:	4013      	ands	r3, r2
 80049ee:	60cb      	str	r3, [r1, #12]
 80049f0:	e028      	b.n	8004a44 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d101      	bne.n	80049fe <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e023      	b.n	8004a46 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	f003 0203 	and.w	r2, r3, #3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d115      	bne.n	8004a40 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d10e      	bne.n	8004a40 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2c:	021b      	lsls	r3, r3, #8
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d106      	bne.n	8004a40 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d001      	beq.n	8004a44 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e000      	b.n	8004a46 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3720      	adds	r7, #32
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	11c1808c 	.word	0x11c1808c
 8004a54:	eefefffc 	.word	0xeefefffc

08004a58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e10f      	b.n	8004c8c <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a6c:	4b89      	ldr	r3, [pc, #548]	; (8004c94 <HAL_RCC_ClockConfig+0x23c>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0307 	and.w	r3, r3, #7
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d91b      	bls.n	8004ab2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a7a:	4b86      	ldr	r3, [pc, #536]	; (8004c94 <HAL_RCC_ClockConfig+0x23c>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f023 0207 	bic.w	r2, r3, #7
 8004a82:	4984      	ldr	r1, [pc, #528]	; (8004c94 <HAL_RCC_ClockConfig+0x23c>)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a8a:	f7fd fd5b 	bl	8002544 <HAL_GetTick>
 8004a8e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a90:	e008      	b.n	8004aa4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004a92:	f7fd fd57 	bl	8002544 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e0f3      	b.n	8004c8c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aa4:	4b7b      	ldr	r3, [pc, #492]	; (8004c94 <HAL_RCC_ClockConfig+0x23c>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0307 	and.w	r3, r3, #7
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d1ef      	bne.n	8004a92 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d016      	beq.n	8004aec <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7ff fb2a 	bl	800411c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004ac8:	f7fd fd3c 	bl	8002544 <HAL_GetTick>
 8004acc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004ad0:	f7fd fd38 	bl	8002544 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e0d4      	b.n	8004c8c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004ae2:	f7ff fbf2 	bl	80042ca <LL_RCC_IsActiveFlag_HPRE>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d0f1      	beq.n	8004ad0 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d016      	beq.n	8004b26 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7ff fb20 	bl	8004142 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004b02:	f7fd fd1f 	bl	8002544 <HAL_GetTick>
 8004b06:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004b08:	e008      	b.n	8004b1c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b0a:	f7fd fd1b 	bl	8002544 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e0b7      	b.n	8004c8c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004b1c:	f7ff fbe6 	bl	80042ec <LL_RCC_IsActiveFlag_SHDHPRE>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d0f1      	beq.n	8004b0a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0304 	and.w	r3, r3, #4
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d016      	beq.n	8004b60 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7ff fb19 	bl	800416e <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004b3c:	f7fd fd02 	bl	8002544 <HAL_GetTick>
 8004b40:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004b42:	e008      	b.n	8004b56 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b44:	f7fd fcfe 	bl	8002544 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e09a      	b.n	8004c8c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004b56:	f7ff fbdb 	bl	8004310 <LL_RCC_IsActiveFlag_PPRE1>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d0f1      	beq.n	8004b44 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0308 	and.w	r3, r3, #8
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d017      	beq.n	8004b9c <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	00db      	lsls	r3, r3, #3
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7ff fb0e 	bl	8004194 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004b78:	f7fd fce4 	bl	8002544 <HAL_GetTick>
 8004b7c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004b7e:	e008      	b.n	8004b92 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b80:	f7fd fce0 	bl	8002544 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e07c      	b.n	8004c8c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004b92:	f7ff fbce 	bl	8004332 <LL_RCC_IsActiveFlag_PPRE2>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d0f1      	beq.n	8004b80 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d043      	beq.n	8004c30 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d106      	bne.n	8004bbe <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004bb0:	f7ff f99b 	bl	8003eea <LL_RCC_HSE_IsReady>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d11e      	bne.n	8004bf8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e066      	b.n	8004c8c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	2b03      	cmp	r3, #3
 8004bc4:	d106      	bne.n	8004bd4 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004bc6:	f7ff fb42 	bl	800424e <LL_RCC_PLL_IsReady>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d113      	bne.n	8004bf8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e05b      	b.n	8004c8c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d106      	bne.n	8004bea <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004bdc:	f7ff fa35 	bl	800404a <LL_RCC_MSI_IsReady>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d108      	bne.n	8004bf8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e050      	b.n	8004c8c <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004bea:	f7ff f9ab 	bl	8003f44 <LL_RCC_HSI_IsReady>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d101      	bne.n	8004bf8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e049      	b.n	8004c8c <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7ff fa6f 	bl	80040e0 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c02:	f7fd fc9f 	bl	8002544 <HAL_GetTick>
 8004c06:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c08:	e00a      	b.n	8004c20 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c0a:	f7fd fc9b 	bl	8002544 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d901      	bls.n	8004c20 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e035      	b.n	8004c8c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c20:	f7ff fa71 	bl	8004106 <LL_RCC_GetSysClkSource>
 8004c24:	4602      	mov	r2, r0
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d1ec      	bne.n	8004c0a <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c30:	4b18      	ldr	r3, [pc, #96]	; (8004c94 <HAL_RCC_ClockConfig+0x23c>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0307 	and.w	r3, r3, #7
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d21b      	bcs.n	8004c76 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c3e:	4b15      	ldr	r3, [pc, #84]	; (8004c94 <HAL_RCC_ClockConfig+0x23c>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f023 0207 	bic.w	r2, r3, #7
 8004c46:	4913      	ldr	r1, [pc, #76]	; (8004c94 <HAL_RCC_ClockConfig+0x23c>)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c4e:	f7fd fc79 	bl	8002544 <HAL_GetTick>
 8004c52:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c54:	e008      	b.n	8004c68 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004c56:	f7fd fc75 	bl	8002544 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d901      	bls.n	8004c68 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e011      	b.n	8004c8c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c68:	4b0a      	ldr	r3, [pc, #40]	; (8004c94 <HAL_RCC_ClockConfig+0x23c>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0307 	and.w	r3, r3, #7
 8004c70:	683a      	ldr	r2, [r7, #0]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d1ef      	bne.n	8004c56 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004c76:	f000 f8b3 	bl	8004de0 <HAL_RCC_GetHCLKFreq>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	4a06      	ldr	r2, [pc, #24]	; (8004c98 <HAL_RCC_ClockConfig+0x240>)
 8004c7e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8004c80:	4b06      	ldr	r3, [pc, #24]	; (8004c9c <HAL_RCC_ClockConfig+0x244>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7fd faab 	bl	80021e0 <HAL_InitTick>
 8004c8a:	4603      	mov	r3, r0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	58004000 	.word	0x58004000
 8004c98:	20000000 	.word	0x20000000
 8004c9c:	20000004 	.word	0x20000004

08004ca0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ca0:	b590      	push	{r4, r7, lr}
 8004ca2:	b087      	sub	sp, #28
 8004ca4:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8004caa:	2300      	movs	r3, #0
 8004cac:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cae:	f7ff fa2a 	bl	8004106 <LL_RCC_GetSysClkSource>
 8004cb2:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cb4:	f7ff fafe 	bl	80042b4 <LL_RCC_PLL_GetMainSource>
 8004cb8:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d005      	beq.n	8004ccc <HAL_RCC_GetSysClockFreq+0x2c>
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	2b0c      	cmp	r3, #12
 8004cc4:	d139      	bne.n	8004d3a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d136      	bne.n	8004d3a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004ccc:	f7ff f9cd 	bl	800406a <LL_RCC_MSI_IsEnabledRangeSelect>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d115      	bne.n	8004d02 <HAL_RCC_GetSysClockFreq+0x62>
 8004cd6:	f7ff f9c8 	bl	800406a <LL_RCC_MSI_IsEnabledRangeSelect>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d106      	bne.n	8004cee <HAL_RCC_GetSysClockFreq+0x4e>
 8004ce0:	f7ff f9d3 	bl	800408a <LL_RCC_MSI_GetRange>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	0a1b      	lsrs	r3, r3, #8
 8004ce8:	f003 030f 	and.w	r3, r3, #15
 8004cec:	e005      	b.n	8004cfa <HAL_RCC_GetSysClockFreq+0x5a>
 8004cee:	f7ff f9d7 	bl	80040a0 <LL_RCC_MSI_GetRangeAfterStandby>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	0a1b      	lsrs	r3, r3, #8
 8004cf6:	f003 030f 	and.w	r3, r3, #15
 8004cfa:	4a36      	ldr	r2, [pc, #216]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x134>)
 8004cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d00:	e014      	b.n	8004d2c <HAL_RCC_GetSysClockFreq+0x8c>
 8004d02:	f7ff f9b2 	bl	800406a <LL_RCC_MSI_IsEnabledRangeSelect>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d106      	bne.n	8004d1a <HAL_RCC_GetSysClockFreq+0x7a>
 8004d0c:	f7ff f9bd 	bl	800408a <LL_RCC_MSI_GetRange>
 8004d10:	4603      	mov	r3, r0
 8004d12:	091b      	lsrs	r3, r3, #4
 8004d14:	f003 030f 	and.w	r3, r3, #15
 8004d18:	e005      	b.n	8004d26 <HAL_RCC_GetSysClockFreq+0x86>
 8004d1a:	f7ff f9c1 	bl	80040a0 <LL_RCC_MSI_GetRangeAfterStandby>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	091b      	lsrs	r3, r3, #4
 8004d22:	f003 030f 	and.w	r3, r3, #15
 8004d26:	4a2b      	ldr	r2, [pc, #172]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x134>)
 8004d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d2c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d115      	bne.n	8004d60 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004d38:	e012      	b.n	8004d60 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	2b04      	cmp	r3, #4
 8004d3e:	d102      	bne.n	8004d46 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d40:	4b25      	ldr	r3, [pc, #148]	; (8004dd8 <HAL_RCC_GetSysClockFreq+0x138>)
 8004d42:	617b      	str	r3, [r7, #20]
 8004d44:	e00c      	b.n	8004d60 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	2b08      	cmp	r3, #8
 8004d4a:	d109      	bne.n	8004d60 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004d4c:	f7ff f8a0 	bl	8003e90 <LL_RCC_HSE_IsEnabledDiv2>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d102      	bne.n	8004d5c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004d56:	4b20      	ldr	r3, [pc, #128]	; (8004dd8 <HAL_RCC_GetSysClockFreq+0x138>)
 8004d58:	617b      	str	r3, [r7, #20]
 8004d5a:	e001      	b.n	8004d60 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004d5c:	4b1f      	ldr	r3, [pc, #124]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x13c>)
 8004d5e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d60:	f7ff f9d1 	bl	8004106 <LL_RCC_GetSysClkSource>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b0c      	cmp	r3, #12
 8004d68:	d12f      	bne.n	8004dca <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004d6a:	f7ff faa3 	bl	80042b4 <LL_RCC_PLL_GetMainSource>
 8004d6e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d003      	beq.n	8004d7e <HAL_RCC_GetSysClockFreq+0xde>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2b03      	cmp	r3, #3
 8004d7a:	d003      	beq.n	8004d84 <HAL_RCC_GetSysClockFreq+0xe4>
 8004d7c:	e00d      	b.n	8004d9a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004d7e:	4b16      	ldr	r3, [pc, #88]	; (8004dd8 <HAL_RCC_GetSysClockFreq+0x138>)
 8004d80:	60fb      	str	r3, [r7, #12]
        break;
 8004d82:	e00d      	b.n	8004da0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004d84:	f7ff f884 	bl	8003e90 <LL_RCC_HSE_IsEnabledDiv2>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d102      	bne.n	8004d94 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004d8e:	4b12      	ldr	r3, [pc, #72]	; (8004dd8 <HAL_RCC_GetSysClockFreq+0x138>)
 8004d90:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004d92:	e005      	b.n	8004da0 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8004d94:	4b11      	ldr	r3, [pc, #68]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x13c>)
 8004d96:	60fb      	str	r3, [r7, #12]
        break;
 8004d98:	e002      	b.n	8004da0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	60fb      	str	r3, [r7, #12]
        break;
 8004d9e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004da0:	f7ff fa66 	bl	8004270 <LL_RCC_PLL_GetN>
 8004da4:	4602      	mov	r2, r0
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	fb03 f402 	mul.w	r4, r3, r2
 8004dac:	f7ff fa77 	bl	800429e <LL_RCC_PLL_GetDivider>
 8004db0:	4603      	mov	r3, r0
 8004db2:	091b      	lsrs	r3, r3, #4
 8004db4:	3301      	adds	r3, #1
 8004db6:	fbb4 f4f3 	udiv	r4, r4, r3
 8004dba:	f7ff fa65 	bl	8004288 <LL_RCC_PLL_GetR>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	0f5b      	lsrs	r3, r3, #29
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	fbb4 f3f3 	udiv	r3, r4, r3
 8004dc8:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004dca:	697b      	ldr	r3, [r7, #20]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	371c      	adds	r7, #28
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd90      	pop	{r4, r7, pc}
 8004dd4:	0800dc60 	.word	0x0800dc60
 8004dd8:	00f42400 	.word	0x00f42400
 8004ddc:	01e84800 	.word	0x01e84800

08004de0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004de0:	b598      	push	{r3, r4, r7, lr}
 8004de2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004de4:	f7ff ff5c 	bl	8004ca0 <HAL_RCC_GetSysClockFreq>
 8004de8:	4604      	mov	r4, r0
 8004dea:	f7ff f9e6 	bl	80041ba <LL_RCC_GetAHBPrescaler>
 8004dee:	4603      	mov	r3, r0
 8004df0:	091b      	lsrs	r3, r3, #4
 8004df2:	f003 030f 	and.w	r3, r3, #15
 8004df6:	4a03      	ldr	r2, [pc, #12]	; (8004e04 <HAL_RCC_GetHCLKFreq+0x24>)
 8004df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dfc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	bd98      	pop	{r3, r4, r7, pc}
 8004e04:	0800dc00 	.word	0x0800dc00

08004e08 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e08:	b598      	push	{r3, r4, r7, lr}
 8004e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004e0c:	f7ff ffe8 	bl	8004de0 <HAL_RCC_GetHCLKFreq>
 8004e10:	4604      	mov	r4, r0
 8004e12:	f7ff f9ea 	bl	80041ea <LL_RCC_GetAPB1Prescaler>
 8004e16:	4603      	mov	r3, r0
 8004e18:	0a1b      	lsrs	r3, r3, #8
 8004e1a:	4a03      	ldr	r2, [pc, #12]	; (8004e28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e20:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	bd98      	pop	{r3, r4, r7, pc}
 8004e28:	0800dc40 	.word	0x0800dc40

08004e2c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e2c:	b598      	push	{r3, r4, r7, lr}
 8004e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004e30:	f7ff ffd6 	bl	8004de0 <HAL_RCC_GetHCLKFreq>
 8004e34:	4604      	mov	r4, r0
 8004e36:	f7ff f9e3 	bl	8004200 <LL_RCC_GetAPB2Prescaler>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	0adb      	lsrs	r3, r3, #11
 8004e3e:	4a03      	ldr	r2, [pc, #12]	; (8004e4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e44:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	bd98      	pop	{r3, r4, r7, pc}
 8004e4c:	0800dc40 	.word	0x0800dc40

08004e50 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer to the Flash Latency variable.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  uint32_t regvalue;

  /* Check the parameters */
  if ((RCC_ClkInitStruct != NULL) && (pFLatency != NULL))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d02d      	beq.n	8004ebc <HAL_RCC_GetClockConfig+0x6c>
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d02a      	beq.n	8004ebc <HAL_RCC_GetClockConfig+0x6c>
  {
    /* Set all possible values for the Clock type parameter --------------------*/
    RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 \
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	224f      	movs	r2, #79	; 0x4f
 8004e6a:	601a      	str	r2, [r3, #0]
#if defined(DUAL_CORE)
    RCC_ClkInitStruct->ClockType |= RCC_CLOCKTYPE_HCLK2;
#endif  /* DUAL_CORE */

    /* Get Clock Configuration Register */
    regvalue = RCC->CFGR;
 8004e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	60fb      	str	r3, [r7, #12]

    /* Get the SYSCLK configuration --------------------------------------------*/
    RCC_ClkInitStruct->SYSCLKSource = (regvalue & RCC_CFGR_SWS);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f003 020c 	and.w	r2, r3, #12
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	605a      	str	r2, [r3, #4]

    /* Get the HCLK configuration ----------------------------------------------*/
    RCC_ClkInitStruct->AHBCLKDivider = (regvalue & RCC_CFGR_HPRE);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	609a      	str	r2, [r3, #8]

    /* Get the APB1 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB1CLKDivider = (regvalue & RCC_CFGR_PPRE1);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	60da      	str	r2, [r3, #12]

    /* Get the APB2 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB2CLKDivider = (regvalue & RCC_CFGR_PPRE2);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	611a      	str	r2, [r3, #16]

    /* Get Extended Clock Recovery Register */
    regvalue = RCC->EXTCFGR;
 8004e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ea0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004ea4:	60fb      	str	r3, [r7, #12]
    /* Get the AHBCLK2Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK2Divider =  (regvalue & RCC_EXTCFGR_C2HPRE);
#endif  /* DUAL_CORE */

    /* Get the AHBCLK3Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK3Divider = ((regvalue & RCC_EXTCFGR_SHDHPRE) << 4);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	011b      	lsls	r3, r3, #4
 8004eaa:	b2da      	uxtb	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	615a      	str	r2, [r3, #20]

    /* Get the Flash Wait State (Latency) configuration ------------------------*/
    *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004eb0:	4b05      	ldr	r3, [pc, #20]	; (8004ec8 <HAL_RCC_GetClockConfig+0x78>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0207 	and.w	r2, r3, #7
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	601a      	str	r2, [r3, #0]
  }
}
 8004ebc:	bf00      	nop
 8004ebe:	3714      	adds	r7, #20
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bc80      	pop	{r7}
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	58004000 	.word	0x58004000

08004ecc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004ecc:	b590      	push	{r4, r7, lr}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	091b      	lsrs	r3, r3, #4
 8004ed8:	f003 030f 	and.w	r3, r3, #15
 8004edc:	4a10      	ldr	r2, [pc, #64]	; (8004f20 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8004ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ee2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8004ee4:	f7ff f974 	bl	80041d0 <LL_RCC_GetAHB3Prescaler>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	091b      	lsrs	r3, r3, #4
 8004eec:	f003 030f 	and.w	r3, r3, #15
 8004ef0:	4a0c      	ldr	r2, [pc, #48]	; (8004f24 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8004ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004efc:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	4a09      	ldr	r2, [pc, #36]	; (8004f28 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8004f02:	fba2 2303 	umull	r2, r3, r2, r3
 8004f06:	0c9c      	lsrs	r4, r3, #18
 8004f08:	f7fe ff88 	bl	8003e1c <HAL_PWREx_GetVoltageRange>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	4619      	mov	r1, r3
 8004f10:	4620      	mov	r0, r4
 8004f12:	f000 f80b 	bl	8004f2c <RCC_SetFlashLatency>
 8004f16:	4603      	mov	r3, r0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3714      	adds	r7, #20
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd90      	pop	{r4, r7, pc}
 8004f20:	0800dc60 	.word	0x0800dc60
 8004f24:	0800dc00 	.word	0x0800dc00
 8004f28:	431bde83 	.word	0x431bde83

08004f2c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b08e      	sub	sp, #56	; 0x38
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8004f36:	4a3a      	ldr	r2, [pc, #232]	; (8005020 <RCC_SetFlashLatency+0xf4>)
 8004f38:	f107 0320 	add.w	r3, r7, #32
 8004f3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f40:	6018      	str	r0, [r3, #0]
 8004f42:	3304      	adds	r3, #4
 8004f44:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8004f46:	4a37      	ldr	r2, [pc, #220]	; (8005024 <RCC_SetFlashLatency+0xf8>)
 8004f48:	f107 0318 	add.w	r3, r7, #24
 8004f4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f50:	6018      	str	r0, [r3, #0]
 8004f52:	3304      	adds	r3, #4
 8004f54:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8004f56:	4a34      	ldr	r2, [pc, #208]	; (8005028 <RCC_SetFlashLatency+0xfc>)
 8004f58:	f107 030c 	add.w	r3, r7, #12
 8004f5c:	ca07      	ldmia	r2, {r0, r1, r2}
 8004f5e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004f62:	2300      	movs	r3, #0
 8004f64:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f6c:	d11b      	bne.n	8004fa6 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004f6e:	2300      	movs	r3, #0
 8004f70:	633b      	str	r3, [r7, #48]	; 0x30
 8004f72:	e014      	b.n	8004f9e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f76:	005b      	lsls	r3, r3, #1
 8004f78:	3338      	adds	r3, #56	; 0x38
 8004f7a:	443b      	add	r3, r7
 8004f7c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004f80:	461a      	mov	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d807      	bhi.n	8004f98 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	3338      	adds	r3, #56	; 0x38
 8004f8e:	443b      	add	r3, r7
 8004f90:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004f94:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f96:	e021      	b.n	8004fdc <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	633b      	str	r3, [r7, #48]	; 0x30
 8004f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d9e7      	bls.n	8004f74 <RCC_SetFlashLatency+0x48>
 8004fa4:	e01a      	b.n	8004fdc <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004faa:	e014      	b.n	8004fd6 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fae:	005b      	lsls	r3, r3, #1
 8004fb0:	3338      	adds	r3, #56	; 0x38
 8004fb2:	443b      	add	r3, r7
 8004fb4:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8004fb8:	461a      	mov	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d807      	bhi.n	8004fd0 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	3338      	adds	r3, #56	; 0x38
 8004fc6:	443b      	add	r3, r7
 8004fc8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004fcc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004fce:	e005      	b.n	8004fdc <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d9e7      	bls.n	8004fac <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004fdc:	4b13      	ldr	r3, [pc, #76]	; (800502c <RCC_SetFlashLatency+0x100>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f023 0207 	bic.w	r2, r3, #7
 8004fe4:	4911      	ldr	r1, [pc, #68]	; (800502c <RCC_SetFlashLatency+0x100>)
 8004fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004fec:	f7fd faaa 	bl	8002544 <HAL_GetTick>
 8004ff0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004ff2:	e008      	b.n	8005006 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004ff4:	f7fd faa6 	bl	8002544 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d901      	bls.n	8005006 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e007      	b.n	8005016 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005006:	4b09      	ldr	r3, [pc, #36]	; (800502c <RCC_SetFlashLatency+0x100>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0307 	and.w	r3, r3, #7
 800500e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005010:	429a      	cmp	r2, r3
 8005012:	d1ef      	bne.n	8004ff4 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3738      	adds	r7, #56	; 0x38
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	0800d59c 	.word	0x0800d59c
 8005024:	0800d5a4 	.word	0x0800d5a4
 8005028:	0800d5ac 	.word	0x0800d5ac
 800502c:	58004000 	.word	0x58004000

08005030 <LL_RCC_LSE_IsReady>:
{
 8005030:	b480      	push	{r7}
 8005032:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b02      	cmp	r3, #2
 8005042:	d101      	bne.n	8005048 <LL_RCC_LSE_IsReady+0x18>
 8005044:	2301      	movs	r3, #1
 8005046:	e000      	b.n	800504a <LL_RCC_LSE_IsReady+0x1a>
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	46bd      	mov	sp, r7
 800504e:	bc80      	pop	{r7}
 8005050:	4770      	bx	lr

08005052 <LL_RCC_SetUSARTClockSource>:
{
 8005052:	b480      	push	{r7}
 8005054:	b083      	sub	sp, #12
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800505a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800505e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	0c1b      	lsrs	r3, r3, #16
 8005066:	43db      	mvns	r3, r3
 8005068:	401a      	ands	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	b29b      	uxth	r3, r3
 800506e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005072:	4313      	orrs	r3, r2
 8005074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	bc80      	pop	{r7}
 8005080:	4770      	bx	lr

08005082 <LL_RCC_SetI2SClockSource>:
{
 8005082:	b480      	push	{r7}
 8005084:	b083      	sub	sp, #12
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800508a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800508e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005092:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005096:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4313      	orrs	r3, r2
 800509e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80050a2:	bf00      	nop
 80050a4:	370c      	adds	r7, #12
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bc80      	pop	{r7}
 80050aa:	4770      	bx	lr

080050ac <LL_RCC_SetLPUARTClockSource>:
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80050b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050bc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80050c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bc80      	pop	{r7}
 80050d4:	4770      	bx	lr

080050d6 <LL_RCC_SetI2CClockSource>:
{
 80050d6:	b480      	push	{r7}
 80050d8:	b083      	sub	sp, #12
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80050de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050e2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	091b      	lsrs	r3, r3, #4
 80050ea:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80050ee:	43db      	mvns	r3, r3
 80050f0:	401a      	ands	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	011b      	lsls	r3, r3, #4
 80050f6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80050fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050fe:	4313      	orrs	r3, r2
 8005100:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	bc80      	pop	{r7}
 800510c:	4770      	bx	lr

0800510e <LL_RCC_SetLPTIMClockSource>:
{
 800510e:	b480      	push	{r7}
 8005110:	b083      	sub	sp, #12
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800511a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	0c1b      	lsrs	r3, r3, #16
 8005122:	041b      	lsls	r3, r3, #16
 8005124:	43db      	mvns	r3, r3
 8005126:	401a      	ands	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	041b      	lsls	r3, r3, #16
 800512c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005130:	4313      	orrs	r3, r2
 8005132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	bc80      	pop	{r7}
 800513e:	4770      	bx	lr

08005140 <LL_RCC_SetRNGClockSource>:
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800514c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005150:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005154:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4313      	orrs	r3, r2
 800515c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	bc80      	pop	{r7}
 8005168:	4770      	bx	lr

0800516a <LL_RCC_SetADCClockSource>:
{
 800516a:	b480      	push	{r7}
 800516c:	b083      	sub	sp, #12
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800517e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4313      	orrs	r3, r2
 8005186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800518a:	bf00      	nop
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	bc80      	pop	{r7}
 8005192:	4770      	bx	lr

08005194 <LL_RCC_SetRTCClockSource>:
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800519c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bc80      	pop	{r7}
 80051bc:	4770      	bx	lr

080051be <LL_RCC_GetRTCClockSource>:
{
 80051be:	b480      	push	{r7}
 80051c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80051c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bc80      	pop	{r7}
 80051d4:	4770      	bx	lr

080051d6 <LL_RCC_ForceBackupDomainReset>:
{
 80051d6:	b480      	push	{r7}
 80051d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80051da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80051ee:	bf00      	nop
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bc80      	pop	{r7}
 80051f4:	4770      	bx	lr

080051f6 <LL_RCC_ReleaseBackupDomainReset>:
{
 80051f6:	b480      	push	{r7}
 80051f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80051fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005202:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005206:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800520a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800520e:	bf00      	nop
 8005210:	46bd      	mov	sp, r7
 8005212:	bc80      	pop	{r7}
 8005214:	4770      	bx	lr
	...

08005218 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8005220:	2300      	movs	r3, #0
 8005222:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8005224:	2300      	movs	r3, #0
 8005226:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005228:	2300      	movs	r3, #0
 800522a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d058      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8005238:	f7fe fde2 	bl	8003e00 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800523c:	f7fd f982 	bl	8002544 <HAL_GetTick>
 8005240:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005242:	e009      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005244:	f7fd f97e 	bl	8002544 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b02      	cmp	r3, #2
 8005250:	d902      	bls.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	74fb      	strb	r3, [r7, #19]
        break;
 8005256:	e006      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005258:	4b7b      	ldr	r3, [pc, #492]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005264:	d1ee      	bne.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8005266:	7cfb      	ldrb	r3, [r7, #19]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d13c      	bne.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800526c:	f7ff ffa7 	bl	80051be <LL_RCC_GetRTCClockSource>
 8005270:	4602      	mov	r2, r0
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005276:	429a      	cmp	r2, r3
 8005278:	d00f      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800527a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800527e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005286:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005288:	f7ff ffa5 	bl	80051d6 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 800528c:	f7ff ffb3 	bl	80051f6 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005290:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d014      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a4:	f7fd f94e 	bl	8002544 <HAL_GetTick>
 80052a8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80052aa:	e00b      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ac:	f7fd f94a 	bl	8002544 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d902      	bls.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	74fb      	strb	r3, [r7, #19]
            break;
 80052c2:	e004      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80052c4:	f7ff feb4 	bl	8005030 <LL_RCC_LSE_IsReady>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d1ee      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80052ce:	7cfb      	ldrb	r3, [r7, #19]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d105      	bne.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d8:	4618      	mov	r0, r3
 80052da:	f7ff ff5b 	bl	8005194 <LL_RCC_SetRTCClockSource>
 80052de:	e004      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052e0:	7cfb      	ldrb	r3, [r7, #19]
 80052e2:	74bb      	strb	r3, [r7, #18]
 80052e4:	e001      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052e6:	7cfb      	ldrb	r3, [r7, #19]
 80052e8:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d004      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7ff fea9 	bl	8005052 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b00      	cmp	r3, #0
 800530a:	d004      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	4618      	mov	r0, r3
 8005312:	f7ff fe9e 	bl	8005052 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0320 	and.w	r3, r3, #32
 800531e:	2b00      	cmp	r3, #0
 8005320:	d004      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	4618      	mov	r0, r3
 8005328:	f7ff fec0 	bl	80050ac <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005334:	2b00      	cmp	r3, #0
 8005336:	d004      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	4618      	mov	r0, r3
 800533e:	f7ff fee6 	bl	800510e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800534a:	2b00      	cmp	r3, #0
 800534c:	d004      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005352:	4618      	mov	r0, r3
 8005354:	f7ff fedb 	bl	800510e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005360:	2b00      	cmp	r3, #0
 8005362:	d004      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005368:	4618      	mov	r0, r3
 800536a:	f7ff fed0 	bl	800510e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005376:	2b00      	cmp	r3, #0
 8005378:	d004      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	4618      	mov	r0, r3
 8005380:	f7ff fea9 	bl	80050d6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800538c:	2b00      	cmp	r3, #0
 800538e:	d004      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	4618      	mov	r0, r3
 8005396:	f7ff fe9e 	bl	80050d6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d004      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7ff fe93 	bl	80050d6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0310 	and.w	r3, r3, #16
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d011      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	4618      	mov	r0, r3
 80053c2:	f7ff fe5e 	bl	8005082 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053ce:	d107      	bne.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80053d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053de:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d010      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f0:	4618      	mov	r0, r3
 80053f2:	f7ff fea5 	bl	8005140 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d107      	bne.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80053fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005408:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800540c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d011      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541e:	4618      	mov	r0, r3
 8005420:	f7ff fea3 	bl	800516a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005428:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800542c:	d107      	bne.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800542e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800543c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800543e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005440:	4618      	mov	r0, r3
 8005442:	3718      	adds	r7, #24
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	58000400 	.word	0x58000400

0800544c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e0c6      	b.n	80055ec <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005462:	2b00      	cmp	r3, #0
 8005464:	d108      	bne.n	8005478 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800546e:	d009      	beq.n	8005484 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	61da      	str	r2, [r3, #28]
 8005476:	e005      	b.n	8005484 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b00      	cmp	r3, #0
 800548e:	d106      	bne.n	800549e <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f7fc fe2d 	bl	80020f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2202      	movs	r2, #2
 80054a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054b4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054be:	d902      	bls.n	80054c6 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80054c0:	2300      	movs	r3, #0
 80054c2:	60fb      	str	r3, [r7, #12]
 80054c4:	e002      	b.n	80054cc <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80054c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054ca:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80054d4:	d007      	beq.n	80054e6 <HAL_SPI_Init+0x9a>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054de:	d002      	beq.n	80054e6 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80054f6:	431a      	orrs	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	f003 0302 	and.w	r3, r3, #2
 8005500:	431a      	orrs	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	431a      	orrs	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005514:	431a      	orrs	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	69db      	ldr	r3, [r3, #28]
 800551a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800551e:	431a      	orrs	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005528:	ea42 0103 	orr.w	r1, r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005530:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	430a      	orrs	r2, r1
 800553a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005540:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005544:	d11b      	bne.n	800557e <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10b      	bne.n	8005566 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005556:	d903      	bls.n	8005560 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2202      	movs	r2, #2
 800555c:	631a      	str	r2, [r3, #48]	; 0x30
 800555e:	e002      	b.n	8005566 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556a:	2b02      	cmp	r3, #2
 800556c:	d107      	bne.n	800557e <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800557c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	0c1b      	lsrs	r3, r3, #16
 8005584:	f003 0204 	and.w	r2, r3, #4
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558c:	f003 0310 	and.w	r3, r3, #16
 8005590:	431a      	orrs	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005596:	f003 0308 	and.w	r3, r3, #8
 800559a:	431a      	orrs	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80055a4:	ea42 0103 	orr.w	r1, r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055be:	d105      	bne.n	80055cc <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	b292      	uxth	r2, r2
 80055ca:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	69da      	ldr	r2, [r3, #28]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b088      	sub	sp, #32
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	603b      	str	r3, [r7, #0]
 8005600:	4613      	mov	r3, r2
 8005602:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005604:	2300      	movs	r3, #0
 8005606:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800560e:	2b01      	cmp	r3, #1
 8005610:	d101      	bne.n	8005616 <HAL_SPI_Transmit+0x22>
 8005612:	2302      	movs	r3, #2
 8005614:	e17a      	b.n	800590c <HAL_SPI_Transmit+0x318>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800561e:	f7fc ff91 	bl	8002544 <HAL_GetTick>
 8005622:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005624:	88fb      	ldrh	r3, [r7, #6]
 8005626:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b01      	cmp	r3, #1
 8005632:	d002      	beq.n	800563a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005634:	2302      	movs	r3, #2
 8005636:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005638:	e15f      	b.n	80058fa <HAL_SPI_Transmit+0x306>
  }

  if ((pData == NULL) || (Size == 0U))
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d002      	beq.n	8005646 <HAL_SPI_Transmit+0x52>
 8005640:	88fb      	ldrh	r3, [r7, #6]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d102      	bne.n	800564c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	77fb      	strb	r3, [r7, #31]
    goto error;
 800564a:	e156      	b.n	80058fa <HAL_SPI_Transmit+0x306>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2203      	movs	r2, #3
 8005650:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	68ba      	ldr	r2, [r7, #8]
 800565e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	88fa      	ldrh	r2, [r7, #6]
 8005664:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	88fa      	ldrh	r2, [r7, #6]
 800566a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005696:	d10f      	bne.n	80056b8 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056a6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056b6:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056c0:	d10f      	bne.n	80056e2 <HAL_SPI_Transmit+0xee>
  {
    SPI_RESET_CRC(hspi);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056d0:	601a      	str	r2, [r3, #0]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056e0:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ec:	2b40      	cmp	r3, #64	; 0x40
 80056ee:	d007      	beq.n	8005700 <HAL_SPI_Transmit+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005708:	d94b      	bls.n	80057a2 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d002      	beq.n	8005718 <HAL_SPI_Transmit+0x124>
 8005712:	8afb      	ldrh	r3, [r7, #22]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d13e      	bne.n	8005796 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571c:	881a      	ldrh	r2, [r3, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005728:	1c9a      	adds	r2, r3, #2
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005732:	b29b      	uxth	r3, r3
 8005734:	3b01      	subs	r3, #1
 8005736:	b29a      	uxth	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800573c:	e02b      	b.n	8005796 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f003 0302 	and.w	r3, r3, #2
 8005748:	2b02      	cmp	r3, #2
 800574a:	d112      	bne.n	8005772 <HAL_SPI_Transmit+0x17e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005750:	881a      	ldrh	r2, [r3, #0]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575c:	1c9a      	adds	r2, r3, #2
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005766:	b29b      	uxth	r3, r3
 8005768:	3b01      	subs	r3, #1
 800576a:	b29a      	uxth	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005770:	e011      	b.n	8005796 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005772:	f7fc fee7 	bl	8002544 <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	683a      	ldr	r2, [r7, #0]
 800577e:	429a      	cmp	r2, r3
 8005780:	d803      	bhi.n	800578a <HAL_SPI_Transmit+0x196>
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005788:	d102      	bne.n	8005790 <HAL_SPI_Transmit+0x19c>
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d102      	bne.n	8005796 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005794:	e0b1      	b.n	80058fa <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800579a:	b29b      	uxth	r3, r3
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1ce      	bne.n	800573e <HAL_SPI_Transmit+0x14a>
 80057a0:	e07c      	b.n	800589c <HAL_SPI_Transmit+0x2a8>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d002      	beq.n	80057b0 <HAL_SPI_Transmit+0x1bc>
 80057aa:	8afb      	ldrh	r3, [r7, #22]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d170      	bne.n	8005892 <HAL_SPI_Transmit+0x29e>
    {
      if (hspi->TxXferCount > 1U)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d912      	bls.n	80057e0 <HAL_SPI_Transmit+0x1ec>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057be:	881a      	ldrh	r2, [r3, #0]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ca:	1c9a      	adds	r2, r3, #2
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	3b02      	subs	r3, #2
 80057d8:	b29a      	uxth	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057de:	e058      	b.n	8005892 <HAL_SPI_Transmit+0x29e>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	330c      	adds	r3, #12
 80057ea:	7812      	ldrb	r2, [r2, #0]
 80057ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f2:	1c5a      	adds	r2, r3, #1
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	3b01      	subs	r3, #1
 8005800:	b29a      	uxth	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005806:	e044      	b.n	8005892 <HAL_SPI_Transmit+0x29e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f003 0302 	and.w	r3, r3, #2
 8005812:	2b02      	cmp	r3, #2
 8005814:	d12b      	bne.n	800586e <HAL_SPI_Transmit+0x27a>
      {
        if (hspi->TxXferCount > 1U)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800581a:	b29b      	uxth	r3, r3
 800581c:	2b01      	cmp	r3, #1
 800581e:	d912      	bls.n	8005846 <HAL_SPI_Transmit+0x252>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005824:	881a      	ldrh	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005830:	1c9a      	adds	r2, r3, #2
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800583a:	b29b      	uxth	r3, r3
 800583c:	3b02      	subs	r3, #2
 800583e:	b29a      	uxth	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005844:	e025      	b.n	8005892 <HAL_SPI_Transmit+0x29e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	330c      	adds	r3, #12
 8005850:	7812      	ldrb	r2, [r2, #0]
 8005852:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005858:	1c5a      	adds	r2, r3, #1
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005862:	b29b      	uxth	r3, r3
 8005864:	3b01      	subs	r3, #1
 8005866:	b29a      	uxth	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800586c:	e011      	b.n	8005892 <HAL_SPI_Transmit+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800586e:	f7fc fe69 	bl	8002544 <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	683a      	ldr	r2, [r7, #0]
 800587a:	429a      	cmp	r2, r3
 800587c:	d803      	bhi.n	8005886 <HAL_SPI_Transmit+0x292>
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005884:	d102      	bne.n	800588c <HAL_SPI_Transmit+0x298>
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d102      	bne.n	8005892 <HAL_SPI_Transmit+0x29e>
        {
          errorcode = HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005890:	e033      	b.n	80058fa <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005896:	b29b      	uxth	r3, r3
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1b5      	bne.n	8005808 <HAL_SPI_Transmit+0x214>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058a4:	d107      	bne.n	80058b6 <HAL_SPI_Transmit+0x2c2>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80058b4:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	6839      	ldr	r1, [r7, #0]
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f000 fe6e 	bl	800659c <SPI_EndRxTxTransaction>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d002      	beq.n	80058cc <HAL_SPI_Transmit+0x2d8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2220      	movs	r2, #32
 80058ca:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d10a      	bne.n	80058ea <HAL_SPI_Transmit+0x2f6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058d4:	2300      	movs	r3, #0
 80058d6:	613b      	str	r3, [r7, #16]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	613b      	str	r3, [r7, #16]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	613b      	str	r3, [r7, #16]
 80058e8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d002      	beq.n	80058f8 <HAL_SPI_Transmit+0x304>
  {
    errorcode = HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	77fb      	strb	r3, [r7, #31]
 80058f6:	e000      	b.n	80058fa <HAL_SPI_Transmit+0x306>
  }

error:
 80058f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800590a:	7ffb      	ldrb	r3, [r7, #31]
}
 800590c:	4618      	mov	r0, r3
 800590e:	3720      	adds	r7, #32
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b08c      	sub	sp, #48	; 0x30
 8005918:	af02      	add	r7, sp, #8
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	603b      	str	r3, [r7, #0]
 8005920:	4613      	mov	r3, r2
 8005922:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8005924:	2300      	movs	r3, #0
 8005926:	61bb      	str	r3, [r7, #24]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005928:	2300      	movs	r3, #0
 800592a:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800592c:	2300      	movs	r3, #0
 800592e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800593a:	d112      	bne.n	8005962 <HAL_SPI_Receive+0x4e>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d10e      	bne.n	8005962 <HAL_SPI_Receive+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2204      	movs	r2, #4
 8005948:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800594c:	88fa      	ldrh	r2, [r7, #6]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	9300      	str	r3, [sp, #0]
 8005952:	4613      	mov	r3, r2
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	68b9      	ldr	r1, [r7, #8]
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f000 f9c4 	bl	8005ce6 <HAL_SPI_TransmitReceive>
 800595e:	4603      	mov	r3, r0
 8005960:	e1bd      	b.n	8005cde <HAL_SPI_Receive+0x3ca>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005968:	2b01      	cmp	r3, #1
 800596a:	d101      	bne.n	8005970 <HAL_SPI_Receive+0x5c>
 800596c:	2302      	movs	r3, #2
 800596e:	e1b6      	b.n	8005cde <HAL_SPI_Receive+0x3ca>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005978:	f7fc fde4 	bl	8002544 <HAL_GetTick>
 800597c:	6238      	str	r0, [r7, #32]

  if (hspi->State != HAL_SPI_STATE_READY)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b01      	cmp	r3, #1
 8005988:	d003      	beq.n	8005992 <HAL_SPI_Receive+0x7e>
  {
    errorcode = HAL_BUSY;
 800598a:	2302      	movs	r3, #2
 800598c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8005990:	e19b      	b.n	8005cca <HAL_SPI_Receive+0x3b6>
  }

  if ((pData == NULL) || (Size == 0U))
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d002      	beq.n	800599e <HAL_SPI_Receive+0x8a>
 8005998:	88fb      	ldrh	r3, [r7, #6]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d103      	bne.n	80059a6 <HAL_SPI_Receive+0x92>
  {
    errorcode = HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 80059a4:	e191      	b.n	8005cca <HAL_SPI_Receive+0x3b6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2204      	movs	r2, #4
 80059aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	68ba      	ldr	r2, [r7, #8]
 80059b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	88fa      	ldrh	r2, [r7, #6]
 80059be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	88fa      	ldrh	r2, [r7, #6]
 80059c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059f0:	d118      	bne.n	8005a24 <HAL_SPI_Receive+0x110>
  {
    SPI_RESET_CRC(hspi);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a00:	601a      	str	r2, [r3, #0]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a10:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a2c:	d908      	bls.n	8005a40 <HAL_SPI_Receive+0x12c>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	685a      	ldr	r2, [r3, #4]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a3c:	605a      	str	r2, [r3, #4]
 8005a3e:	e007      	b.n	8005a50 <HAL_SPI_Receive+0x13c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a4e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a58:	d10f      	bne.n	8005a7a <HAL_SPI_Receive+0x166>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005a78:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a84:	2b40      	cmp	r3, #64	; 0x40
 8005a86:	d007      	beq.n	8005a98 <HAL_SPI_Receive+0x184>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a96:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005aa0:	d869      	bhi.n	8005b76 <HAL_SPI_Receive+0x262>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005aa2:	e031      	b.n	8005b08 <HAL_SPI_Receive+0x1f4>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d117      	bne.n	8005ae2 <HAL_SPI_Receive+0x1ce>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f103 020c 	add.w	r2, r3, #12
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005abe:	7812      	ldrb	r2, [r2, #0]
 8005ac0:	b2d2      	uxtb	r2, r2
 8005ac2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac8:	1c5a      	adds	r2, r3, #1
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005ae0:	e012      	b.n	8005b08 <HAL_SPI_Receive+0x1f4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ae2:	f7fc fd2f 	bl	8002544 <HAL_GetTick>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	6a3b      	ldr	r3, [r7, #32]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	683a      	ldr	r2, [r7, #0]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d803      	bhi.n	8005afa <HAL_SPI_Receive+0x1e6>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af8:	d102      	bne.n	8005b00 <HAL_SPI_Receive+0x1ec>
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d103      	bne.n	8005b08 <HAL_SPI_Receive+0x1f4>
        {
          errorcode = HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8005b06:	e0e0      	b.n	8005cca <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1c7      	bne.n	8005aa4 <HAL_SPI_Receive+0x190>
 8005b14:	e035      	b.n	8005b82 <HAL_SPI_Receive+0x26e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f003 0301 	and.w	r3, r3, #1
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d115      	bne.n	8005b50 <HAL_SPI_Receive+0x23c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68da      	ldr	r2, [r3, #12]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2e:	b292      	uxth	r2, r2
 8005b30:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b36:	1c9a      	adds	r2, r3, #2
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	3b01      	subs	r3, #1
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005b4e:	e012      	b.n	8005b76 <HAL_SPI_Receive+0x262>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b50:	f7fc fcf8 	bl	8002544 <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	683a      	ldr	r2, [r7, #0]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d803      	bhi.n	8005b68 <HAL_SPI_Receive+0x254>
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b66:	d102      	bne.n	8005b6e <HAL_SPI_Receive+0x25a>
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d103      	bne.n	8005b76 <HAL_SPI_Receive+0x262>
        {
          errorcode = HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8005b74:	e0a9      	b.n	8005cca <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1c9      	bne.n	8005b16 <HAL_SPI_Receive+0x202>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b8a:	d178      	bne.n	8005c7e <HAL_SPI_Receive+0x36a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b9a:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005b9c:	6a3b      	ldr	r3, [r7, #32]
 8005b9e:	9300      	str	r3, [sp, #0]
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	2101      	movs	r1, #1
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f000 fb82 	bl	80062b0 <SPI_WaitFlagStateUntilTimeout>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d003      	beq.n	8005bba <HAL_SPI_Receive+0x2a6>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 8005bb8:	e087      	b.n	8005cca <HAL_SPI_Receive+0x3b6>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bc2:	d907      	bls.n	8005bd4 <HAL_SPI_Receive+0x2c0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68da      	ldr	r2, [r3, #12]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bce:	b292      	uxth	r2, r2
 8005bd0:	801a      	strh	r2, [r3, #0]
 8005bd2:	e008      	b.n	8005be6 <HAL_SPI_Receive+0x2d2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f103 020c 	add.w	r2, r3, #12
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be0:	7812      	ldrb	r2, [r2, #0]
 8005be2:	b2d2      	uxtb	r2, r2
 8005be4:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2201      	movs	r2, #1
 8005bee:	2101      	movs	r1, #1
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f000 fb5d 	bl	80062b0 <SPI_WaitFlagStateUntilTimeout>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d009      	beq.n	8005c10 <HAL_SPI_Receive+0x2fc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c00:	f043 0202 	orr.w	r2, r3, #2
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 8005c0e:	e05c      	b.n	8005cca <HAL_SPI_Receive+0x3b6>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005c18:	d105      	bne.n	8005c26 <HAL_SPI_Receive+0x312>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	e02b      	b.n	8005c7e <HAL_SPI_Receive+0x36a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	330c      	adds	r3, #12
 8005c2c:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005c36:	7dfb      	ldrb	r3, [r7, #23]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c40:	d11d      	bne.n	8005c7e <HAL_SPI_Receive+0x36a>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d119      	bne.n	8005c7e <HAL_SPI_Receive+0x36a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005c4a:	6a3b      	ldr	r3, [r7, #32]
 8005c4c:	9300      	str	r3, [sp, #0]
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	2201      	movs	r2, #1
 8005c52:	2101      	movs	r1, #1
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f000 fb2b 	bl	80062b0 <SPI_WaitFlagStateUntilTimeout>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d009      	beq.n	8005c74 <HAL_SPI_Receive+0x360>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c64:	f043 0202 	orr.w	r2, r3, #2
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8005c72:	e02a      	b.n	8005cca <HAL_SPI_Receive+0x3b6>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8005c7c:	7dfb      	ldrb	r3, [r7, #23]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c7e:	6a3a      	ldr	r2, [r7, #32]
 8005c80:	6839      	ldr	r1, [r7, #0]
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f000 fc32 	bl	80064ec <SPI_EndRxTransaction>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d002      	beq.n	8005c94 <HAL_SPI_Receive+0x380>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2220      	movs	r2, #32
 8005c92:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f003 0310 	and.w	r3, r3, #16
 8005c9e:	2b10      	cmp	r3, #16
 8005ca0:	d10a      	bne.n	8005cb8 <HAL_SPI_Receive+0x3a4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ca6:	f043 0202 	orr.w	r2, r3, #2
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8005cb6:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d003      	beq.n	8005cc8 <HAL_SPI_Receive+0x3b4>
  {
    errorcode = HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005cc6:	e000      	b.n	8005cca <HAL_SPI_Receive+0x3b6>
  }

error :
 8005cc8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005cda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3728      	adds	r7, #40	; 0x28
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b092      	sub	sp, #72	; 0x48
 8005cea:	af02      	add	r7, sp, #8
 8005cec:	60f8      	str	r0, [r7, #12]
 8005cee:	60b9      	str	r1, [r7, #8]
 8005cf0:	607a      	str	r2, [r7, #4]
 8005cf2:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005d00:	2300      	movs	r3, #0
 8005d02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d101      	bne.n	8005d14 <HAL_SPI_TransmitReceive+0x2e>
 8005d10:	2302      	movs	r3, #2
 8005d12:	e2c8      	b.n	80062a6 <HAL_SPI_TransmitReceive+0x5c0>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d1c:	f7fc fc12 	bl	8002544 <HAL_GetTick>
 8005d20:	6378      	str	r0, [r7, #52]	; 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d28:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  tmp_mode            = hspi->Init.Mode;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	62fb      	str	r3, [r7, #44]	; 0x2c
  initial_TxXferCount = Size;
 8005d32:	887b      	ldrh	r3, [r7, #2]
 8005d34:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 8005d36:	887b      	ldrh	r3, [r7, #2]
 8005d38:	853b      	strh	r3, [r7, #40]	; 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	627b      	str	r3, [r7, #36]	; 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005d4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d00f      	beq.n	8005d72 <HAL_SPI_TransmitReceive+0x8c>
 8005d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d58:	d107      	bne.n	8005d6a <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d103      	bne.n	8005d6a <HAL_SPI_TransmitReceive+0x84>
 8005d62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005d66:	2b04      	cmp	r3, #4
 8005d68:	d003      	beq.n	8005d72 <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 8005d6a:	2302      	movs	r3, #2
 8005d6c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 8005d70:	e28f      	b.n	8006292 <HAL_SPI_TransmitReceive+0x5ac>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d005      	beq.n	8005d84 <HAL_SPI_TransmitReceive+0x9e>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d002      	beq.n	8005d84 <HAL_SPI_TransmitReceive+0x9e>
 8005d7e:	887b      	ldrh	r3, [r7, #2]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d103      	bne.n	8005d8c <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 8005d8a:	e282      	b.n	8006292 <HAL_SPI_TransmitReceive+0x5ac>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b04      	cmp	r3, #4
 8005d96:	d003      	beq.n	8005da0 <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2205      	movs	r2, #5
 8005d9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	887a      	ldrh	r2, [r7, #2]
 8005db0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	887a      	ldrh	r2, [r7, #2]
 8005db8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	887a      	ldrh	r2, [r7, #2]
 8005dc6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	887a      	ldrh	r2, [r7, #2]
 8005dcc:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005de2:	d10f      	bne.n	8005e04 <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005df2:	601a      	str	r2, [r3, #0]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e02:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e0c:	d802      	bhi.n	8005e14 <HAL_SPI_TransmitReceive+0x12e>
 8005e0e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d908      	bls.n	8005e26 <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	685a      	ldr	r2, [r3, #4]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e22:	605a      	str	r2, [r3, #4]
 8005e24:	e007      	b.n	8005e36 <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	685a      	ldr	r2, [r3, #4]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e34:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e40:	2b40      	cmp	r3, #64	; 0x40
 8005e42:	d007      	beq.n	8005e54 <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e5c:	f240 80a4 	bls.w	8005fa8 <HAL_SPI_TransmitReceive+0x2c2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d003      	beq.n	8005e70 <HAL_SPI_TransmitReceive+0x18a>
 8005e68:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	f040 808e 	bne.w	8005f8c <HAL_SPI_TransmitReceive+0x2a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e74:	881a      	ldrh	r2, [r3, #0]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e80:	1c9a      	adds	r2, r3, #2
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e94:	e07a      	b.n	8005f8c <HAL_SPI_TransmitReceive+0x2a6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f003 0302 	and.w	r3, r3, #2
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d13f      	bne.n	8005f24 <HAL_SPI_TransmitReceive+0x23e>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d03a      	beq.n	8005f24 <HAL_SPI_TransmitReceive+0x23e>
 8005eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d137      	bne.n	8005f24 <HAL_SPI_TransmitReceive+0x23e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb8:	881a      	ldrh	r2, [r3, #0]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec4:	1c9a      	adds	r2, r3, #2
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d11e      	bne.n	8005f24 <HAL_SPI_TransmitReceive+0x23e>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eee:	d119      	bne.n	8005f24 <HAL_SPI_TransmitReceive+0x23e>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef2:	f003 0304 	and.w	r3, r3, #4
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d10c      	bne.n	8005f14 <HAL_SPI_TransmitReceive+0x22e>
 8005efa:	6a3b      	ldr	r3, [r7, #32]
 8005efc:	f003 0308 	and.w	r3, r3, #8
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d007      	beq.n	8005f14 <HAL_SPI_TransmitReceive+0x22e>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f12:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f22:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f003 0301 	and.w	r3, r3, #1
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d11c      	bne.n	8005f6c <HAL_SPI_TransmitReceive+0x286>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d016      	beq.n	8005f6c <HAL_SPI_TransmitReceive+0x286>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68da      	ldr	r2, [r3, #12]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f48:	b292      	uxth	r2, r2
 8005f4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f50:	1c9a      	adds	r2, r3, #2
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005f6c:	f7fc faea 	bl	8002544 <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d807      	bhi.n	8005f8c <HAL_SPI_TransmitReceive+0x2a6>
 8005f7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f82:	d003      	beq.n	8005f8c <HAL_SPI_TransmitReceive+0x2a6>
      {
        errorcode = HAL_TIMEOUT;
 8005f84:	2303      	movs	r3, #3
 8005f86:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 8005f8a:	e182      	b.n	8006292 <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f47f af7f 	bne.w	8005e96 <HAL_SPI_TransmitReceive+0x1b0>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f47f af78 	bne.w	8005e96 <HAL_SPI_TransmitReceive+0x1b0>
 8005fa6:	e103      	b.n	80061b0 <HAL_SPI_TransmitReceive+0x4ca>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d003      	beq.n	8005fb8 <HAL_SPI_TransmitReceive+0x2d2>
 8005fb0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	f040 80ef 	bne.w	8006196 <HAL_SPI_TransmitReceive+0x4b0>
    {
      if (hspi->TxXferCount > 1U)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d912      	bls.n	8005fe8 <HAL_SPI_TransmitReceive+0x302>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc6:	881a      	ldrh	r2, [r3, #0]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd2:	1c9a      	adds	r2, r3, #2
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	3b02      	subs	r3, #2
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fe6:	e0d6      	b.n	8006196 <HAL_SPI_TransmitReceive+0x4b0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	330c      	adds	r3, #12
 8005ff2:	7812      	ldrb	r2, [r2, #0]
 8005ff4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffa:	1c5a      	adds	r2, r3, #1
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006004:	b29b      	uxth	r3, r3
 8006006:	3b01      	subs	r3, #1
 8006008:	b29a      	uxth	r2, r3
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800600e:	e0c2      	b.n	8006196 <HAL_SPI_TransmitReceive+0x4b0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f003 0302 	and.w	r3, r3, #2
 800601a:	2b02      	cmp	r3, #2
 800601c:	d158      	bne.n	80060d0 <HAL_SPI_TransmitReceive+0x3ea>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006022:	b29b      	uxth	r3, r3
 8006024:	2b00      	cmp	r3, #0
 8006026:	d053      	beq.n	80060d0 <HAL_SPI_TransmitReceive+0x3ea>
 8006028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800602a:	2b01      	cmp	r3, #1
 800602c:	d150      	bne.n	80060d0 <HAL_SPI_TransmitReceive+0x3ea>
      {
        if (hspi->TxXferCount > 1U)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006032:	b29b      	uxth	r3, r3
 8006034:	2b01      	cmp	r3, #1
 8006036:	d912      	bls.n	800605e <HAL_SPI_TransmitReceive+0x378>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603c:	881a      	ldrh	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006048:	1c9a      	adds	r2, r3, #2
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006052:	b29b      	uxth	r3, r3
 8006054:	3b02      	subs	r3, #2
 8006056:	b29a      	uxth	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800605c:	e012      	b.n	8006084 <HAL_SPI_TransmitReceive+0x39e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	330c      	adds	r3, #12
 8006068:	7812      	ldrb	r2, [r2, #0]
 800606a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006070:	1c5a      	adds	r2, r3, #1
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800607a:	b29b      	uxth	r3, r3
 800607c:	3b01      	subs	r3, #1
 800607e:	b29a      	uxth	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006084:	2300      	movs	r3, #0
 8006086:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800608c:	b29b      	uxth	r3, r3
 800608e:	2b00      	cmp	r3, #0
 8006090:	d11e      	bne.n	80060d0 <HAL_SPI_TransmitReceive+0x3ea>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800609a:	d119      	bne.n	80060d0 <HAL_SPI_TransmitReceive+0x3ea>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 800609c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609e:	f003 0304 	and.w	r3, r3, #4
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10c      	bne.n	80060c0 <HAL_SPI_TransmitReceive+0x3da>
 80060a6:	6a3b      	ldr	r3, [r7, #32]
 80060a8:	f003 0308 	and.w	r3, r3, #8
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d007      	beq.n	80060c0 <HAL_SPI_TransmitReceive+0x3da>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060be:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060ce:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f003 0301 	and.w	r3, r3, #1
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d148      	bne.n	8006170 <HAL_SPI_TransmitReceive+0x48a>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d042      	beq.n	8006170 <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->RxXferCount > 1U)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d923      	bls.n	800613e <HAL_SPI_TransmitReceive+0x458>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68da      	ldr	r2, [r3, #12]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006100:	b292      	uxth	r2, r2
 8006102:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006108:	1c9a      	adds	r2, r3, #2
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006114:	b29b      	uxth	r3, r3
 8006116:	3b02      	subs	r3, #2
 8006118:	b29a      	uxth	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006126:	b29b      	uxth	r3, r3
 8006128:	2b01      	cmp	r3, #1
 800612a:	d81f      	bhi.n	800616c <HAL_SPI_TransmitReceive+0x486>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685a      	ldr	r2, [r3, #4]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800613a:	605a      	str	r2, [r3, #4]
 800613c:	e016      	b.n	800616c <HAL_SPI_TransmitReceive+0x486>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f103 020c 	add.w	r2, r3, #12
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614a:	7812      	ldrb	r2, [r2, #0]
 800614c:	b2d2      	uxtb	r2, r2
 800614e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006154:	1c5a      	adds	r2, r3, #1
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006160:	b29b      	uxth	r3, r3
 8006162:	3b01      	subs	r3, #1
 8006164:	b29a      	uxth	r2, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800616c:	2301      	movs	r3, #1
 800616e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006170:	f7fc f9e8 	bl	8002544 <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800617c:	429a      	cmp	r2, r3
 800617e:	d803      	bhi.n	8006188 <HAL_SPI_TransmitReceive+0x4a2>
 8006180:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006186:	d102      	bne.n	800618e <HAL_SPI_TransmitReceive+0x4a8>
 8006188:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800618a:	2b00      	cmp	r3, #0
 800618c:	d103      	bne.n	8006196 <HAL_SPI_TransmitReceive+0x4b0>
      {
        errorcode = HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 8006194:	e07d      	b.n	8006292 <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800619a:	b29b      	uxth	r3, r3
 800619c:	2b00      	cmp	r3, #0
 800619e:	f47f af37 	bne.w	8006010 <HAL_SPI_TransmitReceive+0x32a>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f47f af30 	bne.w	8006010 <HAL_SPI_TransmitReceive+0x32a>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061b8:	d146      	bne.n	8006248 <HAL_SPI_TransmitReceive+0x562>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80061ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061bc:	9300      	str	r3, [sp, #0]
 80061be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061c0:	2201      	movs	r2, #1
 80061c2:	2101      	movs	r1, #1
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f000 f873 	bl	80062b0 <SPI_WaitFlagStateUntilTimeout>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d009      	beq.n	80061e4 <HAL_SPI_TransmitReceive+0x4fe>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061d4:	f043 0202 	orr.w	r2, r3, #2
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      goto error;
 80061e2:	e056      	b.n	8006292 <HAL_SPI_TransmitReceive+0x5ac>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80061ec:	d105      	bne.n	80061fa <HAL_SPI_TransmitReceive+0x514>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	e026      	b.n	8006248 <HAL_SPI_TransmitReceive+0x562>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	330c      	adds	r3, #12
 8006200:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	b2db      	uxtb	r3, r3
 8006208:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800620a:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006210:	2b02      	cmp	r3, #2
 8006212:	d119      	bne.n	8006248 <HAL_SPI_TransmitReceive+0x562>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8006214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800621a:	2201      	movs	r2, #1
 800621c:	2101      	movs	r1, #1
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f000 f846 	bl	80062b0 <SPI_WaitFlagStateUntilTimeout>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d009      	beq.n	800623e <HAL_SPI_TransmitReceive+0x558>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800622e:	f043 0202 	orr.w	r2, r3, #2
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          goto error;
 800623c:	e029      	b.n	8006292 <HAL_SPI_TransmitReceive+0x5ac>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	b2db      	uxtb	r3, r3
 8006244:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8006246:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f003 0310 	and.w	r3, r3, #16
 8006252:	2b10      	cmp	r3, #16
 8006254:	d10d      	bne.n	8006272 <HAL_SPI_TransmitReceive+0x58c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800625a:	f043 0202 	orr.w	r2, r3, #2
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800626a:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006272:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006274:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f000 f990 	bl	800659c <SPI_EndRxTxTransaction>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d006      	beq.n	8006290 <HAL_SPI_TransmitReceive+0x5aa>
  {
    errorcode = HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2220      	movs	r2, #32
 800628c:	661a      	str	r2, [r3, #96]	; 0x60
 800628e:	e000      	b.n	8006292 <HAL_SPI_TransmitReceive+0x5ac>
  }

error :
 8006290:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2201      	movs	r2, #1
 8006296:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80062a2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3740      	adds	r7, #64	; 0x40
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
	...

080062b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b088      	sub	sp, #32
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	603b      	str	r3, [r7, #0]
 80062bc:	4613      	mov	r3, r2
 80062be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80062c0:	f7fc f940 	bl	8002544 <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c8:	1a9b      	subs	r3, r3, r2
 80062ca:	683a      	ldr	r2, [r7, #0]
 80062cc:	4413      	add	r3, r2
 80062ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80062d0:	f7fc f938 	bl	8002544 <HAL_GetTick>
 80062d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80062d6:	4b39      	ldr	r3, [pc, #228]	; (80063bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	015b      	lsls	r3, r3, #5
 80062dc:	0d1b      	lsrs	r3, r3, #20
 80062de:	69fa      	ldr	r2, [r7, #28]
 80062e0:	fb02 f303 	mul.w	r3, r2, r3
 80062e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062e6:	e054      	b.n	8006392 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ee:	d050      	beq.n	8006392 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80062f0:	f7fc f928 	bl	8002544 <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	69fa      	ldr	r2, [r7, #28]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d902      	bls.n	8006306 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d13d      	bne.n	8006382 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006314:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800631e:	d111      	bne.n	8006344 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006328:	d004      	beq.n	8006334 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006332:	d107      	bne.n	8006344 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006342:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006348:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800634c:	d10f      	bne.n	800636e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800635c:	601a      	str	r2, [r3, #0]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800636c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e017      	b.n	80063b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d101      	bne.n	800638c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006388:	2300      	movs	r3, #0
 800638a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	3b01      	subs	r3, #1
 8006390:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	689a      	ldr	r2, [r3, #8]
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	4013      	ands	r3, r2
 800639c:	68ba      	ldr	r2, [r7, #8]
 800639e:	429a      	cmp	r2, r3
 80063a0:	bf0c      	ite	eq
 80063a2:	2301      	moveq	r3, #1
 80063a4:	2300      	movne	r3, #0
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	461a      	mov	r2, r3
 80063aa:	79fb      	ldrb	r3, [r7, #7]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d19b      	bne.n	80062e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3720      	adds	r7, #32
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	20000000 	.word	0x20000000

080063c0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b08a      	sub	sp, #40	; 0x28
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	607a      	str	r2, [r7, #4]
 80063cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80063ce:	2300      	movs	r3, #0
 80063d0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80063d2:	f7fc f8b7 	bl	8002544 <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063da:	1a9b      	subs	r3, r3, r2
 80063dc:	683a      	ldr	r2, [r7, #0]
 80063de:	4413      	add	r3, r2
 80063e0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80063e2:	f7fc f8af 	bl	8002544 <HAL_GetTick>
 80063e6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	330c      	adds	r3, #12
 80063ee:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80063f0:	4b3d      	ldr	r3, [pc, #244]	; (80064e8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	4613      	mov	r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4413      	add	r3, r2
 80063fa:	00da      	lsls	r2, r3, #3
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	0d1b      	lsrs	r3, r3, #20
 8006400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006402:	fb02 f303 	mul.w	r3, r2, r3
 8006406:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006408:	e060      	b.n	80064cc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006410:	d107      	bne.n	8006422 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d104      	bne.n	8006422 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	b2db      	uxtb	r3, r3
 800641e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006420:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006428:	d050      	beq.n	80064cc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800642a:	f7fc f88b 	bl	8002544 <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	6a3b      	ldr	r3, [r7, #32]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006436:	429a      	cmp	r2, r3
 8006438:	d902      	bls.n	8006440 <SPI_WaitFifoStateUntilTimeout+0x80>
 800643a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643c:	2b00      	cmp	r3, #0
 800643e:	d13d      	bne.n	80064bc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	685a      	ldr	r2, [r3, #4]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800644e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006458:	d111      	bne.n	800647e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006462:	d004      	beq.n	800646e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800646c:	d107      	bne.n	800647e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800647c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006482:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006486:	d10f      	bne.n	80064a8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006496:	601a      	str	r2, [r3, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80064b8:	2303      	movs	r3, #3
 80064ba:	e010      	b.n	80064de <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d101      	bne.n	80064c6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80064c2:	2300      	movs	r3, #0
 80064c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	3b01      	subs	r3, #1
 80064ca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	689a      	ldr	r2, [r3, #8]
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	4013      	ands	r3, r2
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d196      	bne.n	800640a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3728      	adds	r7, #40	; 0x28
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	20000000 	.word	0x20000000

080064ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b086      	sub	sp, #24
 80064f0:	af02      	add	r7, sp, #8
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006500:	d111      	bne.n	8006526 <SPI_EndRxTransaction+0x3a>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800650a:	d004      	beq.n	8006516 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006514:	d107      	bne.n	8006526 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006524:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	9300      	str	r3, [sp, #0]
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	2200      	movs	r2, #0
 800652e:	2180      	movs	r1, #128	; 0x80
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f7ff febd 	bl	80062b0 <SPI_WaitFlagStateUntilTimeout>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d007      	beq.n	800654c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006540:	f043 0220 	orr.w	r2, r3, #32
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	e023      	b.n	8006594 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006554:	d11d      	bne.n	8006592 <SPI_EndRxTransaction+0xa6>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800655e:	d004      	beq.n	800656a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006568:	d113      	bne.n	8006592 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	2200      	movs	r2, #0
 8006572:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006576:	68f8      	ldr	r0, [r7, #12]
 8006578:	f7ff ff22 	bl	80063c0 <SPI_WaitFifoStateUntilTimeout>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d007      	beq.n	8006592 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006586:	f043 0220 	orr.w	r2, r3, #32
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e000      	b.n	8006594 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3710      	adds	r7, #16
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b086      	sub	sp, #24
 80065a0:	af02      	add	r7, sp, #8
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	9300      	str	r3, [sp, #0]
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f7ff ff03 	bl	80063c0 <SPI_WaitFifoStateUntilTimeout>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d007      	beq.n	80065d0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065c4:	f043 0220 	orr.w	r2, r3, #32
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80065cc:	2303      	movs	r3, #3
 80065ce:	e027      	b.n	8006620 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	9300      	str	r3, [sp, #0]
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	2200      	movs	r2, #0
 80065d8:	2180      	movs	r1, #128	; 0x80
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	f7ff fe68 	bl	80062b0 <SPI_WaitFlagStateUntilTimeout>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d007      	beq.n	80065f6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065ea:	f043 0220 	orr.w	r2, r3, #32
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e014      	b.n	8006620 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	9300      	str	r3, [sp, #0]
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	f7ff fedc 	bl	80063c0 <SPI_WaitFifoStateUntilTimeout>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d007      	beq.n	800661e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006612:	f043 0220 	orr.w	r2, r3, #32
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800661a:	2303      	movs	r3, #3
 800661c:	e000      	b.n	8006620 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d101      	bne.n	800663a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e049      	b.n	80066ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d106      	bne.n	8006654 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f841 	bl	80066d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2202      	movs	r2, #2
 8006658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	3304      	adds	r3, #4
 8006664:	4619      	mov	r1, r3
 8006666:	4610      	mov	r0, r2
 8006668:	f000 f9ce 	bl	8006a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3708      	adds	r7, #8
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80066d6:	b480      	push	{r7}
 80066d8:	b083      	sub	sp, #12
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80066de:	bf00      	nop
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bc80      	pop	{r7}
 80066e6:	4770      	bx	lr

080066e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d001      	beq.n	8006700 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e036      	b.n	800676e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2202      	movs	r2, #2
 8006704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68da      	ldr	r2, [r3, #12]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f042 0201 	orr.w	r2, r2, #1
 8006716:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a16      	ldr	r2, [pc, #88]	; (8006778 <HAL_TIM_Base_Start_IT+0x90>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d004      	beq.n	800672c <HAL_TIM_Base_Start_IT+0x44>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800672a:	d115      	bne.n	8006758 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	689a      	ldr	r2, [r3, #8]
 8006732:	4b12      	ldr	r3, [pc, #72]	; (800677c <HAL_TIM_Base_Start_IT+0x94>)
 8006734:	4013      	ands	r3, r2
 8006736:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2b06      	cmp	r3, #6
 800673c:	d015      	beq.n	800676a <HAL_TIM_Base_Start_IT+0x82>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006744:	d011      	beq.n	800676a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f042 0201 	orr.w	r2, r2, #1
 8006754:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006756:	e008      	b.n	800676a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f042 0201 	orr.w	r2, r2, #1
 8006766:	601a      	str	r2, [r3, #0]
 8006768:	e000      	b.n	800676c <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800676a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3714      	adds	r7, #20
 8006772:	46bd      	mov	sp, r7
 8006774:	bc80      	pop	{r7}
 8006776:	4770      	bx	lr
 8006778:	40012c00 	.word	0x40012c00
 800677c:	00010007 	.word	0x00010007

08006780 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	2b02      	cmp	r3, #2
 8006794:	d122      	bne.n	80067dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	f003 0302 	and.w	r3, r3, #2
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d11b      	bne.n	80067dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f06f 0202 	mvn.w	r2, #2
 80067ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2201      	movs	r2, #1
 80067b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	f003 0303 	and.w	r3, r3, #3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d003      	beq.n	80067ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f904 	bl	80069d0 <HAL_TIM_IC_CaptureCallback>
 80067c8:	e005      	b.n	80067d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f8f7 	bl	80069be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 f906 	bl	80069e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	f003 0304 	and.w	r3, r3, #4
 80067e6:	2b04      	cmp	r3, #4
 80067e8:	d122      	bne.n	8006830 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	f003 0304 	and.w	r3, r3, #4
 80067f4:	2b04      	cmp	r3, #4
 80067f6:	d11b      	bne.n	8006830 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f06f 0204 	mvn.w	r2, #4
 8006800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2202      	movs	r2, #2
 8006806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006812:	2b00      	cmp	r3, #0
 8006814:	d003      	beq.n	800681e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f8da 	bl	80069d0 <HAL_TIM_IC_CaptureCallback>
 800681c:	e005      	b.n	800682a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 f8cd 	bl	80069be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 f8dc 	bl	80069e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	f003 0308 	and.w	r3, r3, #8
 800683a:	2b08      	cmp	r3, #8
 800683c:	d122      	bne.n	8006884 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	f003 0308 	and.w	r3, r3, #8
 8006848:	2b08      	cmp	r3, #8
 800684a:	d11b      	bne.n	8006884 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f06f 0208 	mvn.w	r2, #8
 8006854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2204      	movs	r2, #4
 800685a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	69db      	ldr	r3, [r3, #28]
 8006862:	f003 0303 	and.w	r3, r3, #3
 8006866:	2b00      	cmp	r3, #0
 8006868:	d003      	beq.n	8006872 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f8b0 	bl	80069d0 <HAL_TIM_IC_CaptureCallback>
 8006870:	e005      	b.n	800687e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 f8a3 	bl	80069be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 f8b2 	bl	80069e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	f003 0310 	and.w	r3, r3, #16
 800688e:	2b10      	cmp	r3, #16
 8006890:	d122      	bne.n	80068d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	f003 0310 	and.w	r3, r3, #16
 800689c:	2b10      	cmp	r3, #16
 800689e:	d11b      	bne.n	80068d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f06f 0210 	mvn.w	r2, #16
 80068a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2208      	movs	r2, #8
 80068ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	69db      	ldr	r3, [r3, #28]
 80068b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d003      	beq.n	80068c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f886 	bl	80069d0 <HAL_TIM_IC_CaptureCallback>
 80068c4:	e005      	b.n	80068d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f879 	bl	80069be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 f888 	bl	80069e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d10e      	bne.n	8006904 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	f003 0301 	and.w	r3, r3, #1
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d107      	bne.n	8006904 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f06f 0201 	mvn.w	r2, #1
 80068fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f7fb fa74 	bl	8001dec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800690e:	2b80      	cmp	r3, #128	; 0x80
 8006910:	d10e      	bne.n	8006930 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800691c:	2b80      	cmp	r3, #128	; 0x80
 800691e:	d107      	bne.n	8006930 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 f8d7 	bl	8006ade <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800693a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800693e:	d10e      	bne.n	800695e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800694a:	2b80      	cmp	r3, #128	; 0x80
 800694c:	d107      	bne.n	800695e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 f8c9 	bl	8006af0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006968:	2b40      	cmp	r3, #64	; 0x40
 800696a:	d10e      	bne.n	800698a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006976:	2b40      	cmp	r3, #64	; 0x40
 8006978:	d107      	bne.n	800698a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006982:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 f835 	bl	80069f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	f003 0320 	and.w	r3, r3, #32
 8006994:	2b20      	cmp	r3, #32
 8006996:	d10e      	bne.n	80069b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	f003 0320 	and.w	r3, r3, #32
 80069a2:	2b20      	cmp	r3, #32
 80069a4:	d107      	bne.n	80069b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f06f 0220 	mvn.w	r2, #32
 80069ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 f88b 	bl	8006acc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069b6:	bf00      	nop
 80069b8:	3708      	adds	r7, #8
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069be:	b480      	push	{r7}
 80069c0:	b083      	sub	sp, #12
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069c6:	bf00      	nop
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bc80      	pop	{r7}
 80069ce:	4770      	bx	lr

080069d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	bc80      	pop	{r7}
 80069e0:	4770      	bx	lr

080069e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069e2:	b480      	push	{r7}
 80069e4:	b083      	sub	sp, #12
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069ea:	bf00      	nop
 80069ec:	370c      	adds	r7, #12
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bc80      	pop	{r7}
 80069f2:	4770      	bx	lr

080069f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069fc:	bf00      	nop
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bc80      	pop	{r7}
 8006a04:	4770      	bx	lr
	...

08006a08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a29      	ldr	r2, [pc, #164]	; (8006ac0 <TIM_Base_SetConfig+0xb8>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d003      	beq.n	8006a28 <TIM_Base_SetConfig+0x20>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a26:	d108      	bne.n	8006a3a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a20      	ldr	r2, [pc, #128]	; (8006ac0 <TIM_Base_SetConfig+0xb8>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d00b      	beq.n	8006a5a <TIM_Base_SetConfig+0x52>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a48:	d007      	beq.n	8006a5a <TIM_Base_SetConfig+0x52>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a1d      	ldr	r2, [pc, #116]	; (8006ac4 <TIM_Base_SetConfig+0xbc>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d003      	beq.n	8006a5a <TIM_Base_SetConfig+0x52>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a1c      	ldr	r2, [pc, #112]	; (8006ac8 <TIM_Base_SetConfig+0xc0>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d108      	bne.n	8006a6c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	695b      	ldr	r3, [r3, #20]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	689a      	ldr	r2, [r3, #8]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a0b      	ldr	r2, [pc, #44]	; (8006ac0 <TIM_Base_SetConfig+0xb8>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d007      	beq.n	8006aa8 <TIM_Base_SetConfig+0xa0>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a0a      	ldr	r2, [pc, #40]	; (8006ac4 <TIM_Base_SetConfig+0xbc>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d003      	beq.n	8006aa8 <TIM_Base_SetConfig+0xa0>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a09      	ldr	r2, [pc, #36]	; (8006ac8 <TIM_Base_SetConfig+0xc0>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d103      	bne.n	8006ab0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	691a      	ldr	r2, [r3, #16]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	615a      	str	r2, [r3, #20]
}
 8006ab6:	bf00      	nop
 8006ab8:	3714      	adds	r7, #20
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bc80      	pop	{r7}
 8006abe:	4770      	bx	lr
 8006ac0:	40012c00 	.word	0x40012c00
 8006ac4:	40014400 	.word	0x40014400
 8006ac8:	40014800 	.word	0x40014800

08006acc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ad4:	bf00      	nop
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bc80      	pop	{r7}
 8006adc:	4770      	bx	lr

08006ade <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b083      	sub	sp, #12
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ae6:	bf00      	nop
 8006ae8:	370c      	adds	r7, #12
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bc80      	pop	{r7}
 8006aee:	4770      	bx	lr

08006af0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006af8:	bf00      	nop
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bc80      	pop	{r7}
 8006b00:	4770      	bx	lr

08006b02 <LL_RCC_GetUSARTClockSource>:
{
 8006b02:	b480      	push	{r7}
 8006b04:	b083      	sub	sp, #12
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8006b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b0e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	401a      	ands	r2, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	041b      	lsls	r3, r3, #16
 8006b1a:	4313      	orrs	r3, r2
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bc80      	pop	{r7}
 8006b24:	4770      	bx	lr

08006b26 <LL_RCC_GetLPUARTClockSource>:
{
 8006b26:	b480      	push	{r7}
 8006b28:	b083      	sub	sp, #12
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b32:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4013      	ands	r3, r2
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	370c      	adds	r7, #12
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bc80      	pop	{r7}
 8006b42:	4770      	bx	lr

08006b44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d101      	bne.n	8006b56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e042      	b.n	8006bdc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d106      	bne.n	8006b6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f7fb fa49 	bl	8002000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2224      	movs	r2, #36	; 0x24
 8006b72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f022 0201 	bic.w	r2, r2, #1
 8006b84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 fd5c 	bl	8007644 <UART_SetConfig>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d101      	bne.n	8006b96 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e022      	b.n	8006bdc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d002      	beq.n	8006ba4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 ffc4 	bl	8007b2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	685a      	ldr	r2, [r3, #4]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	689a      	ldr	r2, [r3, #8]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f042 0201 	orr.w	r2, r2, #1
 8006bd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f001 f84a 	bl	8007c6e <UART_CheckIdleState>
 8006bda:	4603      	mov	r3, r0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3708      	adds	r7, #8
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d101      	bne.n	8006bf6 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e04a      	b.n	8006c8c <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d106      	bne.n	8006c0e <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f7fb f9f9 	bl	8002000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2224      	movs	r2, #36	; 0x24
 8006c12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f022 0201 	bic.w	r2, r2, #1
 8006c24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 fd0c 	bl	8007644 <UART_SetConfig>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d101      	bne.n	8006c36 <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e02a      	b.n	8006c8c <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d002      	beq.n	8006c44 <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 ff74 	bl	8007b2c <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	685a      	ldr	r2, [r3, #4]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	689a      	ldr	r2, [r3, #8]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8006c62:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689a      	ldr	r2, [r3, #8]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f042 0208 	orr.w	r2, r2, #8
 8006c72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f042 0201 	orr.w	r2, r2, #1
 8006c82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 fff2 	bl	8007c6e <UART_CheckIdleState>
 8006c8a:	4603      	mov	r3, r0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3708      	adds	r7, #8
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b08a      	sub	sp, #40	; 0x28
 8006c98:	af02      	add	r7, sp, #8
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	603b      	str	r3, [r7, #0]
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006caa:	2b20      	cmp	r3, #32
 8006cac:	d173      	bne.n	8006d96 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d002      	beq.n	8006cba <HAL_UART_Transmit+0x26>
 8006cb4:	88fb      	ldrh	r3, [r7, #6]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d101      	bne.n	8006cbe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e06c      	b.n	8006d98 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2221      	movs	r2, #33	; 0x21
 8006cca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006cce:	f7fb fc39 	bl	8002544 <HAL_GetTick>
 8006cd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	88fa      	ldrh	r2, [r7, #6]
 8006cd8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	88fa      	ldrh	r2, [r7, #6]
 8006ce0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cec:	d108      	bne.n	8006d00 <HAL_UART_Transmit+0x6c>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d104      	bne.n	8006d00 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	61bb      	str	r3, [r7, #24]
 8006cfe:	e003      	b.n	8006d08 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d04:	2300      	movs	r3, #0
 8006d06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d08:	e02c      	b.n	8006d64 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	9300      	str	r3, [sp, #0]
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	2200      	movs	r2, #0
 8006d12:	2180      	movs	r1, #128	; 0x80
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f000 fff8 	bl	8007d0a <UART_WaitOnFlagUntilTimeout>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d001      	beq.n	8006d24 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e039      	b.n	8006d98 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d10b      	bne.n	8006d42 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	881b      	ldrh	r3, [r3, #0]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d38:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	3302      	adds	r3, #2
 8006d3e:	61bb      	str	r3, [r7, #24]
 8006d40:	e007      	b.n	8006d52 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	781a      	ldrb	r2, [r3, #0]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	3301      	adds	r3, #1
 8006d50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1cc      	bne.n	8006d0a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	9300      	str	r3, [sp, #0]
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	2200      	movs	r2, #0
 8006d78:	2140      	movs	r1, #64	; 0x40
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f000 ffc5 	bl	8007d0a <UART_WaitOnFlagUntilTimeout>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d001      	beq.n	8006d8a <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e006      	b.n	8006d98 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2220      	movs	r2, #32
 8006d8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006d92:	2300      	movs	r3, #0
 8006d94:	e000      	b.n	8006d98 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8006d96:	2302      	movs	r3, #2
  }
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3720      	adds	r7, #32
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b08a      	sub	sp, #40	; 0x28
 8006da4:	af02      	add	r7, sp, #8
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	603b      	str	r3, [r7, #0]
 8006dac:	4613      	mov	r3, r2
 8006dae:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006db6:	2b20      	cmp	r3, #32
 8006db8:	f040 80b1 	bne.w	8006f1e <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d002      	beq.n	8006dc8 <HAL_UART_Receive+0x28>
 8006dc2:	88fb      	ldrh	r3, [r7, #6]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d101      	bne.n	8006dcc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e0a9      	b.n	8006f20 <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2222      	movs	r2, #34	; 0x22
 8006dd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2200      	movs	r2, #0
 8006de0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006de2:	f7fb fbaf 	bl	8002544 <HAL_GetTick>
 8006de6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	88fa      	ldrh	r2, [r7, #6]
 8006dec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	88fa      	ldrh	r2, [r7, #6]
 8006df4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e00:	d10e      	bne.n	8006e20 <HAL_UART_Receive+0x80>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d105      	bne.n	8006e16 <HAL_UART_Receive+0x76>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006e10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006e14:	e02d      	b.n	8006e72 <HAL_UART_Receive+0xd2>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	22ff      	movs	r2, #255	; 0xff
 8006e1a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006e1e:	e028      	b.n	8006e72 <HAL_UART_Receive+0xd2>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d10d      	bne.n	8006e44 <HAL_UART_Receive+0xa4>
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d104      	bne.n	8006e3a <HAL_UART_Receive+0x9a>
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	22ff      	movs	r2, #255	; 0xff
 8006e34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006e38:	e01b      	b.n	8006e72 <HAL_UART_Receive+0xd2>
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	227f      	movs	r2, #127	; 0x7f
 8006e3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006e42:	e016      	b.n	8006e72 <HAL_UART_Receive+0xd2>
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e4c:	d10d      	bne.n	8006e6a <HAL_UART_Receive+0xca>
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d104      	bne.n	8006e60 <HAL_UART_Receive+0xc0>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	227f      	movs	r2, #127	; 0x7f
 8006e5a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006e5e:	e008      	b.n	8006e72 <HAL_UART_Receive+0xd2>
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	223f      	movs	r2, #63	; 0x3f
 8006e64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006e68:	e003      	b.n	8006e72 <HAL_UART_Receive+0xd2>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006e78:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e82:	d108      	bne.n	8006e96 <HAL_UART_Receive+0xf6>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d104      	bne.n	8006e96 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	61bb      	str	r3, [r7, #24]
 8006e94:	e003      	b.n	8006e9e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006e9e:	e032      	b.n	8006f06 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	9300      	str	r3, [sp, #0]
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	2120      	movs	r1, #32
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	f000 ff2d 	bl	8007d0a <UART_WaitOnFlagUntilTimeout>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d001      	beq.n	8006eba <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	e032      	b.n	8006f20 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d10c      	bne.n	8006eda <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec6:	b29a      	uxth	r2, r3
 8006ec8:	8a7b      	ldrh	r3, [r7, #18]
 8006eca:	4013      	ands	r3, r2
 8006ecc:	b29a      	uxth	r2, r3
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	3302      	adds	r3, #2
 8006ed6:	61bb      	str	r3, [r7, #24]
 8006ed8:	e00c      	b.n	8006ef4 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee0:	b2da      	uxtb	r2, r3
 8006ee2:	8a7b      	ldrh	r3, [r7, #18]
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	b2da      	uxtb	r2, r3
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	3b01      	subs	r3, #1
 8006efe:	b29a      	uxth	r2, r3
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1c6      	bne.n	8006ea0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2220      	movs	r2, #32
 8006f16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	e000      	b.n	8006f20 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8006f1e:	2302      	movs	r3, #2
  }
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3720      	adds	r7, #32
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b08a      	sub	sp, #40	; 0x28
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	4613      	mov	r3, r2
 8006f34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f3c:	2b20      	cmp	r3, #32
 8006f3e:	d137      	bne.n	8006fb0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d002      	beq.n	8006f4c <HAL_UART_Receive_IT+0x24>
 8006f46:	88fb      	ldrh	r3, [r7, #6]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d101      	bne.n	8006f50 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e030      	b.n	8006fb2 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2200      	movs	r2, #0
 8006f54:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a18      	ldr	r2, [pc, #96]	; (8006fbc <HAL_UART_Receive_IT+0x94>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d01f      	beq.n	8006fa0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d018      	beq.n	8006fa0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	e853 3f00 	ldrex	r3, [r3]
 8006f7a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006f82:	627b      	str	r3, [r7, #36]	; 0x24
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	461a      	mov	r2, r3
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8c:	623b      	str	r3, [r7, #32]
 8006f8e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f90:	69f9      	ldr	r1, [r7, #28]
 8006f92:	6a3a      	ldr	r2, [r7, #32]
 8006f94:	e841 2300 	strex	r3, r2, [r1]
 8006f98:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1e6      	bne.n	8006f6e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006fa0:	88fb      	ldrh	r3, [r7, #6]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	68b9      	ldr	r1, [r7, #8]
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f000 ff78 	bl	8007e9c <UART_Start_Receive_IT>
 8006fac:	4603      	mov	r3, r0
 8006fae:	e000      	b.n	8006fb2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006fb0:	2302      	movs	r3, #2
  }
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3728      	adds	r7, #40	; 0x28
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	40008000 	.word	0x40008000

08006fc0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b0ba      	sub	sp, #232	; 0xe8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	69db      	ldr	r3, [r3, #28]
 8006fce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006fe6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006fea:	f640 030f 	movw	r3, #2063	; 0x80f
 8006fee:	4013      	ands	r3, r2
 8006ff0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006ff4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d11b      	bne.n	8007034 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007000:	f003 0320 	and.w	r3, r3, #32
 8007004:	2b00      	cmp	r3, #0
 8007006:	d015      	beq.n	8007034 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800700c:	f003 0320 	and.w	r3, r3, #32
 8007010:	2b00      	cmp	r3, #0
 8007012:	d105      	bne.n	8007020 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007014:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800701c:	2b00      	cmp	r3, #0
 800701e:	d009      	beq.n	8007034 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007024:	2b00      	cmp	r3, #0
 8007026:	f000 82e3 	beq.w	80075f0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	4798      	blx	r3
      }
      return;
 8007032:	e2dd      	b.n	80075f0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007034:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007038:	2b00      	cmp	r3, #0
 800703a:	f000 8123 	beq.w	8007284 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800703e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007042:	4b8d      	ldr	r3, [pc, #564]	; (8007278 <HAL_UART_IRQHandler+0x2b8>)
 8007044:	4013      	ands	r3, r2
 8007046:	2b00      	cmp	r3, #0
 8007048:	d106      	bne.n	8007058 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800704a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800704e:	4b8b      	ldr	r3, [pc, #556]	; (800727c <HAL_UART_IRQHandler+0x2bc>)
 8007050:	4013      	ands	r3, r2
 8007052:	2b00      	cmp	r3, #0
 8007054:	f000 8116 	beq.w	8007284 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800705c:	f003 0301 	and.w	r3, r3, #1
 8007060:	2b00      	cmp	r3, #0
 8007062:	d011      	beq.n	8007088 <HAL_UART_IRQHandler+0xc8>
 8007064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800706c:	2b00      	cmp	r3, #0
 800706e:	d00b      	beq.n	8007088 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2201      	movs	r2, #1
 8007076:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800707e:	f043 0201 	orr.w	r2, r3, #1
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800708c:	f003 0302 	and.w	r3, r3, #2
 8007090:	2b00      	cmp	r3, #0
 8007092:	d011      	beq.n	80070b8 <HAL_UART_IRQHandler+0xf8>
 8007094:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007098:	f003 0301 	and.w	r3, r3, #1
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00b      	beq.n	80070b8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2202      	movs	r2, #2
 80070a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ae:	f043 0204 	orr.w	r2, r3, #4
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070bc:	f003 0304 	and.w	r3, r3, #4
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d011      	beq.n	80070e8 <HAL_UART_IRQHandler+0x128>
 80070c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070c8:	f003 0301 	and.w	r3, r3, #1
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d00b      	beq.n	80070e8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2204      	movs	r2, #4
 80070d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070de:	f043 0202 	orr.w	r2, r3, #2
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80070e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070ec:	f003 0308 	and.w	r3, r3, #8
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d017      	beq.n	8007124 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80070f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070f8:	f003 0320 	and.w	r3, r3, #32
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d105      	bne.n	800710c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007100:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007104:	4b5c      	ldr	r3, [pc, #368]	; (8007278 <HAL_UART_IRQHandler+0x2b8>)
 8007106:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00b      	beq.n	8007124 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2208      	movs	r2, #8
 8007112:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800711a:	f043 0208 	orr.w	r2, r3, #8
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007128:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800712c:	2b00      	cmp	r3, #0
 800712e:	d012      	beq.n	8007156 <HAL_UART_IRQHandler+0x196>
 8007130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007134:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007138:	2b00      	cmp	r3, #0
 800713a:	d00c      	beq.n	8007156 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007144:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800714c:	f043 0220 	orr.w	r2, r3, #32
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800715c:	2b00      	cmp	r3, #0
 800715e:	f000 8249 	beq.w	80075f4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007166:	f003 0320 	and.w	r3, r3, #32
 800716a:	2b00      	cmp	r3, #0
 800716c:	d013      	beq.n	8007196 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800716e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007172:	f003 0320 	and.w	r3, r3, #32
 8007176:	2b00      	cmp	r3, #0
 8007178:	d105      	bne.n	8007186 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800717a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800717e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007182:	2b00      	cmp	r3, #0
 8007184:	d007      	beq.n	8007196 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800718a:	2b00      	cmp	r3, #0
 800718c:	d003      	beq.n	8007196 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800719c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071aa:	2b40      	cmp	r3, #64	; 0x40
 80071ac:	d005      	beq.n	80071ba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80071ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d054      	beq.n	8007264 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 ff8e 	bl	80080dc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ca:	2b40      	cmp	r3, #64	; 0x40
 80071cc:	d146      	bne.n	800725c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	3308      	adds	r3, #8
 80071d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071dc:	e853 3f00 	ldrex	r3, [r3]
 80071e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80071e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	3308      	adds	r3, #8
 80071f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80071fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80071fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007202:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007206:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800720a:	e841 2300 	strex	r3, r2, [r1]
 800720e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007212:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1d9      	bne.n	80071ce <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007220:	2b00      	cmp	r3, #0
 8007222:	d017      	beq.n	8007254 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800722a:	4a15      	ldr	r2, [pc, #84]	; (8007280 <HAL_UART_IRQHandler+0x2c0>)
 800722c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007234:	4618      	mov	r0, r3
 8007236:	f7fc fae8 	bl	800380a <HAL_DMA_Abort_IT>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d019      	beq.n	8007274 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800724e:	4610      	mov	r0, r2
 8007250:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007252:	e00f      	b.n	8007274 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 f9e0 	bl	800761a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800725a:	e00b      	b.n	8007274 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 f9dc 	bl	800761a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007262:	e007      	b.n	8007274 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 f9d8 	bl	800761a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007272:	e1bf      	b.n	80075f4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007274:	bf00      	nop
    return;
 8007276:	e1bd      	b.n	80075f4 <HAL_UART_IRQHandler+0x634>
 8007278:	10000001 	.word	0x10000001
 800727c:	04000120 	.word	0x04000120
 8007280:	080081a7 	.word	0x080081a7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007288:	2b01      	cmp	r3, #1
 800728a:	f040 8153 	bne.w	8007534 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800728e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007292:	f003 0310 	and.w	r3, r3, #16
 8007296:	2b00      	cmp	r3, #0
 8007298:	f000 814c 	beq.w	8007534 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800729c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072a0:	f003 0310 	and.w	r3, r3, #16
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f000 8145 	beq.w	8007534 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2210      	movs	r2, #16
 80072b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072bc:	2b40      	cmp	r3, #64	; 0x40
 80072be:	f040 80bb 	bne.w	8007438 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80072d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f000 818f 	beq.w	80075f8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80072e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80072e4:	429a      	cmp	r2, r3
 80072e6:	f080 8187 	bcs.w	80075f8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80072f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f003 0320 	and.w	r3, r3, #32
 8007302:	2b00      	cmp	r3, #0
 8007304:	f040 8087 	bne.w	8007416 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007310:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007314:	e853 3f00 	ldrex	r3, [r3]
 8007318:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800731c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007320:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007324:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	461a      	mov	r2, r3
 800732e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007332:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007336:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800733e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007342:	e841 2300 	strex	r3, r2, [r1]
 8007346:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800734a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800734e:	2b00      	cmp	r3, #0
 8007350:	d1da      	bne.n	8007308 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	3308      	adds	r3, #8
 8007358:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800735c:	e853 3f00 	ldrex	r3, [r3]
 8007360:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007362:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007364:	f023 0301 	bic.w	r3, r3, #1
 8007368:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	3308      	adds	r3, #8
 8007372:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007376:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800737a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800737e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007382:	e841 2300 	strex	r3, r2, [r1]
 8007386:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007388:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1e1      	bne.n	8007352 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	3308      	adds	r3, #8
 8007394:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007396:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007398:	e853 3f00 	ldrex	r3, [r3]
 800739c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800739e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	3308      	adds	r3, #8
 80073ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80073b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80073b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80073b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80073ba:	e841 2300 	strex	r3, r2, [r1]
 80073be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80073c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1e3      	bne.n	800738e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2220      	movs	r2, #32
 80073ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073dc:	e853 3f00 	ldrex	r3, [r3]
 80073e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80073e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073e4:	f023 0310 	bic.w	r3, r3, #16
 80073e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	461a      	mov	r2, r3
 80073f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80073f8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80073fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80073fe:	e841 2300 	strex	r3, r2, [r1]
 8007402:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1e4      	bne.n	80073d4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007410:	4618      	mov	r0, r3
 8007412:	f7fc f99c 	bl	800374e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2202      	movs	r2, #2
 800741a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007428:	b29b      	uxth	r3, r3
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	b29b      	uxth	r3, r3
 800742e:	4619      	mov	r1, r3
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 f8fb 	bl	800762c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007436:	e0df      	b.n	80075f8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007444:	b29b      	uxth	r3, r3
 8007446:	1ad3      	subs	r3, r2, r3
 8007448:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007452:	b29b      	uxth	r3, r3
 8007454:	2b00      	cmp	r3, #0
 8007456:	f000 80d1 	beq.w	80075fc <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800745a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800745e:	2b00      	cmp	r3, #0
 8007460:	f000 80cc 	beq.w	80075fc <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800746c:	e853 3f00 	ldrex	r3, [r3]
 8007470:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007474:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007478:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	461a      	mov	r2, r3
 8007482:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007486:	647b      	str	r3, [r7, #68]	; 0x44
 8007488:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800748c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800748e:	e841 2300 	strex	r3, r2, [r1]
 8007492:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007496:	2b00      	cmp	r3, #0
 8007498:	d1e4      	bne.n	8007464 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	3308      	adds	r3, #8
 80074a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a4:	e853 3f00 	ldrex	r3, [r3]
 80074a8:	623b      	str	r3, [r7, #32]
   return(result);
 80074aa:	6a3b      	ldr	r3, [r7, #32]
 80074ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074b0:	f023 0301 	bic.w	r3, r3, #1
 80074b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	3308      	adds	r3, #8
 80074be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80074c2:	633a      	str	r2, [r7, #48]	; 0x30
 80074c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074ca:	e841 2300 	strex	r3, r2, [r1]
 80074ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d1e1      	bne.n	800749a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2220      	movs	r2, #32
 80074da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	e853 3f00 	ldrex	r3, [r3]
 80074f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f023 0310 	bic.w	r3, r3, #16
 80074fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	461a      	mov	r2, r3
 8007508:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800750c:	61fb      	str	r3, [r7, #28]
 800750e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007510:	69b9      	ldr	r1, [r7, #24]
 8007512:	69fa      	ldr	r2, [r7, #28]
 8007514:	e841 2300 	strex	r3, r2, [r1]
 8007518:	617b      	str	r3, [r7, #20]
   return(result);
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d1e4      	bne.n	80074ea <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2202      	movs	r2, #2
 8007524:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007526:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800752a:	4619      	mov	r1, r3
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 f87d 	bl	800762c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007532:	e063      	b.n	80075fc <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007538:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00e      	beq.n	800755e <HAL_UART_IRQHandler+0x59e>
 8007540:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007544:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007548:	2b00      	cmp	r3, #0
 800754a:	d008      	beq.n	800755e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007554:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f001 fb82 	bl	8008c60 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800755c:	e051      	b.n	8007602 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800755e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007566:	2b00      	cmp	r3, #0
 8007568:	d014      	beq.n	8007594 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800756a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800756e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007572:	2b00      	cmp	r3, #0
 8007574:	d105      	bne.n	8007582 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007576:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800757a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800757e:	2b00      	cmp	r3, #0
 8007580:	d008      	beq.n	8007594 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007586:	2b00      	cmp	r3, #0
 8007588:	d03a      	beq.n	8007600 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	4798      	blx	r3
    }
    return;
 8007592:	e035      	b.n	8007600 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800759c:	2b00      	cmp	r3, #0
 800759e:	d009      	beq.n	80075b4 <HAL_UART_IRQHandler+0x5f4>
 80075a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d003      	beq.n	80075b4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 fe10 	bl	80081d2 <UART_EndTransmit_IT>
    return;
 80075b2:	e026      	b.n	8007602 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80075b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d009      	beq.n	80075d4 <HAL_UART_IRQHandler+0x614>
 80075c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d003      	beq.n	80075d4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f001 fb59 	bl	8008c84 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80075d2:	e016      	b.n	8007602 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80075d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d010      	beq.n	8007602 <HAL_UART_IRQHandler+0x642>
 80075e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	da0c      	bge.n	8007602 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f001 fb42 	bl	8008c72 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80075ee:	e008      	b.n	8007602 <HAL_UART_IRQHandler+0x642>
      return;
 80075f0:	bf00      	nop
 80075f2:	e006      	b.n	8007602 <HAL_UART_IRQHandler+0x642>
    return;
 80075f4:	bf00      	nop
 80075f6:	e004      	b.n	8007602 <HAL_UART_IRQHandler+0x642>
      return;
 80075f8:	bf00      	nop
 80075fa:	e002      	b.n	8007602 <HAL_UART_IRQHandler+0x642>
      return;
 80075fc:	bf00      	nop
 80075fe:	e000      	b.n	8007602 <HAL_UART_IRQHandler+0x642>
    return;
 8007600:	bf00      	nop
  }
}
 8007602:	37e8      	adds	r7, #232	; 0xe8
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007610:	bf00      	nop
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	bc80      	pop	{r7}
 8007618:	4770      	bx	lr

0800761a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800761a:	b480      	push	{r7}
 800761c:	b083      	sub	sp, #12
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007622:	bf00      	nop
 8007624:	370c      	adds	r7, #12
 8007626:	46bd      	mov	sp, r7
 8007628:	bc80      	pop	{r7}
 800762a:	4770      	bx	lr

0800762c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	460b      	mov	r3, r1
 8007636:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007638:	bf00      	nop
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	bc80      	pop	{r7}
 8007640:	4770      	bx	lr
	...

08007644 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007644:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007648:	b08c      	sub	sp, #48	; 0x30
 800764a:	af00      	add	r7, sp, #0
 800764c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800764e:	2300      	movs	r3, #0
 8007650:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	689a      	ldr	r2, [r3, #8]
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	691b      	ldr	r3, [r3, #16]
 800765c:	431a      	orrs	r2, r3
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	695b      	ldr	r3, [r3, #20]
 8007662:	431a      	orrs	r2, r3
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	69db      	ldr	r3, [r3, #28]
 8007668:	4313      	orrs	r3, r2
 800766a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	4b94      	ldr	r3, [pc, #592]	; (80078c4 <UART_SetConfig+0x280>)
 8007674:	4013      	ands	r3, r2
 8007676:	697a      	ldr	r2, [r7, #20]
 8007678:	6812      	ldr	r2, [r2, #0]
 800767a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800767c:	430b      	orrs	r3, r1
 800767e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	68da      	ldr	r2, [r3, #12]
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	430a      	orrs	r2, r1
 8007694:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	699b      	ldr	r3, [r3, #24]
 800769a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a89      	ldr	r2, [pc, #548]	; (80078c8 <UART_SetConfig+0x284>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d004      	beq.n	80076b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	6a1b      	ldr	r3, [r3, #32]
 80076aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076ac:	4313      	orrs	r3, r2
 80076ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80076ba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80076be:	697a      	ldr	r2, [r7, #20]
 80076c0:	6812      	ldr	r2, [r2, #0]
 80076c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076c4:	430b      	orrs	r3, r1
 80076c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ce:	f023 010f 	bic.w	r1, r3, #15
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	430a      	orrs	r2, r1
 80076dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a7a      	ldr	r2, [pc, #488]	; (80078cc <UART_SetConfig+0x288>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d127      	bne.n	8007738 <UART_SetConfig+0xf4>
 80076e8:	2003      	movs	r0, #3
 80076ea:	f7ff fa0a 	bl	8006b02 <LL_RCC_GetUSARTClockSource>
 80076ee:	4603      	mov	r3, r0
 80076f0:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80076f4:	2b03      	cmp	r3, #3
 80076f6:	d81b      	bhi.n	8007730 <UART_SetConfig+0xec>
 80076f8:	a201      	add	r2, pc, #4	; (adr r2, 8007700 <UART_SetConfig+0xbc>)
 80076fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fe:	bf00      	nop
 8007700:	08007711 	.word	0x08007711
 8007704:	08007721 	.word	0x08007721
 8007708:	08007719 	.word	0x08007719
 800770c:	08007729 	.word	0x08007729
 8007710:	2301      	movs	r3, #1
 8007712:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007716:	e080      	b.n	800781a <UART_SetConfig+0x1d6>
 8007718:	2302      	movs	r3, #2
 800771a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800771e:	e07c      	b.n	800781a <UART_SetConfig+0x1d6>
 8007720:	2304      	movs	r3, #4
 8007722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007726:	e078      	b.n	800781a <UART_SetConfig+0x1d6>
 8007728:	2308      	movs	r3, #8
 800772a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800772e:	e074      	b.n	800781a <UART_SetConfig+0x1d6>
 8007730:	2310      	movs	r3, #16
 8007732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007736:	e070      	b.n	800781a <UART_SetConfig+0x1d6>
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a64      	ldr	r2, [pc, #400]	; (80078d0 <UART_SetConfig+0x28c>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d138      	bne.n	80077b4 <UART_SetConfig+0x170>
 8007742:	200c      	movs	r0, #12
 8007744:	f7ff f9dd 	bl	8006b02 <LL_RCC_GetUSARTClockSource>
 8007748:	4603      	mov	r3, r0
 800774a:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800774e:	2b0c      	cmp	r3, #12
 8007750:	d82c      	bhi.n	80077ac <UART_SetConfig+0x168>
 8007752:	a201      	add	r2, pc, #4	; (adr r2, 8007758 <UART_SetConfig+0x114>)
 8007754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007758:	0800778d 	.word	0x0800778d
 800775c:	080077ad 	.word	0x080077ad
 8007760:	080077ad 	.word	0x080077ad
 8007764:	080077ad 	.word	0x080077ad
 8007768:	0800779d 	.word	0x0800779d
 800776c:	080077ad 	.word	0x080077ad
 8007770:	080077ad 	.word	0x080077ad
 8007774:	080077ad 	.word	0x080077ad
 8007778:	08007795 	.word	0x08007795
 800777c:	080077ad 	.word	0x080077ad
 8007780:	080077ad 	.word	0x080077ad
 8007784:	080077ad 	.word	0x080077ad
 8007788:	080077a5 	.word	0x080077a5
 800778c:	2300      	movs	r3, #0
 800778e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007792:	e042      	b.n	800781a <UART_SetConfig+0x1d6>
 8007794:	2302      	movs	r3, #2
 8007796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800779a:	e03e      	b.n	800781a <UART_SetConfig+0x1d6>
 800779c:	2304      	movs	r3, #4
 800779e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077a2:	e03a      	b.n	800781a <UART_SetConfig+0x1d6>
 80077a4:	2308      	movs	r3, #8
 80077a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077aa:	e036      	b.n	800781a <UART_SetConfig+0x1d6>
 80077ac:	2310      	movs	r3, #16
 80077ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077b2:	e032      	b.n	800781a <UART_SetConfig+0x1d6>
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a43      	ldr	r2, [pc, #268]	; (80078c8 <UART_SetConfig+0x284>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d12a      	bne.n	8007814 <UART_SetConfig+0x1d0>
 80077be:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80077c2:	f7ff f9b0 	bl	8006b26 <LL_RCC_GetLPUARTClockSource>
 80077c6:	4603      	mov	r3, r0
 80077c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80077cc:	d01a      	beq.n	8007804 <UART_SetConfig+0x1c0>
 80077ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80077d2:	d81b      	bhi.n	800780c <UART_SetConfig+0x1c8>
 80077d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077d8:	d00c      	beq.n	80077f4 <UART_SetConfig+0x1b0>
 80077da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077de:	d815      	bhi.n	800780c <UART_SetConfig+0x1c8>
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d003      	beq.n	80077ec <UART_SetConfig+0x1a8>
 80077e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077e8:	d008      	beq.n	80077fc <UART_SetConfig+0x1b8>
 80077ea:	e00f      	b.n	800780c <UART_SetConfig+0x1c8>
 80077ec:	2300      	movs	r3, #0
 80077ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077f2:	e012      	b.n	800781a <UART_SetConfig+0x1d6>
 80077f4:	2302      	movs	r3, #2
 80077f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077fa:	e00e      	b.n	800781a <UART_SetConfig+0x1d6>
 80077fc:	2304      	movs	r3, #4
 80077fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007802:	e00a      	b.n	800781a <UART_SetConfig+0x1d6>
 8007804:	2308      	movs	r3, #8
 8007806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800780a:	e006      	b.n	800781a <UART_SetConfig+0x1d6>
 800780c:	2310      	movs	r3, #16
 800780e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007812:	e002      	b.n	800781a <UART_SetConfig+0x1d6>
 8007814:	2310      	movs	r3, #16
 8007816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a2a      	ldr	r2, [pc, #168]	; (80078c8 <UART_SetConfig+0x284>)
 8007820:	4293      	cmp	r3, r2
 8007822:	f040 80a4 	bne.w	800796e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007826:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800782a:	2b08      	cmp	r3, #8
 800782c:	d823      	bhi.n	8007876 <UART_SetConfig+0x232>
 800782e:	a201      	add	r2, pc, #4	; (adr r2, 8007834 <UART_SetConfig+0x1f0>)
 8007830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007834:	08007859 	.word	0x08007859
 8007838:	08007877 	.word	0x08007877
 800783c:	08007861 	.word	0x08007861
 8007840:	08007877 	.word	0x08007877
 8007844:	08007867 	.word	0x08007867
 8007848:	08007877 	.word	0x08007877
 800784c:	08007877 	.word	0x08007877
 8007850:	08007877 	.word	0x08007877
 8007854:	0800786f 	.word	0x0800786f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007858:	f7fd fad6 	bl	8004e08 <HAL_RCC_GetPCLK1Freq>
 800785c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800785e:	e010      	b.n	8007882 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007860:	4b1c      	ldr	r3, [pc, #112]	; (80078d4 <UART_SetConfig+0x290>)
 8007862:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007864:	e00d      	b.n	8007882 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007866:	f7fd fa1b 	bl	8004ca0 <HAL_RCC_GetSysClockFreq>
 800786a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800786c:	e009      	b.n	8007882 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800786e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007872:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007874:	e005      	b.n	8007882 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8007876:	2300      	movs	r3, #0
 8007878:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007880:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007884:	2b00      	cmp	r3, #0
 8007886:	f000 8137 	beq.w	8007af8 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788e:	4a12      	ldr	r2, [pc, #72]	; (80078d8 <UART_SetConfig+0x294>)
 8007890:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007894:	461a      	mov	r2, r3
 8007896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007898:	fbb3 f3f2 	udiv	r3, r3, r2
 800789c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	685a      	ldr	r2, [r3, #4]
 80078a2:	4613      	mov	r3, r2
 80078a4:	005b      	lsls	r3, r3, #1
 80078a6:	4413      	add	r3, r2
 80078a8:	69ba      	ldr	r2, [r7, #24]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d305      	bcc.n	80078ba <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80078b4:	69ba      	ldr	r2, [r7, #24]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d910      	bls.n	80078dc <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80078c0:	e11a      	b.n	8007af8 <UART_SetConfig+0x4b4>
 80078c2:	bf00      	nop
 80078c4:	cfff69f3 	.word	0xcfff69f3
 80078c8:	40008000 	.word	0x40008000
 80078cc:	40013800 	.word	0x40013800
 80078d0:	40004400 	.word	0x40004400
 80078d4:	00f42400 	.word	0x00f42400
 80078d8:	0800dca0 	.word	0x0800dca0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078de:	2200      	movs	r2, #0
 80078e0:	60bb      	str	r3, [r7, #8]
 80078e2:	60fa      	str	r2, [r7, #12]
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e8:	4a8e      	ldr	r2, [pc, #568]	; (8007b24 <UART_SetConfig+0x4e0>)
 80078ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	2200      	movs	r2, #0
 80078f2:	603b      	str	r3, [r7, #0]
 80078f4:	607a      	str	r2, [r7, #4]
 80078f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80078fe:	f7f9 fa51 	bl	8000da4 <__aeabi_uldivmod>
 8007902:	4602      	mov	r2, r0
 8007904:	460b      	mov	r3, r1
 8007906:	4610      	mov	r0, r2
 8007908:	4619      	mov	r1, r3
 800790a:	f04f 0200 	mov.w	r2, #0
 800790e:	f04f 0300 	mov.w	r3, #0
 8007912:	020b      	lsls	r3, r1, #8
 8007914:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007918:	0202      	lsls	r2, r0, #8
 800791a:	6979      	ldr	r1, [r7, #20]
 800791c:	6849      	ldr	r1, [r1, #4]
 800791e:	0849      	lsrs	r1, r1, #1
 8007920:	2000      	movs	r0, #0
 8007922:	460c      	mov	r4, r1
 8007924:	4605      	mov	r5, r0
 8007926:	eb12 0804 	adds.w	r8, r2, r4
 800792a:	eb43 0905 	adc.w	r9, r3, r5
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	469a      	mov	sl, r3
 8007936:	4693      	mov	fp, r2
 8007938:	4652      	mov	r2, sl
 800793a:	465b      	mov	r3, fp
 800793c:	4640      	mov	r0, r8
 800793e:	4649      	mov	r1, r9
 8007940:	f7f9 fa30 	bl	8000da4 <__aeabi_uldivmod>
 8007944:	4602      	mov	r2, r0
 8007946:	460b      	mov	r3, r1
 8007948:	4613      	mov	r3, r2
 800794a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800794c:	6a3b      	ldr	r3, [r7, #32]
 800794e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007952:	d308      	bcc.n	8007966 <UART_SetConfig+0x322>
 8007954:	6a3b      	ldr	r3, [r7, #32]
 8007956:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800795a:	d204      	bcs.n	8007966 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6a3a      	ldr	r2, [r7, #32]
 8007962:	60da      	str	r2, [r3, #12]
 8007964:	e0c8      	b.n	8007af8 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800796c:	e0c4      	b.n	8007af8 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	69db      	ldr	r3, [r3, #28]
 8007972:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007976:	d167      	bne.n	8007a48 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8007978:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800797c:	2b08      	cmp	r3, #8
 800797e:	d828      	bhi.n	80079d2 <UART_SetConfig+0x38e>
 8007980:	a201      	add	r2, pc, #4	; (adr r2, 8007988 <UART_SetConfig+0x344>)
 8007982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007986:	bf00      	nop
 8007988:	080079ad 	.word	0x080079ad
 800798c:	080079b5 	.word	0x080079b5
 8007990:	080079bd 	.word	0x080079bd
 8007994:	080079d3 	.word	0x080079d3
 8007998:	080079c3 	.word	0x080079c3
 800799c:	080079d3 	.word	0x080079d3
 80079a0:	080079d3 	.word	0x080079d3
 80079a4:	080079d3 	.word	0x080079d3
 80079a8:	080079cb 	.word	0x080079cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079ac:	f7fd fa2c 	bl	8004e08 <HAL_RCC_GetPCLK1Freq>
 80079b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80079b2:	e014      	b.n	80079de <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079b4:	f7fd fa3a 	bl	8004e2c <HAL_RCC_GetPCLK2Freq>
 80079b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80079ba:	e010      	b.n	80079de <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079bc:	4b5a      	ldr	r3, [pc, #360]	; (8007b28 <UART_SetConfig+0x4e4>)
 80079be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80079c0:	e00d      	b.n	80079de <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079c2:	f7fd f96d 	bl	8004ca0 <HAL_RCC_GetSysClockFreq>
 80079c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80079c8:	e009      	b.n	80079de <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80079d0:	e005      	b.n	80079de <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80079d2:	2300      	movs	r3, #0
 80079d4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80079dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80079de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f000 8089 	beq.w	8007af8 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ea:	4a4e      	ldr	r2, [pc, #312]	; (8007b24 <UART_SetConfig+0x4e0>)
 80079ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079f0:	461a      	mov	r2, r3
 80079f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80079f8:	005a      	lsls	r2, r3, #1
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	085b      	lsrs	r3, r3, #1
 8007a00:	441a      	add	r2, r3
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a0a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a0c:	6a3b      	ldr	r3, [r7, #32]
 8007a0e:	2b0f      	cmp	r3, #15
 8007a10:	d916      	bls.n	8007a40 <UART_SetConfig+0x3fc>
 8007a12:	6a3b      	ldr	r3, [r7, #32]
 8007a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a18:	d212      	bcs.n	8007a40 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a1a:	6a3b      	ldr	r3, [r7, #32]
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	f023 030f 	bic.w	r3, r3, #15
 8007a22:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a24:	6a3b      	ldr	r3, [r7, #32]
 8007a26:	085b      	lsrs	r3, r3, #1
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	f003 0307 	and.w	r3, r3, #7
 8007a2e:	b29a      	uxth	r2, r3
 8007a30:	8bfb      	ldrh	r3, [r7, #30]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	8bfa      	ldrh	r2, [r7, #30]
 8007a3c:	60da      	str	r2, [r3, #12]
 8007a3e:	e05b      	b.n	8007af8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8007a40:	2301      	movs	r3, #1
 8007a42:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007a46:	e057      	b.n	8007af8 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007a4c:	2b08      	cmp	r3, #8
 8007a4e:	d828      	bhi.n	8007aa2 <UART_SetConfig+0x45e>
 8007a50:	a201      	add	r2, pc, #4	; (adr r2, 8007a58 <UART_SetConfig+0x414>)
 8007a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a56:	bf00      	nop
 8007a58:	08007a7d 	.word	0x08007a7d
 8007a5c:	08007a85 	.word	0x08007a85
 8007a60:	08007a8d 	.word	0x08007a8d
 8007a64:	08007aa3 	.word	0x08007aa3
 8007a68:	08007a93 	.word	0x08007a93
 8007a6c:	08007aa3 	.word	0x08007aa3
 8007a70:	08007aa3 	.word	0x08007aa3
 8007a74:	08007aa3 	.word	0x08007aa3
 8007a78:	08007a9b 	.word	0x08007a9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a7c:	f7fd f9c4 	bl	8004e08 <HAL_RCC_GetPCLK1Freq>
 8007a80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007a82:	e014      	b.n	8007aae <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a84:	f7fd f9d2 	bl	8004e2c <HAL_RCC_GetPCLK2Freq>
 8007a88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007a8a:	e010      	b.n	8007aae <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a8c:	4b26      	ldr	r3, [pc, #152]	; (8007b28 <UART_SetConfig+0x4e4>)
 8007a8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007a90:	e00d      	b.n	8007aae <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a92:	f7fd f905 	bl	8004ca0 <HAL_RCC_GetSysClockFreq>
 8007a96:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007a98:	e009      	b.n	8007aae <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007aa0:	e005      	b.n	8007aae <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007aac:	bf00      	nop
    }

    if (pclk != 0U)
 8007aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d021      	beq.n	8007af8 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab8:	4a1a      	ldr	r2, [pc, #104]	; (8007b24 <UART_SetConfig+0x4e0>)
 8007aba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007abe:	461a      	mov	r2, r3
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac2:	fbb3 f2f2 	udiv	r2, r3, r2
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	085b      	lsrs	r3, r3, #1
 8007acc:	441a      	add	r2, r3
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ad6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ad8:	6a3b      	ldr	r3, [r7, #32]
 8007ada:	2b0f      	cmp	r3, #15
 8007adc:	d909      	bls.n	8007af2 <UART_SetConfig+0x4ae>
 8007ade:	6a3b      	ldr	r3, [r7, #32]
 8007ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ae4:	d205      	bcs.n	8007af2 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ae6:	6a3b      	ldr	r3, [r7, #32]
 8007ae8:	b29a      	uxth	r2, r3
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	60da      	str	r2, [r3, #12]
 8007af0:	e002      	b.n	8007af8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	2201      	movs	r2, #1
 8007afc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	2200      	movs	r2, #0
 8007b12:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007b14:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3730      	adds	r7, #48	; 0x30
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b22:	bf00      	nop
 8007b24:	0800dca0 	.word	0x0800dca0
 8007b28:	00f42400 	.word	0x00f42400

08007b2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b38:	f003 0301 	and.w	r3, r3, #1
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d00a      	beq.n	8007b56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	430a      	orrs	r2, r1
 8007b54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b5a:	f003 0302 	and.w	r3, r3, #2
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d00a      	beq.n	8007b78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	430a      	orrs	r2, r1
 8007b76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b7c:	f003 0304 	and.w	r3, r3, #4
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00a      	beq.n	8007b9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	430a      	orrs	r2, r1
 8007b98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b9e:	f003 0308 	and.w	r3, r3, #8
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d00a      	beq.n	8007bbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	430a      	orrs	r2, r1
 8007bba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc0:	f003 0310 	and.w	r3, r3, #16
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d00a      	beq.n	8007bde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	430a      	orrs	r2, r1
 8007bdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be2:	f003 0320 	and.w	r3, r3, #32
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d00a      	beq.n	8007c00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	430a      	orrs	r2, r1
 8007bfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d01a      	beq.n	8007c42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	430a      	orrs	r2, r1
 8007c20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c2a:	d10a      	bne.n	8007c42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	430a      	orrs	r2, r1
 8007c40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00a      	beq.n	8007c64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	430a      	orrs	r2, r1
 8007c62:	605a      	str	r2, [r3, #4]
  }
}
 8007c64:	bf00      	nop
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bc80      	pop	{r7}
 8007c6c:	4770      	bx	lr

08007c6e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b086      	sub	sp, #24
 8007c72:	af02      	add	r7, sp, #8
 8007c74:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c7e:	f7fa fc61 	bl	8002544 <HAL_GetTick>
 8007c82:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f003 0308 	and.w	r3, r3, #8
 8007c8e:	2b08      	cmp	r3, #8
 8007c90:	d10e      	bne.n	8007cb0 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 f832 	bl	8007d0a <UART_WaitOnFlagUntilTimeout>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d001      	beq.n	8007cb0 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cac:	2303      	movs	r3, #3
 8007cae:	e028      	b.n	8007d02 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f003 0304 	and.w	r3, r3, #4
 8007cba:	2b04      	cmp	r3, #4
 8007cbc:	d10e      	bne.n	8007cdc <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cbe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007cc2:	9300      	str	r3, [sp, #0]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 f81c 	bl	8007d0a <UART_WaitOnFlagUntilTimeout>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d001      	beq.n	8007cdc <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cd8:	2303      	movs	r3, #3
 8007cda:	e012      	b.n	8007d02 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2220      	movs	r2, #32
 8007ce0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2220      	movs	r2, #32
 8007ce8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3710      	adds	r7, #16
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}

08007d0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d0a:	b580      	push	{r7, lr}
 8007d0c:	b09c      	sub	sp, #112	; 0x70
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	60f8      	str	r0, [r7, #12]
 8007d12:	60b9      	str	r1, [r7, #8]
 8007d14:	603b      	str	r3, [r7, #0]
 8007d16:	4613      	mov	r3, r2
 8007d18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d1a:	e0a9      	b.n	8007e70 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d22:	f000 80a5 	beq.w	8007e70 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d26:	f7fa fc0d 	bl	8002544 <HAL_GetTick>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	1ad3      	subs	r3, r2, r3
 8007d30:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d302      	bcc.n	8007d3c <UART_WaitOnFlagUntilTimeout+0x32>
 8007d36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d140      	bne.n	8007dbe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d44:	e853 3f00 	ldrex	r3, [r3]
 8007d48:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d50:	667b      	str	r3, [r7, #100]	; 0x64
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	461a      	mov	r2, r3
 8007d58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d5c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007d60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007d62:	e841 2300 	strex	r3, r2, [r1]
 8007d66:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007d68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1e6      	bne.n	8007d3c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	3308      	adds	r3, #8
 8007d74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d78:	e853 3f00 	ldrex	r3, [r3]
 8007d7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d80:	f023 0301 	bic.w	r3, r3, #1
 8007d84:	663b      	str	r3, [r7, #96]	; 0x60
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	3308      	adds	r3, #8
 8007d8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d8e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007d90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007d94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d96:	e841 2300 	strex	r3, r2, [r1]
 8007d9a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d1e5      	bne.n	8007d6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2220      	movs	r2, #32
 8007da6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2220      	movs	r2, #32
 8007dae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	e069      	b.n	8007e92 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f003 0304 	and.w	r3, r3, #4
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d051      	beq.n	8007e70 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	69db      	ldr	r3, [r3, #28]
 8007dd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dda:	d149      	bne.n	8007e70 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007de4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dee:	e853 3f00 	ldrex	r3, [r3]
 8007df2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007dfa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	461a      	mov	r2, r3
 8007e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e04:	637b      	str	r3, [r7, #52]	; 0x34
 8007e06:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e0c:	e841 2300 	strex	r3, r2, [r1]
 8007e10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d1e6      	bne.n	8007de6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	3308      	adds	r3, #8
 8007e1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	e853 3f00 	ldrex	r3, [r3]
 8007e26:	613b      	str	r3, [r7, #16]
   return(result);
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	f023 0301 	bic.w	r3, r3, #1
 8007e2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	3308      	adds	r3, #8
 8007e36:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e38:	623a      	str	r2, [r7, #32]
 8007e3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3c:	69f9      	ldr	r1, [r7, #28]
 8007e3e:	6a3a      	ldr	r2, [r7, #32]
 8007e40:	e841 2300 	strex	r3, r2, [r1]
 8007e44:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e46:	69bb      	ldr	r3, [r7, #24]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1e5      	bne.n	8007e18 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2220      	movs	r2, #32
 8007e50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2220      	movs	r2, #32
 8007e58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2220      	movs	r2, #32
 8007e60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007e6c:	2303      	movs	r3, #3
 8007e6e:	e010      	b.n	8007e92 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	69da      	ldr	r2, [r3, #28]
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	4013      	ands	r3, r2
 8007e7a:	68ba      	ldr	r2, [r7, #8]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	bf0c      	ite	eq
 8007e80:	2301      	moveq	r3, #1
 8007e82:	2300      	movne	r3, #0
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	461a      	mov	r2, r3
 8007e88:	79fb      	ldrb	r3, [r7, #7]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	f43f af46 	beq.w	8007d1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3770      	adds	r7, #112	; 0x70
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
	...

08007e9c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b0a3      	sub	sp, #140	; 0x8c
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	68ba      	ldr	r2, [r7, #8]
 8007eae:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	88fa      	ldrh	r2, [r7, #6]
 8007eb4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	88fa      	ldrh	r2, [r7, #6]
 8007ebc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ece:	d10e      	bne.n	8007eee <UART_Start_Receive_IT+0x52>
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d105      	bne.n	8007ee4 <UART_Start_Receive_IT+0x48>
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007ede:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ee2:	e02d      	b.n	8007f40 <UART_Start_Receive_IT+0xa4>
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	22ff      	movs	r2, #255	; 0xff
 8007ee8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007eec:	e028      	b.n	8007f40 <UART_Start_Receive_IT+0xa4>
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d10d      	bne.n	8007f12 <UART_Start_Receive_IT+0x76>
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d104      	bne.n	8007f08 <UART_Start_Receive_IT+0x6c>
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	22ff      	movs	r2, #255	; 0xff
 8007f02:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f06:	e01b      	b.n	8007f40 <UART_Start_Receive_IT+0xa4>
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	227f      	movs	r2, #127	; 0x7f
 8007f0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f10:	e016      	b.n	8007f40 <UART_Start_Receive_IT+0xa4>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f1a:	d10d      	bne.n	8007f38 <UART_Start_Receive_IT+0x9c>
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	691b      	ldr	r3, [r3, #16]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d104      	bne.n	8007f2e <UART_Start_Receive_IT+0x92>
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	227f      	movs	r2, #127	; 0x7f
 8007f28:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f2c:	e008      	b.n	8007f40 <UART_Start_Receive_IT+0xa4>
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	223f      	movs	r2, #63	; 0x3f
 8007f32:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f36:	e003      	b.n	8007f40 <UART_Start_Receive_IT+0xa4>
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2222      	movs	r2, #34	; 0x22
 8007f4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	3308      	adds	r3, #8
 8007f56:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f5a:	e853 3f00 	ldrex	r3, [r3]
 8007f5e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007f60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f62:	f043 0301 	orr.w	r3, r3, #1
 8007f66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	3308      	adds	r3, #8
 8007f70:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007f74:	673a      	str	r2, [r7, #112]	; 0x70
 8007f76:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f78:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007f7a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007f7c:	e841 2300 	strex	r3, r2, [r1]
 8007f80:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007f82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d1e3      	bne.n	8007f50 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f90:	d14f      	bne.n	8008032 <UART_Start_Receive_IT+0x196>
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007f98:	88fa      	ldrh	r2, [r7, #6]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d349      	bcc.n	8008032 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fa6:	d107      	bne.n	8007fb8 <UART_Start_Receive_IT+0x11c>
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	691b      	ldr	r3, [r3, #16]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d103      	bne.n	8007fb8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	4a46      	ldr	r2, [pc, #280]	; (80080cc <UART_Start_Receive_IT+0x230>)
 8007fb4:	675a      	str	r2, [r3, #116]	; 0x74
 8007fb6:	e002      	b.n	8007fbe <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	4a45      	ldr	r2, [pc, #276]	; (80080d0 <UART_Start_Receive_IT+0x234>)
 8007fbc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d01a      	beq.n	8007ffc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fce:	e853 3f00 	ldrex	r3, [r3]
 8007fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007fd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007fe8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007fea:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007fee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ff0:	e841 2300 	strex	r3, r2, [r1]
 8007ff4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007ff6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d1e4      	bne.n	8007fc6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	3308      	adds	r3, #8
 8008002:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008006:	e853 3f00 	ldrex	r3, [r3]
 800800a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800800c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008012:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	3308      	adds	r3, #8
 800801a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800801c:	64ba      	str	r2, [r7, #72]	; 0x48
 800801e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008020:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008022:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008024:	e841 2300 	strex	r3, r2, [r1]
 8008028:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800802a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800802c:	2b00      	cmp	r3, #0
 800802e:	d1e5      	bne.n	8007ffc <UART_Start_Receive_IT+0x160>
 8008030:	e046      	b.n	80080c0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800803a:	d107      	bne.n	800804c <UART_Start_Receive_IT+0x1b0>
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d103      	bne.n	800804c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	4a23      	ldr	r2, [pc, #140]	; (80080d4 <UART_Start_Receive_IT+0x238>)
 8008048:	675a      	str	r2, [r3, #116]	; 0x74
 800804a:	e002      	b.n	8008052 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	4a22      	ldr	r2, [pc, #136]	; (80080d8 <UART_Start_Receive_IT+0x23c>)
 8008050:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d019      	beq.n	800808e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008062:	e853 3f00 	ldrex	r3, [r3]
 8008066:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800806e:	677b      	str	r3, [r7, #116]	; 0x74
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	461a      	mov	r2, r3
 8008076:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008078:	637b      	str	r3, [r7, #52]	; 0x34
 800807a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800807e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008080:	e841 2300 	strex	r3, r2, [r1]
 8008084:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1e6      	bne.n	800805a <UART_Start_Receive_IT+0x1be>
 800808c:	e018      	b.n	80080c0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	e853 3f00 	ldrex	r3, [r3]
 800809a:	613b      	str	r3, [r7, #16]
   return(result);
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	f043 0320 	orr.w	r3, r3, #32
 80080a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	461a      	mov	r2, r3
 80080aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080ac:	623b      	str	r3, [r7, #32]
 80080ae:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b0:	69f9      	ldr	r1, [r7, #28]
 80080b2:	6a3a      	ldr	r2, [r7, #32]
 80080b4:	e841 2300 	strex	r3, r2, [r1]
 80080b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80080ba:	69bb      	ldr	r3, [r7, #24]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d1e6      	bne.n	800808e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	378c      	adds	r7, #140	; 0x8c
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bc80      	pop	{r7}
 80080ca:	4770      	bx	lr
 80080cc:	080088f9 	.word	0x080088f9
 80080d0:	08008599 	.word	0x08008599
 80080d4:	080083e1 	.word	0x080083e1
 80080d8:	08008229 	.word	0x08008229

080080dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80080dc:	b480      	push	{r7}
 80080de:	b095      	sub	sp, #84	; 0x54
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080ec:	e853 3f00 	ldrex	r3, [r3]
 80080f0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80080f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	461a      	mov	r2, r3
 8008100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008102:	643b      	str	r3, [r7, #64]	; 0x40
 8008104:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008106:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008108:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800810a:	e841 2300 	strex	r3, r2, [r1]
 800810e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008112:	2b00      	cmp	r3, #0
 8008114:	d1e6      	bne.n	80080e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	3308      	adds	r3, #8
 800811c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811e:	6a3b      	ldr	r3, [r7, #32]
 8008120:	e853 3f00 	ldrex	r3, [r3]
 8008124:	61fb      	str	r3, [r7, #28]
   return(result);
 8008126:	69fb      	ldr	r3, [r7, #28]
 8008128:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800812c:	f023 0301 	bic.w	r3, r3, #1
 8008130:	64bb      	str	r3, [r7, #72]	; 0x48
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	3308      	adds	r3, #8
 8008138:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800813a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800813c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008140:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008142:	e841 2300 	strex	r3, r2, [r1]
 8008146:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814a:	2b00      	cmp	r3, #0
 800814c:	d1e3      	bne.n	8008116 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008152:	2b01      	cmp	r3, #1
 8008154:	d118      	bne.n	8008188 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	e853 3f00 	ldrex	r3, [r3]
 8008162:	60bb      	str	r3, [r7, #8]
   return(result);
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	f023 0310 	bic.w	r3, r3, #16
 800816a:	647b      	str	r3, [r7, #68]	; 0x44
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	461a      	mov	r2, r3
 8008172:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008174:	61bb      	str	r3, [r7, #24]
 8008176:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008178:	6979      	ldr	r1, [r7, #20]
 800817a:	69ba      	ldr	r2, [r7, #24]
 800817c:	e841 2300 	strex	r3, r2, [r1]
 8008180:	613b      	str	r3, [r7, #16]
   return(result);
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d1e6      	bne.n	8008156 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2220      	movs	r2, #32
 800818c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800819c:	bf00      	nop
 800819e:	3754      	adds	r7, #84	; 0x54
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bc80      	pop	{r7}
 80081a4:	4770      	bx	lr

080081a6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b084      	sub	sp, #16
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2200      	movs	r2, #0
 80081c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	f7ff fa28 	bl	800761a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081ca:	bf00      	nop
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b088      	sub	sp, #32
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	e853 3f00 	ldrex	r3, [r3]
 80081e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081ee:	61fb      	str	r3, [r7, #28]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	461a      	mov	r2, r3
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	61bb      	str	r3, [r7, #24]
 80081fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081fc:	6979      	ldr	r1, [r7, #20]
 80081fe:	69ba      	ldr	r2, [r7, #24]
 8008200:	e841 2300 	strex	r3, r2, [r1]
 8008204:	613b      	str	r3, [r7, #16]
   return(result);
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d1e6      	bne.n	80081da <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2220      	movs	r2, #32
 8008210:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f7ff f9f4 	bl	8007608 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008220:	bf00      	nop
 8008222:	3720      	adds	r7, #32
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b09c      	sub	sp, #112	; 0x70
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008236:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008240:	2b22      	cmp	r3, #34	; 0x22
 8008242:	f040 80be 	bne.w	80083c2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008250:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008254:	b2d9      	uxtb	r1, r3
 8008256:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800825a:	b2da      	uxtb	r2, r3
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008260:	400a      	ands	r2, r1
 8008262:	b2d2      	uxtb	r2, r2
 8008264:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800826a:	1c5a      	adds	r2, r3, #1
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008276:	b29b      	uxth	r3, r3
 8008278:	3b01      	subs	r3, #1
 800827a:	b29a      	uxth	r2, r3
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008288:	b29b      	uxth	r3, r3
 800828a:	2b00      	cmp	r3, #0
 800828c:	f040 80a1 	bne.w	80083d2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008298:	e853 3f00 	ldrex	r3, [r3]
 800829c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800829e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	461a      	mov	r2, r3
 80082ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80082ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80082b0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80082b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80082b6:	e841 2300 	strex	r3, r2, [r1]
 80082ba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80082bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d1e6      	bne.n	8008290 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	3308      	adds	r3, #8
 80082c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082cc:	e853 3f00 	ldrex	r3, [r3]
 80082d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80082d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082d4:	f023 0301 	bic.w	r3, r3, #1
 80082d8:	667b      	str	r3, [r7, #100]	; 0x64
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	3308      	adds	r3, #8
 80082e0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80082e2:	647a      	str	r2, [r7, #68]	; 0x44
 80082e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80082e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082ea:	e841 2300 	strex	r3, r2, [r1]
 80082ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80082f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1e5      	bne.n	80082c2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2220      	movs	r2, #32
 80082fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a33      	ldr	r2, [pc, #204]	; (80083dc <UART_RxISR_8BIT+0x1b4>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d01f      	beq.n	8008354 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800831e:	2b00      	cmp	r3, #0
 8008320:	d018      	beq.n	8008354 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832a:	e853 3f00 	ldrex	r3, [r3]
 800832e:	623b      	str	r3, [r7, #32]
   return(result);
 8008330:	6a3b      	ldr	r3, [r7, #32]
 8008332:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008336:	663b      	str	r3, [r7, #96]	; 0x60
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	461a      	mov	r2, r3
 800833e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008340:	633b      	str	r3, [r7, #48]	; 0x30
 8008342:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008344:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008346:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008348:	e841 2300 	strex	r3, r2, [r1]
 800834c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800834e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008350:	2b00      	cmp	r3, #0
 8008352:	d1e6      	bne.n	8008322 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008358:	2b01      	cmp	r3, #1
 800835a:	d12e      	bne.n	80083ba <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	e853 3f00 	ldrex	r3, [r3]
 800836e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f023 0310 	bic.w	r3, r3, #16
 8008376:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	461a      	mov	r2, r3
 800837e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008380:	61fb      	str	r3, [r7, #28]
 8008382:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008384:	69b9      	ldr	r1, [r7, #24]
 8008386:	69fa      	ldr	r2, [r7, #28]
 8008388:	e841 2300 	strex	r3, r2, [r1]
 800838c:	617b      	str	r3, [r7, #20]
   return(result);
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d1e6      	bne.n	8008362 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	69db      	ldr	r3, [r3, #28]
 800839a:	f003 0310 	and.w	r3, r3, #16
 800839e:	2b10      	cmp	r3, #16
 80083a0:	d103      	bne.n	80083aa <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	2210      	movs	r2, #16
 80083a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80083b0:	4619      	mov	r1, r3
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f7ff f93a 	bl	800762c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80083b8:	e00b      	b.n	80083d2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f7f9 f9c0 	bl	8001740 <HAL_UART_RxCpltCallback>
}
 80083c0:	e007      	b.n	80083d2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	699a      	ldr	r2, [r3, #24]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f042 0208 	orr.w	r2, r2, #8
 80083d0:	619a      	str	r2, [r3, #24]
}
 80083d2:	bf00      	nop
 80083d4:	3770      	adds	r7, #112	; 0x70
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	40008000 	.word	0x40008000

080083e0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b09c      	sub	sp, #112	; 0x70
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80083ee:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083f8:	2b22      	cmp	r3, #34	; 0x22
 80083fa:	f040 80be 	bne.w	800857a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008404:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800840c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800840e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008412:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008416:	4013      	ands	r3, r2
 8008418:	b29a      	uxth	r2, r3
 800841a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800841c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008422:	1c9a      	adds	r2, r3, #2
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800842e:	b29b      	uxth	r3, r3
 8008430:	3b01      	subs	r3, #1
 8008432:	b29a      	uxth	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008440:	b29b      	uxth	r3, r3
 8008442:	2b00      	cmp	r3, #0
 8008444:	f040 80a1 	bne.w	800858a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800844e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008450:	e853 3f00 	ldrex	r3, [r3]
 8008454:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008458:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800845c:	667b      	str	r3, [r7, #100]	; 0x64
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	461a      	mov	r2, r3
 8008464:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008466:	657b      	str	r3, [r7, #84]	; 0x54
 8008468:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800846c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800846e:	e841 2300 	strex	r3, r2, [r1]
 8008472:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008476:	2b00      	cmp	r3, #0
 8008478:	d1e6      	bne.n	8008448 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	3308      	adds	r3, #8
 8008480:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008484:	e853 3f00 	ldrex	r3, [r3]
 8008488:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800848a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848c:	f023 0301 	bic.w	r3, r3, #1
 8008490:	663b      	str	r3, [r7, #96]	; 0x60
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	3308      	adds	r3, #8
 8008498:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800849a:	643a      	str	r2, [r7, #64]	; 0x40
 800849c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800849e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80084a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80084a2:	e841 2300 	strex	r3, r2, [r1]
 80084a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80084a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d1e5      	bne.n	800847a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2220      	movs	r2, #32
 80084b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a33      	ldr	r2, [pc, #204]	; (8008594 <UART_RxISR_16BIT+0x1b4>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d01f      	beq.n	800850c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d018      	beq.n	800850c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e0:	6a3b      	ldr	r3, [r7, #32]
 80084e2:	e853 3f00 	ldrex	r3, [r3]
 80084e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80084e8:	69fb      	ldr	r3, [r7, #28]
 80084ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80084ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	461a      	mov	r2, r3
 80084f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084fa:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008500:	e841 2300 	strex	r3, r2, [r1]
 8008504:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1e6      	bne.n	80084da <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008510:	2b01      	cmp	r3, #1
 8008512:	d12e      	bne.n	8008572 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	e853 3f00 	ldrex	r3, [r3]
 8008526:	60bb      	str	r3, [r7, #8]
   return(result);
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	f023 0310 	bic.w	r3, r3, #16
 800852e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	461a      	mov	r2, r3
 8008536:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008538:	61bb      	str	r3, [r7, #24]
 800853a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800853c:	6979      	ldr	r1, [r7, #20]
 800853e:	69ba      	ldr	r2, [r7, #24]
 8008540:	e841 2300 	strex	r3, r2, [r1]
 8008544:	613b      	str	r3, [r7, #16]
   return(result);
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d1e6      	bne.n	800851a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	69db      	ldr	r3, [r3, #28]
 8008552:	f003 0310 	and.w	r3, r3, #16
 8008556:	2b10      	cmp	r3, #16
 8008558:	d103      	bne.n	8008562 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	2210      	movs	r2, #16
 8008560:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008568:	4619      	mov	r1, r3
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f7ff f85e 	bl	800762c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008570:	e00b      	b.n	800858a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f7f9 f8e4 	bl	8001740 <HAL_UART_RxCpltCallback>
}
 8008578:	e007      	b.n	800858a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	699a      	ldr	r2, [r3, #24]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f042 0208 	orr.w	r2, r2, #8
 8008588:	619a      	str	r2, [r3, #24]
}
 800858a:	bf00      	nop
 800858c:	3770      	adds	r7, #112	; 0x70
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	40008000 	.word	0x40008000

08008598 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b0ac      	sub	sp, #176	; 0xb0
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80085a6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	69db      	ldr	r3, [r3, #28]
 80085b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085ce:	2b22      	cmp	r3, #34	; 0x22
 80085d0:	f040 8182 	bne.w	80088d8 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80085da:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80085de:	e125      	b.n	800882c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80085ea:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80085ee:	b2d9      	uxtb	r1, r3
 80085f0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80085f4:	b2da      	uxtb	r2, r3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085fa:	400a      	ands	r2, r1
 80085fc:	b2d2      	uxtb	r2, r2
 80085fe:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008604:	1c5a      	adds	r2, r3, #1
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008610:	b29b      	uxth	r3, r3
 8008612:	3b01      	subs	r3, #1
 8008614:	b29a      	uxth	r2, r3
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	69db      	ldr	r3, [r3, #28]
 8008622:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008626:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800862a:	f003 0307 	and.w	r3, r3, #7
 800862e:	2b00      	cmp	r3, #0
 8008630:	d053      	beq.n	80086da <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008632:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008636:	f003 0301 	and.w	r3, r3, #1
 800863a:	2b00      	cmp	r3, #0
 800863c:	d011      	beq.n	8008662 <UART_RxISR_8BIT_FIFOEN+0xca>
 800863e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008646:	2b00      	cmp	r3, #0
 8008648:	d00b      	beq.n	8008662 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	2201      	movs	r2, #1
 8008650:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008658:	f043 0201 	orr.w	r2, r3, #1
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008662:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008666:	f003 0302 	and.w	r3, r3, #2
 800866a:	2b00      	cmp	r3, #0
 800866c:	d011      	beq.n	8008692 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800866e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008672:	f003 0301 	and.w	r3, r3, #1
 8008676:	2b00      	cmp	r3, #0
 8008678:	d00b      	beq.n	8008692 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	2202      	movs	r2, #2
 8008680:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008688:	f043 0204 	orr.w	r2, r3, #4
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008692:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008696:	f003 0304 	and.w	r3, r3, #4
 800869a:	2b00      	cmp	r3, #0
 800869c:	d011      	beq.n	80086c2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800869e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80086a2:	f003 0301 	and.w	r3, r3, #1
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d00b      	beq.n	80086c2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2204      	movs	r2, #4
 80086b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086b8:	f043 0202 	orr.w	r2, r3, #2
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d006      	beq.n	80086da <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f7fe ffa4 	bl	800761a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2200      	movs	r2, #0
 80086d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f040 80a2 	bne.w	800882c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80086f0:	e853 3f00 	ldrex	r3, [r3]
 80086f4:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80086f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	461a      	mov	r2, r3
 8008706:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800870a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800870c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800870e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008710:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008712:	e841 2300 	strex	r3, r2, [r1]
 8008716:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8008718:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800871a:	2b00      	cmp	r3, #0
 800871c:	d1e4      	bne.n	80086e8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	3308      	adds	r3, #8
 8008724:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008726:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008728:	e853 3f00 	ldrex	r3, [r3]
 800872c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800872e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008730:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008734:	f023 0301 	bic.w	r3, r3, #1
 8008738:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	3308      	adds	r3, #8
 8008742:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008746:	66ba      	str	r2, [r7, #104]	; 0x68
 8008748:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800874c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800874e:	e841 2300 	strex	r3, r2, [r1]
 8008752:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008754:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008756:	2b00      	cmp	r3, #0
 8008758:	d1e1      	bne.n	800871e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2220      	movs	r2, #32
 800875e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a5f      	ldr	r2, [pc, #380]	; (80088f0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d021      	beq.n	80087bc <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008782:	2b00      	cmp	r3, #0
 8008784:	d01a      	beq.n	80087bc <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800878c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800878e:	e853 3f00 	ldrex	r3, [r3]
 8008792:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008796:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800879a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	461a      	mov	r2, r3
 80087a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80087a8:	657b      	str	r3, [r7, #84]	; 0x54
 80087aa:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80087ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80087b0:	e841 2300 	strex	r3, r2, [r1]
 80087b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80087b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d1e4      	bne.n	8008786 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d130      	bne.n	8008826 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2200      	movs	r2, #0
 80087c8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087d2:	e853 3f00 	ldrex	r3, [r3]
 80087d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80087d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087da:	f023 0310 	bic.w	r3, r3, #16
 80087de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	461a      	mov	r2, r3
 80087e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80087ec:	643b      	str	r3, [r7, #64]	; 0x40
 80087ee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80087f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087f4:	e841 2300 	strex	r3, r2, [r1]
 80087f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d1e4      	bne.n	80087ca <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	69db      	ldr	r3, [r3, #28]
 8008806:	f003 0310 	and.w	r3, r3, #16
 800880a:	2b10      	cmp	r3, #16
 800880c:	d103      	bne.n	8008816 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	2210      	movs	r2, #16
 8008814:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800881c:	4619      	mov	r1, r3
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f7fe ff04 	bl	800762c <HAL_UARTEx_RxEventCallback>
 8008824:	e002      	b.n	800882c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f7f8 ff8a 	bl	8001740 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800882c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8008830:	2b00      	cmp	r3, #0
 8008832:	d006      	beq.n	8008842 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008834:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008838:	f003 0320 	and.w	r3, r3, #32
 800883c:	2b00      	cmp	r3, #0
 800883e:	f47f aecf 	bne.w	80085e0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008848:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800884c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008850:	2b00      	cmp	r3, #0
 8008852:	d049      	beq.n	80088e8 <UART_RxISR_8BIT_FIFOEN+0x350>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800885a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800885e:	429a      	cmp	r2, r3
 8008860:	d242      	bcs.n	80088e8 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	3308      	adds	r3, #8
 8008868:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800886a:	6a3b      	ldr	r3, [r7, #32]
 800886c:	e853 3f00 	ldrex	r3, [r3]
 8008870:	61fb      	str	r3, [r7, #28]
   return(result);
 8008872:	69fb      	ldr	r3, [r7, #28]
 8008874:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008878:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	3308      	adds	r3, #8
 8008882:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008886:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008888:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800888c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800888e:	e841 2300 	strex	r3, r2, [r1]
 8008892:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008896:	2b00      	cmp	r3, #0
 8008898:	d1e3      	bne.n	8008862 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4a15      	ldr	r2, [pc, #84]	; (80088f4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800889e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	e853 3f00 	ldrex	r3, [r3]
 80088ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	f043 0320 	orr.w	r3, r3, #32
 80088b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	461a      	mov	r2, r3
 80088be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80088c2:	61bb      	str	r3, [r7, #24]
 80088c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c6:	6979      	ldr	r1, [r7, #20]
 80088c8:	69ba      	ldr	r2, [r7, #24]
 80088ca:	e841 2300 	strex	r3, r2, [r1]
 80088ce:	613b      	str	r3, [r7, #16]
   return(result);
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d1e4      	bne.n	80088a0 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80088d6:	e007      	b.n	80088e8 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	699a      	ldr	r2, [r3, #24]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f042 0208 	orr.w	r2, r2, #8
 80088e6:	619a      	str	r2, [r3, #24]
}
 80088e8:	bf00      	nop
 80088ea:	37b0      	adds	r7, #176	; 0xb0
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	40008000 	.word	0x40008000
 80088f4:	08008229 	.word	0x08008229

080088f8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b0ae      	sub	sp, #184	; 0xb8
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008906:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	69db      	ldr	r3, [r3, #28]
 8008910:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800892e:	2b22      	cmp	r3, #34	; 0x22
 8008930:	f040 8186 	bne.w	8008c40 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800893a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800893e:	e129      	b.n	8008b94 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008946:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800894e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008952:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8008956:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800895a:	4013      	ands	r3, r2
 800895c:	b29a      	uxth	r2, r3
 800895e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008962:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008968:	1c9a      	adds	r2, r3, #2
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008974:	b29b      	uxth	r3, r3
 8008976:	3b01      	subs	r3, #1
 8008978:	b29a      	uxth	r2, r3
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	69db      	ldr	r3, [r3, #28]
 8008986:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800898a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800898e:	f003 0307 	and.w	r3, r3, #7
 8008992:	2b00      	cmp	r3, #0
 8008994:	d053      	beq.n	8008a3e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008996:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800899a:	f003 0301 	and.w	r3, r3, #1
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d011      	beq.n	80089c6 <UART_RxISR_16BIT_FIFOEN+0xce>
 80089a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80089a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d00b      	beq.n	80089c6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	2201      	movs	r2, #1
 80089b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089bc:	f043 0201 	orr.w	r2, r3, #1
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80089ca:	f003 0302 	and.w	r3, r3, #2
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d011      	beq.n	80089f6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80089d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80089d6:	f003 0301 	and.w	r3, r3, #1
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d00b      	beq.n	80089f6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	2202      	movs	r2, #2
 80089e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089ec:	f043 0204 	orr.w	r2, r3, #4
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80089fa:	f003 0304 	and.w	r3, r3, #4
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d011      	beq.n	8008a26 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008a02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008a06:	f003 0301 	and.w	r3, r3, #1
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d00b      	beq.n	8008a26 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2204      	movs	r2, #4
 8008a14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a1c:	f043 0202 	orr.w	r2, r3, #2
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d006      	beq.n	8008a3e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f7fe fdf2 	bl	800761a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	f040 80a4 	bne.w	8008b94 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a54:	e853 3f00 	ldrex	r3, [r3]
 8008a58:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008a5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	461a      	mov	r2, r3
 8008a6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008a6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008a72:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a74:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008a76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008a7a:	e841 2300 	strex	r3, r2, [r1]
 8008a7e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008a80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d1e2      	bne.n	8008a4c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	3308      	adds	r3, #8
 8008a8c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a90:	e853 3f00 	ldrex	r3, [r3]
 8008a94:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008a96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a9c:	f023 0301 	bic.w	r3, r3, #1
 8008aa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	3308      	adds	r3, #8
 8008aaa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008aae:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008ab0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008ab4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008ab6:	e841 2300 	strex	r3, r2, [r1]
 8008aba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008abc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d1e1      	bne.n	8008a86 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2220      	movs	r2, #32
 8008ac6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a5f      	ldr	r2, [pc, #380]	; (8008c58 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d021      	beq.n	8008b24 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d01a      	beq.n	8008b24 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008af6:	e853 3f00 	ldrex	r3, [r3]
 8008afa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008afc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008afe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008b02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008b10:	65bb      	str	r3, [r7, #88]	; 0x58
 8008b12:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008b16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b18:	e841 2300 	strex	r3, r2, [r1]
 8008b1c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008b1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d1e4      	bne.n	8008aee <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d130      	bne.n	8008b8e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b3a:	e853 3f00 	ldrex	r3, [r3]
 8008b3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b42:	f023 0310 	bic.w	r3, r3, #16
 8008b46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	461a      	mov	r2, r3
 8008b50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008b54:	647b      	str	r3, [r7, #68]	; 0x44
 8008b56:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b5c:	e841 2300 	strex	r3, r2, [r1]
 8008b60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d1e4      	bne.n	8008b32 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	69db      	ldr	r3, [r3, #28]
 8008b6e:	f003 0310 	and.w	r3, r3, #16
 8008b72:	2b10      	cmp	r3, #16
 8008b74:	d103      	bne.n	8008b7e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	2210      	movs	r2, #16
 8008b7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008b84:	4619      	mov	r1, r3
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f7fe fd50 	bl	800762c <HAL_UARTEx_RxEventCallback>
 8008b8c:	e002      	b.n	8008b94 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f7f8 fdd6 	bl	8001740 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008b94:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d006      	beq.n	8008baa <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8008b9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008ba0:	f003 0320 	and.w	r3, r3, #32
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	f47f aecb 	bne.w	8008940 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008bb0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008bb4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d049      	beq.n	8008c50 <UART_RxISR_16BIT_FIFOEN+0x358>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008bc2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d242      	bcs.n	8008c50 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	3308      	adds	r3, #8
 8008bd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd4:	e853 3f00 	ldrex	r3, [r3]
 8008bd8:	623b      	str	r3, [r7, #32]
   return(result);
 8008bda:	6a3b      	ldr	r3, [r7, #32]
 8008bdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008be0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	3308      	adds	r3, #8
 8008bea:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008bee:	633a      	str	r2, [r7, #48]	; 0x30
 8008bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008bf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bf6:	e841 2300 	strex	r3, r2, [r1]
 8008bfa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d1e3      	bne.n	8008bca <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	4a15      	ldr	r2, [pc, #84]	; (8008c5c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008c06:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	e853 3f00 	ldrex	r3, [r3]
 8008c14:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f043 0320 	orr.w	r3, r3, #32
 8008c1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	461a      	mov	r2, r3
 8008c26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c2a:	61fb      	str	r3, [r7, #28]
 8008c2c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2e:	69b9      	ldr	r1, [r7, #24]
 8008c30:	69fa      	ldr	r2, [r7, #28]
 8008c32:	e841 2300 	strex	r3, r2, [r1]
 8008c36:	617b      	str	r3, [r7, #20]
   return(result);
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d1e4      	bne.n	8008c08 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008c3e:	e007      	b.n	8008c50 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	699a      	ldr	r2, [r3, #24]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f042 0208 	orr.w	r2, r2, #8
 8008c4e:	619a      	str	r2, [r3, #24]
}
 8008c50:	bf00      	nop
 8008c52:	37b8      	adds	r7, #184	; 0xb8
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	40008000 	.word	0x40008000
 8008c5c:	080083e1 	.word	0x080083e1

08008c60 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008c68:	bf00      	nop
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bc80      	pop	{r7}
 8008c70:	4770      	bx	lr

08008c72 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008c72:	b480      	push	{r7}
 8008c74:	b083      	sub	sp, #12
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008c7a:	bf00      	nop
 8008c7c:	370c      	adds	r7, #12
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bc80      	pop	{r7}
 8008c82:	4770      	bx	lr

08008c84 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008c8c:	bf00      	nop
 8008c8e:	370c      	adds	r7, #12
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bc80      	pop	{r7}
 8008c94:	4770      	bx	lr

08008c96 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8008c96:	b580      	push	{r7, lr}
 8008c98:	b084      	sub	sp, #16
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d101      	bne.n	8008cac <HAL_UARTEx_EnableFifoMode+0x16>
 8008ca8:	2302      	movs	r3, #2
 8008caa:	e02b      	b.n	8008d04 <HAL_UARTEx_EnableFifoMode+0x6e>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2224      	movs	r2, #36	; 0x24
 8008cb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f022 0201 	bic.w	r2, r2, #1
 8008cd2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008cda:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8008ce2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	68fa      	ldr	r2, [r7, #12]
 8008cea:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 f8c1 	bl	8008e74 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2220      	movs	r2, #32
 8008cf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3710      	adds	r7, #16
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b085      	sub	sp, #20
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d101      	bne.n	8008d22 <HAL_UARTEx_DisableFifoMode+0x16>
 8008d1e:	2302      	movs	r3, #2
 8008d20:	e027      	b.n	8008d72 <HAL_UARTEx_DisableFifoMode+0x66>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2201      	movs	r2, #1
 8008d26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2224      	movs	r2, #36	; 0x24
 8008d2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f022 0201 	bic.w	r2, r2, #1
 8008d48:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008d50:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2200      	movs	r2, #0
 8008d56:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	68fa      	ldr	r2, [r7, #12]
 8008d5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2220      	movs	r2, #32
 8008d64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3714      	adds	r7, #20
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bc80      	pop	{r7}
 8008d7a:	4770      	bx	lr

08008d7c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d101      	bne.n	8008d94 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008d90:	2302      	movs	r3, #2
 8008d92:	e02d      	b.n	8008df0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2201      	movs	r2, #1
 8008d98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2224      	movs	r2, #36	; 0x24
 8008da0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f022 0201 	bic.w	r2, r2, #1
 8008dba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	683a      	ldr	r2, [r7, #0]
 8008dcc:	430a      	orrs	r2, r1
 8008dce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 f84f 	bl	8008e74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	68fa      	ldr	r2, [r7, #12]
 8008ddc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2220      	movs	r2, #32
 8008de2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3710      	adds	r7, #16
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d101      	bne.n	8008e10 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008e0c:	2302      	movs	r3, #2
 8008e0e:	e02d      	b.n	8008e6c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2201      	movs	r2, #1
 8008e14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2224      	movs	r2, #36	; 0x24
 8008e1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f022 0201 	bic.w	r2, r2, #1
 8008e36:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	683a      	ldr	r2, [r7, #0]
 8008e48:	430a      	orrs	r2, r1
 8008e4a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 f811 	bl	8008e74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	68fa      	ldr	r2, [r7, #12]
 8008e58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2220      	movs	r2, #32
 8008e5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2200      	movs	r2, #0
 8008e66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008e6a:	2300      	movs	r3, #0
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3710      	adds	r7, #16
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b085      	sub	sp, #20
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d108      	bne.n	8008e96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2201      	movs	r2, #1
 8008e88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008e94:	e031      	b.n	8008efa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008e96:	2308      	movs	r3, #8
 8008e98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008e9a:	2308      	movs	r3, #8
 8008e9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	689b      	ldr	r3, [r3, #8]
 8008ea4:	0e5b      	lsrs	r3, r3, #25
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	f003 0307 	and.w	r3, r3, #7
 8008eac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	0f5b      	lsrs	r3, r3, #29
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	f003 0307 	and.w	r3, r3, #7
 8008ebc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ebe:	7bbb      	ldrb	r3, [r7, #14]
 8008ec0:	7b3a      	ldrb	r2, [r7, #12]
 8008ec2:	4910      	ldr	r1, [pc, #64]	; (8008f04 <UARTEx_SetNbDataToProcess+0x90>)
 8008ec4:	5c8a      	ldrb	r2, [r1, r2]
 8008ec6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008eca:	7b3a      	ldrb	r2, [r7, #12]
 8008ecc:	490e      	ldr	r1, [pc, #56]	; (8008f08 <UARTEx_SetNbDataToProcess+0x94>)
 8008ece:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ed0:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ed4:	b29a      	uxth	r2, r3
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008edc:	7bfb      	ldrb	r3, [r7, #15]
 8008ede:	7b7a      	ldrb	r2, [r7, #13]
 8008ee0:	4908      	ldr	r1, [pc, #32]	; (8008f04 <UARTEx_SetNbDataToProcess+0x90>)
 8008ee2:	5c8a      	ldrb	r2, [r1, r2]
 8008ee4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008ee8:	7b7a      	ldrb	r2, [r7, #13]
 8008eea:	4907      	ldr	r1, [pc, #28]	; (8008f08 <UARTEx_SetNbDataToProcess+0x94>)
 8008eec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008eee:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ef2:	b29a      	uxth	r2, r3
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008efa:	bf00      	nop
 8008efc:	3714      	adds	r7, #20
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bc80      	pop	{r7}
 8008f02:	4770      	bx	lr
 8008f04:	0800dcb8 	.word	0x0800dcb8
 8008f08:	0800dcc0 	.word	0x0800dcc0

08008f0c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b085      	sub	sp, #20
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	4603      	mov	r3, r0
 8008f14:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008f16:	2300      	movs	r3, #0
 8008f18:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008f1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008f1e:	2b84      	cmp	r3, #132	; 0x84
 8008f20:	d005      	beq.n	8008f2e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008f22:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	4413      	add	r3, r2
 8008f2a:	3303      	adds	r3, #3
 8008f2c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3714      	adds	r7, #20
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bc80      	pop	{r7}
 8008f38:	4770      	bx	lr

08008f3a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008f3e:	f001 f82d 	bl	8009f9c <vTaskStartScheduler>
  
  return osOK;
 8008f42:	2300      	movs	r3, #0
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f4a:	b089      	sub	sp, #36	; 0x24
 8008f4c:	af04      	add	r7, sp, #16
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	695b      	ldr	r3, [r3, #20]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d020      	beq.n	8008f9c <osThreadCreate+0x54>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	699b      	ldr	r3, [r3, #24]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d01c      	beq.n	8008f9c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	685c      	ldr	r4, [r3, #4]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681d      	ldr	r5, [r3, #0]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	691e      	ldr	r6, [r3, #16]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008f74:	4618      	mov	r0, r3
 8008f76:	f7ff ffc9 	bl	8008f0c <makeFreeRtosPriority>
 8008f7a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	695b      	ldr	r3, [r3, #20]
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008f84:	9202      	str	r2, [sp, #8]
 8008f86:	9301      	str	r3, [sp, #4]
 8008f88:	9100      	str	r1, [sp, #0]
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	4632      	mov	r2, r6
 8008f8e:	4629      	mov	r1, r5
 8008f90:	4620      	mov	r0, r4
 8008f92:	f000 fe3b 	bl	8009c0c <xTaskCreateStatic>
 8008f96:	4603      	mov	r3, r0
 8008f98:	60fb      	str	r3, [r7, #12]
 8008f9a:	e01c      	b.n	8008fd6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	685c      	ldr	r4, [r3, #4]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008fa8:	b29e      	uxth	r6, r3
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f7ff ffab 	bl	8008f0c <makeFreeRtosPriority>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	f107 030c 	add.w	r3, r7, #12
 8008fbc:	9301      	str	r3, [sp, #4]
 8008fbe:	9200      	str	r2, [sp, #0]
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	4632      	mov	r2, r6
 8008fc4:	4629      	mov	r1, r5
 8008fc6:	4620      	mov	r0, r4
 8008fc8:	f000 fe7d 	bl	8009cc6 <xTaskCreate>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d001      	beq.n	8008fd6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	e000      	b.n	8008fd8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3714      	adds	r7, #20
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008fe0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d001      	beq.n	8008ff6 <osDelay+0x16>
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	e000      	b.n	8008ff8 <osDelay+0x18>
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f000 ff9b 	bl	8009f34 <vTaskDelay>
  
  return osOK;
 8008ffe:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009000:	4618      	mov	r0, r3
 8009002:	3710      	adds	r7, #16
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d007      	beq.n	8009028 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	4619      	mov	r1, r3
 800901e:	2001      	movs	r0, #1
 8009020:	f000 fa53 	bl	80094ca <xQueueCreateMutexStatic>
 8009024:	4603      	mov	r3, r0
 8009026:	e003      	b.n	8009030 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8009028:	2001      	movs	r0, #1
 800902a:	f000 fa36 	bl	800949a <xQueueCreateMutex>
 800902e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8009030:	4618      	mov	r0, r3
 8009032:	3708      	adds	r7, #8
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009038:	b590      	push	{r4, r7, lr}
 800903a:	b085      	sub	sp, #20
 800903c:	af02      	add	r7, sp, #8
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d011      	beq.n	800906e <osMessageCreate+0x36>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d00d      	beq.n	800906e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6818      	ldr	r0, [r3, #0]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6859      	ldr	r1, [r3, #4]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	689a      	ldr	r2, [r3, #8]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	2400      	movs	r4, #0
 8009064:	9400      	str	r4, [sp, #0]
 8009066:	f000 f927 	bl	80092b8 <xQueueGenericCreateStatic>
 800906a:	4603      	mov	r3, r0
 800906c:	e008      	b.n	8009080 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6818      	ldr	r0, [r3, #0]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	4619      	mov	r1, r3
 800907a:	f000 f995 	bl	80093a8 <xQueueGenericCreate>
 800907e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009080:	4618      	mov	r0, r3
 8009082:	370c      	adds	r7, #12
 8009084:	46bd      	mov	sp, r7
 8009086:	bd90      	pop	{r4, r7, pc}

08009088 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009088:	b480      	push	{r7}
 800908a:	b083      	sub	sp, #12
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f103 0208 	add.w	r2, r3, #8
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f04f 32ff 	mov.w	r2, #4294967295
 80090a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f103 0208 	add.w	r2, r3, #8
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f103 0208 	add.w	r2, r3, #8
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80090bc:	bf00      	nop
 80090be:	370c      	adds	r7, #12
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bc80      	pop	{r7}
 80090c4:	4770      	bx	lr

080090c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80090c6:	b480      	push	{r7}
 80090c8:	b083      	sub	sp, #12
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2200      	movs	r2, #0
 80090d2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80090d4:	bf00      	nop
 80090d6:	370c      	adds	r7, #12
 80090d8:	46bd      	mov	sp, r7
 80090da:	bc80      	pop	{r7}
 80090dc:	4770      	bx	lr

080090de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80090de:	b480      	push	{r7}
 80090e0:	b085      	sub	sp, #20
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
 80090e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	68fa      	ldr	r2, [r7, #12]
 80090f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	689a      	ldr	r2, [r3, #8]
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	689b      	ldr	r3, [r3, #8]
 8009100:	683a      	ldr	r2, [r7, #0]
 8009102:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	683a      	ldr	r2, [r7, #0]
 8009108:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	1c5a      	adds	r2, r3, #1
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	601a      	str	r2, [r3, #0]
}
 800911a:	bf00      	nop
 800911c:	3714      	adds	r7, #20
 800911e:	46bd      	mov	sp, r7
 8009120:	bc80      	pop	{r7}
 8009122:	4770      	bx	lr

08009124 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009124:	b480      	push	{r7}
 8009126:	b085      	sub	sp, #20
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800913a:	d103      	bne.n	8009144 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	691b      	ldr	r3, [r3, #16]
 8009140:	60fb      	str	r3, [r7, #12]
 8009142:	e00c      	b.n	800915e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	3308      	adds	r3, #8
 8009148:	60fb      	str	r3, [r7, #12]
 800914a:	e002      	b.n	8009152 <vListInsert+0x2e>
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	60fb      	str	r3, [r7, #12]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	68ba      	ldr	r2, [r7, #8]
 800915a:	429a      	cmp	r2, r3
 800915c:	d2f6      	bcs.n	800914c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	685a      	ldr	r2, [r3, #4]
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	683a      	ldr	r2, [r7, #0]
 800916c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	68fa      	ldr	r2, [r7, #12]
 8009172:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	683a      	ldr	r2, [r7, #0]
 8009178:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	1c5a      	adds	r2, r3, #1
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	601a      	str	r2, [r3, #0]
}
 800918a:	bf00      	nop
 800918c:	3714      	adds	r7, #20
 800918e:	46bd      	mov	sp, r7
 8009190:	bc80      	pop	{r7}
 8009192:	4770      	bx	lr

08009194 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009194:	b480      	push	{r7}
 8009196:	b085      	sub	sp, #20
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	691b      	ldr	r3, [r3, #16]
 80091a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	6892      	ldr	r2, [r2, #8]
 80091aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	6852      	ldr	r2, [r2, #4]
 80091b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d103      	bne.n	80091c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	689a      	ldr	r2, [r3, #8]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2200      	movs	r2, #0
 80091cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	1e5a      	subs	r2, r3, #1
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3714      	adds	r7, #20
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bc80      	pop	{r7}
 80091e4:	4770      	bx	lr
	...

080091e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d10a      	bne.n	8009212 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80091fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009200:	f383 8811 	msr	BASEPRI, r3
 8009204:	f3bf 8f6f 	isb	sy
 8009208:	f3bf 8f4f 	dsb	sy
 800920c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800920e:	bf00      	nop
 8009210:	e7fe      	b.n	8009210 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009212:	f001 fcbb 	bl	800ab8c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800921e:	68f9      	ldr	r1, [r7, #12]
 8009220:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009222:	fb01 f303 	mul.w	r3, r1, r3
 8009226:	441a      	add	r2, r3
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2200      	movs	r2, #0
 8009230:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681a      	ldr	r2, [r3, #0]
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009242:	3b01      	subs	r3, #1
 8009244:	68f9      	ldr	r1, [r7, #12]
 8009246:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009248:	fb01 f303 	mul.w	r3, r1, r3
 800924c:	441a      	add	r2, r3
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	22ff      	movs	r2, #255	; 0xff
 8009256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	22ff      	movs	r2, #255	; 0xff
 800925e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d114      	bne.n	8009292 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	691b      	ldr	r3, [r3, #16]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d01a      	beq.n	80092a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	3310      	adds	r3, #16
 8009274:	4618      	mov	r0, r3
 8009276:	f001 f8d1 	bl	800a41c <xTaskRemoveFromEventList>
 800927a:	4603      	mov	r3, r0
 800927c:	2b00      	cmp	r3, #0
 800927e:	d012      	beq.n	80092a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009280:	4b0c      	ldr	r3, [pc, #48]	; (80092b4 <xQueueGenericReset+0xcc>)
 8009282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009286:	601a      	str	r2, [r3, #0]
 8009288:	f3bf 8f4f 	dsb	sy
 800928c:	f3bf 8f6f 	isb	sy
 8009290:	e009      	b.n	80092a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	3310      	adds	r3, #16
 8009296:	4618      	mov	r0, r3
 8009298:	f7ff fef6 	bl	8009088 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	3324      	adds	r3, #36	; 0x24
 80092a0:	4618      	mov	r0, r3
 80092a2:	f7ff fef1 	bl	8009088 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80092a6:	f001 fca1 	bl	800abec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80092aa:	2301      	movs	r3, #1
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3710      	adds	r7, #16
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	e000ed04 	.word	0xe000ed04

080092b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b08e      	sub	sp, #56	; 0x38
 80092bc:	af02      	add	r7, sp, #8
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	607a      	str	r2, [r7, #4]
 80092c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d10a      	bne.n	80092e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80092cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d0:	f383 8811 	msr	BASEPRI, r3
 80092d4:	f3bf 8f6f 	isb	sy
 80092d8:	f3bf 8f4f 	dsb	sy
 80092dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80092de:	bf00      	nop
 80092e0:	e7fe      	b.n	80092e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d10a      	bne.n	80092fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80092e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ec:	f383 8811 	msr	BASEPRI, r3
 80092f0:	f3bf 8f6f 	isb	sy
 80092f4:	f3bf 8f4f 	dsb	sy
 80092f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80092fa:	bf00      	nop
 80092fc:	e7fe      	b.n	80092fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d002      	beq.n	800930a <xQueueGenericCreateStatic+0x52>
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d001      	beq.n	800930e <xQueueGenericCreateStatic+0x56>
 800930a:	2301      	movs	r3, #1
 800930c:	e000      	b.n	8009310 <xQueueGenericCreateStatic+0x58>
 800930e:	2300      	movs	r3, #0
 8009310:	2b00      	cmp	r3, #0
 8009312:	d10a      	bne.n	800932a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009318:	f383 8811 	msr	BASEPRI, r3
 800931c:	f3bf 8f6f 	isb	sy
 8009320:	f3bf 8f4f 	dsb	sy
 8009324:	623b      	str	r3, [r7, #32]
}
 8009326:	bf00      	nop
 8009328:	e7fe      	b.n	8009328 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d102      	bne.n	8009336 <xQueueGenericCreateStatic+0x7e>
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d101      	bne.n	800933a <xQueueGenericCreateStatic+0x82>
 8009336:	2301      	movs	r3, #1
 8009338:	e000      	b.n	800933c <xQueueGenericCreateStatic+0x84>
 800933a:	2300      	movs	r3, #0
 800933c:	2b00      	cmp	r3, #0
 800933e:	d10a      	bne.n	8009356 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009344:	f383 8811 	msr	BASEPRI, r3
 8009348:	f3bf 8f6f 	isb	sy
 800934c:	f3bf 8f4f 	dsb	sy
 8009350:	61fb      	str	r3, [r7, #28]
}
 8009352:	bf00      	nop
 8009354:	e7fe      	b.n	8009354 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009356:	2348      	movs	r3, #72	; 0x48
 8009358:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	2b48      	cmp	r3, #72	; 0x48
 800935e:	d00a      	beq.n	8009376 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009364:	f383 8811 	msr	BASEPRI, r3
 8009368:	f3bf 8f6f 	isb	sy
 800936c:	f3bf 8f4f 	dsb	sy
 8009370:	61bb      	str	r3, [r7, #24]
}
 8009372:	bf00      	nop
 8009374:	e7fe      	b.n	8009374 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009376:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800937c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800937e:	2b00      	cmp	r3, #0
 8009380:	d00d      	beq.n	800939e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009384:	2201      	movs	r2, #1
 8009386:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800938a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800938e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009390:	9300      	str	r3, [sp, #0]
 8009392:	4613      	mov	r3, r2
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	68b9      	ldr	r1, [r7, #8]
 8009398:	68f8      	ldr	r0, [r7, #12]
 800939a:	f000 f845 	bl	8009428 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800939e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3730      	adds	r7, #48	; 0x30
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b08a      	sub	sp, #40	; 0x28
 80093ac:	af02      	add	r7, sp, #8
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	60b9      	str	r1, [r7, #8]
 80093b2:	4613      	mov	r3, r2
 80093b4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d10a      	bne.n	80093d2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80093bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c0:	f383 8811 	msr	BASEPRI, r3
 80093c4:	f3bf 8f6f 	isb	sy
 80093c8:	f3bf 8f4f 	dsb	sy
 80093cc:	613b      	str	r3, [r7, #16]
}
 80093ce:	bf00      	nop
 80093d0:	e7fe      	b.n	80093d0 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d102      	bne.n	80093de <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80093d8:	2300      	movs	r3, #0
 80093da:	61fb      	str	r3, [r7, #28]
 80093dc:	e004      	b.n	80093e8 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	68ba      	ldr	r2, [r7, #8]
 80093e2:	fb02 f303 	mul.w	r3, r2, r3
 80093e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80093e8:	69fb      	ldr	r3, [r7, #28]
 80093ea:	3348      	adds	r3, #72	; 0x48
 80093ec:	4618      	mov	r0, r3
 80093ee:	f001 fccd 	bl	800ad8c <pvPortMalloc>
 80093f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80093f4:	69bb      	ldr	r3, [r7, #24]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d011      	beq.n	800941e <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	3348      	adds	r3, #72	; 0x48
 8009402:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009404:	69bb      	ldr	r3, [r7, #24]
 8009406:	2200      	movs	r2, #0
 8009408:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800940c:	79fa      	ldrb	r2, [r7, #7]
 800940e:	69bb      	ldr	r3, [r7, #24]
 8009410:	9300      	str	r3, [sp, #0]
 8009412:	4613      	mov	r3, r2
 8009414:	697a      	ldr	r2, [r7, #20]
 8009416:	68b9      	ldr	r1, [r7, #8]
 8009418:	68f8      	ldr	r0, [r7, #12]
 800941a:	f000 f805 	bl	8009428 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800941e:	69bb      	ldr	r3, [r7, #24]
	}
 8009420:	4618      	mov	r0, r3
 8009422:	3720      	adds	r7, #32
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	60f8      	str	r0, [r7, #12]
 8009430:	60b9      	str	r1, [r7, #8]
 8009432:	607a      	str	r2, [r7, #4]
 8009434:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d103      	bne.n	8009444 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800943c:	69bb      	ldr	r3, [r7, #24]
 800943e:	69ba      	ldr	r2, [r7, #24]
 8009440:	601a      	str	r2, [r3, #0]
 8009442:	e002      	b.n	800944a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009444:	69bb      	ldr	r3, [r7, #24]
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800944a:	69bb      	ldr	r3, [r7, #24]
 800944c:	68fa      	ldr	r2, [r7, #12]
 800944e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009450:	69bb      	ldr	r3, [r7, #24]
 8009452:	68ba      	ldr	r2, [r7, #8]
 8009454:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009456:	2101      	movs	r1, #1
 8009458:	69b8      	ldr	r0, [r7, #24]
 800945a:	f7ff fec5 	bl	80091e8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800945e:	bf00      	nop
 8009460:	3710      	adds	r7, #16
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}

08009466 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009466:	b580      	push	{r7, lr}
 8009468:	b082      	sub	sp, #8
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d00e      	beq.n	8009492 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2200      	movs	r2, #0
 8009478:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2200      	movs	r2, #0
 800947e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009486:	2300      	movs	r3, #0
 8009488:	2200      	movs	r2, #0
 800948a:	2100      	movs	r1, #0
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 f837 	bl	8009500 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009492:	bf00      	nop
 8009494:	3708      	adds	r7, #8
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}

0800949a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800949a:	b580      	push	{r7, lr}
 800949c:	b086      	sub	sp, #24
 800949e:	af00      	add	r7, sp, #0
 80094a0:	4603      	mov	r3, r0
 80094a2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80094a4:	2301      	movs	r3, #1
 80094a6:	617b      	str	r3, [r7, #20]
 80094a8:	2300      	movs	r3, #0
 80094aa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80094ac:	79fb      	ldrb	r3, [r7, #7]
 80094ae:	461a      	mov	r2, r3
 80094b0:	6939      	ldr	r1, [r7, #16]
 80094b2:	6978      	ldr	r0, [r7, #20]
 80094b4:	f7ff ff78 	bl	80093a8 <xQueueGenericCreate>
 80094b8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80094ba:	68f8      	ldr	r0, [r7, #12]
 80094bc:	f7ff ffd3 	bl	8009466 <prvInitialiseMutex>

		return xNewQueue;
 80094c0:	68fb      	ldr	r3, [r7, #12]
	}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3718      	adds	r7, #24
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}

080094ca <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80094ca:	b580      	push	{r7, lr}
 80094cc:	b088      	sub	sp, #32
 80094ce:	af02      	add	r7, sp, #8
 80094d0:	4603      	mov	r3, r0
 80094d2:	6039      	str	r1, [r7, #0]
 80094d4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80094d6:	2301      	movs	r3, #1
 80094d8:	617b      	str	r3, [r7, #20]
 80094da:	2300      	movs	r3, #0
 80094dc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80094de:	79fb      	ldrb	r3, [r7, #7]
 80094e0:	9300      	str	r3, [sp, #0]
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	2200      	movs	r2, #0
 80094e6:	6939      	ldr	r1, [r7, #16]
 80094e8:	6978      	ldr	r0, [r7, #20]
 80094ea:	f7ff fee5 	bl	80092b8 <xQueueGenericCreateStatic>
 80094ee:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	f7ff ffb8 	bl	8009466 <prvInitialiseMutex>

		return xNewQueue;
 80094f6:	68fb      	ldr	r3, [r7, #12]
	}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3718      	adds	r7, #24
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b08e      	sub	sp, #56	; 0x38
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	607a      	str	r2, [r7, #4]
 800950c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800950e:	2300      	movs	r3, #0
 8009510:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009518:	2b00      	cmp	r3, #0
 800951a:	d10a      	bne.n	8009532 <xQueueGenericSend+0x32>
	__asm volatile
 800951c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009520:	f383 8811 	msr	BASEPRI, r3
 8009524:	f3bf 8f6f 	isb	sy
 8009528:	f3bf 8f4f 	dsb	sy
 800952c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800952e:	bf00      	nop
 8009530:	e7fe      	b.n	8009530 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d103      	bne.n	8009540 <xQueueGenericSend+0x40>
 8009538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800953c:	2b00      	cmp	r3, #0
 800953e:	d101      	bne.n	8009544 <xQueueGenericSend+0x44>
 8009540:	2301      	movs	r3, #1
 8009542:	e000      	b.n	8009546 <xQueueGenericSend+0x46>
 8009544:	2300      	movs	r3, #0
 8009546:	2b00      	cmp	r3, #0
 8009548:	d10a      	bne.n	8009560 <xQueueGenericSend+0x60>
	__asm volatile
 800954a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954e:	f383 8811 	msr	BASEPRI, r3
 8009552:	f3bf 8f6f 	isb	sy
 8009556:	f3bf 8f4f 	dsb	sy
 800955a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800955c:	bf00      	nop
 800955e:	e7fe      	b.n	800955e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	2b02      	cmp	r3, #2
 8009564:	d103      	bne.n	800956e <xQueueGenericSend+0x6e>
 8009566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800956a:	2b01      	cmp	r3, #1
 800956c:	d101      	bne.n	8009572 <xQueueGenericSend+0x72>
 800956e:	2301      	movs	r3, #1
 8009570:	e000      	b.n	8009574 <xQueueGenericSend+0x74>
 8009572:	2300      	movs	r3, #0
 8009574:	2b00      	cmp	r3, #0
 8009576:	d10a      	bne.n	800958e <xQueueGenericSend+0x8e>
	__asm volatile
 8009578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800957c:	f383 8811 	msr	BASEPRI, r3
 8009580:	f3bf 8f6f 	isb	sy
 8009584:	f3bf 8f4f 	dsb	sy
 8009588:	623b      	str	r3, [r7, #32]
}
 800958a:	bf00      	nop
 800958c:	e7fe      	b.n	800958c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800958e:	f001 f901 	bl	800a794 <xTaskGetSchedulerState>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d102      	bne.n	800959e <xQueueGenericSend+0x9e>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d101      	bne.n	80095a2 <xQueueGenericSend+0xa2>
 800959e:	2301      	movs	r3, #1
 80095a0:	e000      	b.n	80095a4 <xQueueGenericSend+0xa4>
 80095a2:	2300      	movs	r3, #0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d10a      	bne.n	80095be <xQueueGenericSend+0xbe>
	__asm volatile
 80095a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ac:	f383 8811 	msr	BASEPRI, r3
 80095b0:	f3bf 8f6f 	isb	sy
 80095b4:	f3bf 8f4f 	dsb	sy
 80095b8:	61fb      	str	r3, [r7, #28]
}
 80095ba:	bf00      	nop
 80095bc:	e7fe      	b.n	80095bc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80095be:	f001 fae5 	bl	800ab8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80095c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d302      	bcc.n	80095d4 <xQueueGenericSend+0xd4>
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	2b02      	cmp	r3, #2
 80095d2:	d129      	bne.n	8009628 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80095d4:	683a      	ldr	r2, [r7, #0]
 80095d6:	68b9      	ldr	r1, [r7, #8]
 80095d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095da:	f000 fa07 	bl	80099ec <prvCopyDataToQueue>
 80095de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d010      	beq.n	800960a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ea:	3324      	adds	r3, #36	; 0x24
 80095ec:	4618      	mov	r0, r3
 80095ee:	f000 ff15 	bl	800a41c <xTaskRemoveFromEventList>
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d013      	beq.n	8009620 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80095f8:	4b3f      	ldr	r3, [pc, #252]	; (80096f8 <xQueueGenericSend+0x1f8>)
 80095fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095fe:	601a      	str	r2, [r3, #0]
 8009600:	f3bf 8f4f 	dsb	sy
 8009604:	f3bf 8f6f 	isb	sy
 8009608:	e00a      	b.n	8009620 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800960a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800960c:	2b00      	cmp	r3, #0
 800960e:	d007      	beq.n	8009620 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009610:	4b39      	ldr	r3, [pc, #228]	; (80096f8 <xQueueGenericSend+0x1f8>)
 8009612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009616:	601a      	str	r2, [r3, #0]
 8009618:	f3bf 8f4f 	dsb	sy
 800961c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009620:	f001 fae4 	bl	800abec <vPortExitCritical>
				return pdPASS;
 8009624:	2301      	movs	r3, #1
 8009626:	e063      	b.n	80096f0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d103      	bne.n	8009636 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800962e:	f001 fadd 	bl	800abec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009632:	2300      	movs	r3, #0
 8009634:	e05c      	b.n	80096f0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009638:	2b00      	cmp	r3, #0
 800963a:	d106      	bne.n	800964a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800963c:	f107 0314 	add.w	r3, r7, #20
 8009640:	4618      	mov	r0, r3
 8009642:	f000 ff4d 	bl	800a4e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009646:	2301      	movs	r3, #1
 8009648:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800964a:	f001 facf 	bl	800abec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800964e:	f000 fd05 	bl	800a05c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009652:	f001 fa9b 	bl	800ab8c <vPortEnterCritical>
 8009656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009658:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800965c:	b25b      	sxtb	r3, r3
 800965e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009662:	d103      	bne.n	800966c <xQueueGenericSend+0x16c>
 8009664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009666:	2200      	movs	r2, #0
 8009668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800966c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800966e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009672:	b25b      	sxtb	r3, r3
 8009674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009678:	d103      	bne.n	8009682 <xQueueGenericSend+0x182>
 800967a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800967c:	2200      	movs	r2, #0
 800967e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009682:	f001 fab3 	bl	800abec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009686:	1d3a      	adds	r2, r7, #4
 8009688:	f107 0314 	add.w	r3, r7, #20
 800968c:	4611      	mov	r1, r2
 800968e:	4618      	mov	r0, r3
 8009690:	f000 ff3c 	bl	800a50c <xTaskCheckForTimeOut>
 8009694:	4603      	mov	r3, r0
 8009696:	2b00      	cmp	r3, #0
 8009698:	d124      	bne.n	80096e4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800969a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800969c:	f000 fa9e 	bl	8009bdc <prvIsQueueFull>
 80096a0:	4603      	mov	r3, r0
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d018      	beq.n	80096d8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80096a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a8:	3310      	adds	r3, #16
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	4611      	mov	r1, r2
 80096ae:	4618      	mov	r0, r3
 80096b0:	f000 fe90 	bl	800a3d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80096b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096b6:	f000 fa29 	bl	8009b0c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80096ba:	f000 fcdd 	bl	800a078 <xTaskResumeAll>
 80096be:	4603      	mov	r3, r0
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	f47f af7c 	bne.w	80095be <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80096c6:	4b0c      	ldr	r3, [pc, #48]	; (80096f8 <xQueueGenericSend+0x1f8>)
 80096c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096cc:	601a      	str	r2, [r3, #0]
 80096ce:	f3bf 8f4f 	dsb	sy
 80096d2:	f3bf 8f6f 	isb	sy
 80096d6:	e772      	b.n	80095be <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80096d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096da:	f000 fa17 	bl	8009b0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80096de:	f000 fccb 	bl	800a078 <xTaskResumeAll>
 80096e2:	e76c      	b.n	80095be <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80096e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096e6:	f000 fa11 	bl	8009b0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80096ea:	f000 fcc5 	bl	800a078 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80096ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3738      	adds	r7, #56	; 0x38
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}
 80096f8:	e000ed04 	.word	0xe000ed04

080096fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b08e      	sub	sp, #56	; 0x38
 8009700:	af00      	add	r7, sp, #0
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	60b9      	str	r1, [r7, #8]
 8009706:	607a      	str	r2, [r7, #4]
 8009708:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800970e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009710:	2b00      	cmp	r3, #0
 8009712:	d10a      	bne.n	800972a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009718:	f383 8811 	msr	BASEPRI, r3
 800971c:	f3bf 8f6f 	isb	sy
 8009720:	f3bf 8f4f 	dsb	sy
 8009724:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009726:	bf00      	nop
 8009728:	e7fe      	b.n	8009728 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d103      	bne.n	8009738 <xQueueGenericSendFromISR+0x3c>
 8009730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009734:	2b00      	cmp	r3, #0
 8009736:	d101      	bne.n	800973c <xQueueGenericSendFromISR+0x40>
 8009738:	2301      	movs	r3, #1
 800973a:	e000      	b.n	800973e <xQueueGenericSendFromISR+0x42>
 800973c:	2300      	movs	r3, #0
 800973e:	2b00      	cmp	r3, #0
 8009740:	d10a      	bne.n	8009758 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009746:	f383 8811 	msr	BASEPRI, r3
 800974a:	f3bf 8f6f 	isb	sy
 800974e:	f3bf 8f4f 	dsb	sy
 8009752:	623b      	str	r3, [r7, #32]
}
 8009754:	bf00      	nop
 8009756:	e7fe      	b.n	8009756 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	2b02      	cmp	r3, #2
 800975c:	d103      	bne.n	8009766 <xQueueGenericSendFromISR+0x6a>
 800975e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009762:	2b01      	cmp	r3, #1
 8009764:	d101      	bne.n	800976a <xQueueGenericSendFromISR+0x6e>
 8009766:	2301      	movs	r3, #1
 8009768:	e000      	b.n	800976c <xQueueGenericSendFromISR+0x70>
 800976a:	2300      	movs	r3, #0
 800976c:	2b00      	cmp	r3, #0
 800976e:	d10a      	bne.n	8009786 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009774:	f383 8811 	msr	BASEPRI, r3
 8009778:	f3bf 8f6f 	isb	sy
 800977c:	f3bf 8f4f 	dsb	sy
 8009780:	61fb      	str	r3, [r7, #28]
}
 8009782:	bf00      	nop
 8009784:	e7fe      	b.n	8009784 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009786:	f001 fac3 	bl	800ad10 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800978a:	f3ef 8211 	mrs	r2, BASEPRI
 800978e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009792:	f383 8811 	msr	BASEPRI, r3
 8009796:	f3bf 8f6f 	isb	sy
 800979a:	f3bf 8f4f 	dsb	sy
 800979e:	61ba      	str	r2, [r7, #24]
 80097a0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80097a2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80097a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80097a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d302      	bcc.n	80097b8 <xQueueGenericSendFromISR+0xbc>
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	2b02      	cmp	r3, #2
 80097b6:	d12c      	bne.n	8009812 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80097b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80097c2:	683a      	ldr	r2, [r7, #0]
 80097c4:	68b9      	ldr	r1, [r7, #8]
 80097c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097c8:	f000 f910 	bl	80099ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80097cc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80097d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097d4:	d112      	bne.n	80097fc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80097d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d016      	beq.n	800980c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80097de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e0:	3324      	adds	r3, #36	; 0x24
 80097e2:	4618      	mov	r0, r3
 80097e4:	f000 fe1a 	bl	800a41c <xTaskRemoveFromEventList>
 80097e8:	4603      	mov	r3, r0
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d00e      	beq.n	800980c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d00b      	beq.n	800980c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2201      	movs	r2, #1
 80097f8:	601a      	str	r2, [r3, #0]
 80097fa:	e007      	b.n	800980c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80097fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009800:	3301      	adds	r3, #1
 8009802:	b2db      	uxtb	r3, r3
 8009804:	b25a      	sxtb	r2, r3
 8009806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009808:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800980c:	2301      	movs	r3, #1
 800980e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009810:	e001      	b.n	8009816 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009812:	2300      	movs	r3, #0
 8009814:	637b      	str	r3, [r7, #52]	; 0x34
 8009816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009818:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009820:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009824:	4618      	mov	r0, r3
 8009826:	3738      	adds	r7, #56	; 0x38
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b08c      	sub	sp, #48	; 0x30
 8009830:	af00      	add	r7, sp, #0
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	60b9      	str	r1, [r7, #8]
 8009836:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009838:	2300      	movs	r3, #0
 800983a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009842:	2b00      	cmp	r3, #0
 8009844:	d10a      	bne.n	800985c <xQueueReceive+0x30>
	__asm volatile
 8009846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800984a:	f383 8811 	msr	BASEPRI, r3
 800984e:	f3bf 8f6f 	isb	sy
 8009852:	f3bf 8f4f 	dsb	sy
 8009856:	623b      	str	r3, [r7, #32]
}
 8009858:	bf00      	nop
 800985a:	e7fe      	b.n	800985a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d103      	bne.n	800986a <xQueueReceive+0x3e>
 8009862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009866:	2b00      	cmp	r3, #0
 8009868:	d101      	bne.n	800986e <xQueueReceive+0x42>
 800986a:	2301      	movs	r3, #1
 800986c:	e000      	b.n	8009870 <xQueueReceive+0x44>
 800986e:	2300      	movs	r3, #0
 8009870:	2b00      	cmp	r3, #0
 8009872:	d10a      	bne.n	800988a <xQueueReceive+0x5e>
	__asm volatile
 8009874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009878:	f383 8811 	msr	BASEPRI, r3
 800987c:	f3bf 8f6f 	isb	sy
 8009880:	f3bf 8f4f 	dsb	sy
 8009884:	61fb      	str	r3, [r7, #28]
}
 8009886:	bf00      	nop
 8009888:	e7fe      	b.n	8009888 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800988a:	f000 ff83 	bl	800a794 <xTaskGetSchedulerState>
 800988e:	4603      	mov	r3, r0
 8009890:	2b00      	cmp	r3, #0
 8009892:	d102      	bne.n	800989a <xQueueReceive+0x6e>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d101      	bne.n	800989e <xQueueReceive+0x72>
 800989a:	2301      	movs	r3, #1
 800989c:	e000      	b.n	80098a0 <xQueueReceive+0x74>
 800989e:	2300      	movs	r3, #0
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d10a      	bne.n	80098ba <xQueueReceive+0x8e>
	__asm volatile
 80098a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a8:	f383 8811 	msr	BASEPRI, r3
 80098ac:	f3bf 8f6f 	isb	sy
 80098b0:	f3bf 8f4f 	dsb	sy
 80098b4:	61bb      	str	r3, [r7, #24]
}
 80098b6:	bf00      	nop
 80098b8:	e7fe      	b.n	80098b8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80098ba:	f001 f967 	bl	800ab8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80098c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d01f      	beq.n	800990a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80098ca:	68b9      	ldr	r1, [r7, #8]
 80098cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098ce:	f000 f8f7 	bl	8009ac0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80098d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d4:	1e5a      	subs	r2, r3, #1
 80098d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098dc:	691b      	ldr	r3, [r3, #16]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d00f      	beq.n	8009902 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e4:	3310      	adds	r3, #16
 80098e6:	4618      	mov	r0, r3
 80098e8:	f000 fd98 	bl	800a41c <xTaskRemoveFromEventList>
 80098ec:	4603      	mov	r3, r0
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d007      	beq.n	8009902 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80098f2:	4b3d      	ldr	r3, [pc, #244]	; (80099e8 <xQueueReceive+0x1bc>)
 80098f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098f8:	601a      	str	r2, [r3, #0]
 80098fa:	f3bf 8f4f 	dsb	sy
 80098fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009902:	f001 f973 	bl	800abec <vPortExitCritical>
				return pdPASS;
 8009906:	2301      	movs	r3, #1
 8009908:	e069      	b.n	80099de <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d103      	bne.n	8009918 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009910:	f001 f96c 	bl	800abec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009914:	2300      	movs	r3, #0
 8009916:	e062      	b.n	80099de <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800991a:	2b00      	cmp	r3, #0
 800991c:	d106      	bne.n	800992c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800991e:	f107 0310 	add.w	r3, r7, #16
 8009922:	4618      	mov	r0, r3
 8009924:	f000 fddc 	bl	800a4e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009928:	2301      	movs	r3, #1
 800992a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800992c:	f001 f95e 	bl	800abec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009930:	f000 fb94 	bl	800a05c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009934:	f001 f92a 	bl	800ab8c <vPortEnterCritical>
 8009938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800993e:	b25b      	sxtb	r3, r3
 8009940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009944:	d103      	bne.n	800994e <xQueueReceive+0x122>
 8009946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009948:	2200      	movs	r2, #0
 800994a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800994e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009950:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009954:	b25b      	sxtb	r3, r3
 8009956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800995a:	d103      	bne.n	8009964 <xQueueReceive+0x138>
 800995c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800995e:	2200      	movs	r2, #0
 8009960:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009964:	f001 f942 	bl	800abec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009968:	1d3a      	adds	r2, r7, #4
 800996a:	f107 0310 	add.w	r3, r7, #16
 800996e:	4611      	mov	r1, r2
 8009970:	4618      	mov	r0, r3
 8009972:	f000 fdcb 	bl	800a50c <xTaskCheckForTimeOut>
 8009976:	4603      	mov	r3, r0
 8009978:	2b00      	cmp	r3, #0
 800997a:	d123      	bne.n	80099c4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800997c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800997e:	f000 f917 	bl	8009bb0 <prvIsQueueEmpty>
 8009982:	4603      	mov	r3, r0
 8009984:	2b00      	cmp	r3, #0
 8009986:	d017      	beq.n	80099b8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800998a:	3324      	adds	r3, #36	; 0x24
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	4611      	mov	r1, r2
 8009990:	4618      	mov	r0, r3
 8009992:	f000 fd1f 	bl	800a3d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009996:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009998:	f000 f8b8 	bl	8009b0c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800999c:	f000 fb6c 	bl	800a078 <xTaskResumeAll>
 80099a0:	4603      	mov	r3, r0
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d189      	bne.n	80098ba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80099a6:	4b10      	ldr	r3, [pc, #64]	; (80099e8 <xQueueReceive+0x1bc>)
 80099a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099ac:	601a      	str	r2, [r3, #0]
 80099ae:	f3bf 8f4f 	dsb	sy
 80099b2:	f3bf 8f6f 	isb	sy
 80099b6:	e780      	b.n	80098ba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80099b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099ba:	f000 f8a7 	bl	8009b0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80099be:	f000 fb5b 	bl	800a078 <xTaskResumeAll>
 80099c2:	e77a      	b.n	80098ba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80099c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099c6:	f000 f8a1 	bl	8009b0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80099ca:	f000 fb55 	bl	800a078 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80099ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099d0:	f000 f8ee 	bl	8009bb0 <prvIsQueueEmpty>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	f43f af6f 	beq.w	80098ba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80099dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3730      	adds	r7, #48	; 0x30
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	e000ed04 	.word	0xe000ed04

080099ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b086      	sub	sp, #24
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	60b9      	str	r1, [r7, #8]
 80099f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80099f8:	2300      	movs	r3, #0
 80099fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a00:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d10d      	bne.n	8009a26 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d14d      	bne.n	8009aae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	689b      	ldr	r3, [r3, #8]
 8009a16:	4618      	mov	r0, r3
 8009a18:	f000 feda 	bl	800a7d0 <xTaskPriorityDisinherit>
 8009a1c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2200      	movs	r2, #0
 8009a22:	609a      	str	r2, [r3, #8]
 8009a24:	e043      	b.n	8009aae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d119      	bne.n	8009a60 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	6858      	ldr	r0, [r3, #4]
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a34:	461a      	mov	r2, r3
 8009a36:	68b9      	ldr	r1, [r7, #8]
 8009a38:	f001 fbaa 	bl	800b190 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	685a      	ldr	r2, [r3, #4]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a44:	441a      	add	r2, r3
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	685a      	ldr	r2, [r3, #4]
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d32b      	bcc.n	8009aae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	605a      	str	r2, [r3, #4]
 8009a5e:	e026      	b.n	8009aae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	68d8      	ldr	r0, [r3, #12]
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a68:	461a      	mov	r2, r3
 8009a6a:	68b9      	ldr	r1, [r7, #8]
 8009a6c:	f001 fb90 	bl	800b190 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	68da      	ldr	r2, [r3, #12]
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a78:	425b      	negs	r3, r3
 8009a7a:	441a      	add	r2, r3
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	68da      	ldr	r2, [r3, #12]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d207      	bcs.n	8009a9c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	689a      	ldr	r2, [r3, #8]
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a94:	425b      	negs	r3, r3
 8009a96:	441a      	add	r2, r3
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	d105      	bne.n	8009aae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d002      	beq.n	8009aae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	3b01      	subs	r3, #1
 8009aac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	1c5a      	adds	r2, r3, #1
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009ab6:	697b      	ldr	r3, [r7, #20]
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3718      	adds	r7, #24
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b082      	sub	sp, #8
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d018      	beq.n	8009b04 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	68da      	ldr	r2, [r3, #12]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ada:	441a      	add	r2, r3
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	68da      	ldr	r2, [r3, #12]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	689b      	ldr	r3, [r3, #8]
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d303      	bcc.n	8009af4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	68d9      	ldr	r1, [r3, #12]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009afc:	461a      	mov	r2, r3
 8009afe:	6838      	ldr	r0, [r7, #0]
 8009b00:	f001 fb46 	bl	800b190 <memcpy>
	}
}
 8009b04:	bf00      	nop
 8009b06:	3708      	adds	r7, #8
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009b14:	f001 f83a 	bl	800ab8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b1e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b20:	e011      	b.n	8009b46 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d012      	beq.n	8009b50 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	3324      	adds	r3, #36	; 0x24
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f000 fc74 	bl	800a41c <xTaskRemoveFromEventList>
 8009b34:	4603      	mov	r3, r0
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d001      	beq.n	8009b3e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009b3a:	f000 fd49 	bl	800a5d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009b3e:	7bfb      	ldrb	r3, [r7, #15]
 8009b40:	3b01      	subs	r3, #1
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	dce9      	bgt.n	8009b22 <prvUnlockQueue+0x16>
 8009b4e:	e000      	b.n	8009b52 <prvUnlockQueue+0x46>
					break;
 8009b50:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	22ff      	movs	r2, #255	; 0xff
 8009b56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009b5a:	f001 f847 	bl	800abec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009b5e:	f001 f815 	bl	800ab8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b68:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b6a:	e011      	b.n	8009b90 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	691b      	ldr	r3, [r3, #16]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d012      	beq.n	8009b9a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	3310      	adds	r3, #16
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f000 fc4f 	bl	800a41c <xTaskRemoveFromEventList>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d001      	beq.n	8009b88 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009b84:	f000 fd24 	bl	800a5d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009b88:	7bbb      	ldrb	r3, [r7, #14]
 8009b8a:	3b01      	subs	r3, #1
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	dce9      	bgt.n	8009b6c <prvUnlockQueue+0x60>
 8009b98:	e000      	b.n	8009b9c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009b9a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	22ff      	movs	r2, #255	; 0xff
 8009ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009ba4:	f001 f822 	bl	800abec <vPortExitCritical>
}
 8009ba8:	bf00      	nop
 8009baa:	3710      	adds	r7, #16
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009bb8:	f000 ffe8 	bl	800ab8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d102      	bne.n	8009bca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	60fb      	str	r3, [r7, #12]
 8009bc8:	e001      	b.n	8009bce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009bce:	f001 f80d 	bl	800abec <vPortExitCritical>

	return xReturn;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3710      	adds	r7, #16
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b084      	sub	sp, #16
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009be4:	f000 ffd2 	bl	800ab8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d102      	bne.n	8009bfa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	60fb      	str	r3, [r7, #12]
 8009bf8:	e001      	b.n	8009bfe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009bfe:	f000 fff5 	bl	800abec <vPortExitCritical>

	return xReturn;
 8009c02:	68fb      	ldr	r3, [r7, #12]
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3710      	adds	r7, #16
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}

08009c0c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b08e      	sub	sp, #56	; 0x38
 8009c10:	af04      	add	r7, sp, #16
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	60b9      	str	r1, [r7, #8]
 8009c16:	607a      	str	r2, [r7, #4]
 8009c18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d10a      	bne.n	8009c36 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c24:	f383 8811 	msr	BASEPRI, r3
 8009c28:	f3bf 8f6f 	isb	sy
 8009c2c:	f3bf 8f4f 	dsb	sy
 8009c30:	623b      	str	r3, [r7, #32]
}
 8009c32:	bf00      	nop
 8009c34:	e7fe      	b.n	8009c34 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d10a      	bne.n	8009c52 <xTaskCreateStatic+0x46>
	__asm volatile
 8009c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c40:	f383 8811 	msr	BASEPRI, r3
 8009c44:	f3bf 8f6f 	isb	sy
 8009c48:	f3bf 8f4f 	dsb	sy
 8009c4c:	61fb      	str	r3, [r7, #28]
}
 8009c4e:	bf00      	nop
 8009c50:	e7fe      	b.n	8009c50 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009c52:	2354      	movs	r3, #84	; 0x54
 8009c54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	2b54      	cmp	r3, #84	; 0x54
 8009c5a:	d00a      	beq.n	8009c72 <xTaskCreateStatic+0x66>
	__asm volatile
 8009c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c60:	f383 8811 	msr	BASEPRI, r3
 8009c64:	f3bf 8f6f 	isb	sy
 8009c68:	f3bf 8f4f 	dsb	sy
 8009c6c:	61bb      	str	r3, [r7, #24]
}
 8009c6e:	bf00      	nop
 8009c70:	e7fe      	b.n	8009c70 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009c72:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d01e      	beq.n	8009cb8 <xTaskCreateStatic+0xac>
 8009c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d01b      	beq.n	8009cb8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c82:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c88:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8c:	2202      	movs	r2, #2
 8009c8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009c92:	2300      	movs	r3, #0
 8009c94:	9303      	str	r3, [sp, #12]
 8009c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c98:	9302      	str	r3, [sp, #8]
 8009c9a:	f107 0314 	add.w	r3, r7, #20
 8009c9e:	9301      	str	r3, [sp, #4]
 8009ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca2:	9300      	str	r3, [sp, #0]
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	68b9      	ldr	r1, [r7, #8]
 8009caa:	68f8      	ldr	r0, [r7, #12]
 8009cac:	f000 f850 	bl	8009d50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009cb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009cb2:	f000 f8d5 	bl	8009e60 <prvAddNewTaskToReadyList>
 8009cb6:	e001      	b.n	8009cbc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009cbc:	697b      	ldr	r3, [r7, #20]
	}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3728      	adds	r7, #40	; 0x28
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b08c      	sub	sp, #48	; 0x30
 8009cca:	af04      	add	r7, sp, #16
 8009ccc:	60f8      	str	r0, [r7, #12]
 8009cce:	60b9      	str	r1, [r7, #8]
 8009cd0:	603b      	str	r3, [r7, #0]
 8009cd2:	4613      	mov	r3, r2
 8009cd4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009cd6:	88fb      	ldrh	r3, [r7, #6]
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f001 f856 	bl	800ad8c <pvPortMalloc>
 8009ce0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d00e      	beq.n	8009d06 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009ce8:	2054      	movs	r0, #84	; 0x54
 8009cea:	f001 f84f 	bl	800ad8c <pvPortMalloc>
 8009cee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009cf0:	69fb      	ldr	r3, [r7, #28]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d003      	beq.n	8009cfe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009cf6:	69fb      	ldr	r3, [r7, #28]
 8009cf8:	697a      	ldr	r2, [r7, #20]
 8009cfa:	631a      	str	r2, [r3, #48]	; 0x30
 8009cfc:	e005      	b.n	8009d0a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009cfe:	6978      	ldr	r0, [r7, #20]
 8009d00:	f001 f908 	bl	800af14 <vPortFree>
 8009d04:	e001      	b.n	8009d0a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009d06:	2300      	movs	r3, #0
 8009d08:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009d0a:	69fb      	ldr	r3, [r7, #28]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d017      	beq.n	8009d40 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009d10:	69fb      	ldr	r3, [r7, #28]
 8009d12:	2200      	movs	r2, #0
 8009d14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009d18:	88fa      	ldrh	r2, [r7, #6]
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	9303      	str	r3, [sp, #12]
 8009d1e:	69fb      	ldr	r3, [r7, #28]
 8009d20:	9302      	str	r3, [sp, #8]
 8009d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d24:	9301      	str	r3, [sp, #4]
 8009d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d28:	9300      	str	r3, [sp, #0]
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	68b9      	ldr	r1, [r7, #8]
 8009d2e:	68f8      	ldr	r0, [r7, #12]
 8009d30:	f000 f80e 	bl	8009d50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d34:	69f8      	ldr	r0, [r7, #28]
 8009d36:	f000 f893 	bl	8009e60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	61bb      	str	r3, [r7, #24]
 8009d3e:	e002      	b.n	8009d46 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009d40:	f04f 33ff 	mov.w	r3, #4294967295
 8009d44:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009d46:	69bb      	ldr	r3, [r7, #24]
	}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3720      	adds	r7, #32
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b088      	sub	sp, #32
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	60f8      	str	r0, [r7, #12]
 8009d58:	60b9      	str	r1, [r7, #8]
 8009d5a:	607a      	str	r2, [r7, #4]
 8009d5c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009d68:	3b01      	subs	r3, #1
 8009d6a:	009b      	lsls	r3, r3, #2
 8009d6c:	4413      	add	r3, r2
 8009d6e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009d70:	69bb      	ldr	r3, [r7, #24]
 8009d72:	f023 0307 	bic.w	r3, r3, #7
 8009d76:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009d78:	69bb      	ldr	r3, [r7, #24]
 8009d7a:	f003 0307 	and.w	r3, r3, #7
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d00a      	beq.n	8009d98 <prvInitialiseNewTask+0x48>
	__asm volatile
 8009d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d86:	f383 8811 	msr	BASEPRI, r3
 8009d8a:	f3bf 8f6f 	isb	sy
 8009d8e:	f3bf 8f4f 	dsb	sy
 8009d92:	617b      	str	r3, [r7, #20]
}
 8009d94:	bf00      	nop
 8009d96:	e7fe      	b.n	8009d96 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d01f      	beq.n	8009dde <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d9e:	2300      	movs	r3, #0
 8009da0:	61fb      	str	r3, [r7, #28]
 8009da2:	e012      	b.n	8009dca <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009da4:	68ba      	ldr	r2, [r7, #8]
 8009da6:	69fb      	ldr	r3, [r7, #28]
 8009da8:	4413      	add	r3, r2
 8009daa:	7819      	ldrb	r1, [r3, #0]
 8009dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dae:	69fb      	ldr	r3, [r7, #28]
 8009db0:	4413      	add	r3, r2
 8009db2:	3334      	adds	r3, #52	; 0x34
 8009db4:	460a      	mov	r2, r1
 8009db6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009db8:	68ba      	ldr	r2, [r7, #8]
 8009dba:	69fb      	ldr	r3, [r7, #28]
 8009dbc:	4413      	add	r3, r2
 8009dbe:	781b      	ldrb	r3, [r3, #0]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d006      	beq.n	8009dd2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009dc4:	69fb      	ldr	r3, [r7, #28]
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	61fb      	str	r3, [r7, #28]
 8009dca:	69fb      	ldr	r3, [r7, #28]
 8009dcc:	2b0f      	cmp	r3, #15
 8009dce:	d9e9      	bls.n	8009da4 <prvInitialiseNewTask+0x54>
 8009dd0:	e000      	b.n	8009dd4 <prvInitialiseNewTask+0x84>
			{
				break;
 8009dd2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009ddc:	e003      	b.n	8009de6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de0:	2200      	movs	r2, #0
 8009de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de8:	2b06      	cmp	r3, #6
 8009dea:	d901      	bls.n	8009df0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009dec:	2306      	movs	r3, #6
 8009dee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009df4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009dfa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfe:	2200      	movs	r2, #0
 8009e00:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e04:	3304      	adds	r3, #4
 8009e06:	4618      	mov	r0, r3
 8009e08:	f7ff f95d 	bl	80090c6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e0e:	3318      	adds	r3, #24
 8009e10:	4618      	mov	r0, r3
 8009e12:	f7ff f958 	bl	80090c6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e1a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e1e:	f1c3 0207 	rsb	r2, r3, #7
 8009e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e24:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e2a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e2e:	2200      	movs	r2, #0
 8009e30:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e34:	2200      	movs	r2, #0
 8009e36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009e3a:	683a      	ldr	r2, [r7, #0]
 8009e3c:	68f9      	ldr	r1, [r7, #12]
 8009e3e:	69b8      	ldr	r0, [r7, #24]
 8009e40:	f000 fdb2 	bl	800a9a8 <pxPortInitialiseStack>
 8009e44:	4602      	mov	r2, r0
 8009e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e48:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d002      	beq.n	8009e56 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e56:	bf00      	nop
 8009e58:	3720      	adds	r7, #32
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
	...

08009e60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b082      	sub	sp, #8
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009e68:	f000 fe90 	bl	800ab8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009e6c:	4b2a      	ldr	r3, [pc, #168]	; (8009f18 <prvAddNewTaskToReadyList+0xb8>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	3301      	adds	r3, #1
 8009e72:	4a29      	ldr	r2, [pc, #164]	; (8009f18 <prvAddNewTaskToReadyList+0xb8>)
 8009e74:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009e76:	4b29      	ldr	r3, [pc, #164]	; (8009f1c <prvAddNewTaskToReadyList+0xbc>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d109      	bne.n	8009e92 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009e7e:	4a27      	ldr	r2, [pc, #156]	; (8009f1c <prvAddNewTaskToReadyList+0xbc>)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009e84:	4b24      	ldr	r3, [pc, #144]	; (8009f18 <prvAddNewTaskToReadyList+0xb8>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d110      	bne.n	8009eae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009e8c:	f000 fbc4 	bl	800a618 <prvInitialiseTaskLists>
 8009e90:	e00d      	b.n	8009eae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009e92:	4b23      	ldr	r3, [pc, #140]	; (8009f20 <prvAddNewTaskToReadyList+0xc0>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d109      	bne.n	8009eae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009e9a:	4b20      	ldr	r3, [pc, #128]	; (8009f1c <prvAddNewTaskToReadyList+0xbc>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d802      	bhi.n	8009eae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009ea8:	4a1c      	ldr	r2, [pc, #112]	; (8009f1c <prvAddNewTaskToReadyList+0xbc>)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009eae:	4b1d      	ldr	r3, [pc, #116]	; (8009f24 <prvAddNewTaskToReadyList+0xc4>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	4a1b      	ldr	r2, [pc, #108]	; (8009f24 <prvAddNewTaskToReadyList+0xc4>)
 8009eb6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	409a      	lsls	r2, r3
 8009ec0:	4b19      	ldr	r3, [pc, #100]	; (8009f28 <prvAddNewTaskToReadyList+0xc8>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	4a18      	ldr	r2, [pc, #96]	; (8009f28 <prvAddNewTaskToReadyList+0xc8>)
 8009ec8:	6013      	str	r3, [r2, #0]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ece:	4613      	mov	r3, r2
 8009ed0:	009b      	lsls	r3, r3, #2
 8009ed2:	4413      	add	r3, r2
 8009ed4:	009b      	lsls	r3, r3, #2
 8009ed6:	4a15      	ldr	r2, [pc, #84]	; (8009f2c <prvAddNewTaskToReadyList+0xcc>)
 8009ed8:	441a      	add	r2, r3
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	3304      	adds	r3, #4
 8009ede:	4619      	mov	r1, r3
 8009ee0:	4610      	mov	r0, r2
 8009ee2:	f7ff f8fc 	bl	80090de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009ee6:	f000 fe81 	bl	800abec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009eea:	4b0d      	ldr	r3, [pc, #52]	; (8009f20 <prvAddNewTaskToReadyList+0xc0>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d00e      	beq.n	8009f10 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009ef2:	4b0a      	ldr	r3, [pc, #40]	; (8009f1c <prvAddNewTaskToReadyList+0xbc>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d207      	bcs.n	8009f10 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009f00:	4b0b      	ldr	r3, [pc, #44]	; (8009f30 <prvAddNewTaskToReadyList+0xd0>)
 8009f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f06:	601a      	str	r2, [r3, #0]
 8009f08:	f3bf 8f4f 	dsb	sy
 8009f0c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f10:	bf00      	nop
 8009f12:	3708      	adds	r7, #8
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}
 8009f18:	200008b4 	.word	0x200008b4
 8009f1c:	200007b4 	.word	0x200007b4
 8009f20:	200008c0 	.word	0x200008c0
 8009f24:	200008d0 	.word	0x200008d0
 8009f28:	200008bc 	.word	0x200008bc
 8009f2c:	200007b8 	.word	0x200007b8
 8009f30:	e000ed04 	.word	0xe000ed04

08009f34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d017      	beq.n	8009f76 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009f46:	4b13      	ldr	r3, [pc, #76]	; (8009f94 <vTaskDelay+0x60>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d00a      	beq.n	8009f64 <vTaskDelay+0x30>
	__asm volatile
 8009f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f52:	f383 8811 	msr	BASEPRI, r3
 8009f56:	f3bf 8f6f 	isb	sy
 8009f5a:	f3bf 8f4f 	dsb	sy
 8009f5e:	60bb      	str	r3, [r7, #8]
}
 8009f60:	bf00      	nop
 8009f62:	e7fe      	b.n	8009f62 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009f64:	f000 f87a 	bl	800a05c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009f68:	2100      	movs	r1, #0
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 fcb6 	bl	800a8dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009f70:	f000 f882 	bl	800a078 <xTaskResumeAll>
 8009f74:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d107      	bne.n	8009f8c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009f7c:	4b06      	ldr	r3, [pc, #24]	; (8009f98 <vTaskDelay+0x64>)
 8009f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f82:	601a      	str	r2, [r3, #0]
 8009f84:	f3bf 8f4f 	dsb	sy
 8009f88:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009f8c:	bf00      	nop
 8009f8e:	3710      	adds	r7, #16
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	200008dc 	.word	0x200008dc
 8009f98:	e000ed04 	.word	0xe000ed04

08009f9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b08a      	sub	sp, #40	; 0x28
 8009fa0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009faa:	463a      	mov	r2, r7
 8009fac:	1d39      	adds	r1, r7, #4
 8009fae:	f107 0308 	add.w	r3, r7, #8
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7f7 fc2a 	bl	800180c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009fb8:	6839      	ldr	r1, [r7, #0]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	68ba      	ldr	r2, [r7, #8]
 8009fbe:	9202      	str	r2, [sp, #8]
 8009fc0:	9301      	str	r3, [sp, #4]
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	9300      	str	r3, [sp, #0]
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	460a      	mov	r2, r1
 8009fca:	491e      	ldr	r1, [pc, #120]	; (800a044 <vTaskStartScheduler+0xa8>)
 8009fcc:	481e      	ldr	r0, [pc, #120]	; (800a048 <vTaskStartScheduler+0xac>)
 8009fce:	f7ff fe1d 	bl	8009c0c <xTaskCreateStatic>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	4a1d      	ldr	r2, [pc, #116]	; (800a04c <vTaskStartScheduler+0xb0>)
 8009fd6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009fd8:	4b1c      	ldr	r3, [pc, #112]	; (800a04c <vTaskStartScheduler+0xb0>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d002      	beq.n	8009fe6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	617b      	str	r3, [r7, #20]
 8009fe4:	e001      	b.n	8009fea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d116      	bne.n	800a01e <vTaskStartScheduler+0x82>
	__asm volatile
 8009ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff4:	f383 8811 	msr	BASEPRI, r3
 8009ff8:	f3bf 8f6f 	isb	sy
 8009ffc:	f3bf 8f4f 	dsb	sy
 800a000:	613b      	str	r3, [r7, #16]
}
 800a002:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a004:	4b12      	ldr	r3, [pc, #72]	; (800a050 <vTaskStartScheduler+0xb4>)
 800a006:	f04f 32ff 	mov.w	r2, #4294967295
 800a00a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a00c:	4b11      	ldr	r3, [pc, #68]	; (800a054 <vTaskStartScheduler+0xb8>)
 800a00e:	2201      	movs	r2, #1
 800a010:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a012:	4b11      	ldr	r3, [pc, #68]	; (800a058 <vTaskStartScheduler+0xbc>)
 800a014:	2200      	movs	r2, #0
 800a016:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a018:	f000 fd46 	bl	800aaa8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a01c:	e00e      	b.n	800a03c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a024:	d10a      	bne.n	800a03c <vTaskStartScheduler+0xa0>
	__asm volatile
 800a026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a02a:	f383 8811 	msr	BASEPRI, r3
 800a02e:	f3bf 8f6f 	isb	sy
 800a032:	f3bf 8f4f 	dsb	sy
 800a036:	60fb      	str	r3, [r7, #12]
}
 800a038:	bf00      	nop
 800a03a:	e7fe      	b.n	800a03a <vTaskStartScheduler+0x9e>
}
 800a03c:	bf00      	nop
 800a03e:	3718      	adds	r7, #24
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}
 800a044:	0800d5b8 	.word	0x0800d5b8
 800a048:	0800a5e9 	.word	0x0800a5e9
 800a04c:	200008d8 	.word	0x200008d8
 800a050:	200008d4 	.word	0x200008d4
 800a054:	200008c0 	.word	0x200008c0
 800a058:	200008b8 	.word	0x200008b8

0800a05c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a05c:	b480      	push	{r7}
 800a05e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a060:	4b04      	ldr	r3, [pc, #16]	; (800a074 <vTaskSuspendAll+0x18>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	3301      	adds	r3, #1
 800a066:	4a03      	ldr	r2, [pc, #12]	; (800a074 <vTaskSuspendAll+0x18>)
 800a068:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a06a:	bf00      	nop
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bc80      	pop	{r7}
 800a070:	4770      	bx	lr
 800a072:	bf00      	nop
 800a074:	200008dc 	.word	0x200008dc

0800a078 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b084      	sub	sp, #16
 800a07c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a07e:	2300      	movs	r3, #0
 800a080:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a082:	2300      	movs	r3, #0
 800a084:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a086:	4b41      	ldr	r3, [pc, #260]	; (800a18c <xTaskResumeAll+0x114>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d10a      	bne.n	800a0a4 <xTaskResumeAll+0x2c>
	__asm volatile
 800a08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a092:	f383 8811 	msr	BASEPRI, r3
 800a096:	f3bf 8f6f 	isb	sy
 800a09a:	f3bf 8f4f 	dsb	sy
 800a09e:	603b      	str	r3, [r7, #0]
}
 800a0a0:	bf00      	nop
 800a0a2:	e7fe      	b.n	800a0a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a0a4:	f000 fd72 	bl	800ab8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a0a8:	4b38      	ldr	r3, [pc, #224]	; (800a18c <xTaskResumeAll+0x114>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	3b01      	subs	r3, #1
 800a0ae:	4a37      	ldr	r2, [pc, #220]	; (800a18c <xTaskResumeAll+0x114>)
 800a0b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0b2:	4b36      	ldr	r3, [pc, #216]	; (800a18c <xTaskResumeAll+0x114>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d161      	bne.n	800a17e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a0ba:	4b35      	ldr	r3, [pc, #212]	; (800a190 <xTaskResumeAll+0x118>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d05d      	beq.n	800a17e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a0c2:	e02e      	b.n	800a122 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0c4:	4b33      	ldr	r3, [pc, #204]	; (800a194 <xTaskResumeAll+0x11c>)
 800a0c6:	68db      	ldr	r3, [r3, #12]
 800a0c8:	68db      	ldr	r3, [r3, #12]
 800a0ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	3318      	adds	r3, #24
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f7ff f85f 	bl	8009194 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	3304      	adds	r3, #4
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7ff f85a 	bl	8009194 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	409a      	lsls	r2, r3
 800a0e8:	4b2b      	ldr	r3, [pc, #172]	; (800a198 <xTaskResumeAll+0x120>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	4a2a      	ldr	r2, [pc, #168]	; (800a198 <xTaskResumeAll+0x120>)
 800a0f0:	6013      	str	r3, [r2, #0]
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0f6:	4613      	mov	r3, r2
 800a0f8:	009b      	lsls	r3, r3, #2
 800a0fa:	4413      	add	r3, r2
 800a0fc:	009b      	lsls	r3, r3, #2
 800a0fe:	4a27      	ldr	r2, [pc, #156]	; (800a19c <xTaskResumeAll+0x124>)
 800a100:	441a      	add	r2, r3
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	3304      	adds	r3, #4
 800a106:	4619      	mov	r1, r3
 800a108:	4610      	mov	r0, r2
 800a10a:	f7fe ffe8 	bl	80090de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a112:	4b23      	ldr	r3, [pc, #140]	; (800a1a0 <xTaskResumeAll+0x128>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a118:	429a      	cmp	r2, r3
 800a11a:	d302      	bcc.n	800a122 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a11c:	4b21      	ldr	r3, [pc, #132]	; (800a1a4 <xTaskResumeAll+0x12c>)
 800a11e:	2201      	movs	r2, #1
 800a120:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a122:	4b1c      	ldr	r3, [pc, #112]	; (800a194 <xTaskResumeAll+0x11c>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d1cc      	bne.n	800a0c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d001      	beq.n	800a134 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a130:	f000 fb10 	bl	800a754 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a134:	4b1c      	ldr	r3, [pc, #112]	; (800a1a8 <xTaskResumeAll+0x130>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d010      	beq.n	800a162 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a140:	f000 f836 	bl	800a1b0 <xTaskIncrementTick>
 800a144:	4603      	mov	r3, r0
 800a146:	2b00      	cmp	r3, #0
 800a148:	d002      	beq.n	800a150 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a14a:	4b16      	ldr	r3, [pc, #88]	; (800a1a4 <xTaskResumeAll+0x12c>)
 800a14c:	2201      	movs	r2, #1
 800a14e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	3b01      	subs	r3, #1
 800a154:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d1f1      	bne.n	800a140 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800a15c:	4b12      	ldr	r3, [pc, #72]	; (800a1a8 <xTaskResumeAll+0x130>)
 800a15e:	2200      	movs	r2, #0
 800a160:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a162:	4b10      	ldr	r3, [pc, #64]	; (800a1a4 <xTaskResumeAll+0x12c>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d009      	beq.n	800a17e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a16a:	2301      	movs	r3, #1
 800a16c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a16e:	4b0f      	ldr	r3, [pc, #60]	; (800a1ac <xTaskResumeAll+0x134>)
 800a170:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a174:	601a      	str	r2, [r3, #0]
 800a176:	f3bf 8f4f 	dsb	sy
 800a17a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a17e:	f000 fd35 	bl	800abec <vPortExitCritical>

	return xAlreadyYielded;
 800a182:	68bb      	ldr	r3, [r7, #8]
}
 800a184:	4618      	mov	r0, r3
 800a186:	3710      	adds	r7, #16
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}
 800a18c:	200008dc 	.word	0x200008dc
 800a190:	200008b4 	.word	0x200008b4
 800a194:	20000874 	.word	0x20000874
 800a198:	200008bc 	.word	0x200008bc
 800a19c:	200007b8 	.word	0x200007b8
 800a1a0:	200007b4 	.word	0x200007b4
 800a1a4:	200008c8 	.word	0x200008c8
 800a1a8:	200008c4 	.word	0x200008c4
 800a1ac:	e000ed04 	.word	0xe000ed04

0800a1b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b086      	sub	sp, #24
 800a1b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1ba:	4b4e      	ldr	r3, [pc, #312]	; (800a2f4 <xTaskIncrementTick+0x144>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	f040 8088 	bne.w	800a2d4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a1c4:	4b4c      	ldr	r3, [pc, #304]	; (800a2f8 <xTaskIncrementTick+0x148>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	3301      	adds	r3, #1
 800a1ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a1cc:	4a4a      	ldr	r2, [pc, #296]	; (800a2f8 <xTaskIncrementTick+0x148>)
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d120      	bne.n	800a21a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a1d8:	4b48      	ldr	r3, [pc, #288]	; (800a2fc <xTaskIncrementTick+0x14c>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d00a      	beq.n	800a1f8 <xTaskIncrementTick+0x48>
	__asm volatile
 800a1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e6:	f383 8811 	msr	BASEPRI, r3
 800a1ea:	f3bf 8f6f 	isb	sy
 800a1ee:	f3bf 8f4f 	dsb	sy
 800a1f2:	603b      	str	r3, [r7, #0]
}
 800a1f4:	bf00      	nop
 800a1f6:	e7fe      	b.n	800a1f6 <xTaskIncrementTick+0x46>
 800a1f8:	4b40      	ldr	r3, [pc, #256]	; (800a2fc <xTaskIncrementTick+0x14c>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	60fb      	str	r3, [r7, #12]
 800a1fe:	4b40      	ldr	r3, [pc, #256]	; (800a300 <xTaskIncrementTick+0x150>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	4a3e      	ldr	r2, [pc, #248]	; (800a2fc <xTaskIncrementTick+0x14c>)
 800a204:	6013      	str	r3, [r2, #0]
 800a206:	4a3e      	ldr	r2, [pc, #248]	; (800a300 <xTaskIncrementTick+0x150>)
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	6013      	str	r3, [r2, #0]
 800a20c:	4b3d      	ldr	r3, [pc, #244]	; (800a304 <xTaskIncrementTick+0x154>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	3301      	adds	r3, #1
 800a212:	4a3c      	ldr	r2, [pc, #240]	; (800a304 <xTaskIncrementTick+0x154>)
 800a214:	6013      	str	r3, [r2, #0]
 800a216:	f000 fa9d 	bl	800a754 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a21a:	4b3b      	ldr	r3, [pc, #236]	; (800a308 <xTaskIncrementTick+0x158>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	693a      	ldr	r2, [r7, #16]
 800a220:	429a      	cmp	r2, r3
 800a222:	d348      	bcc.n	800a2b6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a224:	4b35      	ldr	r3, [pc, #212]	; (800a2fc <xTaskIncrementTick+0x14c>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d104      	bne.n	800a238 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a22e:	4b36      	ldr	r3, [pc, #216]	; (800a308 <xTaskIncrementTick+0x158>)
 800a230:	f04f 32ff 	mov.w	r2, #4294967295
 800a234:	601a      	str	r2, [r3, #0]
					break;
 800a236:	e03e      	b.n	800a2b6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a238:	4b30      	ldr	r3, [pc, #192]	; (800a2fc <xTaskIncrementTick+0x14c>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	68db      	ldr	r3, [r3, #12]
 800a23e:	68db      	ldr	r3, [r3, #12]
 800a240:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a248:	693a      	ldr	r2, [r7, #16]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d203      	bcs.n	800a258 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a250:	4a2d      	ldr	r2, [pc, #180]	; (800a308 <xTaskIncrementTick+0x158>)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a256:	e02e      	b.n	800a2b6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	3304      	adds	r3, #4
 800a25c:	4618      	mov	r0, r3
 800a25e:	f7fe ff99 	bl	8009194 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a266:	2b00      	cmp	r3, #0
 800a268:	d004      	beq.n	800a274 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	3318      	adds	r3, #24
 800a26e:	4618      	mov	r0, r3
 800a270:	f7fe ff90 	bl	8009194 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a278:	2201      	movs	r2, #1
 800a27a:	409a      	lsls	r2, r3
 800a27c:	4b23      	ldr	r3, [pc, #140]	; (800a30c <xTaskIncrementTick+0x15c>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4313      	orrs	r3, r2
 800a282:	4a22      	ldr	r2, [pc, #136]	; (800a30c <xTaskIncrementTick+0x15c>)
 800a284:	6013      	str	r3, [r2, #0]
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a28a:	4613      	mov	r3, r2
 800a28c:	009b      	lsls	r3, r3, #2
 800a28e:	4413      	add	r3, r2
 800a290:	009b      	lsls	r3, r3, #2
 800a292:	4a1f      	ldr	r2, [pc, #124]	; (800a310 <xTaskIncrementTick+0x160>)
 800a294:	441a      	add	r2, r3
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	3304      	adds	r3, #4
 800a29a:	4619      	mov	r1, r3
 800a29c:	4610      	mov	r0, r2
 800a29e:	f7fe ff1e 	bl	80090de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2a6:	4b1b      	ldr	r3, [pc, #108]	; (800a314 <xTaskIncrementTick+0x164>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d3b9      	bcc.n	800a224 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a2b4:	e7b6      	b.n	800a224 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a2b6:	4b17      	ldr	r3, [pc, #92]	; (800a314 <xTaskIncrementTick+0x164>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2bc:	4914      	ldr	r1, [pc, #80]	; (800a310 <xTaskIncrementTick+0x160>)
 800a2be:	4613      	mov	r3, r2
 800a2c0:	009b      	lsls	r3, r3, #2
 800a2c2:	4413      	add	r3, r2
 800a2c4:	009b      	lsls	r3, r3, #2
 800a2c6:	440b      	add	r3, r1
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d907      	bls.n	800a2de <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	617b      	str	r3, [r7, #20]
 800a2d2:	e004      	b.n	800a2de <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a2d4:	4b10      	ldr	r3, [pc, #64]	; (800a318 <xTaskIncrementTick+0x168>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	3301      	adds	r3, #1
 800a2da:	4a0f      	ldr	r2, [pc, #60]	; (800a318 <xTaskIncrementTick+0x168>)
 800a2dc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a2de:	4b0f      	ldr	r3, [pc, #60]	; (800a31c <xTaskIncrementTick+0x16c>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d001      	beq.n	800a2ea <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a2ea:	697b      	ldr	r3, [r7, #20]
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3718      	adds	r7, #24
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}
 800a2f4:	200008dc 	.word	0x200008dc
 800a2f8:	200008b8 	.word	0x200008b8
 800a2fc:	2000086c 	.word	0x2000086c
 800a300:	20000870 	.word	0x20000870
 800a304:	200008cc 	.word	0x200008cc
 800a308:	200008d4 	.word	0x200008d4
 800a30c:	200008bc 	.word	0x200008bc
 800a310:	200007b8 	.word	0x200007b8
 800a314:	200007b4 	.word	0x200007b4
 800a318:	200008c4 	.word	0x200008c4
 800a31c:	200008c8 	.word	0x200008c8

0800a320 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a320:	b480      	push	{r7}
 800a322:	b087      	sub	sp, #28
 800a324:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a326:	4b26      	ldr	r3, [pc, #152]	; (800a3c0 <vTaskSwitchContext+0xa0>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d003      	beq.n	800a336 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a32e:	4b25      	ldr	r3, [pc, #148]	; (800a3c4 <vTaskSwitchContext+0xa4>)
 800a330:	2201      	movs	r2, #1
 800a332:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a334:	e03f      	b.n	800a3b6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800a336:	4b23      	ldr	r3, [pc, #140]	; (800a3c4 <vTaskSwitchContext+0xa4>)
 800a338:	2200      	movs	r2, #0
 800a33a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a33c:	4b22      	ldr	r3, [pc, #136]	; (800a3c8 <vTaskSwitchContext+0xa8>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	fab3 f383 	clz	r3, r3
 800a348:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a34a:	7afb      	ldrb	r3, [r7, #11]
 800a34c:	f1c3 031f 	rsb	r3, r3, #31
 800a350:	617b      	str	r3, [r7, #20]
 800a352:	491e      	ldr	r1, [pc, #120]	; (800a3cc <vTaskSwitchContext+0xac>)
 800a354:	697a      	ldr	r2, [r7, #20]
 800a356:	4613      	mov	r3, r2
 800a358:	009b      	lsls	r3, r3, #2
 800a35a:	4413      	add	r3, r2
 800a35c:	009b      	lsls	r3, r3, #2
 800a35e:	440b      	add	r3, r1
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d10a      	bne.n	800a37c <vTaskSwitchContext+0x5c>
	__asm volatile
 800a366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a36a:	f383 8811 	msr	BASEPRI, r3
 800a36e:	f3bf 8f6f 	isb	sy
 800a372:	f3bf 8f4f 	dsb	sy
 800a376:	607b      	str	r3, [r7, #4]
}
 800a378:	bf00      	nop
 800a37a:	e7fe      	b.n	800a37a <vTaskSwitchContext+0x5a>
 800a37c:	697a      	ldr	r2, [r7, #20]
 800a37e:	4613      	mov	r3, r2
 800a380:	009b      	lsls	r3, r3, #2
 800a382:	4413      	add	r3, r2
 800a384:	009b      	lsls	r3, r3, #2
 800a386:	4a11      	ldr	r2, [pc, #68]	; (800a3cc <vTaskSwitchContext+0xac>)
 800a388:	4413      	add	r3, r2
 800a38a:	613b      	str	r3, [r7, #16]
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	685a      	ldr	r2, [r3, #4]
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	605a      	str	r2, [r3, #4]
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	685a      	ldr	r2, [r3, #4]
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	3308      	adds	r3, #8
 800a39e:	429a      	cmp	r2, r3
 800a3a0:	d104      	bne.n	800a3ac <vTaskSwitchContext+0x8c>
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	685a      	ldr	r2, [r3, #4]
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	605a      	str	r2, [r3, #4]
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	68db      	ldr	r3, [r3, #12]
 800a3b2:	4a07      	ldr	r2, [pc, #28]	; (800a3d0 <vTaskSwitchContext+0xb0>)
 800a3b4:	6013      	str	r3, [r2, #0]
}
 800a3b6:	bf00      	nop
 800a3b8:	371c      	adds	r7, #28
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bc80      	pop	{r7}
 800a3be:	4770      	bx	lr
 800a3c0:	200008dc 	.word	0x200008dc
 800a3c4:	200008c8 	.word	0x200008c8
 800a3c8:	200008bc 	.word	0x200008bc
 800a3cc:	200007b8 	.word	0x200007b8
 800a3d0:	200007b4 	.word	0x200007b4

0800a3d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b084      	sub	sp, #16
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d10a      	bne.n	800a3fa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e8:	f383 8811 	msr	BASEPRI, r3
 800a3ec:	f3bf 8f6f 	isb	sy
 800a3f0:	f3bf 8f4f 	dsb	sy
 800a3f4:	60fb      	str	r3, [r7, #12]
}
 800a3f6:	bf00      	nop
 800a3f8:	e7fe      	b.n	800a3f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a3fa:	4b07      	ldr	r3, [pc, #28]	; (800a418 <vTaskPlaceOnEventList+0x44>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	3318      	adds	r3, #24
 800a400:	4619      	mov	r1, r3
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f7fe fe8e 	bl	8009124 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a408:	2101      	movs	r1, #1
 800a40a:	6838      	ldr	r0, [r7, #0]
 800a40c:	f000 fa66 	bl	800a8dc <prvAddCurrentTaskToDelayedList>
}
 800a410:	bf00      	nop
 800a412:	3710      	adds	r7, #16
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}
 800a418:	200007b4 	.word	0x200007b4

0800a41c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b086      	sub	sp, #24
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	68db      	ldr	r3, [r3, #12]
 800a428:	68db      	ldr	r3, [r3, #12]
 800a42a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d10a      	bne.n	800a448 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a436:	f383 8811 	msr	BASEPRI, r3
 800a43a:	f3bf 8f6f 	isb	sy
 800a43e:	f3bf 8f4f 	dsb	sy
 800a442:	60fb      	str	r3, [r7, #12]
}
 800a444:	bf00      	nop
 800a446:	e7fe      	b.n	800a446 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	3318      	adds	r3, #24
 800a44c:	4618      	mov	r0, r3
 800a44e:	f7fe fea1 	bl	8009194 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a452:	4b1d      	ldr	r3, [pc, #116]	; (800a4c8 <xTaskRemoveFromEventList+0xac>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d11c      	bne.n	800a494 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	3304      	adds	r3, #4
 800a45e:	4618      	mov	r0, r3
 800a460:	f7fe fe98 	bl	8009194 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a468:	2201      	movs	r2, #1
 800a46a:	409a      	lsls	r2, r3
 800a46c:	4b17      	ldr	r3, [pc, #92]	; (800a4cc <xTaskRemoveFromEventList+0xb0>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4313      	orrs	r3, r2
 800a472:	4a16      	ldr	r2, [pc, #88]	; (800a4cc <xTaskRemoveFromEventList+0xb0>)
 800a474:	6013      	str	r3, [r2, #0]
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a47a:	4613      	mov	r3, r2
 800a47c:	009b      	lsls	r3, r3, #2
 800a47e:	4413      	add	r3, r2
 800a480:	009b      	lsls	r3, r3, #2
 800a482:	4a13      	ldr	r2, [pc, #76]	; (800a4d0 <xTaskRemoveFromEventList+0xb4>)
 800a484:	441a      	add	r2, r3
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	3304      	adds	r3, #4
 800a48a:	4619      	mov	r1, r3
 800a48c:	4610      	mov	r0, r2
 800a48e:	f7fe fe26 	bl	80090de <vListInsertEnd>
 800a492:	e005      	b.n	800a4a0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	3318      	adds	r3, #24
 800a498:	4619      	mov	r1, r3
 800a49a:	480e      	ldr	r0, [pc, #56]	; (800a4d4 <xTaskRemoveFromEventList+0xb8>)
 800a49c:	f7fe fe1f 	bl	80090de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4a4:	4b0c      	ldr	r3, [pc, #48]	; (800a4d8 <xTaskRemoveFromEventList+0xbc>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d905      	bls.n	800a4ba <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a4b2:	4b0a      	ldr	r3, [pc, #40]	; (800a4dc <xTaskRemoveFromEventList+0xc0>)
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	601a      	str	r2, [r3, #0]
 800a4b8:	e001      	b.n	800a4be <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a4be:	697b      	ldr	r3, [r7, #20]
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3718      	adds	r7, #24
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}
 800a4c8:	200008dc 	.word	0x200008dc
 800a4cc:	200008bc 	.word	0x200008bc
 800a4d0:	200007b8 	.word	0x200007b8
 800a4d4:	20000874 	.word	0x20000874
 800a4d8:	200007b4 	.word	0x200007b4
 800a4dc:	200008c8 	.word	0x200008c8

0800a4e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a4e8:	4b06      	ldr	r3, [pc, #24]	; (800a504 <vTaskInternalSetTimeOutState+0x24>)
 800a4ea:	681a      	ldr	r2, [r3, #0]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a4f0:	4b05      	ldr	r3, [pc, #20]	; (800a508 <vTaskInternalSetTimeOutState+0x28>)
 800a4f2:	681a      	ldr	r2, [r3, #0]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	605a      	str	r2, [r3, #4]
}
 800a4f8:	bf00      	nop
 800a4fa:	370c      	adds	r7, #12
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bc80      	pop	{r7}
 800a500:	4770      	bx	lr
 800a502:	bf00      	nop
 800a504:	200008cc 	.word	0x200008cc
 800a508:	200008b8 	.word	0x200008b8

0800a50c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b088      	sub	sp, #32
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d10a      	bne.n	800a532 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a520:	f383 8811 	msr	BASEPRI, r3
 800a524:	f3bf 8f6f 	isb	sy
 800a528:	f3bf 8f4f 	dsb	sy
 800a52c:	613b      	str	r3, [r7, #16]
}
 800a52e:	bf00      	nop
 800a530:	e7fe      	b.n	800a530 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d10a      	bne.n	800a54e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a53c:	f383 8811 	msr	BASEPRI, r3
 800a540:	f3bf 8f6f 	isb	sy
 800a544:	f3bf 8f4f 	dsb	sy
 800a548:	60fb      	str	r3, [r7, #12]
}
 800a54a:	bf00      	nop
 800a54c:	e7fe      	b.n	800a54c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a54e:	f000 fb1d 	bl	800ab8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a552:	4b1d      	ldr	r3, [pc, #116]	; (800a5c8 <xTaskCheckForTimeOut+0xbc>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	685b      	ldr	r3, [r3, #4]
 800a55c:	69ba      	ldr	r2, [r7, #24]
 800a55e:	1ad3      	subs	r3, r2, r3
 800a560:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a56a:	d102      	bne.n	800a572 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a56c:	2300      	movs	r3, #0
 800a56e:	61fb      	str	r3, [r7, #28]
 800a570:	e023      	b.n	800a5ba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681a      	ldr	r2, [r3, #0]
 800a576:	4b15      	ldr	r3, [pc, #84]	; (800a5cc <xTaskCheckForTimeOut+0xc0>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d007      	beq.n	800a58e <xTaskCheckForTimeOut+0x82>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	69ba      	ldr	r2, [r7, #24]
 800a584:	429a      	cmp	r2, r3
 800a586:	d302      	bcc.n	800a58e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a588:	2301      	movs	r3, #1
 800a58a:	61fb      	str	r3, [r7, #28]
 800a58c:	e015      	b.n	800a5ba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	697a      	ldr	r2, [r7, #20]
 800a594:	429a      	cmp	r2, r3
 800a596:	d20b      	bcs.n	800a5b0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	1ad2      	subs	r2, r2, r3
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f7ff ff9b 	bl	800a4e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	61fb      	str	r3, [r7, #28]
 800a5ae:	e004      	b.n	800a5ba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a5ba:	f000 fb17 	bl	800abec <vPortExitCritical>

	return xReturn;
 800a5be:	69fb      	ldr	r3, [r7, #28]
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3720      	adds	r7, #32
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}
 800a5c8:	200008b8 	.word	0x200008b8
 800a5cc:	200008cc 	.word	0x200008cc

0800a5d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a5d4:	4b03      	ldr	r3, [pc, #12]	; (800a5e4 <vTaskMissedYield+0x14>)
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	601a      	str	r2, [r3, #0]
}
 800a5da:	bf00      	nop
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bc80      	pop	{r7}
 800a5e0:	4770      	bx	lr
 800a5e2:	bf00      	nop
 800a5e4:	200008c8 	.word	0x200008c8

0800a5e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b082      	sub	sp, #8
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a5f0:	f000 f852 	bl	800a698 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a5f4:	4b06      	ldr	r3, [pc, #24]	; (800a610 <prvIdleTask+0x28>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	2b01      	cmp	r3, #1
 800a5fa:	d9f9      	bls.n	800a5f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a5fc:	4b05      	ldr	r3, [pc, #20]	; (800a614 <prvIdleTask+0x2c>)
 800a5fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a602:	601a      	str	r2, [r3, #0]
 800a604:	f3bf 8f4f 	dsb	sy
 800a608:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a60c:	e7f0      	b.n	800a5f0 <prvIdleTask+0x8>
 800a60e:	bf00      	nop
 800a610:	200007b8 	.word	0x200007b8
 800a614:	e000ed04 	.word	0xe000ed04

0800a618 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b082      	sub	sp, #8
 800a61c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a61e:	2300      	movs	r3, #0
 800a620:	607b      	str	r3, [r7, #4]
 800a622:	e00c      	b.n	800a63e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a624:	687a      	ldr	r2, [r7, #4]
 800a626:	4613      	mov	r3, r2
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	4413      	add	r3, r2
 800a62c:	009b      	lsls	r3, r3, #2
 800a62e:	4a12      	ldr	r2, [pc, #72]	; (800a678 <prvInitialiseTaskLists+0x60>)
 800a630:	4413      	add	r3, r2
 800a632:	4618      	mov	r0, r3
 800a634:	f7fe fd28 	bl	8009088 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	3301      	adds	r3, #1
 800a63c:	607b      	str	r3, [r7, #4]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2b06      	cmp	r3, #6
 800a642:	d9ef      	bls.n	800a624 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a644:	480d      	ldr	r0, [pc, #52]	; (800a67c <prvInitialiseTaskLists+0x64>)
 800a646:	f7fe fd1f 	bl	8009088 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a64a:	480d      	ldr	r0, [pc, #52]	; (800a680 <prvInitialiseTaskLists+0x68>)
 800a64c:	f7fe fd1c 	bl	8009088 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a650:	480c      	ldr	r0, [pc, #48]	; (800a684 <prvInitialiseTaskLists+0x6c>)
 800a652:	f7fe fd19 	bl	8009088 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a656:	480c      	ldr	r0, [pc, #48]	; (800a688 <prvInitialiseTaskLists+0x70>)
 800a658:	f7fe fd16 	bl	8009088 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a65c:	480b      	ldr	r0, [pc, #44]	; (800a68c <prvInitialiseTaskLists+0x74>)
 800a65e:	f7fe fd13 	bl	8009088 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a662:	4b0b      	ldr	r3, [pc, #44]	; (800a690 <prvInitialiseTaskLists+0x78>)
 800a664:	4a05      	ldr	r2, [pc, #20]	; (800a67c <prvInitialiseTaskLists+0x64>)
 800a666:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a668:	4b0a      	ldr	r3, [pc, #40]	; (800a694 <prvInitialiseTaskLists+0x7c>)
 800a66a:	4a05      	ldr	r2, [pc, #20]	; (800a680 <prvInitialiseTaskLists+0x68>)
 800a66c:	601a      	str	r2, [r3, #0]
}
 800a66e:	bf00      	nop
 800a670:	3708      	adds	r7, #8
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop
 800a678:	200007b8 	.word	0x200007b8
 800a67c:	20000844 	.word	0x20000844
 800a680:	20000858 	.word	0x20000858
 800a684:	20000874 	.word	0x20000874
 800a688:	20000888 	.word	0x20000888
 800a68c:	200008a0 	.word	0x200008a0
 800a690:	2000086c 	.word	0x2000086c
 800a694:	20000870 	.word	0x20000870

0800a698 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a69e:	e019      	b.n	800a6d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a6a0:	f000 fa74 	bl	800ab8c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6a4:	4b10      	ldr	r3, [pc, #64]	; (800a6e8 <prvCheckTasksWaitingTermination+0x50>)
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	68db      	ldr	r3, [r3, #12]
 800a6aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	3304      	adds	r3, #4
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f7fe fd6f 	bl	8009194 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a6b6:	4b0d      	ldr	r3, [pc, #52]	; (800a6ec <prvCheckTasksWaitingTermination+0x54>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	3b01      	subs	r3, #1
 800a6bc:	4a0b      	ldr	r2, [pc, #44]	; (800a6ec <prvCheckTasksWaitingTermination+0x54>)
 800a6be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a6c0:	4b0b      	ldr	r3, [pc, #44]	; (800a6f0 <prvCheckTasksWaitingTermination+0x58>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	3b01      	subs	r3, #1
 800a6c6:	4a0a      	ldr	r2, [pc, #40]	; (800a6f0 <prvCheckTasksWaitingTermination+0x58>)
 800a6c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a6ca:	f000 fa8f 	bl	800abec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f000 f810 	bl	800a6f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a6d4:	4b06      	ldr	r3, [pc, #24]	; (800a6f0 <prvCheckTasksWaitingTermination+0x58>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d1e1      	bne.n	800a6a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a6dc:	bf00      	nop
 800a6de:	bf00      	nop
 800a6e0:	3708      	adds	r7, #8
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	20000888 	.word	0x20000888
 800a6ec:	200008b4 	.word	0x200008b4
 800a6f0:	2000089c 	.word	0x2000089c

0800a6f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b084      	sub	sp, #16
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a702:	2b00      	cmp	r3, #0
 800a704:	d108      	bne.n	800a718 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a70a:	4618      	mov	r0, r3
 800a70c:	f000 fc02 	bl	800af14 <vPortFree>
				vPortFree( pxTCB );
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f000 fbff 	bl	800af14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a716:	e018      	b.n	800a74a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a71e:	2b01      	cmp	r3, #1
 800a720:	d103      	bne.n	800a72a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f000 fbf6 	bl	800af14 <vPortFree>
	}
 800a728:	e00f      	b.n	800a74a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a730:	2b02      	cmp	r3, #2
 800a732:	d00a      	beq.n	800a74a <prvDeleteTCB+0x56>
	__asm volatile
 800a734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a738:	f383 8811 	msr	BASEPRI, r3
 800a73c:	f3bf 8f6f 	isb	sy
 800a740:	f3bf 8f4f 	dsb	sy
 800a744:	60fb      	str	r3, [r7, #12]
}
 800a746:	bf00      	nop
 800a748:	e7fe      	b.n	800a748 <prvDeleteTCB+0x54>
	}
 800a74a:	bf00      	nop
 800a74c:	3710      	adds	r7, #16
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
	...

0800a754 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a754:	b480      	push	{r7}
 800a756:	b083      	sub	sp, #12
 800a758:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a75a:	4b0c      	ldr	r3, [pc, #48]	; (800a78c <prvResetNextTaskUnblockTime+0x38>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d104      	bne.n	800a76e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a764:	4b0a      	ldr	r3, [pc, #40]	; (800a790 <prvResetNextTaskUnblockTime+0x3c>)
 800a766:	f04f 32ff 	mov.w	r2, #4294967295
 800a76a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a76c:	e008      	b.n	800a780 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a76e:	4b07      	ldr	r3, [pc, #28]	; (800a78c <prvResetNextTaskUnblockTime+0x38>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	68db      	ldr	r3, [r3, #12]
 800a774:	68db      	ldr	r3, [r3, #12]
 800a776:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	685b      	ldr	r3, [r3, #4]
 800a77c:	4a04      	ldr	r2, [pc, #16]	; (800a790 <prvResetNextTaskUnblockTime+0x3c>)
 800a77e:	6013      	str	r3, [r2, #0]
}
 800a780:	bf00      	nop
 800a782:	370c      	adds	r7, #12
 800a784:	46bd      	mov	sp, r7
 800a786:	bc80      	pop	{r7}
 800a788:	4770      	bx	lr
 800a78a:	bf00      	nop
 800a78c:	2000086c 	.word	0x2000086c
 800a790:	200008d4 	.word	0x200008d4

0800a794 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a79a:	4b0b      	ldr	r3, [pc, #44]	; (800a7c8 <xTaskGetSchedulerState+0x34>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d102      	bne.n	800a7a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	607b      	str	r3, [r7, #4]
 800a7a6:	e008      	b.n	800a7ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7a8:	4b08      	ldr	r3, [pc, #32]	; (800a7cc <xTaskGetSchedulerState+0x38>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d102      	bne.n	800a7b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a7b0:	2302      	movs	r3, #2
 800a7b2:	607b      	str	r3, [r7, #4]
 800a7b4:	e001      	b.n	800a7ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a7ba:	687b      	ldr	r3, [r7, #4]
	}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	370c      	adds	r7, #12
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bc80      	pop	{r7}
 800a7c4:	4770      	bx	lr
 800a7c6:	bf00      	nop
 800a7c8:	200008c0 	.word	0x200008c0
 800a7cc:	200008dc 	.word	0x200008dc

0800a7d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b086      	sub	sp, #24
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d06e      	beq.n	800a8c4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a7e6:	4b3a      	ldr	r3, [pc, #232]	; (800a8d0 <xTaskPriorityDisinherit+0x100>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	693a      	ldr	r2, [r7, #16]
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	d00a      	beq.n	800a806 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f4:	f383 8811 	msr	BASEPRI, r3
 800a7f8:	f3bf 8f6f 	isb	sy
 800a7fc:	f3bf 8f4f 	dsb	sy
 800a800:	60fb      	str	r3, [r7, #12]
}
 800a802:	bf00      	nop
 800a804:	e7fe      	b.n	800a804 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d10a      	bne.n	800a824 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a812:	f383 8811 	msr	BASEPRI, r3
 800a816:	f3bf 8f6f 	isb	sy
 800a81a:	f3bf 8f4f 	dsb	sy
 800a81e:	60bb      	str	r3, [r7, #8]
}
 800a820:	bf00      	nop
 800a822:	e7fe      	b.n	800a822 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a828:	1e5a      	subs	r2, r3, #1
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a836:	429a      	cmp	r2, r3
 800a838:	d044      	beq.n	800a8c4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a83a:	693b      	ldr	r3, [r7, #16]
 800a83c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d140      	bne.n	800a8c4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	3304      	adds	r3, #4
 800a846:	4618      	mov	r0, r3
 800a848:	f7fe fca4 	bl	8009194 <uxListRemove>
 800a84c:	4603      	mov	r3, r0
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d115      	bne.n	800a87e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a856:	491f      	ldr	r1, [pc, #124]	; (800a8d4 <xTaskPriorityDisinherit+0x104>)
 800a858:	4613      	mov	r3, r2
 800a85a:	009b      	lsls	r3, r3, #2
 800a85c:	4413      	add	r3, r2
 800a85e:	009b      	lsls	r3, r3, #2
 800a860:	440b      	add	r3, r1
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d10a      	bne.n	800a87e <xTaskPriorityDisinherit+0xae>
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a86c:	2201      	movs	r2, #1
 800a86e:	fa02 f303 	lsl.w	r3, r2, r3
 800a872:	43da      	mvns	r2, r3
 800a874:	4b18      	ldr	r3, [pc, #96]	; (800a8d8 <xTaskPriorityDisinherit+0x108>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4013      	ands	r3, r2
 800a87a:	4a17      	ldr	r2, [pc, #92]	; (800a8d8 <xTaskPriorityDisinherit+0x108>)
 800a87c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a88a:	f1c3 0207 	rsb	r2, r3, #7
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a896:	2201      	movs	r2, #1
 800a898:	409a      	lsls	r2, r3
 800a89a:	4b0f      	ldr	r3, [pc, #60]	; (800a8d8 <xTaskPriorityDisinherit+0x108>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	4a0d      	ldr	r2, [pc, #52]	; (800a8d8 <xTaskPriorityDisinherit+0x108>)
 800a8a2:	6013      	str	r3, [r2, #0]
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8a8:	4613      	mov	r3, r2
 800a8aa:	009b      	lsls	r3, r3, #2
 800a8ac:	4413      	add	r3, r2
 800a8ae:	009b      	lsls	r3, r3, #2
 800a8b0:	4a08      	ldr	r2, [pc, #32]	; (800a8d4 <xTaskPriorityDisinherit+0x104>)
 800a8b2:	441a      	add	r2, r3
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	3304      	adds	r3, #4
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	4610      	mov	r0, r2
 800a8bc:	f7fe fc0f 	bl	80090de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a8c4:	697b      	ldr	r3, [r7, #20]
	}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3718      	adds	r7, #24
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	200007b4 	.word	0x200007b4
 800a8d4:	200007b8 	.word	0x200007b8
 800a8d8:	200008bc 	.word	0x200008bc

0800a8dc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b084      	sub	sp, #16
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a8e6:	4b29      	ldr	r3, [pc, #164]	; (800a98c <prvAddCurrentTaskToDelayedList+0xb0>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a8ec:	4b28      	ldr	r3, [pc, #160]	; (800a990 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	3304      	adds	r3, #4
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f7fe fc4e 	bl	8009194 <uxListRemove>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d10b      	bne.n	800a916 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a8fe:	4b24      	ldr	r3, [pc, #144]	; (800a990 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a904:	2201      	movs	r2, #1
 800a906:	fa02 f303 	lsl.w	r3, r2, r3
 800a90a:	43da      	mvns	r2, r3
 800a90c:	4b21      	ldr	r3, [pc, #132]	; (800a994 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4013      	ands	r3, r2
 800a912:	4a20      	ldr	r2, [pc, #128]	; (800a994 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a914:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a91c:	d10a      	bne.n	800a934 <prvAddCurrentTaskToDelayedList+0x58>
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d007      	beq.n	800a934 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a924:	4b1a      	ldr	r3, [pc, #104]	; (800a990 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	3304      	adds	r3, #4
 800a92a:	4619      	mov	r1, r3
 800a92c:	481a      	ldr	r0, [pc, #104]	; (800a998 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a92e:	f7fe fbd6 	bl	80090de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a932:	e026      	b.n	800a982 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a934:	68fa      	ldr	r2, [r7, #12]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	4413      	add	r3, r2
 800a93a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a93c:	4b14      	ldr	r3, [pc, #80]	; (800a990 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	68ba      	ldr	r2, [r7, #8]
 800a942:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a944:	68ba      	ldr	r2, [r7, #8]
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	429a      	cmp	r2, r3
 800a94a:	d209      	bcs.n	800a960 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a94c:	4b13      	ldr	r3, [pc, #76]	; (800a99c <prvAddCurrentTaskToDelayedList+0xc0>)
 800a94e:	681a      	ldr	r2, [r3, #0]
 800a950:	4b0f      	ldr	r3, [pc, #60]	; (800a990 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	3304      	adds	r3, #4
 800a956:	4619      	mov	r1, r3
 800a958:	4610      	mov	r0, r2
 800a95a:	f7fe fbe3 	bl	8009124 <vListInsert>
}
 800a95e:	e010      	b.n	800a982 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a960:	4b0f      	ldr	r3, [pc, #60]	; (800a9a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a962:	681a      	ldr	r2, [r3, #0]
 800a964:	4b0a      	ldr	r3, [pc, #40]	; (800a990 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	3304      	adds	r3, #4
 800a96a:	4619      	mov	r1, r3
 800a96c:	4610      	mov	r0, r2
 800a96e:	f7fe fbd9 	bl	8009124 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a972:	4b0c      	ldr	r3, [pc, #48]	; (800a9a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	68ba      	ldr	r2, [r7, #8]
 800a978:	429a      	cmp	r2, r3
 800a97a:	d202      	bcs.n	800a982 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a97c:	4a09      	ldr	r2, [pc, #36]	; (800a9a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	6013      	str	r3, [r2, #0]
}
 800a982:	bf00      	nop
 800a984:	3710      	adds	r7, #16
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
 800a98a:	bf00      	nop
 800a98c:	200008b8 	.word	0x200008b8
 800a990:	200007b4 	.word	0x200007b4
 800a994:	200008bc 	.word	0x200008bc
 800a998:	200008a0 	.word	0x200008a0
 800a99c:	20000870 	.word	0x20000870
 800a9a0:	2000086c 	.word	0x2000086c
 800a9a4:	200008d4 	.word	0x200008d4

0800a9a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b085      	sub	sp, #20
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	60f8      	str	r0, [r7, #12]
 800a9b0:	60b9      	str	r1, [r7, #8]
 800a9b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	3b04      	subs	r3, #4
 800a9b8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a9c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	3b04      	subs	r3, #4
 800a9c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	f023 0201 	bic.w	r2, r3, #1
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	3b04      	subs	r3, #4
 800a9d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a9d8:	4a08      	ldr	r2, [pc, #32]	; (800a9fc <pxPortInitialiseStack+0x54>)
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	3b14      	subs	r3, #20
 800a9e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a9e4:	687a      	ldr	r2, [r7, #4]
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	3b20      	subs	r3, #32
 800a9ee:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3714      	adds	r7, #20
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bc80      	pop	{r7}
 800a9fa:	4770      	bx	lr
 800a9fc:	0800aa01 	.word	0x0800aa01

0800aa00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aa00:	b480      	push	{r7}
 800aa02:	b085      	sub	sp, #20
 800aa04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800aa06:	2300      	movs	r3, #0
 800aa08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aa0a:	4b12      	ldr	r3, [pc, #72]	; (800aa54 <prvTaskExitError+0x54>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa12:	d00a      	beq.n	800aa2a <prvTaskExitError+0x2a>
	__asm volatile
 800aa14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa18:	f383 8811 	msr	BASEPRI, r3
 800aa1c:	f3bf 8f6f 	isb	sy
 800aa20:	f3bf 8f4f 	dsb	sy
 800aa24:	60fb      	str	r3, [r7, #12]
}
 800aa26:	bf00      	nop
 800aa28:	e7fe      	b.n	800aa28 <prvTaskExitError+0x28>
	__asm volatile
 800aa2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa2e:	f383 8811 	msr	BASEPRI, r3
 800aa32:	f3bf 8f6f 	isb	sy
 800aa36:	f3bf 8f4f 	dsb	sy
 800aa3a:	60bb      	str	r3, [r7, #8]
}
 800aa3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aa3e:	bf00      	nop
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d0fc      	beq.n	800aa40 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aa46:	bf00      	nop
 800aa48:	bf00      	nop
 800aa4a:	3714      	adds	r7, #20
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bc80      	pop	{r7}
 800aa50:	4770      	bx	lr
 800aa52:	bf00      	nop
 800aa54:	2000000c 	.word	0x2000000c
	...

0800aa60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aa60:	4b07      	ldr	r3, [pc, #28]	; (800aa80 <pxCurrentTCBConst2>)
 800aa62:	6819      	ldr	r1, [r3, #0]
 800aa64:	6808      	ldr	r0, [r1, #0]
 800aa66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800aa6a:	f380 8809 	msr	PSP, r0
 800aa6e:	f3bf 8f6f 	isb	sy
 800aa72:	f04f 0000 	mov.w	r0, #0
 800aa76:	f380 8811 	msr	BASEPRI, r0
 800aa7a:	f04e 0e0d 	orr.w	lr, lr, #13
 800aa7e:	4770      	bx	lr

0800aa80 <pxCurrentTCBConst2>:
 800aa80:	200007b4 	.word	0x200007b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aa84:	bf00      	nop
 800aa86:	bf00      	nop

0800aa88 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800aa88:	4806      	ldr	r0, [pc, #24]	; (800aaa4 <prvPortStartFirstTask+0x1c>)
 800aa8a:	6800      	ldr	r0, [r0, #0]
 800aa8c:	6800      	ldr	r0, [r0, #0]
 800aa8e:	f380 8808 	msr	MSP, r0
 800aa92:	b662      	cpsie	i
 800aa94:	b661      	cpsie	f
 800aa96:	f3bf 8f4f 	dsb	sy
 800aa9a:	f3bf 8f6f 	isb	sy
 800aa9e:	df00      	svc	0
 800aaa0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aaa2:	bf00      	nop
 800aaa4:	e000ed08 	.word	0xe000ed08

0800aaa8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b084      	sub	sp, #16
 800aaac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aaae:	4b32      	ldr	r3, [pc, #200]	; (800ab78 <xPortStartScheduler+0xd0>)
 800aab0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	22ff      	movs	r2, #255	; 0xff
 800aabe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aac8:	78fb      	ldrb	r3, [r7, #3]
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aad0:	b2da      	uxtb	r2, r3
 800aad2:	4b2a      	ldr	r3, [pc, #168]	; (800ab7c <xPortStartScheduler+0xd4>)
 800aad4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aad6:	4b2a      	ldr	r3, [pc, #168]	; (800ab80 <xPortStartScheduler+0xd8>)
 800aad8:	2207      	movs	r2, #7
 800aada:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aadc:	e009      	b.n	800aaf2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800aade:	4b28      	ldr	r3, [pc, #160]	; (800ab80 <xPortStartScheduler+0xd8>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	3b01      	subs	r3, #1
 800aae4:	4a26      	ldr	r2, [pc, #152]	; (800ab80 <xPortStartScheduler+0xd8>)
 800aae6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aae8:	78fb      	ldrb	r3, [r7, #3]
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	005b      	lsls	r3, r3, #1
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aaf2:	78fb      	ldrb	r3, [r7, #3]
 800aaf4:	b2db      	uxtb	r3, r3
 800aaf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aafa:	2b80      	cmp	r3, #128	; 0x80
 800aafc:	d0ef      	beq.n	800aade <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aafe:	4b20      	ldr	r3, [pc, #128]	; (800ab80 <xPortStartScheduler+0xd8>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f1c3 0307 	rsb	r3, r3, #7
 800ab06:	2b04      	cmp	r3, #4
 800ab08:	d00a      	beq.n	800ab20 <xPortStartScheduler+0x78>
	__asm volatile
 800ab0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab0e:	f383 8811 	msr	BASEPRI, r3
 800ab12:	f3bf 8f6f 	isb	sy
 800ab16:	f3bf 8f4f 	dsb	sy
 800ab1a:	60bb      	str	r3, [r7, #8]
}
 800ab1c:	bf00      	nop
 800ab1e:	e7fe      	b.n	800ab1e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ab20:	4b17      	ldr	r3, [pc, #92]	; (800ab80 <xPortStartScheduler+0xd8>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	021b      	lsls	r3, r3, #8
 800ab26:	4a16      	ldr	r2, [pc, #88]	; (800ab80 <xPortStartScheduler+0xd8>)
 800ab28:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ab2a:	4b15      	ldr	r3, [pc, #84]	; (800ab80 <xPortStartScheduler+0xd8>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ab32:	4a13      	ldr	r2, [pc, #76]	; (800ab80 <xPortStartScheduler+0xd8>)
 800ab34:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	b2da      	uxtb	r2, r3
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ab3e:	4b11      	ldr	r3, [pc, #68]	; (800ab84 <xPortStartScheduler+0xdc>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	4a10      	ldr	r2, [pc, #64]	; (800ab84 <xPortStartScheduler+0xdc>)
 800ab44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ab48:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ab4a:	4b0e      	ldr	r3, [pc, #56]	; (800ab84 <xPortStartScheduler+0xdc>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	4a0d      	ldr	r2, [pc, #52]	; (800ab84 <xPortStartScheduler+0xdc>)
 800ab50:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ab54:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ab56:	f000 f8b9 	bl	800accc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ab5a:	4b0b      	ldr	r3, [pc, #44]	; (800ab88 <xPortStartScheduler+0xe0>)
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ab60:	f7ff ff92 	bl	800aa88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ab64:	f7ff fbdc 	bl	800a320 <vTaskSwitchContext>
	prvTaskExitError();
 800ab68:	f7ff ff4a 	bl	800aa00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ab6c:	2300      	movs	r3, #0
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3710      	adds	r7, #16
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}
 800ab76:	bf00      	nop
 800ab78:	e000e400 	.word	0xe000e400
 800ab7c:	200008e0 	.word	0x200008e0
 800ab80:	200008e4 	.word	0x200008e4
 800ab84:	e000ed20 	.word	0xe000ed20
 800ab88:	2000000c 	.word	0x2000000c

0800ab8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b083      	sub	sp, #12
 800ab90:	af00      	add	r7, sp, #0
	__asm volatile
 800ab92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab96:	f383 8811 	msr	BASEPRI, r3
 800ab9a:	f3bf 8f6f 	isb	sy
 800ab9e:	f3bf 8f4f 	dsb	sy
 800aba2:	607b      	str	r3, [r7, #4]
}
 800aba4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aba6:	4b0f      	ldr	r3, [pc, #60]	; (800abe4 <vPortEnterCritical+0x58>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	3301      	adds	r3, #1
 800abac:	4a0d      	ldr	r2, [pc, #52]	; (800abe4 <vPortEnterCritical+0x58>)
 800abae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800abb0:	4b0c      	ldr	r3, [pc, #48]	; (800abe4 <vPortEnterCritical+0x58>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	d10f      	bne.n	800abd8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800abb8:	4b0b      	ldr	r3, [pc, #44]	; (800abe8 <vPortEnterCritical+0x5c>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	b2db      	uxtb	r3, r3
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d00a      	beq.n	800abd8 <vPortEnterCritical+0x4c>
	__asm volatile
 800abc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc6:	f383 8811 	msr	BASEPRI, r3
 800abca:	f3bf 8f6f 	isb	sy
 800abce:	f3bf 8f4f 	dsb	sy
 800abd2:	603b      	str	r3, [r7, #0]
}
 800abd4:	bf00      	nop
 800abd6:	e7fe      	b.n	800abd6 <vPortEnterCritical+0x4a>
	}
}
 800abd8:	bf00      	nop
 800abda:	370c      	adds	r7, #12
 800abdc:	46bd      	mov	sp, r7
 800abde:	bc80      	pop	{r7}
 800abe0:	4770      	bx	lr
 800abe2:	bf00      	nop
 800abe4:	2000000c 	.word	0x2000000c
 800abe8:	e000ed04 	.word	0xe000ed04

0800abec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800abec:	b480      	push	{r7}
 800abee:	b083      	sub	sp, #12
 800abf0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800abf2:	4b11      	ldr	r3, [pc, #68]	; (800ac38 <vPortExitCritical+0x4c>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d10a      	bne.n	800ac10 <vPortExitCritical+0x24>
	__asm volatile
 800abfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abfe:	f383 8811 	msr	BASEPRI, r3
 800ac02:	f3bf 8f6f 	isb	sy
 800ac06:	f3bf 8f4f 	dsb	sy
 800ac0a:	607b      	str	r3, [r7, #4]
}
 800ac0c:	bf00      	nop
 800ac0e:	e7fe      	b.n	800ac0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ac10:	4b09      	ldr	r3, [pc, #36]	; (800ac38 <vPortExitCritical+0x4c>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	3b01      	subs	r3, #1
 800ac16:	4a08      	ldr	r2, [pc, #32]	; (800ac38 <vPortExitCritical+0x4c>)
 800ac18:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ac1a:	4b07      	ldr	r3, [pc, #28]	; (800ac38 <vPortExitCritical+0x4c>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d105      	bne.n	800ac2e <vPortExitCritical+0x42>
 800ac22:	2300      	movs	r3, #0
 800ac24:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	f383 8811 	msr	BASEPRI, r3
}
 800ac2c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ac2e:	bf00      	nop
 800ac30:	370c      	adds	r7, #12
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bc80      	pop	{r7}
 800ac36:	4770      	bx	lr
 800ac38:	2000000c 	.word	0x2000000c
 800ac3c:	00000000 	.word	0x00000000

0800ac40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ac40:	f3ef 8009 	mrs	r0, PSP
 800ac44:	f3bf 8f6f 	isb	sy
 800ac48:	4b0d      	ldr	r3, [pc, #52]	; (800ac80 <pxCurrentTCBConst>)
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ac50:	6010      	str	r0, [r2, #0]
 800ac52:	e92d 4008 	stmdb	sp!, {r3, lr}
 800ac56:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ac5a:	f380 8811 	msr	BASEPRI, r0
 800ac5e:	f7ff fb5f 	bl	800a320 <vTaskSwitchContext>
 800ac62:	f04f 0000 	mov.w	r0, #0
 800ac66:	f380 8811 	msr	BASEPRI, r0
 800ac6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ac6e:	6819      	ldr	r1, [r3, #0]
 800ac70:	6808      	ldr	r0, [r1, #0]
 800ac72:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ac76:	f380 8809 	msr	PSP, r0
 800ac7a:	f3bf 8f6f 	isb	sy
 800ac7e:	4770      	bx	lr

0800ac80 <pxCurrentTCBConst>:
 800ac80:	200007b4 	.word	0x200007b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ac84:	bf00      	nop
 800ac86:	bf00      	nop

0800ac88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b082      	sub	sp, #8
 800ac8c:	af00      	add	r7, sp, #0
	__asm volatile
 800ac8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac92:	f383 8811 	msr	BASEPRI, r3
 800ac96:	f3bf 8f6f 	isb	sy
 800ac9a:	f3bf 8f4f 	dsb	sy
 800ac9e:	607b      	str	r3, [r7, #4]
}
 800aca0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aca2:	f7ff fa85 	bl	800a1b0 <xTaskIncrementTick>
 800aca6:	4603      	mov	r3, r0
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d003      	beq.n	800acb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800acac:	4b06      	ldr	r3, [pc, #24]	; (800acc8 <SysTick_Handler+0x40>)
 800acae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acb2:	601a      	str	r2, [r3, #0]
 800acb4:	2300      	movs	r3, #0
 800acb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	f383 8811 	msr	BASEPRI, r3
}
 800acbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800acc0:	bf00      	nop
 800acc2:	3708      	adds	r7, #8
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	e000ed04 	.word	0xe000ed04

0800accc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800accc:	b480      	push	{r7}
 800acce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800acd0:	4b0a      	ldr	r3, [pc, #40]	; (800acfc <vPortSetupTimerInterrupt+0x30>)
 800acd2:	2200      	movs	r2, #0
 800acd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800acd6:	4b0a      	ldr	r3, [pc, #40]	; (800ad00 <vPortSetupTimerInterrupt+0x34>)
 800acd8:	2200      	movs	r2, #0
 800acda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800acdc:	4b09      	ldr	r3, [pc, #36]	; (800ad04 <vPortSetupTimerInterrupt+0x38>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a09      	ldr	r2, [pc, #36]	; (800ad08 <vPortSetupTimerInterrupt+0x3c>)
 800ace2:	fba2 2303 	umull	r2, r3, r2, r3
 800ace6:	099b      	lsrs	r3, r3, #6
 800ace8:	4a08      	ldr	r2, [pc, #32]	; (800ad0c <vPortSetupTimerInterrupt+0x40>)
 800acea:	3b01      	subs	r3, #1
 800acec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800acee:	4b03      	ldr	r3, [pc, #12]	; (800acfc <vPortSetupTimerInterrupt+0x30>)
 800acf0:	2207      	movs	r2, #7
 800acf2:	601a      	str	r2, [r3, #0]
}
 800acf4:	bf00      	nop
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bc80      	pop	{r7}
 800acfa:	4770      	bx	lr
 800acfc:	e000e010 	.word	0xe000e010
 800ad00:	e000e018 	.word	0xe000e018
 800ad04:	20000000 	.word	0x20000000
 800ad08:	10624dd3 	.word	0x10624dd3
 800ad0c:	e000e014 	.word	0xe000e014

0800ad10 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ad10:	b480      	push	{r7}
 800ad12:	b085      	sub	sp, #20
 800ad14:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ad16:	f3ef 8305 	mrs	r3, IPSR
 800ad1a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	2b0f      	cmp	r3, #15
 800ad20:	d914      	bls.n	800ad4c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ad22:	4a16      	ldr	r2, [pc, #88]	; (800ad7c <vPortValidateInterruptPriority+0x6c>)
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	4413      	add	r3, r2
 800ad28:	781b      	ldrb	r3, [r3, #0]
 800ad2a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ad2c:	4b14      	ldr	r3, [pc, #80]	; (800ad80 <vPortValidateInterruptPriority+0x70>)
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	7afa      	ldrb	r2, [r7, #11]
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d20a      	bcs.n	800ad4c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ad36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad3a:	f383 8811 	msr	BASEPRI, r3
 800ad3e:	f3bf 8f6f 	isb	sy
 800ad42:	f3bf 8f4f 	dsb	sy
 800ad46:	607b      	str	r3, [r7, #4]
}
 800ad48:	bf00      	nop
 800ad4a:	e7fe      	b.n	800ad4a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ad4c:	4b0d      	ldr	r3, [pc, #52]	; (800ad84 <vPortValidateInterruptPriority+0x74>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ad54:	4b0c      	ldr	r3, [pc, #48]	; (800ad88 <vPortValidateInterruptPriority+0x78>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	429a      	cmp	r2, r3
 800ad5a:	d90a      	bls.n	800ad72 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ad5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad60:	f383 8811 	msr	BASEPRI, r3
 800ad64:	f3bf 8f6f 	isb	sy
 800ad68:	f3bf 8f4f 	dsb	sy
 800ad6c:	603b      	str	r3, [r7, #0]
}
 800ad6e:	bf00      	nop
 800ad70:	e7fe      	b.n	800ad70 <vPortValidateInterruptPriority+0x60>
	}
 800ad72:	bf00      	nop
 800ad74:	3714      	adds	r7, #20
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bc80      	pop	{r7}
 800ad7a:	4770      	bx	lr
 800ad7c:	e000e3f0 	.word	0xe000e3f0
 800ad80:	200008e0 	.word	0x200008e0
 800ad84:	e000ed0c 	.word	0xe000ed0c
 800ad88:	200008e4 	.word	0x200008e4

0800ad8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b08a      	sub	sp, #40	; 0x28
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ad94:	2300      	movs	r3, #0
 800ad96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ad98:	f7ff f960 	bl	800a05c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ad9c:	4b58      	ldr	r3, [pc, #352]	; (800af00 <pvPortMalloc+0x174>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d101      	bne.n	800ada8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ada4:	f000 f910 	bl	800afc8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ada8:	4b56      	ldr	r3, [pc, #344]	; (800af04 <pvPortMalloc+0x178>)
 800adaa:	681a      	ldr	r2, [r3, #0]
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	4013      	ands	r3, r2
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	f040 808e 	bne.w	800aed2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d01d      	beq.n	800adf8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800adbc:	2208      	movs	r2, #8
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	4413      	add	r3, r2
 800adc2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f003 0307 	and.w	r3, r3, #7
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d014      	beq.n	800adf8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f023 0307 	bic.w	r3, r3, #7
 800add4:	3308      	adds	r3, #8
 800add6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f003 0307 	and.w	r3, r3, #7
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d00a      	beq.n	800adf8 <pvPortMalloc+0x6c>
	__asm volatile
 800ade2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade6:	f383 8811 	msr	BASEPRI, r3
 800adea:	f3bf 8f6f 	isb	sy
 800adee:	f3bf 8f4f 	dsb	sy
 800adf2:	617b      	str	r3, [r7, #20]
}
 800adf4:	bf00      	nop
 800adf6:	e7fe      	b.n	800adf6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d069      	beq.n	800aed2 <pvPortMalloc+0x146>
 800adfe:	4b42      	ldr	r3, [pc, #264]	; (800af08 <pvPortMalloc+0x17c>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	687a      	ldr	r2, [r7, #4]
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d864      	bhi.n	800aed2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ae08:	4b40      	ldr	r3, [pc, #256]	; (800af0c <pvPortMalloc+0x180>)
 800ae0a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ae0c:	4b3f      	ldr	r3, [pc, #252]	; (800af0c <pvPortMalloc+0x180>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae12:	e004      	b.n	800ae1e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ae14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae16:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ae18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d903      	bls.n	800ae30 <pvPortMalloc+0xa4>
 800ae28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d1f1      	bne.n	800ae14 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ae30:	4b33      	ldr	r3, [pc, #204]	; (800af00 <pvPortMalloc+0x174>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae36:	429a      	cmp	r2, r3
 800ae38:	d04b      	beq.n	800aed2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ae3a:	6a3b      	ldr	r3, [r7, #32]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	2208      	movs	r2, #8
 800ae40:	4413      	add	r3, r2
 800ae42:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ae44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae46:	681a      	ldr	r2, [r3, #0]
 800ae48:	6a3b      	ldr	r3, [r7, #32]
 800ae4a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ae4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae4e:	685a      	ldr	r2, [r3, #4]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	1ad2      	subs	r2, r2, r3
 800ae54:	2308      	movs	r3, #8
 800ae56:	005b      	lsls	r3, r3, #1
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d91f      	bls.n	800ae9c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ae5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	4413      	add	r3, r2
 800ae62:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae64:	69bb      	ldr	r3, [r7, #24]
 800ae66:	f003 0307 	and.w	r3, r3, #7
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d00a      	beq.n	800ae84 <pvPortMalloc+0xf8>
	__asm volatile
 800ae6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae72:	f383 8811 	msr	BASEPRI, r3
 800ae76:	f3bf 8f6f 	isb	sy
 800ae7a:	f3bf 8f4f 	dsb	sy
 800ae7e:	613b      	str	r3, [r7, #16]
}
 800ae80:	bf00      	nop
 800ae82:	e7fe      	b.n	800ae82 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ae84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae86:	685a      	ldr	r2, [r3, #4]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	1ad2      	subs	r2, r2, r3
 800ae8c:	69bb      	ldr	r3, [r7, #24]
 800ae8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ae90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae92:	687a      	ldr	r2, [r7, #4]
 800ae94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ae96:	69b8      	ldr	r0, [r7, #24]
 800ae98:	f000 f8f8 	bl	800b08c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ae9c:	4b1a      	ldr	r3, [pc, #104]	; (800af08 <pvPortMalloc+0x17c>)
 800ae9e:	681a      	ldr	r2, [r3, #0]
 800aea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	1ad3      	subs	r3, r2, r3
 800aea6:	4a18      	ldr	r2, [pc, #96]	; (800af08 <pvPortMalloc+0x17c>)
 800aea8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aeaa:	4b17      	ldr	r3, [pc, #92]	; (800af08 <pvPortMalloc+0x17c>)
 800aeac:	681a      	ldr	r2, [r3, #0]
 800aeae:	4b18      	ldr	r3, [pc, #96]	; (800af10 <pvPortMalloc+0x184>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	d203      	bcs.n	800aebe <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aeb6:	4b14      	ldr	r3, [pc, #80]	; (800af08 <pvPortMalloc+0x17c>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	4a15      	ldr	r2, [pc, #84]	; (800af10 <pvPortMalloc+0x184>)
 800aebc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec0:	685a      	ldr	r2, [r3, #4]
 800aec2:	4b10      	ldr	r3, [pc, #64]	; (800af04 <pvPortMalloc+0x178>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	431a      	orrs	r2, r3
 800aec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aece:	2200      	movs	r2, #0
 800aed0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aed2:	f7ff f8d1 	bl	800a078 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aed6:	69fb      	ldr	r3, [r7, #28]
 800aed8:	f003 0307 	and.w	r3, r3, #7
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d00a      	beq.n	800aef6 <pvPortMalloc+0x16a>
	__asm volatile
 800aee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee4:	f383 8811 	msr	BASEPRI, r3
 800aee8:	f3bf 8f6f 	isb	sy
 800aeec:	f3bf 8f4f 	dsb	sy
 800aef0:	60fb      	str	r3, [r7, #12]
}
 800aef2:	bf00      	nop
 800aef4:	e7fe      	b.n	800aef4 <pvPortMalloc+0x168>
	return pvReturn;
 800aef6:	69fb      	ldr	r3, [r7, #28]
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3728      	adds	r7, #40	; 0x28
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}
 800af00:	200014f0 	.word	0x200014f0
 800af04:	200014fc 	.word	0x200014fc
 800af08:	200014f4 	.word	0x200014f4
 800af0c:	200014e8 	.word	0x200014e8
 800af10:	200014f8 	.word	0x200014f8

0800af14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b086      	sub	sp, #24
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d048      	beq.n	800afb8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800af26:	2308      	movs	r3, #8
 800af28:	425b      	negs	r3, r3
 800af2a:	697a      	ldr	r2, [r7, #20]
 800af2c:	4413      	add	r3, r2
 800af2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	685a      	ldr	r2, [r3, #4]
 800af38:	4b21      	ldr	r3, [pc, #132]	; (800afc0 <vPortFree+0xac>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	4013      	ands	r3, r2
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d10a      	bne.n	800af58 <vPortFree+0x44>
	__asm volatile
 800af42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af46:	f383 8811 	msr	BASEPRI, r3
 800af4a:	f3bf 8f6f 	isb	sy
 800af4e:	f3bf 8f4f 	dsb	sy
 800af52:	60fb      	str	r3, [r7, #12]
}
 800af54:	bf00      	nop
 800af56:	e7fe      	b.n	800af56 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d00a      	beq.n	800af76 <vPortFree+0x62>
	__asm volatile
 800af60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af64:	f383 8811 	msr	BASEPRI, r3
 800af68:	f3bf 8f6f 	isb	sy
 800af6c:	f3bf 8f4f 	dsb	sy
 800af70:	60bb      	str	r3, [r7, #8]
}
 800af72:	bf00      	nop
 800af74:	e7fe      	b.n	800af74 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	685a      	ldr	r2, [r3, #4]
 800af7a:	4b11      	ldr	r3, [pc, #68]	; (800afc0 <vPortFree+0xac>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	4013      	ands	r3, r2
 800af80:	2b00      	cmp	r3, #0
 800af82:	d019      	beq.n	800afb8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d115      	bne.n	800afb8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	685a      	ldr	r2, [r3, #4]
 800af90:	4b0b      	ldr	r3, [pc, #44]	; (800afc0 <vPortFree+0xac>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	43db      	mvns	r3, r3
 800af96:	401a      	ands	r2, r3
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800af9c:	f7ff f85e 	bl	800a05c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800afa0:	693b      	ldr	r3, [r7, #16]
 800afa2:	685a      	ldr	r2, [r3, #4]
 800afa4:	4b07      	ldr	r3, [pc, #28]	; (800afc4 <vPortFree+0xb0>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4413      	add	r3, r2
 800afaa:	4a06      	ldr	r2, [pc, #24]	; (800afc4 <vPortFree+0xb0>)
 800afac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800afae:	6938      	ldr	r0, [r7, #16]
 800afb0:	f000 f86c 	bl	800b08c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800afb4:	f7ff f860 	bl	800a078 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800afb8:	bf00      	nop
 800afba:	3718      	adds	r7, #24
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}
 800afc0:	200014fc 	.word	0x200014fc
 800afc4:	200014f4 	.word	0x200014f4

0800afc8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800afc8:	b480      	push	{r7}
 800afca:	b085      	sub	sp, #20
 800afcc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800afce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800afd2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800afd4:	4b27      	ldr	r3, [pc, #156]	; (800b074 <prvHeapInit+0xac>)
 800afd6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	f003 0307 	and.w	r3, r3, #7
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d00c      	beq.n	800affc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	3307      	adds	r3, #7
 800afe6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f023 0307 	bic.w	r3, r3, #7
 800afee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aff0:	68ba      	ldr	r2, [r7, #8]
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	1ad3      	subs	r3, r2, r3
 800aff6:	4a1f      	ldr	r2, [pc, #124]	; (800b074 <prvHeapInit+0xac>)
 800aff8:	4413      	add	r3, r2
 800affa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b000:	4a1d      	ldr	r2, [pc, #116]	; (800b078 <prvHeapInit+0xb0>)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b006:	4b1c      	ldr	r3, [pc, #112]	; (800b078 <prvHeapInit+0xb0>)
 800b008:	2200      	movs	r2, #0
 800b00a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	68ba      	ldr	r2, [r7, #8]
 800b010:	4413      	add	r3, r2
 800b012:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b014:	2208      	movs	r2, #8
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	1a9b      	subs	r3, r3, r2
 800b01a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f023 0307 	bic.w	r3, r3, #7
 800b022:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	4a15      	ldr	r2, [pc, #84]	; (800b07c <prvHeapInit+0xb4>)
 800b028:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b02a:	4b14      	ldr	r3, [pc, #80]	; (800b07c <prvHeapInit+0xb4>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	2200      	movs	r2, #0
 800b030:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b032:	4b12      	ldr	r3, [pc, #72]	; (800b07c <prvHeapInit+0xb4>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	2200      	movs	r2, #0
 800b038:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	68fa      	ldr	r2, [r7, #12]
 800b042:	1ad2      	subs	r2, r2, r3
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b048:	4b0c      	ldr	r3, [pc, #48]	; (800b07c <prvHeapInit+0xb4>)
 800b04a:	681a      	ldr	r2, [r3, #0]
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	4a0a      	ldr	r2, [pc, #40]	; (800b080 <prvHeapInit+0xb8>)
 800b056:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	4a09      	ldr	r2, [pc, #36]	; (800b084 <prvHeapInit+0xbc>)
 800b05e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b060:	4b09      	ldr	r3, [pc, #36]	; (800b088 <prvHeapInit+0xc0>)
 800b062:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b066:	601a      	str	r2, [r3, #0]
}
 800b068:	bf00      	nop
 800b06a:	3714      	adds	r7, #20
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bc80      	pop	{r7}
 800b070:	4770      	bx	lr
 800b072:	bf00      	nop
 800b074:	200008e8 	.word	0x200008e8
 800b078:	200014e8 	.word	0x200014e8
 800b07c:	200014f0 	.word	0x200014f0
 800b080:	200014f8 	.word	0x200014f8
 800b084:	200014f4 	.word	0x200014f4
 800b088:	200014fc 	.word	0x200014fc

0800b08c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b08c:	b480      	push	{r7}
 800b08e:	b085      	sub	sp, #20
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b094:	4b27      	ldr	r3, [pc, #156]	; (800b134 <prvInsertBlockIntoFreeList+0xa8>)
 800b096:	60fb      	str	r3, [r7, #12]
 800b098:	e002      	b.n	800b0a0 <prvInsertBlockIntoFreeList+0x14>
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	60fb      	str	r3, [r7, #12]
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	687a      	ldr	r2, [r7, #4]
 800b0a6:	429a      	cmp	r2, r3
 800b0a8:	d8f7      	bhi.n	800b09a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	685b      	ldr	r3, [r3, #4]
 800b0b2:	68ba      	ldr	r2, [r7, #8]
 800b0b4:	4413      	add	r3, r2
 800b0b6:	687a      	ldr	r2, [r7, #4]
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d108      	bne.n	800b0ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	685a      	ldr	r2, [r3, #4]
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	685b      	ldr	r3, [r3, #4]
 800b0c4:	441a      	add	r2, r3
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	685b      	ldr	r3, [r3, #4]
 800b0d6:	68ba      	ldr	r2, [r7, #8]
 800b0d8:	441a      	add	r2, r3
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	429a      	cmp	r2, r3
 800b0e0:	d118      	bne.n	800b114 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	681a      	ldr	r2, [r3, #0]
 800b0e6:	4b14      	ldr	r3, [pc, #80]	; (800b138 <prvInsertBlockIntoFreeList+0xac>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d00d      	beq.n	800b10a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	685a      	ldr	r2, [r3, #4]
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	441a      	add	r2, r3
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	681a      	ldr	r2, [r3, #0]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	601a      	str	r2, [r3, #0]
 800b108:	e008      	b.n	800b11c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b10a:	4b0b      	ldr	r3, [pc, #44]	; (800b138 <prvInsertBlockIntoFreeList+0xac>)
 800b10c:	681a      	ldr	r2, [r3, #0]
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	601a      	str	r2, [r3, #0]
 800b112:	e003      	b.n	800b11c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681a      	ldr	r2, [r3, #0]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b11c:	68fa      	ldr	r2, [r7, #12]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	429a      	cmp	r2, r3
 800b122:	d002      	beq.n	800b12a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	687a      	ldr	r2, [r7, #4]
 800b128:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b12a:	bf00      	nop
 800b12c:	3714      	adds	r7, #20
 800b12e:	46bd      	mov	sp, r7
 800b130:	bc80      	pop	{r7}
 800b132:	4770      	bx	lr
 800b134:	200014e8 	.word	0x200014e8
 800b138:	200014f0 	.word	0x200014f0

0800b13c <__errno>:
 800b13c:	4b01      	ldr	r3, [pc, #4]	; (800b144 <__errno+0x8>)
 800b13e:	6818      	ldr	r0, [r3, #0]
 800b140:	4770      	bx	lr
 800b142:	bf00      	nop
 800b144:	20000010 	.word	0x20000010

0800b148 <__libc_init_array>:
 800b148:	b570      	push	{r4, r5, r6, lr}
 800b14a:	4d0d      	ldr	r5, [pc, #52]	; (800b180 <__libc_init_array+0x38>)
 800b14c:	4c0d      	ldr	r4, [pc, #52]	; (800b184 <__libc_init_array+0x3c>)
 800b14e:	1b64      	subs	r4, r4, r5
 800b150:	10a4      	asrs	r4, r4, #2
 800b152:	2600      	movs	r6, #0
 800b154:	42a6      	cmp	r6, r4
 800b156:	d109      	bne.n	800b16c <__libc_init_array+0x24>
 800b158:	4d0b      	ldr	r5, [pc, #44]	; (800b188 <__libc_init_array+0x40>)
 800b15a:	4c0c      	ldr	r4, [pc, #48]	; (800b18c <__libc_init_array+0x44>)
 800b15c:	f002 f976 	bl	800d44c <_init>
 800b160:	1b64      	subs	r4, r4, r5
 800b162:	10a4      	asrs	r4, r4, #2
 800b164:	2600      	movs	r6, #0
 800b166:	42a6      	cmp	r6, r4
 800b168:	d105      	bne.n	800b176 <__libc_init_array+0x2e>
 800b16a:	bd70      	pop	{r4, r5, r6, pc}
 800b16c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b170:	4798      	blx	r3
 800b172:	3601      	adds	r6, #1
 800b174:	e7ee      	b.n	800b154 <__libc_init_array+0xc>
 800b176:	f855 3b04 	ldr.w	r3, [r5], #4
 800b17a:	4798      	blx	r3
 800b17c:	3601      	adds	r6, #1
 800b17e:	e7f2      	b.n	800b166 <__libc_init_array+0x1e>
 800b180:	0800df50 	.word	0x0800df50
 800b184:	0800df50 	.word	0x0800df50
 800b188:	0800df50 	.word	0x0800df50
 800b18c:	0800df54 	.word	0x0800df54

0800b190 <memcpy>:
 800b190:	440a      	add	r2, r1
 800b192:	4291      	cmp	r1, r2
 800b194:	f100 33ff 	add.w	r3, r0, #4294967295
 800b198:	d100      	bne.n	800b19c <memcpy+0xc>
 800b19a:	4770      	bx	lr
 800b19c:	b510      	push	{r4, lr}
 800b19e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1a6:	4291      	cmp	r1, r2
 800b1a8:	d1f9      	bne.n	800b19e <memcpy+0xe>
 800b1aa:	bd10      	pop	{r4, pc}

0800b1ac <memset>:
 800b1ac:	4402      	add	r2, r0
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d100      	bne.n	800b1b6 <memset+0xa>
 800b1b4:	4770      	bx	lr
 800b1b6:	f803 1b01 	strb.w	r1, [r3], #1
 800b1ba:	e7f9      	b.n	800b1b0 <memset+0x4>

0800b1bc <sniprintf>:
 800b1bc:	b40c      	push	{r2, r3}
 800b1be:	b530      	push	{r4, r5, lr}
 800b1c0:	4b17      	ldr	r3, [pc, #92]	; (800b220 <sniprintf+0x64>)
 800b1c2:	1e0c      	subs	r4, r1, #0
 800b1c4:	681d      	ldr	r5, [r3, #0]
 800b1c6:	b09d      	sub	sp, #116	; 0x74
 800b1c8:	da08      	bge.n	800b1dc <sniprintf+0x20>
 800b1ca:	238b      	movs	r3, #139	; 0x8b
 800b1cc:	602b      	str	r3, [r5, #0]
 800b1ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b1d2:	b01d      	add	sp, #116	; 0x74
 800b1d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b1d8:	b002      	add	sp, #8
 800b1da:	4770      	bx	lr
 800b1dc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b1e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b1e4:	bf14      	ite	ne
 800b1e6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b1ea:	4623      	moveq	r3, r4
 800b1ec:	9304      	str	r3, [sp, #16]
 800b1ee:	9307      	str	r3, [sp, #28]
 800b1f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b1f4:	9002      	str	r0, [sp, #8]
 800b1f6:	9006      	str	r0, [sp, #24]
 800b1f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b1fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b1fe:	ab21      	add	r3, sp, #132	; 0x84
 800b200:	a902      	add	r1, sp, #8
 800b202:	4628      	mov	r0, r5
 800b204:	9301      	str	r3, [sp, #4]
 800b206:	f000 fa0f 	bl	800b628 <_svfiprintf_r>
 800b20a:	1c43      	adds	r3, r0, #1
 800b20c:	bfbc      	itt	lt
 800b20e:	238b      	movlt	r3, #139	; 0x8b
 800b210:	602b      	strlt	r3, [r5, #0]
 800b212:	2c00      	cmp	r4, #0
 800b214:	d0dd      	beq.n	800b1d2 <sniprintf+0x16>
 800b216:	9b02      	ldr	r3, [sp, #8]
 800b218:	2200      	movs	r2, #0
 800b21a:	701a      	strb	r2, [r3, #0]
 800b21c:	e7d9      	b.n	800b1d2 <sniprintf+0x16>
 800b21e:	bf00      	nop
 800b220:	20000010 	.word	0x20000010

0800b224 <siprintf>:
 800b224:	b40e      	push	{r1, r2, r3}
 800b226:	b500      	push	{lr}
 800b228:	b09c      	sub	sp, #112	; 0x70
 800b22a:	ab1d      	add	r3, sp, #116	; 0x74
 800b22c:	9002      	str	r0, [sp, #8]
 800b22e:	9006      	str	r0, [sp, #24]
 800b230:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b234:	4809      	ldr	r0, [pc, #36]	; (800b25c <siprintf+0x38>)
 800b236:	9107      	str	r1, [sp, #28]
 800b238:	9104      	str	r1, [sp, #16]
 800b23a:	4909      	ldr	r1, [pc, #36]	; (800b260 <siprintf+0x3c>)
 800b23c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b240:	9105      	str	r1, [sp, #20]
 800b242:	6800      	ldr	r0, [r0, #0]
 800b244:	9301      	str	r3, [sp, #4]
 800b246:	a902      	add	r1, sp, #8
 800b248:	f000 f9ee 	bl	800b628 <_svfiprintf_r>
 800b24c:	9b02      	ldr	r3, [sp, #8]
 800b24e:	2200      	movs	r2, #0
 800b250:	701a      	strb	r2, [r3, #0]
 800b252:	b01c      	add	sp, #112	; 0x70
 800b254:	f85d eb04 	ldr.w	lr, [sp], #4
 800b258:	b003      	add	sp, #12
 800b25a:	4770      	bx	lr
 800b25c:	20000010 	.word	0x20000010
 800b260:	ffff0208 	.word	0xffff0208

0800b264 <strncmp>:
 800b264:	b510      	push	{r4, lr}
 800b266:	4603      	mov	r3, r0
 800b268:	b172      	cbz	r2, 800b288 <strncmp+0x24>
 800b26a:	3901      	subs	r1, #1
 800b26c:	1884      	adds	r4, r0, r2
 800b26e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b272:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b276:	4290      	cmp	r0, r2
 800b278:	d101      	bne.n	800b27e <strncmp+0x1a>
 800b27a:	42a3      	cmp	r3, r4
 800b27c:	d101      	bne.n	800b282 <strncmp+0x1e>
 800b27e:	1a80      	subs	r0, r0, r2
 800b280:	bd10      	pop	{r4, pc}
 800b282:	2800      	cmp	r0, #0
 800b284:	d1f3      	bne.n	800b26e <strncmp+0xa>
 800b286:	e7fa      	b.n	800b27e <strncmp+0x1a>
 800b288:	4610      	mov	r0, r2
 800b28a:	e7f9      	b.n	800b280 <strncmp+0x1c>

0800b28c <strtok>:
 800b28c:	4b16      	ldr	r3, [pc, #88]	; (800b2e8 <strtok+0x5c>)
 800b28e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b292:	681f      	ldr	r7, [r3, #0]
 800b294:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800b296:	4605      	mov	r5, r0
 800b298:	460e      	mov	r6, r1
 800b29a:	b9ec      	cbnz	r4, 800b2d8 <strtok+0x4c>
 800b29c:	2050      	movs	r0, #80	; 0x50
 800b29e:	f000 f881 	bl	800b3a4 <malloc>
 800b2a2:	4602      	mov	r2, r0
 800b2a4:	65b8      	str	r0, [r7, #88]	; 0x58
 800b2a6:	b920      	cbnz	r0, 800b2b2 <strtok+0x26>
 800b2a8:	4b10      	ldr	r3, [pc, #64]	; (800b2ec <strtok+0x60>)
 800b2aa:	4811      	ldr	r0, [pc, #68]	; (800b2f0 <strtok+0x64>)
 800b2ac:	2157      	movs	r1, #87	; 0x57
 800b2ae:	f000 f849 	bl	800b344 <__assert_func>
 800b2b2:	e9c0 4400 	strd	r4, r4, [r0]
 800b2b6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b2ba:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b2be:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800b2c2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800b2c6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800b2ca:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800b2ce:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800b2d2:	6184      	str	r4, [r0, #24]
 800b2d4:	7704      	strb	r4, [r0, #28]
 800b2d6:	6244      	str	r4, [r0, #36]	; 0x24
 800b2d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b2da:	4631      	mov	r1, r6
 800b2dc:	4628      	mov	r0, r5
 800b2de:	2301      	movs	r3, #1
 800b2e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2e4:	f000 b806 	b.w	800b2f4 <__strtok_r>
 800b2e8:	20000010 	.word	0x20000010
 800b2ec:	0800ddd0 	.word	0x0800ddd0
 800b2f0:	0800dde7 	.word	0x0800dde7

0800b2f4 <__strtok_r>:
 800b2f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2f6:	b908      	cbnz	r0, 800b2fc <__strtok_r+0x8>
 800b2f8:	6810      	ldr	r0, [r2, #0]
 800b2fa:	b188      	cbz	r0, 800b320 <__strtok_r+0x2c>
 800b2fc:	4604      	mov	r4, r0
 800b2fe:	4620      	mov	r0, r4
 800b300:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b304:	460f      	mov	r7, r1
 800b306:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b30a:	b91e      	cbnz	r6, 800b314 <__strtok_r+0x20>
 800b30c:	b965      	cbnz	r5, 800b328 <__strtok_r+0x34>
 800b30e:	6015      	str	r5, [r2, #0]
 800b310:	4628      	mov	r0, r5
 800b312:	e005      	b.n	800b320 <__strtok_r+0x2c>
 800b314:	42b5      	cmp	r5, r6
 800b316:	d1f6      	bne.n	800b306 <__strtok_r+0x12>
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d1f0      	bne.n	800b2fe <__strtok_r+0xa>
 800b31c:	6014      	str	r4, [r2, #0]
 800b31e:	7003      	strb	r3, [r0, #0]
 800b320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b322:	461c      	mov	r4, r3
 800b324:	e00c      	b.n	800b340 <__strtok_r+0x4c>
 800b326:	b915      	cbnz	r5, 800b32e <__strtok_r+0x3a>
 800b328:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b32c:	460e      	mov	r6, r1
 800b32e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b332:	42ab      	cmp	r3, r5
 800b334:	d1f7      	bne.n	800b326 <__strtok_r+0x32>
 800b336:	2b00      	cmp	r3, #0
 800b338:	d0f3      	beq.n	800b322 <__strtok_r+0x2e>
 800b33a:	2300      	movs	r3, #0
 800b33c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b340:	6014      	str	r4, [r2, #0]
 800b342:	e7ed      	b.n	800b320 <__strtok_r+0x2c>

0800b344 <__assert_func>:
 800b344:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b346:	4614      	mov	r4, r2
 800b348:	461a      	mov	r2, r3
 800b34a:	4b09      	ldr	r3, [pc, #36]	; (800b370 <__assert_func+0x2c>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	4605      	mov	r5, r0
 800b350:	68d8      	ldr	r0, [r3, #12]
 800b352:	b14c      	cbz	r4, 800b368 <__assert_func+0x24>
 800b354:	4b07      	ldr	r3, [pc, #28]	; (800b374 <__assert_func+0x30>)
 800b356:	9100      	str	r1, [sp, #0]
 800b358:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b35c:	4906      	ldr	r1, [pc, #24]	; (800b378 <__assert_func+0x34>)
 800b35e:	462b      	mov	r3, r5
 800b360:	f000 f80e 	bl	800b380 <fiprintf>
 800b364:	f000 fe1c 	bl	800bfa0 <abort>
 800b368:	4b04      	ldr	r3, [pc, #16]	; (800b37c <__assert_func+0x38>)
 800b36a:	461c      	mov	r4, r3
 800b36c:	e7f3      	b.n	800b356 <__assert_func+0x12>
 800b36e:	bf00      	nop
 800b370:	20000010 	.word	0x20000010
 800b374:	0800de44 	.word	0x0800de44
 800b378:	0800de51 	.word	0x0800de51
 800b37c:	0800de7f 	.word	0x0800de7f

0800b380 <fiprintf>:
 800b380:	b40e      	push	{r1, r2, r3}
 800b382:	b503      	push	{r0, r1, lr}
 800b384:	4601      	mov	r1, r0
 800b386:	ab03      	add	r3, sp, #12
 800b388:	4805      	ldr	r0, [pc, #20]	; (800b3a0 <fiprintf+0x20>)
 800b38a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b38e:	6800      	ldr	r0, [r0, #0]
 800b390:	9301      	str	r3, [sp, #4]
 800b392:	f000 fa71 	bl	800b878 <_vfiprintf_r>
 800b396:	b002      	add	sp, #8
 800b398:	f85d eb04 	ldr.w	lr, [sp], #4
 800b39c:	b003      	add	sp, #12
 800b39e:	4770      	bx	lr
 800b3a0:	20000010 	.word	0x20000010

0800b3a4 <malloc>:
 800b3a4:	4b02      	ldr	r3, [pc, #8]	; (800b3b0 <malloc+0xc>)
 800b3a6:	4601      	mov	r1, r0
 800b3a8:	6818      	ldr	r0, [r3, #0]
 800b3aa:	f000 b86d 	b.w	800b488 <_malloc_r>
 800b3ae:	bf00      	nop
 800b3b0:	20000010 	.word	0x20000010

0800b3b4 <_free_r>:
 800b3b4:	b538      	push	{r3, r4, r5, lr}
 800b3b6:	4605      	mov	r5, r0
 800b3b8:	2900      	cmp	r1, #0
 800b3ba:	d041      	beq.n	800b440 <_free_r+0x8c>
 800b3bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3c0:	1f0c      	subs	r4, r1, #4
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	bfb8      	it	lt
 800b3c6:	18e4      	addlt	r4, r4, r3
 800b3c8:	f001 f828 	bl	800c41c <__malloc_lock>
 800b3cc:	4a1d      	ldr	r2, [pc, #116]	; (800b444 <_free_r+0x90>)
 800b3ce:	6813      	ldr	r3, [r2, #0]
 800b3d0:	b933      	cbnz	r3, 800b3e0 <_free_r+0x2c>
 800b3d2:	6063      	str	r3, [r4, #4]
 800b3d4:	6014      	str	r4, [r2, #0]
 800b3d6:	4628      	mov	r0, r5
 800b3d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3dc:	f001 b824 	b.w	800c428 <__malloc_unlock>
 800b3e0:	42a3      	cmp	r3, r4
 800b3e2:	d908      	bls.n	800b3f6 <_free_r+0x42>
 800b3e4:	6820      	ldr	r0, [r4, #0]
 800b3e6:	1821      	adds	r1, r4, r0
 800b3e8:	428b      	cmp	r3, r1
 800b3ea:	bf01      	itttt	eq
 800b3ec:	6819      	ldreq	r1, [r3, #0]
 800b3ee:	685b      	ldreq	r3, [r3, #4]
 800b3f0:	1809      	addeq	r1, r1, r0
 800b3f2:	6021      	streq	r1, [r4, #0]
 800b3f4:	e7ed      	b.n	800b3d2 <_free_r+0x1e>
 800b3f6:	461a      	mov	r2, r3
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	b10b      	cbz	r3, 800b400 <_free_r+0x4c>
 800b3fc:	42a3      	cmp	r3, r4
 800b3fe:	d9fa      	bls.n	800b3f6 <_free_r+0x42>
 800b400:	6811      	ldr	r1, [r2, #0]
 800b402:	1850      	adds	r0, r2, r1
 800b404:	42a0      	cmp	r0, r4
 800b406:	d10b      	bne.n	800b420 <_free_r+0x6c>
 800b408:	6820      	ldr	r0, [r4, #0]
 800b40a:	4401      	add	r1, r0
 800b40c:	1850      	adds	r0, r2, r1
 800b40e:	4283      	cmp	r3, r0
 800b410:	6011      	str	r1, [r2, #0]
 800b412:	d1e0      	bne.n	800b3d6 <_free_r+0x22>
 800b414:	6818      	ldr	r0, [r3, #0]
 800b416:	685b      	ldr	r3, [r3, #4]
 800b418:	6053      	str	r3, [r2, #4]
 800b41a:	4401      	add	r1, r0
 800b41c:	6011      	str	r1, [r2, #0]
 800b41e:	e7da      	b.n	800b3d6 <_free_r+0x22>
 800b420:	d902      	bls.n	800b428 <_free_r+0x74>
 800b422:	230c      	movs	r3, #12
 800b424:	602b      	str	r3, [r5, #0]
 800b426:	e7d6      	b.n	800b3d6 <_free_r+0x22>
 800b428:	6820      	ldr	r0, [r4, #0]
 800b42a:	1821      	adds	r1, r4, r0
 800b42c:	428b      	cmp	r3, r1
 800b42e:	bf04      	itt	eq
 800b430:	6819      	ldreq	r1, [r3, #0]
 800b432:	685b      	ldreq	r3, [r3, #4]
 800b434:	6063      	str	r3, [r4, #4]
 800b436:	bf04      	itt	eq
 800b438:	1809      	addeq	r1, r1, r0
 800b43a:	6021      	streq	r1, [r4, #0]
 800b43c:	6054      	str	r4, [r2, #4]
 800b43e:	e7ca      	b.n	800b3d6 <_free_r+0x22>
 800b440:	bd38      	pop	{r3, r4, r5, pc}
 800b442:	bf00      	nop
 800b444:	20001500 	.word	0x20001500

0800b448 <sbrk_aligned>:
 800b448:	b570      	push	{r4, r5, r6, lr}
 800b44a:	4e0e      	ldr	r6, [pc, #56]	; (800b484 <sbrk_aligned+0x3c>)
 800b44c:	460c      	mov	r4, r1
 800b44e:	6831      	ldr	r1, [r6, #0]
 800b450:	4605      	mov	r5, r0
 800b452:	b911      	cbnz	r1, 800b45a <sbrk_aligned+0x12>
 800b454:	f000 fcd4 	bl	800be00 <_sbrk_r>
 800b458:	6030      	str	r0, [r6, #0]
 800b45a:	4621      	mov	r1, r4
 800b45c:	4628      	mov	r0, r5
 800b45e:	f000 fccf 	bl	800be00 <_sbrk_r>
 800b462:	1c43      	adds	r3, r0, #1
 800b464:	d00a      	beq.n	800b47c <sbrk_aligned+0x34>
 800b466:	1cc4      	adds	r4, r0, #3
 800b468:	f024 0403 	bic.w	r4, r4, #3
 800b46c:	42a0      	cmp	r0, r4
 800b46e:	d007      	beq.n	800b480 <sbrk_aligned+0x38>
 800b470:	1a21      	subs	r1, r4, r0
 800b472:	4628      	mov	r0, r5
 800b474:	f000 fcc4 	bl	800be00 <_sbrk_r>
 800b478:	3001      	adds	r0, #1
 800b47a:	d101      	bne.n	800b480 <sbrk_aligned+0x38>
 800b47c:	f04f 34ff 	mov.w	r4, #4294967295
 800b480:	4620      	mov	r0, r4
 800b482:	bd70      	pop	{r4, r5, r6, pc}
 800b484:	20001504 	.word	0x20001504

0800b488 <_malloc_r>:
 800b488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b48c:	1ccd      	adds	r5, r1, #3
 800b48e:	f025 0503 	bic.w	r5, r5, #3
 800b492:	3508      	adds	r5, #8
 800b494:	2d0c      	cmp	r5, #12
 800b496:	bf38      	it	cc
 800b498:	250c      	movcc	r5, #12
 800b49a:	2d00      	cmp	r5, #0
 800b49c:	4607      	mov	r7, r0
 800b49e:	db01      	blt.n	800b4a4 <_malloc_r+0x1c>
 800b4a0:	42a9      	cmp	r1, r5
 800b4a2:	d905      	bls.n	800b4b0 <_malloc_r+0x28>
 800b4a4:	230c      	movs	r3, #12
 800b4a6:	603b      	str	r3, [r7, #0]
 800b4a8:	2600      	movs	r6, #0
 800b4aa:	4630      	mov	r0, r6
 800b4ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4b0:	4e2e      	ldr	r6, [pc, #184]	; (800b56c <_malloc_r+0xe4>)
 800b4b2:	f000 ffb3 	bl	800c41c <__malloc_lock>
 800b4b6:	6833      	ldr	r3, [r6, #0]
 800b4b8:	461c      	mov	r4, r3
 800b4ba:	bb34      	cbnz	r4, 800b50a <_malloc_r+0x82>
 800b4bc:	4629      	mov	r1, r5
 800b4be:	4638      	mov	r0, r7
 800b4c0:	f7ff ffc2 	bl	800b448 <sbrk_aligned>
 800b4c4:	1c43      	adds	r3, r0, #1
 800b4c6:	4604      	mov	r4, r0
 800b4c8:	d14d      	bne.n	800b566 <_malloc_r+0xde>
 800b4ca:	6834      	ldr	r4, [r6, #0]
 800b4cc:	4626      	mov	r6, r4
 800b4ce:	2e00      	cmp	r6, #0
 800b4d0:	d140      	bne.n	800b554 <_malloc_r+0xcc>
 800b4d2:	6823      	ldr	r3, [r4, #0]
 800b4d4:	4631      	mov	r1, r6
 800b4d6:	4638      	mov	r0, r7
 800b4d8:	eb04 0803 	add.w	r8, r4, r3
 800b4dc:	f000 fc90 	bl	800be00 <_sbrk_r>
 800b4e0:	4580      	cmp	r8, r0
 800b4e2:	d13a      	bne.n	800b55a <_malloc_r+0xd2>
 800b4e4:	6821      	ldr	r1, [r4, #0]
 800b4e6:	3503      	adds	r5, #3
 800b4e8:	1a6d      	subs	r5, r5, r1
 800b4ea:	f025 0503 	bic.w	r5, r5, #3
 800b4ee:	3508      	adds	r5, #8
 800b4f0:	2d0c      	cmp	r5, #12
 800b4f2:	bf38      	it	cc
 800b4f4:	250c      	movcc	r5, #12
 800b4f6:	4629      	mov	r1, r5
 800b4f8:	4638      	mov	r0, r7
 800b4fa:	f7ff ffa5 	bl	800b448 <sbrk_aligned>
 800b4fe:	3001      	adds	r0, #1
 800b500:	d02b      	beq.n	800b55a <_malloc_r+0xd2>
 800b502:	6823      	ldr	r3, [r4, #0]
 800b504:	442b      	add	r3, r5
 800b506:	6023      	str	r3, [r4, #0]
 800b508:	e00e      	b.n	800b528 <_malloc_r+0xa0>
 800b50a:	6822      	ldr	r2, [r4, #0]
 800b50c:	1b52      	subs	r2, r2, r5
 800b50e:	d41e      	bmi.n	800b54e <_malloc_r+0xc6>
 800b510:	2a0b      	cmp	r2, #11
 800b512:	d916      	bls.n	800b542 <_malloc_r+0xba>
 800b514:	1961      	adds	r1, r4, r5
 800b516:	42a3      	cmp	r3, r4
 800b518:	6025      	str	r5, [r4, #0]
 800b51a:	bf18      	it	ne
 800b51c:	6059      	strne	r1, [r3, #4]
 800b51e:	6863      	ldr	r3, [r4, #4]
 800b520:	bf08      	it	eq
 800b522:	6031      	streq	r1, [r6, #0]
 800b524:	5162      	str	r2, [r4, r5]
 800b526:	604b      	str	r3, [r1, #4]
 800b528:	4638      	mov	r0, r7
 800b52a:	f104 060b 	add.w	r6, r4, #11
 800b52e:	f000 ff7b 	bl	800c428 <__malloc_unlock>
 800b532:	f026 0607 	bic.w	r6, r6, #7
 800b536:	1d23      	adds	r3, r4, #4
 800b538:	1af2      	subs	r2, r6, r3
 800b53a:	d0b6      	beq.n	800b4aa <_malloc_r+0x22>
 800b53c:	1b9b      	subs	r3, r3, r6
 800b53e:	50a3      	str	r3, [r4, r2]
 800b540:	e7b3      	b.n	800b4aa <_malloc_r+0x22>
 800b542:	6862      	ldr	r2, [r4, #4]
 800b544:	42a3      	cmp	r3, r4
 800b546:	bf0c      	ite	eq
 800b548:	6032      	streq	r2, [r6, #0]
 800b54a:	605a      	strne	r2, [r3, #4]
 800b54c:	e7ec      	b.n	800b528 <_malloc_r+0xa0>
 800b54e:	4623      	mov	r3, r4
 800b550:	6864      	ldr	r4, [r4, #4]
 800b552:	e7b2      	b.n	800b4ba <_malloc_r+0x32>
 800b554:	4634      	mov	r4, r6
 800b556:	6876      	ldr	r6, [r6, #4]
 800b558:	e7b9      	b.n	800b4ce <_malloc_r+0x46>
 800b55a:	230c      	movs	r3, #12
 800b55c:	603b      	str	r3, [r7, #0]
 800b55e:	4638      	mov	r0, r7
 800b560:	f000 ff62 	bl	800c428 <__malloc_unlock>
 800b564:	e7a1      	b.n	800b4aa <_malloc_r+0x22>
 800b566:	6025      	str	r5, [r4, #0]
 800b568:	e7de      	b.n	800b528 <_malloc_r+0xa0>
 800b56a:	bf00      	nop
 800b56c:	20001500 	.word	0x20001500

0800b570 <__ssputs_r>:
 800b570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b574:	688e      	ldr	r6, [r1, #8]
 800b576:	429e      	cmp	r6, r3
 800b578:	4682      	mov	sl, r0
 800b57a:	460c      	mov	r4, r1
 800b57c:	4690      	mov	r8, r2
 800b57e:	461f      	mov	r7, r3
 800b580:	d838      	bhi.n	800b5f4 <__ssputs_r+0x84>
 800b582:	898a      	ldrh	r2, [r1, #12]
 800b584:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b588:	d032      	beq.n	800b5f0 <__ssputs_r+0x80>
 800b58a:	6825      	ldr	r5, [r4, #0]
 800b58c:	6909      	ldr	r1, [r1, #16]
 800b58e:	eba5 0901 	sub.w	r9, r5, r1
 800b592:	6965      	ldr	r5, [r4, #20]
 800b594:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b598:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b59c:	3301      	adds	r3, #1
 800b59e:	444b      	add	r3, r9
 800b5a0:	106d      	asrs	r5, r5, #1
 800b5a2:	429d      	cmp	r5, r3
 800b5a4:	bf38      	it	cc
 800b5a6:	461d      	movcc	r5, r3
 800b5a8:	0553      	lsls	r3, r2, #21
 800b5aa:	d531      	bpl.n	800b610 <__ssputs_r+0xa0>
 800b5ac:	4629      	mov	r1, r5
 800b5ae:	f7ff ff6b 	bl	800b488 <_malloc_r>
 800b5b2:	4606      	mov	r6, r0
 800b5b4:	b950      	cbnz	r0, 800b5cc <__ssputs_r+0x5c>
 800b5b6:	230c      	movs	r3, #12
 800b5b8:	f8ca 3000 	str.w	r3, [sl]
 800b5bc:	89a3      	ldrh	r3, [r4, #12]
 800b5be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5c2:	81a3      	strh	r3, [r4, #12]
 800b5c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5cc:	6921      	ldr	r1, [r4, #16]
 800b5ce:	464a      	mov	r2, r9
 800b5d0:	f7ff fdde 	bl	800b190 <memcpy>
 800b5d4:	89a3      	ldrh	r3, [r4, #12]
 800b5d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b5da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5de:	81a3      	strh	r3, [r4, #12]
 800b5e0:	6126      	str	r6, [r4, #16]
 800b5e2:	6165      	str	r5, [r4, #20]
 800b5e4:	444e      	add	r6, r9
 800b5e6:	eba5 0509 	sub.w	r5, r5, r9
 800b5ea:	6026      	str	r6, [r4, #0]
 800b5ec:	60a5      	str	r5, [r4, #8]
 800b5ee:	463e      	mov	r6, r7
 800b5f0:	42be      	cmp	r6, r7
 800b5f2:	d900      	bls.n	800b5f6 <__ssputs_r+0x86>
 800b5f4:	463e      	mov	r6, r7
 800b5f6:	6820      	ldr	r0, [r4, #0]
 800b5f8:	4632      	mov	r2, r6
 800b5fa:	4641      	mov	r1, r8
 800b5fc:	f000 fef4 	bl	800c3e8 <memmove>
 800b600:	68a3      	ldr	r3, [r4, #8]
 800b602:	1b9b      	subs	r3, r3, r6
 800b604:	60a3      	str	r3, [r4, #8]
 800b606:	6823      	ldr	r3, [r4, #0]
 800b608:	4433      	add	r3, r6
 800b60a:	6023      	str	r3, [r4, #0]
 800b60c:	2000      	movs	r0, #0
 800b60e:	e7db      	b.n	800b5c8 <__ssputs_r+0x58>
 800b610:	462a      	mov	r2, r5
 800b612:	f000 ff0f 	bl	800c434 <_realloc_r>
 800b616:	4606      	mov	r6, r0
 800b618:	2800      	cmp	r0, #0
 800b61a:	d1e1      	bne.n	800b5e0 <__ssputs_r+0x70>
 800b61c:	6921      	ldr	r1, [r4, #16]
 800b61e:	4650      	mov	r0, sl
 800b620:	f7ff fec8 	bl	800b3b4 <_free_r>
 800b624:	e7c7      	b.n	800b5b6 <__ssputs_r+0x46>
	...

0800b628 <_svfiprintf_r>:
 800b628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b62c:	4698      	mov	r8, r3
 800b62e:	898b      	ldrh	r3, [r1, #12]
 800b630:	061b      	lsls	r3, r3, #24
 800b632:	b09d      	sub	sp, #116	; 0x74
 800b634:	4607      	mov	r7, r0
 800b636:	460d      	mov	r5, r1
 800b638:	4614      	mov	r4, r2
 800b63a:	d50e      	bpl.n	800b65a <_svfiprintf_r+0x32>
 800b63c:	690b      	ldr	r3, [r1, #16]
 800b63e:	b963      	cbnz	r3, 800b65a <_svfiprintf_r+0x32>
 800b640:	2140      	movs	r1, #64	; 0x40
 800b642:	f7ff ff21 	bl	800b488 <_malloc_r>
 800b646:	6028      	str	r0, [r5, #0]
 800b648:	6128      	str	r0, [r5, #16]
 800b64a:	b920      	cbnz	r0, 800b656 <_svfiprintf_r+0x2e>
 800b64c:	230c      	movs	r3, #12
 800b64e:	603b      	str	r3, [r7, #0]
 800b650:	f04f 30ff 	mov.w	r0, #4294967295
 800b654:	e0d1      	b.n	800b7fa <_svfiprintf_r+0x1d2>
 800b656:	2340      	movs	r3, #64	; 0x40
 800b658:	616b      	str	r3, [r5, #20]
 800b65a:	2300      	movs	r3, #0
 800b65c:	9309      	str	r3, [sp, #36]	; 0x24
 800b65e:	2320      	movs	r3, #32
 800b660:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b664:	f8cd 800c 	str.w	r8, [sp, #12]
 800b668:	2330      	movs	r3, #48	; 0x30
 800b66a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b814 <_svfiprintf_r+0x1ec>
 800b66e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b672:	f04f 0901 	mov.w	r9, #1
 800b676:	4623      	mov	r3, r4
 800b678:	469a      	mov	sl, r3
 800b67a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b67e:	b10a      	cbz	r2, 800b684 <_svfiprintf_r+0x5c>
 800b680:	2a25      	cmp	r2, #37	; 0x25
 800b682:	d1f9      	bne.n	800b678 <_svfiprintf_r+0x50>
 800b684:	ebba 0b04 	subs.w	fp, sl, r4
 800b688:	d00b      	beq.n	800b6a2 <_svfiprintf_r+0x7a>
 800b68a:	465b      	mov	r3, fp
 800b68c:	4622      	mov	r2, r4
 800b68e:	4629      	mov	r1, r5
 800b690:	4638      	mov	r0, r7
 800b692:	f7ff ff6d 	bl	800b570 <__ssputs_r>
 800b696:	3001      	adds	r0, #1
 800b698:	f000 80aa 	beq.w	800b7f0 <_svfiprintf_r+0x1c8>
 800b69c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b69e:	445a      	add	r2, fp
 800b6a0:	9209      	str	r2, [sp, #36]	; 0x24
 800b6a2:	f89a 3000 	ldrb.w	r3, [sl]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	f000 80a2 	beq.w	800b7f0 <_svfiprintf_r+0x1c8>
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	f04f 32ff 	mov.w	r2, #4294967295
 800b6b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6b6:	f10a 0a01 	add.w	sl, sl, #1
 800b6ba:	9304      	str	r3, [sp, #16]
 800b6bc:	9307      	str	r3, [sp, #28]
 800b6be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b6c2:	931a      	str	r3, [sp, #104]	; 0x68
 800b6c4:	4654      	mov	r4, sl
 800b6c6:	2205      	movs	r2, #5
 800b6c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6cc:	4851      	ldr	r0, [pc, #324]	; (800b814 <_svfiprintf_r+0x1ec>)
 800b6ce:	f7f4 fd5f 	bl	8000190 <memchr>
 800b6d2:	9a04      	ldr	r2, [sp, #16]
 800b6d4:	b9d8      	cbnz	r0, 800b70e <_svfiprintf_r+0xe6>
 800b6d6:	06d0      	lsls	r0, r2, #27
 800b6d8:	bf44      	itt	mi
 800b6da:	2320      	movmi	r3, #32
 800b6dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6e0:	0711      	lsls	r1, r2, #28
 800b6e2:	bf44      	itt	mi
 800b6e4:	232b      	movmi	r3, #43	; 0x2b
 800b6e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6ea:	f89a 3000 	ldrb.w	r3, [sl]
 800b6ee:	2b2a      	cmp	r3, #42	; 0x2a
 800b6f0:	d015      	beq.n	800b71e <_svfiprintf_r+0xf6>
 800b6f2:	9a07      	ldr	r2, [sp, #28]
 800b6f4:	4654      	mov	r4, sl
 800b6f6:	2000      	movs	r0, #0
 800b6f8:	f04f 0c0a 	mov.w	ip, #10
 800b6fc:	4621      	mov	r1, r4
 800b6fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b702:	3b30      	subs	r3, #48	; 0x30
 800b704:	2b09      	cmp	r3, #9
 800b706:	d94e      	bls.n	800b7a6 <_svfiprintf_r+0x17e>
 800b708:	b1b0      	cbz	r0, 800b738 <_svfiprintf_r+0x110>
 800b70a:	9207      	str	r2, [sp, #28]
 800b70c:	e014      	b.n	800b738 <_svfiprintf_r+0x110>
 800b70e:	eba0 0308 	sub.w	r3, r0, r8
 800b712:	fa09 f303 	lsl.w	r3, r9, r3
 800b716:	4313      	orrs	r3, r2
 800b718:	9304      	str	r3, [sp, #16]
 800b71a:	46a2      	mov	sl, r4
 800b71c:	e7d2      	b.n	800b6c4 <_svfiprintf_r+0x9c>
 800b71e:	9b03      	ldr	r3, [sp, #12]
 800b720:	1d19      	adds	r1, r3, #4
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	9103      	str	r1, [sp, #12]
 800b726:	2b00      	cmp	r3, #0
 800b728:	bfbb      	ittet	lt
 800b72a:	425b      	neglt	r3, r3
 800b72c:	f042 0202 	orrlt.w	r2, r2, #2
 800b730:	9307      	strge	r3, [sp, #28]
 800b732:	9307      	strlt	r3, [sp, #28]
 800b734:	bfb8      	it	lt
 800b736:	9204      	strlt	r2, [sp, #16]
 800b738:	7823      	ldrb	r3, [r4, #0]
 800b73a:	2b2e      	cmp	r3, #46	; 0x2e
 800b73c:	d10c      	bne.n	800b758 <_svfiprintf_r+0x130>
 800b73e:	7863      	ldrb	r3, [r4, #1]
 800b740:	2b2a      	cmp	r3, #42	; 0x2a
 800b742:	d135      	bne.n	800b7b0 <_svfiprintf_r+0x188>
 800b744:	9b03      	ldr	r3, [sp, #12]
 800b746:	1d1a      	adds	r2, r3, #4
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	9203      	str	r2, [sp, #12]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	bfb8      	it	lt
 800b750:	f04f 33ff 	movlt.w	r3, #4294967295
 800b754:	3402      	adds	r4, #2
 800b756:	9305      	str	r3, [sp, #20]
 800b758:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b818 <_svfiprintf_r+0x1f0>
 800b75c:	7821      	ldrb	r1, [r4, #0]
 800b75e:	2203      	movs	r2, #3
 800b760:	4650      	mov	r0, sl
 800b762:	f7f4 fd15 	bl	8000190 <memchr>
 800b766:	b140      	cbz	r0, 800b77a <_svfiprintf_r+0x152>
 800b768:	2340      	movs	r3, #64	; 0x40
 800b76a:	eba0 000a 	sub.w	r0, r0, sl
 800b76e:	fa03 f000 	lsl.w	r0, r3, r0
 800b772:	9b04      	ldr	r3, [sp, #16]
 800b774:	4303      	orrs	r3, r0
 800b776:	3401      	adds	r4, #1
 800b778:	9304      	str	r3, [sp, #16]
 800b77a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b77e:	4827      	ldr	r0, [pc, #156]	; (800b81c <_svfiprintf_r+0x1f4>)
 800b780:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b784:	2206      	movs	r2, #6
 800b786:	f7f4 fd03 	bl	8000190 <memchr>
 800b78a:	2800      	cmp	r0, #0
 800b78c:	d038      	beq.n	800b800 <_svfiprintf_r+0x1d8>
 800b78e:	4b24      	ldr	r3, [pc, #144]	; (800b820 <_svfiprintf_r+0x1f8>)
 800b790:	bb1b      	cbnz	r3, 800b7da <_svfiprintf_r+0x1b2>
 800b792:	9b03      	ldr	r3, [sp, #12]
 800b794:	3307      	adds	r3, #7
 800b796:	f023 0307 	bic.w	r3, r3, #7
 800b79a:	3308      	adds	r3, #8
 800b79c:	9303      	str	r3, [sp, #12]
 800b79e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7a0:	4433      	add	r3, r6
 800b7a2:	9309      	str	r3, [sp, #36]	; 0x24
 800b7a4:	e767      	b.n	800b676 <_svfiprintf_r+0x4e>
 800b7a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7aa:	460c      	mov	r4, r1
 800b7ac:	2001      	movs	r0, #1
 800b7ae:	e7a5      	b.n	800b6fc <_svfiprintf_r+0xd4>
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	3401      	adds	r4, #1
 800b7b4:	9305      	str	r3, [sp, #20]
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	f04f 0c0a 	mov.w	ip, #10
 800b7bc:	4620      	mov	r0, r4
 800b7be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7c2:	3a30      	subs	r2, #48	; 0x30
 800b7c4:	2a09      	cmp	r2, #9
 800b7c6:	d903      	bls.n	800b7d0 <_svfiprintf_r+0x1a8>
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d0c5      	beq.n	800b758 <_svfiprintf_r+0x130>
 800b7cc:	9105      	str	r1, [sp, #20]
 800b7ce:	e7c3      	b.n	800b758 <_svfiprintf_r+0x130>
 800b7d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7d4:	4604      	mov	r4, r0
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	e7f0      	b.n	800b7bc <_svfiprintf_r+0x194>
 800b7da:	ab03      	add	r3, sp, #12
 800b7dc:	9300      	str	r3, [sp, #0]
 800b7de:	462a      	mov	r2, r5
 800b7e0:	4b10      	ldr	r3, [pc, #64]	; (800b824 <_svfiprintf_r+0x1fc>)
 800b7e2:	a904      	add	r1, sp, #16
 800b7e4:	4638      	mov	r0, r7
 800b7e6:	f3af 8000 	nop.w
 800b7ea:	1c42      	adds	r2, r0, #1
 800b7ec:	4606      	mov	r6, r0
 800b7ee:	d1d6      	bne.n	800b79e <_svfiprintf_r+0x176>
 800b7f0:	89ab      	ldrh	r3, [r5, #12]
 800b7f2:	065b      	lsls	r3, r3, #25
 800b7f4:	f53f af2c 	bmi.w	800b650 <_svfiprintf_r+0x28>
 800b7f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b7fa:	b01d      	add	sp, #116	; 0x74
 800b7fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b800:	ab03      	add	r3, sp, #12
 800b802:	9300      	str	r3, [sp, #0]
 800b804:	462a      	mov	r2, r5
 800b806:	4b07      	ldr	r3, [pc, #28]	; (800b824 <_svfiprintf_r+0x1fc>)
 800b808:	a904      	add	r1, sp, #16
 800b80a:	4638      	mov	r0, r7
 800b80c:	f000 f9d2 	bl	800bbb4 <_printf_i>
 800b810:	e7eb      	b.n	800b7ea <_svfiprintf_r+0x1c2>
 800b812:	bf00      	nop
 800b814:	0800de80 	.word	0x0800de80
 800b818:	0800de86 	.word	0x0800de86
 800b81c:	0800de8a 	.word	0x0800de8a
 800b820:	00000000 	.word	0x00000000
 800b824:	0800b571 	.word	0x0800b571

0800b828 <__sfputc_r>:
 800b828:	6893      	ldr	r3, [r2, #8]
 800b82a:	3b01      	subs	r3, #1
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	b410      	push	{r4}
 800b830:	6093      	str	r3, [r2, #8]
 800b832:	da07      	bge.n	800b844 <__sfputc_r+0x1c>
 800b834:	6994      	ldr	r4, [r2, #24]
 800b836:	42a3      	cmp	r3, r4
 800b838:	db01      	blt.n	800b83e <__sfputc_r+0x16>
 800b83a:	290a      	cmp	r1, #10
 800b83c:	d102      	bne.n	800b844 <__sfputc_r+0x1c>
 800b83e:	bc10      	pop	{r4}
 800b840:	f000 baee 	b.w	800be20 <__swbuf_r>
 800b844:	6813      	ldr	r3, [r2, #0]
 800b846:	1c58      	adds	r0, r3, #1
 800b848:	6010      	str	r0, [r2, #0]
 800b84a:	7019      	strb	r1, [r3, #0]
 800b84c:	4608      	mov	r0, r1
 800b84e:	bc10      	pop	{r4}
 800b850:	4770      	bx	lr

0800b852 <__sfputs_r>:
 800b852:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b854:	4606      	mov	r6, r0
 800b856:	460f      	mov	r7, r1
 800b858:	4614      	mov	r4, r2
 800b85a:	18d5      	adds	r5, r2, r3
 800b85c:	42ac      	cmp	r4, r5
 800b85e:	d101      	bne.n	800b864 <__sfputs_r+0x12>
 800b860:	2000      	movs	r0, #0
 800b862:	e007      	b.n	800b874 <__sfputs_r+0x22>
 800b864:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b868:	463a      	mov	r2, r7
 800b86a:	4630      	mov	r0, r6
 800b86c:	f7ff ffdc 	bl	800b828 <__sfputc_r>
 800b870:	1c43      	adds	r3, r0, #1
 800b872:	d1f3      	bne.n	800b85c <__sfputs_r+0xa>
 800b874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b878 <_vfiprintf_r>:
 800b878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b87c:	460d      	mov	r5, r1
 800b87e:	b09d      	sub	sp, #116	; 0x74
 800b880:	4614      	mov	r4, r2
 800b882:	4698      	mov	r8, r3
 800b884:	4606      	mov	r6, r0
 800b886:	b118      	cbz	r0, 800b890 <_vfiprintf_r+0x18>
 800b888:	6983      	ldr	r3, [r0, #24]
 800b88a:	b90b      	cbnz	r3, 800b890 <_vfiprintf_r+0x18>
 800b88c:	f000 fca6 	bl	800c1dc <__sinit>
 800b890:	4b89      	ldr	r3, [pc, #548]	; (800bab8 <_vfiprintf_r+0x240>)
 800b892:	429d      	cmp	r5, r3
 800b894:	d11b      	bne.n	800b8ce <_vfiprintf_r+0x56>
 800b896:	6875      	ldr	r5, [r6, #4]
 800b898:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b89a:	07d9      	lsls	r1, r3, #31
 800b89c:	d405      	bmi.n	800b8aa <_vfiprintf_r+0x32>
 800b89e:	89ab      	ldrh	r3, [r5, #12]
 800b8a0:	059a      	lsls	r2, r3, #22
 800b8a2:	d402      	bmi.n	800b8aa <_vfiprintf_r+0x32>
 800b8a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8a6:	f000 fd37 	bl	800c318 <__retarget_lock_acquire_recursive>
 800b8aa:	89ab      	ldrh	r3, [r5, #12]
 800b8ac:	071b      	lsls	r3, r3, #28
 800b8ae:	d501      	bpl.n	800b8b4 <_vfiprintf_r+0x3c>
 800b8b0:	692b      	ldr	r3, [r5, #16]
 800b8b2:	b9eb      	cbnz	r3, 800b8f0 <_vfiprintf_r+0x78>
 800b8b4:	4629      	mov	r1, r5
 800b8b6:	4630      	mov	r0, r6
 800b8b8:	f000 fb04 	bl	800bec4 <__swsetup_r>
 800b8bc:	b1c0      	cbz	r0, 800b8f0 <_vfiprintf_r+0x78>
 800b8be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8c0:	07dc      	lsls	r4, r3, #31
 800b8c2:	d50e      	bpl.n	800b8e2 <_vfiprintf_r+0x6a>
 800b8c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8c8:	b01d      	add	sp, #116	; 0x74
 800b8ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ce:	4b7b      	ldr	r3, [pc, #492]	; (800babc <_vfiprintf_r+0x244>)
 800b8d0:	429d      	cmp	r5, r3
 800b8d2:	d101      	bne.n	800b8d8 <_vfiprintf_r+0x60>
 800b8d4:	68b5      	ldr	r5, [r6, #8]
 800b8d6:	e7df      	b.n	800b898 <_vfiprintf_r+0x20>
 800b8d8:	4b79      	ldr	r3, [pc, #484]	; (800bac0 <_vfiprintf_r+0x248>)
 800b8da:	429d      	cmp	r5, r3
 800b8dc:	bf08      	it	eq
 800b8de:	68f5      	ldreq	r5, [r6, #12]
 800b8e0:	e7da      	b.n	800b898 <_vfiprintf_r+0x20>
 800b8e2:	89ab      	ldrh	r3, [r5, #12]
 800b8e4:	0598      	lsls	r0, r3, #22
 800b8e6:	d4ed      	bmi.n	800b8c4 <_vfiprintf_r+0x4c>
 800b8e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8ea:	f000 fd16 	bl	800c31a <__retarget_lock_release_recursive>
 800b8ee:	e7e9      	b.n	800b8c4 <_vfiprintf_r+0x4c>
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	9309      	str	r3, [sp, #36]	; 0x24
 800b8f4:	2320      	movs	r3, #32
 800b8f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8fe:	2330      	movs	r3, #48	; 0x30
 800b900:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bac4 <_vfiprintf_r+0x24c>
 800b904:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b908:	f04f 0901 	mov.w	r9, #1
 800b90c:	4623      	mov	r3, r4
 800b90e:	469a      	mov	sl, r3
 800b910:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b914:	b10a      	cbz	r2, 800b91a <_vfiprintf_r+0xa2>
 800b916:	2a25      	cmp	r2, #37	; 0x25
 800b918:	d1f9      	bne.n	800b90e <_vfiprintf_r+0x96>
 800b91a:	ebba 0b04 	subs.w	fp, sl, r4
 800b91e:	d00b      	beq.n	800b938 <_vfiprintf_r+0xc0>
 800b920:	465b      	mov	r3, fp
 800b922:	4622      	mov	r2, r4
 800b924:	4629      	mov	r1, r5
 800b926:	4630      	mov	r0, r6
 800b928:	f7ff ff93 	bl	800b852 <__sfputs_r>
 800b92c:	3001      	adds	r0, #1
 800b92e:	f000 80aa 	beq.w	800ba86 <_vfiprintf_r+0x20e>
 800b932:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b934:	445a      	add	r2, fp
 800b936:	9209      	str	r2, [sp, #36]	; 0x24
 800b938:	f89a 3000 	ldrb.w	r3, [sl]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	f000 80a2 	beq.w	800ba86 <_vfiprintf_r+0x20e>
 800b942:	2300      	movs	r3, #0
 800b944:	f04f 32ff 	mov.w	r2, #4294967295
 800b948:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b94c:	f10a 0a01 	add.w	sl, sl, #1
 800b950:	9304      	str	r3, [sp, #16]
 800b952:	9307      	str	r3, [sp, #28]
 800b954:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b958:	931a      	str	r3, [sp, #104]	; 0x68
 800b95a:	4654      	mov	r4, sl
 800b95c:	2205      	movs	r2, #5
 800b95e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b962:	4858      	ldr	r0, [pc, #352]	; (800bac4 <_vfiprintf_r+0x24c>)
 800b964:	f7f4 fc14 	bl	8000190 <memchr>
 800b968:	9a04      	ldr	r2, [sp, #16]
 800b96a:	b9d8      	cbnz	r0, 800b9a4 <_vfiprintf_r+0x12c>
 800b96c:	06d1      	lsls	r1, r2, #27
 800b96e:	bf44      	itt	mi
 800b970:	2320      	movmi	r3, #32
 800b972:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b976:	0713      	lsls	r3, r2, #28
 800b978:	bf44      	itt	mi
 800b97a:	232b      	movmi	r3, #43	; 0x2b
 800b97c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b980:	f89a 3000 	ldrb.w	r3, [sl]
 800b984:	2b2a      	cmp	r3, #42	; 0x2a
 800b986:	d015      	beq.n	800b9b4 <_vfiprintf_r+0x13c>
 800b988:	9a07      	ldr	r2, [sp, #28]
 800b98a:	4654      	mov	r4, sl
 800b98c:	2000      	movs	r0, #0
 800b98e:	f04f 0c0a 	mov.w	ip, #10
 800b992:	4621      	mov	r1, r4
 800b994:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b998:	3b30      	subs	r3, #48	; 0x30
 800b99a:	2b09      	cmp	r3, #9
 800b99c:	d94e      	bls.n	800ba3c <_vfiprintf_r+0x1c4>
 800b99e:	b1b0      	cbz	r0, 800b9ce <_vfiprintf_r+0x156>
 800b9a0:	9207      	str	r2, [sp, #28]
 800b9a2:	e014      	b.n	800b9ce <_vfiprintf_r+0x156>
 800b9a4:	eba0 0308 	sub.w	r3, r0, r8
 800b9a8:	fa09 f303 	lsl.w	r3, r9, r3
 800b9ac:	4313      	orrs	r3, r2
 800b9ae:	9304      	str	r3, [sp, #16]
 800b9b0:	46a2      	mov	sl, r4
 800b9b2:	e7d2      	b.n	800b95a <_vfiprintf_r+0xe2>
 800b9b4:	9b03      	ldr	r3, [sp, #12]
 800b9b6:	1d19      	adds	r1, r3, #4
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	9103      	str	r1, [sp, #12]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	bfbb      	ittet	lt
 800b9c0:	425b      	neglt	r3, r3
 800b9c2:	f042 0202 	orrlt.w	r2, r2, #2
 800b9c6:	9307      	strge	r3, [sp, #28]
 800b9c8:	9307      	strlt	r3, [sp, #28]
 800b9ca:	bfb8      	it	lt
 800b9cc:	9204      	strlt	r2, [sp, #16]
 800b9ce:	7823      	ldrb	r3, [r4, #0]
 800b9d0:	2b2e      	cmp	r3, #46	; 0x2e
 800b9d2:	d10c      	bne.n	800b9ee <_vfiprintf_r+0x176>
 800b9d4:	7863      	ldrb	r3, [r4, #1]
 800b9d6:	2b2a      	cmp	r3, #42	; 0x2a
 800b9d8:	d135      	bne.n	800ba46 <_vfiprintf_r+0x1ce>
 800b9da:	9b03      	ldr	r3, [sp, #12]
 800b9dc:	1d1a      	adds	r2, r3, #4
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	9203      	str	r2, [sp, #12]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	bfb8      	it	lt
 800b9e6:	f04f 33ff 	movlt.w	r3, #4294967295
 800b9ea:	3402      	adds	r4, #2
 800b9ec:	9305      	str	r3, [sp, #20]
 800b9ee:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800bac8 <_vfiprintf_r+0x250>
 800b9f2:	7821      	ldrb	r1, [r4, #0]
 800b9f4:	2203      	movs	r2, #3
 800b9f6:	4650      	mov	r0, sl
 800b9f8:	f7f4 fbca 	bl	8000190 <memchr>
 800b9fc:	b140      	cbz	r0, 800ba10 <_vfiprintf_r+0x198>
 800b9fe:	2340      	movs	r3, #64	; 0x40
 800ba00:	eba0 000a 	sub.w	r0, r0, sl
 800ba04:	fa03 f000 	lsl.w	r0, r3, r0
 800ba08:	9b04      	ldr	r3, [sp, #16]
 800ba0a:	4303      	orrs	r3, r0
 800ba0c:	3401      	adds	r4, #1
 800ba0e:	9304      	str	r3, [sp, #16]
 800ba10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba14:	482d      	ldr	r0, [pc, #180]	; (800bacc <_vfiprintf_r+0x254>)
 800ba16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba1a:	2206      	movs	r2, #6
 800ba1c:	f7f4 fbb8 	bl	8000190 <memchr>
 800ba20:	2800      	cmp	r0, #0
 800ba22:	d03f      	beq.n	800baa4 <_vfiprintf_r+0x22c>
 800ba24:	4b2a      	ldr	r3, [pc, #168]	; (800bad0 <_vfiprintf_r+0x258>)
 800ba26:	bb1b      	cbnz	r3, 800ba70 <_vfiprintf_r+0x1f8>
 800ba28:	9b03      	ldr	r3, [sp, #12]
 800ba2a:	3307      	adds	r3, #7
 800ba2c:	f023 0307 	bic.w	r3, r3, #7
 800ba30:	3308      	adds	r3, #8
 800ba32:	9303      	str	r3, [sp, #12]
 800ba34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba36:	443b      	add	r3, r7
 800ba38:	9309      	str	r3, [sp, #36]	; 0x24
 800ba3a:	e767      	b.n	800b90c <_vfiprintf_r+0x94>
 800ba3c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba40:	460c      	mov	r4, r1
 800ba42:	2001      	movs	r0, #1
 800ba44:	e7a5      	b.n	800b992 <_vfiprintf_r+0x11a>
 800ba46:	2300      	movs	r3, #0
 800ba48:	3401      	adds	r4, #1
 800ba4a:	9305      	str	r3, [sp, #20]
 800ba4c:	4619      	mov	r1, r3
 800ba4e:	f04f 0c0a 	mov.w	ip, #10
 800ba52:	4620      	mov	r0, r4
 800ba54:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba58:	3a30      	subs	r2, #48	; 0x30
 800ba5a:	2a09      	cmp	r2, #9
 800ba5c:	d903      	bls.n	800ba66 <_vfiprintf_r+0x1ee>
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d0c5      	beq.n	800b9ee <_vfiprintf_r+0x176>
 800ba62:	9105      	str	r1, [sp, #20]
 800ba64:	e7c3      	b.n	800b9ee <_vfiprintf_r+0x176>
 800ba66:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba6a:	4604      	mov	r4, r0
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	e7f0      	b.n	800ba52 <_vfiprintf_r+0x1da>
 800ba70:	ab03      	add	r3, sp, #12
 800ba72:	9300      	str	r3, [sp, #0]
 800ba74:	462a      	mov	r2, r5
 800ba76:	4b17      	ldr	r3, [pc, #92]	; (800bad4 <_vfiprintf_r+0x25c>)
 800ba78:	a904      	add	r1, sp, #16
 800ba7a:	4630      	mov	r0, r6
 800ba7c:	f3af 8000 	nop.w
 800ba80:	4607      	mov	r7, r0
 800ba82:	1c78      	adds	r0, r7, #1
 800ba84:	d1d6      	bne.n	800ba34 <_vfiprintf_r+0x1bc>
 800ba86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba88:	07d9      	lsls	r1, r3, #31
 800ba8a:	d405      	bmi.n	800ba98 <_vfiprintf_r+0x220>
 800ba8c:	89ab      	ldrh	r3, [r5, #12]
 800ba8e:	059a      	lsls	r2, r3, #22
 800ba90:	d402      	bmi.n	800ba98 <_vfiprintf_r+0x220>
 800ba92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba94:	f000 fc41 	bl	800c31a <__retarget_lock_release_recursive>
 800ba98:	89ab      	ldrh	r3, [r5, #12]
 800ba9a:	065b      	lsls	r3, r3, #25
 800ba9c:	f53f af12 	bmi.w	800b8c4 <_vfiprintf_r+0x4c>
 800baa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800baa2:	e711      	b.n	800b8c8 <_vfiprintf_r+0x50>
 800baa4:	ab03      	add	r3, sp, #12
 800baa6:	9300      	str	r3, [sp, #0]
 800baa8:	462a      	mov	r2, r5
 800baaa:	4b0a      	ldr	r3, [pc, #40]	; (800bad4 <_vfiprintf_r+0x25c>)
 800baac:	a904      	add	r1, sp, #16
 800baae:	4630      	mov	r0, r6
 800bab0:	f000 f880 	bl	800bbb4 <_printf_i>
 800bab4:	e7e4      	b.n	800ba80 <_vfiprintf_r+0x208>
 800bab6:	bf00      	nop
 800bab8:	0800ded4 	.word	0x0800ded4
 800babc:	0800def4 	.word	0x0800def4
 800bac0:	0800deb4 	.word	0x0800deb4
 800bac4:	0800de80 	.word	0x0800de80
 800bac8:	0800de86 	.word	0x0800de86
 800bacc:	0800de8a 	.word	0x0800de8a
 800bad0:	00000000 	.word	0x00000000
 800bad4:	0800b853 	.word	0x0800b853

0800bad8 <_printf_common>:
 800bad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800badc:	4616      	mov	r6, r2
 800bade:	4699      	mov	r9, r3
 800bae0:	688a      	ldr	r2, [r1, #8]
 800bae2:	690b      	ldr	r3, [r1, #16]
 800bae4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bae8:	4293      	cmp	r3, r2
 800baea:	bfb8      	it	lt
 800baec:	4613      	movlt	r3, r2
 800baee:	6033      	str	r3, [r6, #0]
 800baf0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800baf4:	4607      	mov	r7, r0
 800baf6:	460c      	mov	r4, r1
 800baf8:	b10a      	cbz	r2, 800bafe <_printf_common+0x26>
 800bafa:	3301      	adds	r3, #1
 800bafc:	6033      	str	r3, [r6, #0]
 800bafe:	6823      	ldr	r3, [r4, #0]
 800bb00:	0699      	lsls	r1, r3, #26
 800bb02:	bf42      	ittt	mi
 800bb04:	6833      	ldrmi	r3, [r6, #0]
 800bb06:	3302      	addmi	r3, #2
 800bb08:	6033      	strmi	r3, [r6, #0]
 800bb0a:	6825      	ldr	r5, [r4, #0]
 800bb0c:	f015 0506 	ands.w	r5, r5, #6
 800bb10:	d106      	bne.n	800bb20 <_printf_common+0x48>
 800bb12:	f104 0a19 	add.w	sl, r4, #25
 800bb16:	68e3      	ldr	r3, [r4, #12]
 800bb18:	6832      	ldr	r2, [r6, #0]
 800bb1a:	1a9b      	subs	r3, r3, r2
 800bb1c:	42ab      	cmp	r3, r5
 800bb1e:	dc26      	bgt.n	800bb6e <_printf_common+0x96>
 800bb20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bb24:	1e13      	subs	r3, r2, #0
 800bb26:	6822      	ldr	r2, [r4, #0]
 800bb28:	bf18      	it	ne
 800bb2a:	2301      	movne	r3, #1
 800bb2c:	0692      	lsls	r2, r2, #26
 800bb2e:	d42b      	bmi.n	800bb88 <_printf_common+0xb0>
 800bb30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb34:	4649      	mov	r1, r9
 800bb36:	4638      	mov	r0, r7
 800bb38:	47c0      	blx	r8
 800bb3a:	3001      	adds	r0, #1
 800bb3c:	d01e      	beq.n	800bb7c <_printf_common+0xa4>
 800bb3e:	6823      	ldr	r3, [r4, #0]
 800bb40:	68e5      	ldr	r5, [r4, #12]
 800bb42:	6832      	ldr	r2, [r6, #0]
 800bb44:	f003 0306 	and.w	r3, r3, #6
 800bb48:	2b04      	cmp	r3, #4
 800bb4a:	bf08      	it	eq
 800bb4c:	1aad      	subeq	r5, r5, r2
 800bb4e:	68a3      	ldr	r3, [r4, #8]
 800bb50:	6922      	ldr	r2, [r4, #16]
 800bb52:	bf0c      	ite	eq
 800bb54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb58:	2500      	movne	r5, #0
 800bb5a:	4293      	cmp	r3, r2
 800bb5c:	bfc4      	itt	gt
 800bb5e:	1a9b      	subgt	r3, r3, r2
 800bb60:	18ed      	addgt	r5, r5, r3
 800bb62:	2600      	movs	r6, #0
 800bb64:	341a      	adds	r4, #26
 800bb66:	42b5      	cmp	r5, r6
 800bb68:	d11a      	bne.n	800bba0 <_printf_common+0xc8>
 800bb6a:	2000      	movs	r0, #0
 800bb6c:	e008      	b.n	800bb80 <_printf_common+0xa8>
 800bb6e:	2301      	movs	r3, #1
 800bb70:	4652      	mov	r2, sl
 800bb72:	4649      	mov	r1, r9
 800bb74:	4638      	mov	r0, r7
 800bb76:	47c0      	blx	r8
 800bb78:	3001      	adds	r0, #1
 800bb7a:	d103      	bne.n	800bb84 <_printf_common+0xac>
 800bb7c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb84:	3501      	adds	r5, #1
 800bb86:	e7c6      	b.n	800bb16 <_printf_common+0x3e>
 800bb88:	18e1      	adds	r1, r4, r3
 800bb8a:	1c5a      	adds	r2, r3, #1
 800bb8c:	2030      	movs	r0, #48	; 0x30
 800bb8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb92:	4422      	add	r2, r4
 800bb94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bb9c:	3302      	adds	r3, #2
 800bb9e:	e7c7      	b.n	800bb30 <_printf_common+0x58>
 800bba0:	2301      	movs	r3, #1
 800bba2:	4622      	mov	r2, r4
 800bba4:	4649      	mov	r1, r9
 800bba6:	4638      	mov	r0, r7
 800bba8:	47c0      	blx	r8
 800bbaa:	3001      	adds	r0, #1
 800bbac:	d0e6      	beq.n	800bb7c <_printf_common+0xa4>
 800bbae:	3601      	adds	r6, #1
 800bbb0:	e7d9      	b.n	800bb66 <_printf_common+0x8e>
	...

0800bbb4 <_printf_i>:
 800bbb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bbb8:	7e0f      	ldrb	r7, [r1, #24]
 800bbba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bbbc:	2f78      	cmp	r7, #120	; 0x78
 800bbbe:	4691      	mov	r9, r2
 800bbc0:	4680      	mov	r8, r0
 800bbc2:	460c      	mov	r4, r1
 800bbc4:	469a      	mov	sl, r3
 800bbc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bbca:	d807      	bhi.n	800bbdc <_printf_i+0x28>
 800bbcc:	2f62      	cmp	r7, #98	; 0x62
 800bbce:	d80a      	bhi.n	800bbe6 <_printf_i+0x32>
 800bbd0:	2f00      	cmp	r7, #0
 800bbd2:	f000 80d8 	beq.w	800bd86 <_printf_i+0x1d2>
 800bbd6:	2f58      	cmp	r7, #88	; 0x58
 800bbd8:	f000 80a3 	beq.w	800bd22 <_printf_i+0x16e>
 800bbdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bbe0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bbe4:	e03a      	b.n	800bc5c <_printf_i+0xa8>
 800bbe6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bbea:	2b15      	cmp	r3, #21
 800bbec:	d8f6      	bhi.n	800bbdc <_printf_i+0x28>
 800bbee:	a101      	add	r1, pc, #4	; (adr r1, 800bbf4 <_printf_i+0x40>)
 800bbf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bbf4:	0800bc4d 	.word	0x0800bc4d
 800bbf8:	0800bc61 	.word	0x0800bc61
 800bbfc:	0800bbdd 	.word	0x0800bbdd
 800bc00:	0800bbdd 	.word	0x0800bbdd
 800bc04:	0800bbdd 	.word	0x0800bbdd
 800bc08:	0800bbdd 	.word	0x0800bbdd
 800bc0c:	0800bc61 	.word	0x0800bc61
 800bc10:	0800bbdd 	.word	0x0800bbdd
 800bc14:	0800bbdd 	.word	0x0800bbdd
 800bc18:	0800bbdd 	.word	0x0800bbdd
 800bc1c:	0800bbdd 	.word	0x0800bbdd
 800bc20:	0800bd6d 	.word	0x0800bd6d
 800bc24:	0800bc91 	.word	0x0800bc91
 800bc28:	0800bd4f 	.word	0x0800bd4f
 800bc2c:	0800bbdd 	.word	0x0800bbdd
 800bc30:	0800bbdd 	.word	0x0800bbdd
 800bc34:	0800bd8f 	.word	0x0800bd8f
 800bc38:	0800bbdd 	.word	0x0800bbdd
 800bc3c:	0800bc91 	.word	0x0800bc91
 800bc40:	0800bbdd 	.word	0x0800bbdd
 800bc44:	0800bbdd 	.word	0x0800bbdd
 800bc48:	0800bd57 	.word	0x0800bd57
 800bc4c:	682b      	ldr	r3, [r5, #0]
 800bc4e:	1d1a      	adds	r2, r3, #4
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	602a      	str	r2, [r5, #0]
 800bc54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	e0a3      	b.n	800bda8 <_printf_i+0x1f4>
 800bc60:	6820      	ldr	r0, [r4, #0]
 800bc62:	6829      	ldr	r1, [r5, #0]
 800bc64:	0606      	lsls	r6, r0, #24
 800bc66:	f101 0304 	add.w	r3, r1, #4
 800bc6a:	d50a      	bpl.n	800bc82 <_printf_i+0xce>
 800bc6c:	680e      	ldr	r6, [r1, #0]
 800bc6e:	602b      	str	r3, [r5, #0]
 800bc70:	2e00      	cmp	r6, #0
 800bc72:	da03      	bge.n	800bc7c <_printf_i+0xc8>
 800bc74:	232d      	movs	r3, #45	; 0x2d
 800bc76:	4276      	negs	r6, r6
 800bc78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc7c:	485e      	ldr	r0, [pc, #376]	; (800bdf8 <_printf_i+0x244>)
 800bc7e:	230a      	movs	r3, #10
 800bc80:	e019      	b.n	800bcb6 <_printf_i+0x102>
 800bc82:	680e      	ldr	r6, [r1, #0]
 800bc84:	602b      	str	r3, [r5, #0]
 800bc86:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bc8a:	bf18      	it	ne
 800bc8c:	b236      	sxthne	r6, r6
 800bc8e:	e7ef      	b.n	800bc70 <_printf_i+0xbc>
 800bc90:	682b      	ldr	r3, [r5, #0]
 800bc92:	6820      	ldr	r0, [r4, #0]
 800bc94:	1d19      	adds	r1, r3, #4
 800bc96:	6029      	str	r1, [r5, #0]
 800bc98:	0601      	lsls	r1, r0, #24
 800bc9a:	d501      	bpl.n	800bca0 <_printf_i+0xec>
 800bc9c:	681e      	ldr	r6, [r3, #0]
 800bc9e:	e002      	b.n	800bca6 <_printf_i+0xf2>
 800bca0:	0646      	lsls	r6, r0, #25
 800bca2:	d5fb      	bpl.n	800bc9c <_printf_i+0xe8>
 800bca4:	881e      	ldrh	r6, [r3, #0]
 800bca6:	4854      	ldr	r0, [pc, #336]	; (800bdf8 <_printf_i+0x244>)
 800bca8:	2f6f      	cmp	r7, #111	; 0x6f
 800bcaa:	bf0c      	ite	eq
 800bcac:	2308      	moveq	r3, #8
 800bcae:	230a      	movne	r3, #10
 800bcb0:	2100      	movs	r1, #0
 800bcb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bcb6:	6865      	ldr	r5, [r4, #4]
 800bcb8:	60a5      	str	r5, [r4, #8]
 800bcba:	2d00      	cmp	r5, #0
 800bcbc:	bfa2      	ittt	ge
 800bcbe:	6821      	ldrge	r1, [r4, #0]
 800bcc0:	f021 0104 	bicge.w	r1, r1, #4
 800bcc4:	6021      	strge	r1, [r4, #0]
 800bcc6:	b90e      	cbnz	r6, 800bccc <_printf_i+0x118>
 800bcc8:	2d00      	cmp	r5, #0
 800bcca:	d04d      	beq.n	800bd68 <_printf_i+0x1b4>
 800bccc:	4615      	mov	r5, r2
 800bcce:	fbb6 f1f3 	udiv	r1, r6, r3
 800bcd2:	fb03 6711 	mls	r7, r3, r1, r6
 800bcd6:	5dc7      	ldrb	r7, [r0, r7]
 800bcd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bcdc:	4637      	mov	r7, r6
 800bcde:	42bb      	cmp	r3, r7
 800bce0:	460e      	mov	r6, r1
 800bce2:	d9f4      	bls.n	800bcce <_printf_i+0x11a>
 800bce4:	2b08      	cmp	r3, #8
 800bce6:	d10b      	bne.n	800bd00 <_printf_i+0x14c>
 800bce8:	6823      	ldr	r3, [r4, #0]
 800bcea:	07de      	lsls	r6, r3, #31
 800bcec:	d508      	bpl.n	800bd00 <_printf_i+0x14c>
 800bcee:	6923      	ldr	r3, [r4, #16]
 800bcf0:	6861      	ldr	r1, [r4, #4]
 800bcf2:	4299      	cmp	r1, r3
 800bcf4:	bfde      	ittt	le
 800bcf6:	2330      	movle	r3, #48	; 0x30
 800bcf8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bcfc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bd00:	1b52      	subs	r2, r2, r5
 800bd02:	6122      	str	r2, [r4, #16]
 800bd04:	f8cd a000 	str.w	sl, [sp]
 800bd08:	464b      	mov	r3, r9
 800bd0a:	aa03      	add	r2, sp, #12
 800bd0c:	4621      	mov	r1, r4
 800bd0e:	4640      	mov	r0, r8
 800bd10:	f7ff fee2 	bl	800bad8 <_printf_common>
 800bd14:	3001      	adds	r0, #1
 800bd16:	d14c      	bne.n	800bdb2 <_printf_i+0x1fe>
 800bd18:	f04f 30ff 	mov.w	r0, #4294967295
 800bd1c:	b004      	add	sp, #16
 800bd1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd22:	4835      	ldr	r0, [pc, #212]	; (800bdf8 <_printf_i+0x244>)
 800bd24:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bd28:	6829      	ldr	r1, [r5, #0]
 800bd2a:	6823      	ldr	r3, [r4, #0]
 800bd2c:	f851 6b04 	ldr.w	r6, [r1], #4
 800bd30:	6029      	str	r1, [r5, #0]
 800bd32:	061d      	lsls	r5, r3, #24
 800bd34:	d514      	bpl.n	800bd60 <_printf_i+0x1ac>
 800bd36:	07df      	lsls	r7, r3, #31
 800bd38:	bf44      	itt	mi
 800bd3a:	f043 0320 	orrmi.w	r3, r3, #32
 800bd3e:	6023      	strmi	r3, [r4, #0]
 800bd40:	b91e      	cbnz	r6, 800bd4a <_printf_i+0x196>
 800bd42:	6823      	ldr	r3, [r4, #0]
 800bd44:	f023 0320 	bic.w	r3, r3, #32
 800bd48:	6023      	str	r3, [r4, #0]
 800bd4a:	2310      	movs	r3, #16
 800bd4c:	e7b0      	b.n	800bcb0 <_printf_i+0xfc>
 800bd4e:	6823      	ldr	r3, [r4, #0]
 800bd50:	f043 0320 	orr.w	r3, r3, #32
 800bd54:	6023      	str	r3, [r4, #0]
 800bd56:	2378      	movs	r3, #120	; 0x78
 800bd58:	4828      	ldr	r0, [pc, #160]	; (800bdfc <_printf_i+0x248>)
 800bd5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bd5e:	e7e3      	b.n	800bd28 <_printf_i+0x174>
 800bd60:	0659      	lsls	r1, r3, #25
 800bd62:	bf48      	it	mi
 800bd64:	b2b6      	uxthmi	r6, r6
 800bd66:	e7e6      	b.n	800bd36 <_printf_i+0x182>
 800bd68:	4615      	mov	r5, r2
 800bd6a:	e7bb      	b.n	800bce4 <_printf_i+0x130>
 800bd6c:	682b      	ldr	r3, [r5, #0]
 800bd6e:	6826      	ldr	r6, [r4, #0]
 800bd70:	6961      	ldr	r1, [r4, #20]
 800bd72:	1d18      	adds	r0, r3, #4
 800bd74:	6028      	str	r0, [r5, #0]
 800bd76:	0635      	lsls	r5, r6, #24
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	d501      	bpl.n	800bd80 <_printf_i+0x1cc>
 800bd7c:	6019      	str	r1, [r3, #0]
 800bd7e:	e002      	b.n	800bd86 <_printf_i+0x1d2>
 800bd80:	0670      	lsls	r0, r6, #25
 800bd82:	d5fb      	bpl.n	800bd7c <_printf_i+0x1c8>
 800bd84:	8019      	strh	r1, [r3, #0]
 800bd86:	2300      	movs	r3, #0
 800bd88:	6123      	str	r3, [r4, #16]
 800bd8a:	4615      	mov	r5, r2
 800bd8c:	e7ba      	b.n	800bd04 <_printf_i+0x150>
 800bd8e:	682b      	ldr	r3, [r5, #0]
 800bd90:	1d1a      	adds	r2, r3, #4
 800bd92:	602a      	str	r2, [r5, #0]
 800bd94:	681d      	ldr	r5, [r3, #0]
 800bd96:	6862      	ldr	r2, [r4, #4]
 800bd98:	2100      	movs	r1, #0
 800bd9a:	4628      	mov	r0, r5
 800bd9c:	f7f4 f9f8 	bl	8000190 <memchr>
 800bda0:	b108      	cbz	r0, 800bda6 <_printf_i+0x1f2>
 800bda2:	1b40      	subs	r0, r0, r5
 800bda4:	6060      	str	r0, [r4, #4]
 800bda6:	6863      	ldr	r3, [r4, #4]
 800bda8:	6123      	str	r3, [r4, #16]
 800bdaa:	2300      	movs	r3, #0
 800bdac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdb0:	e7a8      	b.n	800bd04 <_printf_i+0x150>
 800bdb2:	6923      	ldr	r3, [r4, #16]
 800bdb4:	462a      	mov	r2, r5
 800bdb6:	4649      	mov	r1, r9
 800bdb8:	4640      	mov	r0, r8
 800bdba:	47d0      	blx	sl
 800bdbc:	3001      	adds	r0, #1
 800bdbe:	d0ab      	beq.n	800bd18 <_printf_i+0x164>
 800bdc0:	6823      	ldr	r3, [r4, #0]
 800bdc2:	079b      	lsls	r3, r3, #30
 800bdc4:	d413      	bmi.n	800bdee <_printf_i+0x23a>
 800bdc6:	68e0      	ldr	r0, [r4, #12]
 800bdc8:	9b03      	ldr	r3, [sp, #12]
 800bdca:	4298      	cmp	r0, r3
 800bdcc:	bfb8      	it	lt
 800bdce:	4618      	movlt	r0, r3
 800bdd0:	e7a4      	b.n	800bd1c <_printf_i+0x168>
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	4632      	mov	r2, r6
 800bdd6:	4649      	mov	r1, r9
 800bdd8:	4640      	mov	r0, r8
 800bdda:	47d0      	blx	sl
 800bddc:	3001      	adds	r0, #1
 800bdde:	d09b      	beq.n	800bd18 <_printf_i+0x164>
 800bde0:	3501      	adds	r5, #1
 800bde2:	68e3      	ldr	r3, [r4, #12]
 800bde4:	9903      	ldr	r1, [sp, #12]
 800bde6:	1a5b      	subs	r3, r3, r1
 800bde8:	42ab      	cmp	r3, r5
 800bdea:	dcf2      	bgt.n	800bdd2 <_printf_i+0x21e>
 800bdec:	e7eb      	b.n	800bdc6 <_printf_i+0x212>
 800bdee:	2500      	movs	r5, #0
 800bdf0:	f104 0619 	add.w	r6, r4, #25
 800bdf4:	e7f5      	b.n	800bde2 <_printf_i+0x22e>
 800bdf6:	bf00      	nop
 800bdf8:	0800de91 	.word	0x0800de91
 800bdfc:	0800dea2 	.word	0x0800dea2

0800be00 <_sbrk_r>:
 800be00:	b538      	push	{r3, r4, r5, lr}
 800be02:	4d06      	ldr	r5, [pc, #24]	; (800be1c <_sbrk_r+0x1c>)
 800be04:	2300      	movs	r3, #0
 800be06:	4604      	mov	r4, r0
 800be08:	4608      	mov	r0, r1
 800be0a:	602b      	str	r3, [r5, #0]
 800be0c:	f7f6 fb02 	bl	8002414 <_sbrk>
 800be10:	1c43      	adds	r3, r0, #1
 800be12:	d102      	bne.n	800be1a <_sbrk_r+0x1a>
 800be14:	682b      	ldr	r3, [r5, #0]
 800be16:	b103      	cbz	r3, 800be1a <_sbrk_r+0x1a>
 800be18:	6023      	str	r3, [r4, #0]
 800be1a:	bd38      	pop	{r3, r4, r5, pc}
 800be1c:	2000150c 	.word	0x2000150c

0800be20 <__swbuf_r>:
 800be20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be22:	460e      	mov	r6, r1
 800be24:	4614      	mov	r4, r2
 800be26:	4605      	mov	r5, r0
 800be28:	b118      	cbz	r0, 800be32 <__swbuf_r+0x12>
 800be2a:	6983      	ldr	r3, [r0, #24]
 800be2c:	b90b      	cbnz	r3, 800be32 <__swbuf_r+0x12>
 800be2e:	f000 f9d5 	bl	800c1dc <__sinit>
 800be32:	4b21      	ldr	r3, [pc, #132]	; (800beb8 <__swbuf_r+0x98>)
 800be34:	429c      	cmp	r4, r3
 800be36:	d12b      	bne.n	800be90 <__swbuf_r+0x70>
 800be38:	686c      	ldr	r4, [r5, #4]
 800be3a:	69a3      	ldr	r3, [r4, #24]
 800be3c:	60a3      	str	r3, [r4, #8]
 800be3e:	89a3      	ldrh	r3, [r4, #12]
 800be40:	071a      	lsls	r2, r3, #28
 800be42:	d52f      	bpl.n	800bea4 <__swbuf_r+0x84>
 800be44:	6923      	ldr	r3, [r4, #16]
 800be46:	b36b      	cbz	r3, 800bea4 <__swbuf_r+0x84>
 800be48:	6923      	ldr	r3, [r4, #16]
 800be4a:	6820      	ldr	r0, [r4, #0]
 800be4c:	1ac0      	subs	r0, r0, r3
 800be4e:	6963      	ldr	r3, [r4, #20]
 800be50:	b2f6      	uxtb	r6, r6
 800be52:	4283      	cmp	r3, r0
 800be54:	4637      	mov	r7, r6
 800be56:	dc04      	bgt.n	800be62 <__swbuf_r+0x42>
 800be58:	4621      	mov	r1, r4
 800be5a:	4628      	mov	r0, r5
 800be5c:	f000 f92a 	bl	800c0b4 <_fflush_r>
 800be60:	bb30      	cbnz	r0, 800beb0 <__swbuf_r+0x90>
 800be62:	68a3      	ldr	r3, [r4, #8]
 800be64:	3b01      	subs	r3, #1
 800be66:	60a3      	str	r3, [r4, #8]
 800be68:	6823      	ldr	r3, [r4, #0]
 800be6a:	1c5a      	adds	r2, r3, #1
 800be6c:	6022      	str	r2, [r4, #0]
 800be6e:	701e      	strb	r6, [r3, #0]
 800be70:	6963      	ldr	r3, [r4, #20]
 800be72:	3001      	adds	r0, #1
 800be74:	4283      	cmp	r3, r0
 800be76:	d004      	beq.n	800be82 <__swbuf_r+0x62>
 800be78:	89a3      	ldrh	r3, [r4, #12]
 800be7a:	07db      	lsls	r3, r3, #31
 800be7c:	d506      	bpl.n	800be8c <__swbuf_r+0x6c>
 800be7e:	2e0a      	cmp	r6, #10
 800be80:	d104      	bne.n	800be8c <__swbuf_r+0x6c>
 800be82:	4621      	mov	r1, r4
 800be84:	4628      	mov	r0, r5
 800be86:	f000 f915 	bl	800c0b4 <_fflush_r>
 800be8a:	b988      	cbnz	r0, 800beb0 <__swbuf_r+0x90>
 800be8c:	4638      	mov	r0, r7
 800be8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be90:	4b0a      	ldr	r3, [pc, #40]	; (800bebc <__swbuf_r+0x9c>)
 800be92:	429c      	cmp	r4, r3
 800be94:	d101      	bne.n	800be9a <__swbuf_r+0x7a>
 800be96:	68ac      	ldr	r4, [r5, #8]
 800be98:	e7cf      	b.n	800be3a <__swbuf_r+0x1a>
 800be9a:	4b09      	ldr	r3, [pc, #36]	; (800bec0 <__swbuf_r+0xa0>)
 800be9c:	429c      	cmp	r4, r3
 800be9e:	bf08      	it	eq
 800bea0:	68ec      	ldreq	r4, [r5, #12]
 800bea2:	e7ca      	b.n	800be3a <__swbuf_r+0x1a>
 800bea4:	4621      	mov	r1, r4
 800bea6:	4628      	mov	r0, r5
 800bea8:	f000 f80c 	bl	800bec4 <__swsetup_r>
 800beac:	2800      	cmp	r0, #0
 800beae:	d0cb      	beq.n	800be48 <__swbuf_r+0x28>
 800beb0:	f04f 37ff 	mov.w	r7, #4294967295
 800beb4:	e7ea      	b.n	800be8c <__swbuf_r+0x6c>
 800beb6:	bf00      	nop
 800beb8:	0800ded4 	.word	0x0800ded4
 800bebc:	0800def4 	.word	0x0800def4
 800bec0:	0800deb4 	.word	0x0800deb4

0800bec4 <__swsetup_r>:
 800bec4:	4b32      	ldr	r3, [pc, #200]	; (800bf90 <__swsetup_r+0xcc>)
 800bec6:	b570      	push	{r4, r5, r6, lr}
 800bec8:	681d      	ldr	r5, [r3, #0]
 800beca:	4606      	mov	r6, r0
 800becc:	460c      	mov	r4, r1
 800bece:	b125      	cbz	r5, 800beda <__swsetup_r+0x16>
 800bed0:	69ab      	ldr	r3, [r5, #24]
 800bed2:	b913      	cbnz	r3, 800beda <__swsetup_r+0x16>
 800bed4:	4628      	mov	r0, r5
 800bed6:	f000 f981 	bl	800c1dc <__sinit>
 800beda:	4b2e      	ldr	r3, [pc, #184]	; (800bf94 <__swsetup_r+0xd0>)
 800bedc:	429c      	cmp	r4, r3
 800bede:	d10f      	bne.n	800bf00 <__swsetup_r+0x3c>
 800bee0:	686c      	ldr	r4, [r5, #4]
 800bee2:	89a3      	ldrh	r3, [r4, #12]
 800bee4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bee8:	0719      	lsls	r1, r3, #28
 800beea:	d42c      	bmi.n	800bf46 <__swsetup_r+0x82>
 800beec:	06dd      	lsls	r5, r3, #27
 800beee:	d411      	bmi.n	800bf14 <__swsetup_r+0x50>
 800bef0:	2309      	movs	r3, #9
 800bef2:	6033      	str	r3, [r6, #0]
 800bef4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bef8:	81a3      	strh	r3, [r4, #12]
 800befa:	f04f 30ff 	mov.w	r0, #4294967295
 800befe:	e03e      	b.n	800bf7e <__swsetup_r+0xba>
 800bf00:	4b25      	ldr	r3, [pc, #148]	; (800bf98 <__swsetup_r+0xd4>)
 800bf02:	429c      	cmp	r4, r3
 800bf04:	d101      	bne.n	800bf0a <__swsetup_r+0x46>
 800bf06:	68ac      	ldr	r4, [r5, #8]
 800bf08:	e7eb      	b.n	800bee2 <__swsetup_r+0x1e>
 800bf0a:	4b24      	ldr	r3, [pc, #144]	; (800bf9c <__swsetup_r+0xd8>)
 800bf0c:	429c      	cmp	r4, r3
 800bf0e:	bf08      	it	eq
 800bf10:	68ec      	ldreq	r4, [r5, #12]
 800bf12:	e7e6      	b.n	800bee2 <__swsetup_r+0x1e>
 800bf14:	0758      	lsls	r0, r3, #29
 800bf16:	d512      	bpl.n	800bf3e <__swsetup_r+0x7a>
 800bf18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf1a:	b141      	cbz	r1, 800bf2e <__swsetup_r+0x6a>
 800bf1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf20:	4299      	cmp	r1, r3
 800bf22:	d002      	beq.n	800bf2a <__swsetup_r+0x66>
 800bf24:	4630      	mov	r0, r6
 800bf26:	f7ff fa45 	bl	800b3b4 <_free_r>
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	6363      	str	r3, [r4, #52]	; 0x34
 800bf2e:	89a3      	ldrh	r3, [r4, #12]
 800bf30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bf34:	81a3      	strh	r3, [r4, #12]
 800bf36:	2300      	movs	r3, #0
 800bf38:	6063      	str	r3, [r4, #4]
 800bf3a:	6923      	ldr	r3, [r4, #16]
 800bf3c:	6023      	str	r3, [r4, #0]
 800bf3e:	89a3      	ldrh	r3, [r4, #12]
 800bf40:	f043 0308 	orr.w	r3, r3, #8
 800bf44:	81a3      	strh	r3, [r4, #12]
 800bf46:	6923      	ldr	r3, [r4, #16]
 800bf48:	b94b      	cbnz	r3, 800bf5e <__swsetup_r+0x9a>
 800bf4a:	89a3      	ldrh	r3, [r4, #12]
 800bf4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bf50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf54:	d003      	beq.n	800bf5e <__swsetup_r+0x9a>
 800bf56:	4621      	mov	r1, r4
 800bf58:	4630      	mov	r0, r6
 800bf5a:	f000 fa05 	bl	800c368 <__smakebuf_r>
 800bf5e:	89a0      	ldrh	r0, [r4, #12]
 800bf60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf64:	f010 0301 	ands.w	r3, r0, #1
 800bf68:	d00a      	beq.n	800bf80 <__swsetup_r+0xbc>
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	60a3      	str	r3, [r4, #8]
 800bf6e:	6963      	ldr	r3, [r4, #20]
 800bf70:	425b      	negs	r3, r3
 800bf72:	61a3      	str	r3, [r4, #24]
 800bf74:	6923      	ldr	r3, [r4, #16]
 800bf76:	b943      	cbnz	r3, 800bf8a <__swsetup_r+0xc6>
 800bf78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bf7c:	d1ba      	bne.n	800bef4 <__swsetup_r+0x30>
 800bf7e:	bd70      	pop	{r4, r5, r6, pc}
 800bf80:	0781      	lsls	r1, r0, #30
 800bf82:	bf58      	it	pl
 800bf84:	6963      	ldrpl	r3, [r4, #20]
 800bf86:	60a3      	str	r3, [r4, #8]
 800bf88:	e7f4      	b.n	800bf74 <__swsetup_r+0xb0>
 800bf8a:	2000      	movs	r0, #0
 800bf8c:	e7f7      	b.n	800bf7e <__swsetup_r+0xba>
 800bf8e:	bf00      	nop
 800bf90:	20000010 	.word	0x20000010
 800bf94:	0800ded4 	.word	0x0800ded4
 800bf98:	0800def4 	.word	0x0800def4
 800bf9c:	0800deb4 	.word	0x0800deb4

0800bfa0 <abort>:
 800bfa0:	b508      	push	{r3, lr}
 800bfa2:	2006      	movs	r0, #6
 800bfa4:	f000 fa9e 	bl	800c4e4 <raise>
 800bfa8:	2001      	movs	r0, #1
 800bfaa:	f7f6 f9c0 	bl	800232e <_exit>
	...

0800bfb0 <__sflush_r>:
 800bfb0:	898a      	ldrh	r2, [r1, #12]
 800bfb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfb4:	4605      	mov	r5, r0
 800bfb6:	0710      	lsls	r0, r2, #28
 800bfb8:	460c      	mov	r4, r1
 800bfba:	d457      	bmi.n	800c06c <__sflush_r+0xbc>
 800bfbc:	684b      	ldr	r3, [r1, #4]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	dc04      	bgt.n	800bfcc <__sflush_r+0x1c>
 800bfc2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	dc01      	bgt.n	800bfcc <__sflush_r+0x1c>
 800bfc8:	2000      	movs	r0, #0
 800bfca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bfce:	2e00      	cmp	r6, #0
 800bfd0:	d0fa      	beq.n	800bfc8 <__sflush_r+0x18>
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bfd8:	682f      	ldr	r7, [r5, #0]
 800bfda:	602b      	str	r3, [r5, #0]
 800bfdc:	d032      	beq.n	800c044 <__sflush_r+0x94>
 800bfde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bfe0:	89a3      	ldrh	r3, [r4, #12]
 800bfe2:	075a      	lsls	r2, r3, #29
 800bfe4:	d505      	bpl.n	800bff2 <__sflush_r+0x42>
 800bfe6:	6863      	ldr	r3, [r4, #4]
 800bfe8:	1ac0      	subs	r0, r0, r3
 800bfea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bfec:	b10b      	cbz	r3, 800bff2 <__sflush_r+0x42>
 800bfee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bff0:	1ac0      	subs	r0, r0, r3
 800bff2:	2300      	movs	r3, #0
 800bff4:	4602      	mov	r2, r0
 800bff6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bff8:	6a21      	ldr	r1, [r4, #32]
 800bffa:	4628      	mov	r0, r5
 800bffc:	47b0      	blx	r6
 800bffe:	1c43      	adds	r3, r0, #1
 800c000:	89a3      	ldrh	r3, [r4, #12]
 800c002:	d106      	bne.n	800c012 <__sflush_r+0x62>
 800c004:	6829      	ldr	r1, [r5, #0]
 800c006:	291d      	cmp	r1, #29
 800c008:	d82c      	bhi.n	800c064 <__sflush_r+0xb4>
 800c00a:	4a29      	ldr	r2, [pc, #164]	; (800c0b0 <__sflush_r+0x100>)
 800c00c:	40ca      	lsrs	r2, r1
 800c00e:	07d6      	lsls	r6, r2, #31
 800c010:	d528      	bpl.n	800c064 <__sflush_r+0xb4>
 800c012:	2200      	movs	r2, #0
 800c014:	6062      	str	r2, [r4, #4]
 800c016:	04d9      	lsls	r1, r3, #19
 800c018:	6922      	ldr	r2, [r4, #16]
 800c01a:	6022      	str	r2, [r4, #0]
 800c01c:	d504      	bpl.n	800c028 <__sflush_r+0x78>
 800c01e:	1c42      	adds	r2, r0, #1
 800c020:	d101      	bne.n	800c026 <__sflush_r+0x76>
 800c022:	682b      	ldr	r3, [r5, #0]
 800c024:	b903      	cbnz	r3, 800c028 <__sflush_r+0x78>
 800c026:	6560      	str	r0, [r4, #84]	; 0x54
 800c028:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c02a:	602f      	str	r7, [r5, #0]
 800c02c:	2900      	cmp	r1, #0
 800c02e:	d0cb      	beq.n	800bfc8 <__sflush_r+0x18>
 800c030:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c034:	4299      	cmp	r1, r3
 800c036:	d002      	beq.n	800c03e <__sflush_r+0x8e>
 800c038:	4628      	mov	r0, r5
 800c03a:	f7ff f9bb 	bl	800b3b4 <_free_r>
 800c03e:	2000      	movs	r0, #0
 800c040:	6360      	str	r0, [r4, #52]	; 0x34
 800c042:	e7c2      	b.n	800bfca <__sflush_r+0x1a>
 800c044:	6a21      	ldr	r1, [r4, #32]
 800c046:	2301      	movs	r3, #1
 800c048:	4628      	mov	r0, r5
 800c04a:	47b0      	blx	r6
 800c04c:	1c41      	adds	r1, r0, #1
 800c04e:	d1c7      	bne.n	800bfe0 <__sflush_r+0x30>
 800c050:	682b      	ldr	r3, [r5, #0]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d0c4      	beq.n	800bfe0 <__sflush_r+0x30>
 800c056:	2b1d      	cmp	r3, #29
 800c058:	d001      	beq.n	800c05e <__sflush_r+0xae>
 800c05a:	2b16      	cmp	r3, #22
 800c05c:	d101      	bne.n	800c062 <__sflush_r+0xb2>
 800c05e:	602f      	str	r7, [r5, #0]
 800c060:	e7b2      	b.n	800bfc8 <__sflush_r+0x18>
 800c062:	89a3      	ldrh	r3, [r4, #12]
 800c064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c068:	81a3      	strh	r3, [r4, #12]
 800c06a:	e7ae      	b.n	800bfca <__sflush_r+0x1a>
 800c06c:	690f      	ldr	r7, [r1, #16]
 800c06e:	2f00      	cmp	r7, #0
 800c070:	d0aa      	beq.n	800bfc8 <__sflush_r+0x18>
 800c072:	0793      	lsls	r3, r2, #30
 800c074:	680e      	ldr	r6, [r1, #0]
 800c076:	bf08      	it	eq
 800c078:	694b      	ldreq	r3, [r1, #20]
 800c07a:	600f      	str	r7, [r1, #0]
 800c07c:	bf18      	it	ne
 800c07e:	2300      	movne	r3, #0
 800c080:	1bf6      	subs	r6, r6, r7
 800c082:	608b      	str	r3, [r1, #8]
 800c084:	2e00      	cmp	r6, #0
 800c086:	dd9f      	ble.n	800bfc8 <__sflush_r+0x18>
 800c088:	6a21      	ldr	r1, [r4, #32]
 800c08a:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800c08e:	4633      	mov	r3, r6
 800c090:	463a      	mov	r2, r7
 800c092:	4628      	mov	r0, r5
 800c094:	47e0      	blx	ip
 800c096:	2800      	cmp	r0, #0
 800c098:	dc06      	bgt.n	800c0a8 <__sflush_r+0xf8>
 800c09a:	89a3      	ldrh	r3, [r4, #12]
 800c09c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0a0:	81a3      	strh	r3, [r4, #12]
 800c0a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c0a6:	e790      	b.n	800bfca <__sflush_r+0x1a>
 800c0a8:	4407      	add	r7, r0
 800c0aa:	1a36      	subs	r6, r6, r0
 800c0ac:	e7ea      	b.n	800c084 <__sflush_r+0xd4>
 800c0ae:	bf00      	nop
 800c0b0:	20400001 	.word	0x20400001

0800c0b4 <_fflush_r>:
 800c0b4:	b538      	push	{r3, r4, r5, lr}
 800c0b6:	690b      	ldr	r3, [r1, #16]
 800c0b8:	4605      	mov	r5, r0
 800c0ba:	460c      	mov	r4, r1
 800c0bc:	b913      	cbnz	r3, 800c0c4 <_fflush_r+0x10>
 800c0be:	2500      	movs	r5, #0
 800c0c0:	4628      	mov	r0, r5
 800c0c2:	bd38      	pop	{r3, r4, r5, pc}
 800c0c4:	b118      	cbz	r0, 800c0ce <_fflush_r+0x1a>
 800c0c6:	6983      	ldr	r3, [r0, #24]
 800c0c8:	b90b      	cbnz	r3, 800c0ce <_fflush_r+0x1a>
 800c0ca:	f000 f887 	bl	800c1dc <__sinit>
 800c0ce:	4b14      	ldr	r3, [pc, #80]	; (800c120 <_fflush_r+0x6c>)
 800c0d0:	429c      	cmp	r4, r3
 800c0d2:	d11b      	bne.n	800c10c <_fflush_r+0x58>
 800c0d4:	686c      	ldr	r4, [r5, #4]
 800c0d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d0ef      	beq.n	800c0be <_fflush_r+0xa>
 800c0de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c0e0:	07d0      	lsls	r0, r2, #31
 800c0e2:	d404      	bmi.n	800c0ee <_fflush_r+0x3a>
 800c0e4:	0599      	lsls	r1, r3, #22
 800c0e6:	d402      	bmi.n	800c0ee <_fflush_r+0x3a>
 800c0e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0ea:	f000 f915 	bl	800c318 <__retarget_lock_acquire_recursive>
 800c0ee:	4628      	mov	r0, r5
 800c0f0:	4621      	mov	r1, r4
 800c0f2:	f7ff ff5d 	bl	800bfb0 <__sflush_r>
 800c0f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c0f8:	07da      	lsls	r2, r3, #31
 800c0fa:	4605      	mov	r5, r0
 800c0fc:	d4e0      	bmi.n	800c0c0 <_fflush_r+0xc>
 800c0fe:	89a3      	ldrh	r3, [r4, #12]
 800c100:	059b      	lsls	r3, r3, #22
 800c102:	d4dd      	bmi.n	800c0c0 <_fflush_r+0xc>
 800c104:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c106:	f000 f908 	bl	800c31a <__retarget_lock_release_recursive>
 800c10a:	e7d9      	b.n	800c0c0 <_fflush_r+0xc>
 800c10c:	4b05      	ldr	r3, [pc, #20]	; (800c124 <_fflush_r+0x70>)
 800c10e:	429c      	cmp	r4, r3
 800c110:	d101      	bne.n	800c116 <_fflush_r+0x62>
 800c112:	68ac      	ldr	r4, [r5, #8]
 800c114:	e7df      	b.n	800c0d6 <_fflush_r+0x22>
 800c116:	4b04      	ldr	r3, [pc, #16]	; (800c128 <_fflush_r+0x74>)
 800c118:	429c      	cmp	r4, r3
 800c11a:	bf08      	it	eq
 800c11c:	68ec      	ldreq	r4, [r5, #12]
 800c11e:	e7da      	b.n	800c0d6 <_fflush_r+0x22>
 800c120:	0800ded4 	.word	0x0800ded4
 800c124:	0800def4 	.word	0x0800def4
 800c128:	0800deb4 	.word	0x0800deb4

0800c12c <std>:
 800c12c:	2300      	movs	r3, #0
 800c12e:	b510      	push	{r4, lr}
 800c130:	4604      	mov	r4, r0
 800c132:	e9c0 3300 	strd	r3, r3, [r0]
 800c136:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c13a:	6083      	str	r3, [r0, #8]
 800c13c:	8181      	strh	r1, [r0, #12]
 800c13e:	6643      	str	r3, [r0, #100]	; 0x64
 800c140:	81c2      	strh	r2, [r0, #14]
 800c142:	6183      	str	r3, [r0, #24]
 800c144:	4619      	mov	r1, r3
 800c146:	2208      	movs	r2, #8
 800c148:	305c      	adds	r0, #92	; 0x5c
 800c14a:	f7ff f82f 	bl	800b1ac <memset>
 800c14e:	4b05      	ldr	r3, [pc, #20]	; (800c164 <std+0x38>)
 800c150:	6263      	str	r3, [r4, #36]	; 0x24
 800c152:	4b05      	ldr	r3, [pc, #20]	; (800c168 <std+0x3c>)
 800c154:	62a3      	str	r3, [r4, #40]	; 0x28
 800c156:	4b05      	ldr	r3, [pc, #20]	; (800c16c <std+0x40>)
 800c158:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c15a:	4b05      	ldr	r3, [pc, #20]	; (800c170 <std+0x44>)
 800c15c:	6224      	str	r4, [r4, #32]
 800c15e:	6323      	str	r3, [r4, #48]	; 0x30
 800c160:	bd10      	pop	{r4, pc}
 800c162:	bf00      	nop
 800c164:	0800c51d 	.word	0x0800c51d
 800c168:	0800c53f 	.word	0x0800c53f
 800c16c:	0800c577 	.word	0x0800c577
 800c170:	0800c59b 	.word	0x0800c59b

0800c174 <_cleanup_r>:
 800c174:	4901      	ldr	r1, [pc, #4]	; (800c17c <_cleanup_r+0x8>)
 800c176:	f000 b8af 	b.w	800c2d8 <_fwalk_reent>
 800c17a:	bf00      	nop
 800c17c:	0800c0b5 	.word	0x0800c0b5

0800c180 <__sfmoreglue>:
 800c180:	b570      	push	{r4, r5, r6, lr}
 800c182:	2268      	movs	r2, #104	; 0x68
 800c184:	1e4d      	subs	r5, r1, #1
 800c186:	4355      	muls	r5, r2
 800c188:	460e      	mov	r6, r1
 800c18a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c18e:	f7ff f97b 	bl	800b488 <_malloc_r>
 800c192:	4604      	mov	r4, r0
 800c194:	b140      	cbz	r0, 800c1a8 <__sfmoreglue+0x28>
 800c196:	2100      	movs	r1, #0
 800c198:	e9c0 1600 	strd	r1, r6, [r0]
 800c19c:	300c      	adds	r0, #12
 800c19e:	60a0      	str	r0, [r4, #8]
 800c1a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c1a4:	f7ff f802 	bl	800b1ac <memset>
 800c1a8:	4620      	mov	r0, r4
 800c1aa:	bd70      	pop	{r4, r5, r6, pc}

0800c1ac <__sfp_lock_acquire>:
 800c1ac:	4801      	ldr	r0, [pc, #4]	; (800c1b4 <__sfp_lock_acquire+0x8>)
 800c1ae:	f000 b8b3 	b.w	800c318 <__retarget_lock_acquire_recursive>
 800c1b2:	bf00      	nop
 800c1b4:	20001509 	.word	0x20001509

0800c1b8 <__sfp_lock_release>:
 800c1b8:	4801      	ldr	r0, [pc, #4]	; (800c1c0 <__sfp_lock_release+0x8>)
 800c1ba:	f000 b8ae 	b.w	800c31a <__retarget_lock_release_recursive>
 800c1be:	bf00      	nop
 800c1c0:	20001509 	.word	0x20001509

0800c1c4 <__sinit_lock_acquire>:
 800c1c4:	4801      	ldr	r0, [pc, #4]	; (800c1cc <__sinit_lock_acquire+0x8>)
 800c1c6:	f000 b8a7 	b.w	800c318 <__retarget_lock_acquire_recursive>
 800c1ca:	bf00      	nop
 800c1cc:	2000150a 	.word	0x2000150a

0800c1d0 <__sinit_lock_release>:
 800c1d0:	4801      	ldr	r0, [pc, #4]	; (800c1d8 <__sinit_lock_release+0x8>)
 800c1d2:	f000 b8a2 	b.w	800c31a <__retarget_lock_release_recursive>
 800c1d6:	bf00      	nop
 800c1d8:	2000150a 	.word	0x2000150a

0800c1dc <__sinit>:
 800c1dc:	b510      	push	{r4, lr}
 800c1de:	4604      	mov	r4, r0
 800c1e0:	f7ff fff0 	bl	800c1c4 <__sinit_lock_acquire>
 800c1e4:	69a3      	ldr	r3, [r4, #24]
 800c1e6:	b11b      	cbz	r3, 800c1f0 <__sinit+0x14>
 800c1e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1ec:	f7ff bff0 	b.w	800c1d0 <__sinit_lock_release>
 800c1f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c1f4:	6523      	str	r3, [r4, #80]	; 0x50
 800c1f6:	4b13      	ldr	r3, [pc, #76]	; (800c244 <__sinit+0x68>)
 800c1f8:	4a13      	ldr	r2, [pc, #76]	; (800c248 <__sinit+0x6c>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	62a2      	str	r2, [r4, #40]	; 0x28
 800c1fe:	42a3      	cmp	r3, r4
 800c200:	bf04      	itt	eq
 800c202:	2301      	moveq	r3, #1
 800c204:	61a3      	streq	r3, [r4, #24]
 800c206:	4620      	mov	r0, r4
 800c208:	f000 f820 	bl	800c24c <__sfp>
 800c20c:	6060      	str	r0, [r4, #4]
 800c20e:	4620      	mov	r0, r4
 800c210:	f000 f81c 	bl	800c24c <__sfp>
 800c214:	60a0      	str	r0, [r4, #8]
 800c216:	4620      	mov	r0, r4
 800c218:	f000 f818 	bl	800c24c <__sfp>
 800c21c:	2200      	movs	r2, #0
 800c21e:	60e0      	str	r0, [r4, #12]
 800c220:	2104      	movs	r1, #4
 800c222:	6860      	ldr	r0, [r4, #4]
 800c224:	f7ff ff82 	bl	800c12c <std>
 800c228:	68a0      	ldr	r0, [r4, #8]
 800c22a:	2201      	movs	r2, #1
 800c22c:	2109      	movs	r1, #9
 800c22e:	f7ff ff7d 	bl	800c12c <std>
 800c232:	68e0      	ldr	r0, [r4, #12]
 800c234:	2202      	movs	r2, #2
 800c236:	2112      	movs	r1, #18
 800c238:	f7ff ff78 	bl	800c12c <std>
 800c23c:	2301      	movs	r3, #1
 800c23e:	61a3      	str	r3, [r4, #24]
 800c240:	e7d2      	b.n	800c1e8 <__sinit+0xc>
 800c242:	bf00      	nop
 800c244:	0800ddcc 	.word	0x0800ddcc
 800c248:	0800c175 	.word	0x0800c175

0800c24c <__sfp>:
 800c24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c24e:	4607      	mov	r7, r0
 800c250:	f7ff ffac 	bl	800c1ac <__sfp_lock_acquire>
 800c254:	4b1e      	ldr	r3, [pc, #120]	; (800c2d0 <__sfp+0x84>)
 800c256:	681e      	ldr	r6, [r3, #0]
 800c258:	69b3      	ldr	r3, [r6, #24]
 800c25a:	b913      	cbnz	r3, 800c262 <__sfp+0x16>
 800c25c:	4630      	mov	r0, r6
 800c25e:	f7ff ffbd 	bl	800c1dc <__sinit>
 800c262:	3648      	adds	r6, #72	; 0x48
 800c264:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c268:	3b01      	subs	r3, #1
 800c26a:	d503      	bpl.n	800c274 <__sfp+0x28>
 800c26c:	6833      	ldr	r3, [r6, #0]
 800c26e:	b30b      	cbz	r3, 800c2b4 <__sfp+0x68>
 800c270:	6836      	ldr	r6, [r6, #0]
 800c272:	e7f7      	b.n	800c264 <__sfp+0x18>
 800c274:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c278:	b9d5      	cbnz	r5, 800c2b0 <__sfp+0x64>
 800c27a:	4b16      	ldr	r3, [pc, #88]	; (800c2d4 <__sfp+0x88>)
 800c27c:	60e3      	str	r3, [r4, #12]
 800c27e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c282:	6665      	str	r5, [r4, #100]	; 0x64
 800c284:	f000 f847 	bl	800c316 <__retarget_lock_init_recursive>
 800c288:	f7ff ff96 	bl	800c1b8 <__sfp_lock_release>
 800c28c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c290:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c294:	6025      	str	r5, [r4, #0]
 800c296:	61a5      	str	r5, [r4, #24]
 800c298:	2208      	movs	r2, #8
 800c29a:	4629      	mov	r1, r5
 800c29c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c2a0:	f7fe ff84 	bl	800b1ac <memset>
 800c2a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c2a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c2ac:	4620      	mov	r0, r4
 800c2ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2b0:	3468      	adds	r4, #104	; 0x68
 800c2b2:	e7d9      	b.n	800c268 <__sfp+0x1c>
 800c2b4:	2104      	movs	r1, #4
 800c2b6:	4638      	mov	r0, r7
 800c2b8:	f7ff ff62 	bl	800c180 <__sfmoreglue>
 800c2bc:	4604      	mov	r4, r0
 800c2be:	6030      	str	r0, [r6, #0]
 800c2c0:	2800      	cmp	r0, #0
 800c2c2:	d1d5      	bne.n	800c270 <__sfp+0x24>
 800c2c4:	f7ff ff78 	bl	800c1b8 <__sfp_lock_release>
 800c2c8:	230c      	movs	r3, #12
 800c2ca:	603b      	str	r3, [r7, #0]
 800c2cc:	e7ee      	b.n	800c2ac <__sfp+0x60>
 800c2ce:	bf00      	nop
 800c2d0:	0800ddcc 	.word	0x0800ddcc
 800c2d4:	ffff0001 	.word	0xffff0001

0800c2d8 <_fwalk_reent>:
 800c2d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2dc:	4606      	mov	r6, r0
 800c2de:	4688      	mov	r8, r1
 800c2e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c2e4:	2700      	movs	r7, #0
 800c2e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c2ea:	f1b9 0901 	subs.w	r9, r9, #1
 800c2ee:	d505      	bpl.n	800c2fc <_fwalk_reent+0x24>
 800c2f0:	6824      	ldr	r4, [r4, #0]
 800c2f2:	2c00      	cmp	r4, #0
 800c2f4:	d1f7      	bne.n	800c2e6 <_fwalk_reent+0xe>
 800c2f6:	4638      	mov	r0, r7
 800c2f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2fc:	89ab      	ldrh	r3, [r5, #12]
 800c2fe:	2b01      	cmp	r3, #1
 800c300:	d907      	bls.n	800c312 <_fwalk_reent+0x3a>
 800c302:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c306:	3301      	adds	r3, #1
 800c308:	d003      	beq.n	800c312 <_fwalk_reent+0x3a>
 800c30a:	4629      	mov	r1, r5
 800c30c:	4630      	mov	r0, r6
 800c30e:	47c0      	blx	r8
 800c310:	4307      	orrs	r7, r0
 800c312:	3568      	adds	r5, #104	; 0x68
 800c314:	e7e9      	b.n	800c2ea <_fwalk_reent+0x12>

0800c316 <__retarget_lock_init_recursive>:
 800c316:	4770      	bx	lr

0800c318 <__retarget_lock_acquire_recursive>:
 800c318:	4770      	bx	lr

0800c31a <__retarget_lock_release_recursive>:
 800c31a:	4770      	bx	lr

0800c31c <__swhatbuf_r>:
 800c31c:	b570      	push	{r4, r5, r6, lr}
 800c31e:	460e      	mov	r6, r1
 800c320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c324:	2900      	cmp	r1, #0
 800c326:	b096      	sub	sp, #88	; 0x58
 800c328:	4614      	mov	r4, r2
 800c32a:	461d      	mov	r5, r3
 800c32c:	da08      	bge.n	800c340 <__swhatbuf_r+0x24>
 800c32e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c332:	2200      	movs	r2, #0
 800c334:	602a      	str	r2, [r5, #0]
 800c336:	061a      	lsls	r2, r3, #24
 800c338:	d410      	bmi.n	800c35c <__swhatbuf_r+0x40>
 800c33a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c33e:	e00e      	b.n	800c35e <__swhatbuf_r+0x42>
 800c340:	466a      	mov	r2, sp
 800c342:	f000 f951 	bl	800c5e8 <_fstat_r>
 800c346:	2800      	cmp	r0, #0
 800c348:	dbf1      	blt.n	800c32e <__swhatbuf_r+0x12>
 800c34a:	9a01      	ldr	r2, [sp, #4]
 800c34c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c350:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c354:	425a      	negs	r2, r3
 800c356:	415a      	adcs	r2, r3
 800c358:	602a      	str	r2, [r5, #0]
 800c35a:	e7ee      	b.n	800c33a <__swhatbuf_r+0x1e>
 800c35c:	2340      	movs	r3, #64	; 0x40
 800c35e:	2000      	movs	r0, #0
 800c360:	6023      	str	r3, [r4, #0]
 800c362:	b016      	add	sp, #88	; 0x58
 800c364:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c368 <__smakebuf_r>:
 800c368:	898b      	ldrh	r3, [r1, #12]
 800c36a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c36c:	079d      	lsls	r5, r3, #30
 800c36e:	4606      	mov	r6, r0
 800c370:	460c      	mov	r4, r1
 800c372:	d507      	bpl.n	800c384 <__smakebuf_r+0x1c>
 800c374:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c378:	6023      	str	r3, [r4, #0]
 800c37a:	6123      	str	r3, [r4, #16]
 800c37c:	2301      	movs	r3, #1
 800c37e:	6163      	str	r3, [r4, #20]
 800c380:	b002      	add	sp, #8
 800c382:	bd70      	pop	{r4, r5, r6, pc}
 800c384:	ab01      	add	r3, sp, #4
 800c386:	466a      	mov	r2, sp
 800c388:	f7ff ffc8 	bl	800c31c <__swhatbuf_r>
 800c38c:	9900      	ldr	r1, [sp, #0]
 800c38e:	4605      	mov	r5, r0
 800c390:	4630      	mov	r0, r6
 800c392:	f7ff f879 	bl	800b488 <_malloc_r>
 800c396:	b948      	cbnz	r0, 800c3ac <__smakebuf_r+0x44>
 800c398:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c39c:	059a      	lsls	r2, r3, #22
 800c39e:	d4ef      	bmi.n	800c380 <__smakebuf_r+0x18>
 800c3a0:	f023 0303 	bic.w	r3, r3, #3
 800c3a4:	f043 0302 	orr.w	r3, r3, #2
 800c3a8:	81a3      	strh	r3, [r4, #12]
 800c3aa:	e7e3      	b.n	800c374 <__smakebuf_r+0xc>
 800c3ac:	4b0d      	ldr	r3, [pc, #52]	; (800c3e4 <__smakebuf_r+0x7c>)
 800c3ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800c3b0:	89a3      	ldrh	r3, [r4, #12]
 800c3b2:	6020      	str	r0, [r4, #0]
 800c3b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3b8:	81a3      	strh	r3, [r4, #12]
 800c3ba:	9b00      	ldr	r3, [sp, #0]
 800c3bc:	6163      	str	r3, [r4, #20]
 800c3be:	9b01      	ldr	r3, [sp, #4]
 800c3c0:	6120      	str	r0, [r4, #16]
 800c3c2:	b15b      	cbz	r3, 800c3dc <__smakebuf_r+0x74>
 800c3c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3c8:	4630      	mov	r0, r6
 800c3ca:	f000 f91f 	bl	800c60c <_isatty_r>
 800c3ce:	b128      	cbz	r0, 800c3dc <__smakebuf_r+0x74>
 800c3d0:	89a3      	ldrh	r3, [r4, #12]
 800c3d2:	f023 0303 	bic.w	r3, r3, #3
 800c3d6:	f043 0301 	orr.w	r3, r3, #1
 800c3da:	81a3      	strh	r3, [r4, #12]
 800c3dc:	89a0      	ldrh	r0, [r4, #12]
 800c3de:	4305      	orrs	r5, r0
 800c3e0:	81a5      	strh	r5, [r4, #12]
 800c3e2:	e7cd      	b.n	800c380 <__smakebuf_r+0x18>
 800c3e4:	0800c175 	.word	0x0800c175

0800c3e8 <memmove>:
 800c3e8:	4288      	cmp	r0, r1
 800c3ea:	b510      	push	{r4, lr}
 800c3ec:	eb01 0402 	add.w	r4, r1, r2
 800c3f0:	d902      	bls.n	800c3f8 <memmove+0x10>
 800c3f2:	4284      	cmp	r4, r0
 800c3f4:	4623      	mov	r3, r4
 800c3f6:	d807      	bhi.n	800c408 <memmove+0x20>
 800c3f8:	1e43      	subs	r3, r0, #1
 800c3fa:	42a1      	cmp	r1, r4
 800c3fc:	d008      	beq.n	800c410 <memmove+0x28>
 800c3fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c402:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c406:	e7f8      	b.n	800c3fa <memmove+0x12>
 800c408:	4402      	add	r2, r0
 800c40a:	4601      	mov	r1, r0
 800c40c:	428a      	cmp	r2, r1
 800c40e:	d100      	bne.n	800c412 <memmove+0x2a>
 800c410:	bd10      	pop	{r4, pc}
 800c412:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c416:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c41a:	e7f7      	b.n	800c40c <memmove+0x24>

0800c41c <__malloc_lock>:
 800c41c:	4801      	ldr	r0, [pc, #4]	; (800c424 <__malloc_lock+0x8>)
 800c41e:	f7ff bf7b 	b.w	800c318 <__retarget_lock_acquire_recursive>
 800c422:	bf00      	nop
 800c424:	20001508 	.word	0x20001508

0800c428 <__malloc_unlock>:
 800c428:	4801      	ldr	r0, [pc, #4]	; (800c430 <__malloc_unlock+0x8>)
 800c42a:	f7ff bf76 	b.w	800c31a <__retarget_lock_release_recursive>
 800c42e:	bf00      	nop
 800c430:	20001508 	.word	0x20001508

0800c434 <_realloc_r>:
 800c434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c438:	4680      	mov	r8, r0
 800c43a:	4614      	mov	r4, r2
 800c43c:	460e      	mov	r6, r1
 800c43e:	b921      	cbnz	r1, 800c44a <_realloc_r+0x16>
 800c440:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c444:	4611      	mov	r1, r2
 800c446:	f7ff b81f 	b.w	800b488 <_malloc_r>
 800c44a:	b92a      	cbnz	r2, 800c458 <_realloc_r+0x24>
 800c44c:	f7fe ffb2 	bl	800b3b4 <_free_r>
 800c450:	4625      	mov	r5, r4
 800c452:	4628      	mov	r0, r5
 800c454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c458:	f000 f8fa 	bl	800c650 <_malloc_usable_size_r>
 800c45c:	4284      	cmp	r4, r0
 800c45e:	4607      	mov	r7, r0
 800c460:	d802      	bhi.n	800c468 <_realloc_r+0x34>
 800c462:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c466:	d812      	bhi.n	800c48e <_realloc_r+0x5a>
 800c468:	4621      	mov	r1, r4
 800c46a:	4640      	mov	r0, r8
 800c46c:	f7ff f80c 	bl	800b488 <_malloc_r>
 800c470:	4605      	mov	r5, r0
 800c472:	2800      	cmp	r0, #0
 800c474:	d0ed      	beq.n	800c452 <_realloc_r+0x1e>
 800c476:	42bc      	cmp	r4, r7
 800c478:	4622      	mov	r2, r4
 800c47a:	4631      	mov	r1, r6
 800c47c:	bf28      	it	cs
 800c47e:	463a      	movcs	r2, r7
 800c480:	f7fe fe86 	bl	800b190 <memcpy>
 800c484:	4631      	mov	r1, r6
 800c486:	4640      	mov	r0, r8
 800c488:	f7fe ff94 	bl	800b3b4 <_free_r>
 800c48c:	e7e1      	b.n	800c452 <_realloc_r+0x1e>
 800c48e:	4635      	mov	r5, r6
 800c490:	e7df      	b.n	800c452 <_realloc_r+0x1e>

0800c492 <_raise_r>:
 800c492:	291f      	cmp	r1, #31
 800c494:	b538      	push	{r3, r4, r5, lr}
 800c496:	4604      	mov	r4, r0
 800c498:	460d      	mov	r5, r1
 800c49a:	d904      	bls.n	800c4a6 <_raise_r+0x14>
 800c49c:	2316      	movs	r3, #22
 800c49e:	6003      	str	r3, [r0, #0]
 800c4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4a4:	bd38      	pop	{r3, r4, r5, pc}
 800c4a6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c4a8:	b112      	cbz	r2, 800c4b0 <_raise_r+0x1e>
 800c4aa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c4ae:	b94b      	cbnz	r3, 800c4c4 <_raise_r+0x32>
 800c4b0:	4620      	mov	r0, r4
 800c4b2:	f000 f831 	bl	800c518 <_getpid_r>
 800c4b6:	462a      	mov	r2, r5
 800c4b8:	4601      	mov	r1, r0
 800c4ba:	4620      	mov	r0, r4
 800c4bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4c0:	f000 b818 	b.w	800c4f4 <_kill_r>
 800c4c4:	2b01      	cmp	r3, #1
 800c4c6:	d00a      	beq.n	800c4de <_raise_r+0x4c>
 800c4c8:	1c59      	adds	r1, r3, #1
 800c4ca:	d103      	bne.n	800c4d4 <_raise_r+0x42>
 800c4cc:	2316      	movs	r3, #22
 800c4ce:	6003      	str	r3, [r0, #0]
 800c4d0:	2001      	movs	r0, #1
 800c4d2:	e7e7      	b.n	800c4a4 <_raise_r+0x12>
 800c4d4:	2400      	movs	r4, #0
 800c4d6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c4da:	4628      	mov	r0, r5
 800c4dc:	4798      	blx	r3
 800c4de:	2000      	movs	r0, #0
 800c4e0:	e7e0      	b.n	800c4a4 <_raise_r+0x12>
	...

0800c4e4 <raise>:
 800c4e4:	4b02      	ldr	r3, [pc, #8]	; (800c4f0 <raise+0xc>)
 800c4e6:	4601      	mov	r1, r0
 800c4e8:	6818      	ldr	r0, [r3, #0]
 800c4ea:	f7ff bfd2 	b.w	800c492 <_raise_r>
 800c4ee:	bf00      	nop
 800c4f0:	20000010 	.word	0x20000010

0800c4f4 <_kill_r>:
 800c4f4:	b538      	push	{r3, r4, r5, lr}
 800c4f6:	4d07      	ldr	r5, [pc, #28]	; (800c514 <_kill_r+0x20>)
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	4604      	mov	r4, r0
 800c4fc:	4608      	mov	r0, r1
 800c4fe:	4611      	mov	r1, r2
 800c500:	602b      	str	r3, [r5, #0]
 800c502:	f7f5 ff04 	bl	800230e <_kill>
 800c506:	1c43      	adds	r3, r0, #1
 800c508:	d102      	bne.n	800c510 <_kill_r+0x1c>
 800c50a:	682b      	ldr	r3, [r5, #0]
 800c50c:	b103      	cbz	r3, 800c510 <_kill_r+0x1c>
 800c50e:	6023      	str	r3, [r4, #0]
 800c510:	bd38      	pop	{r3, r4, r5, pc}
 800c512:	bf00      	nop
 800c514:	2000150c 	.word	0x2000150c

0800c518 <_getpid_r>:
 800c518:	f7f5 bef2 	b.w	8002300 <_getpid>

0800c51c <__sread>:
 800c51c:	b510      	push	{r4, lr}
 800c51e:	460c      	mov	r4, r1
 800c520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c524:	f000 f89c 	bl	800c660 <_read_r>
 800c528:	2800      	cmp	r0, #0
 800c52a:	bfab      	itete	ge
 800c52c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c52e:	89a3      	ldrhlt	r3, [r4, #12]
 800c530:	181b      	addge	r3, r3, r0
 800c532:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c536:	bfac      	ite	ge
 800c538:	6563      	strge	r3, [r4, #84]	; 0x54
 800c53a:	81a3      	strhlt	r3, [r4, #12]
 800c53c:	bd10      	pop	{r4, pc}

0800c53e <__swrite>:
 800c53e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c542:	461f      	mov	r7, r3
 800c544:	898b      	ldrh	r3, [r1, #12]
 800c546:	05db      	lsls	r3, r3, #23
 800c548:	4605      	mov	r5, r0
 800c54a:	460c      	mov	r4, r1
 800c54c:	4616      	mov	r6, r2
 800c54e:	d505      	bpl.n	800c55c <__swrite+0x1e>
 800c550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c554:	2302      	movs	r3, #2
 800c556:	2200      	movs	r2, #0
 800c558:	f000 f868 	bl	800c62c <_lseek_r>
 800c55c:	89a3      	ldrh	r3, [r4, #12]
 800c55e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c562:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c566:	81a3      	strh	r3, [r4, #12]
 800c568:	4632      	mov	r2, r6
 800c56a:	463b      	mov	r3, r7
 800c56c:	4628      	mov	r0, r5
 800c56e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c572:	f000 b817 	b.w	800c5a4 <_write_r>

0800c576 <__sseek>:
 800c576:	b510      	push	{r4, lr}
 800c578:	460c      	mov	r4, r1
 800c57a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c57e:	f000 f855 	bl	800c62c <_lseek_r>
 800c582:	1c43      	adds	r3, r0, #1
 800c584:	89a3      	ldrh	r3, [r4, #12]
 800c586:	bf15      	itete	ne
 800c588:	6560      	strne	r0, [r4, #84]	; 0x54
 800c58a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c58e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c592:	81a3      	strheq	r3, [r4, #12]
 800c594:	bf18      	it	ne
 800c596:	81a3      	strhne	r3, [r4, #12]
 800c598:	bd10      	pop	{r4, pc}

0800c59a <__sclose>:
 800c59a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c59e:	f000 b813 	b.w	800c5c8 <_close_r>
	...

0800c5a4 <_write_r>:
 800c5a4:	b538      	push	{r3, r4, r5, lr}
 800c5a6:	4d07      	ldr	r5, [pc, #28]	; (800c5c4 <_write_r+0x20>)
 800c5a8:	4604      	mov	r4, r0
 800c5aa:	4608      	mov	r0, r1
 800c5ac:	4611      	mov	r1, r2
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	602a      	str	r2, [r5, #0]
 800c5b2:	461a      	mov	r2, r3
 800c5b4:	f7f5 fee2 	bl	800237c <_write>
 800c5b8:	1c43      	adds	r3, r0, #1
 800c5ba:	d102      	bne.n	800c5c2 <_write_r+0x1e>
 800c5bc:	682b      	ldr	r3, [r5, #0]
 800c5be:	b103      	cbz	r3, 800c5c2 <_write_r+0x1e>
 800c5c0:	6023      	str	r3, [r4, #0]
 800c5c2:	bd38      	pop	{r3, r4, r5, pc}
 800c5c4:	2000150c 	.word	0x2000150c

0800c5c8 <_close_r>:
 800c5c8:	b538      	push	{r3, r4, r5, lr}
 800c5ca:	4d06      	ldr	r5, [pc, #24]	; (800c5e4 <_close_r+0x1c>)
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	4604      	mov	r4, r0
 800c5d0:	4608      	mov	r0, r1
 800c5d2:	602b      	str	r3, [r5, #0]
 800c5d4:	f7f5 feee 	bl	80023b4 <_close>
 800c5d8:	1c43      	adds	r3, r0, #1
 800c5da:	d102      	bne.n	800c5e2 <_close_r+0x1a>
 800c5dc:	682b      	ldr	r3, [r5, #0]
 800c5de:	b103      	cbz	r3, 800c5e2 <_close_r+0x1a>
 800c5e0:	6023      	str	r3, [r4, #0]
 800c5e2:	bd38      	pop	{r3, r4, r5, pc}
 800c5e4:	2000150c 	.word	0x2000150c

0800c5e8 <_fstat_r>:
 800c5e8:	b538      	push	{r3, r4, r5, lr}
 800c5ea:	4d07      	ldr	r5, [pc, #28]	; (800c608 <_fstat_r+0x20>)
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	4604      	mov	r4, r0
 800c5f0:	4608      	mov	r0, r1
 800c5f2:	4611      	mov	r1, r2
 800c5f4:	602b      	str	r3, [r5, #0]
 800c5f6:	f7f5 fee8 	bl	80023ca <_fstat>
 800c5fa:	1c43      	adds	r3, r0, #1
 800c5fc:	d102      	bne.n	800c604 <_fstat_r+0x1c>
 800c5fe:	682b      	ldr	r3, [r5, #0]
 800c600:	b103      	cbz	r3, 800c604 <_fstat_r+0x1c>
 800c602:	6023      	str	r3, [r4, #0]
 800c604:	bd38      	pop	{r3, r4, r5, pc}
 800c606:	bf00      	nop
 800c608:	2000150c 	.word	0x2000150c

0800c60c <_isatty_r>:
 800c60c:	b538      	push	{r3, r4, r5, lr}
 800c60e:	4d06      	ldr	r5, [pc, #24]	; (800c628 <_isatty_r+0x1c>)
 800c610:	2300      	movs	r3, #0
 800c612:	4604      	mov	r4, r0
 800c614:	4608      	mov	r0, r1
 800c616:	602b      	str	r3, [r5, #0]
 800c618:	f7f5 fee6 	bl	80023e8 <_isatty>
 800c61c:	1c43      	adds	r3, r0, #1
 800c61e:	d102      	bne.n	800c626 <_isatty_r+0x1a>
 800c620:	682b      	ldr	r3, [r5, #0]
 800c622:	b103      	cbz	r3, 800c626 <_isatty_r+0x1a>
 800c624:	6023      	str	r3, [r4, #0]
 800c626:	bd38      	pop	{r3, r4, r5, pc}
 800c628:	2000150c 	.word	0x2000150c

0800c62c <_lseek_r>:
 800c62c:	b538      	push	{r3, r4, r5, lr}
 800c62e:	4d07      	ldr	r5, [pc, #28]	; (800c64c <_lseek_r+0x20>)
 800c630:	4604      	mov	r4, r0
 800c632:	4608      	mov	r0, r1
 800c634:	4611      	mov	r1, r2
 800c636:	2200      	movs	r2, #0
 800c638:	602a      	str	r2, [r5, #0]
 800c63a:	461a      	mov	r2, r3
 800c63c:	f7f5 fede 	bl	80023fc <_lseek>
 800c640:	1c43      	adds	r3, r0, #1
 800c642:	d102      	bne.n	800c64a <_lseek_r+0x1e>
 800c644:	682b      	ldr	r3, [r5, #0]
 800c646:	b103      	cbz	r3, 800c64a <_lseek_r+0x1e>
 800c648:	6023      	str	r3, [r4, #0]
 800c64a:	bd38      	pop	{r3, r4, r5, pc}
 800c64c:	2000150c 	.word	0x2000150c

0800c650 <_malloc_usable_size_r>:
 800c650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c654:	1f18      	subs	r0, r3, #4
 800c656:	2b00      	cmp	r3, #0
 800c658:	bfbc      	itt	lt
 800c65a:	580b      	ldrlt	r3, [r1, r0]
 800c65c:	18c0      	addlt	r0, r0, r3
 800c65e:	4770      	bx	lr

0800c660 <_read_r>:
 800c660:	b538      	push	{r3, r4, r5, lr}
 800c662:	4d07      	ldr	r5, [pc, #28]	; (800c680 <_read_r+0x20>)
 800c664:	4604      	mov	r4, r0
 800c666:	4608      	mov	r0, r1
 800c668:	4611      	mov	r1, r2
 800c66a:	2200      	movs	r2, #0
 800c66c:	602a      	str	r2, [r5, #0]
 800c66e:	461a      	mov	r2, r3
 800c670:	f7f5 fe67 	bl	8002342 <_read>
 800c674:	1c43      	adds	r3, r0, #1
 800c676:	d102      	bne.n	800c67e <_read_r+0x1e>
 800c678:	682b      	ldr	r3, [r5, #0]
 800c67a:	b103      	cbz	r3, 800c67e <_read_r+0x1e>
 800c67c:	6023      	str	r3, [r4, #0]
 800c67e:	bd38      	pop	{r3, r4, r5, pc}
 800c680:	2000150c 	.word	0x2000150c

0800c684 <pow>:
 800c684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c688:	4614      	mov	r4, r2
 800c68a:	461d      	mov	r5, r3
 800c68c:	4680      	mov	r8, r0
 800c68e:	4689      	mov	r9, r1
 800c690:	f000 f862 	bl	800c758 <__ieee754_pow>
 800c694:	4622      	mov	r2, r4
 800c696:	4606      	mov	r6, r0
 800c698:	460f      	mov	r7, r1
 800c69a:	462b      	mov	r3, r5
 800c69c:	4620      	mov	r0, r4
 800c69e:	4629      	mov	r1, r5
 800c6a0:	f7f4 fa1c 	bl	8000adc <__aeabi_dcmpun>
 800c6a4:	bbc8      	cbnz	r0, 800c71a <pow+0x96>
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	4640      	mov	r0, r8
 800c6ac:	4649      	mov	r1, r9
 800c6ae:	f7f4 f9e3 	bl	8000a78 <__aeabi_dcmpeq>
 800c6b2:	b1b8      	cbz	r0, 800c6e4 <pow+0x60>
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	4620      	mov	r0, r4
 800c6ba:	4629      	mov	r1, r5
 800c6bc:	f7f4 f9dc 	bl	8000a78 <__aeabi_dcmpeq>
 800c6c0:	2800      	cmp	r0, #0
 800c6c2:	d141      	bne.n	800c748 <pow+0xc4>
 800c6c4:	4620      	mov	r0, r4
 800c6c6:	4629      	mov	r1, r5
 800c6c8:	f000 fe39 	bl	800d33e <finite>
 800c6cc:	b328      	cbz	r0, 800c71a <pow+0x96>
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	4620      	mov	r0, r4
 800c6d4:	4629      	mov	r1, r5
 800c6d6:	f7f4 f9d9 	bl	8000a8c <__aeabi_dcmplt>
 800c6da:	b1f0      	cbz	r0, 800c71a <pow+0x96>
 800c6dc:	f7fe fd2e 	bl	800b13c <__errno>
 800c6e0:	2322      	movs	r3, #34	; 0x22
 800c6e2:	e019      	b.n	800c718 <pow+0x94>
 800c6e4:	4630      	mov	r0, r6
 800c6e6:	4639      	mov	r1, r7
 800c6e8:	f000 fe29 	bl	800d33e <finite>
 800c6ec:	b9c8      	cbnz	r0, 800c722 <pow+0x9e>
 800c6ee:	4640      	mov	r0, r8
 800c6f0:	4649      	mov	r1, r9
 800c6f2:	f000 fe24 	bl	800d33e <finite>
 800c6f6:	b1a0      	cbz	r0, 800c722 <pow+0x9e>
 800c6f8:	4620      	mov	r0, r4
 800c6fa:	4629      	mov	r1, r5
 800c6fc:	f000 fe1f 	bl	800d33e <finite>
 800c700:	b178      	cbz	r0, 800c722 <pow+0x9e>
 800c702:	4632      	mov	r2, r6
 800c704:	463b      	mov	r3, r7
 800c706:	4630      	mov	r0, r6
 800c708:	4639      	mov	r1, r7
 800c70a:	f7f4 f9e7 	bl	8000adc <__aeabi_dcmpun>
 800c70e:	2800      	cmp	r0, #0
 800c710:	d0e4      	beq.n	800c6dc <pow+0x58>
 800c712:	f7fe fd13 	bl	800b13c <__errno>
 800c716:	2321      	movs	r3, #33	; 0x21
 800c718:	6003      	str	r3, [r0, #0]
 800c71a:	4630      	mov	r0, r6
 800c71c:	4639      	mov	r1, r7
 800c71e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c722:	2200      	movs	r2, #0
 800c724:	2300      	movs	r3, #0
 800c726:	4630      	mov	r0, r6
 800c728:	4639      	mov	r1, r7
 800c72a:	f7f4 f9a5 	bl	8000a78 <__aeabi_dcmpeq>
 800c72e:	2800      	cmp	r0, #0
 800c730:	d0f3      	beq.n	800c71a <pow+0x96>
 800c732:	4640      	mov	r0, r8
 800c734:	4649      	mov	r1, r9
 800c736:	f000 fe02 	bl	800d33e <finite>
 800c73a:	2800      	cmp	r0, #0
 800c73c:	d0ed      	beq.n	800c71a <pow+0x96>
 800c73e:	4620      	mov	r0, r4
 800c740:	4629      	mov	r1, r5
 800c742:	f000 fdfc 	bl	800d33e <finite>
 800c746:	e7c8      	b.n	800c6da <pow+0x56>
 800c748:	4f01      	ldr	r7, [pc, #4]	; (800c750 <pow+0xcc>)
 800c74a:	2600      	movs	r6, #0
 800c74c:	e7e5      	b.n	800c71a <pow+0x96>
 800c74e:	bf00      	nop
 800c750:	3ff00000 	.word	0x3ff00000
 800c754:	00000000 	.word	0x00000000

0800c758 <__ieee754_pow>:
 800c758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c75c:	b093      	sub	sp, #76	; 0x4c
 800c75e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c762:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800c766:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800c76a:	4689      	mov	r9, r1
 800c76c:	ea56 0102 	orrs.w	r1, r6, r2
 800c770:	4680      	mov	r8, r0
 800c772:	d111      	bne.n	800c798 <__ieee754_pow+0x40>
 800c774:	1803      	adds	r3, r0, r0
 800c776:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800c77a:	4152      	adcs	r2, r2
 800c77c:	4299      	cmp	r1, r3
 800c77e:	4b82      	ldr	r3, [pc, #520]	; (800c988 <__ieee754_pow+0x230>)
 800c780:	4193      	sbcs	r3, r2
 800c782:	f080 84b9 	bcs.w	800d0f8 <__ieee754_pow+0x9a0>
 800c786:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c78a:	4640      	mov	r0, r8
 800c78c:	4649      	mov	r1, r9
 800c78e:	f7f3 fd55 	bl	800023c <__adddf3>
 800c792:	4683      	mov	fp, r0
 800c794:	468c      	mov	ip, r1
 800c796:	e06f      	b.n	800c878 <__ieee754_pow+0x120>
 800c798:	4b7c      	ldr	r3, [pc, #496]	; (800c98c <__ieee754_pow+0x234>)
 800c79a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800c79e:	429c      	cmp	r4, r3
 800c7a0:	464d      	mov	r5, r9
 800c7a2:	4682      	mov	sl, r0
 800c7a4:	dc06      	bgt.n	800c7b4 <__ieee754_pow+0x5c>
 800c7a6:	d101      	bne.n	800c7ac <__ieee754_pow+0x54>
 800c7a8:	2800      	cmp	r0, #0
 800c7aa:	d1ec      	bne.n	800c786 <__ieee754_pow+0x2e>
 800c7ac:	429e      	cmp	r6, r3
 800c7ae:	dc01      	bgt.n	800c7b4 <__ieee754_pow+0x5c>
 800c7b0:	d10f      	bne.n	800c7d2 <__ieee754_pow+0x7a>
 800c7b2:	b172      	cbz	r2, 800c7d2 <__ieee754_pow+0x7a>
 800c7b4:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800c7b8:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800c7bc:	ea55 050a 	orrs.w	r5, r5, sl
 800c7c0:	d1e1      	bne.n	800c786 <__ieee754_pow+0x2e>
 800c7c2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c7c6:	18db      	adds	r3, r3, r3
 800c7c8:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800c7cc:	4152      	adcs	r2, r2
 800c7ce:	429d      	cmp	r5, r3
 800c7d0:	e7d5      	b.n	800c77e <__ieee754_pow+0x26>
 800c7d2:	2d00      	cmp	r5, #0
 800c7d4:	da39      	bge.n	800c84a <__ieee754_pow+0xf2>
 800c7d6:	4b6e      	ldr	r3, [pc, #440]	; (800c990 <__ieee754_pow+0x238>)
 800c7d8:	429e      	cmp	r6, r3
 800c7da:	dc52      	bgt.n	800c882 <__ieee754_pow+0x12a>
 800c7dc:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c7e0:	429e      	cmp	r6, r3
 800c7e2:	f340 849c 	ble.w	800d11e <__ieee754_pow+0x9c6>
 800c7e6:	1533      	asrs	r3, r6, #20
 800c7e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c7ec:	2b14      	cmp	r3, #20
 800c7ee:	dd0f      	ble.n	800c810 <__ieee754_pow+0xb8>
 800c7f0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c7f4:	fa22 f103 	lsr.w	r1, r2, r3
 800c7f8:	fa01 f303 	lsl.w	r3, r1, r3
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	f040 848e 	bne.w	800d11e <__ieee754_pow+0x9c6>
 800c802:	f001 0101 	and.w	r1, r1, #1
 800c806:	f1c1 0302 	rsb	r3, r1, #2
 800c80a:	9300      	str	r3, [sp, #0]
 800c80c:	b182      	cbz	r2, 800c830 <__ieee754_pow+0xd8>
 800c80e:	e05d      	b.n	800c8cc <__ieee754_pow+0x174>
 800c810:	2a00      	cmp	r2, #0
 800c812:	d159      	bne.n	800c8c8 <__ieee754_pow+0x170>
 800c814:	f1c3 0314 	rsb	r3, r3, #20
 800c818:	fa46 f103 	asr.w	r1, r6, r3
 800c81c:	fa01 f303 	lsl.w	r3, r1, r3
 800c820:	42b3      	cmp	r3, r6
 800c822:	f040 8479 	bne.w	800d118 <__ieee754_pow+0x9c0>
 800c826:	f001 0101 	and.w	r1, r1, #1
 800c82a:	f1c1 0302 	rsb	r3, r1, #2
 800c82e:	9300      	str	r3, [sp, #0]
 800c830:	4b58      	ldr	r3, [pc, #352]	; (800c994 <__ieee754_pow+0x23c>)
 800c832:	429e      	cmp	r6, r3
 800c834:	d132      	bne.n	800c89c <__ieee754_pow+0x144>
 800c836:	2f00      	cmp	r7, #0
 800c838:	f280 846a 	bge.w	800d110 <__ieee754_pow+0x9b8>
 800c83c:	4955      	ldr	r1, [pc, #340]	; (800c994 <__ieee754_pow+0x23c>)
 800c83e:	4642      	mov	r2, r8
 800c840:	464b      	mov	r3, r9
 800c842:	2000      	movs	r0, #0
 800c844:	f7f3 ffda 	bl	80007fc <__aeabi_ddiv>
 800c848:	e7a3      	b.n	800c792 <__ieee754_pow+0x3a>
 800c84a:	2300      	movs	r3, #0
 800c84c:	9300      	str	r3, [sp, #0]
 800c84e:	2a00      	cmp	r2, #0
 800c850:	d13c      	bne.n	800c8cc <__ieee754_pow+0x174>
 800c852:	4b4e      	ldr	r3, [pc, #312]	; (800c98c <__ieee754_pow+0x234>)
 800c854:	429e      	cmp	r6, r3
 800c856:	d1eb      	bne.n	800c830 <__ieee754_pow+0xd8>
 800c858:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c85c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c860:	ea53 030a 	orrs.w	r3, r3, sl
 800c864:	f000 8448 	beq.w	800d0f8 <__ieee754_pow+0x9a0>
 800c868:	4b4b      	ldr	r3, [pc, #300]	; (800c998 <__ieee754_pow+0x240>)
 800c86a:	429c      	cmp	r4, r3
 800c86c:	dd0b      	ble.n	800c886 <__ieee754_pow+0x12e>
 800c86e:	2f00      	cmp	r7, #0
 800c870:	f2c0 8448 	blt.w	800d104 <__ieee754_pow+0x9ac>
 800c874:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800c878:	4658      	mov	r0, fp
 800c87a:	4661      	mov	r1, ip
 800c87c:	b013      	add	sp, #76	; 0x4c
 800c87e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c882:	2302      	movs	r3, #2
 800c884:	e7e2      	b.n	800c84c <__ieee754_pow+0xf4>
 800c886:	2f00      	cmp	r7, #0
 800c888:	f04f 0b00 	mov.w	fp, #0
 800c88c:	f04f 0c00 	mov.w	ip, #0
 800c890:	daf2      	bge.n	800c878 <__ieee754_pow+0x120>
 800c892:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800c896:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800c89a:	e7ed      	b.n	800c878 <__ieee754_pow+0x120>
 800c89c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800c8a0:	d106      	bne.n	800c8b0 <__ieee754_pow+0x158>
 800c8a2:	4642      	mov	r2, r8
 800c8a4:	464b      	mov	r3, r9
 800c8a6:	4640      	mov	r0, r8
 800c8a8:	4649      	mov	r1, r9
 800c8aa:	f7f3 fe7d 	bl	80005a8 <__aeabi_dmul>
 800c8ae:	e770      	b.n	800c792 <__ieee754_pow+0x3a>
 800c8b0:	4b3a      	ldr	r3, [pc, #232]	; (800c99c <__ieee754_pow+0x244>)
 800c8b2:	429f      	cmp	r7, r3
 800c8b4:	d10a      	bne.n	800c8cc <__ieee754_pow+0x174>
 800c8b6:	2d00      	cmp	r5, #0
 800c8b8:	db08      	blt.n	800c8cc <__ieee754_pow+0x174>
 800c8ba:	4640      	mov	r0, r8
 800c8bc:	4649      	mov	r1, r9
 800c8be:	b013      	add	sp, #76	; 0x4c
 800c8c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8c4:	f000 bc5e 	b.w	800d184 <__ieee754_sqrt>
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	9300      	str	r3, [sp, #0]
 800c8cc:	4640      	mov	r0, r8
 800c8ce:	4649      	mov	r1, r9
 800c8d0:	f000 fd32 	bl	800d338 <fabs>
 800c8d4:	4683      	mov	fp, r0
 800c8d6:	468c      	mov	ip, r1
 800c8d8:	f1ba 0f00 	cmp.w	sl, #0
 800c8dc:	d128      	bne.n	800c930 <__ieee754_pow+0x1d8>
 800c8de:	b124      	cbz	r4, 800c8ea <__ieee754_pow+0x192>
 800c8e0:	4b2c      	ldr	r3, [pc, #176]	; (800c994 <__ieee754_pow+0x23c>)
 800c8e2:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	d122      	bne.n	800c930 <__ieee754_pow+0x1d8>
 800c8ea:	2f00      	cmp	r7, #0
 800c8ec:	da07      	bge.n	800c8fe <__ieee754_pow+0x1a6>
 800c8ee:	465a      	mov	r2, fp
 800c8f0:	4663      	mov	r3, ip
 800c8f2:	4928      	ldr	r1, [pc, #160]	; (800c994 <__ieee754_pow+0x23c>)
 800c8f4:	2000      	movs	r0, #0
 800c8f6:	f7f3 ff81 	bl	80007fc <__aeabi_ddiv>
 800c8fa:	4683      	mov	fp, r0
 800c8fc:	468c      	mov	ip, r1
 800c8fe:	2d00      	cmp	r5, #0
 800c900:	daba      	bge.n	800c878 <__ieee754_pow+0x120>
 800c902:	9b00      	ldr	r3, [sp, #0]
 800c904:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c908:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c90c:	4323      	orrs	r3, r4
 800c90e:	d108      	bne.n	800c922 <__ieee754_pow+0x1ca>
 800c910:	465a      	mov	r2, fp
 800c912:	4663      	mov	r3, ip
 800c914:	4658      	mov	r0, fp
 800c916:	4661      	mov	r1, ip
 800c918:	f7f3 fc8e 	bl	8000238 <__aeabi_dsub>
 800c91c:	4602      	mov	r2, r0
 800c91e:	460b      	mov	r3, r1
 800c920:	e790      	b.n	800c844 <__ieee754_pow+0xec>
 800c922:	9b00      	ldr	r3, [sp, #0]
 800c924:	2b01      	cmp	r3, #1
 800c926:	d1a7      	bne.n	800c878 <__ieee754_pow+0x120>
 800c928:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800c92c:	469c      	mov	ip, r3
 800c92e:	e7a3      	b.n	800c878 <__ieee754_pow+0x120>
 800c930:	0feb      	lsrs	r3, r5, #31
 800c932:	3b01      	subs	r3, #1
 800c934:	930c      	str	r3, [sp, #48]	; 0x30
 800c936:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c938:	9b00      	ldr	r3, [sp, #0]
 800c93a:	4313      	orrs	r3, r2
 800c93c:	d104      	bne.n	800c948 <__ieee754_pow+0x1f0>
 800c93e:	4642      	mov	r2, r8
 800c940:	464b      	mov	r3, r9
 800c942:	4640      	mov	r0, r8
 800c944:	4649      	mov	r1, r9
 800c946:	e7e7      	b.n	800c918 <__ieee754_pow+0x1c0>
 800c948:	4b15      	ldr	r3, [pc, #84]	; (800c9a0 <__ieee754_pow+0x248>)
 800c94a:	429e      	cmp	r6, r3
 800c94c:	f340 80f6 	ble.w	800cb3c <__ieee754_pow+0x3e4>
 800c950:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c954:	429e      	cmp	r6, r3
 800c956:	4b10      	ldr	r3, [pc, #64]	; (800c998 <__ieee754_pow+0x240>)
 800c958:	dd09      	ble.n	800c96e <__ieee754_pow+0x216>
 800c95a:	429c      	cmp	r4, r3
 800c95c:	dc0c      	bgt.n	800c978 <__ieee754_pow+0x220>
 800c95e:	2f00      	cmp	r7, #0
 800c960:	da0c      	bge.n	800c97c <__ieee754_pow+0x224>
 800c962:	2000      	movs	r0, #0
 800c964:	b013      	add	sp, #76	; 0x4c
 800c966:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c96a:	f000 bce0 	b.w	800d32e <__math_oflow>
 800c96e:	429c      	cmp	r4, r3
 800c970:	dbf5      	blt.n	800c95e <__ieee754_pow+0x206>
 800c972:	4b08      	ldr	r3, [pc, #32]	; (800c994 <__ieee754_pow+0x23c>)
 800c974:	429c      	cmp	r4, r3
 800c976:	dd15      	ble.n	800c9a4 <__ieee754_pow+0x24c>
 800c978:	2f00      	cmp	r7, #0
 800c97a:	dcf2      	bgt.n	800c962 <__ieee754_pow+0x20a>
 800c97c:	2000      	movs	r0, #0
 800c97e:	b013      	add	sp, #76	; 0x4c
 800c980:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c984:	f000 bcce 	b.w	800d324 <__math_uflow>
 800c988:	fff00000 	.word	0xfff00000
 800c98c:	7ff00000 	.word	0x7ff00000
 800c990:	433fffff 	.word	0x433fffff
 800c994:	3ff00000 	.word	0x3ff00000
 800c998:	3fefffff 	.word	0x3fefffff
 800c99c:	3fe00000 	.word	0x3fe00000
 800c9a0:	41e00000 	.word	0x41e00000
 800c9a4:	4661      	mov	r1, ip
 800c9a6:	4b60      	ldr	r3, [pc, #384]	; (800cb28 <__ieee754_pow+0x3d0>)
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	4658      	mov	r0, fp
 800c9ac:	f7f3 fc44 	bl	8000238 <__aeabi_dsub>
 800c9b0:	a355      	add	r3, pc, #340	; (adr r3, 800cb08 <__ieee754_pow+0x3b0>)
 800c9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b6:	4604      	mov	r4, r0
 800c9b8:	460d      	mov	r5, r1
 800c9ba:	f7f3 fdf5 	bl	80005a8 <__aeabi_dmul>
 800c9be:	a354      	add	r3, pc, #336	; (adr r3, 800cb10 <__ieee754_pow+0x3b8>)
 800c9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c4:	4606      	mov	r6, r0
 800c9c6:	460f      	mov	r7, r1
 800c9c8:	4620      	mov	r0, r4
 800c9ca:	4629      	mov	r1, r5
 800c9cc:	f7f3 fdec 	bl	80005a8 <__aeabi_dmul>
 800c9d0:	4b56      	ldr	r3, [pc, #344]	; (800cb2c <__ieee754_pow+0x3d4>)
 800c9d2:	4682      	mov	sl, r0
 800c9d4:	468b      	mov	fp, r1
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	4620      	mov	r0, r4
 800c9da:	4629      	mov	r1, r5
 800c9dc:	f7f3 fde4 	bl	80005a8 <__aeabi_dmul>
 800c9e0:	4602      	mov	r2, r0
 800c9e2:	460b      	mov	r3, r1
 800c9e4:	a14c      	add	r1, pc, #304	; (adr r1, 800cb18 <__ieee754_pow+0x3c0>)
 800c9e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9ea:	f7f3 fc25 	bl	8000238 <__aeabi_dsub>
 800c9ee:	4622      	mov	r2, r4
 800c9f0:	462b      	mov	r3, r5
 800c9f2:	f7f3 fdd9 	bl	80005a8 <__aeabi_dmul>
 800c9f6:	4602      	mov	r2, r0
 800c9f8:	460b      	mov	r3, r1
 800c9fa:	2000      	movs	r0, #0
 800c9fc:	494c      	ldr	r1, [pc, #304]	; (800cb30 <__ieee754_pow+0x3d8>)
 800c9fe:	f7f3 fc1b 	bl	8000238 <__aeabi_dsub>
 800ca02:	4622      	mov	r2, r4
 800ca04:	462b      	mov	r3, r5
 800ca06:	4680      	mov	r8, r0
 800ca08:	4689      	mov	r9, r1
 800ca0a:	4620      	mov	r0, r4
 800ca0c:	4629      	mov	r1, r5
 800ca0e:	f7f3 fdcb 	bl	80005a8 <__aeabi_dmul>
 800ca12:	4602      	mov	r2, r0
 800ca14:	460b      	mov	r3, r1
 800ca16:	4640      	mov	r0, r8
 800ca18:	4649      	mov	r1, r9
 800ca1a:	f7f3 fdc5 	bl	80005a8 <__aeabi_dmul>
 800ca1e:	a340      	add	r3, pc, #256	; (adr r3, 800cb20 <__ieee754_pow+0x3c8>)
 800ca20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca24:	f7f3 fdc0 	bl	80005a8 <__aeabi_dmul>
 800ca28:	4602      	mov	r2, r0
 800ca2a:	460b      	mov	r3, r1
 800ca2c:	4650      	mov	r0, sl
 800ca2e:	4659      	mov	r1, fp
 800ca30:	f7f3 fc02 	bl	8000238 <__aeabi_dsub>
 800ca34:	4602      	mov	r2, r0
 800ca36:	460b      	mov	r3, r1
 800ca38:	4604      	mov	r4, r0
 800ca3a:	460d      	mov	r5, r1
 800ca3c:	4630      	mov	r0, r6
 800ca3e:	4639      	mov	r1, r7
 800ca40:	f7f3 fbfc 	bl	800023c <__adddf3>
 800ca44:	f04f 0a00 	mov.w	sl, #0
 800ca48:	4632      	mov	r2, r6
 800ca4a:	463b      	mov	r3, r7
 800ca4c:	4650      	mov	r0, sl
 800ca4e:	468b      	mov	fp, r1
 800ca50:	f7f3 fbf2 	bl	8000238 <__aeabi_dsub>
 800ca54:	4602      	mov	r2, r0
 800ca56:	460b      	mov	r3, r1
 800ca58:	4620      	mov	r0, r4
 800ca5a:	4629      	mov	r1, r5
 800ca5c:	f7f3 fbec 	bl	8000238 <__aeabi_dsub>
 800ca60:	9b00      	ldr	r3, [sp, #0]
 800ca62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ca64:	3b01      	subs	r3, #1
 800ca66:	4313      	orrs	r3, r2
 800ca68:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ca6c:	bf0c      	ite	eq
 800ca6e:	4b31      	ldreq	r3, [pc, #196]	; (800cb34 <__ieee754_pow+0x3dc>)
 800ca70:	4b2d      	ldrne	r3, [pc, #180]	; (800cb28 <__ieee754_pow+0x3d0>)
 800ca72:	2600      	movs	r6, #0
 800ca74:	2200      	movs	r2, #0
 800ca76:	e9cd 2300 	strd	r2, r3, [sp]
 800ca7a:	4604      	mov	r4, r0
 800ca7c:	460d      	mov	r5, r1
 800ca7e:	4632      	mov	r2, r6
 800ca80:	463b      	mov	r3, r7
 800ca82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca86:	f7f3 fbd7 	bl	8000238 <__aeabi_dsub>
 800ca8a:	4652      	mov	r2, sl
 800ca8c:	465b      	mov	r3, fp
 800ca8e:	f7f3 fd8b 	bl	80005a8 <__aeabi_dmul>
 800ca92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca96:	4680      	mov	r8, r0
 800ca98:	4689      	mov	r9, r1
 800ca9a:	4620      	mov	r0, r4
 800ca9c:	4629      	mov	r1, r5
 800ca9e:	f7f3 fd83 	bl	80005a8 <__aeabi_dmul>
 800caa2:	4602      	mov	r2, r0
 800caa4:	460b      	mov	r3, r1
 800caa6:	4640      	mov	r0, r8
 800caa8:	4649      	mov	r1, r9
 800caaa:	f7f3 fbc7 	bl	800023c <__adddf3>
 800caae:	4632      	mov	r2, r6
 800cab0:	463b      	mov	r3, r7
 800cab2:	4680      	mov	r8, r0
 800cab4:	4689      	mov	r9, r1
 800cab6:	4650      	mov	r0, sl
 800cab8:	4659      	mov	r1, fp
 800caba:	f7f3 fd75 	bl	80005a8 <__aeabi_dmul>
 800cabe:	460b      	mov	r3, r1
 800cac0:	4604      	mov	r4, r0
 800cac2:	460d      	mov	r5, r1
 800cac4:	4602      	mov	r2, r0
 800cac6:	4649      	mov	r1, r9
 800cac8:	4640      	mov	r0, r8
 800caca:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800cace:	f7f3 fbb5 	bl	800023c <__adddf3>
 800cad2:	4b19      	ldr	r3, [pc, #100]	; (800cb38 <__ieee754_pow+0x3e0>)
 800cad4:	4299      	cmp	r1, r3
 800cad6:	4682      	mov	sl, r0
 800cad8:	460f      	mov	r7, r1
 800cada:	460e      	mov	r6, r1
 800cadc:	f340 82e7 	ble.w	800d0ae <__ieee754_pow+0x956>
 800cae0:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800cae4:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800cae8:	4303      	orrs	r3, r0
 800caea:	f000 81e1 	beq.w	800ceb0 <__ieee754_pow+0x758>
 800caee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800caf2:	2200      	movs	r2, #0
 800caf4:	2300      	movs	r3, #0
 800caf6:	f7f3 ffc9 	bl	8000a8c <__aeabi_dcmplt>
 800cafa:	3800      	subs	r0, #0
 800cafc:	bf18      	it	ne
 800cafe:	2001      	movne	r0, #1
 800cb00:	e730      	b.n	800c964 <__ieee754_pow+0x20c>
 800cb02:	bf00      	nop
 800cb04:	f3af 8000 	nop.w
 800cb08:	60000000 	.word	0x60000000
 800cb0c:	3ff71547 	.word	0x3ff71547
 800cb10:	f85ddf44 	.word	0xf85ddf44
 800cb14:	3e54ae0b 	.word	0x3e54ae0b
 800cb18:	55555555 	.word	0x55555555
 800cb1c:	3fd55555 	.word	0x3fd55555
 800cb20:	652b82fe 	.word	0x652b82fe
 800cb24:	3ff71547 	.word	0x3ff71547
 800cb28:	3ff00000 	.word	0x3ff00000
 800cb2c:	3fd00000 	.word	0x3fd00000
 800cb30:	3fe00000 	.word	0x3fe00000
 800cb34:	bff00000 	.word	0xbff00000
 800cb38:	408fffff 	.word	0x408fffff
 800cb3c:	4bd2      	ldr	r3, [pc, #840]	; (800ce88 <__ieee754_pow+0x730>)
 800cb3e:	402b      	ands	r3, r5
 800cb40:	2200      	movs	r2, #0
 800cb42:	b943      	cbnz	r3, 800cb56 <__ieee754_pow+0x3fe>
 800cb44:	4658      	mov	r0, fp
 800cb46:	4bd1      	ldr	r3, [pc, #836]	; (800ce8c <__ieee754_pow+0x734>)
 800cb48:	4661      	mov	r1, ip
 800cb4a:	f7f3 fd2d 	bl	80005a8 <__aeabi_dmul>
 800cb4e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800cb52:	4683      	mov	fp, r0
 800cb54:	460c      	mov	r4, r1
 800cb56:	1523      	asrs	r3, r4, #20
 800cb58:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cb5c:	4413      	add	r3, r2
 800cb5e:	930b      	str	r3, [sp, #44]	; 0x2c
 800cb60:	4bcb      	ldr	r3, [pc, #812]	; (800ce90 <__ieee754_pow+0x738>)
 800cb62:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800cb66:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800cb6a:	429c      	cmp	r4, r3
 800cb6c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800cb70:	dd08      	ble.n	800cb84 <__ieee754_pow+0x42c>
 800cb72:	4bc8      	ldr	r3, [pc, #800]	; (800ce94 <__ieee754_pow+0x73c>)
 800cb74:	429c      	cmp	r4, r3
 800cb76:	f340 8199 	ble.w	800ceac <__ieee754_pow+0x754>
 800cb7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb7c:	3301      	adds	r3, #1
 800cb7e:	930b      	str	r3, [sp, #44]	; 0x2c
 800cb80:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800cb84:	2600      	movs	r6, #0
 800cb86:	00f3      	lsls	r3, r6, #3
 800cb88:	930d      	str	r3, [sp, #52]	; 0x34
 800cb8a:	4bc3      	ldr	r3, [pc, #780]	; (800ce98 <__ieee754_pow+0x740>)
 800cb8c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cb90:	e9d3 3400 	ldrd	r3, r4, [r3]
 800cb94:	4658      	mov	r0, fp
 800cb96:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800cb9a:	461a      	mov	r2, r3
 800cb9c:	4629      	mov	r1, r5
 800cb9e:	4623      	mov	r3, r4
 800cba0:	f7f3 fb4a 	bl	8000238 <__aeabi_dsub>
 800cba4:	46da      	mov	sl, fp
 800cba6:	4652      	mov	r2, sl
 800cba8:	462b      	mov	r3, r5
 800cbaa:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800cbae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cbb2:	f7f3 fb43 	bl	800023c <__adddf3>
 800cbb6:	4602      	mov	r2, r0
 800cbb8:	460b      	mov	r3, r1
 800cbba:	2000      	movs	r0, #0
 800cbbc:	49b7      	ldr	r1, [pc, #732]	; (800ce9c <__ieee754_pow+0x744>)
 800cbbe:	f7f3 fe1d 	bl	80007fc <__aeabi_ddiv>
 800cbc2:	4602      	mov	r2, r0
 800cbc4:	460b      	mov	r3, r1
 800cbc6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800cbca:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800cbce:	f7f3 fceb 	bl	80005a8 <__aeabi_dmul>
 800cbd2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cbd6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800cbda:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800cbde:	2300      	movs	r3, #0
 800cbe0:	9304      	str	r3, [sp, #16]
 800cbe2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800cbe6:	46ab      	mov	fp, r5
 800cbe8:	106d      	asrs	r5, r5, #1
 800cbea:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800cbee:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800cbf2:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	4640      	mov	r0, r8
 800cbfa:	4649      	mov	r1, r9
 800cbfc:	4614      	mov	r4, r2
 800cbfe:	461d      	mov	r5, r3
 800cc00:	f7f3 fcd2 	bl	80005a8 <__aeabi_dmul>
 800cc04:	4602      	mov	r2, r0
 800cc06:	460b      	mov	r3, r1
 800cc08:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800cc0c:	f7f3 fb14 	bl	8000238 <__aeabi_dsub>
 800cc10:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cc14:	4606      	mov	r6, r0
 800cc16:	460f      	mov	r7, r1
 800cc18:	4620      	mov	r0, r4
 800cc1a:	4629      	mov	r1, r5
 800cc1c:	f7f3 fb0c 	bl	8000238 <__aeabi_dsub>
 800cc20:	4602      	mov	r2, r0
 800cc22:	460b      	mov	r3, r1
 800cc24:	4650      	mov	r0, sl
 800cc26:	4659      	mov	r1, fp
 800cc28:	f7f3 fb06 	bl	8000238 <__aeabi_dsub>
 800cc2c:	4642      	mov	r2, r8
 800cc2e:	464b      	mov	r3, r9
 800cc30:	f7f3 fcba 	bl	80005a8 <__aeabi_dmul>
 800cc34:	4602      	mov	r2, r0
 800cc36:	460b      	mov	r3, r1
 800cc38:	4630      	mov	r0, r6
 800cc3a:	4639      	mov	r1, r7
 800cc3c:	f7f3 fafc 	bl	8000238 <__aeabi_dsub>
 800cc40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cc44:	f7f3 fcb0 	bl	80005a8 <__aeabi_dmul>
 800cc48:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cc4c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cc50:	4610      	mov	r0, r2
 800cc52:	4619      	mov	r1, r3
 800cc54:	f7f3 fca8 	bl	80005a8 <__aeabi_dmul>
 800cc58:	a379      	add	r3, pc, #484	; (adr r3, 800ce40 <__ieee754_pow+0x6e8>)
 800cc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc5e:	4604      	mov	r4, r0
 800cc60:	460d      	mov	r5, r1
 800cc62:	f7f3 fca1 	bl	80005a8 <__aeabi_dmul>
 800cc66:	a378      	add	r3, pc, #480	; (adr r3, 800ce48 <__ieee754_pow+0x6f0>)
 800cc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc6c:	f7f3 fae6 	bl	800023c <__adddf3>
 800cc70:	4622      	mov	r2, r4
 800cc72:	462b      	mov	r3, r5
 800cc74:	f7f3 fc98 	bl	80005a8 <__aeabi_dmul>
 800cc78:	a375      	add	r3, pc, #468	; (adr r3, 800ce50 <__ieee754_pow+0x6f8>)
 800cc7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc7e:	f7f3 fadd 	bl	800023c <__adddf3>
 800cc82:	4622      	mov	r2, r4
 800cc84:	462b      	mov	r3, r5
 800cc86:	f7f3 fc8f 	bl	80005a8 <__aeabi_dmul>
 800cc8a:	a373      	add	r3, pc, #460	; (adr r3, 800ce58 <__ieee754_pow+0x700>)
 800cc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc90:	f7f3 fad4 	bl	800023c <__adddf3>
 800cc94:	4622      	mov	r2, r4
 800cc96:	462b      	mov	r3, r5
 800cc98:	f7f3 fc86 	bl	80005a8 <__aeabi_dmul>
 800cc9c:	a370      	add	r3, pc, #448	; (adr r3, 800ce60 <__ieee754_pow+0x708>)
 800cc9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca2:	f7f3 facb 	bl	800023c <__adddf3>
 800cca6:	4622      	mov	r2, r4
 800cca8:	462b      	mov	r3, r5
 800ccaa:	f7f3 fc7d 	bl	80005a8 <__aeabi_dmul>
 800ccae:	a36e      	add	r3, pc, #440	; (adr r3, 800ce68 <__ieee754_pow+0x710>)
 800ccb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb4:	f7f3 fac2 	bl	800023c <__adddf3>
 800ccb8:	4622      	mov	r2, r4
 800ccba:	4606      	mov	r6, r0
 800ccbc:	460f      	mov	r7, r1
 800ccbe:	462b      	mov	r3, r5
 800ccc0:	4620      	mov	r0, r4
 800ccc2:	4629      	mov	r1, r5
 800ccc4:	f7f3 fc70 	bl	80005a8 <__aeabi_dmul>
 800ccc8:	4602      	mov	r2, r0
 800ccca:	460b      	mov	r3, r1
 800cccc:	4630      	mov	r0, r6
 800ccce:	4639      	mov	r1, r7
 800ccd0:	f7f3 fc6a 	bl	80005a8 <__aeabi_dmul>
 800ccd4:	4642      	mov	r2, r8
 800ccd6:	4604      	mov	r4, r0
 800ccd8:	460d      	mov	r5, r1
 800ccda:	464b      	mov	r3, r9
 800ccdc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cce0:	f7f3 faac 	bl	800023c <__adddf3>
 800cce4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cce8:	f7f3 fc5e 	bl	80005a8 <__aeabi_dmul>
 800ccec:	4622      	mov	r2, r4
 800ccee:	462b      	mov	r3, r5
 800ccf0:	f7f3 faa4 	bl	800023c <__adddf3>
 800ccf4:	4642      	mov	r2, r8
 800ccf6:	4606      	mov	r6, r0
 800ccf8:	460f      	mov	r7, r1
 800ccfa:	464b      	mov	r3, r9
 800ccfc:	4640      	mov	r0, r8
 800ccfe:	4649      	mov	r1, r9
 800cd00:	f7f3 fc52 	bl	80005a8 <__aeabi_dmul>
 800cd04:	4b66      	ldr	r3, [pc, #408]	; (800cea0 <__ieee754_pow+0x748>)
 800cd06:	2200      	movs	r2, #0
 800cd08:	4682      	mov	sl, r0
 800cd0a:	468b      	mov	fp, r1
 800cd0c:	f7f3 fa96 	bl	800023c <__adddf3>
 800cd10:	4632      	mov	r2, r6
 800cd12:	463b      	mov	r3, r7
 800cd14:	f7f3 fa92 	bl	800023c <__adddf3>
 800cd18:	2400      	movs	r4, #0
 800cd1a:	460d      	mov	r5, r1
 800cd1c:	4622      	mov	r2, r4
 800cd1e:	460b      	mov	r3, r1
 800cd20:	4640      	mov	r0, r8
 800cd22:	4649      	mov	r1, r9
 800cd24:	f7f3 fc40 	bl	80005a8 <__aeabi_dmul>
 800cd28:	4b5d      	ldr	r3, [pc, #372]	; (800cea0 <__ieee754_pow+0x748>)
 800cd2a:	4680      	mov	r8, r0
 800cd2c:	4689      	mov	r9, r1
 800cd2e:	2200      	movs	r2, #0
 800cd30:	4620      	mov	r0, r4
 800cd32:	4629      	mov	r1, r5
 800cd34:	f7f3 fa80 	bl	8000238 <__aeabi_dsub>
 800cd38:	4652      	mov	r2, sl
 800cd3a:	465b      	mov	r3, fp
 800cd3c:	f7f3 fa7c 	bl	8000238 <__aeabi_dsub>
 800cd40:	4602      	mov	r2, r0
 800cd42:	460b      	mov	r3, r1
 800cd44:	4630      	mov	r0, r6
 800cd46:	4639      	mov	r1, r7
 800cd48:	f7f3 fa76 	bl	8000238 <__aeabi_dsub>
 800cd4c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cd50:	f7f3 fc2a 	bl	80005a8 <__aeabi_dmul>
 800cd54:	4622      	mov	r2, r4
 800cd56:	4606      	mov	r6, r0
 800cd58:	460f      	mov	r7, r1
 800cd5a:	462b      	mov	r3, r5
 800cd5c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cd60:	f7f3 fc22 	bl	80005a8 <__aeabi_dmul>
 800cd64:	4602      	mov	r2, r0
 800cd66:	460b      	mov	r3, r1
 800cd68:	4630      	mov	r0, r6
 800cd6a:	4639      	mov	r1, r7
 800cd6c:	f7f3 fa66 	bl	800023c <__adddf3>
 800cd70:	4606      	mov	r6, r0
 800cd72:	460f      	mov	r7, r1
 800cd74:	4602      	mov	r2, r0
 800cd76:	460b      	mov	r3, r1
 800cd78:	4640      	mov	r0, r8
 800cd7a:	4649      	mov	r1, r9
 800cd7c:	f7f3 fa5e 	bl	800023c <__adddf3>
 800cd80:	2400      	movs	r4, #0
 800cd82:	a33b      	add	r3, pc, #236	; (adr r3, 800ce70 <__ieee754_pow+0x718>)
 800cd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd88:	4620      	mov	r0, r4
 800cd8a:	460d      	mov	r5, r1
 800cd8c:	f7f3 fc0c 	bl	80005a8 <__aeabi_dmul>
 800cd90:	4642      	mov	r2, r8
 800cd92:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cd96:	464b      	mov	r3, r9
 800cd98:	4620      	mov	r0, r4
 800cd9a:	4629      	mov	r1, r5
 800cd9c:	f7f3 fa4c 	bl	8000238 <__aeabi_dsub>
 800cda0:	4602      	mov	r2, r0
 800cda2:	460b      	mov	r3, r1
 800cda4:	4630      	mov	r0, r6
 800cda6:	4639      	mov	r1, r7
 800cda8:	f7f3 fa46 	bl	8000238 <__aeabi_dsub>
 800cdac:	a332      	add	r3, pc, #200	; (adr r3, 800ce78 <__ieee754_pow+0x720>)
 800cdae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb2:	f7f3 fbf9 	bl	80005a8 <__aeabi_dmul>
 800cdb6:	a332      	add	r3, pc, #200	; (adr r3, 800ce80 <__ieee754_pow+0x728>)
 800cdb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdbc:	4606      	mov	r6, r0
 800cdbe:	460f      	mov	r7, r1
 800cdc0:	4620      	mov	r0, r4
 800cdc2:	4629      	mov	r1, r5
 800cdc4:	f7f3 fbf0 	bl	80005a8 <__aeabi_dmul>
 800cdc8:	4602      	mov	r2, r0
 800cdca:	460b      	mov	r3, r1
 800cdcc:	4630      	mov	r0, r6
 800cdce:	4639      	mov	r1, r7
 800cdd0:	f7f3 fa34 	bl	800023c <__adddf3>
 800cdd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cdd6:	4b33      	ldr	r3, [pc, #204]	; (800cea4 <__ieee754_pow+0x74c>)
 800cdd8:	4413      	add	r3, r2
 800cdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdde:	f7f3 fa2d 	bl	800023c <__adddf3>
 800cde2:	4680      	mov	r8, r0
 800cde4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800cde6:	4689      	mov	r9, r1
 800cde8:	f7f3 fb74 	bl	80004d4 <__aeabi_i2d>
 800cdec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cdee:	4b2e      	ldr	r3, [pc, #184]	; (800cea8 <__ieee754_pow+0x750>)
 800cdf0:	4413      	add	r3, r2
 800cdf2:	e9d3 6700 	ldrd	r6, r7, [r3]
 800cdf6:	4604      	mov	r4, r0
 800cdf8:	460d      	mov	r5, r1
 800cdfa:	4642      	mov	r2, r8
 800cdfc:	464b      	mov	r3, r9
 800cdfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ce02:	f7f3 fa1b 	bl	800023c <__adddf3>
 800ce06:	4632      	mov	r2, r6
 800ce08:	463b      	mov	r3, r7
 800ce0a:	f7f3 fa17 	bl	800023c <__adddf3>
 800ce0e:	4622      	mov	r2, r4
 800ce10:	462b      	mov	r3, r5
 800ce12:	f7f3 fa13 	bl	800023c <__adddf3>
 800ce16:	f04f 0a00 	mov.w	sl, #0
 800ce1a:	4622      	mov	r2, r4
 800ce1c:	462b      	mov	r3, r5
 800ce1e:	4650      	mov	r0, sl
 800ce20:	468b      	mov	fp, r1
 800ce22:	f7f3 fa09 	bl	8000238 <__aeabi_dsub>
 800ce26:	4632      	mov	r2, r6
 800ce28:	463b      	mov	r3, r7
 800ce2a:	f7f3 fa05 	bl	8000238 <__aeabi_dsub>
 800ce2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ce32:	f7f3 fa01 	bl	8000238 <__aeabi_dsub>
 800ce36:	4602      	mov	r2, r0
 800ce38:	460b      	mov	r3, r1
 800ce3a:	4640      	mov	r0, r8
 800ce3c:	4649      	mov	r1, r9
 800ce3e:	e60d      	b.n	800ca5c <__ieee754_pow+0x304>
 800ce40:	4a454eef 	.word	0x4a454eef
 800ce44:	3fca7e28 	.word	0x3fca7e28
 800ce48:	93c9db65 	.word	0x93c9db65
 800ce4c:	3fcd864a 	.word	0x3fcd864a
 800ce50:	a91d4101 	.word	0xa91d4101
 800ce54:	3fd17460 	.word	0x3fd17460
 800ce58:	518f264d 	.word	0x518f264d
 800ce5c:	3fd55555 	.word	0x3fd55555
 800ce60:	db6fabff 	.word	0xdb6fabff
 800ce64:	3fdb6db6 	.word	0x3fdb6db6
 800ce68:	33333303 	.word	0x33333303
 800ce6c:	3fe33333 	.word	0x3fe33333
 800ce70:	e0000000 	.word	0xe0000000
 800ce74:	3feec709 	.word	0x3feec709
 800ce78:	dc3a03fd 	.word	0xdc3a03fd
 800ce7c:	3feec709 	.word	0x3feec709
 800ce80:	145b01f5 	.word	0x145b01f5
 800ce84:	be3e2fe0 	.word	0xbe3e2fe0
 800ce88:	7ff00000 	.word	0x7ff00000
 800ce8c:	43400000 	.word	0x43400000
 800ce90:	0003988e 	.word	0x0003988e
 800ce94:	000bb679 	.word	0x000bb679
 800ce98:	0800df18 	.word	0x0800df18
 800ce9c:	3ff00000 	.word	0x3ff00000
 800cea0:	40080000 	.word	0x40080000
 800cea4:	0800df38 	.word	0x0800df38
 800cea8:	0800df28 	.word	0x0800df28
 800ceac:	2601      	movs	r6, #1
 800ceae:	e66a      	b.n	800cb86 <__ieee754_pow+0x42e>
 800ceb0:	a39d      	add	r3, pc, #628	; (adr r3, 800d128 <__ieee754_pow+0x9d0>)
 800ceb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceb6:	4640      	mov	r0, r8
 800ceb8:	4649      	mov	r1, r9
 800ceba:	f7f3 f9bf 	bl	800023c <__adddf3>
 800cebe:	4622      	mov	r2, r4
 800cec0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cec4:	462b      	mov	r3, r5
 800cec6:	4650      	mov	r0, sl
 800cec8:	4639      	mov	r1, r7
 800ceca:	f7f3 f9b5 	bl	8000238 <__aeabi_dsub>
 800cece:	4602      	mov	r2, r0
 800ced0:	460b      	mov	r3, r1
 800ced2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ced6:	f7f3 fdf7 	bl	8000ac8 <__aeabi_dcmpgt>
 800ceda:	2800      	cmp	r0, #0
 800cedc:	f47f ae07 	bne.w	800caee <__ieee754_pow+0x396>
 800cee0:	4aa3      	ldr	r2, [pc, #652]	; (800d170 <__ieee754_pow+0xa18>)
 800cee2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800cee6:	4293      	cmp	r3, r2
 800cee8:	f340 8101 	ble.w	800d0ee <__ieee754_pow+0x996>
 800ceec:	151b      	asrs	r3, r3, #20
 800ceee:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800cef2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800cef6:	fa4a f303 	asr.w	r3, sl, r3
 800cefa:	4433      	add	r3, r6
 800cefc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800cf00:	4f9c      	ldr	r7, [pc, #624]	; (800d174 <__ieee754_pow+0xa1c>)
 800cf02:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800cf06:	4117      	asrs	r7, r2
 800cf08:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800cf0c:	2000      	movs	r0, #0
 800cf0e:	ea23 0107 	bic.w	r1, r3, r7
 800cf12:	f1c2 0214 	rsb	r2, r2, #20
 800cf16:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800cf1a:	fa4a fa02 	asr.w	sl, sl, r2
 800cf1e:	2e00      	cmp	r6, #0
 800cf20:	4602      	mov	r2, r0
 800cf22:	460b      	mov	r3, r1
 800cf24:	4620      	mov	r0, r4
 800cf26:	4629      	mov	r1, r5
 800cf28:	bfb8      	it	lt
 800cf2a:	f1ca 0a00 	rsblt	sl, sl, #0
 800cf2e:	f7f3 f983 	bl	8000238 <__aeabi_dsub>
 800cf32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf36:	4642      	mov	r2, r8
 800cf38:	464b      	mov	r3, r9
 800cf3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf3e:	f7f3 f97d 	bl	800023c <__adddf3>
 800cf42:	2400      	movs	r4, #0
 800cf44:	a37a      	add	r3, pc, #488	; (adr r3, 800d130 <__ieee754_pow+0x9d8>)
 800cf46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf4a:	4620      	mov	r0, r4
 800cf4c:	460d      	mov	r5, r1
 800cf4e:	f7f3 fb2b 	bl	80005a8 <__aeabi_dmul>
 800cf52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf56:	4606      	mov	r6, r0
 800cf58:	460f      	mov	r7, r1
 800cf5a:	4620      	mov	r0, r4
 800cf5c:	4629      	mov	r1, r5
 800cf5e:	f7f3 f96b 	bl	8000238 <__aeabi_dsub>
 800cf62:	4602      	mov	r2, r0
 800cf64:	460b      	mov	r3, r1
 800cf66:	4640      	mov	r0, r8
 800cf68:	4649      	mov	r1, r9
 800cf6a:	f7f3 f965 	bl	8000238 <__aeabi_dsub>
 800cf6e:	a372      	add	r3, pc, #456	; (adr r3, 800d138 <__ieee754_pow+0x9e0>)
 800cf70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf74:	f7f3 fb18 	bl	80005a8 <__aeabi_dmul>
 800cf78:	a371      	add	r3, pc, #452	; (adr r3, 800d140 <__ieee754_pow+0x9e8>)
 800cf7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf7e:	4680      	mov	r8, r0
 800cf80:	4689      	mov	r9, r1
 800cf82:	4620      	mov	r0, r4
 800cf84:	4629      	mov	r1, r5
 800cf86:	f7f3 fb0f 	bl	80005a8 <__aeabi_dmul>
 800cf8a:	4602      	mov	r2, r0
 800cf8c:	460b      	mov	r3, r1
 800cf8e:	4640      	mov	r0, r8
 800cf90:	4649      	mov	r1, r9
 800cf92:	f7f3 f953 	bl	800023c <__adddf3>
 800cf96:	4604      	mov	r4, r0
 800cf98:	460d      	mov	r5, r1
 800cf9a:	4602      	mov	r2, r0
 800cf9c:	460b      	mov	r3, r1
 800cf9e:	4630      	mov	r0, r6
 800cfa0:	4639      	mov	r1, r7
 800cfa2:	f7f3 f94b 	bl	800023c <__adddf3>
 800cfa6:	4632      	mov	r2, r6
 800cfa8:	463b      	mov	r3, r7
 800cfaa:	4680      	mov	r8, r0
 800cfac:	4689      	mov	r9, r1
 800cfae:	f7f3 f943 	bl	8000238 <__aeabi_dsub>
 800cfb2:	4602      	mov	r2, r0
 800cfb4:	460b      	mov	r3, r1
 800cfb6:	4620      	mov	r0, r4
 800cfb8:	4629      	mov	r1, r5
 800cfba:	f7f3 f93d 	bl	8000238 <__aeabi_dsub>
 800cfbe:	4642      	mov	r2, r8
 800cfc0:	4606      	mov	r6, r0
 800cfc2:	460f      	mov	r7, r1
 800cfc4:	464b      	mov	r3, r9
 800cfc6:	4640      	mov	r0, r8
 800cfc8:	4649      	mov	r1, r9
 800cfca:	f7f3 faed 	bl	80005a8 <__aeabi_dmul>
 800cfce:	a35e      	add	r3, pc, #376	; (adr r3, 800d148 <__ieee754_pow+0x9f0>)
 800cfd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd4:	4604      	mov	r4, r0
 800cfd6:	460d      	mov	r5, r1
 800cfd8:	f7f3 fae6 	bl	80005a8 <__aeabi_dmul>
 800cfdc:	a35c      	add	r3, pc, #368	; (adr r3, 800d150 <__ieee754_pow+0x9f8>)
 800cfde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe2:	f7f3 f929 	bl	8000238 <__aeabi_dsub>
 800cfe6:	4622      	mov	r2, r4
 800cfe8:	462b      	mov	r3, r5
 800cfea:	f7f3 fadd 	bl	80005a8 <__aeabi_dmul>
 800cfee:	a35a      	add	r3, pc, #360	; (adr r3, 800d158 <__ieee754_pow+0xa00>)
 800cff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cff4:	f7f3 f922 	bl	800023c <__adddf3>
 800cff8:	4622      	mov	r2, r4
 800cffa:	462b      	mov	r3, r5
 800cffc:	f7f3 fad4 	bl	80005a8 <__aeabi_dmul>
 800d000:	a357      	add	r3, pc, #348	; (adr r3, 800d160 <__ieee754_pow+0xa08>)
 800d002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d006:	f7f3 f917 	bl	8000238 <__aeabi_dsub>
 800d00a:	4622      	mov	r2, r4
 800d00c:	462b      	mov	r3, r5
 800d00e:	f7f3 facb 	bl	80005a8 <__aeabi_dmul>
 800d012:	a355      	add	r3, pc, #340	; (adr r3, 800d168 <__ieee754_pow+0xa10>)
 800d014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d018:	f7f3 f910 	bl	800023c <__adddf3>
 800d01c:	4622      	mov	r2, r4
 800d01e:	462b      	mov	r3, r5
 800d020:	f7f3 fac2 	bl	80005a8 <__aeabi_dmul>
 800d024:	4602      	mov	r2, r0
 800d026:	460b      	mov	r3, r1
 800d028:	4640      	mov	r0, r8
 800d02a:	4649      	mov	r1, r9
 800d02c:	f7f3 f904 	bl	8000238 <__aeabi_dsub>
 800d030:	4604      	mov	r4, r0
 800d032:	460d      	mov	r5, r1
 800d034:	4602      	mov	r2, r0
 800d036:	460b      	mov	r3, r1
 800d038:	4640      	mov	r0, r8
 800d03a:	4649      	mov	r1, r9
 800d03c:	f7f3 fab4 	bl	80005a8 <__aeabi_dmul>
 800d040:	2200      	movs	r2, #0
 800d042:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d046:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d04a:	4620      	mov	r0, r4
 800d04c:	4629      	mov	r1, r5
 800d04e:	f7f3 f8f3 	bl	8000238 <__aeabi_dsub>
 800d052:	4602      	mov	r2, r0
 800d054:	460b      	mov	r3, r1
 800d056:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d05a:	f7f3 fbcf 	bl	80007fc <__aeabi_ddiv>
 800d05e:	4632      	mov	r2, r6
 800d060:	4604      	mov	r4, r0
 800d062:	460d      	mov	r5, r1
 800d064:	463b      	mov	r3, r7
 800d066:	4640      	mov	r0, r8
 800d068:	4649      	mov	r1, r9
 800d06a:	f7f3 fa9d 	bl	80005a8 <__aeabi_dmul>
 800d06e:	4632      	mov	r2, r6
 800d070:	463b      	mov	r3, r7
 800d072:	f7f3 f8e3 	bl	800023c <__adddf3>
 800d076:	4602      	mov	r2, r0
 800d078:	460b      	mov	r3, r1
 800d07a:	4620      	mov	r0, r4
 800d07c:	4629      	mov	r1, r5
 800d07e:	f7f3 f8db 	bl	8000238 <__aeabi_dsub>
 800d082:	4642      	mov	r2, r8
 800d084:	464b      	mov	r3, r9
 800d086:	f7f3 f8d7 	bl	8000238 <__aeabi_dsub>
 800d08a:	4602      	mov	r2, r0
 800d08c:	460b      	mov	r3, r1
 800d08e:	2000      	movs	r0, #0
 800d090:	4939      	ldr	r1, [pc, #228]	; (800d178 <__ieee754_pow+0xa20>)
 800d092:	f7f3 f8d1 	bl	8000238 <__aeabi_dsub>
 800d096:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800d09a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800d09e:	da29      	bge.n	800d0f4 <__ieee754_pow+0x99c>
 800d0a0:	4652      	mov	r2, sl
 800d0a2:	f000 f955 	bl	800d350 <scalbn>
 800d0a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0aa:	f7ff bbfe 	b.w	800c8aa <__ieee754_pow+0x152>
 800d0ae:	4b33      	ldr	r3, [pc, #204]	; (800d17c <__ieee754_pow+0xa24>)
 800d0b0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800d0b4:	429f      	cmp	r7, r3
 800d0b6:	f77f af13 	ble.w	800cee0 <__ieee754_pow+0x788>
 800d0ba:	4b31      	ldr	r3, [pc, #196]	; (800d180 <__ieee754_pow+0xa28>)
 800d0bc:	440b      	add	r3, r1
 800d0be:	4303      	orrs	r3, r0
 800d0c0:	d009      	beq.n	800d0d6 <__ieee754_pow+0x97e>
 800d0c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	f7f3 fcdf 	bl	8000a8c <__aeabi_dcmplt>
 800d0ce:	3800      	subs	r0, #0
 800d0d0:	bf18      	it	ne
 800d0d2:	2001      	movne	r0, #1
 800d0d4:	e453      	b.n	800c97e <__ieee754_pow+0x226>
 800d0d6:	4622      	mov	r2, r4
 800d0d8:	462b      	mov	r3, r5
 800d0da:	f7f3 f8ad 	bl	8000238 <__aeabi_dsub>
 800d0de:	4642      	mov	r2, r8
 800d0e0:	464b      	mov	r3, r9
 800d0e2:	f7f3 fce7 	bl	8000ab4 <__aeabi_dcmpge>
 800d0e6:	2800      	cmp	r0, #0
 800d0e8:	f43f aefa 	beq.w	800cee0 <__ieee754_pow+0x788>
 800d0ec:	e7e9      	b.n	800d0c2 <__ieee754_pow+0x96a>
 800d0ee:	f04f 0a00 	mov.w	sl, #0
 800d0f2:	e720      	b.n	800cf36 <__ieee754_pow+0x7de>
 800d0f4:	4621      	mov	r1, r4
 800d0f6:	e7d6      	b.n	800d0a6 <__ieee754_pow+0x94e>
 800d0f8:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d178 <__ieee754_pow+0xa20>
 800d0fc:	f04f 0b00 	mov.w	fp, #0
 800d100:	f7ff bbba 	b.w	800c878 <__ieee754_pow+0x120>
 800d104:	f04f 0b00 	mov.w	fp, #0
 800d108:	f04f 0c00 	mov.w	ip, #0
 800d10c:	f7ff bbb4 	b.w	800c878 <__ieee754_pow+0x120>
 800d110:	4640      	mov	r0, r8
 800d112:	4649      	mov	r1, r9
 800d114:	f7ff bb3d 	b.w	800c792 <__ieee754_pow+0x3a>
 800d118:	9200      	str	r2, [sp, #0]
 800d11a:	f7ff bb89 	b.w	800c830 <__ieee754_pow+0xd8>
 800d11e:	2300      	movs	r3, #0
 800d120:	f7ff bb73 	b.w	800c80a <__ieee754_pow+0xb2>
 800d124:	f3af 8000 	nop.w
 800d128:	652b82fe 	.word	0x652b82fe
 800d12c:	3c971547 	.word	0x3c971547
 800d130:	00000000 	.word	0x00000000
 800d134:	3fe62e43 	.word	0x3fe62e43
 800d138:	fefa39ef 	.word	0xfefa39ef
 800d13c:	3fe62e42 	.word	0x3fe62e42
 800d140:	0ca86c39 	.word	0x0ca86c39
 800d144:	be205c61 	.word	0xbe205c61
 800d148:	72bea4d0 	.word	0x72bea4d0
 800d14c:	3e663769 	.word	0x3e663769
 800d150:	c5d26bf1 	.word	0xc5d26bf1
 800d154:	3ebbbd41 	.word	0x3ebbbd41
 800d158:	af25de2c 	.word	0xaf25de2c
 800d15c:	3f11566a 	.word	0x3f11566a
 800d160:	16bebd93 	.word	0x16bebd93
 800d164:	3f66c16c 	.word	0x3f66c16c
 800d168:	5555553e 	.word	0x5555553e
 800d16c:	3fc55555 	.word	0x3fc55555
 800d170:	3fe00000 	.word	0x3fe00000
 800d174:	000fffff 	.word	0x000fffff
 800d178:	3ff00000 	.word	0x3ff00000
 800d17c:	4090cbff 	.word	0x4090cbff
 800d180:	3f6f3400 	.word	0x3f6f3400

0800d184 <__ieee754_sqrt>:
 800d184:	f8df c154 	ldr.w	ip, [pc, #340]	; 800d2dc <__ieee754_sqrt+0x158>
 800d188:	ea3c 0c01 	bics.w	ip, ip, r1
 800d18c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d190:	460a      	mov	r2, r1
 800d192:	4606      	mov	r6, r0
 800d194:	460d      	mov	r5, r1
 800d196:	460c      	mov	r4, r1
 800d198:	4607      	mov	r7, r0
 800d19a:	4603      	mov	r3, r0
 800d19c:	d10f      	bne.n	800d1be <__ieee754_sqrt+0x3a>
 800d19e:	4602      	mov	r2, r0
 800d1a0:	460b      	mov	r3, r1
 800d1a2:	f7f3 fa01 	bl	80005a8 <__aeabi_dmul>
 800d1a6:	4602      	mov	r2, r0
 800d1a8:	460b      	mov	r3, r1
 800d1aa:	4630      	mov	r0, r6
 800d1ac:	4629      	mov	r1, r5
 800d1ae:	f7f3 f845 	bl	800023c <__adddf3>
 800d1b2:	4606      	mov	r6, r0
 800d1b4:	460d      	mov	r5, r1
 800d1b6:	4630      	mov	r0, r6
 800d1b8:	4629      	mov	r1, r5
 800d1ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1be:	2900      	cmp	r1, #0
 800d1c0:	dc0e      	bgt.n	800d1e0 <__ieee754_sqrt+0x5c>
 800d1c2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800d1c6:	ea5c 0707 	orrs.w	r7, ip, r7
 800d1ca:	d0f4      	beq.n	800d1b6 <__ieee754_sqrt+0x32>
 800d1cc:	b141      	cbz	r1, 800d1e0 <__ieee754_sqrt+0x5c>
 800d1ce:	4602      	mov	r2, r0
 800d1d0:	460b      	mov	r3, r1
 800d1d2:	f7f3 f831 	bl	8000238 <__aeabi_dsub>
 800d1d6:	4602      	mov	r2, r0
 800d1d8:	460b      	mov	r3, r1
 800d1da:	f7f3 fb0f 	bl	80007fc <__aeabi_ddiv>
 800d1de:	e7e8      	b.n	800d1b2 <__ieee754_sqrt+0x2e>
 800d1e0:	1521      	asrs	r1, r4, #20
 800d1e2:	d074      	beq.n	800d2ce <__ieee754_sqrt+0x14a>
 800d1e4:	07cc      	lsls	r4, r1, #31
 800d1e6:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800d1ea:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800d1ee:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800d1f2:	bf5e      	ittt	pl
 800d1f4:	0fd9      	lsrpl	r1, r3, #31
 800d1f6:	005b      	lslpl	r3, r3, #1
 800d1f8:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800d1fc:	2400      	movs	r4, #0
 800d1fe:	0fd9      	lsrs	r1, r3, #31
 800d200:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800d204:	107f      	asrs	r7, r7, #1
 800d206:	005b      	lsls	r3, r3, #1
 800d208:	2516      	movs	r5, #22
 800d20a:	4620      	mov	r0, r4
 800d20c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d210:	1846      	adds	r6, r0, r1
 800d212:	4296      	cmp	r6, r2
 800d214:	bfde      	ittt	le
 800d216:	1b92      	suble	r2, r2, r6
 800d218:	1870      	addle	r0, r6, r1
 800d21a:	1864      	addle	r4, r4, r1
 800d21c:	0052      	lsls	r2, r2, #1
 800d21e:	3d01      	subs	r5, #1
 800d220:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800d224:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d228:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d22c:	d1f0      	bne.n	800d210 <__ieee754_sqrt+0x8c>
 800d22e:	4629      	mov	r1, r5
 800d230:	f04f 0e20 	mov.w	lr, #32
 800d234:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d238:	4282      	cmp	r2, r0
 800d23a:	eb06 0c05 	add.w	ip, r6, r5
 800d23e:	dc02      	bgt.n	800d246 <__ieee754_sqrt+0xc2>
 800d240:	d113      	bne.n	800d26a <__ieee754_sqrt+0xe6>
 800d242:	459c      	cmp	ip, r3
 800d244:	d811      	bhi.n	800d26a <__ieee754_sqrt+0xe6>
 800d246:	f1bc 0f00 	cmp.w	ip, #0
 800d24a:	eb0c 0506 	add.w	r5, ip, r6
 800d24e:	da43      	bge.n	800d2d8 <__ieee754_sqrt+0x154>
 800d250:	2d00      	cmp	r5, #0
 800d252:	db41      	blt.n	800d2d8 <__ieee754_sqrt+0x154>
 800d254:	f100 0801 	add.w	r8, r0, #1
 800d258:	1a12      	subs	r2, r2, r0
 800d25a:	459c      	cmp	ip, r3
 800d25c:	bf88      	it	hi
 800d25e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800d262:	eba3 030c 	sub.w	r3, r3, ip
 800d266:	4431      	add	r1, r6
 800d268:	4640      	mov	r0, r8
 800d26a:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800d26e:	f1be 0e01 	subs.w	lr, lr, #1
 800d272:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800d276:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d27a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d27e:	d1db      	bne.n	800d238 <__ieee754_sqrt+0xb4>
 800d280:	4313      	orrs	r3, r2
 800d282:	d006      	beq.n	800d292 <__ieee754_sqrt+0x10e>
 800d284:	1c48      	adds	r0, r1, #1
 800d286:	bf13      	iteet	ne
 800d288:	3101      	addne	r1, #1
 800d28a:	3401      	addeq	r4, #1
 800d28c:	4671      	moveq	r1, lr
 800d28e:	f021 0101 	bicne.w	r1, r1, #1
 800d292:	1063      	asrs	r3, r4, #1
 800d294:	0849      	lsrs	r1, r1, #1
 800d296:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d29a:	07e2      	lsls	r2, r4, #31
 800d29c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d2a0:	bf48      	it	mi
 800d2a2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800d2a6:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800d2aa:	460e      	mov	r6, r1
 800d2ac:	e783      	b.n	800d1b6 <__ieee754_sqrt+0x32>
 800d2ae:	0ada      	lsrs	r2, r3, #11
 800d2b0:	3815      	subs	r0, #21
 800d2b2:	055b      	lsls	r3, r3, #21
 800d2b4:	2a00      	cmp	r2, #0
 800d2b6:	d0fa      	beq.n	800d2ae <__ieee754_sqrt+0x12a>
 800d2b8:	02d5      	lsls	r5, r2, #11
 800d2ba:	d50a      	bpl.n	800d2d2 <__ieee754_sqrt+0x14e>
 800d2bc:	f1c1 0420 	rsb	r4, r1, #32
 800d2c0:	fa23 f404 	lsr.w	r4, r3, r4
 800d2c4:	1e4d      	subs	r5, r1, #1
 800d2c6:	408b      	lsls	r3, r1
 800d2c8:	4322      	orrs	r2, r4
 800d2ca:	1b41      	subs	r1, r0, r5
 800d2cc:	e78a      	b.n	800d1e4 <__ieee754_sqrt+0x60>
 800d2ce:	4608      	mov	r0, r1
 800d2d0:	e7f0      	b.n	800d2b4 <__ieee754_sqrt+0x130>
 800d2d2:	0052      	lsls	r2, r2, #1
 800d2d4:	3101      	adds	r1, #1
 800d2d6:	e7ef      	b.n	800d2b8 <__ieee754_sqrt+0x134>
 800d2d8:	4680      	mov	r8, r0
 800d2da:	e7bd      	b.n	800d258 <__ieee754_sqrt+0xd4>
 800d2dc:	7ff00000 	.word	0x7ff00000

0800d2e0 <with_errno>:
 800d2e0:	b570      	push	{r4, r5, r6, lr}
 800d2e2:	4604      	mov	r4, r0
 800d2e4:	460d      	mov	r5, r1
 800d2e6:	4616      	mov	r6, r2
 800d2e8:	f7fd ff28 	bl	800b13c <__errno>
 800d2ec:	4629      	mov	r1, r5
 800d2ee:	6006      	str	r6, [r0, #0]
 800d2f0:	4620      	mov	r0, r4
 800d2f2:	bd70      	pop	{r4, r5, r6, pc}

0800d2f4 <xflow>:
 800d2f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d2f6:	4615      	mov	r5, r2
 800d2f8:	461c      	mov	r4, r3
 800d2fa:	b180      	cbz	r0, 800d31e <xflow+0x2a>
 800d2fc:	4610      	mov	r0, r2
 800d2fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d302:	e9cd 0100 	strd	r0, r1, [sp]
 800d306:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d30a:	4628      	mov	r0, r5
 800d30c:	4621      	mov	r1, r4
 800d30e:	f7f3 f94b 	bl	80005a8 <__aeabi_dmul>
 800d312:	2222      	movs	r2, #34	; 0x22
 800d314:	b003      	add	sp, #12
 800d316:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d31a:	f7ff bfe1 	b.w	800d2e0 <with_errno>
 800d31e:	4610      	mov	r0, r2
 800d320:	4619      	mov	r1, r3
 800d322:	e7ee      	b.n	800d302 <xflow+0xe>

0800d324 <__math_uflow>:
 800d324:	2200      	movs	r2, #0
 800d326:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d32a:	f7ff bfe3 	b.w	800d2f4 <xflow>

0800d32e <__math_oflow>:
 800d32e:	2200      	movs	r2, #0
 800d330:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800d334:	f7ff bfde 	b.w	800d2f4 <xflow>

0800d338 <fabs>:
 800d338:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d33c:	4770      	bx	lr

0800d33e <finite>:
 800d33e:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800d342:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d346:	0fc0      	lsrs	r0, r0, #31
 800d348:	4770      	bx	lr
 800d34a:	0000      	movs	r0, r0
 800d34c:	0000      	movs	r0, r0
	...

0800d350 <scalbn>:
 800d350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d352:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800d356:	4604      	mov	r4, r0
 800d358:	460d      	mov	r5, r1
 800d35a:	4617      	mov	r7, r2
 800d35c:	460b      	mov	r3, r1
 800d35e:	b996      	cbnz	r6, 800d386 <scalbn+0x36>
 800d360:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d364:	4303      	orrs	r3, r0
 800d366:	d039      	beq.n	800d3dc <scalbn+0x8c>
 800d368:	4b33      	ldr	r3, [pc, #204]	; (800d438 <scalbn+0xe8>)
 800d36a:	2200      	movs	r2, #0
 800d36c:	f7f3 f91c 	bl	80005a8 <__aeabi_dmul>
 800d370:	4b32      	ldr	r3, [pc, #200]	; (800d43c <scalbn+0xec>)
 800d372:	429f      	cmp	r7, r3
 800d374:	4604      	mov	r4, r0
 800d376:	460d      	mov	r5, r1
 800d378:	da0f      	bge.n	800d39a <scalbn+0x4a>
 800d37a:	a32b      	add	r3, pc, #172	; (adr r3, 800d428 <scalbn+0xd8>)
 800d37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d380:	f7f3 f912 	bl	80005a8 <__aeabi_dmul>
 800d384:	e006      	b.n	800d394 <scalbn+0x44>
 800d386:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800d38a:	4296      	cmp	r6, r2
 800d38c:	d10a      	bne.n	800d3a4 <scalbn+0x54>
 800d38e:	4602      	mov	r2, r0
 800d390:	f7f2 ff54 	bl	800023c <__adddf3>
 800d394:	4604      	mov	r4, r0
 800d396:	460d      	mov	r5, r1
 800d398:	e020      	b.n	800d3dc <scalbn+0x8c>
 800d39a:	460b      	mov	r3, r1
 800d39c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d3a0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800d3a4:	19b9      	adds	r1, r7, r6
 800d3a6:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800d3aa:	4291      	cmp	r1, r2
 800d3ac:	dd0e      	ble.n	800d3cc <scalbn+0x7c>
 800d3ae:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800d3b2:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800d3b6:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800d3ba:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800d3be:	a31c      	add	r3, pc, #112	; (adr r3, 800d430 <scalbn+0xe0>)
 800d3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c4:	481e      	ldr	r0, [pc, #120]	; (800d440 <scalbn+0xf0>)
 800d3c6:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800d3ca:	e7d9      	b.n	800d380 <scalbn+0x30>
 800d3cc:	2900      	cmp	r1, #0
 800d3ce:	dd08      	ble.n	800d3e2 <scalbn+0x92>
 800d3d0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d3d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d3d8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800d3dc:	4620      	mov	r0, r4
 800d3de:	4629      	mov	r1, r5
 800d3e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3e2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800d3e6:	da12      	bge.n	800d40e <scalbn+0xbe>
 800d3e8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d3ec:	429f      	cmp	r7, r3
 800d3ee:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800d3f2:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800d3f6:	dcdc      	bgt.n	800d3b2 <scalbn+0x62>
 800d3f8:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800d3fc:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800d400:	a309      	add	r3, pc, #36	; (adr r3, 800d428 <scalbn+0xd8>)
 800d402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d406:	480f      	ldr	r0, [pc, #60]	; (800d444 <scalbn+0xf4>)
 800d408:	f041 011f 	orr.w	r1, r1, #31
 800d40c:	e7b8      	b.n	800d380 <scalbn+0x30>
 800d40e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d412:	3136      	adds	r1, #54	; 0x36
 800d414:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d418:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800d41c:	4620      	mov	r0, r4
 800d41e:	4b0a      	ldr	r3, [pc, #40]	; (800d448 <scalbn+0xf8>)
 800d420:	4629      	mov	r1, r5
 800d422:	2200      	movs	r2, #0
 800d424:	e7ac      	b.n	800d380 <scalbn+0x30>
 800d426:	bf00      	nop
 800d428:	c2f8f359 	.word	0xc2f8f359
 800d42c:	01a56e1f 	.word	0x01a56e1f
 800d430:	8800759c 	.word	0x8800759c
 800d434:	7e37e43c 	.word	0x7e37e43c
 800d438:	43500000 	.word	0x43500000
 800d43c:	ffff3cb0 	.word	0xffff3cb0
 800d440:	8800759c 	.word	0x8800759c
 800d444:	c2f8f359 	.word	0xc2f8f359
 800d448:	3c900000 	.word	0x3c900000

0800d44c <_init>:
 800d44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d44e:	bf00      	nop
 800d450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d452:	bc08      	pop	{r3}
 800d454:	469e      	mov	lr, r3
 800d456:	4770      	bx	lr

0800d458 <_fini>:
 800d458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d45a:	bf00      	nop
 800d45c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d45e:	bc08      	pop	{r3}
 800d460:	469e      	mov	lr, r3
 800d462:	4770      	bx	lr


Floodnet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a71c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a08  0800a860  0800a860  0001a860  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b268  0800b268  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b268  0800b268  0001b268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b270  0800b270  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b270  0800b270  0001b270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b274  0800b274  0001b274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  0800b278  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000684  200000b8  0800b330  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000073c  0800b330  0002073c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e2  2**0
                  CONTENTS, READONLY
 13 .debug_info   000203f1  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000046ad  00000000  00000000  00040516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002040  00000000  00000000  00044bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000018cd  00000000  00000000  00046c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000214c6  00000000  00000000  000484d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027e1d  00000000  00000000  0006999b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2ddd  00000000  00000000  000917b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000097dc  00000000  00000000  00154598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0015dd74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000b8 	.word	0x200000b8
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a844 	.word	0x0800a844

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000bc 	.word	0x200000bc
 800017c:	0800a844 	.word	0x0800a844

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2uiz>:
 8000b08:	004a      	lsls	r2, r1, #1
 8000b0a:	d211      	bcs.n	8000b30 <__aeabi_d2uiz+0x28>
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d211      	bcs.n	8000b36 <__aeabi_d2uiz+0x2e>
 8000b12:	d50d      	bpl.n	8000b30 <__aeabi_d2uiz+0x28>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d40e      	bmi.n	8000b3c <__aeabi_d2uiz+0x34>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_d2uiz+0x3a>
 8000b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0000 	mov.w	r0, #0
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_frsub>:
 8000b48:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b4c:	e002      	b.n	8000b54 <__addsf3>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_fsub>:
 8000b50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b54 <__addsf3>:
 8000b54:	0042      	lsls	r2, r0, #1
 8000b56:	bf1f      	itttt	ne
 8000b58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b5c:	ea92 0f03 	teqne	r2, r3
 8000b60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b68:	d06a      	beq.n	8000c40 <__addsf3+0xec>
 8000b6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b72:	bfc1      	itttt	gt
 8000b74:	18d2      	addgt	r2, r2, r3
 8000b76:	4041      	eorgt	r1, r0
 8000b78:	4048      	eorgt	r0, r1
 8000b7a:	4041      	eorgt	r1, r0
 8000b7c:	bfb8      	it	lt
 8000b7e:	425b      	neglt	r3, r3
 8000b80:	2b19      	cmp	r3, #25
 8000b82:	bf88      	it	hi
 8000b84:	4770      	bxhi	lr
 8000b86:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b9e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4249      	negne	r1, r1
 8000ba6:	ea92 0f03 	teq	r2, r3
 8000baa:	d03f      	beq.n	8000c2c <__addsf3+0xd8>
 8000bac:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bb4:	eb10 000c 	adds.w	r0, r0, ip
 8000bb8:	f1c3 0320 	rsb	r3, r3, #32
 8000bbc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bc4:	d502      	bpl.n	8000bcc <__addsf3+0x78>
 8000bc6:	4249      	negs	r1, r1
 8000bc8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bcc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd0:	d313      	bcc.n	8000bfa <__addsf3+0xa6>
 8000bd2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bd6:	d306      	bcc.n	8000be6 <__addsf3+0x92>
 8000bd8:	0840      	lsrs	r0, r0, #1
 8000bda:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bde:	f102 0201 	add.w	r2, r2, #1
 8000be2:	2afe      	cmp	r2, #254	; 0xfe
 8000be4:	d251      	bcs.n	8000c8a <__addsf3+0x136>
 8000be6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bee:	bf08      	it	eq
 8000bf0:	f020 0001 	biceq.w	r0, r0, #1
 8000bf4:	ea40 0003 	orr.w	r0, r0, r3
 8000bf8:	4770      	bx	lr
 8000bfa:	0049      	lsls	r1, r1, #1
 8000bfc:	eb40 0000 	adc.w	r0, r0, r0
 8000c00:	3a01      	subs	r2, #1
 8000c02:	bf28      	it	cs
 8000c04:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c08:	d2ed      	bcs.n	8000be6 <__addsf3+0x92>
 8000c0a:	fab0 fc80 	clz	ip, r0
 8000c0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c12:	ebb2 020c 	subs.w	r2, r2, ip
 8000c16:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c1a:	bfaa      	itet	ge
 8000c1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c20:	4252      	neglt	r2, r2
 8000c22:	4318      	orrge	r0, r3
 8000c24:	bfbc      	itt	lt
 8000c26:	40d0      	lsrlt	r0, r2
 8000c28:	4318      	orrlt	r0, r3
 8000c2a:	4770      	bx	lr
 8000c2c:	f092 0f00 	teq	r2, #0
 8000c30:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c34:	bf06      	itte	eq
 8000c36:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c3a:	3201      	addeq	r2, #1
 8000c3c:	3b01      	subne	r3, #1
 8000c3e:	e7b5      	b.n	8000bac <__addsf3+0x58>
 8000c40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c48:	bf18      	it	ne
 8000c4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c4e:	d021      	beq.n	8000c94 <__addsf3+0x140>
 8000c50:	ea92 0f03 	teq	r2, r3
 8000c54:	d004      	beq.n	8000c60 <__addsf3+0x10c>
 8000c56:	f092 0f00 	teq	r2, #0
 8000c5a:	bf08      	it	eq
 8000c5c:	4608      	moveq	r0, r1
 8000c5e:	4770      	bx	lr
 8000c60:	ea90 0f01 	teq	r0, r1
 8000c64:	bf1c      	itt	ne
 8000c66:	2000      	movne	r0, #0
 8000c68:	4770      	bxne	lr
 8000c6a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c6e:	d104      	bne.n	8000c7a <__addsf3+0x126>
 8000c70:	0040      	lsls	r0, r0, #1
 8000c72:	bf28      	it	cs
 8000c74:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c78:	4770      	bx	lr
 8000c7a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c7e:	bf3c      	itt	cc
 8000c80:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bxcc	lr
 8000c86:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c8a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c92:	4770      	bx	lr
 8000c94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c98:	bf16      	itet	ne
 8000c9a:	4608      	movne	r0, r1
 8000c9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca0:	4601      	movne	r1, r0
 8000ca2:	0242      	lsls	r2, r0, #9
 8000ca4:	bf06      	itte	eq
 8000ca6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000caa:	ea90 0f01 	teqeq	r0, r1
 8000cae:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cb2:	4770      	bx	lr

08000cb4 <__aeabi_ui2f>:
 8000cb4:	f04f 0300 	mov.w	r3, #0
 8000cb8:	e004      	b.n	8000cc4 <__aeabi_i2f+0x8>
 8000cba:	bf00      	nop

08000cbc <__aeabi_i2f>:
 8000cbc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc0:	bf48      	it	mi
 8000cc2:	4240      	negmi	r0, r0
 8000cc4:	ea5f 0c00 	movs.w	ip, r0
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd0:	4601      	mov	r1, r0
 8000cd2:	f04f 0000 	mov.w	r0, #0
 8000cd6:	e01c      	b.n	8000d12 <__aeabi_l2f+0x2a>

08000cd8 <__aeabi_ul2f>:
 8000cd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cdc:	bf08      	it	eq
 8000cde:	4770      	bxeq	lr
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	e00a      	b.n	8000cfc <__aeabi_l2f+0x14>
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_l2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cf4:	d502      	bpl.n	8000cfc <__aeabi_l2f+0x14>
 8000cf6:	4240      	negs	r0, r0
 8000cf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cfc:	ea5f 0c01 	movs.w	ip, r1
 8000d00:	bf02      	ittt	eq
 8000d02:	4684      	moveq	ip, r0
 8000d04:	4601      	moveq	r1, r0
 8000d06:	2000      	moveq	r0, #0
 8000d08:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d0c:	bf08      	it	eq
 8000d0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d12:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d16:	fabc f28c 	clz	r2, ip
 8000d1a:	3a08      	subs	r2, #8
 8000d1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d20:	db10      	blt.n	8000d44 <__aeabi_l2f+0x5c>
 8000d22:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d26:	4463      	add	r3, ip
 8000d28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d34:	fa20 f202 	lsr.w	r2, r0, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	f020 0001 	biceq.w	r0, r0, #1
 8000d42:	4770      	bx	lr
 8000d44:	f102 0220 	add.w	r2, r2, #32
 8000d48:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d54:	fa21 f202 	lsr.w	r2, r1, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d62:	4770      	bx	lr

08000d64 <__aeabi_f2uiz>:
 8000d64:	0042      	lsls	r2, r0, #1
 8000d66:	d20e      	bcs.n	8000d86 <__aeabi_f2uiz+0x22>
 8000d68:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d6c:	d30b      	bcc.n	8000d86 <__aeabi_f2uiz+0x22>
 8000d6e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d72:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d76:	d409      	bmi.n	8000d8c <__aeabi_f2uiz+0x28>
 8000d78:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d80:	fa23 f002 	lsr.w	r0, r3, r2
 8000d84:	4770      	bx	lr
 8000d86:	f04f 0000 	mov.w	r0, #0
 8000d8a:	4770      	bx	lr
 8000d8c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d90:	d101      	bne.n	8000d96 <__aeabi_f2uiz+0x32>
 8000d92:	0242      	lsls	r2, r0, #9
 8000d94:	d102      	bne.n	8000d9c <__aeabi_f2uiz+0x38>
 8000d96:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9a:	4770      	bx	lr
 8000d9c:	f04f 0000 	mov.w	r0, #0
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop

08000da4 <__aeabi_uldivmod>:
 8000da4:	b953      	cbnz	r3, 8000dbc <__aeabi_uldivmod+0x18>
 8000da6:	b94a      	cbnz	r2, 8000dbc <__aeabi_uldivmod+0x18>
 8000da8:	2900      	cmp	r1, #0
 8000daa:	bf08      	it	eq
 8000dac:	2800      	cmpeq	r0, #0
 8000dae:	bf1c      	itt	ne
 8000db0:	f04f 31ff 	movne.w	r1, #4294967295
 8000db4:	f04f 30ff 	movne.w	r0, #4294967295
 8000db8:	f000 b970 	b.w	800109c <__aeabi_idiv0>
 8000dbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dc4:	f000 f806 	bl	8000dd4 <__udivmoddi4>
 8000dc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dd0:	b004      	add	sp, #16
 8000dd2:	4770      	bx	lr

08000dd4 <__udivmoddi4>:
 8000dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd8:	9e08      	ldr	r6, [sp, #32]
 8000dda:	460d      	mov	r5, r1
 8000ddc:	4604      	mov	r4, r0
 8000dde:	460f      	mov	r7, r1
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d14a      	bne.n	8000e7a <__udivmoddi4+0xa6>
 8000de4:	428a      	cmp	r2, r1
 8000de6:	4694      	mov	ip, r2
 8000de8:	d965      	bls.n	8000eb6 <__udivmoddi4+0xe2>
 8000dea:	fab2 f382 	clz	r3, r2
 8000dee:	b143      	cbz	r3, 8000e02 <__udivmoddi4+0x2e>
 8000df0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df4:	f1c3 0220 	rsb	r2, r3, #32
 8000df8:	409f      	lsls	r7, r3
 8000dfa:	fa20 f202 	lsr.w	r2, r0, r2
 8000dfe:	4317      	orrs	r7, r2
 8000e00:	409c      	lsls	r4, r3
 8000e02:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e06:	fa1f f58c 	uxth.w	r5, ip
 8000e0a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e0e:	0c22      	lsrs	r2, r4, #16
 8000e10:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e14:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e18:	fb01 f005 	mul.w	r0, r1, r5
 8000e1c:	4290      	cmp	r0, r2
 8000e1e:	d90a      	bls.n	8000e36 <__udivmoddi4+0x62>
 8000e20:	eb1c 0202 	adds.w	r2, ip, r2
 8000e24:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e28:	f080 811b 	bcs.w	8001062 <__udivmoddi4+0x28e>
 8000e2c:	4290      	cmp	r0, r2
 8000e2e:	f240 8118 	bls.w	8001062 <__udivmoddi4+0x28e>
 8000e32:	3902      	subs	r1, #2
 8000e34:	4462      	add	r2, ip
 8000e36:	1a12      	subs	r2, r2, r0
 8000e38:	b2a4      	uxth	r4, r4
 8000e3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e42:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e46:	fb00 f505 	mul.w	r5, r0, r5
 8000e4a:	42a5      	cmp	r5, r4
 8000e4c:	d90a      	bls.n	8000e64 <__udivmoddi4+0x90>
 8000e4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e52:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e56:	f080 8106 	bcs.w	8001066 <__udivmoddi4+0x292>
 8000e5a:	42a5      	cmp	r5, r4
 8000e5c:	f240 8103 	bls.w	8001066 <__udivmoddi4+0x292>
 8000e60:	4464      	add	r4, ip
 8000e62:	3802      	subs	r0, #2
 8000e64:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	b11e      	cbz	r6, 8000e76 <__udivmoddi4+0xa2>
 8000e6e:	40dc      	lsrs	r4, r3
 8000e70:	2300      	movs	r3, #0
 8000e72:	e9c6 4300 	strd	r4, r3, [r6]
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0xbc>
 8000e7e:	2e00      	cmp	r6, #0
 8000e80:	f000 80ec 	beq.w	800105c <__udivmoddi4+0x288>
 8000e84:	2100      	movs	r1, #0
 8000e86:	e9c6 0500 	strd	r0, r5, [r6]
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e90:	fab3 f183 	clz	r1, r3
 8000e94:	2900      	cmp	r1, #0
 8000e96:	d149      	bne.n	8000f2c <__udivmoddi4+0x158>
 8000e98:	42ab      	cmp	r3, r5
 8000e9a:	d302      	bcc.n	8000ea2 <__udivmoddi4+0xce>
 8000e9c:	4282      	cmp	r2, r0
 8000e9e:	f200 80f7 	bhi.w	8001090 <__udivmoddi4+0x2bc>
 8000ea2:	1a84      	subs	r4, r0, r2
 8000ea4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	4617      	mov	r7, r2
 8000eac:	2e00      	cmp	r6, #0
 8000eae:	d0e2      	beq.n	8000e76 <__udivmoddi4+0xa2>
 8000eb0:	e9c6 4700 	strd	r4, r7, [r6]
 8000eb4:	e7df      	b.n	8000e76 <__udivmoddi4+0xa2>
 8000eb6:	b902      	cbnz	r2, 8000eba <__udivmoddi4+0xe6>
 8000eb8:	deff      	udf	#255	; 0xff
 8000eba:	fab2 f382 	clz	r3, r2
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f040 808f 	bne.w	8000fe2 <__udivmoddi4+0x20e>
 8000ec4:	1a8a      	subs	r2, r1, r2
 8000ec6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eca:	fa1f fe8c 	uxth.w	lr, ip
 8000ece:	2101      	movs	r1, #1
 8000ed0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ed4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ed8:	0c22      	lsrs	r2, r4, #16
 8000eda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ede:	fb0e f005 	mul.w	r0, lr, r5
 8000ee2:	4290      	cmp	r0, r2
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x124>
 8000ee6:	eb1c 0202 	adds.w	r2, ip, r2
 8000eea:	f105 38ff 	add.w	r8, r5, #4294967295
 8000eee:	d202      	bcs.n	8000ef6 <__udivmoddi4+0x122>
 8000ef0:	4290      	cmp	r0, r2
 8000ef2:	f200 80ca 	bhi.w	800108a <__udivmoddi4+0x2b6>
 8000ef6:	4645      	mov	r5, r8
 8000ef8:	1a12      	subs	r2, r2, r0
 8000efa:	b2a4      	uxth	r4, r4
 8000efc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f00:	fb07 2210 	mls	r2, r7, r0, r2
 8000f04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f08:	fb0e fe00 	mul.w	lr, lr, r0
 8000f0c:	45a6      	cmp	lr, r4
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x14e>
 8000f10:	eb1c 0404 	adds.w	r4, ip, r4
 8000f14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f18:	d202      	bcs.n	8000f20 <__udivmoddi4+0x14c>
 8000f1a:	45a6      	cmp	lr, r4
 8000f1c:	f200 80ba 	bhi.w	8001094 <__udivmoddi4+0x2c0>
 8000f20:	4610      	mov	r0, r2
 8000f22:	eba4 040e 	sub.w	r4, r4, lr
 8000f26:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f2a:	e79f      	b.n	8000e6c <__udivmoddi4+0x98>
 8000f2c:	f1c1 0720 	rsb	r7, r1, #32
 8000f30:	408b      	lsls	r3, r1
 8000f32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f3a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f3e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f42:	40fd      	lsrs	r5, r7
 8000f44:	4323      	orrs	r3, r4
 8000f46:	fa00 f901 	lsl.w	r9, r0, r1
 8000f4a:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000f4e:	fa1f fe8c 	uxth.w	lr, ip
 8000f52:	fbb5 f8f0 	udiv	r8, r5, r0
 8000f56:	0c1c      	lsrs	r4, r3, #16
 8000f58:	fb00 5518 	mls	r5, r0, r8, r5
 8000f5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f60:	fb08 f50e 	mul.w	r5, r8, lr
 8000f64:	42a5      	cmp	r5, r4
 8000f66:	fa02 f201 	lsl.w	r2, r2, r1
 8000f6a:	d90b      	bls.n	8000f84 <__udivmoddi4+0x1b0>
 8000f6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f74:	f080 8087 	bcs.w	8001086 <__udivmoddi4+0x2b2>
 8000f78:	42a5      	cmp	r5, r4
 8000f7a:	f240 8084 	bls.w	8001086 <__udivmoddi4+0x2b2>
 8000f7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f82:	4464      	add	r4, ip
 8000f84:	1b64      	subs	r4, r4, r5
 8000f86:	b29d      	uxth	r5, r3
 8000f88:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f8c:	fb00 4413 	mls	r4, r0, r3, r4
 8000f90:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f94:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f98:	45a6      	cmp	lr, r4
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x1da>
 8000f9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000fa0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fa4:	d26b      	bcs.n	800107e <__udivmoddi4+0x2aa>
 8000fa6:	45a6      	cmp	lr, r4
 8000fa8:	d969      	bls.n	800107e <__udivmoddi4+0x2aa>
 8000faa:	3b02      	subs	r3, #2
 8000fac:	4464      	add	r4, ip
 8000fae:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000fb2:	fba0 8302 	umull	r8, r3, r0, r2
 8000fb6:	eba4 040e 	sub.w	r4, r4, lr
 8000fba:	429c      	cmp	r4, r3
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	461d      	mov	r5, r3
 8000fc0:	d355      	bcc.n	800106e <__udivmoddi4+0x29a>
 8000fc2:	d052      	beq.n	800106a <__udivmoddi4+0x296>
 8000fc4:	b156      	cbz	r6, 8000fdc <__udivmoddi4+0x208>
 8000fc6:	ebb9 030e 	subs.w	r3, r9, lr
 8000fca:	eb64 0405 	sbc.w	r4, r4, r5
 8000fce:	fa04 f707 	lsl.w	r7, r4, r7
 8000fd2:	40cb      	lsrs	r3, r1
 8000fd4:	40cc      	lsrs	r4, r1
 8000fd6:	431f      	orrs	r7, r3
 8000fd8:	e9c6 7400 	strd	r7, r4, [r6]
 8000fdc:	2100      	movs	r1, #0
 8000fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe2:	f1c3 0120 	rsb	r1, r3, #32
 8000fe6:	fa02 fc03 	lsl.w	ip, r2, r3
 8000fea:	fa20 f201 	lsr.w	r2, r0, r1
 8000fee:	fa25 f101 	lsr.w	r1, r5, r1
 8000ff2:	409d      	lsls	r5, r3
 8000ff4:	432a      	orrs	r2, r5
 8000ff6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ffa:	fa1f fe8c 	uxth.w	lr, ip
 8000ffe:	fbb1 f0f7 	udiv	r0, r1, r7
 8001002:	fb07 1510 	mls	r5, r7, r0, r1
 8001006:	0c11      	lsrs	r1, r2, #16
 8001008:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800100c:	fb00 f50e 	mul.w	r5, r0, lr
 8001010:	428d      	cmp	r5, r1
 8001012:	fa04 f403 	lsl.w	r4, r4, r3
 8001016:	d908      	bls.n	800102a <__udivmoddi4+0x256>
 8001018:	eb1c 0101 	adds.w	r1, ip, r1
 800101c:	f100 38ff 	add.w	r8, r0, #4294967295
 8001020:	d22f      	bcs.n	8001082 <__udivmoddi4+0x2ae>
 8001022:	428d      	cmp	r5, r1
 8001024:	d92d      	bls.n	8001082 <__udivmoddi4+0x2ae>
 8001026:	3802      	subs	r0, #2
 8001028:	4461      	add	r1, ip
 800102a:	1b49      	subs	r1, r1, r5
 800102c:	b292      	uxth	r2, r2
 800102e:	fbb1 f5f7 	udiv	r5, r1, r7
 8001032:	fb07 1115 	mls	r1, r7, r5, r1
 8001036:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800103a:	fb05 f10e 	mul.w	r1, r5, lr
 800103e:	4291      	cmp	r1, r2
 8001040:	d908      	bls.n	8001054 <__udivmoddi4+0x280>
 8001042:	eb1c 0202 	adds.w	r2, ip, r2
 8001046:	f105 38ff 	add.w	r8, r5, #4294967295
 800104a:	d216      	bcs.n	800107a <__udivmoddi4+0x2a6>
 800104c:	4291      	cmp	r1, r2
 800104e:	d914      	bls.n	800107a <__udivmoddi4+0x2a6>
 8001050:	3d02      	subs	r5, #2
 8001052:	4462      	add	r2, ip
 8001054:	1a52      	subs	r2, r2, r1
 8001056:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800105a:	e739      	b.n	8000ed0 <__udivmoddi4+0xfc>
 800105c:	4631      	mov	r1, r6
 800105e:	4630      	mov	r0, r6
 8001060:	e709      	b.n	8000e76 <__udivmoddi4+0xa2>
 8001062:	4639      	mov	r1, r7
 8001064:	e6e7      	b.n	8000e36 <__udivmoddi4+0x62>
 8001066:	4610      	mov	r0, r2
 8001068:	e6fc      	b.n	8000e64 <__udivmoddi4+0x90>
 800106a:	45c1      	cmp	r9, r8
 800106c:	d2aa      	bcs.n	8000fc4 <__udivmoddi4+0x1f0>
 800106e:	ebb8 0e02 	subs.w	lr, r8, r2
 8001072:	eb63 050c 	sbc.w	r5, r3, ip
 8001076:	3801      	subs	r0, #1
 8001078:	e7a4      	b.n	8000fc4 <__udivmoddi4+0x1f0>
 800107a:	4645      	mov	r5, r8
 800107c:	e7ea      	b.n	8001054 <__udivmoddi4+0x280>
 800107e:	4603      	mov	r3, r0
 8001080:	e795      	b.n	8000fae <__udivmoddi4+0x1da>
 8001082:	4640      	mov	r0, r8
 8001084:	e7d1      	b.n	800102a <__udivmoddi4+0x256>
 8001086:	46d0      	mov	r8, sl
 8001088:	e77c      	b.n	8000f84 <__udivmoddi4+0x1b0>
 800108a:	3d02      	subs	r5, #2
 800108c:	4462      	add	r2, ip
 800108e:	e733      	b.n	8000ef8 <__udivmoddi4+0x124>
 8001090:	4608      	mov	r0, r1
 8001092:	e70b      	b.n	8000eac <__udivmoddi4+0xd8>
 8001094:	4464      	add	r4, ip
 8001096:	3802      	subs	r0, #2
 8001098:	e743      	b.n	8000f22 <__udivmoddi4+0x14e>
 800109a:	bf00      	nop

0800109c <__aeabi_idiv0>:
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop

080010a0 <ReadADCChannel>:
#define CONVERSION_POLL_TIME 10

static uint16_t ReadADCChannel(uint32_t Channel);

static uint16_t ReadADCChannel(uint32_t Channel)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	uint16_t result;
	if (HAL_ADCEx_Calibration_Start(Get_AdcHandle()) != HAL_OK) {
 80010a8:	f000 fe0c 	bl	8001cc4 <Get_AdcHandle>
 80010ac:	4603      	mov	r3, r0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f002 fa01 	bl	80034b6 <HAL_ADCEx_Calibration_Start>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <ReadADCChannel+0x1e>
	    Error_Handler();
 80010ba:	f000 fe21 	bl	8001d00 <Error_Handler>
	  }
	ADC_ChannelConfTypeDef sConfig = {0};
 80010be:	f107 0308 	add.w	r3, r7, #8
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
	sConfig.Channel = Channel;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(Get_AdcHandle(), &sConfig) != HAL_OK) {
 80010d6:	f000 fdf5 	bl	8001cc4 <Get_AdcHandle>
 80010da:	4602      	mov	r2, r0
 80010dc:	f107 0308 	add.w	r3, r7, #8
 80010e0:	4619      	mov	r1, r3
 80010e2:	4610      	mov	r0, r2
 80010e4:	f001 fefa 	bl	8002edc <HAL_ADC_ConfigChannel>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <ReadADCChannel+0x52>
		Error_Handler();
 80010ee:	f000 fe07 	bl	8001d00 <Error_Handler>
	}
	if (HAL_ADC_Start(Get_AdcHandle()) != HAL_OK) {
 80010f2:	f000 fde7 	bl	8001cc4 <Get_AdcHandle>
 80010f6:	4603      	mov	r3, r0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f001 fdd3 	bl	8002ca4 <HAL_ADC_Start>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <ReadADCChannel+0x68>
		Error_Handler();
 8001104:	f000 fdfc 	bl	8001d00 <Error_Handler>
	}
	HAL_ADC_PollForConversion(Get_AdcHandle(), HAL_MAX_DELAY);
 8001108:	f000 fddc 	bl	8001cc4 <Get_AdcHandle>
 800110c:	4603      	mov	r3, r0
 800110e:	f04f 31ff 	mov.w	r1, #4294967295
 8001112:	4618      	mov	r0, r3
 8001114:	f001 fe3e 	bl	8002d94 <HAL_ADC_PollForConversion>
	HAL_ADC_Stop(Get_AdcHandle());
 8001118:	f000 fdd4 	bl	8001cc4 <Get_AdcHandle>
 800111c:	4603      	mov	r3, r0
 800111e:	4618      	mov	r0, r3
 8001120:	f001 fe06 	bl	8002d30 <HAL_ADC_Stop>
	if((HAL_ADC_GetState(Get_AdcHandle()) & HAL_ADC_STATE_EOC_REG) == HAL_ADC_STATE_EOC_REG)
 8001124:	f000 fdce 	bl	8001cc4 <Get_AdcHandle>
 8001128:	4603      	mov	r3, r0
 800112a:	4618      	mov	r0, r3
 800112c:	f002 f80e 	bl	800314c <HAL_ADC_GetState>
 8001130:	4603      	mov	r3, r0
 8001132:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001136:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800113a:	d107      	bne.n	800114c <ReadADCChannel+0xac>
	{
		/*##-5- Get the converted value of regular channel  ######################*/
		result = (uint16_t)HAL_ADC_GetValue(Get_AdcHandle());
 800113c:	f000 fdc2 	bl	8001cc4 <Get_AdcHandle>
 8001140:	4603      	mov	r3, r0
 8001142:	4618      	mov	r0, r3
 8001144:	f001 febd 	bl	8002ec2 <HAL_ADC_GetValue>
 8001148:	4603      	mov	r3, r0
 800114a:	82fb      	strh	r3, [r7, #22]
	}
	return result;
 800114c:	8afb      	ldrh	r3, [r7, #22]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <AdcRead_VBatt>:


uint16_t AdcRead_VBatt(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, ADC_SW_Pin, GPIO_PIN_RESET);
 800115c:	2200      	movs	r2, #0
 800115e:	2180      	movs	r1, #128	; 0x80
 8001160:	480a      	ldr	r0, [pc, #40]	; (800118c <AdcRead_VBatt+0x34>)
 8001162:	f002 fd9d 	bl	8003ca0 <HAL_GPIO_WritePin>
	adcResult = ReadADCChannel(ADC_CHANNEL_2);
 8001166:	480a      	ldr	r0, [pc, #40]	; (8001190 <AdcRead_VBatt+0x38>)
 8001168:	f7ff ff9a 	bl	80010a0 <ReadADCChannel>
 800116c:	4603      	mov	r3, r0
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff fda0 	bl	8000cb4 <__aeabi_ui2f>
 8001174:	4603      	mov	r3, r0
 8001176:	4a07      	ldr	r2, [pc, #28]	; (8001194 <AdcRead_VBatt+0x3c>)
 8001178:	6013      	str	r3, [r2, #0]
	return adcResult;
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <AdcRead_VBatt+0x3c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff fdf0 	bl	8000d64 <__aeabi_f2uiz>
 8001184:	4603      	mov	r3, r0
 8001186:	b29b      	uxth	r3, r3
}
 8001188:	4618      	mov	r0, r3
 800118a:	bd80      	pop	{r7, pc}
 800118c:	48000400 	.word	0x48000400
 8001190:	08000004 	.word	0x08000004
 8001194:	200000d4 	.word	0x200000d4

08001198 <commandReadDeviceId>:


char DataBuffer[200];

void commandReadDeviceId(char *data)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b096      	sub	sp, #88	; 0x58
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Read MCU Id, 32-bit access */
  uint8_t i;
  char DeviceId[50];
  uint8_t serialNumber[12]={0};
 80011a0:	2300      	movs	r3, #0
 80011a2:	61bb      	str	r3, [r7, #24]
 80011a4:	f107 031c 	add.w	r3, r7, #28
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = HAL_GetUIDw0();
 80011ae:	f001 fa55 	bl	800265c <HAL_GetUIDw0>
 80011b2:	4603      	mov	r3, r0
 80011b4:	617b      	str	r3, [r7, #20]
  deviceserial1 = HAL_GetUIDw1();
 80011b6:	f001 fa5b 	bl	8002670 <HAL_GetUIDw1>
 80011ba:	4603      	mov	r3, r0
 80011bc:	613b      	str	r3, [r7, #16]
  deviceserial2 = HAL_GetUIDw2();
 80011be:	f001 fa61 	bl	8002684 <HAL_GetUIDw2>
 80011c2:	4603      	mov	r3, r0
 80011c4:	60fb      	str	r3, [r7, #12]
  memset(serialNumber, 0, 12);
 80011c6:	f107 0318 	add.w	r3, r7, #24
 80011ca:	220c      	movs	r2, #12
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f007 fb73 	bl	80088ba <memset>
 80011d4:	697b      	ldr	r3, [r7, #20]
  memcpy(&serialNumber[0], &deviceserial0, 4);
 80011d6:	61bb      	str	r3, [r7, #24]
 80011d8:	693b      	ldr	r3, [r7, #16]
  memcpy(&serialNumber[4], &deviceserial1, 4);
 80011da:	61fb      	str	r3, [r7, #28]
 80011dc:	68fb      	ldr	r3, [r7, #12]
  memcpy(&serialNumber[8], &deviceserial2, 4);
 80011de:	623b      	str	r3, [r7, #32]
  snprintf(DeviceId, sizeof(DeviceId), "OK,STDEVICEID,");
 80011e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e4:	4a1e      	ldr	r2, [pc, #120]	; (8001260 <commandReadDeviceId+0xc8>)
 80011e6:	2132      	movs	r1, #50	; 0x32
 80011e8:	4618      	mov	r0, r3
 80011ea:	f007 facf 	bl	800878c <sniprintf>
  serialPutStr(DeviceId);
 80011ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 fa3e 	bl	8001674 <serialPutStr>
  for(i=0; i<12; i++)
 80011f8:	2300      	movs	r3, #0
 80011fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80011fe:	e026      	b.n	800124e <commandReadDeviceId+0xb6>
  {
    i < 11 ? snprintf(DeviceId, sizeof(DeviceId), "%x", serialNumber[i]) : snprintf(DeviceId, sizeof(DeviceId), "%d\n", serialNumber[i]);
 8001200:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001204:	2b0a      	cmp	r3, #10
 8001206:	d80c      	bhi.n	8001222 <commandReadDeviceId+0x8a>
 8001208:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800120c:	3358      	adds	r3, #88	; 0x58
 800120e:	443b      	add	r3, r7
 8001210:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8001214:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001218:	4a12      	ldr	r2, [pc, #72]	; (8001264 <commandReadDeviceId+0xcc>)
 800121a:	2132      	movs	r1, #50	; 0x32
 800121c:	f007 fab6 	bl	800878c <sniprintf>
 8001220:	e00b      	b.n	800123a <commandReadDeviceId+0xa2>
 8001222:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001226:	3358      	adds	r3, #88	; 0x58
 8001228:	443b      	add	r3, r7
 800122a:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 800122e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001232:	4a0d      	ldr	r2, [pc, #52]	; (8001268 <commandReadDeviceId+0xd0>)
 8001234:	2132      	movs	r1, #50	; 0x32
 8001236:	f007 faa9 	bl	800878c <sniprintf>
    serialPutStr(DeviceId);
 800123a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800123e:	4618      	mov	r0, r3
 8001240:	f000 fa18 	bl	8001674 <serialPutStr>
  for(i=0; i<12; i++)
 8001244:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001248:	3301      	adds	r3, #1
 800124a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800124e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001252:	2b0b      	cmp	r3, #11
 8001254:	d9d4      	bls.n	8001200 <commandReadDeviceId+0x68>
  }
}
 8001256:	bf00      	nop
 8001258:	bf00      	nop
 800125a:	3758      	adds	r7, #88	; 0x58
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	0800a860 	.word	0x0800a860
 8001264:	0800a870 	.word	0x0800a870
 8001268:	0800a874 	.word	0x0800a874

0800126c <commandReadDeviceBattery>:


void commandReadDeviceBattery(char *data)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]

	 serialPutStr("OK,BATTREAD");
 8001274:	4808      	ldr	r0, [pc, #32]	; (8001298 <commandReadDeviceBattery+0x2c>)
 8001276:	f000 f9fd 	bl	8001674 <serialPutStr>
	 sprintf(DataBuffer,"OK,BATTREAD %d",AdcRead_VBatt());
 800127a:	f7ff ff6d 	bl	8001158 <AdcRead_VBatt>
 800127e:	4603      	mov	r3, r0
 8001280:	461a      	mov	r2, r3
 8001282:	4906      	ldr	r1, [pc, #24]	; (800129c <commandReadDeviceBattery+0x30>)
 8001284:	4806      	ldr	r0, [pc, #24]	; (80012a0 <commandReadDeviceBattery+0x34>)
 8001286:	f007 fab5 	bl	80087f4 <siprintf>
	 serialPutStr(DataBuffer);
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <commandReadDeviceBattery+0x34>)
 800128c:	f000 f9f2 	bl	8001674 <serialPutStr>
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	0800a878 	.word	0x0800a878
 800129c:	0800a884 	.word	0x0800a884
 80012a0:	200000d8 	.word	0x200000d8

080012a4 <commandInvalid>:

void commandInvalid(char *data)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  serialPutStr("ERROR,Invalid Command Handler!\n");
 80012ac:	4803      	ldr	r0, [pc, #12]	; (80012bc <commandInvalid+0x18>)
 80012ae:	f000 f9e1 	bl	8001674 <serialPutStr>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	0800a894 	.word	0x0800a894

080012c0 <commandGetTime>:

char dateTime[100];
void commandGetTime(char *data)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]


}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr

080012d2 <commandGetDate>:

void commandGetDate(char *data)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]

}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr

080012e4 <commandGetDistance>:

char sonarBuffer[100];
void commandGetDistance(char *data)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(MB_PWR_GPIO_Port, MB_PWR_Pin, GPIO_PIN_SET);
 80012ec:	2201      	movs	r2, #1
 80012ee:	2101      	movs	r1, #1
 80012f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f4:	f002 fcd4 	bl	8003ca0 <HAL_GPIO_WritePin>
	sprintf(sonarBuffer,"OK,DISTREAD %d",getSonarDistance());
 80012f8:	f000 f812 	bl	8001320 <getSonarDistance>
 80012fc:	4603      	mov	r3, r0
 80012fe:	461a      	mov	r2, r3
 8001300:	4905      	ldr	r1, [pc, #20]	; (8001318 <commandGetDistance+0x34>)
 8001302:	4806      	ldr	r0, [pc, #24]	; (800131c <commandGetDistance+0x38>)
 8001304:	f007 fa76 	bl	80087f4 <siprintf>
	serialPutStr(sonarBuffer);
 8001308:	4804      	ldr	r0, [pc, #16]	; (800131c <commandGetDistance+0x38>)
 800130a:	f000 f9b3 	bl	8001674 <serialPutStr>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	0800a8b4 	.word	0x0800a8b4
 800131c:	200001a0 	.word	0x200001a0

08001320 <getSonarDistance>:
 */

#include "Maxbotix.h"


uint16_t getSonarDistance(void){
 8001320:	b5b0      	push	{r4, r5, r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
	  unsigned char RxBuffer[4];
	  bool newData = false;
 8001326:	2300      	movs	r3, #0
 8001328:	75fb      	strb	r3, [r7, #23]
	  uint16_t dist_mm = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	82bb      	strh	r3, [r7, #20]
	  unsigned char rx;
	  uint8_t tries = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	74fb      	strb	r3, [r7, #19]
	  do {
	    HAL_GPIO_WritePin(MB_CTL_GPIO_Port, MB_CTL_Pin, GPIO_PIN_SET);
 8001332:	2201      	movs	r2, #1
 8001334:	2102      	movs	r1, #2
 8001336:	4844      	ldr	r0, [pc, #272]	; (8001448 <getSonarDistance+0x128>)
 8001338:	f002 fcb2 	bl	8003ca0 <HAL_GPIO_WritePin>
	    HAL_Delay(1); // todo: implement HAL_Delay_Microseconds()
 800133c:	2001      	movs	r0, #1
 800133e:	f001 f969 	bl	8002614 <HAL_Delay>
	    HAL_GPIO_WritePin(MB_CTL_GPIO_Port, MB_CTL_Pin, GPIO_PIN_RESET);
 8001342:	2200      	movs	r2, #0
 8001344:	2102      	movs	r1, #2
 8001346:	4840      	ldr	r0, [pc, #256]	; (8001448 <getSonarDistance+0x128>)
 8001348:	f002 fcaa 	bl	8003ca0 <HAL_GPIO_WritePin>
	    if (HAL_UART_Receive(Get_SonarHandle(), (uint8_t *)&rx, 1, 20) == HAL_OK) {
 800134c:	f000 fcce 	bl	8001cec <Get_SonarHandle>
 8001350:	1df9      	adds	r1, r7, #7
 8001352:	2314      	movs	r3, #20
 8001354:	2201      	movs	r2, #1
 8001356:	f005 f8b3 	bl	80064c0 <HAL_UART_Receive>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d160      	bne.n	8001422 <getSonarDistance+0x102>
	      if ((char)rx == 'R') {
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	2b52      	cmp	r3, #82	; 0x52
 8001364:	d15a      	bne.n	800141c <getSonarDistance+0xfc>
	        if (HAL_UART_Receive(Get_SonarHandle(), (uint8_t *)&RxBuffer, 4, 20) == HAL_OK) {
 8001366:	f000 fcc1 	bl	8001cec <Get_SonarHandle>
 800136a:	f107 0108 	add.w	r1, r7, #8
 800136e:	2314      	movs	r3, #20
 8001370:	2204      	movs	r2, #4
 8001372:	f005 f8a5 	bl	80064c0 <HAL_UART_Receive>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d155      	bne.n	8001428 <getSonarDistance+0x108>
	          if (isdigit(RxBuffer[3])) {
 800137c:	7afb      	ldrb	r3, [r7, #11]
 800137e:	3301      	adds	r3, #1
 8001380:	4a32      	ldr	r2, [pc, #200]	; (800144c <getSonarDistance+0x12c>)
 8001382:	4413      	add	r3, r2
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	f003 0304 	and.w	r3, r3, #4
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <getSonarDistance+0x72>
	            newData = true;
 800138e:	2301      	movs	r3, #1
 8001390:	75fb      	strb	r3, [r7, #23]
	          }
	          if (newData) {
 8001392:	7dfb      	ldrb	r3, [r7, #23]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d047      	beq.n	8001428 <getSonarDistance+0x108>
	            for (int i = 0; i < 4; i++)
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	e035      	b.n	800140a <getSonarDistance+0xea>
	              dist_mm += (RxBuffer[3 - i] - '0') * pow(10, i);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f1c3 0303 	rsb	r3, r3, #3
 80013a4:	3318      	adds	r3, #24
 80013a6:	443b      	add	r3, r7
 80013a8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80013ac:	3b30      	subs	r3, #48	; 0x30
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff f890 	bl	80004d4 <__aeabi_i2d>
 80013b4:	4604      	mov	r4, r0
 80013b6:	460d      	mov	r5, r1
 80013b8:	68f8      	ldr	r0, [r7, #12]
 80013ba:	f7ff f88b 	bl	80004d4 <__aeabi_i2d>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	f04f 0000 	mov.w	r0, #0
 80013c6:	4922      	ldr	r1, [pc, #136]	; (8001450 <getSonarDistance+0x130>)
 80013c8:	f008 fb36 	bl	8009a38 <pow>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	4620      	mov	r0, r4
 80013d2:	4629      	mov	r1, r5
 80013d4:	f7ff f8e8 	bl	80005a8 <__aeabi_dmul>
 80013d8:	4602      	mov	r2, r0
 80013da:	460b      	mov	r3, r1
 80013dc:	4614      	mov	r4, r2
 80013de:	461d      	mov	r5, r3
 80013e0:	8abb      	ldrh	r3, [r7, #20]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff f876 	bl	80004d4 <__aeabi_i2d>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4620      	mov	r0, r4
 80013ee:	4629      	mov	r1, r5
 80013f0:	f7fe ff24 	bl	800023c <__adddf3>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4610      	mov	r0, r2
 80013fa:	4619      	mov	r1, r3
 80013fc:	f7ff fb84 	bl	8000b08 <__aeabi_d2uiz>
 8001400:	4603      	mov	r3, r0
 8001402:	82bb      	strh	r3, [r7, #20]
	            for (int i = 0; i < 4; i++)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	3301      	adds	r3, #1
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2b03      	cmp	r3, #3
 800140e:	ddc6      	ble.n	800139e <getSonarDistance+0x7e>
	            if (dist_mm==0)
 8001410:	8abb      	ldrh	r3, [r7, #20]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d108      	bne.n	8001428 <getSonarDistance+0x108>
	            	newData = false;
 8001416:	2300      	movs	r3, #0
 8001418:	75fb      	strb	r3, [r7, #23]
 800141a:	e005      	b.n	8001428 <getSonarDistance+0x108>
	          }
	        }
	      } else {
	        newData = false;
 800141c:	2300      	movs	r3, #0
 800141e:	75fb      	strb	r3, [r7, #23]
 8001420:	e002      	b.n	8001428 <getSonarDistance+0x108>
	      }
	    } else {
	      tries++;
 8001422:	7cfb      	ldrb	r3, [r7, #19]
 8001424:	3301      	adds	r3, #1
 8001426:	74fb      	strb	r3, [r7, #19]
	    }
	  } while (newData == false && tries < MAX_SONAR_TRIES - 1);
 8001428:	7dfb      	ldrb	r3, [r7, #23]
 800142a:	f083 0301 	eor.w	r3, r3, #1
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <getSonarDistance+0x11c>
 8001434:	7cfb      	ldrb	r3, [r7, #19]
 8001436:	2b03      	cmp	r3, #3
 8001438:	f67f af7b 	bls.w	8001332 <getSonarDistance+0x12>
	  return dist_mm;
 800143c:	8abb      	ldrh	r3, [r7, #20]
}
 800143e:	4618      	mov	r0, r3
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bdb0      	pop	{r4, r5, r7, pc}
 8001446:	bf00      	nop
 8001448:	48000800 	.word	0x48000800
 800144c:	0800b054 	.word	0x0800b054
 8001450:	40240000 	.word	0x40240000

08001454 <SensorReadTask>:
#include <SensorsTask.h>
#include <stdbool.h>


void SensorReadTask(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0

}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr

08001460 <CommandLineBuildCommand>:



static uint16_t commandBuilderIdx = 0;
int CommandLineBuildCommand(char nextChar)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
	/* Don't store any new line characters or spaces. */
	if ((nextChar == '\n') || (nextChar == ' ') || (nextChar == '\t'))
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	2b0a      	cmp	r3, #10
 800146e:	d005      	beq.n	800147c <CommandLineBuildCommand+0x1c>
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	2b20      	cmp	r3, #32
 8001474:	d002      	beq.n	800147c <CommandLineBuildCommand+0x1c>
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	2b09      	cmp	r3, #9
 800147a:	d101      	bne.n	8001480 <CommandLineBuildCommand+0x20>
	{
		return false;
 800147c:	2300      	movs	r3, #0
 800147e:	e02d      	b.n	80014dc <CommandLineBuildCommand+0x7c>
	}
	/* The completed command has been received. Replace the final carriage
	 * return character with a NULL character to help with processing the
	 * command. */
	if (nextChar == '\r')
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	2b0d      	cmp	r3, #13
 8001484:	d10a      	bne.n	800149c <CommandLineBuildCommand+0x3c>
	{
		gCommandBuffer[commandBuilderIdx] = '\0';
 8001486:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <CommandLineBuildCommand+0x88>)
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	461a      	mov	r2, r3
 800148c:	4b17      	ldr	r3, [pc, #92]	; (80014ec <CommandLineBuildCommand+0x8c>)
 800148e:	2100      	movs	r1, #0
 8001490:	5499      	strb	r1, [r3, r2]
		commandBuilderIdx = 0;
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <CommandLineBuildCommand+0x88>)
 8001494:	2200      	movs	r2, #0
 8001496:	801a      	strh	r2, [r3, #0]
		return true;
 8001498:	2301      	movs	r3, #1
 800149a:	e01f      	b.n	80014dc <CommandLineBuildCommand+0x7c>
	}
	/* Convert the incoming character to uppercase. This matches the case
	 * of commands in the command table. Then store the received character
	 * in the command buffer. */
	gCommandBuffer[commandBuilderIdx] = TO_UPPER(nextChar);
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	2b60      	cmp	r3, #96	; 0x60
 80014a0:	d906      	bls.n	80014b0 <CommandLineBuildCommand+0x50>
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	2b7a      	cmp	r3, #122	; 0x7a
 80014a6:	d803      	bhi.n	80014b0 <CommandLineBuildCommand+0x50>
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	3b20      	subs	r3, #32
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	e000      	b.n	80014b2 <CommandLineBuildCommand+0x52>
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	4a0d      	ldr	r2, [pc, #52]	; (80014e8 <CommandLineBuildCommand+0x88>)
 80014b4:	8812      	ldrh	r2, [r2, #0]
 80014b6:	4611      	mov	r1, r2
 80014b8:	4a0c      	ldr	r2, [pc, #48]	; (80014ec <CommandLineBuildCommand+0x8c>)
 80014ba:	5453      	strb	r3, [r2, r1]
	commandBuilderIdx++;
 80014bc:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <CommandLineBuildCommand+0x88>)
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	3301      	adds	r3, #1
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <CommandLineBuildCommand+0x88>)
 80014c6:	801a      	strh	r2, [r3, #0]
	/* If the command is too long, reset the index and process
	 * the current command buffer. */
	if (commandBuilderIdx >= MAX_COMMAND_LEN)
 80014c8:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <CommandLineBuildCommand+0x88>)
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	2b77      	cmp	r3, #119	; 0x77
 80014ce:	d904      	bls.n	80014da <CommandLineBuildCommand+0x7a>
	{
		commandBuilderIdx = 0;
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <CommandLineBuildCommand+0x88>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	801a      	strh	r2, [r3, #0]
		return true;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e000      	b.n	80014dc <CommandLineBuildCommand+0x7c>
	}

	return false;
 80014da:	2300      	movs	r3, #0

}
 80014dc:	4618      	mov	r0, r3
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	2000030c 	.word	0x2000030c
 80014ec:	2000022c 	.word	0x2000022c

080014f0 <CommandLineProcessCommand>:

void CommandLineProcessCommand(char * buffer)
{
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b087      	sub	sp, #28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]

	int idx;
	int CommandFound = false;
 80014f8:	2300      	movs	r3, #0
 80014fa:	613b      	str	r3, [r7, #16]
	//char *Com= strtok(buffer,"+");
	char *Arg = strtok(NULL,"+");
 80014fc:	491e      	ldr	r1, [pc, #120]	; (8001578 <CommandLineProcessCommand+0x88>)
 80014fe:	2000      	movs	r0, #0
 8001500:	f007 f9f6 	bl	80088f0 <strtok>
 8001504:	60f8      	str	r0, [r7, #12]

	/* Search for the command in the command table until it is found or
	 * the end of the table is reached. If the command is found, break
	 * out of the loop. */
	for (idx = 0; gCommandTable[idx].name != NULL; idx++)
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	e020      	b.n	800154e <CommandLineProcessCommand+0x5e>
	{
		if (strncmp(gCommandTable[idx].name, buffer,strlen(gCommandTable[idx].name)) == 0)
 800150c:	4a1b      	ldr	r2, [pc, #108]	; (800157c <CommandLineProcessCommand+0x8c>)
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8001514:	4a19      	ldr	r2, [pc, #100]	; (800157c <CommandLineProcessCommand+0x8c>)
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800151c:	4618      	mov	r0, r3
 800151e:	f7fe fe2f 	bl	8000180 <strlen>
 8001522:	4603      	mov	r3, r0
 8001524:	461a      	mov	r2, r3
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	4620      	mov	r0, r4
 800152a:	f007 f9ce 	bl	80088ca <strncmp>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d109      	bne.n	8001548 <CommandLineProcessCommand+0x58>
		{
			CommandFound = true;
 8001534:	2301      	movs	r3, #1
 8001536:	613b      	str	r3, [r7, #16]
			(*gCommandTable[idx].function)(Arg);
 8001538:	4a10      	ldr	r2, [pc, #64]	; (800157c <CommandLineProcessCommand+0x8c>)
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	4413      	add	r3, r2
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	4798      	blx	r3
			break;
 8001546:	e008      	b.n	800155a <CommandLineProcessCommand+0x6a>
	for (idx = 0; gCommandTable[idx].name != NULL; idx++)
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	3301      	adds	r3, #1
 800154c:	617b      	str	r3, [r7, #20]
 800154e:	4a0b      	ldr	r2, [pc, #44]	; (800157c <CommandLineProcessCommand+0x8c>)
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1d8      	bne.n	800150c <CommandLineProcessCommand+0x1c>
		}
	}
	/* If the command was found, call the command function. Otherwise,
	 * output an error message.*/
	if (CommandFound==false)
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d107      	bne.n	8001570 <CommandLineProcessCommand+0x80>
	{
		snprintf(TerminalMsgBuffer, sizeof(TerminalMsgBuffer), "ERROR,Command not found\n");
 8001560:	4a07      	ldr	r2, [pc, #28]	; (8001580 <CommandLineProcessCommand+0x90>)
 8001562:	2164      	movs	r1, #100	; 0x64
 8001564:	4807      	ldr	r0, [pc, #28]	; (8001584 <CommandLineProcessCommand+0x94>)
 8001566:	f007 f911 	bl	800878c <sniprintf>
		serialPutStr(TerminalMsgBuffer);
 800156a:	4806      	ldr	r0, [pc, #24]	; (8001584 <CommandLineProcessCommand+0x94>)
 800156c:	f000 f882 	bl	8001674 <serialPutStr>
	}
}
 8001570:	bf00      	nop
 8001572:	371c      	adds	r7, #28
 8001574:	46bd      	mov	sp, r7
 8001576:	bd90      	pop	{r4, r7, pc}
 8001578:	0800a8f8 	.word	0x0800a8f8
 800157c:	0800a94c 	.word	0x0800a94c
 8001580:	0800a8fc 	.word	0x0800a8fc
 8001584:	200002a8 	.word	0x200002a8

08001588 <Task_Terminal>:



void Task_Terminal(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
	int tCommandReady = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	607b      	str	r3, [r7, #4]
	char ch;
	if(!initStatus)
 8001592:	4b1c      	ldr	r3, [pc, #112]	; (8001604 <Task_Terminal+0x7c>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	f083 0301 	eor.w	r3, r3, #1
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00c      	beq.n	80015ba <Task_Terminal+0x32>
	{
		CBUF_Init(RxDataBuffer);
 80015a0:	4b19      	ldr	r3, [pc, #100]	; (8001608 <Task_Terminal+0x80>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	705a      	strb	r2, [r3, #1]
 80015a6:	4b18      	ldr	r3, [pc, #96]	; (8001608 <Task_Terminal+0x80>)
 80015a8:	785a      	ldrb	r2, [r3, #1]
 80015aa:	4b17      	ldr	r3, [pc, #92]	; (8001608 <Task_Terminal+0x80>)
 80015ac:	701a      	strb	r2, [r3, #0]
		//HAL_UART_Receive_IT(Get_DebugHandle(),(uint8_t*)uartData,UART_DMA_RECEIVE_SIZE);
		serialPutStr("Terminal Task Started\n");
 80015ae:	4817      	ldr	r0, [pc, #92]	; (800160c <Task_Terminal+0x84>)
 80015b0:	f000 f860 	bl	8001674 <serialPutStr>
		initStatus = true;
 80015b4:	4b13      	ldr	r3, [pc, #76]	; (8001604 <Task_Terminal+0x7c>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	701a      	strb	r2, [r3, #0]
	}
	if(dataRdy)
 80015ba:	4b15      	ldr	r3, [pc, #84]	; (8001610 <Task_Terminal+0x88>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d01b      	beq.n	80015fc <Task_Terminal+0x74>
	{
		ch = CBUF_Pop(RxDataBuffer);
 80015c4:	4b10      	ldr	r3, [pc, #64]	; (8001608 <Task_Terminal+0x80>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	1c5a      	adds	r2, r3, #1
 80015ca:	b2d1      	uxtb	r1, r2
 80015cc:	4a0e      	ldr	r2, [pc, #56]	; (8001608 <Task_Terminal+0x80>)
 80015ce:	7011      	strb	r1, [r2, #0]
 80015d0:	f003 031f 	and.w	r3, r3, #31
 80015d4:	4a0c      	ldr	r2, [pc, #48]	; (8001608 <Task_Terminal+0x80>)
 80015d6:	4413      	add	r3, r2
 80015d8:	789b      	ldrb	r3, [r3, #2]
 80015da:	70fb      	strb	r3, [r7, #3]
		tCommandReady = CommandLineBuildCommand(ch);
 80015dc:	78fb      	ldrb	r3, [r7, #3]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff ff3e 	bl	8001460 <CommandLineBuildCommand>
 80015e4:	6078      	str	r0, [r7, #4]
		if(tCommandReady)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d004      	beq.n	80015f6 <Task_Terminal+0x6e>
		{
			CommandLineProcessCommand(gCommandBuffer);
 80015ec:	4809      	ldr	r0, [pc, #36]	; (8001614 <Task_Terminal+0x8c>)
 80015ee:	f7ff ff7f 	bl	80014f0 <CommandLineProcessCommand>
			tCommandReady = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	607b      	str	r3, [r7, #4]
		}
		dataRdy = false;
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <Task_Terminal+0x88>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]
	}
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000206 	.word	0x20000206
 8001608:	20000208 	.word	0x20000208
 800160c:	0800a918 	.word	0x0800a918
 8001610:	20000205 	.word	0x20000205
 8001614:	2000022c 	.word	0x2000022c

08001618 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART2)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a0f      	ldr	r2, [pc, #60]	; (8001664 <HAL_UART_RxCpltCallback+0x4c>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d118      	bne.n	800165c <HAL_UART_RxCpltCallback+0x44>
	{
		HAL_UART_Receive_IT(Get_DebugHandle(),(uint8_t*)uartData,UART_DMA_RECEIVE_SIZE);
 800162a:	f000 fb55 	bl	8001cd8 <Get_DebugHandle>
 800162e:	4603      	mov	r3, r0
 8001630:	2201      	movs	r2, #1
 8001632:	490d      	ldr	r1, [pc, #52]	; (8001668 <HAL_UART_RxCpltCallback+0x50>)
 8001634:	4618      	mov	r0, r3
 8001636:	f005 f807 	bl	8006648 <HAL_UART_Receive_IT>
		//serialPutStr(data[0]);
		//HAL_UART_Transmit(Get_DebugHandle(),(uint8_t *)uartData, 1,DEBUG_UART_TIMEOUT);
		CBUF_Push(RxDataBuffer, uartData[0]);
 800163a:	4b0c      	ldr	r3, [pc, #48]	; (800166c <HAL_UART_RxCpltCallback+0x54>)
 800163c:	785b      	ldrb	r3, [r3, #1]
 800163e:	1c5a      	adds	r2, r3, #1
 8001640:	b2d1      	uxtb	r1, r2
 8001642:	4a0a      	ldr	r2, [pc, #40]	; (800166c <HAL_UART_RxCpltCallback+0x54>)
 8001644:	7051      	strb	r1, [r2, #1]
 8001646:	f003 031f 	and.w	r3, r3, #31
 800164a:	4a07      	ldr	r2, [pc, #28]	; (8001668 <HAL_UART_RxCpltCallback+0x50>)
 800164c:	7811      	ldrb	r1, [r2, #0]
 800164e:	4a07      	ldr	r2, [pc, #28]	; (800166c <HAL_UART_RxCpltCallback+0x54>)
 8001650:	4413      	add	r3, r2
 8001652:	460a      	mov	r2, r1
 8001654:	709a      	strb	r2, [r3, #2]
		dataRdy = true;
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_UART_RxCpltCallback+0x58>)
 8001658:	2201      	movs	r2, #1
 800165a:	701a      	strb	r2, [r3, #0]
	}
}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40004400 	.word	0x40004400
 8001668:	20000204 	.word	0x20000204
 800166c:	20000208 	.word	0x20000208
 8001670:	20000205 	.word	0x20000205

08001674 <serialPutStr>:

#include "Uart.h"


void serialPutStr(const char *data)
{
 8001674:	b590      	push	{r4, r7, lr}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]

  HAL_UART_Transmit(Get_DebugHandle(),(uint8_t *)data, strlen(data),DEBUG_UART_TIMEOUT);
 800167c:	f000 fb2c 	bl	8001cd8 <Get_DebugHandle>
 8001680:	4604      	mov	r4, r0
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7fe fd7c 	bl	8000180 <strlen>
 8001688:	4603      	mov	r3, r0
 800168a:	b29a      	uxth	r2, r3
 800168c:	230a      	movs	r3, #10
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	4620      	mov	r0, r4
 8001692:	f004 fe8f 	bl	80063b4 <HAL_UART_Transmit>

}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	bd90      	pop	{r4, r7, pc}

0800169e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800169e:	b480      	push	{r7}
 80016a0:	b085      	sub	sp, #20
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80016a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80016b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4013      	ands	r3, r2
 80016c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016c2:	68fb      	ldr	r3, [r7, #12]
}
 80016c4:	bf00      	nop
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr

080016ce <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016d4:	f000 ff28 	bl	8002528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016d8:	f000 f81e 	bl	8001718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016dc:	f000 fa9a 	bl	8001c14 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80016e0:	f000 f904 	bl	80018ec <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 80016e4:	f000 f950 	bl	8001988 <MX_USART2_UART_Init>
  MX_ADC_Init();
 80016e8:	f000 f872 	bl	80017d0 <MX_ADC_Init>
  MX_I2C2_Init();
 80016ec:	f000 f8be 	bl	800186c <MX_I2C2_Init>
  MX_SPI2_Init();
 80016f0:	f000 fa2c 	bl	8001b4c <MX_SPI2_Init>
  MX_RTC_Init();
 80016f4:	f000 f994 	bl	8001a20 <MX_RTC_Init>
  MX_TIM16_Init();
 80016f8:	f000 fa66 	bl	8001bc8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  uint8_t uartData[1];
  HAL_UART_Receive_IT(Get_DebugHandle(),(uint8_t*)uartData,UART_DMA_RECEIVE_SIZE);
 80016fc:	f000 faec 	bl	8001cd8 <Get_DebugHandle>
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	2201      	movs	r2, #1
 8001704:	4619      	mov	r1, r3
 8001706:	f004 ff9f 	bl	8006648 <HAL_UART_Receive_IT>
  Tick_Init();
 800170a:	f000 fdb5 	bl	8002278 <Tick_Init>
  OS_Init();
 800170e:	f000 fafd 	bl	8001d0c <OS_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 OS_Run();
 8001712:	f000 fb07 	bl	8001d24 <OS_Run>
 8001716:	e7fc      	b.n	8001712 <main+0x44>

08001718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b09a      	sub	sp, #104	; 0x68
 800171c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800171e:	f107 0320 	add.w	r3, r7, #32
 8001722:	2248      	movs	r2, #72	; 0x48
 8001724:	2100      	movs	r1, #0
 8001726:	4618      	mov	r0, r3
 8001728:	f007 f8c7 	bl	80088ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800172c:	f107 0308 	add.w	r3, r7, #8
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	611a      	str	r2, [r3, #16]
 800173c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800173e:	4b23      	ldr	r3, [pc, #140]	; (80017cc <SystemClock_Config+0xb4>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001746:	4a21      	ldr	r2, [pc, #132]	; (80017cc <SystemClock_Config+0xb4>)
 8001748:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	4b1f      	ldr	r3, [pc, #124]	; (80017cc <SystemClock_Config+0xb4>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800175a:	232a      	movs	r3, #42	; 0x2a
 800175c:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800175e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001762:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001764:	2301      	movs	r3, #1
 8001766:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001768:	2340      	movs	r3, #64	; 0x40
 800176a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800176c:	2300      	movs	r3, #0
 800176e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001770:	23b0      	movs	r3, #176	; 0xb0
 8001772:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8001774:	2300      	movs	r3, #0
 8001776:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001778:	2301      	movs	r3, #1
 800177a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800177c:	2300      	movs	r3, #0
 800177e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001780:	f107 0320 	add.w	r3, r7, #32
 8001784:	4618      	mov	r0, r3
 8001786:	f002 fe71 	bl	800446c <HAL_RCC_OscConfig>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001790:	f000 fab6 	bl	8001d00 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001794:	234f      	movs	r3, #79	; 0x4f
 8001796:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001798:	2300      	movs	r3, #0
 800179a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800179c:	2300      	movs	r3, #0
 800179e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017ac:	f107 0308 	add.w	r3, r7, #8
 80017b0:	2102      	movs	r1, #2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f003 f9dc 	bl	8004b70 <HAL_RCC_ClockConfig>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80017be:	f000 fa9f 	bl	8001d00 <Error_Handler>
  }
}
 80017c2:	bf00      	nop
 80017c4:	3768      	adds	r7, #104	; 0x68
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	58000400 	.word	0x58000400

080017d0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80017d4:	4b23      	ldr	r3, [pc, #140]	; (8001864 <MX_ADC_Init+0x94>)
 80017d6:	4a24      	ldr	r2, [pc, #144]	; (8001868 <MX_ADC_Init+0x98>)
 80017d8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80017da:	4b22      	ldr	r3, [pc, #136]	; (8001864 <MX_ADC_Init+0x94>)
 80017dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017e0:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80017e2:	4b20      	ldr	r3, [pc, #128]	; (8001864 <MX_ADC_Init+0x94>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017e8:	4b1e      	ldr	r3, [pc, #120]	; (8001864 <MX_ADC_Init+0x94>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017ee:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <MX_ADC_Init+0x94>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017f4:	4b1b      	ldr	r3, [pc, #108]	; (8001864 <MX_ADC_Init+0x94>)
 80017f6:	2204      	movs	r2, #4
 80017f8:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80017fa:	4b1a      	ldr	r3, [pc, #104]	; (8001864 <MX_ADC_Init+0x94>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001800:	4b18      	ldr	r3, [pc, #96]	; (8001864 <MX_ADC_Init+0x94>)
 8001802:	2200      	movs	r2, #0
 8001804:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001806:	4b17      	ldr	r3, [pc, #92]	; (8001864 <MX_ADC_Init+0x94>)
 8001808:	2200      	movs	r2, #0
 800180a:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 800180c:	4b15      	ldr	r3, [pc, #84]	; (8001864 <MX_ADC_Init+0x94>)
 800180e:	2201      	movs	r2, #1
 8001810:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001812:	4b14      	ldr	r3, [pc, #80]	; (8001864 <MX_ADC_Init+0x94>)
 8001814:	2200      	movs	r2, #0
 8001816:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800181a:	4b12      	ldr	r3, [pc, #72]	; (8001864 <MX_ADC_Init+0x94>)
 800181c:	2200      	movs	r2, #0
 800181e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001820:	4b10      	ldr	r3, [pc, #64]	; (8001864 <MX_ADC_Init+0x94>)
 8001822:	2200      	movs	r2, #0
 8001824:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001826:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <MX_ADC_Init+0x94>)
 8001828:	2200      	movs	r2, #0
 800182a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800182e:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <MX_ADC_Init+0x94>)
 8001830:	2200      	movs	r2, #0
 8001832:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001834:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <MX_ADC_Init+0x94>)
 8001836:	2200      	movs	r2, #0
 8001838:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800183a:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <MX_ADC_Init+0x94>)
 800183c:	2200      	movs	r2, #0
 800183e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <MX_ADC_Init+0x94>)
 8001842:	2200      	movs	r2, #0
 8001844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <MX_ADC_Init+0x94>)
 800184a:	2200      	movs	r2, #0
 800184c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800184e:	4805      	ldr	r0, [pc, #20]	; (8001864 <MX_ADC_Init+0x94>)
 8001850:	f001 f894 	bl	800297c <HAL_ADC_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_ADC_Init+0x8e>
  {
    Error_Handler();
 800185a:	f000 fa51 	bl	8001d00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000310 	.word	0x20000310
 8001868:	40012400 	.word	0x40012400

0800186c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001870:	4b1b      	ldr	r3, [pc, #108]	; (80018e0 <MX_I2C2_Init+0x74>)
 8001872:	4a1c      	ldr	r2, [pc, #112]	; (80018e4 <MX_I2C2_Init+0x78>)
 8001874:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001876:	4b1a      	ldr	r3, [pc, #104]	; (80018e0 <MX_I2C2_Init+0x74>)
 8001878:	4a1b      	ldr	r2, [pc, #108]	; (80018e8 <MX_I2C2_Init+0x7c>)
 800187a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800187c:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <MX_I2C2_Init+0x74>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001882:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <MX_I2C2_Init+0x74>)
 8001884:	2201      	movs	r2, #1
 8001886:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001888:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <MX_I2C2_Init+0x74>)
 800188a:	2200      	movs	r2, #0
 800188c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800188e:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <MX_I2C2_Init+0x74>)
 8001890:	2200      	movs	r2, #0
 8001892:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <MX_I2C2_Init+0x74>)
 8001896:	2200      	movs	r2, #0
 8001898:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800189a:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <MX_I2C2_Init+0x74>)
 800189c:	2200      	movs	r2, #0
 800189e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018a0:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <MX_I2C2_Init+0x74>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80018a6:	480e      	ldr	r0, [pc, #56]	; (80018e0 <MX_I2C2_Init+0x74>)
 80018a8:	f002 fa11 	bl	8003cce <HAL_I2C_Init>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80018b2:	f000 fa25 	bl	8001d00 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018b6:	2100      	movs	r1, #0
 80018b8:	4809      	ldr	r0, [pc, #36]	; (80018e0 <MX_I2C2_Init+0x74>)
 80018ba:	f002 fa97 	bl	8003dec <HAL_I2CEx_ConfigAnalogFilter>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80018c4:	f000 fa1c 	bl	8001d00 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80018c8:	2100      	movs	r1, #0
 80018ca:	4805      	ldr	r0, [pc, #20]	; (80018e0 <MX_I2C2_Init+0x74>)
 80018cc:	f002 fad8 	bl	8003e80 <HAL_I2CEx_ConfigDigitalFilter>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80018d6:	f000 fa13 	bl	8001d00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000374 	.word	0x20000374
 80018e4:	40005800 	.word	0x40005800
 80018e8:	20303e5d 	.word	0x20303e5d

080018ec <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80018f0:	4b23      	ldr	r3, [pc, #140]	; (8001980 <MX_LPUART1_UART_Init+0x94>)
 80018f2:	4a24      	ldr	r2, [pc, #144]	; (8001984 <MX_LPUART1_UART_Init+0x98>)
 80018f4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 80018f6:	4b22      	ldr	r3, [pc, #136]	; (8001980 <MX_LPUART1_UART_Init+0x94>)
 80018f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018fc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018fe:	4b20      	ldr	r3, [pc, #128]	; (8001980 <MX_LPUART1_UART_Init+0x94>)
 8001900:	2200      	movs	r2, #0
 8001902:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001904:	4b1e      	ldr	r3, [pc, #120]	; (8001980 <MX_LPUART1_UART_Init+0x94>)
 8001906:	2200      	movs	r2, #0
 8001908:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800190a:	4b1d      	ldr	r3, [pc, #116]	; (8001980 <MX_LPUART1_UART_Init+0x94>)
 800190c:	2200      	movs	r2, #0
 800190e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_RX;
 8001910:	4b1b      	ldr	r3, [pc, #108]	; (8001980 <MX_LPUART1_UART_Init+0x94>)
 8001912:	2204      	movs	r2, #4
 8001914:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001916:	4b1a      	ldr	r3, [pc, #104]	; (8001980 <MX_LPUART1_UART_Init+0x94>)
 8001918:	2200      	movs	r2, #0
 800191a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800191c:	4b18      	ldr	r3, [pc, #96]	; (8001980 <MX_LPUART1_UART_Init+0x94>)
 800191e:	2200      	movs	r2, #0
 8001920:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001922:	4b17      	ldr	r3, [pc, #92]	; (8001980 <MX_LPUART1_UART_Init+0x94>)
 8001924:	2200      	movs	r2, #0
 8001926:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8001928:	4b15      	ldr	r3, [pc, #84]	; (8001980 <MX_LPUART1_UART_Init+0x94>)
 800192a:	2208      	movs	r2, #8
 800192c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800192e:	4b14      	ldr	r3, [pc, #80]	; (8001980 <MX_LPUART1_UART_Init+0x94>)
 8001930:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001934:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_HalfDuplex_Init(&hlpuart1) != HAL_OK)
 8001936:	4812      	ldr	r0, [pc, #72]	; (8001980 <MX_LPUART1_UART_Init+0x94>)
 8001938:	f004 fce4 	bl	8006304 <HAL_HalfDuplex_Init>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_LPUART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001942:	f000 f9dd 	bl	8001d00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001946:	2100      	movs	r1, #0
 8001948:	480d      	ldr	r0, [pc, #52]	; (8001980 <MX_LPUART1_UART_Init+0x94>)
 800194a:	f006 fda7 	bl	800849c <HAL_UARTEx_SetTxFifoThreshold>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_LPUART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001954:	f000 f9d4 	bl	8001d00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001958:	2100      	movs	r1, #0
 800195a:	4809      	ldr	r0, [pc, #36]	; (8001980 <MX_LPUART1_UART_Init+0x94>)
 800195c:	f006 fddc 	bl	8008518 <HAL_UARTEx_SetRxFifoThreshold>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_LPUART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001966:	f000 f9cb 	bl	8001d00 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&hlpuart1) != HAL_OK)
 800196a:	4805      	ldr	r0, [pc, #20]	; (8001980 <MX_LPUART1_UART_Init+0x94>)
 800196c:	f006 fd23 	bl	80083b6 <HAL_UARTEx_EnableFifoMode>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_LPUART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001976:	f000 f9c3 	bl	8001d00 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200003c8 	.word	0x200003c8
 8001984:	40008000 	.word	0x40008000

08001988 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800198c:	4b22      	ldr	r3, [pc, #136]	; (8001a18 <MX_USART2_UART_Init+0x90>)
 800198e:	4a23      	ldr	r2, [pc, #140]	; (8001a1c <MX_USART2_UART_Init+0x94>)
 8001990:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001992:	4b21      	ldr	r3, [pc, #132]	; (8001a18 <MX_USART2_UART_Init+0x90>)
 8001994:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001998:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800199a:	4b1f      	ldr	r3, [pc, #124]	; (8001a18 <MX_USART2_UART_Init+0x90>)
 800199c:	2200      	movs	r2, #0
 800199e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019a0:	4b1d      	ldr	r3, [pc, #116]	; (8001a18 <MX_USART2_UART_Init+0x90>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019a6:	4b1c      	ldr	r3, [pc, #112]	; (8001a18 <MX_USART2_UART_Init+0x90>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019ac:	4b1a      	ldr	r3, [pc, #104]	; (8001a18 <MX_USART2_UART_Init+0x90>)
 80019ae:	220c      	movs	r2, #12
 80019b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019b2:	4b19      	ldr	r3, [pc, #100]	; (8001a18 <MX_USART2_UART_Init+0x90>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019b8:	4b17      	ldr	r3, [pc, #92]	; (8001a18 <MX_USART2_UART_Init+0x90>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019be:	4b16      	ldr	r3, [pc, #88]	; (8001a18 <MX_USART2_UART_Init+0x90>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019c4:	4b14      	ldr	r3, [pc, #80]	; (8001a18 <MX_USART2_UART_Init+0x90>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019ca:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <MX_USART2_UART_Init+0x90>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019d0:	4811      	ldr	r0, [pc, #68]	; (8001a18 <MX_USART2_UART_Init+0x90>)
 80019d2:	f004 fc47 	bl	8006264 <HAL_UART_Init>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80019dc:	f000 f990 	bl	8001d00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019e0:	2100      	movs	r1, #0
 80019e2:	480d      	ldr	r0, [pc, #52]	; (8001a18 <MX_USART2_UART_Init+0x90>)
 80019e4:	f006 fd5a 	bl	800849c <HAL_UARTEx_SetTxFifoThreshold>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80019ee:	f000 f987 	bl	8001d00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019f2:	2100      	movs	r1, #0
 80019f4:	4808      	ldr	r0, [pc, #32]	; (8001a18 <MX_USART2_UART_Init+0x90>)
 80019f6:	f006 fd8f 	bl	8008518 <HAL_UARTEx_SetRxFifoThreshold>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001a00:	f000 f97e 	bl	8001d00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001a04:	4804      	ldr	r0, [pc, #16]	; (8001a18 <MX_USART2_UART_Init+0x90>)
 8001a06:	f006 fd11 	bl	800842c <HAL_UARTEx_DisableFifoMode>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001a10:	f000 f976 	bl	8001d00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	2000045c 	.word	0x2000045c
 8001a1c:	40004400 	.word	0x40004400

08001a20 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b092      	sub	sp, #72	; 0x48
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001a26:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	609a      	str	r2, [r3, #8]
 8001a32:	60da      	str	r2, [r3, #12]
 8001a34:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001a36:	2300      	movs	r3, #0
 8001a38:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	222c      	movs	r2, #44	; 0x2c
 8001a3e:	2100      	movs	r1, #0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f006 ff3a 	bl	80088ba <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a46:	4b3f      	ldr	r3, [pc, #252]	; (8001b44 <MX_RTC_Init+0x124>)
 8001a48:	4a3f      	ldr	r2, [pc, #252]	; (8001b48 <MX_RTC_Init+0x128>)
 8001a4a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a4c:	4b3d      	ldr	r3, [pc, #244]	; (8001b44 <MX_RTC_Init+0x124>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001a52:	4b3c      	ldr	r3, [pc, #240]	; (8001b44 <MX_RTC_Init+0x124>)
 8001a54:	227f      	movs	r2, #127	; 0x7f
 8001a56:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001a58:	4b3a      	ldr	r3, [pc, #232]	; (8001b44 <MX_RTC_Init+0x124>)
 8001a5a:	22ff      	movs	r2, #255	; 0xff
 8001a5c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a5e:	4b39      	ldr	r3, [pc, #228]	; (8001b44 <MX_RTC_Init+0x124>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a64:	4b37      	ldr	r3, [pc, #220]	; (8001b44 <MX_RTC_Init+0x124>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a6a:	4b36      	ldr	r3, [pc, #216]	; (8001b44 <MX_RTC_Init+0x124>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a70:	4b34      	ldr	r3, [pc, #208]	; (8001b44 <MX_RTC_Init+0x124>)
 8001a72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a76:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001a78:	4b32      	ldr	r3, [pc, #200]	; (8001b44 <MX_RTC_Init+0x124>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001a7e:	4b31      	ldr	r3, [pc, #196]	; (8001b44 <MX_RTC_Init+0x124>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a84:	482f      	ldr	r0, [pc, #188]	; (8001b44 <MX_RTC_Init+0x124>)
 8001a86:	f003 fd2f 	bl	80054e8 <HAL_RTC_Init>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8001a90:	f000 f936 	bl	8001d00 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001aae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4823      	ldr	r0, [pc, #140]	; (8001b44 <MX_RTC_Init+0x124>)
 8001ab8:	f003 fd98 	bl	80055ec <HAL_RTC_SetTime>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8001ac2:	f000 f91d 	bl	8001d00 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8001acc:	2301      	movs	r3, #1
 8001ace:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001ade:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4817      	ldr	r0, [pc, #92]	; (8001b44 <MX_RTC_Init+0x124>)
 8001ae8:	f003 fe1c 	bl	8005724 <HAL_RTC_SetDate>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_RTC_Init+0xd6>
  {
    Error_Handler();
 8001af2:	f000 f905 	bl	8001d00 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001b06:	2300      	movs	r3, #0
 8001b08:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001b16:	2300      	movs	r3, #0
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8001b20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	2201      	movs	r2, #1
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4805      	ldr	r0, [pc, #20]	; (8001b44 <MX_RTC_Init+0x124>)
 8001b2e:	f003 fe7f 	bl	8005830 <HAL_RTC_SetAlarm>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 8001b38:	f000 f8e2 	bl	8001d00 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001b3c:	bf00      	nop
 8001b3e:	3748      	adds	r7, #72	; 0x48
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	200004f0 	.word	0x200004f0
 8001b48:	40002800 	.word	0x40002800

08001b4c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001b50:	4b1b      	ldr	r3, [pc, #108]	; (8001bc0 <MX_SPI2_Init+0x74>)
 8001b52:	4a1c      	ldr	r2, [pc, #112]	; (8001bc4 <MX_SPI2_Init+0x78>)
 8001b54:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b56:	4b1a      	ldr	r3, [pc, #104]	; (8001bc0 <MX_SPI2_Init+0x74>)
 8001b58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b5c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b5e:	4b18      	ldr	r3, [pc, #96]	; (8001bc0 <MX_SPI2_Init+0x74>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b64:	4b16      	ldr	r3, [pc, #88]	; (8001bc0 <MX_SPI2_Init+0x74>)
 8001b66:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001b6a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b6c:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <MX_SPI2_Init+0x74>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b72:	4b13      	ldr	r3, [pc, #76]	; (8001bc0 <MX_SPI2_Init+0x74>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b78:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <MX_SPI2_Init+0x74>)
 8001b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b7e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b80:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <MX_SPI2_Init+0x74>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b86:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <MX_SPI2_Init+0x74>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <MX_SPI2_Init+0x74>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b92:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <MX_SPI2_Init+0x74>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001b98:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <MX_SPI2_Init+0x74>)
 8001b9a:	2207      	movs	r2, #7
 8001b9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b9e:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <MX_SPI2_Init+0x74>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <MX_SPI2_Init+0x74>)
 8001ba6:	2208      	movs	r2, #8
 8001ba8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001baa:	4805      	ldr	r0, [pc, #20]	; (8001bc0 <MX_SPI2_Init+0x74>)
 8001bac:	f003 fff9 	bl	8005ba2 <HAL_SPI_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001bb6:	f000 f8a3 	bl	8001d00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000528 	.word	0x20000528
 8001bc4:	40003800 	.word	0x40003800

08001bc8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001bcc:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <MX_TIM16_Init+0x44>)
 8001bce:	4a10      	ldr	r2, [pc, #64]	; (8001c10 <MX_TIM16_Init+0x48>)
 8001bd0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <MX_TIM16_Init+0x44>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <MX_TIM16_Init+0x44>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 47999;
 8001bde:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <MX_TIM16_Init+0x44>)
 8001be0:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8001be4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001be6:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <MX_TIM16_Init+0x44>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001bec:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <MX_TIM16_Init+0x44>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf2:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <MX_TIM16_Init+0x44>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001bf8:	4804      	ldr	r0, [pc, #16]	; (8001c0c <MX_TIM16_Init+0x44>)
 8001bfa:	f004 f8a6 	bl	8005d4a <HAL_TIM_Base_Init>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001c04:	f000 f87c 	bl	8001d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001c08:	bf00      	nop
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	2000058c 	.word	0x2000058c
 8001c10:	40014400 	.word	0x40014400

08001c14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1a:	1d3b      	adds	r3, r7, #4
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c28:	2001      	movs	r0, #1
 8001c2a:	f7ff fd38 	bl	800169e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2e:	2002      	movs	r0, #2
 8001c30:	f7ff fd35 	bl	800169e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c34:	2004      	movs	r0, #4
 8001c36:	f7ff fd32 	bl	800169e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PG_Pin|ADC_SW_Pin|FLASH_CS_Pin|MB_OC_Pin
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f44f 61de 	mov.w	r1, #1776	; 0x6f0
 8001c40:	481e      	ldr	r0, [pc, #120]	; (8001cbc <MX_GPIO_Init+0xa8>)
 8001c42:	f002 f82d 	bl	8003ca0 <HAL_GPIO_WritePin>
                          |LED_Pin|EXT_OC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MB_PWR_Pin|EXT_PWR_Pin, GPIO_PIN_RESET);
 8001c46:	2200      	movs	r2, #0
 8001c48:	f240 2101 	movw	r1, #513	; 0x201
 8001c4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c50:	f002 f826 	bl	8003ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MB_CTL_GPIO_Port, MB_CTL_Pin, GPIO_PIN_RESET);
 8001c54:	2200      	movs	r2, #0
 8001c56:	2102      	movs	r1, #2
 8001c58:	4819      	ldr	r0, [pc, #100]	; (8001cc0 <MX_GPIO_Init+0xac>)
 8001c5a:	f002 f821 	bl	8003ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG_Pin ADC_SW_Pin FLASH_CS_Pin MB_OC_Pin
                           LED_Pin EXT_OC_Pin */
  GPIO_InitStruct.Pin = PG_Pin|ADC_SW_Pin|FLASH_CS_Pin|MB_OC_Pin
 8001c5e:	f44f 63de 	mov.w	r3, #1776	; 0x6f0
 8001c62:	607b      	str	r3, [r7, #4]
                          |LED_Pin|EXT_OC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c64:	2301      	movs	r3, #1
 8001c66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c70:	1d3b      	adds	r3, r7, #4
 8001c72:	4619      	mov	r1, r3
 8001c74:	4811      	ldr	r0, [pc, #68]	; (8001cbc <MX_GPIO_Init+0xa8>)
 8001c76:	f001 feb3 	bl	80039e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MB_PWR_Pin EXT_PWR_Pin */
  GPIO_InitStruct.Pin = MB_PWR_Pin|EXT_PWR_Pin;
 8001c7a:	f240 2301 	movw	r3, #513	; 0x201
 8001c7e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c80:	2301      	movs	r3, #1
 8001c82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8c:	1d3b      	adds	r3, r7, #4
 8001c8e:	4619      	mov	r1, r3
 8001c90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c94:	f001 fea4 	bl	80039e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MB_CTL_Pin */
  GPIO_InitStruct.Pin = MB_CTL_Pin;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(MB_CTL_GPIO_Port, &GPIO_InitStruct);
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	4619      	mov	r1, r3
 8001cac:	4804      	ldr	r0, [pc, #16]	; (8001cc0 <MX_GPIO_Init+0xac>)
 8001cae:	f001 fe97 	bl	80039e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cb2:	bf00      	nop
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	48000400 	.word	0x48000400
 8001cc0:	48000800 	.word	0x48000800

08001cc4 <Get_AdcHandle>:

/* USER CODE BEGIN 4 */


ADC_HandleTypeDef *Get_AdcHandle(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return &hadc;
 8001cc8:	4b02      	ldr	r3, [pc, #8]	; (8001cd4 <Get_AdcHandle+0x10>)
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	20000310 	.word	0x20000310

08001cd8 <Get_DebugHandle>:


UART_HandleTypeDef *Get_DebugHandle(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return &huart2;
 8001cdc:	4b02      	ldr	r3, [pc, #8]	; (8001ce8 <Get_DebugHandle+0x10>)
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	2000045c 	.word	0x2000045c

08001cec <Get_SonarHandle>:

UART_HandleTypeDef *Get_SonarHandle(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return &hlpuart1;
 8001cf0:	4b02      	ldr	r3, [pc, #8]	; (8001cfc <Get_SonarHandle+0x10>)
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	200003c8 	.word	0x200003c8

08001d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d04:	b672      	cpsid	i
}
 8001d06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d08:	e7fe      	b.n	8001d08 <Error_Handler+0x8>
	...

08001d0c <OS_Init>:




void OS_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
	TaskPointer = Task_ConfigGet();    // Get a pointer to the task configuration
 8001d10:	f000 fbce 	bl	80024b0 <Task_ConfigGet>
 8001d14:	4603      	mov	r3, r0
 8001d16:	4a02      	ldr	r2, [pc, #8]	; (8001d20 <OS_Init+0x14>)
 8001d18:	6013      	str	r3, [r2, #0]
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	200005dc 	.word	0x200005dc

08001d24 <OS_Run>:


void OS_Run(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
	const uint8_t NumTasks = Task_NumTasksGet();		// Number of tasks
 8001d2a:	f000 fbcb 	bl	80024c4 <Task_NumTasksGet>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	71fb      	strb	r3, [r7, #7]

	Tick = SysTick_Get();		// Get current system tick
 8001d32:	f000 facb 	bl	80022cc <SysTick_Get>
 8001d36:	4603      	mov	r3, r0
 8001d38:	4a24      	ldr	r2, [pc, #144]	; (8001dcc <OS_Run+0xa8>)
 8001d3a:	6013      	str	r3, [r2, #0]

	/* Loop through the task configuration block and calculate whether there is
	 * a task that is ready to execute. If there is, execute that task. Otherwise
	 * continue looping.
	 */
	for(TaskIndex = 0; TaskIndex < NumTasks; TaskIndex++)
 8001d3c:	4b24      	ldr	r3, [pc, #144]	; (8001dd0 <OS_Run+0xac>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]
 8001d42:	e039      	b.n	8001db8 <OS_Run+0x94>
	{
		if((Tick - TaskPointer[TaskIndex].LastTick) >= TaskPointer[TaskIndex].Interval)
 8001d44:	4b21      	ldr	r3, [pc, #132]	; (8001dcc <OS_Run+0xa8>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4b22      	ldr	r3, [pc, #136]	; (8001dd4 <OS_Run+0xb0>)
 8001d4a:	6819      	ldr	r1, [r3, #0]
 8001d4c:	4b20      	ldr	r3, [pc, #128]	; (8001dd0 <OS_Run+0xac>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	4603      	mov	r3, r0
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	4403      	add	r3, r0
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	1ad2      	subs	r2, r2, r3
 8001d60:	4b1c      	ldr	r3, [pc, #112]	; (8001dd4 <OS_Run+0xb0>)
 8001d62:	6819      	ldr	r1, [r3, #0]
 8001d64:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <OS_Run+0xac>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	4403      	add	r3, r0
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	440b      	add	r3, r1
 8001d74:	881b      	ldrh	r3, [r3, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d318      	bcc.n	8001dac <OS_Run+0x88>
		{
			(*TaskPointer[TaskIndex].Func)();         // Execute Task
 8001d7a:	4b16      	ldr	r3, [pc, #88]	; (8001dd4 <OS_Run+0xb0>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	4b14      	ldr	r3, [pc, #80]	; (8001dd0 <OS_Run+0xac>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	4619      	mov	r1, r3
 8001d84:	460b      	mov	r3, r1
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	440b      	add	r3, r1
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	4798      	blx	r3
			TaskPointer[TaskIndex].LastTick = Tick;  // Save last tick the task was ran.
 8001d92:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <OS_Run+0xb0>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <OS_Run+0xac>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	440b      	add	r3, r1
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	4a09      	ldr	r2, [pc, #36]	; (8001dcc <OS_Run+0xa8>)
 8001da8:	6812      	ldr	r2, [r2, #0]
 8001daa:	605a      	str	r2, [r3, #4]
	for(TaskIndex = 0; TaskIndex < NumTasks; TaskIndex++)
 8001dac:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <OS_Run+0xac>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	3301      	adds	r3, #1
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <OS_Run+0xac>)
 8001db6:	701a      	strb	r2, [r3, #0]
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <OS_Run+0xac>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	79fa      	ldrb	r2, [r7, #7]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d8c0      	bhi.n	8001d44 <OS_Run+0x20>
		}
	}// end for
}
 8001dc2:	bf00      	nop
 8001dc4:	bf00      	nop
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	200005d8 	.word	0x200005d8
 8001dd0:	200005e0 	.word	0x200005e0
 8001dd4:	200005dc 	.word	0x200005dc

08001dd8 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001de8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr

08001df8 <LL_AHB2_GRP1_EnableClock>:
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
}
 8001e1e:	bf00      	nop
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr

08001e28 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
}
 8001e4e:	bf00      	nop
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr

08001e58 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
}
 8001e7e:	bf00      	nop
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr

08001e88 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e94:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001eac:	68fb      	ldr	r3, [r7, #12]
}
 8001eae:	bf00      	nop
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b088      	sub	sp, #32
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ecc:	f107 030c 	add.w	r3, r7, #12
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a0c      	ldr	r2, [pc, #48]	; (8001f14 <HAL_ADC_MspInit+0x50>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d112      	bne.n	8001f0c <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001ee6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001eea:	f7ff ffcd 	bl	8001e88 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eee:	2002      	movs	r0, #2
 8001ef0:	f7ff ff82 	bl	8001df8 <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB3     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = ADC_IN_Pin;
 8001ef4:	2308      	movs	r3, #8
 8001ef6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC_IN_GPIO_Port, &GPIO_InitStruct);
 8001f00:	f107 030c 	add.w	r3, r7, #12
 8001f04:	4619      	mov	r1, r3
 8001f06:	4804      	ldr	r0, [pc, #16]	; (8001f18 <HAL_ADC_MspInit+0x54>)
 8001f08:	f001 fd6a 	bl	80039e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }

}
 8001f0c:	bf00      	nop
 8001f0e:	3720      	adds	r7, #32
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40012400 	.word	0x40012400
 8001f18:	48000400 	.word	0x48000400

08001f1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b096      	sub	sp, #88	; 0x58
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f34:	f107 030c 	add.w	r3, r7, #12
 8001f38:	2238      	movs	r2, #56	; 0x38
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f006 fcbc 	bl	80088ba <memset>
  if(hi2c->Instance==I2C2)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a21      	ldr	r2, [pc, #132]	; (8001fcc <HAL_I2C_MspInit+0xb0>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d13b      	bne.n	8001fc4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001f4c:	2380      	movs	r3, #128	; 0x80
 8001f4e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001f50:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f56:	f107 030c 	add.w	r3, r7, #12
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f003 f9aa 	bl	80052b4 <HAL_RCCEx_PeriphCLKConfig>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001f66:	f7ff fecb 	bl	8001d00 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6a:	2001      	movs	r0, #1
 8001f6c:	f7ff ff44 	bl	8001df8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f70:	2002      	movs	r0, #2
 8001f72:	f7ff ff41 	bl	8001df8 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = EXT_SDA_Pin;
 8001f76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f7a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f7c:	2312      	movs	r3, #18
 8001f7e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f84:	2300      	movs	r3, #0
 8001f86:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f88:	2304      	movs	r3, #4
 8001f8a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(EXT_SDA_GPIO_Port, &GPIO_InitStruct);
 8001f8c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f90:	4619      	mov	r1, r3
 8001f92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f96:	f001 fd23 	bl	80039e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EXT_SCL_Pin;
 8001f9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f9e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fa0:	2312      	movs	r3, #18
 8001fa2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001fac:	2304      	movs	r3, #4
 8001fae:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(EXT_SCL_GPIO_Port, &GPIO_InitStruct);
 8001fb0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4806      	ldr	r0, [pc, #24]	; (8001fd0 <HAL_I2C_MspInit+0xb4>)
 8001fb8:	f001 fd12 	bl	80039e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001fbc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001fc0:	f7ff ff32 	bl	8001e28 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001fc4:	bf00      	nop
 8001fc6:	3758      	adds	r7, #88	; 0x58
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40005800 	.word	0x40005800
 8001fd0:	48000400 	.word	0x48000400

08001fd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b096      	sub	sp, #88	; 0x58
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fdc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
 8001fea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fec:	f107 030c 	add.w	r3, r7, #12
 8001ff0:	2238      	movs	r2, #56	; 0x38
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f006 fc60 	bl	80088ba <memset>
  if(huart->Instance==LPUART1)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a30      	ldr	r2, [pc, #192]	; (80020c0 <HAL_UART_MspInit+0xec>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d125      	bne.n	8002050 <HAL_UART_MspInit+0x7c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002004:	2320      	movs	r3, #32
 8002006:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 8002008:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800200c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800200e:	f107 030c 	add.w	r3, r7, #12
 8002012:	4618      	mov	r0, r3
 8002014:	f003 f94e 	bl	80052b4 <HAL_RCCEx_PeriphCLKConfig>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800201e:	f7ff fe6f 	bl	8001d00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002022:	2001      	movs	r0, #1
 8002024:	f7ff ff18 	bl	8001e58 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002028:	2004      	movs	r0, #4
 800202a:	f7ff fee5 	bl	8001df8 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = MB_RX_Pin;
 800202e:	2301      	movs	r3, #1
 8002030:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002032:	2312      	movs	r3, #18
 8002034:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002036:	2301      	movs	r3, #1
 8002038:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203a:	2300      	movs	r3, #0
 800203c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800203e:	2308      	movs	r3, #8
 8002040:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(MB_RX_GPIO_Port, &GPIO_InitStruct);
 8002042:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002046:	4619      	mov	r1, r3
 8002048:	481e      	ldr	r0, [pc, #120]	; (80020c4 <HAL_UART_MspInit+0xf0>)
 800204a:	f001 fcc9 	bl	80039e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800204e:	e033      	b.n	80020b8 <HAL_UART_MspInit+0xe4>
  else if(huart->Instance==USART2)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a1c      	ldr	r2, [pc, #112]	; (80020c8 <HAL_UART_MspInit+0xf4>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d12e      	bne.n	80020b8 <HAL_UART_MspInit+0xe4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800205a:	2302      	movs	r3, #2
 800205c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800205e:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8002062:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002064:	f107 030c 	add.w	r3, r7, #12
 8002068:	4618      	mov	r0, r3
 800206a:	f003 f923 	bl	80052b4 <HAL_RCCEx_PeriphCLKConfig>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <HAL_UART_MspInit+0xa4>
      Error_Handler();
 8002074:	f7ff fe44 	bl	8001d00 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002078:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800207c:	f7ff fed4 	bl	8001e28 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002080:	2001      	movs	r0, #1
 8002082:	f7ff feb9 	bl	8001df8 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = UART_RX_Pin|UART_TX_Pin;
 8002086:	230c      	movs	r3, #12
 8002088:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208a:	2302      	movs	r3, #2
 800208c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002092:	2300      	movs	r3, #0
 8002094:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002096:	2307      	movs	r3, #7
 8002098:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800209e:	4619      	mov	r1, r3
 80020a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020a4:	f001 fc9c 	bl	80039e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80020a8:	2200      	movs	r2, #0
 80020aa:	2105      	movs	r1, #5
 80020ac:	2025      	movs	r0, #37	; 0x25
 80020ae:	f001 fba6 	bl	80037fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020b2:	2025      	movs	r0, #37	; 0x25
 80020b4:	f001 fbbd 	bl	8003832 <HAL_NVIC_EnableIRQ>
}
 80020b8:	bf00      	nop
 80020ba:	3758      	adds	r7, #88	; 0x58
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40008000 	.word	0x40008000
 80020c4:	48000800 	.word	0x48000800
 80020c8:	40004400 	.word	0x40004400

080020cc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b090      	sub	sp, #64	; 0x40
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020d4:	f107 0308 	add.w	r3, r7, #8
 80020d8:	2238      	movs	r2, #56	; 0x38
 80020da:	2100      	movs	r1, #0
 80020dc:	4618      	mov	r0, r3
 80020de:	f006 fbec 	bl	80088ba <memset>
  if(hrtc->Instance==RTC)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a0e      	ldr	r2, [pc, #56]	; (8002120 <HAL_RTC_MspInit+0x54>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d115      	bne.n	8002118 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80020ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020f0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80020f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020f6:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020f8:	f107 0308 	add.w	r3, r7, #8
 80020fc:	4618      	mov	r0, r3
 80020fe:	f003 f8d9 	bl	80052b4 <HAL_RCCEx_PeriphCLKConfig>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002108:	f7ff fdfa 	bl	8001d00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800210c:	f7ff fe64 	bl	8001dd8 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002110:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002114:	f7ff fe88 	bl	8001e28 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002118:	bf00      	nop
 800211a:	3740      	adds	r7, #64	; 0x40
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40002800 	.word	0x40002800

08002124 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b096      	sub	sp, #88	; 0x58
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800213c:	f107 030c 	add.w	r3, r7, #12
 8002140:	2238      	movs	r2, #56	; 0x38
 8002142:	2100      	movs	r1, #0
 8002144:	4618      	mov	r0, r3
 8002146:	f006 fbb8 	bl	80088ba <memset>
  if(hspi->Instance==SPI2)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a21      	ldr	r2, [pc, #132]	; (80021d4 <HAL_SPI_MspInit+0xb0>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d13b      	bne.n	80021cc <HAL_SPI_MspInit+0xa8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 8002154:	2310      	movs	r3, #16
 8002156:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 8002158:	f44f 7300 	mov.w	r3, #512	; 0x200
 800215c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800215e:	f107 030c 	add.w	r3, r7, #12
 8002162:	4618      	mov	r0, r3
 8002164:	f003 f8a6 	bl	80052b4 <HAL_RCCEx_PeriphCLKConfig>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800216e:	f7ff fdc7 	bl	8001d00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002172:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002176:	f7ff fe57 	bl	8001e28 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800217a:	2002      	movs	r0, #2
 800217c:	f7ff fe3c 	bl	8001df8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002180:	2001      	movs	r0, #1
 8002182:	f7ff fe39 	bl	8001df8 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PA10     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = MISO_Pin|SCK_Pin;
 8002186:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800218a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218c:	2302      	movs	r3, #2
 800218e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002190:	2300      	movs	r3, #0
 8002192:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002194:	2300      	movs	r3, #0
 8002196:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002198:	2305      	movs	r3, #5
 800219a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800219c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80021a0:	4619      	mov	r1, r3
 80021a2:	480d      	ldr	r0, [pc, #52]	; (80021d8 <HAL_SPI_MspInit+0xb4>)
 80021a4:	f001 fc1c 	bl	80039e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOSI_Pin;
 80021a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021ac:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ae:	2302      	movs	r3, #2
 80021b0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b6:	2300      	movs	r3, #0
 80021b8:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021ba:	2305      	movs	r3, #5
 80021bc:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(MOSI_GPIO_Port, &GPIO_InitStruct);
 80021be:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80021c2:	4619      	mov	r1, r3
 80021c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021c8:	f001 fc0a 	bl	80039e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80021cc:	bf00      	nop
 80021ce:	3758      	adds	r7, #88	; 0x58
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40003800 	.word	0x40003800
 80021d8:	48000400 	.word	0x48000400

080021dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a09      	ldr	r2, [pc, #36]	; (8002210 <HAL_TIM_Base_MspInit+0x34>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d10b      	bne.n	8002206 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80021ee:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80021f2:	f7ff fe49 	bl	8001e88 <LL_APB2_GRP1_EnableClock>
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 15, 0);
 80021f6:	2200      	movs	r2, #0
 80021f8:	210f      	movs	r1, #15
 80021fa:	201c      	movs	r0, #28
 80021fc:	f001 faff 	bl	80037fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002200:	201c      	movs	r0, #28
 8002202:	f001 fb16 	bl	8003832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40014400 	.word	0x40014400

08002214 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002218:	e7fe      	b.n	8002218 <NMI_Handler+0x4>

0800221a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800221a:	b480      	push	{r7}
 800221c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800221e:	e7fe      	b.n	800221e <HardFault_Handler+0x4>

08002220 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002224:	e7fe      	b.n	8002224 <MemManage_Handler+0x4>

08002226 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002226:	b480      	push	{r7}
 8002228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800222a:	e7fe      	b.n	800222a <BusFault_Handler+0x4>

0800222c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002230:	e7fe      	b.n	8002230 <UsageFault_Handler+0x4>

08002232 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr

0800223e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800223e:	b480      	push	{r7}
 8002240:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr

0800224a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800224a:	b480      	push	{r7}
 800224c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr

08002256 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800225a:	f000 f9bf 	bl	80025dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002268:	4802      	ldr	r0, [pc, #8]	; (8002274 <USART2_IRQHandler+0x10>)
 800226a:	f004 fa39 	bl	80066e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	2000045c 	.word	0x2000045c

08002278 <Tick_Init>:
 */
static volatile uint32_t Tick = 0;
extern TIM_HandleTypeDef htim16;

void Tick_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 800227c:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <Tick_Init+0x4c>)
 800227e:	4a12      	ldr	r2, [pc, #72]	; (80022c8 <Tick_Init+0x50>)
 8002280:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 0;
 8002282:	4b10      	ldr	r3, [pc, #64]	; (80022c4 <Tick_Init+0x4c>)
 8002284:	2200      	movs	r2, #0
 8002286:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002288:	4b0e      	ldr	r3, [pc, #56]	; (80022c4 <Tick_Init+0x4c>)
 800228a:	2200      	movs	r2, #0
 800228c:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 47999;
 800228e:	4b0d      	ldr	r3, [pc, #52]	; (80022c4 <Tick_Init+0x4c>)
 8002290:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8002294:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002296:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <Tick_Init+0x4c>)
 8002298:	2200      	movs	r2, #0
 800229a:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 800229c:	4b09      	ldr	r3, [pc, #36]	; (80022c4 <Tick_Init+0x4c>)
 800229e:	2200      	movs	r2, #0
 80022a0:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022a2:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <Tick_Init+0x4c>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80022a8:	4806      	ldr	r0, [pc, #24]	; (80022c4 <Tick_Init+0x4c>)
 80022aa:	f003 fd4e 	bl	8005d4a <HAL_TIM_Base_Init>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <Tick_Init+0x40>
	{
		Error_Handler();
 80022b4:	f7ff fd24 	bl	8001d00 <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */
	HAL_TIM_Base_Start_IT(&htim16);
 80022b8:	4802      	ldr	r0, [pc, #8]	; (80022c4 <Tick_Init+0x4c>)
 80022ba:	f003 fd9d 	bl	8005df8 <HAL_TIM_Base_Start_IT>
	/* USER CODE END TIM16_Init 2 */
}
 80022be:	bf00      	nop
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	2000058c 	.word	0x2000058c
 80022c8:	40014400 	.word	0x40014400

080022cc <SysTick_Get>:

uint32_t SysTick_Get()
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
	return Tick;
 80022d0:	4b02      	ldr	r3, [pc, #8]	; (80022dc <SysTick_Get+0x10>)
 80022d2:	681b      	ldr	r3, [r3, #0]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr
 80022dc:	200005e4 	.word	0x200005e4

080022e0 <TIM16_IRQHandler>:

/**
 * @brief This function handles TIM16 global interrupt.
 */
void TIM16_IRQHandler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM16_IRQn 0 */

	/* USER CODE END TIM16_IRQn 0 */
	HAL_TIM_IRQHandler(&htim16);
 80022e4:	4804      	ldr	r0, [pc, #16]	; (80022f8 <TIM16_IRQHandler+0x18>)
 80022e6:	f003 fdd3 	bl	8005e90 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM16_IRQn 1 */
	Tick++;
 80022ea:	4b04      	ldr	r3, [pc, #16]	; (80022fc <TIM16_IRQHandler+0x1c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	3301      	adds	r3, #1
 80022f0:	4a02      	ldr	r2, [pc, #8]	; (80022fc <TIM16_IRQHandler+0x1c>)
 80022f2:	6013      	str	r3, [r2, #0]
	/* USER CODE END TIM16_IRQn 1 */
}
 80022f4:	bf00      	nop
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	2000058c 	.word	0x2000058c
 80022fc:	200005e4 	.word	0x200005e4

08002300 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return 1;
 8002304:	2301      	movs	r3, #1
}
 8002306:	4618      	mov	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr

0800230e <_kill>:

int _kill(int pid, int sig)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b082      	sub	sp, #8
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002318:	f006 fb8c 	bl	8008a34 <__errno>
 800231c:	4603      	mov	r3, r0
 800231e:	2216      	movs	r2, #22
 8002320:	601a      	str	r2, [r3, #0]
  return -1;
 8002322:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <_exit>:

void _exit (int status)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002336:	f04f 31ff 	mov.w	r1, #4294967295
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7ff ffe7 	bl	800230e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002340:	e7fe      	b.n	8002340 <_exit+0x12>

08002342 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b086      	sub	sp, #24
 8002346:	af00      	add	r7, sp, #0
 8002348:	60f8      	str	r0, [r7, #12]
 800234a:	60b9      	str	r1, [r7, #8]
 800234c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]
 8002352:	e00a      	b.n	800236a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002354:	f3af 8000 	nop.w
 8002358:	4601      	mov	r1, r0
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	1c5a      	adds	r2, r3, #1
 800235e:	60ba      	str	r2, [r7, #8]
 8002360:	b2ca      	uxtb	r2, r1
 8002362:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	3301      	adds	r3, #1
 8002368:	617b      	str	r3, [r7, #20]
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	429a      	cmp	r2, r3
 8002370:	dbf0      	blt.n	8002354 <_read+0x12>
  }

  return len;
 8002372:	687b      	ldr	r3, [r7, #4]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	e009      	b.n	80023a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	1c5a      	adds	r2, r3, #1
 8002392:	60ba      	str	r2, [r7, #8]
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	3301      	adds	r3, #1
 80023a0:	617b      	str	r3, [r7, #20]
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	dbf1      	blt.n	800238e <_write+0x12>
  }
  return len;
 80023aa:	687b      	ldr	r3, [r7, #4]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3718      	adds	r7, #24
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <_close>:

int _close(int file)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr

080023ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b083      	sub	sp, #12
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
 80023d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023da:	605a      	str	r2, [r3, #4]
  return 0;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr

080023e8 <_isatty>:

int _isatty(int file)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023f0:	2301      	movs	r3, #1
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr

080023fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr

08002414 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800241c:	4a14      	ldr	r2, [pc, #80]	; (8002470 <_sbrk+0x5c>)
 800241e:	4b15      	ldr	r3, [pc, #84]	; (8002474 <_sbrk+0x60>)
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002428:	4b13      	ldr	r3, [pc, #76]	; (8002478 <_sbrk+0x64>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d102      	bne.n	8002436 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002430:	4b11      	ldr	r3, [pc, #68]	; (8002478 <_sbrk+0x64>)
 8002432:	4a12      	ldr	r2, [pc, #72]	; (800247c <_sbrk+0x68>)
 8002434:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002436:	4b10      	ldr	r3, [pc, #64]	; (8002478 <_sbrk+0x64>)
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4413      	add	r3, r2
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	429a      	cmp	r2, r3
 8002442:	d207      	bcs.n	8002454 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002444:	f006 faf6 	bl	8008a34 <__errno>
 8002448:	4603      	mov	r3, r0
 800244a:	220c      	movs	r2, #12
 800244c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800244e:	f04f 33ff 	mov.w	r3, #4294967295
 8002452:	e009      	b.n	8002468 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002454:	4b08      	ldr	r3, [pc, #32]	; (8002478 <_sbrk+0x64>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800245a:	4b07      	ldr	r3, [pc, #28]	; (8002478 <_sbrk+0x64>)
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4413      	add	r3, r2
 8002462:	4a05      	ldr	r2, [pc, #20]	; (8002478 <_sbrk+0x64>)
 8002464:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002466:	68fb      	ldr	r3, [r7, #12]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20010000 	.word	0x20010000
 8002474:	00000400 	.word	0x00000400
 8002478:	200005e8 	.word	0x200005e8
 800247c:	20000740 	.word	0x20000740

08002480 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002484:	bf00      	nop
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr

0800248c <Task>:

#include <task.h>					// For this modules definitions

void Task(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  // Place your idle task code here
}
 8002490:	bf00      	nop
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr

08002498 <Task_100ms>:
#include <stdbool.h>



void Task_100ms(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
	//serialPutStr("100ms\n");
}
 800249c:	bf00      	nop
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr

080024a4 <Task_10ms>:
*******************************************************************************/
#include <task_10ms.h>					// For this modules definitions


void Task_10ms(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
	//serialPutStr("10ms\n");
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr

080024b0 <Task_ConfigGet>:
 */
static uint8_t const TaskTotalNumber = sizeof(Tasks) / sizeof(*Tasks);


Task_t *Task_ConfigGet(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
   	return Tasks;
 80024b4:	4b02      	ldr	r3, [pc, #8]	; (80024c0 <Task_ConfigGet+0x10>)
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bc80      	pop	{r7}
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	20000004 	.word	0x20000004

080024c4 <Task_NumTasksGet>:


uint8_t const Task_NumTasksGet(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
	return TaskTotalNumber;
 80024c8:	2305      	movs	r3, #5
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bc80      	pop	{r7}
 80024d0:	4770      	bx	lr
	...

080024d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024d4:	480d      	ldr	r0, [pc, #52]	; (800250c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024d6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80024d8:	f7ff ffd2 	bl	8002480 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024dc:	480c      	ldr	r0, [pc, #48]	; (8002510 <LoopForever+0x6>)
  ldr r1, =_edata
 80024de:	490d      	ldr	r1, [pc, #52]	; (8002514 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024e0:	4a0d      	ldr	r2, [pc, #52]	; (8002518 <LoopForever+0xe>)
  movs r3, #0
 80024e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024e4:	e002      	b.n	80024ec <LoopCopyDataInit>

080024e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ea:	3304      	adds	r3, #4

080024ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024f0:	d3f9      	bcc.n	80024e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024f2:	4a0a      	ldr	r2, [pc, #40]	; (800251c <LoopForever+0x12>)
  ldr r4, =_ebss
 80024f4:	4c0a      	ldr	r4, [pc, #40]	; (8002520 <LoopForever+0x16>)
  movs r3, #0
 80024f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024f8:	e001      	b.n	80024fe <LoopFillZerobss>

080024fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024fc:	3204      	adds	r2, #4

080024fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002500:	d3fb      	bcc.n	80024fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002502:	f006 fa9d 	bl	8008a40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002506:	f7ff f8e2 	bl	80016ce <main>

0800250a <LoopForever>:

LoopForever:
    b LoopForever
 800250a:	e7fe      	b.n	800250a <LoopForever>
  ldr   r0, =_estack
 800250c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002514:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8002518:	0800b278 	.word	0x0800b278
  ldr r2, =_sbss
 800251c:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8002520:	2000073c 	.word	0x2000073c

08002524 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002524:	e7fe      	b.n	8002524 <ADC_IRQHandler>
	...

08002528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800252e:	2300      	movs	r3, #0
 8002530:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002532:	2003      	movs	r0, #3
 8002534:	f001 f958 	bl	80037e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002538:	f002 fcde 	bl	8004ef8 <HAL_RCC_GetHCLKFreq>
 800253c:	4603      	mov	r3, r0
 800253e:	4a09      	ldr	r2, [pc, #36]	; (8002564 <HAL_Init+0x3c>)
 8002540:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002542:	200f      	movs	r0, #15
 8002544:	f000 f810 	bl	8002568 <HAL_InitTick>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d002      	beq.n	8002554 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	71fb      	strb	r3, [r7, #7]
 8002552:	e001      	b.n	8002558 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002554:	f7ff fcb0 	bl	8001eb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002558:	79fb      	ldrb	r3, [r7, #7]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	20000000 	.word	0x20000000

08002568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002570:	2300      	movs	r3, #0
 8002572:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002574:	4b17      	ldr	r3, [pc, #92]	; (80025d4 <HAL_InitTick+0x6c>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d024      	beq.n	80025c6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800257c:	f002 fcbc 	bl	8004ef8 <HAL_RCC_GetHCLKFreq>
 8002580:	4602      	mov	r2, r0
 8002582:	4b14      	ldr	r3, [pc, #80]	; (80025d4 <HAL_InitTick+0x6c>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	4619      	mov	r1, r3
 8002588:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800258c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002590:	fbb2 f3f3 	udiv	r3, r2, r3
 8002594:	4618      	mov	r0, r3
 8002596:	f001 f95a 	bl	800384e <HAL_SYSTICK_Config>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10f      	bne.n	80025c0 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b0f      	cmp	r3, #15
 80025a4:	d809      	bhi.n	80025ba <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025a6:	2200      	movs	r2, #0
 80025a8:	6879      	ldr	r1, [r7, #4]
 80025aa:	f04f 30ff 	mov.w	r0, #4294967295
 80025ae:	f001 f926 	bl	80037fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025b2:	4a09      	ldr	r2, [pc, #36]	; (80025d8 <HAL_InitTick+0x70>)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6013      	str	r3, [r2, #0]
 80025b8:	e007      	b.n	80025ca <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	73fb      	strb	r3, [r7, #15]
 80025be:	e004      	b.n	80025ca <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	73fb      	strb	r3, [r7, #15]
 80025c4:	e001      	b.n	80025ca <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80025ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	20000044 	.word	0x20000044
 80025d8:	20000040 	.word	0x20000040

080025dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025e0:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <HAL_IncTick+0x1c>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	461a      	mov	r2, r3
 80025e6:	4b05      	ldr	r3, [pc, #20]	; (80025fc <HAL_IncTick+0x20>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4413      	add	r3, r2
 80025ec:	4a03      	ldr	r2, [pc, #12]	; (80025fc <HAL_IncTick+0x20>)
 80025ee:	6013      	str	r3, [r2, #0]
}
 80025f0:	bf00      	nop
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr
 80025f8:	20000044 	.word	0x20000044
 80025fc:	200005ec 	.word	0x200005ec

08002600 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return uwTick;
 8002604:	4b02      	ldr	r3, [pc, #8]	; (8002610 <HAL_GetTick+0x10>)
 8002606:	681b      	ldr	r3, [r3, #0]
}
 8002608:	4618      	mov	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr
 8002610:	200005ec 	.word	0x200005ec

08002614 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800261c:	f7ff fff0 	bl	8002600 <HAL_GetTick>
 8002620:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800262c:	d005      	beq.n	800263a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800262e:	4b0a      	ldr	r3, [pc, #40]	; (8002658 <HAL_Delay+0x44>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	461a      	mov	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4413      	add	r3, r2
 8002638:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800263a:	bf00      	nop
 800263c:	f7ff ffe0 	bl	8002600 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	429a      	cmp	r2, r3
 800264a:	d8f7      	bhi.n	800263c <HAL_Delay+0x28>
  {
  }
}
 800264c:	bf00      	nop
 800264e:	bf00      	nop
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	20000044 	.word	0x20000044

0800265c <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8002660:	4b02      	ldr	r3, [pc, #8]	; (800266c <HAL_GetUIDw0+0x10>)
 8002662:	681b      	ldr	r3, [r3, #0]
}
 8002664:	4618      	mov	r0, r3
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr
 800266c:	1fff7590 	.word	0x1fff7590

08002670 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002674:	4b02      	ldr	r3, [pc, #8]	; (8002680 <HAL_GetUIDw1+0x10>)
 8002676:	681b      	ldr	r3, [r3, #0]
}
 8002678:	4618      	mov	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr
 8002680:	1fff7594 	.word	0x1fff7594

08002684 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002688:	4b02      	ldr	r3, [pc, #8]	; (8002694 <HAL_GetUIDw2+0x10>)
 800268a:	681b      	ldr	r3, [r3, #0]
}
 800268c:	4618      	mov	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr
 8002694:	1fff7598 	.word	0x1fff7598

08002698 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	431a      	orrs	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	601a      	str	r2, [r3, #0]
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr

080026bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr

080026d6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b085      	sub	sp, #20
 80026da:	af00      	add	r7, sp, #0
 80026dc:	60f8      	str	r0, [r7, #12]
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	695a      	ldr	r2, [r3, #20]
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2107      	movs	r1, #7
 80026ee:	fa01 f303 	lsl.w	r3, r1, r3
 80026f2:	43db      	mvns	r3, r3
 80026f4:	401a      	ands	r2, r3
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002702:	431a      	orrs	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002708:	bf00      	nop
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	4770      	bx	lr

08002712 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	695a      	ldr	r2, [r3, #20]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	f003 0304 	and.w	r3, r3, #4
 8002726:	2107      	movs	r1, #7
 8002728:	fa01 f303 	lsl.w	r3, r1, r3
 800272c:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002738:	4618      	mov	r0, r3
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr

08002742 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002756:	2301      	movs	r3, #1
 8002758:	e000      	b.n	800275c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr

08002766 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002766:	b480      	push	{r7}
 8002768:	b085      	sub	sp, #20
 800276a:	af00      	add	r7, sp, #0
 800276c:	60f8      	str	r0, [r7, #12]
 800276e:	60b9      	str	r1, [r7, #8]
 8002770:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	f003 031f 	and.w	r3, r3, #31
 800277c:	210f      	movs	r1, #15
 800277e:	fa01 f303 	lsl.w	r3, r1, r3
 8002782:	43db      	mvns	r3, r3
 8002784:	401a      	ands	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	0e9b      	lsrs	r3, r3, #26
 800278a:	f003 010f 	and.w	r1, r3, #15
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	f003 031f 	and.w	r3, r3, #31
 8002794:	fa01 f303 	lsl.w	r3, r1, r3
 8002798:	431a      	orrs	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800279e:	bf00      	nop
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr

080027a8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80027bc:	431a      	orrs	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr

080027cc <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80027e0:	43db      	mvns	r3, r3
 80027e2:	401a      	ands	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr

080027f2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b085      	sub	sp, #20
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	695a      	ldr	r2, [r3, #20]
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	021b      	lsls	r3, r3, #8
 8002806:	43db      	mvns	r3, r3
 8002808:	401a      	ands	r2, r3
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	0219      	lsls	r1, r3, #8
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	400b      	ands	r3, r1
 8002812:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8002816:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800281a:	431a      	orrs	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002820:	bf00      	nop
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	bc80      	pop	{r7}
 8002828:	4770      	bx	lr

0800282a <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800282a:	b480      	push	{r7}
 800282c:	b083      	sub	sp, #12
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800283a:	f023 0317 	bic.w	r3, r3, #23
 800283e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr

08002850 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002860:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002864:	d101      	bne.n	800286a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002866:	2301      	movs	r3, #1
 8002868:	e000      	b.n	800286c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	bc80      	pop	{r7}
 8002874:	4770      	bx	lr

08002876 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002886:	f023 0317 	bic.w	r3, r3, #23
 800288a:	f043 0201 	orr.w	r2, r3, #1
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr

0800289c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028ac:	f023 0317 	bic.w	r3, r3, #23
 80028b0:	f043 0202 	orr.w	r2, r3, #2
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	bc80      	pop	{r7}
 80028c0:	4770      	bx	lr

080028c2 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d101      	bne.n	80028da <LL_ADC_IsEnabled+0x18>
 80028d6:	2301      	movs	r3, #1
 80028d8:	e000      	b.n	80028dc <LL_ADC_IsEnabled+0x1a>
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr

080028e6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d101      	bne.n	80028fe <LL_ADC_IsDisableOngoing+0x18>
 80028fa:	2301      	movs	r3, #1
 80028fc:	e000      	b.n	8002900 <LL_ADC_IsDisableOngoing+0x1a>
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr

0800290a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800291a:	f023 0317 	bic.w	r3, r3, #23
 800291e:	f043 0204 	orr.w	r2, r3, #4
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr

08002930 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002940:	f023 0317 	bic.w	r3, r3, #23
 8002944:	f043 0210 	orr.w	r2, r3, #16
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr

08002956 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 0304 	and.w	r3, r3, #4
 8002966:	2b04      	cmp	r3, #4
 8002968:	d101      	bne.n	800296e <LL_ADC_REG_IsConversionOngoing+0x18>
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr
	...

0800297c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b088      	sub	sp, #32
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002984:	2300      	movs	r3, #0
 8002986:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8002988:	2300      	movs	r3, #0
 800298a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 800298c:	2300      	movs	r3, #0
 800298e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002990:	2300      	movs	r3, #0
 8002992:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e17e      	b.n	8002c9c <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d109      	bne.n	80029c0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f7ff fa89 	bl	8001ec4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff ff43 	bl	8002850 <LL_ADC_IsInternalRegulatorEnabled>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d115      	bne.n	80029fc <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff ff28 	bl	800282a <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029da:	4b9e      	ldr	r3, [pc, #632]	; (8002c54 <HAL_ADC_Init+0x2d8>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	099b      	lsrs	r3, r3, #6
 80029e0:	4a9d      	ldr	r2, [pc, #628]	; (8002c58 <HAL_ADC_Init+0x2dc>)
 80029e2:	fba2 2303 	umull	r2, r3, r2, r3
 80029e6:	099b      	lsrs	r3, r3, #6
 80029e8:	3301      	adds	r3, #1
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80029ee:	e002      	b.n	80029f6 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	3b01      	subs	r3, #1
 80029f4:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1f9      	bne.n	80029f0 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff ff25 	bl	8002850 <LL_ADC_IsInternalRegulatorEnabled>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10d      	bne.n	8002a28 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a10:	f043 0210 	orr.w	r2, r3, #16
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1c:	f043 0201 	orr.w	r2, r3, #1
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff ff92 	bl	8002956 <LL_ADC_REG_IsConversionOngoing>
 8002a32:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a38:	f003 0310 	and.w	r3, r3, #16
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f040 8124 	bne.w	8002c8a <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f040 8120 	bne.w	8002c8a <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002a52:	f043 0202 	orr.w	r2, r3, #2
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff ff2f 	bl	80028c2 <LL_ADC_IsEnabled>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f040 80a7 	bne.w	8002bba <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	7e1b      	ldrb	r3, [r3, #24]
 8002a74:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002a76:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	7e5b      	ldrb	r3, [r3, #25]
 8002a7c:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002a7e:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	7e9b      	ldrb	r3, [r3, #26]
 8002a84:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002a86:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a8c:	2a00      	cmp	r2, #0
 8002a8e:	d002      	beq.n	8002a96 <HAL_ADC_Init+0x11a>
 8002a90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a94:	e000      	b.n	8002a98 <HAL_ADC_Init+0x11c>
 8002a96:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002a98:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002a9e:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	da04      	bge.n	8002ab2 <HAL_ADC_Init+0x136>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ab0:	e001      	b.n	8002ab6 <HAL_ADC_Init+0x13a>
 8002ab2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8002ab6:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002abe:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002ac0:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d114      	bne.n	8002afc <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	7e9b      	ldrb	r3, [r3, #26]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d104      	bne.n	8002ae4 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae0:	61bb      	str	r3, [r7, #24]
 8002ae2:	e00b      	b.n	8002afc <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae8:	f043 0220 	orr.w	r2, r3, #32
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af4:	f043 0201 	orr.w	r2, r3, #1
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d009      	beq.n	8002b18 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002b10:	4313      	orrs	r3, r2
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8002b22:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6812      	ldr	r2, [r2, #0]
 8002b2a:	69b9      	ldr	r1, [r7, #24]
 8002b2c:	430b      	orrs	r3, r1
 8002b2e:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d111      	bne.n	8002b72 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002b5a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002b60:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002b66:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	691a      	ldr	r2, [r3, #16]
 8002b78:	4b38      	ldr	r3, [pc, #224]	; (8002c5c <HAL_ADC_Init+0x2e0>)
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6812      	ldr	r2, [r2, #0]
 8002b80:	6979      	ldr	r1, [r7, #20]
 8002b82:	430b      	orrs	r3, r1
 8002b84:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002b8e:	d014      	beq.n	8002bba <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b98:	d00f      	beq.n	8002bba <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002b9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ba2:	d00a      	beq.n	8002bba <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002ba4:	4b2e      	ldr	r3, [pc, #184]	; (8002c60 <HAL_ADC_Init+0x2e4>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002bb4:	492a      	ldr	r1, [pc, #168]	; (8002c60 <HAL_ADC_Init+0x2e4>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6818      	ldr	r0, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	f7ff fd86 	bl	80026d6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6818      	ldr	r0, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	4923      	ldr	r1, [pc, #140]	; (8002c64 <HAL_ADC_Init+0x2e8>)
 8002bd6:	f7ff fd7e 	bl	80026d6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d108      	bne.n	8002bf4 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f062 020f 	orn	r2, r2, #15
 8002bf0:	629a      	str	r2, [r3, #40]	; 0x28
 8002bf2:	e017      	b.n	8002c24 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bfc:	d112      	bne.n	8002c24 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	f003 031c 	and.w	r3, r3, #28
 8002c10:	f06f 020f 	mvn.w	r2, #15
 8002c14:	fa02 f103 	lsl.w	r1, r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2100      	movs	r1, #0
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff fd71 	bl	8002712 <LL_ADC_GetSamplingTimeCommonChannels>
 8002c30:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d116      	bne.n	8002c68 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c44:	f023 0303 	bic.w	r3, r3, #3
 8002c48:	f043 0201 	orr.w	r2, r3, #1
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002c50:	e023      	b.n	8002c9a <HAL_ADC_Init+0x31e>
 8002c52:	bf00      	nop
 8002c54:	20000000 	.word	0x20000000
 8002c58:	053e2d63 	.word	0x053e2d63
 8002c5c:	1ffffc02 	.word	0x1ffffc02
 8002c60:	40012708 	.word	0x40012708
 8002c64:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6c:	f023 0312 	bic.w	r3, r3, #18
 8002c70:	f043 0210 	orr.w	r2, r3, #16
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7c:	f043 0201 	orr.w	r2, r3, #1
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002c88:	e007      	b.n	8002c9a <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8e:	f043 0210 	orr.w	r2, r3, #16
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8002c9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3720      	adds	r7, #32
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff fe50 	bl	8002956 <LL_ADC_REG_IsConversionOngoing>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d132      	bne.n	8002d22 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d101      	bne.n	8002cca <HAL_ADC_Start+0x26>
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	e02e      	b.n	8002d28 <HAL_ADC_Start+0x84>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 fa8a 	bl	80031ec <ADC_Enable>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d11a      	bne.n	8002d18 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002cea:	f023 0301 	bic.w	r3, r3, #1
 8002cee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	221c      	movs	r2, #28
 8002d02:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff fdfa 	bl	800290a <LL_ADC_REG_StartConversion>
 8002d16:	e006      	b.n	8002d26 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002d20:	e001      	b.n	8002d26 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d22:	2302      	movs	r3, #2
 8002d24:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8002d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d101      	bne.n	8002d46 <HAL_ADC_Stop+0x16>
 8002d42:	2302      	movs	r3, #2
 8002d44:	e022      	b.n	8002d8c <HAL_ADC_Stop+0x5c>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 fa07 	bl	8003162 <ADC_ConversionStop>
 8002d54:	4603      	mov	r3, r0
 8002d56:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d111      	bne.n	8002d82 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 faca 	bl	80032f8 <ADC_Disable>
 8002d64:	4603      	mov	r3, r0
 8002d66:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d109      	bne.n	8002d82 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d76:	f023 0301 	bic.w	r3, r3, #1
 8002d7a:	f043 0201 	orr.w	r2, r3, #1
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8002d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	2b08      	cmp	r3, #8
 8002da4:	d102      	bne.n	8002dac <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8002da6:	2308      	movs	r3, #8
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	e010      	b.n	8002dce <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d007      	beq.n	8002dca <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dbe:	f043 0220 	orr.w	r2, r3, #32
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e077      	b.n	8002eba <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002dca:	2304      	movs	r3, #4
 8002dcc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002dce:	f7ff fc17 	bl	8002600 <HAL_GetTick>
 8002dd2:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002dd4:	e021      	b.n	8002e1a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ddc:	d01d      	beq.n	8002e1a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002dde:	f7ff fc0f 	bl	8002600 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d302      	bcc.n	8002df4 <HAL_ADC_PollForConversion+0x60>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d112      	bne.n	8002e1a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10b      	bne.n	8002e1a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e06:	f043 0204 	orr.w	r2, r3, #4
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e04f      	b.n	8002eba <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4013      	ands	r3, r2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0d6      	beq.n	8002dd6 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff fc82 	bl	8002742 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d031      	beq.n	8002ea8 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	7e9b      	ldrb	r3, [r3, #26]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d12d      	bne.n	8002ea8 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d126      	bne.n	8002ea8 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff fd79 	bl	8002956 <LL_ADC_REG_IsConversionOngoing>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d112      	bne.n	8002e90 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 020c 	bic.w	r2, r2, #12
 8002e78:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e82:	f023 0301 	bic.w	r3, r3, #1
 8002e86:	f043 0201 	orr.w	r2, r3, #1
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	659a      	str	r2, [r3, #88]	; 0x58
 8002e8e:	e00b      	b.n	8002ea8 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e94:	f043 0220 	orr.w	r2, r3, #32
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea0:	f043 0201 	orr.w	r2, r3, #1
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	7e1b      	ldrb	r3, [r3, #24]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d103      	bne.n	8002eb8 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	220c      	movs	r2, #12
 8002eb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr
	...

08002edc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b088      	sub	sp, #32
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002eea:	2300      	movs	r3, #0
 8002eec:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <HAL_ADC_ConfigChannel+0x28>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e110      	b.n	8003126 <HAL_ADC_ConfigChannel+0x24a>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff fd20 	bl	8002956 <LL_ADC_REG_IsConversionOngoing>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f040 80f7 	bne.w	800310c <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	f000 80b1 	beq.w	800308a <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f30:	d004      	beq.n	8002f3c <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002f36:	4a7e      	ldr	r2, [pc, #504]	; (8003130 <HAL_ADC_ConfigChannel+0x254>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d108      	bne.n	8002f4e <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4619      	mov	r1, r3
 8002f46:	4610      	mov	r0, r2
 8002f48:	f7ff fc2e 	bl	80027a8 <LL_ADC_REG_SetSequencerChAdd>
 8002f4c:	e041      	b.n	8002fd2 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f003 031f 	and.w	r3, r3, #31
 8002f5a:	210f      	movs	r1, #15
 8002f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f60:	43db      	mvns	r3, r3
 8002f62:	401a      	ands	r2, r3
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d105      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0xa0>
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	0e9b      	lsrs	r3, r3, #26
 8002f76:	f003 031f 	and.w	r3, r3, #31
 8002f7a:	e011      	b.n	8002fa0 <HAL_ADC_ConfigChannel+0xc4>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	fa93 f3a3 	rbit	r3, r3
 8002f88:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8002f94:	2320      	movs	r3, #32
 8002f96:	e003      	b.n	8002fa0 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	fab3 f383 	clz	r3, r3
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	6839      	ldr	r1, [r7, #0]
 8002fa2:	6849      	ldr	r1, [r1, #4]
 8002fa4:	f001 011f 	and.w	r1, r1, #31
 8002fa8:	408b      	lsls	r3, r1
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	089b      	lsrs	r3, r3, #2
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	69db      	ldr	r3, [r3, #28]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d808      	bhi.n	8002fd2 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6818      	ldr	r0, [r3, #0]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	6859      	ldr	r1, [r3, #4]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	461a      	mov	r2, r3
 8002fce:	f7ff fbca 	bl	8002766 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6818      	ldr	r0, [r3, #0]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	6819      	ldr	r1, [r3, #0]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	f7ff fc07 	bl	80027f2 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f280 8097 	bge.w	800311c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fee:	4851      	ldr	r0, [pc, #324]	; (8003134 <HAL_ADC_ConfigChannel+0x258>)
 8002ff0:	f7ff fb64 	bl	80026bc <LL_ADC_GetCommonPathInternalCh>
 8002ff4:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a4f      	ldr	r2, [pc, #316]	; (8003138 <HAL_ADC_ConfigChannel+0x25c>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d120      	bne.n	8003042 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003006:	2b00      	cmp	r3, #0
 8003008:	d11b      	bne.n	8003042 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003010:	4619      	mov	r1, r3
 8003012:	4848      	ldr	r0, [pc, #288]	; (8003134 <HAL_ADC_ConfigChannel+0x258>)
 8003014:	f7ff fb40 	bl	8002698 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003018:	4b48      	ldr	r3, [pc, #288]	; (800313c <HAL_ADC_ConfigChannel+0x260>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	099b      	lsrs	r3, r3, #6
 800301e:	4a48      	ldr	r2, [pc, #288]	; (8003140 <HAL_ADC_ConfigChannel+0x264>)
 8003020:	fba2 2303 	umull	r2, r3, r2, r3
 8003024:	099b      	lsrs	r3, r3, #6
 8003026:	1c5a      	adds	r2, r3, #1
 8003028:	4613      	mov	r3, r2
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	4413      	add	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003032:	e002      	b.n	800303a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	3b01      	subs	r3, #1
 8003038:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1f9      	bne.n	8003034 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003040:	e06c      	b.n	800311c <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a3f      	ldr	r2, [pc, #252]	; (8003144 <HAL_ADC_ConfigChannel+0x268>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d10c      	bne.n	8003066 <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d107      	bne.n	8003066 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800305c:	4619      	mov	r1, r3
 800305e:	4835      	ldr	r0, [pc, #212]	; (8003134 <HAL_ADC_ConfigChannel+0x258>)
 8003060:	f7ff fb1a 	bl	8002698 <LL_ADC_SetCommonPathInternalCh>
 8003064:	e05a      	b.n	800311c <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a37      	ldr	r2, [pc, #220]	; (8003148 <HAL_ADC_ConfigChannel+0x26c>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d155      	bne.n	800311c <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003076:	2b00      	cmp	r3, #0
 8003078:	d150      	bne.n	800311c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003080:	4619      	mov	r1, r3
 8003082:	482c      	ldr	r0, [pc, #176]	; (8003134 <HAL_ADC_ConfigChannel+0x258>)
 8003084:	f7ff fb08 	bl	8002698 <LL_ADC_SetCommonPathInternalCh>
 8003088:	e048      	b.n	800311c <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003092:	d004      	beq.n	800309e <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003098:	4a25      	ldr	r2, [pc, #148]	; (8003130 <HAL_ADC_ConfigChannel+0x254>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d107      	bne.n	80030ae <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4619      	mov	r1, r3
 80030a8:	4610      	mov	r0, r2
 80030aa:	f7ff fb8f 	bl	80027cc <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	da32      	bge.n	800311c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030b6:	481f      	ldr	r0, [pc, #124]	; (8003134 <HAL_ADC_ConfigChannel+0x258>)
 80030b8:	f7ff fb00 	bl	80026bc <LL_ADC_GetCommonPathInternalCh>
 80030bc:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a1d      	ldr	r2, [pc, #116]	; (8003138 <HAL_ADC_ConfigChannel+0x25c>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d107      	bne.n	80030d8 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80030ce:	4619      	mov	r1, r3
 80030d0:	4818      	ldr	r0, [pc, #96]	; (8003134 <HAL_ADC_ConfigChannel+0x258>)
 80030d2:	f7ff fae1 	bl	8002698 <LL_ADC_SetCommonPathInternalCh>
 80030d6:	e021      	b.n	800311c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a19      	ldr	r2, [pc, #100]	; (8003144 <HAL_ADC_ConfigChannel+0x268>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d107      	bne.n	80030f2 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030e8:	4619      	mov	r1, r3
 80030ea:	4812      	ldr	r0, [pc, #72]	; (8003134 <HAL_ADC_ConfigChannel+0x258>)
 80030ec:	f7ff fad4 	bl	8002698 <LL_ADC_SetCommonPathInternalCh>
 80030f0:	e014      	b.n	800311c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a14      	ldr	r2, [pc, #80]	; (8003148 <HAL_ADC_ConfigChannel+0x26c>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d10f      	bne.n	800311c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003102:	4619      	mov	r1, r3
 8003104:	480b      	ldr	r0, [pc, #44]	; (8003134 <HAL_ADC_ConfigChannel+0x258>)
 8003106:	f7ff fac7 	bl	8002698 <LL_ADC_SetCommonPathInternalCh>
 800310a:	e007      	b.n	800311c <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003110:	f043 0220 	orr.w	r2, r3, #32
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003124:	7ffb      	ldrb	r3, [r7, #31]
}
 8003126:	4618      	mov	r0, r3
 8003128:	3720      	adds	r7, #32
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	80000004 	.word	0x80000004
 8003134:	40012708 	.word	0x40012708
 8003138:	b0001000 	.word	0xb0001000
 800313c:	20000000 	.word	0x20000000
 8003140:	053e2d63 	.word	0x053e2d63
 8003144:	b8004000 	.word	0xb8004000
 8003148:	b4002000 	.word	0xb4002000

0800314c <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003158:	4618      	mov	r0, r3
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	bc80      	pop	{r7}
 8003160:	4770      	bx	lr

08003162 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b084      	sub	sp, #16
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff fbf1 	bl	8002956 <LL_ADC_REG_IsConversionOngoing>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d033      	beq.n	80031e2 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff fbb1 	bl	80028e6 <LL_ADC_IsDisableOngoing>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d104      	bne.n	8003194 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff fbce 	bl	8002930 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003194:	f7ff fa34 	bl	8002600 <HAL_GetTick>
 8003198:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800319a:	e01b      	b.n	80031d4 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800319c:	f7ff fa30 	bl	8002600 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d914      	bls.n	80031d4 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00d      	beq.n	80031d4 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031bc:	f043 0210 	orr.w	r2, r3, #16
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c8:	f043 0201 	orr.w	r2, r3, #1
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e007      	b.n	80031e4 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 0304 	and.w	r3, r3, #4
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1dc      	bne.n	800319c <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80031f4:	2300      	movs	r3, #0
 80031f6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff fb60 	bl	80028c2 <LL_ADC_IsEnabled>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d169      	bne.n	80032dc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	4b36      	ldr	r3, [pc, #216]	; (80032e8 <ADC_Enable+0xfc>)
 8003210:	4013      	ands	r3, r2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00d      	beq.n	8003232 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321a:	f043 0210 	orr.w	r2, r3, #16
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003226:	f043 0201 	orr.w	r2, r3, #1
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e055      	b.n	80032de <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff fb1d 	bl	8002876 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 800323c:	482b      	ldr	r0, [pc, #172]	; (80032ec <ADC_Enable+0x100>)
 800323e:	f7ff fa3d 	bl	80026bc <LL_ADC_GetCommonPathInternalCh>
 8003242:	4603      	mov	r3, r0
 8003244:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00f      	beq.n	800326c <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800324c:	4b28      	ldr	r3, [pc, #160]	; (80032f0 <ADC_Enable+0x104>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	099b      	lsrs	r3, r3, #6
 8003252:	4a28      	ldr	r2, [pc, #160]	; (80032f4 <ADC_Enable+0x108>)
 8003254:	fba2 2303 	umull	r2, r3, r2, r3
 8003258:	099b      	lsrs	r3, r3, #6
 800325a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 800325c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800325e:	e002      	b.n	8003266 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	3b01      	subs	r3, #1
 8003264:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1f9      	bne.n	8003260 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	7e5b      	ldrb	r3, [r3, #25]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d033      	beq.n	80032dc <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003274:	f7ff f9c4 	bl	8002600 <HAL_GetTick>
 8003278:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800327a:	e028      	b.n	80032ce <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff fb1e 	bl	80028c2 <LL_ADC_IsEnabled>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d104      	bne.n	8003296 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff faf0 	bl	8002876 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003296:	f7ff f9b3 	bl	8002600 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d914      	bls.n	80032ce <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d00d      	beq.n	80032ce <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b6:	f043 0210 	orr.w	r2, r3, #16
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c2:	f043 0201 	orr.w	r2, r3, #1
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e007      	b.n	80032de <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d1cf      	bne.n	800327c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	80000017 	.word	0x80000017
 80032ec:	40012708 	.word	0x40012708
 80032f0:	20000000 	.word	0x20000000
 80032f4:	053e2d63 	.word	0x053e2d63

080032f8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff faee 	bl	80028e6 <LL_ADC_IsDisableOngoing>
 800330a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff fad6 	bl	80028c2 <LL_ADC_IsEnabled>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d047      	beq.n	80033ac <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d144      	bne.n	80033ac <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 0305 	and.w	r3, r3, #5
 800332c:	2b01      	cmp	r3, #1
 800332e:	d10c      	bne.n	800334a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff fab1 	bl	800289c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2203      	movs	r2, #3
 8003340:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003342:	f7ff f95d 	bl	8002600 <HAL_GetTick>
 8003346:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003348:	e029      	b.n	800339e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334e:	f043 0210 	orr.w	r2, r3, #16
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335a:	f043 0201 	orr.w	r2, r3, #1
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e023      	b.n	80033ae <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003366:	f7ff f94b 	bl	8002600 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d914      	bls.n	800339e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00d      	beq.n	800339e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003386:	f043 0210 	orr.w	r2, r3, #16
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003392:	f043 0201 	orr.w	r2, r3, #1
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e007      	b.n	80033ae <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1dc      	bne.n	8003366 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <LL_ADC_SetCalibrationFactor>:
{
 80033b6:	b480      	push	{r7}
 80033b8:	b083      	sub	sp, #12
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
 80033be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80033c6:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	431a      	orrs	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	bc80      	pop	{r7}
 80033dc:	4770      	bx	lr

080033de <LL_ADC_GetCalibrationFactor>:
{
 80033de:	b480      	push	{r7}
 80033e0:	b083      	sub	sp, #12
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80033ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bc80      	pop	{r7}
 80033f8:	4770      	bx	lr

080033fa <LL_ADC_Enable>:
{
 80033fa:	b480      	push	{r7}
 80033fc:	b083      	sub	sp, #12
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800340a:	f023 0317 	bic.w	r3, r3, #23
 800340e:	f043 0201 	orr.w	r2, r3, #1
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	609a      	str	r2, [r3, #8]
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	bc80      	pop	{r7}
 800341e:	4770      	bx	lr

08003420 <LL_ADC_Disable>:
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003430:	f023 0317 	bic.w	r3, r3, #23
 8003434:	f043 0202 	orr.w	r2, r3, #2
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	609a      	str	r2, [r3, #8]
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	bc80      	pop	{r7}
 8003444:	4770      	bx	lr

08003446 <LL_ADC_IsEnabled>:
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b01      	cmp	r3, #1
 8003458:	d101      	bne.n	800345e <LL_ADC_IsEnabled+0x18>
 800345a:	2301      	movs	r3, #1
 800345c:	e000      	b.n	8003460 <LL_ADC_IsEnabled+0x1a>
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	bc80      	pop	{r7}
 8003468:	4770      	bx	lr

0800346a <LL_ADC_StartCalibration>:
{
 800346a:	b480      	push	{r7}
 800346c:	b083      	sub	sp, #12
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800347a:	f023 0317 	bic.w	r3, r3, #23
 800347e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	609a      	str	r2, [r3, #8]
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	bc80      	pop	{r7}
 800348e:	4770      	bx	lr

08003490 <LL_ADC_IsCalibrationOnGoing>:
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034a4:	d101      	bne.n	80034aa <LL_ADC_IsCalibrationOnGoing+0x1a>
 80034a6:	2301      	movs	r3, #1
 80034a8:	e000      	b.n	80034ac <LL_ADC_IsCalibrationOnGoing+0x1c>
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc80      	pop	{r7}
 80034b4:	4770      	bx	lr

080034b6 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b088      	sub	sp, #32
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80034be:	2300      	movs	r3, #0
 80034c0:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80034c2:	2300      	movs	r3, #0
 80034c4:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d101      	bne.n	80034d4 <HAL_ADCEx_Calibration_Start+0x1e>
 80034d0:	2302      	movs	r3, #2
 80034d2:	e0b9      	b.n	8003648 <HAL_ADCEx_Calibration_Start+0x192>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f7ff ff0b 	bl	80032f8 <ADC_Disable>
 80034e2:	4603      	mov	r3, r0
 80034e4:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7ff ffab 	bl	8003446 <LL_ADC_IsEnabled>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f040 809d 	bne.w	8003632 <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003500:	f043 0202 	orr.w	r2, r3, #2
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	f248 0303 	movw	r3, #32771	; 0x8003
 8003512:	4013      	ands	r3, r2
 8003514:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	6812      	ldr	r2, [r2, #0]
 8003520:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003524:	f023 0303 	bic.w	r3, r3, #3
 8003528:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800352a:	2300      	movs	r3, #0
 800352c:	61fb      	str	r3, [r7, #28]
 800352e:	e02e      	b.n	800358e <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff ff98 	bl	800346a <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800353a:	e014      	b.n	8003566 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	3301      	adds	r3, #1
 8003540:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003548:	d30d      	bcc.n	8003566 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800354e:	f023 0312 	bic.w	r3, r3, #18
 8003552:	f043 0210 	orr.w	r2, r3, #16
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e070      	b.n	8003648 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff ff90 	bl	8003490 <LL_ADC_IsCalibrationOnGoing>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1e2      	bne.n	800353c <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff ff2f 	bl	80033de <LL_ADC_GetCalibrationFactor>
 8003580:	4602      	mov	r2, r0
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	4413      	add	r3, r2
 8003586:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	3301      	adds	r3, #1
 800358c:	61fb      	str	r3, [r7, #28]
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	2b07      	cmp	r3, #7
 8003592:	d9cd      	bls.n	8003530 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	fbb2 f3f3 	udiv	r3, r2, r3
 800359c:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff ff29 	bl	80033fa <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	69b9      	ldr	r1, [r7, #24]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff ff01 	bl	80033b6 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff ff31 	bl	8003420 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80035be:	f7ff f81f 	bl	8002600 <HAL_GetTick>
 80035c2:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80035c4:	e01c      	b.n	8003600 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80035c6:	f7ff f81b 	bl	8002600 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d915      	bls.n	8003600 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff ff34 	bl	8003446 <LL_ADC_IsEnabled>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00d      	beq.n	8003600 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e8:	f043 0210 	orr.w	r2, r3, #16
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f4:	f043 0201 	orr.w	r2, r3, #1
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e023      	b.n	8003648 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4618      	mov	r0, r3
 8003606:	f7ff ff1e 	bl	8003446 <LL_ADC_IsEnabled>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1da      	bne.n	80035c6 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68d9      	ldr	r1, [r3, #12]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	430a      	orrs	r2, r1
 800361e:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003624:	f023 0303 	bic.w	r3, r3, #3
 8003628:	f043 0201 	orr.w	r2, r3, #1
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	659a      	str	r2, [r3, #88]	; 0x58
 8003630:	e005      	b.n	800363e <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003636:	f043 0210 	orr.w	r2, r3, #16
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003646:	7dfb      	ldrb	r3, [r7, #23]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3720      	adds	r7, #32
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003660:	4b0c      	ldr	r3, [pc, #48]	; (8003694 <__NVIC_SetPriorityGrouping+0x44>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800366c:	4013      	ands	r3, r2
 800366e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003678:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800367c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003680:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003682:	4a04      	ldr	r2, [pc, #16]	; (8003694 <__NVIC_SetPriorityGrouping+0x44>)
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	60d3      	str	r3, [r2, #12]
}
 8003688:	bf00      	nop
 800368a:	3714      	adds	r7, #20
 800368c:	46bd      	mov	sp, r7
 800368e:	bc80      	pop	{r7}
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	e000ed00 	.word	0xe000ed00

08003698 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800369c:	4b04      	ldr	r3, [pc, #16]	; (80036b0 <__NVIC_GetPriorityGrouping+0x18>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	0a1b      	lsrs	r3, r3, #8
 80036a2:	f003 0307 	and.w	r3, r3, #7
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bc80      	pop	{r7}
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	e000ed00 	.word	0xe000ed00

080036b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	4603      	mov	r3, r0
 80036bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	db0b      	blt.n	80036de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036c6:	79fb      	ldrb	r3, [r7, #7]
 80036c8:	f003 021f 	and.w	r2, r3, #31
 80036cc:	4906      	ldr	r1, [pc, #24]	; (80036e8 <__NVIC_EnableIRQ+0x34>)
 80036ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d2:	095b      	lsrs	r3, r3, #5
 80036d4:	2001      	movs	r0, #1
 80036d6:	fa00 f202 	lsl.w	r2, r0, r2
 80036da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bc80      	pop	{r7}
 80036e6:	4770      	bx	lr
 80036e8:	e000e100 	.word	0xe000e100

080036ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	4603      	mov	r3, r0
 80036f4:	6039      	str	r1, [r7, #0]
 80036f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	db0a      	blt.n	8003716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	b2da      	uxtb	r2, r3
 8003704:	490c      	ldr	r1, [pc, #48]	; (8003738 <__NVIC_SetPriority+0x4c>)
 8003706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800370a:	0112      	lsls	r2, r2, #4
 800370c:	b2d2      	uxtb	r2, r2
 800370e:	440b      	add	r3, r1
 8003710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003714:	e00a      	b.n	800372c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	b2da      	uxtb	r2, r3
 800371a:	4908      	ldr	r1, [pc, #32]	; (800373c <__NVIC_SetPriority+0x50>)
 800371c:	79fb      	ldrb	r3, [r7, #7]
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	3b04      	subs	r3, #4
 8003724:	0112      	lsls	r2, r2, #4
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	440b      	add	r3, r1
 800372a:	761a      	strb	r2, [r3, #24]
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	bc80      	pop	{r7}
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	e000e100 	.word	0xe000e100
 800373c:	e000ed00 	.word	0xe000ed00

08003740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003740:	b480      	push	{r7}
 8003742:	b089      	sub	sp, #36	; 0x24
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	f1c3 0307 	rsb	r3, r3, #7
 800375a:	2b04      	cmp	r3, #4
 800375c:	bf28      	it	cs
 800375e:	2304      	movcs	r3, #4
 8003760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	3304      	adds	r3, #4
 8003766:	2b06      	cmp	r3, #6
 8003768:	d902      	bls.n	8003770 <NVIC_EncodePriority+0x30>
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	3b03      	subs	r3, #3
 800376e:	e000      	b.n	8003772 <NVIC_EncodePriority+0x32>
 8003770:	2300      	movs	r3, #0
 8003772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003774:	f04f 32ff 	mov.w	r2, #4294967295
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	43da      	mvns	r2, r3
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	401a      	ands	r2, r3
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003788:	f04f 31ff 	mov.w	r1, #4294967295
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	fa01 f303 	lsl.w	r3, r1, r3
 8003792:	43d9      	mvns	r1, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003798:	4313      	orrs	r3, r2
         );
}
 800379a:	4618      	mov	r0, r3
 800379c:	3724      	adds	r7, #36	; 0x24
 800379e:	46bd      	mov	sp, r7
 80037a0:	bc80      	pop	{r7}
 80037a2:	4770      	bx	lr

080037a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3b01      	subs	r3, #1
 80037b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037b4:	d301      	bcc.n	80037ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037b6:	2301      	movs	r3, #1
 80037b8:	e00f      	b.n	80037da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037ba:	4a0a      	ldr	r2, [pc, #40]	; (80037e4 <SysTick_Config+0x40>)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3b01      	subs	r3, #1
 80037c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037c2:	210f      	movs	r1, #15
 80037c4:	f04f 30ff 	mov.w	r0, #4294967295
 80037c8:	f7ff ff90 	bl	80036ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037cc:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <SysTick_Config+0x40>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037d2:	4b04      	ldr	r3, [pc, #16]	; (80037e4 <SysTick_Config+0x40>)
 80037d4:	2207      	movs	r2, #7
 80037d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	e000e010 	.word	0xe000e010

080037e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f7ff ff2d 	bl	8003650 <__NVIC_SetPriorityGrouping>
}
 80037f6:	bf00      	nop
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b086      	sub	sp, #24
 8003802:	af00      	add	r7, sp, #0
 8003804:	4603      	mov	r3, r0
 8003806:	60b9      	str	r1, [r7, #8]
 8003808:	607a      	str	r2, [r7, #4]
 800380a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800380c:	f7ff ff44 	bl	8003698 <__NVIC_GetPriorityGrouping>
 8003810:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	68b9      	ldr	r1, [r7, #8]
 8003816:	6978      	ldr	r0, [r7, #20]
 8003818:	f7ff ff92 	bl	8003740 <NVIC_EncodePriority>
 800381c:	4602      	mov	r2, r0
 800381e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003822:	4611      	mov	r1, r2
 8003824:	4618      	mov	r0, r3
 8003826:	f7ff ff61 	bl	80036ec <__NVIC_SetPriority>
}
 800382a:	bf00      	nop
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b082      	sub	sp, #8
 8003836:	af00      	add	r7, sp, #0
 8003838:	4603      	mov	r3, r0
 800383a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800383c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff ff37 	bl	80036b4 <__NVIC_EnableIRQ>
}
 8003846:	bf00      	nop
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b082      	sub	sp, #8
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7ff ffa4 	bl	80037a4 <SysTick_Config>
 800385c:	4603      	mov	r3, r0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003866:	b480      	push	{r7}
 8003868:	b083      	sub	sp, #12
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e04f      	b.n	8003918 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d008      	beq.n	8003896 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2204      	movs	r2, #4
 8003888:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e040      	b.n	8003918 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 020e 	bic.w	r2, r2, #14
 80038a4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0201 	bic.w	r2, r2, #1
 80038c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ca:	f003 021c 	and.w	r2, r3, #28
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	2101      	movs	r1, #1
 80038d4:	fa01 f202 	lsl.w	r2, r1, r2
 80038d8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80038e2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00c      	beq.n	8003906 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038fa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003904:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	bc80      	pop	{r7}
 8003920:	4770      	bx	lr

08003922 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b084      	sub	sp, #16
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800392a:	2300      	movs	r3, #0
 800392c:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d005      	beq.n	8003946 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2204      	movs	r2, #4
 800393e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	73fb      	strb	r3, [r7, #15]
 8003944:	e047      	b.n	80039d6 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 020e 	bic.w	r2, r2, #14
 8003954:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0201 	bic.w	r2, r2, #1
 8003964:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003970:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003974:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397a:	f003 021c 	and.w	r2, r3, #28
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	2101      	movs	r1, #1
 8003984:	fa01 f202 	lsl.w	r2, r1, r2
 8003988:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003992:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00c      	beq.n	80039b6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039aa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80039b4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	4798      	blx	r3
    }
  }
  return status;
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b087      	sub	sp, #28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039ea:	2300      	movs	r3, #0
 80039ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039ee:	e140      	b.n	8003c72 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	2101      	movs	r1, #1
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	fa01 f303 	lsl.w	r3, r1, r3
 80039fc:	4013      	ands	r3, r2
 80039fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f000 8132 	beq.w	8003c6c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f003 0303 	and.w	r3, r3, #3
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d005      	beq.n	8003a20 <HAL_GPIO_Init+0x40>
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f003 0303 	and.w	r3, r3, #3
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d130      	bne.n	8003a82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	2203      	movs	r2, #3
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	43db      	mvns	r3, r3
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	4013      	ands	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	68da      	ldr	r2, [r3, #12]
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a56:	2201      	movs	r2, #1
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	4013      	ands	r3, r2
 8003a64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	091b      	lsrs	r3, r3, #4
 8003a6c:	f003 0201 	and.w	r2, r3, #1
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	fa02 f303 	lsl.w	r3, r2, r3
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	2b03      	cmp	r3, #3
 8003a8c:	d017      	beq.n	8003abe <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	2203      	movs	r2, #3
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	43db      	mvns	r3, r3
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d123      	bne.n	8003b12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	08da      	lsrs	r2, r3, #3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	3208      	adds	r2, #8
 8003ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	220f      	movs	r2, #15
 8003ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae6:	43db      	mvns	r3, r3
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	4013      	ands	r3, r2
 8003aec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	691a      	ldr	r2, [r3, #16]
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	08da      	lsrs	r2, r3, #3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	3208      	adds	r2, #8
 8003b0c:	6939      	ldr	r1, [r7, #16]
 8003b0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	2203      	movs	r2, #3
 8003b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b22:	43db      	mvns	r3, r3
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	4013      	ands	r3, r2
 8003b28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f003 0203 	and.w	r2, r3, #3
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 808c 	beq.w	8003c6c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003b54:	4a4e      	ldr	r2, [pc, #312]	; (8003c90 <HAL_GPIO_Init+0x2b0>)
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	089b      	lsrs	r3, r3, #2
 8003b5a:	3302      	adds	r3, #2
 8003b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f003 0303 	and.w	r3, r3, #3
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	2207      	movs	r2, #7
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	43db      	mvns	r3, r3
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	4013      	ands	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b7e:	d00d      	beq.n	8003b9c <HAL_GPIO_Init+0x1bc>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a44      	ldr	r2, [pc, #272]	; (8003c94 <HAL_GPIO_Init+0x2b4>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d007      	beq.n	8003b98 <HAL_GPIO_Init+0x1b8>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a43      	ldr	r2, [pc, #268]	; (8003c98 <HAL_GPIO_Init+0x2b8>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d101      	bne.n	8003b94 <HAL_GPIO_Init+0x1b4>
 8003b90:	2302      	movs	r3, #2
 8003b92:	e004      	b.n	8003b9e <HAL_GPIO_Init+0x1be>
 8003b94:	2307      	movs	r3, #7
 8003b96:	e002      	b.n	8003b9e <HAL_GPIO_Init+0x1be>
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e000      	b.n	8003b9e <HAL_GPIO_Init+0x1be>
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	f002 0203 	and.w	r2, r2, #3
 8003ba4:	0092      	lsls	r2, r2, #2
 8003ba6:	4093      	lsls	r3, r2
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003bae:	4938      	ldr	r1, [pc, #224]	; (8003c90 <HAL_GPIO_Init+0x2b0>)
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	089b      	lsrs	r3, r3, #2
 8003bb4:	3302      	adds	r3, #2
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bbc:	4b37      	ldr	r3, [pc, #220]	; (8003c9c <HAL_GPIO_Init+0x2bc>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003be0:	4a2e      	ldr	r2, [pc, #184]	; (8003c9c <HAL_GPIO_Init+0x2bc>)
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003be6:	4b2d      	ldr	r3, [pc, #180]	; (8003c9c <HAL_GPIO_Init+0x2bc>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	43db      	mvns	r3, r3
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c0a:	4a24      	ldr	r2, [pc, #144]	; (8003c9c <HAL_GPIO_Init+0x2bc>)
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8003c10:	4b22      	ldr	r3, [pc, #136]	; (8003c9c <HAL_GPIO_Init+0x2bc>)
 8003c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c16:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8003c36:	4a19      	ldr	r2, [pc, #100]	; (8003c9c <HAL_GPIO_Init+0x2bc>)
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8003c3e:	4b17      	ldr	r3, [pc, #92]	; (8003c9c <HAL_GPIO_Init+0x2bc>)
 8003c40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c44:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	43db      	mvns	r3, r3
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8003c64:	4a0d      	ldr	r2, [pc, #52]	; (8003c9c <HAL_GPIO_Init+0x2bc>)
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	fa22 f303 	lsr.w	r3, r2, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f47f aeb7 	bne.w	80039f0 <HAL_GPIO_Init+0x10>
  }
}
 8003c82:	bf00      	nop
 8003c84:	bf00      	nop
 8003c86:	371c      	adds	r7, #28
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bc80      	pop	{r7}
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	40010000 	.word	0x40010000
 8003c94:	48000400 	.word	0x48000400
 8003c98:	48000800 	.word	0x48000800
 8003c9c:	58000800 	.word	0x58000800

08003ca0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	460b      	mov	r3, r1
 8003caa:	807b      	strh	r3, [r7, #2]
 8003cac:	4613      	mov	r3, r2
 8003cae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cb0:	787b      	ldrb	r3, [r7, #1]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cb6:	887a      	ldrh	r2, [r7, #2]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cbc:	e002      	b.n	8003cc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cbe:	887a      	ldrh	r2, [r7, #2]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bc80      	pop	{r7}
 8003ccc:	4770      	bx	lr

08003cce <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b082      	sub	sp, #8
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d101      	bne.n	8003ce0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e081      	b.n	8003de4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d106      	bne.n	8003cfa <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f7fe f911 	bl	8001f1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2224      	movs	r2, #36	; 0x24
 8003cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0201 	bic.w	r2, r2, #1
 8003d10:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d1e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689a      	ldr	r2, [r3, #8]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d2e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d107      	bne.n	8003d48 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d44:	609a      	str	r2, [r3, #8]
 8003d46:	e006      	b.n	8003d56 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689a      	ldr	r2, [r3, #8]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003d54:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d104      	bne.n	8003d68 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d66:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	6812      	ldr	r2, [r2, #0]
 8003d72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d7a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68da      	ldr	r2, [r3, #12]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d8a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	691a      	ldr	r2, [r3, #16]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	69d9      	ldr	r1, [r3, #28]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1a      	ldr	r2, [r3, #32]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f042 0201 	orr.w	r2, r2, #1
 8003dc4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b20      	cmp	r3, #32
 8003e00:	d138      	bne.n	8003e74 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d101      	bne.n	8003e10 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	e032      	b.n	8003e76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2224      	movs	r2, #36	; 0x24
 8003e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0201 	bic.w	r2, r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e3e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6819      	ldr	r1, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 0201 	orr.w	r2, r2, #1
 8003e5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2220      	movs	r2, #32
 8003e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e70:	2300      	movs	r3, #0
 8003e72:	e000      	b.n	8003e76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e74:	2302      	movs	r3, #2
  }
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bc80      	pop	{r7}
 8003e7e:	4770      	bx	lr

08003e80 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b20      	cmp	r3, #32
 8003e94:	d139      	bne.n	8003f0a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d101      	bne.n	8003ea4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	e033      	b.n	8003f0c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2224      	movs	r2, #36	; 0x24
 8003eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 0201 	bic.w	r2, r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ed2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	021b      	lsls	r3, r3, #8
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f042 0201 	orr.w	r2, r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f06:	2300      	movs	r3, #0
 8003f08:	e000      	b.n	8003f0c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f0a:	2302      	movs	r3, #2
  }
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3714      	adds	r7, #20
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bc80      	pop	{r7}
 8003f14:	4770      	bx	lr
	...

08003f18 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f1c:	4b04      	ldr	r3, [pc, #16]	; (8003f30 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a03      	ldr	r2, [pc, #12]	; (8003f30 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f26:	6013      	str	r3, [r2, #0]
}
 8003f28:	bf00      	nop
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bc80      	pop	{r7}
 8003f2e:	4770      	bx	lr
 8003f30:	58000400 	.word	0x58000400

08003f34 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003f38:	4b03      	ldr	r3, [pc, #12]	; (8003f48 <HAL_PWREx_GetVoltageRange+0x14>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bc80      	pop	{r7}
 8003f46:	4770      	bx	lr
 8003f48:	58000400 	.word	0x58000400

08003f4c <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8003f50:	4b06      	ldr	r3, [pc, #24]	; (8003f6c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f5c:	d101      	bne.n	8003f62 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e000      	b.n	8003f64 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bc80      	pop	{r7}
 8003f6a:	4770      	bx	lr
 8003f6c:	58000400 	.word	0x58000400

08003f70 <LL_RCC_HSE_EnableTcxo>:
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f82:	6013      	str	r3, [r2, #0]
}
 8003f84:	bf00      	nop
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bc80      	pop	{r7}
 8003f8a:	4770      	bx	lr

08003f8c <LL_RCC_HSE_DisableTcxo>:
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f9e:	6013      	str	r3, [r2, #0]
}
 8003fa0:	bf00      	nop
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bc80      	pop	{r7}
 8003fa6:	4770      	bx	lr

08003fa8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fba:	d101      	bne.n	8003fc0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e000      	b.n	8003fc2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bc80      	pop	{r7}
 8003fc8:	4770      	bx	lr

08003fca <LL_RCC_HSE_Enable>:
{
 8003fca:	b480      	push	{r7}
 8003fcc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fdc:	6013      	str	r3, [r2, #0]
}
 8003fde:	bf00      	nop
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bc80      	pop	{r7}
 8003fe4:	4770      	bx	lr

08003fe6 <LL_RCC_HSE_Disable>:
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ff4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ff8:	6013      	str	r3, [r2, #0]
}
 8003ffa:	bf00      	nop
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bc80      	pop	{r7}
 8004000:	4770      	bx	lr

08004002 <LL_RCC_HSE_IsReady>:
{
 8004002:	b480      	push	{r7}
 8004004:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004010:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004014:	d101      	bne.n	800401a <LL_RCC_HSE_IsReady+0x18>
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <LL_RCC_HSE_IsReady+0x1a>
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	46bd      	mov	sp, r7
 8004020:	bc80      	pop	{r7}
 8004022:	4770      	bx	lr

08004024 <LL_RCC_HSI_Enable>:
{
 8004024:	b480      	push	{r7}
 8004026:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004036:	6013      	str	r3, [r2, #0]
}
 8004038:	bf00      	nop
 800403a:	46bd      	mov	sp, r7
 800403c:	bc80      	pop	{r7}
 800403e:	4770      	bx	lr

08004040 <LL_RCC_HSI_Disable>:
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800404e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004052:	6013      	str	r3, [r2, #0]
}
 8004054:	bf00      	nop
 8004056:	46bd      	mov	sp, r7
 8004058:	bc80      	pop	{r7}
 800405a:	4770      	bx	lr

0800405c <LL_RCC_HSI_IsReady>:
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800406a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800406e:	d101      	bne.n	8004074 <LL_RCC_HSI_IsReady+0x18>
 8004070:	2301      	movs	r3, #1
 8004072:	e000      	b.n	8004076 <LL_RCC_HSI_IsReady+0x1a>
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	46bd      	mov	sp, r7
 800407a:	bc80      	pop	{r7}
 800407c:	4770      	bx	lr

0800407e <LL_RCC_HSI_SetCalibTrimming>:
{
 800407e:	b480      	push	{r7}
 8004080:	b083      	sub	sp, #12
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	061b      	lsls	r3, r3, #24
 8004094:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004098:	4313      	orrs	r3, r2
 800409a:	604b      	str	r3, [r1, #4]
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bc80      	pop	{r7}
 80040a4:	4770      	bx	lr

080040a6 <LL_RCC_LSE_IsReady>:
{
 80040a6:	b480      	push	{r7}
 80040a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80040aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d101      	bne.n	80040be <LL_RCC_LSE_IsReady+0x18>
 80040ba:	2301      	movs	r3, #1
 80040bc:	e000      	b.n	80040c0 <LL_RCC_LSE_IsReady+0x1a>
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bc80      	pop	{r7}
 80040c6:	4770      	bx	lr

080040c8 <LL_RCC_LSI_Enable>:
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80040cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040d8:	f043 0301 	orr.w	r3, r3, #1
 80040dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80040e0:	bf00      	nop
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bc80      	pop	{r7}
 80040e6:	4770      	bx	lr

080040e8 <LL_RCC_LSI_Disable>:
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80040ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040f8:	f023 0301 	bic.w	r3, r3, #1
 80040fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004100:	bf00      	nop
 8004102:	46bd      	mov	sp, r7
 8004104:	bc80      	pop	{r7}
 8004106:	4770      	bx	lr

08004108 <LL_RCC_LSI_IsReady>:
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800410c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004110:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b02      	cmp	r3, #2
 800411a:	d101      	bne.n	8004120 <LL_RCC_LSI_IsReady+0x18>
 800411c:	2301      	movs	r3, #1
 800411e:	e000      	b.n	8004122 <LL_RCC_LSI_IsReady+0x1a>
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	46bd      	mov	sp, r7
 8004126:	bc80      	pop	{r7}
 8004128:	4770      	bx	lr

0800412a <LL_RCC_MSI_Enable>:
{
 800412a:	b480      	push	{r7}
 800412c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800412e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004138:	f043 0301 	orr.w	r3, r3, #1
 800413c:	6013      	str	r3, [r2, #0]
}
 800413e:	bf00      	nop
 8004140:	46bd      	mov	sp, r7
 8004142:	bc80      	pop	{r7}
 8004144:	4770      	bx	lr

08004146 <LL_RCC_MSI_Disable>:
{
 8004146:	b480      	push	{r7}
 8004148:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800414a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004154:	f023 0301 	bic.w	r3, r3, #1
 8004158:	6013      	str	r3, [r2, #0]
}
 800415a:	bf00      	nop
 800415c:	46bd      	mov	sp, r7
 800415e:	bc80      	pop	{r7}
 8004160:	4770      	bx	lr

08004162 <LL_RCC_MSI_IsReady>:
{
 8004162:	b480      	push	{r7}
 8004164:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b02      	cmp	r3, #2
 8004172:	d101      	bne.n	8004178 <LL_RCC_MSI_IsReady+0x16>
 8004174:	2301      	movs	r3, #1
 8004176:	e000      	b.n	800417a <LL_RCC_MSI_IsReady+0x18>
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	46bd      	mov	sp, r7
 800417e:	bc80      	pop	{r7}
 8004180:	4770      	bx	lr

08004182 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8004182:	b480      	push	{r7}
 8004184:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0308 	and.w	r3, r3, #8
 8004190:	2b08      	cmp	r3, #8
 8004192:	d101      	bne.n	8004198 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8004194:	2301      	movs	r3, #1
 8004196:	e000      	b.n	800419a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	46bd      	mov	sp, r7
 800419e:	bc80      	pop	{r7}
 80041a0:	4770      	bx	lr

080041a2 <LL_RCC_MSI_GetRange>:
{
 80041a2:	b480      	push	{r7}
 80041a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80041a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr

080041b8 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80041bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041c4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bc80      	pop	{r7}
 80041ce:	4770      	bx	lr

080041d0 <LL_RCC_MSI_SetCalibTrimming>:
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80041d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	021b      	lsls	r3, r3, #8
 80041e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041ea:	4313      	orrs	r3, r2
 80041ec:	604b      	str	r3, [r1, #4]
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bc80      	pop	{r7}
 80041f6:	4770      	bx	lr

080041f8 <LL_RCC_SetSysClkSource>:
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f023 0203 	bic.w	r2, r3, #3
 800420a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4313      	orrs	r3, r2
 8004212:	608b      	str	r3, [r1, #8]
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	bc80      	pop	{r7}
 800421c:	4770      	bx	lr

0800421e <LL_RCC_GetSysClkSource>:
{
 800421e:	b480      	push	{r7}
 8004220:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f003 030c 	and.w	r3, r3, #12
}
 800422c:	4618      	mov	r0, r3
 800422e:	46bd      	mov	sp, r7
 8004230:	bc80      	pop	{r7}
 8004232:	4770      	bx	lr

08004234 <LL_RCC_SetAHBPrescaler>:
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800423c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004246:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4313      	orrs	r3, r2
 800424e:	608b      	str	r3, [r1, #8]
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	bc80      	pop	{r7}
 8004258:	4770      	bx	lr

0800425a <LL_RCC_SetAHB3Prescaler>:
{
 800425a:	b480      	push	{r7}
 800425c:	b083      	sub	sp, #12
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004266:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800426a:	f023 020f 	bic.w	r2, r3, #15
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	091b      	lsrs	r3, r3, #4
 8004272:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004276:	4313      	orrs	r3, r2
 8004278:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	bc80      	pop	{r7}
 8004284:	4770      	bx	lr

08004286 <LL_RCC_SetAPB1Prescaler>:
{
 8004286:	b480      	push	{r7}
 8004288:	b083      	sub	sp, #12
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800428e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004298:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4313      	orrs	r3, r2
 80042a0:	608b      	str	r3, [r1, #8]
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bc80      	pop	{r7}
 80042aa:	4770      	bx	lr

080042ac <LL_RCC_SetAPB2Prescaler>:
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80042b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	608b      	str	r3, [r1, #8]
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bc80      	pop	{r7}
 80042d0:	4770      	bx	lr

080042d2 <LL_RCC_GetAHBPrescaler>:
{
 80042d2:	b480      	push	{r7}
 80042d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80042d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bc80      	pop	{r7}
 80042e6:	4770      	bx	lr

080042e8 <LL_RCC_GetAHB3Prescaler>:
{
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80042ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042f0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80042f4:	011b      	lsls	r3, r3, #4
 80042f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bc80      	pop	{r7}
 8004300:	4770      	bx	lr

08004302 <LL_RCC_GetAPB1Prescaler>:
{
 8004302:	b480      	push	{r7}
 8004304:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004310:	4618      	mov	r0, r3
 8004312:	46bd      	mov	sp, r7
 8004314:	bc80      	pop	{r7}
 8004316:	4770      	bx	lr

08004318 <LL_RCC_GetAPB2Prescaler>:
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800431c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004326:	4618      	mov	r0, r3
 8004328:	46bd      	mov	sp, r7
 800432a:	bc80      	pop	{r7}
 800432c:	4770      	bx	lr

0800432e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800432e:	b480      	push	{r7}
 8004330:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800433c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004340:	6013      	str	r3, [r2, #0]
}
 8004342:	bf00      	nop
 8004344:	46bd      	mov	sp, r7
 8004346:	bc80      	pop	{r7}
 8004348:	4770      	bx	lr

0800434a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800434a:	b480      	push	{r7}
 800434c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800434e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004358:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800435c:	6013      	str	r3, [r2, #0]
}
 800435e:	bf00      	nop
 8004360:	46bd      	mov	sp, r7
 8004362:	bc80      	pop	{r7}
 8004364:	4770      	bx	lr

08004366 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004366:	b480      	push	{r7}
 8004368:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800436a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004374:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004378:	d101      	bne.n	800437e <LL_RCC_PLL_IsReady+0x18>
 800437a:	2301      	movs	r3, #1
 800437c:	e000      	b.n	8004380 <LL_RCC_PLL_IsReady+0x1a>
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	46bd      	mov	sp, r7
 8004384:	bc80      	pop	{r7}
 8004386:	4770      	bx	lr

08004388 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800438c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	0a1b      	lsrs	r3, r3, #8
 8004394:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004398:	4618      	mov	r0, r3
 800439a:	46bd      	mov	sp, r7
 800439c:	bc80      	pop	{r7}
 800439e:	4770      	bx	lr

080043a0 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80043a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bc80      	pop	{r7}
 80043b4:	4770      	bx	lr

080043b6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80043b6:	b480      	push	{r7}
 80043b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80043ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bc80      	pop	{r7}
 80043ca:	4770      	bx	lr

080043cc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80043cc:	b480      	push	{r7}
 80043ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80043d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	f003 0303 	and.w	r3, r3, #3
}
 80043da:	4618      	mov	r0, r3
 80043dc:	46bd      	mov	sp, r7
 80043de:	bc80      	pop	{r7}
 80043e0:	4770      	bx	lr

080043e2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80043e2:	b480      	push	{r7}
 80043e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80043e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f4:	d101      	bne.n	80043fa <LL_RCC_IsActiveFlag_HPRE+0x18>
 80043f6:	2301      	movs	r3, #1
 80043f8:	e000      	b.n	80043fc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	46bd      	mov	sp, r7
 8004400:	bc80      	pop	{r7}
 8004402:	4770      	bx	lr

08004404 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004408:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800440c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004418:	d101      	bne.n	800441e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800441a:	2301      	movs	r3, #1
 800441c:	e000      	b.n	8004420 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	46bd      	mov	sp, r7
 8004424:	bc80      	pop	{r7}
 8004426:	4770      	bx	lr

08004428 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800442c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004436:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800443a:	d101      	bne.n	8004440 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800443c:	2301      	movs	r3, #1
 800443e:	e000      	b.n	8004442 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	46bd      	mov	sp, r7
 8004446:	bc80      	pop	{r7}
 8004448:	4770      	bx	lr

0800444a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800444a:	b480      	push	{r7}
 800444c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800444e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004458:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800445c:	d101      	bne.n	8004462 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800445e:	2301      	movs	r3, #1
 8004460:	e000      	b.n	8004464 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	46bd      	mov	sp, r7
 8004468:	bc80      	pop	{r7}
 800446a:	4770      	bx	lr

0800446c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b088      	sub	sp, #32
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e36f      	b.n	8004b5e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800447e:	f7ff fece 	bl	800421e <LL_RCC_GetSysClkSource>
 8004482:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004484:	f7ff ffa2 	bl	80043cc <LL_RCC_PLL_GetMainSource>
 8004488:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0320 	and.w	r3, r3, #32
 8004492:	2b00      	cmp	r3, #0
 8004494:	f000 80c4 	beq.w	8004620 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d005      	beq.n	80044aa <HAL_RCC_OscConfig+0x3e>
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	2b0c      	cmp	r3, #12
 80044a2:	d176      	bne.n	8004592 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d173      	bne.n	8004592 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e353      	b.n	8004b5e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0308 	and.w	r3, r3, #8
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d005      	beq.n	80044d4 <HAL_RCC_OscConfig+0x68>
 80044c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044d2:	e006      	b.n	80044e2 <HAL_RCC_OscConfig+0x76>
 80044d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044dc:	091b      	lsrs	r3, r3, #4
 80044de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d222      	bcs.n	800452c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 fd3c 	bl	8004f68 <RCC_SetFlashLatencyFromMSIRange>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e331      	b.n	8004b5e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004504:	f043 0308 	orr.w	r3, r3, #8
 8004508:	6013      	str	r3, [r2, #0]
 800450a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004518:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800451c:	4313      	orrs	r3, r2
 800451e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004524:	4618      	mov	r0, r3
 8004526:	f7ff fe53 	bl	80041d0 <LL_RCC_MSI_SetCalibTrimming>
 800452a:	e021      	b.n	8004570 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800452c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004536:	f043 0308 	orr.w	r3, r3, #8
 800453a:	6013      	str	r3, [r2, #0]
 800453c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800454e:	4313      	orrs	r3, r2
 8004550:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff fe3a 	bl	80041d0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004560:	4618      	mov	r0, r3
 8004562:	f000 fd01 	bl	8004f68 <RCC_SetFlashLatencyFromMSIRange>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e2f6      	b.n	8004b5e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004570:	f000 fcc2 	bl	8004ef8 <HAL_RCC_GetHCLKFreq>
 8004574:	4603      	mov	r3, r0
 8004576:	4aa7      	ldr	r2, [pc, #668]	; (8004814 <HAL_RCC_OscConfig+0x3a8>)
 8004578:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800457a:	4ba7      	ldr	r3, [pc, #668]	; (8004818 <HAL_RCC_OscConfig+0x3ac>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4618      	mov	r0, r3
 8004580:	f7fd fff2 	bl	8002568 <HAL_InitTick>
 8004584:	4603      	mov	r3, r0
 8004586:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8004588:	7cfb      	ldrb	r3, [r7, #19]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d047      	beq.n	800461e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800458e:	7cfb      	ldrb	r3, [r7, #19]
 8004590:	e2e5      	b.n	8004b5e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d02c      	beq.n	80045f4 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800459a:	f7ff fdc6 	bl	800412a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800459e:	f7fe f82f 	bl	8002600 <HAL_GetTick>
 80045a2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80045a4:	e008      	b.n	80045b8 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045a6:	f7fe f82b 	bl	8002600 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d901      	bls.n	80045b8 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e2d2      	b.n	8004b5e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80045b8:	f7ff fdd3 	bl	8004162 <LL_RCC_MSI_IsReady>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0f1      	beq.n	80045a6 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045cc:	f043 0308 	orr.w	r3, r3, #8
 80045d0:	6013      	str	r3, [r2, #0]
 80045d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045e4:	4313      	orrs	r3, r2
 80045e6:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7ff fdef 	bl	80041d0 <LL_RCC_MSI_SetCalibTrimming>
 80045f2:	e015      	b.n	8004620 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80045f4:	f7ff fda7 	bl	8004146 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045f8:	f7fe f802 	bl	8002600 <HAL_GetTick>
 80045fc:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004600:	f7fd fffe 	bl	8002600 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e2a5      	b.n	8004b5e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004612:	f7ff fda6 	bl	8004162 <LL_RCC_MSI_IsReady>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1f1      	bne.n	8004600 <HAL_RCC_OscConfig+0x194>
 800461c:	e000      	b.n	8004620 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800461e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	2b00      	cmp	r3, #0
 800462a:	d058      	beq.n	80046de <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	2b08      	cmp	r3, #8
 8004630:	d005      	beq.n	800463e <HAL_RCC_OscConfig+0x1d2>
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	2b0c      	cmp	r3, #12
 8004636:	d108      	bne.n	800464a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	2b03      	cmp	r3, #3
 800463c:	d105      	bne.n	800464a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d14b      	bne.n	80046de <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e289      	b.n	8004b5e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800464a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800465c:	4313      	orrs	r3, r2
 800465e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004668:	d102      	bne.n	8004670 <HAL_RCC_OscConfig+0x204>
 800466a:	f7ff fcae 	bl	8003fca <LL_RCC_HSE_Enable>
 800466e:	e00d      	b.n	800468c <HAL_RCC_OscConfig+0x220>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8004678:	d104      	bne.n	8004684 <HAL_RCC_OscConfig+0x218>
 800467a:	f7ff fc79 	bl	8003f70 <LL_RCC_HSE_EnableTcxo>
 800467e:	f7ff fca4 	bl	8003fca <LL_RCC_HSE_Enable>
 8004682:	e003      	b.n	800468c <HAL_RCC_OscConfig+0x220>
 8004684:	f7ff fcaf 	bl	8003fe6 <LL_RCC_HSE_Disable>
 8004688:	f7ff fc80 	bl	8003f8c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d012      	beq.n	80046ba <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004694:	f7fd ffb4 	bl	8002600 <HAL_GetTick>
 8004698:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800469a:	e008      	b.n	80046ae <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800469c:	f7fd ffb0 	bl	8002600 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b64      	cmp	r3, #100	; 0x64
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e257      	b.n	8004b5e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80046ae:	f7ff fca8 	bl	8004002 <LL_RCC_HSE_IsReady>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d0f1      	beq.n	800469c <HAL_RCC_OscConfig+0x230>
 80046b8:	e011      	b.n	80046de <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ba:	f7fd ffa1 	bl	8002600 <HAL_GetTick>
 80046be:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80046c0:	e008      	b.n	80046d4 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046c2:	f7fd ff9d 	bl	8002600 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b64      	cmp	r3, #100	; 0x64
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e244      	b.n	8004b5e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80046d4:	f7ff fc95 	bl	8004002 <LL_RCC_HSE_IsReady>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1f1      	bne.n	80046c2 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d046      	beq.n	8004778 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	2b04      	cmp	r3, #4
 80046ee:	d005      	beq.n	80046fc <HAL_RCC_OscConfig+0x290>
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	2b0c      	cmp	r3, #12
 80046f4:	d10e      	bne.n	8004714 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d10b      	bne.n	8004714 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e22a      	b.n	8004b5e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	695b      	ldr	r3, [r3, #20]
 800470c:	4618      	mov	r0, r3
 800470e:	f7ff fcb6 	bl	800407e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004712:	e031      	b.n	8004778 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d019      	beq.n	8004750 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800471c:	f7ff fc82 	bl	8004024 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004720:	f7fd ff6e 	bl	8002600 <HAL_GetTick>
 8004724:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004726:	e008      	b.n	800473a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004728:	f7fd ff6a 	bl	8002600 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b02      	cmp	r3, #2
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e211      	b.n	8004b5e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800473a:	f7ff fc8f 	bl	800405c <LL_RCC_HSI_IsReady>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d0f1      	beq.n	8004728 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	4618      	mov	r0, r3
 800474a:	f7ff fc98 	bl	800407e <LL_RCC_HSI_SetCalibTrimming>
 800474e:	e013      	b.n	8004778 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004750:	f7ff fc76 	bl	8004040 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004754:	f7fd ff54 	bl	8002600 <HAL_GetTick>
 8004758:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800475c:	f7fd ff50 	bl	8002600 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e1f7      	b.n	8004b5e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800476e:	f7ff fc75 	bl	800405c <LL_RCC_HSI_IsReady>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1f1      	bne.n	800475c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0308 	and.w	r3, r3, #8
 8004780:	2b00      	cmp	r3, #0
 8004782:	d06e      	beq.n	8004862 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d056      	beq.n	800483a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 800478c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004790:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004794:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69da      	ldr	r2, [r3, #28]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f003 0310 	and.w	r3, r3, #16
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d031      	beq.n	8004808 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d006      	beq.n	80047bc <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d101      	bne.n	80047bc <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e1d0      	b.n	8004b5e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d013      	beq.n	80047ee <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80047c6:	f7ff fc8f 	bl	80040e8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047ca:	f7fd ff19 	bl	8002600 <HAL_GetTick>
 80047ce:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80047d0:	e008      	b.n	80047e4 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047d2:	f7fd ff15 	bl	8002600 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	2b11      	cmp	r3, #17
 80047de:	d901      	bls.n	80047e4 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e1bc      	b.n	8004b5e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80047e4:	f7ff fc90 	bl	8004108 <LL_RCC_LSI_IsReady>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1f1      	bne.n	80047d2 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80047ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047f6:	f023 0210 	bic.w	r2, r3, #16
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004802:	4313      	orrs	r3, r2
 8004804:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004808:	f7ff fc5e 	bl	80040c8 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800480c:	f7fd fef8 	bl	8002600 <HAL_GetTick>
 8004810:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8004812:	e00c      	b.n	800482e <HAL_RCC_OscConfig+0x3c2>
 8004814:	20000000 	.word	0x20000000
 8004818:	20000040 	.word	0x20000040
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800481c:	f7fd fef0 	bl	8002600 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b11      	cmp	r3, #17
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e197      	b.n	8004b5e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800482e:	f7ff fc6b 	bl	8004108 <LL_RCC_LSI_IsReady>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d0f1      	beq.n	800481c <HAL_RCC_OscConfig+0x3b0>
 8004838:	e013      	b.n	8004862 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800483a:	f7ff fc55 	bl	80040e8 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800483e:	f7fd fedf 	bl	8002600 <HAL_GetTick>
 8004842:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8004844:	e008      	b.n	8004858 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004846:	f7fd fedb 	bl	8002600 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	2b11      	cmp	r3, #17
 8004852:	d901      	bls.n	8004858 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e182      	b.n	8004b5e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8004858:	f7ff fc56 	bl	8004108 <LL_RCC_LSI_IsReady>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1f1      	bne.n	8004846 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0304 	and.w	r3, r3, #4
 800486a:	2b00      	cmp	r3, #0
 800486c:	f000 80d8 	beq.w	8004a20 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004870:	f7ff fb6c 	bl	8003f4c <LL_PWR_IsEnabledBkUpAccess>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d113      	bne.n	80048a2 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800487a:	f7ff fb4d 	bl	8003f18 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800487e:	f7fd febf 	bl	8002600 <HAL_GetTick>
 8004882:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004884:	e008      	b.n	8004898 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004886:	f7fd febb 	bl	8002600 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	2b02      	cmp	r3, #2
 8004892:	d901      	bls.n	8004898 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e162      	b.n	8004b5e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004898:	f7ff fb58 	bl	8003f4c <LL_PWR_IsEnabledBkUpAccess>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d0f1      	beq.n	8004886 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d07b      	beq.n	80049a2 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	2b85      	cmp	r3, #133	; 0x85
 80048b0:	d003      	beq.n	80048ba <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	2b05      	cmp	r3, #5
 80048b8:	d109      	bne.n	80048ce <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80048ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048c6:	f043 0304 	orr.w	r3, r3, #4
 80048ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048ce:	f7fd fe97 	bl	8002600 <HAL_GetTick>
 80048d2:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80048d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048e0:	f043 0301 	orr.w	r3, r3, #1
 80048e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80048e8:	e00a      	b.n	8004900 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ea:	f7fd fe89 	bl	8002600 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d901      	bls.n	8004900 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e12e      	b.n	8004b5e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004900:	f7ff fbd1 	bl	80040a6 <LL_RCC_LSE_IsReady>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d0ef      	beq.n	80048ea <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	2b81      	cmp	r3, #129	; 0x81
 8004910:	d003      	beq.n	800491a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	2b85      	cmp	r3, #133	; 0x85
 8004918:	d121      	bne.n	800495e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800491a:	f7fd fe71 	bl	8002600 <HAL_GetTick>
 800491e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004928:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800492c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004930:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004934:	e00a      	b.n	800494c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004936:	f7fd fe63 	bl	8002600 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	f241 3288 	movw	r2, #5000	; 0x1388
 8004944:	4293      	cmp	r3, r2
 8004946:	d901      	bls.n	800494c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e108      	b.n	8004b5e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800494c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004954:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004958:	2b00      	cmp	r3, #0
 800495a:	d0ec      	beq.n	8004936 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800495c:	e060      	b.n	8004a20 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800495e:	f7fd fe4f 	bl	8002600 <HAL_GetTick>
 8004962:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800496c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004970:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004974:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004978:	e00a      	b.n	8004990 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800497a:	f7fd fe41 	bl	8002600 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	f241 3288 	movw	r2, #5000	; 0x1388
 8004988:	4293      	cmp	r3, r2
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e0e6      	b.n	8004b5e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1ec      	bne.n	800497a <HAL_RCC_OscConfig+0x50e>
 80049a0:	e03e      	b.n	8004a20 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049a2:	f7fd fe2d 	bl	8002600 <HAL_GetTick>
 80049a6:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80049a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80049bc:	e00a      	b.n	80049d4 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049be:	f7fd fe1f 	bl	8002600 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d901      	bls.n	80049d4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e0c4      	b.n	8004b5e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80049d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1ec      	bne.n	80049be <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049e4:	f7fd fe0c 	bl	8002600 <HAL_GetTick>
 80049e8:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80049ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049f6:	f023 0301 	bic.w	r3, r3, #1
 80049fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80049fe:	e00a      	b.n	8004a16 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a00:	f7fd fdfe 	bl	8002600 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e0a3      	b.n	8004b5e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004a16:	f7ff fb46 	bl	80040a6 <LL_RCC_LSE_IsReady>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1ef      	bne.n	8004a00 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 8099 	beq.w	8004b5c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	2b0c      	cmp	r3, #12
 8004a2e:	d06c      	beq.n	8004b0a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d14b      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a38:	f7ff fc87 	bl	800434a <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a3c:	f7fd fde0 	bl	8002600 <HAL_GetTick>
 8004a40:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a44:	f7fd fddc 	bl	8002600 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b0a      	cmp	r3, #10
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e083      	b.n	8004b5e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004a56:	f7ff fc86 	bl	8004366 <LL_RCC_PLL_IsReady>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1f1      	bne.n	8004a44 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	4b40      	ldr	r3, [pc, #256]	; (8004b68 <HAL_RCC_OscConfig+0x6fc>)
 8004a68:	4013      	ands	r3, r2
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a72:	4311      	orrs	r1, r2
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a78:	0212      	lsls	r2, r2, #8
 8004a7a:	4311      	orrs	r1, r2
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a80:	4311      	orrs	r1, r2
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a86:	4311      	orrs	r1, r2
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a92:	4313      	orrs	r3, r2
 8004a94:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a96:	f7ff fc4a 	bl	800432e <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aa8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aaa:	f7fd fda9 	bl	8002600 <HAL_GetTick>
 8004aae:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8004ab0:	e008      	b.n	8004ac4 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ab2:	f7fd fda5 	bl	8002600 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b0a      	cmp	r3, #10
 8004abe:	d901      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e04c      	b.n	8004b5e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8004ac4:	f7ff fc4f 	bl	8004366 <LL_RCC_PLL_IsReady>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0f1      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x646>
 8004ace:	e045      	b.n	8004b5c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ad0:	f7ff fc3b 	bl	800434a <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad4:	f7fd fd94 	bl	8002600 <HAL_GetTick>
 8004ad8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004ada:	e008      	b.n	8004aee <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004adc:	f7fd fd90 	bl	8002600 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b0a      	cmp	r3, #10
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e037      	b.n	8004b5e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004aee:	f7ff fc3a 	bl	8004366 <LL_RCC_PLL_IsReady>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1f1      	bne.n	8004adc <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004afc:	68da      	ldr	r2, [r3, #12]
 8004afe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b02:	4b1a      	ldr	r3, [pc, #104]	; (8004b6c <HAL_RCC_OscConfig+0x700>)
 8004b04:	4013      	ands	r3, r2
 8004b06:	60cb      	str	r3, [r1, #12]
 8004b08:	e028      	b.n	8004b5c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d101      	bne.n	8004b16 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e023      	b.n	8004b5e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	f003 0203 	and.w	r2, r3, #3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d115      	bne.n	8004b58 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d10e      	bne.n	8004b58 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b44:	021b      	lsls	r3, r3, #8
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d106      	bne.n	8004b58 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d001      	beq.n	8004b5c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e000      	b.n	8004b5e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3720      	adds	r7, #32
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	11c1808c 	.word	0x11c1808c
 8004b6c:	eefefffc 	.word	0xeefefffc

08004b70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e10f      	b.n	8004da4 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b84:	4b89      	ldr	r3, [pc, #548]	; (8004dac <HAL_RCC_ClockConfig+0x23c>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0307 	and.w	r3, r3, #7
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d91b      	bls.n	8004bca <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b92:	4b86      	ldr	r3, [pc, #536]	; (8004dac <HAL_RCC_ClockConfig+0x23c>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f023 0207 	bic.w	r2, r3, #7
 8004b9a:	4984      	ldr	r1, [pc, #528]	; (8004dac <HAL_RCC_ClockConfig+0x23c>)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ba2:	f7fd fd2d 	bl	8002600 <HAL_GetTick>
 8004ba6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ba8:	e008      	b.n	8004bbc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004baa:	f7fd fd29 	bl	8002600 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d901      	bls.n	8004bbc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e0f3      	b.n	8004da4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bbc:	4b7b      	ldr	r3, [pc, #492]	; (8004dac <HAL_RCC_ClockConfig+0x23c>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d1ef      	bne.n	8004baa <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d016      	beq.n	8004c04 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7ff fb2a 	bl	8004234 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004be0:	f7fd fd0e 	bl	8002600 <HAL_GetTick>
 8004be4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004be6:	e008      	b.n	8004bfa <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004be8:	f7fd fd0a 	bl	8002600 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e0d4      	b.n	8004da4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004bfa:	f7ff fbf2 	bl	80043e2 <LL_RCC_IsActiveFlag_HPRE>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d0f1      	beq.n	8004be8 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d016      	beq.n	8004c3e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7ff fb20 	bl	800425a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004c1a:	f7fd fcf1 	bl	8002600 <HAL_GetTick>
 8004c1e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004c20:	e008      	b.n	8004c34 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004c22:	f7fd fced 	bl	8002600 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d901      	bls.n	8004c34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e0b7      	b.n	8004da4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004c34:	f7ff fbe6 	bl	8004404 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0f1      	beq.n	8004c22 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0304 	and.w	r3, r3, #4
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d016      	beq.n	8004c78 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7ff fb19 	bl	8004286 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004c54:	f7fd fcd4 	bl	8002600 <HAL_GetTick>
 8004c58:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004c5a:	e008      	b.n	8004c6e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004c5c:	f7fd fcd0 	bl	8002600 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e09a      	b.n	8004da4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004c6e:	f7ff fbdb 	bl	8004428 <LL_RCC_IsActiveFlag_PPRE1>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d0f1      	beq.n	8004c5c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0308 	and.w	r3, r3, #8
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d017      	beq.n	8004cb4 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	00db      	lsls	r3, r3, #3
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7ff fb0e 	bl	80042ac <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004c90:	f7fd fcb6 	bl	8002600 <HAL_GetTick>
 8004c94:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004c96:	e008      	b.n	8004caa <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004c98:	f7fd fcb2 	bl	8002600 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e07c      	b.n	8004da4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004caa:	f7ff fbce 	bl	800444a <LL_RCC_IsActiveFlag_PPRE2>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d0f1      	beq.n	8004c98 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d043      	beq.n	8004d48 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d106      	bne.n	8004cd6 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004cc8:	f7ff f99b 	bl	8004002 <LL_RCC_HSE_IsReady>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d11e      	bne.n	8004d10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e066      	b.n	8004da4 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	2b03      	cmp	r3, #3
 8004cdc:	d106      	bne.n	8004cec <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004cde:	f7ff fb42 	bl	8004366 <LL_RCC_PLL_IsReady>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d113      	bne.n	8004d10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e05b      	b.n	8004da4 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d106      	bne.n	8004d02 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004cf4:	f7ff fa35 	bl	8004162 <LL_RCC_MSI_IsReady>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d108      	bne.n	8004d10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e050      	b.n	8004da4 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004d02:	f7ff f9ab 	bl	800405c <LL_RCC_HSI_IsReady>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e049      	b.n	8004da4 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7ff fa6f 	bl	80041f8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d1a:	f7fd fc71 	bl	8002600 <HAL_GetTick>
 8004d1e:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d20:	e00a      	b.n	8004d38 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d22:	f7fd fc6d 	bl	8002600 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d901      	bls.n	8004d38 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e035      	b.n	8004da4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d38:	f7ff fa71 	bl	800421e <LL_RCC_GetSysClkSource>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d1ec      	bne.n	8004d22 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d48:	4b18      	ldr	r3, [pc, #96]	; (8004dac <HAL_RCC_ClockConfig+0x23c>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0307 	and.w	r3, r3, #7
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d21b      	bcs.n	8004d8e <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d56:	4b15      	ldr	r3, [pc, #84]	; (8004dac <HAL_RCC_ClockConfig+0x23c>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f023 0207 	bic.w	r2, r3, #7
 8004d5e:	4913      	ldr	r1, [pc, #76]	; (8004dac <HAL_RCC_ClockConfig+0x23c>)
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d66:	f7fd fc4b 	bl	8002600 <HAL_GetTick>
 8004d6a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d6c:	e008      	b.n	8004d80 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004d6e:	f7fd fc47 	bl	8002600 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e011      	b.n	8004da4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d80:	4b0a      	ldr	r3, [pc, #40]	; (8004dac <HAL_RCC_ClockConfig+0x23c>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0307 	and.w	r3, r3, #7
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d1ef      	bne.n	8004d6e <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004d8e:	f000 f8b3 	bl	8004ef8 <HAL_RCC_GetHCLKFreq>
 8004d92:	4603      	mov	r3, r0
 8004d94:	4a06      	ldr	r2, [pc, #24]	; (8004db0 <HAL_RCC_ClockConfig+0x240>)
 8004d96:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8004d98:	4b06      	ldr	r3, [pc, #24]	; (8004db4 <HAL_RCC_ClockConfig+0x244>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7fd fbe3 	bl	8002568 <HAL_InitTick>
 8004da2:	4603      	mov	r3, r0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	58004000 	.word	0x58004000
 8004db0:	20000000 	.word	0x20000000
 8004db4:	20000040 	.word	0x20000040

08004db8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004db8:	b590      	push	{r4, r7, lr}
 8004dba:	b087      	sub	sp, #28
 8004dbc:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dc6:	f7ff fa2a 	bl	800421e <LL_RCC_GetSysClkSource>
 8004dca:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004dcc:	f7ff fafe 	bl	80043cc <LL_RCC_PLL_GetMainSource>
 8004dd0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d005      	beq.n	8004de4 <HAL_RCC_GetSysClockFreq+0x2c>
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	2b0c      	cmp	r3, #12
 8004ddc:	d139      	bne.n	8004e52 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d136      	bne.n	8004e52 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004de4:	f7ff f9cd 	bl	8004182 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d115      	bne.n	8004e1a <HAL_RCC_GetSysClockFreq+0x62>
 8004dee:	f7ff f9c8 	bl	8004182 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d106      	bne.n	8004e06 <HAL_RCC_GetSysClockFreq+0x4e>
 8004df8:	f7ff f9d3 	bl	80041a2 <LL_RCC_MSI_GetRange>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	0a1b      	lsrs	r3, r3, #8
 8004e00:	f003 030f 	and.w	r3, r3, #15
 8004e04:	e005      	b.n	8004e12 <HAL_RCC_GetSysClockFreq+0x5a>
 8004e06:	f7ff f9d7 	bl	80041b8 <LL_RCC_MSI_GetRangeAfterStandby>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	0a1b      	lsrs	r3, r3, #8
 8004e0e:	f003 030f 	and.w	r3, r3, #15
 8004e12:	4a36      	ldr	r2, [pc, #216]	; (8004eec <HAL_RCC_GetSysClockFreq+0x134>)
 8004e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e18:	e014      	b.n	8004e44 <HAL_RCC_GetSysClockFreq+0x8c>
 8004e1a:	f7ff f9b2 	bl	8004182 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d106      	bne.n	8004e32 <HAL_RCC_GetSysClockFreq+0x7a>
 8004e24:	f7ff f9bd 	bl	80041a2 <LL_RCC_MSI_GetRange>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	091b      	lsrs	r3, r3, #4
 8004e2c:	f003 030f 	and.w	r3, r3, #15
 8004e30:	e005      	b.n	8004e3e <HAL_RCC_GetSysClockFreq+0x86>
 8004e32:	f7ff f9c1 	bl	80041b8 <LL_RCC_MSI_GetRangeAfterStandby>
 8004e36:	4603      	mov	r3, r0
 8004e38:	091b      	lsrs	r3, r3, #4
 8004e3a:	f003 030f 	and.w	r3, r3, #15
 8004e3e:	4a2b      	ldr	r2, [pc, #172]	; (8004eec <HAL_RCC_GetSysClockFreq+0x134>)
 8004e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e44:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d115      	bne.n	8004e78 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004e50:	e012      	b.n	8004e78 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	2b04      	cmp	r3, #4
 8004e56:	d102      	bne.n	8004e5e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e58:	4b25      	ldr	r3, [pc, #148]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x138>)
 8004e5a:	617b      	str	r3, [r7, #20]
 8004e5c:	e00c      	b.n	8004e78 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	d109      	bne.n	8004e78 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004e64:	f7ff f8a0 	bl	8003fa8 <LL_RCC_HSE_IsEnabledDiv2>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d102      	bne.n	8004e74 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004e6e:	4b20      	ldr	r3, [pc, #128]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x138>)
 8004e70:	617b      	str	r3, [r7, #20]
 8004e72:	e001      	b.n	8004e78 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004e74:	4b1f      	ldr	r3, [pc, #124]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004e76:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e78:	f7ff f9d1 	bl	800421e <LL_RCC_GetSysClkSource>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b0c      	cmp	r3, #12
 8004e80:	d12f      	bne.n	8004ee2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004e82:	f7ff faa3 	bl	80043cc <LL_RCC_PLL_GetMainSource>
 8004e86:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d003      	beq.n	8004e96 <HAL_RCC_GetSysClockFreq+0xde>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2b03      	cmp	r3, #3
 8004e92:	d003      	beq.n	8004e9c <HAL_RCC_GetSysClockFreq+0xe4>
 8004e94:	e00d      	b.n	8004eb2 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004e96:	4b16      	ldr	r3, [pc, #88]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x138>)
 8004e98:	60fb      	str	r3, [r7, #12]
        break;
 8004e9a:	e00d      	b.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004e9c:	f7ff f884 	bl	8003fa8 <LL_RCC_HSE_IsEnabledDiv2>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d102      	bne.n	8004eac <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004ea6:	4b12      	ldr	r3, [pc, #72]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x138>)
 8004ea8:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004eaa:	e005      	b.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8004eac:	4b11      	ldr	r3, [pc, #68]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004eae:	60fb      	str	r3, [r7, #12]
        break;
 8004eb0:	e002      	b.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	60fb      	str	r3, [r7, #12]
        break;
 8004eb6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004eb8:	f7ff fa66 	bl	8004388 <LL_RCC_PLL_GetN>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	fb03 f402 	mul.w	r4, r3, r2
 8004ec4:	f7ff fa77 	bl	80043b6 <LL_RCC_PLL_GetDivider>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	091b      	lsrs	r3, r3, #4
 8004ecc:	3301      	adds	r3, #1
 8004ece:	fbb4 f4f3 	udiv	r4, r4, r3
 8004ed2:	f7ff fa65 	bl	80043a0 <LL_RCC_PLL_GetR>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	0f5b      	lsrs	r3, r3, #29
 8004eda:	3301      	adds	r3, #1
 8004edc:	fbb4 f3f3 	udiv	r3, r4, r3
 8004ee0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004ee2:	697b      	ldr	r3, [r7, #20]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	371c      	adds	r7, #28
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd90      	pop	{r4, r7, pc}
 8004eec:	0800afec 	.word	0x0800afec
 8004ef0:	00f42400 	.word	0x00f42400
 8004ef4:	01e84800 	.word	0x01e84800

08004ef8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ef8:	b598      	push	{r3, r4, r7, lr}
 8004efa:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004efc:	f7ff ff5c 	bl	8004db8 <HAL_RCC_GetSysClockFreq>
 8004f00:	4604      	mov	r4, r0
 8004f02:	f7ff f9e6 	bl	80042d2 <LL_RCC_GetAHBPrescaler>
 8004f06:	4603      	mov	r3, r0
 8004f08:	091b      	lsrs	r3, r3, #4
 8004f0a:	f003 030f 	and.w	r3, r3, #15
 8004f0e:	4a03      	ldr	r2, [pc, #12]	; (8004f1c <HAL_RCC_GetHCLKFreq+0x24>)
 8004f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f14:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	bd98      	pop	{r3, r4, r7, pc}
 8004f1c:	0800af8c 	.word	0x0800af8c

08004f20 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f20:	b598      	push	{r3, r4, r7, lr}
 8004f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004f24:	f7ff ffe8 	bl	8004ef8 <HAL_RCC_GetHCLKFreq>
 8004f28:	4604      	mov	r4, r0
 8004f2a:	f7ff f9ea 	bl	8004302 <LL_RCC_GetAPB1Prescaler>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	0a1b      	lsrs	r3, r3, #8
 8004f32:	4a03      	ldr	r2, [pc, #12]	; (8004f40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f38:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	bd98      	pop	{r3, r4, r7, pc}
 8004f40:	0800afcc 	.word	0x0800afcc

08004f44 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f44:	b598      	push	{r3, r4, r7, lr}
 8004f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004f48:	f7ff ffd6 	bl	8004ef8 <HAL_RCC_GetHCLKFreq>
 8004f4c:	4604      	mov	r4, r0
 8004f4e:	f7ff f9e3 	bl	8004318 <LL_RCC_GetAPB2Prescaler>
 8004f52:	4603      	mov	r3, r0
 8004f54:	0adb      	lsrs	r3, r3, #11
 8004f56:	4a03      	ldr	r2, [pc, #12]	; (8004f64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f5c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	bd98      	pop	{r3, r4, r7, pc}
 8004f64:	0800afcc 	.word	0x0800afcc

08004f68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004f68:	b590      	push	{r4, r7, lr}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	091b      	lsrs	r3, r3, #4
 8004f74:	f003 030f 	and.w	r3, r3, #15
 8004f78:	4a10      	ldr	r2, [pc, #64]	; (8004fbc <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8004f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f7e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8004f80:	f7ff f9b2 	bl	80042e8 <LL_RCC_GetAHB3Prescaler>
 8004f84:	4603      	mov	r3, r0
 8004f86:	091b      	lsrs	r3, r3, #4
 8004f88:	f003 030f 	and.w	r3, r3, #15
 8004f8c:	4a0c      	ldr	r2, [pc, #48]	; (8004fc0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8004f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f98:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	4a09      	ldr	r2, [pc, #36]	; (8004fc4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8004f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa2:	0c9c      	lsrs	r4, r3, #18
 8004fa4:	f7fe ffc6 	bl	8003f34 <HAL_PWREx_GetVoltageRange>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	4619      	mov	r1, r3
 8004fac:	4620      	mov	r0, r4
 8004fae:	f000 f80b 	bl	8004fc8 <RCC_SetFlashLatency>
 8004fb2:	4603      	mov	r3, r0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd90      	pop	{r4, r7, pc}
 8004fbc:	0800afec 	.word	0x0800afec
 8004fc0:	0800af8c 	.word	0x0800af8c
 8004fc4:	431bde83 	.word	0x431bde83

08004fc8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b08e      	sub	sp, #56	; 0x38
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8004fd2:	4a3a      	ldr	r2, [pc, #232]	; (80050bc <RCC_SetFlashLatency+0xf4>)
 8004fd4:	f107 0320 	add.w	r3, r7, #32
 8004fd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004fdc:	6018      	str	r0, [r3, #0]
 8004fde:	3304      	adds	r3, #4
 8004fe0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8004fe2:	4a37      	ldr	r2, [pc, #220]	; (80050c0 <RCC_SetFlashLatency+0xf8>)
 8004fe4:	f107 0318 	add.w	r3, r7, #24
 8004fe8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004fec:	6018      	str	r0, [r3, #0]
 8004fee:	3304      	adds	r3, #4
 8004ff0:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8004ff2:	4a34      	ldr	r2, [pc, #208]	; (80050c4 <RCC_SetFlashLatency+0xfc>)
 8004ff4:	f107 030c 	add.w	r3, r7, #12
 8004ff8:	ca07      	ldmia	r2, {r0, r1, r2}
 8004ffa:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004ffe:	2300      	movs	r3, #0
 8005000:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005008:	d11b      	bne.n	8005042 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800500a:	2300      	movs	r3, #0
 800500c:	633b      	str	r3, [r7, #48]	; 0x30
 800500e:	e014      	b.n	800503a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005012:	005b      	lsls	r3, r3, #1
 8005014:	3338      	adds	r3, #56	; 0x38
 8005016:	443b      	add	r3, r7
 8005018:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800501c:	461a      	mov	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4293      	cmp	r3, r2
 8005022:	d807      	bhi.n	8005034 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	3338      	adds	r3, #56	; 0x38
 800502a:	443b      	add	r3, r7
 800502c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005030:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005032:	e021      	b.n	8005078 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005036:	3301      	adds	r3, #1
 8005038:	633b      	str	r3, [r7, #48]	; 0x30
 800503a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503c:	2b02      	cmp	r3, #2
 800503e:	d9e7      	bls.n	8005010 <RCC_SetFlashLatency+0x48>
 8005040:	e01a      	b.n	8005078 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005042:	2300      	movs	r3, #0
 8005044:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005046:	e014      	b.n	8005072 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	3338      	adds	r3, #56	; 0x38
 800504e:	443b      	add	r3, r7
 8005050:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8005054:	461a      	mov	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4293      	cmp	r3, r2
 800505a:	d807      	bhi.n	800506c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800505c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	3338      	adds	r3, #56	; 0x38
 8005062:	443b      	add	r3, r7
 8005064:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005068:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800506a:	e005      	b.n	8005078 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800506c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800506e:	3301      	adds	r3, #1
 8005070:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005074:	2b02      	cmp	r3, #2
 8005076:	d9e7      	bls.n	8005048 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005078:	4b13      	ldr	r3, [pc, #76]	; (80050c8 <RCC_SetFlashLatency+0x100>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f023 0207 	bic.w	r2, r3, #7
 8005080:	4911      	ldr	r1, [pc, #68]	; (80050c8 <RCC_SetFlashLatency+0x100>)
 8005082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005084:	4313      	orrs	r3, r2
 8005086:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005088:	f7fd faba 	bl	8002600 <HAL_GetTick>
 800508c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800508e:	e008      	b.n	80050a2 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005090:	f7fd fab6 	bl	8002600 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b02      	cmp	r3, #2
 800509c:	d901      	bls.n	80050a2 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e007      	b.n	80050b2 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80050a2:	4b09      	ldr	r3, [pc, #36]	; (80050c8 <RCC_SetFlashLatency+0x100>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0307 	and.w	r3, r3, #7
 80050aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d1ef      	bne.n	8005090 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3738      	adds	r7, #56	; 0x38
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	0800a930 	.word	0x0800a930
 80050c0:	0800a938 	.word	0x0800a938
 80050c4:	0800a940 	.word	0x0800a940
 80050c8:	58004000 	.word	0x58004000

080050cc <LL_RCC_LSE_IsReady>:
{
 80050cc:	b480      	push	{r7}
 80050ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80050d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d101      	bne.n	80050e4 <LL_RCC_LSE_IsReady+0x18>
 80050e0:	2301      	movs	r3, #1
 80050e2:	e000      	b.n	80050e6 <LL_RCC_LSE_IsReady+0x1a>
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bc80      	pop	{r7}
 80050ec:	4770      	bx	lr

080050ee <LL_RCC_SetUSARTClockSource>:
{
 80050ee:	b480      	push	{r7}
 80050f0:	b083      	sub	sp, #12
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80050f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	0c1b      	lsrs	r3, r3, #16
 8005102:	43db      	mvns	r3, r3
 8005104:	401a      	ands	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	b29b      	uxth	r3, r3
 800510a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800510e:	4313      	orrs	r3, r2
 8005110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	bc80      	pop	{r7}
 800511c:	4770      	bx	lr

0800511e <LL_RCC_SetI2SClockSource>:
{
 800511e:	b480      	push	{r7}
 8005120:	b083      	sub	sp, #12
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8005126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800512a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800512e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005132:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4313      	orrs	r3, r2
 800513a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800513e:	bf00      	nop
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	bc80      	pop	{r7}
 8005146:	4770      	bx	lr

08005148 <LL_RCC_SetLPUARTClockSource>:
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005158:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800515c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4313      	orrs	r3, r2
 8005164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	bc80      	pop	{r7}
 8005170:	4770      	bx	lr

08005172 <LL_RCC_SetI2CClockSource>:
{
 8005172:	b480      	push	{r7}
 8005174:	b083      	sub	sp, #12
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800517a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800517e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	091b      	lsrs	r3, r3, #4
 8005186:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800518a:	43db      	mvns	r3, r3
 800518c:	401a      	ands	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	011b      	lsls	r3, r3, #4
 8005192:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005196:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800519a:	4313      	orrs	r3, r2
 800519c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bc80      	pop	{r7}
 80051a8:	4770      	bx	lr

080051aa <LL_RCC_SetLPTIMClockSource>:
{
 80051aa:	b480      	push	{r7}
 80051ac:	b083      	sub	sp, #12
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80051b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	0c1b      	lsrs	r3, r3, #16
 80051be:	041b      	lsls	r3, r3, #16
 80051c0:	43db      	mvns	r3, r3
 80051c2:	401a      	ands	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	041b      	lsls	r3, r3, #16
 80051c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051cc:	4313      	orrs	r3, r2
 80051ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80051d2:	bf00      	nop
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bc80      	pop	{r7}
 80051da:	4770      	bx	lr

080051dc <LL_RCC_SetRNGClockSource>:
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80051e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ec:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80051f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	bc80      	pop	{r7}
 8005204:	4770      	bx	lr

08005206 <LL_RCC_SetADCClockSource>:
{
 8005206:	b480      	push	{r7}
 8005208:	b083      	sub	sp, #12
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800520e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005216:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800521a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4313      	orrs	r3, r2
 8005222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005226:	bf00      	nop
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	bc80      	pop	{r7}
 800522e:	4770      	bx	lr

08005230 <LL_RCC_SetRTCClockSource>:
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800523c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005240:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005244:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4313      	orrs	r3, r2
 800524c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	bc80      	pop	{r7}
 8005258:	4770      	bx	lr

0800525a <LL_RCC_GetRTCClockSource>:
{
 800525a:	b480      	push	{r7}
 800525c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800525e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005266:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800526a:	4618      	mov	r0, r3
 800526c:	46bd      	mov	sp, r7
 800526e:	bc80      	pop	{r7}
 8005270:	4770      	bx	lr

08005272 <LL_RCC_ForceBackupDomainReset>:
{
 8005272:	b480      	push	{r7}
 8005274:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800527a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800527e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005286:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800528a:	bf00      	nop
 800528c:	46bd      	mov	sp, r7
 800528e:	bc80      	pop	{r7}
 8005290:	4770      	bx	lr

08005292 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005292:	b480      	push	{r7}
 8005294:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800529a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800529e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80052aa:	bf00      	nop
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bc80      	pop	{r7}
 80052b0:	4770      	bx	lr
	...

080052b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80052bc:	2300      	movs	r3, #0
 80052be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80052c0:	2300      	movs	r3, #0
 80052c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80052c4:	2300      	movs	r3, #0
 80052c6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d058      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80052d4:	f7fe fe20 	bl	8003f18 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052d8:	f7fd f992 	bl	8002600 <HAL_GetTick>
 80052dc:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80052de:	e009      	b.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052e0:	f7fd f98e 	bl	8002600 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d902      	bls.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	74fb      	strb	r3, [r7, #19]
        break;
 80052f2:	e006      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80052f4:	4b7b      	ldr	r3, [pc, #492]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005300:	d1ee      	bne.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8005302:	7cfb      	ldrb	r3, [r7, #19]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d13c      	bne.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8005308:	f7ff ffa7 	bl	800525a <LL_RCC_GetRTCClockSource>
 800530c:	4602      	mov	r2, r0
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005312:	429a      	cmp	r2, r3
 8005314:	d00f      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800531a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800531e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005322:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005324:	f7ff ffa5 	bl	8005272 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005328:	f7ff ffb3 	bl	8005292 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800532c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f003 0302 	and.w	r3, r3, #2
 800533c:	2b00      	cmp	r3, #0
 800533e:	d014      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005340:	f7fd f95e 	bl	8002600 <HAL_GetTick>
 8005344:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8005346:	e00b      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005348:	f7fd f95a 	bl	8002600 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	f241 3288 	movw	r2, #5000	; 0x1388
 8005356:	4293      	cmp	r3, r2
 8005358:	d902      	bls.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	74fb      	strb	r3, [r7, #19]
            break;
 800535e:	e004      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8005360:	f7ff feb4 	bl	80050cc <LL_RCC_LSE_IsReady>
 8005364:	4603      	mov	r3, r0
 8005366:	2b01      	cmp	r3, #1
 8005368:	d1ee      	bne.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800536a:	7cfb      	ldrb	r3, [r7, #19]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d105      	bne.n	800537c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005374:	4618      	mov	r0, r3
 8005376:	f7ff ff5b 	bl	8005230 <LL_RCC_SetRTCClockSource>
 800537a:	e004      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800537c:	7cfb      	ldrb	r3, [r7, #19]
 800537e:	74bb      	strb	r3, [r7, #18]
 8005380:	e001      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005382:	7cfb      	ldrb	r3, [r7, #19]
 8005384:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b00      	cmp	r3, #0
 8005390:	d004      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	4618      	mov	r0, r3
 8005398:	f7ff fea9 	bl	80050ee <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0302 	and.w	r3, r3, #2
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d004      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7ff fe9e 	bl	80050ee <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0320 	and.w	r3, r3, #32
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d004      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7ff fec0 	bl	8005148 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d004      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a1b      	ldr	r3, [r3, #32]
 80053d8:	4618      	mov	r0, r3
 80053da:	f7ff fee6 	bl	80051aa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d004      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7ff fedb 	bl	80051aa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d004      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005404:	4618      	mov	r0, r3
 8005406:	f7ff fed0 	bl	80051aa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005412:	2b00      	cmp	r3, #0
 8005414:	d004      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	4618      	mov	r0, r3
 800541c:	f7ff fea9 	bl	8005172 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005428:	2b00      	cmp	r3, #0
 800542a:	d004      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	4618      	mov	r0, r3
 8005432:	f7ff fe9e 	bl	8005172 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543e:	2b00      	cmp	r3, #0
 8005440:	d004      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	4618      	mov	r0, r3
 8005448:	f7ff fe93 	bl	8005172 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0310 	and.w	r3, r3, #16
 8005454:	2b00      	cmp	r3, #0
 8005456:	d011      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	4618      	mov	r0, r3
 800545e:	f7ff fe5e 	bl	800511e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800546a:	d107      	bne.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800546c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005476:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800547a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d010      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548c:	4618      	mov	r0, r3
 800548e:	f7ff fea5 	bl	80051dc <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005496:	2b00      	cmp	r3, #0
 8005498:	d107      	bne.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800549a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054a8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d011      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7ff fea3 	bl	8005206 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054c8:	d107      	bne.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80054ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054d8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80054da:	7cbb      	ldrb	r3, [r7, #18]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3718      	adds	r7, #24
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	58000400 	.word	0x58000400

080054e8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d071      	beq.n	80055de <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d106      	bne.n	8005514 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7fc fddc 	bl	80020cc <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2202      	movs	r2, #2
 8005518:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800551c:	4b32      	ldr	r3, [pc, #200]	; (80055e8 <HAL_RTC_Init+0x100>)
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	f003 0310 	and.w	r3, r3, #16
 8005524:	2b10      	cmp	r3, #16
 8005526:	d051      	beq.n	80055cc <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005528:	4b2f      	ldr	r3, [pc, #188]	; (80055e8 <HAL_RTC_Init+0x100>)
 800552a:	22ca      	movs	r2, #202	; 0xca
 800552c:	625a      	str	r2, [r3, #36]	; 0x24
 800552e:	4b2e      	ldr	r3, [pc, #184]	; (80055e8 <HAL_RTC_Init+0x100>)
 8005530:	2253      	movs	r2, #83	; 0x53
 8005532:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 faa3 	bl	8005a80 <RTC_EnterInitMode>
 800553a:	4603      	mov	r3, r0
 800553c:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800553e:	7bfb      	ldrb	r3, [r7, #15]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d13f      	bne.n	80055c4 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8005544:	4b28      	ldr	r3, [pc, #160]	; (80055e8 <HAL_RTC_Init+0x100>)
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	4a27      	ldr	r2, [pc, #156]	; (80055e8 <HAL_RTC_Init+0x100>)
 800554a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800554e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005552:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8005554:	4b24      	ldr	r3, [pc, #144]	; (80055e8 <HAL_RTC_Init+0x100>)
 8005556:	699a      	ldr	r2, [r3, #24]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6859      	ldr	r1, [r3, #4]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	4319      	orrs	r1, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	430b      	orrs	r3, r1
 8005568:	491f      	ldr	r1, [pc, #124]	; (80055e8 <HAL_RTC_Init+0x100>)
 800556a:	4313      	orrs	r3, r2
 800556c:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68da      	ldr	r2, [r3, #12]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	041b      	lsls	r3, r3, #16
 8005578:	491b      	ldr	r1, [pc, #108]	; (80055e8 <HAL_RTC_Init+0x100>)
 800557a:	4313      	orrs	r3, r2
 800557c:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800557e:	4b1a      	ldr	r3, [pc, #104]	; (80055e8 <HAL_RTC_Init+0x100>)
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558e:	430b      	orrs	r3, r1
 8005590:	4915      	ldr	r1, [pc, #84]	; (80055e8 <HAL_RTC_Init+0x100>)
 8005592:	4313      	orrs	r3, r2
 8005594:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 faa6 	bl	8005ae8 <RTC_ExitInitMode>
 800559c:	4603      	mov	r3, r0
 800559e:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 80055a0:	7bfb      	ldrb	r3, [r7, #15]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10e      	bne.n	80055c4 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 80055a6:	4b10      	ldr	r3, [pc, #64]	; (80055e8 <HAL_RTC_Init+0x100>)
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a19      	ldr	r1, [r3, #32]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	4319      	orrs	r1, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	430b      	orrs	r3, r1
 80055be:	490a      	ldr	r1, [pc, #40]	; (80055e8 <HAL_RTC_Init+0x100>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055c4:	4b08      	ldr	r3, [pc, #32]	; (80055e8 <HAL_RTC_Init+0x100>)
 80055c6:	22ff      	movs	r2, #255	; 0xff
 80055c8:	625a      	str	r2, [r3, #36]	; 0x24
 80055ca:	e001      	b.n	80055d0 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 80055cc:	2300      	movs	r3, #0
 80055ce:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80055d0:	7bfb      	ldrb	r3, [r7, #15]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d103      	bne.n	80055de <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 80055de:	7bfb      	ldrb	r3, [r7, #15]
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	40002800 	.word	0x40002800

080055ec <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80055ec:	b590      	push	{r4, r7, lr}
 80055ee:	b087      	sub	sp, #28
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d101      	bne.n	8005606 <HAL_RTC_SetTime+0x1a>
 8005602:	2302      	movs	r3, #2
 8005604:	e088      	b.n	8005718 <HAL_RTC_SetTime+0x12c>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2202      	movs	r2, #2
 8005612:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005616:	4b42      	ldr	r3, [pc, #264]	; (8005720 <HAL_RTC_SetTime+0x134>)
 8005618:	22ca      	movs	r2, #202	; 0xca
 800561a:	625a      	str	r2, [r3, #36]	; 0x24
 800561c:	4b40      	ldr	r3, [pc, #256]	; (8005720 <HAL_RTC_SetTime+0x134>)
 800561e:	2253      	movs	r2, #83	; 0x53
 8005620:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f000 fa2c 	bl	8005a80 <RTC_EnterInitMode>
 8005628:	4603      	mov	r3, r0
 800562a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800562c:	7cfb      	ldrb	r3, [r7, #19]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d15e      	bne.n	80056f0 <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8005632:	4b3b      	ldr	r3, [pc, #236]	; (8005720 <HAL_RTC_SetTime+0x134>)
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800563a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800563e:	d057      	beq.n	80056f0 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d125      	bne.n	8005692 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005646:	4b36      	ldr	r3, [pc, #216]	; (8005720 <HAL_RTC_SetTime+0x134>)
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564e:	2b00      	cmp	r3, #0
 8005650:	d102      	bne.n	8005658 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	2200      	movs	r2, #0
 8005656:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	4618      	mov	r0, r3
 800565e:	f000 fa81 	bl	8005b64 <RTC_ByteToBcd2>
 8005662:	4603      	mov	r3, r0
 8005664:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	785b      	ldrb	r3, [r3, #1]
 800566a:	4618      	mov	r0, r3
 800566c:	f000 fa7a 	bl	8005b64 <RTC_ByteToBcd2>
 8005670:	4603      	mov	r3, r0
 8005672:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005674:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	789b      	ldrb	r3, [r3, #2]
 800567a:	4618      	mov	r0, r3
 800567c:	f000 fa72 	bl	8005b64 <RTC_ByteToBcd2>
 8005680:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005682:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	78db      	ldrb	r3, [r3, #3]
 800568a:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800568c:	4313      	orrs	r3, r2
 800568e:	617b      	str	r3, [r7, #20]
 8005690:	e017      	b.n	80056c2 <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005692:	4b23      	ldr	r3, [pc, #140]	; (8005720 <HAL_RTC_SetTime+0x134>)
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569a:	2b00      	cmp	r3, #0
 800569c:	d102      	bne.n	80056a4 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	2200      	movs	r2, #0
 80056a2:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	785b      	ldrb	r3, [r3, #1]
 80056ae:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80056b0:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80056b6:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	78db      	ldrb	r3, [r3, #3]
 80056bc:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80056be:	4313      	orrs	r3, r2
 80056c0:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 80056c2:	4a17      	ldr	r2, [pc, #92]	; (8005720 <HAL_RTC_SetTime+0x134>)
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80056ca:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80056ce:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 80056d0:	4b13      	ldr	r3, [pc, #76]	; (8005720 <HAL_RTC_SetTime+0x134>)
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	4a12      	ldr	r2, [pc, #72]	; (8005720 <HAL_RTC_SetTime+0x134>)
 80056d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056da:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 80056dc:	4b10      	ldr	r3, [pc, #64]	; (8005720 <HAL_RTC_SetTime+0x134>)
 80056de:	699a      	ldr	r2, [r3, #24]
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	68d9      	ldr	r1, [r3, #12]
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	430b      	orrs	r3, r1
 80056ea:	490d      	ldr	r1, [pc, #52]	; (8005720 <HAL_RTC_SetTime+0x134>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f000 f9f9 	bl	8005ae8 <RTC_ExitInitMode>
 80056f6:	4603      	mov	r3, r0
 80056f8:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056fa:	4b09      	ldr	r3, [pc, #36]	; (8005720 <HAL_RTC_SetTime+0x134>)
 80056fc:	22ff      	movs	r2, #255	; 0xff
 80056fe:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005700:	7cfb      	ldrb	r3, [r7, #19]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d103      	bne.n	800570e <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8005716:	7cfb      	ldrb	r3, [r7, #19]
}
 8005718:	4618      	mov	r0, r3
 800571a:	371c      	adds	r7, #28
 800571c:	46bd      	mov	sp, r7
 800571e:	bd90      	pop	{r4, r7, pc}
 8005720:	40002800 	.word	0x40002800

08005724 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005724:	b590      	push	{r4, r7, lr}
 8005726:	b087      	sub	sp, #28
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005736:	2b01      	cmp	r3, #1
 8005738:	d101      	bne.n	800573e <HAL_RTC_SetDate+0x1a>
 800573a:	2302      	movs	r3, #2
 800573c:	e071      	b.n	8005822 <HAL_RTC_SetDate+0xfe>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2202      	movs	r2, #2
 800574a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d10e      	bne.n	8005772 <HAL_RTC_SetDate+0x4e>
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	785b      	ldrb	r3, [r3, #1]
 8005758:	f003 0310 	and.w	r3, r3, #16
 800575c:	2b00      	cmp	r3, #0
 800575e:	d008      	beq.n	8005772 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	785b      	ldrb	r3, [r3, #1]
 8005764:	f023 0310 	bic.w	r3, r3, #16
 8005768:	b2db      	uxtb	r3, r3
 800576a:	330a      	adds	r3, #10
 800576c:	b2da      	uxtb	r2, r3
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d11c      	bne.n	80057b2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	78db      	ldrb	r3, [r3, #3]
 800577c:	4618      	mov	r0, r3
 800577e:	f000 f9f1 	bl	8005b64 <RTC_ByteToBcd2>
 8005782:	4603      	mov	r3, r0
 8005784:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	785b      	ldrb	r3, [r3, #1]
 800578a:	4618      	mov	r0, r3
 800578c:	f000 f9ea 	bl	8005b64 <RTC_ByteToBcd2>
 8005790:	4603      	mov	r3, r0
 8005792:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005794:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	789b      	ldrb	r3, [r3, #2]
 800579a:	4618      	mov	r0, r3
 800579c:	f000 f9e2 	bl	8005b64 <RTC_ByteToBcd2>
 80057a0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80057a2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80057ac:	4313      	orrs	r3, r2
 80057ae:	617b      	str	r3, [r7, #20]
 80057b0:	e00e      	b.n	80057d0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	78db      	ldrb	r3, [r3, #3]
 80057b6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	785b      	ldrb	r3, [r3, #1]
 80057bc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80057be:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80057c4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80057cc:	4313      	orrs	r3, r2
 80057ce:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057d0:	4b16      	ldr	r3, [pc, #88]	; (800582c <HAL_RTC_SetDate+0x108>)
 80057d2:	22ca      	movs	r2, #202	; 0xca
 80057d4:	625a      	str	r2, [r3, #36]	; 0x24
 80057d6:	4b15      	ldr	r3, [pc, #84]	; (800582c <HAL_RTC_SetDate+0x108>)
 80057d8:	2253      	movs	r2, #83	; 0x53
 80057da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f000 f94f 	bl	8005a80 <RTC_EnterInitMode>
 80057e2:	4603      	mov	r3, r0
 80057e4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80057e6:	7cfb      	ldrb	r3, [r7, #19]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10b      	bne.n	8005804 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 80057ec:	4a0f      	ldr	r2, [pc, #60]	; (800582c <HAL_RTC_SetDate+0x108>)
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80057f4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80057f8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f000 f974 	bl	8005ae8 <RTC_ExitInitMode>
 8005800:	4603      	mov	r3, r0
 8005802:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005804:	4b09      	ldr	r3, [pc, #36]	; (800582c <HAL_RTC_SetDate+0x108>)
 8005806:	22ff      	movs	r2, #255	; 0xff
 8005808:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800580a:	7cfb      	ldrb	r3, [r7, #19]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d103      	bne.n	8005818 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8005820:	7cfb      	ldrb	r3, [r7, #19]
}
 8005822:	4618      	mov	r0, r3
 8005824:	371c      	adds	r7, #28
 8005826:	46bd      	mov	sp, r7
 8005828:	bd90      	pop	{r4, r7, pc}
 800582a:	bf00      	nop
 800582c:	40002800 	.word	0x40002800

08005830 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005830:	b590      	push	{r4, r7, lr}
 8005832:	b087      	sub	sp, #28
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800583c:	2300      	movs	r3, #0
 800583e:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  __HAL_LOCK(hrtc);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005846:	2b01      	cmp	r3, #1
 8005848:	d101      	bne.n	800584e <HAL_RTC_SetAlarm+0x1e>
 800584a:	2302      	movs	r3, #2
 800584c:	e0eb      	b.n	8005a26 <HAL_RTC_SetAlarm+0x1f6>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2202      	movs	r2, #2
 800585a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800585e:	4b74      	ldr	r3, [pc, #464]	; (8005a30 <HAL_RTC_SetAlarm+0x200>)
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005866:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800586e:	d06a      	beq.n	8005946 <HAL_RTC_SetAlarm+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d13a      	bne.n	80058ec <HAL_RTC_SetAlarm+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005876:	4b6e      	ldr	r3, [pc, #440]	; (8005a30 <HAL_RTC_SetAlarm+0x200>)
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800587e:	2b00      	cmp	r3, #0
 8005880:	d102      	bne.n	8005888 <HAL_RTC_SetAlarm+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	2200      	movs	r2, #0
 8005886:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	695b      	ldr	r3, [r3, #20]
 800588c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	4618      	mov	r0, r3
 8005896:	f000 f965 	bl	8005b64 <RTC_ByteToBcd2>
 800589a:	4603      	mov	r3, r0
 800589c:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	785b      	ldrb	r3, [r3, #1]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f000 f95e 	bl	8005b64 <RTC_ByteToBcd2>
 80058a8:	4603      	mov	r3, r0
 80058aa:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80058ac:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	789b      	ldrb	r3, [r3, #2]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 f956 	bl	8005b64 <RTC_ByteToBcd2>
 80058b8:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80058ba:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	78db      	ldrb	r3, [r3, #3]
 80058c2:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80058c4:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 f948 	bl	8005b64 <RTC_ByteToBcd2>
 80058d4:	4603      	mov	r3, r0
 80058d6:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80058d8:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80058e0:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80058e6:	4313      	orrs	r3, r2
 80058e8:	617b      	str	r3, [r7, #20]
 80058ea:	e02c      	b.n	8005946 <HAL_RTC_SetAlarm+0x116>
    }
    else /* format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 80058f4:	d00d      	beq.n	8005912 <HAL_RTC_SetAlarm+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80058fe:	d008      	beq.n	8005912 <HAL_RTC_SetAlarm+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005900:	4b4b      	ldr	r3, [pc, #300]	; (8005a30 <HAL_RTC_SetAlarm+0x200>)
 8005902:	699b      	ldr	r3, [r3, #24]
 8005904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005908:	2b00      	cmp	r3, #0
 800590a:	d102      	bne.n	8005912 <HAL_RTC_SetAlarm+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2200      	movs	r2, #0
 8005910:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	785b      	ldrb	r3, [r3, #1]
 800591c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800591e:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005924:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	78db      	ldrb	r3, [r3, #3]
 800592a:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800592c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005934:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005936:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800593c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005942:	4313      	orrs	r3, r2
 8005944:	617b      	str	r3, [r7, #20]
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005946:	4b3a      	ldr	r3, [pc, #232]	; (8005a30 <HAL_RTC_SetAlarm+0x200>)
 8005948:	22ca      	movs	r2, #202	; 0xca
 800594a:	625a      	str	r2, [r3, #36]	; 0x24
 800594c:	4b38      	ldr	r3, [pc, #224]	; (8005a30 <HAL_RTC_SetAlarm+0x200>)
 800594e:	2253      	movs	r2, #83	; 0x53
 8005950:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800595a:	d12c      	bne.n	80059b6 <HAL_RTC_SetAlarm+0x186>
  {
    /* Disable the Alarm A interrupt */
    /* In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRAE | RTC_CR_ALRAIE));
 800595c:	4b34      	ldr	r3, [pc, #208]	; (8005a30 <HAL_RTC_SetAlarm+0x200>)
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	4a33      	ldr	r2, [pc, #204]	; (8005a30 <HAL_RTC_SetAlarm+0x200>)
 8005962:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005966:	6193      	str	r3, [r2, #24]

    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005968:	4b31      	ldr	r3, [pc, #196]	; (8005a30 <HAL_RTC_SetAlarm+0x200>)
 800596a:	2201      	movs	r2, #1
 800596c:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005974:	d107      	bne.n	8005986 <HAL_RTC_SetAlarm+0x156>
    {
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	699a      	ldr	r2, [r3, #24]
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	492c      	ldr	r1, [pc, #176]	; (8005a30 <HAL_RTC_SetAlarm+0x200>)
 8005980:	4313      	orrs	r3, r2
 8005982:	644b      	str	r3, [r1, #68]	; 0x44
 8005984:	e006      	b.n	8005994 <HAL_RTC_SetAlarm+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8005986:	4a2a      	ldr	r2, [pc, #168]	; (8005a30 <HAL_RTC_SetAlarm+0x200>)
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800598c:	4a28      	ldr	r2, [pc, #160]	; (8005a30 <HAL_RTC_SetAlarm+0x200>)
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8005994:	4a26      	ldr	r2, [pc, #152]	; (8005a30 <HAL_RTC_SetAlarm+0x200>)
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a0:	f043 0201 	orr.w	r2, r3, #1
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm state: Enable Alarm */
    SET_BIT(RTC->CR, RTC_CR_ALRAE);
 80059a8:	4b21      	ldr	r3, [pc, #132]	; (8005a30 <HAL_RTC_SetAlarm+0x200>)
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	4a20      	ldr	r2, [pc, #128]	; (8005a30 <HAL_RTC_SetAlarm+0x200>)
 80059ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059b2:	6193      	str	r3, [r2, #24]
 80059b4:	e02b      	b.n	8005a0e <HAL_RTC_SetAlarm+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    /* In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRBE | RTC_CR_ALRBIE));
 80059b6:	4b1e      	ldr	r3, [pc, #120]	; (8005a30 <HAL_RTC_SetAlarm+0x200>)
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	4a1d      	ldr	r2, [pc, #116]	; (8005a30 <HAL_RTC_SetAlarm+0x200>)
 80059bc:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80059c0:	6193      	str	r3, [r2, #24]

    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80059c2:	4b1b      	ldr	r3, [pc, #108]	; (8005a30 <HAL_RTC_SetAlarm+0x200>)
 80059c4:	2202      	movs	r2, #2
 80059c6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059ce:	d107      	bne.n	80059e0 <HAL_RTC_SetAlarm+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	699a      	ldr	r2, [r3, #24]
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	69db      	ldr	r3, [r3, #28]
 80059d8:	4915      	ldr	r1, [pc, #84]	; (8005a30 <HAL_RTC_SetAlarm+0x200>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80059de:	e006      	b.n	80059ee <HAL_RTC_SetAlarm+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80059e0:	4a13      	ldr	r2, [pc, #76]	; (8005a30 <HAL_RTC_SetAlarm+0x200>)
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80059e6:	4a12      	ldr	r2, [pc, #72]	; (8005a30 <HAL_RTC_SetAlarm+0x200>)
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80059ee:	4a10      	ldr	r2, [pc, #64]	; (8005a30 <HAL_RTC_SetAlarm+0x200>)
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fa:	f043 0202 	orr.w	r2, r3, #2
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm state: Enable Alarm */
    SET_BIT(RTC->CR, RTC_CR_ALRBE);
 8005a02:	4b0b      	ldr	r3, [pc, #44]	; (8005a30 <HAL_RTC_SetAlarm+0x200>)
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	4a0a      	ldr	r2, [pc, #40]	; (8005a30 <HAL_RTC_SetAlarm+0x200>)
 8005a08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a0c:	6193      	str	r3, [r2, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a0e:	4b08      	ldr	r3, [pc, #32]	; (8005a30 <HAL_RTC_SetAlarm+0x200>)
 8005a10:	22ff      	movs	r2, #255	; 0xff
 8005a12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	371c      	adds	r7, #28
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd90      	pop	{r4, r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	40002800 	.word	0x40002800

08005a34 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8005a3c:	4b0f      	ldr	r3, [pc, #60]	; (8005a7c <HAL_RTC_WaitForSynchro+0x48>)
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	4a0e      	ldr	r2, [pc, #56]	; (8005a7c <HAL_RTC_WaitForSynchro+0x48>)
 8005a42:	f023 0320 	bic.w	r3, r3, #32
 8005a46:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8005a48:	f7fc fdda 	bl	8002600 <HAL_GetTick>
 8005a4c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005a4e:	e009      	b.n	8005a64 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005a50:	f7fc fdd6 	bl	8002600 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a5e:	d901      	bls.n	8005a64 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e006      	b.n	8005a72 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005a64:	4b05      	ldr	r3, [pc, #20]	; (8005a7c <HAL_RTC_WaitForSynchro+0x48>)
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	f003 0320 	and.w	r3, r3, #32
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d0ef      	beq.n	8005a50 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3710      	adds	r7, #16
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	40002800 	.word	0x40002800

08005a80 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8005a8c:	4b15      	ldr	r3, [pc, #84]	; (8005ae4 <RTC_EnterInitMode+0x64>)
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d120      	bne.n	8005ada <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005a98:	4b12      	ldr	r3, [pc, #72]	; (8005ae4 <RTC_EnterInitMode+0x64>)
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	4a11      	ldr	r2, [pc, #68]	; (8005ae4 <RTC_EnterInitMode+0x64>)
 8005a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aa2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8005aa4:	f7fc fdac 	bl	8002600 <HAL_GetTick>
 8005aa8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005aaa:	e00d      	b.n	8005ac8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005aac:	f7fc fda8 	bl	8002600 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005aba:	d905      	bls.n	8005ac8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2203      	movs	r2, #3
 8005ac4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005ac8:	4b06      	ldr	r3, [pc, #24]	; (8005ae4 <RTC_EnterInitMode+0x64>)
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d102      	bne.n	8005ada <RTC_EnterInitMode+0x5a>
 8005ad4:	7bfb      	ldrb	r3, [r7, #15]
 8005ad6:	2b03      	cmp	r3, #3
 8005ad8:	d1e8      	bne.n	8005aac <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8005ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	40002800 	.word	0x40002800

08005ae8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005af0:	2300      	movs	r3, #0
 8005af2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005af4:	4b1a      	ldr	r3, [pc, #104]	; (8005b60 <RTC_ExitInitMode+0x78>)
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	4a19      	ldr	r2, [pc, #100]	; (8005b60 <RTC_ExitInitMode+0x78>)
 8005afa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005afe:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005b00:	4b17      	ldr	r3, [pc, #92]	; (8005b60 <RTC_ExitInitMode+0x78>)
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	f003 0320 	and.w	r3, r3, #32
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10c      	bne.n	8005b26 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f7ff ff91 	bl	8005a34 <HAL_RTC_WaitForSynchro>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d01e      	beq.n	8005b56 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2203      	movs	r2, #3
 8005b1c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	73fb      	strb	r3, [r7, #15]
 8005b24:	e017      	b.n	8005b56 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005b26:	4b0e      	ldr	r3, [pc, #56]	; (8005b60 <RTC_ExitInitMode+0x78>)
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	4a0d      	ldr	r2, [pc, #52]	; (8005b60 <RTC_ExitInitMode+0x78>)
 8005b2c:	f023 0320 	bic.w	r3, r3, #32
 8005b30:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7ff ff7e 	bl	8005a34 <HAL_RTC_WaitForSynchro>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d005      	beq.n	8005b4a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2203      	movs	r2, #3
 8005b42:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005b4a:	4b05      	ldr	r3, [pc, #20]	; (8005b60 <RTC_ExitInitMode+0x78>)
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	4a04      	ldr	r2, [pc, #16]	; (8005b60 <RTC_ExitInitMode+0x78>)
 8005b50:	f043 0320 	orr.w	r3, r3, #32
 8005b54:	6193      	str	r3, [r2, #24]
  }

  return status;
 8005b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	40002800 	.word	0x40002800

08005b64 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8005b72:	79fb      	ldrb	r3, [r7, #7]
 8005b74:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8005b76:	e005      	b.n	8005b84 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8005b7e:	7afb      	ldrb	r3, [r7, #11]
 8005b80:	3b0a      	subs	r3, #10
 8005b82:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8005b84:	7afb      	ldrb	r3, [r7, #11]
 8005b86:	2b09      	cmp	r3, #9
 8005b88:	d8f6      	bhi.n	8005b78 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	011b      	lsls	r3, r3, #4
 8005b90:	b2da      	uxtb	r2, r3
 8005b92:	7afb      	ldrb	r3, [r7, #11]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	b2db      	uxtb	r3, r3
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3714      	adds	r7, #20
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bc80      	pop	{r7}
 8005ba0:	4770      	bx	lr

08005ba2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b084      	sub	sp, #16
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d101      	bne.n	8005bb4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e0c6      	b.n	8005d42 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d108      	bne.n	8005bce <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bc4:	d009      	beq.n	8005bda <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	61da      	str	r2, [r3, #28]
 8005bcc:	e005      	b.n	8005bda <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d106      	bne.n	8005bf4 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f7fc fa98 	bl	8002124 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c0a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c14:	d902      	bls.n	8005c1c <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005c16:	2300      	movs	r3, #0
 8005c18:	60fb      	str	r3, [r7, #12]
 8005c1a:	e002      	b.n	8005c22 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c20:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005c2a:	d007      	beq.n	8005c3c <HAL_SPI_Init+0x9a>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c34:	d002      	beq.n	8005c3c <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005c4c:	431a      	orrs	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	431a      	orrs	r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	431a      	orrs	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c6a:	431a      	orrs	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	69db      	ldr	r3, [r3, #28]
 8005c70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c74:	431a      	orrs	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c7e:	ea42 0103 	orr.w	r1, r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c86:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c9a:	d11b      	bne.n	8005cd4 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10b      	bne.n	8005cbc <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cac:	d903      	bls.n	8005cb6 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2202      	movs	r2, #2
 8005cb2:	631a      	str	r2, [r3, #48]	; 0x30
 8005cb4:	e002      	b.n	8005cbc <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d107      	bne.n	8005cd4 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cd2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	0c1b      	lsrs	r3, r3, #16
 8005cda:	f003 0204 	and.w	r2, r3, #4
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce2:	f003 0310 	and.w	r3, r3, #16
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cec:	f003 0308 	and.w	r3, r3, #8
 8005cf0:	431a      	orrs	r2, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005cfa:	ea42 0103 	orr.w	r1, r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d14:	d105      	bne.n	8005d22 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	b292      	uxth	r2, r2
 8005d20:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	69da      	ldr	r2, [r3, #28]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b082      	sub	sp, #8
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d101      	bne.n	8005d5c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e049      	b.n	8005df0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d106      	bne.n	8005d76 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f7fc fa33 	bl	80021dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2202      	movs	r2, #2
 8005d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	3304      	adds	r3, #4
 8005d86:	4619      	mov	r1, r3
 8005d88:	4610      	mov	r0, r2
 8005d8a:	f000 f9cd 	bl	8006128 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3708      	adds	r7, #8
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d001      	beq.n	8005e10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e036      	b.n	8005e7e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2202      	movs	r2, #2
 8005e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68da      	ldr	r2, [r3, #12]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f042 0201 	orr.w	r2, r2, #1
 8005e26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a16      	ldr	r2, [pc, #88]	; (8005e88 <HAL_TIM_Base_Start_IT+0x90>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d004      	beq.n	8005e3c <HAL_TIM_Base_Start_IT+0x44>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e3a:	d115      	bne.n	8005e68 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689a      	ldr	r2, [r3, #8]
 8005e42:	4b12      	ldr	r3, [pc, #72]	; (8005e8c <HAL_TIM_Base_Start_IT+0x94>)
 8005e44:	4013      	ands	r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2b06      	cmp	r3, #6
 8005e4c:	d015      	beq.n	8005e7a <HAL_TIM_Base_Start_IT+0x82>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e54:	d011      	beq.n	8005e7a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f042 0201 	orr.w	r2, r2, #1
 8005e64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e66:	e008      	b.n	8005e7a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f042 0201 	orr.w	r2, r2, #1
 8005e76:	601a      	str	r2, [r3, #0]
 8005e78:	e000      	b.n	8005e7c <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3714      	adds	r7, #20
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bc80      	pop	{r7}
 8005e86:	4770      	bx	lr
 8005e88:	40012c00 	.word	0x40012c00
 8005e8c:	00010007 	.word	0x00010007

08005e90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d122      	bne.n	8005eec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	f003 0302 	and.w	r3, r3, #2
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d11b      	bne.n	8005eec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f06f 0202 	mvn.w	r2, #2
 8005ebc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	f003 0303 	and.w	r3, r3, #3
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d003      	beq.n	8005eda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 f90d 	bl	80060f2 <HAL_TIM_IC_CaptureCallback>
 8005ed8:	e005      	b.n	8005ee6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f900 	bl	80060e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 f90f 	bl	8006104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	f003 0304 	and.w	r3, r3, #4
 8005ef6:	2b04      	cmp	r3, #4
 8005ef8:	d122      	bne.n	8005f40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	f003 0304 	and.w	r3, r3, #4
 8005f04:	2b04      	cmp	r3, #4
 8005f06:	d11b      	bne.n	8005f40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f06f 0204 	mvn.w	r2, #4
 8005f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2202      	movs	r2, #2
 8005f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d003      	beq.n	8005f2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f8e3 	bl	80060f2 <HAL_TIM_IC_CaptureCallback>
 8005f2c:	e005      	b.n	8005f3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f8d6 	bl	80060e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 f8e5 	bl	8006104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	f003 0308 	and.w	r3, r3, #8
 8005f4a:	2b08      	cmp	r3, #8
 8005f4c:	d122      	bne.n	8005f94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	f003 0308 	and.w	r3, r3, #8
 8005f58:	2b08      	cmp	r3, #8
 8005f5a:	d11b      	bne.n	8005f94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f06f 0208 	mvn.w	r2, #8
 8005f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2204      	movs	r2, #4
 8005f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	f003 0303 	and.w	r3, r3, #3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d003      	beq.n	8005f82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 f8b9 	bl	80060f2 <HAL_TIM_IC_CaptureCallback>
 8005f80:	e005      	b.n	8005f8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 f8ac 	bl	80060e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 f8bb 	bl	8006104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	f003 0310 	and.w	r3, r3, #16
 8005f9e:	2b10      	cmp	r3, #16
 8005fa0:	d122      	bne.n	8005fe8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	f003 0310 	and.w	r3, r3, #16
 8005fac:	2b10      	cmp	r3, #16
 8005fae:	d11b      	bne.n	8005fe8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f06f 0210 	mvn.w	r2, #16
 8005fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2208      	movs	r2, #8
 8005fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	69db      	ldr	r3, [r3, #28]
 8005fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d003      	beq.n	8005fd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f88f 	bl	80060f2 <HAL_TIM_IC_CaptureCallback>
 8005fd4:	e005      	b.n	8005fe2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f882 	bl	80060e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 f891 	bl	8006104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d10e      	bne.n	8006014 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	2b01      	cmp	r3, #1
 8006002:	d107      	bne.n	8006014 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f06f 0201 	mvn.w	r2, #1
 800600c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f85d 	bl	80060ce <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800601e:	2b80      	cmp	r3, #128	; 0x80
 8006020:	d10e      	bne.n	8006040 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800602c:	2b80      	cmp	r3, #128	; 0x80
 800602e:	d107      	bne.n	8006040 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f8df 	bl	80061fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800604a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800604e:	d10e      	bne.n	800606e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800605a:	2b80      	cmp	r3, #128	; 0x80
 800605c:	d107      	bne.n	800606e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006066:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 f8d1 	bl	8006210 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006078:	2b40      	cmp	r3, #64	; 0x40
 800607a:	d10e      	bne.n	800609a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006086:	2b40      	cmp	r3, #64	; 0x40
 8006088:	d107      	bne.n	800609a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 f83e 	bl	8006116 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	f003 0320 	and.w	r3, r3, #32
 80060a4:	2b20      	cmp	r3, #32
 80060a6:	d10e      	bne.n	80060c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	f003 0320 	and.w	r3, r3, #32
 80060b2:	2b20      	cmp	r3, #32
 80060b4:	d107      	bne.n	80060c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f06f 0220 	mvn.w	r2, #32
 80060be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 f893 	bl	80061ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060c6:	bf00      	nop
 80060c8:	3708      	adds	r7, #8
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060ce:	b480      	push	{r7}
 80060d0:	b083      	sub	sp, #12
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80060d6:	bf00      	nop
 80060d8:	370c      	adds	r7, #12
 80060da:	46bd      	mov	sp, r7
 80060dc:	bc80      	pop	{r7}
 80060de:	4770      	bx	lr

080060e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bc80      	pop	{r7}
 80060f0:	4770      	bx	lr

080060f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b083      	sub	sp, #12
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060fa:	bf00      	nop
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	bc80      	pop	{r7}
 8006102:	4770      	bx	lr

08006104 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800610c:	bf00      	nop
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	bc80      	pop	{r7}
 8006114:	4770      	bx	lr

08006116 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006116:	b480      	push	{r7}
 8006118:	b083      	sub	sp, #12
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800611e:	bf00      	nop
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	bc80      	pop	{r7}
 8006126:	4770      	bx	lr

08006128 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a29      	ldr	r2, [pc, #164]	; (80061e0 <TIM_Base_SetConfig+0xb8>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d003      	beq.n	8006148 <TIM_Base_SetConfig+0x20>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006146:	d108      	bne.n	800615a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800614e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	4313      	orrs	r3, r2
 8006158:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a20      	ldr	r2, [pc, #128]	; (80061e0 <TIM_Base_SetConfig+0xb8>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d00b      	beq.n	800617a <TIM_Base_SetConfig+0x52>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006168:	d007      	beq.n	800617a <TIM_Base_SetConfig+0x52>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a1d      	ldr	r2, [pc, #116]	; (80061e4 <TIM_Base_SetConfig+0xbc>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d003      	beq.n	800617a <TIM_Base_SetConfig+0x52>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a1c      	ldr	r2, [pc, #112]	; (80061e8 <TIM_Base_SetConfig+0xc0>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d108      	bne.n	800618c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006180:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	4313      	orrs	r3, r2
 800618a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	4313      	orrs	r3, r2
 8006198:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	689a      	ldr	r2, [r3, #8]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a0b      	ldr	r2, [pc, #44]	; (80061e0 <TIM_Base_SetConfig+0xb8>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d007      	beq.n	80061c8 <TIM_Base_SetConfig+0xa0>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a0a      	ldr	r2, [pc, #40]	; (80061e4 <TIM_Base_SetConfig+0xbc>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d003      	beq.n	80061c8 <TIM_Base_SetConfig+0xa0>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a09      	ldr	r2, [pc, #36]	; (80061e8 <TIM_Base_SetConfig+0xc0>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d103      	bne.n	80061d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	691a      	ldr	r2, [r3, #16]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	615a      	str	r2, [r3, #20]
}
 80061d6:	bf00      	nop
 80061d8:	3714      	adds	r7, #20
 80061da:	46bd      	mov	sp, r7
 80061dc:	bc80      	pop	{r7}
 80061de:	4770      	bx	lr
 80061e0:	40012c00 	.word	0x40012c00
 80061e4:	40014400 	.word	0x40014400
 80061e8:	40014800 	.word	0x40014800

080061ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bc80      	pop	{r7}
 80061fc:	4770      	bx	lr

080061fe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061fe:	b480      	push	{r7}
 8006200:	b083      	sub	sp, #12
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006206:	bf00      	nop
 8006208:	370c      	adds	r7, #12
 800620a:	46bd      	mov	sp, r7
 800620c:	bc80      	pop	{r7}
 800620e:	4770      	bx	lr

08006210 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006218:	bf00      	nop
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	bc80      	pop	{r7}
 8006220:	4770      	bx	lr

08006222 <LL_RCC_GetUSARTClockSource>:
{
 8006222:	b480      	push	{r7}
 8006224:	b083      	sub	sp, #12
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800622a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800622e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	401a      	ands	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	041b      	lsls	r3, r3, #16
 800623a:	4313      	orrs	r3, r2
}
 800623c:	4618      	mov	r0, r3
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	bc80      	pop	{r7}
 8006244:	4770      	bx	lr

08006246 <LL_RCC_GetLPUARTClockSource>:
{
 8006246:	b480      	push	{r7}
 8006248:	b083      	sub	sp, #12
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800624e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006252:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4013      	ands	r3, r2
}
 800625a:	4618      	mov	r0, r3
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	bc80      	pop	{r7}
 8006262:	4770      	bx	lr

08006264 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d101      	bne.n	8006276 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e042      	b.n	80062fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800627c:	2b00      	cmp	r3, #0
 800627e:	d106      	bne.n	800628e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f7fb fea3 	bl	8001fd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2224      	movs	r2, #36	; 0x24
 8006292:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f022 0201 	bic.w	r2, r2, #1
 80062a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fd5c 	bl	8006d64 <UART_SetConfig>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d101      	bne.n	80062b6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e022      	b.n	80062fc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d002      	beq.n	80062c4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 ffc4 	bl	800724c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	685a      	ldr	r2, [r3, #4]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	689a      	ldr	r2, [r3, #8]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f042 0201 	orr.w	r2, r2, #1
 80062f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f001 f84a 	bl	800738e <UART_CheckIdleState>
 80062fa:	4603      	mov	r3, r0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3708      	adds	r7, #8
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d101      	bne.n	8006316 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e04a      	b.n	80063ac <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800631c:	2b00      	cmp	r3, #0
 800631e:	d106      	bne.n	800632e <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f7fb fe53 	bl	8001fd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2224      	movs	r2, #36	; 0x24
 8006332:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f022 0201 	bic.w	r2, r2, #1
 8006344:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 fd0c 	bl	8006d64 <UART_SetConfig>
 800634c:	4603      	mov	r3, r0
 800634e:	2b01      	cmp	r3, #1
 8006350:	d101      	bne.n	8006356 <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e02a      	b.n	80063ac <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635a:	2b00      	cmp	r3, #0
 800635c:	d002      	beq.n	8006364 <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 ff74 	bl	800724c <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	685a      	ldr	r2, [r3, #4]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006372:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	689a      	ldr	r2, [r3, #8]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8006382:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	689a      	ldr	r2, [r3, #8]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f042 0208 	orr.w	r2, r2, #8
 8006392:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f042 0201 	orr.w	r2, r2, #1
 80063a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 fff2 	bl	800738e <UART_CheckIdleState>
 80063aa:	4603      	mov	r3, r0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3708      	adds	r7, #8
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b08a      	sub	sp, #40	; 0x28
 80063b8:	af02      	add	r7, sp, #8
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	603b      	str	r3, [r7, #0]
 80063c0:	4613      	mov	r3, r2
 80063c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ca:	2b20      	cmp	r3, #32
 80063cc:	d173      	bne.n	80064b6 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d002      	beq.n	80063da <HAL_UART_Transmit+0x26>
 80063d4:	88fb      	ldrh	r3, [r7, #6]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d101      	bne.n	80063de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e06c      	b.n	80064b8 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2221      	movs	r2, #33	; 0x21
 80063ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063ee:	f7fc f907 	bl	8002600 <HAL_GetTick>
 80063f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	88fa      	ldrh	r2, [r7, #6]
 80063f8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	88fa      	ldrh	r2, [r7, #6]
 8006400:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800640c:	d108      	bne.n	8006420 <HAL_UART_Transmit+0x6c>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d104      	bne.n	8006420 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006416:	2300      	movs	r3, #0
 8006418:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	61bb      	str	r3, [r7, #24]
 800641e:	e003      	b.n	8006428 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006424:	2300      	movs	r3, #0
 8006426:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006428:	e02c      	b.n	8006484 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	2200      	movs	r2, #0
 8006432:	2180      	movs	r1, #128	; 0x80
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f000 fff8 	bl	800742a <UART_WaitOnFlagUntilTimeout>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d001      	beq.n	8006444 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e039      	b.n	80064b8 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10b      	bne.n	8006462 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	881b      	ldrh	r3, [r3, #0]
 800644e:	461a      	mov	r2, r3
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006458:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	3302      	adds	r3, #2
 800645e:	61bb      	str	r3, [r7, #24]
 8006460:	e007      	b.n	8006472 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	781a      	ldrb	r2, [r3, #0]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	3301      	adds	r3, #1
 8006470:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006478:	b29b      	uxth	r3, r3
 800647a:	3b01      	subs	r3, #1
 800647c:	b29a      	uxth	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800648a:	b29b      	uxth	r3, r3
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1cc      	bne.n	800642a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	9300      	str	r3, [sp, #0]
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	2200      	movs	r2, #0
 8006498:	2140      	movs	r1, #64	; 0x40
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f000 ffc5 	bl	800742a <UART_WaitOnFlagUntilTimeout>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d001      	beq.n	80064aa <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e006      	b.n	80064b8 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2220      	movs	r2, #32
 80064ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80064b2:	2300      	movs	r3, #0
 80064b4:	e000      	b.n	80064b8 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 80064b6:	2302      	movs	r3, #2
  }
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3720      	adds	r7, #32
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b08a      	sub	sp, #40	; 0x28
 80064c4:	af02      	add	r7, sp, #8
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	603b      	str	r3, [r7, #0]
 80064cc:	4613      	mov	r3, r2
 80064ce:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064d6:	2b20      	cmp	r3, #32
 80064d8:	f040 80b1 	bne.w	800663e <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d002      	beq.n	80064e8 <HAL_UART_Receive+0x28>
 80064e2:	88fb      	ldrh	r3, [r7, #6]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d101      	bne.n	80064ec <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e0a9      	b.n	8006640 <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2222      	movs	r2, #34	; 0x22
 80064f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006502:	f7fc f87d 	bl	8002600 <HAL_GetTick>
 8006506:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	88fa      	ldrh	r2, [r7, #6]
 800650c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	88fa      	ldrh	r2, [r7, #6]
 8006514:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006520:	d10e      	bne.n	8006540 <HAL_UART_Receive+0x80>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d105      	bne.n	8006536 <HAL_UART_Receive+0x76>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006530:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006534:	e02d      	b.n	8006592 <HAL_UART_Receive+0xd2>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	22ff      	movs	r2, #255	; 0xff
 800653a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800653e:	e028      	b.n	8006592 <HAL_UART_Receive+0xd2>
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10d      	bne.n	8006564 <HAL_UART_Receive+0xa4>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d104      	bne.n	800655a <HAL_UART_Receive+0x9a>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	22ff      	movs	r2, #255	; 0xff
 8006554:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006558:	e01b      	b.n	8006592 <HAL_UART_Receive+0xd2>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	227f      	movs	r2, #127	; 0x7f
 800655e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006562:	e016      	b.n	8006592 <HAL_UART_Receive+0xd2>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800656c:	d10d      	bne.n	800658a <HAL_UART_Receive+0xca>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d104      	bne.n	8006580 <HAL_UART_Receive+0xc0>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	227f      	movs	r2, #127	; 0x7f
 800657a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800657e:	e008      	b.n	8006592 <HAL_UART_Receive+0xd2>
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	223f      	movs	r2, #63	; 0x3f
 8006584:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006588:	e003      	b.n	8006592 <HAL_UART_Receive+0xd2>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006598:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065a2:	d108      	bne.n	80065b6 <HAL_UART_Receive+0xf6>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d104      	bne.n	80065b6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80065ac:	2300      	movs	r3, #0
 80065ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	61bb      	str	r3, [r7, #24]
 80065b4:	e003      	b.n	80065be <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065ba:	2300      	movs	r3, #0
 80065bc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80065be:	e032      	b.n	8006626 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	9300      	str	r3, [sp, #0]
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	2200      	movs	r2, #0
 80065c8:	2120      	movs	r1, #32
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	f000 ff2d 	bl	800742a <UART_WaitOnFlagUntilTimeout>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d001      	beq.n	80065da <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e032      	b.n	8006640 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d10c      	bne.n	80065fa <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	8a7b      	ldrh	r3, [r7, #18]
 80065ea:	4013      	ands	r3, r2
 80065ec:	b29a      	uxth	r2, r3
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	3302      	adds	r3, #2
 80065f6:	61bb      	str	r3, [r7, #24]
 80065f8:	e00c      	b.n	8006614 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006600:	b2da      	uxtb	r2, r3
 8006602:	8a7b      	ldrh	r3, [r7, #18]
 8006604:	b2db      	uxtb	r3, r3
 8006606:	4013      	ands	r3, r2
 8006608:	b2da      	uxtb	r2, r3
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	3301      	adds	r3, #1
 8006612:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800661a:	b29b      	uxth	r3, r3
 800661c:	3b01      	subs	r3, #1
 800661e:	b29a      	uxth	r2, r3
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800662c:	b29b      	uxth	r3, r3
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1c6      	bne.n	80065c0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2220      	movs	r2, #32
 8006636:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800663a:	2300      	movs	r3, #0
 800663c:	e000      	b.n	8006640 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 800663e:	2302      	movs	r3, #2
  }
}
 8006640:	4618      	mov	r0, r3
 8006642:	3720      	adds	r7, #32
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b08a      	sub	sp, #40	; 0x28
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	4613      	mov	r3, r2
 8006654:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800665c:	2b20      	cmp	r3, #32
 800665e:	d137      	bne.n	80066d0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d002      	beq.n	800666c <HAL_UART_Receive_IT+0x24>
 8006666:	88fb      	ldrh	r3, [r7, #6]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d101      	bne.n	8006670 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e030      	b.n	80066d2 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a18      	ldr	r2, [pc, #96]	; (80066dc <HAL_UART_Receive_IT+0x94>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d01f      	beq.n	80066c0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d018      	beq.n	80066c0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	e853 3f00 	ldrex	r3, [r3]
 800669a:	613b      	str	r3, [r7, #16]
   return(result);
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80066a2:	627b      	str	r3, [r7, #36]	; 0x24
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	461a      	mov	r2, r3
 80066aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ac:	623b      	str	r3, [r7, #32]
 80066ae:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b0:	69f9      	ldr	r1, [r7, #28]
 80066b2:	6a3a      	ldr	r2, [r7, #32]
 80066b4:	e841 2300 	strex	r3, r2, [r1]
 80066b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1e6      	bne.n	800668e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80066c0:	88fb      	ldrh	r3, [r7, #6]
 80066c2:	461a      	mov	r2, r3
 80066c4:	68b9      	ldr	r1, [r7, #8]
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	f000 ff78 	bl	80075bc <UART_Start_Receive_IT>
 80066cc:	4603      	mov	r3, r0
 80066ce:	e000      	b.n	80066d2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80066d0:	2302      	movs	r3, #2
  }
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3728      	adds	r7, #40	; 0x28
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	40008000 	.word	0x40008000

080066e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b0ba      	sub	sp, #232	; 0xe8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006706:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800670a:	f640 030f 	movw	r3, #2063	; 0x80f
 800670e:	4013      	ands	r3, r2
 8006710:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006714:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006718:	2b00      	cmp	r3, #0
 800671a:	d11b      	bne.n	8006754 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800671c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006720:	f003 0320 	and.w	r3, r3, #32
 8006724:	2b00      	cmp	r3, #0
 8006726:	d015      	beq.n	8006754 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800672c:	f003 0320 	and.w	r3, r3, #32
 8006730:	2b00      	cmp	r3, #0
 8006732:	d105      	bne.n	8006740 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006734:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800673c:	2b00      	cmp	r3, #0
 800673e:	d009      	beq.n	8006754 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006744:	2b00      	cmp	r3, #0
 8006746:	f000 82e3 	beq.w	8006d10 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	4798      	blx	r3
      }
      return;
 8006752:	e2dd      	b.n	8006d10 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006754:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006758:	2b00      	cmp	r3, #0
 800675a:	f000 8123 	beq.w	80069a4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800675e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006762:	4b8d      	ldr	r3, [pc, #564]	; (8006998 <HAL_UART_IRQHandler+0x2b8>)
 8006764:	4013      	ands	r3, r2
 8006766:	2b00      	cmp	r3, #0
 8006768:	d106      	bne.n	8006778 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800676a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800676e:	4b8b      	ldr	r3, [pc, #556]	; (800699c <HAL_UART_IRQHandler+0x2bc>)
 8006770:	4013      	ands	r3, r2
 8006772:	2b00      	cmp	r3, #0
 8006774:	f000 8116 	beq.w	80069a4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800677c:	f003 0301 	and.w	r3, r3, #1
 8006780:	2b00      	cmp	r3, #0
 8006782:	d011      	beq.n	80067a8 <HAL_UART_IRQHandler+0xc8>
 8006784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00b      	beq.n	80067a8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2201      	movs	r2, #1
 8006796:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800679e:	f043 0201 	orr.w	r2, r3, #1
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ac:	f003 0302 	and.w	r3, r3, #2
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d011      	beq.n	80067d8 <HAL_UART_IRQHandler+0xf8>
 80067b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067b8:	f003 0301 	and.w	r3, r3, #1
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00b      	beq.n	80067d8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2202      	movs	r2, #2
 80067c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ce:	f043 0204 	orr.w	r2, r3, #4
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067dc:	f003 0304 	and.w	r3, r3, #4
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d011      	beq.n	8006808 <HAL_UART_IRQHandler+0x128>
 80067e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067e8:	f003 0301 	and.w	r3, r3, #1
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00b      	beq.n	8006808 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2204      	movs	r2, #4
 80067f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067fe:	f043 0202 	orr.w	r2, r3, #2
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800680c:	f003 0308 	and.w	r3, r3, #8
 8006810:	2b00      	cmp	r3, #0
 8006812:	d017      	beq.n	8006844 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006818:	f003 0320 	and.w	r3, r3, #32
 800681c:	2b00      	cmp	r3, #0
 800681e:	d105      	bne.n	800682c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006820:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006824:	4b5c      	ldr	r3, [pc, #368]	; (8006998 <HAL_UART_IRQHandler+0x2b8>)
 8006826:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00b      	beq.n	8006844 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2208      	movs	r2, #8
 8006832:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800683a:	f043 0208 	orr.w	r2, r3, #8
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006848:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800684c:	2b00      	cmp	r3, #0
 800684e:	d012      	beq.n	8006876 <HAL_UART_IRQHandler+0x196>
 8006850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006854:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00c      	beq.n	8006876 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006864:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800686c:	f043 0220 	orr.w	r2, r3, #32
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800687c:	2b00      	cmp	r3, #0
 800687e:	f000 8249 	beq.w	8006d14 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006886:	f003 0320 	and.w	r3, r3, #32
 800688a:	2b00      	cmp	r3, #0
 800688c:	d013      	beq.n	80068b6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800688e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006892:	f003 0320 	and.w	r3, r3, #32
 8006896:	2b00      	cmp	r3, #0
 8006898:	d105      	bne.n	80068a6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800689a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800689e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d007      	beq.n	80068b6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d003      	beq.n	80068b6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ca:	2b40      	cmp	r3, #64	; 0x40
 80068cc:	d005      	beq.n	80068da <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80068ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d054      	beq.n	8006984 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 ff8e 	bl	80077fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ea:	2b40      	cmp	r3, #64	; 0x40
 80068ec:	d146      	bne.n	800697c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	3308      	adds	r3, #8
 80068f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068fc:	e853 3f00 	ldrex	r3, [r3]
 8006900:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006904:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006908:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800690c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	3308      	adds	r3, #8
 8006916:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800691a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800691e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006922:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006926:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800692a:	e841 2300 	strex	r3, r2, [r1]
 800692e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006932:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1d9      	bne.n	80068ee <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006940:	2b00      	cmp	r3, #0
 8006942:	d017      	beq.n	8006974 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800694a:	4a15      	ldr	r2, [pc, #84]	; (80069a0 <HAL_UART_IRQHandler+0x2c0>)
 800694c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006954:	4618      	mov	r0, r3
 8006956:	f7fc ffe4 	bl	8003922 <HAL_DMA_Abort_IT>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d019      	beq.n	8006994 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800696e:	4610      	mov	r0, r2
 8006970:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006972:	e00f      	b.n	8006994 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 f9e0 	bl	8006d3a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800697a:	e00b      	b.n	8006994 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 f9dc 	bl	8006d3a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006982:	e007      	b.n	8006994 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 f9d8 	bl	8006d3a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006992:	e1bf      	b.n	8006d14 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006994:	bf00      	nop
    return;
 8006996:	e1bd      	b.n	8006d14 <HAL_UART_IRQHandler+0x634>
 8006998:	10000001 	.word	0x10000001
 800699c:	04000120 	.word	0x04000120
 80069a0:	080078c7 	.word	0x080078c7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	f040 8153 	bne.w	8006c54 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80069ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069b2:	f003 0310 	and.w	r3, r3, #16
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f000 814c 	beq.w	8006c54 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80069bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069c0:	f003 0310 	and.w	r3, r3, #16
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f000 8145 	beq.w	8006c54 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2210      	movs	r2, #16
 80069d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069dc:	2b40      	cmp	r3, #64	; 0x40
 80069de:	f040 80bb 	bne.w	8006b58 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80069f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f000 818f 	beq.w	8006d18 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a04:	429a      	cmp	r2, r3
 8006a06:	f080 8187 	bcs.w	8006d18 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a10:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0320 	and.w	r3, r3, #32
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f040 8087 	bne.w	8006b36 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a34:	e853 3f00 	ldrex	r3, [r3]
 8006a38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006a3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006a56:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006a5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a62:	e841 2300 	strex	r3, r2, [r1]
 8006a66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006a6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1da      	bne.n	8006a28 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	3308      	adds	r3, #8
 8006a78:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a7c:	e853 3f00 	ldrex	r3, [r3]
 8006a80:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a84:	f023 0301 	bic.w	r3, r3, #1
 8006a88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	3308      	adds	r3, #8
 8006a92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006a96:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006a9a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006a9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006aa2:	e841 2300 	strex	r3, r2, [r1]
 8006aa6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006aa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1e1      	bne.n	8006a72 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	3308      	adds	r3, #8
 8006ab4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ab8:	e853 3f00 	ldrex	r3, [r3]
 8006abc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006abe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ac0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ac4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	3308      	adds	r3, #8
 8006ace:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006ad2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006ad4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ad8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ada:	e841 2300 	strex	r3, r2, [r1]
 8006ade:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006ae0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1e3      	bne.n	8006aae <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2220      	movs	r2, #32
 8006aea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006afc:	e853 3f00 	ldrex	r3, [r3]
 8006b00:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b04:	f023 0310 	bic.w	r3, r3, #16
 8006b08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	461a      	mov	r2, r3
 8006b12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b16:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b18:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b1e:	e841 2300 	strex	r3, r2, [r1]
 8006b22:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1e4      	bne.n	8006af4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b30:	4618      	mov	r0, r3
 8006b32:	f7fc fe98 	bl	8003866 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2202      	movs	r2, #2
 8006b3a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	4619      	mov	r1, r3
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 f8fb 	bl	8006d4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b56:	e0df      	b.n	8006d18 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	1ad3      	subs	r3, r2, r3
 8006b68:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	f000 80d1 	beq.w	8006d1c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006b7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f000 80cc 	beq.w	8006d1c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8c:	e853 3f00 	ldrex	r3, [r3]
 8006b90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ba6:	647b      	str	r3, [r7, #68]	; 0x44
 8006ba8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006baa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006bac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bae:	e841 2300 	strex	r3, r2, [r1]
 8006bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1e4      	bne.n	8006b84 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	3308      	adds	r3, #8
 8006bc0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc4:	e853 3f00 	ldrex	r3, [r3]
 8006bc8:	623b      	str	r3, [r7, #32]
   return(result);
 8006bca:	6a3b      	ldr	r3, [r7, #32]
 8006bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bd0:	f023 0301 	bic.w	r3, r3, #1
 8006bd4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3308      	adds	r3, #8
 8006bde:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006be2:	633a      	str	r2, [r7, #48]	; 0x30
 8006be4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006be8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bea:	e841 2300 	strex	r3, r2, [r1]
 8006bee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1e1      	bne.n	8006bba <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2220      	movs	r2, #32
 8006bfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	e853 3f00 	ldrex	r3, [r3]
 8006c16:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f023 0310 	bic.w	r3, r3, #16
 8006c1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	461a      	mov	r2, r3
 8006c28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006c2c:	61fb      	str	r3, [r7, #28]
 8006c2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c30:	69b9      	ldr	r1, [r7, #24]
 8006c32:	69fa      	ldr	r2, [r7, #28]
 8006c34:	e841 2300 	strex	r3, r2, [r1]
 8006c38:	617b      	str	r3, [r7, #20]
   return(result);
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1e4      	bne.n	8006c0a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2202      	movs	r2, #2
 8006c44:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 f87d 	bl	8006d4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c52:	e063      	b.n	8006d1c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00e      	beq.n	8006c7e <HAL_UART_IRQHandler+0x59e>
 8006c60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d008      	beq.n	8006c7e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006c74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f001 fb82 	bl	8008380 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c7c:	e051      	b.n	8006d22 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d014      	beq.n	8006cb4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006c8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d105      	bne.n	8006ca2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006c96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d008      	beq.n	8006cb4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d03a      	beq.n	8006d20 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	4798      	blx	r3
    }
    return;
 8006cb2:	e035      	b.n	8006d20 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d009      	beq.n	8006cd4 <HAL_UART_IRQHandler+0x5f4>
 8006cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d003      	beq.n	8006cd4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 fe10 	bl	80078f2 <UART_EndTransmit_IT>
    return;
 8006cd2:	e026      	b.n	8006d22 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d009      	beq.n	8006cf4 <HAL_UART_IRQHandler+0x614>
 8006ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ce4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d003      	beq.n	8006cf4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f001 fb59 	bl	80083a4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006cf2:	e016      	b.n	8006d22 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d010      	beq.n	8006d22 <HAL_UART_IRQHandler+0x642>
 8006d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	da0c      	bge.n	8006d22 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f001 fb42 	bl	8008392 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d0e:	e008      	b.n	8006d22 <HAL_UART_IRQHandler+0x642>
      return;
 8006d10:	bf00      	nop
 8006d12:	e006      	b.n	8006d22 <HAL_UART_IRQHandler+0x642>
    return;
 8006d14:	bf00      	nop
 8006d16:	e004      	b.n	8006d22 <HAL_UART_IRQHandler+0x642>
      return;
 8006d18:	bf00      	nop
 8006d1a:	e002      	b.n	8006d22 <HAL_UART_IRQHandler+0x642>
      return;
 8006d1c:	bf00      	nop
 8006d1e:	e000      	b.n	8006d22 <HAL_UART_IRQHandler+0x642>
    return;
 8006d20:	bf00      	nop
  }
}
 8006d22:	37e8      	adds	r7, #232	; 0xe8
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bc80      	pop	{r7}
 8006d38:	4770      	bx	lr

08006d3a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b083      	sub	sp, #12
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006d42:	bf00      	nop
 8006d44:	370c      	adds	r7, #12
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bc80      	pop	{r7}
 8006d4a:	4770      	bx	lr

08006d4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	460b      	mov	r3, r1
 8006d56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d58:	bf00      	nop
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bc80      	pop	{r7}
 8006d60:	4770      	bx	lr
	...

08006d64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d68:	b08c      	sub	sp, #48	; 0x30
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	689a      	ldr	r2, [r3, #8]
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	431a      	orrs	r2, r3
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	695b      	ldr	r3, [r3, #20]
 8006d82:	431a      	orrs	r2, r3
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	69db      	ldr	r3, [r3, #28]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	4b94      	ldr	r3, [pc, #592]	; (8006fe4 <UART_SetConfig+0x280>)
 8006d94:	4013      	ands	r3, r2
 8006d96:	697a      	ldr	r2, [r7, #20]
 8006d98:	6812      	ldr	r2, [r2, #0]
 8006d9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d9c:	430b      	orrs	r3, r1
 8006d9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	68da      	ldr	r2, [r3, #12]
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	430a      	orrs	r2, r1
 8006db4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a89      	ldr	r2, [pc, #548]	; (8006fe8 <UART_SetConfig+0x284>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d004      	beq.n	8006dd0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	6a1b      	ldr	r3, [r3, #32]
 8006dca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006dda:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	6812      	ldr	r2, [r2, #0]
 8006de2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006de4:	430b      	orrs	r3, r1
 8006de6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dee:	f023 010f 	bic.w	r1, r3, #15
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a7a      	ldr	r2, [pc, #488]	; (8006fec <UART_SetConfig+0x288>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d127      	bne.n	8006e58 <UART_SetConfig+0xf4>
 8006e08:	2003      	movs	r0, #3
 8006e0a:	f7ff fa0a 	bl	8006222 <LL_RCC_GetUSARTClockSource>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8006e14:	2b03      	cmp	r3, #3
 8006e16:	d81b      	bhi.n	8006e50 <UART_SetConfig+0xec>
 8006e18:	a201      	add	r2, pc, #4	; (adr r2, 8006e20 <UART_SetConfig+0xbc>)
 8006e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e1e:	bf00      	nop
 8006e20:	08006e31 	.word	0x08006e31
 8006e24:	08006e41 	.word	0x08006e41
 8006e28:	08006e39 	.word	0x08006e39
 8006e2c:	08006e49 	.word	0x08006e49
 8006e30:	2301      	movs	r3, #1
 8006e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e36:	e080      	b.n	8006f3a <UART_SetConfig+0x1d6>
 8006e38:	2302      	movs	r3, #2
 8006e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e3e:	e07c      	b.n	8006f3a <UART_SetConfig+0x1d6>
 8006e40:	2304      	movs	r3, #4
 8006e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e46:	e078      	b.n	8006f3a <UART_SetConfig+0x1d6>
 8006e48:	2308      	movs	r3, #8
 8006e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e4e:	e074      	b.n	8006f3a <UART_SetConfig+0x1d6>
 8006e50:	2310      	movs	r3, #16
 8006e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e56:	e070      	b.n	8006f3a <UART_SetConfig+0x1d6>
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a64      	ldr	r2, [pc, #400]	; (8006ff0 <UART_SetConfig+0x28c>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d138      	bne.n	8006ed4 <UART_SetConfig+0x170>
 8006e62:	200c      	movs	r0, #12
 8006e64:	f7ff f9dd 	bl	8006222 <LL_RCC_GetUSARTClockSource>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8006e6e:	2b0c      	cmp	r3, #12
 8006e70:	d82c      	bhi.n	8006ecc <UART_SetConfig+0x168>
 8006e72:	a201      	add	r2, pc, #4	; (adr r2, 8006e78 <UART_SetConfig+0x114>)
 8006e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e78:	08006ead 	.word	0x08006ead
 8006e7c:	08006ecd 	.word	0x08006ecd
 8006e80:	08006ecd 	.word	0x08006ecd
 8006e84:	08006ecd 	.word	0x08006ecd
 8006e88:	08006ebd 	.word	0x08006ebd
 8006e8c:	08006ecd 	.word	0x08006ecd
 8006e90:	08006ecd 	.word	0x08006ecd
 8006e94:	08006ecd 	.word	0x08006ecd
 8006e98:	08006eb5 	.word	0x08006eb5
 8006e9c:	08006ecd 	.word	0x08006ecd
 8006ea0:	08006ecd 	.word	0x08006ecd
 8006ea4:	08006ecd 	.word	0x08006ecd
 8006ea8:	08006ec5 	.word	0x08006ec5
 8006eac:	2300      	movs	r3, #0
 8006eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eb2:	e042      	b.n	8006f3a <UART_SetConfig+0x1d6>
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eba:	e03e      	b.n	8006f3a <UART_SetConfig+0x1d6>
 8006ebc:	2304      	movs	r3, #4
 8006ebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ec2:	e03a      	b.n	8006f3a <UART_SetConfig+0x1d6>
 8006ec4:	2308      	movs	r3, #8
 8006ec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eca:	e036      	b.n	8006f3a <UART_SetConfig+0x1d6>
 8006ecc:	2310      	movs	r3, #16
 8006ece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ed2:	e032      	b.n	8006f3a <UART_SetConfig+0x1d6>
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a43      	ldr	r2, [pc, #268]	; (8006fe8 <UART_SetConfig+0x284>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d12a      	bne.n	8006f34 <UART_SetConfig+0x1d0>
 8006ede:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8006ee2:	f7ff f9b0 	bl	8006246 <LL_RCC_GetLPUARTClockSource>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006eec:	d01a      	beq.n	8006f24 <UART_SetConfig+0x1c0>
 8006eee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ef2:	d81b      	bhi.n	8006f2c <UART_SetConfig+0x1c8>
 8006ef4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ef8:	d00c      	beq.n	8006f14 <UART_SetConfig+0x1b0>
 8006efa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006efe:	d815      	bhi.n	8006f2c <UART_SetConfig+0x1c8>
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d003      	beq.n	8006f0c <UART_SetConfig+0x1a8>
 8006f04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f08:	d008      	beq.n	8006f1c <UART_SetConfig+0x1b8>
 8006f0a:	e00f      	b.n	8006f2c <UART_SetConfig+0x1c8>
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f12:	e012      	b.n	8006f3a <UART_SetConfig+0x1d6>
 8006f14:	2302      	movs	r3, #2
 8006f16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f1a:	e00e      	b.n	8006f3a <UART_SetConfig+0x1d6>
 8006f1c:	2304      	movs	r3, #4
 8006f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f22:	e00a      	b.n	8006f3a <UART_SetConfig+0x1d6>
 8006f24:	2308      	movs	r3, #8
 8006f26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f2a:	e006      	b.n	8006f3a <UART_SetConfig+0x1d6>
 8006f2c:	2310      	movs	r3, #16
 8006f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f32:	e002      	b.n	8006f3a <UART_SetConfig+0x1d6>
 8006f34:	2310      	movs	r3, #16
 8006f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a2a      	ldr	r2, [pc, #168]	; (8006fe8 <UART_SetConfig+0x284>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	f040 80a4 	bne.w	800708e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f4a:	2b08      	cmp	r3, #8
 8006f4c:	d823      	bhi.n	8006f96 <UART_SetConfig+0x232>
 8006f4e:	a201      	add	r2, pc, #4	; (adr r2, 8006f54 <UART_SetConfig+0x1f0>)
 8006f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f54:	08006f79 	.word	0x08006f79
 8006f58:	08006f97 	.word	0x08006f97
 8006f5c:	08006f81 	.word	0x08006f81
 8006f60:	08006f97 	.word	0x08006f97
 8006f64:	08006f87 	.word	0x08006f87
 8006f68:	08006f97 	.word	0x08006f97
 8006f6c:	08006f97 	.word	0x08006f97
 8006f70:	08006f97 	.word	0x08006f97
 8006f74:	08006f8f 	.word	0x08006f8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f78:	f7fd ffd2 	bl	8004f20 <HAL_RCC_GetPCLK1Freq>
 8006f7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f7e:	e010      	b.n	8006fa2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f80:	4b1c      	ldr	r3, [pc, #112]	; (8006ff4 <UART_SetConfig+0x290>)
 8006f82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f84:	e00d      	b.n	8006fa2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f86:	f7fd ff17 	bl	8004db8 <HAL_RCC_GetSysClockFreq>
 8006f8a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f8c:	e009      	b.n	8006fa2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f94:	e005      	b.n	8006fa2 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8006f96:	2300      	movs	r3, #0
 8006f98:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006fa0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 8137 	beq.w	8007218 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fae:	4a12      	ldr	r2, [pc, #72]	; (8006ff8 <UART_SetConfig+0x294>)
 8006fb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fbc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	685a      	ldr	r2, [r3, #4]
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	005b      	lsls	r3, r3, #1
 8006fc6:	4413      	add	r3, r2
 8006fc8:	69ba      	ldr	r2, [r7, #24]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d305      	bcc.n	8006fda <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006fd4:	69ba      	ldr	r2, [r7, #24]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d910      	bls.n	8006ffc <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006fe0:	e11a      	b.n	8007218 <UART_SetConfig+0x4b4>
 8006fe2:	bf00      	nop
 8006fe4:	cfff69f3 	.word	0xcfff69f3
 8006fe8:	40008000 	.word	0x40008000
 8006fec:	40013800 	.word	0x40013800
 8006ff0:	40004400 	.word	0x40004400
 8006ff4:	00f42400 	.word	0x00f42400
 8006ff8:	0800b02c 	.word	0x0800b02c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffe:	2200      	movs	r2, #0
 8007000:	60bb      	str	r3, [r7, #8]
 8007002:	60fa      	str	r2, [r7, #12]
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007008:	4a8e      	ldr	r2, [pc, #568]	; (8007244 <UART_SetConfig+0x4e0>)
 800700a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800700e:	b29b      	uxth	r3, r3
 8007010:	2200      	movs	r2, #0
 8007012:	603b      	str	r3, [r7, #0]
 8007014:	607a      	str	r2, [r7, #4]
 8007016:	e9d7 2300 	ldrd	r2, r3, [r7]
 800701a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800701e:	f7f9 fec1 	bl	8000da4 <__aeabi_uldivmod>
 8007022:	4602      	mov	r2, r0
 8007024:	460b      	mov	r3, r1
 8007026:	4610      	mov	r0, r2
 8007028:	4619      	mov	r1, r3
 800702a:	f04f 0200 	mov.w	r2, #0
 800702e:	f04f 0300 	mov.w	r3, #0
 8007032:	020b      	lsls	r3, r1, #8
 8007034:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007038:	0202      	lsls	r2, r0, #8
 800703a:	6979      	ldr	r1, [r7, #20]
 800703c:	6849      	ldr	r1, [r1, #4]
 800703e:	0849      	lsrs	r1, r1, #1
 8007040:	2000      	movs	r0, #0
 8007042:	460c      	mov	r4, r1
 8007044:	4605      	mov	r5, r0
 8007046:	eb12 0804 	adds.w	r8, r2, r4
 800704a:	eb43 0905 	adc.w	r9, r3, r5
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	469a      	mov	sl, r3
 8007056:	4693      	mov	fp, r2
 8007058:	4652      	mov	r2, sl
 800705a:	465b      	mov	r3, fp
 800705c:	4640      	mov	r0, r8
 800705e:	4649      	mov	r1, r9
 8007060:	f7f9 fea0 	bl	8000da4 <__aeabi_uldivmod>
 8007064:	4602      	mov	r2, r0
 8007066:	460b      	mov	r3, r1
 8007068:	4613      	mov	r3, r2
 800706a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800706c:	6a3b      	ldr	r3, [r7, #32]
 800706e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007072:	d308      	bcc.n	8007086 <UART_SetConfig+0x322>
 8007074:	6a3b      	ldr	r3, [r7, #32]
 8007076:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800707a:	d204      	bcs.n	8007086 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	6a3a      	ldr	r2, [r7, #32]
 8007082:	60da      	str	r2, [r3, #12]
 8007084:	e0c8      	b.n	8007218 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800708c:	e0c4      	b.n	8007218 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	69db      	ldr	r3, [r3, #28]
 8007092:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007096:	d167      	bne.n	8007168 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8007098:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800709c:	2b08      	cmp	r3, #8
 800709e:	d828      	bhi.n	80070f2 <UART_SetConfig+0x38e>
 80070a0:	a201      	add	r2, pc, #4	; (adr r2, 80070a8 <UART_SetConfig+0x344>)
 80070a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a6:	bf00      	nop
 80070a8:	080070cd 	.word	0x080070cd
 80070ac:	080070d5 	.word	0x080070d5
 80070b0:	080070dd 	.word	0x080070dd
 80070b4:	080070f3 	.word	0x080070f3
 80070b8:	080070e3 	.word	0x080070e3
 80070bc:	080070f3 	.word	0x080070f3
 80070c0:	080070f3 	.word	0x080070f3
 80070c4:	080070f3 	.word	0x080070f3
 80070c8:	080070eb 	.word	0x080070eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070cc:	f7fd ff28 	bl	8004f20 <HAL_RCC_GetPCLK1Freq>
 80070d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80070d2:	e014      	b.n	80070fe <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070d4:	f7fd ff36 	bl	8004f44 <HAL_RCC_GetPCLK2Freq>
 80070d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80070da:	e010      	b.n	80070fe <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070dc:	4b5a      	ldr	r3, [pc, #360]	; (8007248 <UART_SetConfig+0x4e4>)
 80070de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80070e0:	e00d      	b.n	80070fe <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070e2:	f7fd fe69 	bl	8004db8 <HAL_RCC_GetSysClockFreq>
 80070e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80070e8:	e009      	b.n	80070fe <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80070f0:	e005      	b.n	80070fe <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80070f2:	2300      	movs	r3, #0
 80070f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80070fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007100:	2b00      	cmp	r3, #0
 8007102:	f000 8089 	beq.w	8007218 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710a:	4a4e      	ldr	r2, [pc, #312]	; (8007244 <UART_SetConfig+0x4e0>)
 800710c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007110:	461a      	mov	r2, r3
 8007112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007114:	fbb3 f3f2 	udiv	r3, r3, r2
 8007118:	005a      	lsls	r2, r3, #1
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	085b      	lsrs	r3, r3, #1
 8007120:	441a      	add	r2, r3
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	fbb2 f3f3 	udiv	r3, r2, r3
 800712a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800712c:	6a3b      	ldr	r3, [r7, #32]
 800712e:	2b0f      	cmp	r3, #15
 8007130:	d916      	bls.n	8007160 <UART_SetConfig+0x3fc>
 8007132:	6a3b      	ldr	r3, [r7, #32]
 8007134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007138:	d212      	bcs.n	8007160 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800713a:	6a3b      	ldr	r3, [r7, #32]
 800713c:	b29b      	uxth	r3, r3
 800713e:	f023 030f 	bic.w	r3, r3, #15
 8007142:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007144:	6a3b      	ldr	r3, [r7, #32]
 8007146:	085b      	lsrs	r3, r3, #1
 8007148:	b29b      	uxth	r3, r3
 800714a:	f003 0307 	and.w	r3, r3, #7
 800714e:	b29a      	uxth	r2, r3
 8007150:	8bfb      	ldrh	r3, [r7, #30]
 8007152:	4313      	orrs	r3, r2
 8007154:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	8bfa      	ldrh	r2, [r7, #30]
 800715c:	60da      	str	r2, [r3, #12]
 800715e:	e05b      	b.n	8007218 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007166:	e057      	b.n	8007218 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007168:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800716c:	2b08      	cmp	r3, #8
 800716e:	d828      	bhi.n	80071c2 <UART_SetConfig+0x45e>
 8007170:	a201      	add	r2, pc, #4	; (adr r2, 8007178 <UART_SetConfig+0x414>)
 8007172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007176:	bf00      	nop
 8007178:	0800719d 	.word	0x0800719d
 800717c:	080071a5 	.word	0x080071a5
 8007180:	080071ad 	.word	0x080071ad
 8007184:	080071c3 	.word	0x080071c3
 8007188:	080071b3 	.word	0x080071b3
 800718c:	080071c3 	.word	0x080071c3
 8007190:	080071c3 	.word	0x080071c3
 8007194:	080071c3 	.word	0x080071c3
 8007198:	080071bb 	.word	0x080071bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800719c:	f7fd fec0 	bl	8004f20 <HAL_RCC_GetPCLK1Freq>
 80071a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80071a2:	e014      	b.n	80071ce <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071a4:	f7fd fece 	bl	8004f44 <HAL_RCC_GetPCLK2Freq>
 80071a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80071aa:	e010      	b.n	80071ce <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071ac:	4b26      	ldr	r3, [pc, #152]	; (8007248 <UART_SetConfig+0x4e4>)
 80071ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80071b0:	e00d      	b.n	80071ce <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071b2:	f7fd fe01 	bl	8004db8 <HAL_RCC_GetSysClockFreq>
 80071b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80071b8:	e009      	b.n	80071ce <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80071c0:	e005      	b.n	80071ce <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80071c2:	2300      	movs	r3, #0
 80071c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80071cc:	bf00      	nop
    }

    if (pclk != 0U)
 80071ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d021      	beq.n	8007218 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d8:	4a1a      	ldr	r2, [pc, #104]	; (8007244 <UART_SetConfig+0x4e0>)
 80071da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071de:	461a      	mov	r2, r3
 80071e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	085b      	lsrs	r3, r3, #1
 80071ec:	441a      	add	r2, r3
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80071f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071f8:	6a3b      	ldr	r3, [r7, #32]
 80071fa:	2b0f      	cmp	r3, #15
 80071fc:	d909      	bls.n	8007212 <UART_SetConfig+0x4ae>
 80071fe:	6a3b      	ldr	r3, [r7, #32]
 8007200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007204:	d205      	bcs.n	8007212 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007206:	6a3b      	ldr	r3, [r7, #32]
 8007208:	b29a      	uxth	r2, r3
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	60da      	str	r2, [r3, #12]
 8007210:	e002      	b.n	8007218 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	2201      	movs	r2, #1
 800721c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	2201      	movs	r2, #1
 8007224:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	2200      	movs	r2, #0
 800722c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	2200      	movs	r2, #0
 8007232:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007234:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007238:	4618      	mov	r0, r3
 800723a:	3730      	adds	r7, #48	; 0x30
 800723c:	46bd      	mov	sp, r7
 800723e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007242:	bf00      	nop
 8007244:	0800b02c 	.word	0x0800b02c
 8007248:	00f42400 	.word	0x00f42400

0800724c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007258:	f003 0301 	and.w	r3, r3, #1
 800725c:	2b00      	cmp	r3, #0
 800725e:	d00a      	beq.n	8007276 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	430a      	orrs	r2, r1
 8007274:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800727a:	f003 0302 	and.w	r3, r3, #2
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00a      	beq.n	8007298 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	430a      	orrs	r2, r1
 8007296:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800729c:	f003 0304 	and.w	r3, r3, #4
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00a      	beq.n	80072ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	430a      	orrs	r2, r1
 80072b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072be:	f003 0308 	and.w	r3, r3, #8
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00a      	beq.n	80072dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	430a      	orrs	r2, r1
 80072da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e0:	f003 0310 	and.w	r3, r3, #16
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d00a      	beq.n	80072fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	430a      	orrs	r2, r1
 80072fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007302:	f003 0320 	and.w	r3, r3, #32
 8007306:	2b00      	cmp	r3, #0
 8007308:	d00a      	beq.n	8007320 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	430a      	orrs	r2, r1
 800731e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007328:	2b00      	cmp	r3, #0
 800732a:	d01a      	beq.n	8007362 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	430a      	orrs	r2, r1
 8007340:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007346:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800734a:	d10a      	bne.n	8007362 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	430a      	orrs	r2, r1
 8007360:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00a      	beq.n	8007384 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	430a      	orrs	r2, r1
 8007382:	605a      	str	r2, [r3, #4]
  }
}
 8007384:	bf00      	nop
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	bc80      	pop	{r7}
 800738c:	4770      	bx	lr

0800738e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800738e:	b580      	push	{r7, lr}
 8007390:	b086      	sub	sp, #24
 8007392:	af02      	add	r7, sp, #8
 8007394:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800739e:	f7fb f92f 	bl	8002600 <HAL_GetTick>
 80073a2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f003 0308 	and.w	r3, r3, #8
 80073ae:	2b08      	cmp	r3, #8
 80073b0:	d10e      	bne.n	80073d0 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073b6:	9300      	str	r3, [sp, #0]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 f832 	bl	800742a <UART_WaitOnFlagUntilTimeout>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d001      	beq.n	80073d0 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073cc:	2303      	movs	r3, #3
 80073ce:	e028      	b.n	8007422 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 0304 	and.w	r3, r3, #4
 80073da:	2b04      	cmp	r3, #4
 80073dc:	d10e      	bne.n	80073fc <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2200      	movs	r2, #0
 80073e8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 f81c 	bl	800742a <UART_WaitOnFlagUntilTimeout>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d001      	beq.n	80073fc <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073f8:	2303      	movs	r3, #3
 80073fa:	e012      	b.n	8007422 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2220      	movs	r2, #32
 8007400:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2220      	movs	r2, #32
 8007408:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b09c      	sub	sp, #112	; 0x70
 800742e:	af00      	add	r7, sp, #0
 8007430:	60f8      	str	r0, [r7, #12]
 8007432:	60b9      	str	r1, [r7, #8]
 8007434:	603b      	str	r3, [r7, #0]
 8007436:	4613      	mov	r3, r2
 8007438:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800743a:	e0a9      	b.n	8007590 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800743c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800743e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007442:	f000 80a5 	beq.w	8007590 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007446:	f7fb f8db 	bl	8002600 <HAL_GetTick>
 800744a:	4602      	mov	r2, r0
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	1ad3      	subs	r3, r2, r3
 8007450:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007452:	429a      	cmp	r2, r3
 8007454:	d302      	bcc.n	800745c <UART_WaitOnFlagUntilTimeout+0x32>
 8007456:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007458:	2b00      	cmp	r3, #0
 800745a:	d140      	bne.n	80074de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007464:	e853 3f00 	ldrex	r3, [r3]
 8007468:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800746a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800746c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007470:	667b      	str	r3, [r7, #100]	; 0x64
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	461a      	mov	r2, r3
 8007478:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800747a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800747c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007480:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007482:	e841 2300 	strex	r3, r2, [r1]
 8007486:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007488:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1e6      	bne.n	800745c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	3308      	adds	r3, #8
 8007494:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007498:	e853 3f00 	ldrex	r3, [r3]
 800749c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800749e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a0:	f023 0301 	bic.w	r3, r3, #1
 80074a4:	663b      	str	r3, [r7, #96]	; 0x60
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	3308      	adds	r3, #8
 80074ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80074ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80074b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80074b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074b6:	e841 2300 	strex	r3, r2, [r1]
 80074ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80074bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1e5      	bne.n	800748e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2220      	movs	r2, #32
 80074c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2220      	movs	r2, #32
 80074ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 80074da:	2303      	movs	r3, #3
 80074dc:	e069      	b.n	80075b2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f003 0304 	and.w	r3, r3, #4
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d051      	beq.n	8007590 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	69db      	ldr	r3, [r3, #28]
 80074f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074fa:	d149      	bne.n	8007590 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007504:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750e:	e853 3f00 	ldrex	r3, [r3]
 8007512:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007516:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800751a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	461a      	mov	r2, r3
 8007522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007524:	637b      	str	r3, [r7, #52]	; 0x34
 8007526:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007528:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800752a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800752c:	e841 2300 	strex	r3, r2, [r1]
 8007530:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007534:	2b00      	cmp	r3, #0
 8007536:	d1e6      	bne.n	8007506 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	3308      	adds	r3, #8
 800753e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	e853 3f00 	ldrex	r3, [r3]
 8007546:	613b      	str	r3, [r7, #16]
   return(result);
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	f023 0301 	bic.w	r3, r3, #1
 800754e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	3308      	adds	r3, #8
 8007556:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007558:	623a      	str	r2, [r7, #32]
 800755a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755c:	69f9      	ldr	r1, [r7, #28]
 800755e:	6a3a      	ldr	r2, [r7, #32]
 8007560:	e841 2300 	strex	r3, r2, [r1]
 8007564:	61bb      	str	r3, [r7, #24]
   return(result);
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1e5      	bne.n	8007538 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2220      	movs	r2, #32
 8007570:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2220      	movs	r2, #32
 8007578:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2220      	movs	r2, #32
 8007580:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800758c:	2303      	movs	r3, #3
 800758e:	e010      	b.n	80075b2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	69da      	ldr	r2, [r3, #28]
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	4013      	ands	r3, r2
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	429a      	cmp	r2, r3
 800759e:	bf0c      	ite	eq
 80075a0:	2301      	moveq	r3, #1
 80075a2:	2300      	movne	r3, #0
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	461a      	mov	r2, r3
 80075a8:	79fb      	ldrb	r3, [r7, #7]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	f43f af46 	beq.w	800743c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3770      	adds	r7, #112	; 0x70
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
	...

080075bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075bc:	b480      	push	{r7}
 80075be:	b0a3      	sub	sp, #140	; 0x8c
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	4613      	mov	r3, r2
 80075c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	68ba      	ldr	r2, [r7, #8]
 80075ce:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	88fa      	ldrh	r2, [r7, #6]
 80075d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	88fa      	ldrh	r2, [r7, #6]
 80075dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ee:	d10e      	bne.n	800760e <UART_Start_Receive_IT+0x52>
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	691b      	ldr	r3, [r3, #16]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d105      	bne.n	8007604 <UART_Start_Receive_IT+0x48>
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80075fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007602:	e02d      	b.n	8007660 <UART_Start_Receive_IT+0xa4>
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	22ff      	movs	r2, #255	; 0xff
 8007608:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800760c:	e028      	b.n	8007660 <UART_Start_Receive_IT+0xa4>
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d10d      	bne.n	8007632 <UART_Start_Receive_IT+0x76>
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d104      	bne.n	8007628 <UART_Start_Receive_IT+0x6c>
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	22ff      	movs	r2, #255	; 0xff
 8007622:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007626:	e01b      	b.n	8007660 <UART_Start_Receive_IT+0xa4>
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	227f      	movs	r2, #127	; 0x7f
 800762c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007630:	e016      	b.n	8007660 <UART_Start_Receive_IT+0xa4>
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800763a:	d10d      	bne.n	8007658 <UART_Start_Receive_IT+0x9c>
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d104      	bne.n	800764e <UART_Start_Receive_IT+0x92>
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	227f      	movs	r2, #127	; 0x7f
 8007648:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800764c:	e008      	b.n	8007660 <UART_Start_Receive_IT+0xa4>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	223f      	movs	r2, #63	; 0x3f
 8007652:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007656:	e003      	b.n	8007660 <UART_Start_Receive_IT+0xa4>
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2200      	movs	r2, #0
 800765c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2200      	movs	r2, #0
 8007664:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2222      	movs	r2, #34	; 0x22
 800766c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	3308      	adds	r3, #8
 8007676:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007678:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800767a:	e853 3f00 	ldrex	r3, [r3]
 800767e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007680:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007682:	f043 0301 	orr.w	r3, r3, #1
 8007686:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	3308      	adds	r3, #8
 8007690:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007694:	673a      	str	r2, [r7, #112]	; 0x70
 8007696:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007698:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800769a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800769c:	e841 2300 	strex	r3, r2, [r1]
 80076a0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80076a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d1e3      	bne.n	8007670 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076b0:	d14f      	bne.n	8007752 <UART_Start_Receive_IT+0x196>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80076b8:	88fa      	ldrh	r2, [r7, #6]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d349      	bcc.n	8007752 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076c6:	d107      	bne.n	80076d8 <UART_Start_Receive_IT+0x11c>
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d103      	bne.n	80076d8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	4a46      	ldr	r2, [pc, #280]	; (80077ec <UART_Start_Receive_IT+0x230>)
 80076d4:	675a      	str	r2, [r3, #116]	; 0x74
 80076d6:	e002      	b.n	80076de <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	4a45      	ldr	r2, [pc, #276]	; (80077f0 <UART_Start_Receive_IT+0x234>)
 80076dc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d01a      	beq.n	800771c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076ee:	e853 3f00 	ldrex	r3, [r3]
 80076f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80076f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	461a      	mov	r2, r3
 8007704:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007708:	65fb      	str	r3, [r7, #92]	; 0x5c
 800770a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800770e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007710:	e841 2300 	strex	r3, r2, [r1]
 8007714:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1e4      	bne.n	80076e6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	3308      	adds	r3, #8
 8007722:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007726:	e853 3f00 	ldrex	r3, [r3]
 800772a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800772c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007732:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	3308      	adds	r3, #8
 800773a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800773c:	64ba      	str	r2, [r7, #72]	; 0x48
 800773e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007740:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007742:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007744:	e841 2300 	strex	r3, r2, [r1]
 8007748:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800774a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1e5      	bne.n	800771c <UART_Start_Receive_IT+0x160>
 8007750:	e046      	b.n	80077e0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800775a:	d107      	bne.n	800776c <UART_Start_Receive_IT+0x1b0>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	691b      	ldr	r3, [r3, #16]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d103      	bne.n	800776c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	4a23      	ldr	r2, [pc, #140]	; (80077f4 <UART_Start_Receive_IT+0x238>)
 8007768:	675a      	str	r2, [r3, #116]	; 0x74
 800776a:	e002      	b.n	8007772 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	4a22      	ldr	r2, [pc, #136]	; (80077f8 <UART_Start_Receive_IT+0x23c>)
 8007770:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d019      	beq.n	80077ae <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007782:	e853 3f00 	ldrex	r3, [r3]
 8007786:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800778e:	677b      	str	r3, [r7, #116]	; 0x74
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	461a      	mov	r2, r3
 8007796:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007798:	637b      	str	r3, [r7, #52]	; 0x34
 800779a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800779e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077a0:	e841 2300 	strex	r3, r2, [r1]
 80077a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80077a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d1e6      	bne.n	800777a <UART_Start_Receive_IT+0x1be>
 80077ac:	e018      	b.n	80077e0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	e853 3f00 	ldrex	r3, [r3]
 80077ba:	613b      	str	r3, [r7, #16]
   return(result);
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	f043 0320 	orr.w	r3, r3, #32
 80077c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	461a      	mov	r2, r3
 80077ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077cc:	623b      	str	r3, [r7, #32]
 80077ce:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d0:	69f9      	ldr	r1, [r7, #28]
 80077d2:	6a3a      	ldr	r2, [r7, #32]
 80077d4:	e841 2300 	strex	r3, r2, [r1]
 80077d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80077da:	69bb      	ldr	r3, [r7, #24]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1e6      	bne.n	80077ae <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	378c      	adds	r7, #140	; 0x8c
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bc80      	pop	{r7}
 80077ea:	4770      	bx	lr
 80077ec:	08008019 	.word	0x08008019
 80077f0:	08007cb9 	.word	0x08007cb9
 80077f4:	08007b01 	.word	0x08007b01
 80077f8:	08007949 	.word	0x08007949

080077fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b095      	sub	sp, #84	; 0x54
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800780c:	e853 3f00 	ldrex	r3, [r3]
 8007810:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007814:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007818:	64fb      	str	r3, [r7, #76]	; 0x4c
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	461a      	mov	r2, r3
 8007820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007822:	643b      	str	r3, [r7, #64]	; 0x40
 8007824:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007826:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007828:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800782a:	e841 2300 	strex	r3, r2, [r1]
 800782e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1e6      	bne.n	8007804 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	3308      	adds	r3, #8
 800783c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783e:	6a3b      	ldr	r3, [r7, #32]
 8007840:	e853 3f00 	ldrex	r3, [r3]
 8007844:	61fb      	str	r3, [r7, #28]
   return(result);
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800784c:	f023 0301 	bic.w	r3, r3, #1
 8007850:	64bb      	str	r3, [r7, #72]	; 0x48
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	3308      	adds	r3, #8
 8007858:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800785a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800785c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007862:	e841 2300 	strex	r3, r2, [r1]
 8007866:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1e3      	bne.n	8007836 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007872:	2b01      	cmp	r3, #1
 8007874:	d118      	bne.n	80078a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	e853 3f00 	ldrex	r3, [r3]
 8007882:	60bb      	str	r3, [r7, #8]
   return(result);
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	f023 0310 	bic.w	r3, r3, #16
 800788a:	647b      	str	r3, [r7, #68]	; 0x44
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	461a      	mov	r2, r3
 8007892:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007894:	61bb      	str	r3, [r7, #24]
 8007896:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007898:	6979      	ldr	r1, [r7, #20]
 800789a:	69ba      	ldr	r2, [r7, #24]
 800789c:	e841 2300 	strex	r3, r2, [r1]
 80078a0:	613b      	str	r3, [r7, #16]
   return(result);
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d1e6      	bne.n	8007876 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2220      	movs	r2, #32
 80078ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	675a      	str	r2, [r3, #116]	; 0x74
}
 80078bc:	bf00      	nop
 80078be:	3754      	adds	r7, #84	; 0x54
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bc80      	pop	{r7}
 80078c4:	4770      	bx	lr

080078c6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b084      	sub	sp, #16
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2200      	movs	r2, #0
 80078e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078e4:	68f8      	ldr	r0, [r7, #12]
 80078e6:	f7ff fa28 	bl	8006d3a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078ea:	bf00      	nop
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b088      	sub	sp, #32
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	e853 3f00 	ldrex	r3, [r3]
 8007906:	60bb      	str	r3, [r7, #8]
   return(result);
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800790e:	61fb      	str	r3, [r7, #28]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	461a      	mov	r2, r3
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	61bb      	str	r3, [r7, #24]
 800791a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791c:	6979      	ldr	r1, [r7, #20]
 800791e:	69ba      	ldr	r2, [r7, #24]
 8007920:	e841 2300 	strex	r3, r2, [r1]
 8007924:	613b      	str	r3, [r7, #16]
   return(result);
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d1e6      	bne.n	80078fa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2220      	movs	r2, #32
 8007930:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f7ff f9f4 	bl	8006d28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007940:	bf00      	nop
 8007942:	3720      	adds	r7, #32
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b09c      	sub	sp, #112	; 0x70
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007956:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007960:	2b22      	cmp	r3, #34	; 0x22
 8007962:	f040 80be 	bne.w	8007ae2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007970:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007974:	b2d9      	uxtb	r1, r3
 8007976:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800797a:	b2da      	uxtb	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007980:	400a      	ands	r2, r1
 8007982:	b2d2      	uxtb	r2, r2
 8007984:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800798a:	1c5a      	adds	r2, r3, #1
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007996:	b29b      	uxth	r3, r3
 8007998:	3b01      	subs	r3, #1
 800799a:	b29a      	uxth	r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	f040 80a1 	bne.w	8007af2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079b8:	e853 3f00 	ldrex	r3, [r3]
 80079bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80079be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	461a      	mov	r2, r3
 80079cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80079ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80079d0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80079d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079d6:	e841 2300 	strex	r3, r2, [r1]
 80079da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80079dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d1e6      	bne.n	80079b0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	3308      	adds	r3, #8
 80079e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ec:	e853 3f00 	ldrex	r3, [r3]
 80079f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079f4:	f023 0301 	bic.w	r3, r3, #1
 80079f8:	667b      	str	r3, [r7, #100]	; 0x64
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	3308      	adds	r3, #8
 8007a00:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007a02:	647a      	str	r2, [r7, #68]	; 0x44
 8007a04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a0a:	e841 2300 	strex	r3, r2, [r1]
 8007a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d1e5      	bne.n	80079e2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2220      	movs	r2, #32
 8007a1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a33      	ldr	r2, [pc, #204]	; (8007afc <UART_RxISR_8BIT+0x1b4>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d01f      	beq.n	8007a74 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d018      	beq.n	8007a74 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4a:	e853 3f00 	ldrex	r3, [r3]
 8007a4e:	623b      	str	r3, [r7, #32]
   return(result);
 8007a50:	6a3b      	ldr	r3, [r7, #32]
 8007a52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007a56:	663b      	str	r3, [r7, #96]	; 0x60
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a60:	633b      	str	r3, [r7, #48]	; 0x30
 8007a62:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a68:	e841 2300 	strex	r3, r2, [r1]
 8007a6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1e6      	bne.n	8007a42 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d12e      	bne.n	8007ada <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	e853 3f00 	ldrex	r3, [r3]
 8007a8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f023 0310 	bic.w	r3, r3, #16
 8007a96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007aa0:	61fb      	str	r3, [r7, #28]
 8007aa2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa4:	69b9      	ldr	r1, [r7, #24]
 8007aa6:	69fa      	ldr	r2, [r7, #28]
 8007aa8:	e841 2300 	strex	r3, r2, [r1]
 8007aac:	617b      	str	r3, [r7, #20]
   return(result);
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1e6      	bne.n	8007a82 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	69db      	ldr	r3, [r3, #28]
 8007aba:	f003 0310 	and.w	r3, r3, #16
 8007abe:	2b10      	cmp	r3, #16
 8007ac0:	d103      	bne.n	8007aca <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2210      	movs	r2, #16
 8007ac8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f7ff f93a 	bl	8006d4c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ad8:	e00b      	b.n	8007af2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f7f9 fd9c 	bl	8001618 <HAL_UART_RxCpltCallback>
}
 8007ae0:	e007      	b.n	8007af2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	699a      	ldr	r2, [r3, #24]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f042 0208 	orr.w	r2, r2, #8
 8007af0:	619a      	str	r2, [r3, #24]
}
 8007af2:	bf00      	nop
 8007af4:	3770      	adds	r7, #112	; 0x70
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	40008000 	.word	0x40008000

08007b00 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b09c      	sub	sp, #112	; 0x70
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007b0e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b18:	2b22      	cmp	r3, #34	; 0x22
 8007b1a:	f040 80be 	bne.w	8007c9a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b24:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b2c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007b2e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007b32:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007b36:	4013      	ands	r3, r2
 8007b38:	b29a      	uxth	r2, r3
 8007b3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b3c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b42:	1c9a      	adds	r2, r3, #2
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	3b01      	subs	r3, #1
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	f040 80a1 	bne.w	8007caa <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b70:	e853 3f00 	ldrex	r3, [r3]
 8007b74:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007b76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b7c:	667b      	str	r3, [r7, #100]	; 0x64
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	461a      	mov	r2, r3
 8007b84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b86:	657b      	str	r3, [r7, #84]	; 0x54
 8007b88:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007b8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007b8e:	e841 2300 	strex	r3, r2, [r1]
 8007b92:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007b94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1e6      	bne.n	8007b68 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	3308      	adds	r3, #8
 8007ba0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ba4:	e853 3f00 	ldrex	r3, [r3]
 8007ba8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bac:	f023 0301 	bic.w	r3, r3, #1
 8007bb0:	663b      	str	r3, [r7, #96]	; 0x60
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	3308      	adds	r3, #8
 8007bb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007bba:	643a      	str	r2, [r7, #64]	; 0x40
 8007bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007bc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007bc2:	e841 2300 	strex	r3, r2, [r1]
 8007bc6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d1e5      	bne.n	8007b9a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2220      	movs	r2, #32
 8007bd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a33      	ldr	r2, [pc, #204]	; (8007cb4 <UART_RxISR_16BIT+0x1b4>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d01f      	beq.n	8007c2c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d018      	beq.n	8007c2c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c00:	6a3b      	ldr	r3, [r7, #32]
 8007c02:	e853 3f00 	ldrex	r3, [r3]
 8007c06:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	461a      	mov	r2, r3
 8007c16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c1a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c20:	e841 2300 	strex	r3, r2, [r1]
 8007c24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d1e6      	bne.n	8007bfa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d12e      	bne.n	8007c92 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	e853 3f00 	ldrex	r3, [r3]
 8007c46:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	f023 0310 	bic.w	r3, r3, #16
 8007c4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	461a      	mov	r2, r3
 8007c56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c58:	61bb      	str	r3, [r7, #24]
 8007c5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c5c:	6979      	ldr	r1, [r7, #20]
 8007c5e:	69ba      	ldr	r2, [r7, #24]
 8007c60:	e841 2300 	strex	r3, r2, [r1]
 8007c64:	613b      	str	r3, [r7, #16]
   return(result);
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d1e6      	bne.n	8007c3a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	69db      	ldr	r3, [r3, #28]
 8007c72:	f003 0310 	and.w	r3, r3, #16
 8007c76:	2b10      	cmp	r3, #16
 8007c78:	d103      	bne.n	8007c82 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2210      	movs	r2, #16
 8007c80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c88:	4619      	mov	r1, r3
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f7ff f85e 	bl	8006d4c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c90:	e00b      	b.n	8007caa <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f7f9 fcc0 	bl	8001618 <HAL_UART_RxCpltCallback>
}
 8007c98:	e007      	b.n	8007caa <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	699a      	ldr	r2, [r3, #24]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f042 0208 	orr.w	r2, r2, #8
 8007ca8:	619a      	str	r2, [r3, #24]
}
 8007caa:	bf00      	nop
 8007cac:	3770      	adds	r7, #112	; 0x70
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	40008000 	.word	0x40008000

08007cb8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b0ac      	sub	sp, #176	; 0xb0
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007cc6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	69db      	ldr	r3, [r3, #28]
 8007cd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cee:	2b22      	cmp	r3, #34	; 0x22
 8007cf0:	f040 8182 	bne.w	8007ff8 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007cfa:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007cfe:	e125      	b.n	8007f4c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d06:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007d0a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8007d0e:	b2d9      	uxtb	r1, r3
 8007d10:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007d14:	b2da      	uxtb	r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d1a:	400a      	ands	r2, r1
 8007d1c:	b2d2      	uxtb	r2, r2
 8007d1e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d24:	1c5a      	adds	r2, r3, #1
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	3b01      	subs	r3, #1
 8007d34:	b29a      	uxth	r2, r3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	69db      	ldr	r3, [r3, #28]
 8007d42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007d46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d4a:	f003 0307 	and.w	r3, r3, #7
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d053      	beq.n	8007dfa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007d52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d56:	f003 0301 	and.w	r3, r3, #1
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d011      	beq.n	8007d82 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007d5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00b      	beq.n	8007d82 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d78:	f043 0201 	orr.w	r2, r3, #1
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d86:	f003 0302 	and.w	r3, r3, #2
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d011      	beq.n	8007db2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007d8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007d92:	f003 0301 	and.w	r3, r3, #1
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00b      	beq.n	8007db2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2202      	movs	r2, #2
 8007da0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007da8:	f043 0204 	orr.w	r2, r3, #4
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007db2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007db6:	f003 0304 	and.w	r3, r3, #4
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d011      	beq.n	8007de2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007dbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007dc2:	f003 0301 	and.w	r3, r3, #1
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00b      	beq.n	8007de2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2204      	movs	r2, #4
 8007dd0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dd8:	f043 0202 	orr.w	r2, r3, #2
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d006      	beq.n	8007dfa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f7fe ffa4 	bl	8006d3a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	f040 80a2 	bne.w	8007f4c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e10:	e853 3f00 	ldrex	r3, [r3]
 8007e14:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8007e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	461a      	mov	r2, r3
 8007e26:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e2a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007e2c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007e30:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007e32:	e841 2300 	strex	r3, r2, [r1]
 8007e36:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8007e38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1e4      	bne.n	8007e08 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	3308      	adds	r3, #8
 8007e44:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e48:	e853 3f00 	ldrex	r3, [r3]
 8007e4c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007e4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e54:	f023 0301 	bic.w	r3, r3, #1
 8007e58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	3308      	adds	r3, #8
 8007e62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007e66:	66ba      	str	r2, [r7, #104]	; 0x68
 8007e68:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007e6c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e6e:	e841 2300 	strex	r3, r2, [r1]
 8007e72:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007e74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1e1      	bne.n	8007e3e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2220      	movs	r2, #32
 8007e7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a5f      	ldr	r2, [pc, #380]	; (8008010 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d021      	beq.n	8007edc <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d01a      	beq.n	8007edc <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007eae:	e853 3f00 	ldrex	r3, [r3]
 8007eb2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007eb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007eb6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007eba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ec8:	657b      	str	r3, [r7, #84]	; 0x54
 8007eca:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ecc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007ece:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007ed0:	e841 2300 	strex	r3, r2, [r1]
 8007ed4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1e4      	bne.n	8007ea6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d130      	bne.n	8007f46 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ef2:	e853 3f00 	ldrex	r3, [r3]
 8007ef6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efa:	f023 0310 	bic.w	r3, r3, #16
 8007efe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	461a      	mov	r2, r3
 8007f08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f0c:	643b      	str	r3, [r7, #64]	; 0x40
 8007f0e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f14:	e841 2300 	strex	r3, r2, [r1]
 8007f18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1e4      	bne.n	8007eea <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	69db      	ldr	r3, [r3, #28]
 8007f26:	f003 0310 	and.w	r3, r3, #16
 8007f2a:	2b10      	cmp	r3, #16
 8007f2c:	d103      	bne.n	8007f36 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	2210      	movs	r2, #16
 8007f34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f7fe ff04 	bl	8006d4c <HAL_UARTEx_RxEventCallback>
 8007f44:	e002      	b.n	8007f4c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f7f9 fb66 	bl	8001618 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007f4c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d006      	beq.n	8007f62 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8007f54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f58:	f003 0320 	and.w	r3, r3, #32
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f47f aecf 	bne.w	8007d00 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f68:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007f6c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d049      	beq.n	8008008 <UART_RxISR_8BIT_FIFOEN+0x350>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007f7a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d242      	bcs.n	8008008 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	3308      	adds	r3, #8
 8007f88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8a:	6a3b      	ldr	r3, [r7, #32]
 8007f8c:	e853 3f00 	ldrex	r3, [r3]
 8007f90:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	3308      	adds	r3, #8
 8007fa2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007fa6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fa8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007faa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fae:	e841 2300 	strex	r3, r2, [r1]
 8007fb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d1e3      	bne.n	8007f82 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a15      	ldr	r2, [pc, #84]	; (8008014 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007fbe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	e853 3f00 	ldrex	r3, [r3]
 8007fcc:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	f043 0320 	orr.w	r3, r3, #32
 8007fd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	461a      	mov	r2, r3
 8007fde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007fe2:	61bb      	str	r3, [r7, #24]
 8007fe4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe6:	6979      	ldr	r1, [r7, #20]
 8007fe8:	69ba      	ldr	r2, [r7, #24]
 8007fea:	e841 2300 	strex	r3, r2, [r1]
 8007fee:	613b      	str	r3, [r7, #16]
   return(result);
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1e4      	bne.n	8007fc0 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ff6:	e007      	b.n	8008008 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	699a      	ldr	r2, [r3, #24]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f042 0208 	orr.w	r2, r2, #8
 8008006:	619a      	str	r2, [r3, #24]
}
 8008008:	bf00      	nop
 800800a:	37b0      	adds	r7, #176	; 0xb0
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}
 8008010:	40008000 	.word	0x40008000
 8008014:	08007949 	.word	0x08007949

08008018 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b0ae      	sub	sp, #184	; 0xb8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008026:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	69db      	ldr	r3, [r3, #28]
 8008030:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800804e:	2b22      	cmp	r3, #34	; 0x22
 8008050:	f040 8186 	bne.w	8008360 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800805a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800805e:	e129      	b.n	80082b4 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008066:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800806e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008072:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8008076:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800807a:	4013      	ands	r3, r2
 800807c:	b29a      	uxth	r2, r3
 800807e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008082:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008088:	1c9a      	adds	r2, r3, #2
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008094:	b29b      	uxth	r3, r3
 8008096:	3b01      	subs	r3, #1
 8008098:	b29a      	uxth	r2, r3
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	69db      	ldr	r3, [r3, #28]
 80080a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80080aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80080ae:	f003 0307 	and.w	r3, r3, #7
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d053      	beq.n	800815e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80080b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80080ba:	f003 0301 	and.w	r3, r3, #1
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d011      	beq.n	80080e6 <UART_RxISR_16BIT_FIFOEN+0xce>
 80080c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80080c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00b      	beq.n	80080e6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2201      	movs	r2, #1
 80080d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080dc:	f043 0201 	orr.w	r2, r3, #1
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80080ea:	f003 0302 	and.w	r3, r3, #2
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d011      	beq.n	8008116 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80080f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80080f6:	f003 0301 	and.w	r3, r3, #1
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00b      	beq.n	8008116 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2202      	movs	r2, #2
 8008104:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800810c:	f043 0204 	orr.w	r2, r3, #4
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008116:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800811a:	f003 0304 	and.w	r3, r3, #4
 800811e:	2b00      	cmp	r3, #0
 8008120:	d011      	beq.n	8008146 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008122:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008126:	f003 0301 	and.w	r3, r3, #1
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00b      	beq.n	8008146 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2204      	movs	r2, #4
 8008134:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800813c:	f043 0202 	orr.w	r2, r3, #2
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800814c:	2b00      	cmp	r3, #0
 800814e:	d006      	beq.n	800815e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f7fe fdf2 	bl	8006d3a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008164:	b29b      	uxth	r3, r3
 8008166:	2b00      	cmp	r3, #0
 8008168:	f040 80a4 	bne.w	80082b4 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008172:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008174:	e853 3f00 	ldrex	r3, [r3]
 8008178:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800817a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800817c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008180:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	461a      	mov	r2, r3
 800818a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800818e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008192:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008194:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008196:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800819a:	e841 2300 	strex	r3, r2, [r1]
 800819e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80081a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d1e2      	bne.n	800816c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	3308      	adds	r3, #8
 80081ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081b0:	e853 3f00 	ldrex	r3, [r3]
 80081b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80081b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081bc:	f023 0301 	bic.w	r3, r3, #1
 80081c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	3308      	adds	r3, #8
 80081ca:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80081ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80081d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80081d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80081d6:	e841 2300 	strex	r3, r2, [r1]
 80081da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80081dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d1e1      	bne.n	80081a6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2220      	movs	r2, #32
 80081e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a5f      	ldr	r2, [pc, #380]	; (8008378 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d021      	beq.n	8008244 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800820a:	2b00      	cmp	r3, #0
 800820c:	d01a      	beq.n	8008244 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008216:	e853 3f00 	ldrex	r3, [r3]
 800821a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800821c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800821e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008222:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	461a      	mov	r2, r3
 800822c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008230:	65bb      	str	r3, [r7, #88]	; 0x58
 8008232:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008234:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008236:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008238:	e841 2300 	strex	r3, r2, [r1]
 800823c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800823e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008240:	2b00      	cmp	r3, #0
 8008242:	d1e4      	bne.n	800820e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008248:	2b01      	cmp	r3, #1
 800824a:	d130      	bne.n	80082ae <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825a:	e853 3f00 	ldrex	r3, [r3]
 800825e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008262:	f023 0310 	bic.w	r3, r3, #16
 8008266:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	461a      	mov	r2, r3
 8008270:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008274:	647b      	str	r3, [r7, #68]	; 0x44
 8008276:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008278:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800827a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800827c:	e841 2300 	strex	r3, r2, [r1]
 8008280:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008284:	2b00      	cmp	r3, #0
 8008286:	d1e4      	bne.n	8008252 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	69db      	ldr	r3, [r3, #28]
 800828e:	f003 0310 	and.w	r3, r3, #16
 8008292:	2b10      	cmp	r3, #16
 8008294:	d103      	bne.n	800829e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2210      	movs	r2, #16
 800829c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80082a4:	4619      	mov	r1, r3
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f7fe fd50 	bl	8006d4c <HAL_UARTEx_RxEventCallback>
 80082ac:	e002      	b.n	80082b4 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f7f9 f9b2 	bl	8001618 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80082b4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d006      	beq.n	80082ca <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80082bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80082c0:	f003 0320 	and.w	r3, r3, #32
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f47f aecb 	bne.w	8008060 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80082d0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80082d4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d049      	beq.n	8008370 <UART_RxISR_16BIT_FIFOEN+0x358>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80082e2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d242      	bcs.n	8008370 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	3308      	adds	r3, #8
 80082f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f4:	e853 3f00 	ldrex	r3, [r3]
 80082f8:	623b      	str	r3, [r7, #32]
   return(result);
 80082fa:	6a3b      	ldr	r3, [r7, #32]
 80082fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008300:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	3308      	adds	r3, #8
 800830a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800830e:	633a      	str	r2, [r7, #48]	; 0x30
 8008310:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008312:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008316:	e841 2300 	strex	r3, r2, [r1]
 800831a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800831c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1e3      	bne.n	80082ea <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4a15      	ldr	r2, [pc, #84]	; (800837c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008326:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	e853 3f00 	ldrex	r3, [r3]
 8008334:	60fb      	str	r3, [r7, #12]
   return(result);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f043 0320 	orr.w	r3, r3, #32
 800833c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	461a      	mov	r2, r3
 8008346:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800834a:	61fb      	str	r3, [r7, #28]
 800834c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800834e:	69b9      	ldr	r1, [r7, #24]
 8008350:	69fa      	ldr	r2, [r7, #28]
 8008352:	e841 2300 	strex	r3, r2, [r1]
 8008356:	617b      	str	r3, [r7, #20]
   return(result);
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d1e4      	bne.n	8008328 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800835e:	e007      	b.n	8008370 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	699a      	ldr	r2, [r3, #24]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f042 0208 	orr.w	r2, r2, #8
 800836e:	619a      	str	r2, [r3, #24]
}
 8008370:	bf00      	nop
 8008372:	37b8      	adds	r7, #184	; 0xb8
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}
 8008378:	40008000 	.word	0x40008000
 800837c:	08007b01 	.word	0x08007b01

08008380 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008388:	bf00      	nop
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	bc80      	pop	{r7}
 8008390:	4770      	bx	lr

08008392 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008392:	b480      	push	{r7}
 8008394:	b083      	sub	sp, #12
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800839a:	bf00      	nop
 800839c:	370c      	adds	r7, #12
 800839e:	46bd      	mov	sp, r7
 80083a0:	bc80      	pop	{r7}
 80083a2:	4770      	bx	lr

080083a4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80083ac:	bf00      	nop
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bc80      	pop	{r7}
 80083b4:	4770      	bx	lr

080083b6 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b084      	sub	sp, #16
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d101      	bne.n	80083cc <HAL_UARTEx_EnableFifoMode+0x16>
 80083c8:	2302      	movs	r3, #2
 80083ca:	e02b      	b.n	8008424 <HAL_UARTEx_EnableFifoMode+0x6e>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2224      	movs	r2, #36	; 0x24
 80083d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f022 0201 	bic.w	r2, r2, #1
 80083f2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80083fa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8008402:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	68fa      	ldr	r2, [r7, #12]
 800840a:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 f8c1 	bl	8008594 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2220      	movs	r2, #32
 8008416:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008422:	2300      	movs	r3, #0
}
 8008424:	4618      	mov	r0, r3
 8008426:	3710      	adds	r7, #16
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800843a:	2b01      	cmp	r3, #1
 800843c:	d101      	bne.n	8008442 <HAL_UARTEx_DisableFifoMode+0x16>
 800843e:	2302      	movs	r3, #2
 8008440:	e027      	b.n	8008492 <HAL_UARTEx_DisableFifoMode+0x66>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2201      	movs	r2, #1
 8008446:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2224      	movs	r2, #36	; 0x24
 800844e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f022 0201 	bic.w	r2, r2, #1
 8008468:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008470:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2200      	movs	r2, #0
 8008476:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2220      	movs	r2, #32
 8008484:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	3714      	adds	r7, #20
 8008496:	46bd      	mov	sp, r7
 8008498:	bc80      	pop	{r7}
 800849a:	4770      	bx	lr

0800849c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d101      	bne.n	80084b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80084b0:	2302      	movs	r3, #2
 80084b2:	e02d      	b.n	8008510 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2224      	movs	r2, #36	; 0x24
 80084c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f022 0201 	bic.w	r2, r2, #1
 80084da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	683a      	ldr	r2, [r7, #0]
 80084ec:	430a      	orrs	r2, r1
 80084ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 f84f 	bl	8008594 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	68fa      	ldr	r2, [r7, #12]
 80084fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2220      	movs	r2, #32
 8008502:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800850e:	2300      	movs	r3, #0
}
 8008510:	4618      	mov	r0, r3
 8008512:	3710      	adds	r7, #16
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008528:	2b01      	cmp	r3, #1
 800852a:	d101      	bne.n	8008530 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800852c:	2302      	movs	r3, #2
 800852e:	e02d      	b.n	800858c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2224      	movs	r2, #36	; 0x24
 800853c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f022 0201 	bic.w	r2, r2, #1
 8008556:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	683a      	ldr	r2, [r7, #0]
 8008568:	430a      	orrs	r2, r1
 800856a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 f811 	bl	8008594 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2220      	movs	r2, #32
 800857e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800858a:	2300      	movs	r3, #0
}
 800858c:	4618      	mov	r0, r3
 800858e:	3710      	adds	r7, #16
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008594:	b480      	push	{r7}
 8008596:	b085      	sub	sp, #20
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d108      	bne.n	80085b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2201      	movs	r2, #1
 80085b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80085b4:	e031      	b.n	800861a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80085b6:	2308      	movs	r3, #8
 80085b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80085ba:	2308      	movs	r3, #8
 80085bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	0e5b      	lsrs	r3, r3, #25
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	f003 0307 	and.w	r3, r3, #7
 80085cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	0f5b      	lsrs	r3, r3, #29
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	f003 0307 	and.w	r3, r3, #7
 80085dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80085de:	7bbb      	ldrb	r3, [r7, #14]
 80085e0:	7b3a      	ldrb	r2, [r7, #12]
 80085e2:	4910      	ldr	r1, [pc, #64]	; (8008624 <UARTEx_SetNbDataToProcess+0x90>)
 80085e4:	5c8a      	ldrb	r2, [r1, r2]
 80085e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80085ea:	7b3a      	ldrb	r2, [r7, #12]
 80085ec:	490e      	ldr	r1, [pc, #56]	; (8008628 <UARTEx_SetNbDataToProcess+0x94>)
 80085ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80085f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80085f4:	b29a      	uxth	r2, r3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80085fc:	7bfb      	ldrb	r3, [r7, #15]
 80085fe:	7b7a      	ldrb	r2, [r7, #13]
 8008600:	4908      	ldr	r1, [pc, #32]	; (8008624 <UARTEx_SetNbDataToProcess+0x90>)
 8008602:	5c8a      	ldrb	r2, [r1, r2]
 8008604:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008608:	7b7a      	ldrb	r2, [r7, #13]
 800860a:	4907      	ldr	r1, [pc, #28]	; (8008628 <UARTEx_SetNbDataToProcess+0x94>)
 800860c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800860e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008612:	b29a      	uxth	r2, r3
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800861a:	bf00      	nop
 800861c:	3714      	adds	r7, #20
 800861e:	46bd      	mov	sp, r7
 8008620:	bc80      	pop	{r7}
 8008622:	4770      	bx	lr
 8008624:	0800b044 	.word	0x0800b044
 8008628:	0800b04c 	.word	0x0800b04c

0800862c <std>:
 800862c:	2300      	movs	r3, #0
 800862e:	b510      	push	{r4, lr}
 8008630:	4604      	mov	r4, r0
 8008632:	e9c0 3300 	strd	r3, r3, [r0]
 8008636:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800863a:	6083      	str	r3, [r0, #8]
 800863c:	8181      	strh	r1, [r0, #12]
 800863e:	6643      	str	r3, [r0, #100]	; 0x64
 8008640:	81c2      	strh	r2, [r0, #14]
 8008642:	6183      	str	r3, [r0, #24]
 8008644:	4619      	mov	r1, r3
 8008646:	2208      	movs	r2, #8
 8008648:	305c      	adds	r0, #92	; 0x5c
 800864a:	f000 f936 	bl	80088ba <memset>
 800864e:	4b05      	ldr	r3, [pc, #20]	; (8008664 <std+0x38>)
 8008650:	6263      	str	r3, [r4, #36]	; 0x24
 8008652:	4b05      	ldr	r3, [pc, #20]	; (8008668 <std+0x3c>)
 8008654:	62a3      	str	r3, [r4, #40]	; 0x28
 8008656:	4b05      	ldr	r3, [pc, #20]	; (800866c <std+0x40>)
 8008658:	62e3      	str	r3, [r4, #44]	; 0x2c
 800865a:	4b05      	ldr	r3, [pc, #20]	; (8008670 <std+0x44>)
 800865c:	6224      	str	r4, [r4, #32]
 800865e:	6323      	str	r3, [r4, #48]	; 0x30
 8008660:	bd10      	pop	{r4, pc}
 8008662:	bf00      	nop
 8008664:	08008835 	.word	0x08008835
 8008668:	08008857 	.word	0x08008857
 800866c:	0800888f 	.word	0x0800888f
 8008670:	080088b3 	.word	0x080088b3

08008674 <stdio_exit_handler>:
 8008674:	4a02      	ldr	r2, [pc, #8]	; (8008680 <stdio_exit_handler+0xc>)
 8008676:	4903      	ldr	r1, [pc, #12]	; (8008684 <stdio_exit_handler+0x10>)
 8008678:	4803      	ldr	r0, [pc, #12]	; (8008688 <stdio_exit_handler+0x14>)
 800867a:	f000 b869 	b.w	8008750 <_fwalk_sglue>
 800867e:	bf00      	nop
 8008680:	20000048 	.word	0x20000048
 8008684:	08009399 	.word	0x08009399
 8008688:	20000054 	.word	0x20000054

0800868c <cleanup_stdio>:
 800868c:	6841      	ldr	r1, [r0, #4]
 800868e:	4b0c      	ldr	r3, [pc, #48]	; (80086c0 <cleanup_stdio+0x34>)
 8008690:	4299      	cmp	r1, r3
 8008692:	b510      	push	{r4, lr}
 8008694:	4604      	mov	r4, r0
 8008696:	d001      	beq.n	800869c <cleanup_stdio+0x10>
 8008698:	f000 fe7e 	bl	8009398 <_fflush_r>
 800869c:	68a1      	ldr	r1, [r4, #8]
 800869e:	4b09      	ldr	r3, [pc, #36]	; (80086c4 <cleanup_stdio+0x38>)
 80086a0:	4299      	cmp	r1, r3
 80086a2:	d002      	beq.n	80086aa <cleanup_stdio+0x1e>
 80086a4:	4620      	mov	r0, r4
 80086a6:	f000 fe77 	bl	8009398 <_fflush_r>
 80086aa:	68e1      	ldr	r1, [r4, #12]
 80086ac:	4b06      	ldr	r3, [pc, #24]	; (80086c8 <cleanup_stdio+0x3c>)
 80086ae:	4299      	cmp	r1, r3
 80086b0:	d004      	beq.n	80086bc <cleanup_stdio+0x30>
 80086b2:	4620      	mov	r0, r4
 80086b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086b8:	f000 be6e 	b.w	8009398 <_fflush_r>
 80086bc:	bd10      	pop	{r4, pc}
 80086be:	bf00      	nop
 80086c0:	200005f0 	.word	0x200005f0
 80086c4:	20000658 	.word	0x20000658
 80086c8:	200006c0 	.word	0x200006c0

080086cc <global_stdio_init.part.0>:
 80086cc:	b510      	push	{r4, lr}
 80086ce:	4b0b      	ldr	r3, [pc, #44]	; (80086fc <global_stdio_init.part.0+0x30>)
 80086d0:	4c0b      	ldr	r4, [pc, #44]	; (8008700 <global_stdio_init.part.0+0x34>)
 80086d2:	4a0c      	ldr	r2, [pc, #48]	; (8008704 <global_stdio_init.part.0+0x38>)
 80086d4:	601a      	str	r2, [r3, #0]
 80086d6:	4620      	mov	r0, r4
 80086d8:	2200      	movs	r2, #0
 80086da:	2104      	movs	r1, #4
 80086dc:	f7ff ffa6 	bl	800862c <std>
 80086e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80086e4:	2201      	movs	r2, #1
 80086e6:	2109      	movs	r1, #9
 80086e8:	f7ff ffa0 	bl	800862c <std>
 80086ec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80086f0:	2202      	movs	r2, #2
 80086f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086f6:	2112      	movs	r1, #18
 80086f8:	f7ff bf98 	b.w	800862c <std>
 80086fc:	20000728 	.word	0x20000728
 8008700:	200005f0 	.word	0x200005f0
 8008704:	08008675 	.word	0x08008675

08008708 <__sfp_lock_acquire>:
 8008708:	4801      	ldr	r0, [pc, #4]	; (8008710 <__sfp_lock_acquire+0x8>)
 800870a:	f000 b9bd 	b.w	8008a88 <__retarget_lock_acquire_recursive>
 800870e:	bf00      	nop
 8008710:	20000731 	.word	0x20000731

08008714 <__sfp_lock_release>:
 8008714:	4801      	ldr	r0, [pc, #4]	; (800871c <__sfp_lock_release+0x8>)
 8008716:	f000 b9b8 	b.w	8008a8a <__retarget_lock_release_recursive>
 800871a:	bf00      	nop
 800871c:	20000731 	.word	0x20000731

08008720 <__sinit>:
 8008720:	b510      	push	{r4, lr}
 8008722:	4604      	mov	r4, r0
 8008724:	f7ff fff0 	bl	8008708 <__sfp_lock_acquire>
 8008728:	6a23      	ldr	r3, [r4, #32]
 800872a:	b11b      	cbz	r3, 8008734 <__sinit+0x14>
 800872c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008730:	f7ff bff0 	b.w	8008714 <__sfp_lock_release>
 8008734:	4b04      	ldr	r3, [pc, #16]	; (8008748 <__sinit+0x28>)
 8008736:	6223      	str	r3, [r4, #32]
 8008738:	4b04      	ldr	r3, [pc, #16]	; (800874c <__sinit+0x2c>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1f5      	bne.n	800872c <__sinit+0xc>
 8008740:	f7ff ffc4 	bl	80086cc <global_stdio_init.part.0>
 8008744:	e7f2      	b.n	800872c <__sinit+0xc>
 8008746:	bf00      	nop
 8008748:	0800868d 	.word	0x0800868d
 800874c:	20000728 	.word	0x20000728

08008750 <_fwalk_sglue>:
 8008750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008754:	4607      	mov	r7, r0
 8008756:	4688      	mov	r8, r1
 8008758:	4614      	mov	r4, r2
 800875a:	2600      	movs	r6, #0
 800875c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008760:	f1b9 0901 	subs.w	r9, r9, #1
 8008764:	d505      	bpl.n	8008772 <_fwalk_sglue+0x22>
 8008766:	6824      	ldr	r4, [r4, #0]
 8008768:	2c00      	cmp	r4, #0
 800876a:	d1f7      	bne.n	800875c <_fwalk_sglue+0xc>
 800876c:	4630      	mov	r0, r6
 800876e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008772:	89ab      	ldrh	r3, [r5, #12]
 8008774:	2b01      	cmp	r3, #1
 8008776:	d907      	bls.n	8008788 <_fwalk_sglue+0x38>
 8008778:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800877c:	3301      	adds	r3, #1
 800877e:	d003      	beq.n	8008788 <_fwalk_sglue+0x38>
 8008780:	4629      	mov	r1, r5
 8008782:	4638      	mov	r0, r7
 8008784:	47c0      	blx	r8
 8008786:	4306      	orrs	r6, r0
 8008788:	3568      	adds	r5, #104	; 0x68
 800878a:	e7e9      	b.n	8008760 <_fwalk_sglue+0x10>

0800878c <sniprintf>:
 800878c:	b40c      	push	{r2, r3}
 800878e:	b530      	push	{r4, r5, lr}
 8008790:	4b17      	ldr	r3, [pc, #92]	; (80087f0 <sniprintf+0x64>)
 8008792:	1e0c      	subs	r4, r1, #0
 8008794:	681d      	ldr	r5, [r3, #0]
 8008796:	b09d      	sub	sp, #116	; 0x74
 8008798:	da08      	bge.n	80087ac <sniprintf+0x20>
 800879a:	238b      	movs	r3, #139	; 0x8b
 800879c:	602b      	str	r3, [r5, #0]
 800879e:	f04f 30ff 	mov.w	r0, #4294967295
 80087a2:	b01d      	add	sp, #116	; 0x74
 80087a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80087a8:	b002      	add	sp, #8
 80087aa:	4770      	bx	lr
 80087ac:	f44f 7302 	mov.w	r3, #520	; 0x208
 80087b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80087b4:	bf14      	ite	ne
 80087b6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80087ba:	4623      	moveq	r3, r4
 80087bc:	9304      	str	r3, [sp, #16]
 80087be:	9307      	str	r3, [sp, #28]
 80087c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80087c4:	9002      	str	r0, [sp, #8]
 80087c6:	9006      	str	r0, [sp, #24]
 80087c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80087cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80087ce:	ab21      	add	r3, sp, #132	; 0x84
 80087d0:	a902      	add	r1, sp, #8
 80087d2:	4628      	mov	r0, r5
 80087d4:	9301      	str	r3, [sp, #4]
 80087d6:	f000 facf 	bl	8008d78 <_svfiprintf_r>
 80087da:	1c43      	adds	r3, r0, #1
 80087dc:	bfbc      	itt	lt
 80087de:	238b      	movlt	r3, #139	; 0x8b
 80087e0:	602b      	strlt	r3, [r5, #0]
 80087e2:	2c00      	cmp	r4, #0
 80087e4:	d0dd      	beq.n	80087a2 <sniprintf+0x16>
 80087e6:	9b02      	ldr	r3, [sp, #8]
 80087e8:	2200      	movs	r2, #0
 80087ea:	701a      	strb	r2, [r3, #0]
 80087ec:	e7d9      	b.n	80087a2 <sniprintf+0x16>
 80087ee:	bf00      	nop
 80087f0:	200000a0 	.word	0x200000a0

080087f4 <siprintf>:
 80087f4:	b40e      	push	{r1, r2, r3}
 80087f6:	b500      	push	{lr}
 80087f8:	b09c      	sub	sp, #112	; 0x70
 80087fa:	ab1d      	add	r3, sp, #116	; 0x74
 80087fc:	9002      	str	r0, [sp, #8]
 80087fe:	9006      	str	r0, [sp, #24]
 8008800:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008804:	4809      	ldr	r0, [pc, #36]	; (800882c <siprintf+0x38>)
 8008806:	9107      	str	r1, [sp, #28]
 8008808:	9104      	str	r1, [sp, #16]
 800880a:	4909      	ldr	r1, [pc, #36]	; (8008830 <siprintf+0x3c>)
 800880c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008810:	9105      	str	r1, [sp, #20]
 8008812:	6800      	ldr	r0, [r0, #0]
 8008814:	9301      	str	r3, [sp, #4]
 8008816:	a902      	add	r1, sp, #8
 8008818:	f000 faae 	bl	8008d78 <_svfiprintf_r>
 800881c:	9b02      	ldr	r3, [sp, #8]
 800881e:	2200      	movs	r2, #0
 8008820:	701a      	strb	r2, [r3, #0]
 8008822:	b01c      	add	sp, #112	; 0x70
 8008824:	f85d eb04 	ldr.w	lr, [sp], #4
 8008828:	b003      	add	sp, #12
 800882a:	4770      	bx	lr
 800882c:	200000a0 	.word	0x200000a0
 8008830:	ffff0208 	.word	0xffff0208

08008834 <__sread>:
 8008834:	b510      	push	{r4, lr}
 8008836:	460c      	mov	r4, r1
 8008838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800883c:	f000 f8d6 	bl	80089ec <_read_r>
 8008840:	2800      	cmp	r0, #0
 8008842:	bfab      	itete	ge
 8008844:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008846:	89a3      	ldrhlt	r3, [r4, #12]
 8008848:	181b      	addge	r3, r3, r0
 800884a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800884e:	bfac      	ite	ge
 8008850:	6563      	strge	r3, [r4, #84]	; 0x54
 8008852:	81a3      	strhlt	r3, [r4, #12]
 8008854:	bd10      	pop	{r4, pc}

08008856 <__swrite>:
 8008856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800885a:	461f      	mov	r7, r3
 800885c:	898b      	ldrh	r3, [r1, #12]
 800885e:	05db      	lsls	r3, r3, #23
 8008860:	4605      	mov	r5, r0
 8008862:	460c      	mov	r4, r1
 8008864:	4616      	mov	r6, r2
 8008866:	d505      	bpl.n	8008874 <__swrite+0x1e>
 8008868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800886c:	2302      	movs	r3, #2
 800886e:	2200      	movs	r2, #0
 8008870:	f000 f8aa 	bl	80089c8 <_lseek_r>
 8008874:	89a3      	ldrh	r3, [r4, #12]
 8008876:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800887a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800887e:	81a3      	strh	r3, [r4, #12]
 8008880:	4632      	mov	r2, r6
 8008882:	463b      	mov	r3, r7
 8008884:	4628      	mov	r0, r5
 8008886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800888a:	f000 b8c1 	b.w	8008a10 <_write_r>

0800888e <__sseek>:
 800888e:	b510      	push	{r4, lr}
 8008890:	460c      	mov	r4, r1
 8008892:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008896:	f000 f897 	bl	80089c8 <_lseek_r>
 800889a:	1c43      	adds	r3, r0, #1
 800889c:	89a3      	ldrh	r3, [r4, #12]
 800889e:	bf15      	itete	ne
 80088a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80088a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80088a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80088aa:	81a3      	strheq	r3, [r4, #12]
 80088ac:	bf18      	it	ne
 80088ae:	81a3      	strhne	r3, [r4, #12]
 80088b0:	bd10      	pop	{r4, pc}

080088b2 <__sclose>:
 80088b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088b6:	f000 b877 	b.w	80089a8 <_close_r>

080088ba <memset>:
 80088ba:	4402      	add	r2, r0
 80088bc:	4603      	mov	r3, r0
 80088be:	4293      	cmp	r3, r2
 80088c0:	d100      	bne.n	80088c4 <memset+0xa>
 80088c2:	4770      	bx	lr
 80088c4:	f803 1b01 	strb.w	r1, [r3], #1
 80088c8:	e7f9      	b.n	80088be <memset+0x4>

080088ca <strncmp>:
 80088ca:	b510      	push	{r4, lr}
 80088cc:	b16a      	cbz	r2, 80088ea <strncmp+0x20>
 80088ce:	3901      	subs	r1, #1
 80088d0:	1884      	adds	r4, r0, r2
 80088d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088d6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80088da:	429a      	cmp	r2, r3
 80088dc:	d103      	bne.n	80088e6 <strncmp+0x1c>
 80088de:	42a0      	cmp	r0, r4
 80088e0:	d001      	beq.n	80088e6 <strncmp+0x1c>
 80088e2:	2a00      	cmp	r2, #0
 80088e4:	d1f5      	bne.n	80088d2 <strncmp+0x8>
 80088e6:	1ad0      	subs	r0, r2, r3
 80088e8:	bd10      	pop	{r4, pc}
 80088ea:	4610      	mov	r0, r2
 80088ec:	e7fc      	b.n	80088e8 <strncmp+0x1e>
	...

080088f0 <strtok>:
 80088f0:	4b16      	ldr	r3, [pc, #88]	; (800894c <strtok+0x5c>)
 80088f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088f6:	681f      	ldr	r7, [r3, #0]
 80088f8:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80088fa:	4605      	mov	r5, r0
 80088fc:	460e      	mov	r6, r1
 80088fe:	b9ec      	cbnz	r4, 800893c <strtok+0x4c>
 8008900:	2050      	movs	r0, #80	; 0x50
 8008902:	f000 f92b 	bl	8008b5c <malloc>
 8008906:	4602      	mov	r2, r0
 8008908:	6478      	str	r0, [r7, #68]	; 0x44
 800890a:	b920      	cbnz	r0, 8008916 <strtok+0x26>
 800890c:	4b10      	ldr	r3, [pc, #64]	; (8008950 <strtok+0x60>)
 800890e:	4811      	ldr	r0, [pc, #68]	; (8008954 <strtok+0x64>)
 8008910:	215b      	movs	r1, #91	; 0x5b
 8008912:	f000 f8bb 	bl	8008a8c <__assert_func>
 8008916:	e9c0 4400 	strd	r4, r4, [r0]
 800891a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800891e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008922:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008926:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800892a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800892e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008932:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008936:	6184      	str	r4, [r0, #24]
 8008938:	7704      	strb	r4, [r0, #28]
 800893a:	6244      	str	r4, [r0, #36]	; 0x24
 800893c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800893e:	4631      	mov	r1, r6
 8008940:	4628      	mov	r0, r5
 8008942:	2301      	movs	r3, #1
 8008944:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008948:	f000 b806 	b.w	8008958 <__strtok_r>
 800894c:	200000a0 	.word	0x200000a0
 8008950:	0800b155 	.word	0x0800b155
 8008954:	0800b16c 	.word	0x0800b16c

08008958 <__strtok_r>:
 8008958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800895a:	b908      	cbnz	r0, 8008960 <__strtok_r+0x8>
 800895c:	6810      	ldr	r0, [r2, #0]
 800895e:	b188      	cbz	r0, 8008984 <__strtok_r+0x2c>
 8008960:	4604      	mov	r4, r0
 8008962:	4620      	mov	r0, r4
 8008964:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008968:	460f      	mov	r7, r1
 800896a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800896e:	b91e      	cbnz	r6, 8008978 <__strtok_r+0x20>
 8008970:	b965      	cbnz	r5, 800898c <__strtok_r+0x34>
 8008972:	6015      	str	r5, [r2, #0]
 8008974:	4628      	mov	r0, r5
 8008976:	e005      	b.n	8008984 <__strtok_r+0x2c>
 8008978:	42b5      	cmp	r5, r6
 800897a:	d1f6      	bne.n	800896a <__strtok_r+0x12>
 800897c:	2b00      	cmp	r3, #0
 800897e:	d1f0      	bne.n	8008962 <__strtok_r+0xa>
 8008980:	6014      	str	r4, [r2, #0]
 8008982:	7003      	strb	r3, [r0, #0]
 8008984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008986:	461c      	mov	r4, r3
 8008988:	e00c      	b.n	80089a4 <__strtok_r+0x4c>
 800898a:	b915      	cbnz	r5, 8008992 <__strtok_r+0x3a>
 800898c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008990:	460e      	mov	r6, r1
 8008992:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008996:	42ab      	cmp	r3, r5
 8008998:	d1f7      	bne.n	800898a <__strtok_r+0x32>
 800899a:	2b00      	cmp	r3, #0
 800899c:	d0f3      	beq.n	8008986 <__strtok_r+0x2e>
 800899e:	2300      	movs	r3, #0
 80089a0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80089a4:	6014      	str	r4, [r2, #0]
 80089a6:	e7ed      	b.n	8008984 <__strtok_r+0x2c>

080089a8 <_close_r>:
 80089a8:	b538      	push	{r3, r4, r5, lr}
 80089aa:	4d06      	ldr	r5, [pc, #24]	; (80089c4 <_close_r+0x1c>)
 80089ac:	2300      	movs	r3, #0
 80089ae:	4604      	mov	r4, r0
 80089b0:	4608      	mov	r0, r1
 80089b2:	602b      	str	r3, [r5, #0]
 80089b4:	f7f9 fcfe 	bl	80023b4 <_close>
 80089b8:	1c43      	adds	r3, r0, #1
 80089ba:	d102      	bne.n	80089c2 <_close_r+0x1a>
 80089bc:	682b      	ldr	r3, [r5, #0]
 80089be:	b103      	cbz	r3, 80089c2 <_close_r+0x1a>
 80089c0:	6023      	str	r3, [r4, #0]
 80089c2:	bd38      	pop	{r3, r4, r5, pc}
 80089c4:	2000072c 	.word	0x2000072c

080089c8 <_lseek_r>:
 80089c8:	b538      	push	{r3, r4, r5, lr}
 80089ca:	4d07      	ldr	r5, [pc, #28]	; (80089e8 <_lseek_r+0x20>)
 80089cc:	4604      	mov	r4, r0
 80089ce:	4608      	mov	r0, r1
 80089d0:	4611      	mov	r1, r2
 80089d2:	2200      	movs	r2, #0
 80089d4:	602a      	str	r2, [r5, #0]
 80089d6:	461a      	mov	r2, r3
 80089d8:	f7f9 fd10 	bl	80023fc <_lseek>
 80089dc:	1c43      	adds	r3, r0, #1
 80089de:	d102      	bne.n	80089e6 <_lseek_r+0x1e>
 80089e0:	682b      	ldr	r3, [r5, #0]
 80089e2:	b103      	cbz	r3, 80089e6 <_lseek_r+0x1e>
 80089e4:	6023      	str	r3, [r4, #0]
 80089e6:	bd38      	pop	{r3, r4, r5, pc}
 80089e8:	2000072c 	.word	0x2000072c

080089ec <_read_r>:
 80089ec:	b538      	push	{r3, r4, r5, lr}
 80089ee:	4d07      	ldr	r5, [pc, #28]	; (8008a0c <_read_r+0x20>)
 80089f0:	4604      	mov	r4, r0
 80089f2:	4608      	mov	r0, r1
 80089f4:	4611      	mov	r1, r2
 80089f6:	2200      	movs	r2, #0
 80089f8:	602a      	str	r2, [r5, #0]
 80089fa:	461a      	mov	r2, r3
 80089fc:	f7f9 fca1 	bl	8002342 <_read>
 8008a00:	1c43      	adds	r3, r0, #1
 8008a02:	d102      	bne.n	8008a0a <_read_r+0x1e>
 8008a04:	682b      	ldr	r3, [r5, #0]
 8008a06:	b103      	cbz	r3, 8008a0a <_read_r+0x1e>
 8008a08:	6023      	str	r3, [r4, #0]
 8008a0a:	bd38      	pop	{r3, r4, r5, pc}
 8008a0c:	2000072c 	.word	0x2000072c

08008a10 <_write_r>:
 8008a10:	b538      	push	{r3, r4, r5, lr}
 8008a12:	4d07      	ldr	r5, [pc, #28]	; (8008a30 <_write_r+0x20>)
 8008a14:	4604      	mov	r4, r0
 8008a16:	4608      	mov	r0, r1
 8008a18:	4611      	mov	r1, r2
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	602a      	str	r2, [r5, #0]
 8008a1e:	461a      	mov	r2, r3
 8008a20:	f7f9 fcac 	bl	800237c <_write>
 8008a24:	1c43      	adds	r3, r0, #1
 8008a26:	d102      	bne.n	8008a2e <_write_r+0x1e>
 8008a28:	682b      	ldr	r3, [r5, #0]
 8008a2a:	b103      	cbz	r3, 8008a2e <_write_r+0x1e>
 8008a2c:	6023      	str	r3, [r4, #0]
 8008a2e:	bd38      	pop	{r3, r4, r5, pc}
 8008a30:	2000072c 	.word	0x2000072c

08008a34 <__errno>:
 8008a34:	4b01      	ldr	r3, [pc, #4]	; (8008a3c <__errno+0x8>)
 8008a36:	6818      	ldr	r0, [r3, #0]
 8008a38:	4770      	bx	lr
 8008a3a:	bf00      	nop
 8008a3c:	200000a0 	.word	0x200000a0

08008a40 <__libc_init_array>:
 8008a40:	b570      	push	{r4, r5, r6, lr}
 8008a42:	4d0d      	ldr	r5, [pc, #52]	; (8008a78 <__libc_init_array+0x38>)
 8008a44:	4c0d      	ldr	r4, [pc, #52]	; (8008a7c <__libc_init_array+0x3c>)
 8008a46:	1b64      	subs	r4, r4, r5
 8008a48:	10a4      	asrs	r4, r4, #2
 8008a4a:	2600      	movs	r6, #0
 8008a4c:	42a6      	cmp	r6, r4
 8008a4e:	d109      	bne.n	8008a64 <__libc_init_array+0x24>
 8008a50:	4d0b      	ldr	r5, [pc, #44]	; (8008a80 <__libc_init_array+0x40>)
 8008a52:	4c0c      	ldr	r4, [pc, #48]	; (8008a84 <__libc_init_array+0x44>)
 8008a54:	f001 fef6 	bl	800a844 <_init>
 8008a58:	1b64      	subs	r4, r4, r5
 8008a5a:	10a4      	asrs	r4, r4, #2
 8008a5c:	2600      	movs	r6, #0
 8008a5e:	42a6      	cmp	r6, r4
 8008a60:	d105      	bne.n	8008a6e <__libc_init_array+0x2e>
 8008a62:	bd70      	pop	{r4, r5, r6, pc}
 8008a64:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a68:	4798      	blx	r3
 8008a6a:	3601      	adds	r6, #1
 8008a6c:	e7ee      	b.n	8008a4c <__libc_init_array+0xc>
 8008a6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a72:	4798      	blx	r3
 8008a74:	3601      	adds	r6, #1
 8008a76:	e7f2      	b.n	8008a5e <__libc_init_array+0x1e>
 8008a78:	0800b270 	.word	0x0800b270
 8008a7c:	0800b270 	.word	0x0800b270
 8008a80:	0800b270 	.word	0x0800b270
 8008a84:	0800b274 	.word	0x0800b274

08008a88 <__retarget_lock_acquire_recursive>:
 8008a88:	4770      	bx	lr

08008a8a <__retarget_lock_release_recursive>:
 8008a8a:	4770      	bx	lr

08008a8c <__assert_func>:
 8008a8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a8e:	4614      	mov	r4, r2
 8008a90:	461a      	mov	r2, r3
 8008a92:	4b09      	ldr	r3, [pc, #36]	; (8008ab8 <__assert_func+0x2c>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4605      	mov	r5, r0
 8008a98:	68d8      	ldr	r0, [r3, #12]
 8008a9a:	b14c      	cbz	r4, 8008ab0 <__assert_func+0x24>
 8008a9c:	4b07      	ldr	r3, [pc, #28]	; (8008abc <__assert_func+0x30>)
 8008a9e:	9100      	str	r1, [sp, #0]
 8008aa0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008aa4:	4906      	ldr	r1, [pc, #24]	; (8008ac0 <__assert_func+0x34>)
 8008aa6:	462b      	mov	r3, r5
 8008aa8:	f000 fc9e 	bl	80093e8 <fiprintf>
 8008aac:	f000 fce6 	bl	800947c <abort>
 8008ab0:	4b04      	ldr	r3, [pc, #16]	; (8008ac4 <__assert_func+0x38>)
 8008ab2:	461c      	mov	r4, r3
 8008ab4:	e7f3      	b.n	8008a9e <__assert_func+0x12>
 8008ab6:	bf00      	nop
 8008ab8:	200000a0 	.word	0x200000a0
 8008abc:	0800b1c6 	.word	0x0800b1c6
 8008ac0:	0800b1d3 	.word	0x0800b1d3
 8008ac4:	0800b201 	.word	0x0800b201

08008ac8 <_free_r>:
 8008ac8:	b538      	push	{r3, r4, r5, lr}
 8008aca:	4605      	mov	r5, r0
 8008acc:	2900      	cmp	r1, #0
 8008ace:	d041      	beq.n	8008b54 <_free_r+0x8c>
 8008ad0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ad4:	1f0c      	subs	r4, r1, #4
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	bfb8      	it	lt
 8008ada:	18e4      	addlt	r4, r4, r3
 8008adc:	f000 f8e6 	bl	8008cac <__malloc_lock>
 8008ae0:	4a1d      	ldr	r2, [pc, #116]	; (8008b58 <_free_r+0x90>)
 8008ae2:	6813      	ldr	r3, [r2, #0]
 8008ae4:	b933      	cbnz	r3, 8008af4 <_free_r+0x2c>
 8008ae6:	6063      	str	r3, [r4, #4]
 8008ae8:	6014      	str	r4, [r2, #0]
 8008aea:	4628      	mov	r0, r5
 8008aec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008af0:	f000 b8e2 	b.w	8008cb8 <__malloc_unlock>
 8008af4:	42a3      	cmp	r3, r4
 8008af6:	d908      	bls.n	8008b0a <_free_r+0x42>
 8008af8:	6820      	ldr	r0, [r4, #0]
 8008afa:	1821      	adds	r1, r4, r0
 8008afc:	428b      	cmp	r3, r1
 8008afe:	bf01      	itttt	eq
 8008b00:	6819      	ldreq	r1, [r3, #0]
 8008b02:	685b      	ldreq	r3, [r3, #4]
 8008b04:	1809      	addeq	r1, r1, r0
 8008b06:	6021      	streq	r1, [r4, #0]
 8008b08:	e7ed      	b.n	8008ae6 <_free_r+0x1e>
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	b10b      	cbz	r3, 8008b14 <_free_r+0x4c>
 8008b10:	42a3      	cmp	r3, r4
 8008b12:	d9fa      	bls.n	8008b0a <_free_r+0x42>
 8008b14:	6811      	ldr	r1, [r2, #0]
 8008b16:	1850      	adds	r0, r2, r1
 8008b18:	42a0      	cmp	r0, r4
 8008b1a:	d10b      	bne.n	8008b34 <_free_r+0x6c>
 8008b1c:	6820      	ldr	r0, [r4, #0]
 8008b1e:	4401      	add	r1, r0
 8008b20:	1850      	adds	r0, r2, r1
 8008b22:	4283      	cmp	r3, r0
 8008b24:	6011      	str	r1, [r2, #0]
 8008b26:	d1e0      	bne.n	8008aea <_free_r+0x22>
 8008b28:	6818      	ldr	r0, [r3, #0]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	6053      	str	r3, [r2, #4]
 8008b2e:	4408      	add	r0, r1
 8008b30:	6010      	str	r0, [r2, #0]
 8008b32:	e7da      	b.n	8008aea <_free_r+0x22>
 8008b34:	d902      	bls.n	8008b3c <_free_r+0x74>
 8008b36:	230c      	movs	r3, #12
 8008b38:	602b      	str	r3, [r5, #0]
 8008b3a:	e7d6      	b.n	8008aea <_free_r+0x22>
 8008b3c:	6820      	ldr	r0, [r4, #0]
 8008b3e:	1821      	adds	r1, r4, r0
 8008b40:	428b      	cmp	r3, r1
 8008b42:	bf04      	itt	eq
 8008b44:	6819      	ldreq	r1, [r3, #0]
 8008b46:	685b      	ldreq	r3, [r3, #4]
 8008b48:	6063      	str	r3, [r4, #4]
 8008b4a:	bf04      	itt	eq
 8008b4c:	1809      	addeq	r1, r1, r0
 8008b4e:	6021      	streq	r1, [r4, #0]
 8008b50:	6054      	str	r4, [r2, #4]
 8008b52:	e7ca      	b.n	8008aea <_free_r+0x22>
 8008b54:	bd38      	pop	{r3, r4, r5, pc}
 8008b56:	bf00      	nop
 8008b58:	20000734 	.word	0x20000734

08008b5c <malloc>:
 8008b5c:	4b02      	ldr	r3, [pc, #8]	; (8008b68 <malloc+0xc>)
 8008b5e:	4601      	mov	r1, r0
 8008b60:	6818      	ldr	r0, [r3, #0]
 8008b62:	f000 b823 	b.w	8008bac <_malloc_r>
 8008b66:	bf00      	nop
 8008b68:	200000a0 	.word	0x200000a0

08008b6c <sbrk_aligned>:
 8008b6c:	b570      	push	{r4, r5, r6, lr}
 8008b6e:	4e0e      	ldr	r6, [pc, #56]	; (8008ba8 <sbrk_aligned+0x3c>)
 8008b70:	460c      	mov	r4, r1
 8008b72:	6831      	ldr	r1, [r6, #0]
 8008b74:	4605      	mov	r5, r0
 8008b76:	b911      	cbnz	r1, 8008b7e <sbrk_aligned+0x12>
 8008b78:	f000 fc62 	bl	8009440 <_sbrk_r>
 8008b7c:	6030      	str	r0, [r6, #0]
 8008b7e:	4621      	mov	r1, r4
 8008b80:	4628      	mov	r0, r5
 8008b82:	f000 fc5d 	bl	8009440 <_sbrk_r>
 8008b86:	1c43      	adds	r3, r0, #1
 8008b88:	d00a      	beq.n	8008ba0 <sbrk_aligned+0x34>
 8008b8a:	1cc4      	adds	r4, r0, #3
 8008b8c:	f024 0403 	bic.w	r4, r4, #3
 8008b90:	42a0      	cmp	r0, r4
 8008b92:	d007      	beq.n	8008ba4 <sbrk_aligned+0x38>
 8008b94:	1a21      	subs	r1, r4, r0
 8008b96:	4628      	mov	r0, r5
 8008b98:	f000 fc52 	bl	8009440 <_sbrk_r>
 8008b9c:	3001      	adds	r0, #1
 8008b9e:	d101      	bne.n	8008ba4 <sbrk_aligned+0x38>
 8008ba0:	f04f 34ff 	mov.w	r4, #4294967295
 8008ba4:	4620      	mov	r0, r4
 8008ba6:	bd70      	pop	{r4, r5, r6, pc}
 8008ba8:	20000738 	.word	0x20000738

08008bac <_malloc_r>:
 8008bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bb0:	1ccd      	adds	r5, r1, #3
 8008bb2:	f025 0503 	bic.w	r5, r5, #3
 8008bb6:	3508      	adds	r5, #8
 8008bb8:	2d0c      	cmp	r5, #12
 8008bba:	bf38      	it	cc
 8008bbc:	250c      	movcc	r5, #12
 8008bbe:	2d00      	cmp	r5, #0
 8008bc0:	4607      	mov	r7, r0
 8008bc2:	db01      	blt.n	8008bc8 <_malloc_r+0x1c>
 8008bc4:	42a9      	cmp	r1, r5
 8008bc6:	d905      	bls.n	8008bd4 <_malloc_r+0x28>
 8008bc8:	230c      	movs	r3, #12
 8008bca:	603b      	str	r3, [r7, #0]
 8008bcc:	2600      	movs	r6, #0
 8008bce:	4630      	mov	r0, r6
 8008bd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bd4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008ca8 <_malloc_r+0xfc>
 8008bd8:	f000 f868 	bl	8008cac <__malloc_lock>
 8008bdc:	f8d8 3000 	ldr.w	r3, [r8]
 8008be0:	461c      	mov	r4, r3
 8008be2:	bb5c      	cbnz	r4, 8008c3c <_malloc_r+0x90>
 8008be4:	4629      	mov	r1, r5
 8008be6:	4638      	mov	r0, r7
 8008be8:	f7ff ffc0 	bl	8008b6c <sbrk_aligned>
 8008bec:	1c43      	adds	r3, r0, #1
 8008bee:	4604      	mov	r4, r0
 8008bf0:	d155      	bne.n	8008c9e <_malloc_r+0xf2>
 8008bf2:	f8d8 4000 	ldr.w	r4, [r8]
 8008bf6:	4626      	mov	r6, r4
 8008bf8:	2e00      	cmp	r6, #0
 8008bfa:	d145      	bne.n	8008c88 <_malloc_r+0xdc>
 8008bfc:	2c00      	cmp	r4, #0
 8008bfe:	d048      	beq.n	8008c92 <_malloc_r+0xe6>
 8008c00:	6823      	ldr	r3, [r4, #0]
 8008c02:	4631      	mov	r1, r6
 8008c04:	4638      	mov	r0, r7
 8008c06:	eb04 0903 	add.w	r9, r4, r3
 8008c0a:	f000 fc19 	bl	8009440 <_sbrk_r>
 8008c0e:	4581      	cmp	r9, r0
 8008c10:	d13f      	bne.n	8008c92 <_malloc_r+0xe6>
 8008c12:	6821      	ldr	r1, [r4, #0]
 8008c14:	1a6d      	subs	r5, r5, r1
 8008c16:	4629      	mov	r1, r5
 8008c18:	4638      	mov	r0, r7
 8008c1a:	f7ff ffa7 	bl	8008b6c <sbrk_aligned>
 8008c1e:	3001      	adds	r0, #1
 8008c20:	d037      	beq.n	8008c92 <_malloc_r+0xe6>
 8008c22:	6823      	ldr	r3, [r4, #0]
 8008c24:	442b      	add	r3, r5
 8008c26:	6023      	str	r3, [r4, #0]
 8008c28:	f8d8 3000 	ldr.w	r3, [r8]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d038      	beq.n	8008ca2 <_malloc_r+0xf6>
 8008c30:	685a      	ldr	r2, [r3, #4]
 8008c32:	42a2      	cmp	r2, r4
 8008c34:	d12b      	bne.n	8008c8e <_malloc_r+0xe2>
 8008c36:	2200      	movs	r2, #0
 8008c38:	605a      	str	r2, [r3, #4]
 8008c3a:	e00f      	b.n	8008c5c <_malloc_r+0xb0>
 8008c3c:	6822      	ldr	r2, [r4, #0]
 8008c3e:	1b52      	subs	r2, r2, r5
 8008c40:	d41f      	bmi.n	8008c82 <_malloc_r+0xd6>
 8008c42:	2a0b      	cmp	r2, #11
 8008c44:	d917      	bls.n	8008c76 <_malloc_r+0xca>
 8008c46:	1961      	adds	r1, r4, r5
 8008c48:	42a3      	cmp	r3, r4
 8008c4a:	6025      	str	r5, [r4, #0]
 8008c4c:	bf18      	it	ne
 8008c4e:	6059      	strne	r1, [r3, #4]
 8008c50:	6863      	ldr	r3, [r4, #4]
 8008c52:	bf08      	it	eq
 8008c54:	f8c8 1000 	streq.w	r1, [r8]
 8008c58:	5162      	str	r2, [r4, r5]
 8008c5a:	604b      	str	r3, [r1, #4]
 8008c5c:	4638      	mov	r0, r7
 8008c5e:	f104 060b 	add.w	r6, r4, #11
 8008c62:	f000 f829 	bl	8008cb8 <__malloc_unlock>
 8008c66:	f026 0607 	bic.w	r6, r6, #7
 8008c6a:	1d23      	adds	r3, r4, #4
 8008c6c:	1af2      	subs	r2, r6, r3
 8008c6e:	d0ae      	beq.n	8008bce <_malloc_r+0x22>
 8008c70:	1b9b      	subs	r3, r3, r6
 8008c72:	50a3      	str	r3, [r4, r2]
 8008c74:	e7ab      	b.n	8008bce <_malloc_r+0x22>
 8008c76:	42a3      	cmp	r3, r4
 8008c78:	6862      	ldr	r2, [r4, #4]
 8008c7a:	d1dd      	bne.n	8008c38 <_malloc_r+0x8c>
 8008c7c:	f8c8 2000 	str.w	r2, [r8]
 8008c80:	e7ec      	b.n	8008c5c <_malloc_r+0xb0>
 8008c82:	4623      	mov	r3, r4
 8008c84:	6864      	ldr	r4, [r4, #4]
 8008c86:	e7ac      	b.n	8008be2 <_malloc_r+0x36>
 8008c88:	4634      	mov	r4, r6
 8008c8a:	6876      	ldr	r6, [r6, #4]
 8008c8c:	e7b4      	b.n	8008bf8 <_malloc_r+0x4c>
 8008c8e:	4613      	mov	r3, r2
 8008c90:	e7cc      	b.n	8008c2c <_malloc_r+0x80>
 8008c92:	230c      	movs	r3, #12
 8008c94:	603b      	str	r3, [r7, #0]
 8008c96:	4638      	mov	r0, r7
 8008c98:	f000 f80e 	bl	8008cb8 <__malloc_unlock>
 8008c9c:	e797      	b.n	8008bce <_malloc_r+0x22>
 8008c9e:	6025      	str	r5, [r4, #0]
 8008ca0:	e7dc      	b.n	8008c5c <_malloc_r+0xb0>
 8008ca2:	605b      	str	r3, [r3, #4]
 8008ca4:	deff      	udf	#255	; 0xff
 8008ca6:	bf00      	nop
 8008ca8:	20000734 	.word	0x20000734

08008cac <__malloc_lock>:
 8008cac:	4801      	ldr	r0, [pc, #4]	; (8008cb4 <__malloc_lock+0x8>)
 8008cae:	f7ff beeb 	b.w	8008a88 <__retarget_lock_acquire_recursive>
 8008cb2:	bf00      	nop
 8008cb4:	20000730 	.word	0x20000730

08008cb8 <__malloc_unlock>:
 8008cb8:	4801      	ldr	r0, [pc, #4]	; (8008cc0 <__malloc_unlock+0x8>)
 8008cba:	f7ff bee6 	b.w	8008a8a <__retarget_lock_release_recursive>
 8008cbe:	bf00      	nop
 8008cc0:	20000730 	.word	0x20000730

08008cc4 <__ssputs_r>:
 8008cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cc8:	688e      	ldr	r6, [r1, #8]
 8008cca:	461f      	mov	r7, r3
 8008ccc:	42be      	cmp	r6, r7
 8008cce:	680b      	ldr	r3, [r1, #0]
 8008cd0:	4682      	mov	sl, r0
 8008cd2:	460c      	mov	r4, r1
 8008cd4:	4690      	mov	r8, r2
 8008cd6:	d82c      	bhi.n	8008d32 <__ssputs_r+0x6e>
 8008cd8:	898a      	ldrh	r2, [r1, #12]
 8008cda:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008cde:	d026      	beq.n	8008d2e <__ssputs_r+0x6a>
 8008ce0:	6965      	ldr	r5, [r4, #20]
 8008ce2:	6909      	ldr	r1, [r1, #16]
 8008ce4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ce8:	eba3 0901 	sub.w	r9, r3, r1
 8008cec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008cf0:	1c7b      	adds	r3, r7, #1
 8008cf2:	444b      	add	r3, r9
 8008cf4:	106d      	asrs	r5, r5, #1
 8008cf6:	429d      	cmp	r5, r3
 8008cf8:	bf38      	it	cc
 8008cfa:	461d      	movcc	r5, r3
 8008cfc:	0553      	lsls	r3, r2, #21
 8008cfe:	d527      	bpl.n	8008d50 <__ssputs_r+0x8c>
 8008d00:	4629      	mov	r1, r5
 8008d02:	f7ff ff53 	bl	8008bac <_malloc_r>
 8008d06:	4606      	mov	r6, r0
 8008d08:	b360      	cbz	r0, 8008d64 <__ssputs_r+0xa0>
 8008d0a:	6921      	ldr	r1, [r4, #16]
 8008d0c:	464a      	mov	r2, r9
 8008d0e:	f000 fba7 	bl	8009460 <memcpy>
 8008d12:	89a3      	ldrh	r3, [r4, #12]
 8008d14:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d1c:	81a3      	strh	r3, [r4, #12]
 8008d1e:	6126      	str	r6, [r4, #16]
 8008d20:	6165      	str	r5, [r4, #20]
 8008d22:	444e      	add	r6, r9
 8008d24:	eba5 0509 	sub.w	r5, r5, r9
 8008d28:	6026      	str	r6, [r4, #0]
 8008d2a:	60a5      	str	r5, [r4, #8]
 8008d2c:	463e      	mov	r6, r7
 8008d2e:	42be      	cmp	r6, r7
 8008d30:	d900      	bls.n	8008d34 <__ssputs_r+0x70>
 8008d32:	463e      	mov	r6, r7
 8008d34:	6820      	ldr	r0, [r4, #0]
 8008d36:	4632      	mov	r2, r6
 8008d38:	4641      	mov	r1, r8
 8008d3a:	f000 fb67 	bl	800940c <memmove>
 8008d3e:	68a3      	ldr	r3, [r4, #8]
 8008d40:	1b9b      	subs	r3, r3, r6
 8008d42:	60a3      	str	r3, [r4, #8]
 8008d44:	6823      	ldr	r3, [r4, #0]
 8008d46:	4433      	add	r3, r6
 8008d48:	6023      	str	r3, [r4, #0]
 8008d4a:	2000      	movs	r0, #0
 8008d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d50:	462a      	mov	r2, r5
 8008d52:	f000 fb9a 	bl	800948a <_realloc_r>
 8008d56:	4606      	mov	r6, r0
 8008d58:	2800      	cmp	r0, #0
 8008d5a:	d1e0      	bne.n	8008d1e <__ssputs_r+0x5a>
 8008d5c:	6921      	ldr	r1, [r4, #16]
 8008d5e:	4650      	mov	r0, sl
 8008d60:	f7ff feb2 	bl	8008ac8 <_free_r>
 8008d64:	230c      	movs	r3, #12
 8008d66:	f8ca 3000 	str.w	r3, [sl]
 8008d6a:	89a3      	ldrh	r3, [r4, #12]
 8008d6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d70:	81a3      	strh	r3, [r4, #12]
 8008d72:	f04f 30ff 	mov.w	r0, #4294967295
 8008d76:	e7e9      	b.n	8008d4c <__ssputs_r+0x88>

08008d78 <_svfiprintf_r>:
 8008d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d7c:	4698      	mov	r8, r3
 8008d7e:	898b      	ldrh	r3, [r1, #12]
 8008d80:	061b      	lsls	r3, r3, #24
 8008d82:	b09d      	sub	sp, #116	; 0x74
 8008d84:	4607      	mov	r7, r0
 8008d86:	460d      	mov	r5, r1
 8008d88:	4614      	mov	r4, r2
 8008d8a:	d50e      	bpl.n	8008daa <_svfiprintf_r+0x32>
 8008d8c:	690b      	ldr	r3, [r1, #16]
 8008d8e:	b963      	cbnz	r3, 8008daa <_svfiprintf_r+0x32>
 8008d90:	2140      	movs	r1, #64	; 0x40
 8008d92:	f7ff ff0b 	bl	8008bac <_malloc_r>
 8008d96:	6028      	str	r0, [r5, #0]
 8008d98:	6128      	str	r0, [r5, #16]
 8008d9a:	b920      	cbnz	r0, 8008da6 <_svfiprintf_r+0x2e>
 8008d9c:	230c      	movs	r3, #12
 8008d9e:	603b      	str	r3, [r7, #0]
 8008da0:	f04f 30ff 	mov.w	r0, #4294967295
 8008da4:	e0d0      	b.n	8008f48 <_svfiprintf_r+0x1d0>
 8008da6:	2340      	movs	r3, #64	; 0x40
 8008da8:	616b      	str	r3, [r5, #20]
 8008daa:	2300      	movs	r3, #0
 8008dac:	9309      	str	r3, [sp, #36]	; 0x24
 8008dae:	2320      	movs	r3, #32
 8008db0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008db4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008db8:	2330      	movs	r3, #48	; 0x30
 8008dba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008f60 <_svfiprintf_r+0x1e8>
 8008dbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008dc2:	f04f 0901 	mov.w	r9, #1
 8008dc6:	4623      	mov	r3, r4
 8008dc8:	469a      	mov	sl, r3
 8008dca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dce:	b10a      	cbz	r2, 8008dd4 <_svfiprintf_r+0x5c>
 8008dd0:	2a25      	cmp	r2, #37	; 0x25
 8008dd2:	d1f9      	bne.n	8008dc8 <_svfiprintf_r+0x50>
 8008dd4:	ebba 0b04 	subs.w	fp, sl, r4
 8008dd8:	d00b      	beq.n	8008df2 <_svfiprintf_r+0x7a>
 8008dda:	465b      	mov	r3, fp
 8008ddc:	4622      	mov	r2, r4
 8008dde:	4629      	mov	r1, r5
 8008de0:	4638      	mov	r0, r7
 8008de2:	f7ff ff6f 	bl	8008cc4 <__ssputs_r>
 8008de6:	3001      	adds	r0, #1
 8008de8:	f000 80a9 	beq.w	8008f3e <_svfiprintf_r+0x1c6>
 8008dec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dee:	445a      	add	r2, fp
 8008df0:	9209      	str	r2, [sp, #36]	; 0x24
 8008df2:	f89a 3000 	ldrb.w	r3, [sl]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	f000 80a1 	beq.w	8008f3e <_svfiprintf_r+0x1c6>
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8008e02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e06:	f10a 0a01 	add.w	sl, sl, #1
 8008e0a:	9304      	str	r3, [sp, #16]
 8008e0c:	9307      	str	r3, [sp, #28]
 8008e0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e12:	931a      	str	r3, [sp, #104]	; 0x68
 8008e14:	4654      	mov	r4, sl
 8008e16:	2205      	movs	r2, #5
 8008e18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e1c:	4850      	ldr	r0, [pc, #320]	; (8008f60 <_svfiprintf_r+0x1e8>)
 8008e1e:	f7f7 f9b7 	bl	8000190 <memchr>
 8008e22:	9a04      	ldr	r2, [sp, #16]
 8008e24:	b9d8      	cbnz	r0, 8008e5e <_svfiprintf_r+0xe6>
 8008e26:	06d0      	lsls	r0, r2, #27
 8008e28:	bf44      	itt	mi
 8008e2a:	2320      	movmi	r3, #32
 8008e2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e30:	0711      	lsls	r1, r2, #28
 8008e32:	bf44      	itt	mi
 8008e34:	232b      	movmi	r3, #43	; 0x2b
 8008e36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e3a:	f89a 3000 	ldrb.w	r3, [sl]
 8008e3e:	2b2a      	cmp	r3, #42	; 0x2a
 8008e40:	d015      	beq.n	8008e6e <_svfiprintf_r+0xf6>
 8008e42:	9a07      	ldr	r2, [sp, #28]
 8008e44:	4654      	mov	r4, sl
 8008e46:	2000      	movs	r0, #0
 8008e48:	f04f 0c0a 	mov.w	ip, #10
 8008e4c:	4621      	mov	r1, r4
 8008e4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e52:	3b30      	subs	r3, #48	; 0x30
 8008e54:	2b09      	cmp	r3, #9
 8008e56:	d94d      	bls.n	8008ef4 <_svfiprintf_r+0x17c>
 8008e58:	b1b0      	cbz	r0, 8008e88 <_svfiprintf_r+0x110>
 8008e5a:	9207      	str	r2, [sp, #28]
 8008e5c:	e014      	b.n	8008e88 <_svfiprintf_r+0x110>
 8008e5e:	eba0 0308 	sub.w	r3, r0, r8
 8008e62:	fa09 f303 	lsl.w	r3, r9, r3
 8008e66:	4313      	orrs	r3, r2
 8008e68:	9304      	str	r3, [sp, #16]
 8008e6a:	46a2      	mov	sl, r4
 8008e6c:	e7d2      	b.n	8008e14 <_svfiprintf_r+0x9c>
 8008e6e:	9b03      	ldr	r3, [sp, #12]
 8008e70:	1d19      	adds	r1, r3, #4
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	9103      	str	r1, [sp, #12]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	bfbb      	ittet	lt
 8008e7a:	425b      	neglt	r3, r3
 8008e7c:	f042 0202 	orrlt.w	r2, r2, #2
 8008e80:	9307      	strge	r3, [sp, #28]
 8008e82:	9307      	strlt	r3, [sp, #28]
 8008e84:	bfb8      	it	lt
 8008e86:	9204      	strlt	r2, [sp, #16]
 8008e88:	7823      	ldrb	r3, [r4, #0]
 8008e8a:	2b2e      	cmp	r3, #46	; 0x2e
 8008e8c:	d10c      	bne.n	8008ea8 <_svfiprintf_r+0x130>
 8008e8e:	7863      	ldrb	r3, [r4, #1]
 8008e90:	2b2a      	cmp	r3, #42	; 0x2a
 8008e92:	d134      	bne.n	8008efe <_svfiprintf_r+0x186>
 8008e94:	9b03      	ldr	r3, [sp, #12]
 8008e96:	1d1a      	adds	r2, r3, #4
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	9203      	str	r2, [sp, #12]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	bfb8      	it	lt
 8008ea0:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ea4:	3402      	adds	r4, #2
 8008ea6:	9305      	str	r3, [sp, #20]
 8008ea8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8008f64 <_svfiprintf_r+0x1ec>
 8008eac:	7821      	ldrb	r1, [r4, #0]
 8008eae:	2203      	movs	r2, #3
 8008eb0:	4650      	mov	r0, sl
 8008eb2:	f7f7 f96d 	bl	8000190 <memchr>
 8008eb6:	b138      	cbz	r0, 8008ec8 <_svfiprintf_r+0x150>
 8008eb8:	9b04      	ldr	r3, [sp, #16]
 8008eba:	eba0 000a 	sub.w	r0, r0, sl
 8008ebe:	2240      	movs	r2, #64	; 0x40
 8008ec0:	4082      	lsls	r2, r0
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	3401      	adds	r4, #1
 8008ec6:	9304      	str	r3, [sp, #16]
 8008ec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ecc:	4826      	ldr	r0, [pc, #152]	; (8008f68 <_svfiprintf_r+0x1f0>)
 8008ece:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ed2:	2206      	movs	r2, #6
 8008ed4:	f7f7 f95c 	bl	8000190 <memchr>
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	d038      	beq.n	8008f4e <_svfiprintf_r+0x1d6>
 8008edc:	4b23      	ldr	r3, [pc, #140]	; (8008f6c <_svfiprintf_r+0x1f4>)
 8008ede:	bb1b      	cbnz	r3, 8008f28 <_svfiprintf_r+0x1b0>
 8008ee0:	9b03      	ldr	r3, [sp, #12]
 8008ee2:	3307      	adds	r3, #7
 8008ee4:	f023 0307 	bic.w	r3, r3, #7
 8008ee8:	3308      	adds	r3, #8
 8008eea:	9303      	str	r3, [sp, #12]
 8008eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eee:	4433      	add	r3, r6
 8008ef0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ef2:	e768      	b.n	8008dc6 <_svfiprintf_r+0x4e>
 8008ef4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ef8:	460c      	mov	r4, r1
 8008efa:	2001      	movs	r0, #1
 8008efc:	e7a6      	b.n	8008e4c <_svfiprintf_r+0xd4>
 8008efe:	2300      	movs	r3, #0
 8008f00:	3401      	adds	r4, #1
 8008f02:	9305      	str	r3, [sp, #20]
 8008f04:	4619      	mov	r1, r3
 8008f06:	f04f 0c0a 	mov.w	ip, #10
 8008f0a:	4620      	mov	r0, r4
 8008f0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f10:	3a30      	subs	r2, #48	; 0x30
 8008f12:	2a09      	cmp	r2, #9
 8008f14:	d903      	bls.n	8008f1e <_svfiprintf_r+0x1a6>
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d0c6      	beq.n	8008ea8 <_svfiprintf_r+0x130>
 8008f1a:	9105      	str	r1, [sp, #20]
 8008f1c:	e7c4      	b.n	8008ea8 <_svfiprintf_r+0x130>
 8008f1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f22:	4604      	mov	r4, r0
 8008f24:	2301      	movs	r3, #1
 8008f26:	e7f0      	b.n	8008f0a <_svfiprintf_r+0x192>
 8008f28:	ab03      	add	r3, sp, #12
 8008f2a:	9300      	str	r3, [sp, #0]
 8008f2c:	462a      	mov	r2, r5
 8008f2e:	4b10      	ldr	r3, [pc, #64]	; (8008f70 <_svfiprintf_r+0x1f8>)
 8008f30:	a904      	add	r1, sp, #16
 8008f32:	4638      	mov	r0, r7
 8008f34:	f3af 8000 	nop.w
 8008f38:	1c42      	adds	r2, r0, #1
 8008f3a:	4606      	mov	r6, r0
 8008f3c:	d1d6      	bne.n	8008eec <_svfiprintf_r+0x174>
 8008f3e:	89ab      	ldrh	r3, [r5, #12]
 8008f40:	065b      	lsls	r3, r3, #25
 8008f42:	f53f af2d 	bmi.w	8008da0 <_svfiprintf_r+0x28>
 8008f46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f48:	b01d      	add	sp, #116	; 0x74
 8008f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f4e:	ab03      	add	r3, sp, #12
 8008f50:	9300      	str	r3, [sp, #0]
 8008f52:	462a      	mov	r2, r5
 8008f54:	4b06      	ldr	r3, [pc, #24]	; (8008f70 <_svfiprintf_r+0x1f8>)
 8008f56:	a904      	add	r1, sp, #16
 8008f58:	4638      	mov	r0, r7
 8008f5a:	f000 f879 	bl	8009050 <_printf_i>
 8008f5e:	e7eb      	b.n	8008f38 <_svfiprintf_r+0x1c0>
 8008f60:	0800b202 	.word	0x0800b202
 8008f64:	0800b208 	.word	0x0800b208
 8008f68:	0800b20c 	.word	0x0800b20c
 8008f6c:	00000000 	.word	0x00000000
 8008f70:	08008cc5 	.word	0x08008cc5

08008f74 <_printf_common>:
 8008f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f78:	4616      	mov	r6, r2
 8008f7a:	4699      	mov	r9, r3
 8008f7c:	688a      	ldr	r2, [r1, #8]
 8008f7e:	690b      	ldr	r3, [r1, #16]
 8008f80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f84:	4293      	cmp	r3, r2
 8008f86:	bfb8      	it	lt
 8008f88:	4613      	movlt	r3, r2
 8008f8a:	6033      	str	r3, [r6, #0]
 8008f8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f90:	4607      	mov	r7, r0
 8008f92:	460c      	mov	r4, r1
 8008f94:	b10a      	cbz	r2, 8008f9a <_printf_common+0x26>
 8008f96:	3301      	adds	r3, #1
 8008f98:	6033      	str	r3, [r6, #0]
 8008f9a:	6823      	ldr	r3, [r4, #0]
 8008f9c:	0699      	lsls	r1, r3, #26
 8008f9e:	bf42      	ittt	mi
 8008fa0:	6833      	ldrmi	r3, [r6, #0]
 8008fa2:	3302      	addmi	r3, #2
 8008fa4:	6033      	strmi	r3, [r6, #0]
 8008fa6:	6825      	ldr	r5, [r4, #0]
 8008fa8:	f015 0506 	ands.w	r5, r5, #6
 8008fac:	d106      	bne.n	8008fbc <_printf_common+0x48>
 8008fae:	f104 0a19 	add.w	sl, r4, #25
 8008fb2:	68e3      	ldr	r3, [r4, #12]
 8008fb4:	6832      	ldr	r2, [r6, #0]
 8008fb6:	1a9b      	subs	r3, r3, r2
 8008fb8:	42ab      	cmp	r3, r5
 8008fba:	dc26      	bgt.n	800900a <_printf_common+0x96>
 8008fbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008fc0:	1e13      	subs	r3, r2, #0
 8008fc2:	6822      	ldr	r2, [r4, #0]
 8008fc4:	bf18      	it	ne
 8008fc6:	2301      	movne	r3, #1
 8008fc8:	0692      	lsls	r2, r2, #26
 8008fca:	d42b      	bmi.n	8009024 <_printf_common+0xb0>
 8008fcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008fd0:	4649      	mov	r1, r9
 8008fd2:	4638      	mov	r0, r7
 8008fd4:	47c0      	blx	r8
 8008fd6:	3001      	adds	r0, #1
 8008fd8:	d01e      	beq.n	8009018 <_printf_common+0xa4>
 8008fda:	6823      	ldr	r3, [r4, #0]
 8008fdc:	6922      	ldr	r2, [r4, #16]
 8008fde:	f003 0306 	and.w	r3, r3, #6
 8008fe2:	2b04      	cmp	r3, #4
 8008fe4:	bf02      	ittt	eq
 8008fe6:	68e5      	ldreq	r5, [r4, #12]
 8008fe8:	6833      	ldreq	r3, [r6, #0]
 8008fea:	1aed      	subeq	r5, r5, r3
 8008fec:	68a3      	ldr	r3, [r4, #8]
 8008fee:	bf0c      	ite	eq
 8008ff0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ff4:	2500      	movne	r5, #0
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	bfc4      	itt	gt
 8008ffa:	1a9b      	subgt	r3, r3, r2
 8008ffc:	18ed      	addgt	r5, r5, r3
 8008ffe:	2600      	movs	r6, #0
 8009000:	341a      	adds	r4, #26
 8009002:	42b5      	cmp	r5, r6
 8009004:	d11a      	bne.n	800903c <_printf_common+0xc8>
 8009006:	2000      	movs	r0, #0
 8009008:	e008      	b.n	800901c <_printf_common+0xa8>
 800900a:	2301      	movs	r3, #1
 800900c:	4652      	mov	r2, sl
 800900e:	4649      	mov	r1, r9
 8009010:	4638      	mov	r0, r7
 8009012:	47c0      	blx	r8
 8009014:	3001      	adds	r0, #1
 8009016:	d103      	bne.n	8009020 <_printf_common+0xac>
 8009018:	f04f 30ff 	mov.w	r0, #4294967295
 800901c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009020:	3501      	adds	r5, #1
 8009022:	e7c6      	b.n	8008fb2 <_printf_common+0x3e>
 8009024:	18e1      	adds	r1, r4, r3
 8009026:	1c5a      	adds	r2, r3, #1
 8009028:	2030      	movs	r0, #48	; 0x30
 800902a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800902e:	4422      	add	r2, r4
 8009030:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009034:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009038:	3302      	adds	r3, #2
 800903a:	e7c7      	b.n	8008fcc <_printf_common+0x58>
 800903c:	2301      	movs	r3, #1
 800903e:	4622      	mov	r2, r4
 8009040:	4649      	mov	r1, r9
 8009042:	4638      	mov	r0, r7
 8009044:	47c0      	blx	r8
 8009046:	3001      	adds	r0, #1
 8009048:	d0e6      	beq.n	8009018 <_printf_common+0xa4>
 800904a:	3601      	adds	r6, #1
 800904c:	e7d9      	b.n	8009002 <_printf_common+0x8e>
	...

08009050 <_printf_i>:
 8009050:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009054:	7e0f      	ldrb	r7, [r1, #24]
 8009056:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009058:	2f78      	cmp	r7, #120	; 0x78
 800905a:	4691      	mov	r9, r2
 800905c:	4680      	mov	r8, r0
 800905e:	460c      	mov	r4, r1
 8009060:	469a      	mov	sl, r3
 8009062:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009066:	d807      	bhi.n	8009078 <_printf_i+0x28>
 8009068:	2f62      	cmp	r7, #98	; 0x62
 800906a:	d80a      	bhi.n	8009082 <_printf_i+0x32>
 800906c:	2f00      	cmp	r7, #0
 800906e:	f000 80d4 	beq.w	800921a <_printf_i+0x1ca>
 8009072:	2f58      	cmp	r7, #88	; 0x58
 8009074:	f000 80c0 	beq.w	80091f8 <_printf_i+0x1a8>
 8009078:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800907c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009080:	e03a      	b.n	80090f8 <_printf_i+0xa8>
 8009082:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009086:	2b15      	cmp	r3, #21
 8009088:	d8f6      	bhi.n	8009078 <_printf_i+0x28>
 800908a:	a101      	add	r1, pc, #4	; (adr r1, 8009090 <_printf_i+0x40>)
 800908c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009090:	080090e9 	.word	0x080090e9
 8009094:	080090fd 	.word	0x080090fd
 8009098:	08009079 	.word	0x08009079
 800909c:	08009079 	.word	0x08009079
 80090a0:	08009079 	.word	0x08009079
 80090a4:	08009079 	.word	0x08009079
 80090a8:	080090fd 	.word	0x080090fd
 80090ac:	08009079 	.word	0x08009079
 80090b0:	08009079 	.word	0x08009079
 80090b4:	08009079 	.word	0x08009079
 80090b8:	08009079 	.word	0x08009079
 80090bc:	08009201 	.word	0x08009201
 80090c0:	08009129 	.word	0x08009129
 80090c4:	080091bb 	.word	0x080091bb
 80090c8:	08009079 	.word	0x08009079
 80090cc:	08009079 	.word	0x08009079
 80090d0:	08009223 	.word	0x08009223
 80090d4:	08009079 	.word	0x08009079
 80090d8:	08009129 	.word	0x08009129
 80090dc:	08009079 	.word	0x08009079
 80090e0:	08009079 	.word	0x08009079
 80090e4:	080091c3 	.word	0x080091c3
 80090e8:	682b      	ldr	r3, [r5, #0]
 80090ea:	1d1a      	adds	r2, r3, #4
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	602a      	str	r2, [r5, #0]
 80090f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090f8:	2301      	movs	r3, #1
 80090fa:	e09f      	b.n	800923c <_printf_i+0x1ec>
 80090fc:	6820      	ldr	r0, [r4, #0]
 80090fe:	682b      	ldr	r3, [r5, #0]
 8009100:	0607      	lsls	r7, r0, #24
 8009102:	f103 0104 	add.w	r1, r3, #4
 8009106:	6029      	str	r1, [r5, #0]
 8009108:	d501      	bpl.n	800910e <_printf_i+0xbe>
 800910a:	681e      	ldr	r6, [r3, #0]
 800910c:	e003      	b.n	8009116 <_printf_i+0xc6>
 800910e:	0646      	lsls	r6, r0, #25
 8009110:	d5fb      	bpl.n	800910a <_printf_i+0xba>
 8009112:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009116:	2e00      	cmp	r6, #0
 8009118:	da03      	bge.n	8009122 <_printf_i+0xd2>
 800911a:	232d      	movs	r3, #45	; 0x2d
 800911c:	4276      	negs	r6, r6
 800911e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009122:	485a      	ldr	r0, [pc, #360]	; (800928c <_printf_i+0x23c>)
 8009124:	230a      	movs	r3, #10
 8009126:	e012      	b.n	800914e <_printf_i+0xfe>
 8009128:	682b      	ldr	r3, [r5, #0]
 800912a:	6820      	ldr	r0, [r4, #0]
 800912c:	1d19      	adds	r1, r3, #4
 800912e:	6029      	str	r1, [r5, #0]
 8009130:	0605      	lsls	r5, r0, #24
 8009132:	d501      	bpl.n	8009138 <_printf_i+0xe8>
 8009134:	681e      	ldr	r6, [r3, #0]
 8009136:	e002      	b.n	800913e <_printf_i+0xee>
 8009138:	0641      	lsls	r1, r0, #25
 800913a:	d5fb      	bpl.n	8009134 <_printf_i+0xe4>
 800913c:	881e      	ldrh	r6, [r3, #0]
 800913e:	4853      	ldr	r0, [pc, #332]	; (800928c <_printf_i+0x23c>)
 8009140:	2f6f      	cmp	r7, #111	; 0x6f
 8009142:	bf0c      	ite	eq
 8009144:	2308      	moveq	r3, #8
 8009146:	230a      	movne	r3, #10
 8009148:	2100      	movs	r1, #0
 800914a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800914e:	6865      	ldr	r5, [r4, #4]
 8009150:	60a5      	str	r5, [r4, #8]
 8009152:	2d00      	cmp	r5, #0
 8009154:	bfa2      	ittt	ge
 8009156:	6821      	ldrge	r1, [r4, #0]
 8009158:	f021 0104 	bicge.w	r1, r1, #4
 800915c:	6021      	strge	r1, [r4, #0]
 800915e:	b90e      	cbnz	r6, 8009164 <_printf_i+0x114>
 8009160:	2d00      	cmp	r5, #0
 8009162:	d04b      	beq.n	80091fc <_printf_i+0x1ac>
 8009164:	4615      	mov	r5, r2
 8009166:	fbb6 f1f3 	udiv	r1, r6, r3
 800916a:	fb03 6711 	mls	r7, r3, r1, r6
 800916e:	5dc7      	ldrb	r7, [r0, r7]
 8009170:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009174:	4637      	mov	r7, r6
 8009176:	42bb      	cmp	r3, r7
 8009178:	460e      	mov	r6, r1
 800917a:	d9f4      	bls.n	8009166 <_printf_i+0x116>
 800917c:	2b08      	cmp	r3, #8
 800917e:	d10b      	bne.n	8009198 <_printf_i+0x148>
 8009180:	6823      	ldr	r3, [r4, #0]
 8009182:	07de      	lsls	r6, r3, #31
 8009184:	d508      	bpl.n	8009198 <_printf_i+0x148>
 8009186:	6923      	ldr	r3, [r4, #16]
 8009188:	6861      	ldr	r1, [r4, #4]
 800918a:	4299      	cmp	r1, r3
 800918c:	bfde      	ittt	le
 800918e:	2330      	movle	r3, #48	; 0x30
 8009190:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009194:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009198:	1b52      	subs	r2, r2, r5
 800919a:	6122      	str	r2, [r4, #16]
 800919c:	f8cd a000 	str.w	sl, [sp]
 80091a0:	464b      	mov	r3, r9
 80091a2:	aa03      	add	r2, sp, #12
 80091a4:	4621      	mov	r1, r4
 80091a6:	4640      	mov	r0, r8
 80091a8:	f7ff fee4 	bl	8008f74 <_printf_common>
 80091ac:	3001      	adds	r0, #1
 80091ae:	d14a      	bne.n	8009246 <_printf_i+0x1f6>
 80091b0:	f04f 30ff 	mov.w	r0, #4294967295
 80091b4:	b004      	add	sp, #16
 80091b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091ba:	6823      	ldr	r3, [r4, #0]
 80091bc:	f043 0320 	orr.w	r3, r3, #32
 80091c0:	6023      	str	r3, [r4, #0]
 80091c2:	4833      	ldr	r0, [pc, #204]	; (8009290 <_printf_i+0x240>)
 80091c4:	2778      	movs	r7, #120	; 0x78
 80091c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80091ca:	6823      	ldr	r3, [r4, #0]
 80091cc:	6829      	ldr	r1, [r5, #0]
 80091ce:	061f      	lsls	r7, r3, #24
 80091d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80091d4:	d402      	bmi.n	80091dc <_printf_i+0x18c>
 80091d6:	065f      	lsls	r7, r3, #25
 80091d8:	bf48      	it	mi
 80091da:	b2b6      	uxthmi	r6, r6
 80091dc:	07df      	lsls	r7, r3, #31
 80091de:	bf48      	it	mi
 80091e0:	f043 0320 	orrmi.w	r3, r3, #32
 80091e4:	6029      	str	r1, [r5, #0]
 80091e6:	bf48      	it	mi
 80091e8:	6023      	strmi	r3, [r4, #0]
 80091ea:	b91e      	cbnz	r6, 80091f4 <_printf_i+0x1a4>
 80091ec:	6823      	ldr	r3, [r4, #0]
 80091ee:	f023 0320 	bic.w	r3, r3, #32
 80091f2:	6023      	str	r3, [r4, #0]
 80091f4:	2310      	movs	r3, #16
 80091f6:	e7a7      	b.n	8009148 <_printf_i+0xf8>
 80091f8:	4824      	ldr	r0, [pc, #144]	; (800928c <_printf_i+0x23c>)
 80091fa:	e7e4      	b.n	80091c6 <_printf_i+0x176>
 80091fc:	4615      	mov	r5, r2
 80091fe:	e7bd      	b.n	800917c <_printf_i+0x12c>
 8009200:	682b      	ldr	r3, [r5, #0]
 8009202:	6826      	ldr	r6, [r4, #0]
 8009204:	6961      	ldr	r1, [r4, #20]
 8009206:	1d18      	adds	r0, r3, #4
 8009208:	6028      	str	r0, [r5, #0]
 800920a:	0635      	lsls	r5, r6, #24
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	d501      	bpl.n	8009214 <_printf_i+0x1c4>
 8009210:	6019      	str	r1, [r3, #0]
 8009212:	e002      	b.n	800921a <_printf_i+0x1ca>
 8009214:	0670      	lsls	r0, r6, #25
 8009216:	d5fb      	bpl.n	8009210 <_printf_i+0x1c0>
 8009218:	8019      	strh	r1, [r3, #0]
 800921a:	2300      	movs	r3, #0
 800921c:	6123      	str	r3, [r4, #16]
 800921e:	4615      	mov	r5, r2
 8009220:	e7bc      	b.n	800919c <_printf_i+0x14c>
 8009222:	682b      	ldr	r3, [r5, #0]
 8009224:	1d1a      	adds	r2, r3, #4
 8009226:	602a      	str	r2, [r5, #0]
 8009228:	681d      	ldr	r5, [r3, #0]
 800922a:	6862      	ldr	r2, [r4, #4]
 800922c:	2100      	movs	r1, #0
 800922e:	4628      	mov	r0, r5
 8009230:	f7f6 ffae 	bl	8000190 <memchr>
 8009234:	b108      	cbz	r0, 800923a <_printf_i+0x1ea>
 8009236:	1b40      	subs	r0, r0, r5
 8009238:	6060      	str	r0, [r4, #4]
 800923a:	6863      	ldr	r3, [r4, #4]
 800923c:	6123      	str	r3, [r4, #16]
 800923e:	2300      	movs	r3, #0
 8009240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009244:	e7aa      	b.n	800919c <_printf_i+0x14c>
 8009246:	6923      	ldr	r3, [r4, #16]
 8009248:	462a      	mov	r2, r5
 800924a:	4649      	mov	r1, r9
 800924c:	4640      	mov	r0, r8
 800924e:	47d0      	blx	sl
 8009250:	3001      	adds	r0, #1
 8009252:	d0ad      	beq.n	80091b0 <_printf_i+0x160>
 8009254:	6823      	ldr	r3, [r4, #0]
 8009256:	079b      	lsls	r3, r3, #30
 8009258:	d413      	bmi.n	8009282 <_printf_i+0x232>
 800925a:	68e0      	ldr	r0, [r4, #12]
 800925c:	9b03      	ldr	r3, [sp, #12]
 800925e:	4298      	cmp	r0, r3
 8009260:	bfb8      	it	lt
 8009262:	4618      	movlt	r0, r3
 8009264:	e7a6      	b.n	80091b4 <_printf_i+0x164>
 8009266:	2301      	movs	r3, #1
 8009268:	4632      	mov	r2, r6
 800926a:	4649      	mov	r1, r9
 800926c:	4640      	mov	r0, r8
 800926e:	47d0      	blx	sl
 8009270:	3001      	adds	r0, #1
 8009272:	d09d      	beq.n	80091b0 <_printf_i+0x160>
 8009274:	3501      	adds	r5, #1
 8009276:	68e3      	ldr	r3, [r4, #12]
 8009278:	9903      	ldr	r1, [sp, #12]
 800927a:	1a5b      	subs	r3, r3, r1
 800927c:	42ab      	cmp	r3, r5
 800927e:	dcf2      	bgt.n	8009266 <_printf_i+0x216>
 8009280:	e7eb      	b.n	800925a <_printf_i+0x20a>
 8009282:	2500      	movs	r5, #0
 8009284:	f104 0619 	add.w	r6, r4, #25
 8009288:	e7f5      	b.n	8009276 <_printf_i+0x226>
 800928a:	bf00      	nop
 800928c:	0800b213 	.word	0x0800b213
 8009290:	0800b224 	.word	0x0800b224

08009294 <__sflush_r>:
 8009294:	898a      	ldrh	r2, [r1, #12]
 8009296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009298:	4605      	mov	r5, r0
 800929a:	0710      	lsls	r0, r2, #28
 800929c:	460c      	mov	r4, r1
 800929e:	d457      	bmi.n	8009350 <__sflush_r+0xbc>
 80092a0:	684b      	ldr	r3, [r1, #4]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	dc04      	bgt.n	80092b0 <__sflush_r+0x1c>
 80092a6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	dc01      	bgt.n	80092b0 <__sflush_r+0x1c>
 80092ac:	2000      	movs	r0, #0
 80092ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092b2:	2e00      	cmp	r6, #0
 80092b4:	d0fa      	beq.n	80092ac <__sflush_r+0x18>
 80092b6:	2300      	movs	r3, #0
 80092b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80092bc:	682f      	ldr	r7, [r5, #0]
 80092be:	6a21      	ldr	r1, [r4, #32]
 80092c0:	602b      	str	r3, [r5, #0]
 80092c2:	d032      	beq.n	800932a <__sflush_r+0x96>
 80092c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80092c6:	89a3      	ldrh	r3, [r4, #12]
 80092c8:	075a      	lsls	r2, r3, #29
 80092ca:	d505      	bpl.n	80092d8 <__sflush_r+0x44>
 80092cc:	6863      	ldr	r3, [r4, #4]
 80092ce:	1ac0      	subs	r0, r0, r3
 80092d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092d2:	b10b      	cbz	r3, 80092d8 <__sflush_r+0x44>
 80092d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80092d6:	1ac0      	subs	r0, r0, r3
 80092d8:	2300      	movs	r3, #0
 80092da:	4602      	mov	r2, r0
 80092dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092de:	6a21      	ldr	r1, [r4, #32]
 80092e0:	4628      	mov	r0, r5
 80092e2:	47b0      	blx	r6
 80092e4:	1c43      	adds	r3, r0, #1
 80092e6:	89a3      	ldrh	r3, [r4, #12]
 80092e8:	d106      	bne.n	80092f8 <__sflush_r+0x64>
 80092ea:	6829      	ldr	r1, [r5, #0]
 80092ec:	291d      	cmp	r1, #29
 80092ee:	d82b      	bhi.n	8009348 <__sflush_r+0xb4>
 80092f0:	4a28      	ldr	r2, [pc, #160]	; (8009394 <__sflush_r+0x100>)
 80092f2:	410a      	asrs	r2, r1
 80092f4:	07d6      	lsls	r6, r2, #31
 80092f6:	d427      	bmi.n	8009348 <__sflush_r+0xb4>
 80092f8:	2200      	movs	r2, #0
 80092fa:	6062      	str	r2, [r4, #4]
 80092fc:	04d9      	lsls	r1, r3, #19
 80092fe:	6922      	ldr	r2, [r4, #16]
 8009300:	6022      	str	r2, [r4, #0]
 8009302:	d504      	bpl.n	800930e <__sflush_r+0x7a>
 8009304:	1c42      	adds	r2, r0, #1
 8009306:	d101      	bne.n	800930c <__sflush_r+0x78>
 8009308:	682b      	ldr	r3, [r5, #0]
 800930a:	b903      	cbnz	r3, 800930e <__sflush_r+0x7a>
 800930c:	6560      	str	r0, [r4, #84]	; 0x54
 800930e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009310:	602f      	str	r7, [r5, #0]
 8009312:	2900      	cmp	r1, #0
 8009314:	d0ca      	beq.n	80092ac <__sflush_r+0x18>
 8009316:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800931a:	4299      	cmp	r1, r3
 800931c:	d002      	beq.n	8009324 <__sflush_r+0x90>
 800931e:	4628      	mov	r0, r5
 8009320:	f7ff fbd2 	bl	8008ac8 <_free_r>
 8009324:	2000      	movs	r0, #0
 8009326:	6360      	str	r0, [r4, #52]	; 0x34
 8009328:	e7c1      	b.n	80092ae <__sflush_r+0x1a>
 800932a:	2301      	movs	r3, #1
 800932c:	4628      	mov	r0, r5
 800932e:	47b0      	blx	r6
 8009330:	1c41      	adds	r1, r0, #1
 8009332:	d1c8      	bne.n	80092c6 <__sflush_r+0x32>
 8009334:	682b      	ldr	r3, [r5, #0]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d0c5      	beq.n	80092c6 <__sflush_r+0x32>
 800933a:	2b1d      	cmp	r3, #29
 800933c:	d001      	beq.n	8009342 <__sflush_r+0xae>
 800933e:	2b16      	cmp	r3, #22
 8009340:	d101      	bne.n	8009346 <__sflush_r+0xb2>
 8009342:	602f      	str	r7, [r5, #0]
 8009344:	e7b2      	b.n	80092ac <__sflush_r+0x18>
 8009346:	89a3      	ldrh	r3, [r4, #12]
 8009348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800934c:	81a3      	strh	r3, [r4, #12]
 800934e:	e7ae      	b.n	80092ae <__sflush_r+0x1a>
 8009350:	690f      	ldr	r7, [r1, #16]
 8009352:	2f00      	cmp	r7, #0
 8009354:	d0aa      	beq.n	80092ac <__sflush_r+0x18>
 8009356:	0793      	lsls	r3, r2, #30
 8009358:	680e      	ldr	r6, [r1, #0]
 800935a:	bf08      	it	eq
 800935c:	694b      	ldreq	r3, [r1, #20]
 800935e:	600f      	str	r7, [r1, #0]
 8009360:	bf18      	it	ne
 8009362:	2300      	movne	r3, #0
 8009364:	1bf6      	subs	r6, r6, r7
 8009366:	608b      	str	r3, [r1, #8]
 8009368:	2e00      	cmp	r6, #0
 800936a:	dd9f      	ble.n	80092ac <__sflush_r+0x18>
 800936c:	6a21      	ldr	r1, [r4, #32]
 800936e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009372:	4633      	mov	r3, r6
 8009374:	463a      	mov	r2, r7
 8009376:	4628      	mov	r0, r5
 8009378:	47e0      	blx	ip
 800937a:	2800      	cmp	r0, #0
 800937c:	dc06      	bgt.n	800938c <__sflush_r+0xf8>
 800937e:	89a3      	ldrh	r3, [r4, #12]
 8009380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009384:	81a3      	strh	r3, [r4, #12]
 8009386:	f04f 30ff 	mov.w	r0, #4294967295
 800938a:	e790      	b.n	80092ae <__sflush_r+0x1a>
 800938c:	4407      	add	r7, r0
 800938e:	1a36      	subs	r6, r6, r0
 8009390:	e7ea      	b.n	8009368 <__sflush_r+0xd4>
 8009392:	bf00      	nop
 8009394:	dfbffffe 	.word	0xdfbffffe

08009398 <_fflush_r>:
 8009398:	b538      	push	{r3, r4, r5, lr}
 800939a:	690b      	ldr	r3, [r1, #16]
 800939c:	4605      	mov	r5, r0
 800939e:	460c      	mov	r4, r1
 80093a0:	b913      	cbnz	r3, 80093a8 <_fflush_r+0x10>
 80093a2:	2500      	movs	r5, #0
 80093a4:	4628      	mov	r0, r5
 80093a6:	bd38      	pop	{r3, r4, r5, pc}
 80093a8:	b118      	cbz	r0, 80093b2 <_fflush_r+0x1a>
 80093aa:	6a03      	ldr	r3, [r0, #32]
 80093ac:	b90b      	cbnz	r3, 80093b2 <_fflush_r+0x1a>
 80093ae:	f7ff f9b7 	bl	8008720 <__sinit>
 80093b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d0f3      	beq.n	80093a2 <_fflush_r+0xa>
 80093ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80093bc:	07d0      	lsls	r0, r2, #31
 80093be:	d404      	bmi.n	80093ca <_fflush_r+0x32>
 80093c0:	0599      	lsls	r1, r3, #22
 80093c2:	d402      	bmi.n	80093ca <_fflush_r+0x32>
 80093c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093c6:	f7ff fb5f 	bl	8008a88 <__retarget_lock_acquire_recursive>
 80093ca:	4628      	mov	r0, r5
 80093cc:	4621      	mov	r1, r4
 80093ce:	f7ff ff61 	bl	8009294 <__sflush_r>
 80093d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093d4:	07da      	lsls	r2, r3, #31
 80093d6:	4605      	mov	r5, r0
 80093d8:	d4e4      	bmi.n	80093a4 <_fflush_r+0xc>
 80093da:	89a3      	ldrh	r3, [r4, #12]
 80093dc:	059b      	lsls	r3, r3, #22
 80093de:	d4e1      	bmi.n	80093a4 <_fflush_r+0xc>
 80093e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093e2:	f7ff fb52 	bl	8008a8a <__retarget_lock_release_recursive>
 80093e6:	e7dd      	b.n	80093a4 <_fflush_r+0xc>

080093e8 <fiprintf>:
 80093e8:	b40e      	push	{r1, r2, r3}
 80093ea:	b503      	push	{r0, r1, lr}
 80093ec:	4601      	mov	r1, r0
 80093ee:	ab03      	add	r3, sp, #12
 80093f0:	4805      	ldr	r0, [pc, #20]	; (8009408 <fiprintf+0x20>)
 80093f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80093f6:	6800      	ldr	r0, [r0, #0]
 80093f8:	9301      	str	r3, [sp, #4]
 80093fa:	f000 f89d 	bl	8009538 <_vfiprintf_r>
 80093fe:	b002      	add	sp, #8
 8009400:	f85d eb04 	ldr.w	lr, [sp], #4
 8009404:	b003      	add	sp, #12
 8009406:	4770      	bx	lr
 8009408:	200000a0 	.word	0x200000a0

0800940c <memmove>:
 800940c:	4288      	cmp	r0, r1
 800940e:	b510      	push	{r4, lr}
 8009410:	eb01 0402 	add.w	r4, r1, r2
 8009414:	d902      	bls.n	800941c <memmove+0x10>
 8009416:	4284      	cmp	r4, r0
 8009418:	4623      	mov	r3, r4
 800941a:	d807      	bhi.n	800942c <memmove+0x20>
 800941c:	1e43      	subs	r3, r0, #1
 800941e:	42a1      	cmp	r1, r4
 8009420:	d008      	beq.n	8009434 <memmove+0x28>
 8009422:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009426:	f803 2f01 	strb.w	r2, [r3, #1]!
 800942a:	e7f8      	b.n	800941e <memmove+0x12>
 800942c:	4402      	add	r2, r0
 800942e:	4601      	mov	r1, r0
 8009430:	428a      	cmp	r2, r1
 8009432:	d100      	bne.n	8009436 <memmove+0x2a>
 8009434:	bd10      	pop	{r4, pc}
 8009436:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800943a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800943e:	e7f7      	b.n	8009430 <memmove+0x24>

08009440 <_sbrk_r>:
 8009440:	b538      	push	{r3, r4, r5, lr}
 8009442:	4d06      	ldr	r5, [pc, #24]	; (800945c <_sbrk_r+0x1c>)
 8009444:	2300      	movs	r3, #0
 8009446:	4604      	mov	r4, r0
 8009448:	4608      	mov	r0, r1
 800944a:	602b      	str	r3, [r5, #0]
 800944c:	f7f8 ffe2 	bl	8002414 <_sbrk>
 8009450:	1c43      	adds	r3, r0, #1
 8009452:	d102      	bne.n	800945a <_sbrk_r+0x1a>
 8009454:	682b      	ldr	r3, [r5, #0]
 8009456:	b103      	cbz	r3, 800945a <_sbrk_r+0x1a>
 8009458:	6023      	str	r3, [r4, #0]
 800945a:	bd38      	pop	{r3, r4, r5, pc}
 800945c:	2000072c 	.word	0x2000072c

08009460 <memcpy>:
 8009460:	440a      	add	r2, r1
 8009462:	4291      	cmp	r1, r2
 8009464:	f100 33ff 	add.w	r3, r0, #4294967295
 8009468:	d100      	bne.n	800946c <memcpy+0xc>
 800946a:	4770      	bx	lr
 800946c:	b510      	push	{r4, lr}
 800946e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009472:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009476:	4291      	cmp	r1, r2
 8009478:	d1f9      	bne.n	800946e <memcpy+0xe>
 800947a:	bd10      	pop	{r4, pc}

0800947c <abort>:
 800947c:	b508      	push	{r3, lr}
 800947e:	2006      	movs	r0, #6
 8009480:	f000 fa32 	bl	80098e8 <raise>
 8009484:	2001      	movs	r0, #1
 8009486:	f7f8 ff52 	bl	800232e <_exit>

0800948a <_realloc_r>:
 800948a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800948e:	4680      	mov	r8, r0
 8009490:	4614      	mov	r4, r2
 8009492:	460e      	mov	r6, r1
 8009494:	b921      	cbnz	r1, 80094a0 <_realloc_r+0x16>
 8009496:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800949a:	4611      	mov	r1, r2
 800949c:	f7ff bb86 	b.w	8008bac <_malloc_r>
 80094a0:	b92a      	cbnz	r2, 80094ae <_realloc_r+0x24>
 80094a2:	f7ff fb11 	bl	8008ac8 <_free_r>
 80094a6:	4625      	mov	r5, r4
 80094a8:	4628      	mov	r0, r5
 80094aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094ae:	f000 fa37 	bl	8009920 <_malloc_usable_size_r>
 80094b2:	4284      	cmp	r4, r0
 80094b4:	4607      	mov	r7, r0
 80094b6:	d802      	bhi.n	80094be <_realloc_r+0x34>
 80094b8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80094bc:	d812      	bhi.n	80094e4 <_realloc_r+0x5a>
 80094be:	4621      	mov	r1, r4
 80094c0:	4640      	mov	r0, r8
 80094c2:	f7ff fb73 	bl	8008bac <_malloc_r>
 80094c6:	4605      	mov	r5, r0
 80094c8:	2800      	cmp	r0, #0
 80094ca:	d0ed      	beq.n	80094a8 <_realloc_r+0x1e>
 80094cc:	42bc      	cmp	r4, r7
 80094ce:	4622      	mov	r2, r4
 80094d0:	4631      	mov	r1, r6
 80094d2:	bf28      	it	cs
 80094d4:	463a      	movcs	r2, r7
 80094d6:	f7ff ffc3 	bl	8009460 <memcpy>
 80094da:	4631      	mov	r1, r6
 80094dc:	4640      	mov	r0, r8
 80094de:	f7ff faf3 	bl	8008ac8 <_free_r>
 80094e2:	e7e1      	b.n	80094a8 <_realloc_r+0x1e>
 80094e4:	4635      	mov	r5, r6
 80094e6:	e7df      	b.n	80094a8 <_realloc_r+0x1e>

080094e8 <__sfputc_r>:
 80094e8:	6893      	ldr	r3, [r2, #8]
 80094ea:	3b01      	subs	r3, #1
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	b410      	push	{r4}
 80094f0:	6093      	str	r3, [r2, #8]
 80094f2:	da07      	bge.n	8009504 <__sfputc_r+0x1c>
 80094f4:	6994      	ldr	r4, [r2, #24]
 80094f6:	42a3      	cmp	r3, r4
 80094f8:	db01      	blt.n	80094fe <__sfputc_r+0x16>
 80094fa:	290a      	cmp	r1, #10
 80094fc:	d102      	bne.n	8009504 <__sfputc_r+0x1c>
 80094fe:	bc10      	pop	{r4}
 8009500:	f000 b934 	b.w	800976c <__swbuf_r>
 8009504:	6813      	ldr	r3, [r2, #0]
 8009506:	1c58      	adds	r0, r3, #1
 8009508:	6010      	str	r0, [r2, #0]
 800950a:	7019      	strb	r1, [r3, #0]
 800950c:	4608      	mov	r0, r1
 800950e:	bc10      	pop	{r4}
 8009510:	4770      	bx	lr

08009512 <__sfputs_r>:
 8009512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009514:	4606      	mov	r6, r0
 8009516:	460f      	mov	r7, r1
 8009518:	4614      	mov	r4, r2
 800951a:	18d5      	adds	r5, r2, r3
 800951c:	42ac      	cmp	r4, r5
 800951e:	d101      	bne.n	8009524 <__sfputs_r+0x12>
 8009520:	2000      	movs	r0, #0
 8009522:	e007      	b.n	8009534 <__sfputs_r+0x22>
 8009524:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009528:	463a      	mov	r2, r7
 800952a:	4630      	mov	r0, r6
 800952c:	f7ff ffdc 	bl	80094e8 <__sfputc_r>
 8009530:	1c43      	adds	r3, r0, #1
 8009532:	d1f3      	bne.n	800951c <__sfputs_r+0xa>
 8009534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009538 <_vfiprintf_r>:
 8009538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800953c:	460d      	mov	r5, r1
 800953e:	b09d      	sub	sp, #116	; 0x74
 8009540:	4614      	mov	r4, r2
 8009542:	4698      	mov	r8, r3
 8009544:	4606      	mov	r6, r0
 8009546:	b118      	cbz	r0, 8009550 <_vfiprintf_r+0x18>
 8009548:	6a03      	ldr	r3, [r0, #32]
 800954a:	b90b      	cbnz	r3, 8009550 <_vfiprintf_r+0x18>
 800954c:	f7ff f8e8 	bl	8008720 <__sinit>
 8009550:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009552:	07d9      	lsls	r1, r3, #31
 8009554:	d405      	bmi.n	8009562 <_vfiprintf_r+0x2a>
 8009556:	89ab      	ldrh	r3, [r5, #12]
 8009558:	059a      	lsls	r2, r3, #22
 800955a:	d402      	bmi.n	8009562 <_vfiprintf_r+0x2a>
 800955c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800955e:	f7ff fa93 	bl	8008a88 <__retarget_lock_acquire_recursive>
 8009562:	89ab      	ldrh	r3, [r5, #12]
 8009564:	071b      	lsls	r3, r3, #28
 8009566:	d501      	bpl.n	800956c <_vfiprintf_r+0x34>
 8009568:	692b      	ldr	r3, [r5, #16]
 800956a:	b99b      	cbnz	r3, 8009594 <_vfiprintf_r+0x5c>
 800956c:	4629      	mov	r1, r5
 800956e:	4630      	mov	r0, r6
 8009570:	f000 f93a 	bl	80097e8 <__swsetup_r>
 8009574:	b170      	cbz	r0, 8009594 <_vfiprintf_r+0x5c>
 8009576:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009578:	07dc      	lsls	r4, r3, #31
 800957a:	d504      	bpl.n	8009586 <_vfiprintf_r+0x4e>
 800957c:	f04f 30ff 	mov.w	r0, #4294967295
 8009580:	b01d      	add	sp, #116	; 0x74
 8009582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009586:	89ab      	ldrh	r3, [r5, #12]
 8009588:	0598      	lsls	r0, r3, #22
 800958a:	d4f7      	bmi.n	800957c <_vfiprintf_r+0x44>
 800958c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800958e:	f7ff fa7c 	bl	8008a8a <__retarget_lock_release_recursive>
 8009592:	e7f3      	b.n	800957c <_vfiprintf_r+0x44>
 8009594:	2300      	movs	r3, #0
 8009596:	9309      	str	r3, [sp, #36]	; 0x24
 8009598:	2320      	movs	r3, #32
 800959a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800959e:	f8cd 800c 	str.w	r8, [sp, #12]
 80095a2:	2330      	movs	r3, #48	; 0x30
 80095a4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009758 <_vfiprintf_r+0x220>
 80095a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095ac:	f04f 0901 	mov.w	r9, #1
 80095b0:	4623      	mov	r3, r4
 80095b2:	469a      	mov	sl, r3
 80095b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095b8:	b10a      	cbz	r2, 80095be <_vfiprintf_r+0x86>
 80095ba:	2a25      	cmp	r2, #37	; 0x25
 80095bc:	d1f9      	bne.n	80095b2 <_vfiprintf_r+0x7a>
 80095be:	ebba 0b04 	subs.w	fp, sl, r4
 80095c2:	d00b      	beq.n	80095dc <_vfiprintf_r+0xa4>
 80095c4:	465b      	mov	r3, fp
 80095c6:	4622      	mov	r2, r4
 80095c8:	4629      	mov	r1, r5
 80095ca:	4630      	mov	r0, r6
 80095cc:	f7ff ffa1 	bl	8009512 <__sfputs_r>
 80095d0:	3001      	adds	r0, #1
 80095d2:	f000 80a9 	beq.w	8009728 <_vfiprintf_r+0x1f0>
 80095d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095d8:	445a      	add	r2, fp
 80095da:	9209      	str	r2, [sp, #36]	; 0x24
 80095dc:	f89a 3000 	ldrb.w	r3, [sl]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	f000 80a1 	beq.w	8009728 <_vfiprintf_r+0x1f0>
 80095e6:	2300      	movs	r3, #0
 80095e8:	f04f 32ff 	mov.w	r2, #4294967295
 80095ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095f0:	f10a 0a01 	add.w	sl, sl, #1
 80095f4:	9304      	str	r3, [sp, #16]
 80095f6:	9307      	str	r3, [sp, #28]
 80095f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095fc:	931a      	str	r3, [sp, #104]	; 0x68
 80095fe:	4654      	mov	r4, sl
 8009600:	2205      	movs	r2, #5
 8009602:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009606:	4854      	ldr	r0, [pc, #336]	; (8009758 <_vfiprintf_r+0x220>)
 8009608:	f7f6 fdc2 	bl	8000190 <memchr>
 800960c:	9a04      	ldr	r2, [sp, #16]
 800960e:	b9d8      	cbnz	r0, 8009648 <_vfiprintf_r+0x110>
 8009610:	06d1      	lsls	r1, r2, #27
 8009612:	bf44      	itt	mi
 8009614:	2320      	movmi	r3, #32
 8009616:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800961a:	0713      	lsls	r3, r2, #28
 800961c:	bf44      	itt	mi
 800961e:	232b      	movmi	r3, #43	; 0x2b
 8009620:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009624:	f89a 3000 	ldrb.w	r3, [sl]
 8009628:	2b2a      	cmp	r3, #42	; 0x2a
 800962a:	d015      	beq.n	8009658 <_vfiprintf_r+0x120>
 800962c:	9a07      	ldr	r2, [sp, #28]
 800962e:	4654      	mov	r4, sl
 8009630:	2000      	movs	r0, #0
 8009632:	f04f 0c0a 	mov.w	ip, #10
 8009636:	4621      	mov	r1, r4
 8009638:	f811 3b01 	ldrb.w	r3, [r1], #1
 800963c:	3b30      	subs	r3, #48	; 0x30
 800963e:	2b09      	cmp	r3, #9
 8009640:	d94d      	bls.n	80096de <_vfiprintf_r+0x1a6>
 8009642:	b1b0      	cbz	r0, 8009672 <_vfiprintf_r+0x13a>
 8009644:	9207      	str	r2, [sp, #28]
 8009646:	e014      	b.n	8009672 <_vfiprintf_r+0x13a>
 8009648:	eba0 0308 	sub.w	r3, r0, r8
 800964c:	fa09 f303 	lsl.w	r3, r9, r3
 8009650:	4313      	orrs	r3, r2
 8009652:	9304      	str	r3, [sp, #16]
 8009654:	46a2      	mov	sl, r4
 8009656:	e7d2      	b.n	80095fe <_vfiprintf_r+0xc6>
 8009658:	9b03      	ldr	r3, [sp, #12]
 800965a:	1d19      	adds	r1, r3, #4
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	9103      	str	r1, [sp, #12]
 8009660:	2b00      	cmp	r3, #0
 8009662:	bfbb      	ittet	lt
 8009664:	425b      	neglt	r3, r3
 8009666:	f042 0202 	orrlt.w	r2, r2, #2
 800966a:	9307      	strge	r3, [sp, #28]
 800966c:	9307      	strlt	r3, [sp, #28]
 800966e:	bfb8      	it	lt
 8009670:	9204      	strlt	r2, [sp, #16]
 8009672:	7823      	ldrb	r3, [r4, #0]
 8009674:	2b2e      	cmp	r3, #46	; 0x2e
 8009676:	d10c      	bne.n	8009692 <_vfiprintf_r+0x15a>
 8009678:	7863      	ldrb	r3, [r4, #1]
 800967a:	2b2a      	cmp	r3, #42	; 0x2a
 800967c:	d134      	bne.n	80096e8 <_vfiprintf_r+0x1b0>
 800967e:	9b03      	ldr	r3, [sp, #12]
 8009680:	1d1a      	adds	r2, r3, #4
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	9203      	str	r2, [sp, #12]
 8009686:	2b00      	cmp	r3, #0
 8009688:	bfb8      	it	lt
 800968a:	f04f 33ff 	movlt.w	r3, #4294967295
 800968e:	3402      	adds	r4, #2
 8009690:	9305      	str	r3, [sp, #20]
 8009692:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800975c <_vfiprintf_r+0x224>
 8009696:	7821      	ldrb	r1, [r4, #0]
 8009698:	2203      	movs	r2, #3
 800969a:	4650      	mov	r0, sl
 800969c:	f7f6 fd78 	bl	8000190 <memchr>
 80096a0:	b138      	cbz	r0, 80096b2 <_vfiprintf_r+0x17a>
 80096a2:	9b04      	ldr	r3, [sp, #16]
 80096a4:	eba0 000a 	sub.w	r0, r0, sl
 80096a8:	2240      	movs	r2, #64	; 0x40
 80096aa:	4082      	lsls	r2, r0
 80096ac:	4313      	orrs	r3, r2
 80096ae:	3401      	adds	r4, #1
 80096b0:	9304      	str	r3, [sp, #16]
 80096b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096b6:	482a      	ldr	r0, [pc, #168]	; (8009760 <_vfiprintf_r+0x228>)
 80096b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096bc:	2206      	movs	r2, #6
 80096be:	f7f6 fd67 	bl	8000190 <memchr>
 80096c2:	2800      	cmp	r0, #0
 80096c4:	d03f      	beq.n	8009746 <_vfiprintf_r+0x20e>
 80096c6:	4b27      	ldr	r3, [pc, #156]	; (8009764 <_vfiprintf_r+0x22c>)
 80096c8:	bb1b      	cbnz	r3, 8009712 <_vfiprintf_r+0x1da>
 80096ca:	9b03      	ldr	r3, [sp, #12]
 80096cc:	3307      	adds	r3, #7
 80096ce:	f023 0307 	bic.w	r3, r3, #7
 80096d2:	3308      	adds	r3, #8
 80096d4:	9303      	str	r3, [sp, #12]
 80096d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096d8:	443b      	add	r3, r7
 80096da:	9309      	str	r3, [sp, #36]	; 0x24
 80096dc:	e768      	b.n	80095b0 <_vfiprintf_r+0x78>
 80096de:	fb0c 3202 	mla	r2, ip, r2, r3
 80096e2:	460c      	mov	r4, r1
 80096e4:	2001      	movs	r0, #1
 80096e6:	e7a6      	b.n	8009636 <_vfiprintf_r+0xfe>
 80096e8:	2300      	movs	r3, #0
 80096ea:	3401      	adds	r4, #1
 80096ec:	9305      	str	r3, [sp, #20]
 80096ee:	4619      	mov	r1, r3
 80096f0:	f04f 0c0a 	mov.w	ip, #10
 80096f4:	4620      	mov	r0, r4
 80096f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096fa:	3a30      	subs	r2, #48	; 0x30
 80096fc:	2a09      	cmp	r2, #9
 80096fe:	d903      	bls.n	8009708 <_vfiprintf_r+0x1d0>
 8009700:	2b00      	cmp	r3, #0
 8009702:	d0c6      	beq.n	8009692 <_vfiprintf_r+0x15a>
 8009704:	9105      	str	r1, [sp, #20]
 8009706:	e7c4      	b.n	8009692 <_vfiprintf_r+0x15a>
 8009708:	fb0c 2101 	mla	r1, ip, r1, r2
 800970c:	4604      	mov	r4, r0
 800970e:	2301      	movs	r3, #1
 8009710:	e7f0      	b.n	80096f4 <_vfiprintf_r+0x1bc>
 8009712:	ab03      	add	r3, sp, #12
 8009714:	9300      	str	r3, [sp, #0]
 8009716:	462a      	mov	r2, r5
 8009718:	4b13      	ldr	r3, [pc, #76]	; (8009768 <_vfiprintf_r+0x230>)
 800971a:	a904      	add	r1, sp, #16
 800971c:	4630      	mov	r0, r6
 800971e:	f3af 8000 	nop.w
 8009722:	4607      	mov	r7, r0
 8009724:	1c78      	adds	r0, r7, #1
 8009726:	d1d6      	bne.n	80096d6 <_vfiprintf_r+0x19e>
 8009728:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800972a:	07d9      	lsls	r1, r3, #31
 800972c:	d405      	bmi.n	800973a <_vfiprintf_r+0x202>
 800972e:	89ab      	ldrh	r3, [r5, #12]
 8009730:	059a      	lsls	r2, r3, #22
 8009732:	d402      	bmi.n	800973a <_vfiprintf_r+0x202>
 8009734:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009736:	f7ff f9a8 	bl	8008a8a <__retarget_lock_release_recursive>
 800973a:	89ab      	ldrh	r3, [r5, #12]
 800973c:	065b      	lsls	r3, r3, #25
 800973e:	f53f af1d 	bmi.w	800957c <_vfiprintf_r+0x44>
 8009742:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009744:	e71c      	b.n	8009580 <_vfiprintf_r+0x48>
 8009746:	ab03      	add	r3, sp, #12
 8009748:	9300      	str	r3, [sp, #0]
 800974a:	462a      	mov	r2, r5
 800974c:	4b06      	ldr	r3, [pc, #24]	; (8009768 <_vfiprintf_r+0x230>)
 800974e:	a904      	add	r1, sp, #16
 8009750:	4630      	mov	r0, r6
 8009752:	f7ff fc7d 	bl	8009050 <_printf_i>
 8009756:	e7e4      	b.n	8009722 <_vfiprintf_r+0x1ea>
 8009758:	0800b202 	.word	0x0800b202
 800975c:	0800b208 	.word	0x0800b208
 8009760:	0800b20c 	.word	0x0800b20c
 8009764:	00000000 	.word	0x00000000
 8009768:	08009513 	.word	0x08009513

0800976c <__swbuf_r>:
 800976c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800976e:	460e      	mov	r6, r1
 8009770:	4614      	mov	r4, r2
 8009772:	4605      	mov	r5, r0
 8009774:	b118      	cbz	r0, 800977e <__swbuf_r+0x12>
 8009776:	6a03      	ldr	r3, [r0, #32]
 8009778:	b90b      	cbnz	r3, 800977e <__swbuf_r+0x12>
 800977a:	f7fe ffd1 	bl	8008720 <__sinit>
 800977e:	69a3      	ldr	r3, [r4, #24]
 8009780:	60a3      	str	r3, [r4, #8]
 8009782:	89a3      	ldrh	r3, [r4, #12]
 8009784:	071a      	lsls	r2, r3, #28
 8009786:	d525      	bpl.n	80097d4 <__swbuf_r+0x68>
 8009788:	6923      	ldr	r3, [r4, #16]
 800978a:	b31b      	cbz	r3, 80097d4 <__swbuf_r+0x68>
 800978c:	6823      	ldr	r3, [r4, #0]
 800978e:	6922      	ldr	r2, [r4, #16]
 8009790:	1a98      	subs	r0, r3, r2
 8009792:	6963      	ldr	r3, [r4, #20]
 8009794:	b2f6      	uxtb	r6, r6
 8009796:	4283      	cmp	r3, r0
 8009798:	4637      	mov	r7, r6
 800979a:	dc04      	bgt.n	80097a6 <__swbuf_r+0x3a>
 800979c:	4621      	mov	r1, r4
 800979e:	4628      	mov	r0, r5
 80097a0:	f7ff fdfa 	bl	8009398 <_fflush_r>
 80097a4:	b9e0      	cbnz	r0, 80097e0 <__swbuf_r+0x74>
 80097a6:	68a3      	ldr	r3, [r4, #8]
 80097a8:	3b01      	subs	r3, #1
 80097aa:	60a3      	str	r3, [r4, #8]
 80097ac:	6823      	ldr	r3, [r4, #0]
 80097ae:	1c5a      	adds	r2, r3, #1
 80097b0:	6022      	str	r2, [r4, #0]
 80097b2:	701e      	strb	r6, [r3, #0]
 80097b4:	6962      	ldr	r2, [r4, #20]
 80097b6:	1c43      	adds	r3, r0, #1
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d004      	beq.n	80097c6 <__swbuf_r+0x5a>
 80097bc:	89a3      	ldrh	r3, [r4, #12]
 80097be:	07db      	lsls	r3, r3, #31
 80097c0:	d506      	bpl.n	80097d0 <__swbuf_r+0x64>
 80097c2:	2e0a      	cmp	r6, #10
 80097c4:	d104      	bne.n	80097d0 <__swbuf_r+0x64>
 80097c6:	4621      	mov	r1, r4
 80097c8:	4628      	mov	r0, r5
 80097ca:	f7ff fde5 	bl	8009398 <_fflush_r>
 80097ce:	b938      	cbnz	r0, 80097e0 <__swbuf_r+0x74>
 80097d0:	4638      	mov	r0, r7
 80097d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097d4:	4621      	mov	r1, r4
 80097d6:	4628      	mov	r0, r5
 80097d8:	f000 f806 	bl	80097e8 <__swsetup_r>
 80097dc:	2800      	cmp	r0, #0
 80097de:	d0d5      	beq.n	800978c <__swbuf_r+0x20>
 80097e0:	f04f 37ff 	mov.w	r7, #4294967295
 80097e4:	e7f4      	b.n	80097d0 <__swbuf_r+0x64>
	...

080097e8 <__swsetup_r>:
 80097e8:	b538      	push	{r3, r4, r5, lr}
 80097ea:	4b2a      	ldr	r3, [pc, #168]	; (8009894 <__swsetup_r+0xac>)
 80097ec:	4605      	mov	r5, r0
 80097ee:	6818      	ldr	r0, [r3, #0]
 80097f0:	460c      	mov	r4, r1
 80097f2:	b118      	cbz	r0, 80097fc <__swsetup_r+0x14>
 80097f4:	6a03      	ldr	r3, [r0, #32]
 80097f6:	b90b      	cbnz	r3, 80097fc <__swsetup_r+0x14>
 80097f8:	f7fe ff92 	bl	8008720 <__sinit>
 80097fc:	89a3      	ldrh	r3, [r4, #12]
 80097fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009802:	0718      	lsls	r0, r3, #28
 8009804:	d422      	bmi.n	800984c <__swsetup_r+0x64>
 8009806:	06d9      	lsls	r1, r3, #27
 8009808:	d407      	bmi.n	800981a <__swsetup_r+0x32>
 800980a:	2309      	movs	r3, #9
 800980c:	602b      	str	r3, [r5, #0]
 800980e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009812:	81a3      	strh	r3, [r4, #12]
 8009814:	f04f 30ff 	mov.w	r0, #4294967295
 8009818:	e034      	b.n	8009884 <__swsetup_r+0x9c>
 800981a:	0758      	lsls	r0, r3, #29
 800981c:	d512      	bpl.n	8009844 <__swsetup_r+0x5c>
 800981e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009820:	b141      	cbz	r1, 8009834 <__swsetup_r+0x4c>
 8009822:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009826:	4299      	cmp	r1, r3
 8009828:	d002      	beq.n	8009830 <__swsetup_r+0x48>
 800982a:	4628      	mov	r0, r5
 800982c:	f7ff f94c 	bl	8008ac8 <_free_r>
 8009830:	2300      	movs	r3, #0
 8009832:	6363      	str	r3, [r4, #52]	; 0x34
 8009834:	89a3      	ldrh	r3, [r4, #12]
 8009836:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800983a:	81a3      	strh	r3, [r4, #12]
 800983c:	2300      	movs	r3, #0
 800983e:	6063      	str	r3, [r4, #4]
 8009840:	6923      	ldr	r3, [r4, #16]
 8009842:	6023      	str	r3, [r4, #0]
 8009844:	89a3      	ldrh	r3, [r4, #12]
 8009846:	f043 0308 	orr.w	r3, r3, #8
 800984a:	81a3      	strh	r3, [r4, #12]
 800984c:	6923      	ldr	r3, [r4, #16]
 800984e:	b94b      	cbnz	r3, 8009864 <__swsetup_r+0x7c>
 8009850:	89a3      	ldrh	r3, [r4, #12]
 8009852:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009856:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800985a:	d003      	beq.n	8009864 <__swsetup_r+0x7c>
 800985c:	4621      	mov	r1, r4
 800985e:	4628      	mov	r0, r5
 8009860:	f000 f88c 	bl	800997c <__smakebuf_r>
 8009864:	89a0      	ldrh	r0, [r4, #12]
 8009866:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800986a:	f010 0301 	ands.w	r3, r0, #1
 800986e:	d00a      	beq.n	8009886 <__swsetup_r+0x9e>
 8009870:	2300      	movs	r3, #0
 8009872:	60a3      	str	r3, [r4, #8]
 8009874:	6963      	ldr	r3, [r4, #20]
 8009876:	425b      	negs	r3, r3
 8009878:	61a3      	str	r3, [r4, #24]
 800987a:	6923      	ldr	r3, [r4, #16]
 800987c:	b943      	cbnz	r3, 8009890 <__swsetup_r+0xa8>
 800987e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009882:	d1c4      	bne.n	800980e <__swsetup_r+0x26>
 8009884:	bd38      	pop	{r3, r4, r5, pc}
 8009886:	0781      	lsls	r1, r0, #30
 8009888:	bf58      	it	pl
 800988a:	6963      	ldrpl	r3, [r4, #20]
 800988c:	60a3      	str	r3, [r4, #8]
 800988e:	e7f4      	b.n	800987a <__swsetup_r+0x92>
 8009890:	2000      	movs	r0, #0
 8009892:	e7f7      	b.n	8009884 <__swsetup_r+0x9c>
 8009894:	200000a0 	.word	0x200000a0

08009898 <_raise_r>:
 8009898:	291f      	cmp	r1, #31
 800989a:	b538      	push	{r3, r4, r5, lr}
 800989c:	4604      	mov	r4, r0
 800989e:	460d      	mov	r5, r1
 80098a0:	d904      	bls.n	80098ac <_raise_r+0x14>
 80098a2:	2316      	movs	r3, #22
 80098a4:	6003      	str	r3, [r0, #0]
 80098a6:	f04f 30ff 	mov.w	r0, #4294967295
 80098aa:	bd38      	pop	{r3, r4, r5, pc}
 80098ac:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80098ae:	b112      	cbz	r2, 80098b6 <_raise_r+0x1e>
 80098b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098b4:	b94b      	cbnz	r3, 80098ca <_raise_r+0x32>
 80098b6:	4620      	mov	r0, r4
 80098b8:	f000 f830 	bl	800991c <_getpid_r>
 80098bc:	462a      	mov	r2, r5
 80098be:	4601      	mov	r1, r0
 80098c0:	4620      	mov	r0, r4
 80098c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098c6:	f000 b817 	b.w	80098f8 <_kill_r>
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d00a      	beq.n	80098e4 <_raise_r+0x4c>
 80098ce:	1c59      	adds	r1, r3, #1
 80098d0:	d103      	bne.n	80098da <_raise_r+0x42>
 80098d2:	2316      	movs	r3, #22
 80098d4:	6003      	str	r3, [r0, #0]
 80098d6:	2001      	movs	r0, #1
 80098d8:	e7e7      	b.n	80098aa <_raise_r+0x12>
 80098da:	2400      	movs	r4, #0
 80098dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80098e0:	4628      	mov	r0, r5
 80098e2:	4798      	blx	r3
 80098e4:	2000      	movs	r0, #0
 80098e6:	e7e0      	b.n	80098aa <_raise_r+0x12>

080098e8 <raise>:
 80098e8:	4b02      	ldr	r3, [pc, #8]	; (80098f4 <raise+0xc>)
 80098ea:	4601      	mov	r1, r0
 80098ec:	6818      	ldr	r0, [r3, #0]
 80098ee:	f7ff bfd3 	b.w	8009898 <_raise_r>
 80098f2:	bf00      	nop
 80098f4:	200000a0 	.word	0x200000a0

080098f8 <_kill_r>:
 80098f8:	b538      	push	{r3, r4, r5, lr}
 80098fa:	4d07      	ldr	r5, [pc, #28]	; (8009918 <_kill_r+0x20>)
 80098fc:	2300      	movs	r3, #0
 80098fe:	4604      	mov	r4, r0
 8009900:	4608      	mov	r0, r1
 8009902:	4611      	mov	r1, r2
 8009904:	602b      	str	r3, [r5, #0]
 8009906:	f7f8 fd02 	bl	800230e <_kill>
 800990a:	1c43      	adds	r3, r0, #1
 800990c:	d102      	bne.n	8009914 <_kill_r+0x1c>
 800990e:	682b      	ldr	r3, [r5, #0]
 8009910:	b103      	cbz	r3, 8009914 <_kill_r+0x1c>
 8009912:	6023      	str	r3, [r4, #0]
 8009914:	bd38      	pop	{r3, r4, r5, pc}
 8009916:	bf00      	nop
 8009918:	2000072c 	.word	0x2000072c

0800991c <_getpid_r>:
 800991c:	f7f8 bcf0 	b.w	8002300 <_getpid>

08009920 <_malloc_usable_size_r>:
 8009920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009924:	1f18      	subs	r0, r3, #4
 8009926:	2b00      	cmp	r3, #0
 8009928:	bfbc      	itt	lt
 800992a:	580b      	ldrlt	r3, [r1, r0]
 800992c:	18c0      	addlt	r0, r0, r3
 800992e:	4770      	bx	lr

08009930 <__swhatbuf_r>:
 8009930:	b570      	push	{r4, r5, r6, lr}
 8009932:	460c      	mov	r4, r1
 8009934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009938:	2900      	cmp	r1, #0
 800993a:	b096      	sub	sp, #88	; 0x58
 800993c:	4615      	mov	r5, r2
 800993e:	461e      	mov	r6, r3
 8009940:	da0d      	bge.n	800995e <__swhatbuf_r+0x2e>
 8009942:	89a3      	ldrh	r3, [r4, #12]
 8009944:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009948:	f04f 0100 	mov.w	r1, #0
 800994c:	bf0c      	ite	eq
 800994e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009952:	2340      	movne	r3, #64	; 0x40
 8009954:	2000      	movs	r0, #0
 8009956:	6031      	str	r1, [r6, #0]
 8009958:	602b      	str	r3, [r5, #0]
 800995a:	b016      	add	sp, #88	; 0x58
 800995c:	bd70      	pop	{r4, r5, r6, pc}
 800995e:	466a      	mov	r2, sp
 8009960:	f000 f848 	bl	80099f4 <_fstat_r>
 8009964:	2800      	cmp	r0, #0
 8009966:	dbec      	blt.n	8009942 <__swhatbuf_r+0x12>
 8009968:	9901      	ldr	r1, [sp, #4]
 800996a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800996e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009972:	4259      	negs	r1, r3
 8009974:	4159      	adcs	r1, r3
 8009976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800997a:	e7eb      	b.n	8009954 <__swhatbuf_r+0x24>

0800997c <__smakebuf_r>:
 800997c:	898b      	ldrh	r3, [r1, #12]
 800997e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009980:	079d      	lsls	r5, r3, #30
 8009982:	4606      	mov	r6, r0
 8009984:	460c      	mov	r4, r1
 8009986:	d507      	bpl.n	8009998 <__smakebuf_r+0x1c>
 8009988:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800998c:	6023      	str	r3, [r4, #0]
 800998e:	6123      	str	r3, [r4, #16]
 8009990:	2301      	movs	r3, #1
 8009992:	6163      	str	r3, [r4, #20]
 8009994:	b002      	add	sp, #8
 8009996:	bd70      	pop	{r4, r5, r6, pc}
 8009998:	ab01      	add	r3, sp, #4
 800999a:	466a      	mov	r2, sp
 800999c:	f7ff ffc8 	bl	8009930 <__swhatbuf_r>
 80099a0:	9900      	ldr	r1, [sp, #0]
 80099a2:	4605      	mov	r5, r0
 80099a4:	4630      	mov	r0, r6
 80099a6:	f7ff f901 	bl	8008bac <_malloc_r>
 80099aa:	b948      	cbnz	r0, 80099c0 <__smakebuf_r+0x44>
 80099ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099b0:	059a      	lsls	r2, r3, #22
 80099b2:	d4ef      	bmi.n	8009994 <__smakebuf_r+0x18>
 80099b4:	f023 0303 	bic.w	r3, r3, #3
 80099b8:	f043 0302 	orr.w	r3, r3, #2
 80099bc:	81a3      	strh	r3, [r4, #12]
 80099be:	e7e3      	b.n	8009988 <__smakebuf_r+0xc>
 80099c0:	89a3      	ldrh	r3, [r4, #12]
 80099c2:	6020      	str	r0, [r4, #0]
 80099c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099c8:	81a3      	strh	r3, [r4, #12]
 80099ca:	9b00      	ldr	r3, [sp, #0]
 80099cc:	6163      	str	r3, [r4, #20]
 80099ce:	9b01      	ldr	r3, [sp, #4]
 80099d0:	6120      	str	r0, [r4, #16]
 80099d2:	b15b      	cbz	r3, 80099ec <__smakebuf_r+0x70>
 80099d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099d8:	4630      	mov	r0, r6
 80099da:	f000 f81d 	bl	8009a18 <_isatty_r>
 80099de:	b128      	cbz	r0, 80099ec <__smakebuf_r+0x70>
 80099e0:	89a3      	ldrh	r3, [r4, #12]
 80099e2:	f023 0303 	bic.w	r3, r3, #3
 80099e6:	f043 0301 	orr.w	r3, r3, #1
 80099ea:	81a3      	strh	r3, [r4, #12]
 80099ec:	89a3      	ldrh	r3, [r4, #12]
 80099ee:	431d      	orrs	r5, r3
 80099f0:	81a5      	strh	r5, [r4, #12]
 80099f2:	e7cf      	b.n	8009994 <__smakebuf_r+0x18>

080099f4 <_fstat_r>:
 80099f4:	b538      	push	{r3, r4, r5, lr}
 80099f6:	4d07      	ldr	r5, [pc, #28]	; (8009a14 <_fstat_r+0x20>)
 80099f8:	2300      	movs	r3, #0
 80099fa:	4604      	mov	r4, r0
 80099fc:	4608      	mov	r0, r1
 80099fe:	4611      	mov	r1, r2
 8009a00:	602b      	str	r3, [r5, #0]
 8009a02:	f7f8 fce2 	bl	80023ca <_fstat>
 8009a06:	1c43      	adds	r3, r0, #1
 8009a08:	d102      	bne.n	8009a10 <_fstat_r+0x1c>
 8009a0a:	682b      	ldr	r3, [r5, #0]
 8009a0c:	b103      	cbz	r3, 8009a10 <_fstat_r+0x1c>
 8009a0e:	6023      	str	r3, [r4, #0]
 8009a10:	bd38      	pop	{r3, r4, r5, pc}
 8009a12:	bf00      	nop
 8009a14:	2000072c 	.word	0x2000072c

08009a18 <_isatty_r>:
 8009a18:	b538      	push	{r3, r4, r5, lr}
 8009a1a:	4d06      	ldr	r5, [pc, #24]	; (8009a34 <_isatty_r+0x1c>)
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	4604      	mov	r4, r0
 8009a20:	4608      	mov	r0, r1
 8009a22:	602b      	str	r3, [r5, #0]
 8009a24:	f7f8 fce0 	bl	80023e8 <_isatty>
 8009a28:	1c43      	adds	r3, r0, #1
 8009a2a:	d102      	bne.n	8009a32 <_isatty_r+0x1a>
 8009a2c:	682b      	ldr	r3, [r5, #0]
 8009a2e:	b103      	cbz	r3, 8009a32 <_isatty_r+0x1a>
 8009a30:	6023      	str	r3, [r4, #0]
 8009a32:	bd38      	pop	{r3, r4, r5, pc}
 8009a34:	2000072c 	.word	0x2000072c

08009a38 <pow>:
 8009a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a3c:	4614      	mov	r4, r2
 8009a3e:	461d      	mov	r5, r3
 8009a40:	4680      	mov	r8, r0
 8009a42:	4689      	mov	r9, r1
 8009a44:	f000 f868 	bl	8009b18 <__ieee754_pow>
 8009a48:	4622      	mov	r2, r4
 8009a4a:	4606      	mov	r6, r0
 8009a4c:	460f      	mov	r7, r1
 8009a4e:	462b      	mov	r3, r5
 8009a50:	4620      	mov	r0, r4
 8009a52:	4629      	mov	r1, r5
 8009a54:	f7f7 f842 	bl	8000adc <__aeabi_dcmpun>
 8009a58:	bbc8      	cbnz	r0, 8009ace <pow+0x96>
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	4640      	mov	r0, r8
 8009a60:	4649      	mov	r1, r9
 8009a62:	f7f7 f809 	bl	8000a78 <__aeabi_dcmpeq>
 8009a66:	b1b8      	cbz	r0, 8009a98 <pow+0x60>
 8009a68:	2200      	movs	r2, #0
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	4620      	mov	r0, r4
 8009a6e:	4629      	mov	r1, r5
 8009a70:	f7f7 f802 	bl	8000a78 <__aeabi_dcmpeq>
 8009a74:	2800      	cmp	r0, #0
 8009a76:	d141      	bne.n	8009afc <pow+0xc4>
 8009a78:	4620      	mov	r0, r4
 8009a7a:	4629      	mov	r1, r5
 8009a7c:	f000 f844 	bl	8009b08 <finite>
 8009a80:	b328      	cbz	r0, 8009ace <pow+0x96>
 8009a82:	2200      	movs	r2, #0
 8009a84:	2300      	movs	r3, #0
 8009a86:	4620      	mov	r0, r4
 8009a88:	4629      	mov	r1, r5
 8009a8a:	f7f6 ffff 	bl	8000a8c <__aeabi_dcmplt>
 8009a8e:	b1f0      	cbz	r0, 8009ace <pow+0x96>
 8009a90:	f7fe ffd0 	bl	8008a34 <__errno>
 8009a94:	2322      	movs	r3, #34	; 0x22
 8009a96:	e019      	b.n	8009acc <pow+0x94>
 8009a98:	4630      	mov	r0, r6
 8009a9a:	4639      	mov	r1, r7
 8009a9c:	f000 f834 	bl	8009b08 <finite>
 8009aa0:	b9c8      	cbnz	r0, 8009ad6 <pow+0x9e>
 8009aa2:	4640      	mov	r0, r8
 8009aa4:	4649      	mov	r1, r9
 8009aa6:	f000 f82f 	bl	8009b08 <finite>
 8009aaa:	b1a0      	cbz	r0, 8009ad6 <pow+0x9e>
 8009aac:	4620      	mov	r0, r4
 8009aae:	4629      	mov	r1, r5
 8009ab0:	f000 f82a 	bl	8009b08 <finite>
 8009ab4:	b178      	cbz	r0, 8009ad6 <pow+0x9e>
 8009ab6:	4632      	mov	r2, r6
 8009ab8:	463b      	mov	r3, r7
 8009aba:	4630      	mov	r0, r6
 8009abc:	4639      	mov	r1, r7
 8009abe:	f7f7 f80d 	bl	8000adc <__aeabi_dcmpun>
 8009ac2:	2800      	cmp	r0, #0
 8009ac4:	d0e4      	beq.n	8009a90 <pow+0x58>
 8009ac6:	f7fe ffb5 	bl	8008a34 <__errno>
 8009aca:	2321      	movs	r3, #33	; 0x21
 8009acc:	6003      	str	r3, [r0, #0]
 8009ace:	4630      	mov	r0, r6
 8009ad0:	4639      	mov	r1, r7
 8009ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	2300      	movs	r3, #0
 8009ada:	4630      	mov	r0, r6
 8009adc:	4639      	mov	r1, r7
 8009ade:	f7f6 ffcb 	bl	8000a78 <__aeabi_dcmpeq>
 8009ae2:	2800      	cmp	r0, #0
 8009ae4:	d0f3      	beq.n	8009ace <pow+0x96>
 8009ae6:	4640      	mov	r0, r8
 8009ae8:	4649      	mov	r1, r9
 8009aea:	f000 f80d 	bl	8009b08 <finite>
 8009aee:	2800      	cmp	r0, #0
 8009af0:	d0ed      	beq.n	8009ace <pow+0x96>
 8009af2:	4620      	mov	r0, r4
 8009af4:	4629      	mov	r1, r5
 8009af6:	f000 f807 	bl	8009b08 <finite>
 8009afa:	e7c8      	b.n	8009a8e <pow+0x56>
 8009afc:	4f01      	ldr	r7, [pc, #4]	; (8009b04 <pow+0xcc>)
 8009afe:	2600      	movs	r6, #0
 8009b00:	e7e5      	b.n	8009ace <pow+0x96>
 8009b02:	bf00      	nop
 8009b04:	3ff00000 	.word	0x3ff00000

08009b08 <finite>:
 8009b08:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8009b0c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009b10:	0fc0      	lsrs	r0, r0, #31
 8009b12:	4770      	bx	lr
 8009b14:	0000      	movs	r0, r0
	...

08009b18 <__ieee754_pow>:
 8009b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b1c:	b093      	sub	sp, #76	; 0x4c
 8009b1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b22:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8009b26:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8009b2a:	4689      	mov	r9, r1
 8009b2c:	ea56 0102 	orrs.w	r1, r6, r2
 8009b30:	4680      	mov	r8, r0
 8009b32:	d111      	bne.n	8009b58 <__ieee754_pow+0x40>
 8009b34:	1803      	adds	r3, r0, r0
 8009b36:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8009b3a:	4152      	adcs	r2, r2
 8009b3c:	4299      	cmp	r1, r3
 8009b3e:	4b82      	ldr	r3, [pc, #520]	; (8009d48 <__ieee754_pow+0x230>)
 8009b40:	4193      	sbcs	r3, r2
 8009b42:	f080 84b5 	bcs.w	800a4b0 <__ieee754_pow+0x998>
 8009b46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b4a:	4640      	mov	r0, r8
 8009b4c:	4649      	mov	r1, r9
 8009b4e:	f7f6 fb75 	bl	800023c <__adddf3>
 8009b52:	4683      	mov	fp, r0
 8009b54:	468c      	mov	ip, r1
 8009b56:	e06f      	b.n	8009c38 <__ieee754_pow+0x120>
 8009b58:	4b7c      	ldr	r3, [pc, #496]	; (8009d4c <__ieee754_pow+0x234>)
 8009b5a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8009b5e:	429c      	cmp	r4, r3
 8009b60:	464d      	mov	r5, r9
 8009b62:	4682      	mov	sl, r0
 8009b64:	dc06      	bgt.n	8009b74 <__ieee754_pow+0x5c>
 8009b66:	d101      	bne.n	8009b6c <__ieee754_pow+0x54>
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	d1ec      	bne.n	8009b46 <__ieee754_pow+0x2e>
 8009b6c:	429e      	cmp	r6, r3
 8009b6e:	dc01      	bgt.n	8009b74 <__ieee754_pow+0x5c>
 8009b70:	d10f      	bne.n	8009b92 <__ieee754_pow+0x7a>
 8009b72:	b172      	cbz	r2, 8009b92 <__ieee754_pow+0x7a>
 8009b74:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009b78:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009b7c:	ea55 050a 	orrs.w	r5, r5, sl
 8009b80:	d1e1      	bne.n	8009b46 <__ieee754_pow+0x2e>
 8009b82:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009b86:	18db      	adds	r3, r3, r3
 8009b88:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009b8c:	4152      	adcs	r2, r2
 8009b8e:	429d      	cmp	r5, r3
 8009b90:	e7d5      	b.n	8009b3e <__ieee754_pow+0x26>
 8009b92:	2d00      	cmp	r5, #0
 8009b94:	da39      	bge.n	8009c0a <__ieee754_pow+0xf2>
 8009b96:	4b6e      	ldr	r3, [pc, #440]	; (8009d50 <__ieee754_pow+0x238>)
 8009b98:	429e      	cmp	r6, r3
 8009b9a:	dc52      	bgt.n	8009c42 <__ieee754_pow+0x12a>
 8009b9c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009ba0:	429e      	cmp	r6, r3
 8009ba2:	f340 8498 	ble.w	800a4d6 <__ieee754_pow+0x9be>
 8009ba6:	1533      	asrs	r3, r6, #20
 8009ba8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009bac:	2b14      	cmp	r3, #20
 8009bae:	dd0f      	ble.n	8009bd0 <__ieee754_pow+0xb8>
 8009bb0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009bb4:	fa22 f103 	lsr.w	r1, r2, r3
 8009bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	f040 848a 	bne.w	800a4d6 <__ieee754_pow+0x9be>
 8009bc2:	f001 0101 	and.w	r1, r1, #1
 8009bc6:	f1c1 0302 	rsb	r3, r1, #2
 8009bca:	9300      	str	r3, [sp, #0]
 8009bcc:	b182      	cbz	r2, 8009bf0 <__ieee754_pow+0xd8>
 8009bce:	e05d      	b.n	8009c8c <__ieee754_pow+0x174>
 8009bd0:	2a00      	cmp	r2, #0
 8009bd2:	d159      	bne.n	8009c88 <__ieee754_pow+0x170>
 8009bd4:	f1c3 0314 	rsb	r3, r3, #20
 8009bd8:	fa46 f103 	asr.w	r1, r6, r3
 8009bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8009be0:	42b3      	cmp	r3, r6
 8009be2:	f040 8475 	bne.w	800a4d0 <__ieee754_pow+0x9b8>
 8009be6:	f001 0101 	and.w	r1, r1, #1
 8009bea:	f1c1 0302 	rsb	r3, r1, #2
 8009bee:	9300      	str	r3, [sp, #0]
 8009bf0:	4b58      	ldr	r3, [pc, #352]	; (8009d54 <__ieee754_pow+0x23c>)
 8009bf2:	429e      	cmp	r6, r3
 8009bf4:	d132      	bne.n	8009c5c <__ieee754_pow+0x144>
 8009bf6:	2f00      	cmp	r7, #0
 8009bf8:	f280 8466 	bge.w	800a4c8 <__ieee754_pow+0x9b0>
 8009bfc:	4955      	ldr	r1, [pc, #340]	; (8009d54 <__ieee754_pow+0x23c>)
 8009bfe:	4642      	mov	r2, r8
 8009c00:	464b      	mov	r3, r9
 8009c02:	2000      	movs	r0, #0
 8009c04:	f7f6 fdfa 	bl	80007fc <__aeabi_ddiv>
 8009c08:	e7a3      	b.n	8009b52 <__ieee754_pow+0x3a>
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	9300      	str	r3, [sp, #0]
 8009c0e:	2a00      	cmp	r2, #0
 8009c10:	d13c      	bne.n	8009c8c <__ieee754_pow+0x174>
 8009c12:	4b4e      	ldr	r3, [pc, #312]	; (8009d4c <__ieee754_pow+0x234>)
 8009c14:	429e      	cmp	r6, r3
 8009c16:	d1eb      	bne.n	8009bf0 <__ieee754_pow+0xd8>
 8009c18:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009c1c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009c20:	ea53 030a 	orrs.w	r3, r3, sl
 8009c24:	f000 8444 	beq.w	800a4b0 <__ieee754_pow+0x998>
 8009c28:	4b4b      	ldr	r3, [pc, #300]	; (8009d58 <__ieee754_pow+0x240>)
 8009c2a:	429c      	cmp	r4, r3
 8009c2c:	dd0b      	ble.n	8009c46 <__ieee754_pow+0x12e>
 8009c2e:	2f00      	cmp	r7, #0
 8009c30:	f2c0 8444 	blt.w	800a4bc <__ieee754_pow+0x9a4>
 8009c34:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8009c38:	4658      	mov	r0, fp
 8009c3a:	4661      	mov	r1, ip
 8009c3c:	b013      	add	sp, #76	; 0x4c
 8009c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c42:	2302      	movs	r3, #2
 8009c44:	e7e2      	b.n	8009c0c <__ieee754_pow+0xf4>
 8009c46:	2f00      	cmp	r7, #0
 8009c48:	f04f 0b00 	mov.w	fp, #0
 8009c4c:	f04f 0c00 	mov.w	ip, #0
 8009c50:	daf2      	bge.n	8009c38 <__ieee754_pow+0x120>
 8009c52:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8009c56:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8009c5a:	e7ed      	b.n	8009c38 <__ieee754_pow+0x120>
 8009c5c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8009c60:	d106      	bne.n	8009c70 <__ieee754_pow+0x158>
 8009c62:	4642      	mov	r2, r8
 8009c64:	464b      	mov	r3, r9
 8009c66:	4640      	mov	r0, r8
 8009c68:	4649      	mov	r1, r9
 8009c6a:	f7f6 fc9d 	bl	80005a8 <__aeabi_dmul>
 8009c6e:	e770      	b.n	8009b52 <__ieee754_pow+0x3a>
 8009c70:	4b3a      	ldr	r3, [pc, #232]	; (8009d5c <__ieee754_pow+0x244>)
 8009c72:	429f      	cmp	r7, r3
 8009c74:	d10a      	bne.n	8009c8c <__ieee754_pow+0x174>
 8009c76:	2d00      	cmp	r5, #0
 8009c78:	db08      	blt.n	8009c8c <__ieee754_pow+0x174>
 8009c7a:	4640      	mov	r0, r8
 8009c7c:	4649      	mov	r1, r9
 8009c7e:	b013      	add	sp, #76	; 0x4c
 8009c80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c84:	f000 bd06 	b.w	800a694 <__ieee754_sqrt>
 8009c88:	2300      	movs	r3, #0
 8009c8a:	9300      	str	r3, [sp, #0]
 8009c8c:	4640      	mov	r0, r8
 8009c8e:	4649      	mov	r1, r9
 8009c90:	f000 fc54 	bl	800a53c <fabs>
 8009c94:	4683      	mov	fp, r0
 8009c96:	468c      	mov	ip, r1
 8009c98:	f1ba 0f00 	cmp.w	sl, #0
 8009c9c:	d128      	bne.n	8009cf0 <__ieee754_pow+0x1d8>
 8009c9e:	b124      	cbz	r4, 8009caa <__ieee754_pow+0x192>
 8009ca0:	4b2c      	ldr	r3, [pc, #176]	; (8009d54 <__ieee754_pow+0x23c>)
 8009ca2:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d122      	bne.n	8009cf0 <__ieee754_pow+0x1d8>
 8009caa:	2f00      	cmp	r7, #0
 8009cac:	da07      	bge.n	8009cbe <__ieee754_pow+0x1a6>
 8009cae:	465a      	mov	r2, fp
 8009cb0:	4663      	mov	r3, ip
 8009cb2:	4928      	ldr	r1, [pc, #160]	; (8009d54 <__ieee754_pow+0x23c>)
 8009cb4:	2000      	movs	r0, #0
 8009cb6:	f7f6 fda1 	bl	80007fc <__aeabi_ddiv>
 8009cba:	4683      	mov	fp, r0
 8009cbc:	468c      	mov	ip, r1
 8009cbe:	2d00      	cmp	r5, #0
 8009cc0:	daba      	bge.n	8009c38 <__ieee754_pow+0x120>
 8009cc2:	9b00      	ldr	r3, [sp, #0]
 8009cc4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009cc8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009ccc:	431c      	orrs	r4, r3
 8009cce:	d108      	bne.n	8009ce2 <__ieee754_pow+0x1ca>
 8009cd0:	465a      	mov	r2, fp
 8009cd2:	4663      	mov	r3, ip
 8009cd4:	4658      	mov	r0, fp
 8009cd6:	4661      	mov	r1, ip
 8009cd8:	f7f6 faae 	bl	8000238 <__aeabi_dsub>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	460b      	mov	r3, r1
 8009ce0:	e790      	b.n	8009c04 <__ieee754_pow+0xec>
 8009ce2:	9b00      	ldr	r3, [sp, #0]
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d1a7      	bne.n	8009c38 <__ieee754_pow+0x120>
 8009ce8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8009cec:	469c      	mov	ip, r3
 8009cee:	e7a3      	b.n	8009c38 <__ieee754_pow+0x120>
 8009cf0:	0feb      	lsrs	r3, r5, #31
 8009cf2:	3b01      	subs	r3, #1
 8009cf4:	930c      	str	r3, [sp, #48]	; 0x30
 8009cf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009cf8:	9b00      	ldr	r3, [sp, #0]
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	d104      	bne.n	8009d08 <__ieee754_pow+0x1f0>
 8009cfe:	4642      	mov	r2, r8
 8009d00:	464b      	mov	r3, r9
 8009d02:	4640      	mov	r0, r8
 8009d04:	4649      	mov	r1, r9
 8009d06:	e7e7      	b.n	8009cd8 <__ieee754_pow+0x1c0>
 8009d08:	4b15      	ldr	r3, [pc, #84]	; (8009d60 <__ieee754_pow+0x248>)
 8009d0a:	429e      	cmp	r6, r3
 8009d0c:	f340 80f2 	ble.w	8009ef4 <__ieee754_pow+0x3dc>
 8009d10:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009d14:	429e      	cmp	r6, r3
 8009d16:	4b10      	ldr	r3, [pc, #64]	; (8009d58 <__ieee754_pow+0x240>)
 8009d18:	dd09      	ble.n	8009d2e <__ieee754_pow+0x216>
 8009d1a:	429c      	cmp	r4, r3
 8009d1c:	dc0c      	bgt.n	8009d38 <__ieee754_pow+0x220>
 8009d1e:	2f00      	cmp	r7, #0
 8009d20:	da0c      	bge.n	8009d3c <__ieee754_pow+0x224>
 8009d22:	2000      	movs	r0, #0
 8009d24:	b013      	add	sp, #76	; 0x4c
 8009d26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d2a:	f000 bcae 	b.w	800a68a <__math_oflow>
 8009d2e:	429c      	cmp	r4, r3
 8009d30:	dbf5      	blt.n	8009d1e <__ieee754_pow+0x206>
 8009d32:	4b08      	ldr	r3, [pc, #32]	; (8009d54 <__ieee754_pow+0x23c>)
 8009d34:	429c      	cmp	r4, r3
 8009d36:	dd15      	ble.n	8009d64 <__ieee754_pow+0x24c>
 8009d38:	2f00      	cmp	r7, #0
 8009d3a:	dcf2      	bgt.n	8009d22 <__ieee754_pow+0x20a>
 8009d3c:	2000      	movs	r0, #0
 8009d3e:	b013      	add	sp, #76	; 0x4c
 8009d40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d44:	f000 bc9c 	b.w	800a680 <__math_uflow>
 8009d48:	fff00000 	.word	0xfff00000
 8009d4c:	7ff00000 	.word	0x7ff00000
 8009d50:	433fffff 	.word	0x433fffff
 8009d54:	3ff00000 	.word	0x3ff00000
 8009d58:	3fefffff 	.word	0x3fefffff
 8009d5c:	3fe00000 	.word	0x3fe00000
 8009d60:	41e00000 	.word	0x41e00000
 8009d64:	4661      	mov	r1, ip
 8009d66:	4b5e      	ldr	r3, [pc, #376]	; (8009ee0 <__ieee754_pow+0x3c8>)
 8009d68:	2200      	movs	r2, #0
 8009d6a:	4658      	mov	r0, fp
 8009d6c:	f7f6 fa64 	bl	8000238 <__aeabi_dsub>
 8009d70:	a353      	add	r3, pc, #332	; (adr r3, 8009ec0 <__ieee754_pow+0x3a8>)
 8009d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d76:	4604      	mov	r4, r0
 8009d78:	460d      	mov	r5, r1
 8009d7a:	f7f6 fc15 	bl	80005a8 <__aeabi_dmul>
 8009d7e:	a352      	add	r3, pc, #328	; (adr r3, 8009ec8 <__ieee754_pow+0x3b0>)
 8009d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d84:	4606      	mov	r6, r0
 8009d86:	460f      	mov	r7, r1
 8009d88:	4620      	mov	r0, r4
 8009d8a:	4629      	mov	r1, r5
 8009d8c:	f7f6 fc0c 	bl	80005a8 <__aeabi_dmul>
 8009d90:	4b54      	ldr	r3, [pc, #336]	; (8009ee4 <__ieee754_pow+0x3cc>)
 8009d92:	4682      	mov	sl, r0
 8009d94:	468b      	mov	fp, r1
 8009d96:	2200      	movs	r2, #0
 8009d98:	4620      	mov	r0, r4
 8009d9a:	4629      	mov	r1, r5
 8009d9c:	f7f6 fc04 	bl	80005a8 <__aeabi_dmul>
 8009da0:	4602      	mov	r2, r0
 8009da2:	460b      	mov	r3, r1
 8009da4:	a14a      	add	r1, pc, #296	; (adr r1, 8009ed0 <__ieee754_pow+0x3b8>)
 8009da6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009daa:	f7f6 fa45 	bl	8000238 <__aeabi_dsub>
 8009dae:	4622      	mov	r2, r4
 8009db0:	462b      	mov	r3, r5
 8009db2:	f7f6 fbf9 	bl	80005a8 <__aeabi_dmul>
 8009db6:	4602      	mov	r2, r0
 8009db8:	460b      	mov	r3, r1
 8009dba:	2000      	movs	r0, #0
 8009dbc:	494a      	ldr	r1, [pc, #296]	; (8009ee8 <__ieee754_pow+0x3d0>)
 8009dbe:	f7f6 fa3b 	bl	8000238 <__aeabi_dsub>
 8009dc2:	4622      	mov	r2, r4
 8009dc4:	462b      	mov	r3, r5
 8009dc6:	4680      	mov	r8, r0
 8009dc8:	4689      	mov	r9, r1
 8009dca:	4620      	mov	r0, r4
 8009dcc:	4629      	mov	r1, r5
 8009dce:	f7f6 fbeb 	bl	80005a8 <__aeabi_dmul>
 8009dd2:	4602      	mov	r2, r0
 8009dd4:	460b      	mov	r3, r1
 8009dd6:	4640      	mov	r0, r8
 8009dd8:	4649      	mov	r1, r9
 8009dda:	f7f6 fbe5 	bl	80005a8 <__aeabi_dmul>
 8009dde:	a33e      	add	r3, pc, #248	; (adr r3, 8009ed8 <__ieee754_pow+0x3c0>)
 8009de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de4:	f7f6 fbe0 	bl	80005a8 <__aeabi_dmul>
 8009de8:	4602      	mov	r2, r0
 8009dea:	460b      	mov	r3, r1
 8009dec:	4650      	mov	r0, sl
 8009dee:	4659      	mov	r1, fp
 8009df0:	f7f6 fa22 	bl	8000238 <__aeabi_dsub>
 8009df4:	4602      	mov	r2, r0
 8009df6:	460b      	mov	r3, r1
 8009df8:	4604      	mov	r4, r0
 8009dfa:	460d      	mov	r5, r1
 8009dfc:	4630      	mov	r0, r6
 8009dfe:	4639      	mov	r1, r7
 8009e00:	f7f6 fa1c 	bl	800023c <__adddf3>
 8009e04:	2000      	movs	r0, #0
 8009e06:	4632      	mov	r2, r6
 8009e08:	463b      	mov	r3, r7
 8009e0a:	4682      	mov	sl, r0
 8009e0c:	468b      	mov	fp, r1
 8009e0e:	f7f6 fa13 	bl	8000238 <__aeabi_dsub>
 8009e12:	4602      	mov	r2, r0
 8009e14:	460b      	mov	r3, r1
 8009e16:	4620      	mov	r0, r4
 8009e18:	4629      	mov	r1, r5
 8009e1a:	f7f6 fa0d 	bl	8000238 <__aeabi_dsub>
 8009e1e:	9b00      	ldr	r3, [sp, #0]
 8009e20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e22:	3b01      	subs	r3, #1
 8009e24:	4313      	orrs	r3, r2
 8009e26:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009e2a:	bf0c      	ite	eq
 8009e2c:	4b2f      	ldreq	r3, [pc, #188]	; (8009eec <__ieee754_pow+0x3d4>)
 8009e2e:	4b2c      	ldrne	r3, [pc, #176]	; (8009ee0 <__ieee754_pow+0x3c8>)
 8009e30:	2600      	movs	r6, #0
 8009e32:	2200      	movs	r2, #0
 8009e34:	e9cd 2300 	strd	r2, r3, [sp]
 8009e38:	4604      	mov	r4, r0
 8009e3a:	460d      	mov	r5, r1
 8009e3c:	4632      	mov	r2, r6
 8009e3e:	463b      	mov	r3, r7
 8009e40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e44:	f7f6 f9f8 	bl	8000238 <__aeabi_dsub>
 8009e48:	4652      	mov	r2, sl
 8009e4a:	465b      	mov	r3, fp
 8009e4c:	f7f6 fbac 	bl	80005a8 <__aeabi_dmul>
 8009e50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e54:	4680      	mov	r8, r0
 8009e56:	4689      	mov	r9, r1
 8009e58:	4620      	mov	r0, r4
 8009e5a:	4629      	mov	r1, r5
 8009e5c:	f7f6 fba4 	bl	80005a8 <__aeabi_dmul>
 8009e60:	4602      	mov	r2, r0
 8009e62:	460b      	mov	r3, r1
 8009e64:	4640      	mov	r0, r8
 8009e66:	4649      	mov	r1, r9
 8009e68:	f7f6 f9e8 	bl	800023c <__adddf3>
 8009e6c:	4632      	mov	r2, r6
 8009e6e:	463b      	mov	r3, r7
 8009e70:	4680      	mov	r8, r0
 8009e72:	4689      	mov	r9, r1
 8009e74:	4650      	mov	r0, sl
 8009e76:	4659      	mov	r1, fp
 8009e78:	f7f6 fb96 	bl	80005a8 <__aeabi_dmul>
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	4604      	mov	r4, r0
 8009e80:	460d      	mov	r5, r1
 8009e82:	4602      	mov	r2, r0
 8009e84:	4649      	mov	r1, r9
 8009e86:	4640      	mov	r0, r8
 8009e88:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009e8c:	f7f6 f9d6 	bl	800023c <__adddf3>
 8009e90:	4b17      	ldr	r3, [pc, #92]	; (8009ef0 <__ieee754_pow+0x3d8>)
 8009e92:	4299      	cmp	r1, r3
 8009e94:	4682      	mov	sl, r0
 8009e96:	460f      	mov	r7, r1
 8009e98:	460e      	mov	r6, r1
 8009e9a:	f340 82e4 	ble.w	800a466 <__ieee754_pow+0x94e>
 8009e9e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009ea2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009ea6:	4303      	orrs	r3, r0
 8009ea8:	f000 81e0 	beq.w	800a26c <__ieee754_pow+0x754>
 8009eac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	f7f6 fdea 	bl	8000a8c <__aeabi_dcmplt>
 8009eb8:	3800      	subs	r0, #0
 8009eba:	bf18      	it	ne
 8009ebc:	2001      	movne	r0, #1
 8009ebe:	e731      	b.n	8009d24 <__ieee754_pow+0x20c>
 8009ec0:	60000000 	.word	0x60000000
 8009ec4:	3ff71547 	.word	0x3ff71547
 8009ec8:	f85ddf44 	.word	0xf85ddf44
 8009ecc:	3e54ae0b 	.word	0x3e54ae0b
 8009ed0:	55555555 	.word	0x55555555
 8009ed4:	3fd55555 	.word	0x3fd55555
 8009ed8:	652b82fe 	.word	0x652b82fe
 8009edc:	3ff71547 	.word	0x3ff71547
 8009ee0:	3ff00000 	.word	0x3ff00000
 8009ee4:	3fd00000 	.word	0x3fd00000
 8009ee8:	3fe00000 	.word	0x3fe00000
 8009eec:	bff00000 	.word	0xbff00000
 8009ef0:	408fffff 	.word	0x408fffff
 8009ef4:	4bd4      	ldr	r3, [pc, #848]	; (800a248 <__ieee754_pow+0x730>)
 8009ef6:	402b      	ands	r3, r5
 8009ef8:	2200      	movs	r2, #0
 8009efa:	b943      	cbnz	r3, 8009f0e <__ieee754_pow+0x3f6>
 8009efc:	4658      	mov	r0, fp
 8009efe:	4bd3      	ldr	r3, [pc, #844]	; (800a24c <__ieee754_pow+0x734>)
 8009f00:	4661      	mov	r1, ip
 8009f02:	f7f6 fb51 	bl	80005a8 <__aeabi_dmul>
 8009f06:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009f0a:	4683      	mov	fp, r0
 8009f0c:	460c      	mov	r4, r1
 8009f0e:	1523      	asrs	r3, r4, #20
 8009f10:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009f14:	4413      	add	r3, r2
 8009f16:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f18:	4bcd      	ldr	r3, [pc, #820]	; (800a250 <__ieee754_pow+0x738>)
 8009f1a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009f1e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009f22:	429c      	cmp	r4, r3
 8009f24:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009f28:	dd08      	ble.n	8009f3c <__ieee754_pow+0x424>
 8009f2a:	4bca      	ldr	r3, [pc, #808]	; (800a254 <__ieee754_pow+0x73c>)
 8009f2c:	429c      	cmp	r4, r3
 8009f2e:	f340 8164 	ble.w	800a1fa <__ieee754_pow+0x6e2>
 8009f32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f34:	3301      	adds	r3, #1
 8009f36:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f38:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009f3c:	2600      	movs	r6, #0
 8009f3e:	00f3      	lsls	r3, r6, #3
 8009f40:	930d      	str	r3, [sp, #52]	; 0x34
 8009f42:	4bc5      	ldr	r3, [pc, #788]	; (800a258 <__ieee754_pow+0x740>)
 8009f44:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009f48:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009f4c:	4658      	mov	r0, fp
 8009f4e:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8009f52:	461a      	mov	r2, r3
 8009f54:	4629      	mov	r1, r5
 8009f56:	4623      	mov	r3, r4
 8009f58:	f7f6 f96e 	bl	8000238 <__aeabi_dsub>
 8009f5c:	46da      	mov	sl, fp
 8009f5e:	4652      	mov	r2, sl
 8009f60:	462b      	mov	r3, r5
 8009f62:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009f66:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009f6a:	f7f6 f967 	bl	800023c <__adddf3>
 8009f6e:	4602      	mov	r2, r0
 8009f70:	460b      	mov	r3, r1
 8009f72:	2000      	movs	r0, #0
 8009f74:	49b9      	ldr	r1, [pc, #740]	; (800a25c <__ieee754_pow+0x744>)
 8009f76:	f7f6 fc41 	bl	80007fc <__aeabi_ddiv>
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009f82:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009f86:	f7f6 fb0f 	bl	80005a8 <__aeabi_dmul>
 8009f8a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009f8e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8009f92:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009f96:	2300      	movs	r3, #0
 8009f98:	9304      	str	r3, [sp, #16]
 8009f9a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009f9e:	46ab      	mov	fp, r5
 8009fa0:	106d      	asrs	r5, r5, #1
 8009fa2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009fa6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009faa:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8009fae:	2200      	movs	r2, #0
 8009fb0:	4640      	mov	r0, r8
 8009fb2:	4649      	mov	r1, r9
 8009fb4:	4614      	mov	r4, r2
 8009fb6:	461d      	mov	r5, r3
 8009fb8:	f7f6 faf6 	bl	80005a8 <__aeabi_dmul>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	460b      	mov	r3, r1
 8009fc0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009fc4:	f7f6 f938 	bl	8000238 <__aeabi_dsub>
 8009fc8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009fcc:	4606      	mov	r6, r0
 8009fce:	460f      	mov	r7, r1
 8009fd0:	4620      	mov	r0, r4
 8009fd2:	4629      	mov	r1, r5
 8009fd4:	f7f6 f930 	bl	8000238 <__aeabi_dsub>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	460b      	mov	r3, r1
 8009fdc:	4650      	mov	r0, sl
 8009fde:	4659      	mov	r1, fp
 8009fe0:	f7f6 f92a 	bl	8000238 <__aeabi_dsub>
 8009fe4:	4642      	mov	r2, r8
 8009fe6:	464b      	mov	r3, r9
 8009fe8:	f7f6 fade 	bl	80005a8 <__aeabi_dmul>
 8009fec:	4602      	mov	r2, r0
 8009fee:	460b      	mov	r3, r1
 8009ff0:	4630      	mov	r0, r6
 8009ff2:	4639      	mov	r1, r7
 8009ff4:	f7f6 f920 	bl	8000238 <__aeabi_dsub>
 8009ff8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009ffc:	f7f6 fad4 	bl	80005a8 <__aeabi_dmul>
 800a000:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a004:	4682      	mov	sl, r0
 800a006:	468b      	mov	fp, r1
 800a008:	4610      	mov	r0, r2
 800a00a:	4619      	mov	r1, r3
 800a00c:	f7f6 facc 	bl	80005a8 <__aeabi_dmul>
 800a010:	a37b      	add	r3, pc, #492	; (adr r3, 800a200 <__ieee754_pow+0x6e8>)
 800a012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a016:	4604      	mov	r4, r0
 800a018:	460d      	mov	r5, r1
 800a01a:	f7f6 fac5 	bl	80005a8 <__aeabi_dmul>
 800a01e:	a37a      	add	r3, pc, #488	; (adr r3, 800a208 <__ieee754_pow+0x6f0>)
 800a020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a024:	f7f6 f90a 	bl	800023c <__adddf3>
 800a028:	4622      	mov	r2, r4
 800a02a:	462b      	mov	r3, r5
 800a02c:	f7f6 fabc 	bl	80005a8 <__aeabi_dmul>
 800a030:	a377      	add	r3, pc, #476	; (adr r3, 800a210 <__ieee754_pow+0x6f8>)
 800a032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a036:	f7f6 f901 	bl	800023c <__adddf3>
 800a03a:	4622      	mov	r2, r4
 800a03c:	462b      	mov	r3, r5
 800a03e:	f7f6 fab3 	bl	80005a8 <__aeabi_dmul>
 800a042:	a375      	add	r3, pc, #468	; (adr r3, 800a218 <__ieee754_pow+0x700>)
 800a044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a048:	f7f6 f8f8 	bl	800023c <__adddf3>
 800a04c:	4622      	mov	r2, r4
 800a04e:	462b      	mov	r3, r5
 800a050:	f7f6 faaa 	bl	80005a8 <__aeabi_dmul>
 800a054:	a372      	add	r3, pc, #456	; (adr r3, 800a220 <__ieee754_pow+0x708>)
 800a056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a05a:	f7f6 f8ef 	bl	800023c <__adddf3>
 800a05e:	4622      	mov	r2, r4
 800a060:	462b      	mov	r3, r5
 800a062:	f7f6 faa1 	bl	80005a8 <__aeabi_dmul>
 800a066:	a370      	add	r3, pc, #448	; (adr r3, 800a228 <__ieee754_pow+0x710>)
 800a068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06c:	f7f6 f8e6 	bl	800023c <__adddf3>
 800a070:	4622      	mov	r2, r4
 800a072:	4606      	mov	r6, r0
 800a074:	460f      	mov	r7, r1
 800a076:	462b      	mov	r3, r5
 800a078:	4620      	mov	r0, r4
 800a07a:	4629      	mov	r1, r5
 800a07c:	f7f6 fa94 	bl	80005a8 <__aeabi_dmul>
 800a080:	4602      	mov	r2, r0
 800a082:	460b      	mov	r3, r1
 800a084:	4630      	mov	r0, r6
 800a086:	4639      	mov	r1, r7
 800a088:	f7f6 fa8e 	bl	80005a8 <__aeabi_dmul>
 800a08c:	4642      	mov	r2, r8
 800a08e:	4604      	mov	r4, r0
 800a090:	460d      	mov	r5, r1
 800a092:	464b      	mov	r3, r9
 800a094:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a098:	f7f6 f8d0 	bl	800023c <__adddf3>
 800a09c:	4652      	mov	r2, sl
 800a09e:	465b      	mov	r3, fp
 800a0a0:	f7f6 fa82 	bl	80005a8 <__aeabi_dmul>
 800a0a4:	4622      	mov	r2, r4
 800a0a6:	462b      	mov	r3, r5
 800a0a8:	f7f6 f8c8 	bl	800023c <__adddf3>
 800a0ac:	4642      	mov	r2, r8
 800a0ae:	4606      	mov	r6, r0
 800a0b0:	460f      	mov	r7, r1
 800a0b2:	464b      	mov	r3, r9
 800a0b4:	4640      	mov	r0, r8
 800a0b6:	4649      	mov	r1, r9
 800a0b8:	f7f6 fa76 	bl	80005a8 <__aeabi_dmul>
 800a0bc:	4602      	mov	r2, r0
 800a0be:	460b      	mov	r3, r1
 800a0c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a0c4:	4b66      	ldr	r3, [pc, #408]	; (800a260 <__ieee754_pow+0x748>)
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	f7f6 f8b8 	bl	800023c <__adddf3>
 800a0cc:	4632      	mov	r2, r6
 800a0ce:	463b      	mov	r3, r7
 800a0d0:	f7f6 f8b4 	bl	800023c <__adddf3>
 800a0d4:	2400      	movs	r4, #0
 800a0d6:	460d      	mov	r5, r1
 800a0d8:	4622      	mov	r2, r4
 800a0da:	460b      	mov	r3, r1
 800a0dc:	4640      	mov	r0, r8
 800a0de:	4649      	mov	r1, r9
 800a0e0:	f7f6 fa62 	bl	80005a8 <__aeabi_dmul>
 800a0e4:	4b5e      	ldr	r3, [pc, #376]	; (800a260 <__ieee754_pow+0x748>)
 800a0e6:	4680      	mov	r8, r0
 800a0e8:	4689      	mov	r9, r1
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	4620      	mov	r0, r4
 800a0ee:	4629      	mov	r1, r5
 800a0f0:	f7f6 f8a2 	bl	8000238 <__aeabi_dsub>
 800a0f4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a0f8:	f7f6 f89e 	bl	8000238 <__aeabi_dsub>
 800a0fc:	4602      	mov	r2, r0
 800a0fe:	460b      	mov	r3, r1
 800a100:	4630      	mov	r0, r6
 800a102:	4639      	mov	r1, r7
 800a104:	f7f6 f898 	bl	8000238 <__aeabi_dsub>
 800a108:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a10c:	f7f6 fa4c 	bl	80005a8 <__aeabi_dmul>
 800a110:	4622      	mov	r2, r4
 800a112:	4606      	mov	r6, r0
 800a114:	460f      	mov	r7, r1
 800a116:	462b      	mov	r3, r5
 800a118:	4650      	mov	r0, sl
 800a11a:	4659      	mov	r1, fp
 800a11c:	f7f6 fa44 	bl	80005a8 <__aeabi_dmul>
 800a120:	4602      	mov	r2, r0
 800a122:	460b      	mov	r3, r1
 800a124:	4630      	mov	r0, r6
 800a126:	4639      	mov	r1, r7
 800a128:	f7f6 f888 	bl	800023c <__adddf3>
 800a12c:	4606      	mov	r6, r0
 800a12e:	460f      	mov	r7, r1
 800a130:	4602      	mov	r2, r0
 800a132:	460b      	mov	r3, r1
 800a134:	4640      	mov	r0, r8
 800a136:	4649      	mov	r1, r9
 800a138:	f7f6 f880 	bl	800023c <__adddf3>
 800a13c:	2400      	movs	r4, #0
 800a13e:	a33c      	add	r3, pc, #240	; (adr r3, 800a230 <__ieee754_pow+0x718>)
 800a140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a144:	4620      	mov	r0, r4
 800a146:	460d      	mov	r5, r1
 800a148:	f7f6 fa2e 	bl	80005a8 <__aeabi_dmul>
 800a14c:	4642      	mov	r2, r8
 800a14e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a152:	464b      	mov	r3, r9
 800a154:	4620      	mov	r0, r4
 800a156:	4629      	mov	r1, r5
 800a158:	f7f6 f86e 	bl	8000238 <__aeabi_dsub>
 800a15c:	4602      	mov	r2, r0
 800a15e:	460b      	mov	r3, r1
 800a160:	4630      	mov	r0, r6
 800a162:	4639      	mov	r1, r7
 800a164:	f7f6 f868 	bl	8000238 <__aeabi_dsub>
 800a168:	a333      	add	r3, pc, #204	; (adr r3, 800a238 <__ieee754_pow+0x720>)
 800a16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16e:	f7f6 fa1b 	bl	80005a8 <__aeabi_dmul>
 800a172:	a333      	add	r3, pc, #204	; (adr r3, 800a240 <__ieee754_pow+0x728>)
 800a174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a178:	4606      	mov	r6, r0
 800a17a:	460f      	mov	r7, r1
 800a17c:	4620      	mov	r0, r4
 800a17e:	4629      	mov	r1, r5
 800a180:	f7f6 fa12 	bl	80005a8 <__aeabi_dmul>
 800a184:	4602      	mov	r2, r0
 800a186:	460b      	mov	r3, r1
 800a188:	4630      	mov	r0, r6
 800a18a:	4639      	mov	r1, r7
 800a18c:	f7f6 f856 	bl	800023c <__adddf3>
 800a190:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a192:	4b34      	ldr	r3, [pc, #208]	; (800a264 <__ieee754_pow+0x74c>)
 800a194:	4413      	add	r3, r2
 800a196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a19a:	f7f6 f84f 	bl	800023c <__adddf3>
 800a19e:	4680      	mov	r8, r0
 800a1a0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a1a2:	4689      	mov	r9, r1
 800a1a4:	f7f6 f996 	bl	80004d4 <__aeabi_i2d>
 800a1a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a1aa:	4b2f      	ldr	r3, [pc, #188]	; (800a268 <__ieee754_pow+0x750>)
 800a1ac:	4413      	add	r3, r2
 800a1ae:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a1b2:	4604      	mov	r4, r0
 800a1b4:	460d      	mov	r5, r1
 800a1b6:	4642      	mov	r2, r8
 800a1b8:	464b      	mov	r3, r9
 800a1ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a1be:	f7f6 f83d 	bl	800023c <__adddf3>
 800a1c2:	4632      	mov	r2, r6
 800a1c4:	463b      	mov	r3, r7
 800a1c6:	f7f6 f839 	bl	800023c <__adddf3>
 800a1ca:	4622      	mov	r2, r4
 800a1cc:	462b      	mov	r3, r5
 800a1ce:	f7f6 f835 	bl	800023c <__adddf3>
 800a1d2:	2000      	movs	r0, #0
 800a1d4:	4622      	mov	r2, r4
 800a1d6:	462b      	mov	r3, r5
 800a1d8:	4682      	mov	sl, r0
 800a1da:	468b      	mov	fp, r1
 800a1dc:	f7f6 f82c 	bl	8000238 <__aeabi_dsub>
 800a1e0:	4632      	mov	r2, r6
 800a1e2:	463b      	mov	r3, r7
 800a1e4:	f7f6 f828 	bl	8000238 <__aeabi_dsub>
 800a1e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a1ec:	f7f6 f824 	bl	8000238 <__aeabi_dsub>
 800a1f0:	4602      	mov	r2, r0
 800a1f2:	460b      	mov	r3, r1
 800a1f4:	4640      	mov	r0, r8
 800a1f6:	4649      	mov	r1, r9
 800a1f8:	e60f      	b.n	8009e1a <__ieee754_pow+0x302>
 800a1fa:	2601      	movs	r6, #1
 800a1fc:	e69f      	b.n	8009f3e <__ieee754_pow+0x426>
 800a1fe:	bf00      	nop
 800a200:	4a454eef 	.word	0x4a454eef
 800a204:	3fca7e28 	.word	0x3fca7e28
 800a208:	93c9db65 	.word	0x93c9db65
 800a20c:	3fcd864a 	.word	0x3fcd864a
 800a210:	a91d4101 	.word	0xa91d4101
 800a214:	3fd17460 	.word	0x3fd17460
 800a218:	518f264d 	.word	0x518f264d
 800a21c:	3fd55555 	.word	0x3fd55555
 800a220:	db6fabff 	.word	0xdb6fabff
 800a224:	3fdb6db6 	.word	0x3fdb6db6
 800a228:	33333303 	.word	0x33333303
 800a22c:	3fe33333 	.word	0x3fe33333
 800a230:	e0000000 	.word	0xe0000000
 800a234:	3feec709 	.word	0x3feec709
 800a238:	dc3a03fd 	.word	0xdc3a03fd
 800a23c:	3feec709 	.word	0x3feec709
 800a240:	145b01f5 	.word	0x145b01f5
 800a244:	be3e2fe0 	.word	0xbe3e2fe0
 800a248:	7ff00000 	.word	0x7ff00000
 800a24c:	43400000 	.word	0x43400000
 800a250:	0003988e 	.word	0x0003988e
 800a254:	000bb679 	.word	0x000bb679
 800a258:	0800b238 	.word	0x0800b238
 800a25c:	3ff00000 	.word	0x3ff00000
 800a260:	40080000 	.word	0x40080000
 800a264:	0800b258 	.word	0x0800b258
 800a268:	0800b248 	.word	0x0800b248
 800a26c:	a39c      	add	r3, pc, #624	; (adr r3, 800a4e0 <__ieee754_pow+0x9c8>)
 800a26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a272:	4640      	mov	r0, r8
 800a274:	4649      	mov	r1, r9
 800a276:	f7f5 ffe1 	bl	800023c <__adddf3>
 800a27a:	4622      	mov	r2, r4
 800a27c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a280:	462b      	mov	r3, r5
 800a282:	4650      	mov	r0, sl
 800a284:	4639      	mov	r1, r7
 800a286:	f7f5 ffd7 	bl	8000238 <__aeabi_dsub>
 800a28a:	4602      	mov	r2, r0
 800a28c:	460b      	mov	r3, r1
 800a28e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a292:	f7f6 fc19 	bl	8000ac8 <__aeabi_dcmpgt>
 800a296:	2800      	cmp	r0, #0
 800a298:	f47f ae08 	bne.w	8009eac <__ieee754_pow+0x394>
 800a29c:	4aa2      	ldr	r2, [pc, #648]	; (800a528 <__ieee754_pow+0xa10>)
 800a29e:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	f340 80ff 	ble.w	800a4a6 <__ieee754_pow+0x98e>
 800a2a8:	151b      	asrs	r3, r3, #20
 800a2aa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a2ae:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a2b2:	fa4a fa03 	asr.w	sl, sl, r3
 800a2b6:	44b2      	add	sl, r6
 800a2b8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a2bc:	489b      	ldr	r0, [pc, #620]	; (800a52c <__ieee754_pow+0xa14>)
 800a2be:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a2c2:	4108      	asrs	r0, r1
 800a2c4:	ea00 030a 	and.w	r3, r0, sl
 800a2c8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a2cc:	f1c1 0114 	rsb	r1, r1, #20
 800a2d0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a2d4:	fa4a fa01 	asr.w	sl, sl, r1
 800a2d8:	2e00      	cmp	r6, #0
 800a2da:	f04f 0200 	mov.w	r2, #0
 800a2de:	4620      	mov	r0, r4
 800a2e0:	4629      	mov	r1, r5
 800a2e2:	bfb8      	it	lt
 800a2e4:	f1ca 0a00 	rsblt	sl, sl, #0
 800a2e8:	f7f5 ffa6 	bl	8000238 <__aeabi_dsub>
 800a2ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2f0:	4642      	mov	r2, r8
 800a2f2:	464b      	mov	r3, r9
 800a2f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2f8:	f7f5 ffa0 	bl	800023c <__adddf3>
 800a2fc:	2400      	movs	r4, #0
 800a2fe:	a37a      	add	r3, pc, #488	; (adr r3, 800a4e8 <__ieee754_pow+0x9d0>)
 800a300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a304:	4620      	mov	r0, r4
 800a306:	460d      	mov	r5, r1
 800a308:	f7f6 f94e 	bl	80005a8 <__aeabi_dmul>
 800a30c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a310:	4606      	mov	r6, r0
 800a312:	460f      	mov	r7, r1
 800a314:	4620      	mov	r0, r4
 800a316:	4629      	mov	r1, r5
 800a318:	f7f5 ff8e 	bl	8000238 <__aeabi_dsub>
 800a31c:	4602      	mov	r2, r0
 800a31e:	460b      	mov	r3, r1
 800a320:	4640      	mov	r0, r8
 800a322:	4649      	mov	r1, r9
 800a324:	f7f5 ff88 	bl	8000238 <__aeabi_dsub>
 800a328:	a371      	add	r3, pc, #452	; (adr r3, 800a4f0 <__ieee754_pow+0x9d8>)
 800a32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32e:	f7f6 f93b 	bl	80005a8 <__aeabi_dmul>
 800a332:	a371      	add	r3, pc, #452	; (adr r3, 800a4f8 <__ieee754_pow+0x9e0>)
 800a334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a338:	4680      	mov	r8, r0
 800a33a:	4689      	mov	r9, r1
 800a33c:	4620      	mov	r0, r4
 800a33e:	4629      	mov	r1, r5
 800a340:	f7f6 f932 	bl	80005a8 <__aeabi_dmul>
 800a344:	4602      	mov	r2, r0
 800a346:	460b      	mov	r3, r1
 800a348:	4640      	mov	r0, r8
 800a34a:	4649      	mov	r1, r9
 800a34c:	f7f5 ff76 	bl	800023c <__adddf3>
 800a350:	4604      	mov	r4, r0
 800a352:	460d      	mov	r5, r1
 800a354:	4602      	mov	r2, r0
 800a356:	460b      	mov	r3, r1
 800a358:	4630      	mov	r0, r6
 800a35a:	4639      	mov	r1, r7
 800a35c:	f7f5 ff6e 	bl	800023c <__adddf3>
 800a360:	4632      	mov	r2, r6
 800a362:	463b      	mov	r3, r7
 800a364:	4680      	mov	r8, r0
 800a366:	4689      	mov	r9, r1
 800a368:	f7f5 ff66 	bl	8000238 <__aeabi_dsub>
 800a36c:	4602      	mov	r2, r0
 800a36e:	460b      	mov	r3, r1
 800a370:	4620      	mov	r0, r4
 800a372:	4629      	mov	r1, r5
 800a374:	f7f5 ff60 	bl	8000238 <__aeabi_dsub>
 800a378:	4642      	mov	r2, r8
 800a37a:	4606      	mov	r6, r0
 800a37c:	460f      	mov	r7, r1
 800a37e:	464b      	mov	r3, r9
 800a380:	4640      	mov	r0, r8
 800a382:	4649      	mov	r1, r9
 800a384:	f7f6 f910 	bl	80005a8 <__aeabi_dmul>
 800a388:	a35d      	add	r3, pc, #372	; (adr r3, 800a500 <__ieee754_pow+0x9e8>)
 800a38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38e:	4604      	mov	r4, r0
 800a390:	460d      	mov	r5, r1
 800a392:	f7f6 f909 	bl	80005a8 <__aeabi_dmul>
 800a396:	a35c      	add	r3, pc, #368	; (adr r3, 800a508 <__ieee754_pow+0x9f0>)
 800a398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39c:	f7f5 ff4c 	bl	8000238 <__aeabi_dsub>
 800a3a0:	4622      	mov	r2, r4
 800a3a2:	462b      	mov	r3, r5
 800a3a4:	f7f6 f900 	bl	80005a8 <__aeabi_dmul>
 800a3a8:	a359      	add	r3, pc, #356	; (adr r3, 800a510 <__ieee754_pow+0x9f8>)
 800a3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ae:	f7f5 ff45 	bl	800023c <__adddf3>
 800a3b2:	4622      	mov	r2, r4
 800a3b4:	462b      	mov	r3, r5
 800a3b6:	f7f6 f8f7 	bl	80005a8 <__aeabi_dmul>
 800a3ba:	a357      	add	r3, pc, #348	; (adr r3, 800a518 <__ieee754_pow+0xa00>)
 800a3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c0:	f7f5 ff3a 	bl	8000238 <__aeabi_dsub>
 800a3c4:	4622      	mov	r2, r4
 800a3c6:	462b      	mov	r3, r5
 800a3c8:	f7f6 f8ee 	bl	80005a8 <__aeabi_dmul>
 800a3cc:	a354      	add	r3, pc, #336	; (adr r3, 800a520 <__ieee754_pow+0xa08>)
 800a3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d2:	f7f5 ff33 	bl	800023c <__adddf3>
 800a3d6:	4622      	mov	r2, r4
 800a3d8:	462b      	mov	r3, r5
 800a3da:	f7f6 f8e5 	bl	80005a8 <__aeabi_dmul>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	4640      	mov	r0, r8
 800a3e4:	4649      	mov	r1, r9
 800a3e6:	f7f5 ff27 	bl	8000238 <__aeabi_dsub>
 800a3ea:	4604      	mov	r4, r0
 800a3ec:	460d      	mov	r5, r1
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	4640      	mov	r0, r8
 800a3f4:	4649      	mov	r1, r9
 800a3f6:	f7f6 f8d7 	bl	80005a8 <__aeabi_dmul>
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a400:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a404:	4620      	mov	r0, r4
 800a406:	4629      	mov	r1, r5
 800a408:	f7f5 ff16 	bl	8000238 <__aeabi_dsub>
 800a40c:	4602      	mov	r2, r0
 800a40e:	460b      	mov	r3, r1
 800a410:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a414:	f7f6 f9f2 	bl	80007fc <__aeabi_ddiv>
 800a418:	4632      	mov	r2, r6
 800a41a:	4604      	mov	r4, r0
 800a41c:	460d      	mov	r5, r1
 800a41e:	463b      	mov	r3, r7
 800a420:	4640      	mov	r0, r8
 800a422:	4649      	mov	r1, r9
 800a424:	f7f6 f8c0 	bl	80005a8 <__aeabi_dmul>
 800a428:	4632      	mov	r2, r6
 800a42a:	463b      	mov	r3, r7
 800a42c:	f7f5 ff06 	bl	800023c <__adddf3>
 800a430:	4602      	mov	r2, r0
 800a432:	460b      	mov	r3, r1
 800a434:	4620      	mov	r0, r4
 800a436:	4629      	mov	r1, r5
 800a438:	f7f5 fefe 	bl	8000238 <__aeabi_dsub>
 800a43c:	4642      	mov	r2, r8
 800a43e:	464b      	mov	r3, r9
 800a440:	f7f5 fefa 	bl	8000238 <__aeabi_dsub>
 800a444:	4602      	mov	r2, r0
 800a446:	460b      	mov	r3, r1
 800a448:	2000      	movs	r0, #0
 800a44a:	4939      	ldr	r1, [pc, #228]	; (800a530 <__ieee754_pow+0xa18>)
 800a44c:	f7f5 fef4 	bl	8000238 <__aeabi_dsub>
 800a450:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a454:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a458:	da28      	bge.n	800a4ac <__ieee754_pow+0x994>
 800a45a:	4652      	mov	r2, sl
 800a45c:	f000 f874 	bl	800a548 <scalbn>
 800a460:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a464:	e401      	b.n	8009c6a <__ieee754_pow+0x152>
 800a466:	4b33      	ldr	r3, [pc, #204]	; (800a534 <__ieee754_pow+0xa1c>)
 800a468:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800a46c:	429f      	cmp	r7, r3
 800a46e:	f77f af15 	ble.w	800a29c <__ieee754_pow+0x784>
 800a472:	4b31      	ldr	r3, [pc, #196]	; (800a538 <__ieee754_pow+0xa20>)
 800a474:	440b      	add	r3, r1
 800a476:	4303      	orrs	r3, r0
 800a478:	d009      	beq.n	800a48e <__ieee754_pow+0x976>
 800a47a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a47e:	2200      	movs	r2, #0
 800a480:	2300      	movs	r3, #0
 800a482:	f7f6 fb03 	bl	8000a8c <__aeabi_dcmplt>
 800a486:	3800      	subs	r0, #0
 800a488:	bf18      	it	ne
 800a48a:	2001      	movne	r0, #1
 800a48c:	e457      	b.n	8009d3e <__ieee754_pow+0x226>
 800a48e:	4622      	mov	r2, r4
 800a490:	462b      	mov	r3, r5
 800a492:	f7f5 fed1 	bl	8000238 <__aeabi_dsub>
 800a496:	4642      	mov	r2, r8
 800a498:	464b      	mov	r3, r9
 800a49a:	f7f6 fb0b 	bl	8000ab4 <__aeabi_dcmpge>
 800a49e:	2800      	cmp	r0, #0
 800a4a0:	f43f aefc 	beq.w	800a29c <__ieee754_pow+0x784>
 800a4a4:	e7e9      	b.n	800a47a <__ieee754_pow+0x962>
 800a4a6:	f04f 0a00 	mov.w	sl, #0
 800a4aa:	e721      	b.n	800a2f0 <__ieee754_pow+0x7d8>
 800a4ac:	4621      	mov	r1, r4
 800a4ae:	e7d7      	b.n	800a460 <__ieee754_pow+0x948>
 800a4b0:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a530 <__ieee754_pow+0xa18>
 800a4b4:	f04f 0b00 	mov.w	fp, #0
 800a4b8:	f7ff bbbe 	b.w	8009c38 <__ieee754_pow+0x120>
 800a4bc:	f04f 0b00 	mov.w	fp, #0
 800a4c0:	f04f 0c00 	mov.w	ip, #0
 800a4c4:	f7ff bbb8 	b.w	8009c38 <__ieee754_pow+0x120>
 800a4c8:	4640      	mov	r0, r8
 800a4ca:	4649      	mov	r1, r9
 800a4cc:	f7ff bb41 	b.w	8009b52 <__ieee754_pow+0x3a>
 800a4d0:	9200      	str	r2, [sp, #0]
 800a4d2:	f7ff bb8d 	b.w	8009bf0 <__ieee754_pow+0xd8>
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	f7ff bb77 	b.w	8009bca <__ieee754_pow+0xb2>
 800a4dc:	f3af 8000 	nop.w
 800a4e0:	652b82fe 	.word	0x652b82fe
 800a4e4:	3c971547 	.word	0x3c971547
 800a4e8:	00000000 	.word	0x00000000
 800a4ec:	3fe62e43 	.word	0x3fe62e43
 800a4f0:	fefa39ef 	.word	0xfefa39ef
 800a4f4:	3fe62e42 	.word	0x3fe62e42
 800a4f8:	0ca86c39 	.word	0x0ca86c39
 800a4fc:	be205c61 	.word	0xbe205c61
 800a500:	72bea4d0 	.word	0x72bea4d0
 800a504:	3e663769 	.word	0x3e663769
 800a508:	c5d26bf1 	.word	0xc5d26bf1
 800a50c:	3ebbbd41 	.word	0x3ebbbd41
 800a510:	af25de2c 	.word	0xaf25de2c
 800a514:	3f11566a 	.word	0x3f11566a
 800a518:	16bebd93 	.word	0x16bebd93
 800a51c:	3f66c16c 	.word	0x3f66c16c
 800a520:	5555553e 	.word	0x5555553e
 800a524:	3fc55555 	.word	0x3fc55555
 800a528:	3fe00000 	.word	0x3fe00000
 800a52c:	fff00000 	.word	0xfff00000
 800a530:	3ff00000 	.word	0x3ff00000
 800a534:	4090cbff 	.word	0x4090cbff
 800a538:	3f6f3400 	.word	0x3f6f3400

0800a53c <fabs>:
 800a53c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a540:	4619      	mov	r1, r3
 800a542:	4770      	bx	lr
 800a544:	0000      	movs	r0, r0
	...

0800a548 <scalbn>:
 800a548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a54a:	4616      	mov	r6, r2
 800a54c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a550:	4604      	mov	r4, r0
 800a552:	460d      	mov	r5, r1
 800a554:	460b      	mov	r3, r1
 800a556:	b992      	cbnz	r2, 800a57e <scalbn+0x36>
 800a558:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a55c:	4303      	orrs	r3, r0
 800a55e:	d03c      	beq.n	800a5da <scalbn+0x92>
 800a560:	4b31      	ldr	r3, [pc, #196]	; (800a628 <scalbn+0xe0>)
 800a562:	2200      	movs	r2, #0
 800a564:	f7f6 f820 	bl	80005a8 <__aeabi_dmul>
 800a568:	4b30      	ldr	r3, [pc, #192]	; (800a62c <scalbn+0xe4>)
 800a56a:	429e      	cmp	r6, r3
 800a56c:	4604      	mov	r4, r0
 800a56e:	460d      	mov	r5, r1
 800a570:	da0f      	bge.n	800a592 <scalbn+0x4a>
 800a572:	a329      	add	r3, pc, #164	; (adr r3, 800a618 <scalbn+0xd0>)
 800a574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a578:	f7f6 f816 	bl	80005a8 <__aeabi_dmul>
 800a57c:	e006      	b.n	800a58c <scalbn+0x44>
 800a57e:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800a582:	42ba      	cmp	r2, r7
 800a584:	d109      	bne.n	800a59a <scalbn+0x52>
 800a586:	4602      	mov	r2, r0
 800a588:	f7f5 fe58 	bl	800023c <__adddf3>
 800a58c:	4604      	mov	r4, r0
 800a58e:	460d      	mov	r5, r1
 800a590:	e023      	b.n	800a5da <scalbn+0x92>
 800a592:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a596:	460b      	mov	r3, r1
 800a598:	3a36      	subs	r2, #54	; 0x36
 800a59a:	f24c 3150 	movw	r1, #50000	; 0xc350
 800a59e:	428e      	cmp	r6, r1
 800a5a0:	dd0e      	ble.n	800a5c0 <scalbn+0x78>
 800a5a2:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800a5a6:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800a5aa:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800a5ae:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800a5b2:	a31b      	add	r3, pc, #108	; (adr r3, 800a620 <scalbn+0xd8>)
 800a5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b8:	481d      	ldr	r0, [pc, #116]	; (800a630 <scalbn+0xe8>)
 800a5ba:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800a5be:	e7db      	b.n	800a578 <scalbn+0x30>
 800a5c0:	4432      	add	r2, r6
 800a5c2:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a5c6:	428a      	cmp	r2, r1
 800a5c8:	dceb      	bgt.n	800a5a2 <scalbn+0x5a>
 800a5ca:	2a00      	cmp	r2, #0
 800a5cc:	dd08      	ble.n	800a5e0 <scalbn+0x98>
 800a5ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a5d2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a5d6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a5da:	4620      	mov	r0, r4
 800a5dc:	4629      	mov	r1, r5
 800a5de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5e0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a5e4:	da0c      	bge.n	800a600 <scalbn+0xb8>
 800a5e6:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800a5ea:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800a5ee:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800a5f2:	a309      	add	r3, pc, #36	; (adr r3, 800a618 <scalbn+0xd0>)
 800a5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f8:	480e      	ldr	r0, [pc, #56]	; (800a634 <scalbn+0xec>)
 800a5fa:	f041 011f 	orr.w	r1, r1, #31
 800a5fe:	e7bb      	b.n	800a578 <scalbn+0x30>
 800a600:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a604:	3236      	adds	r2, #54	; 0x36
 800a606:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a60a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a60e:	4620      	mov	r0, r4
 800a610:	4b09      	ldr	r3, [pc, #36]	; (800a638 <scalbn+0xf0>)
 800a612:	4629      	mov	r1, r5
 800a614:	2200      	movs	r2, #0
 800a616:	e7af      	b.n	800a578 <scalbn+0x30>
 800a618:	c2f8f359 	.word	0xc2f8f359
 800a61c:	01a56e1f 	.word	0x01a56e1f
 800a620:	8800759c 	.word	0x8800759c
 800a624:	7e37e43c 	.word	0x7e37e43c
 800a628:	43500000 	.word	0x43500000
 800a62c:	ffff3cb0 	.word	0xffff3cb0
 800a630:	8800759c 	.word	0x8800759c
 800a634:	c2f8f359 	.word	0xc2f8f359
 800a638:	3c900000 	.word	0x3c900000

0800a63c <with_errno>:
 800a63c:	b570      	push	{r4, r5, r6, lr}
 800a63e:	4604      	mov	r4, r0
 800a640:	460d      	mov	r5, r1
 800a642:	4616      	mov	r6, r2
 800a644:	f7fe f9f6 	bl	8008a34 <__errno>
 800a648:	4629      	mov	r1, r5
 800a64a:	6006      	str	r6, [r0, #0]
 800a64c:	4620      	mov	r0, r4
 800a64e:	bd70      	pop	{r4, r5, r6, pc}

0800a650 <xflow>:
 800a650:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a652:	4615      	mov	r5, r2
 800a654:	461c      	mov	r4, r3
 800a656:	b180      	cbz	r0, 800a67a <xflow+0x2a>
 800a658:	4610      	mov	r0, r2
 800a65a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a65e:	e9cd 0100 	strd	r0, r1, [sp]
 800a662:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a666:	4628      	mov	r0, r5
 800a668:	4621      	mov	r1, r4
 800a66a:	f7f5 ff9d 	bl	80005a8 <__aeabi_dmul>
 800a66e:	2222      	movs	r2, #34	; 0x22
 800a670:	b003      	add	sp, #12
 800a672:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a676:	f7ff bfe1 	b.w	800a63c <with_errno>
 800a67a:	4610      	mov	r0, r2
 800a67c:	4619      	mov	r1, r3
 800a67e:	e7ee      	b.n	800a65e <xflow+0xe>

0800a680 <__math_uflow>:
 800a680:	2200      	movs	r2, #0
 800a682:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a686:	f7ff bfe3 	b.w	800a650 <xflow>

0800a68a <__math_oflow>:
 800a68a:	2200      	movs	r2, #0
 800a68c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a690:	f7ff bfde 	b.w	800a650 <xflow>

0800a694 <__ieee754_sqrt>:
 800a694:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 800a838 <__ieee754_sqrt+0x1a4>
 800a698:	ea3c 0c01 	bics.w	ip, ip, r1
 800a69c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a0:	460a      	mov	r2, r1
 800a6a2:	460b      	mov	r3, r1
 800a6a4:	4606      	mov	r6, r0
 800a6a6:	460d      	mov	r5, r1
 800a6a8:	4604      	mov	r4, r0
 800a6aa:	d10e      	bne.n	800a6ca <__ieee754_sqrt+0x36>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	f7f5 ff7b 	bl	80005a8 <__aeabi_dmul>
 800a6b2:	4602      	mov	r2, r0
 800a6b4:	460b      	mov	r3, r1
 800a6b6:	4630      	mov	r0, r6
 800a6b8:	4629      	mov	r1, r5
 800a6ba:	f7f5 fdbf 	bl	800023c <__adddf3>
 800a6be:	4606      	mov	r6, r0
 800a6c0:	460d      	mov	r5, r1
 800a6c2:	4630      	mov	r0, r6
 800a6c4:	4629      	mov	r1, r5
 800a6c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ca:	2900      	cmp	r1, #0
 800a6cc:	dc0d      	bgt.n	800a6ea <__ieee754_sqrt+0x56>
 800a6ce:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800a6d2:	ea5c 0c00 	orrs.w	ip, ip, r0
 800a6d6:	d0f4      	beq.n	800a6c2 <__ieee754_sqrt+0x2e>
 800a6d8:	b139      	cbz	r1, 800a6ea <__ieee754_sqrt+0x56>
 800a6da:	4602      	mov	r2, r0
 800a6dc:	f7f5 fdac 	bl	8000238 <__aeabi_dsub>
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	460b      	mov	r3, r1
 800a6e4:	f7f6 f88a 	bl	80007fc <__aeabi_ddiv>
 800a6e8:	e7e9      	b.n	800a6be <__ieee754_sqrt+0x2a>
 800a6ea:	1512      	asrs	r2, r2, #20
 800a6ec:	f000 8089 	beq.w	800a802 <__ieee754_sqrt+0x16e>
 800a6f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6f4:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a6f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a6fc:	07d2      	lsls	r2, r2, #31
 800a6fe:	bf5c      	itt	pl
 800a700:	005b      	lslpl	r3, r3, #1
 800a702:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800a706:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a70a:	bf58      	it	pl
 800a70c:	0064      	lslpl	r4, r4, #1
 800a70e:	2500      	movs	r5, #0
 800a710:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800a714:	0062      	lsls	r2, r4, #1
 800a716:	1076      	asrs	r6, r6, #1
 800a718:	2016      	movs	r0, #22
 800a71a:	4629      	mov	r1, r5
 800a71c:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 800a720:	190f      	adds	r7, r1, r4
 800a722:	429f      	cmp	r7, r3
 800a724:	bfde      	ittt	le
 800a726:	1bdb      	suble	r3, r3, r7
 800a728:	1939      	addle	r1, r7, r4
 800a72a:	192d      	addle	r5, r5, r4
 800a72c:	005b      	lsls	r3, r3, #1
 800a72e:	3801      	subs	r0, #1
 800a730:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a734:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a738:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a73c:	d1f0      	bne.n	800a720 <__ieee754_sqrt+0x8c>
 800a73e:	4604      	mov	r4, r0
 800a740:	2720      	movs	r7, #32
 800a742:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800a746:	428b      	cmp	r3, r1
 800a748:	eb0c 0e00 	add.w	lr, ip, r0
 800a74c:	dc02      	bgt.n	800a754 <__ieee754_sqrt+0xc0>
 800a74e:	d113      	bne.n	800a778 <__ieee754_sqrt+0xe4>
 800a750:	4596      	cmp	lr, r2
 800a752:	d811      	bhi.n	800a778 <__ieee754_sqrt+0xe4>
 800a754:	f1be 0f00 	cmp.w	lr, #0
 800a758:	eb0e 000c 	add.w	r0, lr, ip
 800a75c:	da56      	bge.n	800a80c <__ieee754_sqrt+0x178>
 800a75e:	2800      	cmp	r0, #0
 800a760:	db54      	blt.n	800a80c <__ieee754_sqrt+0x178>
 800a762:	f101 0801 	add.w	r8, r1, #1
 800a766:	1a5b      	subs	r3, r3, r1
 800a768:	4596      	cmp	lr, r2
 800a76a:	bf88      	it	hi
 800a76c:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a770:	eba2 020e 	sub.w	r2, r2, lr
 800a774:	4464      	add	r4, ip
 800a776:	4641      	mov	r1, r8
 800a778:	005b      	lsls	r3, r3, #1
 800a77a:	3f01      	subs	r7, #1
 800a77c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a780:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a784:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a788:	d1dd      	bne.n	800a746 <__ieee754_sqrt+0xb2>
 800a78a:	4313      	orrs	r3, r2
 800a78c:	d01b      	beq.n	800a7c6 <__ieee754_sqrt+0x132>
 800a78e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800a83c <__ieee754_sqrt+0x1a8>
 800a792:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800a840 <__ieee754_sqrt+0x1ac>
 800a796:	e9da 0100 	ldrd	r0, r1, [sl]
 800a79a:	e9db 2300 	ldrd	r2, r3, [fp]
 800a79e:	f7f5 fd4b 	bl	8000238 <__aeabi_dsub>
 800a7a2:	e9da 8900 	ldrd	r8, r9, [sl]
 800a7a6:	4602      	mov	r2, r0
 800a7a8:	460b      	mov	r3, r1
 800a7aa:	4640      	mov	r0, r8
 800a7ac:	4649      	mov	r1, r9
 800a7ae:	f7f6 f977 	bl	8000aa0 <__aeabi_dcmple>
 800a7b2:	b140      	cbz	r0, 800a7c6 <__ieee754_sqrt+0x132>
 800a7b4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a7b8:	e9da 0100 	ldrd	r0, r1, [sl]
 800a7bc:	e9db 2300 	ldrd	r2, r3, [fp]
 800a7c0:	d126      	bne.n	800a810 <__ieee754_sqrt+0x17c>
 800a7c2:	3501      	adds	r5, #1
 800a7c4:	463c      	mov	r4, r7
 800a7c6:	106b      	asrs	r3, r5, #1
 800a7c8:	0864      	lsrs	r4, r4, #1
 800a7ca:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a7ce:	07ea      	lsls	r2, r5, #31
 800a7d0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a7d4:	bf48      	it	mi
 800a7d6:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 800a7da:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800a7de:	4620      	mov	r0, r4
 800a7e0:	e76d      	b.n	800a6be <__ieee754_sqrt+0x2a>
 800a7e2:	0ae3      	lsrs	r3, r4, #11
 800a7e4:	3915      	subs	r1, #21
 800a7e6:	0564      	lsls	r4, r4, #21
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d0fa      	beq.n	800a7e2 <__ieee754_sqrt+0x14e>
 800a7ec:	02d8      	lsls	r0, r3, #11
 800a7ee:	d50a      	bpl.n	800a806 <__ieee754_sqrt+0x172>
 800a7f0:	f1c2 0020 	rsb	r0, r2, #32
 800a7f4:	fa24 f000 	lsr.w	r0, r4, r0
 800a7f8:	1e55      	subs	r5, r2, #1
 800a7fa:	4094      	lsls	r4, r2
 800a7fc:	4303      	orrs	r3, r0
 800a7fe:	1b4a      	subs	r2, r1, r5
 800a800:	e776      	b.n	800a6f0 <__ieee754_sqrt+0x5c>
 800a802:	4611      	mov	r1, r2
 800a804:	e7f0      	b.n	800a7e8 <__ieee754_sqrt+0x154>
 800a806:	005b      	lsls	r3, r3, #1
 800a808:	3201      	adds	r2, #1
 800a80a:	e7ef      	b.n	800a7ec <__ieee754_sqrt+0x158>
 800a80c:	4688      	mov	r8, r1
 800a80e:	e7aa      	b.n	800a766 <__ieee754_sqrt+0xd2>
 800a810:	f7f5 fd14 	bl	800023c <__adddf3>
 800a814:	e9da 8900 	ldrd	r8, r9, [sl]
 800a818:	4602      	mov	r2, r0
 800a81a:	460b      	mov	r3, r1
 800a81c:	4640      	mov	r0, r8
 800a81e:	4649      	mov	r1, r9
 800a820:	f7f6 f934 	bl	8000a8c <__aeabi_dcmplt>
 800a824:	b120      	cbz	r0, 800a830 <__ieee754_sqrt+0x19c>
 800a826:	1ca1      	adds	r1, r4, #2
 800a828:	bf08      	it	eq
 800a82a:	3501      	addeq	r5, #1
 800a82c:	3402      	adds	r4, #2
 800a82e:	e7ca      	b.n	800a7c6 <__ieee754_sqrt+0x132>
 800a830:	3401      	adds	r4, #1
 800a832:	f024 0401 	bic.w	r4, r4, #1
 800a836:	e7c6      	b.n	800a7c6 <__ieee754_sqrt+0x132>
 800a838:	7ff00000 	.word	0x7ff00000
 800a83c:	200000a8 	.word	0x200000a8
 800a840:	200000b0 	.word	0x200000b0

0800a844 <_init>:
 800a844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a846:	bf00      	nop
 800a848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a84a:	bc08      	pop	{r3}
 800a84c:	469e      	mov	lr, r3
 800a84e:	4770      	bx	lr

0800a850 <_fini>:
 800a850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a852:	bf00      	nop
 800a854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a856:	bc08      	pop	{r3}
 800a858:	469e      	mov	lr, r3
 800a85a:	4770      	bx	lr

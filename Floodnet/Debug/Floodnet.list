
Floodnet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c144  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ab8  0800c288  0800c288  0001c288  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd40  0800cd40  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd40  0800cd40  0001cd40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd48  0800cd48  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd48  0800cd48  0001cd48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd4c  0800cd4c  0001cd4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800cd50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000149c  20000074  0800cdc4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001510  0800cdc4  00021510  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000269ce  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052d4  00000000  00000000  00046a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002428  00000000  00000000  0004bd40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002210  00000000  00000000  0004e168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002204d  00000000  00000000  00050378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bd4e  00000000  00000000  000723c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c35b9  00000000  00000000  0009e113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001616cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000aa00  00000000  00000000  0016171c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000074 	.word	0x20000074
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c26c 	.word	0x0800c26c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000078 	.word	0x20000078
 800017c:	0800c26c 	.word	0x0800c26c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2uiz>:
 8000b08:	004a      	lsls	r2, r1, #1
 8000b0a:	d211      	bcs.n	8000b30 <__aeabi_d2uiz+0x28>
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d211      	bcs.n	8000b36 <__aeabi_d2uiz+0x2e>
 8000b12:	d50d      	bpl.n	8000b30 <__aeabi_d2uiz+0x28>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d40e      	bmi.n	8000b3c <__aeabi_d2uiz+0x34>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_d2uiz+0x3a>
 8000b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0000 	mov.w	r0, #0
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_frsub>:
 8000b48:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b4c:	e002      	b.n	8000b54 <__addsf3>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_fsub>:
 8000b50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b54 <__addsf3>:
 8000b54:	0042      	lsls	r2, r0, #1
 8000b56:	bf1f      	itttt	ne
 8000b58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b5c:	ea92 0f03 	teqne	r2, r3
 8000b60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b68:	d06a      	beq.n	8000c40 <__addsf3+0xec>
 8000b6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b72:	bfc1      	itttt	gt
 8000b74:	18d2      	addgt	r2, r2, r3
 8000b76:	4041      	eorgt	r1, r0
 8000b78:	4048      	eorgt	r0, r1
 8000b7a:	4041      	eorgt	r1, r0
 8000b7c:	bfb8      	it	lt
 8000b7e:	425b      	neglt	r3, r3
 8000b80:	2b19      	cmp	r3, #25
 8000b82:	bf88      	it	hi
 8000b84:	4770      	bxhi	lr
 8000b86:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b9e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4249      	negne	r1, r1
 8000ba6:	ea92 0f03 	teq	r2, r3
 8000baa:	d03f      	beq.n	8000c2c <__addsf3+0xd8>
 8000bac:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bb4:	eb10 000c 	adds.w	r0, r0, ip
 8000bb8:	f1c3 0320 	rsb	r3, r3, #32
 8000bbc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bc4:	d502      	bpl.n	8000bcc <__addsf3+0x78>
 8000bc6:	4249      	negs	r1, r1
 8000bc8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bcc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd0:	d313      	bcc.n	8000bfa <__addsf3+0xa6>
 8000bd2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bd6:	d306      	bcc.n	8000be6 <__addsf3+0x92>
 8000bd8:	0840      	lsrs	r0, r0, #1
 8000bda:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bde:	f102 0201 	add.w	r2, r2, #1
 8000be2:	2afe      	cmp	r2, #254	; 0xfe
 8000be4:	d251      	bcs.n	8000c8a <__addsf3+0x136>
 8000be6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bee:	bf08      	it	eq
 8000bf0:	f020 0001 	biceq.w	r0, r0, #1
 8000bf4:	ea40 0003 	orr.w	r0, r0, r3
 8000bf8:	4770      	bx	lr
 8000bfa:	0049      	lsls	r1, r1, #1
 8000bfc:	eb40 0000 	adc.w	r0, r0, r0
 8000c00:	3a01      	subs	r2, #1
 8000c02:	bf28      	it	cs
 8000c04:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c08:	d2ed      	bcs.n	8000be6 <__addsf3+0x92>
 8000c0a:	fab0 fc80 	clz	ip, r0
 8000c0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c12:	ebb2 020c 	subs.w	r2, r2, ip
 8000c16:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c1a:	bfaa      	itet	ge
 8000c1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c20:	4252      	neglt	r2, r2
 8000c22:	4318      	orrge	r0, r3
 8000c24:	bfbc      	itt	lt
 8000c26:	40d0      	lsrlt	r0, r2
 8000c28:	4318      	orrlt	r0, r3
 8000c2a:	4770      	bx	lr
 8000c2c:	f092 0f00 	teq	r2, #0
 8000c30:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c34:	bf06      	itte	eq
 8000c36:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c3a:	3201      	addeq	r2, #1
 8000c3c:	3b01      	subne	r3, #1
 8000c3e:	e7b5      	b.n	8000bac <__addsf3+0x58>
 8000c40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c48:	bf18      	it	ne
 8000c4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c4e:	d021      	beq.n	8000c94 <__addsf3+0x140>
 8000c50:	ea92 0f03 	teq	r2, r3
 8000c54:	d004      	beq.n	8000c60 <__addsf3+0x10c>
 8000c56:	f092 0f00 	teq	r2, #0
 8000c5a:	bf08      	it	eq
 8000c5c:	4608      	moveq	r0, r1
 8000c5e:	4770      	bx	lr
 8000c60:	ea90 0f01 	teq	r0, r1
 8000c64:	bf1c      	itt	ne
 8000c66:	2000      	movne	r0, #0
 8000c68:	4770      	bxne	lr
 8000c6a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c6e:	d104      	bne.n	8000c7a <__addsf3+0x126>
 8000c70:	0040      	lsls	r0, r0, #1
 8000c72:	bf28      	it	cs
 8000c74:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c78:	4770      	bx	lr
 8000c7a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c7e:	bf3c      	itt	cc
 8000c80:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bxcc	lr
 8000c86:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c8a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c92:	4770      	bx	lr
 8000c94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c98:	bf16      	itet	ne
 8000c9a:	4608      	movne	r0, r1
 8000c9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca0:	4601      	movne	r1, r0
 8000ca2:	0242      	lsls	r2, r0, #9
 8000ca4:	bf06      	itte	eq
 8000ca6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000caa:	ea90 0f01 	teqeq	r0, r1
 8000cae:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cb2:	4770      	bx	lr

08000cb4 <__aeabi_ui2f>:
 8000cb4:	f04f 0300 	mov.w	r3, #0
 8000cb8:	e004      	b.n	8000cc4 <__aeabi_i2f+0x8>
 8000cba:	bf00      	nop

08000cbc <__aeabi_i2f>:
 8000cbc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc0:	bf48      	it	mi
 8000cc2:	4240      	negmi	r0, r0
 8000cc4:	ea5f 0c00 	movs.w	ip, r0
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd0:	4601      	mov	r1, r0
 8000cd2:	f04f 0000 	mov.w	r0, #0
 8000cd6:	e01c      	b.n	8000d12 <__aeabi_l2f+0x2a>

08000cd8 <__aeabi_ul2f>:
 8000cd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cdc:	bf08      	it	eq
 8000cde:	4770      	bxeq	lr
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	e00a      	b.n	8000cfc <__aeabi_l2f+0x14>
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_l2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cf4:	d502      	bpl.n	8000cfc <__aeabi_l2f+0x14>
 8000cf6:	4240      	negs	r0, r0
 8000cf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cfc:	ea5f 0c01 	movs.w	ip, r1
 8000d00:	bf02      	ittt	eq
 8000d02:	4684      	moveq	ip, r0
 8000d04:	4601      	moveq	r1, r0
 8000d06:	2000      	moveq	r0, #0
 8000d08:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d0c:	bf08      	it	eq
 8000d0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d12:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d16:	fabc f28c 	clz	r2, ip
 8000d1a:	3a08      	subs	r2, #8
 8000d1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d20:	db10      	blt.n	8000d44 <__aeabi_l2f+0x5c>
 8000d22:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d26:	4463      	add	r3, ip
 8000d28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d34:	fa20 f202 	lsr.w	r2, r0, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	f020 0001 	biceq.w	r0, r0, #1
 8000d42:	4770      	bx	lr
 8000d44:	f102 0220 	add.w	r2, r2, #32
 8000d48:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d54:	fa21 f202 	lsr.w	r2, r1, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d62:	4770      	bx	lr

08000d64 <__aeabi_f2uiz>:
 8000d64:	0042      	lsls	r2, r0, #1
 8000d66:	d20e      	bcs.n	8000d86 <__aeabi_f2uiz+0x22>
 8000d68:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d6c:	d30b      	bcc.n	8000d86 <__aeabi_f2uiz+0x22>
 8000d6e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d72:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d76:	d409      	bmi.n	8000d8c <__aeabi_f2uiz+0x28>
 8000d78:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d80:	fa23 f002 	lsr.w	r0, r3, r2
 8000d84:	4770      	bx	lr
 8000d86:	f04f 0000 	mov.w	r0, #0
 8000d8a:	4770      	bx	lr
 8000d8c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d90:	d101      	bne.n	8000d96 <__aeabi_f2uiz+0x32>
 8000d92:	0242      	lsls	r2, r0, #9
 8000d94:	d102      	bne.n	8000d9c <__aeabi_f2uiz+0x38>
 8000d96:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9a:	4770      	bx	lr
 8000d9c:	f04f 0000 	mov.w	r0, #0
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop

08000da4 <__aeabi_uldivmod>:
 8000da4:	b953      	cbnz	r3, 8000dbc <__aeabi_uldivmod+0x18>
 8000da6:	b94a      	cbnz	r2, 8000dbc <__aeabi_uldivmod+0x18>
 8000da8:	2900      	cmp	r1, #0
 8000daa:	bf08      	it	eq
 8000dac:	2800      	cmpeq	r0, #0
 8000dae:	bf1c      	itt	ne
 8000db0:	f04f 31ff 	movne.w	r1, #4294967295
 8000db4:	f04f 30ff 	movne.w	r0, #4294967295
 8000db8:	f000 b974 	b.w	80010a4 <__aeabi_idiv0>
 8000dbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dc4:	f000 f806 	bl	8000dd4 <__udivmoddi4>
 8000dc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dd0:	b004      	add	sp, #16
 8000dd2:	4770      	bx	lr

08000dd4 <__udivmoddi4>:
 8000dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd8:	9e08      	ldr	r6, [sp, #32]
 8000dda:	460d      	mov	r5, r1
 8000ddc:	4604      	mov	r4, r0
 8000dde:	4688      	mov	r8, r1
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d14d      	bne.n	8000e80 <__udivmoddi4+0xac>
 8000de4:	428a      	cmp	r2, r1
 8000de6:	4694      	mov	ip, r2
 8000de8:	d968      	bls.n	8000ebc <__udivmoddi4+0xe8>
 8000dea:	fab2 f282 	clz	r2, r2
 8000dee:	b152      	cbz	r2, 8000e06 <__udivmoddi4+0x32>
 8000df0:	fa01 f302 	lsl.w	r3, r1, r2
 8000df4:	f1c2 0120 	rsb	r1, r2, #32
 8000df8:	fa20 f101 	lsr.w	r1, r0, r1
 8000dfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e00:	ea41 0803 	orr.w	r8, r1, r3
 8000e04:	4094      	lsls	r4, r2
 8000e06:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000e0a:	0c21      	lsrs	r1, r4, #16
 8000e0c:	fbb8 fef5 	udiv	lr, r8, r5
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	fb05 831e 	mls	r3, r5, lr, r8
 8000e18:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e1c:	fb0e f107 	mul.w	r1, lr, r7
 8000e20:	4299      	cmp	r1, r3
 8000e22:	d90b      	bls.n	8000e3c <__udivmoddi4+0x68>
 8000e24:	eb1c 0303 	adds.w	r3, ip, r3
 8000e28:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000e2c:	f080 811e 	bcs.w	800106c <__udivmoddi4+0x298>
 8000e30:	4299      	cmp	r1, r3
 8000e32:	f240 811b 	bls.w	800106c <__udivmoddi4+0x298>
 8000e36:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb3 f0f5 	udiv	r0, r3, r5
 8000e44:	fb05 3310 	mls	r3, r5, r0, r3
 8000e48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e4c:	fb00 f707 	mul.w	r7, r0, r7
 8000e50:	42a7      	cmp	r7, r4
 8000e52:	d90a      	bls.n	8000e6a <__udivmoddi4+0x96>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5c:	f080 8108 	bcs.w	8001070 <__udivmoddi4+0x29c>
 8000e60:	42a7      	cmp	r7, r4
 8000e62:	f240 8105 	bls.w	8001070 <__udivmoddi4+0x29c>
 8000e66:	4464      	add	r4, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	1be4      	subs	r4, r4, r7
 8000e6c:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000e70:	2100      	movs	r1, #0
 8000e72:	b11e      	cbz	r6, 8000e7c <__udivmoddi4+0xa8>
 8000e74:	40d4      	lsrs	r4, r2
 8000e76:	2300      	movs	r3, #0
 8000e78:	e9c6 4300 	strd	r4, r3, [r6]
 8000e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e80:	428b      	cmp	r3, r1
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0xc2>
 8000e84:	2e00      	cmp	r6, #0
 8000e86:	f000 80ee 	beq.w	8001066 <__udivmoddi4+0x292>
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	e9c6 0500 	strd	r0, r5, [r6]
 8000e90:	4608      	mov	r0, r1
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	fab3 f183 	clz	r1, r3
 8000e9a:	2900      	cmp	r1, #0
 8000e9c:	d14a      	bne.n	8000f34 <__udivmoddi4+0x160>
 8000e9e:	42ab      	cmp	r3, r5
 8000ea0:	d302      	bcc.n	8000ea8 <__udivmoddi4+0xd4>
 8000ea2:	4282      	cmp	r2, r0
 8000ea4:	f200 80f9 	bhi.w	800109a <__udivmoddi4+0x2c6>
 8000ea8:	1a84      	subs	r4, r0, r2
 8000eaa:	eb65 0303 	sbc.w	r3, r5, r3
 8000eae:	2001      	movs	r0, #1
 8000eb0:	4698      	mov	r8, r3
 8000eb2:	2e00      	cmp	r6, #0
 8000eb4:	d0e2      	beq.n	8000e7c <__udivmoddi4+0xa8>
 8000eb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000eba:	e7df      	b.n	8000e7c <__udivmoddi4+0xa8>
 8000ebc:	b902      	cbnz	r2, 8000ec0 <__udivmoddi4+0xec>
 8000ebe:	deff      	udf	#255	; 0xff
 8000ec0:	fab2 f282 	clz	r2, r2
 8000ec4:	2a00      	cmp	r2, #0
 8000ec6:	f040 8091 	bne.w	8000fec <__udivmoddi4+0x218>
 8000eca:	eba1 050c 	sub.w	r5, r1, ip
 8000ece:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed2:	fa1f fe8c 	uxth.w	lr, ip
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	fbb5 f3f7 	udiv	r3, r5, r7
 8000edc:	fb07 5013 	mls	r0, r7, r3, r5
 8000ee0:	0c25      	lsrs	r5, r4, #16
 8000ee2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000ee6:	fb0e f003 	mul.w	r0, lr, r3
 8000eea:	42a8      	cmp	r0, r5
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x12c>
 8000eee:	eb1c 0505 	adds.w	r5, ip, r5
 8000ef2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ef6:	d202      	bcs.n	8000efe <__udivmoddi4+0x12a>
 8000ef8:	42a8      	cmp	r0, r5
 8000efa:	f200 80cb 	bhi.w	8001094 <__udivmoddi4+0x2c0>
 8000efe:	4643      	mov	r3, r8
 8000f00:	1a2d      	subs	r5, r5, r0
 8000f02:	b2a4      	uxth	r4, r4
 8000f04:	fbb5 f0f7 	udiv	r0, r5, r7
 8000f08:	fb07 5510 	mls	r5, r7, r0, r5
 8000f0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f10:	fb0e fe00 	mul.w	lr, lr, r0
 8000f14:	45a6      	cmp	lr, r4
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x156>
 8000f18:	eb1c 0404 	adds.w	r4, ip, r4
 8000f1c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f20:	d202      	bcs.n	8000f28 <__udivmoddi4+0x154>
 8000f22:	45a6      	cmp	lr, r4
 8000f24:	f200 80bb 	bhi.w	800109e <__udivmoddi4+0x2ca>
 8000f28:	4628      	mov	r0, r5
 8000f2a:	eba4 040e 	sub.w	r4, r4, lr
 8000f2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f32:	e79e      	b.n	8000e72 <__udivmoddi4+0x9e>
 8000f34:	f1c1 0720 	rsb	r7, r1, #32
 8000f38:	408b      	lsls	r3, r1
 8000f3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f42:	fa20 f407 	lsr.w	r4, r0, r7
 8000f46:	fa05 f301 	lsl.w	r3, r5, r1
 8000f4a:	431c      	orrs	r4, r3
 8000f4c:	40fd      	lsrs	r5, r7
 8000f4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f52:	fa00 f301 	lsl.w	r3, r0, r1
 8000f56:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f5a:	0c20      	lsrs	r0, r4, #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fb09 5518 	mls	r5, r9, r8, r5
 8000f64:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000f68:	fb08 f00e 	mul.w	r0, r8, lr
 8000f6c:	42a8      	cmp	r0, r5
 8000f6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f72:	d90b      	bls.n	8000f8c <__udivmoddi4+0x1b8>
 8000f74:	eb1c 0505 	adds.w	r5, ip, r5
 8000f78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f7c:	f080 8088 	bcs.w	8001090 <__udivmoddi4+0x2bc>
 8000f80:	42a8      	cmp	r0, r5
 8000f82:	f240 8085 	bls.w	8001090 <__udivmoddi4+0x2bc>
 8000f86:	f1a8 0802 	sub.w	r8, r8, #2
 8000f8a:	4465      	add	r5, ip
 8000f8c:	1a2d      	subs	r5, r5, r0
 8000f8e:	b2a4      	uxth	r4, r4
 8000f90:	fbb5 f0f9 	udiv	r0, r5, r9
 8000f94:	fb09 5510 	mls	r5, r9, r0, r5
 8000f98:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000f9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fa0:	45ae      	cmp	lr, r5
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x1e2>
 8000fa4:	eb1c 0505 	adds.w	r5, ip, r5
 8000fa8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fac:	d26c      	bcs.n	8001088 <__udivmoddi4+0x2b4>
 8000fae:	45ae      	cmp	lr, r5
 8000fb0:	d96a      	bls.n	8001088 <__udivmoddi4+0x2b4>
 8000fb2:	3802      	subs	r0, #2
 8000fb4:	4465      	add	r5, ip
 8000fb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fba:	fba0 9402 	umull	r9, r4, r0, r2
 8000fbe:	eba5 050e 	sub.w	r5, r5, lr
 8000fc2:	42a5      	cmp	r5, r4
 8000fc4:	46c8      	mov	r8, r9
 8000fc6:	46a6      	mov	lr, r4
 8000fc8:	d356      	bcc.n	8001078 <__udivmoddi4+0x2a4>
 8000fca:	d053      	beq.n	8001074 <__udivmoddi4+0x2a0>
 8000fcc:	b15e      	cbz	r6, 8000fe6 <__udivmoddi4+0x212>
 8000fce:	ebb3 0208 	subs.w	r2, r3, r8
 8000fd2:	eb65 050e 	sbc.w	r5, r5, lr
 8000fd6:	fa05 f707 	lsl.w	r7, r5, r7
 8000fda:	fa22 f301 	lsr.w	r3, r2, r1
 8000fde:	40cd      	lsrs	r5, r1
 8000fe0:	431f      	orrs	r7, r3
 8000fe2:	e9c6 7500 	strd	r7, r5, [r6]
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fec:	f1c2 0320 	rsb	r3, r2, #32
 8000ff0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ff4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ff8:	fa25 f303 	lsr.w	r3, r5, r3
 8000ffc:	4095      	lsls	r5, r2
 8000ffe:	430d      	orrs	r5, r1
 8001000:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001004:	fa1f fe8c 	uxth.w	lr, ip
 8001008:	fbb3 f1f7 	udiv	r1, r3, r7
 800100c:	fb07 3011 	mls	r0, r7, r1, r3
 8001010:	0c2b      	lsrs	r3, r5, #16
 8001012:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001016:	fb01 f00e 	mul.w	r0, r1, lr
 800101a:	4298      	cmp	r0, r3
 800101c:	fa04 f402 	lsl.w	r4, r4, r2
 8001020:	d908      	bls.n	8001034 <__udivmoddi4+0x260>
 8001022:	eb1c 0303 	adds.w	r3, ip, r3
 8001026:	f101 38ff 	add.w	r8, r1, #4294967295
 800102a:	d22f      	bcs.n	800108c <__udivmoddi4+0x2b8>
 800102c:	4298      	cmp	r0, r3
 800102e:	d92d      	bls.n	800108c <__udivmoddi4+0x2b8>
 8001030:	3902      	subs	r1, #2
 8001032:	4463      	add	r3, ip
 8001034:	1a1b      	subs	r3, r3, r0
 8001036:	b2ad      	uxth	r5, r5
 8001038:	fbb3 f0f7 	udiv	r0, r3, r7
 800103c:	fb07 3310 	mls	r3, r7, r0, r3
 8001040:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8001044:	fb00 f30e 	mul.w	r3, r0, lr
 8001048:	42ab      	cmp	r3, r5
 800104a:	d908      	bls.n	800105e <__udivmoddi4+0x28a>
 800104c:	eb1c 0505 	adds.w	r5, ip, r5
 8001050:	f100 38ff 	add.w	r8, r0, #4294967295
 8001054:	d216      	bcs.n	8001084 <__udivmoddi4+0x2b0>
 8001056:	42ab      	cmp	r3, r5
 8001058:	d914      	bls.n	8001084 <__udivmoddi4+0x2b0>
 800105a:	3802      	subs	r0, #2
 800105c:	4465      	add	r5, ip
 800105e:	1aed      	subs	r5, r5, r3
 8001060:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001064:	e738      	b.n	8000ed8 <__udivmoddi4+0x104>
 8001066:	4631      	mov	r1, r6
 8001068:	4630      	mov	r0, r6
 800106a:	e707      	b.n	8000e7c <__udivmoddi4+0xa8>
 800106c:	4686      	mov	lr, r0
 800106e:	e6e5      	b.n	8000e3c <__udivmoddi4+0x68>
 8001070:	4618      	mov	r0, r3
 8001072:	e6fa      	b.n	8000e6a <__udivmoddi4+0x96>
 8001074:	454b      	cmp	r3, r9
 8001076:	d2a9      	bcs.n	8000fcc <__udivmoddi4+0x1f8>
 8001078:	ebb9 0802 	subs.w	r8, r9, r2
 800107c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001080:	3801      	subs	r0, #1
 8001082:	e7a3      	b.n	8000fcc <__udivmoddi4+0x1f8>
 8001084:	4640      	mov	r0, r8
 8001086:	e7ea      	b.n	800105e <__udivmoddi4+0x28a>
 8001088:	4620      	mov	r0, r4
 800108a:	e794      	b.n	8000fb6 <__udivmoddi4+0x1e2>
 800108c:	4641      	mov	r1, r8
 800108e:	e7d1      	b.n	8001034 <__udivmoddi4+0x260>
 8001090:	46d0      	mov	r8, sl
 8001092:	e77b      	b.n	8000f8c <__udivmoddi4+0x1b8>
 8001094:	3b02      	subs	r3, #2
 8001096:	4465      	add	r5, ip
 8001098:	e732      	b.n	8000f00 <__udivmoddi4+0x12c>
 800109a:	4608      	mov	r0, r1
 800109c:	e709      	b.n	8000eb2 <__udivmoddi4+0xde>
 800109e:	4464      	add	r4, ip
 80010a0:	3802      	subs	r0, #2
 80010a2:	e742      	b.n	8000f2a <__udivmoddi4+0x156>

080010a4 <__aeabi_idiv0>:
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <ReadADCChannel>:
#define CONVERSION_POLL_TIME 10

static uint16_t ReadADCChannel(uint32_t Channel);

static uint16_t ReadADCChannel(uint32_t Channel)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	uint16_t result;
	if (HAL_ADCEx_Calibration_Start(Get_AdcHandle()) != HAL_OK) {
 80010b0:	f000 fd9e 	bl	8001bf0 <Get_AdcHandle>
 80010b4:	4603      	mov	r3, r0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f002 f8c9 	bl	800324e <HAL_ADCEx_Calibration_Start>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <ReadADCChannel+0x1e>
	    Error_Handler();
 80010c2:	f000 fdcf 	bl	8001c64 <Error_Handler>
	  }
	ADC_ChannelConfTypeDef sConfig = {0};
 80010c6:	f107 0308 	add.w	r3, r7, #8
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
	sConfig.Channel = Channel;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(Get_AdcHandle(), &sConfig) != HAL_OK) {
 80010de:	f000 fd87 	bl	8001bf0 <Get_AdcHandle>
 80010e2:	4602      	mov	r2, r0
 80010e4:	f107 0308 	add.w	r3, r7, #8
 80010e8:	4619      	mov	r1, r3
 80010ea:	4610      	mov	r0, r2
 80010ec:	f001 fdc2 	bl	8002c74 <HAL_ADC_ConfigChannel>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <ReadADCChannel+0x52>
		Error_Handler();
 80010f6:	f000 fdb5 	bl	8001c64 <Error_Handler>
	}
	if (HAL_ADC_Start(Get_AdcHandle()) != HAL_OK) {
 80010fa:	f000 fd79 	bl	8001bf0 <Get_AdcHandle>
 80010fe:	4603      	mov	r3, r0
 8001100:	4618      	mov	r0, r3
 8001102:	f001 fc9b 	bl	8002a3c <HAL_ADC_Start>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <ReadADCChannel+0x68>
		Error_Handler();
 800110c:	f000 fdaa 	bl	8001c64 <Error_Handler>
	}
	HAL_ADC_PollForConversion(Get_AdcHandle(), HAL_MAX_DELAY);
 8001110:	f000 fd6e 	bl	8001bf0 <Get_AdcHandle>
 8001114:	4603      	mov	r3, r0
 8001116:	f04f 31ff 	mov.w	r1, #4294967295
 800111a:	4618      	mov	r0, r3
 800111c:	f001 fd06 	bl	8002b2c <HAL_ADC_PollForConversion>
	HAL_ADC_Stop(Get_AdcHandle());
 8001120:	f000 fd66 	bl	8001bf0 <Get_AdcHandle>
 8001124:	4603      	mov	r3, r0
 8001126:	4618      	mov	r0, r3
 8001128:	f001 fcce 	bl	8002ac8 <HAL_ADC_Stop>
	if((HAL_ADC_GetState(Get_AdcHandle()) & HAL_ADC_STATE_EOC_REG) == HAL_ADC_STATE_EOC_REG)
 800112c:	f000 fd60 	bl	8001bf0 <Get_AdcHandle>
 8001130:	4603      	mov	r3, r0
 8001132:	4618      	mov	r0, r3
 8001134:	f001 fed6 	bl	8002ee4 <HAL_ADC_GetState>
 8001138:	4603      	mov	r3, r0
 800113a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800113e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001142:	d107      	bne.n	8001154 <ReadADCChannel+0xac>
	{
		/*##-5- Get the converted value of regular channel  ######################*/
		result = (uint16_t)HAL_ADC_GetValue(Get_AdcHandle());
 8001144:	f000 fd54 	bl	8001bf0 <Get_AdcHandle>
 8001148:	4603      	mov	r3, r0
 800114a:	4618      	mov	r0, r3
 800114c:	f001 fd85 	bl	8002c5a <HAL_ADC_GetValue>
 8001150:	4603      	mov	r3, r0
 8001152:	82fb      	strh	r3, [r7, #22]
	}
	return result;
 8001154:	8afb      	ldrh	r3, [r7, #22]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <AdcRead_VBatt>:


uint16_t AdcRead_VBatt(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, ADC_SW_Pin, GPIO_PIN_RESET);
 8001164:	2200      	movs	r2, #0
 8001166:	2180      	movs	r1, #128	; 0x80
 8001168:	480a      	ldr	r0, [pc, #40]	; (8001194 <AdcRead_VBatt+0x34>)
 800116a:	f002 fc37 	bl	80039dc <HAL_GPIO_WritePin>
	adcResult = ReadADCChannel(ADC_CHANNEL_2);
 800116e:	480a      	ldr	r0, [pc, #40]	; (8001198 <AdcRead_VBatt+0x38>)
 8001170:	f7ff ff9a 	bl	80010a8 <ReadADCChannel>
 8001174:	4603      	mov	r3, r0
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fd9c 	bl	8000cb4 <__aeabi_ui2f>
 800117c:	4603      	mov	r3, r0
 800117e:	4a07      	ldr	r2, [pc, #28]	; (800119c <AdcRead_VBatt+0x3c>)
 8001180:	6013      	str	r3, [r2, #0]
	return adcResult;
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <AdcRead_VBatt+0x3c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fdec 	bl	8000d64 <__aeabi_f2uiz>
 800118c:	4603      	mov	r3, r0
 800118e:	b29b      	uxth	r3, r3
}
 8001190:	4618      	mov	r0, r3
 8001192:	bd80      	pop	{r7, pc}
 8001194:	48000400 	.word	0x48000400
 8001198:	08000004 	.word	0x08000004
 800119c:	20000090 	.word	0x20000090

080011a0 <commandReadDeviceId>:


char DataBuffer[200];

void commandReadDeviceId(char *data)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b096      	sub	sp, #88	; 0x58
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Read MCU Id, 32-bit access */
  uint8_t i;
  char DeviceId[50];
  uint8_t serialNumber[12]={0};
 80011a8:	2300      	movs	r3, #0
 80011aa:	61bb      	str	r3, [r7, #24]
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = HAL_GetUIDw0();
 80011b6:	f001 f91d 	bl	80023f4 <HAL_GetUIDw0>
 80011ba:	4603      	mov	r3, r0
 80011bc:	617b      	str	r3, [r7, #20]
  deviceserial1 = HAL_GetUIDw1();
 80011be:	f001 f923 	bl	8002408 <HAL_GetUIDw1>
 80011c2:	4603      	mov	r3, r0
 80011c4:	613b      	str	r3, [r7, #16]
  deviceserial2 = HAL_GetUIDw2();
 80011c6:	f001 f929 	bl	800241c <HAL_GetUIDw2>
 80011ca:	4603      	mov	r3, r0
 80011cc:	60fb      	str	r3, [r7, #12]
  memset(serialNumber, 0, 12);
 80011ce:	f107 0318 	add.w	r3, r7, #24
 80011d2:	220c      	movs	r2, #12
 80011d4:	2100      	movs	r1, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f008 fef8 	bl	8009fcc <memset>
 80011dc:	697b      	ldr	r3, [r7, #20]
  memcpy(&serialNumber[0], &deviceserial0, 4);
 80011de:	61bb      	str	r3, [r7, #24]
 80011e0:	693b      	ldr	r3, [r7, #16]
  memcpy(&serialNumber[4], &deviceserial1, 4);
 80011e2:	61fb      	str	r3, [r7, #28]
 80011e4:	68fb      	ldr	r3, [r7, #12]
  memcpy(&serialNumber[8], &deviceserial2, 4);
 80011e6:	623b      	str	r3, [r7, #32]
  snprintf(DeviceId, sizeof(DeviceId), "OK,STDEVICEID,");
 80011e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ec:	4a1e      	ldr	r2, [pc, #120]	; (8001268 <commandReadDeviceId+0xc8>)
 80011ee:	2132      	movs	r1, #50	; 0x32
 80011f0:	4618      	mov	r0, r3
 80011f2:	f008 fef3 	bl	8009fdc <sniprintf>
  serialPutStr(DeviceId);
 80011f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 fa34 	bl	8001668 <serialPutStr>
  for(i=0; i<12; i++)
 8001200:	2300      	movs	r3, #0
 8001202:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001206:	e026      	b.n	8001256 <commandReadDeviceId+0xb6>
  {
    i < 11 ? snprintf(DeviceId, sizeof(DeviceId), "%x", serialNumber[i]) : snprintf(DeviceId, sizeof(DeviceId), "%d\n", serialNumber[i]);
 8001208:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800120c:	2b0a      	cmp	r3, #10
 800120e:	d80c      	bhi.n	800122a <commandReadDeviceId+0x8a>
 8001210:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001214:	3358      	adds	r3, #88	; 0x58
 8001216:	443b      	add	r3, r7
 8001218:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 800121c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001220:	4a12      	ldr	r2, [pc, #72]	; (800126c <commandReadDeviceId+0xcc>)
 8001222:	2132      	movs	r1, #50	; 0x32
 8001224:	f008 feda 	bl	8009fdc <sniprintf>
 8001228:	e00b      	b.n	8001242 <commandReadDeviceId+0xa2>
 800122a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800122e:	3358      	adds	r3, #88	; 0x58
 8001230:	443b      	add	r3, r7
 8001232:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8001236:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800123a:	4a0d      	ldr	r2, [pc, #52]	; (8001270 <commandReadDeviceId+0xd0>)
 800123c:	2132      	movs	r1, #50	; 0x32
 800123e:	f008 fecd 	bl	8009fdc <sniprintf>
    serialPutStr(DeviceId);
 8001242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001246:	4618      	mov	r0, r3
 8001248:	f000 fa0e 	bl	8001668 <serialPutStr>
  for(i=0; i<12; i++)
 800124c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001250:	3301      	adds	r3, #1
 8001252:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001256:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800125a:	2b0b      	cmp	r3, #11
 800125c:	d9d4      	bls.n	8001208 <commandReadDeviceId+0x68>
  }
}
 800125e:	bf00      	nop
 8001260:	bf00      	nop
 8001262:	3758      	adds	r7, #88	; 0x58
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	0800c288 	.word	0x0800c288
 800126c:	0800c298 	.word	0x0800c298
 8001270:	0800c29c 	.word	0x0800c29c

08001274 <commandReadDeviceBattery>:


void commandReadDeviceBattery(char *data)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]

	 serialPutStr("OK,BATTREAD");
 800127c:	4808      	ldr	r0, [pc, #32]	; (80012a0 <commandReadDeviceBattery+0x2c>)
 800127e:	f000 f9f3 	bl	8001668 <serialPutStr>
	 sprintf(DataBuffer,"OK,BATTREAD %d",AdcRead_VBatt());
 8001282:	f7ff ff6d 	bl	8001160 <AdcRead_VBatt>
 8001286:	4603      	mov	r3, r0
 8001288:	461a      	mov	r2, r3
 800128a:	4906      	ldr	r1, [pc, #24]	; (80012a4 <commandReadDeviceBattery+0x30>)
 800128c:	4806      	ldr	r0, [pc, #24]	; (80012a8 <commandReadDeviceBattery+0x34>)
 800128e:	f008 fed9 	bl	800a044 <siprintf>
	 serialPutStr(DataBuffer);
 8001292:	4805      	ldr	r0, [pc, #20]	; (80012a8 <commandReadDeviceBattery+0x34>)
 8001294:	f000 f9e8 	bl	8001668 <serialPutStr>
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	0800c2a0 	.word	0x0800c2a0
 80012a4:	0800c2ac 	.word	0x0800c2ac
 80012a8:	20000094 	.word	0x20000094

080012ac <commandInvalid>:

void commandInvalid(char *data)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  serialPutStr("ERROR,Invalid Command Handler!\n");
 80012b4:	4803      	ldr	r0, [pc, #12]	; (80012c4 <commandInvalid+0x18>)
 80012b6:	f000 f9d7 	bl	8001668 <serialPutStr>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	0800c2bc 	.word	0x0800c2bc

080012c8 <commandGetTime>:

char dateTime[100];
void commandGetTime(char *data)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]


}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr

080012da <commandGetDate>:

void commandGetDate(char *data)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]

}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <commandGetDistance>:

char sonarBuffer[100];
void commandGetDistance(char *data)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(MB_PWR_GPIO_Port, MB_PWR_Pin, GPIO_PIN_SET);
 80012f4:	2201      	movs	r2, #1
 80012f6:	2101      	movs	r1, #1
 80012f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012fc:	f002 fb6e 	bl	80039dc <HAL_GPIO_WritePin>
	sprintf(sonarBuffer,"OK,DISTREAD %d",getSonarDistance());
 8001300:	f000 f812 	bl	8001328 <getSonarDistance>
 8001304:	4603      	mov	r3, r0
 8001306:	461a      	mov	r2, r3
 8001308:	4905      	ldr	r1, [pc, #20]	; (8001320 <commandGetDistance+0x34>)
 800130a:	4806      	ldr	r0, [pc, #24]	; (8001324 <commandGetDistance+0x38>)
 800130c:	f008 fe9a 	bl	800a044 <siprintf>
	serialPutStr(sonarBuffer);
 8001310:	4804      	ldr	r0, [pc, #16]	; (8001324 <commandGetDistance+0x38>)
 8001312:	f000 f9a9 	bl	8001668 <serialPutStr>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	0800c2dc 	.word	0x0800c2dc
 8001324:	2000015c 	.word	0x2000015c

08001328 <getSonarDistance>:
 */

#include "Maxbotix.h"


uint16_t getSonarDistance(void){
 8001328:	b5b0      	push	{r4, r5, r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
	  unsigned char RxBuffer[4];
	  bool newData = false;
 800132e:	2300      	movs	r3, #0
 8001330:	75fb      	strb	r3, [r7, #23]
	  uint16_t dist_mm = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	82bb      	strh	r3, [r7, #20]
	  unsigned char rx;
	  uint8_t tries = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	74fb      	strb	r3, [r7, #19]
	  do {
	    HAL_GPIO_WritePin(MB_CTL_GPIO_Port, MB_CTL_Pin, GPIO_PIN_SET);
 800133a:	2201      	movs	r2, #1
 800133c:	2102      	movs	r1, #2
 800133e:	4844      	ldr	r0, [pc, #272]	; (8001450 <getSonarDistance+0x128>)
 8001340:	f002 fb4c 	bl	80039dc <HAL_GPIO_WritePin>
	    HAL_Delay(1); // todo: implement HAL_Delay_Microseconds()
 8001344:	2001      	movs	r0, #1
 8001346:	f001 f831 	bl	80023ac <HAL_Delay>
	    HAL_GPIO_WritePin(MB_CTL_GPIO_Port, MB_CTL_Pin, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	2102      	movs	r1, #2
 800134e:	4840      	ldr	r0, [pc, #256]	; (8001450 <getSonarDistance+0x128>)
 8001350:	f002 fb44 	bl	80039dc <HAL_GPIO_WritePin>
	    if (HAL_UART_Receive(Get_SonarHandle(), (uint8_t *)&rx, 1, 20) == HAL_OK) {
 8001354:	f000 fc60 	bl	8001c18 <Get_SonarHandle>
 8001358:	1df9      	adds	r1, r7, #7
 800135a:	2314      	movs	r3, #20
 800135c:	2201      	movs	r2, #1
 800135e:	f004 fc2f 	bl	8005bc0 <HAL_UART_Receive>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d160      	bne.n	800142a <getSonarDistance+0x102>
	      if ((char)rx == 'R') {
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	2b52      	cmp	r3, #82	; 0x52
 800136c:	d15a      	bne.n	8001424 <getSonarDistance+0xfc>
	        if (HAL_UART_Receive(Get_SonarHandle(), (uint8_t *)&RxBuffer, 4, 20) == HAL_OK) {
 800136e:	f000 fc53 	bl	8001c18 <Get_SonarHandle>
 8001372:	f107 0108 	add.w	r1, r7, #8
 8001376:	2314      	movs	r3, #20
 8001378:	2204      	movs	r2, #4
 800137a:	f004 fc21 	bl	8005bc0 <HAL_UART_Receive>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d155      	bne.n	8001430 <getSonarDistance+0x108>
	          if (isdigit(RxBuffer[3])) {
 8001384:	7afb      	ldrb	r3, [r7, #11]
 8001386:	3301      	adds	r3, #1
 8001388:	4a32      	ldr	r2, [pc, #200]	; (8001454 <getSonarDistance+0x12c>)
 800138a:	4413      	add	r3, r2
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <getSonarDistance+0x72>
	            newData = true;
 8001396:	2301      	movs	r3, #1
 8001398:	75fb      	strb	r3, [r7, #23]
	          }
	          if (newData) {
 800139a:	7dfb      	ldrb	r3, [r7, #23]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d047      	beq.n	8001430 <getSonarDistance+0x108>
	            for (int i = 0; i < 4; i++)
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	e035      	b.n	8001412 <getSonarDistance+0xea>
	              dist_mm += (RxBuffer[3 - i] - '0') * pow(10, i);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f1c3 0303 	rsb	r3, r3, #3
 80013ac:	3318      	adds	r3, #24
 80013ae:	443b      	add	r3, r7
 80013b0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80013b4:	3b30      	subs	r3, #48	; 0x30
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff f88c 	bl	80004d4 <__aeabi_i2d>
 80013bc:	4604      	mov	r4, r0
 80013be:	460d      	mov	r5, r1
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f7ff f887 	bl	80004d4 <__aeabi_i2d>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	f04f 0000 	mov.w	r0, #0
 80013ce:	4922      	ldr	r1, [pc, #136]	; (8001458 <getSonarDistance+0x130>)
 80013d0:	f00a f868 	bl	800b4a4 <pow>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4620      	mov	r0, r4
 80013da:	4629      	mov	r1, r5
 80013dc:	f7ff f8e4 	bl	80005a8 <__aeabi_dmul>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4614      	mov	r4, r2
 80013e6:	461d      	mov	r5, r3
 80013e8:	8abb      	ldrh	r3, [r7, #20]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff f872 	bl	80004d4 <__aeabi_i2d>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4620      	mov	r0, r4
 80013f6:	4629      	mov	r1, r5
 80013f8:	f7fe ff20 	bl	800023c <__adddf3>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	4610      	mov	r0, r2
 8001402:	4619      	mov	r1, r3
 8001404:	f7ff fb80 	bl	8000b08 <__aeabi_d2uiz>
 8001408:	4603      	mov	r3, r0
 800140a:	82bb      	strh	r3, [r7, #20]
	            for (int i = 0; i < 4; i++)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	3301      	adds	r3, #1
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2b03      	cmp	r3, #3
 8001416:	ddc6      	ble.n	80013a6 <getSonarDistance+0x7e>
	            if (dist_mm==0)
 8001418:	8abb      	ldrh	r3, [r7, #20]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d108      	bne.n	8001430 <getSonarDistance+0x108>
	            	newData = false;
 800141e:	2300      	movs	r3, #0
 8001420:	75fb      	strb	r3, [r7, #23]
 8001422:	e005      	b.n	8001430 <getSonarDistance+0x108>
	          }
	        }
	      } else {
	        newData = false;
 8001424:	2300      	movs	r3, #0
 8001426:	75fb      	strb	r3, [r7, #23]
 8001428:	e002      	b.n	8001430 <getSonarDistance+0x108>
	      }
	    } else {
	      tries++;
 800142a:	7cfb      	ldrb	r3, [r7, #19]
 800142c:	3301      	adds	r3, #1
 800142e:	74fb      	strb	r3, [r7, #19]
	    }
	  } while (newData == false && tries < MAX_SONAR_TRIES - 1);
 8001430:	7dfb      	ldrb	r3, [r7, #23]
 8001432:	f083 0301 	eor.w	r3, r3, #1
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <getSonarDistance+0x11c>
 800143c:	7cfb      	ldrb	r3, [r7, #19]
 800143e:	2b03      	cmp	r3, #3
 8001440:	f67f af7b 	bls.w	800133a <getSonarDistance+0x12>
	  return dist_mm;
 8001444:	8abb      	ldrh	r3, [r7, #20]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bdb0      	pop	{r4, r5, r7, pc}
 800144e:	bf00      	nop
 8001450:	48000800 	.word	0x48000800
 8001454:	0800cac4 	.word	0x0800cac4
 8001458:	40240000 	.word	0x40240000

0800145c <terminalTaskHandler>:



/* USER CODE END Header_terminalTaskHandler */
void terminalTaskHandler(void const * argument)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	int tCommandReady = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	60fb      	str	r3, [r7, #12]
	char tRxedChar;
	HAL_UART_Receive_IT(Get_DebugHandle(),(uint8_t*)uartData,UART_RECEIVE_SIZE);
 8001468:	f000 fbcc 	bl	8001c04 <Get_DebugHandle>
 800146c:	4603      	mov	r3, r0
 800146e:	2201      	movs	r2, #1
 8001470:	4912      	ldr	r1, [pc, #72]	; (80014bc <terminalTaskHandler+0x60>)
 8001472:	4618      	mov	r0, r3
 8001474:	f004 fc68 	bl	8005d48 <HAL_UART_Receive_IT>




	/* Infinite loop */
	serialPutStr("Terminal Thread Initialized");
 8001478:	4811      	ldr	r0, [pc, #68]	; (80014c0 <terminalTaskHandler+0x64>)
 800147a:	f000 f8f5 	bl	8001668 <serialPutStr>
	for(;;)
	{
		/* Process Terminal Commands */
		if(xQueueReceive(Get_TerminalQueueHandle(),&tRxedChar,QUEUE_TIMEOUT))
 800147e:	f000 fbd5 	bl	8001c2c <Get_TerminalQueueHandle>
 8001482:	4603      	mov	r3, r0
 8001484:	4618      	mov	r0, r3
 8001486:	f107 030b 	add.w	r3, r7, #11
 800148a:	220a      	movs	r2, #10
 800148c:	4619      	mov	r1, r3
 800148e:	f007 f8dd 	bl	800864c <xQueueReceive>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d00c      	beq.n	80014b2 <terminalTaskHandler+0x56>
		{
			tCommandReady = CommandLineBuildCommand(tRxedChar);
 8001498:	7afb      	ldrb	r3, [r7, #11]
 800149a:	4618      	mov	r0, r3
 800149c:	f000 f814 	bl	80014c8 <CommandLineBuildCommand>
 80014a0:	60f8      	str	r0, [r7, #12]
			if(tCommandReady)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d004      	beq.n	80014b2 <terminalTaskHandler+0x56>
			{
				CommandLineProcessCommand(gCommandBuffer);
 80014a8:	4806      	ldr	r0, [pc, #24]	; (80014c4 <terminalTaskHandler+0x68>)
 80014aa:	f000 f855 	bl	8001558 <CommandLineProcessCommand>
				tCommandReady = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
			}
		}
		osDelay(1);
 80014b2:	2001      	movs	r0, #1
 80014b4:	f006 fca4 	bl	8007e00 <osDelay>
		if(xQueueReceive(Get_TerminalQueueHandle(),&tRxedChar,QUEUE_TIMEOUT))
 80014b8:	e7e1      	b.n	800147e <terminalTaskHandler+0x22>
 80014ba:	bf00      	nop
 80014bc:	200001c4 	.word	0x200001c4
 80014c0:	0800c320 	.word	0x0800c320
 80014c4:	200001cc 	.word	0x200001cc

080014c8 <CommandLineBuildCommand>:
}


static uint16_t commandBuilderIdx = 0;
int CommandLineBuildCommand(char nextChar)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	71fb      	strb	r3, [r7, #7]
	/* Don't store any new line characters or spaces. */
	if ((nextChar == '\n') || (nextChar == ' ') || (nextChar == '\t'))
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	2b0a      	cmp	r3, #10
 80014d6:	d005      	beq.n	80014e4 <CommandLineBuildCommand+0x1c>
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	2b20      	cmp	r3, #32
 80014dc:	d002      	beq.n	80014e4 <CommandLineBuildCommand+0x1c>
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	2b09      	cmp	r3, #9
 80014e2:	d101      	bne.n	80014e8 <CommandLineBuildCommand+0x20>
	{
		return false;
 80014e4:	2300      	movs	r3, #0
 80014e6:	e02d      	b.n	8001544 <CommandLineBuildCommand+0x7c>
	}
	/* The completed command has been received. Replace the final carriage
	 * return character with a NULL character to help with processing the
	 * command. */
	if (nextChar == '\r')
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	2b0d      	cmp	r3, #13
 80014ec:	d10a      	bne.n	8001504 <CommandLineBuildCommand+0x3c>
	{
		gCommandBuffer[commandBuilderIdx] = '\0';
 80014ee:	4b18      	ldr	r3, [pc, #96]	; (8001550 <CommandLineBuildCommand+0x88>)
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	4b17      	ldr	r3, [pc, #92]	; (8001554 <CommandLineBuildCommand+0x8c>)
 80014f6:	2100      	movs	r1, #0
 80014f8:	5499      	strb	r1, [r3, r2]
		commandBuilderIdx = 0;
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <CommandLineBuildCommand+0x88>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	801a      	strh	r2, [r3, #0]
		return true;
 8001500:	2301      	movs	r3, #1
 8001502:	e01f      	b.n	8001544 <CommandLineBuildCommand+0x7c>
	}
	/* Convert the incoming character to uppercase. This matches the case
	 * of commands in the command table. Then store the received character
	 * in the command buffer. */
	gCommandBuffer[commandBuilderIdx] = TO_UPPER(nextChar);
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	2b60      	cmp	r3, #96	; 0x60
 8001508:	d906      	bls.n	8001518 <CommandLineBuildCommand+0x50>
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	2b7a      	cmp	r3, #122	; 0x7a
 800150e:	d803      	bhi.n	8001518 <CommandLineBuildCommand+0x50>
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	3b20      	subs	r3, #32
 8001514:	b2db      	uxtb	r3, r3
 8001516:	e000      	b.n	800151a <CommandLineBuildCommand+0x52>
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	4a0d      	ldr	r2, [pc, #52]	; (8001550 <CommandLineBuildCommand+0x88>)
 800151c:	8812      	ldrh	r2, [r2, #0]
 800151e:	4611      	mov	r1, r2
 8001520:	4a0c      	ldr	r2, [pc, #48]	; (8001554 <CommandLineBuildCommand+0x8c>)
 8001522:	5453      	strb	r3, [r2, r1]
	commandBuilderIdx++;
 8001524:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <CommandLineBuildCommand+0x88>)
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	3301      	adds	r3, #1
 800152a:	b29a      	uxth	r2, r3
 800152c:	4b08      	ldr	r3, [pc, #32]	; (8001550 <CommandLineBuildCommand+0x88>)
 800152e:	801a      	strh	r2, [r3, #0]
	/* If the command is too long, reset the index and process
	 * the current command buffer. */
	if (commandBuilderIdx >= MAX_COMMAND_LEN)
 8001530:	4b07      	ldr	r3, [pc, #28]	; (8001550 <CommandLineBuildCommand+0x88>)
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	2b77      	cmp	r3, #119	; 0x77
 8001536:	d904      	bls.n	8001542 <CommandLineBuildCommand+0x7a>
	{
		commandBuilderIdx = 0;
 8001538:	4b05      	ldr	r3, [pc, #20]	; (8001550 <CommandLineBuildCommand+0x88>)
 800153a:	2200      	movs	r2, #0
 800153c:	801a      	strh	r2, [r3, #0]
		return true;
 800153e:	2301      	movs	r3, #1
 8001540:	e000      	b.n	8001544 <CommandLineBuildCommand+0x7c>
	}

	return false;
 8001542:	2300      	movs	r3, #0

}
 8001544:	4618      	mov	r0, r3
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	200002b0 	.word	0x200002b0
 8001554:	200001cc 	.word	0x200001cc

08001558 <CommandLineProcessCommand>:

void CommandLineProcessCommand(char * buffer)
{
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b087      	sub	sp, #28
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]

	int idx;
	int CommandFound = false;
 8001560:	2300      	movs	r3, #0
 8001562:	613b      	str	r3, [r7, #16]
	//char *Com= strtok(buffer,"+");
	char *Arg = strtok(NULL,"+");
 8001564:	491e      	ldr	r1, [pc, #120]	; (80015e0 <CommandLineProcessCommand+0x88>)
 8001566:	2000      	movs	r0, #0
 8001568:	f008 fda0 	bl	800a0ac <strtok>
 800156c:	60f8      	str	r0, [r7, #12]

	/* Search for the command in the command table until it is found or
	 * the end of the table is reached. If the command is found, break
	 * out of the loop. */
	for (idx = 0; gCommandTable[idx].name != NULL; idx++)
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
 8001572:	e020      	b.n	80015b6 <CommandLineProcessCommand+0x5e>
	{
		if (strncmp(gCommandTable[idx].name, buffer,strlen(gCommandTable[idx].name)) == 0)
 8001574:	4a1b      	ldr	r2, [pc, #108]	; (80015e4 <CommandLineProcessCommand+0x8c>)
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 800157c:	4a19      	ldr	r2, [pc, #100]	; (80015e4 <CommandLineProcessCommand+0x8c>)
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001584:	4618      	mov	r0, r3
 8001586:	f7fe fdfb 	bl	8000180 <strlen>
 800158a:	4603      	mov	r3, r0
 800158c:	461a      	mov	r2, r3
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	4620      	mov	r0, r4
 8001592:	f008 fd77 	bl	800a084 <strncmp>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d109      	bne.n	80015b0 <CommandLineProcessCommand+0x58>
		{
			CommandFound = true;
 800159c:	2301      	movs	r3, #1
 800159e:	613b      	str	r3, [r7, #16]
			(*gCommandTable[idx].function)(Arg);
 80015a0:	4a10      	ldr	r2, [pc, #64]	; (80015e4 <CommandLineProcessCommand+0x8c>)
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	4413      	add	r3, r2
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	68f8      	ldr	r0, [r7, #12]
 80015ac:	4798      	blx	r3
			break;
 80015ae:	e008      	b.n	80015c2 <CommandLineProcessCommand+0x6a>
	for (idx = 0; gCommandTable[idx].name != NULL; idx++)
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	3301      	adds	r3, #1
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	4a0b      	ldr	r2, [pc, #44]	; (80015e4 <CommandLineProcessCommand+0x8c>)
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1d8      	bne.n	8001574 <CommandLineProcessCommand+0x1c>
		}
	}
	/* If the command was found, call the command function. Otherwise,
	 * output an error message.*/
	if (CommandFound==false)
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d107      	bne.n	80015d8 <CommandLineProcessCommand+0x80>
	{
		snprintf(TerminalMsgBuffer, sizeof(TerminalMsgBuffer), "ERROR,Command not found\n");
 80015c8:	4a07      	ldr	r2, [pc, #28]	; (80015e8 <CommandLineProcessCommand+0x90>)
 80015ca:	2164      	movs	r1, #100	; 0x64
 80015cc:	4807      	ldr	r0, [pc, #28]	; (80015ec <CommandLineProcessCommand+0x94>)
 80015ce:	f008 fd05 	bl	8009fdc <sniprintf>
		serialPutStr(TerminalMsgBuffer);
 80015d2:	4806      	ldr	r0, [pc, #24]	; (80015ec <CommandLineProcessCommand+0x94>)
 80015d4:	f000 f848 	bl	8001668 <serialPutStr>
	}
}
 80015d8:	bf00      	nop
 80015da:	371c      	adds	r7, #28
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd90      	pop	{r4, r7, pc}
 80015e0:	0800c33c 	.word	0x0800c33c
 80015e4:	0800c3bc 	.word	0x0800c3bc
 80015e8:	0800c340 	.word	0x0800c340
 80015ec:	20000248 	.word	0x20000248

080015f0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]

	if(huart->Instance==USART2)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a14      	ldr	r2, [pc, #80]	; (8001650 <HAL_UART_RxCpltCallback+0x60>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d114      	bne.n	800162c <HAL_UART_RxCpltCallback+0x3c>
	{
		HAL_UART_Receive_IT(Get_DebugHandle(),(uint8_t*)uartData,UART_RECEIVE_SIZE);
 8001602:	f000 faff 	bl	8001c04 <Get_DebugHandle>
 8001606:	4603      	mov	r3, r0
 8001608:	2201      	movs	r2, #1
 800160a:	4912      	ldr	r1, [pc, #72]	; (8001654 <HAL_UART_RxCpltCallback+0x64>)
 800160c:	4618      	mov	r0, r3
 800160e:	f004 fb9b 	bl	8005d48 <HAL_UART_Receive_IT>
		cValuetoPost = (char)uartData[0];
 8001612:	4b10      	ldr	r3, [pc, #64]	; (8001654 <HAL_UART_RxCpltCallback+0x64>)
 8001614:	781a      	ldrb	r2, [r3, #0]
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <HAL_UART_RxCpltCallback+0x68>)
 8001618:	701a      	strb	r2, [r3, #0]
		xQueueSendToBackFromISR(Get_TerminalQueueHandle(),(void*)&cValuetoPost,&xHigherPrioritTaskWoken);
 800161a:	f000 fb07 	bl	8001c2c <Get_TerminalQueueHandle>
 800161e:	4603      	mov	r3, r0
 8001620:	4618      	mov	r0, r3
 8001622:	2300      	movs	r3, #0
 8001624:	4a0d      	ldr	r2, [pc, #52]	; (800165c <HAL_UART_RxCpltCallback+0x6c>)
 8001626:	490c      	ldr	r1, [pc, #48]	; (8001658 <HAL_UART_RxCpltCallback+0x68>)
 8001628:	f006 ff78 	bl	800851c <xQueueGenericSendFromISR>
	}
	if(huart->Instance==LPUART1)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a0b      	ldr	r2, [pc, #44]	; (8001660 <HAL_UART_RxCpltCallback+0x70>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d107      	bne.n	8001646 <HAL_UART_RxCpltCallback+0x56>
	{
		HAL_UART_Receive_IT(Get_SonarHandle(),(uint8_t*)uartSonic,UART_RECEIVE_SIZE);
 8001636:	f000 faef 	bl	8001c18 <Get_SonarHandle>
 800163a:	4603      	mov	r3, r0
 800163c:	2201      	movs	r2, #1
 800163e:	4909      	ldr	r1, [pc, #36]	; (8001664 <HAL_UART_RxCpltCallback+0x74>)
 8001640:	4618      	mov	r0, r3
 8001642:	f004 fb81 	bl	8005d48 <HAL_UART_Receive_IT>
		//cValuetoPost = (char)uartData[0];
		//xQueueSendToBackFromISR(Get_TerminalQueueHandle(),(void*)&cValuetoPost,&xHigherPrioritTaskWoken);
	}
	//HAL_UART_Receive_IT(Get_SonarHandle(),(uint8_t*)uartSonic,UART_RECEIVE_SIZE);
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40004400 	.word	0x40004400
 8001654:	200001c4 	.word	0x200001c4
 8001658:	200001c0 	.word	0x200001c0
 800165c:	200002ac 	.word	0x200002ac
 8001660:	40008000 	.word	0x40008000
 8001664:	200001c8 	.word	0x200001c8

08001668 <serialPutStr>:

#include "Uart.h"


void serialPutStr(const char *data)
{
 8001668:	b590      	push	{r4, r7, lr}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
   //Get exclusive access
  //osAcquireMutex(&uartMutex);
  HAL_UART_Transmit(Get_DebugHandle(),(uint8_t *)data, strlen(data),DEBUG_UART_TIMEOUT);
 8001670:	f000 fac8 	bl	8001c04 <Get_DebugHandle>
 8001674:	4604      	mov	r4, r0
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7fe fd82 	bl	8000180 <strlen>
 800167c:	4603      	mov	r3, r0
 800167e:	b29a      	uxth	r2, r3
 8001680:	230a      	movs	r3, #10
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	4620      	mov	r0, r4
 8001686:	f004 fa15 	bl	8005ab4 <HAL_UART_Transmit>
  //osReleaseMutex(&uartMutex);

}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	bd90      	pop	{r4, r7, pc}
	...

08001694 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4a06      	ldr	r2, [pc, #24]	; (80016bc <vApplicationGetIdleTaskMemory+0x28>)
 80016a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	4a05      	ldr	r2, [pc, #20]	; (80016c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80016aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2280      	movs	r2, #128	; 0x80
 80016b0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80016b2:	bf00      	nop
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr
 80016bc:	200002b4 	.word	0x200002b4
 80016c0:	20000308 	.word	0x20000308

080016c4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80016cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4313      	orrs	r3, r2
 80016da:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80016dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4013      	ands	r3, r2
 80016e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016e8:	68fb      	ldr	r3, [r7, #12]
}
 80016ea:	bf00      	nop
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr

080016f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016f4:	b5b0      	push	{r4, r5, r7, lr}
 80016f6:	b092      	sub	sp, #72	; 0x48
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016fa:	f000 fe1b 	bl	8002334 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016fe:	f000 f861 	bl	80017c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001702:	f000 fa1d 	bl	8001b40 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001706:	f000 f943 	bl	8001990 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 800170a:	f000 f98f 	bl	8001a2c <MX_USART2_UART_Init>
  MX_ADC_Init();
 800170e:	f000 f8b1 	bl	8001874 <MX_ADC_Init>
  MX_I2C2_Init();
 8001712:	f000 f8fd 	bl	8001910 <MX_I2C2_Init>
  MX_SPI2_Init();
 8001716:	f000 f9d5 	bl	8001ac4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* Create the mutex(es) */
  /* definition and creation of UartMutex */
  osMutexDef(UartMutex);
 800171a:	2300      	movs	r3, #0
 800171c:	643b      	str	r3, [r7, #64]	; 0x40
 800171e:	2300      	movs	r3, #0
 8001720:	647b      	str	r3, [r7, #68]	; 0x44
  UartMutexHandle = osMutexCreate(osMutex(UartMutex));
 8001722:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001726:	4618      	mov	r0, r3
 8001728:	f006 fb7e 	bl	8007e28 <osMutexCreate>
 800172c:	4603      	mov	r3, r0
 800172e:	4a1e      	ldr	r2, [pc, #120]	; (80017a8 <main+0xb4>)
 8001730:	6013      	str	r3, [r2, #0]

  /* definition and creation of SpiMutex */
  osMutexDef(SpiMutex);
 8001732:	2300      	movs	r3, #0
 8001734:	63bb      	str	r3, [r7, #56]	; 0x38
 8001736:	2300      	movs	r3, #0
 8001738:	63fb      	str	r3, [r7, #60]	; 0x3c
  SpiMutexHandle = osMutexCreate(osMutex(SpiMutex));
 800173a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800173e:	4618      	mov	r0, r3
 8001740:	f006 fb72 	bl	8007e28 <osMutexCreate>
 8001744:	4603      	mov	r3, r0
 8001746:	4a19      	ldr	r2, [pc, #100]	; (80017ac <main+0xb8>)
 8001748:	6013      	str	r3, [r2, #0]

  /* definition and creation of I2cMutex */
  osMutexDef(I2cMutex);
 800174a:	2300      	movs	r3, #0
 800174c:	633b      	str	r3, [r7, #48]	; 0x30
 800174e:	2300      	movs	r3, #0
 8001750:	637b      	str	r3, [r7, #52]	; 0x34
  I2cMutexHandle = osMutexCreate(osMutex(I2cMutex));
 8001752:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001756:	4618      	mov	r0, r3
 8001758:	f006 fb66 	bl	8007e28 <osMutexCreate>
 800175c:	4603      	mov	r3, r0
 800175e:	4a14      	ldr	r2, [pc, #80]	; (80017b0 <main+0xbc>)
 8001760:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of xQueue1 */
  osMessageQDef(xQueue1, 99, uint16_t);
 8001762:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <main+0xc0>)
 8001764:	f107 0420 	add.w	r4, r7, #32
 8001768:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800176a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  xQueue1Handle = osMessageCreate(osMessageQ(xQueue1), NULL);
 800176e:	f107 0320 	add.w	r3, r7, #32
 8001772:	2100      	movs	r1, #0
 8001774:	4618      	mov	r0, r3
 8001776:	f006 fb6f 	bl	8007e58 <osMessageCreate>
 800177a:	4603      	mov	r3, r0
 800177c:	4a0e      	ldr	r2, [pc, #56]	; (80017b8 <main+0xc4>)
 800177e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of terminalTask */
  osThreadDef(terminalTask, terminalTaskHandler, osPriorityNormal, 0, 128);
 8001780:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <main+0xc8>)
 8001782:	1d3c      	adds	r4, r7, #4
 8001784:	461d      	mov	r5, r3
 8001786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800178a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800178e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  terminalTaskHandle = osThreadCreate(osThread(terminalTask), NULL);
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	2100      	movs	r1, #0
 8001796:	4618      	mov	r0, r3
 8001798:	f006 fae6 	bl	8007d68 <osThreadCreate>
 800179c:	4603      	mov	r3, r0
 800179e:	4a08      	ldr	r2, [pc, #32]	; (80017c0 <main+0xcc>)
 80017a0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80017a2:	f006 fada 	bl	8007d5a <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017a6:	e7fe      	b.n	80017a6 <main+0xb2>
 80017a8:	20000754 	.word	0x20000754
 80017ac:	20000758 	.word	0x20000758
 80017b0:	2000075c 	.word	0x2000075c
 80017b4:	0800c36c 	.word	0x0800c36c
 80017b8:	20000750 	.word	0x20000750
 80017bc:	0800c37c 	.word	0x0800c37c
 80017c0:	2000074c 	.word	0x2000074c

080017c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b09a      	sub	sp, #104	; 0x68
 80017c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ca:	f107 0320 	add.w	r3, r7, #32
 80017ce:	2248      	movs	r2, #72	; 0x48
 80017d0:	2100      	movs	r1, #0
 80017d2:	4618      	mov	r0, r3
 80017d4:	f008 fbfa 	bl	8009fcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017d8:	f107 0308 	add.w	r3, r7, #8
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]
 80017e8:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017ea:	4b21      	ldr	r3, [pc, #132]	; (8001870 <SystemClock_Config+0xac>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017f2:	4a1f      	ldr	r2, [pc, #124]	; (8001870 <SystemClock_Config+0xac>)
 80017f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <SystemClock_Config+0xac>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8001806:	2322      	movs	r3, #34	; 0x22
 8001808:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800180a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800180e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001810:	2301      	movs	r3, #1
 8001812:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001814:	2340      	movs	r3, #64	; 0x40
 8001816:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001818:	2300      	movs	r3, #0
 800181a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800181c:	23b0      	movs	r3, #176	; 0xb0
 800181e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001820:	2300      	movs	r3, #0
 8001822:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001824:	f107 0320 	add.w	r3, r7, #32
 8001828:	4618      	mov	r0, r3
 800182a:	f002 fcbd 	bl	80041a8 <HAL_RCC_OscConfig>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001834:	f000 fa16 	bl	8001c64 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001838:	234f      	movs	r3, #79	; 0x4f
 800183a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800183c:	2300      	movs	r3, #0
 800183e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001840:	2300      	movs	r3, #0
 8001842:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001848:	2300      	movs	r3, #0
 800184a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800184c:	2300      	movs	r3, #0
 800184e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001850:	f107 0308 	add.w	r3, r7, #8
 8001854:	2102      	movs	r1, #2
 8001856:	4618      	mov	r0, r3
 8001858:	f003 f828 	bl	80048ac <HAL_RCC_ClockConfig>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001862:	f000 f9ff 	bl	8001c64 <Error_Handler>
  }
}
 8001866:	bf00      	nop
 8001868:	3768      	adds	r7, #104	; 0x68
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	58000400 	.word	0x58000400

08001874 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8001878:	4b23      	ldr	r3, [pc, #140]	; (8001908 <MX_ADC_Init+0x94>)
 800187a:	4a24      	ldr	r2, [pc, #144]	; (800190c <MX_ADC_Init+0x98>)
 800187c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800187e:	4b22      	ldr	r3, [pc, #136]	; (8001908 <MX_ADC_Init+0x94>)
 8001880:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001884:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001886:	4b20      	ldr	r3, [pc, #128]	; (8001908 <MX_ADC_Init+0x94>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800188c:	4b1e      	ldr	r3, [pc, #120]	; (8001908 <MX_ADC_Init+0x94>)
 800188e:	2200      	movs	r2, #0
 8001890:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001892:	4b1d      	ldr	r3, [pc, #116]	; (8001908 <MX_ADC_Init+0x94>)
 8001894:	2200      	movs	r2, #0
 8001896:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001898:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <MX_ADC_Init+0x94>)
 800189a:	2204      	movs	r2, #4
 800189c:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800189e:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <MX_ADC_Init+0x94>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80018a4:	4b18      	ldr	r3, [pc, #96]	; (8001908 <MX_ADC_Init+0x94>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80018aa:	4b17      	ldr	r3, [pc, #92]	; (8001908 <MX_ADC_Init+0x94>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 80018b0:	4b15      	ldr	r3, [pc, #84]	; (8001908 <MX_ADC_Init+0x94>)
 80018b2:	2201      	movs	r2, #1
 80018b4:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80018b6:	4b14      	ldr	r3, [pc, #80]	; (8001908 <MX_ADC_Init+0x94>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018be:	4b12      	ldr	r3, [pc, #72]	; (8001908 <MX_ADC_Init+0x94>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018c4:	4b10      	ldr	r3, [pc, #64]	; (8001908 <MX_ADC_Init+0x94>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 80018ca:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <MX_ADC_Init+0x94>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80018d2:	4b0d      	ldr	r3, [pc, #52]	; (8001908 <MX_ADC_Init+0x94>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80018d8:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <MX_ADC_Init+0x94>)
 80018da:	2200      	movs	r2, #0
 80018dc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80018de:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <MX_ADC_Init+0x94>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 80018e4:	4b08      	ldr	r3, [pc, #32]	; (8001908 <MX_ADC_Init+0x94>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <MX_ADC_Init+0x94>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80018f2:	4805      	ldr	r0, [pc, #20]	; (8001908 <MX_ADC_Init+0x94>)
 80018f4:	f000 ff0e 	bl	8002714 <HAL_ADC_Init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_ADC_Init+0x8e>
  {
    Error_Handler();
 80018fe:	f000 f9b1 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000508 	.word	0x20000508
 800190c:	40012400 	.word	0x40012400

08001910 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001914:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <MX_I2C2_Init+0x74>)
 8001916:	4a1c      	ldr	r2, [pc, #112]	; (8001988 <MX_I2C2_Init+0x78>)
 8001918:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 800191a:	4b1a      	ldr	r3, [pc, #104]	; (8001984 <MX_I2C2_Init+0x74>)
 800191c:	4a1b      	ldr	r2, [pc, #108]	; (800198c <MX_I2C2_Init+0x7c>)
 800191e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001920:	4b18      	ldr	r3, [pc, #96]	; (8001984 <MX_I2C2_Init+0x74>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001926:	4b17      	ldr	r3, [pc, #92]	; (8001984 <MX_I2C2_Init+0x74>)
 8001928:	2201      	movs	r2, #1
 800192a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800192c:	4b15      	ldr	r3, [pc, #84]	; (8001984 <MX_I2C2_Init+0x74>)
 800192e:	2200      	movs	r2, #0
 8001930:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001932:	4b14      	ldr	r3, [pc, #80]	; (8001984 <MX_I2C2_Init+0x74>)
 8001934:	2200      	movs	r2, #0
 8001936:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001938:	4b12      	ldr	r3, [pc, #72]	; (8001984 <MX_I2C2_Init+0x74>)
 800193a:	2200      	movs	r2, #0
 800193c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800193e:	4b11      	ldr	r3, [pc, #68]	; (8001984 <MX_I2C2_Init+0x74>)
 8001940:	2200      	movs	r2, #0
 8001942:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001944:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <MX_I2C2_Init+0x74>)
 8001946:	2200      	movs	r2, #0
 8001948:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800194a:	480e      	ldr	r0, [pc, #56]	; (8001984 <MX_I2C2_Init+0x74>)
 800194c:	f002 f85d 	bl	8003a0a <HAL_I2C_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001956:	f000 f985 	bl	8001c64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800195a:	2100      	movs	r1, #0
 800195c:	4809      	ldr	r0, [pc, #36]	; (8001984 <MX_I2C2_Init+0x74>)
 800195e:	f002 f8e3 	bl	8003b28 <HAL_I2CEx_ConfigAnalogFilter>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001968:	f000 f97c 	bl	8001c64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800196c:	2100      	movs	r1, #0
 800196e:	4805      	ldr	r0, [pc, #20]	; (8001984 <MX_I2C2_Init+0x74>)
 8001970:	f002 f924 	bl	8003bbc <HAL_I2CEx_ConfigDigitalFilter>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800197a:	f000 f973 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	2000056c 	.word	0x2000056c
 8001988:	40005800 	.word	0x40005800
 800198c:	20303e5d 	.word	0x20303e5d

08001990 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001994:	4b23      	ldr	r3, [pc, #140]	; (8001a24 <MX_LPUART1_UART_Init+0x94>)
 8001996:	4a24      	ldr	r2, [pc, #144]	; (8001a28 <MX_LPUART1_UART_Init+0x98>)
 8001998:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 800199a:	4b22      	ldr	r3, [pc, #136]	; (8001a24 <MX_LPUART1_UART_Init+0x94>)
 800199c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80019a0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019a2:	4b20      	ldr	r3, [pc, #128]	; (8001a24 <MX_LPUART1_UART_Init+0x94>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80019a8:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <MX_LPUART1_UART_Init+0x94>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80019ae:	4b1d      	ldr	r3, [pc, #116]	; (8001a24 <MX_LPUART1_UART_Init+0x94>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_RX;
 80019b4:	4b1b      	ldr	r3, [pc, #108]	; (8001a24 <MX_LPUART1_UART_Init+0x94>)
 80019b6:	2204      	movs	r2, #4
 80019b8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ba:	4b1a      	ldr	r3, [pc, #104]	; (8001a24 <MX_LPUART1_UART_Init+0x94>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019c0:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <MX_LPUART1_UART_Init+0x94>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019c6:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <MX_LPUART1_UART_Init+0x94>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80019cc:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <MX_LPUART1_UART_Init+0x94>)
 80019ce:	2208      	movs	r2, #8
 80019d0:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80019d2:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <MX_LPUART1_UART_Init+0x94>)
 80019d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019d8:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_HalfDuplex_Init(&hlpuart1) != HAL_OK)
 80019da:	4812      	ldr	r0, [pc, #72]	; (8001a24 <MX_LPUART1_UART_Init+0x94>)
 80019dc:	f004 f812 	bl	8005a04 <HAL_HalfDuplex_Init>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_LPUART1_UART_Init+0x5a>
  {
    Error_Handler();
 80019e6:	f000 f93d 	bl	8001c64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019ea:	2100      	movs	r1, #0
 80019ec:	480d      	ldr	r0, [pc, #52]	; (8001a24 <MX_LPUART1_UART_Init+0x94>)
 80019ee:	f006 f8d5 	bl	8007b9c <HAL_UARTEx_SetTxFifoThreshold>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_LPUART1_UART_Init+0x6c>
  {
    Error_Handler();
 80019f8:	f000 f934 	bl	8001c64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019fc:	2100      	movs	r1, #0
 80019fe:	4809      	ldr	r0, [pc, #36]	; (8001a24 <MX_LPUART1_UART_Init+0x94>)
 8001a00:	f006 f90a 	bl	8007c18 <HAL_UARTEx_SetRxFifoThreshold>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_LPUART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001a0a:	f000 f92b 	bl	8001c64 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&hlpuart1) != HAL_OK)
 8001a0e:	4805      	ldr	r0, [pc, #20]	; (8001a24 <MX_LPUART1_UART_Init+0x94>)
 8001a10:	f006 f851 	bl	8007ab6 <HAL_UARTEx_EnableFifoMode>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_LPUART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001a1a:	f000 f923 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	200005c0 	.word	0x200005c0
 8001a28:	40008000 	.word	0x40008000

08001a2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a30:	4b22      	ldr	r3, [pc, #136]	; (8001abc <MX_USART2_UART_Init+0x90>)
 8001a32:	4a23      	ldr	r2, [pc, #140]	; (8001ac0 <MX_USART2_UART_Init+0x94>)
 8001a34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a36:	4b21      	ldr	r3, [pc, #132]	; (8001abc <MX_USART2_UART_Init+0x90>)
 8001a38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a3e:	4b1f      	ldr	r3, [pc, #124]	; (8001abc <MX_USART2_UART_Init+0x90>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a44:	4b1d      	ldr	r3, [pc, #116]	; (8001abc <MX_USART2_UART_Init+0x90>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a4a:	4b1c      	ldr	r3, [pc, #112]	; (8001abc <MX_USART2_UART_Init+0x90>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a50:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <MX_USART2_UART_Init+0x90>)
 8001a52:	220c      	movs	r2, #12
 8001a54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a56:	4b19      	ldr	r3, [pc, #100]	; (8001abc <MX_USART2_UART_Init+0x90>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a5c:	4b17      	ldr	r3, [pc, #92]	; (8001abc <MX_USART2_UART_Init+0x90>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a62:	4b16      	ldr	r3, [pc, #88]	; (8001abc <MX_USART2_UART_Init+0x90>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a68:	4b14      	ldr	r3, [pc, #80]	; (8001abc <MX_USART2_UART_Init+0x90>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a6e:	4b13      	ldr	r3, [pc, #76]	; (8001abc <MX_USART2_UART_Init+0x90>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a74:	4811      	ldr	r0, [pc, #68]	; (8001abc <MX_USART2_UART_Init+0x90>)
 8001a76:	f003 ff75 	bl	8005964 <HAL_UART_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001a80:	f000 f8f0 	bl	8001c64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a84:	2100      	movs	r1, #0
 8001a86:	480d      	ldr	r0, [pc, #52]	; (8001abc <MX_USART2_UART_Init+0x90>)
 8001a88:	f006 f888 	bl	8007b9c <HAL_UARTEx_SetTxFifoThreshold>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001a92:	f000 f8e7 	bl	8001c64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a96:	2100      	movs	r1, #0
 8001a98:	4808      	ldr	r0, [pc, #32]	; (8001abc <MX_USART2_UART_Init+0x90>)
 8001a9a:	f006 f8bd 	bl	8007c18 <HAL_UARTEx_SetRxFifoThreshold>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001aa4:	f000 f8de 	bl	8001c64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001aa8:	4804      	ldr	r0, [pc, #16]	; (8001abc <MX_USART2_UART_Init+0x90>)
 8001aaa:	f006 f83f 	bl	8007b2c <HAL_UARTEx_DisableFifoMode>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001ab4:	f000 f8d6 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ab8:	bf00      	nop
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20000654 	.word	0x20000654
 8001ac0:	40004400 	.word	0x40004400

08001ac4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001ac8:	4b1b      	ldr	r3, [pc, #108]	; (8001b38 <MX_SPI2_Init+0x74>)
 8001aca:	4a1c      	ldr	r2, [pc, #112]	; (8001b3c <MX_SPI2_Init+0x78>)
 8001acc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ace:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <MX_SPI2_Init+0x74>)
 8001ad0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ad4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001ad6:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <MX_SPI2_Init+0x74>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001adc:	4b16      	ldr	r3, [pc, #88]	; (8001b38 <MX_SPI2_Init+0x74>)
 8001ade:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001ae2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ae4:	4b14      	ldr	r3, [pc, #80]	; (8001b38 <MX_SPI2_Init+0x74>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001aea:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <MX_SPI2_Init+0x74>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001af0:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <MX_SPI2_Init+0x74>)
 8001af2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001af6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001af8:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <MX_SPI2_Init+0x74>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001afe:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <MX_SPI2_Init+0x74>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b04:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <MX_SPI2_Init+0x74>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b0a:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <MX_SPI2_Init+0x74>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001b10:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <MX_SPI2_Init+0x74>)
 8001b12:	2207      	movs	r2, #7
 8001b14:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b16:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <MX_SPI2_Init+0x74>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <MX_SPI2_Init+0x74>)
 8001b1e:	2208      	movs	r2, #8
 8001b20:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b22:	4805      	ldr	r0, [pc, #20]	; (8001b38 <MX_SPI2_Init+0x74>)
 8001b24:	f003 fbbc 	bl	80052a0 <HAL_SPI_Init>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001b2e:	f000 f899 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	200006e8 	.word	0x200006e8
 8001b3c:	40003800 	.word	0x40003800

08001b40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b54:	2001      	movs	r0, #1
 8001b56:	f7ff fdb5 	bl	80016c4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5a:	2002      	movs	r0, #2
 8001b5c:	f7ff fdb2 	bl	80016c4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b60:	2004      	movs	r0, #4
 8001b62:	f7ff fdaf 	bl	80016c4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PG_Pin|ADC_SW_Pin|FLASH_CS_Pin|MB_OC_Pin
 8001b66:	2200      	movs	r2, #0
 8001b68:	f44f 61de 	mov.w	r1, #1776	; 0x6f0
 8001b6c:	481e      	ldr	r0, [pc, #120]	; (8001be8 <MX_GPIO_Init+0xa8>)
 8001b6e:	f001 ff35 	bl	80039dc <HAL_GPIO_WritePin>
                          |LED_Pin|EXT_OC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MB_PWR_Pin|EXT_PWR_Pin, GPIO_PIN_RESET);
 8001b72:	2200      	movs	r2, #0
 8001b74:	f240 2101 	movw	r1, #513	; 0x201
 8001b78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b7c:	f001 ff2e 	bl	80039dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MB_CTL_GPIO_Port, MB_CTL_Pin, GPIO_PIN_RESET);
 8001b80:	2200      	movs	r2, #0
 8001b82:	2102      	movs	r1, #2
 8001b84:	4819      	ldr	r0, [pc, #100]	; (8001bec <MX_GPIO_Init+0xac>)
 8001b86:	f001 ff29 	bl	80039dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG_Pin ADC_SW_Pin FLASH_CS_Pin MB_OC_Pin
                           LED_Pin EXT_OC_Pin */
  GPIO_InitStruct.Pin = PG_Pin|ADC_SW_Pin|FLASH_CS_Pin|MB_OC_Pin
 8001b8a:	f44f 63de 	mov.w	r3, #1776	; 0x6f0
 8001b8e:	607b      	str	r3, [r7, #4]
                          |LED_Pin|EXT_OC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b90:	2301      	movs	r3, #1
 8001b92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9c:	1d3b      	adds	r3, r7, #4
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4811      	ldr	r0, [pc, #68]	; (8001be8 <MX_GPIO_Init+0xa8>)
 8001ba2:	f001 fdbb 	bl	800371c <HAL_GPIO_Init>

  /*Configure GPIO pins : MB_PWR_Pin EXT_PWR_Pin */
  GPIO_InitStruct.Pin = MB_PWR_Pin|EXT_PWR_Pin;
 8001ba6:	f240 2301 	movw	r3, #513	; 0x201
 8001baa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bac:	2301      	movs	r3, #1
 8001bae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb8:	1d3b      	adds	r3, r7, #4
 8001bba:	4619      	mov	r1, r3
 8001bbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc0:	f001 fdac 	bl	800371c <HAL_GPIO_Init>

  /*Configure GPIO pin : MB_CTL_Pin */
  GPIO_InitStruct.Pin = MB_CTL_Pin;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(MB_CTL_GPIO_Port, &GPIO_InitStruct);
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4804      	ldr	r0, [pc, #16]	; (8001bec <MX_GPIO_Init+0xac>)
 8001bda:	f001 fd9f 	bl	800371c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bde:	bf00      	nop
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	48000400 	.word	0x48000400
 8001bec:	48000800 	.word	0x48000800

08001bf0 <Get_AdcHandle>:
  osDelay(Delay);
}


ADC_HandleTypeDef *Get_AdcHandle(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return &hadc;
 8001bf4:	4b02      	ldr	r3, [pc, #8]	; (8001c00 <Get_AdcHandle+0x10>)
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	20000508 	.word	0x20000508

08001c04 <Get_DebugHandle>:


UART_HandleTypeDef *Get_DebugHandle(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return &huart2;
 8001c08:	4b02      	ldr	r3, [pc, #8]	; (8001c14 <Get_DebugHandle+0x10>)
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	20000654 	.word	0x20000654

08001c18 <Get_SonarHandle>:

UART_HandleTypeDef *Get_SonarHandle(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return &hlpuart1;
 8001c1c:	4b02      	ldr	r3, [pc, #8]	; (8001c28 <Get_SonarHandle+0x10>)
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	200005c0 	.word	0x200005c0

08001c2c <Get_TerminalQueueHandle>:
{
  return &hi2c2;
}

osMessageQId Get_TerminalQueueHandle(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return xQueue1Handle;;
 8001c30:	4b02      	ldr	r3, [pc, #8]	; (8001c3c <Get_TerminalQueueHandle+0x10>)
 8001c32:	681b      	ldr	r3, [r3, #0]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr
 8001c3c:	20000750 	.word	0x20000750

08001c40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a04      	ldr	r2, [pc, #16]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d101      	bne.n	8001c56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c52:	f000 fb8f 	bl	8002374 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40012c00 	.word	0x40012c00

08001c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c68:	b672      	cpsid	i
}
 8001c6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c6c:	e7fe      	b.n	8001c6c <Error_Handler+0x8>

08001c6e <LL_AHB2_GRP1_EnableClock>:
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b085      	sub	sp, #20
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c92:	68fb      	ldr	r3, [r7, #12]
}
 8001c94:	bf00      	nop
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr

08001c9e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b085      	sub	sp, #20
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001caa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001cac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
}
 8001cc4:	bf00      	nop
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bc80      	pop	{r7}
 8001ccc:	4770      	bx	lr

08001cce <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b085      	sub	sp, #20
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
}
 8001cf4:	bf00      	nop
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr

08001cfe <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b085      	sub	sp, #20
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d0a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d1a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d22:	68fb      	ldr	r3, [r7, #12]
}
 8001d24:	bf00      	nop
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr

08001d2e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d32:	2200      	movs	r2, #0
 8001d34:	210f      	movs	r1, #15
 8001d36:	f06f 0001 	mvn.w	r0, #1
 8001d3a:	f001 fc0a 	bl	8003552 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b088      	sub	sp, #32
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 030c 	add.w	r3, r7, #12
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a0c      	ldr	r2, [pc, #48]	; (8001d94 <HAL_ADC_MspInit+0x50>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d112      	bne.n	8001d8c <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001d66:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001d6a:	f7ff ffc8 	bl	8001cfe <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6e:	2002      	movs	r0, #2
 8001d70:	f7ff ff7d 	bl	8001c6e <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB3     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = ADC_IN_Pin;
 8001d74:	2308      	movs	r3, #8
 8001d76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC_IN_GPIO_Port, &GPIO_InitStruct);
 8001d80:	f107 030c 	add.w	r3, r7, #12
 8001d84:	4619      	mov	r1, r3
 8001d86:	4804      	ldr	r0, [pc, #16]	; (8001d98 <HAL_ADC_MspInit+0x54>)
 8001d88:	f001 fcc8 	bl	800371c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }

}
 8001d8c:	bf00      	nop
 8001d8e:	3720      	adds	r7, #32
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40012400 	.word	0x40012400
 8001d98:	48000400 	.word	0x48000400

08001d9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b096      	sub	sp, #88	; 0x58
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001db4:	f107 030c 	add.w	r3, r7, #12
 8001db8:	2238      	movs	r2, #56	; 0x38
 8001dba:	2100      	movs	r1, #0
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f008 f905 	bl	8009fcc <memset>
  if(hi2c->Instance==I2C2)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a21      	ldr	r2, [pc, #132]	; (8001e4c <HAL_I2C_MspInit+0xb0>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d13b      	bne.n	8001e44 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001dd0:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dd6:	f107 030c 	add.w	r3, r7, #12
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f003 f946 	bl	800506c <HAL_RCCEx_PeriphCLKConfig>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001de6:	f7ff ff3d 	bl	8001c64 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	2001      	movs	r0, #1
 8001dec:	f7ff ff3f 	bl	8001c6e <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df0:	2002      	movs	r0, #2
 8001df2:	f7ff ff3c 	bl	8001c6e <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = EXT_SDA_Pin;
 8001df6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001dfa:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dfc:	2312      	movs	r3, #18
 8001dfe:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e04:	2300      	movs	r3, #0
 8001e06:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e08:	2304      	movs	r3, #4
 8001e0a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(EXT_SDA_GPIO_Port, &GPIO_InitStruct);
 8001e0c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e10:	4619      	mov	r1, r3
 8001e12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e16:	f001 fc81 	bl	800371c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EXT_SCL_Pin;
 8001e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e1e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e20:	2312      	movs	r3, #18
 8001e22:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e2c:	2304      	movs	r3, #4
 8001e2e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(EXT_SCL_GPIO_Port, &GPIO_InitStruct);
 8001e30:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e34:	4619      	mov	r1, r3
 8001e36:	4806      	ldr	r0, [pc, #24]	; (8001e50 <HAL_I2C_MspInit+0xb4>)
 8001e38:	f001 fc70 	bl	800371c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e3c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001e40:	f7ff ff2d 	bl	8001c9e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001e44:	bf00      	nop
 8001e46:	3758      	adds	r7, #88	; 0x58
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40005800 	.word	0x40005800
 8001e50:	48000400 	.word	0x48000400

08001e54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b096      	sub	sp, #88	; 0x58
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e6c:	f107 030c 	add.w	r3, r7, #12
 8001e70:	2238      	movs	r2, #56	; 0x38
 8001e72:	2100      	movs	r1, #0
 8001e74:	4618      	mov	r0, r3
 8001e76:	f008 f8a9 	bl	8009fcc <memset>
  if(huart->Instance==LPUART1)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a30      	ldr	r2, [pc, #192]	; (8001f40 <HAL_UART_MspInit+0xec>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d125      	bne.n	8001ed0 <HAL_UART_MspInit+0x7c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001e84:	2320      	movs	r3, #32
 8001e86:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 8001e88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e8c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e8e:	f107 030c 	add.w	r3, r7, #12
 8001e92:	4618      	mov	r0, r3
 8001e94:	f003 f8ea 	bl	800506c <HAL_RCCEx_PeriphCLKConfig>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001e9e:	f7ff fee1 	bl	8001c64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001ea2:	2001      	movs	r0, #1
 8001ea4:	f7ff ff13 	bl	8001cce <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea8:	2004      	movs	r0, #4
 8001eaa:	f7ff fee0 	bl	8001c6e <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = MB_RX_Pin;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eb2:	2312      	movs	r3, #18
 8001eb4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001ebe:	2308      	movs	r3, #8
 8001ec0:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(MB_RX_GPIO_Port, &GPIO_InitStruct);
 8001ec2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	481e      	ldr	r0, [pc, #120]	; (8001f44 <HAL_UART_MspInit+0xf0>)
 8001eca:	f001 fc27 	bl	800371c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ece:	e033      	b.n	8001f38 <HAL_UART_MspInit+0xe4>
  else if(huart->Instance==USART2)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a1c      	ldr	r2, [pc, #112]	; (8001f48 <HAL_UART_MspInit+0xf4>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d12e      	bne.n	8001f38 <HAL_UART_MspInit+0xe4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001eda:	2302      	movs	r3, #2
 8001edc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ede:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001ee2:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ee4:	f107 030c 	add.w	r3, r7, #12
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f003 f8bf 	bl	800506c <HAL_RCCEx_PeriphCLKConfig>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <HAL_UART_MspInit+0xa4>
      Error_Handler();
 8001ef4:	f7ff feb6 	bl	8001c64 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ef8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001efc:	f7ff fecf 	bl	8001c9e <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f00:	2001      	movs	r0, #1
 8001f02:	f7ff feb4 	bl	8001c6e <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = UART_RX_Pin|UART_TX_Pin;
 8001f06:	230c      	movs	r3, #12
 8001f08:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f12:	2300      	movs	r3, #0
 8001f14:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f16:	2307      	movs	r3, #7
 8001f18:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f1e:	4619      	mov	r1, r3
 8001f20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f24:	f001 fbfa 	bl	800371c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2105      	movs	r1, #5
 8001f2c:	2025      	movs	r0, #37	; 0x25
 8001f2e:	f001 fb10 	bl	8003552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f32:	2025      	movs	r0, #37	; 0x25
 8001f34:	f001 fb27 	bl	8003586 <HAL_NVIC_EnableIRQ>
}
 8001f38:	bf00      	nop
 8001f3a:	3758      	adds	r7, #88	; 0x58
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40008000 	.word	0x40008000
 8001f44:	48000800 	.word	0x48000800
 8001f48:	40004400 	.word	0x40004400

08001f4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b096      	sub	sp, #88	; 0x58
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f54:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	60da      	str	r2, [r3, #12]
 8001f62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f64:	f107 030c 	add.w	r3, r7, #12
 8001f68:	2238      	movs	r2, #56	; 0x38
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f008 f82d 	bl	8009fcc <memset>
  if(hspi->Instance==SPI2)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a21      	ldr	r2, [pc, #132]	; (8001ffc <HAL_SPI_MspInit+0xb0>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d13b      	bne.n	8001ff4 <HAL_SPI_MspInit+0xa8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 8001f7c:	2310      	movs	r3, #16
 8001f7e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 8001f80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f84:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f86:	f107 030c 	add.w	r3, r7, #12
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f003 f86e 	bl	800506c <HAL_RCCEx_PeriphCLKConfig>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001f96:	f7ff fe65 	bl	8001c64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f9a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001f9e:	f7ff fe7e 	bl	8001c9e <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa2:	2002      	movs	r0, #2
 8001fa4:	f7ff fe63 	bl	8001c6e <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa8:	2001      	movs	r0, #1
 8001faa:	f7ff fe60 	bl	8001c6e <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PA10     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = MISO_Pin|SCK_Pin;
 8001fae:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001fb2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fc0:	2305      	movs	r3, #5
 8001fc2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fc8:	4619      	mov	r1, r3
 8001fca:	480d      	ldr	r0, [pc, #52]	; (8002000 <HAL_SPI_MspInit+0xb4>)
 8001fcc:	f001 fba6 	bl	800371c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOSI_Pin;
 8001fd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fd4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fe2:	2305      	movs	r3, #5
 8001fe4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(MOSI_GPIO_Port, &GPIO_InitStruct);
 8001fe6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fea:	4619      	mov	r1, r3
 8001fec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ff0:	f001 fb94 	bl	800371c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001ff4:	bf00      	nop
 8001ff6:	3758      	adds	r7, #88	; 0x58
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40003800 	.word	0x40003800
 8002000:	48000400 	.word	0x48000400

08002004 <LL_APB2_GRP1_EnableClock>:
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800200c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002010:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002012:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4313      	orrs	r3, r2
 800201a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800201c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002020:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4013      	ands	r3, r2
 8002026:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002028:	68fb      	ldr	r3, [r7, #12]
}
 800202a:	bf00      	nop
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr

08002034 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b08c      	sub	sp, #48	; 0x30
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800203c:	2300      	movs	r3, #0
 800203e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8002040:	2300      	movs	r3, #0
 8002042:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002044:	2300      	movs	r3, #0
 8002046:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800204a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800204e:	f7ff ffd9 	bl	8002004 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002052:	f107 0208 	add.w	r2, r7, #8
 8002056:	f107 030c 	add.w	r3, r7, #12
 800205a:	4611      	mov	r1, r2
 800205c:	4618      	mov	r0, r3
 800205e:	f002 fe21 	bl	8004ca4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002062:	f002 fe0d 	bl	8004c80 <HAL_RCC_GetPCLK2Freq>
 8002066:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800206a:	4a21      	ldr	r2, [pc, #132]	; (80020f0 <HAL_InitTick+0xbc>)
 800206c:	fba2 2303 	umull	r2, r3, r2, r3
 8002070:	0c9b      	lsrs	r3, r3, #18
 8002072:	3b01      	subs	r3, #1
 8002074:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002076:	4b1f      	ldr	r3, [pc, #124]	; (80020f4 <HAL_InitTick+0xc0>)
 8002078:	4a1f      	ldr	r2, [pc, #124]	; (80020f8 <HAL_InitTick+0xc4>)
 800207a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800207c:	4b1d      	ldr	r3, [pc, #116]	; (80020f4 <HAL_InitTick+0xc0>)
 800207e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002082:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002084:	4a1b      	ldr	r2, [pc, #108]	; (80020f4 <HAL_InitTick+0xc0>)
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800208a:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <HAL_InitTick+0xc0>)
 800208c:	2200      	movs	r2, #0
 800208e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002090:	4b18      	ldr	r3, [pc, #96]	; (80020f4 <HAL_InitTick+0xc0>)
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8002096:	4817      	ldr	r0, [pc, #92]	; (80020f4 <HAL_InitTick+0xc0>)
 8002098:	f003 f9d6 	bl	8005448 <HAL_TIM_Base_Init>
 800209c:	4603      	mov	r3, r0
 800209e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80020a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d11b      	bne.n	80020e2 <HAL_InitTick+0xae>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80020aa:	4812      	ldr	r0, [pc, #72]	; (80020f4 <HAL_InitTick+0xc0>)
 80020ac:	f003 fa2c 	bl	8005508 <HAL_TIM_Base_Start_IT>
 80020b0:	4603      	mov	r3, r0
 80020b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80020b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d111      	bne.n	80020e2 <HAL_InitTick+0xae>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80020be:	2018      	movs	r0, #24
 80020c0:	f001 fa61 	bl	8003586 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b0f      	cmp	r3, #15
 80020c8:	d808      	bhi.n	80020dc <HAL_InitTick+0xa8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80020ca:	2200      	movs	r2, #0
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	2018      	movs	r0, #24
 80020d0:	f001 fa3f 	bl	8003552 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020d4:	4a09      	ldr	r2, [pc, #36]	; (80020fc <HAL_InitTick+0xc8>)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	e002      	b.n	80020e2 <HAL_InitTick+0xae>
      }
      else
      {
        status = HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80020e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3730      	adds	r7, #48	; 0x30
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	431bde83 	.word	0x431bde83
 80020f4:	20000760 	.word	0x20000760
 80020f8:	40012c00 	.word	0x40012c00
 80020fc:	20000004 	.word	0x20000004

08002100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002104:	e7fe      	b.n	8002104 <NMI_Handler+0x4>

08002106 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002106:	b480      	push	{r7}
 8002108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800210a:	e7fe      	b.n	800210a <HardFault_Handler+0x4>

0800210c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002110:	e7fe      	b.n	8002110 <MemManage_Handler+0x4>

08002112 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002112:	b480      	push	{r7}
 8002114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002116:	e7fe      	b.n	8002116 <BusFault_Handler+0x4>

08002118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800211c:	e7fe      	b.n	800211c <UsageFault_Handler+0x4>

0800211e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	46bd      	mov	sp, r7
 8002126:	bc80      	pop	{r7}
 8002128:	4770      	bx	lr
	...

0800212c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update Interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002130:	4802      	ldr	r0, [pc, #8]	; (800213c <TIM1_UP_IRQHandler+0x10>)
 8002132:	f003 fa35 	bl	80055a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20000760 	.word	0x20000760

08002140 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002144:	4802      	ldr	r0, [pc, #8]	; (8002150 <USART2_IRQHandler+0x10>)
 8002146:	f003 fe4b 	bl	8005de0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20000654 	.word	0x20000654

08002154 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return 1;
 8002158:	2301      	movs	r3, #1
}
 800215a:	4618      	mov	r0, r3
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr

08002162 <_kill>:

int _kill(int pid, int sig)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b082      	sub	sp, #8
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800216c:	f007 fef6 	bl	8009f5c <__errno>
 8002170:	4603      	mov	r3, r0
 8002172:	2216      	movs	r2, #22
 8002174:	601a      	str	r2, [r3, #0]
  return -1;
 8002176:	f04f 33ff 	mov.w	r3, #4294967295
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <_exit>:

void _exit (int status)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800218a:	f04f 31ff 	mov.w	r1, #4294967295
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff ffe7 	bl	8002162 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002194:	e7fe      	b.n	8002194 <_exit+0x12>

08002196 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b086      	sub	sp, #24
 800219a:	af00      	add	r7, sp, #0
 800219c:	60f8      	str	r0, [r7, #12]
 800219e:	60b9      	str	r1, [r7, #8]
 80021a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a2:	2300      	movs	r3, #0
 80021a4:	617b      	str	r3, [r7, #20]
 80021a6:	e00a      	b.n	80021be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021a8:	f3af 8000 	nop.w
 80021ac:	4601      	mov	r1, r0
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	1c5a      	adds	r2, r3, #1
 80021b2:	60ba      	str	r2, [r7, #8]
 80021b4:	b2ca      	uxtb	r2, r1
 80021b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	3301      	adds	r3, #1
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	dbf0      	blt.n	80021a8 <_read+0x12>
  }

  return len;
 80021c6:	687b      	ldr	r3, [r7, #4]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	e009      	b.n	80021f6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	1c5a      	adds	r2, r3, #1
 80021e6:	60ba      	str	r2, [r7, #8]
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	3301      	adds	r3, #1
 80021f4:	617b      	str	r3, [r7, #20]
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	dbf1      	blt.n	80021e2 <_write+0x12>
  }
  return len;
 80021fe:	687b      	ldr	r3, [r7, #4]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <_close>:

int _close(int file)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002210:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002214:	4618      	mov	r0, r3
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr

0800221e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
 8002226:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800222e:	605a      	str	r2, [r3, #4]
  return 0;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr

0800223c <_isatty>:

int _isatty(int file)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002244:	2301      	movs	r3, #1
}
 8002246:	4618      	mov	r0, r3
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr

08002250 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr

08002268 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002270:	4a14      	ldr	r2, [pc, #80]	; (80022c4 <_sbrk+0x5c>)
 8002272:	4b15      	ldr	r3, [pc, #84]	; (80022c8 <_sbrk+0x60>)
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800227c:	4b13      	ldr	r3, [pc, #76]	; (80022cc <_sbrk+0x64>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d102      	bne.n	800228a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002284:	4b11      	ldr	r3, [pc, #68]	; (80022cc <_sbrk+0x64>)
 8002286:	4a12      	ldr	r2, [pc, #72]	; (80022d0 <_sbrk+0x68>)
 8002288:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800228a:	4b10      	ldr	r3, [pc, #64]	; (80022cc <_sbrk+0x64>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4413      	add	r3, r2
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	429a      	cmp	r2, r3
 8002296:	d207      	bcs.n	80022a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002298:	f007 fe60 	bl	8009f5c <__errno>
 800229c:	4603      	mov	r3, r0
 800229e:	220c      	movs	r2, #12
 80022a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022a2:	f04f 33ff 	mov.w	r3, #4294967295
 80022a6:	e009      	b.n	80022bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022a8:	4b08      	ldr	r3, [pc, #32]	; (80022cc <_sbrk+0x64>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022ae:	4b07      	ldr	r3, [pc, #28]	; (80022cc <_sbrk+0x64>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4413      	add	r3, r2
 80022b6:	4a05      	ldr	r2, [pc, #20]	; (80022cc <_sbrk+0x64>)
 80022b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ba:	68fb      	ldr	r3, [r7, #12]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	20010000 	.word	0x20010000
 80022c8:	00000400 	.word	0x00000400
 80022cc:	200007ac 	.word	0x200007ac
 80022d0:	20001510 	.word	0x20001510

080022d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr

080022e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80022e0:	480d      	ldr	r0, [pc, #52]	; (8002318 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80022e2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80022e4:	f7ff fff6 	bl	80022d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022e8:	480c      	ldr	r0, [pc, #48]	; (800231c <LoopForever+0x6>)
  ldr r1, =_edata
 80022ea:	490d      	ldr	r1, [pc, #52]	; (8002320 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022ec:	4a0d      	ldr	r2, [pc, #52]	; (8002324 <LoopForever+0xe>)
  movs r3, #0
 80022ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022f0:	e002      	b.n	80022f8 <LoopCopyDataInit>

080022f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022f6:	3304      	adds	r3, #4

080022f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022fc:	d3f9      	bcc.n	80022f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022fe:	4a0a      	ldr	r2, [pc, #40]	; (8002328 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002300:	4c0a      	ldr	r4, [pc, #40]	; (800232c <LoopForever+0x16>)
  movs r3, #0
 8002302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002304:	e001      	b.n	800230a <LoopFillZerobss>

08002306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002308:	3204      	adds	r2, #4

0800230a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800230a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800230c:	d3fb      	bcc.n	8002306 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800230e:	f007 fe2b 	bl	8009f68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002312:	f7ff f9ef 	bl	80016f4 <main>

08002316 <LoopForever>:

LoopForever:
    b LoopForever
 8002316:	e7fe      	b.n	8002316 <LoopForever>
  ldr   r0, =_estack
 8002318:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800231c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002320:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002324:	0800cd50 	.word	0x0800cd50
  ldr r2, =_sbss
 8002328:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800232c:	20001510 	.word	0x20001510

08002330 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002330:	e7fe      	b.n	8002330 <ADC_IRQHandler>
	...

08002334 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800233e:	2003      	movs	r0, #3
 8002340:	f001 f8fc 	bl	800353c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002344:	f002 fc76 	bl	8004c34 <HAL_RCC_GetHCLKFreq>
 8002348:	4603      	mov	r3, r0
 800234a:	4a09      	ldr	r2, [pc, #36]	; (8002370 <HAL_Init+0x3c>)
 800234c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800234e:	200f      	movs	r0, #15
 8002350:	f7ff fe70 	bl	8002034 <HAL_InitTick>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d002      	beq.n	8002360 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	71fb      	strb	r3, [r7, #7]
 800235e:	e001      	b.n	8002364 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002360:	f7ff fce5 	bl	8001d2e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002364:	79fb      	ldrb	r3, [r7, #7]
}
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20000000 	.word	0x20000000

08002374 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002378:	4b05      	ldr	r3, [pc, #20]	; (8002390 <HAL_IncTick+0x1c>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	461a      	mov	r2, r3
 800237e:	4b05      	ldr	r3, [pc, #20]	; (8002394 <HAL_IncTick+0x20>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4413      	add	r3, r2
 8002384:	4a03      	ldr	r2, [pc, #12]	; (8002394 <HAL_IncTick+0x20>)
 8002386:	6013      	str	r3, [r2, #0]
}
 8002388:	bf00      	nop
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr
 8002390:	20000008 	.word	0x20000008
 8002394:	200007b0 	.word	0x200007b0

08002398 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return uwTick;
 800239c:	4b02      	ldr	r3, [pc, #8]	; (80023a8 <HAL_GetTick+0x10>)
 800239e:	681b      	ldr	r3, [r3, #0]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr
 80023a8:	200007b0 	.word	0x200007b0

080023ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023b4:	f7ff fff0 	bl	8002398 <HAL_GetTick>
 80023b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c4:	d005      	beq.n	80023d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023c6:	4b0a      	ldr	r3, [pc, #40]	; (80023f0 <HAL_Delay+0x44>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	461a      	mov	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4413      	add	r3, r2
 80023d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023d2:	bf00      	nop
 80023d4:	f7ff ffe0 	bl	8002398 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d8f7      	bhi.n	80023d4 <HAL_Delay+0x28>
  {
  }
}
 80023e4:	bf00      	nop
 80023e6:	bf00      	nop
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000008 	.word	0x20000008

080023f4 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80023f8:	4b02      	ldr	r3, [pc, #8]	; (8002404 <HAL_GetUIDw0+0x10>)
 80023fa:	681b      	ldr	r3, [r3, #0]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr
 8002404:	1fff7590 	.word	0x1fff7590

08002408 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 800240c:	4b02      	ldr	r3, [pc, #8]	; (8002418 <HAL_GetUIDw1+0x10>)
 800240e:	681b      	ldr	r3, [r3, #0]
}
 8002410:	4618      	mov	r0, r3
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr
 8002418:	1fff7594 	.word	0x1fff7594

0800241c <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002420:	4b02      	ldr	r3, [pc, #8]	; (800242c <HAL_GetUIDw2+0x10>)
 8002422:	681b      	ldr	r3, [r3, #0]
}
 8002424:	4618      	mov	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr
 800242c:	1fff7598 	.word	0x1fff7598

08002430 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	431a      	orrs	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	601a      	str	r2, [r3, #0]
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002464:	4618      	mov	r0, r3
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr

0800246e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800246e:	b480      	push	{r7}
 8002470:	b085      	sub	sp, #20
 8002472:	af00      	add	r7, sp, #0
 8002474:	60f8      	str	r0, [r7, #12]
 8002476:	60b9      	str	r1, [r7, #8]
 8002478:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	695a      	ldr	r2, [r3, #20]
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2107      	movs	r1, #7
 8002486:	fa01 f303 	lsl.w	r3, r1, r3
 800248a:	43db      	mvns	r3, r3
 800248c:	401a      	ands	r2, r3
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	6879      	ldr	r1, [r7, #4]
 8002496:	fa01 f303 	lsl.w	r3, r1, r3
 800249a:	431a      	orrs	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80024a0:	bf00      	nop
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr

080024aa <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
 80024b2:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	695a      	ldr	r2, [r3, #20]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	f003 0304 	and.w	r3, r3, #4
 80024be:	2107      	movs	r1, #7
 80024c0:	fa01 f303 	lsl.w	r3, r1, r3
 80024c4:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80024cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr

080024da <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80024ee:	2301      	movs	r3, #1
 80024f0:	e000      	b.n	80024f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr

080024fe <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80024fe:	b480      	push	{r7}
 8002500:	b085      	sub	sp, #20
 8002502:	af00      	add	r7, sp, #0
 8002504:	60f8      	str	r0, [r7, #12]
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	f003 031f 	and.w	r3, r3, #31
 8002514:	210f      	movs	r1, #15
 8002516:	fa01 f303 	lsl.w	r3, r1, r3
 800251a:	43db      	mvns	r3, r3
 800251c:	401a      	ands	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	0e9b      	lsrs	r3, r3, #26
 8002522:	f003 010f 	and.w	r1, r3, #15
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	f003 031f 	and.w	r3, r3, #31
 800252c:	fa01 f303 	lsl.w	r3, r1, r3
 8002530:	431a      	orrs	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002536:	bf00      	nop
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr

08002540 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002554:	431a      	orrs	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	629a      	str	r2, [r3, #40]	; 0x28
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr

08002564 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002578:	43db      	mvns	r3, r3
 800257a:	401a      	ands	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr

0800258a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800258a:	b480      	push	{r7}
 800258c:	b085      	sub	sp, #20
 800258e:	af00      	add	r7, sp, #0
 8002590:	60f8      	str	r0, [r7, #12]
 8002592:	60b9      	str	r1, [r7, #8]
 8002594:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	695a      	ldr	r2, [r3, #20]
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	021b      	lsls	r3, r3, #8
 800259e:	43db      	mvns	r3, r3
 80025a0:	401a      	ands	r2, r3
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	0219      	lsls	r1, r3, #8
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	400b      	ands	r3, r1
 80025aa:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 80025ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025b2:	431a      	orrs	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80025b8:	bf00      	nop
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr

080025c2 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80025d2:	f023 0317 	bic.w	r3, r3, #23
 80025d6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr

080025e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025fc:	d101      	bne.n	8002602 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80025fe:	2301      	movs	r3, #1
 8002600:	e000      	b.n	8002604 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr

0800260e <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800261e:	f023 0317 	bic.w	r3, r3, #23
 8002622:	f043 0201 	orr.w	r2, r3, #1
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr

08002634 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002644:	f023 0317 	bic.w	r3, r3, #23
 8002648:	f043 0202 	orr.w	r2, r3, #2
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr

0800265a <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <LL_ADC_IsEnabled+0x18>
 800266e:	2301      	movs	r3, #1
 8002670:	e000      	b.n	8002674 <LL_ADC_IsEnabled+0x1a>
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr

0800267e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b02      	cmp	r3, #2
 8002690:	d101      	bne.n	8002696 <LL_ADC_IsDisableOngoing+0x18>
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <LL_ADC_IsDisableOngoing+0x1a>
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr

080026a2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026b2:	f023 0317 	bic.w	r3, r3, #23
 80026b6:	f043 0204 	orr.w	r2, r3, #4
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr

080026c8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026d8:	f023 0317 	bic.w	r3, r3, #23
 80026dc:	f043 0210 	orr.w	r2, r3, #16
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr

080026ee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d101      	bne.n	8002706 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002702:	2301      	movs	r3, #1
 8002704:	e000      	b.n	8002708 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	4770      	bx	lr
	...

08002714 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b088      	sub	sp, #32
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800271c:	2300      	movs	r3, #0
 800271e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8002720:	2300      	movs	r3, #0
 8002722:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002728:	2300      	movs	r3, #0
 800272a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e17e      	b.n	8002a34 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002740:	2b00      	cmp	r3, #0
 8002742:	d109      	bne.n	8002758 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f7ff fafd 	bl	8001d44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff ff43 	bl	80025e8 <LL_ADC_IsInternalRegulatorEnabled>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d115      	bne.n	8002794 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff ff28 	bl	80025c2 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002772:	4b9e      	ldr	r3, [pc, #632]	; (80029ec <HAL_ADC_Init+0x2d8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	099b      	lsrs	r3, r3, #6
 8002778:	4a9d      	ldr	r2, [pc, #628]	; (80029f0 <HAL_ADC_Init+0x2dc>)
 800277a:	fba2 2303 	umull	r2, r3, r2, r3
 800277e:	099b      	lsrs	r3, r3, #6
 8002780:	3301      	adds	r3, #1
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002786:	e002      	b.n	800278e <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	3b01      	subs	r3, #1
 800278c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1f9      	bne.n	8002788 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff ff25 	bl	80025e8 <LL_ADC_IsInternalRegulatorEnabled>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10d      	bne.n	80027c0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a8:	f043 0210 	orr.w	r2, r3, #16
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b4:	f043 0201 	orr.w	r2, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff ff92 	bl	80026ee <LL_ADC_REG_IsConversionOngoing>
 80027ca:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d0:	f003 0310 	and.w	r3, r3, #16
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f040 8124 	bne.w	8002a22 <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f040 8120 	bne.w	8002a22 <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80027ea:	f043 0202 	orr.w	r2, r3, #2
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff ff2f 	bl	800265a <LL_ADC_IsEnabled>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f040 80a7 	bne.w	8002952 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	7e1b      	ldrb	r3, [r3, #24]
 800280c:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800280e:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	7e5b      	ldrb	r3, [r3, #25]
 8002814:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002816:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	7e9b      	ldrb	r3, [r3, #26]
 800281c:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800281e:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002824:	2a00      	cmp	r2, #0
 8002826:	d002      	beq.n	800282e <HAL_ADC_Init+0x11a>
 8002828:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800282c:	e000      	b.n	8002830 <HAL_ADC_Init+0x11c>
 800282e:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002830:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002836:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	2b00      	cmp	r3, #0
 800283e:	da04      	bge.n	800284a <HAL_ADC_Init+0x136>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002848:	e001      	b.n	800284e <HAL_ADC_Init+0x13a>
 800284a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 800284e:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002856:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002858:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4313      	orrs	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d114      	bne.n	8002894 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	7e9b      	ldrb	r3, [r3, #26]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d104      	bne.n	800287c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002878:	61bb      	str	r3, [r7, #24]
 800287a:	e00b      	b.n	8002894 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002880:	f043 0220 	orr.w	r2, r3, #32
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288c:	f043 0201 	orr.w	r2, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	2b00      	cmp	r3, #0
 800289a:	d009      	beq.n	80028b0 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80028a8:	4313      	orrs	r3, r2
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 80028ba:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6812      	ldr	r2, [r2, #0]
 80028c2:	69b9      	ldr	r1, [r7, #24]
 80028c4:	430b      	orrs	r3, r1
 80028c6:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80028d4:	4313      	orrs	r3, r2
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	4313      	orrs	r3, r2
 80028da:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d111      	bne.n	800290a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80028f2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80028f8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80028fe:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	4313      	orrs	r3, r2
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	691a      	ldr	r2, [r3, #16]
 8002910:	4b38      	ldr	r3, [pc, #224]	; (80029f4 <HAL_ADC_Init+0x2e0>)
 8002912:	4013      	ands	r3, r2
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	6979      	ldr	r1, [r7, #20]
 800291a:	430b      	orrs	r3, r1
 800291c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002926:	d014      	beq.n	8002952 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800292c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002930:	d00f      	beq.n	8002952 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002936:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800293a:	d00a      	beq.n	8002952 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 800293c:	4b2e      	ldr	r3, [pc, #184]	; (80029f8 <HAL_ADC_Init+0x2e4>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800294c:	492a      	ldr	r1, [pc, #168]	; (80029f8 <HAL_ADC_Init+0x2e4>)
 800294e:	4313      	orrs	r3, r2
 8002950:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6818      	ldr	r0, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800295a:	461a      	mov	r2, r3
 800295c:	2100      	movs	r1, #0
 800295e:	f7ff fd86 	bl	800246e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6818      	ldr	r0, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296a:	461a      	mov	r2, r3
 800296c:	4923      	ldr	r1, [pc, #140]	; (80029fc <HAL_ADC_Init+0x2e8>)
 800296e:	f7ff fd7e 	bl	800246e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d108      	bne.n	800298c <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f062 020f 	orn	r2, r2, #15
 8002988:	629a      	str	r2, [r3, #40]	; 0x28
 800298a:	e017      	b.n	80029bc <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002994:	d112      	bne.n	80029bc <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	3b01      	subs	r3, #1
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	f003 031c 	and.w	r3, r3, #28
 80029a8:	f06f 020f 	mvn.w	r2, #15
 80029ac:	fa02 f103 	lsl.w	r1, r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	430a      	orrs	r2, r1
 80029ba:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2100      	movs	r1, #0
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff fd71 	bl	80024aa <LL_ADC_GetSamplingTimeCommonChannels>
 80029c8:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d116      	bne.n	8002a00 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029dc:	f023 0303 	bic.w	r3, r3, #3
 80029e0:	f043 0201 	orr.w	r2, r3, #1
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80029e8:	e023      	b.n	8002a32 <HAL_ADC_Init+0x31e>
 80029ea:	bf00      	nop
 80029ec:	20000000 	.word	0x20000000
 80029f0:	053e2d63 	.word	0x053e2d63
 80029f4:	1ffffc02 	.word	0x1ffffc02
 80029f8:	40012708 	.word	0x40012708
 80029fc:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a04:	f023 0312 	bic.w	r3, r3, #18
 8002a08:	f043 0210 	orr.w	r2, r3, #16
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a14:	f043 0201 	orr.w	r2, r3, #1
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002a20:	e007      	b.n	8002a32 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a26:	f043 0210 	orr.w	r2, r3, #16
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8002a32:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3720      	adds	r7, #32
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff fe50 	bl	80026ee <LL_ADC_REG_IsConversionOngoing>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d132      	bne.n	8002aba <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d101      	bne.n	8002a62 <HAL_ADC_Start+0x26>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	e02e      	b.n	8002ac0 <HAL_ADC_Start+0x84>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 fa8a 	bl	8002f84 <ADC_Enable>
 8002a70:	4603      	mov	r3, r0
 8002a72:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d11a      	bne.n	8002ab0 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a82:	f023 0301 	bic.w	r3, r3, #1
 8002a86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	221c      	movs	r2, #28
 8002a9a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff fdfa 	bl	80026a2 <LL_ADC_REG_StartConversion>
 8002aae:	e006      	b.n	8002abe <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002ab8:	e001      	b.n	8002abe <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002aba:	2302      	movs	r3, #2
 8002abc:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d101      	bne.n	8002ade <HAL_ADC_Stop+0x16>
 8002ada:	2302      	movs	r3, #2
 8002adc:	e022      	b.n	8002b24 <HAL_ADC_Stop+0x5c>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 fa07 	bl	8002efa <ADC_ConversionStop>
 8002aec:	4603      	mov	r3, r0
 8002aee:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d111      	bne.n	8002b1a <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 faca 	bl	8003090 <ADC_Disable>
 8002afc:	4603      	mov	r3, r0
 8002afe:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d109      	bne.n	8002b1a <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b0e:	f023 0301 	bic.w	r3, r3, #1
 8002b12:	f043 0201 	orr.w	r2, r3, #1
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8002b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	2b08      	cmp	r3, #8
 8002b3c:	d102      	bne.n	8002b44 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8002b3e:	2308      	movs	r3, #8
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	e010      	b.n	8002b66 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d007      	beq.n	8002b62 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b56:	f043 0220 	orr.w	r2, r3, #32
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e077      	b.n	8002c52 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002b62:	2304      	movs	r3, #4
 8002b64:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002b66:	f7ff fc17 	bl	8002398 <HAL_GetTick>
 8002b6a:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002b6c:	e021      	b.n	8002bb2 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b74:	d01d      	beq.n	8002bb2 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002b76:	f7ff fc0f 	bl	8002398 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d302      	bcc.n	8002b8c <HAL_ADC_PollForConversion+0x60>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d112      	bne.n	8002bb2 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	4013      	ands	r3, r2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10b      	bne.n	8002bb2 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9e:	f043 0204 	orr.w	r2, r3, #4
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e04f      	b.n	8002c52 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d0d6      	beq.n	8002b6e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff fc82 	bl	80024da <LL_ADC_REG_IsTriggerSourceSWStart>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d031      	beq.n	8002c40 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	7e9b      	ldrb	r3, [r3, #26]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d12d      	bne.n	8002c40 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	2b08      	cmp	r3, #8
 8002bf0:	d126      	bne.n	8002c40 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff fd79 	bl	80026ee <LL_ADC_REG_IsConversionOngoing>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d112      	bne.n	8002c28 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 020c 	bic.w	r2, r2, #12
 8002c10:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c1a:	f023 0301 	bic.w	r3, r3, #1
 8002c1e:	f043 0201 	orr.w	r2, r3, #1
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	659a      	str	r2, [r3, #88]	; 0x58
 8002c26:	e00b      	b.n	8002c40 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2c:	f043 0220 	orr.w	r2, r3, #32
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c38:	f043 0201 	orr.w	r2, r3, #1
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	7e1b      	ldrb	r3, [r3, #24]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d103      	bne.n	8002c50 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	220c      	movs	r2, #12
 8002c4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr
	...

08002c74 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b088      	sub	sp, #32
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d101      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x28>
 8002c98:	2302      	movs	r3, #2
 8002c9a:	e110      	b.n	8002ebe <HAL_ADC_ConfigChannel+0x24a>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff fd20 	bl	80026ee <LL_ADC_REG_IsConversionOngoing>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f040 80f7 	bne.w	8002ea4 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	f000 80b1 	beq.w	8002e22 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cc8:	d004      	beq.n	8002cd4 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002cce:	4a7e      	ldr	r2, [pc, #504]	; (8002ec8 <HAL_ADC_ConfigChannel+0x254>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d108      	bne.n	8002ce6 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4610      	mov	r0, r2
 8002ce0:	f7ff fc2e 	bl	8002540 <LL_ADC_REG_SetSequencerChAdd>
 8002ce4:	e041      	b.n	8002d6a <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f003 031f 	and.w	r3, r3, #31
 8002cf2:	210f      	movs	r1, #15
 8002cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	401a      	ands	r2, r3
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d105      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0xa0>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	0e9b      	lsrs	r3, r3, #26
 8002d0e:	f003 031f 	and.w	r3, r3, #31
 8002d12:	e011      	b.n	8002d38 <HAL_ADC_ConfigChannel+0xc4>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	fa93 f3a3 	rbit	r3, r3
 8002d20:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8002d2c:	2320      	movs	r3, #32
 8002d2e:	e003      	b.n	8002d38 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	fab3 f383 	clz	r3, r3
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	6839      	ldr	r1, [r7, #0]
 8002d3a:	6849      	ldr	r1, [r1, #4]
 8002d3c:	f001 011f 	and.w	r1, r1, #31
 8002d40:	408b      	lsls	r3, r1
 8002d42:	431a      	orrs	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	089b      	lsrs	r3, r3, #2
 8002d4e:	1c5a      	adds	r2, r3, #1
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	69db      	ldr	r3, [r3, #28]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d808      	bhi.n	8002d6a <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6818      	ldr	r0, [r3, #0]
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	6859      	ldr	r1, [r3, #4]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	461a      	mov	r2, r3
 8002d66:	f7ff fbca 	bl	80024fe <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6818      	ldr	r0, [r3, #0]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	6819      	ldr	r1, [r3, #0]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	461a      	mov	r2, r3
 8002d78:	f7ff fc07 	bl	800258a <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f280 8097 	bge.w	8002eb4 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d86:	4851      	ldr	r0, [pc, #324]	; (8002ecc <HAL_ADC_ConfigChannel+0x258>)
 8002d88:	f7ff fb64 	bl	8002454 <LL_ADC_GetCommonPathInternalCh>
 8002d8c:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a4f      	ldr	r2, [pc, #316]	; (8002ed0 <HAL_ADC_ConfigChannel+0x25c>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d120      	bne.n	8002dda <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d11b      	bne.n	8002dda <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002da8:	4619      	mov	r1, r3
 8002daa:	4848      	ldr	r0, [pc, #288]	; (8002ecc <HAL_ADC_ConfigChannel+0x258>)
 8002dac:	f7ff fb40 	bl	8002430 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002db0:	4b48      	ldr	r3, [pc, #288]	; (8002ed4 <HAL_ADC_ConfigChannel+0x260>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	099b      	lsrs	r3, r3, #6
 8002db6:	4a48      	ldr	r2, [pc, #288]	; (8002ed8 <HAL_ADC_ConfigChannel+0x264>)
 8002db8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbc:	099b      	lsrs	r3, r3, #6
 8002dbe:	1c5a      	adds	r2, r3, #1
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002dca:	e002      	b.n	8002dd2 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1f9      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002dd8:	e06c      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a3f      	ldr	r2, [pc, #252]	; (8002edc <HAL_ADC_ConfigChannel+0x268>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d10c      	bne.n	8002dfe <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d107      	bne.n	8002dfe <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002df4:	4619      	mov	r1, r3
 8002df6:	4835      	ldr	r0, [pc, #212]	; (8002ecc <HAL_ADC_ConfigChannel+0x258>)
 8002df8:	f7ff fb1a 	bl	8002430 <LL_ADC_SetCommonPathInternalCh>
 8002dfc:	e05a      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a37      	ldr	r2, [pc, #220]	; (8002ee0 <HAL_ADC_ConfigChannel+0x26c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d155      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d150      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e18:	4619      	mov	r1, r3
 8002e1a:	482c      	ldr	r0, [pc, #176]	; (8002ecc <HAL_ADC_ConfigChannel+0x258>)
 8002e1c:	f7ff fb08 	bl	8002430 <LL_ADC_SetCommonPathInternalCh>
 8002e20:	e048      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e2a:	d004      	beq.n	8002e36 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002e30:	4a25      	ldr	r2, [pc, #148]	; (8002ec8 <HAL_ADC_ConfigChannel+0x254>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d107      	bne.n	8002e46 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4610      	mov	r0, r2
 8002e42:	f7ff fb8f 	bl	8002564 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	da32      	bge.n	8002eb4 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e4e:	481f      	ldr	r0, [pc, #124]	; (8002ecc <HAL_ADC_ConfigChannel+0x258>)
 8002e50:	f7ff fb00 	bl	8002454 <LL_ADC_GetCommonPathInternalCh>
 8002e54:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a1d      	ldr	r2, [pc, #116]	; (8002ed0 <HAL_ADC_ConfigChannel+0x25c>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d107      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e66:	4619      	mov	r1, r3
 8002e68:	4818      	ldr	r0, [pc, #96]	; (8002ecc <HAL_ADC_ConfigChannel+0x258>)
 8002e6a:	f7ff fae1 	bl	8002430 <LL_ADC_SetCommonPathInternalCh>
 8002e6e:	e021      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a19      	ldr	r2, [pc, #100]	; (8002edc <HAL_ADC_ConfigChannel+0x268>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d107      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e80:	4619      	mov	r1, r3
 8002e82:	4812      	ldr	r0, [pc, #72]	; (8002ecc <HAL_ADC_ConfigChannel+0x258>)
 8002e84:	f7ff fad4 	bl	8002430 <LL_ADC_SetCommonPathInternalCh>
 8002e88:	e014      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a14      	ldr	r2, [pc, #80]	; (8002ee0 <HAL_ADC_ConfigChannel+0x26c>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d10f      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	480b      	ldr	r0, [pc, #44]	; (8002ecc <HAL_ADC_ConfigChannel+0x258>)
 8002e9e:	f7ff fac7 	bl	8002430 <LL_ADC_SetCommonPathInternalCh>
 8002ea2:	e007      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea8:	f043 0220 	orr.w	r2, r3, #32
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8002ebc:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3720      	adds	r7, #32
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	80000004 	.word	0x80000004
 8002ecc:	40012708 	.word	0x40012708
 8002ed0:	b0001000 	.word	0xb0001000
 8002ed4:	20000000 	.word	0x20000000
 8002ed8:	053e2d63 	.word	0x053e2d63
 8002edc:	b8004000 	.word	0xb8004000
 8002ee0:	b4002000 	.word	0xb4002000

08002ee4 <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bc80      	pop	{r7}
 8002ef8:	4770      	bx	lr

08002efa <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b084      	sub	sp, #16
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff fbf1 	bl	80026ee <LL_ADC_REG_IsConversionOngoing>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d033      	beq.n	8002f7a <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff fbb1 	bl	800267e <LL_ADC_IsDisableOngoing>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d104      	bne.n	8002f2c <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff fbce 	bl	80026c8 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f2c:	f7ff fa34 	bl	8002398 <HAL_GetTick>
 8002f30:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002f32:	e01b      	b.n	8002f6c <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002f34:	f7ff fa30 	bl	8002398 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d914      	bls.n	8002f6c <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00d      	beq.n	8002f6c <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f54:	f043 0210 	orr.w	r2, r3, #16
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f60:	f043 0201 	orr.w	r2, r3, #1
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e007      	b.n	8002f7c <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1dc      	bne.n	8002f34 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff fb60 	bl	800265a <LL_ADC_IsEnabled>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d169      	bne.n	8003074 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	4b36      	ldr	r3, [pc, #216]	; (8003080 <ADC_Enable+0xfc>)
 8002fa8:	4013      	ands	r3, r2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00d      	beq.n	8002fca <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb2:	f043 0210 	orr.w	r2, r3, #16
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fbe:	f043 0201 	orr.w	r2, r3, #1
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e055      	b.n	8003076 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff fb1d 	bl	800260e <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8002fd4:	482b      	ldr	r0, [pc, #172]	; (8003084 <ADC_Enable+0x100>)
 8002fd6:	f7ff fa3d 	bl	8002454 <LL_ADC_GetCommonPathInternalCh>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00f      	beq.n	8003004 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fe4:	4b28      	ldr	r3, [pc, #160]	; (8003088 <ADC_Enable+0x104>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	099b      	lsrs	r3, r3, #6
 8002fea:	4a28      	ldr	r2, [pc, #160]	; (800308c <ADC_Enable+0x108>)
 8002fec:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff0:	099b      	lsrs	r3, r3, #6
 8002ff2:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8002ff4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ff6:	e002      	b.n	8002ffe <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1f9      	bne.n	8002ff8 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	7e5b      	ldrb	r3, [r3, #25]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d033      	beq.n	8003074 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800300c:	f7ff f9c4 	bl	8002398 <HAL_GetTick>
 8003010:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003012:	e028      	b.n	8003066 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff fb1e 	bl	800265a <LL_ADC_IsEnabled>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d104      	bne.n	800302e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff faf0 	bl	800260e <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800302e:	f7ff f9b3 	bl	8002398 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d914      	bls.n	8003066 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b01      	cmp	r3, #1
 8003048:	d00d      	beq.n	8003066 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304e:	f043 0210 	orr.w	r2, r3, #16
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800305a:	f043 0201 	orr.w	r2, r3, #1
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e007      	b.n	8003076 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b01      	cmp	r3, #1
 8003072:	d1cf      	bne.n	8003014 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	80000017 	.word	0x80000017
 8003084:	40012708 	.word	0x40012708
 8003088:	20000000 	.word	0x20000000
 800308c:	053e2d63 	.word	0x053e2d63

08003090 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff faee 	bl	800267e <LL_ADC_IsDisableOngoing>
 80030a2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff fad6 	bl	800265a <LL_ADC_IsEnabled>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d047      	beq.n	8003144 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d144      	bne.n	8003144 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f003 0305 	and.w	r3, r3, #5
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d10c      	bne.n	80030e2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff fab1 	bl	8002634 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2203      	movs	r2, #3
 80030d8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80030da:	f7ff f95d 	bl	8002398 <HAL_GetTick>
 80030de:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80030e0:	e029      	b.n	8003136 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e6:	f043 0210 	orr.w	r2, r3, #16
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f2:	f043 0201 	orr.w	r2, r3, #1
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e023      	b.n	8003146 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80030fe:	f7ff f94b 	bl	8002398 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d914      	bls.n	8003136 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00d      	beq.n	8003136 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311e:	f043 0210 	orr.w	r2, r3, #16
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312a:	f043 0201 	orr.w	r2, r3, #1
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e007      	b.n	8003146 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1dc      	bne.n	80030fe <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <LL_ADC_SetCalibrationFactor>:
{
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
 8003156:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800315e:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	431a      	orrs	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr

08003176 <LL_ADC_GetCalibrationFactor>:
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003184:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003188:	4618      	mov	r0, r3
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	bc80      	pop	{r7}
 8003190:	4770      	bx	lr

08003192 <LL_ADC_Enable>:
{
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031a2:	f023 0317 	bic.w	r3, r3, #23
 80031a6:	f043 0201 	orr.w	r2, r3, #1
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	609a      	str	r2, [r3, #8]
}
 80031ae:	bf00      	nop
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bc80      	pop	{r7}
 80031b6:	4770      	bx	lr

080031b8 <LL_ADC_Disable>:
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031c8:	f023 0317 	bic.w	r3, r3, #23
 80031cc:	f043 0202 	orr.w	r2, r3, #2
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	609a      	str	r2, [r3, #8]
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr

080031de <LL_ADC_IsEnabled>:
{
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d101      	bne.n	80031f6 <LL_ADC_IsEnabled+0x18>
 80031f2:	2301      	movs	r3, #1
 80031f4:	e000      	b.n	80031f8 <LL_ADC_IsEnabled+0x1a>
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr

08003202 <LL_ADC_StartCalibration>:
{
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003212:	f023 0317 	bic.w	r3, r3, #23
 8003216:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	609a      	str	r2, [r3, #8]
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr

08003228 <LL_ADC_IsCalibrationOnGoing>:
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003238:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800323c:	d101      	bne.n	8003242 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800323e:	2301      	movs	r3, #1
 8003240:	e000      	b.n	8003244 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr

0800324e <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b088      	sub	sp, #32
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003256:	2300      	movs	r3, #0
 8003258:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 800325a:	2300      	movs	r3, #0
 800325c:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003264:	2b01      	cmp	r3, #1
 8003266:	d101      	bne.n	800326c <HAL_ADCEx_Calibration_Start+0x1e>
 8003268:	2302      	movs	r3, #2
 800326a:	e0b9      	b.n	80033e0 <HAL_ADCEx_Calibration_Start+0x192>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f7ff ff0b 	bl	8003090 <ADC_Disable>
 800327a:	4603      	mov	r3, r0
 800327c:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff ffab 	bl	80031de <LL_ADC_IsEnabled>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	f040 809d 	bne.w	80033ca <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003294:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003298:	f043 0202 	orr.w	r2, r3, #2
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	f248 0303 	movw	r3, #32771	; 0x8003
 80032aa:	4013      	ands	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6812      	ldr	r2, [r2, #0]
 80032b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80032bc:	f023 0303 	bic.w	r3, r3, #3
 80032c0:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80032c2:	2300      	movs	r3, #0
 80032c4:	61fb      	str	r3, [r7, #28]
 80032c6:	e02e      	b.n	8003326 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff ff98 	bl	8003202 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80032d2:	e014      	b.n	80032fe <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	3301      	adds	r3, #1
 80032d8:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 80032e0:	d30d      	bcc.n	80032fe <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e6:	f023 0312 	bic.w	r3, r3, #18
 80032ea:	f043 0210 	orr.w	r2, r3, #16
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e070      	b.n	80033e0 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f7ff ff90 	bl	8003228 <LL_ADC_IsCalibrationOnGoing>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1e2      	bne.n	80032d4 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f7ff ff2f 	bl	8003176 <LL_ADC_GetCalibrationFactor>
 8003318:	4602      	mov	r2, r0
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	4413      	add	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	3301      	adds	r3, #1
 8003324:	61fb      	str	r3, [r7, #28]
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	2b07      	cmp	r3, #7
 800332a:	d9cd      	bls.n	80032c8 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	fbb2 f3f3 	udiv	r3, r2, r3
 8003334:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff ff29 	bl	8003192 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	69b9      	ldr	r1, [r7, #24]
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff ff01 	bl	800314e <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff ff31 	bl	80031b8 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003356:	f7ff f81f 	bl	8002398 <HAL_GetTick>
 800335a:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800335c:	e01c      	b.n	8003398 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800335e:	f7ff f81b 	bl	8002398 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d915      	bls.n	8003398 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff ff34 	bl	80031de <LL_ADC_IsEnabled>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00d      	beq.n	8003398 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003380:	f043 0210 	orr.w	r2, r3, #16
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338c:	f043 0201 	orr.w	r2, r3, #1
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e023      	b.n	80033e0 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff ff1e 	bl	80031de <LL_ADC_IsEnabled>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1da      	bne.n	800335e <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68d9      	ldr	r1, [r3, #12]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033bc:	f023 0303 	bic.w	r3, r3, #3
 80033c0:	f043 0201 	orr.w	r2, r3, #1
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	659a      	str	r2, [r3, #88]	; 0x58
 80033c8:	e005      	b.n	80033d6 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ce:	f043 0210 	orr.w	r2, r3, #16
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80033de:	7dfb      	ldrb	r3, [r7, #23]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3720      	adds	r7, #32
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033f8:	4b0c      	ldr	r3, [pc, #48]	; (800342c <__NVIC_SetPriorityGrouping+0x44>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003404:	4013      	ands	r3, r2
 8003406:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003410:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003418:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800341a:	4a04      	ldr	r2, [pc, #16]	; (800342c <__NVIC_SetPriorityGrouping+0x44>)
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	60d3      	str	r3, [r2, #12]
}
 8003420:	bf00      	nop
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	bc80      	pop	{r7}
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	e000ed00 	.word	0xe000ed00

08003430 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003434:	4b04      	ldr	r3, [pc, #16]	; (8003448 <__NVIC_GetPriorityGrouping+0x18>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	0a1b      	lsrs	r3, r3, #8
 800343a:	f003 0307 	and.w	r3, r3, #7
}
 800343e:	4618      	mov	r0, r3
 8003440:	46bd      	mov	sp, r7
 8003442:	bc80      	pop	{r7}
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	e000ed00 	.word	0xe000ed00

0800344c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	4603      	mov	r3, r0
 8003454:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345a:	2b00      	cmp	r3, #0
 800345c:	db0b      	blt.n	8003476 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800345e:	79fb      	ldrb	r3, [r7, #7]
 8003460:	f003 021f 	and.w	r2, r3, #31
 8003464:	4906      	ldr	r1, [pc, #24]	; (8003480 <__NVIC_EnableIRQ+0x34>)
 8003466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346a:	095b      	lsrs	r3, r3, #5
 800346c:	2001      	movs	r0, #1
 800346e:	fa00 f202 	lsl.w	r2, r0, r2
 8003472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	bc80      	pop	{r7}
 800347e:	4770      	bx	lr
 8003480:	e000e100 	.word	0xe000e100

08003484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	6039      	str	r1, [r7, #0]
 800348e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003494:	2b00      	cmp	r3, #0
 8003496:	db0a      	blt.n	80034ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	b2da      	uxtb	r2, r3
 800349c:	490c      	ldr	r1, [pc, #48]	; (80034d0 <__NVIC_SetPriority+0x4c>)
 800349e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a2:	0112      	lsls	r2, r2, #4
 80034a4:	b2d2      	uxtb	r2, r2
 80034a6:	440b      	add	r3, r1
 80034a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034ac:	e00a      	b.n	80034c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	4908      	ldr	r1, [pc, #32]	; (80034d4 <__NVIC_SetPriority+0x50>)
 80034b4:	79fb      	ldrb	r3, [r7, #7]
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	3b04      	subs	r3, #4
 80034bc:	0112      	lsls	r2, r2, #4
 80034be:	b2d2      	uxtb	r2, r2
 80034c0:	440b      	add	r3, r1
 80034c2:	761a      	strb	r2, [r3, #24]
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bc80      	pop	{r7}
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	e000e100 	.word	0xe000e100
 80034d4:	e000ed00 	.word	0xe000ed00

080034d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034d8:	b480      	push	{r7}
 80034da:	b089      	sub	sp, #36	; 0x24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	f1c3 0307 	rsb	r3, r3, #7
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	bf28      	it	cs
 80034f6:	2304      	movcs	r3, #4
 80034f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	3304      	adds	r3, #4
 80034fe:	2b06      	cmp	r3, #6
 8003500:	d902      	bls.n	8003508 <NVIC_EncodePriority+0x30>
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	3b03      	subs	r3, #3
 8003506:	e000      	b.n	800350a <NVIC_EncodePriority+0x32>
 8003508:	2300      	movs	r3, #0
 800350a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800350c:	f04f 32ff 	mov.w	r2, #4294967295
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	43da      	mvns	r2, r3
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	401a      	ands	r2, r3
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003520:	f04f 31ff 	mov.w	r1, #4294967295
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	fa01 f303 	lsl.w	r3, r1, r3
 800352a:	43d9      	mvns	r1, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003530:	4313      	orrs	r3, r2
         );
}
 8003532:	4618      	mov	r0, r3
 8003534:	3724      	adds	r7, #36	; 0x24
 8003536:	46bd      	mov	sp, r7
 8003538:	bc80      	pop	{r7}
 800353a:	4770      	bx	lr

0800353c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f7ff ff4f 	bl	80033e8 <__NVIC_SetPriorityGrouping>
}
 800354a:	bf00      	nop
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b086      	sub	sp, #24
 8003556:	af00      	add	r7, sp, #0
 8003558:	4603      	mov	r3, r0
 800355a:	60b9      	str	r1, [r7, #8]
 800355c:	607a      	str	r2, [r7, #4]
 800355e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003560:	f7ff ff66 	bl	8003430 <__NVIC_GetPriorityGrouping>
 8003564:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	68b9      	ldr	r1, [r7, #8]
 800356a:	6978      	ldr	r0, [r7, #20]
 800356c:	f7ff ffb4 	bl	80034d8 <NVIC_EncodePriority>
 8003570:	4602      	mov	r2, r0
 8003572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003576:	4611      	mov	r1, r2
 8003578:	4618      	mov	r0, r3
 800357a:	f7ff ff83 	bl	8003484 <__NVIC_SetPriority>
}
 800357e:	bf00      	nop
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b082      	sub	sp, #8
 800358a:	af00      	add	r7, sp, #0
 800358c:	4603      	mov	r3, r0
 800358e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff ff59 	bl	800344c <__NVIC_EnableIRQ>
}
 800359a:	bf00      	nop
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e04f      	b.n	8003654 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d008      	beq.n	80035d2 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2204      	movs	r2, #4
 80035c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e040      	b.n	8003654 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 020e 	bic.w	r2, r2, #14
 80035e0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035f0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0201 	bic.w	r2, r2, #1
 8003600:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003606:	f003 021c 	and.w	r2, r3, #28
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	2101      	movs	r1, #1
 8003610:	fa01 f202 	lsl.w	r2, r1, r2
 8003614:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800361e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00c      	beq.n	8003642 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003632:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003636:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003640:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	bc80      	pop	{r7}
 800365c:	4770      	bx	lr

0800365e <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b084      	sub	sp, #16
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003666:	2300      	movs	r3, #0
 8003668:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d005      	beq.n	8003682 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2204      	movs	r2, #4
 800367a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	73fb      	strb	r3, [r7, #15]
 8003680:	e047      	b.n	8003712 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 020e 	bic.w	r2, r2, #14
 8003690:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0201 	bic.w	r2, r2, #1
 80036a0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b6:	f003 021c 	and.w	r2, r3, #28
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	2101      	movs	r1, #1
 80036c0:	fa01 f202 	lsl.w	r2, r1, r2
 80036c4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80036ce:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00c      	beq.n	80036f2 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036e6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80036f0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003706:	2b00      	cmp	r3, #0
 8003708:	d003      	beq.n	8003712 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	4798      	blx	r3
    }
  }
  return status;
 8003712:	7bfb      	ldrb	r3, [r7, #15]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800371c:	b480      	push	{r7}
 800371e:	b087      	sub	sp, #28
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003726:	2300      	movs	r3, #0
 8003728:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800372a:	e140      	b.n	80039ae <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	2101      	movs	r1, #1
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	fa01 f303 	lsl.w	r3, r1, r3
 8003738:	4013      	ands	r3, r2
 800373a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 8132 	beq.w	80039a8 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f003 0303 	and.w	r3, r3, #3
 800374c:	2b01      	cmp	r3, #1
 800374e:	d005      	beq.n	800375c <HAL_GPIO_Init+0x40>
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f003 0303 	and.w	r3, r3, #3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d130      	bne.n	80037be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	2203      	movs	r2, #3
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	43db      	mvns	r3, r3
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	4013      	ands	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	68da      	ldr	r2, [r3, #12]
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	4313      	orrs	r3, r2
 8003784:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003792:	2201      	movs	r2, #1
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	fa02 f303 	lsl.w	r3, r2, r3
 800379a:	43db      	mvns	r3, r3
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	4013      	ands	r3, r2
 80037a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	091b      	lsrs	r3, r3, #4
 80037a8:	f003 0201 	and.w	r2, r3, #1
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	2b03      	cmp	r3, #3
 80037c8:	d017      	beq.n	80037fa <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	2203      	movs	r2, #3
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	43db      	mvns	r3, r3
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	4013      	ands	r3, r2
 80037e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	689a      	ldr	r2, [r3, #8]
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	fa02 f303 	lsl.w	r3, r2, r3
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f003 0303 	and.w	r3, r3, #3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d123      	bne.n	800384e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	08da      	lsrs	r2, r3, #3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	3208      	adds	r2, #8
 800380e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003812:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	220f      	movs	r2, #15
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	43db      	mvns	r3, r3
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	4013      	ands	r3, r2
 8003828:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	691a      	ldr	r2, [r3, #16]
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	4313      	orrs	r3, r2
 800383e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	08da      	lsrs	r2, r3, #3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	3208      	adds	r2, #8
 8003848:	6939      	ldr	r1, [r7, #16]
 800384a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	2203      	movs	r2, #3
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	43db      	mvns	r3, r3
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	4013      	ands	r3, r2
 8003864:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f003 0203 	and.w	r2, r3, #3
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	4313      	orrs	r3, r2
 800387a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800388a:	2b00      	cmp	r3, #0
 800388c:	f000 808c 	beq.w	80039a8 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003890:	4a4e      	ldr	r2, [pc, #312]	; (80039cc <HAL_GPIO_Init+0x2b0>)
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	089b      	lsrs	r3, r3, #2
 8003896:	3302      	adds	r3, #2
 8003898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800389c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f003 0303 	and.w	r3, r3, #3
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	2207      	movs	r2, #7
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	43db      	mvns	r3, r3
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	4013      	ands	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80038ba:	d00d      	beq.n	80038d8 <HAL_GPIO_Init+0x1bc>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a44      	ldr	r2, [pc, #272]	; (80039d0 <HAL_GPIO_Init+0x2b4>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d007      	beq.n	80038d4 <HAL_GPIO_Init+0x1b8>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a43      	ldr	r2, [pc, #268]	; (80039d4 <HAL_GPIO_Init+0x2b8>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d101      	bne.n	80038d0 <HAL_GPIO_Init+0x1b4>
 80038cc:	2302      	movs	r3, #2
 80038ce:	e004      	b.n	80038da <HAL_GPIO_Init+0x1be>
 80038d0:	2307      	movs	r3, #7
 80038d2:	e002      	b.n	80038da <HAL_GPIO_Init+0x1be>
 80038d4:	2301      	movs	r3, #1
 80038d6:	e000      	b.n	80038da <HAL_GPIO_Init+0x1be>
 80038d8:	2300      	movs	r3, #0
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	f002 0203 	and.w	r2, r2, #3
 80038e0:	0092      	lsls	r2, r2, #2
 80038e2:	4093      	lsls	r3, r2
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038ea:	4938      	ldr	r1, [pc, #224]	; (80039cc <HAL_GPIO_Init+0x2b0>)
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	089b      	lsrs	r3, r3, #2
 80038f0:	3302      	adds	r3, #2
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80038f8:	4b37      	ldr	r3, [pc, #220]	; (80039d8 <HAL_GPIO_Init+0x2bc>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	43db      	mvns	r3, r3
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	4013      	ands	r3, r2
 8003906:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d003      	beq.n	800391c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	4313      	orrs	r3, r2
 800391a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800391c:	4a2e      	ldr	r2, [pc, #184]	; (80039d8 <HAL_GPIO_Init+0x2bc>)
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003922:	4b2d      	ldr	r3, [pc, #180]	; (80039d8 <HAL_GPIO_Init+0x2bc>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	43db      	mvns	r3, r3
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	4013      	ands	r3, r2
 8003930:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4313      	orrs	r3, r2
 8003944:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003946:	4a24      	ldr	r2, [pc, #144]	; (80039d8 <HAL_GPIO_Init+0x2bc>)
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800394c:	4b22      	ldr	r3, [pc, #136]	; (80039d8 <HAL_GPIO_Init+0x2bc>)
 800394e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003952:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	43db      	mvns	r3, r3
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	4013      	ands	r3, r2
 800395c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4313      	orrs	r3, r2
 8003970:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8003972:	4a19      	ldr	r2, [pc, #100]	; (80039d8 <HAL_GPIO_Init+0x2bc>)
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800397a:	4b17      	ldr	r3, [pc, #92]	; (80039d8 <HAL_GPIO_Init+0x2bc>)
 800397c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003980:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	43db      	mvns	r3, r3
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	4013      	ands	r3, r2
 800398a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	4313      	orrs	r3, r2
 800399e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80039a0:	4a0d      	ldr	r2, [pc, #52]	; (80039d8 <HAL_GPIO_Init+0x2bc>)
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	3301      	adds	r3, #1
 80039ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	fa22 f303 	lsr.w	r3, r2, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f47f aeb7 	bne.w	800372c <HAL_GPIO_Init+0x10>
  }
}
 80039be:	bf00      	nop
 80039c0:	bf00      	nop
 80039c2:	371c      	adds	r7, #28
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bc80      	pop	{r7}
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	40010000 	.word	0x40010000
 80039d0:	48000400 	.word	0x48000400
 80039d4:	48000800 	.word	0x48000800
 80039d8:	58000800 	.word	0x58000800

080039dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	460b      	mov	r3, r1
 80039e6:	807b      	strh	r3, [r7, #2]
 80039e8:	4613      	mov	r3, r2
 80039ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039ec:	787b      	ldrb	r3, [r7, #1]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039f2:	887a      	ldrh	r2, [r7, #2]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039f8:	e002      	b.n	8003a00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039fa:	887a      	ldrh	r2, [r7, #2]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bc80      	pop	{r7}
 8003a08:	4770      	bx	lr

08003a0a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b082      	sub	sp, #8
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e081      	b.n	8003b20 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d106      	bne.n	8003a36 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7fe f9b3 	bl	8001d9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2224      	movs	r2, #36	; 0x24
 8003a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0201 	bic.w	r2, r2, #1
 8003a4c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a5a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689a      	ldr	r2, [r3, #8]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a6a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d107      	bne.n	8003a84 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a80:	609a      	str	r2, [r3, #8]
 8003a82:	e006      	b.n	8003a92 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003a90:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d104      	bne.n	8003aa4 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003aa2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	6812      	ldr	r2, [r2, #0]
 8003aae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ab2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ab6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68da      	ldr	r2, [r3, #12]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ac6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	691a      	ldr	r2, [r3, #16]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69d9      	ldr	r1, [r3, #28]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1a      	ldr	r2, [r3, #32]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f042 0201 	orr.w	r2, r2, #1
 8003b00:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3708      	adds	r7, #8
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b20      	cmp	r3, #32
 8003b3c:	d138      	bne.n	8003bb0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d101      	bne.n	8003b4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b48:	2302      	movs	r3, #2
 8003b4a:	e032      	b.n	8003bb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2224      	movs	r2, #36	; 0x24
 8003b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 0201 	bic.w	r2, r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6819      	ldr	r1, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 0201 	orr.w	r2, r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bac:	2300      	movs	r3, #0
 8003bae:	e000      	b.n	8003bb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003bb0:	2302      	movs	r3, #2
  }
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bc80      	pop	{r7}
 8003bba:	4770      	bx	lr

08003bbc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b20      	cmp	r3, #32
 8003bd0:	d139      	bne.n	8003c46 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d101      	bne.n	8003be0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e033      	b.n	8003c48 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2224      	movs	r2, #36	; 0x24
 8003bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 0201 	bic.w	r2, r2, #1
 8003bfe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c0e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	021b      	lsls	r3, r3, #8
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f042 0201 	orr.w	r2, r2, #1
 8003c30:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2220      	movs	r2, #32
 8003c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c42:	2300      	movs	r3, #0
 8003c44:	e000      	b.n	8003c48 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c46:	2302      	movs	r3, #2
  }
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bc80      	pop	{r7}
 8003c50:	4770      	bx	lr
	...

08003c54 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c58:	4b04      	ldr	r3, [pc, #16]	; (8003c6c <HAL_PWR_EnableBkUpAccess+0x18>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a03      	ldr	r2, [pc, #12]	; (8003c6c <HAL_PWR_EnableBkUpAccess+0x18>)
 8003c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c62:	6013      	str	r3, [r2, #0]
}
 8003c64:	bf00      	nop
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bc80      	pop	{r7}
 8003c6a:	4770      	bx	lr
 8003c6c:	58000400 	.word	0x58000400

08003c70 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003c74:	4b03      	ldr	r3, [pc, #12]	; (8003c84 <HAL_PWREx_GetVoltageRange+0x14>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bc80      	pop	{r7}
 8003c82:	4770      	bx	lr
 8003c84:	58000400 	.word	0x58000400

08003c88 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8003c8c:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c98:	d101      	bne.n	8003c9e <LL_PWR_IsEnabledBkUpAccess+0x16>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e000      	b.n	8003ca0 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bc80      	pop	{r7}
 8003ca6:	4770      	bx	lr
 8003ca8:	58000400 	.word	0x58000400

08003cac <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cbe:	6013      	str	r3, [r2, #0]
}
 8003cc0:	bf00      	nop
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bc80      	pop	{r7}
 8003cc6:	4770      	bx	lr

08003cc8 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cd6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003cda:	6013      	str	r3, [r2, #0]
}
 8003cdc:	bf00      	nop
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr

08003ce4 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cf6:	d101      	bne.n	8003cfc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e000      	b.n	8003cfe <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bc80      	pop	{r7}
 8003d04:	4770      	bx	lr

08003d06 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8003d06:	b480      	push	{r7}
 8003d08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d18:	6013      	str	r3, [r2, #0]
}
 8003d1a:	bf00      	nop
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bc80      	pop	{r7}
 8003d20:	4770      	bx	lr

08003d22 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8003d22:	b480      	push	{r7}
 8003d24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d34:	6013      	str	r3, [r2, #0]
}
 8003d36:	bf00      	nop
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bc80      	pop	{r7}
 8003d3c:	4770      	bx	lr

08003d3e <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d50:	d101      	bne.n	8003d56 <LL_RCC_HSE_IsReady+0x18>
 8003d52:	2301      	movs	r3, #1
 8003d54:	e000      	b.n	8003d58 <LL_RCC_HSE_IsReady+0x1a>
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bc80      	pop	{r7}
 8003d5e:	4770      	bx	lr

08003d60 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d72:	6013      	str	r3, [r2, #0]
}
 8003d74:	bf00      	nop
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bc80      	pop	{r7}
 8003d7a:	4770      	bx	lr

08003d7c <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d8e:	6013      	str	r3, [r2, #0]
}
 8003d90:	bf00      	nop
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bc80      	pop	{r7}
 8003d96:	4770      	bx	lr

08003d98 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003daa:	d101      	bne.n	8003db0 <LL_RCC_HSI_IsReady+0x18>
 8003dac:	2301      	movs	r3, #1
 8003dae:	e000      	b.n	8003db2 <LL_RCC_HSI_IsReady+0x1a>
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bc80      	pop	{r7}
 8003db8:	4770      	bx	lr

08003dba <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b083      	sub	sp, #12
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	061b      	lsls	r3, r3, #24
 8003dd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	604b      	str	r3, [r1, #4]
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bc80      	pop	{r7}
 8003de0:	4770      	bx	lr

08003de2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8003de2:	b480      	push	{r7}
 8003de4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d101      	bne.n	8003dfa <LL_RCC_LSE_IsReady+0x18>
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <LL_RCC_LSE_IsReady+0x1a>
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bc80      	pop	{r7}
 8003e02:	4770      	bx	lr

08003e04 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8003e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e14:	f043 0301 	orr.w	r3, r3, #1
 8003e18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003e1c:	bf00      	nop
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bc80      	pop	{r7}
 8003e22:	4770      	bx	lr

08003e24 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e34:	f023 0301 	bic.w	r3, r3, #1
 8003e38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003e3c:	bf00      	nop
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bc80      	pop	{r7}
 8003e42:	4770      	bx	lr

08003e44 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8003e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d101      	bne.n	8003e5c <LL_RCC_LSI_IsReady+0x18>
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e000      	b.n	8003e5e <LL_RCC_LSI_IsReady+0x1a>
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bc80      	pop	{r7}
 8003e64:	4770      	bx	lr

08003e66 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8003e66:	b480      	push	{r7}
 8003e68:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e74:	f043 0301 	orr.w	r3, r3, #1
 8003e78:	6013      	str	r3, [r2, #0]
}
 8003e7a:	bf00      	nop
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bc80      	pop	{r7}
 8003e80:	4770      	bx	lr

08003e82 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8003e82:	b480      	push	{r7}
 8003e84:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e90:	f023 0301 	bic.w	r3, r3, #1
 8003e94:	6013      	str	r3, [r2, #0]
}
 8003e96:	bf00      	nop
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bc80      	pop	{r7}
 8003e9c:	4770      	bx	lr

08003e9e <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d101      	bne.n	8003eb4 <LL_RCC_MSI_IsReady+0x16>
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e000      	b.n	8003eb6 <LL_RCC_MSI_IsReady+0x18>
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bc80      	pop	{r7}
 8003ebc:	4770      	bx	lr

08003ebe <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8003ec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0308 	and.w	r3, r3, #8
 8003ecc:	2b08      	cmp	r3, #8
 8003ece:	d101      	bne.n	8003ed4 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e000      	b.n	8003ed6 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bc80      	pop	{r7}
 8003edc:	4770      	bx	lr

08003ede <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8003ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bc80      	pop	{r7}
 8003ef2:	4770      	bx	lr

08003ef4 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003efc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f00:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr

08003f0c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	021b      	lsls	r3, r3, #8
 8003f22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f26:	4313      	orrs	r3, r2
 8003f28:	604b      	str	r3, [r1, #4]
}
 8003f2a:	bf00      	nop
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bc80      	pop	{r7}
 8003f32:	4770      	bx	lr

08003f34 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f023 0203 	bic.w	r2, r3, #3
 8003f46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	608b      	str	r3, [r1, #8]
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bc80      	pop	{r7}
 8003f58:	4770      	bx	lr

08003f5a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f003 030c 	and.w	r3, r3, #12
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bc80      	pop	{r7}
 8003f6e:	4770      	bx	lr

08003f70 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	608b      	str	r3, [r1, #8]
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bc80      	pop	{r7}
 8003f94:	4770      	bx	lr

08003f96 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fa2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003fa6:	f023 020f 	bic.w	r2, r3, #15
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	091b      	lsrs	r3, r3, #4
 8003fae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bc80      	pop	{r7}
 8003fc0:	4770      	bx	lr

08003fc2 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	608b      	str	r3, [r1, #8]
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bc80      	pop	{r7}
 8003fe6:	4770      	bx	lr

08003fe8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ffa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4313      	orrs	r3, r2
 8004002:	608b      	str	r3, [r1, #8]
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	bc80      	pop	{r7}
 800400c:	4770      	bx	lr

0800400e <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800400e:	b480      	push	{r7}
 8004010:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800401c:	4618      	mov	r0, r3
 800401e:	46bd      	mov	sp, r7
 8004020:	bc80      	pop	{r7}
 8004022:	4770      	bx	lr

08004024 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8004024:	b480      	push	{r7}
 8004026:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800402c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004030:	011b      	lsls	r3, r3, #4
 8004032:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004036:	4618      	mov	r0, r3
 8004038:	46bd      	mov	sp, r7
 800403a:	bc80      	pop	{r7}
 800403c:	4770      	bx	lr

0800403e <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800403e:	b480      	push	{r7}
 8004040:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800404c:	4618      	mov	r0, r3
 800404e:	46bd      	mov	sp, r7
 8004050:	bc80      	pop	{r7}
 8004052:	4770      	bx	lr

08004054 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004062:	4618      	mov	r0, r3
 8004064:	46bd      	mov	sp, r7
 8004066:	bc80      	pop	{r7}
 8004068:	4770      	bx	lr

0800406a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800406a:	b480      	push	{r7}
 800406c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800406e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004078:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800407c:	6013      	str	r3, [r2, #0]
}
 800407e:	bf00      	nop
 8004080:	46bd      	mov	sp, r7
 8004082:	bc80      	pop	{r7}
 8004084:	4770      	bx	lr

08004086 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004086:	b480      	push	{r7}
 8004088:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800408a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004094:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004098:	6013      	str	r3, [r2, #0]
}
 800409a:	bf00      	nop
 800409c:	46bd      	mov	sp, r7
 800409e:	bc80      	pop	{r7}
 80040a0:	4770      	bx	lr

080040a2 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80040a2:	b480      	push	{r7}
 80040a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80040a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040b4:	d101      	bne.n	80040ba <LL_RCC_PLL_IsReady+0x18>
 80040b6:	2301      	movs	r3, #1
 80040b8:	e000      	b.n	80040bc <LL_RCC_PLL_IsReady+0x1a>
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	46bd      	mov	sp, r7
 80040c0:	bc80      	pop	{r7}
 80040c2:	4770      	bx	lr

080040c4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80040c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	0a1b      	lsrs	r3, r3, #8
 80040d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bc80      	pop	{r7}
 80040da:	4770      	bx	lr

080040dc <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80040dc:	b480      	push	{r7}
 80040de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80040e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bc80      	pop	{r7}
 80040f0:	4770      	bx	lr

080040f2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80040f2:	b480      	push	{r7}
 80040f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80040f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004100:	4618      	mov	r0, r3
 8004102:	46bd      	mov	sp, r7
 8004104:	bc80      	pop	{r7}
 8004106:	4770      	bx	lr

08004108 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800410c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	f003 0303 	and.w	r3, r3, #3
}
 8004116:	4618      	mov	r0, r3
 8004118:	46bd      	mov	sp, r7
 800411a:	bc80      	pop	{r7}
 800411c:	4770      	bx	lr

0800411e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800411e:	b480      	push	{r7}
 8004120:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800412c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004130:	d101      	bne.n	8004136 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004132:	2301      	movs	r3, #1
 8004134:	e000      	b.n	8004138 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	46bd      	mov	sp, r7
 800413c:	bc80      	pop	{r7}
 800413e:	4770      	bx	lr

08004140 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004148:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800414c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004154:	d101      	bne.n	800415a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004156:	2301      	movs	r3, #1
 8004158:	e000      	b.n	800415c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr

08004164 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004172:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004176:	d101      	bne.n	800417c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004178:	2301      	movs	r3, #1
 800417a:	e000      	b.n	800417e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	46bd      	mov	sp, r7
 8004182:	bc80      	pop	{r7}
 8004184:	4770      	bx	lr

08004186 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004186:	b480      	push	{r7}
 8004188:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800418a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004194:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004198:	d101      	bne.n	800419e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800419a:	2301      	movs	r3, #1
 800419c:	e000      	b.n	80041a0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bc80      	pop	{r7}
 80041a6:	4770      	bx	lr

080041a8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b088      	sub	sp, #32
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e36f      	b.n	800489a <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041ba:	f7ff fece 	bl	8003f5a <LL_RCC_GetSysClkSource>
 80041be:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041c0:	f7ff ffa2 	bl	8004108 <LL_RCC_PLL_GetMainSource>
 80041c4:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0320 	and.w	r3, r3, #32
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 80c4 	beq.w	800435c <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d005      	beq.n	80041e6 <HAL_RCC_OscConfig+0x3e>
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	2b0c      	cmp	r3, #12
 80041de:	d176      	bne.n	80042ce <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d173      	bne.n	80042ce <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e353      	b.n	800489a <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0308 	and.w	r3, r3, #8
 8004200:	2b00      	cmp	r3, #0
 8004202:	d005      	beq.n	8004210 <HAL_RCC_OscConfig+0x68>
 8004204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800420e:	e006      	b.n	800421e <HAL_RCC_OscConfig+0x76>
 8004210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004214:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004218:	091b      	lsrs	r3, r3, #4
 800421a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800421e:	4293      	cmp	r3, r2
 8004220:	d222      	bcs.n	8004268 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004226:	4618      	mov	r0, r3
 8004228:	f000 fd7a 	bl	8004d20 <RCC_SetFlashLatencyFromMSIRange>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e331      	b.n	800489a <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004240:	f043 0308 	orr.w	r3, r3, #8
 8004244:	6013      	str	r3, [r2, #0]
 8004246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004254:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004258:	4313      	orrs	r3, r2
 800425a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	4618      	mov	r0, r3
 8004262:	f7ff fe53 	bl	8003f0c <LL_RCC_MSI_SetCalibTrimming>
 8004266:	e021      	b.n	80042ac <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004272:	f043 0308 	orr.w	r3, r3, #8
 8004276:	6013      	str	r3, [r2, #0]
 8004278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004286:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800428a:	4313      	orrs	r3, r2
 800428c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004292:	4618      	mov	r0, r3
 8004294:	f7ff fe3a 	bl	8003f0c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429c:	4618      	mov	r0, r3
 800429e:	f000 fd3f 	bl	8004d20 <RCC_SetFlashLatencyFromMSIRange>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e2f6      	b.n	800489a <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80042ac:	f000 fcc2 	bl	8004c34 <HAL_RCC_GetHCLKFreq>
 80042b0:	4603      	mov	r3, r0
 80042b2:	4aa7      	ldr	r2, [pc, #668]	; (8004550 <HAL_RCC_OscConfig+0x3a8>)
 80042b4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80042b6:	4ba7      	ldr	r3, [pc, #668]	; (8004554 <HAL_RCC_OscConfig+0x3ac>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7fd feba 	bl	8002034 <HAL_InitTick>
 80042c0:	4603      	mov	r3, r0
 80042c2:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80042c4:	7cfb      	ldrb	r3, [r7, #19]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d047      	beq.n	800435a <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80042ca:	7cfb      	ldrb	r3, [r7, #19]
 80042cc:	e2e5      	b.n	800489a <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d02c      	beq.n	8004330 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80042d6:	f7ff fdc6 	bl	8003e66 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042da:	f7fe f85d 	bl	8002398 <HAL_GetTick>
 80042de:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80042e0:	e008      	b.n	80042f4 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042e2:	f7fe f859 	bl	8002398 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e2d2      	b.n	800489a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80042f4:	f7ff fdd3 	bl	8003e9e <LL_RCC_MSI_IsReady>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d0f1      	beq.n	80042e2 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004308:	f043 0308 	orr.w	r3, r3, #8
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004320:	4313      	orrs	r3, r2
 8004322:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff fdef 	bl	8003f0c <LL_RCC_MSI_SetCalibTrimming>
 800432e:	e015      	b.n	800435c <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004330:	f7ff fda7 	bl	8003e82 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004334:	f7fe f830 	bl	8002398 <HAL_GetTick>
 8004338:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800433c:	f7fe f82c 	bl	8002398 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e2a5      	b.n	800489a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800434e:	f7ff fda6 	bl	8003e9e <LL_RCC_MSI_IsReady>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1f1      	bne.n	800433c <HAL_RCC_OscConfig+0x194>
 8004358:	e000      	b.n	800435c <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800435a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b00      	cmp	r3, #0
 8004366:	d058      	beq.n	800441a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	2b08      	cmp	r3, #8
 800436c:	d005      	beq.n	800437a <HAL_RCC_OscConfig+0x1d2>
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	2b0c      	cmp	r3, #12
 8004372:	d108      	bne.n	8004386 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	2b03      	cmp	r3, #3
 8004378:	d105      	bne.n	8004386 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d14b      	bne.n	800441a <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e289      	b.n	800489a <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8004386:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004398:	4313      	orrs	r3, r2
 800439a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a4:	d102      	bne.n	80043ac <HAL_RCC_OscConfig+0x204>
 80043a6:	f7ff fcae 	bl	8003d06 <LL_RCC_HSE_Enable>
 80043aa:	e00d      	b.n	80043c8 <HAL_RCC_OscConfig+0x220>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80043b4:	d104      	bne.n	80043c0 <HAL_RCC_OscConfig+0x218>
 80043b6:	f7ff fc79 	bl	8003cac <LL_RCC_HSE_EnableTcxo>
 80043ba:	f7ff fca4 	bl	8003d06 <LL_RCC_HSE_Enable>
 80043be:	e003      	b.n	80043c8 <HAL_RCC_OscConfig+0x220>
 80043c0:	f7ff fcaf 	bl	8003d22 <LL_RCC_HSE_Disable>
 80043c4:	f7ff fc80 	bl	8003cc8 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d012      	beq.n	80043f6 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d0:	f7fd ffe2 	bl	8002398 <HAL_GetTick>
 80043d4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043d8:	f7fd ffde 	bl	8002398 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b64      	cmp	r3, #100	; 0x64
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e257      	b.n	800489a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80043ea:	f7ff fca8 	bl	8003d3e <LL_RCC_HSE_IsReady>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d0f1      	beq.n	80043d8 <HAL_RCC_OscConfig+0x230>
 80043f4:	e011      	b.n	800441a <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f6:	f7fd ffcf 	bl	8002398 <HAL_GetTick>
 80043fa:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80043fc:	e008      	b.n	8004410 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043fe:	f7fd ffcb 	bl	8002398 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	2b64      	cmp	r3, #100	; 0x64
 800440a:	d901      	bls.n	8004410 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e244      	b.n	800489a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004410:	f7ff fc95 	bl	8003d3e <LL_RCC_HSE_IsReady>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1f1      	bne.n	80043fe <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d046      	beq.n	80044b4 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	2b04      	cmp	r3, #4
 800442a:	d005      	beq.n	8004438 <HAL_RCC_OscConfig+0x290>
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	2b0c      	cmp	r3, #12
 8004430:	d10e      	bne.n	8004450 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	2b02      	cmp	r3, #2
 8004436:	d10b      	bne.n	8004450 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e22a      	b.n	800489a <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff fcb6 	bl	8003dba <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800444e:	e031      	b.n	80044b4 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d019      	beq.n	800448c <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004458:	f7ff fc82 	bl	8003d60 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445c:	f7fd ff9c 	bl	8002398 <HAL_GetTick>
 8004460:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004462:	e008      	b.n	8004476 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004464:	f7fd ff98 	bl	8002398 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e211      	b.n	800489a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004476:	f7ff fc8f 	bl	8003d98 <LL_RCC_HSI_IsReady>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d0f1      	beq.n	8004464 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff fc98 	bl	8003dba <LL_RCC_HSI_SetCalibTrimming>
 800448a:	e013      	b.n	80044b4 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800448c:	f7ff fc76 	bl	8003d7c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004490:	f7fd ff82 	bl	8002398 <HAL_GetTick>
 8004494:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004498:	f7fd ff7e 	bl	8002398 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e1f7      	b.n	800489a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80044aa:	f7ff fc75 	bl	8003d98 <LL_RCC_HSI_IsReady>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1f1      	bne.n	8004498 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0308 	and.w	r3, r3, #8
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d06e      	beq.n	800459e <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d056      	beq.n	8004576 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80044c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044d0:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	69da      	ldr	r2, [r3, #28]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f003 0310 	and.w	r3, r3, #16
 80044dc:	429a      	cmp	r2, r3
 80044de:	d031      	beq.n	8004544 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d006      	beq.n	80044f8 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e1d0      	b.n	800489a <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d013      	beq.n	800452a <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8004502:	f7ff fc8f 	bl	8003e24 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004506:	f7fd ff47 	bl	8002398 <HAL_GetTick>
 800450a:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800450c:	e008      	b.n	8004520 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800450e:	f7fd ff43 	bl	8002398 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b11      	cmp	r3, #17
 800451a:	d901      	bls.n	8004520 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e1bc      	b.n	800489a <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8004520:	f7ff fc90 	bl	8003e44 <LL_RCC_LSI_IsReady>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1f1      	bne.n	800450e <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800452a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800452e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004532:	f023 0210 	bic.w	r2, r3, #16
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800453e:	4313      	orrs	r3, r2
 8004540:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004544:	f7ff fc5e 	bl	8003e04 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004548:	f7fd ff26 	bl	8002398 <HAL_GetTick>
 800454c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800454e:	e00c      	b.n	800456a <HAL_RCC_OscConfig+0x3c2>
 8004550:	20000000 	.word	0x20000000
 8004554:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004558:	f7fd ff1e 	bl	8002398 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b11      	cmp	r3, #17
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e197      	b.n	800489a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800456a:	f7ff fc6b 	bl	8003e44 <LL_RCC_LSI_IsReady>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0f1      	beq.n	8004558 <HAL_RCC_OscConfig+0x3b0>
 8004574:	e013      	b.n	800459e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004576:	f7ff fc55 	bl	8003e24 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800457a:	f7fd ff0d 	bl	8002398 <HAL_GetTick>
 800457e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8004580:	e008      	b.n	8004594 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004582:	f7fd ff09 	bl	8002398 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b11      	cmp	r3, #17
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e182      	b.n	800489a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8004594:	f7ff fc56 	bl	8003e44 <LL_RCC_LSI_IsReady>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1f1      	bne.n	8004582 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0304 	and.w	r3, r3, #4
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f000 80d8 	beq.w	800475c <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80045ac:	f7ff fb6c 	bl	8003c88 <LL_PWR_IsEnabledBkUpAccess>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d113      	bne.n	80045de <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80045b6:	f7ff fb4d 	bl	8003c54 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ba:	f7fd feed 	bl	8002398 <HAL_GetTick>
 80045be:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80045c0:	e008      	b.n	80045d4 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045c2:	f7fd fee9 	bl	8002398 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e162      	b.n	800489a <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80045d4:	f7ff fb58 	bl	8003c88 <LL_PWR_IsEnabledBkUpAccess>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d0f1      	beq.n	80045c2 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d07b      	beq.n	80046de <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	2b85      	cmp	r3, #133	; 0x85
 80045ec:	d003      	beq.n	80045f6 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	2b05      	cmp	r3, #5
 80045f4:	d109      	bne.n	800460a <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80045f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004602:	f043 0304 	orr.w	r3, r3, #4
 8004606:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800460a:	f7fd fec5 	bl	8002398 <HAL_GetTick>
 800460e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004618:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800461c:	f043 0301 	orr.w	r3, r3, #1
 8004620:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004624:	e00a      	b.n	800463c <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004626:	f7fd feb7 	bl	8002398 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	f241 3288 	movw	r2, #5000	; 0x1388
 8004634:	4293      	cmp	r3, r2
 8004636:	d901      	bls.n	800463c <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e12e      	b.n	800489a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 800463c:	f7ff fbd1 	bl	8003de2 <LL_RCC_LSE_IsReady>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d0ef      	beq.n	8004626 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	2b81      	cmp	r3, #129	; 0x81
 800464c:	d003      	beq.n	8004656 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	2b85      	cmp	r3, #133	; 0x85
 8004654:	d121      	bne.n	800469a <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004656:	f7fd fe9f 	bl	8002398 <HAL_GetTick>
 800465a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800465c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004664:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800466c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004670:	e00a      	b.n	8004688 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004672:	f7fd fe91 	bl	8002398 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004680:	4293      	cmp	r3, r2
 8004682:	d901      	bls.n	8004688 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e108      	b.n	800489a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800468c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004690:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004694:	2b00      	cmp	r3, #0
 8004696:	d0ec      	beq.n	8004672 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004698:	e060      	b.n	800475c <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469a:	f7fd fe7d 	bl	8002398 <HAL_GetTick>
 800469e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80046a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80046b4:	e00a      	b.n	80046cc <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046b6:	f7fd fe6f 	bl	8002398 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d901      	bls.n	80046cc <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e0e6      	b.n	800489a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80046cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1ec      	bne.n	80046b6 <HAL_RCC_OscConfig+0x50e>
 80046dc:	e03e      	b.n	800475c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046de:	f7fd fe5b 	bl	8002398 <HAL_GetTick>
 80046e2:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80046e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80046f8:	e00a      	b.n	8004710 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046fa:	f7fd fe4d 	bl	8002398 <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	f241 3288 	movw	r2, #5000	; 0x1388
 8004708:	4293      	cmp	r3, r2
 800470a:	d901      	bls.n	8004710 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e0c4      	b.n	800489a <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004718:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1ec      	bne.n	80046fa <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004720:	f7fd fe3a 	bl	8002398 <HAL_GetTick>
 8004724:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800472a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004732:	f023 0301 	bic.w	r3, r3, #1
 8004736:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800473a:	e00a      	b.n	8004752 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800473c:	f7fd fe2c 	bl	8002398 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	f241 3288 	movw	r2, #5000	; 0x1388
 800474a:	4293      	cmp	r3, r2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e0a3      	b.n	800489a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004752:	f7ff fb46 	bl	8003de2 <LL_RCC_LSE_IsReady>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1ef      	bne.n	800473c <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004760:	2b00      	cmp	r3, #0
 8004762:	f000 8099 	beq.w	8004898 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	2b0c      	cmp	r3, #12
 800476a:	d06c      	beq.n	8004846 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004770:	2b02      	cmp	r3, #2
 8004772:	d14b      	bne.n	800480c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004774:	f7ff fc87 	bl	8004086 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004778:	f7fd fe0e 	bl	8002398 <HAL_GetTick>
 800477c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004780:	f7fd fe0a 	bl	8002398 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b0a      	cmp	r3, #10
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e083      	b.n	800489a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004792:	f7ff fc86 	bl	80040a2 <LL_RCC_PLL_IsReady>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1f1      	bne.n	8004780 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800479c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047a0:	68da      	ldr	r2, [r3, #12]
 80047a2:	4b40      	ldr	r3, [pc, #256]	; (80048a4 <HAL_RCC_OscConfig+0x6fc>)
 80047a4:	4013      	ands	r3, r2
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047ae:	4311      	orrs	r1, r2
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047b4:	0212      	lsls	r2, r2, #8
 80047b6:	4311      	orrs	r1, r2
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80047bc:	4311      	orrs	r1, r2
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80047c2:	4311      	orrs	r1, r2
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80047c8:	430a      	orrs	r2, r1
 80047ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047ce:	4313      	orrs	r3, r2
 80047d0:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047d2:	f7ff fc4a 	bl	800406a <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e6:	f7fd fdd7 	bl	8002398 <HAL_GetTick>
 80047ea:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80047ec:	e008      	b.n	8004800 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ee:	f7fd fdd3 	bl	8002398 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b0a      	cmp	r3, #10
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e04c      	b.n	800489a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8004800:	f7ff fc4f 	bl	80040a2 <LL_RCC_PLL_IsReady>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d0f1      	beq.n	80047ee <HAL_RCC_OscConfig+0x646>
 800480a:	e045      	b.n	8004898 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800480c:	f7ff fc3b 	bl	8004086 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004810:	f7fd fdc2 	bl	8002398 <HAL_GetTick>
 8004814:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004816:	e008      	b.n	800482a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004818:	f7fd fdbe 	bl	8002398 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b0a      	cmp	r3, #10
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e037      	b.n	800489a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800482a:	f7ff fc3a 	bl	80040a2 <LL_RCC_PLL_IsReady>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1f1      	bne.n	8004818 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004838:	68da      	ldr	r2, [r3, #12]
 800483a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800483e:	4b1a      	ldr	r3, [pc, #104]	; (80048a8 <HAL_RCC_OscConfig+0x700>)
 8004840:	4013      	ands	r3, r2
 8004842:	60cb      	str	r3, [r1, #12]
 8004844:	e028      	b.n	8004898 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484a:	2b01      	cmp	r3, #1
 800484c:	d101      	bne.n	8004852 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e023      	b.n	800489a <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	f003 0203 	and.w	r2, r3, #3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004864:	429a      	cmp	r2, r3
 8004866:	d115      	bne.n	8004894 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004872:	429a      	cmp	r2, r3
 8004874:	d10e      	bne.n	8004894 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004880:	021b      	lsls	r3, r3, #8
 8004882:	429a      	cmp	r2, r3
 8004884:	d106      	bne.n	8004894 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004890:	429a      	cmp	r2, r3
 8004892:	d001      	beq.n	8004898 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e000      	b.n	800489a <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3720      	adds	r7, #32
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	11c1808c 	.word	0x11c1808c
 80048a8:	eefefffc 	.word	0xeefefffc

080048ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e10f      	b.n	8004ae0 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048c0:	4b89      	ldr	r3, [pc, #548]	; (8004ae8 <HAL_RCC_ClockConfig+0x23c>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0307 	and.w	r3, r3, #7
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d91b      	bls.n	8004906 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ce:	4b86      	ldr	r3, [pc, #536]	; (8004ae8 <HAL_RCC_ClockConfig+0x23c>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f023 0207 	bic.w	r2, r3, #7
 80048d6:	4984      	ldr	r1, [pc, #528]	; (8004ae8 <HAL_RCC_ClockConfig+0x23c>)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	4313      	orrs	r3, r2
 80048dc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048de:	f7fd fd5b 	bl	8002398 <HAL_GetTick>
 80048e2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048e4:	e008      	b.n	80048f8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80048e6:	f7fd fd57 	bl	8002398 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e0f3      	b.n	8004ae0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048f8:	4b7b      	ldr	r3, [pc, #492]	; (8004ae8 <HAL_RCC_ClockConfig+0x23c>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	429a      	cmp	r2, r3
 8004904:	d1ef      	bne.n	80048e6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d016      	beq.n	8004940 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	4618      	mov	r0, r3
 8004918:	f7ff fb2a 	bl	8003f70 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800491c:	f7fd fd3c 	bl	8002398 <HAL_GetTick>
 8004920:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004922:	e008      	b.n	8004936 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004924:	f7fd fd38 	bl	8002398 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e0d4      	b.n	8004ae0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004936:	f7ff fbf2 	bl	800411e <LL_RCC_IsActiveFlag_HPRE>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d0f1      	beq.n	8004924 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004948:	2b00      	cmp	r3, #0
 800494a:	d016      	beq.n	800497a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	4618      	mov	r0, r3
 8004952:	f7ff fb20 	bl	8003f96 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004956:	f7fd fd1f 	bl	8002398 <HAL_GetTick>
 800495a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800495c:	e008      	b.n	8004970 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800495e:	f7fd fd1b 	bl	8002398 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	2b02      	cmp	r3, #2
 800496a:	d901      	bls.n	8004970 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e0b7      	b.n	8004ae0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004970:	f7ff fbe6 	bl	8004140 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d0f1      	beq.n	800495e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0304 	and.w	r3, r3, #4
 8004982:	2b00      	cmp	r3, #0
 8004984:	d016      	beq.n	80049b4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	4618      	mov	r0, r3
 800498c:	f7ff fb19 	bl	8003fc2 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004990:	f7fd fd02 	bl	8002398 <HAL_GetTick>
 8004994:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004996:	e008      	b.n	80049aa <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004998:	f7fd fcfe 	bl	8002398 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e09a      	b.n	8004ae0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80049aa:	f7ff fbdb 	bl	8004164 <LL_RCC_IsActiveFlag_PPRE1>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d0f1      	beq.n	8004998 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0308 	and.w	r3, r3, #8
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d017      	beq.n	80049f0 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7ff fb0e 	bl	8003fe8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80049cc:	f7fd fce4 	bl	8002398 <HAL_GetTick>
 80049d0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80049d2:	e008      	b.n	80049e6 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80049d4:	f7fd fce0 	bl	8002398 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e07c      	b.n	8004ae0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80049e6:	f7ff fbce 	bl	8004186 <LL_RCC_IsActiveFlag_PPRE2>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d0f1      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d043      	beq.n	8004a84 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d106      	bne.n	8004a12 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004a04:	f7ff f99b 	bl	8003d3e <LL_RCC_HSE_IsReady>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d11e      	bne.n	8004a4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e066      	b.n	8004ae0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	2b03      	cmp	r3, #3
 8004a18:	d106      	bne.n	8004a28 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004a1a:	f7ff fb42 	bl	80040a2 <LL_RCC_PLL_IsReady>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d113      	bne.n	8004a4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e05b      	b.n	8004ae0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d106      	bne.n	8004a3e <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004a30:	f7ff fa35 	bl	8003e9e <LL_RCC_MSI_IsReady>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d108      	bne.n	8004a4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e050      	b.n	8004ae0 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004a3e:	f7ff f9ab 	bl	8003d98 <LL_RCC_HSI_IsReady>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d101      	bne.n	8004a4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e049      	b.n	8004ae0 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7ff fa6f 	bl	8003f34 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a56:	f7fd fc9f 	bl	8002398 <HAL_GetTick>
 8004a5a:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a5c:	e00a      	b.n	8004a74 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a5e:	f7fd fc9b 	bl	8002398 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d901      	bls.n	8004a74 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e035      	b.n	8004ae0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a74:	f7ff fa71 	bl	8003f5a <LL_RCC_GetSysClkSource>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d1ec      	bne.n	8004a5e <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a84:	4b18      	ldr	r3, [pc, #96]	; (8004ae8 <HAL_RCC_ClockConfig+0x23c>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0307 	and.w	r3, r3, #7
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d21b      	bcs.n	8004aca <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a92:	4b15      	ldr	r3, [pc, #84]	; (8004ae8 <HAL_RCC_ClockConfig+0x23c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f023 0207 	bic.w	r2, r3, #7
 8004a9a:	4913      	ldr	r1, [pc, #76]	; (8004ae8 <HAL_RCC_ClockConfig+0x23c>)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004aa2:	f7fd fc79 	bl	8002398 <HAL_GetTick>
 8004aa6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aa8:	e008      	b.n	8004abc <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004aaa:	f7fd fc75 	bl	8002398 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d901      	bls.n	8004abc <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e011      	b.n	8004ae0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004abc:	4b0a      	ldr	r3, [pc, #40]	; (8004ae8 <HAL_RCC_ClockConfig+0x23c>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d1ef      	bne.n	8004aaa <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004aca:	f000 f8b3 	bl	8004c34 <HAL_RCC_GetHCLKFreq>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	4a06      	ldr	r2, [pc, #24]	; (8004aec <HAL_RCC_ClockConfig+0x240>)
 8004ad2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8004ad4:	4b06      	ldr	r3, [pc, #24]	; (8004af0 <HAL_RCC_ClockConfig+0x244>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f7fd faab 	bl	8002034 <HAL_InitTick>
 8004ade:	4603      	mov	r3, r0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	58004000 	.word	0x58004000
 8004aec:	20000000 	.word	0x20000000
 8004af0:	20000004 	.word	0x20000004

08004af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004af4:	b590      	push	{r4, r7, lr}
 8004af6:	b087      	sub	sp, #28
 8004af8:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8004afe:	2300      	movs	r3, #0
 8004b00:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b02:	f7ff fa2a 	bl	8003f5a <LL_RCC_GetSysClkSource>
 8004b06:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b08:	f7ff fafe 	bl	8004108 <LL_RCC_PLL_GetMainSource>
 8004b0c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d005      	beq.n	8004b20 <HAL_RCC_GetSysClockFreq+0x2c>
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	2b0c      	cmp	r3, #12
 8004b18:	d139      	bne.n	8004b8e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d136      	bne.n	8004b8e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004b20:	f7ff f9cd 	bl	8003ebe <LL_RCC_MSI_IsEnabledRangeSelect>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d115      	bne.n	8004b56 <HAL_RCC_GetSysClockFreq+0x62>
 8004b2a:	f7ff f9c8 	bl	8003ebe <LL_RCC_MSI_IsEnabledRangeSelect>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d106      	bne.n	8004b42 <HAL_RCC_GetSysClockFreq+0x4e>
 8004b34:	f7ff f9d3 	bl	8003ede <LL_RCC_MSI_GetRange>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	0a1b      	lsrs	r3, r3, #8
 8004b3c:	f003 030f 	and.w	r3, r3, #15
 8004b40:	e005      	b.n	8004b4e <HAL_RCC_GetSysClockFreq+0x5a>
 8004b42:	f7ff f9d7 	bl	8003ef4 <LL_RCC_MSI_GetRangeAfterStandby>
 8004b46:	4603      	mov	r3, r0
 8004b48:	0a1b      	lsrs	r3, r3, #8
 8004b4a:	f003 030f 	and.w	r3, r3, #15
 8004b4e:	4a36      	ldr	r2, [pc, #216]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x134>)
 8004b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b54:	e014      	b.n	8004b80 <HAL_RCC_GetSysClockFreq+0x8c>
 8004b56:	f7ff f9b2 	bl	8003ebe <LL_RCC_MSI_IsEnabledRangeSelect>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d106      	bne.n	8004b6e <HAL_RCC_GetSysClockFreq+0x7a>
 8004b60:	f7ff f9bd 	bl	8003ede <LL_RCC_MSI_GetRange>
 8004b64:	4603      	mov	r3, r0
 8004b66:	091b      	lsrs	r3, r3, #4
 8004b68:	f003 030f 	and.w	r3, r3, #15
 8004b6c:	e005      	b.n	8004b7a <HAL_RCC_GetSysClockFreq+0x86>
 8004b6e:	f7ff f9c1 	bl	8003ef4 <LL_RCC_MSI_GetRangeAfterStandby>
 8004b72:	4603      	mov	r3, r0
 8004b74:	091b      	lsrs	r3, r3, #4
 8004b76:	f003 030f 	and.w	r3, r3, #15
 8004b7a:	4a2b      	ldr	r2, [pc, #172]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x134>)
 8004b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b80:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d115      	bne.n	8004bb4 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004b8c:	e012      	b.n	8004bb4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	2b04      	cmp	r3, #4
 8004b92:	d102      	bne.n	8004b9a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b94:	4b25      	ldr	r3, [pc, #148]	; (8004c2c <HAL_RCC_GetSysClockFreq+0x138>)
 8004b96:	617b      	str	r3, [r7, #20]
 8004b98:	e00c      	b.n	8004bb4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	2b08      	cmp	r3, #8
 8004b9e:	d109      	bne.n	8004bb4 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004ba0:	f7ff f8a0 	bl	8003ce4 <LL_RCC_HSE_IsEnabledDiv2>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d102      	bne.n	8004bb0 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004baa:	4b20      	ldr	r3, [pc, #128]	; (8004c2c <HAL_RCC_GetSysClockFreq+0x138>)
 8004bac:	617b      	str	r3, [r7, #20]
 8004bae:	e001      	b.n	8004bb4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004bb0:	4b1f      	ldr	r3, [pc, #124]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004bb2:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bb4:	f7ff f9d1 	bl	8003f5a <LL_RCC_GetSysClkSource>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b0c      	cmp	r3, #12
 8004bbc:	d12f      	bne.n	8004c1e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004bbe:	f7ff faa3 	bl	8004108 <LL_RCC_PLL_GetMainSource>
 8004bc2:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d003      	beq.n	8004bd2 <HAL_RCC_GetSysClockFreq+0xde>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2b03      	cmp	r3, #3
 8004bce:	d003      	beq.n	8004bd8 <HAL_RCC_GetSysClockFreq+0xe4>
 8004bd0:	e00d      	b.n	8004bee <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004bd2:	4b16      	ldr	r3, [pc, #88]	; (8004c2c <HAL_RCC_GetSysClockFreq+0x138>)
 8004bd4:	60fb      	str	r3, [r7, #12]
        break;
 8004bd6:	e00d      	b.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004bd8:	f7ff f884 	bl	8003ce4 <LL_RCC_HSE_IsEnabledDiv2>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d102      	bne.n	8004be8 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004be2:	4b12      	ldr	r3, [pc, #72]	; (8004c2c <HAL_RCC_GetSysClockFreq+0x138>)
 8004be4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004be6:	e005      	b.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8004be8:	4b11      	ldr	r3, [pc, #68]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004bea:	60fb      	str	r3, [r7, #12]
        break;
 8004bec:	e002      	b.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	60fb      	str	r3, [r7, #12]
        break;
 8004bf2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004bf4:	f7ff fa66 	bl	80040c4 <LL_RCC_PLL_GetN>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	fb03 f402 	mul.w	r4, r3, r2
 8004c00:	f7ff fa77 	bl	80040f2 <LL_RCC_PLL_GetDivider>
 8004c04:	4603      	mov	r3, r0
 8004c06:	091b      	lsrs	r3, r3, #4
 8004c08:	3301      	adds	r3, #1
 8004c0a:	fbb4 f4f3 	udiv	r4, r4, r3
 8004c0e:	f7ff fa65 	bl	80040dc <LL_RCC_PLL_GetR>
 8004c12:	4603      	mov	r3, r0
 8004c14:	0f5b      	lsrs	r3, r3, #29
 8004c16:	3301      	adds	r3, #1
 8004c18:	fbb4 f3f3 	udiv	r3, r4, r3
 8004c1c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004c1e:	697b      	ldr	r3, [r7, #20]
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	371c      	adds	r7, #28
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd90      	pop	{r4, r7, pc}
 8004c28:	0800ca5c 	.word	0x0800ca5c
 8004c2c:	00f42400 	.word	0x00f42400
 8004c30:	01e84800 	.word	0x01e84800

08004c34 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c34:	b598      	push	{r3, r4, r7, lr}
 8004c36:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004c38:	f7ff ff5c 	bl	8004af4 <HAL_RCC_GetSysClockFreq>
 8004c3c:	4604      	mov	r4, r0
 8004c3e:	f7ff f9e6 	bl	800400e <LL_RCC_GetAHBPrescaler>
 8004c42:	4603      	mov	r3, r0
 8004c44:	091b      	lsrs	r3, r3, #4
 8004c46:	f003 030f 	and.w	r3, r3, #15
 8004c4a:	4a03      	ldr	r2, [pc, #12]	; (8004c58 <HAL_RCC_GetHCLKFreq+0x24>)
 8004c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c50:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	bd98      	pop	{r3, r4, r7, pc}
 8004c58:	0800c9fc 	.word	0x0800c9fc

08004c5c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c5c:	b598      	push	{r3, r4, r7, lr}
 8004c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004c60:	f7ff ffe8 	bl	8004c34 <HAL_RCC_GetHCLKFreq>
 8004c64:	4604      	mov	r4, r0
 8004c66:	f7ff f9ea 	bl	800403e <LL_RCC_GetAPB1Prescaler>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	0a1b      	lsrs	r3, r3, #8
 8004c6e:	4a03      	ldr	r2, [pc, #12]	; (8004c7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c74:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	bd98      	pop	{r3, r4, r7, pc}
 8004c7c:	0800ca3c 	.word	0x0800ca3c

08004c80 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c80:	b598      	push	{r3, r4, r7, lr}
 8004c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004c84:	f7ff ffd6 	bl	8004c34 <HAL_RCC_GetHCLKFreq>
 8004c88:	4604      	mov	r4, r0
 8004c8a:	f7ff f9e3 	bl	8004054 <LL_RCC_GetAPB2Prescaler>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	0adb      	lsrs	r3, r3, #11
 8004c92:	4a03      	ldr	r2, [pc, #12]	; (8004ca0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c98:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	bd98      	pop	{r3, r4, r7, pc}
 8004ca0:	0800ca3c 	.word	0x0800ca3c

08004ca4 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer to the Flash Latency variable.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  uint32_t regvalue;

  /* Check the parameters */
  if ((RCC_ClkInitStruct != NULL) && (pFLatency != NULL))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d02d      	beq.n	8004d10 <HAL_RCC_GetClockConfig+0x6c>
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d02a      	beq.n	8004d10 <HAL_RCC_GetClockConfig+0x6c>
  {
    /* Set all possible values for the Clock type parameter --------------------*/
    RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 \
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	224f      	movs	r2, #79	; 0x4f
 8004cbe:	601a      	str	r2, [r3, #0]
#if defined(DUAL_CORE)
    RCC_ClkInitStruct->ClockType |= RCC_CLOCKTYPE_HCLK2;
#endif  /* DUAL_CORE */

    /* Get Clock Configuration Register */
    regvalue = RCC->CFGR;
 8004cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	60fb      	str	r3, [r7, #12]

    /* Get the SYSCLK configuration --------------------------------------------*/
    RCC_ClkInitStruct->SYSCLKSource = (regvalue & RCC_CFGR_SWS);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f003 020c 	and.w	r2, r3, #12
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	605a      	str	r2, [r3, #4]

    /* Get the HCLK configuration ----------------------------------------------*/
    RCC_ClkInitStruct->AHBCLKDivider = (regvalue & RCC_CFGR_HPRE);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	609a      	str	r2, [r3, #8]

    /* Get the APB1 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB1CLKDivider = (regvalue & RCC_CFGR_PPRE1);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	60da      	str	r2, [r3, #12]

    /* Get the APB2 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB2CLKDivider = (regvalue & RCC_CFGR_PPRE2);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	611a      	str	r2, [r3, #16]

    /* Get Extended Clock Recovery Register */
    regvalue = RCC->EXTCFGR;
 8004cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cf4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004cf8:	60fb      	str	r3, [r7, #12]
    /* Get the AHBCLK2Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK2Divider =  (regvalue & RCC_EXTCFGR_C2HPRE);
#endif  /* DUAL_CORE */

    /* Get the AHBCLK3Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK3Divider = ((regvalue & RCC_EXTCFGR_SHDHPRE) << 4);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	011b      	lsls	r3, r3, #4
 8004cfe:	b2da      	uxtb	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	615a      	str	r2, [r3, #20]

    /* Get the Flash Wait State (Latency) configuration ------------------------*/
    *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004d04:	4b05      	ldr	r3, [pc, #20]	; (8004d1c <HAL_RCC_GetClockConfig+0x78>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0207 	and.w	r2, r3, #7
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	601a      	str	r2, [r3, #0]
  }
}
 8004d10:	bf00      	nop
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bc80      	pop	{r7}
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	58004000 	.word	0x58004000

08004d20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004d20:	b590      	push	{r4, r7, lr}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	091b      	lsrs	r3, r3, #4
 8004d2c:	f003 030f 	and.w	r3, r3, #15
 8004d30:	4a10      	ldr	r2, [pc, #64]	; (8004d74 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8004d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d36:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8004d38:	f7ff f974 	bl	8004024 <LL_RCC_GetAHB3Prescaler>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	091b      	lsrs	r3, r3, #4
 8004d40:	f003 030f 	and.w	r3, r3, #15
 8004d44:	4a0c      	ldr	r2, [pc, #48]	; (8004d78 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8004d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d50:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	4a09      	ldr	r2, [pc, #36]	; (8004d7c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8004d56:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5a:	0c9c      	lsrs	r4, r3, #18
 8004d5c:	f7fe ff88 	bl	8003c70 <HAL_PWREx_GetVoltageRange>
 8004d60:	4603      	mov	r3, r0
 8004d62:	4619      	mov	r1, r3
 8004d64:	4620      	mov	r0, r4
 8004d66:	f000 f80b 	bl	8004d80 <RCC_SetFlashLatency>
 8004d6a:	4603      	mov	r3, r0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3714      	adds	r7, #20
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd90      	pop	{r4, r7, pc}
 8004d74:	0800ca5c 	.word	0x0800ca5c
 8004d78:	0800c9fc 	.word	0x0800c9fc
 8004d7c:	431bde83 	.word	0x431bde83

08004d80 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b08e      	sub	sp, #56	; 0x38
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8004d8a:	4a3a      	ldr	r2, [pc, #232]	; (8004e74 <RCC_SetFlashLatency+0xf4>)
 8004d8c:	f107 0320 	add.w	r3, r7, #32
 8004d90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d94:	6018      	str	r0, [r3, #0]
 8004d96:	3304      	adds	r3, #4
 8004d98:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8004d9a:	4a37      	ldr	r2, [pc, #220]	; (8004e78 <RCC_SetFlashLatency+0xf8>)
 8004d9c:	f107 0318 	add.w	r3, r7, #24
 8004da0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004da4:	6018      	str	r0, [r3, #0]
 8004da6:	3304      	adds	r3, #4
 8004da8:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8004daa:	4a34      	ldr	r2, [pc, #208]	; (8004e7c <RCC_SetFlashLatency+0xfc>)
 8004dac:	f107 030c 	add.w	r3, r7, #12
 8004db0:	ca07      	ldmia	r2, {r0, r1, r2}
 8004db2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004db6:	2300      	movs	r3, #0
 8004db8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dc0:	d11b      	bne.n	8004dfa <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	633b      	str	r3, [r7, #48]	; 0x30
 8004dc6:	e014      	b.n	8004df2 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dca:	005b      	lsls	r3, r3, #1
 8004dcc:	3338      	adds	r3, #56	; 0x38
 8004dce:	443b      	add	r3, r7
 8004dd0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d807      	bhi.n	8004dec <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	3338      	adds	r3, #56	; 0x38
 8004de2:	443b      	add	r3, r7
 8004de4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004de8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004dea:	e021      	b.n	8004e30 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dee:	3301      	adds	r3, #1
 8004df0:	633b      	str	r3, [r7, #48]	; 0x30
 8004df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d9e7      	bls.n	8004dc8 <RCC_SetFlashLatency+0x48>
 8004df8:	e01a      	b.n	8004e30 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dfe:	e014      	b.n	8004e2a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	3338      	adds	r3, #56	; 0x38
 8004e06:	443b      	add	r3, r7
 8004e08:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d807      	bhi.n	8004e24 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	3338      	adds	r3, #56	; 0x38
 8004e1a:	443b      	add	r3, r7
 8004e1c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004e20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e22:	e005      	b.n	8004e30 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e26:	3301      	adds	r3, #1
 8004e28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d9e7      	bls.n	8004e00 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e30:	4b13      	ldr	r3, [pc, #76]	; (8004e80 <RCC_SetFlashLatency+0x100>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f023 0207 	bic.w	r2, r3, #7
 8004e38:	4911      	ldr	r1, [pc, #68]	; (8004e80 <RCC_SetFlashLatency+0x100>)
 8004e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004e40:	f7fd faaa 	bl	8002398 <HAL_GetTick>
 8004e44:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004e46:	e008      	b.n	8004e5a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004e48:	f7fd faa6 	bl	8002398 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d901      	bls.n	8004e5a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e007      	b.n	8004e6a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004e5a:	4b09      	ldr	r3, [pc, #36]	; (8004e80 <RCC_SetFlashLatency+0x100>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0307 	and.w	r3, r3, #7
 8004e62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d1ef      	bne.n	8004e48 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3738      	adds	r7, #56	; 0x38
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	0800c398 	.word	0x0800c398
 8004e78:	0800c3a0 	.word	0x0800c3a0
 8004e7c:	0800c3a8 	.word	0x0800c3a8
 8004e80:	58004000 	.word	0x58004000

08004e84 <LL_RCC_LSE_IsReady>:
{
 8004e84:	b480      	push	{r7}
 8004e86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e90:	f003 0302 	and.w	r3, r3, #2
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d101      	bne.n	8004e9c <LL_RCC_LSE_IsReady+0x18>
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e000      	b.n	8004e9e <LL_RCC_LSE_IsReady+0x1a>
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bc80      	pop	{r7}
 8004ea4:	4770      	bx	lr

08004ea6 <LL_RCC_SetUSARTClockSource>:
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b083      	sub	sp, #12
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8004eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eb2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	0c1b      	lsrs	r3, r3, #16
 8004eba:	43db      	mvns	r3, r3
 8004ebc:	401a      	ands	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bc80      	pop	{r7}
 8004ed4:	4770      	bx	lr

08004ed6 <LL_RCC_SetI2SClockSource>:
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b083      	sub	sp, #12
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8004ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004eea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004ef6:	bf00      	nop
 8004ef8:	370c      	adds	r7, #12
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bc80      	pop	{r7}
 8004efe:	4770      	bx	lr

08004f00 <LL_RCC_SetLPUARTClockSource>:
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f10:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bc80      	pop	{r7}
 8004f28:	4770      	bx	lr

08004f2a <LL_RCC_SetI2CClockSource>:
{
 8004f2a:	b480      	push	{r7}
 8004f2c:	b083      	sub	sp, #12
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f36:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	091b      	lsrs	r3, r3, #4
 8004f3e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004f42:	43db      	mvns	r3, r3
 8004f44:	401a      	ands	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	011b      	lsls	r3, r3, #4
 8004f4a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004f4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f52:	4313      	orrs	r3, r2
 8004f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bc80      	pop	{r7}
 8004f60:	4770      	bx	lr

08004f62 <LL_RCC_SetLPTIMClockSource>:
{
 8004f62:	b480      	push	{r7}
 8004f64:	b083      	sub	sp, #12
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f6e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	0c1b      	lsrs	r3, r3, #16
 8004f76:	041b      	lsls	r3, r3, #16
 8004f78:	43db      	mvns	r3, r3
 8004f7a:	401a      	ands	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	041b      	lsls	r3, r3, #16
 8004f80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f84:	4313      	orrs	r3, r2
 8004f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f8a:	bf00      	nop
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bc80      	pop	{r7}
 8004f92:	4770      	bx	lr

08004f94 <LL_RCC_SetRNGClockSource>:
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004fa8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bc80      	pop	{r7}
 8004fbc:	4770      	bx	lr

08004fbe <LL_RCC_SetADCClockSource>:
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b083      	sub	sp, #12
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004fd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004fde:	bf00      	nop
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bc80      	pop	{r7}
 8004fe6:	4770      	bx	lr

08004fe8 <LL_RCC_SetRTCClockSource>:
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ffc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4313      	orrs	r3, r2
 8005004:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	bc80      	pop	{r7}
 8005010:	4770      	bx	lr

08005012 <LL_RCC_GetRTCClockSource>:
{
 8005012:	b480      	push	{r7}
 8005014:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800501a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800501e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005022:	4618      	mov	r0, r3
 8005024:	46bd      	mov	sp, r7
 8005026:	bc80      	pop	{r7}
 8005028:	4770      	bx	lr

0800502a <LL_RCC_ForceBackupDomainReset>:
{
 800502a:	b480      	push	{r7}
 800502c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800502e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005036:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800503a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800503e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005042:	bf00      	nop
 8005044:	46bd      	mov	sp, r7
 8005046:	bc80      	pop	{r7}
 8005048:	4770      	bx	lr

0800504a <LL_RCC_ReleaseBackupDomainReset>:
{
 800504a:	b480      	push	{r7}
 800504c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800504e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005056:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800505a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800505e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005062:	bf00      	nop
 8005064:	46bd      	mov	sp, r7
 8005066:	bc80      	pop	{r7}
 8005068:	4770      	bx	lr
	...

0800506c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8005074:	2300      	movs	r3, #0
 8005076:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8005078:	2300      	movs	r3, #0
 800507a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800507c:	2300      	movs	r3, #0
 800507e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d058      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 800508c:	f7fe fde2 	bl	8003c54 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005090:	f7fd f982 	bl	8002398 <HAL_GetTick>
 8005094:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005096:	e009      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005098:	f7fd f97e 	bl	8002398 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d902      	bls.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	74fb      	strb	r3, [r7, #19]
        break;
 80050aa:	e006      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80050ac:	4b7b      	ldr	r3, [pc, #492]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050b8:	d1ee      	bne.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80050ba:	7cfb      	ldrb	r3, [r7, #19]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d13c      	bne.n	800513a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80050c0:	f7ff ffa7 	bl	8005012 <LL_RCC_GetRTCClockSource>
 80050c4:	4602      	mov	r2, r0
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d00f      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050da:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050dc:	f7ff ffa5 	bl	800502a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050e0:	f7ff ffb3 	bl	800504a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80050e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f003 0302 	and.w	r3, r3, #2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d014      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f8:	f7fd f94e 	bl	8002398 <HAL_GetTick>
 80050fc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80050fe:	e00b      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005100:	f7fd f94a 	bl	8002398 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	f241 3288 	movw	r2, #5000	; 0x1388
 800510e:	4293      	cmp	r3, r2
 8005110:	d902      	bls.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	74fb      	strb	r3, [r7, #19]
            break;
 8005116:	e004      	b.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8005118:	f7ff feb4 	bl	8004e84 <LL_RCC_LSE_IsReady>
 800511c:	4603      	mov	r3, r0
 800511e:	2b01      	cmp	r3, #1
 8005120:	d1ee      	bne.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8005122:	7cfb      	ldrb	r3, [r7, #19]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d105      	bne.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800512c:	4618      	mov	r0, r3
 800512e:	f7ff ff5b 	bl	8004fe8 <LL_RCC_SetRTCClockSource>
 8005132:	e004      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005134:	7cfb      	ldrb	r3, [r7, #19]
 8005136:	74bb      	strb	r3, [r7, #18]
 8005138:	e001      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800513a:	7cfb      	ldrb	r3, [r7, #19]
 800513c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b00      	cmp	r3, #0
 8005148:	d004      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	4618      	mov	r0, r3
 8005150:	f7ff fea9 	bl	8004ea6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d004      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	4618      	mov	r0, r3
 8005166:	f7ff fe9e 	bl	8004ea6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0320 	and.w	r3, r3, #32
 8005172:	2b00      	cmp	r3, #0
 8005174:	d004      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	4618      	mov	r0, r3
 800517c:	f7ff fec0 	bl	8004f00 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005188:	2b00      	cmp	r3, #0
 800518a:	d004      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	4618      	mov	r0, r3
 8005192:	f7ff fee6 	bl	8004f62 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d004      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7ff fedb 	bl	8004f62 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d004      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051bc:	4618      	mov	r0, r3
 80051be:	f7ff fed0 	bl	8004f62 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d004      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7ff fea9 	bl	8004f2a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d004      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7ff fe9e 	bl	8004f2a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d004      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	4618      	mov	r0, r3
 8005200:	f7ff fe93 	bl	8004f2a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0310 	and.w	r3, r3, #16
 800520c:	2b00      	cmp	r3, #0
 800520e:	d011      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	4618      	mov	r0, r3
 8005216:	f7ff fe5e 	bl	8004ed6 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005222:	d107      	bne.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8005224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800522e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005232:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d010      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005244:	4618      	mov	r0, r3
 8005246:	f7ff fea5 	bl	8004f94 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524e:	2b00      	cmp	r3, #0
 8005250:	d107      	bne.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800525c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005260:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d011      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005272:	4618      	mov	r0, r3
 8005274:	f7ff fea3 	bl	8004fbe <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005280:	d107      	bne.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800528c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005290:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8005292:	7cbb      	ldrb	r3, [r7, #18]
}
 8005294:	4618      	mov	r0, r3
 8005296:	3718      	adds	r7, #24
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	58000400 	.word	0x58000400

080052a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e0c6      	b.n	8005440 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d108      	bne.n	80052cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052c2:	d009      	beq.n	80052d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	61da      	str	r2, [r3, #28]
 80052ca:	e005      	b.n	80052d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d106      	bne.n	80052f2 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f7fc fe2d 	bl	8001f4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2202      	movs	r2, #2
 80052f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005308:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005312:	d902      	bls.n	800531a <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005314:	2300      	movs	r3, #0
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	e002      	b.n	8005320 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800531a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800531e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005328:	d007      	beq.n	800533a <HAL_SPI_Init+0x9a>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005332:	d002      	beq.n	800533a <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800534a:	431a      	orrs	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	431a      	orrs	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	431a      	orrs	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005368:	431a      	orrs	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005372:	431a      	orrs	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a1b      	ldr	r3, [r3, #32]
 8005378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800537c:	ea42 0103 	orr.w	r1, r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005384:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	430a      	orrs	r2, r1
 800538e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005394:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005398:	d11b      	bne.n	80053d2 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10b      	bne.n	80053ba <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053aa:	d903      	bls.n	80053b4 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2202      	movs	r2, #2
 80053b0:	631a      	str	r2, [r3, #48]	; 0x30
 80053b2:	e002      	b.n	80053ba <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d107      	bne.n	80053d2 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053d0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	0c1b      	lsrs	r3, r3, #16
 80053d8:	f003 0204 	and.w	r2, r3, #4
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	f003 0310 	and.w	r3, r3, #16
 80053e4:	431a      	orrs	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ea:	f003 0308 	and.w	r3, r3, #8
 80053ee:	431a      	orrs	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80053f8:	ea42 0103 	orr.w	r1, r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	430a      	orrs	r2, r1
 8005408:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005412:	d105      	bne.n	8005420 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	b292      	uxth	r2, r2
 800541e:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	69da      	ldr	r2, [r3, #28]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800542e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e049      	b.n	80054ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d106      	bne.n	8005474 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f841 	bl	80054f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2202      	movs	r2, #2
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	3304      	adds	r3, #4
 8005484:	4619      	mov	r1, r3
 8005486:	4610      	mov	r0, r2
 8005488:	f000 f9ce 	bl	8005828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3708      	adds	r7, #8
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80054f6:	b480      	push	{r7}
 80054f8:	b083      	sub	sp, #12
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80054fe:	bf00      	nop
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	bc80      	pop	{r7}
 8005506:	4770      	bx	lr

08005508 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b01      	cmp	r3, #1
 800551a:	d001      	beq.n	8005520 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e036      	b.n	800558e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2202      	movs	r2, #2
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68da      	ldr	r2, [r3, #12]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f042 0201 	orr.w	r2, r2, #1
 8005536:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a16      	ldr	r2, [pc, #88]	; (8005598 <HAL_TIM_Base_Start_IT+0x90>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d004      	beq.n	800554c <HAL_TIM_Base_Start_IT+0x44>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800554a:	d115      	bne.n	8005578 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689a      	ldr	r2, [r3, #8]
 8005552:	4b12      	ldr	r3, [pc, #72]	; (800559c <HAL_TIM_Base_Start_IT+0x94>)
 8005554:	4013      	ands	r3, r2
 8005556:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2b06      	cmp	r3, #6
 800555c:	d015      	beq.n	800558a <HAL_TIM_Base_Start_IT+0x82>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005564:	d011      	beq.n	800558a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f042 0201 	orr.w	r2, r2, #1
 8005574:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005576:	e008      	b.n	800558a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f042 0201 	orr.w	r2, r2, #1
 8005586:	601a      	str	r2, [r3, #0]
 8005588:	e000      	b.n	800558c <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800558a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3714      	adds	r7, #20
 8005592:	46bd      	mov	sp, r7
 8005594:	bc80      	pop	{r7}
 8005596:	4770      	bx	lr
 8005598:	40012c00 	.word	0x40012c00
 800559c:	00010007 	.word	0x00010007

080055a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	f003 0302 	and.w	r3, r3, #2
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d122      	bne.n	80055fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f003 0302 	and.w	r3, r3, #2
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d11b      	bne.n	80055fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f06f 0202 	mvn.w	r2, #2
 80055cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	f003 0303 	and.w	r3, r3, #3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d003      	beq.n	80055ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f904 	bl	80057f0 <HAL_TIM_IC_CaptureCallback>
 80055e8:	e005      	b.n	80055f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f8f7 	bl	80057de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 f906 	bl	8005802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	f003 0304 	and.w	r3, r3, #4
 8005606:	2b04      	cmp	r3, #4
 8005608:	d122      	bne.n	8005650 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	f003 0304 	and.w	r3, r3, #4
 8005614:	2b04      	cmp	r3, #4
 8005616:	d11b      	bne.n	8005650 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f06f 0204 	mvn.w	r2, #4
 8005620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2202      	movs	r2, #2
 8005626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005632:	2b00      	cmp	r3, #0
 8005634:	d003      	beq.n	800563e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f8da 	bl	80057f0 <HAL_TIM_IC_CaptureCallback>
 800563c:	e005      	b.n	800564a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f8cd 	bl	80057de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 f8dc 	bl	8005802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	f003 0308 	and.w	r3, r3, #8
 800565a:	2b08      	cmp	r3, #8
 800565c:	d122      	bne.n	80056a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	f003 0308 	and.w	r3, r3, #8
 8005668:	2b08      	cmp	r3, #8
 800566a:	d11b      	bne.n	80056a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f06f 0208 	mvn.w	r2, #8
 8005674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2204      	movs	r2, #4
 800567a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	69db      	ldr	r3, [r3, #28]
 8005682:	f003 0303 	and.w	r3, r3, #3
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 f8b0 	bl	80057f0 <HAL_TIM_IC_CaptureCallback>
 8005690:	e005      	b.n	800569e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f8a3 	bl	80057de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 f8b2 	bl	8005802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	f003 0310 	and.w	r3, r3, #16
 80056ae:	2b10      	cmp	r3, #16
 80056b0:	d122      	bne.n	80056f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	f003 0310 	and.w	r3, r3, #16
 80056bc:	2b10      	cmp	r3, #16
 80056be:	d11b      	bne.n	80056f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f06f 0210 	mvn.w	r2, #16
 80056c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2208      	movs	r2, #8
 80056ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	69db      	ldr	r3, [r3, #28]
 80056d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d003      	beq.n	80056e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f886 	bl	80057f0 <HAL_TIM_IC_CaptureCallback>
 80056e4:	e005      	b.n	80056f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 f879 	bl	80057de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 f888 	bl	8005802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b01      	cmp	r3, #1
 8005704:	d10e      	bne.n	8005724 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f003 0301 	and.w	r3, r3, #1
 8005710:	2b01      	cmp	r3, #1
 8005712:	d107      	bne.n	8005724 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f06f 0201 	mvn.w	r2, #1
 800571c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f7fc fa8e 	bl	8001c40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800572e:	2b80      	cmp	r3, #128	; 0x80
 8005730:	d10e      	bne.n	8005750 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800573c:	2b80      	cmp	r3, #128	; 0x80
 800573e:	d107      	bne.n	8005750 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f8d7 	bl	80058fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800575a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800575e:	d10e      	bne.n	800577e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800576a:	2b80      	cmp	r3, #128	; 0x80
 800576c:	d107      	bne.n	800577e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 f8c9 	bl	8005910 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005788:	2b40      	cmp	r3, #64	; 0x40
 800578a:	d10e      	bne.n	80057aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005796:	2b40      	cmp	r3, #64	; 0x40
 8005798:	d107      	bne.n	80057aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 f835 	bl	8005814 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	f003 0320 	and.w	r3, r3, #32
 80057b4:	2b20      	cmp	r3, #32
 80057b6:	d10e      	bne.n	80057d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	f003 0320 	and.w	r3, r3, #32
 80057c2:	2b20      	cmp	r3, #32
 80057c4:	d107      	bne.n	80057d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f06f 0220 	mvn.w	r2, #32
 80057ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 f88b 	bl	80058ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057d6:	bf00      	nop
 80057d8:	3708      	adds	r7, #8
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057de:	b480      	push	{r7}
 80057e0:	b083      	sub	sp, #12
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057e6:	bf00      	nop
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bc80      	pop	{r7}
 80057ee:	4770      	bx	lr

080057f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057f8:	bf00      	nop
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bc80      	pop	{r7}
 8005800:	4770      	bx	lr

08005802 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005802:	b480      	push	{r7}
 8005804:	b083      	sub	sp, #12
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800580a:	bf00      	nop
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	bc80      	pop	{r7}
 8005812:	4770      	bx	lr

08005814 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	bc80      	pop	{r7}
 8005824:	4770      	bx	lr
	...

08005828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a29      	ldr	r2, [pc, #164]	; (80058e0 <TIM_Base_SetConfig+0xb8>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d003      	beq.n	8005848 <TIM_Base_SetConfig+0x20>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005846:	d108      	bne.n	800585a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800584e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	4313      	orrs	r3, r2
 8005858:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a20      	ldr	r2, [pc, #128]	; (80058e0 <TIM_Base_SetConfig+0xb8>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d00b      	beq.n	800587a <TIM_Base_SetConfig+0x52>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005868:	d007      	beq.n	800587a <TIM_Base_SetConfig+0x52>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a1d      	ldr	r2, [pc, #116]	; (80058e4 <TIM_Base_SetConfig+0xbc>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d003      	beq.n	800587a <TIM_Base_SetConfig+0x52>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a1c      	ldr	r2, [pc, #112]	; (80058e8 <TIM_Base_SetConfig+0xc0>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d108      	bne.n	800588c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005880:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	4313      	orrs	r3, r2
 800588a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	4313      	orrs	r3, r2
 8005898:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	689a      	ldr	r2, [r3, #8]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a0b      	ldr	r2, [pc, #44]	; (80058e0 <TIM_Base_SetConfig+0xb8>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d007      	beq.n	80058c8 <TIM_Base_SetConfig+0xa0>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a0a      	ldr	r2, [pc, #40]	; (80058e4 <TIM_Base_SetConfig+0xbc>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d003      	beq.n	80058c8 <TIM_Base_SetConfig+0xa0>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a09      	ldr	r2, [pc, #36]	; (80058e8 <TIM_Base_SetConfig+0xc0>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d103      	bne.n	80058d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	691a      	ldr	r2, [r3, #16]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	615a      	str	r2, [r3, #20]
}
 80058d6:	bf00      	nop
 80058d8:	3714      	adds	r7, #20
 80058da:	46bd      	mov	sp, r7
 80058dc:	bc80      	pop	{r7}
 80058de:	4770      	bx	lr
 80058e0:	40012c00 	.word	0x40012c00
 80058e4:	40014400 	.word	0x40014400
 80058e8:	40014800 	.word	0x40014800

080058ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bc80      	pop	{r7}
 80058fc:	4770      	bx	lr

080058fe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058fe:	b480      	push	{r7}
 8005900:	b083      	sub	sp, #12
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005906:	bf00      	nop
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	bc80      	pop	{r7}
 800590e:	4770      	bx	lr

08005910 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	bc80      	pop	{r7}
 8005920:	4770      	bx	lr

08005922 <LL_RCC_GetUSARTClockSource>:
{
 8005922:	b480      	push	{r7}
 8005924:	b083      	sub	sp, #12
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800592a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800592e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	401a      	ands	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	041b      	lsls	r3, r3, #16
 800593a:	4313      	orrs	r3, r2
}
 800593c:	4618      	mov	r0, r3
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	bc80      	pop	{r7}
 8005944:	4770      	bx	lr

08005946 <LL_RCC_GetLPUARTClockSource>:
{
 8005946:	b480      	push	{r7}
 8005948:	b083      	sub	sp, #12
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800594e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005952:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4013      	ands	r3, r2
}
 800595a:	4618      	mov	r0, r3
 800595c:	370c      	adds	r7, #12
 800595e:	46bd      	mov	sp, r7
 8005960:	bc80      	pop	{r7}
 8005962:	4770      	bx	lr

08005964 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d101      	bne.n	8005976 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e042      	b.n	80059fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800597c:	2b00      	cmp	r3, #0
 800597e:	d106      	bne.n	800598e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f7fc fa63 	bl	8001e54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2224      	movs	r2, #36	; 0x24
 8005992:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f022 0201 	bic.w	r2, r2, #1
 80059a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 fd5c 	bl	8006464 <UART_SetConfig>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d101      	bne.n	80059b6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e022      	b.n	80059fc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d002      	beq.n	80059c4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 ffc4 	bl	800694c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	685a      	ldr	r2, [r3, #4]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	689a      	ldr	r2, [r3, #8]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 0201 	orr.w	r2, r2, #1
 80059f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f001 f84a 	bl	8006a8e <UART_CheckIdleState>
 80059fa:	4603      	mov	r3, r0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3708      	adds	r7, #8
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e04a      	b.n	8005aac <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d106      	bne.n	8005a2e <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f7fc fa13 	bl	8001e54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2224      	movs	r2, #36	; 0x24
 8005a32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f022 0201 	bic.w	r2, r2, #1
 8005a44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 fd0c 	bl	8006464 <UART_SetConfig>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d101      	bne.n	8005a56 <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e02a      	b.n	8005aac <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d002      	beq.n	8005a64 <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 ff74 	bl	800694c <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	685a      	ldr	r2, [r3, #4]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	689a      	ldr	r2, [r3, #8]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8005a82:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689a      	ldr	r2, [r3, #8]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f042 0208 	orr.w	r2, r2, #8
 8005a92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f042 0201 	orr.w	r2, r2, #1
 8005aa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 fff2 	bl	8006a8e <UART_CheckIdleState>
 8005aaa:	4603      	mov	r3, r0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3708      	adds	r7, #8
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b08a      	sub	sp, #40	; 0x28
 8005ab8:	af02      	add	r7, sp, #8
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	603b      	str	r3, [r7, #0]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aca:	2b20      	cmp	r3, #32
 8005acc:	d173      	bne.n	8005bb6 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d002      	beq.n	8005ada <HAL_UART_Transmit+0x26>
 8005ad4:	88fb      	ldrh	r3, [r7, #6]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e06c      	b.n	8005bb8 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2221      	movs	r2, #33	; 0x21
 8005aea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005aee:	f7fc fc53 	bl	8002398 <HAL_GetTick>
 8005af2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	88fa      	ldrh	r2, [r7, #6]
 8005af8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	88fa      	ldrh	r2, [r7, #6]
 8005b00:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b0c:	d108      	bne.n	8005b20 <HAL_UART_Transmit+0x6c>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d104      	bne.n	8005b20 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005b16:	2300      	movs	r3, #0
 8005b18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	61bb      	str	r3, [r7, #24]
 8005b1e:	e003      	b.n	8005b28 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b24:	2300      	movs	r3, #0
 8005b26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b28:	e02c      	b.n	8005b84 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	2200      	movs	r2, #0
 8005b32:	2180      	movs	r1, #128	; 0x80
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f000 fff8 	bl	8006b2a <UART_WaitOnFlagUntilTimeout>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e039      	b.n	8005bb8 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10b      	bne.n	8005b62 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	881b      	ldrh	r3, [r3, #0]
 8005b4e:	461a      	mov	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b58:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	3302      	adds	r3, #2
 8005b5e:	61bb      	str	r3, [r7, #24]
 8005b60:	e007      	b.n	8005b72 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	781a      	ldrb	r2, [r3, #0]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	3301      	adds	r3, #1
 8005b70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1cc      	bne.n	8005b2a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	2200      	movs	r2, #0
 8005b98:	2140      	movs	r1, #64	; 0x40
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	f000 ffc5 	bl	8006b2a <UART_WaitOnFlagUntilTimeout>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e006      	b.n	8005bb8 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2220      	movs	r2, #32
 8005bae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	e000      	b.n	8005bb8 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8005bb6:	2302      	movs	r3, #2
  }
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3720      	adds	r7, #32
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b08a      	sub	sp, #40	; 0x28
 8005bc4:	af02      	add	r7, sp, #8
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	603b      	str	r3, [r7, #0]
 8005bcc:	4613      	mov	r3, r2
 8005bce:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bd6:	2b20      	cmp	r3, #32
 8005bd8:	f040 80b1 	bne.w	8005d3e <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d002      	beq.n	8005be8 <HAL_UART_Receive+0x28>
 8005be2:	88fb      	ldrh	r3, [r7, #6]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d101      	bne.n	8005bec <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e0a9      	b.n	8005d40 <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2222      	movs	r2, #34	; 0x22
 8005bf8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c02:	f7fc fbc9 	bl	8002398 <HAL_GetTick>
 8005c06:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	88fa      	ldrh	r2, [r7, #6]
 8005c0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	88fa      	ldrh	r2, [r7, #6]
 8005c14:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c20:	d10e      	bne.n	8005c40 <HAL_UART_Receive+0x80>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d105      	bne.n	8005c36 <HAL_UART_Receive+0x76>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005c30:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005c34:	e02d      	b.n	8005c92 <HAL_UART_Receive+0xd2>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	22ff      	movs	r2, #255	; 0xff
 8005c3a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005c3e:	e028      	b.n	8005c92 <HAL_UART_Receive+0xd2>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d10d      	bne.n	8005c64 <HAL_UART_Receive+0xa4>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d104      	bne.n	8005c5a <HAL_UART_Receive+0x9a>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	22ff      	movs	r2, #255	; 0xff
 8005c54:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005c58:	e01b      	b.n	8005c92 <HAL_UART_Receive+0xd2>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	227f      	movs	r2, #127	; 0x7f
 8005c5e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005c62:	e016      	b.n	8005c92 <HAL_UART_Receive+0xd2>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c6c:	d10d      	bne.n	8005c8a <HAL_UART_Receive+0xca>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d104      	bne.n	8005c80 <HAL_UART_Receive+0xc0>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	227f      	movs	r2, #127	; 0x7f
 8005c7a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005c7e:	e008      	b.n	8005c92 <HAL_UART_Receive+0xd2>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	223f      	movs	r2, #63	; 0x3f
 8005c84:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005c88:	e003      	b.n	8005c92 <HAL_UART_Receive+0xd2>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005c98:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ca2:	d108      	bne.n	8005cb6 <HAL_UART_Receive+0xf6>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d104      	bne.n	8005cb6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005cac:	2300      	movs	r3, #0
 8005cae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	61bb      	str	r3, [r7, #24]
 8005cb4:	e003      	b.n	8005cbe <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005cbe:	e032      	b.n	8005d26 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	9300      	str	r3, [sp, #0]
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	2120      	movs	r1, #32
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f000 ff2d 	bl	8006b2a <UART_WaitOnFlagUntilTimeout>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e032      	b.n	8005d40 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10c      	bne.n	8005cfa <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	8a7b      	ldrh	r3, [r7, #18]
 8005cea:	4013      	ands	r3, r2
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	3302      	adds	r3, #2
 8005cf6:	61bb      	str	r3, [r7, #24]
 8005cf8:	e00c      	b.n	8005d14 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d00:	b2da      	uxtb	r2, r3
 8005d02:	8a7b      	ldrh	r3, [r7, #18]
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	4013      	ands	r3, r2
 8005d08:	b2da      	uxtb	r2, r3
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	3301      	adds	r3, #1
 8005d12:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1c6      	bne.n	8005cc0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2220      	movs	r2, #32
 8005d36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	e000      	b.n	8005d40 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8005d3e:	2302      	movs	r3, #2
  }
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3720      	adds	r7, #32
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b08a      	sub	sp, #40	; 0x28
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	4613      	mov	r3, r2
 8005d54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d5c:	2b20      	cmp	r3, #32
 8005d5e:	d137      	bne.n	8005dd0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d002      	beq.n	8005d6c <HAL_UART_Receive_IT+0x24>
 8005d66:	88fb      	ldrh	r3, [r7, #6]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d101      	bne.n	8005d70 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e030      	b.n	8005dd2 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a18      	ldr	r2, [pc, #96]	; (8005ddc <HAL_UART_Receive_IT+0x94>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d01f      	beq.n	8005dc0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d018      	beq.n	8005dc0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	e853 3f00 	ldrex	r3, [r3]
 8005d9a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005da2:	627b      	str	r3, [r7, #36]	; 0x24
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	461a      	mov	r2, r3
 8005daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dac:	623b      	str	r3, [r7, #32]
 8005dae:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db0:	69f9      	ldr	r1, [r7, #28]
 8005db2:	6a3a      	ldr	r2, [r7, #32]
 8005db4:	e841 2300 	strex	r3, r2, [r1]
 8005db8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1e6      	bne.n	8005d8e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005dc0:	88fb      	ldrh	r3, [r7, #6]
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	68b9      	ldr	r1, [r7, #8]
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f000 ff78 	bl	8006cbc <UART_Start_Receive_IT>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	e000      	b.n	8005dd2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005dd0:	2302      	movs	r3, #2
  }
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3728      	adds	r7, #40	; 0x28
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	40008000 	.word	0x40008000

08005de0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b0ba      	sub	sp, #232	; 0xe8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	69db      	ldr	r3, [r3, #28]
 8005dee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e06:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005e0a:	f640 030f 	movw	r3, #2063	; 0x80f
 8005e0e:	4013      	ands	r3, r2
 8005e10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005e14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d11b      	bne.n	8005e54 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e20:	f003 0320 	and.w	r3, r3, #32
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d015      	beq.n	8005e54 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e2c:	f003 0320 	and.w	r3, r3, #32
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d105      	bne.n	8005e40 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005e34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d009      	beq.n	8005e54 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f000 82e3 	beq.w	8006410 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	4798      	blx	r3
      }
      return;
 8005e52:	e2dd      	b.n	8006410 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005e54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f000 8123 	beq.w	80060a4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005e5e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005e62:	4b8d      	ldr	r3, [pc, #564]	; (8006098 <HAL_UART_IRQHandler+0x2b8>)
 8005e64:	4013      	ands	r3, r2
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d106      	bne.n	8005e78 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005e6a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005e6e:	4b8b      	ldr	r3, [pc, #556]	; (800609c <HAL_UART_IRQHandler+0x2bc>)
 8005e70:	4013      	ands	r3, r2
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	f000 8116 	beq.w	80060a4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e7c:	f003 0301 	and.w	r3, r3, #1
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d011      	beq.n	8005ea8 <HAL_UART_IRQHandler+0xc8>
 8005e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00b      	beq.n	8005ea8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2201      	movs	r2, #1
 8005e96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e9e:	f043 0201 	orr.w	r2, r3, #1
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eac:	f003 0302 	and.w	r3, r3, #2
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d011      	beq.n	8005ed8 <HAL_UART_IRQHandler+0xf8>
 8005eb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00b      	beq.n	8005ed8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2202      	movs	r2, #2
 8005ec6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ece:	f043 0204 	orr.w	r2, r3, #4
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d011      	beq.n	8005f08 <HAL_UART_IRQHandler+0x128>
 8005ee4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ee8:	f003 0301 	and.w	r3, r3, #1
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00b      	beq.n	8005f08 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2204      	movs	r2, #4
 8005ef6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005efe:	f043 0202 	orr.w	r2, r3, #2
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f0c:	f003 0308 	and.w	r3, r3, #8
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d017      	beq.n	8005f44 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f18:	f003 0320 	and.w	r3, r3, #32
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d105      	bne.n	8005f2c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005f20:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005f24:	4b5c      	ldr	r3, [pc, #368]	; (8006098 <HAL_UART_IRQHandler+0x2b8>)
 8005f26:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00b      	beq.n	8005f44 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2208      	movs	r2, #8
 8005f32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f3a:	f043 0208 	orr.w	r2, r3, #8
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d012      	beq.n	8005f76 <HAL_UART_IRQHandler+0x196>
 8005f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00c      	beq.n	8005f76 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f6c:	f043 0220 	orr.w	r2, r3, #32
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f000 8249 	beq.w	8006414 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f86:	f003 0320 	and.w	r3, r3, #32
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d013      	beq.n	8005fb6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005f8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f92:	f003 0320 	and.w	r3, r3, #32
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d105      	bne.n	8005fa6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005f9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d007      	beq.n	8005fb6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d003      	beq.n	8005fb6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fbc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fca:	2b40      	cmp	r3, #64	; 0x40
 8005fcc:	d005      	beq.n	8005fda <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005fce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fd2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d054      	beq.n	8006084 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 ff8e 	bl	8006efc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fea:	2b40      	cmp	r3, #64	; 0x40
 8005fec:	d146      	bne.n	800607c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	3308      	adds	r3, #8
 8005ff4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ffc:	e853 3f00 	ldrex	r3, [r3]
 8006000:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006004:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006008:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800600c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	3308      	adds	r3, #8
 8006016:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800601a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800601e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006022:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006026:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800602a:	e841 2300 	strex	r3, r2, [r1]
 800602e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006032:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1d9      	bne.n	8005fee <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006040:	2b00      	cmp	r3, #0
 8006042:	d017      	beq.n	8006074 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800604a:	4a15      	ldr	r2, [pc, #84]	; (80060a0 <HAL_UART_IRQHandler+0x2c0>)
 800604c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006054:	4618      	mov	r0, r3
 8006056:	f7fd fb02 	bl	800365e <HAL_DMA_Abort_IT>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d019      	beq.n	8006094 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800606e:	4610      	mov	r0, r2
 8006070:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006072:	e00f      	b.n	8006094 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 f9e0 	bl	800643a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800607a:	e00b      	b.n	8006094 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 f9dc 	bl	800643a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006082:	e007      	b.n	8006094 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 f9d8 	bl	800643a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006092:	e1bf      	b.n	8006414 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006094:	bf00      	nop
    return;
 8006096:	e1bd      	b.n	8006414 <HAL_UART_IRQHandler+0x634>
 8006098:	10000001 	.word	0x10000001
 800609c:	04000120 	.word	0x04000120
 80060a0:	08006fc7 	.word	0x08006fc7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	f040 8153 	bne.w	8006354 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80060ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060b2:	f003 0310 	and.w	r3, r3, #16
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	f000 814c 	beq.w	8006354 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80060bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060c0:	f003 0310 	and.w	r3, r3, #16
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f000 8145 	beq.w	8006354 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2210      	movs	r2, #16
 80060d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060dc:	2b40      	cmp	r3, #64	; 0x40
 80060de:	f040 80bb 	bne.w	8006258 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80060f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f000 818f 	beq.w	8006418 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006100:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006104:	429a      	cmp	r2, r3
 8006106:	f080 8187 	bcs.w	8006418 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006110:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 0320 	and.w	r3, r3, #32
 8006122:	2b00      	cmp	r3, #0
 8006124:	f040 8087 	bne.w	8006236 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006130:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006134:	e853 3f00 	ldrex	r3, [r3]
 8006138:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800613c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006140:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006144:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	461a      	mov	r2, r3
 800614e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006152:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006156:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800615e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006162:	e841 2300 	strex	r3, r2, [r1]
 8006166:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800616a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1da      	bne.n	8006128 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	3308      	adds	r3, #8
 8006178:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800617c:	e853 3f00 	ldrex	r3, [r3]
 8006180:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006182:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006184:	f023 0301 	bic.w	r3, r3, #1
 8006188:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	3308      	adds	r3, #8
 8006192:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006196:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800619a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800619e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80061a2:	e841 2300 	strex	r3, r2, [r1]
 80061a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80061a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1e1      	bne.n	8006172 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	3308      	adds	r3, #8
 80061b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061b8:	e853 3f00 	ldrex	r3, [r3]
 80061bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80061be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	3308      	adds	r3, #8
 80061ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80061d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80061d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80061d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80061da:	e841 2300 	strex	r3, r2, [r1]
 80061de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80061e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1e3      	bne.n	80061ae <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2220      	movs	r2, #32
 80061ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061fc:	e853 3f00 	ldrex	r3, [r3]
 8006200:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006204:	f023 0310 	bic.w	r3, r3, #16
 8006208:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	461a      	mov	r2, r3
 8006212:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006216:	65bb      	str	r3, [r7, #88]	; 0x58
 8006218:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800621c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800621e:	e841 2300 	strex	r3, r2, [r1]
 8006222:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006224:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1e4      	bne.n	80061f4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006230:	4618      	mov	r0, r3
 8006232:	f7fd f9b6 	bl	80035a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2202      	movs	r2, #2
 800623a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006248:	b29b      	uxth	r3, r3
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	b29b      	uxth	r3, r3
 800624e:	4619      	mov	r1, r3
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 f8fb 	bl	800644c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006256:	e0df      	b.n	8006418 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006264:	b29b      	uxth	r3, r3
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006272:	b29b      	uxth	r3, r3
 8006274:	2b00      	cmp	r3, #0
 8006276:	f000 80d1 	beq.w	800641c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800627a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800627e:	2b00      	cmp	r3, #0
 8006280:	f000 80cc 	beq.w	800641c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628c:	e853 3f00 	ldrex	r3, [r3]
 8006290:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006294:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006298:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	461a      	mov	r2, r3
 80062a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062a6:	647b      	str	r3, [r7, #68]	; 0x44
 80062a8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062ae:	e841 2300 	strex	r3, r2, [r1]
 80062b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1e4      	bne.n	8006284 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	3308      	adds	r3, #8
 80062c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c4:	e853 3f00 	ldrex	r3, [r3]
 80062c8:	623b      	str	r3, [r7, #32]
   return(result);
 80062ca:	6a3b      	ldr	r3, [r7, #32]
 80062cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062d0:	f023 0301 	bic.w	r3, r3, #1
 80062d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	3308      	adds	r3, #8
 80062de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80062e2:	633a      	str	r2, [r7, #48]	; 0x30
 80062e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ea:	e841 2300 	strex	r3, r2, [r1]
 80062ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d1e1      	bne.n	80062ba <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2220      	movs	r2, #32
 80062fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	e853 3f00 	ldrex	r3, [r3]
 8006316:	60fb      	str	r3, [r7, #12]
   return(result);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f023 0310 	bic.w	r3, r3, #16
 800631e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	461a      	mov	r2, r3
 8006328:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800632c:	61fb      	str	r3, [r7, #28]
 800632e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006330:	69b9      	ldr	r1, [r7, #24]
 8006332:	69fa      	ldr	r2, [r7, #28]
 8006334:	e841 2300 	strex	r3, r2, [r1]
 8006338:	617b      	str	r3, [r7, #20]
   return(result);
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1e4      	bne.n	800630a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2202      	movs	r2, #2
 8006344:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006346:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800634a:	4619      	mov	r1, r3
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 f87d 	bl	800644c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006352:	e063      	b.n	800641c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00e      	beq.n	800637e <HAL_UART_IRQHandler+0x59e>
 8006360:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006364:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d008      	beq.n	800637e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006374:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f001 fb82 	bl	8007a80 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800637c:	e051      	b.n	8006422 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800637e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006386:	2b00      	cmp	r3, #0
 8006388:	d014      	beq.n	80063b4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800638a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800638e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006392:	2b00      	cmp	r3, #0
 8006394:	d105      	bne.n	80063a2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006396:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800639a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d008      	beq.n	80063b4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d03a      	beq.n	8006420 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	4798      	blx	r3
    }
    return;
 80063b2:	e035      	b.n	8006420 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80063b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d009      	beq.n	80063d4 <HAL_UART_IRQHandler+0x5f4>
 80063c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d003      	beq.n	80063d4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 fe10 	bl	8006ff2 <UART_EndTransmit_IT>
    return;
 80063d2:	e026      	b.n	8006422 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80063d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d009      	beq.n	80063f4 <HAL_UART_IRQHandler+0x614>
 80063e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d003      	beq.n	80063f4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f001 fb59 	bl	8007aa4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063f2:	e016      	b.n	8006422 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80063f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d010      	beq.n	8006422 <HAL_UART_IRQHandler+0x642>
 8006400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006404:	2b00      	cmp	r3, #0
 8006406:	da0c      	bge.n	8006422 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f001 fb42 	bl	8007a92 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800640e:	e008      	b.n	8006422 <HAL_UART_IRQHandler+0x642>
      return;
 8006410:	bf00      	nop
 8006412:	e006      	b.n	8006422 <HAL_UART_IRQHandler+0x642>
    return;
 8006414:	bf00      	nop
 8006416:	e004      	b.n	8006422 <HAL_UART_IRQHandler+0x642>
      return;
 8006418:	bf00      	nop
 800641a:	e002      	b.n	8006422 <HAL_UART_IRQHandler+0x642>
      return;
 800641c:	bf00      	nop
 800641e:	e000      	b.n	8006422 <HAL_UART_IRQHandler+0x642>
    return;
 8006420:	bf00      	nop
  }
}
 8006422:	37e8      	adds	r7, #232	; 0xe8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	bc80      	pop	{r7}
 8006438:	4770      	bx	lr

0800643a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800643a:	b480      	push	{r7}
 800643c:	b083      	sub	sp, #12
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006442:	bf00      	nop
 8006444:	370c      	adds	r7, #12
 8006446:	46bd      	mov	sp, r7
 8006448:	bc80      	pop	{r7}
 800644a:	4770      	bx	lr

0800644c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	460b      	mov	r3, r1
 8006456:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006458:	bf00      	nop
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	bc80      	pop	{r7}
 8006460:	4770      	bx	lr
	...

08006464 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006464:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006468:	b08c      	sub	sp, #48	; 0x30
 800646a:	af00      	add	r7, sp, #0
 800646c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800646e:	2300      	movs	r3, #0
 8006470:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	689a      	ldr	r2, [r3, #8]
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	431a      	orrs	r2, r3
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	431a      	orrs	r2, r3
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	69db      	ldr	r3, [r3, #28]
 8006488:	4313      	orrs	r3, r2
 800648a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	4b94      	ldr	r3, [pc, #592]	; (80066e4 <UART_SetConfig+0x280>)
 8006494:	4013      	ands	r3, r2
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	6812      	ldr	r2, [r2, #0]
 800649a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800649c:	430b      	orrs	r3, r1
 800649e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	68da      	ldr	r2, [r3, #12]
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a89      	ldr	r2, [pc, #548]	; (80066e8 <UART_SetConfig+0x284>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d004      	beq.n	80064d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064cc:	4313      	orrs	r3, r2
 80064ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80064da:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	6812      	ldr	r2, [r2, #0]
 80064e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064e4:	430b      	orrs	r3, r1
 80064e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ee:	f023 010f 	bic.w	r1, r3, #15
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	430a      	orrs	r2, r1
 80064fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a7a      	ldr	r2, [pc, #488]	; (80066ec <UART_SetConfig+0x288>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d127      	bne.n	8006558 <UART_SetConfig+0xf4>
 8006508:	2003      	movs	r0, #3
 800650a:	f7ff fa0a 	bl	8005922 <LL_RCC_GetUSARTClockSource>
 800650e:	4603      	mov	r3, r0
 8006510:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8006514:	2b03      	cmp	r3, #3
 8006516:	d81b      	bhi.n	8006550 <UART_SetConfig+0xec>
 8006518:	a201      	add	r2, pc, #4	; (adr r2, 8006520 <UART_SetConfig+0xbc>)
 800651a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651e:	bf00      	nop
 8006520:	08006531 	.word	0x08006531
 8006524:	08006541 	.word	0x08006541
 8006528:	08006539 	.word	0x08006539
 800652c:	08006549 	.word	0x08006549
 8006530:	2301      	movs	r3, #1
 8006532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006536:	e080      	b.n	800663a <UART_SetConfig+0x1d6>
 8006538:	2302      	movs	r3, #2
 800653a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800653e:	e07c      	b.n	800663a <UART_SetConfig+0x1d6>
 8006540:	2304      	movs	r3, #4
 8006542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006546:	e078      	b.n	800663a <UART_SetConfig+0x1d6>
 8006548:	2308      	movs	r3, #8
 800654a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800654e:	e074      	b.n	800663a <UART_SetConfig+0x1d6>
 8006550:	2310      	movs	r3, #16
 8006552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006556:	e070      	b.n	800663a <UART_SetConfig+0x1d6>
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a64      	ldr	r2, [pc, #400]	; (80066f0 <UART_SetConfig+0x28c>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d138      	bne.n	80065d4 <UART_SetConfig+0x170>
 8006562:	200c      	movs	r0, #12
 8006564:	f7ff f9dd 	bl	8005922 <LL_RCC_GetUSARTClockSource>
 8006568:	4603      	mov	r3, r0
 800656a:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800656e:	2b0c      	cmp	r3, #12
 8006570:	d82c      	bhi.n	80065cc <UART_SetConfig+0x168>
 8006572:	a201      	add	r2, pc, #4	; (adr r2, 8006578 <UART_SetConfig+0x114>)
 8006574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006578:	080065ad 	.word	0x080065ad
 800657c:	080065cd 	.word	0x080065cd
 8006580:	080065cd 	.word	0x080065cd
 8006584:	080065cd 	.word	0x080065cd
 8006588:	080065bd 	.word	0x080065bd
 800658c:	080065cd 	.word	0x080065cd
 8006590:	080065cd 	.word	0x080065cd
 8006594:	080065cd 	.word	0x080065cd
 8006598:	080065b5 	.word	0x080065b5
 800659c:	080065cd 	.word	0x080065cd
 80065a0:	080065cd 	.word	0x080065cd
 80065a4:	080065cd 	.word	0x080065cd
 80065a8:	080065c5 	.word	0x080065c5
 80065ac:	2300      	movs	r3, #0
 80065ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065b2:	e042      	b.n	800663a <UART_SetConfig+0x1d6>
 80065b4:	2302      	movs	r3, #2
 80065b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065ba:	e03e      	b.n	800663a <UART_SetConfig+0x1d6>
 80065bc:	2304      	movs	r3, #4
 80065be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065c2:	e03a      	b.n	800663a <UART_SetConfig+0x1d6>
 80065c4:	2308      	movs	r3, #8
 80065c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065ca:	e036      	b.n	800663a <UART_SetConfig+0x1d6>
 80065cc:	2310      	movs	r3, #16
 80065ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065d2:	e032      	b.n	800663a <UART_SetConfig+0x1d6>
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a43      	ldr	r2, [pc, #268]	; (80066e8 <UART_SetConfig+0x284>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d12a      	bne.n	8006634 <UART_SetConfig+0x1d0>
 80065de:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80065e2:	f7ff f9b0 	bl	8005946 <LL_RCC_GetLPUARTClockSource>
 80065e6:	4603      	mov	r3, r0
 80065e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065ec:	d01a      	beq.n	8006624 <UART_SetConfig+0x1c0>
 80065ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065f2:	d81b      	bhi.n	800662c <UART_SetConfig+0x1c8>
 80065f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065f8:	d00c      	beq.n	8006614 <UART_SetConfig+0x1b0>
 80065fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065fe:	d815      	bhi.n	800662c <UART_SetConfig+0x1c8>
 8006600:	2b00      	cmp	r3, #0
 8006602:	d003      	beq.n	800660c <UART_SetConfig+0x1a8>
 8006604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006608:	d008      	beq.n	800661c <UART_SetConfig+0x1b8>
 800660a:	e00f      	b.n	800662c <UART_SetConfig+0x1c8>
 800660c:	2300      	movs	r3, #0
 800660e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006612:	e012      	b.n	800663a <UART_SetConfig+0x1d6>
 8006614:	2302      	movs	r3, #2
 8006616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800661a:	e00e      	b.n	800663a <UART_SetConfig+0x1d6>
 800661c:	2304      	movs	r3, #4
 800661e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006622:	e00a      	b.n	800663a <UART_SetConfig+0x1d6>
 8006624:	2308      	movs	r3, #8
 8006626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800662a:	e006      	b.n	800663a <UART_SetConfig+0x1d6>
 800662c:	2310      	movs	r3, #16
 800662e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006632:	e002      	b.n	800663a <UART_SetConfig+0x1d6>
 8006634:	2310      	movs	r3, #16
 8006636:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a2a      	ldr	r2, [pc, #168]	; (80066e8 <UART_SetConfig+0x284>)
 8006640:	4293      	cmp	r3, r2
 8006642:	f040 80a4 	bne.w	800678e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006646:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800664a:	2b08      	cmp	r3, #8
 800664c:	d823      	bhi.n	8006696 <UART_SetConfig+0x232>
 800664e:	a201      	add	r2, pc, #4	; (adr r2, 8006654 <UART_SetConfig+0x1f0>)
 8006650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006654:	08006679 	.word	0x08006679
 8006658:	08006697 	.word	0x08006697
 800665c:	08006681 	.word	0x08006681
 8006660:	08006697 	.word	0x08006697
 8006664:	08006687 	.word	0x08006687
 8006668:	08006697 	.word	0x08006697
 800666c:	08006697 	.word	0x08006697
 8006670:	08006697 	.word	0x08006697
 8006674:	0800668f 	.word	0x0800668f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006678:	f7fe faf0 	bl	8004c5c <HAL_RCC_GetPCLK1Freq>
 800667c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800667e:	e010      	b.n	80066a2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006680:	4b1c      	ldr	r3, [pc, #112]	; (80066f4 <UART_SetConfig+0x290>)
 8006682:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006684:	e00d      	b.n	80066a2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006686:	f7fe fa35 	bl	8004af4 <HAL_RCC_GetSysClockFreq>
 800668a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800668c:	e009      	b.n	80066a2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800668e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006692:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006694:	e005      	b.n	80066a2 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8006696:	2300      	movs	r3, #0
 8006698:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80066a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80066a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f000 8137 	beq.w	8006918 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ae:	4a12      	ldr	r2, [pc, #72]	; (80066f8 <UART_SetConfig+0x294>)
 80066b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066b4:	461a      	mov	r2, r3
 80066b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80066bc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	685a      	ldr	r2, [r3, #4]
 80066c2:	4613      	mov	r3, r2
 80066c4:	005b      	lsls	r3, r3, #1
 80066c6:	4413      	add	r3, r2
 80066c8:	69ba      	ldr	r2, [r7, #24]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d305      	bcc.n	80066da <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066d4:	69ba      	ldr	r2, [r7, #24]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d910      	bls.n	80066fc <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80066e0:	e11a      	b.n	8006918 <UART_SetConfig+0x4b4>
 80066e2:	bf00      	nop
 80066e4:	cfff69f3 	.word	0xcfff69f3
 80066e8:	40008000 	.word	0x40008000
 80066ec:	40013800 	.word	0x40013800
 80066f0:	40004400 	.word	0x40004400
 80066f4:	00f42400 	.word	0x00f42400
 80066f8:	0800ca9c 	.word	0x0800ca9c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fe:	2200      	movs	r2, #0
 8006700:	60bb      	str	r3, [r7, #8]
 8006702:	60fa      	str	r2, [r7, #12]
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006708:	4a8e      	ldr	r2, [pc, #568]	; (8006944 <UART_SetConfig+0x4e0>)
 800670a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800670e:	b29b      	uxth	r3, r3
 8006710:	2200      	movs	r2, #0
 8006712:	603b      	str	r3, [r7, #0]
 8006714:	607a      	str	r2, [r7, #4]
 8006716:	e9d7 2300 	ldrd	r2, r3, [r7]
 800671a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800671e:	f7fa fb41 	bl	8000da4 <__aeabi_uldivmod>
 8006722:	4602      	mov	r2, r0
 8006724:	460b      	mov	r3, r1
 8006726:	4610      	mov	r0, r2
 8006728:	4619      	mov	r1, r3
 800672a:	f04f 0200 	mov.w	r2, #0
 800672e:	f04f 0300 	mov.w	r3, #0
 8006732:	020b      	lsls	r3, r1, #8
 8006734:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006738:	0202      	lsls	r2, r0, #8
 800673a:	6979      	ldr	r1, [r7, #20]
 800673c:	6849      	ldr	r1, [r1, #4]
 800673e:	0849      	lsrs	r1, r1, #1
 8006740:	2000      	movs	r0, #0
 8006742:	460c      	mov	r4, r1
 8006744:	4605      	mov	r5, r0
 8006746:	eb12 0804 	adds.w	r8, r2, r4
 800674a:	eb43 0905 	adc.w	r9, r3, r5
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	469a      	mov	sl, r3
 8006756:	4693      	mov	fp, r2
 8006758:	4652      	mov	r2, sl
 800675a:	465b      	mov	r3, fp
 800675c:	4640      	mov	r0, r8
 800675e:	4649      	mov	r1, r9
 8006760:	f7fa fb20 	bl	8000da4 <__aeabi_uldivmod>
 8006764:	4602      	mov	r2, r0
 8006766:	460b      	mov	r3, r1
 8006768:	4613      	mov	r3, r2
 800676a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800676c:	6a3b      	ldr	r3, [r7, #32]
 800676e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006772:	d308      	bcc.n	8006786 <UART_SetConfig+0x322>
 8006774:	6a3b      	ldr	r3, [r7, #32]
 8006776:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800677a:	d204      	bcs.n	8006786 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6a3a      	ldr	r2, [r7, #32]
 8006782:	60da      	str	r2, [r3, #12]
 8006784:	e0c8      	b.n	8006918 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800678c:	e0c4      	b.n	8006918 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	69db      	ldr	r3, [r3, #28]
 8006792:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006796:	d167      	bne.n	8006868 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8006798:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800679c:	2b08      	cmp	r3, #8
 800679e:	d828      	bhi.n	80067f2 <UART_SetConfig+0x38e>
 80067a0:	a201      	add	r2, pc, #4	; (adr r2, 80067a8 <UART_SetConfig+0x344>)
 80067a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a6:	bf00      	nop
 80067a8:	080067cd 	.word	0x080067cd
 80067ac:	080067d5 	.word	0x080067d5
 80067b0:	080067dd 	.word	0x080067dd
 80067b4:	080067f3 	.word	0x080067f3
 80067b8:	080067e3 	.word	0x080067e3
 80067bc:	080067f3 	.word	0x080067f3
 80067c0:	080067f3 	.word	0x080067f3
 80067c4:	080067f3 	.word	0x080067f3
 80067c8:	080067eb 	.word	0x080067eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067cc:	f7fe fa46 	bl	8004c5c <HAL_RCC_GetPCLK1Freq>
 80067d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80067d2:	e014      	b.n	80067fe <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067d4:	f7fe fa54 	bl	8004c80 <HAL_RCC_GetPCLK2Freq>
 80067d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80067da:	e010      	b.n	80067fe <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067dc:	4b5a      	ldr	r3, [pc, #360]	; (8006948 <UART_SetConfig+0x4e4>)
 80067de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80067e0:	e00d      	b.n	80067fe <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067e2:	f7fe f987 	bl	8004af4 <HAL_RCC_GetSysClockFreq>
 80067e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80067e8:	e009      	b.n	80067fe <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80067f0:	e005      	b.n	80067fe <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80067f2:	2300      	movs	r3, #0
 80067f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80067fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006800:	2b00      	cmp	r3, #0
 8006802:	f000 8089 	beq.w	8006918 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680a:	4a4e      	ldr	r2, [pc, #312]	; (8006944 <UART_SetConfig+0x4e0>)
 800680c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006810:	461a      	mov	r2, r3
 8006812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006814:	fbb3 f3f2 	udiv	r3, r3, r2
 8006818:	005a      	lsls	r2, r3, #1
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	085b      	lsrs	r3, r3, #1
 8006820:	441a      	add	r2, r3
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	fbb2 f3f3 	udiv	r3, r2, r3
 800682a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800682c:	6a3b      	ldr	r3, [r7, #32]
 800682e:	2b0f      	cmp	r3, #15
 8006830:	d916      	bls.n	8006860 <UART_SetConfig+0x3fc>
 8006832:	6a3b      	ldr	r3, [r7, #32]
 8006834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006838:	d212      	bcs.n	8006860 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800683a:	6a3b      	ldr	r3, [r7, #32]
 800683c:	b29b      	uxth	r3, r3
 800683e:	f023 030f 	bic.w	r3, r3, #15
 8006842:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006844:	6a3b      	ldr	r3, [r7, #32]
 8006846:	085b      	lsrs	r3, r3, #1
 8006848:	b29b      	uxth	r3, r3
 800684a:	f003 0307 	and.w	r3, r3, #7
 800684e:	b29a      	uxth	r2, r3
 8006850:	8bfb      	ldrh	r3, [r7, #30]
 8006852:	4313      	orrs	r3, r2
 8006854:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	8bfa      	ldrh	r2, [r7, #30]
 800685c:	60da      	str	r2, [r3, #12]
 800685e:	e05b      	b.n	8006918 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006866:	e057      	b.n	8006918 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006868:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800686c:	2b08      	cmp	r3, #8
 800686e:	d828      	bhi.n	80068c2 <UART_SetConfig+0x45e>
 8006870:	a201      	add	r2, pc, #4	; (adr r2, 8006878 <UART_SetConfig+0x414>)
 8006872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006876:	bf00      	nop
 8006878:	0800689d 	.word	0x0800689d
 800687c:	080068a5 	.word	0x080068a5
 8006880:	080068ad 	.word	0x080068ad
 8006884:	080068c3 	.word	0x080068c3
 8006888:	080068b3 	.word	0x080068b3
 800688c:	080068c3 	.word	0x080068c3
 8006890:	080068c3 	.word	0x080068c3
 8006894:	080068c3 	.word	0x080068c3
 8006898:	080068bb 	.word	0x080068bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800689c:	f7fe f9de 	bl	8004c5c <HAL_RCC_GetPCLK1Freq>
 80068a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80068a2:	e014      	b.n	80068ce <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068a4:	f7fe f9ec 	bl	8004c80 <HAL_RCC_GetPCLK2Freq>
 80068a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80068aa:	e010      	b.n	80068ce <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068ac:	4b26      	ldr	r3, [pc, #152]	; (8006948 <UART_SetConfig+0x4e4>)
 80068ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80068b0:	e00d      	b.n	80068ce <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068b2:	f7fe f91f 	bl	8004af4 <HAL_RCC_GetSysClockFreq>
 80068b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80068b8:	e009      	b.n	80068ce <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80068c0:	e005      	b.n	80068ce <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80068c2:	2300      	movs	r3, #0
 80068c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80068cc:	bf00      	nop
    }

    if (pclk != 0U)
 80068ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d021      	beq.n	8006918 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d8:	4a1a      	ldr	r2, [pc, #104]	; (8006944 <UART_SetConfig+0x4e0>)
 80068da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068de:	461a      	mov	r2, r3
 80068e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	085b      	lsrs	r3, r3, #1
 80068ec:	441a      	add	r2, r3
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068f8:	6a3b      	ldr	r3, [r7, #32]
 80068fa:	2b0f      	cmp	r3, #15
 80068fc:	d909      	bls.n	8006912 <UART_SetConfig+0x4ae>
 80068fe:	6a3b      	ldr	r3, [r7, #32]
 8006900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006904:	d205      	bcs.n	8006912 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006906:	6a3b      	ldr	r3, [r7, #32]
 8006908:	b29a      	uxth	r2, r3
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	60da      	str	r2, [r3, #12]
 8006910:	e002      	b.n	8006918 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	2201      	movs	r2, #1
 800691c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	2201      	movs	r2, #1
 8006924:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	2200      	movs	r2, #0
 800692c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	2200      	movs	r2, #0
 8006932:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006934:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006938:	4618      	mov	r0, r3
 800693a:	3730      	adds	r7, #48	; 0x30
 800693c:	46bd      	mov	sp, r7
 800693e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006942:	bf00      	nop
 8006944:	0800ca9c 	.word	0x0800ca9c
 8006948:	00f42400 	.word	0x00f42400

0800694c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006958:	f003 0301 	and.w	r3, r3, #1
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00a      	beq.n	8006976 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	430a      	orrs	r2, r1
 8006974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800697a:	f003 0302 	and.w	r3, r3, #2
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00a      	beq.n	8006998 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	430a      	orrs	r2, r1
 8006996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800699c:	f003 0304 	and.w	r3, r3, #4
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00a      	beq.n	80069ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	430a      	orrs	r2, r1
 80069b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069be:	f003 0308 	and.w	r3, r3, #8
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00a      	beq.n	80069dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	430a      	orrs	r2, r1
 80069da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e0:	f003 0310 	and.w	r3, r3, #16
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00a      	beq.n	80069fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	430a      	orrs	r2, r1
 80069fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a02:	f003 0320 	and.w	r3, r3, #32
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00a      	beq.n	8006a20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d01a      	beq.n	8006a62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a4a:	d10a      	bne.n	8006a62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	430a      	orrs	r2, r1
 8006a60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00a      	beq.n	8006a84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	430a      	orrs	r2, r1
 8006a82:	605a      	str	r2, [r3, #4]
  }
}
 8006a84:	bf00      	nop
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bc80      	pop	{r7}
 8006a8c:	4770      	bx	lr

08006a8e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	b086      	sub	sp, #24
 8006a92:	af02      	add	r7, sp, #8
 8006a94:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a9e:	f7fb fc7b 	bl	8002398 <HAL_GetTick>
 8006aa2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 0308 	and.w	r3, r3, #8
 8006aae:	2b08      	cmp	r3, #8
 8006ab0:	d10e      	bne.n	8006ad0 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ab2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ab6:	9300      	str	r3, [sp, #0]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 f832 	bl	8006b2a <UART_WaitOnFlagUntilTimeout>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d001      	beq.n	8006ad0 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e028      	b.n	8006b22 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 0304 	and.w	r3, r3, #4
 8006ada:	2b04      	cmp	r3, #4
 8006adc:	d10e      	bne.n	8006afc <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ade:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ae2:	9300      	str	r3, [sp, #0]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 f81c 	bl	8006b2a <UART_WaitOnFlagUntilTimeout>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d001      	beq.n	8006afc <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e012      	b.n	8006b22 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2220      	movs	r2, #32
 8006b00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2220      	movs	r2, #32
 8006b08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b09c      	sub	sp, #112	; 0x70
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	60f8      	str	r0, [r7, #12]
 8006b32:	60b9      	str	r1, [r7, #8]
 8006b34:	603b      	str	r3, [r7, #0]
 8006b36:	4613      	mov	r3, r2
 8006b38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b3a:	e0a9      	b.n	8006c90 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b42:	f000 80a5 	beq.w	8006c90 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b46:	f7fb fc27 	bl	8002398 <HAL_GetTick>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d302      	bcc.n	8006b5c <UART_WaitOnFlagUntilTimeout+0x32>
 8006b56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d140      	bne.n	8006bde <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b64:	e853 3f00 	ldrex	r3, [r3]
 8006b68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b70:	667b      	str	r3, [r7, #100]	; 0x64
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	461a      	mov	r2, r3
 8006b78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b7c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006b80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b82:	e841 2300 	strex	r3, r2, [r1]
 8006b86:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006b88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1e6      	bne.n	8006b5c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	3308      	adds	r3, #8
 8006b94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b98:	e853 3f00 	ldrex	r3, [r3]
 8006b9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba0:	f023 0301 	bic.w	r3, r3, #1
 8006ba4:	663b      	str	r3, [r7, #96]	; 0x60
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	3308      	adds	r3, #8
 8006bac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006bae:	64ba      	str	r2, [r7, #72]	; 0x48
 8006bb0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006bb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bb6:	e841 2300 	strex	r3, r2, [r1]
 8006bba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d1e5      	bne.n	8006b8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2220      	movs	r2, #32
 8006bc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2220      	movs	r2, #32
 8006bce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e069      	b.n	8006cb2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0304 	and.w	r3, r3, #4
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d051      	beq.n	8006c90 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bfa:	d149      	bne.n	8006c90 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c04:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0e:	e853 3f00 	ldrex	r3, [r3]
 8006c12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	461a      	mov	r2, r3
 8006c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c24:	637b      	str	r3, [r7, #52]	; 0x34
 8006c26:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c2c:	e841 2300 	strex	r3, r2, [r1]
 8006c30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1e6      	bne.n	8006c06 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	3308      	adds	r3, #8
 8006c3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	e853 3f00 	ldrex	r3, [r3]
 8006c46:	613b      	str	r3, [r7, #16]
   return(result);
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	f023 0301 	bic.w	r3, r3, #1
 8006c4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	3308      	adds	r3, #8
 8006c56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c58:	623a      	str	r2, [r7, #32]
 8006c5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5c:	69f9      	ldr	r1, [r7, #28]
 8006c5e:	6a3a      	ldr	r2, [r7, #32]
 8006c60:	e841 2300 	strex	r3, r2, [r1]
 8006c64:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1e5      	bne.n	8006c38 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2220      	movs	r2, #32
 8006c70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2220      	movs	r2, #32
 8006c78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2220      	movs	r2, #32
 8006c80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e010      	b.n	8006cb2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	69da      	ldr	r2, [r3, #28]
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	4013      	ands	r3, r2
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	bf0c      	ite	eq
 8006ca0:	2301      	moveq	r3, #1
 8006ca2:	2300      	movne	r3, #0
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	79fb      	ldrb	r3, [r7, #7]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	f43f af46 	beq.w	8006b3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3770      	adds	r7, #112	; 0x70
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
	...

08006cbc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b0a3      	sub	sp, #140	; 0x8c
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	88fa      	ldrh	r2, [r7, #6]
 8006cd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	88fa      	ldrh	r2, [r7, #6]
 8006cdc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cee:	d10e      	bne.n	8006d0e <UART_Start_Receive_IT+0x52>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d105      	bne.n	8006d04 <UART_Start_Receive_IT+0x48>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006cfe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006d02:	e02d      	b.n	8006d60 <UART_Start_Receive_IT+0xa4>
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	22ff      	movs	r2, #255	; 0xff
 8006d08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006d0c:	e028      	b.n	8006d60 <UART_Start_Receive_IT+0xa4>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d10d      	bne.n	8006d32 <UART_Start_Receive_IT+0x76>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d104      	bne.n	8006d28 <UART_Start_Receive_IT+0x6c>
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	22ff      	movs	r2, #255	; 0xff
 8006d22:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006d26:	e01b      	b.n	8006d60 <UART_Start_Receive_IT+0xa4>
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	227f      	movs	r2, #127	; 0x7f
 8006d2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006d30:	e016      	b.n	8006d60 <UART_Start_Receive_IT+0xa4>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d3a:	d10d      	bne.n	8006d58 <UART_Start_Receive_IT+0x9c>
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d104      	bne.n	8006d4e <UART_Start_Receive_IT+0x92>
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	227f      	movs	r2, #127	; 0x7f
 8006d48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006d4c:	e008      	b.n	8006d60 <UART_Start_Receive_IT+0xa4>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	223f      	movs	r2, #63	; 0x3f
 8006d52:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006d56:	e003      	b.n	8006d60 <UART_Start_Receive_IT+0xa4>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2222      	movs	r2, #34	; 0x22
 8006d6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	3308      	adds	r3, #8
 8006d76:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d7a:	e853 3f00 	ldrex	r3, [r3]
 8006d7e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006d80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d82:	f043 0301 	orr.w	r3, r3, #1
 8006d86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	3308      	adds	r3, #8
 8006d90:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006d94:	673a      	str	r2, [r7, #112]	; 0x70
 8006d96:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d98:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006d9a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006d9c:	e841 2300 	strex	r3, r2, [r1]
 8006da0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006da2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d1e3      	bne.n	8006d70 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006db0:	d14f      	bne.n	8006e52 <UART_Start_Receive_IT+0x196>
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006db8:	88fa      	ldrh	r2, [r7, #6]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d349      	bcc.n	8006e52 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dc6:	d107      	bne.n	8006dd8 <UART_Start_Receive_IT+0x11c>
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d103      	bne.n	8006dd8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	4a46      	ldr	r2, [pc, #280]	; (8006eec <UART_Start_Receive_IT+0x230>)
 8006dd4:	675a      	str	r2, [r3, #116]	; 0x74
 8006dd6:	e002      	b.n	8006dde <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	4a45      	ldr	r2, [pc, #276]	; (8006ef0 <UART_Start_Receive_IT+0x234>)
 8006ddc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d01a      	beq.n	8006e1c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dee:	e853 3f00 	ldrex	r3, [r3]
 8006df2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dfa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	461a      	mov	r2, r3
 8006e04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e0a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e0e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e10:	e841 2300 	strex	r3, r2, [r1]
 8006e14:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1e4      	bne.n	8006de6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	3308      	adds	r3, #8
 8006e22:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e26:	e853 3f00 	ldrex	r3, [r3]
 8006e2a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e32:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	3308      	adds	r3, #8
 8006e3a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006e3c:	64ba      	str	r2, [r7, #72]	; 0x48
 8006e3e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e40:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e44:	e841 2300 	strex	r3, r2, [r1]
 8006e48:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006e4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1e5      	bne.n	8006e1c <UART_Start_Receive_IT+0x160>
 8006e50:	e046      	b.n	8006ee0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e5a:	d107      	bne.n	8006e6c <UART_Start_Receive_IT+0x1b0>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d103      	bne.n	8006e6c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	4a23      	ldr	r2, [pc, #140]	; (8006ef4 <UART_Start_Receive_IT+0x238>)
 8006e68:	675a      	str	r2, [r3, #116]	; 0x74
 8006e6a:	e002      	b.n	8006e72 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	4a22      	ldr	r2, [pc, #136]	; (8006ef8 <UART_Start_Receive_IT+0x23c>)
 8006e70:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d019      	beq.n	8006eae <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e82:	e853 3f00 	ldrex	r3, [r3]
 8006e86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006e8e:	677b      	str	r3, [r7, #116]	; 0x74
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	461a      	mov	r2, r3
 8006e96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e98:	637b      	str	r3, [r7, #52]	; 0x34
 8006e9a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ea0:	e841 2300 	strex	r3, r2, [r1]
 8006ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1e6      	bne.n	8006e7a <UART_Start_Receive_IT+0x1be>
 8006eac:	e018      	b.n	8006ee0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	e853 3f00 	ldrex	r3, [r3]
 8006eba:	613b      	str	r3, [r7, #16]
   return(result);
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	f043 0320 	orr.w	r3, r3, #32
 8006ec2:	67bb      	str	r3, [r7, #120]	; 0x78
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	461a      	mov	r2, r3
 8006eca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ecc:	623b      	str	r3, [r7, #32]
 8006ece:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed0:	69f9      	ldr	r1, [r7, #28]
 8006ed2:	6a3a      	ldr	r2, [r7, #32]
 8006ed4:	e841 2300 	strex	r3, r2, [r1]
 8006ed8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1e6      	bne.n	8006eae <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	378c      	adds	r7, #140	; 0x8c
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bc80      	pop	{r7}
 8006eea:	4770      	bx	lr
 8006eec:	08007719 	.word	0x08007719
 8006ef0:	080073b9 	.word	0x080073b9
 8006ef4:	08007201 	.word	0x08007201
 8006ef8:	08007049 	.word	0x08007049

08006efc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b095      	sub	sp, #84	; 0x54
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f0c:	e853 3f00 	ldrex	r3, [r3]
 8006f10:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	461a      	mov	r2, r3
 8006f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f22:	643b      	str	r3, [r7, #64]	; 0x40
 8006f24:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f2a:	e841 2300 	strex	r3, r2, [r1]
 8006f2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1e6      	bne.n	8006f04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	3308      	adds	r3, #8
 8006f3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3e:	6a3b      	ldr	r3, [r7, #32]
 8006f40:	e853 3f00 	ldrex	r3, [r3]
 8006f44:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f4c:	f023 0301 	bic.w	r3, r3, #1
 8006f50:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	3308      	adds	r3, #8
 8006f58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f62:	e841 2300 	strex	r3, r2, [r1]
 8006f66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d1e3      	bne.n	8006f36 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d118      	bne.n	8006fa8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	e853 3f00 	ldrex	r3, [r3]
 8006f82:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	f023 0310 	bic.w	r3, r3, #16
 8006f8a:	647b      	str	r3, [r7, #68]	; 0x44
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	461a      	mov	r2, r3
 8006f92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f94:	61bb      	str	r3, [r7, #24]
 8006f96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f98:	6979      	ldr	r1, [r7, #20]
 8006f9a:	69ba      	ldr	r2, [r7, #24]
 8006f9c:	e841 2300 	strex	r3, r2, [r1]
 8006fa0:	613b      	str	r3, [r7, #16]
   return(result);
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1e6      	bne.n	8006f76 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2220      	movs	r2, #32
 8006fac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006fbc:	bf00      	nop
 8006fbe:	3754      	adds	r7, #84	; 0x54
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bc80      	pop	{r7}
 8006fc4:	4770      	bx	lr

08006fc6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b084      	sub	sp, #16
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f7ff fa28 	bl	800643a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fea:	bf00      	nop
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b088      	sub	sp, #32
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	e853 3f00 	ldrex	r3, [r3]
 8007006:	60bb      	str	r3, [r7, #8]
   return(result);
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800700e:	61fb      	str	r3, [r7, #28]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	461a      	mov	r2, r3
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	61bb      	str	r3, [r7, #24]
 800701a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701c:	6979      	ldr	r1, [r7, #20]
 800701e:	69ba      	ldr	r2, [r7, #24]
 8007020:	e841 2300 	strex	r3, r2, [r1]
 8007024:	613b      	str	r3, [r7, #16]
   return(result);
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d1e6      	bne.n	8006ffa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2220      	movs	r2, #32
 8007030:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f7ff f9f4 	bl	8006428 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007040:	bf00      	nop
 8007042:	3720      	adds	r7, #32
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b09c      	sub	sp, #112	; 0x70
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007056:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007060:	2b22      	cmp	r3, #34	; 0x22
 8007062:	f040 80be 	bne.w	80071e2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007070:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007074:	b2d9      	uxtb	r1, r3
 8007076:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800707a:	b2da      	uxtb	r2, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007080:	400a      	ands	r2, r1
 8007082:	b2d2      	uxtb	r2, r2
 8007084:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800708a:	1c5a      	adds	r2, r3, #1
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007096:	b29b      	uxth	r3, r3
 8007098:	3b01      	subs	r3, #1
 800709a:	b29a      	uxth	r2, r3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f040 80a1 	bne.w	80071f2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070b8:	e853 3f00 	ldrex	r3, [r3]
 80070bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80070be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	461a      	mov	r2, r3
 80070cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80070ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80070d0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80070d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80070d6:	e841 2300 	strex	r3, r2, [r1]
 80070da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80070dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d1e6      	bne.n	80070b0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	3308      	adds	r3, #8
 80070e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ec:	e853 3f00 	ldrex	r3, [r3]
 80070f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070f4:	f023 0301 	bic.w	r3, r3, #1
 80070f8:	667b      	str	r3, [r7, #100]	; 0x64
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	3308      	adds	r3, #8
 8007100:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007102:	647a      	str	r2, [r7, #68]	; 0x44
 8007104:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007106:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007108:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800710a:	e841 2300 	strex	r3, r2, [r1]
 800710e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1e5      	bne.n	80070e2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2220      	movs	r2, #32
 800711a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a33      	ldr	r2, [pc, #204]	; (80071fc <UART_RxISR_8BIT+0x1b4>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d01f      	beq.n	8007174 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800713e:	2b00      	cmp	r3, #0
 8007140:	d018      	beq.n	8007174 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714a:	e853 3f00 	ldrex	r3, [r3]
 800714e:	623b      	str	r3, [r7, #32]
   return(result);
 8007150:	6a3b      	ldr	r3, [r7, #32]
 8007152:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007156:	663b      	str	r3, [r7, #96]	; 0x60
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	461a      	mov	r2, r3
 800715e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007160:	633b      	str	r3, [r7, #48]	; 0x30
 8007162:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007164:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007168:	e841 2300 	strex	r3, r2, [r1]
 800716c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800716e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007170:	2b00      	cmp	r3, #0
 8007172:	d1e6      	bne.n	8007142 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007178:	2b01      	cmp	r3, #1
 800717a:	d12e      	bne.n	80071da <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	e853 3f00 	ldrex	r3, [r3]
 800718e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f023 0310 	bic.w	r3, r3, #16
 8007196:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	461a      	mov	r2, r3
 800719e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071a0:	61fb      	str	r3, [r7, #28]
 80071a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a4:	69b9      	ldr	r1, [r7, #24]
 80071a6:	69fa      	ldr	r2, [r7, #28]
 80071a8:	e841 2300 	strex	r3, r2, [r1]
 80071ac:	617b      	str	r3, [r7, #20]
   return(result);
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1e6      	bne.n	8007182 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	69db      	ldr	r3, [r3, #28]
 80071ba:	f003 0310 	and.w	r3, r3, #16
 80071be:	2b10      	cmp	r3, #16
 80071c0:	d103      	bne.n	80071ca <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2210      	movs	r2, #16
 80071c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80071d0:	4619      	mov	r1, r3
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f7ff f93a 	bl	800644c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80071d8:	e00b      	b.n	80071f2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f7fa fa08 	bl	80015f0 <HAL_UART_RxCpltCallback>
}
 80071e0:	e007      	b.n	80071f2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	699a      	ldr	r2, [r3, #24]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f042 0208 	orr.w	r2, r2, #8
 80071f0:	619a      	str	r2, [r3, #24]
}
 80071f2:	bf00      	nop
 80071f4:	3770      	adds	r7, #112	; 0x70
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	40008000 	.word	0x40008000

08007200 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b09c      	sub	sp, #112	; 0x70
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800720e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007218:	2b22      	cmp	r3, #34	; 0x22
 800721a:	f040 80be 	bne.w	800739a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007224:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800722c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800722e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007232:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007236:	4013      	ands	r3, r2
 8007238:	b29a      	uxth	r2, r3
 800723a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800723c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007242:	1c9a      	adds	r2, r3, #2
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800724e:	b29b      	uxth	r3, r3
 8007250:	3b01      	subs	r3, #1
 8007252:	b29a      	uxth	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007260:	b29b      	uxth	r3, r3
 8007262:	2b00      	cmp	r3, #0
 8007264:	f040 80a1 	bne.w	80073aa <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007270:	e853 3f00 	ldrex	r3, [r3]
 8007274:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007276:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007278:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800727c:	667b      	str	r3, [r7, #100]	; 0x64
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	461a      	mov	r2, r3
 8007284:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007286:	657b      	str	r3, [r7, #84]	; 0x54
 8007288:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800728c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800728e:	e841 2300 	strex	r3, r2, [r1]
 8007292:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007296:	2b00      	cmp	r3, #0
 8007298:	d1e6      	bne.n	8007268 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	3308      	adds	r3, #8
 80072a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072a4:	e853 3f00 	ldrex	r3, [r3]
 80072a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80072aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ac:	f023 0301 	bic.w	r3, r3, #1
 80072b0:	663b      	str	r3, [r7, #96]	; 0x60
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	3308      	adds	r3, #8
 80072b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80072ba:	643a      	str	r2, [r7, #64]	; 0x40
 80072bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80072c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072c2:	e841 2300 	strex	r3, r2, [r1]
 80072c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d1e5      	bne.n	800729a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2220      	movs	r2, #32
 80072d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a33      	ldr	r2, [pc, #204]	; (80073b4 <UART_RxISR_16BIT+0x1b4>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d01f      	beq.n	800732c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d018      	beq.n	800732c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007300:	6a3b      	ldr	r3, [r7, #32]
 8007302:	e853 3f00 	ldrex	r3, [r3]
 8007306:	61fb      	str	r3, [r7, #28]
   return(result);
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800730e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	461a      	mov	r2, r3
 8007316:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007318:	62fb      	str	r3, [r7, #44]	; 0x2c
 800731a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800731e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007320:	e841 2300 	strex	r3, r2, [r1]
 8007324:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007328:	2b00      	cmp	r3, #0
 800732a:	d1e6      	bne.n	80072fa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007330:	2b01      	cmp	r3, #1
 8007332:	d12e      	bne.n	8007392 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	e853 3f00 	ldrex	r3, [r3]
 8007346:	60bb      	str	r3, [r7, #8]
   return(result);
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	f023 0310 	bic.w	r3, r3, #16
 800734e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	461a      	mov	r2, r3
 8007356:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007358:	61bb      	str	r3, [r7, #24]
 800735a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735c:	6979      	ldr	r1, [r7, #20]
 800735e:	69ba      	ldr	r2, [r7, #24]
 8007360:	e841 2300 	strex	r3, r2, [r1]
 8007364:	613b      	str	r3, [r7, #16]
   return(result);
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d1e6      	bne.n	800733a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	69db      	ldr	r3, [r3, #28]
 8007372:	f003 0310 	and.w	r3, r3, #16
 8007376:	2b10      	cmp	r3, #16
 8007378:	d103      	bne.n	8007382 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	2210      	movs	r2, #16
 8007380:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007388:	4619      	mov	r1, r3
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f7ff f85e 	bl	800644c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007390:	e00b      	b.n	80073aa <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f7fa f92c 	bl	80015f0 <HAL_UART_RxCpltCallback>
}
 8007398:	e007      	b.n	80073aa <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	699a      	ldr	r2, [r3, #24]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f042 0208 	orr.w	r2, r2, #8
 80073a8:	619a      	str	r2, [r3, #24]
}
 80073aa:	bf00      	nop
 80073ac:	3770      	adds	r7, #112	; 0x70
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	40008000 	.word	0x40008000

080073b8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b0ac      	sub	sp, #176	; 0xb0
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80073c6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	69db      	ldr	r3, [r3, #28]
 80073d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073ee:	2b22      	cmp	r3, #34	; 0x22
 80073f0:	f040 8182 	bne.w	80076f8 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80073fa:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80073fe:	e125      	b.n	800764c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007406:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800740a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800740e:	b2d9      	uxtb	r1, r3
 8007410:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007414:	b2da      	uxtb	r2, r3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800741a:	400a      	ands	r2, r1
 800741c:	b2d2      	uxtb	r2, r2
 800741e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007424:	1c5a      	adds	r2, r3, #1
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007430:	b29b      	uxth	r3, r3
 8007432:	3b01      	subs	r3, #1
 8007434:	b29a      	uxth	r2, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	69db      	ldr	r3, [r3, #28]
 8007442:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007446:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800744a:	f003 0307 	and.w	r3, r3, #7
 800744e:	2b00      	cmp	r3, #0
 8007450:	d053      	beq.n	80074fa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007452:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007456:	f003 0301 	and.w	r3, r3, #1
 800745a:	2b00      	cmp	r3, #0
 800745c:	d011      	beq.n	8007482 <UART_RxISR_8BIT_FIFOEN+0xca>
 800745e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00b      	beq.n	8007482 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2201      	movs	r2, #1
 8007470:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007478:	f043 0201 	orr.w	r2, r3, #1
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007482:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007486:	f003 0302 	and.w	r3, r3, #2
 800748a:	2b00      	cmp	r3, #0
 800748c:	d011      	beq.n	80074b2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800748e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007492:	f003 0301 	and.w	r3, r3, #1
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00b      	beq.n	80074b2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2202      	movs	r2, #2
 80074a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074a8:	f043 0204 	orr.w	r2, r3, #4
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80074b6:	f003 0304 	and.w	r3, r3, #4
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d011      	beq.n	80074e2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80074be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00b      	beq.n	80074e2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2204      	movs	r2, #4
 80074d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074d8:	f043 0202 	orr.w	r2, r3, #2
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d006      	beq.n	80074fa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f7fe ffa4 	bl	800643a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007500:	b29b      	uxth	r3, r3
 8007502:	2b00      	cmp	r3, #0
 8007504:	f040 80a2 	bne.w	800764c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007510:	e853 3f00 	ldrex	r3, [r3]
 8007514:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8007516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007518:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800751c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	461a      	mov	r2, r3
 8007526:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800752a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800752c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007530:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007532:	e841 2300 	strex	r3, r2, [r1]
 8007536:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8007538:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1e4      	bne.n	8007508 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	3308      	adds	r3, #8
 8007544:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007546:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007548:	e853 3f00 	ldrex	r3, [r3]
 800754c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800754e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007554:	f023 0301 	bic.w	r3, r3, #1
 8007558:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	3308      	adds	r3, #8
 8007562:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007566:	66ba      	str	r2, [r7, #104]	; 0x68
 8007568:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800756c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800756e:	e841 2300 	strex	r3, r2, [r1]
 8007572:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007574:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007576:	2b00      	cmp	r3, #0
 8007578:	d1e1      	bne.n	800753e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2220      	movs	r2, #32
 800757e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a5f      	ldr	r2, [pc, #380]	; (8007710 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d021      	beq.n	80075dc <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d01a      	beq.n	80075dc <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075ae:	e853 3f00 	ldrex	r3, [r3]
 80075b2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80075b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80075ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	461a      	mov	r2, r3
 80075c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80075c8:	657b      	str	r3, [r7, #84]	; 0x54
 80075ca:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075cc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80075ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80075d0:	e841 2300 	strex	r3, r2, [r1]
 80075d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80075d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d1e4      	bne.n	80075a6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d130      	bne.n	8007646 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075f2:	e853 3f00 	ldrex	r3, [r3]
 80075f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fa:	f023 0310 	bic.w	r3, r3, #16
 80075fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	461a      	mov	r2, r3
 8007608:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800760c:	643b      	str	r3, [r7, #64]	; 0x40
 800760e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007610:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007612:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007614:	e841 2300 	strex	r3, r2, [r1]
 8007618:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800761a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761c:	2b00      	cmp	r3, #0
 800761e:	d1e4      	bne.n	80075ea <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	69db      	ldr	r3, [r3, #28]
 8007626:	f003 0310 	and.w	r3, r3, #16
 800762a:	2b10      	cmp	r3, #16
 800762c:	d103      	bne.n	8007636 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2210      	movs	r2, #16
 8007634:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800763c:	4619      	mov	r1, r3
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f7fe ff04 	bl	800644c <HAL_UARTEx_RxEventCallback>
 8007644:	e002      	b.n	800764c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f7f9 ffd2 	bl	80015f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800764c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8007650:	2b00      	cmp	r3, #0
 8007652:	d006      	beq.n	8007662 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8007654:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007658:	f003 0320 	and.w	r3, r3, #32
 800765c:	2b00      	cmp	r3, #0
 800765e:	f47f aecf 	bne.w	8007400 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007668:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800766c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007670:	2b00      	cmp	r3, #0
 8007672:	d049      	beq.n	8007708 <UART_RxISR_8BIT_FIFOEN+0x350>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800767a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800767e:	429a      	cmp	r2, r3
 8007680:	d242      	bcs.n	8007708 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	3308      	adds	r3, #8
 8007688:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768a:	6a3b      	ldr	r3, [r7, #32]
 800768c:	e853 3f00 	ldrex	r3, [r3]
 8007690:	61fb      	str	r3, [r7, #28]
   return(result);
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007698:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	3308      	adds	r3, #8
 80076a2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80076a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80076a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076ae:	e841 2300 	strex	r3, r2, [r1]
 80076b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1e3      	bne.n	8007682 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4a15      	ldr	r2, [pc, #84]	; (8007714 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80076be:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	e853 3f00 	ldrex	r3, [r3]
 80076cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	f043 0320 	orr.w	r3, r3, #32
 80076d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	461a      	mov	r2, r3
 80076de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80076e2:	61bb      	str	r3, [r7, #24]
 80076e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e6:	6979      	ldr	r1, [r7, #20]
 80076e8:	69ba      	ldr	r2, [r7, #24]
 80076ea:	e841 2300 	strex	r3, r2, [r1]
 80076ee:	613b      	str	r3, [r7, #16]
   return(result);
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d1e4      	bne.n	80076c0 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076f6:	e007      	b.n	8007708 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	699a      	ldr	r2, [r3, #24]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f042 0208 	orr.w	r2, r2, #8
 8007706:	619a      	str	r2, [r3, #24]
}
 8007708:	bf00      	nop
 800770a:	37b0      	adds	r7, #176	; 0xb0
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}
 8007710:	40008000 	.word	0x40008000
 8007714:	08007049 	.word	0x08007049

08007718 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b0ae      	sub	sp, #184	; 0xb8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007726:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	69db      	ldr	r3, [r3, #28]
 8007730:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800774e:	2b22      	cmp	r3, #34	; 0x22
 8007750:	f040 8186 	bne.w	8007a60 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800775a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800775e:	e129      	b.n	80079b4 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007766:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800776e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007772:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8007776:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800777a:	4013      	ands	r3, r2
 800777c:	b29a      	uxth	r2, r3
 800777e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007782:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007788:	1c9a      	adds	r2, r3, #2
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007794:	b29b      	uxth	r3, r3
 8007796:	3b01      	subs	r3, #1
 8007798:	b29a      	uxth	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	69db      	ldr	r3, [r3, #28]
 80077a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80077aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80077ae:	f003 0307 	and.w	r3, r3, #7
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d053      	beq.n	800785e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80077b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80077ba:	f003 0301 	and.w	r3, r3, #1
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d011      	beq.n	80077e6 <UART_RxISR_16BIT_FIFOEN+0xce>
 80077c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00b      	beq.n	80077e6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2201      	movs	r2, #1
 80077d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077dc:	f043 0201 	orr.w	r2, r3, #1
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80077ea:	f003 0302 	and.w	r3, r3, #2
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d011      	beq.n	8007816 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80077f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80077f6:	f003 0301 	and.w	r3, r3, #1
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00b      	beq.n	8007816 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2202      	movs	r2, #2
 8007804:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800780c:	f043 0204 	orr.w	r2, r3, #4
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007816:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800781a:	f003 0304 	and.w	r3, r3, #4
 800781e:	2b00      	cmp	r3, #0
 8007820:	d011      	beq.n	8007846 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007822:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007826:	f003 0301 	and.w	r3, r3, #1
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00b      	beq.n	8007846 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2204      	movs	r2, #4
 8007834:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800783c:	f043 0202 	orr.w	r2, r3, #2
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800784c:	2b00      	cmp	r3, #0
 800784e:	d006      	beq.n	800785e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f7fe fdf2 	bl	800643a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007864:	b29b      	uxth	r3, r3
 8007866:	2b00      	cmp	r3, #0
 8007868:	f040 80a4 	bne.w	80079b4 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007872:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007874:	e853 3f00 	ldrex	r3, [r3]
 8007878:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800787a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800787c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007880:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	461a      	mov	r2, r3
 800788a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800788e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007892:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007894:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007896:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800789a:	e841 2300 	strex	r3, r2, [r1]
 800789e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80078a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d1e2      	bne.n	800786c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	3308      	adds	r3, #8
 80078ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078b0:	e853 3f00 	ldrex	r3, [r3]
 80078b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80078b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078bc:	f023 0301 	bic.w	r3, r3, #1
 80078c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	3308      	adds	r3, #8
 80078ca:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80078ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80078d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80078d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80078d6:	e841 2300 	strex	r3, r2, [r1]
 80078da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80078dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d1e1      	bne.n	80078a6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2220      	movs	r2, #32
 80078e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a5f      	ldr	r2, [pc, #380]	; (8007a78 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d021      	beq.n	8007944 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800790a:	2b00      	cmp	r3, #0
 800790c:	d01a      	beq.n	8007944 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007916:	e853 3f00 	ldrex	r3, [r3]
 800791a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800791c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800791e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007922:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	461a      	mov	r2, r3
 800792c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007930:	65bb      	str	r3, [r7, #88]	; 0x58
 8007932:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007934:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007936:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007938:	e841 2300 	strex	r3, r2, [r1]
 800793c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800793e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007940:	2b00      	cmp	r3, #0
 8007942:	d1e4      	bne.n	800790e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007948:	2b01      	cmp	r3, #1
 800794a:	d130      	bne.n	80079ae <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800795a:	e853 3f00 	ldrex	r3, [r3]
 800795e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007962:	f023 0310 	bic.w	r3, r3, #16
 8007966:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	461a      	mov	r2, r3
 8007970:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007974:	647b      	str	r3, [r7, #68]	; 0x44
 8007976:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007978:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800797a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800797c:	e841 2300 	strex	r3, r2, [r1]
 8007980:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007984:	2b00      	cmp	r3, #0
 8007986:	d1e4      	bne.n	8007952 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	69db      	ldr	r3, [r3, #28]
 800798e:	f003 0310 	and.w	r3, r3, #16
 8007992:	2b10      	cmp	r3, #16
 8007994:	d103      	bne.n	800799e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2210      	movs	r2, #16
 800799c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80079a4:	4619      	mov	r1, r3
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f7fe fd50 	bl	800644c <HAL_UARTEx_RxEventCallback>
 80079ac:	e002      	b.n	80079b4 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f7f9 fe1e 	bl	80015f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80079b4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d006      	beq.n	80079ca <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80079bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80079c0:	f003 0320 	and.w	r3, r3, #32
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f47f aecb 	bne.w	8007760 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80079d0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80079d4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d049      	beq.n	8007a70 <UART_RxISR_16BIT_FIFOEN+0x358>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80079e2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d242      	bcs.n	8007a70 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	3308      	adds	r3, #8
 80079f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f4:	e853 3f00 	ldrex	r3, [r3]
 80079f8:	623b      	str	r3, [r7, #32]
   return(result);
 80079fa:	6a3b      	ldr	r3, [r7, #32]
 80079fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	3308      	adds	r3, #8
 8007a0a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007a0e:	633a      	str	r2, [r7, #48]	; 0x30
 8007a10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a16:	e841 2300 	strex	r3, r2, [r1]
 8007a1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1e3      	bne.n	80079ea <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4a15      	ldr	r2, [pc, #84]	; (8007a7c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007a26:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	e853 3f00 	ldrex	r3, [r3]
 8007a34:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f043 0320 	orr.w	r3, r3, #32
 8007a3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	461a      	mov	r2, r3
 8007a46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a4a:	61fb      	str	r3, [r7, #28]
 8007a4c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4e:	69b9      	ldr	r1, [r7, #24]
 8007a50:	69fa      	ldr	r2, [r7, #28]
 8007a52:	e841 2300 	strex	r3, r2, [r1]
 8007a56:	617b      	str	r3, [r7, #20]
   return(result);
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1e4      	bne.n	8007a28 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a5e:	e007      	b.n	8007a70 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	699a      	ldr	r2, [r3, #24]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f042 0208 	orr.w	r2, r2, #8
 8007a6e:	619a      	str	r2, [r3, #24]
}
 8007a70:	bf00      	nop
 8007a72:	37b8      	adds	r7, #184	; 0xb8
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	40008000 	.word	0x40008000
 8007a7c:	08007201 	.word	0x08007201

08007a80 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007a88:	bf00      	nop
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bc80      	pop	{r7}
 8007a90:	4770      	bx	lr

08007a92 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007a92:	b480      	push	{r7}
 8007a94:	b083      	sub	sp, #12
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007a9a:	bf00      	nop
 8007a9c:	370c      	adds	r7, #12
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bc80      	pop	{r7}
 8007aa2:	4770      	bx	lr

08007aa4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007aac:	bf00      	nop
 8007aae:	370c      	adds	r7, #12
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bc80      	pop	{r7}
 8007ab4:	4770      	bx	lr

08007ab6 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b084      	sub	sp, #16
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d101      	bne.n	8007acc <HAL_UARTEx_EnableFifoMode+0x16>
 8007ac8:	2302      	movs	r3, #2
 8007aca:	e02b      	b.n	8007b24 <HAL_UARTEx_EnableFifoMode+0x6e>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2224      	movs	r2, #36	; 0x24
 8007ad8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f022 0201 	bic.w	r2, r2, #1
 8007af2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007afa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007b02:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 f8c1 	bl	8007c94 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2220      	movs	r2, #32
 8007b16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007b22:	2300      	movs	r3, #0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3710      	adds	r7, #16
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b085      	sub	sp, #20
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d101      	bne.n	8007b42 <HAL_UARTEx_DisableFifoMode+0x16>
 8007b3e:	2302      	movs	r3, #2
 8007b40:	e027      	b.n	8007b92 <HAL_UARTEx_DisableFifoMode+0x66>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2201      	movs	r2, #1
 8007b46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2224      	movs	r2, #36	; 0x24
 8007b4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f022 0201 	bic.w	r2, r2, #1
 8007b68:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007b70:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2220      	movs	r2, #32
 8007b84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3714      	adds	r7, #20
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bc80      	pop	{r7}
 8007b9a:	4770      	bx	lr

08007b9c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d101      	bne.n	8007bb4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007bb0:	2302      	movs	r3, #2
 8007bb2:	e02d      	b.n	8007c10 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2224      	movs	r2, #36	; 0x24
 8007bc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f022 0201 	bic.w	r2, r2, #1
 8007bda:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	683a      	ldr	r2, [r7, #0]
 8007bec:	430a      	orrs	r2, r1
 8007bee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 f84f 	bl	8007c94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	68fa      	ldr	r2, [r7, #12]
 8007bfc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2220      	movs	r2, #32
 8007c02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3710      	adds	r7, #16
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d101      	bne.n	8007c30 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007c2c:	2302      	movs	r3, #2
 8007c2e:	e02d      	b.n	8007c8c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2224      	movs	r2, #36	; 0x24
 8007c3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f022 0201 	bic.w	r2, r2, #1
 8007c56:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	683a      	ldr	r2, [r7, #0]
 8007c68:	430a      	orrs	r2, r1
 8007c6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 f811 	bl	8007c94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2220      	movs	r2, #32
 8007c7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3710      	adds	r7, #16
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d108      	bne.n	8007cb6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007cb4:	e031      	b.n	8007d1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007cb6:	2308      	movs	r3, #8
 8007cb8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007cba:	2308      	movs	r3, #8
 8007cbc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	0e5b      	lsrs	r3, r3, #25
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	f003 0307 	and.w	r3, r3, #7
 8007ccc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	0f5b      	lsrs	r3, r3, #29
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	f003 0307 	and.w	r3, r3, #7
 8007cdc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007cde:	7bbb      	ldrb	r3, [r7, #14]
 8007ce0:	7b3a      	ldrb	r2, [r7, #12]
 8007ce2:	4910      	ldr	r1, [pc, #64]	; (8007d24 <UARTEx_SetNbDataToProcess+0x90>)
 8007ce4:	5c8a      	ldrb	r2, [r1, r2]
 8007ce6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007cea:	7b3a      	ldrb	r2, [r7, #12]
 8007cec:	490e      	ldr	r1, [pc, #56]	; (8007d28 <UARTEx_SetNbDataToProcess+0x94>)
 8007cee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007cf0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007cf4:	b29a      	uxth	r2, r3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007cfc:	7bfb      	ldrb	r3, [r7, #15]
 8007cfe:	7b7a      	ldrb	r2, [r7, #13]
 8007d00:	4908      	ldr	r1, [pc, #32]	; (8007d24 <UARTEx_SetNbDataToProcess+0x90>)
 8007d02:	5c8a      	ldrb	r2, [r1, r2]
 8007d04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007d08:	7b7a      	ldrb	r2, [r7, #13]
 8007d0a:	4907      	ldr	r1, [pc, #28]	; (8007d28 <UARTEx_SetNbDataToProcess+0x94>)
 8007d0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d12:	b29a      	uxth	r2, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007d1a:	bf00      	nop
 8007d1c:	3714      	adds	r7, #20
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bc80      	pop	{r7}
 8007d22:	4770      	bx	lr
 8007d24:	0800cab4 	.word	0x0800cab4
 8007d28:	0800cabc 	.word	0x0800cabc

08007d2c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	4603      	mov	r3, r0
 8007d34:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007d36:	2300      	movs	r3, #0
 8007d38:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007d3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007d3e:	2b84      	cmp	r3, #132	; 0x84
 8007d40:	d005      	beq.n	8007d4e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007d42:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	4413      	add	r3, r2
 8007d4a:	3303      	adds	r3, #3
 8007d4c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3714      	adds	r7, #20
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bc80      	pop	{r7}
 8007d58:	4770      	bx	lr

08007d5a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007d5e:	f001 f82d 	bl	8008dbc <vTaskStartScheduler>
  
  return osOK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d6a:	b089      	sub	sp, #36	; 0x24
 8007d6c:	af04      	add	r7, sp, #16
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	695b      	ldr	r3, [r3, #20]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d020      	beq.n	8007dbc <osThreadCreate+0x54>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	699b      	ldr	r3, [r3, #24]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d01c      	beq.n	8007dbc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	685c      	ldr	r4, [r3, #4]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681d      	ldr	r5, [r3, #0]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	691e      	ldr	r6, [r3, #16]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007d94:	4618      	mov	r0, r3
 8007d96:	f7ff ffc9 	bl	8007d2c <makeFreeRtosPriority>
 8007d9a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	695b      	ldr	r3, [r3, #20]
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007da4:	9202      	str	r2, [sp, #8]
 8007da6:	9301      	str	r3, [sp, #4]
 8007da8:	9100      	str	r1, [sp, #0]
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	4632      	mov	r2, r6
 8007dae:	4629      	mov	r1, r5
 8007db0:	4620      	mov	r0, r4
 8007db2:	f000 fe3b 	bl	8008a2c <xTaskCreateStatic>
 8007db6:	4603      	mov	r3, r0
 8007db8:	60fb      	str	r3, [r7, #12]
 8007dba:	e01c      	b.n	8007df6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	685c      	ldr	r4, [r3, #4]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007dc8:	b29e      	uxth	r6, r3
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f7ff ffab 	bl	8007d2c <makeFreeRtosPriority>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	f107 030c 	add.w	r3, r7, #12
 8007ddc:	9301      	str	r3, [sp, #4]
 8007dde:	9200      	str	r2, [sp, #0]
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	4632      	mov	r2, r6
 8007de4:	4629      	mov	r1, r5
 8007de6:	4620      	mov	r0, r4
 8007de8:	f000 fe7d 	bl	8008ae6 <xTaskCreate>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d001      	beq.n	8007df6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007df2:	2300      	movs	r3, #0
 8007df4:	e000      	b.n	8007df8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007df6:	68fb      	ldr	r3, [r7, #12]
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3714      	adds	r7, #20
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e00 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d001      	beq.n	8007e16 <osDelay+0x16>
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	e000      	b.n	8007e18 <osDelay+0x18>
 8007e16:	2301      	movs	r3, #1
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f000 ff9b 	bl	8008d54 <vTaskDelay>
  
  return osOK;
 8007e1e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3710      	adds	r7, #16
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d007      	beq.n	8007e48 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	2001      	movs	r0, #1
 8007e40:	f000 fa53 	bl	80082ea <xQueueCreateMutexStatic>
 8007e44:	4603      	mov	r3, r0
 8007e46:	e003      	b.n	8007e50 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8007e48:	2001      	movs	r0, #1
 8007e4a:	f000 fa36 	bl	80082ba <xQueueCreateMutex>
 8007e4e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3708      	adds	r7, #8
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007e58:	b590      	push	{r4, r7, lr}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af02      	add	r7, sp, #8
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d011      	beq.n	8007e8e <osMessageCreate+0x36>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00d      	beq.n	8007e8e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6818      	ldr	r0, [r3, #0]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6859      	ldr	r1, [r3, #4]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	689a      	ldr	r2, [r3, #8]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	2400      	movs	r4, #0
 8007e84:	9400      	str	r4, [sp, #0]
 8007e86:	f000 f927 	bl	80080d8 <xQueueGenericCreateStatic>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	e008      	b.n	8007ea0 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6818      	ldr	r0, [r3, #0]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	4619      	mov	r1, r3
 8007e9a:	f000 f995 	bl	80081c8 <xQueueGenericCreate>
 8007e9e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	370c      	adds	r7, #12
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd90      	pop	{r4, r7, pc}

08007ea8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f103 0208 	add.w	r2, r3, #8
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ec0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f103 0208 	add.w	r2, r3, #8
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f103 0208 	add.w	r2, r3, #8
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007edc:	bf00      	nop
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bc80      	pop	{r7}
 8007ee4:	4770      	bx	lr

08007ee6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007ee6:	b480      	push	{r7}
 8007ee8:	b083      	sub	sp, #12
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007ef4:	bf00      	nop
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bc80      	pop	{r7}
 8007efc:	4770      	bx	lr

08007efe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007efe:	b480      	push	{r7}
 8007f00:	b085      	sub	sp, #20
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
 8007f06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	689a      	ldr	r2, [r3, #8]
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	683a      	ldr	r2, [r7, #0]
 8007f22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	683a      	ldr	r2, [r7, #0]
 8007f28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	1c5a      	adds	r2, r3, #1
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	601a      	str	r2, [r3, #0]
}
 8007f3a:	bf00      	nop
 8007f3c:	3714      	adds	r7, #20
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bc80      	pop	{r7}
 8007f42:	4770      	bx	lr

08007f44 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f44:	b480      	push	{r7}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f5a:	d103      	bne.n	8007f64 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	691b      	ldr	r3, [r3, #16]
 8007f60:	60fb      	str	r3, [r7, #12]
 8007f62:	e00c      	b.n	8007f7e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	3308      	adds	r3, #8
 8007f68:	60fb      	str	r3, [r7, #12]
 8007f6a:	e002      	b.n	8007f72 <vListInsert+0x2e>
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	60fb      	str	r3, [r7, #12]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	68ba      	ldr	r2, [r7, #8]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d2f6      	bcs.n	8007f6c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	685a      	ldr	r2, [r3, #4]
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	683a      	ldr	r2, [r7, #0]
 8007f8c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	683a      	ldr	r2, [r7, #0]
 8007f98:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	1c5a      	adds	r2, r3, #1
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	601a      	str	r2, [r3, #0]
}
 8007faa:	bf00      	nop
 8007fac:	3714      	adds	r7, #20
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bc80      	pop	{r7}
 8007fb2:	4770      	bx	lr

08007fb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	691b      	ldr	r3, [r3, #16]
 8007fc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	6892      	ldr	r2, [r2, #8]
 8007fca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	6852      	ldr	r2, [r2, #4]
 8007fd4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d103      	bne.n	8007fe8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	689a      	ldr	r2, [r3, #8]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	1e5a      	subs	r2, r3, #1
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3714      	adds	r7, #20
 8008000:	46bd      	mov	sp, r7
 8008002:	bc80      	pop	{r7}
 8008004:	4770      	bx	lr
	...

08008008 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d10a      	bne.n	8008032 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800801c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008020:	f383 8811 	msr	BASEPRI, r3
 8008024:	f3bf 8f6f 	isb	sy
 8008028:	f3bf 8f4f 	dsb	sy
 800802c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800802e:	bf00      	nop
 8008030:	e7fe      	b.n	8008030 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008032:	f001 fcbb 	bl	80099ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800803e:	68f9      	ldr	r1, [r7, #12]
 8008040:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008042:	fb01 f303 	mul.w	r3, r1, r3
 8008046:	441a      	add	r2, r3
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2200      	movs	r2, #0
 8008050:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008062:	3b01      	subs	r3, #1
 8008064:	68f9      	ldr	r1, [r7, #12]
 8008066:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008068:	fb01 f303 	mul.w	r3, r1, r3
 800806c:	441a      	add	r2, r3
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	22ff      	movs	r2, #255	; 0xff
 8008076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	22ff      	movs	r2, #255	; 0xff
 800807e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d114      	bne.n	80080b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	691b      	ldr	r3, [r3, #16]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d01a      	beq.n	80080c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	3310      	adds	r3, #16
 8008094:	4618      	mov	r0, r3
 8008096:	f001 f8d1 	bl	800923c <xTaskRemoveFromEventList>
 800809a:	4603      	mov	r3, r0
 800809c:	2b00      	cmp	r3, #0
 800809e:	d012      	beq.n	80080c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80080a0:	4b0c      	ldr	r3, [pc, #48]	; (80080d4 <xQueueGenericReset+0xcc>)
 80080a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080a6:	601a      	str	r2, [r3, #0]
 80080a8:	f3bf 8f4f 	dsb	sy
 80080ac:	f3bf 8f6f 	isb	sy
 80080b0:	e009      	b.n	80080c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	3310      	adds	r3, #16
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7ff fef6 	bl	8007ea8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	3324      	adds	r3, #36	; 0x24
 80080c0:	4618      	mov	r0, r3
 80080c2:	f7ff fef1 	bl	8007ea8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80080c6:	f001 fca1 	bl	8009a0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80080ca:	2301      	movs	r3, #1
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3710      	adds	r7, #16
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	e000ed04 	.word	0xe000ed04

080080d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b08e      	sub	sp, #56	; 0x38
 80080dc:	af02      	add	r7, sp, #8
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	607a      	str	r2, [r7, #4]
 80080e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d10a      	bne.n	8008102 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80080ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f0:	f383 8811 	msr	BASEPRI, r3
 80080f4:	f3bf 8f6f 	isb	sy
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80080fe:	bf00      	nop
 8008100:	e7fe      	b.n	8008100 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d10a      	bne.n	800811e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810c:	f383 8811 	msr	BASEPRI, r3
 8008110:	f3bf 8f6f 	isb	sy
 8008114:	f3bf 8f4f 	dsb	sy
 8008118:	627b      	str	r3, [r7, #36]	; 0x24
}
 800811a:	bf00      	nop
 800811c:	e7fe      	b.n	800811c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d002      	beq.n	800812a <xQueueGenericCreateStatic+0x52>
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d001      	beq.n	800812e <xQueueGenericCreateStatic+0x56>
 800812a:	2301      	movs	r3, #1
 800812c:	e000      	b.n	8008130 <xQueueGenericCreateStatic+0x58>
 800812e:	2300      	movs	r3, #0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d10a      	bne.n	800814a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008138:	f383 8811 	msr	BASEPRI, r3
 800813c:	f3bf 8f6f 	isb	sy
 8008140:	f3bf 8f4f 	dsb	sy
 8008144:	623b      	str	r3, [r7, #32]
}
 8008146:	bf00      	nop
 8008148:	e7fe      	b.n	8008148 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d102      	bne.n	8008156 <xQueueGenericCreateStatic+0x7e>
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d101      	bne.n	800815a <xQueueGenericCreateStatic+0x82>
 8008156:	2301      	movs	r3, #1
 8008158:	e000      	b.n	800815c <xQueueGenericCreateStatic+0x84>
 800815a:	2300      	movs	r3, #0
 800815c:	2b00      	cmp	r3, #0
 800815e:	d10a      	bne.n	8008176 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008164:	f383 8811 	msr	BASEPRI, r3
 8008168:	f3bf 8f6f 	isb	sy
 800816c:	f3bf 8f4f 	dsb	sy
 8008170:	61fb      	str	r3, [r7, #28]
}
 8008172:	bf00      	nop
 8008174:	e7fe      	b.n	8008174 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008176:	2348      	movs	r3, #72	; 0x48
 8008178:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	2b48      	cmp	r3, #72	; 0x48
 800817e:	d00a      	beq.n	8008196 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008184:	f383 8811 	msr	BASEPRI, r3
 8008188:	f3bf 8f6f 	isb	sy
 800818c:	f3bf 8f4f 	dsb	sy
 8008190:	61bb      	str	r3, [r7, #24]
}
 8008192:	bf00      	nop
 8008194:	e7fe      	b.n	8008194 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008196:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800819c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d00d      	beq.n	80081be <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80081a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081a4:	2201      	movs	r2, #1
 80081a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80081aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80081ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b0:	9300      	str	r3, [sp, #0]
 80081b2:	4613      	mov	r3, r2
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	68b9      	ldr	r1, [r7, #8]
 80081b8:	68f8      	ldr	r0, [r7, #12]
 80081ba:	f000 f845 	bl	8008248 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80081be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3730      	adds	r7, #48	; 0x30
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b08a      	sub	sp, #40	; 0x28
 80081cc:	af02      	add	r7, sp, #8
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	4613      	mov	r3, r2
 80081d4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d10a      	bne.n	80081f2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80081dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e0:	f383 8811 	msr	BASEPRI, r3
 80081e4:	f3bf 8f6f 	isb	sy
 80081e8:	f3bf 8f4f 	dsb	sy
 80081ec:	613b      	str	r3, [r7, #16]
}
 80081ee:	bf00      	nop
 80081f0:	e7fe      	b.n	80081f0 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d102      	bne.n	80081fe <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80081f8:	2300      	movs	r3, #0
 80081fa:	61fb      	str	r3, [r7, #28]
 80081fc:	e004      	b.n	8008208 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	68ba      	ldr	r2, [r7, #8]
 8008202:	fb02 f303 	mul.w	r3, r2, r3
 8008206:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	3348      	adds	r3, #72	; 0x48
 800820c:	4618      	mov	r0, r3
 800820e:	f001 fccd 	bl	8009bac <pvPortMalloc>
 8008212:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008214:	69bb      	ldr	r3, [r7, #24]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d011      	beq.n	800823e <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	3348      	adds	r3, #72	; 0x48
 8008222:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	2200      	movs	r2, #0
 8008228:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800822c:	79fa      	ldrb	r2, [r7, #7]
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	9300      	str	r3, [sp, #0]
 8008232:	4613      	mov	r3, r2
 8008234:	697a      	ldr	r2, [r7, #20]
 8008236:	68b9      	ldr	r1, [r7, #8]
 8008238:	68f8      	ldr	r0, [r7, #12]
 800823a:	f000 f805 	bl	8008248 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800823e:	69bb      	ldr	r3, [r7, #24]
	}
 8008240:	4618      	mov	r0, r3
 8008242:	3720      	adds	r7, #32
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	607a      	str	r2, [r7, #4]
 8008254:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d103      	bne.n	8008264 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	69ba      	ldr	r2, [r7, #24]
 8008260:	601a      	str	r2, [r3, #0]
 8008262:	e002      	b.n	800826a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800826a:	69bb      	ldr	r3, [r7, #24]
 800826c:	68fa      	ldr	r2, [r7, #12]
 800826e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	68ba      	ldr	r2, [r7, #8]
 8008274:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008276:	2101      	movs	r1, #1
 8008278:	69b8      	ldr	r0, [r7, #24]
 800827a:	f7ff fec5 	bl	8008008 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800827e:	bf00      	nop
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}

08008286 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008286:	b580      	push	{r7, lr}
 8008288:	b082      	sub	sp, #8
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d00e      	beq.n	80082b2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80082a6:	2300      	movs	r3, #0
 80082a8:	2200      	movs	r2, #0
 80082aa:	2100      	movs	r1, #0
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 f837 	bl	8008320 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80082b2:	bf00      	nop
 80082b4:	3708      	adds	r7, #8
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b086      	sub	sp, #24
 80082be:	af00      	add	r7, sp, #0
 80082c0:	4603      	mov	r3, r0
 80082c2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80082c4:	2301      	movs	r3, #1
 80082c6:	617b      	str	r3, [r7, #20]
 80082c8:	2300      	movs	r3, #0
 80082ca:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80082cc:	79fb      	ldrb	r3, [r7, #7]
 80082ce:	461a      	mov	r2, r3
 80082d0:	6939      	ldr	r1, [r7, #16]
 80082d2:	6978      	ldr	r0, [r7, #20]
 80082d4:	f7ff ff78 	bl	80081c8 <xQueueGenericCreate>
 80082d8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	f7ff ffd3 	bl	8008286 <prvInitialiseMutex>

		return xNewQueue;
 80082e0:	68fb      	ldr	r3, [r7, #12]
	}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3718      	adds	r7, #24
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b088      	sub	sp, #32
 80082ee:	af02      	add	r7, sp, #8
 80082f0:	4603      	mov	r3, r0
 80082f2:	6039      	str	r1, [r7, #0]
 80082f4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80082f6:	2301      	movs	r3, #1
 80082f8:	617b      	str	r3, [r7, #20]
 80082fa:	2300      	movs	r3, #0
 80082fc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80082fe:	79fb      	ldrb	r3, [r7, #7]
 8008300:	9300      	str	r3, [sp, #0]
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	2200      	movs	r2, #0
 8008306:	6939      	ldr	r1, [r7, #16]
 8008308:	6978      	ldr	r0, [r7, #20]
 800830a:	f7ff fee5 	bl	80080d8 <xQueueGenericCreateStatic>
 800830e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f7ff ffb8 	bl	8008286 <prvInitialiseMutex>

		return xNewQueue;
 8008316:	68fb      	ldr	r3, [r7, #12]
	}
 8008318:	4618      	mov	r0, r3
 800831a:	3718      	adds	r7, #24
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b08e      	sub	sp, #56	; 0x38
 8008324:	af00      	add	r7, sp, #0
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	607a      	str	r2, [r7, #4]
 800832c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800832e:	2300      	movs	r3, #0
 8008330:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008338:	2b00      	cmp	r3, #0
 800833a:	d10a      	bne.n	8008352 <xQueueGenericSend+0x32>
	__asm volatile
 800833c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008340:	f383 8811 	msr	BASEPRI, r3
 8008344:	f3bf 8f6f 	isb	sy
 8008348:	f3bf 8f4f 	dsb	sy
 800834c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800834e:	bf00      	nop
 8008350:	e7fe      	b.n	8008350 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d103      	bne.n	8008360 <xQueueGenericSend+0x40>
 8008358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800835a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835c:	2b00      	cmp	r3, #0
 800835e:	d101      	bne.n	8008364 <xQueueGenericSend+0x44>
 8008360:	2301      	movs	r3, #1
 8008362:	e000      	b.n	8008366 <xQueueGenericSend+0x46>
 8008364:	2300      	movs	r3, #0
 8008366:	2b00      	cmp	r3, #0
 8008368:	d10a      	bne.n	8008380 <xQueueGenericSend+0x60>
	__asm volatile
 800836a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836e:	f383 8811 	msr	BASEPRI, r3
 8008372:	f3bf 8f6f 	isb	sy
 8008376:	f3bf 8f4f 	dsb	sy
 800837a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800837c:	bf00      	nop
 800837e:	e7fe      	b.n	800837e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	2b02      	cmp	r3, #2
 8008384:	d103      	bne.n	800838e <xQueueGenericSend+0x6e>
 8008386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800838a:	2b01      	cmp	r3, #1
 800838c:	d101      	bne.n	8008392 <xQueueGenericSend+0x72>
 800838e:	2301      	movs	r3, #1
 8008390:	e000      	b.n	8008394 <xQueueGenericSend+0x74>
 8008392:	2300      	movs	r3, #0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d10a      	bne.n	80083ae <xQueueGenericSend+0x8e>
	__asm volatile
 8008398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839c:	f383 8811 	msr	BASEPRI, r3
 80083a0:	f3bf 8f6f 	isb	sy
 80083a4:	f3bf 8f4f 	dsb	sy
 80083a8:	623b      	str	r3, [r7, #32]
}
 80083aa:	bf00      	nop
 80083ac:	e7fe      	b.n	80083ac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80083ae:	f001 f901 	bl	80095b4 <xTaskGetSchedulerState>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d102      	bne.n	80083be <xQueueGenericSend+0x9e>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d101      	bne.n	80083c2 <xQueueGenericSend+0xa2>
 80083be:	2301      	movs	r3, #1
 80083c0:	e000      	b.n	80083c4 <xQueueGenericSend+0xa4>
 80083c2:	2300      	movs	r3, #0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d10a      	bne.n	80083de <xQueueGenericSend+0xbe>
	__asm volatile
 80083c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083cc:	f383 8811 	msr	BASEPRI, r3
 80083d0:	f3bf 8f6f 	isb	sy
 80083d4:	f3bf 8f4f 	dsb	sy
 80083d8:	61fb      	str	r3, [r7, #28]
}
 80083da:	bf00      	nop
 80083dc:	e7fe      	b.n	80083dc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80083de:	f001 fae5 	bl	80099ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80083e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d302      	bcc.n	80083f4 <xQueueGenericSend+0xd4>
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	d129      	bne.n	8008448 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80083f4:	683a      	ldr	r2, [r7, #0]
 80083f6:	68b9      	ldr	r1, [r7, #8]
 80083f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083fa:	f000 fa07 	bl	800880c <prvCopyDataToQueue>
 80083fe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008404:	2b00      	cmp	r3, #0
 8008406:	d010      	beq.n	800842a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840a:	3324      	adds	r3, #36	; 0x24
 800840c:	4618      	mov	r0, r3
 800840e:	f000 ff15 	bl	800923c <xTaskRemoveFromEventList>
 8008412:	4603      	mov	r3, r0
 8008414:	2b00      	cmp	r3, #0
 8008416:	d013      	beq.n	8008440 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008418:	4b3f      	ldr	r3, [pc, #252]	; (8008518 <xQueueGenericSend+0x1f8>)
 800841a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800841e:	601a      	str	r2, [r3, #0]
 8008420:	f3bf 8f4f 	dsb	sy
 8008424:	f3bf 8f6f 	isb	sy
 8008428:	e00a      	b.n	8008440 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800842a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842c:	2b00      	cmp	r3, #0
 800842e:	d007      	beq.n	8008440 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008430:	4b39      	ldr	r3, [pc, #228]	; (8008518 <xQueueGenericSend+0x1f8>)
 8008432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008436:	601a      	str	r2, [r3, #0]
 8008438:	f3bf 8f4f 	dsb	sy
 800843c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008440:	f001 fae4 	bl	8009a0c <vPortExitCritical>
				return pdPASS;
 8008444:	2301      	movs	r3, #1
 8008446:	e063      	b.n	8008510 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d103      	bne.n	8008456 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800844e:	f001 fadd 	bl	8009a0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008452:	2300      	movs	r3, #0
 8008454:	e05c      	b.n	8008510 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008458:	2b00      	cmp	r3, #0
 800845a:	d106      	bne.n	800846a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800845c:	f107 0314 	add.w	r3, r7, #20
 8008460:	4618      	mov	r0, r3
 8008462:	f000 ff4d 	bl	8009300 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008466:	2301      	movs	r3, #1
 8008468:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800846a:	f001 facf 	bl	8009a0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800846e:	f000 fd05 	bl	8008e7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008472:	f001 fa9b 	bl	80099ac <vPortEnterCritical>
 8008476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008478:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800847c:	b25b      	sxtb	r3, r3
 800847e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008482:	d103      	bne.n	800848c <xQueueGenericSend+0x16c>
 8008484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008486:	2200      	movs	r2, #0
 8008488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800848c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008492:	b25b      	sxtb	r3, r3
 8008494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008498:	d103      	bne.n	80084a2 <xQueueGenericSend+0x182>
 800849a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849c:	2200      	movs	r2, #0
 800849e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084a2:	f001 fab3 	bl	8009a0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084a6:	1d3a      	adds	r2, r7, #4
 80084a8:	f107 0314 	add.w	r3, r7, #20
 80084ac:	4611      	mov	r1, r2
 80084ae:	4618      	mov	r0, r3
 80084b0:	f000 ff3c 	bl	800932c <xTaskCheckForTimeOut>
 80084b4:	4603      	mov	r3, r0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d124      	bne.n	8008504 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80084ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084bc:	f000 fa9e 	bl	80089fc <prvIsQueueFull>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d018      	beq.n	80084f8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80084c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c8:	3310      	adds	r3, #16
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	4611      	mov	r1, r2
 80084ce:	4618      	mov	r0, r3
 80084d0:	f000 fe90 	bl	80091f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80084d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084d6:	f000 fa29 	bl	800892c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80084da:	f000 fcdd 	bl	8008e98 <xTaskResumeAll>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	f47f af7c 	bne.w	80083de <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80084e6:	4b0c      	ldr	r3, [pc, #48]	; (8008518 <xQueueGenericSend+0x1f8>)
 80084e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084ec:	601a      	str	r2, [r3, #0]
 80084ee:	f3bf 8f4f 	dsb	sy
 80084f2:	f3bf 8f6f 	isb	sy
 80084f6:	e772      	b.n	80083de <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80084f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084fa:	f000 fa17 	bl	800892c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084fe:	f000 fccb 	bl	8008e98 <xTaskResumeAll>
 8008502:	e76c      	b.n	80083de <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008504:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008506:	f000 fa11 	bl	800892c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800850a:	f000 fcc5 	bl	8008e98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800850e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008510:	4618      	mov	r0, r3
 8008512:	3738      	adds	r7, #56	; 0x38
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}
 8008518:	e000ed04 	.word	0xe000ed04

0800851c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b08e      	sub	sp, #56	; 0x38
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	607a      	str	r2, [r7, #4]
 8008528:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800852e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008530:	2b00      	cmp	r3, #0
 8008532:	d10a      	bne.n	800854a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008538:	f383 8811 	msr	BASEPRI, r3
 800853c:	f3bf 8f6f 	isb	sy
 8008540:	f3bf 8f4f 	dsb	sy
 8008544:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008546:	bf00      	nop
 8008548:	e7fe      	b.n	8008548 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d103      	bne.n	8008558 <xQueueGenericSendFromISR+0x3c>
 8008550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008554:	2b00      	cmp	r3, #0
 8008556:	d101      	bne.n	800855c <xQueueGenericSendFromISR+0x40>
 8008558:	2301      	movs	r3, #1
 800855a:	e000      	b.n	800855e <xQueueGenericSendFromISR+0x42>
 800855c:	2300      	movs	r3, #0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d10a      	bne.n	8008578 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008566:	f383 8811 	msr	BASEPRI, r3
 800856a:	f3bf 8f6f 	isb	sy
 800856e:	f3bf 8f4f 	dsb	sy
 8008572:	623b      	str	r3, [r7, #32]
}
 8008574:	bf00      	nop
 8008576:	e7fe      	b.n	8008576 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	2b02      	cmp	r3, #2
 800857c:	d103      	bne.n	8008586 <xQueueGenericSendFromISR+0x6a>
 800857e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008582:	2b01      	cmp	r3, #1
 8008584:	d101      	bne.n	800858a <xQueueGenericSendFromISR+0x6e>
 8008586:	2301      	movs	r3, #1
 8008588:	e000      	b.n	800858c <xQueueGenericSendFromISR+0x70>
 800858a:	2300      	movs	r3, #0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d10a      	bne.n	80085a6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008594:	f383 8811 	msr	BASEPRI, r3
 8008598:	f3bf 8f6f 	isb	sy
 800859c:	f3bf 8f4f 	dsb	sy
 80085a0:	61fb      	str	r3, [r7, #28]
}
 80085a2:	bf00      	nop
 80085a4:	e7fe      	b.n	80085a4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80085a6:	f001 fac3 	bl	8009b30 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80085aa:	f3ef 8211 	mrs	r2, BASEPRI
 80085ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b2:	f383 8811 	msr	BASEPRI, r3
 80085b6:	f3bf 8f6f 	isb	sy
 80085ba:	f3bf 8f4f 	dsb	sy
 80085be:	61ba      	str	r2, [r7, #24]
 80085c0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80085c2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80085c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80085c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d302      	bcc.n	80085d8 <xQueueGenericSendFromISR+0xbc>
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	2b02      	cmp	r3, #2
 80085d6:	d12c      	bne.n	8008632 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80085d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80085e2:	683a      	ldr	r2, [r7, #0]
 80085e4:	68b9      	ldr	r1, [r7, #8]
 80085e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085e8:	f000 f910 	bl	800880c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80085ec:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80085f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085f4:	d112      	bne.n	800861c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d016      	beq.n	800862c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008600:	3324      	adds	r3, #36	; 0x24
 8008602:	4618      	mov	r0, r3
 8008604:	f000 fe1a 	bl	800923c <xTaskRemoveFromEventList>
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d00e      	beq.n	800862c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d00b      	beq.n	800862c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2201      	movs	r2, #1
 8008618:	601a      	str	r2, [r3, #0]
 800861a:	e007      	b.n	800862c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800861c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008620:	3301      	adds	r3, #1
 8008622:	b2db      	uxtb	r3, r3
 8008624:	b25a      	sxtb	r2, r3
 8008626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800862c:	2301      	movs	r3, #1
 800862e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008630:	e001      	b.n	8008636 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008632:	2300      	movs	r3, #0
 8008634:	637b      	str	r3, [r7, #52]	; 0x34
 8008636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008638:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008640:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008644:	4618      	mov	r0, r3
 8008646:	3738      	adds	r7, #56	; 0x38
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b08c      	sub	sp, #48	; 0x30
 8008650:	af00      	add	r7, sp, #0
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	60b9      	str	r1, [r7, #8]
 8008656:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008658:	2300      	movs	r3, #0
 800865a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008662:	2b00      	cmp	r3, #0
 8008664:	d10a      	bne.n	800867c <xQueueReceive+0x30>
	__asm volatile
 8008666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866a:	f383 8811 	msr	BASEPRI, r3
 800866e:	f3bf 8f6f 	isb	sy
 8008672:	f3bf 8f4f 	dsb	sy
 8008676:	623b      	str	r3, [r7, #32]
}
 8008678:	bf00      	nop
 800867a:	e7fe      	b.n	800867a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d103      	bne.n	800868a <xQueueReceive+0x3e>
 8008682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008686:	2b00      	cmp	r3, #0
 8008688:	d101      	bne.n	800868e <xQueueReceive+0x42>
 800868a:	2301      	movs	r3, #1
 800868c:	e000      	b.n	8008690 <xQueueReceive+0x44>
 800868e:	2300      	movs	r3, #0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d10a      	bne.n	80086aa <xQueueReceive+0x5e>
	__asm volatile
 8008694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008698:	f383 8811 	msr	BASEPRI, r3
 800869c:	f3bf 8f6f 	isb	sy
 80086a0:	f3bf 8f4f 	dsb	sy
 80086a4:	61fb      	str	r3, [r7, #28]
}
 80086a6:	bf00      	nop
 80086a8:	e7fe      	b.n	80086a8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80086aa:	f000 ff83 	bl	80095b4 <xTaskGetSchedulerState>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d102      	bne.n	80086ba <xQueueReceive+0x6e>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d101      	bne.n	80086be <xQueueReceive+0x72>
 80086ba:	2301      	movs	r3, #1
 80086bc:	e000      	b.n	80086c0 <xQueueReceive+0x74>
 80086be:	2300      	movs	r3, #0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d10a      	bne.n	80086da <xQueueReceive+0x8e>
	__asm volatile
 80086c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c8:	f383 8811 	msr	BASEPRI, r3
 80086cc:	f3bf 8f6f 	isb	sy
 80086d0:	f3bf 8f4f 	dsb	sy
 80086d4:	61bb      	str	r3, [r7, #24]
}
 80086d6:	bf00      	nop
 80086d8:	e7fe      	b.n	80086d8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80086da:	f001 f967 	bl	80099ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d01f      	beq.n	800872a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80086ea:	68b9      	ldr	r1, [r7, #8]
 80086ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086ee:	f000 f8f7 	bl	80088e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80086f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f4:	1e5a      	subs	r2, r3, #1
 80086f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d00f      	beq.n	8008722 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008704:	3310      	adds	r3, #16
 8008706:	4618      	mov	r0, r3
 8008708:	f000 fd98 	bl	800923c <xTaskRemoveFromEventList>
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d007      	beq.n	8008722 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008712:	4b3d      	ldr	r3, [pc, #244]	; (8008808 <xQueueReceive+0x1bc>)
 8008714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008718:	601a      	str	r2, [r3, #0]
 800871a:	f3bf 8f4f 	dsb	sy
 800871e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008722:	f001 f973 	bl	8009a0c <vPortExitCritical>
				return pdPASS;
 8008726:	2301      	movs	r3, #1
 8008728:	e069      	b.n	80087fe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d103      	bne.n	8008738 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008730:	f001 f96c 	bl	8009a0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008734:	2300      	movs	r3, #0
 8008736:	e062      	b.n	80087fe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800873a:	2b00      	cmp	r3, #0
 800873c:	d106      	bne.n	800874c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800873e:	f107 0310 	add.w	r3, r7, #16
 8008742:	4618      	mov	r0, r3
 8008744:	f000 fddc 	bl	8009300 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008748:	2301      	movs	r3, #1
 800874a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800874c:	f001 f95e 	bl	8009a0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008750:	f000 fb94 	bl	8008e7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008754:	f001 f92a 	bl	80099ac <vPortEnterCritical>
 8008758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800875e:	b25b      	sxtb	r3, r3
 8008760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008764:	d103      	bne.n	800876e <xQueueReceive+0x122>
 8008766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008768:	2200      	movs	r2, #0
 800876a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800876e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008770:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008774:	b25b      	sxtb	r3, r3
 8008776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800877a:	d103      	bne.n	8008784 <xQueueReceive+0x138>
 800877c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877e:	2200      	movs	r2, #0
 8008780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008784:	f001 f942 	bl	8009a0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008788:	1d3a      	adds	r2, r7, #4
 800878a:	f107 0310 	add.w	r3, r7, #16
 800878e:	4611      	mov	r1, r2
 8008790:	4618      	mov	r0, r3
 8008792:	f000 fdcb 	bl	800932c <xTaskCheckForTimeOut>
 8008796:	4603      	mov	r3, r0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d123      	bne.n	80087e4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800879c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800879e:	f000 f917 	bl	80089d0 <prvIsQueueEmpty>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d017      	beq.n	80087d8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80087a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087aa:	3324      	adds	r3, #36	; 0x24
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	4611      	mov	r1, r2
 80087b0:	4618      	mov	r0, r3
 80087b2:	f000 fd1f 	bl	80091f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80087b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087b8:	f000 f8b8 	bl	800892c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80087bc:	f000 fb6c 	bl	8008e98 <xTaskResumeAll>
 80087c0:	4603      	mov	r3, r0
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d189      	bne.n	80086da <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80087c6:	4b10      	ldr	r3, [pc, #64]	; (8008808 <xQueueReceive+0x1bc>)
 80087c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087cc:	601a      	str	r2, [r3, #0]
 80087ce:	f3bf 8f4f 	dsb	sy
 80087d2:	f3bf 8f6f 	isb	sy
 80087d6:	e780      	b.n	80086da <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80087d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087da:	f000 f8a7 	bl	800892c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80087de:	f000 fb5b 	bl	8008e98 <xTaskResumeAll>
 80087e2:	e77a      	b.n	80086da <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80087e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087e6:	f000 f8a1 	bl	800892c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80087ea:	f000 fb55 	bl	8008e98 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80087ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087f0:	f000 f8ee 	bl	80089d0 <prvIsQueueEmpty>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	f43f af6f 	beq.w	80086da <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80087fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3730      	adds	r7, #48	; 0x30
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	e000ed04 	.word	0xe000ed04

0800880c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b086      	sub	sp, #24
 8008810:	af00      	add	r7, sp, #0
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008818:	2300      	movs	r3, #0
 800881a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008820:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008826:	2b00      	cmp	r3, #0
 8008828:	d10d      	bne.n	8008846 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d14d      	bne.n	80088ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	4618      	mov	r0, r3
 8008838:	f000 feda 	bl	80095f0 <xTaskPriorityDisinherit>
 800883c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2200      	movs	r2, #0
 8008842:	609a      	str	r2, [r3, #8]
 8008844:	e043      	b.n	80088ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d119      	bne.n	8008880 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	6858      	ldr	r0, [r3, #4]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008854:	461a      	mov	r2, r3
 8008856:	68b9      	ldr	r1, [r7, #8]
 8008858:	f001 fbaa 	bl	8009fb0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	685a      	ldr	r2, [r3, #4]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008864:	441a      	add	r2, r3
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	685a      	ldr	r2, [r3, #4]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	429a      	cmp	r2, r3
 8008874:	d32b      	bcc.n	80088ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	605a      	str	r2, [r3, #4]
 800887e:	e026      	b.n	80088ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	68d8      	ldr	r0, [r3, #12]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008888:	461a      	mov	r2, r3
 800888a:	68b9      	ldr	r1, [r7, #8]
 800888c:	f001 fb90 	bl	8009fb0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	68da      	ldr	r2, [r3, #12]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008898:	425b      	negs	r3, r3
 800889a:	441a      	add	r2, r3
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	68da      	ldr	r2, [r3, #12]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d207      	bcs.n	80088bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	689a      	ldr	r2, [r3, #8]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b4:	425b      	negs	r3, r3
 80088b6:	441a      	add	r2, r3
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d105      	bne.n	80088ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d002      	beq.n	80088ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	3b01      	subs	r3, #1
 80088cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	1c5a      	adds	r2, r3, #1
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80088d6:	697b      	ldr	r3, [r7, #20]
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3718      	adds	r7, #24
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d018      	beq.n	8008924 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	68da      	ldr	r2, [r3, #12]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088fa:	441a      	add	r2, r3
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	68da      	ldr	r2, [r3, #12]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	429a      	cmp	r2, r3
 800890a:	d303      	bcc.n	8008914 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	68d9      	ldr	r1, [r3, #12]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800891c:	461a      	mov	r2, r3
 800891e:	6838      	ldr	r0, [r7, #0]
 8008920:	f001 fb46 	bl	8009fb0 <memcpy>
	}
}
 8008924:	bf00      	nop
 8008926:	3708      	adds	r7, #8
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008934:	f001 f83a 	bl	80099ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800893e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008940:	e011      	b.n	8008966 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008946:	2b00      	cmp	r3, #0
 8008948:	d012      	beq.n	8008970 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	3324      	adds	r3, #36	; 0x24
 800894e:	4618      	mov	r0, r3
 8008950:	f000 fc74 	bl	800923c <xTaskRemoveFromEventList>
 8008954:	4603      	mov	r3, r0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d001      	beq.n	800895e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800895a:	f000 fd49 	bl	80093f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800895e:	7bfb      	ldrb	r3, [r7, #15]
 8008960:	3b01      	subs	r3, #1
 8008962:	b2db      	uxtb	r3, r3
 8008964:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800896a:	2b00      	cmp	r3, #0
 800896c:	dce9      	bgt.n	8008942 <prvUnlockQueue+0x16>
 800896e:	e000      	b.n	8008972 <prvUnlockQueue+0x46>
					break;
 8008970:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	22ff      	movs	r2, #255	; 0xff
 8008976:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800897a:	f001 f847 	bl	8009a0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800897e:	f001 f815 	bl	80099ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008988:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800898a:	e011      	b.n	80089b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	691b      	ldr	r3, [r3, #16]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d012      	beq.n	80089ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	3310      	adds	r3, #16
 8008998:	4618      	mov	r0, r3
 800899a:	f000 fc4f 	bl	800923c <xTaskRemoveFromEventList>
 800899e:	4603      	mov	r3, r0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d001      	beq.n	80089a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80089a4:	f000 fd24 	bl	80093f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80089a8:	7bbb      	ldrb	r3, [r7, #14]
 80089aa:	3b01      	subs	r3, #1
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80089b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	dce9      	bgt.n	800898c <prvUnlockQueue+0x60>
 80089b8:	e000      	b.n	80089bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80089ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	22ff      	movs	r2, #255	; 0xff
 80089c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80089c4:	f001 f822 	bl	8009a0c <vPortExitCritical>
}
 80089c8:	bf00      	nop
 80089ca:	3710      	adds	r7, #16
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80089d8:	f000 ffe8 	bl	80099ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d102      	bne.n	80089ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80089e4:	2301      	movs	r3, #1
 80089e6:	60fb      	str	r3, [r7, #12]
 80089e8:	e001      	b.n	80089ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80089ea:	2300      	movs	r3, #0
 80089ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80089ee:	f001 f80d 	bl	8009a0c <vPortExitCritical>

	return xReturn;
 80089f2:	68fb      	ldr	r3, [r7, #12]
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3710      	adds	r7, #16
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a04:	f000 ffd2 	bl	80099ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d102      	bne.n	8008a1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008a14:	2301      	movs	r3, #1
 8008a16:	60fb      	str	r3, [r7, #12]
 8008a18:	e001      	b.n	8008a1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a1e:	f000 fff5 	bl	8009a0c <vPortExitCritical>

	return xReturn;
 8008a22:	68fb      	ldr	r3, [r7, #12]
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3710      	adds	r7, #16
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b08e      	sub	sp, #56	; 0x38
 8008a30:	af04      	add	r7, sp, #16
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	60b9      	str	r1, [r7, #8]
 8008a36:	607a      	str	r2, [r7, #4]
 8008a38:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d10a      	bne.n	8008a56 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a44:	f383 8811 	msr	BASEPRI, r3
 8008a48:	f3bf 8f6f 	isb	sy
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	623b      	str	r3, [r7, #32]
}
 8008a52:	bf00      	nop
 8008a54:	e7fe      	b.n	8008a54 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d10a      	bne.n	8008a72 <xTaskCreateStatic+0x46>
	__asm volatile
 8008a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a60:	f383 8811 	msr	BASEPRI, r3
 8008a64:	f3bf 8f6f 	isb	sy
 8008a68:	f3bf 8f4f 	dsb	sy
 8008a6c:	61fb      	str	r3, [r7, #28]
}
 8008a6e:	bf00      	nop
 8008a70:	e7fe      	b.n	8008a70 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008a72:	2354      	movs	r3, #84	; 0x54
 8008a74:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	2b54      	cmp	r3, #84	; 0x54
 8008a7a:	d00a      	beq.n	8008a92 <xTaskCreateStatic+0x66>
	__asm volatile
 8008a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a80:	f383 8811 	msr	BASEPRI, r3
 8008a84:	f3bf 8f6f 	isb	sy
 8008a88:	f3bf 8f4f 	dsb	sy
 8008a8c:	61bb      	str	r3, [r7, #24]
}
 8008a8e:	bf00      	nop
 8008a90:	e7fe      	b.n	8008a90 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008a92:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d01e      	beq.n	8008ad8 <xTaskCreateStatic+0xac>
 8008a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d01b      	beq.n	8008ad8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008aa8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aac:	2202      	movs	r2, #2
 8008aae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	9303      	str	r3, [sp, #12]
 8008ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab8:	9302      	str	r3, [sp, #8]
 8008aba:	f107 0314 	add.w	r3, r7, #20
 8008abe:	9301      	str	r3, [sp, #4]
 8008ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac2:	9300      	str	r3, [sp, #0]
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	68b9      	ldr	r1, [r7, #8]
 8008aca:	68f8      	ldr	r0, [r7, #12]
 8008acc:	f000 f850 	bl	8008b70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ad0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ad2:	f000 f8d5 	bl	8008c80 <prvAddNewTaskToReadyList>
 8008ad6:	e001      	b.n	8008adc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008adc:	697b      	ldr	r3, [r7, #20]
	}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3728      	adds	r7, #40	; 0x28
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b08c      	sub	sp, #48	; 0x30
 8008aea:	af04      	add	r7, sp, #16
 8008aec:	60f8      	str	r0, [r7, #12]
 8008aee:	60b9      	str	r1, [r7, #8]
 8008af0:	603b      	str	r3, [r7, #0]
 8008af2:	4613      	mov	r3, r2
 8008af4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008af6:	88fb      	ldrh	r3, [r7, #6]
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	4618      	mov	r0, r3
 8008afc:	f001 f856 	bl	8009bac <pvPortMalloc>
 8008b00:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d00e      	beq.n	8008b26 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008b08:	2054      	movs	r0, #84	; 0x54
 8008b0a:	f001 f84f 	bl	8009bac <pvPortMalloc>
 8008b0e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d003      	beq.n	8008b1e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	697a      	ldr	r2, [r7, #20]
 8008b1a:	631a      	str	r2, [r3, #48]	; 0x30
 8008b1c:	e005      	b.n	8008b2a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008b1e:	6978      	ldr	r0, [r7, #20]
 8008b20:	f001 f908 	bl	8009d34 <vPortFree>
 8008b24:	e001      	b.n	8008b2a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008b26:	2300      	movs	r3, #0
 8008b28:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008b2a:	69fb      	ldr	r3, [r7, #28]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d017      	beq.n	8008b60 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008b30:	69fb      	ldr	r3, [r7, #28]
 8008b32:	2200      	movs	r2, #0
 8008b34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008b38:	88fa      	ldrh	r2, [r7, #6]
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	9303      	str	r3, [sp, #12]
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	9302      	str	r3, [sp, #8]
 8008b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b44:	9301      	str	r3, [sp, #4]
 8008b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b48:	9300      	str	r3, [sp, #0]
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	68b9      	ldr	r1, [r7, #8]
 8008b4e:	68f8      	ldr	r0, [r7, #12]
 8008b50:	f000 f80e 	bl	8008b70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b54:	69f8      	ldr	r0, [r7, #28]
 8008b56:	f000 f893 	bl	8008c80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	61bb      	str	r3, [r7, #24]
 8008b5e:	e002      	b.n	8008b66 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008b60:	f04f 33ff 	mov.w	r3, #4294967295
 8008b64:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008b66:	69bb      	ldr	r3, [r7, #24]
	}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3720      	adds	r7, #32
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b088      	sub	sp, #32
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	607a      	str	r2, [r7, #4]
 8008b7c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008b88:	3b01      	subs	r3, #1
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	4413      	add	r3, r2
 8008b8e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	f023 0307 	bic.w	r3, r3, #7
 8008b96:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008b98:	69bb      	ldr	r3, [r7, #24]
 8008b9a:	f003 0307 	and.w	r3, r3, #7
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d00a      	beq.n	8008bb8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8008ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba6:	f383 8811 	msr	BASEPRI, r3
 8008baa:	f3bf 8f6f 	isb	sy
 8008bae:	f3bf 8f4f 	dsb	sy
 8008bb2:	617b      	str	r3, [r7, #20]
}
 8008bb4:	bf00      	nop
 8008bb6:	e7fe      	b.n	8008bb6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d01f      	beq.n	8008bfe <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	61fb      	str	r3, [r7, #28]
 8008bc2:	e012      	b.n	8008bea <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008bc4:	68ba      	ldr	r2, [r7, #8]
 8008bc6:	69fb      	ldr	r3, [r7, #28]
 8008bc8:	4413      	add	r3, r2
 8008bca:	7819      	ldrb	r1, [r3, #0]
 8008bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bce:	69fb      	ldr	r3, [r7, #28]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	3334      	adds	r3, #52	; 0x34
 8008bd4:	460a      	mov	r2, r1
 8008bd6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008bd8:	68ba      	ldr	r2, [r7, #8]
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	4413      	add	r3, r2
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d006      	beq.n	8008bf2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008be4:	69fb      	ldr	r3, [r7, #28]
 8008be6:	3301      	adds	r3, #1
 8008be8:	61fb      	str	r3, [r7, #28]
 8008bea:	69fb      	ldr	r3, [r7, #28]
 8008bec:	2b0f      	cmp	r3, #15
 8008bee:	d9e9      	bls.n	8008bc4 <prvInitialiseNewTask+0x54>
 8008bf0:	e000      	b.n	8008bf4 <prvInitialiseNewTask+0x84>
			{
				break;
 8008bf2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008bfc:	e003      	b.n	8008c06 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c00:	2200      	movs	r2, #0
 8008c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c08:	2b06      	cmp	r3, #6
 8008c0a:	d901      	bls.n	8008c10 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008c0c:	2306      	movs	r3, #6
 8008c0e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c14:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c1a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c1e:	2200      	movs	r2, #0
 8008c20:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c24:	3304      	adds	r3, #4
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7ff f95d 	bl	8007ee6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2e:	3318      	adds	r3, #24
 8008c30:	4618      	mov	r0, r3
 8008c32:	f7ff f958 	bl	8007ee6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c3a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3e:	f1c3 0207 	rsb	r2, r3, #7
 8008c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c44:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c4a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4e:	2200      	movs	r2, #0
 8008c50:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c54:	2200      	movs	r2, #0
 8008c56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008c5a:	683a      	ldr	r2, [r7, #0]
 8008c5c:	68f9      	ldr	r1, [r7, #12]
 8008c5e:	69b8      	ldr	r0, [r7, #24]
 8008c60:	f000 fdb2 	bl	80097c8 <pxPortInitialiseStack>
 8008c64:	4602      	mov	r2, r0
 8008c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c68:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d002      	beq.n	8008c76 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c76:	bf00      	nop
 8008c78:	3720      	adds	r7, #32
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
	...

08008c80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008c88:	f000 fe90 	bl	80099ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008c8c:	4b2a      	ldr	r3, [pc, #168]	; (8008d38 <prvAddNewTaskToReadyList+0xb8>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	3301      	adds	r3, #1
 8008c92:	4a29      	ldr	r2, [pc, #164]	; (8008d38 <prvAddNewTaskToReadyList+0xb8>)
 8008c94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008c96:	4b29      	ldr	r3, [pc, #164]	; (8008d3c <prvAddNewTaskToReadyList+0xbc>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d109      	bne.n	8008cb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008c9e:	4a27      	ldr	r2, [pc, #156]	; (8008d3c <prvAddNewTaskToReadyList+0xbc>)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008ca4:	4b24      	ldr	r3, [pc, #144]	; (8008d38 <prvAddNewTaskToReadyList+0xb8>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d110      	bne.n	8008cce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008cac:	f000 fbc4 	bl	8009438 <prvInitialiseTaskLists>
 8008cb0:	e00d      	b.n	8008cce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008cb2:	4b23      	ldr	r3, [pc, #140]	; (8008d40 <prvAddNewTaskToReadyList+0xc0>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d109      	bne.n	8008cce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008cba:	4b20      	ldr	r3, [pc, #128]	; (8008d3c <prvAddNewTaskToReadyList+0xbc>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d802      	bhi.n	8008cce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008cc8:	4a1c      	ldr	r2, [pc, #112]	; (8008d3c <prvAddNewTaskToReadyList+0xbc>)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008cce:	4b1d      	ldr	r3, [pc, #116]	; (8008d44 <prvAddNewTaskToReadyList+0xc4>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	4a1b      	ldr	r2, [pc, #108]	; (8008d44 <prvAddNewTaskToReadyList+0xc4>)
 8008cd6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cdc:	2201      	movs	r2, #1
 8008cde:	409a      	lsls	r2, r3
 8008ce0:	4b19      	ldr	r3, [pc, #100]	; (8008d48 <prvAddNewTaskToReadyList+0xc8>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	4a18      	ldr	r2, [pc, #96]	; (8008d48 <prvAddNewTaskToReadyList+0xc8>)
 8008ce8:	6013      	str	r3, [r2, #0]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cee:	4613      	mov	r3, r2
 8008cf0:	009b      	lsls	r3, r3, #2
 8008cf2:	4413      	add	r3, r2
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	4a15      	ldr	r2, [pc, #84]	; (8008d4c <prvAddNewTaskToReadyList+0xcc>)
 8008cf8:	441a      	add	r2, r3
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	3304      	adds	r3, #4
 8008cfe:	4619      	mov	r1, r3
 8008d00:	4610      	mov	r0, r2
 8008d02:	f7ff f8fc 	bl	8007efe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008d06:	f000 fe81 	bl	8009a0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008d0a:	4b0d      	ldr	r3, [pc, #52]	; (8008d40 <prvAddNewTaskToReadyList+0xc0>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00e      	beq.n	8008d30 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008d12:	4b0a      	ldr	r3, [pc, #40]	; (8008d3c <prvAddNewTaskToReadyList+0xbc>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d207      	bcs.n	8008d30 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008d20:	4b0b      	ldr	r3, [pc, #44]	; (8008d50 <prvAddNewTaskToReadyList+0xd0>)
 8008d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d26:	601a      	str	r2, [r3, #0]
 8008d28:	f3bf 8f4f 	dsb	sy
 8008d2c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d30:	bf00      	nop
 8008d32:	3708      	adds	r7, #8
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	200008b4 	.word	0x200008b4
 8008d3c:	200007b4 	.word	0x200007b4
 8008d40:	200008c0 	.word	0x200008c0
 8008d44:	200008d0 	.word	0x200008d0
 8008d48:	200008bc 	.word	0x200008bc
 8008d4c:	200007b8 	.word	0x200007b8
 8008d50:	e000ed04 	.word	0xe000ed04

08008d54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b084      	sub	sp, #16
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d017      	beq.n	8008d96 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008d66:	4b13      	ldr	r3, [pc, #76]	; (8008db4 <vTaskDelay+0x60>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00a      	beq.n	8008d84 <vTaskDelay+0x30>
	__asm volatile
 8008d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d72:	f383 8811 	msr	BASEPRI, r3
 8008d76:	f3bf 8f6f 	isb	sy
 8008d7a:	f3bf 8f4f 	dsb	sy
 8008d7e:	60bb      	str	r3, [r7, #8]
}
 8008d80:	bf00      	nop
 8008d82:	e7fe      	b.n	8008d82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008d84:	f000 f87a 	bl	8008e7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008d88:	2100      	movs	r1, #0
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 fcb6 	bl	80096fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008d90:	f000 f882 	bl	8008e98 <xTaskResumeAll>
 8008d94:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d107      	bne.n	8008dac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008d9c:	4b06      	ldr	r3, [pc, #24]	; (8008db8 <vTaskDelay+0x64>)
 8008d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008da2:	601a      	str	r2, [r3, #0]
 8008da4:	f3bf 8f4f 	dsb	sy
 8008da8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008dac:	bf00      	nop
 8008dae:	3710      	adds	r7, #16
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	200008dc 	.word	0x200008dc
 8008db8:	e000ed04 	.word	0xe000ed04

08008dbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b08a      	sub	sp, #40	; 0x28
 8008dc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008dca:	463a      	mov	r2, r7
 8008dcc:	1d39      	adds	r1, r7, #4
 8008dce:	f107 0308 	add.w	r3, r7, #8
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7f8 fc5e 	bl	8001694 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008dd8:	6839      	ldr	r1, [r7, #0]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	68ba      	ldr	r2, [r7, #8]
 8008dde:	9202      	str	r2, [sp, #8]
 8008de0:	9301      	str	r3, [sp, #4]
 8008de2:	2300      	movs	r3, #0
 8008de4:	9300      	str	r3, [sp, #0]
 8008de6:	2300      	movs	r3, #0
 8008de8:	460a      	mov	r2, r1
 8008dea:	491e      	ldr	r1, [pc, #120]	; (8008e64 <vTaskStartScheduler+0xa8>)
 8008dec:	481e      	ldr	r0, [pc, #120]	; (8008e68 <vTaskStartScheduler+0xac>)
 8008dee:	f7ff fe1d 	bl	8008a2c <xTaskCreateStatic>
 8008df2:	4603      	mov	r3, r0
 8008df4:	4a1d      	ldr	r2, [pc, #116]	; (8008e6c <vTaskStartScheduler+0xb0>)
 8008df6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008df8:	4b1c      	ldr	r3, [pc, #112]	; (8008e6c <vTaskStartScheduler+0xb0>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d002      	beq.n	8008e06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008e00:	2301      	movs	r3, #1
 8008e02:	617b      	str	r3, [r7, #20]
 8008e04:	e001      	b.n	8008e0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008e06:	2300      	movs	r3, #0
 8008e08:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d116      	bne.n	8008e3e <vTaskStartScheduler+0x82>
	__asm volatile
 8008e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e14:	f383 8811 	msr	BASEPRI, r3
 8008e18:	f3bf 8f6f 	isb	sy
 8008e1c:	f3bf 8f4f 	dsb	sy
 8008e20:	613b      	str	r3, [r7, #16]
}
 8008e22:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008e24:	4b12      	ldr	r3, [pc, #72]	; (8008e70 <vTaskStartScheduler+0xb4>)
 8008e26:	f04f 32ff 	mov.w	r2, #4294967295
 8008e2a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008e2c:	4b11      	ldr	r3, [pc, #68]	; (8008e74 <vTaskStartScheduler+0xb8>)
 8008e2e:	2201      	movs	r2, #1
 8008e30:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008e32:	4b11      	ldr	r3, [pc, #68]	; (8008e78 <vTaskStartScheduler+0xbc>)
 8008e34:	2200      	movs	r2, #0
 8008e36:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008e38:	f000 fd46 	bl	80098c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008e3c:	e00e      	b.n	8008e5c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e44:	d10a      	bne.n	8008e5c <vTaskStartScheduler+0xa0>
	__asm volatile
 8008e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e4a:	f383 8811 	msr	BASEPRI, r3
 8008e4e:	f3bf 8f6f 	isb	sy
 8008e52:	f3bf 8f4f 	dsb	sy
 8008e56:	60fb      	str	r3, [r7, #12]
}
 8008e58:	bf00      	nop
 8008e5a:	e7fe      	b.n	8008e5a <vTaskStartScheduler+0x9e>
}
 8008e5c:	bf00      	nop
 8008e5e:	3718      	adds	r7, #24
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}
 8008e64:	0800c3b4 	.word	0x0800c3b4
 8008e68:	08009409 	.word	0x08009409
 8008e6c:	200008d8 	.word	0x200008d8
 8008e70:	200008d4 	.word	0x200008d4
 8008e74:	200008c0 	.word	0x200008c0
 8008e78:	200008b8 	.word	0x200008b8

08008e7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008e80:	4b04      	ldr	r3, [pc, #16]	; (8008e94 <vTaskSuspendAll+0x18>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	3301      	adds	r3, #1
 8008e86:	4a03      	ldr	r2, [pc, #12]	; (8008e94 <vTaskSuspendAll+0x18>)
 8008e88:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008e8a:	bf00      	nop
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bc80      	pop	{r7}
 8008e90:	4770      	bx	lr
 8008e92:	bf00      	nop
 8008e94:	200008dc 	.word	0x200008dc

08008e98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008ea6:	4b41      	ldr	r3, [pc, #260]	; (8008fac <xTaskResumeAll+0x114>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d10a      	bne.n	8008ec4 <xTaskResumeAll+0x2c>
	__asm volatile
 8008eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb2:	f383 8811 	msr	BASEPRI, r3
 8008eb6:	f3bf 8f6f 	isb	sy
 8008eba:	f3bf 8f4f 	dsb	sy
 8008ebe:	603b      	str	r3, [r7, #0]
}
 8008ec0:	bf00      	nop
 8008ec2:	e7fe      	b.n	8008ec2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008ec4:	f000 fd72 	bl	80099ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008ec8:	4b38      	ldr	r3, [pc, #224]	; (8008fac <xTaskResumeAll+0x114>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	4a37      	ldr	r2, [pc, #220]	; (8008fac <xTaskResumeAll+0x114>)
 8008ed0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ed2:	4b36      	ldr	r3, [pc, #216]	; (8008fac <xTaskResumeAll+0x114>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d161      	bne.n	8008f9e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008eda:	4b35      	ldr	r3, [pc, #212]	; (8008fb0 <xTaskResumeAll+0x118>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d05d      	beq.n	8008f9e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ee2:	e02e      	b.n	8008f42 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ee4:	4b33      	ldr	r3, [pc, #204]	; (8008fb4 <xTaskResumeAll+0x11c>)
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	3318      	adds	r3, #24
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f7ff f85f 	bl	8007fb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	3304      	adds	r3, #4
 8008efa:	4618      	mov	r0, r3
 8008efc:	f7ff f85a 	bl	8007fb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f04:	2201      	movs	r2, #1
 8008f06:	409a      	lsls	r2, r3
 8008f08:	4b2b      	ldr	r3, [pc, #172]	; (8008fb8 <xTaskResumeAll+0x120>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	4a2a      	ldr	r2, [pc, #168]	; (8008fb8 <xTaskResumeAll+0x120>)
 8008f10:	6013      	str	r3, [r2, #0]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f16:	4613      	mov	r3, r2
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	4413      	add	r3, r2
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	4a27      	ldr	r2, [pc, #156]	; (8008fbc <xTaskResumeAll+0x124>)
 8008f20:	441a      	add	r2, r3
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	3304      	adds	r3, #4
 8008f26:	4619      	mov	r1, r3
 8008f28:	4610      	mov	r0, r2
 8008f2a:	f7fe ffe8 	bl	8007efe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f32:	4b23      	ldr	r3, [pc, #140]	; (8008fc0 <xTaskResumeAll+0x128>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d302      	bcc.n	8008f42 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008f3c:	4b21      	ldr	r3, [pc, #132]	; (8008fc4 <xTaskResumeAll+0x12c>)
 8008f3e:	2201      	movs	r2, #1
 8008f40:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f42:	4b1c      	ldr	r3, [pc, #112]	; (8008fb4 <xTaskResumeAll+0x11c>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d1cc      	bne.n	8008ee4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d001      	beq.n	8008f54 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008f50:	f000 fb10 	bl	8009574 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008f54:	4b1c      	ldr	r3, [pc, #112]	; (8008fc8 <xTaskResumeAll+0x130>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d010      	beq.n	8008f82 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008f60:	f000 f836 	bl	8008fd0 <xTaskIncrementTick>
 8008f64:	4603      	mov	r3, r0
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d002      	beq.n	8008f70 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008f6a:	4b16      	ldr	r3, [pc, #88]	; (8008fc4 <xTaskResumeAll+0x12c>)
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	3b01      	subs	r3, #1
 8008f74:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d1f1      	bne.n	8008f60 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8008f7c:	4b12      	ldr	r3, [pc, #72]	; (8008fc8 <xTaskResumeAll+0x130>)
 8008f7e:	2200      	movs	r2, #0
 8008f80:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008f82:	4b10      	ldr	r3, [pc, #64]	; (8008fc4 <xTaskResumeAll+0x12c>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d009      	beq.n	8008f9e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008f8e:	4b0f      	ldr	r3, [pc, #60]	; (8008fcc <xTaskResumeAll+0x134>)
 8008f90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f94:	601a      	str	r2, [r3, #0]
 8008f96:	f3bf 8f4f 	dsb	sy
 8008f9a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f9e:	f000 fd35 	bl	8009a0c <vPortExitCritical>

	return xAlreadyYielded;
 8008fa2:	68bb      	ldr	r3, [r7, #8]
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3710      	adds	r7, #16
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	200008dc 	.word	0x200008dc
 8008fb0:	200008b4 	.word	0x200008b4
 8008fb4:	20000874 	.word	0x20000874
 8008fb8:	200008bc 	.word	0x200008bc
 8008fbc:	200007b8 	.word	0x200007b8
 8008fc0:	200007b4 	.word	0x200007b4
 8008fc4:	200008c8 	.word	0x200008c8
 8008fc8:	200008c4 	.word	0x200008c4
 8008fcc:	e000ed04 	.word	0xe000ed04

08008fd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b086      	sub	sp, #24
 8008fd4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fda:	4b4e      	ldr	r3, [pc, #312]	; (8009114 <xTaskIncrementTick+0x144>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	f040 8088 	bne.w	80090f4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008fe4:	4b4c      	ldr	r3, [pc, #304]	; (8009118 <xTaskIncrementTick+0x148>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	3301      	adds	r3, #1
 8008fea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008fec:	4a4a      	ldr	r2, [pc, #296]	; (8009118 <xTaskIncrementTick+0x148>)
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d120      	bne.n	800903a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008ff8:	4b48      	ldr	r3, [pc, #288]	; (800911c <xTaskIncrementTick+0x14c>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00a      	beq.n	8009018 <xTaskIncrementTick+0x48>
	__asm volatile
 8009002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009006:	f383 8811 	msr	BASEPRI, r3
 800900a:	f3bf 8f6f 	isb	sy
 800900e:	f3bf 8f4f 	dsb	sy
 8009012:	603b      	str	r3, [r7, #0]
}
 8009014:	bf00      	nop
 8009016:	e7fe      	b.n	8009016 <xTaskIncrementTick+0x46>
 8009018:	4b40      	ldr	r3, [pc, #256]	; (800911c <xTaskIncrementTick+0x14c>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	60fb      	str	r3, [r7, #12]
 800901e:	4b40      	ldr	r3, [pc, #256]	; (8009120 <xTaskIncrementTick+0x150>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a3e      	ldr	r2, [pc, #248]	; (800911c <xTaskIncrementTick+0x14c>)
 8009024:	6013      	str	r3, [r2, #0]
 8009026:	4a3e      	ldr	r2, [pc, #248]	; (8009120 <xTaskIncrementTick+0x150>)
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	6013      	str	r3, [r2, #0]
 800902c:	4b3d      	ldr	r3, [pc, #244]	; (8009124 <xTaskIncrementTick+0x154>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	3301      	adds	r3, #1
 8009032:	4a3c      	ldr	r2, [pc, #240]	; (8009124 <xTaskIncrementTick+0x154>)
 8009034:	6013      	str	r3, [r2, #0]
 8009036:	f000 fa9d 	bl	8009574 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800903a:	4b3b      	ldr	r3, [pc, #236]	; (8009128 <xTaskIncrementTick+0x158>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	693a      	ldr	r2, [r7, #16]
 8009040:	429a      	cmp	r2, r3
 8009042:	d348      	bcc.n	80090d6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009044:	4b35      	ldr	r3, [pc, #212]	; (800911c <xTaskIncrementTick+0x14c>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d104      	bne.n	8009058 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800904e:	4b36      	ldr	r3, [pc, #216]	; (8009128 <xTaskIncrementTick+0x158>)
 8009050:	f04f 32ff 	mov.w	r2, #4294967295
 8009054:	601a      	str	r2, [r3, #0]
					break;
 8009056:	e03e      	b.n	80090d6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009058:	4b30      	ldr	r3, [pc, #192]	; (800911c <xTaskIncrementTick+0x14c>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009068:	693a      	ldr	r2, [r7, #16]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	429a      	cmp	r2, r3
 800906e:	d203      	bcs.n	8009078 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009070:	4a2d      	ldr	r2, [pc, #180]	; (8009128 <xTaskIncrementTick+0x158>)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009076:	e02e      	b.n	80090d6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	3304      	adds	r3, #4
 800907c:	4618      	mov	r0, r3
 800907e:	f7fe ff99 	bl	8007fb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009086:	2b00      	cmp	r3, #0
 8009088:	d004      	beq.n	8009094 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	3318      	adds	r3, #24
 800908e:	4618      	mov	r0, r3
 8009090:	f7fe ff90 	bl	8007fb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009098:	2201      	movs	r2, #1
 800909a:	409a      	lsls	r2, r3
 800909c:	4b23      	ldr	r3, [pc, #140]	; (800912c <xTaskIncrementTick+0x15c>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4313      	orrs	r3, r2
 80090a2:	4a22      	ldr	r2, [pc, #136]	; (800912c <xTaskIncrementTick+0x15c>)
 80090a4:	6013      	str	r3, [r2, #0]
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090aa:	4613      	mov	r3, r2
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	4413      	add	r3, r2
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	4a1f      	ldr	r2, [pc, #124]	; (8009130 <xTaskIncrementTick+0x160>)
 80090b4:	441a      	add	r2, r3
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	3304      	adds	r3, #4
 80090ba:	4619      	mov	r1, r3
 80090bc:	4610      	mov	r0, r2
 80090be:	f7fe ff1e 	bl	8007efe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090c6:	4b1b      	ldr	r3, [pc, #108]	; (8009134 <xTaskIncrementTick+0x164>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d3b9      	bcc.n	8009044 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80090d0:	2301      	movs	r3, #1
 80090d2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090d4:	e7b6      	b.n	8009044 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80090d6:	4b17      	ldr	r3, [pc, #92]	; (8009134 <xTaskIncrementTick+0x164>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090dc:	4914      	ldr	r1, [pc, #80]	; (8009130 <xTaskIncrementTick+0x160>)
 80090de:	4613      	mov	r3, r2
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	4413      	add	r3, r2
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	440b      	add	r3, r1
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d907      	bls.n	80090fe <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80090ee:	2301      	movs	r3, #1
 80090f0:	617b      	str	r3, [r7, #20]
 80090f2:	e004      	b.n	80090fe <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80090f4:	4b10      	ldr	r3, [pc, #64]	; (8009138 <xTaskIncrementTick+0x168>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	3301      	adds	r3, #1
 80090fa:	4a0f      	ldr	r2, [pc, #60]	; (8009138 <xTaskIncrementTick+0x168>)
 80090fc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80090fe:	4b0f      	ldr	r3, [pc, #60]	; (800913c <xTaskIncrementTick+0x16c>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d001      	beq.n	800910a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8009106:	2301      	movs	r3, #1
 8009108:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800910a:	697b      	ldr	r3, [r7, #20]
}
 800910c:	4618      	mov	r0, r3
 800910e:	3718      	adds	r7, #24
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}
 8009114:	200008dc 	.word	0x200008dc
 8009118:	200008b8 	.word	0x200008b8
 800911c:	2000086c 	.word	0x2000086c
 8009120:	20000870 	.word	0x20000870
 8009124:	200008cc 	.word	0x200008cc
 8009128:	200008d4 	.word	0x200008d4
 800912c:	200008bc 	.word	0x200008bc
 8009130:	200007b8 	.word	0x200007b8
 8009134:	200007b4 	.word	0x200007b4
 8009138:	200008c4 	.word	0x200008c4
 800913c:	200008c8 	.word	0x200008c8

08009140 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009140:	b480      	push	{r7}
 8009142:	b087      	sub	sp, #28
 8009144:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009146:	4b26      	ldr	r3, [pc, #152]	; (80091e0 <vTaskSwitchContext+0xa0>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d003      	beq.n	8009156 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800914e:	4b25      	ldr	r3, [pc, #148]	; (80091e4 <vTaskSwitchContext+0xa4>)
 8009150:	2201      	movs	r2, #1
 8009152:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009154:	e03f      	b.n	80091d6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8009156:	4b23      	ldr	r3, [pc, #140]	; (80091e4 <vTaskSwitchContext+0xa4>)
 8009158:	2200      	movs	r2, #0
 800915a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800915c:	4b22      	ldr	r3, [pc, #136]	; (80091e8 <vTaskSwitchContext+0xa8>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	fab3 f383 	clz	r3, r3
 8009168:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800916a:	7afb      	ldrb	r3, [r7, #11]
 800916c:	f1c3 031f 	rsb	r3, r3, #31
 8009170:	617b      	str	r3, [r7, #20]
 8009172:	491e      	ldr	r1, [pc, #120]	; (80091ec <vTaskSwitchContext+0xac>)
 8009174:	697a      	ldr	r2, [r7, #20]
 8009176:	4613      	mov	r3, r2
 8009178:	009b      	lsls	r3, r3, #2
 800917a:	4413      	add	r3, r2
 800917c:	009b      	lsls	r3, r3, #2
 800917e:	440b      	add	r3, r1
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d10a      	bne.n	800919c <vTaskSwitchContext+0x5c>
	__asm volatile
 8009186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918a:	f383 8811 	msr	BASEPRI, r3
 800918e:	f3bf 8f6f 	isb	sy
 8009192:	f3bf 8f4f 	dsb	sy
 8009196:	607b      	str	r3, [r7, #4]
}
 8009198:	bf00      	nop
 800919a:	e7fe      	b.n	800919a <vTaskSwitchContext+0x5a>
 800919c:	697a      	ldr	r2, [r7, #20]
 800919e:	4613      	mov	r3, r2
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	4413      	add	r3, r2
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	4a11      	ldr	r2, [pc, #68]	; (80091ec <vTaskSwitchContext+0xac>)
 80091a8:	4413      	add	r3, r2
 80091aa:	613b      	str	r3, [r7, #16]
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	685a      	ldr	r2, [r3, #4]
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	605a      	str	r2, [r3, #4]
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	685a      	ldr	r2, [r3, #4]
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	3308      	adds	r3, #8
 80091be:	429a      	cmp	r2, r3
 80091c0:	d104      	bne.n	80091cc <vTaskSwitchContext+0x8c>
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	685a      	ldr	r2, [r3, #4]
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	605a      	str	r2, [r3, #4]
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	68db      	ldr	r3, [r3, #12]
 80091d2:	4a07      	ldr	r2, [pc, #28]	; (80091f0 <vTaskSwitchContext+0xb0>)
 80091d4:	6013      	str	r3, [r2, #0]
}
 80091d6:	bf00      	nop
 80091d8:	371c      	adds	r7, #28
 80091da:	46bd      	mov	sp, r7
 80091dc:	bc80      	pop	{r7}
 80091de:	4770      	bx	lr
 80091e0:	200008dc 	.word	0x200008dc
 80091e4:	200008c8 	.word	0x200008c8
 80091e8:	200008bc 	.word	0x200008bc
 80091ec:	200007b8 	.word	0x200007b8
 80091f0:	200007b4 	.word	0x200007b4

080091f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d10a      	bne.n	800921a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009208:	f383 8811 	msr	BASEPRI, r3
 800920c:	f3bf 8f6f 	isb	sy
 8009210:	f3bf 8f4f 	dsb	sy
 8009214:	60fb      	str	r3, [r7, #12]
}
 8009216:	bf00      	nop
 8009218:	e7fe      	b.n	8009218 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800921a:	4b07      	ldr	r3, [pc, #28]	; (8009238 <vTaskPlaceOnEventList+0x44>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	3318      	adds	r3, #24
 8009220:	4619      	mov	r1, r3
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f7fe fe8e 	bl	8007f44 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009228:	2101      	movs	r1, #1
 800922a:	6838      	ldr	r0, [r7, #0]
 800922c:	f000 fa66 	bl	80096fc <prvAddCurrentTaskToDelayedList>
}
 8009230:	bf00      	nop
 8009232:	3710      	adds	r7, #16
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}
 8009238:	200007b4 	.word	0x200007b4

0800923c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b086      	sub	sp, #24
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d10a      	bne.n	8009268 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009256:	f383 8811 	msr	BASEPRI, r3
 800925a:	f3bf 8f6f 	isb	sy
 800925e:	f3bf 8f4f 	dsb	sy
 8009262:	60fb      	str	r3, [r7, #12]
}
 8009264:	bf00      	nop
 8009266:	e7fe      	b.n	8009266 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	3318      	adds	r3, #24
 800926c:	4618      	mov	r0, r3
 800926e:	f7fe fea1 	bl	8007fb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009272:	4b1d      	ldr	r3, [pc, #116]	; (80092e8 <xTaskRemoveFromEventList+0xac>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d11c      	bne.n	80092b4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	3304      	adds	r3, #4
 800927e:	4618      	mov	r0, r3
 8009280:	f7fe fe98 	bl	8007fb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009288:	2201      	movs	r2, #1
 800928a:	409a      	lsls	r2, r3
 800928c:	4b17      	ldr	r3, [pc, #92]	; (80092ec <xTaskRemoveFromEventList+0xb0>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4313      	orrs	r3, r2
 8009292:	4a16      	ldr	r2, [pc, #88]	; (80092ec <xTaskRemoveFromEventList+0xb0>)
 8009294:	6013      	str	r3, [r2, #0]
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800929a:	4613      	mov	r3, r2
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	4413      	add	r3, r2
 80092a0:	009b      	lsls	r3, r3, #2
 80092a2:	4a13      	ldr	r2, [pc, #76]	; (80092f0 <xTaskRemoveFromEventList+0xb4>)
 80092a4:	441a      	add	r2, r3
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	3304      	adds	r3, #4
 80092aa:	4619      	mov	r1, r3
 80092ac:	4610      	mov	r0, r2
 80092ae:	f7fe fe26 	bl	8007efe <vListInsertEnd>
 80092b2:	e005      	b.n	80092c0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	3318      	adds	r3, #24
 80092b8:	4619      	mov	r1, r3
 80092ba:	480e      	ldr	r0, [pc, #56]	; (80092f4 <xTaskRemoveFromEventList+0xb8>)
 80092bc:	f7fe fe1f 	bl	8007efe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092c4:	4b0c      	ldr	r3, [pc, #48]	; (80092f8 <xTaskRemoveFromEventList+0xbc>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d905      	bls.n	80092da <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80092ce:	2301      	movs	r3, #1
 80092d0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80092d2:	4b0a      	ldr	r3, [pc, #40]	; (80092fc <xTaskRemoveFromEventList+0xc0>)
 80092d4:	2201      	movs	r2, #1
 80092d6:	601a      	str	r2, [r3, #0]
 80092d8:	e001      	b.n	80092de <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80092da:	2300      	movs	r3, #0
 80092dc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80092de:	697b      	ldr	r3, [r7, #20]
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3718      	adds	r7, #24
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	200008dc 	.word	0x200008dc
 80092ec:	200008bc 	.word	0x200008bc
 80092f0:	200007b8 	.word	0x200007b8
 80092f4:	20000874 	.word	0x20000874
 80092f8:	200007b4 	.word	0x200007b4
 80092fc:	200008c8 	.word	0x200008c8

08009300 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009300:	b480      	push	{r7}
 8009302:	b083      	sub	sp, #12
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009308:	4b06      	ldr	r3, [pc, #24]	; (8009324 <vTaskInternalSetTimeOutState+0x24>)
 800930a:	681a      	ldr	r2, [r3, #0]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009310:	4b05      	ldr	r3, [pc, #20]	; (8009328 <vTaskInternalSetTimeOutState+0x28>)
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	605a      	str	r2, [r3, #4]
}
 8009318:	bf00      	nop
 800931a:	370c      	adds	r7, #12
 800931c:	46bd      	mov	sp, r7
 800931e:	bc80      	pop	{r7}
 8009320:	4770      	bx	lr
 8009322:	bf00      	nop
 8009324:	200008cc 	.word	0x200008cc
 8009328:	200008b8 	.word	0x200008b8

0800932c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b088      	sub	sp, #32
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d10a      	bne.n	8009352 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800933c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009340:	f383 8811 	msr	BASEPRI, r3
 8009344:	f3bf 8f6f 	isb	sy
 8009348:	f3bf 8f4f 	dsb	sy
 800934c:	613b      	str	r3, [r7, #16]
}
 800934e:	bf00      	nop
 8009350:	e7fe      	b.n	8009350 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d10a      	bne.n	800936e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800935c:	f383 8811 	msr	BASEPRI, r3
 8009360:	f3bf 8f6f 	isb	sy
 8009364:	f3bf 8f4f 	dsb	sy
 8009368:	60fb      	str	r3, [r7, #12]
}
 800936a:	bf00      	nop
 800936c:	e7fe      	b.n	800936c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800936e:	f000 fb1d 	bl	80099ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009372:	4b1d      	ldr	r3, [pc, #116]	; (80093e8 <xTaskCheckForTimeOut+0xbc>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	69ba      	ldr	r2, [r7, #24]
 800937e:	1ad3      	subs	r3, r2, r3
 8009380:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800938a:	d102      	bne.n	8009392 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800938c:	2300      	movs	r3, #0
 800938e:	61fb      	str	r3, [r7, #28]
 8009390:	e023      	b.n	80093da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	4b15      	ldr	r3, [pc, #84]	; (80093ec <xTaskCheckForTimeOut+0xc0>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	429a      	cmp	r2, r3
 800939c:	d007      	beq.n	80093ae <xTaskCheckForTimeOut+0x82>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	69ba      	ldr	r2, [r7, #24]
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d302      	bcc.n	80093ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80093a8:	2301      	movs	r3, #1
 80093aa:	61fb      	str	r3, [r7, #28]
 80093ac:	e015      	b.n	80093da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	697a      	ldr	r2, [r7, #20]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d20b      	bcs.n	80093d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	681a      	ldr	r2, [r3, #0]
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	1ad2      	subs	r2, r2, r3
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f7ff ff9b 	bl	8009300 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80093ca:	2300      	movs	r3, #0
 80093cc:	61fb      	str	r3, [r7, #28]
 80093ce:	e004      	b.n	80093da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	2200      	movs	r2, #0
 80093d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80093d6:	2301      	movs	r3, #1
 80093d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80093da:	f000 fb17 	bl	8009a0c <vPortExitCritical>

	return xReturn;
 80093de:	69fb      	ldr	r3, [r7, #28]
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3720      	adds	r7, #32
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}
 80093e8:	200008b8 	.word	0x200008b8
 80093ec:	200008cc 	.word	0x200008cc

080093f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80093f0:	b480      	push	{r7}
 80093f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80093f4:	4b03      	ldr	r3, [pc, #12]	; (8009404 <vTaskMissedYield+0x14>)
 80093f6:	2201      	movs	r2, #1
 80093f8:	601a      	str	r2, [r3, #0]
}
 80093fa:	bf00      	nop
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bc80      	pop	{r7}
 8009400:	4770      	bx	lr
 8009402:	bf00      	nop
 8009404:	200008c8 	.word	0x200008c8

08009408 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009410:	f000 f852 	bl	80094b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009414:	4b06      	ldr	r3, [pc, #24]	; (8009430 <prvIdleTask+0x28>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2b01      	cmp	r3, #1
 800941a:	d9f9      	bls.n	8009410 <prvIdleTask+0x8>
			{
				taskYIELD();
 800941c:	4b05      	ldr	r3, [pc, #20]	; (8009434 <prvIdleTask+0x2c>)
 800941e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009422:	601a      	str	r2, [r3, #0]
 8009424:	f3bf 8f4f 	dsb	sy
 8009428:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800942c:	e7f0      	b.n	8009410 <prvIdleTask+0x8>
 800942e:	bf00      	nop
 8009430:	200007b8 	.word	0x200007b8
 8009434:	e000ed04 	.word	0xe000ed04

08009438 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800943e:	2300      	movs	r3, #0
 8009440:	607b      	str	r3, [r7, #4]
 8009442:	e00c      	b.n	800945e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	4613      	mov	r3, r2
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	4413      	add	r3, r2
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	4a12      	ldr	r2, [pc, #72]	; (8009498 <prvInitialiseTaskLists+0x60>)
 8009450:	4413      	add	r3, r2
 8009452:	4618      	mov	r0, r3
 8009454:	f7fe fd28 	bl	8007ea8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	3301      	adds	r3, #1
 800945c:	607b      	str	r3, [r7, #4]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2b06      	cmp	r3, #6
 8009462:	d9ef      	bls.n	8009444 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009464:	480d      	ldr	r0, [pc, #52]	; (800949c <prvInitialiseTaskLists+0x64>)
 8009466:	f7fe fd1f 	bl	8007ea8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800946a:	480d      	ldr	r0, [pc, #52]	; (80094a0 <prvInitialiseTaskLists+0x68>)
 800946c:	f7fe fd1c 	bl	8007ea8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009470:	480c      	ldr	r0, [pc, #48]	; (80094a4 <prvInitialiseTaskLists+0x6c>)
 8009472:	f7fe fd19 	bl	8007ea8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009476:	480c      	ldr	r0, [pc, #48]	; (80094a8 <prvInitialiseTaskLists+0x70>)
 8009478:	f7fe fd16 	bl	8007ea8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800947c:	480b      	ldr	r0, [pc, #44]	; (80094ac <prvInitialiseTaskLists+0x74>)
 800947e:	f7fe fd13 	bl	8007ea8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009482:	4b0b      	ldr	r3, [pc, #44]	; (80094b0 <prvInitialiseTaskLists+0x78>)
 8009484:	4a05      	ldr	r2, [pc, #20]	; (800949c <prvInitialiseTaskLists+0x64>)
 8009486:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009488:	4b0a      	ldr	r3, [pc, #40]	; (80094b4 <prvInitialiseTaskLists+0x7c>)
 800948a:	4a05      	ldr	r2, [pc, #20]	; (80094a0 <prvInitialiseTaskLists+0x68>)
 800948c:	601a      	str	r2, [r3, #0]
}
 800948e:	bf00      	nop
 8009490:	3708      	adds	r7, #8
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	200007b8 	.word	0x200007b8
 800949c:	20000844 	.word	0x20000844
 80094a0:	20000858 	.word	0x20000858
 80094a4:	20000874 	.word	0x20000874
 80094a8:	20000888 	.word	0x20000888
 80094ac:	200008a0 	.word	0x200008a0
 80094b0:	2000086c 	.word	0x2000086c
 80094b4:	20000870 	.word	0x20000870

080094b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094be:	e019      	b.n	80094f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80094c0:	f000 fa74 	bl	80099ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094c4:	4b10      	ldr	r3, [pc, #64]	; (8009508 <prvCheckTasksWaitingTermination+0x50>)
 80094c6:	68db      	ldr	r3, [r3, #12]
 80094c8:	68db      	ldr	r3, [r3, #12]
 80094ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	3304      	adds	r3, #4
 80094d0:	4618      	mov	r0, r3
 80094d2:	f7fe fd6f 	bl	8007fb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80094d6:	4b0d      	ldr	r3, [pc, #52]	; (800950c <prvCheckTasksWaitingTermination+0x54>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	3b01      	subs	r3, #1
 80094dc:	4a0b      	ldr	r2, [pc, #44]	; (800950c <prvCheckTasksWaitingTermination+0x54>)
 80094de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80094e0:	4b0b      	ldr	r3, [pc, #44]	; (8009510 <prvCheckTasksWaitingTermination+0x58>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	3b01      	subs	r3, #1
 80094e6:	4a0a      	ldr	r2, [pc, #40]	; (8009510 <prvCheckTasksWaitingTermination+0x58>)
 80094e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80094ea:	f000 fa8f 	bl	8009a0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 f810 	bl	8009514 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094f4:	4b06      	ldr	r3, [pc, #24]	; (8009510 <prvCheckTasksWaitingTermination+0x58>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d1e1      	bne.n	80094c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80094fc:	bf00      	nop
 80094fe:	bf00      	nop
 8009500:	3708      	adds	r7, #8
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	20000888 	.word	0x20000888
 800950c:	200008b4 	.word	0x200008b4
 8009510:	2000089c 	.word	0x2000089c

08009514 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009522:	2b00      	cmp	r3, #0
 8009524:	d108      	bne.n	8009538 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800952a:	4618      	mov	r0, r3
 800952c:	f000 fc02 	bl	8009d34 <vPortFree>
				vPortFree( pxTCB );
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 fbff 	bl	8009d34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009536:	e018      	b.n	800956a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800953e:	2b01      	cmp	r3, #1
 8009540:	d103      	bne.n	800954a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 fbf6 	bl	8009d34 <vPortFree>
	}
 8009548:	e00f      	b.n	800956a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009550:	2b02      	cmp	r3, #2
 8009552:	d00a      	beq.n	800956a <prvDeleteTCB+0x56>
	__asm volatile
 8009554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009558:	f383 8811 	msr	BASEPRI, r3
 800955c:	f3bf 8f6f 	isb	sy
 8009560:	f3bf 8f4f 	dsb	sy
 8009564:	60fb      	str	r3, [r7, #12]
}
 8009566:	bf00      	nop
 8009568:	e7fe      	b.n	8009568 <prvDeleteTCB+0x54>
	}
 800956a:	bf00      	nop
 800956c:	3710      	adds	r7, #16
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}
	...

08009574 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800957a:	4b0c      	ldr	r3, [pc, #48]	; (80095ac <prvResetNextTaskUnblockTime+0x38>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d104      	bne.n	800958e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009584:	4b0a      	ldr	r3, [pc, #40]	; (80095b0 <prvResetNextTaskUnblockTime+0x3c>)
 8009586:	f04f 32ff 	mov.w	r2, #4294967295
 800958a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800958c:	e008      	b.n	80095a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800958e:	4b07      	ldr	r3, [pc, #28]	; (80095ac <prvResetNextTaskUnblockTime+0x38>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	68db      	ldr	r3, [r3, #12]
 8009594:	68db      	ldr	r3, [r3, #12]
 8009596:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	4a04      	ldr	r2, [pc, #16]	; (80095b0 <prvResetNextTaskUnblockTime+0x3c>)
 800959e:	6013      	str	r3, [r2, #0]
}
 80095a0:	bf00      	nop
 80095a2:	370c      	adds	r7, #12
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bc80      	pop	{r7}
 80095a8:	4770      	bx	lr
 80095aa:	bf00      	nop
 80095ac:	2000086c 	.word	0x2000086c
 80095b0:	200008d4 	.word	0x200008d4

080095b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80095ba:	4b0b      	ldr	r3, [pc, #44]	; (80095e8 <xTaskGetSchedulerState+0x34>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d102      	bne.n	80095c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80095c2:	2301      	movs	r3, #1
 80095c4:	607b      	str	r3, [r7, #4]
 80095c6:	e008      	b.n	80095da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095c8:	4b08      	ldr	r3, [pc, #32]	; (80095ec <xTaskGetSchedulerState+0x38>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d102      	bne.n	80095d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80095d0:	2302      	movs	r3, #2
 80095d2:	607b      	str	r3, [r7, #4]
 80095d4:	e001      	b.n	80095da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80095d6:	2300      	movs	r3, #0
 80095d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80095da:	687b      	ldr	r3, [r7, #4]
	}
 80095dc:	4618      	mov	r0, r3
 80095de:	370c      	adds	r7, #12
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bc80      	pop	{r7}
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop
 80095e8:	200008c0 	.word	0x200008c0
 80095ec:	200008dc 	.word	0x200008dc

080095f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b086      	sub	sp, #24
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80095fc:	2300      	movs	r3, #0
 80095fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d06e      	beq.n	80096e4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009606:	4b3a      	ldr	r3, [pc, #232]	; (80096f0 <xTaskPriorityDisinherit+0x100>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	693a      	ldr	r2, [r7, #16]
 800960c:	429a      	cmp	r2, r3
 800960e:	d00a      	beq.n	8009626 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009614:	f383 8811 	msr	BASEPRI, r3
 8009618:	f3bf 8f6f 	isb	sy
 800961c:	f3bf 8f4f 	dsb	sy
 8009620:	60fb      	str	r3, [r7, #12]
}
 8009622:	bf00      	nop
 8009624:	e7fe      	b.n	8009624 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800962a:	2b00      	cmp	r3, #0
 800962c:	d10a      	bne.n	8009644 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800962e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009632:	f383 8811 	msr	BASEPRI, r3
 8009636:	f3bf 8f6f 	isb	sy
 800963a:	f3bf 8f4f 	dsb	sy
 800963e:	60bb      	str	r3, [r7, #8]
}
 8009640:	bf00      	nop
 8009642:	e7fe      	b.n	8009642 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009648:	1e5a      	subs	r2, r3, #1
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009656:	429a      	cmp	r2, r3
 8009658:	d044      	beq.n	80096e4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800965e:	2b00      	cmp	r3, #0
 8009660:	d140      	bne.n	80096e4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	3304      	adds	r3, #4
 8009666:	4618      	mov	r0, r3
 8009668:	f7fe fca4 	bl	8007fb4 <uxListRemove>
 800966c:	4603      	mov	r3, r0
 800966e:	2b00      	cmp	r3, #0
 8009670:	d115      	bne.n	800969e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009676:	491f      	ldr	r1, [pc, #124]	; (80096f4 <xTaskPriorityDisinherit+0x104>)
 8009678:	4613      	mov	r3, r2
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	4413      	add	r3, r2
 800967e:	009b      	lsls	r3, r3, #2
 8009680:	440b      	add	r3, r1
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d10a      	bne.n	800969e <xTaskPriorityDisinherit+0xae>
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800968c:	2201      	movs	r2, #1
 800968e:	fa02 f303 	lsl.w	r3, r2, r3
 8009692:	43da      	mvns	r2, r3
 8009694:	4b18      	ldr	r3, [pc, #96]	; (80096f8 <xTaskPriorityDisinherit+0x108>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4013      	ands	r3, r2
 800969a:	4a17      	ldr	r2, [pc, #92]	; (80096f8 <xTaskPriorityDisinherit+0x108>)
 800969c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096aa:	f1c3 0207 	rsb	r2, r3, #7
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b6:	2201      	movs	r2, #1
 80096b8:	409a      	lsls	r2, r3
 80096ba:	4b0f      	ldr	r3, [pc, #60]	; (80096f8 <xTaskPriorityDisinherit+0x108>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4313      	orrs	r3, r2
 80096c0:	4a0d      	ldr	r2, [pc, #52]	; (80096f8 <xTaskPriorityDisinherit+0x108>)
 80096c2:	6013      	str	r3, [r2, #0]
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096c8:	4613      	mov	r3, r2
 80096ca:	009b      	lsls	r3, r3, #2
 80096cc:	4413      	add	r3, r2
 80096ce:	009b      	lsls	r3, r3, #2
 80096d0:	4a08      	ldr	r2, [pc, #32]	; (80096f4 <xTaskPriorityDisinherit+0x104>)
 80096d2:	441a      	add	r2, r3
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	3304      	adds	r3, #4
 80096d8:	4619      	mov	r1, r3
 80096da:	4610      	mov	r0, r2
 80096dc:	f7fe fc0f 	bl	8007efe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80096e0:	2301      	movs	r3, #1
 80096e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80096e4:	697b      	ldr	r3, [r7, #20]
	}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3718      	adds	r7, #24
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	200007b4 	.word	0x200007b4
 80096f4:	200007b8 	.word	0x200007b8
 80096f8:	200008bc 	.word	0x200008bc

080096fc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b084      	sub	sp, #16
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009706:	4b29      	ldr	r3, [pc, #164]	; (80097ac <prvAddCurrentTaskToDelayedList+0xb0>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800970c:	4b28      	ldr	r3, [pc, #160]	; (80097b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	3304      	adds	r3, #4
 8009712:	4618      	mov	r0, r3
 8009714:	f7fe fc4e 	bl	8007fb4 <uxListRemove>
 8009718:	4603      	mov	r3, r0
 800971a:	2b00      	cmp	r3, #0
 800971c:	d10b      	bne.n	8009736 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800971e:	4b24      	ldr	r3, [pc, #144]	; (80097b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009724:	2201      	movs	r2, #1
 8009726:	fa02 f303 	lsl.w	r3, r2, r3
 800972a:	43da      	mvns	r2, r3
 800972c:	4b21      	ldr	r3, [pc, #132]	; (80097b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4013      	ands	r3, r2
 8009732:	4a20      	ldr	r2, [pc, #128]	; (80097b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009734:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800973c:	d10a      	bne.n	8009754 <prvAddCurrentTaskToDelayedList+0x58>
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d007      	beq.n	8009754 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009744:	4b1a      	ldr	r3, [pc, #104]	; (80097b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	3304      	adds	r3, #4
 800974a:	4619      	mov	r1, r3
 800974c:	481a      	ldr	r0, [pc, #104]	; (80097b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800974e:	f7fe fbd6 	bl	8007efe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009752:	e026      	b.n	80097a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009754:	68fa      	ldr	r2, [r7, #12]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	4413      	add	r3, r2
 800975a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800975c:	4b14      	ldr	r3, [pc, #80]	; (80097b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	68ba      	ldr	r2, [r7, #8]
 8009762:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009764:	68ba      	ldr	r2, [r7, #8]
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	429a      	cmp	r2, r3
 800976a:	d209      	bcs.n	8009780 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800976c:	4b13      	ldr	r3, [pc, #76]	; (80097bc <prvAddCurrentTaskToDelayedList+0xc0>)
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	4b0f      	ldr	r3, [pc, #60]	; (80097b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	3304      	adds	r3, #4
 8009776:	4619      	mov	r1, r3
 8009778:	4610      	mov	r0, r2
 800977a:	f7fe fbe3 	bl	8007f44 <vListInsert>
}
 800977e:	e010      	b.n	80097a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009780:	4b0f      	ldr	r3, [pc, #60]	; (80097c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	4b0a      	ldr	r3, [pc, #40]	; (80097b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	3304      	adds	r3, #4
 800978a:	4619      	mov	r1, r3
 800978c:	4610      	mov	r0, r2
 800978e:	f7fe fbd9 	bl	8007f44 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009792:	4b0c      	ldr	r3, [pc, #48]	; (80097c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	68ba      	ldr	r2, [r7, #8]
 8009798:	429a      	cmp	r2, r3
 800979a:	d202      	bcs.n	80097a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800979c:	4a09      	ldr	r2, [pc, #36]	; (80097c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	6013      	str	r3, [r2, #0]
}
 80097a2:	bf00      	nop
 80097a4:	3710      	adds	r7, #16
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
 80097aa:	bf00      	nop
 80097ac:	200008b8 	.word	0x200008b8
 80097b0:	200007b4 	.word	0x200007b4
 80097b4:	200008bc 	.word	0x200008bc
 80097b8:	200008a0 	.word	0x200008a0
 80097bc:	20000870 	.word	0x20000870
 80097c0:	2000086c 	.word	0x2000086c
 80097c4:	200008d4 	.word	0x200008d4

080097c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80097c8:	b480      	push	{r7}
 80097ca:	b085      	sub	sp, #20
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	60b9      	str	r1, [r7, #8]
 80097d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	3b04      	subs	r3, #4
 80097d8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80097e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	3b04      	subs	r3, #4
 80097e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	f023 0201 	bic.w	r2, r3, #1
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	3b04      	subs	r3, #4
 80097f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80097f8:	4a08      	ldr	r2, [pc, #32]	; (800981c <pxPortInitialiseStack+0x54>)
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	3b14      	subs	r3, #20
 8009802:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	3b20      	subs	r3, #32
 800980e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009810:	68fb      	ldr	r3, [r7, #12]
}
 8009812:	4618      	mov	r0, r3
 8009814:	3714      	adds	r7, #20
 8009816:	46bd      	mov	sp, r7
 8009818:	bc80      	pop	{r7}
 800981a:	4770      	bx	lr
 800981c:	08009821 	.word	0x08009821

08009820 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009820:	b480      	push	{r7}
 8009822:	b085      	sub	sp, #20
 8009824:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009826:	2300      	movs	r3, #0
 8009828:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800982a:	4b12      	ldr	r3, [pc, #72]	; (8009874 <prvTaskExitError+0x54>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009832:	d00a      	beq.n	800984a <prvTaskExitError+0x2a>
	__asm volatile
 8009834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009838:	f383 8811 	msr	BASEPRI, r3
 800983c:	f3bf 8f6f 	isb	sy
 8009840:	f3bf 8f4f 	dsb	sy
 8009844:	60fb      	str	r3, [r7, #12]
}
 8009846:	bf00      	nop
 8009848:	e7fe      	b.n	8009848 <prvTaskExitError+0x28>
	__asm volatile
 800984a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800984e:	f383 8811 	msr	BASEPRI, r3
 8009852:	f3bf 8f6f 	isb	sy
 8009856:	f3bf 8f4f 	dsb	sy
 800985a:	60bb      	str	r3, [r7, #8]
}
 800985c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800985e:	bf00      	nop
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d0fc      	beq.n	8009860 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009866:	bf00      	nop
 8009868:	bf00      	nop
 800986a:	3714      	adds	r7, #20
 800986c:	46bd      	mov	sp, r7
 800986e:	bc80      	pop	{r7}
 8009870:	4770      	bx	lr
 8009872:	bf00      	nop
 8009874:	2000000c 	.word	0x2000000c
	...

08009880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009880:	4b07      	ldr	r3, [pc, #28]	; (80098a0 <pxCurrentTCBConst2>)
 8009882:	6819      	ldr	r1, [r3, #0]
 8009884:	6808      	ldr	r0, [r1, #0]
 8009886:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800988a:	f380 8809 	msr	PSP, r0
 800988e:	f3bf 8f6f 	isb	sy
 8009892:	f04f 0000 	mov.w	r0, #0
 8009896:	f380 8811 	msr	BASEPRI, r0
 800989a:	f04e 0e0d 	orr.w	lr, lr, #13
 800989e:	4770      	bx	lr

080098a0 <pxCurrentTCBConst2>:
 80098a0:	200007b4 	.word	0x200007b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80098a4:	bf00      	nop
 80098a6:	bf00      	nop

080098a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80098a8:	4806      	ldr	r0, [pc, #24]	; (80098c4 <prvPortStartFirstTask+0x1c>)
 80098aa:	6800      	ldr	r0, [r0, #0]
 80098ac:	6800      	ldr	r0, [r0, #0]
 80098ae:	f380 8808 	msr	MSP, r0
 80098b2:	b662      	cpsie	i
 80098b4:	b661      	cpsie	f
 80098b6:	f3bf 8f4f 	dsb	sy
 80098ba:	f3bf 8f6f 	isb	sy
 80098be:	df00      	svc	0
 80098c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80098c2:	bf00      	nop
 80098c4:	e000ed08 	.word	0xe000ed08

080098c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80098ce:	4b32      	ldr	r3, [pc, #200]	; (8009998 <xPortStartScheduler+0xd0>)
 80098d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	22ff      	movs	r2, #255	; 0xff
 80098de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	b2db      	uxtb	r3, r3
 80098e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80098e8:	78fb      	ldrb	r3, [r7, #3]
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80098f0:	b2da      	uxtb	r2, r3
 80098f2:	4b2a      	ldr	r3, [pc, #168]	; (800999c <xPortStartScheduler+0xd4>)
 80098f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80098f6:	4b2a      	ldr	r3, [pc, #168]	; (80099a0 <xPortStartScheduler+0xd8>)
 80098f8:	2207      	movs	r2, #7
 80098fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80098fc:	e009      	b.n	8009912 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80098fe:	4b28      	ldr	r3, [pc, #160]	; (80099a0 <xPortStartScheduler+0xd8>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	3b01      	subs	r3, #1
 8009904:	4a26      	ldr	r2, [pc, #152]	; (80099a0 <xPortStartScheduler+0xd8>)
 8009906:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009908:	78fb      	ldrb	r3, [r7, #3]
 800990a:	b2db      	uxtb	r3, r3
 800990c:	005b      	lsls	r3, r3, #1
 800990e:	b2db      	uxtb	r3, r3
 8009910:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009912:	78fb      	ldrb	r3, [r7, #3]
 8009914:	b2db      	uxtb	r3, r3
 8009916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800991a:	2b80      	cmp	r3, #128	; 0x80
 800991c:	d0ef      	beq.n	80098fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800991e:	4b20      	ldr	r3, [pc, #128]	; (80099a0 <xPortStartScheduler+0xd8>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f1c3 0307 	rsb	r3, r3, #7
 8009926:	2b04      	cmp	r3, #4
 8009928:	d00a      	beq.n	8009940 <xPortStartScheduler+0x78>
	__asm volatile
 800992a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800992e:	f383 8811 	msr	BASEPRI, r3
 8009932:	f3bf 8f6f 	isb	sy
 8009936:	f3bf 8f4f 	dsb	sy
 800993a:	60bb      	str	r3, [r7, #8]
}
 800993c:	bf00      	nop
 800993e:	e7fe      	b.n	800993e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009940:	4b17      	ldr	r3, [pc, #92]	; (80099a0 <xPortStartScheduler+0xd8>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	021b      	lsls	r3, r3, #8
 8009946:	4a16      	ldr	r2, [pc, #88]	; (80099a0 <xPortStartScheduler+0xd8>)
 8009948:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800994a:	4b15      	ldr	r3, [pc, #84]	; (80099a0 <xPortStartScheduler+0xd8>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009952:	4a13      	ldr	r2, [pc, #76]	; (80099a0 <xPortStartScheduler+0xd8>)
 8009954:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	b2da      	uxtb	r2, r3
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800995e:	4b11      	ldr	r3, [pc, #68]	; (80099a4 <xPortStartScheduler+0xdc>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a10      	ldr	r2, [pc, #64]	; (80099a4 <xPortStartScheduler+0xdc>)
 8009964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009968:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800996a:	4b0e      	ldr	r3, [pc, #56]	; (80099a4 <xPortStartScheduler+0xdc>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a0d      	ldr	r2, [pc, #52]	; (80099a4 <xPortStartScheduler+0xdc>)
 8009970:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009974:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009976:	f000 f8b9 	bl	8009aec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800997a:	4b0b      	ldr	r3, [pc, #44]	; (80099a8 <xPortStartScheduler+0xe0>)
 800997c:	2200      	movs	r2, #0
 800997e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009980:	f7ff ff92 	bl	80098a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009984:	f7ff fbdc 	bl	8009140 <vTaskSwitchContext>
	prvTaskExitError();
 8009988:	f7ff ff4a 	bl	8009820 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800998c:	2300      	movs	r3, #0
}
 800998e:	4618      	mov	r0, r3
 8009990:	3710      	adds	r7, #16
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	e000e400 	.word	0xe000e400
 800999c:	200008e0 	.word	0x200008e0
 80099a0:	200008e4 	.word	0x200008e4
 80099a4:	e000ed20 	.word	0xe000ed20
 80099a8:	2000000c 	.word	0x2000000c

080099ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80099ac:	b480      	push	{r7}
 80099ae:	b083      	sub	sp, #12
 80099b0:	af00      	add	r7, sp, #0
	__asm volatile
 80099b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b6:	f383 8811 	msr	BASEPRI, r3
 80099ba:	f3bf 8f6f 	isb	sy
 80099be:	f3bf 8f4f 	dsb	sy
 80099c2:	607b      	str	r3, [r7, #4]
}
 80099c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80099c6:	4b0f      	ldr	r3, [pc, #60]	; (8009a04 <vPortEnterCritical+0x58>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	3301      	adds	r3, #1
 80099cc:	4a0d      	ldr	r2, [pc, #52]	; (8009a04 <vPortEnterCritical+0x58>)
 80099ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80099d0:	4b0c      	ldr	r3, [pc, #48]	; (8009a04 <vPortEnterCritical+0x58>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	d10f      	bne.n	80099f8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80099d8:	4b0b      	ldr	r3, [pc, #44]	; (8009a08 <vPortEnterCritical+0x5c>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d00a      	beq.n	80099f8 <vPortEnterCritical+0x4c>
	__asm volatile
 80099e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e6:	f383 8811 	msr	BASEPRI, r3
 80099ea:	f3bf 8f6f 	isb	sy
 80099ee:	f3bf 8f4f 	dsb	sy
 80099f2:	603b      	str	r3, [r7, #0]
}
 80099f4:	bf00      	nop
 80099f6:	e7fe      	b.n	80099f6 <vPortEnterCritical+0x4a>
	}
}
 80099f8:	bf00      	nop
 80099fa:	370c      	adds	r7, #12
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bc80      	pop	{r7}
 8009a00:	4770      	bx	lr
 8009a02:	bf00      	nop
 8009a04:	2000000c 	.word	0x2000000c
 8009a08:	e000ed04 	.word	0xe000ed04

08009a0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009a12:	4b11      	ldr	r3, [pc, #68]	; (8009a58 <vPortExitCritical+0x4c>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d10a      	bne.n	8009a30 <vPortExitCritical+0x24>
	__asm volatile
 8009a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1e:	f383 8811 	msr	BASEPRI, r3
 8009a22:	f3bf 8f6f 	isb	sy
 8009a26:	f3bf 8f4f 	dsb	sy
 8009a2a:	607b      	str	r3, [r7, #4]
}
 8009a2c:	bf00      	nop
 8009a2e:	e7fe      	b.n	8009a2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009a30:	4b09      	ldr	r3, [pc, #36]	; (8009a58 <vPortExitCritical+0x4c>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	3b01      	subs	r3, #1
 8009a36:	4a08      	ldr	r2, [pc, #32]	; (8009a58 <vPortExitCritical+0x4c>)
 8009a38:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009a3a:	4b07      	ldr	r3, [pc, #28]	; (8009a58 <vPortExitCritical+0x4c>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d105      	bne.n	8009a4e <vPortExitCritical+0x42>
 8009a42:	2300      	movs	r3, #0
 8009a44:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	f383 8811 	msr	BASEPRI, r3
}
 8009a4c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009a4e:	bf00      	nop
 8009a50:	370c      	adds	r7, #12
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bc80      	pop	{r7}
 8009a56:	4770      	bx	lr
 8009a58:	2000000c 	.word	0x2000000c
 8009a5c:	00000000 	.word	0x00000000

08009a60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009a60:	f3ef 8009 	mrs	r0, PSP
 8009a64:	f3bf 8f6f 	isb	sy
 8009a68:	4b0d      	ldr	r3, [pc, #52]	; (8009aa0 <pxCurrentTCBConst>)
 8009a6a:	681a      	ldr	r2, [r3, #0]
 8009a6c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009a70:	6010      	str	r0, [r2, #0]
 8009a72:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009a76:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009a7a:	f380 8811 	msr	BASEPRI, r0
 8009a7e:	f7ff fb5f 	bl	8009140 <vTaskSwitchContext>
 8009a82:	f04f 0000 	mov.w	r0, #0
 8009a86:	f380 8811 	msr	BASEPRI, r0
 8009a8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009a8e:	6819      	ldr	r1, [r3, #0]
 8009a90:	6808      	ldr	r0, [r1, #0]
 8009a92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009a96:	f380 8809 	msr	PSP, r0
 8009a9a:	f3bf 8f6f 	isb	sy
 8009a9e:	4770      	bx	lr

08009aa0 <pxCurrentTCBConst>:
 8009aa0:	200007b4 	.word	0x200007b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009aa4:	bf00      	nop
 8009aa6:	bf00      	nop

08009aa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
	__asm volatile
 8009aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab2:	f383 8811 	msr	BASEPRI, r3
 8009ab6:	f3bf 8f6f 	isb	sy
 8009aba:	f3bf 8f4f 	dsb	sy
 8009abe:	607b      	str	r3, [r7, #4]
}
 8009ac0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009ac2:	f7ff fa85 	bl	8008fd0 <xTaskIncrementTick>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d003      	beq.n	8009ad4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009acc:	4b06      	ldr	r3, [pc, #24]	; (8009ae8 <SysTick_Handler+0x40>)
 8009ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ad2:	601a      	str	r2, [r3, #0]
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	f383 8811 	msr	BASEPRI, r3
}
 8009ade:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009ae0:	bf00      	nop
 8009ae2:	3708      	adds	r7, #8
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}
 8009ae8:	e000ed04 	.word	0xe000ed04

08009aec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009aec:	b480      	push	{r7}
 8009aee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009af0:	4b0a      	ldr	r3, [pc, #40]	; (8009b1c <vPortSetupTimerInterrupt+0x30>)
 8009af2:	2200      	movs	r2, #0
 8009af4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009af6:	4b0a      	ldr	r3, [pc, #40]	; (8009b20 <vPortSetupTimerInterrupt+0x34>)
 8009af8:	2200      	movs	r2, #0
 8009afa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009afc:	4b09      	ldr	r3, [pc, #36]	; (8009b24 <vPortSetupTimerInterrupt+0x38>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a09      	ldr	r2, [pc, #36]	; (8009b28 <vPortSetupTimerInterrupt+0x3c>)
 8009b02:	fba2 2303 	umull	r2, r3, r2, r3
 8009b06:	099b      	lsrs	r3, r3, #6
 8009b08:	4a08      	ldr	r2, [pc, #32]	; (8009b2c <vPortSetupTimerInterrupt+0x40>)
 8009b0a:	3b01      	subs	r3, #1
 8009b0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009b0e:	4b03      	ldr	r3, [pc, #12]	; (8009b1c <vPortSetupTimerInterrupt+0x30>)
 8009b10:	2207      	movs	r2, #7
 8009b12:	601a      	str	r2, [r3, #0]
}
 8009b14:	bf00      	nop
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bc80      	pop	{r7}
 8009b1a:	4770      	bx	lr
 8009b1c:	e000e010 	.word	0xe000e010
 8009b20:	e000e018 	.word	0xe000e018
 8009b24:	20000000 	.word	0x20000000
 8009b28:	10624dd3 	.word	0x10624dd3
 8009b2c:	e000e014 	.word	0xe000e014

08009b30 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009b30:	b480      	push	{r7}
 8009b32:	b085      	sub	sp, #20
 8009b34:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009b36:	f3ef 8305 	mrs	r3, IPSR
 8009b3a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2b0f      	cmp	r3, #15
 8009b40:	d914      	bls.n	8009b6c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009b42:	4a16      	ldr	r2, [pc, #88]	; (8009b9c <vPortValidateInterruptPriority+0x6c>)
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	4413      	add	r3, r2
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009b4c:	4b14      	ldr	r3, [pc, #80]	; (8009ba0 <vPortValidateInterruptPriority+0x70>)
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	7afa      	ldrb	r2, [r7, #11]
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d20a      	bcs.n	8009b6c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b5a:	f383 8811 	msr	BASEPRI, r3
 8009b5e:	f3bf 8f6f 	isb	sy
 8009b62:	f3bf 8f4f 	dsb	sy
 8009b66:	607b      	str	r3, [r7, #4]
}
 8009b68:	bf00      	nop
 8009b6a:	e7fe      	b.n	8009b6a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009b6c:	4b0d      	ldr	r3, [pc, #52]	; (8009ba4 <vPortValidateInterruptPriority+0x74>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009b74:	4b0c      	ldr	r3, [pc, #48]	; (8009ba8 <vPortValidateInterruptPriority+0x78>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d90a      	bls.n	8009b92 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b80:	f383 8811 	msr	BASEPRI, r3
 8009b84:	f3bf 8f6f 	isb	sy
 8009b88:	f3bf 8f4f 	dsb	sy
 8009b8c:	603b      	str	r3, [r7, #0]
}
 8009b8e:	bf00      	nop
 8009b90:	e7fe      	b.n	8009b90 <vPortValidateInterruptPriority+0x60>
	}
 8009b92:	bf00      	nop
 8009b94:	3714      	adds	r7, #20
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bc80      	pop	{r7}
 8009b9a:	4770      	bx	lr
 8009b9c:	e000e3f0 	.word	0xe000e3f0
 8009ba0:	200008e0 	.word	0x200008e0
 8009ba4:	e000ed0c 	.word	0xe000ed0c
 8009ba8:	200008e4 	.word	0x200008e4

08009bac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b08a      	sub	sp, #40	; 0x28
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009bb8:	f7ff f960 	bl	8008e7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009bbc:	4b58      	ldr	r3, [pc, #352]	; (8009d20 <pvPortMalloc+0x174>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d101      	bne.n	8009bc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009bc4:	f000 f910 	bl	8009de8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009bc8:	4b56      	ldr	r3, [pc, #344]	; (8009d24 <pvPortMalloc+0x178>)
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	4013      	ands	r3, r2
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	f040 808e 	bne.w	8009cf2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d01d      	beq.n	8009c18 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009bdc:	2208      	movs	r2, #8
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	4413      	add	r3, r2
 8009be2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f003 0307 	and.w	r3, r3, #7
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d014      	beq.n	8009c18 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f023 0307 	bic.w	r3, r3, #7
 8009bf4:	3308      	adds	r3, #8
 8009bf6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f003 0307 	and.w	r3, r3, #7
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d00a      	beq.n	8009c18 <pvPortMalloc+0x6c>
	__asm volatile
 8009c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c06:	f383 8811 	msr	BASEPRI, r3
 8009c0a:	f3bf 8f6f 	isb	sy
 8009c0e:	f3bf 8f4f 	dsb	sy
 8009c12:	617b      	str	r3, [r7, #20]
}
 8009c14:	bf00      	nop
 8009c16:	e7fe      	b.n	8009c16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d069      	beq.n	8009cf2 <pvPortMalloc+0x146>
 8009c1e:	4b42      	ldr	r3, [pc, #264]	; (8009d28 <pvPortMalloc+0x17c>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d864      	bhi.n	8009cf2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009c28:	4b40      	ldr	r3, [pc, #256]	; (8009d2c <pvPortMalloc+0x180>)
 8009c2a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009c2c:	4b3f      	ldr	r3, [pc, #252]	; (8009d2c <pvPortMalloc+0x180>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c32:	e004      	b.n	8009c3e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c36:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	687a      	ldr	r2, [r7, #4]
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d903      	bls.n	8009c50 <pvPortMalloc+0xa4>
 8009c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d1f1      	bne.n	8009c34 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009c50:	4b33      	ldr	r3, [pc, #204]	; (8009d20 <pvPortMalloc+0x174>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d04b      	beq.n	8009cf2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009c5a:	6a3b      	ldr	r3, [r7, #32]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	2208      	movs	r2, #8
 8009c60:	4413      	add	r3, r2
 8009c62:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c66:	681a      	ldr	r2, [r3, #0]
 8009c68:	6a3b      	ldr	r3, [r7, #32]
 8009c6a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c6e:	685a      	ldr	r2, [r3, #4]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	1ad2      	subs	r2, r2, r3
 8009c74:	2308      	movs	r3, #8
 8009c76:	005b      	lsls	r3, r3, #1
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d91f      	bls.n	8009cbc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	4413      	add	r3, r2
 8009c82:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c84:	69bb      	ldr	r3, [r7, #24]
 8009c86:	f003 0307 	and.w	r3, r3, #7
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d00a      	beq.n	8009ca4 <pvPortMalloc+0xf8>
	__asm volatile
 8009c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c92:	f383 8811 	msr	BASEPRI, r3
 8009c96:	f3bf 8f6f 	isb	sy
 8009c9a:	f3bf 8f4f 	dsb	sy
 8009c9e:	613b      	str	r3, [r7, #16]
}
 8009ca0:	bf00      	nop
 8009ca2:	e7fe      	b.n	8009ca2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca6:	685a      	ldr	r2, [r3, #4]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	1ad2      	subs	r2, r2, r3
 8009cac:	69bb      	ldr	r3, [r7, #24]
 8009cae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb2:	687a      	ldr	r2, [r7, #4]
 8009cb4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009cb6:	69b8      	ldr	r0, [r7, #24]
 8009cb8:	f000 f8f8 	bl	8009eac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009cbc:	4b1a      	ldr	r3, [pc, #104]	; (8009d28 <pvPortMalloc+0x17c>)
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	1ad3      	subs	r3, r2, r3
 8009cc6:	4a18      	ldr	r2, [pc, #96]	; (8009d28 <pvPortMalloc+0x17c>)
 8009cc8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009cca:	4b17      	ldr	r3, [pc, #92]	; (8009d28 <pvPortMalloc+0x17c>)
 8009ccc:	681a      	ldr	r2, [r3, #0]
 8009cce:	4b18      	ldr	r3, [pc, #96]	; (8009d30 <pvPortMalloc+0x184>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d203      	bcs.n	8009cde <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009cd6:	4b14      	ldr	r3, [pc, #80]	; (8009d28 <pvPortMalloc+0x17c>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a15      	ldr	r2, [pc, #84]	; (8009d30 <pvPortMalloc+0x184>)
 8009cdc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce0:	685a      	ldr	r2, [r3, #4]
 8009ce2:	4b10      	ldr	r3, [pc, #64]	; (8009d24 <pvPortMalloc+0x178>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	431a      	orrs	r2, r3
 8009ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cee:	2200      	movs	r2, #0
 8009cf0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009cf2:	f7ff f8d1 	bl	8008e98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009cf6:	69fb      	ldr	r3, [r7, #28]
 8009cf8:	f003 0307 	and.w	r3, r3, #7
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d00a      	beq.n	8009d16 <pvPortMalloc+0x16a>
	__asm volatile
 8009d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d04:	f383 8811 	msr	BASEPRI, r3
 8009d08:	f3bf 8f6f 	isb	sy
 8009d0c:	f3bf 8f4f 	dsb	sy
 8009d10:	60fb      	str	r3, [r7, #12]
}
 8009d12:	bf00      	nop
 8009d14:	e7fe      	b.n	8009d14 <pvPortMalloc+0x168>
	return pvReturn;
 8009d16:	69fb      	ldr	r3, [r7, #28]
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3728      	adds	r7, #40	; 0x28
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}
 8009d20:	200014f0 	.word	0x200014f0
 8009d24:	200014fc 	.word	0x200014fc
 8009d28:	200014f4 	.word	0x200014f4
 8009d2c:	200014e8 	.word	0x200014e8
 8009d30:	200014f8 	.word	0x200014f8

08009d34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b086      	sub	sp, #24
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d048      	beq.n	8009dd8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009d46:	2308      	movs	r3, #8
 8009d48:	425b      	negs	r3, r3
 8009d4a:	697a      	ldr	r2, [r7, #20]
 8009d4c:	4413      	add	r3, r2
 8009d4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	685a      	ldr	r2, [r3, #4]
 8009d58:	4b21      	ldr	r3, [pc, #132]	; (8009de0 <vPortFree+0xac>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4013      	ands	r3, r2
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d10a      	bne.n	8009d78 <vPortFree+0x44>
	__asm volatile
 8009d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d66:	f383 8811 	msr	BASEPRI, r3
 8009d6a:	f3bf 8f6f 	isb	sy
 8009d6e:	f3bf 8f4f 	dsb	sy
 8009d72:	60fb      	str	r3, [r7, #12]
}
 8009d74:	bf00      	nop
 8009d76:	e7fe      	b.n	8009d76 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d00a      	beq.n	8009d96 <vPortFree+0x62>
	__asm volatile
 8009d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d84:	f383 8811 	msr	BASEPRI, r3
 8009d88:	f3bf 8f6f 	isb	sy
 8009d8c:	f3bf 8f4f 	dsb	sy
 8009d90:	60bb      	str	r3, [r7, #8]
}
 8009d92:	bf00      	nop
 8009d94:	e7fe      	b.n	8009d94 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	685a      	ldr	r2, [r3, #4]
 8009d9a:	4b11      	ldr	r3, [pc, #68]	; (8009de0 <vPortFree+0xac>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4013      	ands	r3, r2
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d019      	beq.n	8009dd8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d115      	bne.n	8009dd8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	685a      	ldr	r2, [r3, #4]
 8009db0:	4b0b      	ldr	r3, [pc, #44]	; (8009de0 <vPortFree+0xac>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	43db      	mvns	r3, r3
 8009db6:	401a      	ands	r2, r3
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009dbc:	f7ff f85e 	bl	8008e7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	685a      	ldr	r2, [r3, #4]
 8009dc4:	4b07      	ldr	r3, [pc, #28]	; (8009de4 <vPortFree+0xb0>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4413      	add	r3, r2
 8009dca:	4a06      	ldr	r2, [pc, #24]	; (8009de4 <vPortFree+0xb0>)
 8009dcc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009dce:	6938      	ldr	r0, [r7, #16]
 8009dd0:	f000 f86c 	bl	8009eac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009dd4:	f7ff f860 	bl	8008e98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009dd8:	bf00      	nop
 8009dda:	3718      	adds	r7, #24
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}
 8009de0:	200014fc 	.word	0x200014fc
 8009de4:	200014f4 	.word	0x200014f4

08009de8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009de8:	b480      	push	{r7}
 8009dea:	b085      	sub	sp, #20
 8009dec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009dee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009df2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009df4:	4b27      	ldr	r3, [pc, #156]	; (8009e94 <prvHeapInit+0xac>)
 8009df6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f003 0307 	and.w	r3, r3, #7
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d00c      	beq.n	8009e1c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	3307      	adds	r3, #7
 8009e06:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f023 0307 	bic.w	r3, r3, #7
 8009e0e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009e10:	68ba      	ldr	r2, [r7, #8]
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	1ad3      	subs	r3, r2, r3
 8009e16:	4a1f      	ldr	r2, [pc, #124]	; (8009e94 <prvHeapInit+0xac>)
 8009e18:	4413      	add	r3, r2
 8009e1a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009e20:	4a1d      	ldr	r2, [pc, #116]	; (8009e98 <prvHeapInit+0xb0>)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009e26:	4b1c      	ldr	r3, [pc, #112]	; (8009e98 <prvHeapInit+0xb0>)
 8009e28:	2200      	movs	r2, #0
 8009e2a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	68ba      	ldr	r2, [r7, #8]
 8009e30:	4413      	add	r3, r2
 8009e32:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009e34:	2208      	movs	r2, #8
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	1a9b      	subs	r3, r3, r2
 8009e3a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f023 0307 	bic.w	r3, r3, #7
 8009e42:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	4a15      	ldr	r2, [pc, #84]	; (8009e9c <prvHeapInit+0xb4>)
 8009e48:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009e4a:	4b14      	ldr	r3, [pc, #80]	; (8009e9c <prvHeapInit+0xb4>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009e52:	4b12      	ldr	r3, [pc, #72]	; (8009e9c <prvHeapInit+0xb4>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	2200      	movs	r2, #0
 8009e58:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	68fa      	ldr	r2, [r7, #12]
 8009e62:	1ad2      	subs	r2, r2, r3
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009e68:	4b0c      	ldr	r3, [pc, #48]	; (8009e9c <prvHeapInit+0xb4>)
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	4a0a      	ldr	r2, [pc, #40]	; (8009ea0 <prvHeapInit+0xb8>)
 8009e76:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	4a09      	ldr	r2, [pc, #36]	; (8009ea4 <prvHeapInit+0xbc>)
 8009e7e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009e80:	4b09      	ldr	r3, [pc, #36]	; (8009ea8 <prvHeapInit+0xc0>)
 8009e82:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009e86:	601a      	str	r2, [r3, #0]
}
 8009e88:	bf00      	nop
 8009e8a:	3714      	adds	r7, #20
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bc80      	pop	{r7}
 8009e90:	4770      	bx	lr
 8009e92:	bf00      	nop
 8009e94:	200008e8 	.word	0x200008e8
 8009e98:	200014e8 	.word	0x200014e8
 8009e9c:	200014f0 	.word	0x200014f0
 8009ea0:	200014f8 	.word	0x200014f8
 8009ea4:	200014f4 	.word	0x200014f4
 8009ea8:	200014fc 	.word	0x200014fc

08009eac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009eac:	b480      	push	{r7}
 8009eae:	b085      	sub	sp, #20
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009eb4:	4b27      	ldr	r3, [pc, #156]	; (8009f54 <prvInsertBlockIntoFreeList+0xa8>)
 8009eb6:	60fb      	str	r3, [r7, #12]
 8009eb8:	e002      	b.n	8009ec0 <prvInsertBlockIntoFreeList+0x14>
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	60fb      	str	r3, [r7, #12]
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	687a      	ldr	r2, [r7, #4]
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d8f7      	bhi.n	8009eba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	68ba      	ldr	r2, [r7, #8]
 8009ed4:	4413      	add	r3, r2
 8009ed6:	687a      	ldr	r2, [r7, #4]
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d108      	bne.n	8009eee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	685a      	ldr	r2, [r3, #4]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	441a      	add	r2, r3
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	68ba      	ldr	r2, [r7, #8]
 8009ef8:	441a      	add	r2, r3
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d118      	bne.n	8009f34 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681a      	ldr	r2, [r3, #0]
 8009f06:	4b14      	ldr	r3, [pc, #80]	; (8009f58 <prvInsertBlockIntoFreeList+0xac>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d00d      	beq.n	8009f2a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	685a      	ldr	r2, [r3, #4]
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	441a      	add	r2, r3
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	601a      	str	r2, [r3, #0]
 8009f28:	e008      	b.n	8009f3c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009f2a:	4b0b      	ldr	r3, [pc, #44]	; (8009f58 <prvInsertBlockIntoFreeList+0xac>)
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	601a      	str	r2, [r3, #0]
 8009f32:	e003      	b.n	8009f3c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681a      	ldr	r2, [r3, #0]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009f3c:	68fa      	ldr	r2, [r7, #12]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d002      	beq.n	8009f4a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f4a:	bf00      	nop
 8009f4c:	3714      	adds	r7, #20
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bc80      	pop	{r7}
 8009f52:	4770      	bx	lr
 8009f54:	200014e8 	.word	0x200014e8
 8009f58:	200014f0 	.word	0x200014f0

08009f5c <__errno>:
 8009f5c:	4b01      	ldr	r3, [pc, #4]	; (8009f64 <__errno+0x8>)
 8009f5e:	6818      	ldr	r0, [r3, #0]
 8009f60:	4770      	bx	lr
 8009f62:	bf00      	nop
 8009f64:	20000010 	.word	0x20000010

08009f68 <__libc_init_array>:
 8009f68:	b570      	push	{r4, r5, r6, lr}
 8009f6a:	4d0d      	ldr	r5, [pc, #52]	; (8009fa0 <__libc_init_array+0x38>)
 8009f6c:	4c0d      	ldr	r4, [pc, #52]	; (8009fa4 <__libc_init_array+0x3c>)
 8009f6e:	1b64      	subs	r4, r4, r5
 8009f70:	10a4      	asrs	r4, r4, #2
 8009f72:	2600      	movs	r6, #0
 8009f74:	42a6      	cmp	r6, r4
 8009f76:	d109      	bne.n	8009f8c <__libc_init_array+0x24>
 8009f78:	4d0b      	ldr	r5, [pc, #44]	; (8009fa8 <__libc_init_array+0x40>)
 8009f7a:	4c0c      	ldr	r4, [pc, #48]	; (8009fac <__libc_init_array+0x44>)
 8009f7c:	f002 f976 	bl	800c26c <_init>
 8009f80:	1b64      	subs	r4, r4, r5
 8009f82:	10a4      	asrs	r4, r4, #2
 8009f84:	2600      	movs	r6, #0
 8009f86:	42a6      	cmp	r6, r4
 8009f88:	d105      	bne.n	8009f96 <__libc_init_array+0x2e>
 8009f8a:	bd70      	pop	{r4, r5, r6, pc}
 8009f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f90:	4798      	blx	r3
 8009f92:	3601      	adds	r6, #1
 8009f94:	e7ee      	b.n	8009f74 <__libc_init_array+0xc>
 8009f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f9a:	4798      	blx	r3
 8009f9c:	3601      	adds	r6, #1
 8009f9e:	e7f2      	b.n	8009f86 <__libc_init_array+0x1e>
 8009fa0:	0800cd48 	.word	0x0800cd48
 8009fa4:	0800cd48 	.word	0x0800cd48
 8009fa8:	0800cd48 	.word	0x0800cd48
 8009fac:	0800cd4c 	.word	0x0800cd4c

08009fb0 <memcpy>:
 8009fb0:	440a      	add	r2, r1
 8009fb2:	4291      	cmp	r1, r2
 8009fb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009fb8:	d100      	bne.n	8009fbc <memcpy+0xc>
 8009fba:	4770      	bx	lr
 8009fbc:	b510      	push	{r4, lr}
 8009fbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009fc6:	4291      	cmp	r1, r2
 8009fc8:	d1f9      	bne.n	8009fbe <memcpy+0xe>
 8009fca:	bd10      	pop	{r4, pc}

08009fcc <memset>:
 8009fcc:	4402      	add	r2, r0
 8009fce:	4603      	mov	r3, r0
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d100      	bne.n	8009fd6 <memset+0xa>
 8009fd4:	4770      	bx	lr
 8009fd6:	f803 1b01 	strb.w	r1, [r3], #1
 8009fda:	e7f9      	b.n	8009fd0 <memset+0x4>

08009fdc <sniprintf>:
 8009fdc:	b40c      	push	{r2, r3}
 8009fde:	b530      	push	{r4, r5, lr}
 8009fe0:	4b17      	ldr	r3, [pc, #92]	; (800a040 <sniprintf+0x64>)
 8009fe2:	1e0c      	subs	r4, r1, #0
 8009fe4:	681d      	ldr	r5, [r3, #0]
 8009fe6:	b09d      	sub	sp, #116	; 0x74
 8009fe8:	da08      	bge.n	8009ffc <sniprintf+0x20>
 8009fea:	238b      	movs	r3, #139	; 0x8b
 8009fec:	602b      	str	r3, [r5, #0]
 8009fee:	f04f 30ff 	mov.w	r0, #4294967295
 8009ff2:	b01d      	add	sp, #116	; 0x74
 8009ff4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ff8:	b002      	add	sp, #8
 8009ffa:	4770      	bx	lr
 8009ffc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a000:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a004:	bf14      	ite	ne
 800a006:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a00a:	4623      	moveq	r3, r4
 800a00c:	9304      	str	r3, [sp, #16]
 800a00e:	9307      	str	r3, [sp, #28]
 800a010:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a014:	9002      	str	r0, [sp, #8]
 800a016:	9006      	str	r0, [sp, #24]
 800a018:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a01c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a01e:	ab21      	add	r3, sp, #132	; 0x84
 800a020:	a902      	add	r1, sp, #8
 800a022:	4628      	mov	r0, r5
 800a024:	9301      	str	r3, [sp, #4]
 800a026:	f000 fa0f 	bl	800a448 <_svfiprintf_r>
 800a02a:	1c43      	adds	r3, r0, #1
 800a02c:	bfbc      	itt	lt
 800a02e:	238b      	movlt	r3, #139	; 0x8b
 800a030:	602b      	strlt	r3, [r5, #0]
 800a032:	2c00      	cmp	r4, #0
 800a034:	d0dd      	beq.n	8009ff2 <sniprintf+0x16>
 800a036:	9b02      	ldr	r3, [sp, #8]
 800a038:	2200      	movs	r2, #0
 800a03a:	701a      	strb	r2, [r3, #0]
 800a03c:	e7d9      	b.n	8009ff2 <sniprintf+0x16>
 800a03e:	bf00      	nop
 800a040:	20000010 	.word	0x20000010

0800a044 <siprintf>:
 800a044:	b40e      	push	{r1, r2, r3}
 800a046:	b500      	push	{lr}
 800a048:	b09c      	sub	sp, #112	; 0x70
 800a04a:	ab1d      	add	r3, sp, #116	; 0x74
 800a04c:	9002      	str	r0, [sp, #8]
 800a04e:	9006      	str	r0, [sp, #24]
 800a050:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a054:	4809      	ldr	r0, [pc, #36]	; (800a07c <siprintf+0x38>)
 800a056:	9107      	str	r1, [sp, #28]
 800a058:	9104      	str	r1, [sp, #16]
 800a05a:	4909      	ldr	r1, [pc, #36]	; (800a080 <siprintf+0x3c>)
 800a05c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a060:	9105      	str	r1, [sp, #20]
 800a062:	6800      	ldr	r0, [r0, #0]
 800a064:	9301      	str	r3, [sp, #4]
 800a066:	a902      	add	r1, sp, #8
 800a068:	f000 f9ee 	bl	800a448 <_svfiprintf_r>
 800a06c:	9b02      	ldr	r3, [sp, #8]
 800a06e:	2200      	movs	r2, #0
 800a070:	701a      	strb	r2, [r3, #0]
 800a072:	b01c      	add	sp, #112	; 0x70
 800a074:	f85d eb04 	ldr.w	lr, [sp], #4
 800a078:	b003      	add	sp, #12
 800a07a:	4770      	bx	lr
 800a07c:	20000010 	.word	0x20000010
 800a080:	ffff0208 	.word	0xffff0208

0800a084 <strncmp>:
 800a084:	b510      	push	{r4, lr}
 800a086:	4603      	mov	r3, r0
 800a088:	b172      	cbz	r2, 800a0a8 <strncmp+0x24>
 800a08a:	3901      	subs	r1, #1
 800a08c:	1884      	adds	r4, r0, r2
 800a08e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a092:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a096:	4290      	cmp	r0, r2
 800a098:	d101      	bne.n	800a09e <strncmp+0x1a>
 800a09a:	42a3      	cmp	r3, r4
 800a09c:	d101      	bne.n	800a0a2 <strncmp+0x1e>
 800a09e:	1a80      	subs	r0, r0, r2
 800a0a0:	bd10      	pop	{r4, pc}
 800a0a2:	2800      	cmp	r0, #0
 800a0a4:	d1f3      	bne.n	800a08e <strncmp+0xa>
 800a0a6:	e7fa      	b.n	800a09e <strncmp+0x1a>
 800a0a8:	4610      	mov	r0, r2
 800a0aa:	e7f9      	b.n	800a0a0 <strncmp+0x1c>

0800a0ac <strtok>:
 800a0ac:	4b16      	ldr	r3, [pc, #88]	; (800a108 <strtok+0x5c>)
 800a0ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0b2:	681f      	ldr	r7, [r3, #0]
 800a0b4:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800a0b6:	4605      	mov	r5, r0
 800a0b8:	460e      	mov	r6, r1
 800a0ba:	b9ec      	cbnz	r4, 800a0f8 <strtok+0x4c>
 800a0bc:	2050      	movs	r0, #80	; 0x50
 800a0be:	f000 f881 	bl	800a1c4 <malloc>
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	65b8      	str	r0, [r7, #88]	; 0x58
 800a0c6:	b920      	cbnz	r0, 800a0d2 <strtok+0x26>
 800a0c8:	4b10      	ldr	r3, [pc, #64]	; (800a10c <strtok+0x60>)
 800a0ca:	4811      	ldr	r0, [pc, #68]	; (800a110 <strtok+0x64>)
 800a0cc:	2157      	movs	r1, #87	; 0x57
 800a0ce:	f000 f849 	bl	800a164 <__assert_func>
 800a0d2:	e9c0 4400 	strd	r4, r4, [r0]
 800a0d6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a0da:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a0de:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a0e2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a0e6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a0ea:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a0ee:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a0f2:	6184      	str	r4, [r0, #24]
 800a0f4:	7704      	strb	r4, [r0, #28]
 800a0f6:	6244      	str	r4, [r0, #36]	; 0x24
 800a0f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a0fa:	4631      	mov	r1, r6
 800a0fc:	4628      	mov	r0, r5
 800a0fe:	2301      	movs	r3, #1
 800a100:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a104:	f000 b806 	b.w	800a114 <__strtok_r>
 800a108:	20000010 	.word	0x20000010
 800a10c:	0800cbcc 	.word	0x0800cbcc
 800a110:	0800cbe3 	.word	0x0800cbe3

0800a114 <__strtok_r>:
 800a114:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a116:	b908      	cbnz	r0, 800a11c <__strtok_r+0x8>
 800a118:	6810      	ldr	r0, [r2, #0]
 800a11a:	b188      	cbz	r0, 800a140 <__strtok_r+0x2c>
 800a11c:	4604      	mov	r4, r0
 800a11e:	4620      	mov	r0, r4
 800a120:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a124:	460f      	mov	r7, r1
 800a126:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a12a:	b91e      	cbnz	r6, 800a134 <__strtok_r+0x20>
 800a12c:	b965      	cbnz	r5, 800a148 <__strtok_r+0x34>
 800a12e:	6015      	str	r5, [r2, #0]
 800a130:	4628      	mov	r0, r5
 800a132:	e005      	b.n	800a140 <__strtok_r+0x2c>
 800a134:	42b5      	cmp	r5, r6
 800a136:	d1f6      	bne.n	800a126 <__strtok_r+0x12>
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d1f0      	bne.n	800a11e <__strtok_r+0xa>
 800a13c:	6014      	str	r4, [r2, #0]
 800a13e:	7003      	strb	r3, [r0, #0]
 800a140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a142:	461c      	mov	r4, r3
 800a144:	e00c      	b.n	800a160 <__strtok_r+0x4c>
 800a146:	b915      	cbnz	r5, 800a14e <__strtok_r+0x3a>
 800a148:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a14c:	460e      	mov	r6, r1
 800a14e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a152:	42ab      	cmp	r3, r5
 800a154:	d1f7      	bne.n	800a146 <__strtok_r+0x32>
 800a156:	2b00      	cmp	r3, #0
 800a158:	d0f3      	beq.n	800a142 <__strtok_r+0x2e>
 800a15a:	2300      	movs	r3, #0
 800a15c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a160:	6014      	str	r4, [r2, #0]
 800a162:	e7ed      	b.n	800a140 <__strtok_r+0x2c>

0800a164 <__assert_func>:
 800a164:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a166:	4614      	mov	r4, r2
 800a168:	461a      	mov	r2, r3
 800a16a:	4b09      	ldr	r3, [pc, #36]	; (800a190 <__assert_func+0x2c>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4605      	mov	r5, r0
 800a170:	68d8      	ldr	r0, [r3, #12]
 800a172:	b14c      	cbz	r4, 800a188 <__assert_func+0x24>
 800a174:	4b07      	ldr	r3, [pc, #28]	; (800a194 <__assert_func+0x30>)
 800a176:	9100      	str	r1, [sp, #0]
 800a178:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a17c:	4906      	ldr	r1, [pc, #24]	; (800a198 <__assert_func+0x34>)
 800a17e:	462b      	mov	r3, r5
 800a180:	f000 f80e 	bl	800a1a0 <fiprintf>
 800a184:	f000 fe1c 	bl	800adc0 <abort>
 800a188:	4b04      	ldr	r3, [pc, #16]	; (800a19c <__assert_func+0x38>)
 800a18a:	461c      	mov	r4, r3
 800a18c:	e7f3      	b.n	800a176 <__assert_func+0x12>
 800a18e:	bf00      	nop
 800a190:	20000010 	.word	0x20000010
 800a194:	0800cc40 	.word	0x0800cc40
 800a198:	0800cc4d 	.word	0x0800cc4d
 800a19c:	0800cc7b 	.word	0x0800cc7b

0800a1a0 <fiprintf>:
 800a1a0:	b40e      	push	{r1, r2, r3}
 800a1a2:	b503      	push	{r0, r1, lr}
 800a1a4:	4601      	mov	r1, r0
 800a1a6:	ab03      	add	r3, sp, #12
 800a1a8:	4805      	ldr	r0, [pc, #20]	; (800a1c0 <fiprintf+0x20>)
 800a1aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1ae:	6800      	ldr	r0, [r0, #0]
 800a1b0:	9301      	str	r3, [sp, #4]
 800a1b2:	f000 fa71 	bl	800a698 <_vfiprintf_r>
 800a1b6:	b002      	add	sp, #8
 800a1b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1bc:	b003      	add	sp, #12
 800a1be:	4770      	bx	lr
 800a1c0:	20000010 	.word	0x20000010

0800a1c4 <malloc>:
 800a1c4:	4b02      	ldr	r3, [pc, #8]	; (800a1d0 <malloc+0xc>)
 800a1c6:	4601      	mov	r1, r0
 800a1c8:	6818      	ldr	r0, [r3, #0]
 800a1ca:	f000 b86d 	b.w	800a2a8 <_malloc_r>
 800a1ce:	bf00      	nop
 800a1d0:	20000010 	.word	0x20000010

0800a1d4 <_free_r>:
 800a1d4:	b538      	push	{r3, r4, r5, lr}
 800a1d6:	4605      	mov	r5, r0
 800a1d8:	2900      	cmp	r1, #0
 800a1da:	d041      	beq.n	800a260 <_free_r+0x8c>
 800a1dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1e0:	1f0c      	subs	r4, r1, #4
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	bfb8      	it	lt
 800a1e6:	18e4      	addlt	r4, r4, r3
 800a1e8:	f001 f828 	bl	800b23c <__malloc_lock>
 800a1ec:	4a1d      	ldr	r2, [pc, #116]	; (800a264 <_free_r+0x90>)
 800a1ee:	6813      	ldr	r3, [r2, #0]
 800a1f0:	b933      	cbnz	r3, 800a200 <_free_r+0x2c>
 800a1f2:	6063      	str	r3, [r4, #4]
 800a1f4:	6014      	str	r4, [r2, #0]
 800a1f6:	4628      	mov	r0, r5
 800a1f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1fc:	f001 b824 	b.w	800b248 <__malloc_unlock>
 800a200:	42a3      	cmp	r3, r4
 800a202:	d908      	bls.n	800a216 <_free_r+0x42>
 800a204:	6820      	ldr	r0, [r4, #0]
 800a206:	1821      	adds	r1, r4, r0
 800a208:	428b      	cmp	r3, r1
 800a20a:	bf01      	itttt	eq
 800a20c:	6819      	ldreq	r1, [r3, #0]
 800a20e:	685b      	ldreq	r3, [r3, #4]
 800a210:	1809      	addeq	r1, r1, r0
 800a212:	6021      	streq	r1, [r4, #0]
 800a214:	e7ed      	b.n	800a1f2 <_free_r+0x1e>
 800a216:	461a      	mov	r2, r3
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	b10b      	cbz	r3, 800a220 <_free_r+0x4c>
 800a21c:	42a3      	cmp	r3, r4
 800a21e:	d9fa      	bls.n	800a216 <_free_r+0x42>
 800a220:	6811      	ldr	r1, [r2, #0]
 800a222:	1850      	adds	r0, r2, r1
 800a224:	42a0      	cmp	r0, r4
 800a226:	d10b      	bne.n	800a240 <_free_r+0x6c>
 800a228:	6820      	ldr	r0, [r4, #0]
 800a22a:	4401      	add	r1, r0
 800a22c:	1850      	adds	r0, r2, r1
 800a22e:	4283      	cmp	r3, r0
 800a230:	6011      	str	r1, [r2, #0]
 800a232:	d1e0      	bne.n	800a1f6 <_free_r+0x22>
 800a234:	6818      	ldr	r0, [r3, #0]
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	6053      	str	r3, [r2, #4]
 800a23a:	4401      	add	r1, r0
 800a23c:	6011      	str	r1, [r2, #0]
 800a23e:	e7da      	b.n	800a1f6 <_free_r+0x22>
 800a240:	d902      	bls.n	800a248 <_free_r+0x74>
 800a242:	230c      	movs	r3, #12
 800a244:	602b      	str	r3, [r5, #0]
 800a246:	e7d6      	b.n	800a1f6 <_free_r+0x22>
 800a248:	6820      	ldr	r0, [r4, #0]
 800a24a:	1821      	adds	r1, r4, r0
 800a24c:	428b      	cmp	r3, r1
 800a24e:	bf04      	itt	eq
 800a250:	6819      	ldreq	r1, [r3, #0]
 800a252:	685b      	ldreq	r3, [r3, #4]
 800a254:	6063      	str	r3, [r4, #4]
 800a256:	bf04      	itt	eq
 800a258:	1809      	addeq	r1, r1, r0
 800a25a:	6021      	streq	r1, [r4, #0]
 800a25c:	6054      	str	r4, [r2, #4]
 800a25e:	e7ca      	b.n	800a1f6 <_free_r+0x22>
 800a260:	bd38      	pop	{r3, r4, r5, pc}
 800a262:	bf00      	nop
 800a264:	20001500 	.word	0x20001500

0800a268 <sbrk_aligned>:
 800a268:	b570      	push	{r4, r5, r6, lr}
 800a26a:	4e0e      	ldr	r6, [pc, #56]	; (800a2a4 <sbrk_aligned+0x3c>)
 800a26c:	460c      	mov	r4, r1
 800a26e:	6831      	ldr	r1, [r6, #0]
 800a270:	4605      	mov	r5, r0
 800a272:	b911      	cbnz	r1, 800a27a <sbrk_aligned+0x12>
 800a274:	f000 fcd4 	bl	800ac20 <_sbrk_r>
 800a278:	6030      	str	r0, [r6, #0]
 800a27a:	4621      	mov	r1, r4
 800a27c:	4628      	mov	r0, r5
 800a27e:	f000 fccf 	bl	800ac20 <_sbrk_r>
 800a282:	1c43      	adds	r3, r0, #1
 800a284:	d00a      	beq.n	800a29c <sbrk_aligned+0x34>
 800a286:	1cc4      	adds	r4, r0, #3
 800a288:	f024 0403 	bic.w	r4, r4, #3
 800a28c:	42a0      	cmp	r0, r4
 800a28e:	d007      	beq.n	800a2a0 <sbrk_aligned+0x38>
 800a290:	1a21      	subs	r1, r4, r0
 800a292:	4628      	mov	r0, r5
 800a294:	f000 fcc4 	bl	800ac20 <_sbrk_r>
 800a298:	3001      	adds	r0, #1
 800a29a:	d101      	bne.n	800a2a0 <sbrk_aligned+0x38>
 800a29c:	f04f 34ff 	mov.w	r4, #4294967295
 800a2a0:	4620      	mov	r0, r4
 800a2a2:	bd70      	pop	{r4, r5, r6, pc}
 800a2a4:	20001504 	.word	0x20001504

0800a2a8 <_malloc_r>:
 800a2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ac:	1ccd      	adds	r5, r1, #3
 800a2ae:	f025 0503 	bic.w	r5, r5, #3
 800a2b2:	3508      	adds	r5, #8
 800a2b4:	2d0c      	cmp	r5, #12
 800a2b6:	bf38      	it	cc
 800a2b8:	250c      	movcc	r5, #12
 800a2ba:	2d00      	cmp	r5, #0
 800a2bc:	4607      	mov	r7, r0
 800a2be:	db01      	blt.n	800a2c4 <_malloc_r+0x1c>
 800a2c0:	42a9      	cmp	r1, r5
 800a2c2:	d905      	bls.n	800a2d0 <_malloc_r+0x28>
 800a2c4:	230c      	movs	r3, #12
 800a2c6:	603b      	str	r3, [r7, #0]
 800a2c8:	2600      	movs	r6, #0
 800a2ca:	4630      	mov	r0, r6
 800a2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2d0:	4e2e      	ldr	r6, [pc, #184]	; (800a38c <_malloc_r+0xe4>)
 800a2d2:	f000 ffb3 	bl	800b23c <__malloc_lock>
 800a2d6:	6833      	ldr	r3, [r6, #0]
 800a2d8:	461c      	mov	r4, r3
 800a2da:	bb34      	cbnz	r4, 800a32a <_malloc_r+0x82>
 800a2dc:	4629      	mov	r1, r5
 800a2de:	4638      	mov	r0, r7
 800a2e0:	f7ff ffc2 	bl	800a268 <sbrk_aligned>
 800a2e4:	1c43      	adds	r3, r0, #1
 800a2e6:	4604      	mov	r4, r0
 800a2e8:	d14d      	bne.n	800a386 <_malloc_r+0xde>
 800a2ea:	6834      	ldr	r4, [r6, #0]
 800a2ec:	4626      	mov	r6, r4
 800a2ee:	2e00      	cmp	r6, #0
 800a2f0:	d140      	bne.n	800a374 <_malloc_r+0xcc>
 800a2f2:	6823      	ldr	r3, [r4, #0]
 800a2f4:	4631      	mov	r1, r6
 800a2f6:	4638      	mov	r0, r7
 800a2f8:	eb04 0803 	add.w	r8, r4, r3
 800a2fc:	f000 fc90 	bl	800ac20 <_sbrk_r>
 800a300:	4580      	cmp	r8, r0
 800a302:	d13a      	bne.n	800a37a <_malloc_r+0xd2>
 800a304:	6821      	ldr	r1, [r4, #0]
 800a306:	3503      	adds	r5, #3
 800a308:	1a6d      	subs	r5, r5, r1
 800a30a:	f025 0503 	bic.w	r5, r5, #3
 800a30e:	3508      	adds	r5, #8
 800a310:	2d0c      	cmp	r5, #12
 800a312:	bf38      	it	cc
 800a314:	250c      	movcc	r5, #12
 800a316:	4629      	mov	r1, r5
 800a318:	4638      	mov	r0, r7
 800a31a:	f7ff ffa5 	bl	800a268 <sbrk_aligned>
 800a31e:	3001      	adds	r0, #1
 800a320:	d02b      	beq.n	800a37a <_malloc_r+0xd2>
 800a322:	6823      	ldr	r3, [r4, #0]
 800a324:	442b      	add	r3, r5
 800a326:	6023      	str	r3, [r4, #0]
 800a328:	e00e      	b.n	800a348 <_malloc_r+0xa0>
 800a32a:	6822      	ldr	r2, [r4, #0]
 800a32c:	1b52      	subs	r2, r2, r5
 800a32e:	d41e      	bmi.n	800a36e <_malloc_r+0xc6>
 800a330:	2a0b      	cmp	r2, #11
 800a332:	d916      	bls.n	800a362 <_malloc_r+0xba>
 800a334:	1961      	adds	r1, r4, r5
 800a336:	42a3      	cmp	r3, r4
 800a338:	6025      	str	r5, [r4, #0]
 800a33a:	bf18      	it	ne
 800a33c:	6059      	strne	r1, [r3, #4]
 800a33e:	6863      	ldr	r3, [r4, #4]
 800a340:	bf08      	it	eq
 800a342:	6031      	streq	r1, [r6, #0]
 800a344:	5162      	str	r2, [r4, r5]
 800a346:	604b      	str	r3, [r1, #4]
 800a348:	4638      	mov	r0, r7
 800a34a:	f104 060b 	add.w	r6, r4, #11
 800a34e:	f000 ff7b 	bl	800b248 <__malloc_unlock>
 800a352:	f026 0607 	bic.w	r6, r6, #7
 800a356:	1d23      	adds	r3, r4, #4
 800a358:	1af2      	subs	r2, r6, r3
 800a35a:	d0b6      	beq.n	800a2ca <_malloc_r+0x22>
 800a35c:	1b9b      	subs	r3, r3, r6
 800a35e:	50a3      	str	r3, [r4, r2]
 800a360:	e7b3      	b.n	800a2ca <_malloc_r+0x22>
 800a362:	6862      	ldr	r2, [r4, #4]
 800a364:	42a3      	cmp	r3, r4
 800a366:	bf0c      	ite	eq
 800a368:	6032      	streq	r2, [r6, #0]
 800a36a:	605a      	strne	r2, [r3, #4]
 800a36c:	e7ec      	b.n	800a348 <_malloc_r+0xa0>
 800a36e:	4623      	mov	r3, r4
 800a370:	6864      	ldr	r4, [r4, #4]
 800a372:	e7b2      	b.n	800a2da <_malloc_r+0x32>
 800a374:	4634      	mov	r4, r6
 800a376:	6876      	ldr	r6, [r6, #4]
 800a378:	e7b9      	b.n	800a2ee <_malloc_r+0x46>
 800a37a:	230c      	movs	r3, #12
 800a37c:	603b      	str	r3, [r7, #0]
 800a37e:	4638      	mov	r0, r7
 800a380:	f000 ff62 	bl	800b248 <__malloc_unlock>
 800a384:	e7a1      	b.n	800a2ca <_malloc_r+0x22>
 800a386:	6025      	str	r5, [r4, #0]
 800a388:	e7de      	b.n	800a348 <_malloc_r+0xa0>
 800a38a:	bf00      	nop
 800a38c:	20001500 	.word	0x20001500

0800a390 <__ssputs_r>:
 800a390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a394:	688e      	ldr	r6, [r1, #8]
 800a396:	429e      	cmp	r6, r3
 800a398:	4682      	mov	sl, r0
 800a39a:	460c      	mov	r4, r1
 800a39c:	4690      	mov	r8, r2
 800a39e:	461f      	mov	r7, r3
 800a3a0:	d838      	bhi.n	800a414 <__ssputs_r+0x84>
 800a3a2:	898a      	ldrh	r2, [r1, #12]
 800a3a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a3a8:	d032      	beq.n	800a410 <__ssputs_r+0x80>
 800a3aa:	6825      	ldr	r5, [r4, #0]
 800a3ac:	6909      	ldr	r1, [r1, #16]
 800a3ae:	eba5 0901 	sub.w	r9, r5, r1
 800a3b2:	6965      	ldr	r5, [r4, #20]
 800a3b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a3b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a3bc:	3301      	adds	r3, #1
 800a3be:	444b      	add	r3, r9
 800a3c0:	106d      	asrs	r5, r5, #1
 800a3c2:	429d      	cmp	r5, r3
 800a3c4:	bf38      	it	cc
 800a3c6:	461d      	movcc	r5, r3
 800a3c8:	0553      	lsls	r3, r2, #21
 800a3ca:	d531      	bpl.n	800a430 <__ssputs_r+0xa0>
 800a3cc:	4629      	mov	r1, r5
 800a3ce:	f7ff ff6b 	bl	800a2a8 <_malloc_r>
 800a3d2:	4606      	mov	r6, r0
 800a3d4:	b950      	cbnz	r0, 800a3ec <__ssputs_r+0x5c>
 800a3d6:	230c      	movs	r3, #12
 800a3d8:	f8ca 3000 	str.w	r3, [sl]
 800a3dc:	89a3      	ldrh	r3, [r4, #12]
 800a3de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3e2:	81a3      	strh	r3, [r4, #12]
 800a3e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3ec:	6921      	ldr	r1, [r4, #16]
 800a3ee:	464a      	mov	r2, r9
 800a3f0:	f7ff fdde 	bl	8009fb0 <memcpy>
 800a3f4:	89a3      	ldrh	r3, [r4, #12]
 800a3f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3fe:	81a3      	strh	r3, [r4, #12]
 800a400:	6126      	str	r6, [r4, #16]
 800a402:	6165      	str	r5, [r4, #20]
 800a404:	444e      	add	r6, r9
 800a406:	eba5 0509 	sub.w	r5, r5, r9
 800a40a:	6026      	str	r6, [r4, #0]
 800a40c:	60a5      	str	r5, [r4, #8]
 800a40e:	463e      	mov	r6, r7
 800a410:	42be      	cmp	r6, r7
 800a412:	d900      	bls.n	800a416 <__ssputs_r+0x86>
 800a414:	463e      	mov	r6, r7
 800a416:	6820      	ldr	r0, [r4, #0]
 800a418:	4632      	mov	r2, r6
 800a41a:	4641      	mov	r1, r8
 800a41c:	f000 fef4 	bl	800b208 <memmove>
 800a420:	68a3      	ldr	r3, [r4, #8]
 800a422:	1b9b      	subs	r3, r3, r6
 800a424:	60a3      	str	r3, [r4, #8]
 800a426:	6823      	ldr	r3, [r4, #0]
 800a428:	4433      	add	r3, r6
 800a42a:	6023      	str	r3, [r4, #0]
 800a42c:	2000      	movs	r0, #0
 800a42e:	e7db      	b.n	800a3e8 <__ssputs_r+0x58>
 800a430:	462a      	mov	r2, r5
 800a432:	f000 ff0f 	bl	800b254 <_realloc_r>
 800a436:	4606      	mov	r6, r0
 800a438:	2800      	cmp	r0, #0
 800a43a:	d1e1      	bne.n	800a400 <__ssputs_r+0x70>
 800a43c:	6921      	ldr	r1, [r4, #16]
 800a43e:	4650      	mov	r0, sl
 800a440:	f7ff fec8 	bl	800a1d4 <_free_r>
 800a444:	e7c7      	b.n	800a3d6 <__ssputs_r+0x46>
	...

0800a448 <_svfiprintf_r>:
 800a448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a44c:	4698      	mov	r8, r3
 800a44e:	898b      	ldrh	r3, [r1, #12]
 800a450:	061b      	lsls	r3, r3, #24
 800a452:	b09d      	sub	sp, #116	; 0x74
 800a454:	4607      	mov	r7, r0
 800a456:	460d      	mov	r5, r1
 800a458:	4614      	mov	r4, r2
 800a45a:	d50e      	bpl.n	800a47a <_svfiprintf_r+0x32>
 800a45c:	690b      	ldr	r3, [r1, #16]
 800a45e:	b963      	cbnz	r3, 800a47a <_svfiprintf_r+0x32>
 800a460:	2140      	movs	r1, #64	; 0x40
 800a462:	f7ff ff21 	bl	800a2a8 <_malloc_r>
 800a466:	6028      	str	r0, [r5, #0]
 800a468:	6128      	str	r0, [r5, #16]
 800a46a:	b920      	cbnz	r0, 800a476 <_svfiprintf_r+0x2e>
 800a46c:	230c      	movs	r3, #12
 800a46e:	603b      	str	r3, [r7, #0]
 800a470:	f04f 30ff 	mov.w	r0, #4294967295
 800a474:	e0d1      	b.n	800a61a <_svfiprintf_r+0x1d2>
 800a476:	2340      	movs	r3, #64	; 0x40
 800a478:	616b      	str	r3, [r5, #20]
 800a47a:	2300      	movs	r3, #0
 800a47c:	9309      	str	r3, [sp, #36]	; 0x24
 800a47e:	2320      	movs	r3, #32
 800a480:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a484:	f8cd 800c 	str.w	r8, [sp, #12]
 800a488:	2330      	movs	r3, #48	; 0x30
 800a48a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a634 <_svfiprintf_r+0x1ec>
 800a48e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a492:	f04f 0901 	mov.w	r9, #1
 800a496:	4623      	mov	r3, r4
 800a498:	469a      	mov	sl, r3
 800a49a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a49e:	b10a      	cbz	r2, 800a4a4 <_svfiprintf_r+0x5c>
 800a4a0:	2a25      	cmp	r2, #37	; 0x25
 800a4a2:	d1f9      	bne.n	800a498 <_svfiprintf_r+0x50>
 800a4a4:	ebba 0b04 	subs.w	fp, sl, r4
 800a4a8:	d00b      	beq.n	800a4c2 <_svfiprintf_r+0x7a>
 800a4aa:	465b      	mov	r3, fp
 800a4ac:	4622      	mov	r2, r4
 800a4ae:	4629      	mov	r1, r5
 800a4b0:	4638      	mov	r0, r7
 800a4b2:	f7ff ff6d 	bl	800a390 <__ssputs_r>
 800a4b6:	3001      	adds	r0, #1
 800a4b8:	f000 80aa 	beq.w	800a610 <_svfiprintf_r+0x1c8>
 800a4bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4be:	445a      	add	r2, fp
 800a4c0:	9209      	str	r2, [sp, #36]	; 0x24
 800a4c2:	f89a 3000 	ldrb.w	r3, [sl]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	f000 80a2 	beq.w	800a610 <_svfiprintf_r+0x1c8>
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a4d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4d6:	f10a 0a01 	add.w	sl, sl, #1
 800a4da:	9304      	str	r3, [sp, #16]
 800a4dc:	9307      	str	r3, [sp, #28]
 800a4de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4e2:	931a      	str	r3, [sp, #104]	; 0x68
 800a4e4:	4654      	mov	r4, sl
 800a4e6:	2205      	movs	r2, #5
 800a4e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4ec:	4851      	ldr	r0, [pc, #324]	; (800a634 <_svfiprintf_r+0x1ec>)
 800a4ee:	f7f5 fe4f 	bl	8000190 <memchr>
 800a4f2:	9a04      	ldr	r2, [sp, #16]
 800a4f4:	b9d8      	cbnz	r0, 800a52e <_svfiprintf_r+0xe6>
 800a4f6:	06d0      	lsls	r0, r2, #27
 800a4f8:	bf44      	itt	mi
 800a4fa:	2320      	movmi	r3, #32
 800a4fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a500:	0711      	lsls	r1, r2, #28
 800a502:	bf44      	itt	mi
 800a504:	232b      	movmi	r3, #43	; 0x2b
 800a506:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a50a:	f89a 3000 	ldrb.w	r3, [sl]
 800a50e:	2b2a      	cmp	r3, #42	; 0x2a
 800a510:	d015      	beq.n	800a53e <_svfiprintf_r+0xf6>
 800a512:	9a07      	ldr	r2, [sp, #28]
 800a514:	4654      	mov	r4, sl
 800a516:	2000      	movs	r0, #0
 800a518:	f04f 0c0a 	mov.w	ip, #10
 800a51c:	4621      	mov	r1, r4
 800a51e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a522:	3b30      	subs	r3, #48	; 0x30
 800a524:	2b09      	cmp	r3, #9
 800a526:	d94e      	bls.n	800a5c6 <_svfiprintf_r+0x17e>
 800a528:	b1b0      	cbz	r0, 800a558 <_svfiprintf_r+0x110>
 800a52a:	9207      	str	r2, [sp, #28]
 800a52c:	e014      	b.n	800a558 <_svfiprintf_r+0x110>
 800a52e:	eba0 0308 	sub.w	r3, r0, r8
 800a532:	fa09 f303 	lsl.w	r3, r9, r3
 800a536:	4313      	orrs	r3, r2
 800a538:	9304      	str	r3, [sp, #16]
 800a53a:	46a2      	mov	sl, r4
 800a53c:	e7d2      	b.n	800a4e4 <_svfiprintf_r+0x9c>
 800a53e:	9b03      	ldr	r3, [sp, #12]
 800a540:	1d19      	adds	r1, r3, #4
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	9103      	str	r1, [sp, #12]
 800a546:	2b00      	cmp	r3, #0
 800a548:	bfbb      	ittet	lt
 800a54a:	425b      	neglt	r3, r3
 800a54c:	f042 0202 	orrlt.w	r2, r2, #2
 800a550:	9307      	strge	r3, [sp, #28]
 800a552:	9307      	strlt	r3, [sp, #28]
 800a554:	bfb8      	it	lt
 800a556:	9204      	strlt	r2, [sp, #16]
 800a558:	7823      	ldrb	r3, [r4, #0]
 800a55a:	2b2e      	cmp	r3, #46	; 0x2e
 800a55c:	d10c      	bne.n	800a578 <_svfiprintf_r+0x130>
 800a55e:	7863      	ldrb	r3, [r4, #1]
 800a560:	2b2a      	cmp	r3, #42	; 0x2a
 800a562:	d135      	bne.n	800a5d0 <_svfiprintf_r+0x188>
 800a564:	9b03      	ldr	r3, [sp, #12]
 800a566:	1d1a      	adds	r2, r3, #4
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	9203      	str	r2, [sp, #12]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	bfb8      	it	lt
 800a570:	f04f 33ff 	movlt.w	r3, #4294967295
 800a574:	3402      	adds	r4, #2
 800a576:	9305      	str	r3, [sp, #20]
 800a578:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a638 <_svfiprintf_r+0x1f0>
 800a57c:	7821      	ldrb	r1, [r4, #0]
 800a57e:	2203      	movs	r2, #3
 800a580:	4650      	mov	r0, sl
 800a582:	f7f5 fe05 	bl	8000190 <memchr>
 800a586:	b140      	cbz	r0, 800a59a <_svfiprintf_r+0x152>
 800a588:	2340      	movs	r3, #64	; 0x40
 800a58a:	eba0 000a 	sub.w	r0, r0, sl
 800a58e:	fa03 f000 	lsl.w	r0, r3, r0
 800a592:	9b04      	ldr	r3, [sp, #16]
 800a594:	4303      	orrs	r3, r0
 800a596:	3401      	adds	r4, #1
 800a598:	9304      	str	r3, [sp, #16]
 800a59a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a59e:	4827      	ldr	r0, [pc, #156]	; (800a63c <_svfiprintf_r+0x1f4>)
 800a5a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5a4:	2206      	movs	r2, #6
 800a5a6:	f7f5 fdf3 	bl	8000190 <memchr>
 800a5aa:	2800      	cmp	r0, #0
 800a5ac:	d038      	beq.n	800a620 <_svfiprintf_r+0x1d8>
 800a5ae:	4b24      	ldr	r3, [pc, #144]	; (800a640 <_svfiprintf_r+0x1f8>)
 800a5b0:	bb1b      	cbnz	r3, 800a5fa <_svfiprintf_r+0x1b2>
 800a5b2:	9b03      	ldr	r3, [sp, #12]
 800a5b4:	3307      	adds	r3, #7
 800a5b6:	f023 0307 	bic.w	r3, r3, #7
 800a5ba:	3308      	adds	r3, #8
 800a5bc:	9303      	str	r3, [sp, #12]
 800a5be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5c0:	4433      	add	r3, r6
 800a5c2:	9309      	str	r3, [sp, #36]	; 0x24
 800a5c4:	e767      	b.n	800a496 <_svfiprintf_r+0x4e>
 800a5c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5ca:	460c      	mov	r4, r1
 800a5cc:	2001      	movs	r0, #1
 800a5ce:	e7a5      	b.n	800a51c <_svfiprintf_r+0xd4>
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	3401      	adds	r4, #1
 800a5d4:	9305      	str	r3, [sp, #20]
 800a5d6:	4619      	mov	r1, r3
 800a5d8:	f04f 0c0a 	mov.w	ip, #10
 800a5dc:	4620      	mov	r0, r4
 800a5de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5e2:	3a30      	subs	r2, #48	; 0x30
 800a5e4:	2a09      	cmp	r2, #9
 800a5e6:	d903      	bls.n	800a5f0 <_svfiprintf_r+0x1a8>
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d0c5      	beq.n	800a578 <_svfiprintf_r+0x130>
 800a5ec:	9105      	str	r1, [sp, #20]
 800a5ee:	e7c3      	b.n	800a578 <_svfiprintf_r+0x130>
 800a5f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5f4:	4604      	mov	r4, r0
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	e7f0      	b.n	800a5dc <_svfiprintf_r+0x194>
 800a5fa:	ab03      	add	r3, sp, #12
 800a5fc:	9300      	str	r3, [sp, #0]
 800a5fe:	462a      	mov	r2, r5
 800a600:	4b10      	ldr	r3, [pc, #64]	; (800a644 <_svfiprintf_r+0x1fc>)
 800a602:	a904      	add	r1, sp, #16
 800a604:	4638      	mov	r0, r7
 800a606:	f3af 8000 	nop.w
 800a60a:	1c42      	adds	r2, r0, #1
 800a60c:	4606      	mov	r6, r0
 800a60e:	d1d6      	bne.n	800a5be <_svfiprintf_r+0x176>
 800a610:	89ab      	ldrh	r3, [r5, #12]
 800a612:	065b      	lsls	r3, r3, #25
 800a614:	f53f af2c 	bmi.w	800a470 <_svfiprintf_r+0x28>
 800a618:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a61a:	b01d      	add	sp, #116	; 0x74
 800a61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a620:	ab03      	add	r3, sp, #12
 800a622:	9300      	str	r3, [sp, #0]
 800a624:	462a      	mov	r2, r5
 800a626:	4b07      	ldr	r3, [pc, #28]	; (800a644 <_svfiprintf_r+0x1fc>)
 800a628:	a904      	add	r1, sp, #16
 800a62a:	4638      	mov	r0, r7
 800a62c:	f000 f9d2 	bl	800a9d4 <_printf_i>
 800a630:	e7eb      	b.n	800a60a <_svfiprintf_r+0x1c2>
 800a632:	bf00      	nop
 800a634:	0800cc7c 	.word	0x0800cc7c
 800a638:	0800cc82 	.word	0x0800cc82
 800a63c:	0800cc86 	.word	0x0800cc86
 800a640:	00000000 	.word	0x00000000
 800a644:	0800a391 	.word	0x0800a391

0800a648 <__sfputc_r>:
 800a648:	6893      	ldr	r3, [r2, #8]
 800a64a:	3b01      	subs	r3, #1
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	b410      	push	{r4}
 800a650:	6093      	str	r3, [r2, #8]
 800a652:	da07      	bge.n	800a664 <__sfputc_r+0x1c>
 800a654:	6994      	ldr	r4, [r2, #24]
 800a656:	42a3      	cmp	r3, r4
 800a658:	db01      	blt.n	800a65e <__sfputc_r+0x16>
 800a65a:	290a      	cmp	r1, #10
 800a65c:	d102      	bne.n	800a664 <__sfputc_r+0x1c>
 800a65e:	bc10      	pop	{r4}
 800a660:	f000 baee 	b.w	800ac40 <__swbuf_r>
 800a664:	6813      	ldr	r3, [r2, #0]
 800a666:	1c58      	adds	r0, r3, #1
 800a668:	6010      	str	r0, [r2, #0]
 800a66a:	7019      	strb	r1, [r3, #0]
 800a66c:	4608      	mov	r0, r1
 800a66e:	bc10      	pop	{r4}
 800a670:	4770      	bx	lr

0800a672 <__sfputs_r>:
 800a672:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a674:	4606      	mov	r6, r0
 800a676:	460f      	mov	r7, r1
 800a678:	4614      	mov	r4, r2
 800a67a:	18d5      	adds	r5, r2, r3
 800a67c:	42ac      	cmp	r4, r5
 800a67e:	d101      	bne.n	800a684 <__sfputs_r+0x12>
 800a680:	2000      	movs	r0, #0
 800a682:	e007      	b.n	800a694 <__sfputs_r+0x22>
 800a684:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a688:	463a      	mov	r2, r7
 800a68a:	4630      	mov	r0, r6
 800a68c:	f7ff ffdc 	bl	800a648 <__sfputc_r>
 800a690:	1c43      	adds	r3, r0, #1
 800a692:	d1f3      	bne.n	800a67c <__sfputs_r+0xa>
 800a694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a698 <_vfiprintf_r>:
 800a698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a69c:	460d      	mov	r5, r1
 800a69e:	b09d      	sub	sp, #116	; 0x74
 800a6a0:	4614      	mov	r4, r2
 800a6a2:	4698      	mov	r8, r3
 800a6a4:	4606      	mov	r6, r0
 800a6a6:	b118      	cbz	r0, 800a6b0 <_vfiprintf_r+0x18>
 800a6a8:	6983      	ldr	r3, [r0, #24]
 800a6aa:	b90b      	cbnz	r3, 800a6b0 <_vfiprintf_r+0x18>
 800a6ac:	f000 fca6 	bl	800affc <__sinit>
 800a6b0:	4b89      	ldr	r3, [pc, #548]	; (800a8d8 <_vfiprintf_r+0x240>)
 800a6b2:	429d      	cmp	r5, r3
 800a6b4:	d11b      	bne.n	800a6ee <_vfiprintf_r+0x56>
 800a6b6:	6875      	ldr	r5, [r6, #4]
 800a6b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6ba:	07d9      	lsls	r1, r3, #31
 800a6bc:	d405      	bmi.n	800a6ca <_vfiprintf_r+0x32>
 800a6be:	89ab      	ldrh	r3, [r5, #12]
 800a6c0:	059a      	lsls	r2, r3, #22
 800a6c2:	d402      	bmi.n	800a6ca <_vfiprintf_r+0x32>
 800a6c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6c6:	f000 fd37 	bl	800b138 <__retarget_lock_acquire_recursive>
 800a6ca:	89ab      	ldrh	r3, [r5, #12]
 800a6cc:	071b      	lsls	r3, r3, #28
 800a6ce:	d501      	bpl.n	800a6d4 <_vfiprintf_r+0x3c>
 800a6d0:	692b      	ldr	r3, [r5, #16]
 800a6d2:	b9eb      	cbnz	r3, 800a710 <_vfiprintf_r+0x78>
 800a6d4:	4629      	mov	r1, r5
 800a6d6:	4630      	mov	r0, r6
 800a6d8:	f000 fb04 	bl	800ace4 <__swsetup_r>
 800a6dc:	b1c0      	cbz	r0, 800a710 <_vfiprintf_r+0x78>
 800a6de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6e0:	07dc      	lsls	r4, r3, #31
 800a6e2:	d50e      	bpl.n	800a702 <_vfiprintf_r+0x6a>
 800a6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6e8:	b01d      	add	sp, #116	; 0x74
 800a6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ee:	4b7b      	ldr	r3, [pc, #492]	; (800a8dc <_vfiprintf_r+0x244>)
 800a6f0:	429d      	cmp	r5, r3
 800a6f2:	d101      	bne.n	800a6f8 <_vfiprintf_r+0x60>
 800a6f4:	68b5      	ldr	r5, [r6, #8]
 800a6f6:	e7df      	b.n	800a6b8 <_vfiprintf_r+0x20>
 800a6f8:	4b79      	ldr	r3, [pc, #484]	; (800a8e0 <_vfiprintf_r+0x248>)
 800a6fa:	429d      	cmp	r5, r3
 800a6fc:	bf08      	it	eq
 800a6fe:	68f5      	ldreq	r5, [r6, #12]
 800a700:	e7da      	b.n	800a6b8 <_vfiprintf_r+0x20>
 800a702:	89ab      	ldrh	r3, [r5, #12]
 800a704:	0598      	lsls	r0, r3, #22
 800a706:	d4ed      	bmi.n	800a6e4 <_vfiprintf_r+0x4c>
 800a708:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a70a:	f000 fd16 	bl	800b13a <__retarget_lock_release_recursive>
 800a70e:	e7e9      	b.n	800a6e4 <_vfiprintf_r+0x4c>
 800a710:	2300      	movs	r3, #0
 800a712:	9309      	str	r3, [sp, #36]	; 0x24
 800a714:	2320      	movs	r3, #32
 800a716:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a71a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a71e:	2330      	movs	r3, #48	; 0x30
 800a720:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a8e4 <_vfiprintf_r+0x24c>
 800a724:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a728:	f04f 0901 	mov.w	r9, #1
 800a72c:	4623      	mov	r3, r4
 800a72e:	469a      	mov	sl, r3
 800a730:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a734:	b10a      	cbz	r2, 800a73a <_vfiprintf_r+0xa2>
 800a736:	2a25      	cmp	r2, #37	; 0x25
 800a738:	d1f9      	bne.n	800a72e <_vfiprintf_r+0x96>
 800a73a:	ebba 0b04 	subs.w	fp, sl, r4
 800a73e:	d00b      	beq.n	800a758 <_vfiprintf_r+0xc0>
 800a740:	465b      	mov	r3, fp
 800a742:	4622      	mov	r2, r4
 800a744:	4629      	mov	r1, r5
 800a746:	4630      	mov	r0, r6
 800a748:	f7ff ff93 	bl	800a672 <__sfputs_r>
 800a74c:	3001      	adds	r0, #1
 800a74e:	f000 80aa 	beq.w	800a8a6 <_vfiprintf_r+0x20e>
 800a752:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a754:	445a      	add	r2, fp
 800a756:	9209      	str	r2, [sp, #36]	; 0x24
 800a758:	f89a 3000 	ldrb.w	r3, [sl]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	f000 80a2 	beq.w	800a8a6 <_vfiprintf_r+0x20e>
 800a762:	2300      	movs	r3, #0
 800a764:	f04f 32ff 	mov.w	r2, #4294967295
 800a768:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a76c:	f10a 0a01 	add.w	sl, sl, #1
 800a770:	9304      	str	r3, [sp, #16]
 800a772:	9307      	str	r3, [sp, #28]
 800a774:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a778:	931a      	str	r3, [sp, #104]	; 0x68
 800a77a:	4654      	mov	r4, sl
 800a77c:	2205      	movs	r2, #5
 800a77e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a782:	4858      	ldr	r0, [pc, #352]	; (800a8e4 <_vfiprintf_r+0x24c>)
 800a784:	f7f5 fd04 	bl	8000190 <memchr>
 800a788:	9a04      	ldr	r2, [sp, #16]
 800a78a:	b9d8      	cbnz	r0, 800a7c4 <_vfiprintf_r+0x12c>
 800a78c:	06d1      	lsls	r1, r2, #27
 800a78e:	bf44      	itt	mi
 800a790:	2320      	movmi	r3, #32
 800a792:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a796:	0713      	lsls	r3, r2, #28
 800a798:	bf44      	itt	mi
 800a79a:	232b      	movmi	r3, #43	; 0x2b
 800a79c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7a0:	f89a 3000 	ldrb.w	r3, [sl]
 800a7a4:	2b2a      	cmp	r3, #42	; 0x2a
 800a7a6:	d015      	beq.n	800a7d4 <_vfiprintf_r+0x13c>
 800a7a8:	9a07      	ldr	r2, [sp, #28]
 800a7aa:	4654      	mov	r4, sl
 800a7ac:	2000      	movs	r0, #0
 800a7ae:	f04f 0c0a 	mov.w	ip, #10
 800a7b2:	4621      	mov	r1, r4
 800a7b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7b8:	3b30      	subs	r3, #48	; 0x30
 800a7ba:	2b09      	cmp	r3, #9
 800a7bc:	d94e      	bls.n	800a85c <_vfiprintf_r+0x1c4>
 800a7be:	b1b0      	cbz	r0, 800a7ee <_vfiprintf_r+0x156>
 800a7c0:	9207      	str	r2, [sp, #28]
 800a7c2:	e014      	b.n	800a7ee <_vfiprintf_r+0x156>
 800a7c4:	eba0 0308 	sub.w	r3, r0, r8
 800a7c8:	fa09 f303 	lsl.w	r3, r9, r3
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	9304      	str	r3, [sp, #16]
 800a7d0:	46a2      	mov	sl, r4
 800a7d2:	e7d2      	b.n	800a77a <_vfiprintf_r+0xe2>
 800a7d4:	9b03      	ldr	r3, [sp, #12]
 800a7d6:	1d19      	adds	r1, r3, #4
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	9103      	str	r1, [sp, #12]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	bfbb      	ittet	lt
 800a7e0:	425b      	neglt	r3, r3
 800a7e2:	f042 0202 	orrlt.w	r2, r2, #2
 800a7e6:	9307      	strge	r3, [sp, #28]
 800a7e8:	9307      	strlt	r3, [sp, #28]
 800a7ea:	bfb8      	it	lt
 800a7ec:	9204      	strlt	r2, [sp, #16]
 800a7ee:	7823      	ldrb	r3, [r4, #0]
 800a7f0:	2b2e      	cmp	r3, #46	; 0x2e
 800a7f2:	d10c      	bne.n	800a80e <_vfiprintf_r+0x176>
 800a7f4:	7863      	ldrb	r3, [r4, #1]
 800a7f6:	2b2a      	cmp	r3, #42	; 0x2a
 800a7f8:	d135      	bne.n	800a866 <_vfiprintf_r+0x1ce>
 800a7fa:	9b03      	ldr	r3, [sp, #12]
 800a7fc:	1d1a      	adds	r2, r3, #4
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	9203      	str	r2, [sp, #12]
 800a802:	2b00      	cmp	r3, #0
 800a804:	bfb8      	it	lt
 800a806:	f04f 33ff 	movlt.w	r3, #4294967295
 800a80a:	3402      	adds	r4, #2
 800a80c:	9305      	str	r3, [sp, #20]
 800a80e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a8e8 <_vfiprintf_r+0x250>
 800a812:	7821      	ldrb	r1, [r4, #0]
 800a814:	2203      	movs	r2, #3
 800a816:	4650      	mov	r0, sl
 800a818:	f7f5 fcba 	bl	8000190 <memchr>
 800a81c:	b140      	cbz	r0, 800a830 <_vfiprintf_r+0x198>
 800a81e:	2340      	movs	r3, #64	; 0x40
 800a820:	eba0 000a 	sub.w	r0, r0, sl
 800a824:	fa03 f000 	lsl.w	r0, r3, r0
 800a828:	9b04      	ldr	r3, [sp, #16]
 800a82a:	4303      	orrs	r3, r0
 800a82c:	3401      	adds	r4, #1
 800a82e:	9304      	str	r3, [sp, #16]
 800a830:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a834:	482d      	ldr	r0, [pc, #180]	; (800a8ec <_vfiprintf_r+0x254>)
 800a836:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a83a:	2206      	movs	r2, #6
 800a83c:	f7f5 fca8 	bl	8000190 <memchr>
 800a840:	2800      	cmp	r0, #0
 800a842:	d03f      	beq.n	800a8c4 <_vfiprintf_r+0x22c>
 800a844:	4b2a      	ldr	r3, [pc, #168]	; (800a8f0 <_vfiprintf_r+0x258>)
 800a846:	bb1b      	cbnz	r3, 800a890 <_vfiprintf_r+0x1f8>
 800a848:	9b03      	ldr	r3, [sp, #12]
 800a84a:	3307      	adds	r3, #7
 800a84c:	f023 0307 	bic.w	r3, r3, #7
 800a850:	3308      	adds	r3, #8
 800a852:	9303      	str	r3, [sp, #12]
 800a854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a856:	443b      	add	r3, r7
 800a858:	9309      	str	r3, [sp, #36]	; 0x24
 800a85a:	e767      	b.n	800a72c <_vfiprintf_r+0x94>
 800a85c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a860:	460c      	mov	r4, r1
 800a862:	2001      	movs	r0, #1
 800a864:	e7a5      	b.n	800a7b2 <_vfiprintf_r+0x11a>
 800a866:	2300      	movs	r3, #0
 800a868:	3401      	adds	r4, #1
 800a86a:	9305      	str	r3, [sp, #20]
 800a86c:	4619      	mov	r1, r3
 800a86e:	f04f 0c0a 	mov.w	ip, #10
 800a872:	4620      	mov	r0, r4
 800a874:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a878:	3a30      	subs	r2, #48	; 0x30
 800a87a:	2a09      	cmp	r2, #9
 800a87c:	d903      	bls.n	800a886 <_vfiprintf_r+0x1ee>
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d0c5      	beq.n	800a80e <_vfiprintf_r+0x176>
 800a882:	9105      	str	r1, [sp, #20]
 800a884:	e7c3      	b.n	800a80e <_vfiprintf_r+0x176>
 800a886:	fb0c 2101 	mla	r1, ip, r1, r2
 800a88a:	4604      	mov	r4, r0
 800a88c:	2301      	movs	r3, #1
 800a88e:	e7f0      	b.n	800a872 <_vfiprintf_r+0x1da>
 800a890:	ab03      	add	r3, sp, #12
 800a892:	9300      	str	r3, [sp, #0]
 800a894:	462a      	mov	r2, r5
 800a896:	4b17      	ldr	r3, [pc, #92]	; (800a8f4 <_vfiprintf_r+0x25c>)
 800a898:	a904      	add	r1, sp, #16
 800a89a:	4630      	mov	r0, r6
 800a89c:	f3af 8000 	nop.w
 800a8a0:	4607      	mov	r7, r0
 800a8a2:	1c78      	adds	r0, r7, #1
 800a8a4:	d1d6      	bne.n	800a854 <_vfiprintf_r+0x1bc>
 800a8a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8a8:	07d9      	lsls	r1, r3, #31
 800a8aa:	d405      	bmi.n	800a8b8 <_vfiprintf_r+0x220>
 800a8ac:	89ab      	ldrh	r3, [r5, #12]
 800a8ae:	059a      	lsls	r2, r3, #22
 800a8b0:	d402      	bmi.n	800a8b8 <_vfiprintf_r+0x220>
 800a8b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8b4:	f000 fc41 	bl	800b13a <__retarget_lock_release_recursive>
 800a8b8:	89ab      	ldrh	r3, [r5, #12]
 800a8ba:	065b      	lsls	r3, r3, #25
 800a8bc:	f53f af12 	bmi.w	800a6e4 <_vfiprintf_r+0x4c>
 800a8c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8c2:	e711      	b.n	800a6e8 <_vfiprintf_r+0x50>
 800a8c4:	ab03      	add	r3, sp, #12
 800a8c6:	9300      	str	r3, [sp, #0]
 800a8c8:	462a      	mov	r2, r5
 800a8ca:	4b0a      	ldr	r3, [pc, #40]	; (800a8f4 <_vfiprintf_r+0x25c>)
 800a8cc:	a904      	add	r1, sp, #16
 800a8ce:	4630      	mov	r0, r6
 800a8d0:	f000 f880 	bl	800a9d4 <_printf_i>
 800a8d4:	e7e4      	b.n	800a8a0 <_vfiprintf_r+0x208>
 800a8d6:	bf00      	nop
 800a8d8:	0800ccd0 	.word	0x0800ccd0
 800a8dc:	0800ccf0 	.word	0x0800ccf0
 800a8e0:	0800ccb0 	.word	0x0800ccb0
 800a8e4:	0800cc7c 	.word	0x0800cc7c
 800a8e8:	0800cc82 	.word	0x0800cc82
 800a8ec:	0800cc86 	.word	0x0800cc86
 800a8f0:	00000000 	.word	0x00000000
 800a8f4:	0800a673 	.word	0x0800a673

0800a8f8 <_printf_common>:
 800a8f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8fc:	4616      	mov	r6, r2
 800a8fe:	4699      	mov	r9, r3
 800a900:	688a      	ldr	r2, [r1, #8]
 800a902:	690b      	ldr	r3, [r1, #16]
 800a904:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a908:	4293      	cmp	r3, r2
 800a90a:	bfb8      	it	lt
 800a90c:	4613      	movlt	r3, r2
 800a90e:	6033      	str	r3, [r6, #0]
 800a910:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a914:	4607      	mov	r7, r0
 800a916:	460c      	mov	r4, r1
 800a918:	b10a      	cbz	r2, 800a91e <_printf_common+0x26>
 800a91a:	3301      	adds	r3, #1
 800a91c:	6033      	str	r3, [r6, #0]
 800a91e:	6823      	ldr	r3, [r4, #0]
 800a920:	0699      	lsls	r1, r3, #26
 800a922:	bf42      	ittt	mi
 800a924:	6833      	ldrmi	r3, [r6, #0]
 800a926:	3302      	addmi	r3, #2
 800a928:	6033      	strmi	r3, [r6, #0]
 800a92a:	6825      	ldr	r5, [r4, #0]
 800a92c:	f015 0506 	ands.w	r5, r5, #6
 800a930:	d106      	bne.n	800a940 <_printf_common+0x48>
 800a932:	f104 0a19 	add.w	sl, r4, #25
 800a936:	68e3      	ldr	r3, [r4, #12]
 800a938:	6832      	ldr	r2, [r6, #0]
 800a93a:	1a9b      	subs	r3, r3, r2
 800a93c:	42ab      	cmp	r3, r5
 800a93e:	dc26      	bgt.n	800a98e <_printf_common+0x96>
 800a940:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a944:	1e13      	subs	r3, r2, #0
 800a946:	6822      	ldr	r2, [r4, #0]
 800a948:	bf18      	it	ne
 800a94a:	2301      	movne	r3, #1
 800a94c:	0692      	lsls	r2, r2, #26
 800a94e:	d42b      	bmi.n	800a9a8 <_printf_common+0xb0>
 800a950:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a954:	4649      	mov	r1, r9
 800a956:	4638      	mov	r0, r7
 800a958:	47c0      	blx	r8
 800a95a:	3001      	adds	r0, #1
 800a95c:	d01e      	beq.n	800a99c <_printf_common+0xa4>
 800a95e:	6823      	ldr	r3, [r4, #0]
 800a960:	68e5      	ldr	r5, [r4, #12]
 800a962:	6832      	ldr	r2, [r6, #0]
 800a964:	f003 0306 	and.w	r3, r3, #6
 800a968:	2b04      	cmp	r3, #4
 800a96a:	bf08      	it	eq
 800a96c:	1aad      	subeq	r5, r5, r2
 800a96e:	68a3      	ldr	r3, [r4, #8]
 800a970:	6922      	ldr	r2, [r4, #16]
 800a972:	bf0c      	ite	eq
 800a974:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a978:	2500      	movne	r5, #0
 800a97a:	4293      	cmp	r3, r2
 800a97c:	bfc4      	itt	gt
 800a97e:	1a9b      	subgt	r3, r3, r2
 800a980:	18ed      	addgt	r5, r5, r3
 800a982:	2600      	movs	r6, #0
 800a984:	341a      	adds	r4, #26
 800a986:	42b5      	cmp	r5, r6
 800a988:	d11a      	bne.n	800a9c0 <_printf_common+0xc8>
 800a98a:	2000      	movs	r0, #0
 800a98c:	e008      	b.n	800a9a0 <_printf_common+0xa8>
 800a98e:	2301      	movs	r3, #1
 800a990:	4652      	mov	r2, sl
 800a992:	4649      	mov	r1, r9
 800a994:	4638      	mov	r0, r7
 800a996:	47c0      	blx	r8
 800a998:	3001      	adds	r0, #1
 800a99a:	d103      	bne.n	800a9a4 <_printf_common+0xac>
 800a99c:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9a4:	3501      	adds	r5, #1
 800a9a6:	e7c6      	b.n	800a936 <_printf_common+0x3e>
 800a9a8:	18e1      	adds	r1, r4, r3
 800a9aa:	1c5a      	adds	r2, r3, #1
 800a9ac:	2030      	movs	r0, #48	; 0x30
 800a9ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a9b2:	4422      	add	r2, r4
 800a9b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a9b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a9bc:	3302      	adds	r3, #2
 800a9be:	e7c7      	b.n	800a950 <_printf_common+0x58>
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	4622      	mov	r2, r4
 800a9c4:	4649      	mov	r1, r9
 800a9c6:	4638      	mov	r0, r7
 800a9c8:	47c0      	blx	r8
 800a9ca:	3001      	adds	r0, #1
 800a9cc:	d0e6      	beq.n	800a99c <_printf_common+0xa4>
 800a9ce:	3601      	adds	r6, #1
 800a9d0:	e7d9      	b.n	800a986 <_printf_common+0x8e>
	...

0800a9d4 <_printf_i>:
 800a9d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9d8:	7e0f      	ldrb	r7, [r1, #24]
 800a9da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a9dc:	2f78      	cmp	r7, #120	; 0x78
 800a9de:	4691      	mov	r9, r2
 800a9e0:	4680      	mov	r8, r0
 800a9e2:	460c      	mov	r4, r1
 800a9e4:	469a      	mov	sl, r3
 800a9e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a9ea:	d807      	bhi.n	800a9fc <_printf_i+0x28>
 800a9ec:	2f62      	cmp	r7, #98	; 0x62
 800a9ee:	d80a      	bhi.n	800aa06 <_printf_i+0x32>
 800a9f0:	2f00      	cmp	r7, #0
 800a9f2:	f000 80d8 	beq.w	800aba6 <_printf_i+0x1d2>
 800a9f6:	2f58      	cmp	r7, #88	; 0x58
 800a9f8:	f000 80a3 	beq.w	800ab42 <_printf_i+0x16e>
 800a9fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa04:	e03a      	b.n	800aa7c <_printf_i+0xa8>
 800aa06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa0a:	2b15      	cmp	r3, #21
 800aa0c:	d8f6      	bhi.n	800a9fc <_printf_i+0x28>
 800aa0e:	a101      	add	r1, pc, #4	; (adr r1, 800aa14 <_printf_i+0x40>)
 800aa10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa14:	0800aa6d 	.word	0x0800aa6d
 800aa18:	0800aa81 	.word	0x0800aa81
 800aa1c:	0800a9fd 	.word	0x0800a9fd
 800aa20:	0800a9fd 	.word	0x0800a9fd
 800aa24:	0800a9fd 	.word	0x0800a9fd
 800aa28:	0800a9fd 	.word	0x0800a9fd
 800aa2c:	0800aa81 	.word	0x0800aa81
 800aa30:	0800a9fd 	.word	0x0800a9fd
 800aa34:	0800a9fd 	.word	0x0800a9fd
 800aa38:	0800a9fd 	.word	0x0800a9fd
 800aa3c:	0800a9fd 	.word	0x0800a9fd
 800aa40:	0800ab8d 	.word	0x0800ab8d
 800aa44:	0800aab1 	.word	0x0800aab1
 800aa48:	0800ab6f 	.word	0x0800ab6f
 800aa4c:	0800a9fd 	.word	0x0800a9fd
 800aa50:	0800a9fd 	.word	0x0800a9fd
 800aa54:	0800abaf 	.word	0x0800abaf
 800aa58:	0800a9fd 	.word	0x0800a9fd
 800aa5c:	0800aab1 	.word	0x0800aab1
 800aa60:	0800a9fd 	.word	0x0800a9fd
 800aa64:	0800a9fd 	.word	0x0800a9fd
 800aa68:	0800ab77 	.word	0x0800ab77
 800aa6c:	682b      	ldr	r3, [r5, #0]
 800aa6e:	1d1a      	adds	r2, r3, #4
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	602a      	str	r2, [r5, #0]
 800aa74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	e0a3      	b.n	800abc8 <_printf_i+0x1f4>
 800aa80:	6820      	ldr	r0, [r4, #0]
 800aa82:	6829      	ldr	r1, [r5, #0]
 800aa84:	0606      	lsls	r6, r0, #24
 800aa86:	f101 0304 	add.w	r3, r1, #4
 800aa8a:	d50a      	bpl.n	800aaa2 <_printf_i+0xce>
 800aa8c:	680e      	ldr	r6, [r1, #0]
 800aa8e:	602b      	str	r3, [r5, #0]
 800aa90:	2e00      	cmp	r6, #0
 800aa92:	da03      	bge.n	800aa9c <_printf_i+0xc8>
 800aa94:	232d      	movs	r3, #45	; 0x2d
 800aa96:	4276      	negs	r6, r6
 800aa98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa9c:	485e      	ldr	r0, [pc, #376]	; (800ac18 <_printf_i+0x244>)
 800aa9e:	230a      	movs	r3, #10
 800aaa0:	e019      	b.n	800aad6 <_printf_i+0x102>
 800aaa2:	680e      	ldr	r6, [r1, #0]
 800aaa4:	602b      	str	r3, [r5, #0]
 800aaa6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aaaa:	bf18      	it	ne
 800aaac:	b236      	sxthne	r6, r6
 800aaae:	e7ef      	b.n	800aa90 <_printf_i+0xbc>
 800aab0:	682b      	ldr	r3, [r5, #0]
 800aab2:	6820      	ldr	r0, [r4, #0]
 800aab4:	1d19      	adds	r1, r3, #4
 800aab6:	6029      	str	r1, [r5, #0]
 800aab8:	0601      	lsls	r1, r0, #24
 800aaba:	d501      	bpl.n	800aac0 <_printf_i+0xec>
 800aabc:	681e      	ldr	r6, [r3, #0]
 800aabe:	e002      	b.n	800aac6 <_printf_i+0xf2>
 800aac0:	0646      	lsls	r6, r0, #25
 800aac2:	d5fb      	bpl.n	800aabc <_printf_i+0xe8>
 800aac4:	881e      	ldrh	r6, [r3, #0]
 800aac6:	4854      	ldr	r0, [pc, #336]	; (800ac18 <_printf_i+0x244>)
 800aac8:	2f6f      	cmp	r7, #111	; 0x6f
 800aaca:	bf0c      	ite	eq
 800aacc:	2308      	moveq	r3, #8
 800aace:	230a      	movne	r3, #10
 800aad0:	2100      	movs	r1, #0
 800aad2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aad6:	6865      	ldr	r5, [r4, #4]
 800aad8:	60a5      	str	r5, [r4, #8]
 800aada:	2d00      	cmp	r5, #0
 800aadc:	bfa2      	ittt	ge
 800aade:	6821      	ldrge	r1, [r4, #0]
 800aae0:	f021 0104 	bicge.w	r1, r1, #4
 800aae4:	6021      	strge	r1, [r4, #0]
 800aae6:	b90e      	cbnz	r6, 800aaec <_printf_i+0x118>
 800aae8:	2d00      	cmp	r5, #0
 800aaea:	d04d      	beq.n	800ab88 <_printf_i+0x1b4>
 800aaec:	4615      	mov	r5, r2
 800aaee:	fbb6 f1f3 	udiv	r1, r6, r3
 800aaf2:	fb03 6711 	mls	r7, r3, r1, r6
 800aaf6:	5dc7      	ldrb	r7, [r0, r7]
 800aaf8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aafc:	4637      	mov	r7, r6
 800aafe:	42bb      	cmp	r3, r7
 800ab00:	460e      	mov	r6, r1
 800ab02:	d9f4      	bls.n	800aaee <_printf_i+0x11a>
 800ab04:	2b08      	cmp	r3, #8
 800ab06:	d10b      	bne.n	800ab20 <_printf_i+0x14c>
 800ab08:	6823      	ldr	r3, [r4, #0]
 800ab0a:	07de      	lsls	r6, r3, #31
 800ab0c:	d508      	bpl.n	800ab20 <_printf_i+0x14c>
 800ab0e:	6923      	ldr	r3, [r4, #16]
 800ab10:	6861      	ldr	r1, [r4, #4]
 800ab12:	4299      	cmp	r1, r3
 800ab14:	bfde      	ittt	le
 800ab16:	2330      	movle	r3, #48	; 0x30
 800ab18:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ab20:	1b52      	subs	r2, r2, r5
 800ab22:	6122      	str	r2, [r4, #16]
 800ab24:	f8cd a000 	str.w	sl, [sp]
 800ab28:	464b      	mov	r3, r9
 800ab2a:	aa03      	add	r2, sp, #12
 800ab2c:	4621      	mov	r1, r4
 800ab2e:	4640      	mov	r0, r8
 800ab30:	f7ff fee2 	bl	800a8f8 <_printf_common>
 800ab34:	3001      	adds	r0, #1
 800ab36:	d14c      	bne.n	800abd2 <_printf_i+0x1fe>
 800ab38:	f04f 30ff 	mov.w	r0, #4294967295
 800ab3c:	b004      	add	sp, #16
 800ab3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab42:	4835      	ldr	r0, [pc, #212]	; (800ac18 <_printf_i+0x244>)
 800ab44:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ab48:	6829      	ldr	r1, [r5, #0]
 800ab4a:	6823      	ldr	r3, [r4, #0]
 800ab4c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ab50:	6029      	str	r1, [r5, #0]
 800ab52:	061d      	lsls	r5, r3, #24
 800ab54:	d514      	bpl.n	800ab80 <_printf_i+0x1ac>
 800ab56:	07df      	lsls	r7, r3, #31
 800ab58:	bf44      	itt	mi
 800ab5a:	f043 0320 	orrmi.w	r3, r3, #32
 800ab5e:	6023      	strmi	r3, [r4, #0]
 800ab60:	b91e      	cbnz	r6, 800ab6a <_printf_i+0x196>
 800ab62:	6823      	ldr	r3, [r4, #0]
 800ab64:	f023 0320 	bic.w	r3, r3, #32
 800ab68:	6023      	str	r3, [r4, #0]
 800ab6a:	2310      	movs	r3, #16
 800ab6c:	e7b0      	b.n	800aad0 <_printf_i+0xfc>
 800ab6e:	6823      	ldr	r3, [r4, #0]
 800ab70:	f043 0320 	orr.w	r3, r3, #32
 800ab74:	6023      	str	r3, [r4, #0]
 800ab76:	2378      	movs	r3, #120	; 0x78
 800ab78:	4828      	ldr	r0, [pc, #160]	; (800ac1c <_printf_i+0x248>)
 800ab7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ab7e:	e7e3      	b.n	800ab48 <_printf_i+0x174>
 800ab80:	0659      	lsls	r1, r3, #25
 800ab82:	bf48      	it	mi
 800ab84:	b2b6      	uxthmi	r6, r6
 800ab86:	e7e6      	b.n	800ab56 <_printf_i+0x182>
 800ab88:	4615      	mov	r5, r2
 800ab8a:	e7bb      	b.n	800ab04 <_printf_i+0x130>
 800ab8c:	682b      	ldr	r3, [r5, #0]
 800ab8e:	6826      	ldr	r6, [r4, #0]
 800ab90:	6961      	ldr	r1, [r4, #20]
 800ab92:	1d18      	adds	r0, r3, #4
 800ab94:	6028      	str	r0, [r5, #0]
 800ab96:	0635      	lsls	r5, r6, #24
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	d501      	bpl.n	800aba0 <_printf_i+0x1cc>
 800ab9c:	6019      	str	r1, [r3, #0]
 800ab9e:	e002      	b.n	800aba6 <_printf_i+0x1d2>
 800aba0:	0670      	lsls	r0, r6, #25
 800aba2:	d5fb      	bpl.n	800ab9c <_printf_i+0x1c8>
 800aba4:	8019      	strh	r1, [r3, #0]
 800aba6:	2300      	movs	r3, #0
 800aba8:	6123      	str	r3, [r4, #16]
 800abaa:	4615      	mov	r5, r2
 800abac:	e7ba      	b.n	800ab24 <_printf_i+0x150>
 800abae:	682b      	ldr	r3, [r5, #0]
 800abb0:	1d1a      	adds	r2, r3, #4
 800abb2:	602a      	str	r2, [r5, #0]
 800abb4:	681d      	ldr	r5, [r3, #0]
 800abb6:	6862      	ldr	r2, [r4, #4]
 800abb8:	2100      	movs	r1, #0
 800abba:	4628      	mov	r0, r5
 800abbc:	f7f5 fae8 	bl	8000190 <memchr>
 800abc0:	b108      	cbz	r0, 800abc6 <_printf_i+0x1f2>
 800abc2:	1b40      	subs	r0, r0, r5
 800abc4:	6060      	str	r0, [r4, #4]
 800abc6:	6863      	ldr	r3, [r4, #4]
 800abc8:	6123      	str	r3, [r4, #16]
 800abca:	2300      	movs	r3, #0
 800abcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abd0:	e7a8      	b.n	800ab24 <_printf_i+0x150>
 800abd2:	6923      	ldr	r3, [r4, #16]
 800abd4:	462a      	mov	r2, r5
 800abd6:	4649      	mov	r1, r9
 800abd8:	4640      	mov	r0, r8
 800abda:	47d0      	blx	sl
 800abdc:	3001      	adds	r0, #1
 800abde:	d0ab      	beq.n	800ab38 <_printf_i+0x164>
 800abe0:	6823      	ldr	r3, [r4, #0]
 800abe2:	079b      	lsls	r3, r3, #30
 800abe4:	d413      	bmi.n	800ac0e <_printf_i+0x23a>
 800abe6:	68e0      	ldr	r0, [r4, #12]
 800abe8:	9b03      	ldr	r3, [sp, #12]
 800abea:	4298      	cmp	r0, r3
 800abec:	bfb8      	it	lt
 800abee:	4618      	movlt	r0, r3
 800abf0:	e7a4      	b.n	800ab3c <_printf_i+0x168>
 800abf2:	2301      	movs	r3, #1
 800abf4:	4632      	mov	r2, r6
 800abf6:	4649      	mov	r1, r9
 800abf8:	4640      	mov	r0, r8
 800abfa:	47d0      	blx	sl
 800abfc:	3001      	adds	r0, #1
 800abfe:	d09b      	beq.n	800ab38 <_printf_i+0x164>
 800ac00:	3501      	adds	r5, #1
 800ac02:	68e3      	ldr	r3, [r4, #12]
 800ac04:	9903      	ldr	r1, [sp, #12]
 800ac06:	1a5b      	subs	r3, r3, r1
 800ac08:	42ab      	cmp	r3, r5
 800ac0a:	dcf2      	bgt.n	800abf2 <_printf_i+0x21e>
 800ac0c:	e7eb      	b.n	800abe6 <_printf_i+0x212>
 800ac0e:	2500      	movs	r5, #0
 800ac10:	f104 0619 	add.w	r6, r4, #25
 800ac14:	e7f5      	b.n	800ac02 <_printf_i+0x22e>
 800ac16:	bf00      	nop
 800ac18:	0800cc8d 	.word	0x0800cc8d
 800ac1c:	0800cc9e 	.word	0x0800cc9e

0800ac20 <_sbrk_r>:
 800ac20:	b538      	push	{r3, r4, r5, lr}
 800ac22:	4d06      	ldr	r5, [pc, #24]	; (800ac3c <_sbrk_r+0x1c>)
 800ac24:	2300      	movs	r3, #0
 800ac26:	4604      	mov	r4, r0
 800ac28:	4608      	mov	r0, r1
 800ac2a:	602b      	str	r3, [r5, #0]
 800ac2c:	f7f7 fb1c 	bl	8002268 <_sbrk>
 800ac30:	1c43      	adds	r3, r0, #1
 800ac32:	d102      	bne.n	800ac3a <_sbrk_r+0x1a>
 800ac34:	682b      	ldr	r3, [r5, #0]
 800ac36:	b103      	cbz	r3, 800ac3a <_sbrk_r+0x1a>
 800ac38:	6023      	str	r3, [r4, #0]
 800ac3a:	bd38      	pop	{r3, r4, r5, pc}
 800ac3c:	2000150c 	.word	0x2000150c

0800ac40 <__swbuf_r>:
 800ac40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac42:	460e      	mov	r6, r1
 800ac44:	4614      	mov	r4, r2
 800ac46:	4605      	mov	r5, r0
 800ac48:	b118      	cbz	r0, 800ac52 <__swbuf_r+0x12>
 800ac4a:	6983      	ldr	r3, [r0, #24]
 800ac4c:	b90b      	cbnz	r3, 800ac52 <__swbuf_r+0x12>
 800ac4e:	f000 f9d5 	bl	800affc <__sinit>
 800ac52:	4b21      	ldr	r3, [pc, #132]	; (800acd8 <__swbuf_r+0x98>)
 800ac54:	429c      	cmp	r4, r3
 800ac56:	d12b      	bne.n	800acb0 <__swbuf_r+0x70>
 800ac58:	686c      	ldr	r4, [r5, #4]
 800ac5a:	69a3      	ldr	r3, [r4, #24]
 800ac5c:	60a3      	str	r3, [r4, #8]
 800ac5e:	89a3      	ldrh	r3, [r4, #12]
 800ac60:	071a      	lsls	r2, r3, #28
 800ac62:	d52f      	bpl.n	800acc4 <__swbuf_r+0x84>
 800ac64:	6923      	ldr	r3, [r4, #16]
 800ac66:	b36b      	cbz	r3, 800acc4 <__swbuf_r+0x84>
 800ac68:	6923      	ldr	r3, [r4, #16]
 800ac6a:	6820      	ldr	r0, [r4, #0]
 800ac6c:	1ac0      	subs	r0, r0, r3
 800ac6e:	6963      	ldr	r3, [r4, #20]
 800ac70:	b2f6      	uxtb	r6, r6
 800ac72:	4283      	cmp	r3, r0
 800ac74:	4637      	mov	r7, r6
 800ac76:	dc04      	bgt.n	800ac82 <__swbuf_r+0x42>
 800ac78:	4621      	mov	r1, r4
 800ac7a:	4628      	mov	r0, r5
 800ac7c:	f000 f92a 	bl	800aed4 <_fflush_r>
 800ac80:	bb30      	cbnz	r0, 800acd0 <__swbuf_r+0x90>
 800ac82:	68a3      	ldr	r3, [r4, #8]
 800ac84:	3b01      	subs	r3, #1
 800ac86:	60a3      	str	r3, [r4, #8]
 800ac88:	6823      	ldr	r3, [r4, #0]
 800ac8a:	1c5a      	adds	r2, r3, #1
 800ac8c:	6022      	str	r2, [r4, #0]
 800ac8e:	701e      	strb	r6, [r3, #0]
 800ac90:	6963      	ldr	r3, [r4, #20]
 800ac92:	3001      	adds	r0, #1
 800ac94:	4283      	cmp	r3, r0
 800ac96:	d004      	beq.n	800aca2 <__swbuf_r+0x62>
 800ac98:	89a3      	ldrh	r3, [r4, #12]
 800ac9a:	07db      	lsls	r3, r3, #31
 800ac9c:	d506      	bpl.n	800acac <__swbuf_r+0x6c>
 800ac9e:	2e0a      	cmp	r6, #10
 800aca0:	d104      	bne.n	800acac <__swbuf_r+0x6c>
 800aca2:	4621      	mov	r1, r4
 800aca4:	4628      	mov	r0, r5
 800aca6:	f000 f915 	bl	800aed4 <_fflush_r>
 800acaa:	b988      	cbnz	r0, 800acd0 <__swbuf_r+0x90>
 800acac:	4638      	mov	r0, r7
 800acae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acb0:	4b0a      	ldr	r3, [pc, #40]	; (800acdc <__swbuf_r+0x9c>)
 800acb2:	429c      	cmp	r4, r3
 800acb4:	d101      	bne.n	800acba <__swbuf_r+0x7a>
 800acb6:	68ac      	ldr	r4, [r5, #8]
 800acb8:	e7cf      	b.n	800ac5a <__swbuf_r+0x1a>
 800acba:	4b09      	ldr	r3, [pc, #36]	; (800ace0 <__swbuf_r+0xa0>)
 800acbc:	429c      	cmp	r4, r3
 800acbe:	bf08      	it	eq
 800acc0:	68ec      	ldreq	r4, [r5, #12]
 800acc2:	e7ca      	b.n	800ac5a <__swbuf_r+0x1a>
 800acc4:	4621      	mov	r1, r4
 800acc6:	4628      	mov	r0, r5
 800acc8:	f000 f80c 	bl	800ace4 <__swsetup_r>
 800accc:	2800      	cmp	r0, #0
 800acce:	d0cb      	beq.n	800ac68 <__swbuf_r+0x28>
 800acd0:	f04f 37ff 	mov.w	r7, #4294967295
 800acd4:	e7ea      	b.n	800acac <__swbuf_r+0x6c>
 800acd6:	bf00      	nop
 800acd8:	0800ccd0 	.word	0x0800ccd0
 800acdc:	0800ccf0 	.word	0x0800ccf0
 800ace0:	0800ccb0 	.word	0x0800ccb0

0800ace4 <__swsetup_r>:
 800ace4:	4b32      	ldr	r3, [pc, #200]	; (800adb0 <__swsetup_r+0xcc>)
 800ace6:	b570      	push	{r4, r5, r6, lr}
 800ace8:	681d      	ldr	r5, [r3, #0]
 800acea:	4606      	mov	r6, r0
 800acec:	460c      	mov	r4, r1
 800acee:	b125      	cbz	r5, 800acfa <__swsetup_r+0x16>
 800acf0:	69ab      	ldr	r3, [r5, #24]
 800acf2:	b913      	cbnz	r3, 800acfa <__swsetup_r+0x16>
 800acf4:	4628      	mov	r0, r5
 800acf6:	f000 f981 	bl	800affc <__sinit>
 800acfa:	4b2e      	ldr	r3, [pc, #184]	; (800adb4 <__swsetup_r+0xd0>)
 800acfc:	429c      	cmp	r4, r3
 800acfe:	d10f      	bne.n	800ad20 <__swsetup_r+0x3c>
 800ad00:	686c      	ldr	r4, [r5, #4]
 800ad02:	89a3      	ldrh	r3, [r4, #12]
 800ad04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad08:	0719      	lsls	r1, r3, #28
 800ad0a:	d42c      	bmi.n	800ad66 <__swsetup_r+0x82>
 800ad0c:	06dd      	lsls	r5, r3, #27
 800ad0e:	d411      	bmi.n	800ad34 <__swsetup_r+0x50>
 800ad10:	2309      	movs	r3, #9
 800ad12:	6033      	str	r3, [r6, #0]
 800ad14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ad18:	81a3      	strh	r3, [r4, #12]
 800ad1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad1e:	e03e      	b.n	800ad9e <__swsetup_r+0xba>
 800ad20:	4b25      	ldr	r3, [pc, #148]	; (800adb8 <__swsetup_r+0xd4>)
 800ad22:	429c      	cmp	r4, r3
 800ad24:	d101      	bne.n	800ad2a <__swsetup_r+0x46>
 800ad26:	68ac      	ldr	r4, [r5, #8]
 800ad28:	e7eb      	b.n	800ad02 <__swsetup_r+0x1e>
 800ad2a:	4b24      	ldr	r3, [pc, #144]	; (800adbc <__swsetup_r+0xd8>)
 800ad2c:	429c      	cmp	r4, r3
 800ad2e:	bf08      	it	eq
 800ad30:	68ec      	ldreq	r4, [r5, #12]
 800ad32:	e7e6      	b.n	800ad02 <__swsetup_r+0x1e>
 800ad34:	0758      	lsls	r0, r3, #29
 800ad36:	d512      	bpl.n	800ad5e <__swsetup_r+0x7a>
 800ad38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad3a:	b141      	cbz	r1, 800ad4e <__swsetup_r+0x6a>
 800ad3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad40:	4299      	cmp	r1, r3
 800ad42:	d002      	beq.n	800ad4a <__swsetup_r+0x66>
 800ad44:	4630      	mov	r0, r6
 800ad46:	f7ff fa45 	bl	800a1d4 <_free_r>
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	6363      	str	r3, [r4, #52]	; 0x34
 800ad4e:	89a3      	ldrh	r3, [r4, #12]
 800ad50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ad54:	81a3      	strh	r3, [r4, #12]
 800ad56:	2300      	movs	r3, #0
 800ad58:	6063      	str	r3, [r4, #4]
 800ad5a:	6923      	ldr	r3, [r4, #16]
 800ad5c:	6023      	str	r3, [r4, #0]
 800ad5e:	89a3      	ldrh	r3, [r4, #12]
 800ad60:	f043 0308 	orr.w	r3, r3, #8
 800ad64:	81a3      	strh	r3, [r4, #12]
 800ad66:	6923      	ldr	r3, [r4, #16]
 800ad68:	b94b      	cbnz	r3, 800ad7e <__swsetup_r+0x9a>
 800ad6a:	89a3      	ldrh	r3, [r4, #12]
 800ad6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ad70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad74:	d003      	beq.n	800ad7e <__swsetup_r+0x9a>
 800ad76:	4621      	mov	r1, r4
 800ad78:	4630      	mov	r0, r6
 800ad7a:	f000 fa05 	bl	800b188 <__smakebuf_r>
 800ad7e:	89a0      	ldrh	r0, [r4, #12]
 800ad80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad84:	f010 0301 	ands.w	r3, r0, #1
 800ad88:	d00a      	beq.n	800ada0 <__swsetup_r+0xbc>
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	60a3      	str	r3, [r4, #8]
 800ad8e:	6963      	ldr	r3, [r4, #20]
 800ad90:	425b      	negs	r3, r3
 800ad92:	61a3      	str	r3, [r4, #24]
 800ad94:	6923      	ldr	r3, [r4, #16]
 800ad96:	b943      	cbnz	r3, 800adaa <__swsetup_r+0xc6>
 800ad98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ad9c:	d1ba      	bne.n	800ad14 <__swsetup_r+0x30>
 800ad9e:	bd70      	pop	{r4, r5, r6, pc}
 800ada0:	0781      	lsls	r1, r0, #30
 800ada2:	bf58      	it	pl
 800ada4:	6963      	ldrpl	r3, [r4, #20]
 800ada6:	60a3      	str	r3, [r4, #8]
 800ada8:	e7f4      	b.n	800ad94 <__swsetup_r+0xb0>
 800adaa:	2000      	movs	r0, #0
 800adac:	e7f7      	b.n	800ad9e <__swsetup_r+0xba>
 800adae:	bf00      	nop
 800adb0:	20000010 	.word	0x20000010
 800adb4:	0800ccd0 	.word	0x0800ccd0
 800adb8:	0800ccf0 	.word	0x0800ccf0
 800adbc:	0800ccb0 	.word	0x0800ccb0

0800adc0 <abort>:
 800adc0:	b508      	push	{r3, lr}
 800adc2:	2006      	movs	r0, #6
 800adc4:	f000 fa9e 	bl	800b304 <raise>
 800adc8:	2001      	movs	r0, #1
 800adca:	f7f7 f9da 	bl	8002182 <_exit>
	...

0800add0 <__sflush_r>:
 800add0:	898a      	ldrh	r2, [r1, #12]
 800add2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800add4:	4605      	mov	r5, r0
 800add6:	0710      	lsls	r0, r2, #28
 800add8:	460c      	mov	r4, r1
 800adda:	d457      	bmi.n	800ae8c <__sflush_r+0xbc>
 800addc:	684b      	ldr	r3, [r1, #4]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	dc04      	bgt.n	800adec <__sflush_r+0x1c>
 800ade2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	dc01      	bgt.n	800adec <__sflush_r+0x1c>
 800ade8:	2000      	movs	r0, #0
 800adea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800adee:	2e00      	cmp	r6, #0
 800adf0:	d0fa      	beq.n	800ade8 <__sflush_r+0x18>
 800adf2:	2300      	movs	r3, #0
 800adf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800adf8:	682f      	ldr	r7, [r5, #0]
 800adfa:	602b      	str	r3, [r5, #0]
 800adfc:	d032      	beq.n	800ae64 <__sflush_r+0x94>
 800adfe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ae00:	89a3      	ldrh	r3, [r4, #12]
 800ae02:	075a      	lsls	r2, r3, #29
 800ae04:	d505      	bpl.n	800ae12 <__sflush_r+0x42>
 800ae06:	6863      	ldr	r3, [r4, #4]
 800ae08:	1ac0      	subs	r0, r0, r3
 800ae0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae0c:	b10b      	cbz	r3, 800ae12 <__sflush_r+0x42>
 800ae0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae10:	1ac0      	subs	r0, r0, r3
 800ae12:	2300      	movs	r3, #0
 800ae14:	4602      	mov	r2, r0
 800ae16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae18:	6a21      	ldr	r1, [r4, #32]
 800ae1a:	4628      	mov	r0, r5
 800ae1c:	47b0      	blx	r6
 800ae1e:	1c43      	adds	r3, r0, #1
 800ae20:	89a3      	ldrh	r3, [r4, #12]
 800ae22:	d106      	bne.n	800ae32 <__sflush_r+0x62>
 800ae24:	6829      	ldr	r1, [r5, #0]
 800ae26:	291d      	cmp	r1, #29
 800ae28:	d82c      	bhi.n	800ae84 <__sflush_r+0xb4>
 800ae2a:	4a29      	ldr	r2, [pc, #164]	; (800aed0 <__sflush_r+0x100>)
 800ae2c:	40ca      	lsrs	r2, r1
 800ae2e:	07d6      	lsls	r6, r2, #31
 800ae30:	d528      	bpl.n	800ae84 <__sflush_r+0xb4>
 800ae32:	2200      	movs	r2, #0
 800ae34:	6062      	str	r2, [r4, #4]
 800ae36:	04d9      	lsls	r1, r3, #19
 800ae38:	6922      	ldr	r2, [r4, #16]
 800ae3a:	6022      	str	r2, [r4, #0]
 800ae3c:	d504      	bpl.n	800ae48 <__sflush_r+0x78>
 800ae3e:	1c42      	adds	r2, r0, #1
 800ae40:	d101      	bne.n	800ae46 <__sflush_r+0x76>
 800ae42:	682b      	ldr	r3, [r5, #0]
 800ae44:	b903      	cbnz	r3, 800ae48 <__sflush_r+0x78>
 800ae46:	6560      	str	r0, [r4, #84]	; 0x54
 800ae48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae4a:	602f      	str	r7, [r5, #0]
 800ae4c:	2900      	cmp	r1, #0
 800ae4e:	d0cb      	beq.n	800ade8 <__sflush_r+0x18>
 800ae50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae54:	4299      	cmp	r1, r3
 800ae56:	d002      	beq.n	800ae5e <__sflush_r+0x8e>
 800ae58:	4628      	mov	r0, r5
 800ae5a:	f7ff f9bb 	bl	800a1d4 <_free_r>
 800ae5e:	2000      	movs	r0, #0
 800ae60:	6360      	str	r0, [r4, #52]	; 0x34
 800ae62:	e7c2      	b.n	800adea <__sflush_r+0x1a>
 800ae64:	6a21      	ldr	r1, [r4, #32]
 800ae66:	2301      	movs	r3, #1
 800ae68:	4628      	mov	r0, r5
 800ae6a:	47b0      	blx	r6
 800ae6c:	1c41      	adds	r1, r0, #1
 800ae6e:	d1c7      	bne.n	800ae00 <__sflush_r+0x30>
 800ae70:	682b      	ldr	r3, [r5, #0]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d0c4      	beq.n	800ae00 <__sflush_r+0x30>
 800ae76:	2b1d      	cmp	r3, #29
 800ae78:	d001      	beq.n	800ae7e <__sflush_r+0xae>
 800ae7a:	2b16      	cmp	r3, #22
 800ae7c:	d101      	bne.n	800ae82 <__sflush_r+0xb2>
 800ae7e:	602f      	str	r7, [r5, #0]
 800ae80:	e7b2      	b.n	800ade8 <__sflush_r+0x18>
 800ae82:	89a3      	ldrh	r3, [r4, #12]
 800ae84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae88:	81a3      	strh	r3, [r4, #12]
 800ae8a:	e7ae      	b.n	800adea <__sflush_r+0x1a>
 800ae8c:	690f      	ldr	r7, [r1, #16]
 800ae8e:	2f00      	cmp	r7, #0
 800ae90:	d0aa      	beq.n	800ade8 <__sflush_r+0x18>
 800ae92:	0793      	lsls	r3, r2, #30
 800ae94:	680e      	ldr	r6, [r1, #0]
 800ae96:	bf08      	it	eq
 800ae98:	694b      	ldreq	r3, [r1, #20]
 800ae9a:	600f      	str	r7, [r1, #0]
 800ae9c:	bf18      	it	ne
 800ae9e:	2300      	movne	r3, #0
 800aea0:	1bf6      	subs	r6, r6, r7
 800aea2:	608b      	str	r3, [r1, #8]
 800aea4:	2e00      	cmp	r6, #0
 800aea6:	dd9f      	ble.n	800ade8 <__sflush_r+0x18>
 800aea8:	6a21      	ldr	r1, [r4, #32]
 800aeaa:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800aeae:	4633      	mov	r3, r6
 800aeb0:	463a      	mov	r2, r7
 800aeb2:	4628      	mov	r0, r5
 800aeb4:	47e0      	blx	ip
 800aeb6:	2800      	cmp	r0, #0
 800aeb8:	dc06      	bgt.n	800aec8 <__sflush_r+0xf8>
 800aeba:	89a3      	ldrh	r3, [r4, #12]
 800aebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aec0:	81a3      	strh	r3, [r4, #12]
 800aec2:	f04f 30ff 	mov.w	r0, #4294967295
 800aec6:	e790      	b.n	800adea <__sflush_r+0x1a>
 800aec8:	4407      	add	r7, r0
 800aeca:	1a36      	subs	r6, r6, r0
 800aecc:	e7ea      	b.n	800aea4 <__sflush_r+0xd4>
 800aece:	bf00      	nop
 800aed0:	20400001 	.word	0x20400001

0800aed4 <_fflush_r>:
 800aed4:	b538      	push	{r3, r4, r5, lr}
 800aed6:	690b      	ldr	r3, [r1, #16]
 800aed8:	4605      	mov	r5, r0
 800aeda:	460c      	mov	r4, r1
 800aedc:	b913      	cbnz	r3, 800aee4 <_fflush_r+0x10>
 800aede:	2500      	movs	r5, #0
 800aee0:	4628      	mov	r0, r5
 800aee2:	bd38      	pop	{r3, r4, r5, pc}
 800aee4:	b118      	cbz	r0, 800aeee <_fflush_r+0x1a>
 800aee6:	6983      	ldr	r3, [r0, #24]
 800aee8:	b90b      	cbnz	r3, 800aeee <_fflush_r+0x1a>
 800aeea:	f000 f887 	bl	800affc <__sinit>
 800aeee:	4b14      	ldr	r3, [pc, #80]	; (800af40 <_fflush_r+0x6c>)
 800aef0:	429c      	cmp	r4, r3
 800aef2:	d11b      	bne.n	800af2c <_fflush_r+0x58>
 800aef4:	686c      	ldr	r4, [r5, #4]
 800aef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d0ef      	beq.n	800aede <_fflush_r+0xa>
 800aefe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800af00:	07d0      	lsls	r0, r2, #31
 800af02:	d404      	bmi.n	800af0e <_fflush_r+0x3a>
 800af04:	0599      	lsls	r1, r3, #22
 800af06:	d402      	bmi.n	800af0e <_fflush_r+0x3a>
 800af08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af0a:	f000 f915 	bl	800b138 <__retarget_lock_acquire_recursive>
 800af0e:	4628      	mov	r0, r5
 800af10:	4621      	mov	r1, r4
 800af12:	f7ff ff5d 	bl	800add0 <__sflush_r>
 800af16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af18:	07da      	lsls	r2, r3, #31
 800af1a:	4605      	mov	r5, r0
 800af1c:	d4e0      	bmi.n	800aee0 <_fflush_r+0xc>
 800af1e:	89a3      	ldrh	r3, [r4, #12]
 800af20:	059b      	lsls	r3, r3, #22
 800af22:	d4dd      	bmi.n	800aee0 <_fflush_r+0xc>
 800af24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af26:	f000 f908 	bl	800b13a <__retarget_lock_release_recursive>
 800af2a:	e7d9      	b.n	800aee0 <_fflush_r+0xc>
 800af2c:	4b05      	ldr	r3, [pc, #20]	; (800af44 <_fflush_r+0x70>)
 800af2e:	429c      	cmp	r4, r3
 800af30:	d101      	bne.n	800af36 <_fflush_r+0x62>
 800af32:	68ac      	ldr	r4, [r5, #8]
 800af34:	e7df      	b.n	800aef6 <_fflush_r+0x22>
 800af36:	4b04      	ldr	r3, [pc, #16]	; (800af48 <_fflush_r+0x74>)
 800af38:	429c      	cmp	r4, r3
 800af3a:	bf08      	it	eq
 800af3c:	68ec      	ldreq	r4, [r5, #12]
 800af3e:	e7da      	b.n	800aef6 <_fflush_r+0x22>
 800af40:	0800ccd0 	.word	0x0800ccd0
 800af44:	0800ccf0 	.word	0x0800ccf0
 800af48:	0800ccb0 	.word	0x0800ccb0

0800af4c <std>:
 800af4c:	2300      	movs	r3, #0
 800af4e:	b510      	push	{r4, lr}
 800af50:	4604      	mov	r4, r0
 800af52:	e9c0 3300 	strd	r3, r3, [r0]
 800af56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af5a:	6083      	str	r3, [r0, #8]
 800af5c:	8181      	strh	r1, [r0, #12]
 800af5e:	6643      	str	r3, [r0, #100]	; 0x64
 800af60:	81c2      	strh	r2, [r0, #14]
 800af62:	6183      	str	r3, [r0, #24]
 800af64:	4619      	mov	r1, r3
 800af66:	2208      	movs	r2, #8
 800af68:	305c      	adds	r0, #92	; 0x5c
 800af6a:	f7ff f82f 	bl	8009fcc <memset>
 800af6e:	4b05      	ldr	r3, [pc, #20]	; (800af84 <std+0x38>)
 800af70:	6263      	str	r3, [r4, #36]	; 0x24
 800af72:	4b05      	ldr	r3, [pc, #20]	; (800af88 <std+0x3c>)
 800af74:	62a3      	str	r3, [r4, #40]	; 0x28
 800af76:	4b05      	ldr	r3, [pc, #20]	; (800af8c <std+0x40>)
 800af78:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af7a:	4b05      	ldr	r3, [pc, #20]	; (800af90 <std+0x44>)
 800af7c:	6224      	str	r4, [r4, #32]
 800af7e:	6323      	str	r3, [r4, #48]	; 0x30
 800af80:	bd10      	pop	{r4, pc}
 800af82:	bf00      	nop
 800af84:	0800b33d 	.word	0x0800b33d
 800af88:	0800b35f 	.word	0x0800b35f
 800af8c:	0800b397 	.word	0x0800b397
 800af90:	0800b3bb 	.word	0x0800b3bb

0800af94 <_cleanup_r>:
 800af94:	4901      	ldr	r1, [pc, #4]	; (800af9c <_cleanup_r+0x8>)
 800af96:	f000 b8af 	b.w	800b0f8 <_fwalk_reent>
 800af9a:	bf00      	nop
 800af9c:	0800aed5 	.word	0x0800aed5

0800afa0 <__sfmoreglue>:
 800afa0:	b570      	push	{r4, r5, r6, lr}
 800afa2:	2268      	movs	r2, #104	; 0x68
 800afa4:	1e4d      	subs	r5, r1, #1
 800afa6:	4355      	muls	r5, r2
 800afa8:	460e      	mov	r6, r1
 800afaa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800afae:	f7ff f97b 	bl	800a2a8 <_malloc_r>
 800afb2:	4604      	mov	r4, r0
 800afb4:	b140      	cbz	r0, 800afc8 <__sfmoreglue+0x28>
 800afb6:	2100      	movs	r1, #0
 800afb8:	e9c0 1600 	strd	r1, r6, [r0]
 800afbc:	300c      	adds	r0, #12
 800afbe:	60a0      	str	r0, [r4, #8]
 800afc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800afc4:	f7ff f802 	bl	8009fcc <memset>
 800afc8:	4620      	mov	r0, r4
 800afca:	bd70      	pop	{r4, r5, r6, pc}

0800afcc <__sfp_lock_acquire>:
 800afcc:	4801      	ldr	r0, [pc, #4]	; (800afd4 <__sfp_lock_acquire+0x8>)
 800afce:	f000 b8b3 	b.w	800b138 <__retarget_lock_acquire_recursive>
 800afd2:	bf00      	nop
 800afd4:	20001509 	.word	0x20001509

0800afd8 <__sfp_lock_release>:
 800afd8:	4801      	ldr	r0, [pc, #4]	; (800afe0 <__sfp_lock_release+0x8>)
 800afda:	f000 b8ae 	b.w	800b13a <__retarget_lock_release_recursive>
 800afde:	bf00      	nop
 800afe0:	20001509 	.word	0x20001509

0800afe4 <__sinit_lock_acquire>:
 800afe4:	4801      	ldr	r0, [pc, #4]	; (800afec <__sinit_lock_acquire+0x8>)
 800afe6:	f000 b8a7 	b.w	800b138 <__retarget_lock_acquire_recursive>
 800afea:	bf00      	nop
 800afec:	2000150a 	.word	0x2000150a

0800aff0 <__sinit_lock_release>:
 800aff0:	4801      	ldr	r0, [pc, #4]	; (800aff8 <__sinit_lock_release+0x8>)
 800aff2:	f000 b8a2 	b.w	800b13a <__retarget_lock_release_recursive>
 800aff6:	bf00      	nop
 800aff8:	2000150a 	.word	0x2000150a

0800affc <__sinit>:
 800affc:	b510      	push	{r4, lr}
 800affe:	4604      	mov	r4, r0
 800b000:	f7ff fff0 	bl	800afe4 <__sinit_lock_acquire>
 800b004:	69a3      	ldr	r3, [r4, #24]
 800b006:	b11b      	cbz	r3, 800b010 <__sinit+0x14>
 800b008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b00c:	f7ff bff0 	b.w	800aff0 <__sinit_lock_release>
 800b010:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b014:	6523      	str	r3, [r4, #80]	; 0x50
 800b016:	4b13      	ldr	r3, [pc, #76]	; (800b064 <__sinit+0x68>)
 800b018:	4a13      	ldr	r2, [pc, #76]	; (800b068 <__sinit+0x6c>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b01e:	42a3      	cmp	r3, r4
 800b020:	bf04      	itt	eq
 800b022:	2301      	moveq	r3, #1
 800b024:	61a3      	streq	r3, [r4, #24]
 800b026:	4620      	mov	r0, r4
 800b028:	f000 f820 	bl	800b06c <__sfp>
 800b02c:	6060      	str	r0, [r4, #4]
 800b02e:	4620      	mov	r0, r4
 800b030:	f000 f81c 	bl	800b06c <__sfp>
 800b034:	60a0      	str	r0, [r4, #8]
 800b036:	4620      	mov	r0, r4
 800b038:	f000 f818 	bl	800b06c <__sfp>
 800b03c:	2200      	movs	r2, #0
 800b03e:	60e0      	str	r0, [r4, #12]
 800b040:	2104      	movs	r1, #4
 800b042:	6860      	ldr	r0, [r4, #4]
 800b044:	f7ff ff82 	bl	800af4c <std>
 800b048:	68a0      	ldr	r0, [r4, #8]
 800b04a:	2201      	movs	r2, #1
 800b04c:	2109      	movs	r1, #9
 800b04e:	f7ff ff7d 	bl	800af4c <std>
 800b052:	68e0      	ldr	r0, [r4, #12]
 800b054:	2202      	movs	r2, #2
 800b056:	2112      	movs	r1, #18
 800b058:	f7ff ff78 	bl	800af4c <std>
 800b05c:	2301      	movs	r3, #1
 800b05e:	61a3      	str	r3, [r4, #24]
 800b060:	e7d2      	b.n	800b008 <__sinit+0xc>
 800b062:	bf00      	nop
 800b064:	0800cbc8 	.word	0x0800cbc8
 800b068:	0800af95 	.word	0x0800af95

0800b06c <__sfp>:
 800b06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b06e:	4607      	mov	r7, r0
 800b070:	f7ff ffac 	bl	800afcc <__sfp_lock_acquire>
 800b074:	4b1e      	ldr	r3, [pc, #120]	; (800b0f0 <__sfp+0x84>)
 800b076:	681e      	ldr	r6, [r3, #0]
 800b078:	69b3      	ldr	r3, [r6, #24]
 800b07a:	b913      	cbnz	r3, 800b082 <__sfp+0x16>
 800b07c:	4630      	mov	r0, r6
 800b07e:	f7ff ffbd 	bl	800affc <__sinit>
 800b082:	3648      	adds	r6, #72	; 0x48
 800b084:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b088:	3b01      	subs	r3, #1
 800b08a:	d503      	bpl.n	800b094 <__sfp+0x28>
 800b08c:	6833      	ldr	r3, [r6, #0]
 800b08e:	b30b      	cbz	r3, 800b0d4 <__sfp+0x68>
 800b090:	6836      	ldr	r6, [r6, #0]
 800b092:	e7f7      	b.n	800b084 <__sfp+0x18>
 800b094:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b098:	b9d5      	cbnz	r5, 800b0d0 <__sfp+0x64>
 800b09a:	4b16      	ldr	r3, [pc, #88]	; (800b0f4 <__sfp+0x88>)
 800b09c:	60e3      	str	r3, [r4, #12]
 800b09e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b0a2:	6665      	str	r5, [r4, #100]	; 0x64
 800b0a4:	f000 f847 	bl	800b136 <__retarget_lock_init_recursive>
 800b0a8:	f7ff ff96 	bl	800afd8 <__sfp_lock_release>
 800b0ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b0b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b0b4:	6025      	str	r5, [r4, #0]
 800b0b6:	61a5      	str	r5, [r4, #24]
 800b0b8:	2208      	movs	r2, #8
 800b0ba:	4629      	mov	r1, r5
 800b0bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b0c0:	f7fe ff84 	bl	8009fcc <memset>
 800b0c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b0c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b0cc:	4620      	mov	r0, r4
 800b0ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0d0:	3468      	adds	r4, #104	; 0x68
 800b0d2:	e7d9      	b.n	800b088 <__sfp+0x1c>
 800b0d4:	2104      	movs	r1, #4
 800b0d6:	4638      	mov	r0, r7
 800b0d8:	f7ff ff62 	bl	800afa0 <__sfmoreglue>
 800b0dc:	4604      	mov	r4, r0
 800b0de:	6030      	str	r0, [r6, #0]
 800b0e0:	2800      	cmp	r0, #0
 800b0e2:	d1d5      	bne.n	800b090 <__sfp+0x24>
 800b0e4:	f7ff ff78 	bl	800afd8 <__sfp_lock_release>
 800b0e8:	230c      	movs	r3, #12
 800b0ea:	603b      	str	r3, [r7, #0]
 800b0ec:	e7ee      	b.n	800b0cc <__sfp+0x60>
 800b0ee:	bf00      	nop
 800b0f0:	0800cbc8 	.word	0x0800cbc8
 800b0f4:	ffff0001 	.word	0xffff0001

0800b0f8 <_fwalk_reent>:
 800b0f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0fc:	4606      	mov	r6, r0
 800b0fe:	4688      	mov	r8, r1
 800b100:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b104:	2700      	movs	r7, #0
 800b106:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b10a:	f1b9 0901 	subs.w	r9, r9, #1
 800b10e:	d505      	bpl.n	800b11c <_fwalk_reent+0x24>
 800b110:	6824      	ldr	r4, [r4, #0]
 800b112:	2c00      	cmp	r4, #0
 800b114:	d1f7      	bne.n	800b106 <_fwalk_reent+0xe>
 800b116:	4638      	mov	r0, r7
 800b118:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b11c:	89ab      	ldrh	r3, [r5, #12]
 800b11e:	2b01      	cmp	r3, #1
 800b120:	d907      	bls.n	800b132 <_fwalk_reent+0x3a>
 800b122:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b126:	3301      	adds	r3, #1
 800b128:	d003      	beq.n	800b132 <_fwalk_reent+0x3a>
 800b12a:	4629      	mov	r1, r5
 800b12c:	4630      	mov	r0, r6
 800b12e:	47c0      	blx	r8
 800b130:	4307      	orrs	r7, r0
 800b132:	3568      	adds	r5, #104	; 0x68
 800b134:	e7e9      	b.n	800b10a <_fwalk_reent+0x12>

0800b136 <__retarget_lock_init_recursive>:
 800b136:	4770      	bx	lr

0800b138 <__retarget_lock_acquire_recursive>:
 800b138:	4770      	bx	lr

0800b13a <__retarget_lock_release_recursive>:
 800b13a:	4770      	bx	lr

0800b13c <__swhatbuf_r>:
 800b13c:	b570      	push	{r4, r5, r6, lr}
 800b13e:	460e      	mov	r6, r1
 800b140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b144:	2900      	cmp	r1, #0
 800b146:	b096      	sub	sp, #88	; 0x58
 800b148:	4614      	mov	r4, r2
 800b14a:	461d      	mov	r5, r3
 800b14c:	da08      	bge.n	800b160 <__swhatbuf_r+0x24>
 800b14e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b152:	2200      	movs	r2, #0
 800b154:	602a      	str	r2, [r5, #0]
 800b156:	061a      	lsls	r2, r3, #24
 800b158:	d410      	bmi.n	800b17c <__swhatbuf_r+0x40>
 800b15a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b15e:	e00e      	b.n	800b17e <__swhatbuf_r+0x42>
 800b160:	466a      	mov	r2, sp
 800b162:	f000 f951 	bl	800b408 <_fstat_r>
 800b166:	2800      	cmp	r0, #0
 800b168:	dbf1      	blt.n	800b14e <__swhatbuf_r+0x12>
 800b16a:	9a01      	ldr	r2, [sp, #4]
 800b16c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b170:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b174:	425a      	negs	r2, r3
 800b176:	415a      	adcs	r2, r3
 800b178:	602a      	str	r2, [r5, #0]
 800b17a:	e7ee      	b.n	800b15a <__swhatbuf_r+0x1e>
 800b17c:	2340      	movs	r3, #64	; 0x40
 800b17e:	2000      	movs	r0, #0
 800b180:	6023      	str	r3, [r4, #0]
 800b182:	b016      	add	sp, #88	; 0x58
 800b184:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b188 <__smakebuf_r>:
 800b188:	898b      	ldrh	r3, [r1, #12]
 800b18a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b18c:	079d      	lsls	r5, r3, #30
 800b18e:	4606      	mov	r6, r0
 800b190:	460c      	mov	r4, r1
 800b192:	d507      	bpl.n	800b1a4 <__smakebuf_r+0x1c>
 800b194:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b198:	6023      	str	r3, [r4, #0]
 800b19a:	6123      	str	r3, [r4, #16]
 800b19c:	2301      	movs	r3, #1
 800b19e:	6163      	str	r3, [r4, #20]
 800b1a0:	b002      	add	sp, #8
 800b1a2:	bd70      	pop	{r4, r5, r6, pc}
 800b1a4:	ab01      	add	r3, sp, #4
 800b1a6:	466a      	mov	r2, sp
 800b1a8:	f7ff ffc8 	bl	800b13c <__swhatbuf_r>
 800b1ac:	9900      	ldr	r1, [sp, #0]
 800b1ae:	4605      	mov	r5, r0
 800b1b0:	4630      	mov	r0, r6
 800b1b2:	f7ff f879 	bl	800a2a8 <_malloc_r>
 800b1b6:	b948      	cbnz	r0, 800b1cc <__smakebuf_r+0x44>
 800b1b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1bc:	059a      	lsls	r2, r3, #22
 800b1be:	d4ef      	bmi.n	800b1a0 <__smakebuf_r+0x18>
 800b1c0:	f023 0303 	bic.w	r3, r3, #3
 800b1c4:	f043 0302 	orr.w	r3, r3, #2
 800b1c8:	81a3      	strh	r3, [r4, #12]
 800b1ca:	e7e3      	b.n	800b194 <__smakebuf_r+0xc>
 800b1cc:	4b0d      	ldr	r3, [pc, #52]	; (800b204 <__smakebuf_r+0x7c>)
 800b1ce:	62b3      	str	r3, [r6, #40]	; 0x28
 800b1d0:	89a3      	ldrh	r3, [r4, #12]
 800b1d2:	6020      	str	r0, [r4, #0]
 800b1d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1d8:	81a3      	strh	r3, [r4, #12]
 800b1da:	9b00      	ldr	r3, [sp, #0]
 800b1dc:	6163      	str	r3, [r4, #20]
 800b1de:	9b01      	ldr	r3, [sp, #4]
 800b1e0:	6120      	str	r0, [r4, #16]
 800b1e2:	b15b      	cbz	r3, 800b1fc <__smakebuf_r+0x74>
 800b1e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1e8:	4630      	mov	r0, r6
 800b1ea:	f000 f91f 	bl	800b42c <_isatty_r>
 800b1ee:	b128      	cbz	r0, 800b1fc <__smakebuf_r+0x74>
 800b1f0:	89a3      	ldrh	r3, [r4, #12]
 800b1f2:	f023 0303 	bic.w	r3, r3, #3
 800b1f6:	f043 0301 	orr.w	r3, r3, #1
 800b1fa:	81a3      	strh	r3, [r4, #12]
 800b1fc:	89a0      	ldrh	r0, [r4, #12]
 800b1fe:	4305      	orrs	r5, r0
 800b200:	81a5      	strh	r5, [r4, #12]
 800b202:	e7cd      	b.n	800b1a0 <__smakebuf_r+0x18>
 800b204:	0800af95 	.word	0x0800af95

0800b208 <memmove>:
 800b208:	4288      	cmp	r0, r1
 800b20a:	b510      	push	{r4, lr}
 800b20c:	eb01 0402 	add.w	r4, r1, r2
 800b210:	d902      	bls.n	800b218 <memmove+0x10>
 800b212:	4284      	cmp	r4, r0
 800b214:	4623      	mov	r3, r4
 800b216:	d807      	bhi.n	800b228 <memmove+0x20>
 800b218:	1e43      	subs	r3, r0, #1
 800b21a:	42a1      	cmp	r1, r4
 800b21c:	d008      	beq.n	800b230 <memmove+0x28>
 800b21e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b222:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b226:	e7f8      	b.n	800b21a <memmove+0x12>
 800b228:	4402      	add	r2, r0
 800b22a:	4601      	mov	r1, r0
 800b22c:	428a      	cmp	r2, r1
 800b22e:	d100      	bne.n	800b232 <memmove+0x2a>
 800b230:	bd10      	pop	{r4, pc}
 800b232:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b236:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b23a:	e7f7      	b.n	800b22c <memmove+0x24>

0800b23c <__malloc_lock>:
 800b23c:	4801      	ldr	r0, [pc, #4]	; (800b244 <__malloc_lock+0x8>)
 800b23e:	f7ff bf7b 	b.w	800b138 <__retarget_lock_acquire_recursive>
 800b242:	bf00      	nop
 800b244:	20001508 	.word	0x20001508

0800b248 <__malloc_unlock>:
 800b248:	4801      	ldr	r0, [pc, #4]	; (800b250 <__malloc_unlock+0x8>)
 800b24a:	f7ff bf76 	b.w	800b13a <__retarget_lock_release_recursive>
 800b24e:	bf00      	nop
 800b250:	20001508 	.word	0x20001508

0800b254 <_realloc_r>:
 800b254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b258:	4680      	mov	r8, r0
 800b25a:	4614      	mov	r4, r2
 800b25c:	460e      	mov	r6, r1
 800b25e:	b921      	cbnz	r1, 800b26a <_realloc_r+0x16>
 800b260:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b264:	4611      	mov	r1, r2
 800b266:	f7ff b81f 	b.w	800a2a8 <_malloc_r>
 800b26a:	b92a      	cbnz	r2, 800b278 <_realloc_r+0x24>
 800b26c:	f7fe ffb2 	bl	800a1d4 <_free_r>
 800b270:	4625      	mov	r5, r4
 800b272:	4628      	mov	r0, r5
 800b274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b278:	f000 f8fa 	bl	800b470 <_malloc_usable_size_r>
 800b27c:	4284      	cmp	r4, r0
 800b27e:	4607      	mov	r7, r0
 800b280:	d802      	bhi.n	800b288 <_realloc_r+0x34>
 800b282:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b286:	d812      	bhi.n	800b2ae <_realloc_r+0x5a>
 800b288:	4621      	mov	r1, r4
 800b28a:	4640      	mov	r0, r8
 800b28c:	f7ff f80c 	bl	800a2a8 <_malloc_r>
 800b290:	4605      	mov	r5, r0
 800b292:	2800      	cmp	r0, #0
 800b294:	d0ed      	beq.n	800b272 <_realloc_r+0x1e>
 800b296:	42bc      	cmp	r4, r7
 800b298:	4622      	mov	r2, r4
 800b29a:	4631      	mov	r1, r6
 800b29c:	bf28      	it	cs
 800b29e:	463a      	movcs	r2, r7
 800b2a0:	f7fe fe86 	bl	8009fb0 <memcpy>
 800b2a4:	4631      	mov	r1, r6
 800b2a6:	4640      	mov	r0, r8
 800b2a8:	f7fe ff94 	bl	800a1d4 <_free_r>
 800b2ac:	e7e1      	b.n	800b272 <_realloc_r+0x1e>
 800b2ae:	4635      	mov	r5, r6
 800b2b0:	e7df      	b.n	800b272 <_realloc_r+0x1e>

0800b2b2 <_raise_r>:
 800b2b2:	291f      	cmp	r1, #31
 800b2b4:	b538      	push	{r3, r4, r5, lr}
 800b2b6:	4604      	mov	r4, r0
 800b2b8:	460d      	mov	r5, r1
 800b2ba:	d904      	bls.n	800b2c6 <_raise_r+0x14>
 800b2bc:	2316      	movs	r3, #22
 800b2be:	6003      	str	r3, [r0, #0]
 800b2c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b2c4:	bd38      	pop	{r3, r4, r5, pc}
 800b2c6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b2c8:	b112      	cbz	r2, 800b2d0 <_raise_r+0x1e>
 800b2ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b2ce:	b94b      	cbnz	r3, 800b2e4 <_raise_r+0x32>
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	f000 f831 	bl	800b338 <_getpid_r>
 800b2d6:	462a      	mov	r2, r5
 800b2d8:	4601      	mov	r1, r0
 800b2da:	4620      	mov	r0, r4
 800b2dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2e0:	f000 b818 	b.w	800b314 <_kill_r>
 800b2e4:	2b01      	cmp	r3, #1
 800b2e6:	d00a      	beq.n	800b2fe <_raise_r+0x4c>
 800b2e8:	1c59      	adds	r1, r3, #1
 800b2ea:	d103      	bne.n	800b2f4 <_raise_r+0x42>
 800b2ec:	2316      	movs	r3, #22
 800b2ee:	6003      	str	r3, [r0, #0]
 800b2f0:	2001      	movs	r0, #1
 800b2f2:	e7e7      	b.n	800b2c4 <_raise_r+0x12>
 800b2f4:	2400      	movs	r4, #0
 800b2f6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b2fa:	4628      	mov	r0, r5
 800b2fc:	4798      	blx	r3
 800b2fe:	2000      	movs	r0, #0
 800b300:	e7e0      	b.n	800b2c4 <_raise_r+0x12>
	...

0800b304 <raise>:
 800b304:	4b02      	ldr	r3, [pc, #8]	; (800b310 <raise+0xc>)
 800b306:	4601      	mov	r1, r0
 800b308:	6818      	ldr	r0, [r3, #0]
 800b30a:	f7ff bfd2 	b.w	800b2b2 <_raise_r>
 800b30e:	bf00      	nop
 800b310:	20000010 	.word	0x20000010

0800b314 <_kill_r>:
 800b314:	b538      	push	{r3, r4, r5, lr}
 800b316:	4d07      	ldr	r5, [pc, #28]	; (800b334 <_kill_r+0x20>)
 800b318:	2300      	movs	r3, #0
 800b31a:	4604      	mov	r4, r0
 800b31c:	4608      	mov	r0, r1
 800b31e:	4611      	mov	r1, r2
 800b320:	602b      	str	r3, [r5, #0]
 800b322:	f7f6 ff1e 	bl	8002162 <_kill>
 800b326:	1c43      	adds	r3, r0, #1
 800b328:	d102      	bne.n	800b330 <_kill_r+0x1c>
 800b32a:	682b      	ldr	r3, [r5, #0]
 800b32c:	b103      	cbz	r3, 800b330 <_kill_r+0x1c>
 800b32e:	6023      	str	r3, [r4, #0]
 800b330:	bd38      	pop	{r3, r4, r5, pc}
 800b332:	bf00      	nop
 800b334:	2000150c 	.word	0x2000150c

0800b338 <_getpid_r>:
 800b338:	f7f6 bf0c 	b.w	8002154 <_getpid>

0800b33c <__sread>:
 800b33c:	b510      	push	{r4, lr}
 800b33e:	460c      	mov	r4, r1
 800b340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b344:	f000 f89c 	bl	800b480 <_read_r>
 800b348:	2800      	cmp	r0, #0
 800b34a:	bfab      	itete	ge
 800b34c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b34e:	89a3      	ldrhlt	r3, [r4, #12]
 800b350:	181b      	addge	r3, r3, r0
 800b352:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b356:	bfac      	ite	ge
 800b358:	6563      	strge	r3, [r4, #84]	; 0x54
 800b35a:	81a3      	strhlt	r3, [r4, #12]
 800b35c:	bd10      	pop	{r4, pc}

0800b35e <__swrite>:
 800b35e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b362:	461f      	mov	r7, r3
 800b364:	898b      	ldrh	r3, [r1, #12]
 800b366:	05db      	lsls	r3, r3, #23
 800b368:	4605      	mov	r5, r0
 800b36a:	460c      	mov	r4, r1
 800b36c:	4616      	mov	r6, r2
 800b36e:	d505      	bpl.n	800b37c <__swrite+0x1e>
 800b370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b374:	2302      	movs	r3, #2
 800b376:	2200      	movs	r2, #0
 800b378:	f000 f868 	bl	800b44c <_lseek_r>
 800b37c:	89a3      	ldrh	r3, [r4, #12]
 800b37e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b382:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b386:	81a3      	strh	r3, [r4, #12]
 800b388:	4632      	mov	r2, r6
 800b38a:	463b      	mov	r3, r7
 800b38c:	4628      	mov	r0, r5
 800b38e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b392:	f000 b817 	b.w	800b3c4 <_write_r>

0800b396 <__sseek>:
 800b396:	b510      	push	{r4, lr}
 800b398:	460c      	mov	r4, r1
 800b39a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b39e:	f000 f855 	bl	800b44c <_lseek_r>
 800b3a2:	1c43      	adds	r3, r0, #1
 800b3a4:	89a3      	ldrh	r3, [r4, #12]
 800b3a6:	bf15      	itete	ne
 800b3a8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b3aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b3ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b3b2:	81a3      	strheq	r3, [r4, #12]
 800b3b4:	bf18      	it	ne
 800b3b6:	81a3      	strhne	r3, [r4, #12]
 800b3b8:	bd10      	pop	{r4, pc}

0800b3ba <__sclose>:
 800b3ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3be:	f000 b813 	b.w	800b3e8 <_close_r>
	...

0800b3c4 <_write_r>:
 800b3c4:	b538      	push	{r3, r4, r5, lr}
 800b3c6:	4d07      	ldr	r5, [pc, #28]	; (800b3e4 <_write_r+0x20>)
 800b3c8:	4604      	mov	r4, r0
 800b3ca:	4608      	mov	r0, r1
 800b3cc:	4611      	mov	r1, r2
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	602a      	str	r2, [r5, #0]
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	f7f6 fefc 	bl	80021d0 <_write>
 800b3d8:	1c43      	adds	r3, r0, #1
 800b3da:	d102      	bne.n	800b3e2 <_write_r+0x1e>
 800b3dc:	682b      	ldr	r3, [r5, #0]
 800b3de:	b103      	cbz	r3, 800b3e2 <_write_r+0x1e>
 800b3e0:	6023      	str	r3, [r4, #0]
 800b3e2:	bd38      	pop	{r3, r4, r5, pc}
 800b3e4:	2000150c 	.word	0x2000150c

0800b3e8 <_close_r>:
 800b3e8:	b538      	push	{r3, r4, r5, lr}
 800b3ea:	4d06      	ldr	r5, [pc, #24]	; (800b404 <_close_r+0x1c>)
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	4604      	mov	r4, r0
 800b3f0:	4608      	mov	r0, r1
 800b3f2:	602b      	str	r3, [r5, #0]
 800b3f4:	f7f6 ff08 	bl	8002208 <_close>
 800b3f8:	1c43      	adds	r3, r0, #1
 800b3fa:	d102      	bne.n	800b402 <_close_r+0x1a>
 800b3fc:	682b      	ldr	r3, [r5, #0]
 800b3fe:	b103      	cbz	r3, 800b402 <_close_r+0x1a>
 800b400:	6023      	str	r3, [r4, #0]
 800b402:	bd38      	pop	{r3, r4, r5, pc}
 800b404:	2000150c 	.word	0x2000150c

0800b408 <_fstat_r>:
 800b408:	b538      	push	{r3, r4, r5, lr}
 800b40a:	4d07      	ldr	r5, [pc, #28]	; (800b428 <_fstat_r+0x20>)
 800b40c:	2300      	movs	r3, #0
 800b40e:	4604      	mov	r4, r0
 800b410:	4608      	mov	r0, r1
 800b412:	4611      	mov	r1, r2
 800b414:	602b      	str	r3, [r5, #0]
 800b416:	f7f6 ff02 	bl	800221e <_fstat>
 800b41a:	1c43      	adds	r3, r0, #1
 800b41c:	d102      	bne.n	800b424 <_fstat_r+0x1c>
 800b41e:	682b      	ldr	r3, [r5, #0]
 800b420:	b103      	cbz	r3, 800b424 <_fstat_r+0x1c>
 800b422:	6023      	str	r3, [r4, #0]
 800b424:	bd38      	pop	{r3, r4, r5, pc}
 800b426:	bf00      	nop
 800b428:	2000150c 	.word	0x2000150c

0800b42c <_isatty_r>:
 800b42c:	b538      	push	{r3, r4, r5, lr}
 800b42e:	4d06      	ldr	r5, [pc, #24]	; (800b448 <_isatty_r+0x1c>)
 800b430:	2300      	movs	r3, #0
 800b432:	4604      	mov	r4, r0
 800b434:	4608      	mov	r0, r1
 800b436:	602b      	str	r3, [r5, #0]
 800b438:	f7f6 ff00 	bl	800223c <_isatty>
 800b43c:	1c43      	adds	r3, r0, #1
 800b43e:	d102      	bne.n	800b446 <_isatty_r+0x1a>
 800b440:	682b      	ldr	r3, [r5, #0]
 800b442:	b103      	cbz	r3, 800b446 <_isatty_r+0x1a>
 800b444:	6023      	str	r3, [r4, #0]
 800b446:	bd38      	pop	{r3, r4, r5, pc}
 800b448:	2000150c 	.word	0x2000150c

0800b44c <_lseek_r>:
 800b44c:	b538      	push	{r3, r4, r5, lr}
 800b44e:	4d07      	ldr	r5, [pc, #28]	; (800b46c <_lseek_r+0x20>)
 800b450:	4604      	mov	r4, r0
 800b452:	4608      	mov	r0, r1
 800b454:	4611      	mov	r1, r2
 800b456:	2200      	movs	r2, #0
 800b458:	602a      	str	r2, [r5, #0]
 800b45a:	461a      	mov	r2, r3
 800b45c:	f7f6 fef8 	bl	8002250 <_lseek>
 800b460:	1c43      	adds	r3, r0, #1
 800b462:	d102      	bne.n	800b46a <_lseek_r+0x1e>
 800b464:	682b      	ldr	r3, [r5, #0]
 800b466:	b103      	cbz	r3, 800b46a <_lseek_r+0x1e>
 800b468:	6023      	str	r3, [r4, #0]
 800b46a:	bd38      	pop	{r3, r4, r5, pc}
 800b46c:	2000150c 	.word	0x2000150c

0800b470 <_malloc_usable_size_r>:
 800b470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b474:	1f18      	subs	r0, r3, #4
 800b476:	2b00      	cmp	r3, #0
 800b478:	bfbc      	itt	lt
 800b47a:	580b      	ldrlt	r3, [r1, r0]
 800b47c:	18c0      	addlt	r0, r0, r3
 800b47e:	4770      	bx	lr

0800b480 <_read_r>:
 800b480:	b538      	push	{r3, r4, r5, lr}
 800b482:	4d07      	ldr	r5, [pc, #28]	; (800b4a0 <_read_r+0x20>)
 800b484:	4604      	mov	r4, r0
 800b486:	4608      	mov	r0, r1
 800b488:	4611      	mov	r1, r2
 800b48a:	2200      	movs	r2, #0
 800b48c:	602a      	str	r2, [r5, #0]
 800b48e:	461a      	mov	r2, r3
 800b490:	f7f6 fe81 	bl	8002196 <_read>
 800b494:	1c43      	adds	r3, r0, #1
 800b496:	d102      	bne.n	800b49e <_read_r+0x1e>
 800b498:	682b      	ldr	r3, [r5, #0]
 800b49a:	b103      	cbz	r3, 800b49e <_read_r+0x1e>
 800b49c:	6023      	str	r3, [r4, #0]
 800b49e:	bd38      	pop	{r3, r4, r5, pc}
 800b4a0:	2000150c 	.word	0x2000150c

0800b4a4 <pow>:
 800b4a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4a8:	4614      	mov	r4, r2
 800b4aa:	461d      	mov	r5, r3
 800b4ac:	4680      	mov	r8, r0
 800b4ae:	4689      	mov	r9, r1
 800b4b0:	f000 f862 	bl	800b578 <__ieee754_pow>
 800b4b4:	4622      	mov	r2, r4
 800b4b6:	4606      	mov	r6, r0
 800b4b8:	460f      	mov	r7, r1
 800b4ba:	462b      	mov	r3, r5
 800b4bc:	4620      	mov	r0, r4
 800b4be:	4629      	mov	r1, r5
 800b4c0:	f7f5 fb0c 	bl	8000adc <__aeabi_dcmpun>
 800b4c4:	bbc8      	cbnz	r0, 800b53a <pow+0x96>
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	4640      	mov	r0, r8
 800b4cc:	4649      	mov	r1, r9
 800b4ce:	f7f5 fad3 	bl	8000a78 <__aeabi_dcmpeq>
 800b4d2:	b1b8      	cbz	r0, 800b504 <pow+0x60>
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	4620      	mov	r0, r4
 800b4da:	4629      	mov	r1, r5
 800b4dc:	f7f5 facc 	bl	8000a78 <__aeabi_dcmpeq>
 800b4e0:	2800      	cmp	r0, #0
 800b4e2:	d141      	bne.n	800b568 <pow+0xc4>
 800b4e4:	4620      	mov	r0, r4
 800b4e6:	4629      	mov	r1, r5
 800b4e8:	f000 fe39 	bl	800c15e <finite>
 800b4ec:	b328      	cbz	r0, 800b53a <pow+0x96>
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	4620      	mov	r0, r4
 800b4f4:	4629      	mov	r1, r5
 800b4f6:	f7f5 fac9 	bl	8000a8c <__aeabi_dcmplt>
 800b4fa:	b1f0      	cbz	r0, 800b53a <pow+0x96>
 800b4fc:	f7fe fd2e 	bl	8009f5c <__errno>
 800b500:	2322      	movs	r3, #34	; 0x22
 800b502:	e019      	b.n	800b538 <pow+0x94>
 800b504:	4630      	mov	r0, r6
 800b506:	4639      	mov	r1, r7
 800b508:	f000 fe29 	bl	800c15e <finite>
 800b50c:	b9c8      	cbnz	r0, 800b542 <pow+0x9e>
 800b50e:	4640      	mov	r0, r8
 800b510:	4649      	mov	r1, r9
 800b512:	f000 fe24 	bl	800c15e <finite>
 800b516:	b1a0      	cbz	r0, 800b542 <pow+0x9e>
 800b518:	4620      	mov	r0, r4
 800b51a:	4629      	mov	r1, r5
 800b51c:	f000 fe1f 	bl	800c15e <finite>
 800b520:	b178      	cbz	r0, 800b542 <pow+0x9e>
 800b522:	4632      	mov	r2, r6
 800b524:	463b      	mov	r3, r7
 800b526:	4630      	mov	r0, r6
 800b528:	4639      	mov	r1, r7
 800b52a:	f7f5 fad7 	bl	8000adc <__aeabi_dcmpun>
 800b52e:	2800      	cmp	r0, #0
 800b530:	d0e4      	beq.n	800b4fc <pow+0x58>
 800b532:	f7fe fd13 	bl	8009f5c <__errno>
 800b536:	2321      	movs	r3, #33	; 0x21
 800b538:	6003      	str	r3, [r0, #0]
 800b53a:	4630      	mov	r0, r6
 800b53c:	4639      	mov	r1, r7
 800b53e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b542:	2200      	movs	r2, #0
 800b544:	2300      	movs	r3, #0
 800b546:	4630      	mov	r0, r6
 800b548:	4639      	mov	r1, r7
 800b54a:	f7f5 fa95 	bl	8000a78 <__aeabi_dcmpeq>
 800b54e:	2800      	cmp	r0, #0
 800b550:	d0f3      	beq.n	800b53a <pow+0x96>
 800b552:	4640      	mov	r0, r8
 800b554:	4649      	mov	r1, r9
 800b556:	f000 fe02 	bl	800c15e <finite>
 800b55a:	2800      	cmp	r0, #0
 800b55c:	d0ed      	beq.n	800b53a <pow+0x96>
 800b55e:	4620      	mov	r0, r4
 800b560:	4629      	mov	r1, r5
 800b562:	f000 fdfc 	bl	800c15e <finite>
 800b566:	e7c8      	b.n	800b4fa <pow+0x56>
 800b568:	4f01      	ldr	r7, [pc, #4]	; (800b570 <pow+0xcc>)
 800b56a:	2600      	movs	r6, #0
 800b56c:	e7e5      	b.n	800b53a <pow+0x96>
 800b56e:	bf00      	nop
 800b570:	3ff00000 	.word	0x3ff00000
 800b574:	00000000 	.word	0x00000000

0800b578 <__ieee754_pow>:
 800b578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b57c:	b093      	sub	sp, #76	; 0x4c
 800b57e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b582:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800b586:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800b58a:	4689      	mov	r9, r1
 800b58c:	ea56 0102 	orrs.w	r1, r6, r2
 800b590:	4680      	mov	r8, r0
 800b592:	d111      	bne.n	800b5b8 <__ieee754_pow+0x40>
 800b594:	1803      	adds	r3, r0, r0
 800b596:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800b59a:	4152      	adcs	r2, r2
 800b59c:	4299      	cmp	r1, r3
 800b59e:	4b82      	ldr	r3, [pc, #520]	; (800b7a8 <__ieee754_pow+0x230>)
 800b5a0:	4193      	sbcs	r3, r2
 800b5a2:	f080 84b9 	bcs.w	800bf18 <__ieee754_pow+0x9a0>
 800b5a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b5aa:	4640      	mov	r0, r8
 800b5ac:	4649      	mov	r1, r9
 800b5ae:	f7f4 fe45 	bl	800023c <__adddf3>
 800b5b2:	4683      	mov	fp, r0
 800b5b4:	468c      	mov	ip, r1
 800b5b6:	e06f      	b.n	800b698 <__ieee754_pow+0x120>
 800b5b8:	4b7c      	ldr	r3, [pc, #496]	; (800b7ac <__ieee754_pow+0x234>)
 800b5ba:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800b5be:	429c      	cmp	r4, r3
 800b5c0:	464d      	mov	r5, r9
 800b5c2:	4682      	mov	sl, r0
 800b5c4:	dc06      	bgt.n	800b5d4 <__ieee754_pow+0x5c>
 800b5c6:	d101      	bne.n	800b5cc <__ieee754_pow+0x54>
 800b5c8:	2800      	cmp	r0, #0
 800b5ca:	d1ec      	bne.n	800b5a6 <__ieee754_pow+0x2e>
 800b5cc:	429e      	cmp	r6, r3
 800b5ce:	dc01      	bgt.n	800b5d4 <__ieee754_pow+0x5c>
 800b5d0:	d10f      	bne.n	800b5f2 <__ieee754_pow+0x7a>
 800b5d2:	b172      	cbz	r2, 800b5f2 <__ieee754_pow+0x7a>
 800b5d4:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b5d8:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b5dc:	ea55 050a 	orrs.w	r5, r5, sl
 800b5e0:	d1e1      	bne.n	800b5a6 <__ieee754_pow+0x2e>
 800b5e2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b5e6:	18db      	adds	r3, r3, r3
 800b5e8:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b5ec:	4152      	adcs	r2, r2
 800b5ee:	429d      	cmp	r5, r3
 800b5f0:	e7d5      	b.n	800b59e <__ieee754_pow+0x26>
 800b5f2:	2d00      	cmp	r5, #0
 800b5f4:	da39      	bge.n	800b66a <__ieee754_pow+0xf2>
 800b5f6:	4b6e      	ldr	r3, [pc, #440]	; (800b7b0 <__ieee754_pow+0x238>)
 800b5f8:	429e      	cmp	r6, r3
 800b5fa:	dc52      	bgt.n	800b6a2 <__ieee754_pow+0x12a>
 800b5fc:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b600:	429e      	cmp	r6, r3
 800b602:	f340 849c 	ble.w	800bf3e <__ieee754_pow+0x9c6>
 800b606:	1533      	asrs	r3, r6, #20
 800b608:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b60c:	2b14      	cmp	r3, #20
 800b60e:	dd0f      	ble.n	800b630 <__ieee754_pow+0xb8>
 800b610:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b614:	fa22 f103 	lsr.w	r1, r2, r3
 800b618:	fa01 f303 	lsl.w	r3, r1, r3
 800b61c:	4293      	cmp	r3, r2
 800b61e:	f040 848e 	bne.w	800bf3e <__ieee754_pow+0x9c6>
 800b622:	f001 0101 	and.w	r1, r1, #1
 800b626:	f1c1 0302 	rsb	r3, r1, #2
 800b62a:	9300      	str	r3, [sp, #0]
 800b62c:	b182      	cbz	r2, 800b650 <__ieee754_pow+0xd8>
 800b62e:	e05d      	b.n	800b6ec <__ieee754_pow+0x174>
 800b630:	2a00      	cmp	r2, #0
 800b632:	d159      	bne.n	800b6e8 <__ieee754_pow+0x170>
 800b634:	f1c3 0314 	rsb	r3, r3, #20
 800b638:	fa46 f103 	asr.w	r1, r6, r3
 800b63c:	fa01 f303 	lsl.w	r3, r1, r3
 800b640:	42b3      	cmp	r3, r6
 800b642:	f040 8479 	bne.w	800bf38 <__ieee754_pow+0x9c0>
 800b646:	f001 0101 	and.w	r1, r1, #1
 800b64a:	f1c1 0302 	rsb	r3, r1, #2
 800b64e:	9300      	str	r3, [sp, #0]
 800b650:	4b58      	ldr	r3, [pc, #352]	; (800b7b4 <__ieee754_pow+0x23c>)
 800b652:	429e      	cmp	r6, r3
 800b654:	d132      	bne.n	800b6bc <__ieee754_pow+0x144>
 800b656:	2f00      	cmp	r7, #0
 800b658:	f280 846a 	bge.w	800bf30 <__ieee754_pow+0x9b8>
 800b65c:	4955      	ldr	r1, [pc, #340]	; (800b7b4 <__ieee754_pow+0x23c>)
 800b65e:	4642      	mov	r2, r8
 800b660:	464b      	mov	r3, r9
 800b662:	2000      	movs	r0, #0
 800b664:	f7f5 f8ca 	bl	80007fc <__aeabi_ddiv>
 800b668:	e7a3      	b.n	800b5b2 <__ieee754_pow+0x3a>
 800b66a:	2300      	movs	r3, #0
 800b66c:	9300      	str	r3, [sp, #0]
 800b66e:	2a00      	cmp	r2, #0
 800b670:	d13c      	bne.n	800b6ec <__ieee754_pow+0x174>
 800b672:	4b4e      	ldr	r3, [pc, #312]	; (800b7ac <__ieee754_pow+0x234>)
 800b674:	429e      	cmp	r6, r3
 800b676:	d1eb      	bne.n	800b650 <__ieee754_pow+0xd8>
 800b678:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b67c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b680:	ea53 030a 	orrs.w	r3, r3, sl
 800b684:	f000 8448 	beq.w	800bf18 <__ieee754_pow+0x9a0>
 800b688:	4b4b      	ldr	r3, [pc, #300]	; (800b7b8 <__ieee754_pow+0x240>)
 800b68a:	429c      	cmp	r4, r3
 800b68c:	dd0b      	ble.n	800b6a6 <__ieee754_pow+0x12e>
 800b68e:	2f00      	cmp	r7, #0
 800b690:	f2c0 8448 	blt.w	800bf24 <__ieee754_pow+0x9ac>
 800b694:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800b698:	4658      	mov	r0, fp
 800b69a:	4661      	mov	r1, ip
 800b69c:	b013      	add	sp, #76	; 0x4c
 800b69e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6a2:	2302      	movs	r3, #2
 800b6a4:	e7e2      	b.n	800b66c <__ieee754_pow+0xf4>
 800b6a6:	2f00      	cmp	r7, #0
 800b6a8:	f04f 0b00 	mov.w	fp, #0
 800b6ac:	f04f 0c00 	mov.w	ip, #0
 800b6b0:	daf2      	bge.n	800b698 <__ieee754_pow+0x120>
 800b6b2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800b6b6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800b6ba:	e7ed      	b.n	800b698 <__ieee754_pow+0x120>
 800b6bc:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800b6c0:	d106      	bne.n	800b6d0 <__ieee754_pow+0x158>
 800b6c2:	4642      	mov	r2, r8
 800b6c4:	464b      	mov	r3, r9
 800b6c6:	4640      	mov	r0, r8
 800b6c8:	4649      	mov	r1, r9
 800b6ca:	f7f4 ff6d 	bl	80005a8 <__aeabi_dmul>
 800b6ce:	e770      	b.n	800b5b2 <__ieee754_pow+0x3a>
 800b6d0:	4b3a      	ldr	r3, [pc, #232]	; (800b7bc <__ieee754_pow+0x244>)
 800b6d2:	429f      	cmp	r7, r3
 800b6d4:	d10a      	bne.n	800b6ec <__ieee754_pow+0x174>
 800b6d6:	2d00      	cmp	r5, #0
 800b6d8:	db08      	blt.n	800b6ec <__ieee754_pow+0x174>
 800b6da:	4640      	mov	r0, r8
 800b6dc:	4649      	mov	r1, r9
 800b6de:	b013      	add	sp, #76	; 0x4c
 800b6e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6e4:	f000 bc5e 	b.w	800bfa4 <__ieee754_sqrt>
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	9300      	str	r3, [sp, #0]
 800b6ec:	4640      	mov	r0, r8
 800b6ee:	4649      	mov	r1, r9
 800b6f0:	f000 fd32 	bl	800c158 <fabs>
 800b6f4:	4683      	mov	fp, r0
 800b6f6:	468c      	mov	ip, r1
 800b6f8:	f1ba 0f00 	cmp.w	sl, #0
 800b6fc:	d128      	bne.n	800b750 <__ieee754_pow+0x1d8>
 800b6fe:	b124      	cbz	r4, 800b70a <__ieee754_pow+0x192>
 800b700:	4b2c      	ldr	r3, [pc, #176]	; (800b7b4 <__ieee754_pow+0x23c>)
 800b702:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b706:	429a      	cmp	r2, r3
 800b708:	d122      	bne.n	800b750 <__ieee754_pow+0x1d8>
 800b70a:	2f00      	cmp	r7, #0
 800b70c:	da07      	bge.n	800b71e <__ieee754_pow+0x1a6>
 800b70e:	465a      	mov	r2, fp
 800b710:	4663      	mov	r3, ip
 800b712:	4928      	ldr	r1, [pc, #160]	; (800b7b4 <__ieee754_pow+0x23c>)
 800b714:	2000      	movs	r0, #0
 800b716:	f7f5 f871 	bl	80007fc <__aeabi_ddiv>
 800b71a:	4683      	mov	fp, r0
 800b71c:	468c      	mov	ip, r1
 800b71e:	2d00      	cmp	r5, #0
 800b720:	daba      	bge.n	800b698 <__ieee754_pow+0x120>
 800b722:	9b00      	ldr	r3, [sp, #0]
 800b724:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b728:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b72c:	4323      	orrs	r3, r4
 800b72e:	d108      	bne.n	800b742 <__ieee754_pow+0x1ca>
 800b730:	465a      	mov	r2, fp
 800b732:	4663      	mov	r3, ip
 800b734:	4658      	mov	r0, fp
 800b736:	4661      	mov	r1, ip
 800b738:	f7f4 fd7e 	bl	8000238 <__aeabi_dsub>
 800b73c:	4602      	mov	r2, r0
 800b73e:	460b      	mov	r3, r1
 800b740:	e790      	b.n	800b664 <__ieee754_pow+0xec>
 800b742:	9b00      	ldr	r3, [sp, #0]
 800b744:	2b01      	cmp	r3, #1
 800b746:	d1a7      	bne.n	800b698 <__ieee754_pow+0x120>
 800b748:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800b74c:	469c      	mov	ip, r3
 800b74e:	e7a3      	b.n	800b698 <__ieee754_pow+0x120>
 800b750:	0feb      	lsrs	r3, r5, #31
 800b752:	3b01      	subs	r3, #1
 800b754:	930c      	str	r3, [sp, #48]	; 0x30
 800b756:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b758:	9b00      	ldr	r3, [sp, #0]
 800b75a:	4313      	orrs	r3, r2
 800b75c:	d104      	bne.n	800b768 <__ieee754_pow+0x1f0>
 800b75e:	4642      	mov	r2, r8
 800b760:	464b      	mov	r3, r9
 800b762:	4640      	mov	r0, r8
 800b764:	4649      	mov	r1, r9
 800b766:	e7e7      	b.n	800b738 <__ieee754_pow+0x1c0>
 800b768:	4b15      	ldr	r3, [pc, #84]	; (800b7c0 <__ieee754_pow+0x248>)
 800b76a:	429e      	cmp	r6, r3
 800b76c:	f340 80f6 	ble.w	800b95c <__ieee754_pow+0x3e4>
 800b770:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b774:	429e      	cmp	r6, r3
 800b776:	4b10      	ldr	r3, [pc, #64]	; (800b7b8 <__ieee754_pow+0x240>)
 800b778:	dd09      	ble.n	800b78e <__ieee754_pow+0x216>
 800b77a:	429c      	cmp	r4, r3
 800b77c:	dc0c      	bgt.n	800b798 <__ieee754_pow+0x220>
 800b77e:	2f00      	cmp	r7, #0
 800b780:	da0c      	bge.n	800b79c <__ieee754_pow+0x224>
 800b782:	2000      	movs	r0, #0
 800b784:	b013      	add	sp, #76	; 0x4c
 800b786:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b78a:	f000 bce0 	b.w	800c14e <__math_oflow>
 800b78e:	429c      	cmp	r4, r3
 800b790:	dbf5      	blt.n	800b77e <__ieee754_pow+0x206>
 800b792:	4b08      	ldr	r3, [pc, #32]	; (800b7b4 <__ieee754_pow+0x23c>)
 800b794:	429c      	cmp	r4, r3
 800b796:	dd15      	ble.n	800b7c4 <__ieee754_pow+0x24c>
 800b798:	2f00      	cmp	r7, #0
 800b79a:	dcf2      	bgt.n	800b782 <__ieee754_pow+0x20a>
 800b79c:	2000      	movs	r0, #0
 800b79e:	b013      	add	sp, #76	; 0x4c
 800b7a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7a4:	f000 bcce 	b.w	800c144 <__math_uflow>
 800b7a8:	fff00000 	.word	0xfff00000
 800b7ac:	7ff00000 	.word	0x7ff00000
 800b7b0:	433fffff 	.word	0x433fffff
 800b7b4:	3ff00000 	.word	0x3ff00000
 800b7b8:	3fefffff 	.word	0x3fefffff
 800b7bc:	3fe00000 	.word	0x3fe00000
 800b7c0:	41e00000 	.word	0x41e00000
 800b7c4:	4661      	mov	r1, ip
 800b7c6:	4b60      	ldr	r3, [pc, #384]	; (800b948 <__ieee754_pow+0x3d0>)
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	4658      	mov	r0, fp
 800b7cc:	f7f4 fd34 	bl	8000238 <__aeabi_dsub>
 800b7d0:	a355      	add	r3, pc, #340	; (adr r3, 800b928 <__ieee754_pow+0x3b0>)
 800b7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d6:	4604      	mov	r4, r0
 800b7d8:	460d      	mov	r5, r1
 800b7da:	f7f4 fee5 	bl	80005a8 <__aeabi_dmul>
 800b7de:	a354      	add	r3, pc, #336	; (adr r3, 800b930 <__ieee754_pow+0x3b8>)
 800b7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e4:	4606      	mov	r6, r0
 800b7e6:	460f      	mov	r7, r1
 800b7e8:	4620      	mov	r0, r4
 800b7ea:	4629      	mov	r1, r5
 800b7ec:	f7f4 fedc 	bl	80005a8 <__aeabi_dmul>
 800b7f0:	4b56      	ldr	r3, [pc, #344]	; (800b94c <__ieee754_pow+0x3d4>)
 800b7f2:	4682      	mov	sl, r0
 800b7f4:	468b      	mov	fp, r1
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	4620      	mov	r0, r4
 800b7fa:	4629      	mov	r1, r5
 800b7fc:	f7f4 fed4 	bl	80005a8 <__aeabi_dmul>
 800b800:	4602      	mov	r2, r0
 800b802:	460b      	mov	r3, r1
 800b804:	a14c      	add	r1, pc, #304	; (adr r1, 800b938 <__ieee754_pow+0x3c0>)
 800b806:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b80a:	f7f4 fd15 	bl	8000238 <__aeabi_dsub>
 800b80e:	4622      	mov	r2, r4
 800b810:	462b      	mov	r3, r5
 800b812:	f7f4 fec9 	bl	80005a8 <__aeabi_dmul>
 800b816:	4602      	mov	r2, r0
 800b818:	460b      	mov	r3, r1
 800b81a:	2000      	movs	r0, #0
 800b81c:	494c      	ldr	r1, [pc, #304]	; (800b950 <__ieee754_pow+0x3d8>)
 800b81e:	f7f4 fd0b 	bl	8000238 <__aeabi_dsub>
 800b822:	4622      	mov	r2, r4
 800b824:	462b      	mov	r3, r5
 800b826:	4680      	mov	r8, r0
 800b828:	4689      	mov	r9, r1
 800b82a:	4620      	mov	r0, r4
 800b82c:	4629      	mov	r1, r5
 800b82e:	f7f4 febb 	bl	80005a8 <__aeabi_dmul>
 800b832:	4602      	mov	r2, r0
 800b834:	460b      	mov	r3, r1
 800b836:	4640      	mov	r0, r8
 800b838:	4649      	mov	r1, r9
 800b83a:	f7f4 feb5 	bl	80005a8 <__aeabi_dmul>
 800b83e:	a340      	add	r3, pc, #256	; (adr r3, 800b940 <__ieee754_pow+0x3c8>)
 800b840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b844:	f7f4 feb0 	bl	80005a8 <__aeabi_dmul>
 800b848:	4602      	mov	r2, r0
 800b84a:	460b      	mov	r3, r1
 800b84c:	4650      	mov	r0, sl
 800b84e:	4659      	mov	r1, fp
 800b850:	f7f4 fcf2 	bl	8000238 <__aeabi_dsub>
 800b854:	4602      	mov	r2, r0
 800b856:	460b      	mov	r3, r1
 800b858:	4604      	mov	r4, r0
 800b85a:	460d      	mov	r5, r1
 800b85c:	4630      	mov	r0, r6
 800b85e:	4639      	mov	r1, r7
 800b860:	f7f4 fcec 	bl	800023c <__adddf3>
 800b864:	f04f 0a00 	mov.w	sl, #0
 800b868:	4632      	mov	r2, r6
 800b86a:	463b      	mov	r3, r7
 800b86c:	4650      	mov	r0, sl
 800b86e:	468b      	mov	fp, r1
 800b870:	f7f4 fce2 	bl	8000238 <__aeabi_dsub>
 800b874:	4602      	mov	r2, r0
 800b876:	460b      	mov	r3, r1
 800b878:	4620      	mov	r0, r4
 800b87a:	4629      	mov	r1, r5
 800b87c:	f7f4 fcdc 	bl	8000238 <__aeabi_dsub>
 800b880:	9b00      	ldr	r3, [sp, #0]
 800b882:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b884:	3b01      	subs	r3, #1
 800b886:	4313      	orrs	r3, r2
 800b888:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b88c:	bf0c      	ite	eq
 800b88e:	4b31      	ldreq	r3, [pc, #196]	; (800b954 <__ieee754_pow+0x3dc>)
 800b890:	4b2d      	ldrne	r3, [pc, #180]	; (800b948 <__ieee754_pow+0x3d0>)
 800b892:	2600      	movs	r6, #0
 800b894:	2200      	movs	r2, #0
 800b896:	e9cd 2300 	strd	r2, r3, [sp]
 800b89a:	4604      	mov	r4, r0
 800b89c:	460d      	mov	r5, r1
 800b89e:	4632      	mov	r2, r6
 800b8a0:	463b      	mov	r3, r7
 800b8a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8a6:	f7f4 fcc7 	bl	8000238 <__aeabi_dsub>
 800b8aa:	4652      	mov	r2, sl
 800b8ac:	465b      	mov	r3, fp
 800b8ae:	f7f4 fe7b 	bl	80005a8 <__aeabi_dmul>
 800b8b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b8b6:	4680      	mov	r8, r0
 800b8b8:	4689      	mov	r9, r1
 800b8ba:	4620      	mov	r0, r4
 800b8bc:	4629      	mov	r1, r5
 800b8be:	f7f4 fe73 	bl	80005a8 <__aeabi_dmul>
 800b8c2:	4602      	mov	r2, r0
 800b8c4:	460b      	mov	r3, r1
 800b8c6:	4640      	mov	r0, r8
 800b8c8:	4649      	mov	r1, r9
 800b8ca:	f7f4 fcb7 	bl	800023c <__adddf3>
 800b8ce:	4632      	mov	r2, r6
 800b8d0:	463b      	mov	r3, r7
 800b8d2:	4680      	mov	r8, r0
 800b8d4:	4689      	mov	r9, r1
 800b8d6:	4650      	mov	r0, sl
 800b8d8:	4659      	mov	r1, fp
 800b8da:	f7f4 fe65 	bl	80005a8 <__aeabi_dmul>
 800b8de:	460b      	mov	r3, r1
 800b8e0:	4604      	mov	r4, r0
 800b8e2:	460d      	mov	r5, r1
 800b8e4:	4602      	mov	r2, r0
 800b8e6:	4649      	mov	r1, r9
 800b8e8:	4640      	mov	r0, r8
 800b8ea:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b8ee:	f7f4 fca5 	bl	800023c <__adddf3>
 800b8f2:	4b19      	ldr	r3, [pc, #100]	; (800b958 <__ieee754_pow+0x3e0>)
 800b8f4:	4299      	cmp	r1, r3
 800b8f6:	4682      	mov	sl, r0
 800b8f8:	460f      	mov	r7, r1
 800b8fa:	460e      	mov	r6, r1
 800b8fc:	f340 82e7 	ble.w	800bece <__ieee754_pow+0x956>
 800b900:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b904:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b908:	4303      	orrs	r3, r0
 800b90a:	f000 81e1 	beq.w	800bcd0 <__ieee754_pow+0x758>
 800b90e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b912:	2200      	movs	r2, #0
 800b914:	2300      	movs	r3, #0
 800b916:	f7f5 f8b9 	bl	8000a8c <__aeabi_dcmplt>
 800b91a:	3800      	subs	r0, #0
 800b91c:	bf18      	it	ne
 800b91e:	2001      	movne	r0, #1
 800b920:	e730      	b.n	800b784 <__ieee754_pow+0x20c>
 800b922:	bf00      	nop
 800b924:	f3af 8000 	nop.w
 800b928:	60000000 	.word	0x60000000
 800b92c:	3ff71547 	.word	0x3ff71547
 800b930:	f85ddf44 	.word	0xf85ddf44
 800b934:	3e54ae0b 	.word	0x3e54ae0b
 800b938:	55555555 	.word	0x55555555
 800b93c:	3fd55555 	.word	0x3fd55555
 800b940:	652b82fe 	.word	0x652b82fe
 800b944:	3ff71547 	.word	0x3ff71547
 800b948:	3ff00000 	.word	0x3ff00000
 800b94c:	3fd00000 	.word	0x3fd00000
 800b950:	3fe00000 	.word	0x3fe00000
 800b954:	bff00000 	.word	0xbff00000
 800b958:	408fffff 	.word	0x408fffff
 800b95c:	4bd2      	ldr	r3, [pc, #840]	; (800bca8 <__ieee754_pow+0x730>)
 800b95e:	402b      	ands	r3, r5
 800b960:	2200      	movs	r2, #0
 800b962:	b943      	cbnz	r3, 800b976 <__ieee754_pow+0x3fe>
 800b964:	4658      	mov	r0, fp
 800b966:	4bd1      	ldr	r3, [pc, #836]	; (800bcac <__ieee754_pow+0x734>)
 800b968:	4661      	mov	r1, ip
 800b96a:	f7f4 fe1d 	bl	80005a8 <__aeabi_dmul>
 800b96e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b972:	4683      	mov	fp, r0
 800b974:	460c      	mov	r4, r1
 800b976:	1523      	asrs	r3, r4, #20
 800b978:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b97c:	4413      	add	r3, r2
 800b97e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b980:	4bcb      	ldr	r3, [pc, #812]	; (800bcb0 <__ieee754_pow+0x738>)
 800b982:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b986:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b98a:	429c      	cmp	r4, r3
 800b98c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b990:	dd08      	ble.n	800b9a4 <__ieee754_pow+0x42c>
 800b992:	4bc8      	ldr	r3, [pc, #800]	; (800bcb4 <__ieee754_pow+0x73c>)
 800b994:	429c      	cmp	r4, r3
 800b996:	f340 8199 	ble.w	800bccc <__ieee754_pow+0x754>
 800b99a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b99c:	3301      	adds	r3, #1
 800b99e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b9a0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b9a4:	2600      	movs	r6, #0
 800b9a6:	00f3      	lsls	r3, r6, #3
 800b9a8:	930d      	str	r3, [sp, #52]	; 0x34
 800b9aa:	4bc3      	ldr	r3, [pc, #780]	; (800bcb8 <__ieee754_pow+0x740>)
 800b9ac:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b9b0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b9b4:	4658      	mov	r0, fp
 800b9b6:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	4629      	mov	r1, r5
 800b9be:	4623      	mov	r3, r4
 800b9c0:	f7f4 fc3a 	bl	8000238 <__aeabi_dsub>
 800b9c4:	46da      	mov	sl, fp
 800b9c6:	4652      	mov	r2, sl
 800b9c8:	462b      	mov	r3, r5
 800b9ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b9ce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b9d2:	f7f4 fc33 	bl	800023c <__adddf3>
 800b9d6:	4602      	mov	r2, r0
 800b9d8:	460b      	mov	r3, r1
 800b9da:	2000      	movs	r0, #0
 800b9dc:	49b7      	ldr	r1, [pc, #732]	; (800bcbc <__ieee754_pow+0x744>)
 800b9de:	f7f4 ff0d 	bl	80007fc <__aeabi_ddiv>
 800b9e2:	4602      	mov	r2, r0
 800b9e4:	460b      	mov	r3, r1
 800b9e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b9ea:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b9ee:	f7f4 fddb 	bl	80005a8 <__aeabi_dmul>
 800b9f2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b9f6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800b9fa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b9fe:	2300      	movs	r3, #0
 800ba00:	9304      	str	r3, [sp, #16]
 800ba02:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ba06:	46ab      	mov	fp, r5
 800ba08:	106d      	asrs	r5, r5, #1
 800ba0a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ba0e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ba12:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800ba16:	2200      	movs	r2, #0
 800ba18:	4640      	mov	r0, r8
 800ba1a:	4649      	mov	r1, r9
 800ba1c:	4614      	mov	r4, r2
 800ba1e:	461d      	mov	r5, r3
 800ba20:	f7f4 fdc2 	bl	80005a8 <__aeabi_dmul>
 800ba24:	4602      	mov	r2, r0
 800ba26:	460b      	mov	r3, r1
 800ba28:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ba2c:	f7f4 fc04 	bl	8000238 <__aeabi_dsub>
 800ba30:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ba34:	4606      	mov	r6, r0
 800ba36:	460f      	mov	r7, r1
 800ba38:	4620      	mov	r0, r4
 800ba3a:	4629      	mov	r1, r5
 800ba3c:	f7f4 fbfc 	bl	8000238 <__aeabi_dsub>
 800ba40:	4602      	mov	r2, r0
 800ba42:	460b      	mov	r3, r1
 800ba44:	4650      	mov	r0, sl
 800ba46:	4659      	mov	r1, fp
 800ba48:	f7f4 fbf6 	bl	8000238 <__aeabi_dsub>
 800ba4c:	4642      	mov	r2, r8
 800ba4e:	464b      	mov	r3, r9
 800ba50:	f7f4 fdaa 	bl	80005a8 <__aeabi_dmul>
 800ba54:	4602      	mov	r2, r0
 800ba56:	460b      	mov	r3, r1
 800ba58:	4630      	mov	r0, r6
 800ba5a:	4639      	mov	r1, r7
 800ba5c:	f7f4 fbec 	bl	8000238 <__aeabi_dsub>
 800ba60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ba64:	f7f4 fda0 	bl	80005a8 <__aeabi_dmul>
 800ba68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ba6c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ba70:	4610      	mov	r0, r2
 800ba72:	4619      	mov	r1, r3
 800ba74:	f7f4 fd98 	bl	80005a8 <__aeabi_dmul>
 800ba78:	a379      	add	r3, pc, #484	; (adr r3, 800bc60 <__ieee754_pow+0x6e8>)
 800ba7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7e:	4604      	mov	r4, r0
 800ba80:	460d      	mov	r5, r1
 800ba82:	f7f4 fd91 	bl	80005a8 <__aeabi_dmul>
 800ba86:	a378      	add	r3, pc, #480	; (adr r3, 800bc68 <__ieee754_pow+0x6f0>)
 800ba88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8c:	f7f4 fbd6 	bl	800023c <__adddf3>
 800ba90:	4622      	mov	r2, r4
 800ba92:	462b      	mov	r3, r5
 800ba94:	f7f4 fd88 	bl	80005a8 <__aeabi_dmul>
 800ba98:	a375      	add	r3, pc, #468	; (adr r3, 800bc70 <__ieee754_pow+0x6f8>)
 800ba9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba9e:	f7f4 fbcd 	bl	800023c <__adddf3>
 800baa2:	4622      	mov	r2, r4
 800baa4:	462b      	mov	r3, r5
 800baa6:	f7f4 fd7f 	bl	80005a8 <__aeabi_dmul>
 800baaa:	a373      	add	r3, pc, #460	; (adr r3, 800bc78 <__ieee754_pow+0x700>)
 800baac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab0:	f7f4 fbc4 	bl	800023c <__adddf3>
 800bab4:	4622      	mov	r2, r4
 800bab6:	462b      	mov	r3, r5
 800bab8:	f7f4 fd76 	bl	80005a8 <__aeabi_dmul>
 800babc:	a370      	add	r3, pc, #448	; (adr r3, 800bc80 <__ieee754_pow+0x708>)
 800babe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac2:	f7f4 fbbb 	bl	800023c <__adddf3>
 800bac6:	4622      	mov	r2, r4
 800bac8:	462b      	mov	r3, r5
 800baca:	f7f4 fd6d 	bl	80005a8 <__aeabi_dmul>
 800bace:	a36e      	add	r3, pc, #440	; (adr r3, 800bc88 <__ieee754_pow+0x710>)
 800bad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad4:	f7f4 fbb2 	bl	800023c <__adddf3>
 800bad8:	4622      	mov	r2, r4
 800bada:	4606      	mov	r6, r0
 800badc:	460f      	mov	r7, r1
 800bade:	462b      	mov	r3, r5
 800bae0:	4620      	mov	r0, r4
 800bae2:	4629      	mov	r1, r5
 800bae4:	f7f4 fd60 	bl	80005a8 <__aeabi_dmul>
 800bae8:	4602      	mov	r2, r0
 800baea:	460b      	mov	r3, r1
 800baec:	4630      	mov	r0, r6
 800baee:	4639      	mov	r1, r7
 800baf0:	f7f4 fd5a 	bl	80005a8 <__aeabi_dmul>
 800baf4:	4642      	mov	r2, r8
 800baf6:	4604      	mov	r4, r0
 800baf8:	460d      	mov	r5, r1
 800bafa:	464b      	mov	r3, r9
 800bafc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb00:	f7f4 fb9c 	bl	800023c <__adddf3>
 800bb04:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bb08:	f7f4 fd4e 	bl	80005a8 <__aeabi_dmul>
 800bb0c:	4622      	mov	r2, r4
 800bb0e:	462b      	mov	r3, r5
 800bb10:	f7f4 fb94 	bl	800023c <__adddf3>
 800bb14:	4642      	mov	r2, r8
 800bb16:	4606      	mov	r6, r0
 800bb18:	460f      	mov	r7, r1
 800bb1a:	464b      	mov	r3, r9
 800bb1c:	4640      	mov	r0, r8
 800bb1e:	4649      	mov	r1, r9
 800bb20:	f7f4 fd42 	bl	80005a8 <__aeabi_dmul>
 800bb24:	4b66      	ldr	r3, [pc, #408]	; (800bcc0 <__ieee754_pow+0x748>)
 800bb26:	2200      	movs	r2, #0
 800bb28:	4682      	mov	sl, r0
 800bb2a:	468b      	mov	fp, r1
 800bb2c:	f7f4 fb86 	bl	800023c <__adddf3>
 800bb30:	4632      	mov	r2, r6
 800bb32:	463b      	mov	r3, r7
 800bb34:	f7f4 fb82 	bl	800023c <__adddf3>
 800bb38:	2400      	movs	r4, #0
 800bb3a:	460d      	mov	r5, r1
 800bb3c:	4622      	mov	r2, r4
 800bb3e:	460b      	mov	r3, r1
 800bb40:	4640      	mov	r0, r8
 800bb42:	4649      	mov	r1, r9
 800bb44:	f7f4 fd30 	bl	80005a8 <__aeabi_dmul>
 800bb48:	4b5d      	ldr	r3, [pc, #372]	; (800bcc0 <__ieee754_pow+0x748>)
 800bb4a:	4680      	mov	r8, r0
 800bb4c:	4689      	mov	r9, r1
 800bb4e:	2200      	movs	r2, #0
 800bb50:	4620      	mov	r0, r4
 800bb52:	4629      	mov	r1, r5
 800bb54:	f7f4 fb70 	bl	8000238 <__aeabi_dsub>
 800bb58:	4652      	mov	r2, sl
 800bb5a:	465b      	mov	r3, fp
 800bb5c:	f7f4 fb6c 	bl	8000238 <__aeabi_dsub>
 800bb60:	4602      	mov	r2, r0
 800bb62:	460b      	mov	r3, r1
 800bb64:	4630      	mov	r0, r6
 800bb66:	4639      	mov	r1, r7
 800bb68:	f7f4 fb66 	bl	8000238 <__aeabi_dsub>
 800bb6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bb70:	f7f4 fd1a 	bl	80005a8 <__aeabi_dmul>
 800bb74:	4622      	mov	r2, r4
 800bb76:	4606      	mov	r6, r0
 800bb78:	460f      	mov	r7, r1
 800bb7a:	462b      	mov	r3, r5
 800bb7c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bb80:	f7f4 fd12 	bl	80005a8 <__aeabi_dmul>
 800bb84:	4602      	mov	r2, r0
 800bb86:	460b      	mov	r3, r1
 800bb88:	4630      	mov	r0, r6
 800bb8a:	4639      	mov	r1, r7
 800bb8c:	f7f4 fb56 	bl	800023c <__adddf3>
 800bb90:	4606      	mov	r6, r0
 800bb92:	460f      	mov	r7, r1
 800bb94:	4602      	mov	r2, r0
 800bb96:	460b      	mov	r3, r1
 800bb98:	4640      	mov	r0, r8
 800bb9a:	4649      	mov	r1, r9
 800bb9c:	f7f4 fb4e 	bl	800023c <__adddf3>
 800bba0:	2400      	movs	r4, #0
 800bba2:	a33b      	add	r3, pc, #236	; (adr r3, 800bc90 <__ieee754_pow+0x718>)
 800bba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba8:	4620      	mov	r0, r4
 800bbaa:	460d      	mov	r5, r1
 800bbac:	f7f4 fcfc 	bl	80005a8 <__aeabi_dmul>
 800bbb0:	4642      	mov	r2, r8
 800bbb2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bbb6:	464b      	mov	r3, r9
 800bbb8:	4620      	mov	r0, r4
 800bbba:	4629      	mov	r1, r5
 800bbbc:	f7f4 fb3c 	bl	8000238 <__aeabi_dsub>
 800bbc0:	4602      	mov	r2, r0
 800bbc2:	460b      	mov	r3, r1
 800bbc4:	4630      	mov	r0, r6
 800bbc6:	4639      	mov	r1, r7
 800bbc8:	f7f4 fb36 	bl	8000238 <__aeabi_dsub>
 800bbcc:	a332      	add	r3, pc, #200	; (adr r3, 800bc98 <__ieee754_pow+0x720>)
 800bbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd2:	f7f4 fce9 	bl	80005a8 <__aeabi_dmul>
 800bbd6:	a332      	add	r3, pc, #200	; (adr r3, 800bca0 <__ieee754_pow+0x728>)
 800bbd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbdc:	4606      	mov	r6, r0
 800bbde:	460f      	mov	r7, r1
 800bbe0:	4620      	mov	r0, r4
 800bbe2:	4629      	mov	r1, r5
 800bbe4:	f7f4 fce0 	bl	80005a8 <__aeabi_dmul>
 800bbe8:	4602      	mov	r2, r0
 800bbea:	460b      	mov	r3, r1
 800bbec:	4630      	mov	r0, r6
 800bbee:	4639      	mov	r1, r7
 800bbf0:	f7f4 fb24 	bl	800023c <__adddf3>
 800bbf4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bbf6:	4b33      	ldr	r3, [pc, #204]	; (800bcc4 <__ieee754_pow+0x74c>)
 800bbf8:	4413      	add	r3, r2
 800bbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbfe:	f7f4 fb1d 	bl	800023c <__adddf3>
 800bc02:	4680      	mov	r8, r0
 800bc04:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800bc06:	4689      	mov	r9, r1
 800bc08:	f7f4 fc64 	bl	80004d4 <__aeabi_i2d>
 800bc0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bc0e:	4b2e      	ldr	r3, [pc, #184]	; (800bcc8 <__ieee754_pow+0x750>)
 800bc10:	4413      	add	r3, r2
 800bc12:	e9d3 6700 	ldrd	r6, r7, [r3]
 800bc16:	4604      	mov	r4, r0
 800bc18:	460d      	mov	r5, r1
 800bc1a:	4642      	mov	r2, r8
 800bc1c:	464b      	mov	r3, r9
 800bc1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc22:	f7f4 fb0b 	bl	800023c <__adddf3>
 800bc26:	4632      	mov	r2, r6
 800bc28:	463b      	mov	r3, r7
 800bc2a:	f7f4 fb07 	bl	800023c <__adddf3>
 800bc2e:	4622      	mov	r2, r4
 800bc30:	462b      	mov	r3, r5
 800bc32:	f7f4 fb03 	bl	800023c <__adddf3>
 800bc36:	f04f 0a00 	mov.w	sl, #0
 800bc3a:	4622      	mov	r2, r4
 800bc3c:	462b      	mov	r3, r5
 800bc3e:	4650      	mov	r0, sl
 800bc40:	468b      	mov	fp, r1
 800bc42:	f7f4 faf9 	bl	8000238 <__aeabi_dsub>
 800bc46:	4632      	mov	r2, r6
 800bc48:	463b      	mov	r3, r7
 800bc4a:	f7f4 faf5 	bl	8000238 <__aeabi_dsub>
 800bc4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc52:	f7f4 faf1 	bl	8000238 <__aeabi_dsub>
 800bc56:	4602      	mov	r2, r0
 800bc58:	460b      	mov	r3, r1
 800bc5a:	4640      	mov	r0, r8
 800bc5c:	4649      	mov	r1, r9
 800bc5e:	e60d      	b.n	800b87c <__ieee754_pow+0x304>
 800bc60:	4a454eef 	.word	0x4a454eef
 800bc64:	3fca7e28 	.word	0x3fca7e28
 800bc68:	93c9db65 	.word	0x93c9db65
 800bc6c:	3fcd864a 	.word	0x3fcd864a
 800bc70:	a91d4101 	.word	0xa91d4101
 800bc74:	3fd17460 	.word	0x3fd17460
 800bc78:	518f264d 	.word	0x518f264d
 800bc7c:	3fd55555 	.word	0x3fd55555
 800bc80:	db6fabff 	.word	0xdb6fabff
 800bc84:	3fdb6db6 	.word	0x3fdb6db6
 800bc88:	33333303 	.word	0x33333303
 800bc8c:	3fe33333 	.word	0x3fe33333
 800bc90:	e0000000 	.word	0xe0000000
 800bc94:	3feec709 	.word	0x3feec709
 800bc98:	dc3a03fd 	.word	0xdc3a03fd
 800bc9c:	3feec709 	.word	0x3feec709
 800bca0:	145b01f5 	.word	0x145b01f5
 800bca4:	be3e2fe0 	.word	0xbe3e2fe0
 800bca8:	7ff00000 	.word	0x7ff00000
 800bcac:	43400000 	.word	0x43400000
 800bcb0:	0003988e 	.word	0x0003988e
 800bcb4:	000bb679 	.word	0x000bb679
 800bcb8:	0800cd10 	.word	0x0800cd10
 800bcbc:	3ff00000 	.word	0x3ff00000
 800bcc0:	40080000 	.word	0x40080000
 800bcc4:	0800cd30 	.word	0x0800cd30
 800bcc8:	0800cd20 	.word	0x0800cd20
 800bccc:	2601      	movs	r6, #1
 800bcce:	e66a      	b.n	800b9a6 <__ieee754_pow+0x42e>
 800bcd0:	a39d      	add	r3, pc, #628	; (adr r3, 800bf48 <__ieee754_pow+0x9d0>)
 800bcd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd6:	4640      	mov	r0, r8
 800bcd8:	4649      	mov	r1, r9
 800bcda:	f7f4 faaf 	bl	800023c <__adddf3>
 800bcde:	4622      	mov	r2, r4
 800bce0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bce4:	462b      	mov	r3, r5
 800bce6:	4650      	mov	r0, sl
 800bce8:	4639      	mov	r1, r7
 800bcea:	f7f4 faa5 	bl	8000238 <__aeabi_dsub>
 800bcee:	4602      	mov	r2, r0
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bcf6:	f7f4 fee7 	bl	8000ac8 <__aeabi_dcmpgt>
 800bcfa:	2800      	cmp	r0, #0
 800bcfc:	f47f ae07 	bne.w	800b90e <__ieee754_pow+0x396>
 800bd00:	4aa3      	ldr	r2, [pc, #652]	; (800bf90 <__ieee754_pow+0xa18>)
 800bd02:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800bd06:	4293      	cmp	r3, r2
 800bd08:	f340 8101 	ble.w	800bf0e <__ieee754_pow+0x996>
 800bd0c:	151b      	asrs	r3, r3, #20
 800bd0e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800bd12:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800bd16:	fa4a f303 	asr.w	r3, sl, r3
 800bd1a:	4433      	add	r3, r6
 800bd1c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800bd20:	4f9c      	ldr	r7, [pc, #624]	; (800bf94 <__ieee754_pow+0xa1c>)
 800bd22:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800bd26:	4117      	asrs	r7, r2
 800bd28:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800bd2c:	2000      	movs	r0, #0
 800bd2e:	ea23 0107 	bic.w	r1, r3, r7
 800bd32:	f1c2 0214 	rsb	r2, r2, #20
 800bd36:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800bd3a:	fa4a fa02 	asr.w	sl, sl, r2
 800bd3e:	2e00      	cmp	r6, #0
 800bd40:	4602      	mov	r2, r0
 800bd42:	460b      	mov	r3, r1
 800bd44:	4620      	mov	r0, r4
 800bd46:	4629      	mov	r1, r5
 800bd48:	bfb8      	it	lt
 800bd4a:	f1ca 0a00 	rsblt	sl, sl, #0
 800bd4e:	f7f4 fa73 	bl	8000238 <__aeabi_dsub>
 800bd52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd56:	4642      	mov	r2, r8
 800bd58:	464b      	mov	r3, r9
 800bd5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd5e:	f7f4 fa6d 	bl	800023c <__adddf3>
 800bd62:	2400      	movs	r4, #0
 800bd64:	a37a      	add	r3, pc, #488	; (adr r3, 800bf50 <__ieee754_pow+0x9d8>)
 800bd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd6a:	4620      	mov	r0, r4
 800bd6c:	460d      	mov	r5, r1
 800bd6e:	f7f4 fc1b 	bl	80005a8 <__aeabi_dmul>
 800bd72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd76:	4606      	mov	r6, r0
 800bd78:	460f      	mov	r7, r1
 800bd7a:	4620      	mov	r0, r4
 800bd7c:	4629      	mov	r1, r5
 800bd7e:	f7f4 fa5b 	bl	8000238 <__aeabi_dsub>
 800bd82:	4602      	mov	r2, r0
 800bd84:	460b      	mov	r3, r1
 800bd86:	4640      	mov	r0, r8
 800bd88:	4649      	mov	r1, r9
 800bd8a:	f7f4 fa55 	bl	8000238 <__aeabi_dsub>
 800bd8e:	a372      	add	r3, pc, #456	; (adr r3, 800bf58 <__ieee754_pow+0x9e0>)
 800bd90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd94:	f7f4 fc08 	bl	80005a8 <__aeabi_dmul>
 800bd98:	a371      	add	r3, pc, #452	; (adr r3, 800bf60 <__ieee754_pow+0x9e8>)
 800bd9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd9e:	4680      	mov	r8, r0
 800bda0:	4689      	mov	r9, r1
 800bda2:	4620      	mov	r0, r4
 800bda4:	4629      	mov	r1, r5
 800bda6:	f7f4 fbff 	bl	80005a8 <__aeabi_dmul>
 800bdaa:	4602      	mov	r2, r0
 800bdac:	460b      	mov	r3, r1
 800bdae:	4640      	mov	r0, r8
 800bdb0:	4649      	mov	r1, r9
 800bdb2:	f7f4 fa43 	bl	800023c <__adddf3>
 800bdb6:	4604      	mov	r4, r0
 800bdb8:	460d      	mov	r5, r1
 800bdba:	4602      	mov	r2, r0
 800bdbc:	460b      	mov	r3, r1
 800bdbe:	4630      	mov	r0, r6
 800bdc0:	4639      	mov	r1, r7
 800bdc2:	f7f4 fa3b 	bl	800023c <__adddf3>
 800bdc6:	4632      	mov	r2, r6
 800bdc8:	463b      	mov	r3, r7
 800bdca:	4680      	mov	r8, r0
 800bdcc:	4689      	mov	r9, r1
 800bdce:	f7f4 fa33 	bl	8000238 <__aeabi_dsub>
 800bdd2:	4602      	mov	r2, r0
 800bdd4:	460b      	mov	r3, r1
 800bdd6:	4620      	mov	r0, r4
 800bdd8:	4629      	mov	r1, r5
 800bdda:	f7f4 fa2d 	bl	8000238 <__aeabi_dsub>
 800bdde:	4642      	mov	r2, r8
 800bde0:	4606      	mov	r6, r0
 800bde2:	460f      	mov	r7, r1
 800bde4:	464b      	mov	r3, r9
 800bde6:	4640      	mov	r0, r8
 800bde8:	4649      	mov	r1, r9
 800bdea:	f7f4 fbdd 	bl	80005a8 <__aeabi_dmul>
 800bdee:	a35e      	add	r3, pc, #376	; (adr r3, 800bf68 <__ieee754_pow+0x9f0>)
 800bdf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf4:	4604      	mov	r4, r0
 800bdf6:	460d      	mov	r5, r1
 800bdf8:	f7f4 fbd6 	bl	80005a8 <__aeabi_dmul>
 800bdfc:	a35c      	add	r3, pc, #368	; (adr r3, 800bf70 <__ieee754_pow+0x9f8>)
 800bdfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be02:	f7f4 fa19 	bl	8000238 <__aeabi_dsub>
 800be06:	4622      	mov	r2, r4
 800be08:	462b      	mov	r3, r5
 800be0a:	f7f4 fbcd 	bl	80005a8 <__aeabi_dmul>
 800be0e:	a35a      	add	r3, pc, #360	; (adr r3, 800bf78 <__ieee754_pow+0xa00>)
 800be10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be14:	f7f4 fa12 	bl	800023c <__adddf3>
 800be18:	4622      	mov	r2, r4
 800be1a:	462b      	mov	r3, r5
 800be1c:	f7f4 fbc4 	bl	80005a8 <__aeabi_dmul>
 800be20:	a357      	add	r3, pc, #348	; (adr r3, 800bf80 <__ieee754_pow+0xa08>)
 800be22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be26:	f7f4 fa07 	bl	8000238 <__aeabi_dsub>
 800be2a:	4622      	mov	r2, r4
 800be2c:	462b      	mov	r3, r5
 800be2e:	f7f4 fbbb 	bl	80005a8 <__aeabi_dmul>
 800be32:	a355      	add	r3, pc, #340	; (adr r3, 800bf88 <__ieee754_pow+0xa10>)
 800be34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be38:	f7f4 fa00 	bl	800023c <__adddf3>
 800be3c:	4622      	mov	r2, r4
 800be3e:	462b      	mov	r3, r5
 800be40:	f7f4 fbb2 	bl	80005a8 <__aeabi_dmul>
 800be44:	4602      	mov	r2, r0
 800be46:	460b      	mov	r3, r1
 800be48:	4640      	mov	r0, r8
 800be4a:	4649      	mov	r1, r9
 800be4c:	f7f4 f9f4 	bl	8000238 <__aeabi_dsub>
 800be50:	4604      	mov	r4, r0
 800be52:	460d      	mov	r5, r1
 800be54:	4602      	mov	r2, r0
 800be56:	460b      	mov	r3, r1
 800be58:	4640      	mov	r0, r8
 800be5a:	4649      	mov	r1, r9
 800be5c:	f7f4 fba4 	bl	80005a8 <__aeabi_dmul>
 800be60:	2200      	movs	r2, #0
 800be62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800be6a:	4620      	mov	r0, r4
 800be6c:	4629      	mov	r1, r5
 800be6e:	f7f4 f9e3 	bl	8000238 <__aeabi_dsub>
 800be72:	4602      	mov	r2, r0
 800be74:	460b      	mov	r3, r1
 800be76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be7a:	f7f4 fcbf 	bl	80007fc <__aeabi_ddiv>
 800be7e:	4632      	mov	r2, r6
 800be80:	4604      	mov	r4, r0
 800be82:	460d      	mov	r5, r1
 800be84:	463b      	mov	r3, r7
 800be86:	4640      	mov	r0, r8
 800be88:	4649      	mov	r1, r9
 800be8a:	f7f4 fb8d 	bl	80005a8 <__aeabi_dmul>
 800be8e:	4632      	mov	r2, r6
 800be90:	463b      	mov	r3, r7
 800be92:	f7f4 f9d3 	bl	800023c <__adddf3>
 800be96:	4602      	mov	r2, r0
 800be98:	460b      	mov	r3, r1
 800be9a:	4620      	mov	r0, r4
 800be9c:	4629      	mov	r1, r5
 800be9e:	f7f4 f9cb 	bl	8000238 <__aeabi_dsub>
 800bea2:	4642      	mov	r2, r8
 800bea4:	464b      	mov	r3, r9
 800bea6:	f7f4 f9c7 	bl	8000238 <__aeabi_dsub>
 800beaa:	4602      	mov	r2, r0
 800beac:	460b      	mov	r3, r1
 800beae:	2000      	movs	r0, #0
 800beb0:	4939      	ldr	r1, [pc, #228]	; (800bf98 <__ieee754_pow+0xa20>)
 800beb2:	f7f4 f9c1 	bl	8000238 <__aeabi_dsub>
 800beb6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800beba:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800bebe:	da29      	bge.n	800bf14 <__ieee754_pow+0x99c>
 800bec0:	4652      	mov	r2, sl
 800bec2:	f000 f955 	bl	800c170 <scalbn>
 800bec6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800beca:	f7ff bbfe 	b.w	800b6ca <__ieee754_pow+0x152>
 800bece:	4b33      	ldr	r3, [pc, #204]	; (800bf9c <__ieee754_pow+0xa24>)
 800bed0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800bed4:	429f      	cmp	r7, r3
 800bed6:	f77f af13 	ble.w	800bd00 <__ieee754_pow+0x788>
 800beda:	4b31      	ldr	r3, [pc, #196]	; (800bfa0 <__ieee754_pow+0xa28>)
 800bedc:	440b      	add	r3, r1
 800bede:	4303      	orrs	r3, r0
 800bee0:	d009      	beq.n	800bef6 <__ieee754_pow+0x97e>
 800bee2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bee6:	2200      	movs	r2, #0
 800bee8:	2300      	movs	r3, #0
 800beea:	f7f4 fdcf 	bl	8000a8c <__aeabi_dcmplt>
 800beee:	3800      	subs	r0, #0
 800bef0:	bf18      	it	ne
 800bef2:	2001      	movne	r0, #1
 800bef4:	e453      	b.n	800b79e <__ieee754_pow+0x226>
 800bef6:	4622      	mov	r2, r4
 800bef8:	462b      	mov	r3, r5
 800befa:	f7f4 f99d 	bl	8000238 <__aeabi_dsub>
 800befe:	4642      	mov	r2, r8
 800bf00:	464b      	mov	r3, r9
 800bf02:	f7f4 fdd7 	bl	8000ab4 <__aeabi_dcmpge>
 800bf06:	2800      	cmp	r0, #0
 800bf08:	f43f aefa 	beq.w	800bd00 <__ieee754_pow+0x788>
 800bf0c:	e7e9      	b.n	800bee2 <__ieee754_pow+0x96a>
 800bf0e:	f04f 0a00 	mov.w	sl, #0
 800bf12:	e720      	b.n	800bd56 <__ieee754_pow+0x7de>
 800bf14:	4621      	mov	r1, r4
 800bf16:	e7d6      	b.n	800bec6 <__ieee754_pow+0x94e>
 800bf18:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800bf98 <__ieee754_pow+0xa20>
 800bf1c:	f04f 0b00 	mov.w	fp, #0
 800bf20:	f7ff bbba 	b.w	800b698 <__ieee754_pow+0x120>
 800bf24:	f04f 0b00 	mov.w	fp, #0
 800bf28:	f04f 0c00 	mov.w	ip, #0
 800bf2c:	f7ff bbb4 	b.w	800b698 <__ieee754_pow+0x120>
 800bf30:	4640      	mov	r0, r8
 800bf32:	4649      	mov	r1, r9
 800bf34:	f7ff bb3d 	b.w	800b5b2 <__ieee754_pow+0x3a>
 800bf38:	9200      	str	r2, [sp, #0]
 800bf3a:	f7ff bb89 	b.w	800b650 <__ieee754_pow+0xd8>
 800bf3e:	2300      	movs	r3, #0
 800bf40:	f7ff bb73 	b.w	800b62a <__ieee754_pow+0xb2>
 800bf44:	f3af 8000 	nop.w
 800bf48:	652b82fe 	.word	0x652b82fe
 800bf4c:	3c971547 	.word	0x3c971547
 800bf50:	00000000 	.word	0x00000000
 800bf54:	3fe62e43 	.word	0x3fe62e43
 800bf58:	fefa39ef 	.word	0xfefa39ef
 800bf5c:	3fe62e42 	.word	0x3fe62e42
 800bf60:	0ca86c39 	.word	0x0ca86c39
 800bf64:	be205c61 	.word	0xbe205c61
 800bf68:	72bea4d0 	.word	0x72bea4d0
 800bf6c:	3e663769 	.word	0x3e663769
 800bf70:	c5d26bf1 	.word	0xc5d26bf1
 800bf74:	3ebbbd41 	.word	0x3ebbbd41
 800bf78:	af25de2c 	.word	0xaf25de2c
 800bf7c:	3f11566a 	.word	0x3f11566a
 800bf80:	16bebd93 	.word	0x16bebd93
 800bf84:	3f66c16c 	.word	0x3f66c16c
 800bf88:	5555553e 	.word	0x5555553e
 800bf8c:	3fc55555 	.word	0x3fc55555
 800bf90:	3fe00000 	.word	0x3fe00000
 800bf94:	000fffff 	.word	0x000fffff
 800bf98:	3ff00000 	.word	0x3ff00000
 800bf9c:	4090cbff 	.word	0x4090cbff
 800bfa0:	3f6f3400 	.word	0x3f6f3400

0800bfa4 <__ieee754_sqrt>:
 800bfa4:	f8df c154 	ldr.w	ip, [pc, #340]	; 800c0fc <__ieee754_sqrt+0x158>
 800bfa8:	ea3c 0c01 	bics.w	ip, ip, r1
 800bfac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfb0:	460a      	mov	r2, r1
 800bfb2:	4606      	mov	r6, r0
 800bfb4:	460d      	mov	r5, r1
 800bfb6:	460c      	mov	r4, r1
 800bfb8:	4607      	mov	r7, r0
 800bfba:	4603      	mov	r3, r0
 800bfbc:	d10f      	bne.n	800bfde <__ieee754_sqrt+0x3a>
 800bfbe:	4602      	mov	r2, r0
 800bfc0:	460b      	mov	r3, r1
 800bfc2:	f7f4 faf1 	bl	80005a8 <__aeabi_dmul>
 800bfc6:	4602      	mov	r2, r0
 800bfc8:	460b      	mov	r3, r1
 800bfca:	4630      	mov	r0, r6
 800bfcc:	4629      	mov	r1, r5
 800bfce:	f7f4 f935 	bl	800023c <__adddf3>
 800bfd2:	4606      	mov	r6, r0
 800bfd4:	460d      	mov	r5, r1
 800bfd6:	4630      	mov	r0, r6
 800bfd8:	4629      	mov	r1, r5
 800bfda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfde:	2900      	cmp	r1, #0
 800bfe0:	dc0e      	bgt.n	800c000 <__ieee754_sqrt+0x5c>
 800bfe2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800bfe6:	ea5c 0707 	orrs.w	r7, ip, r7
 800bfea:	d0f4      	beq.n	800bfd6 <__ieee754_sqrt+0x32>
 800bfec:	b141      	cbz	r1, 800c000 <__ieee754_sqrt+0x5c>
 800bfee:	4602      	mov	r2, r0
 800bff0:	460b      	mov	r3, r1
 800bff2:	f7f4 f921 	bl	8000238 <__aeabi_dsub>
 800bff6:	4602      	mov	r2, r0
 800bff8:	460b      	mov	r3, r1
 800bffa:	f7f4 fbff 	bl	80007fc <__aeabi_ddiv>
 800bffe:	e7e8      	b.n	800bfd2 <__ieee754_sqrt+0x2e>
 800c000:	1521      	asrs	r1, r4, #20
 800c002:	d074      	beq.n	800c0ee <__ieee754_sqrt+0x14a>
 800c004:	07cc      	lsls	r4, r1, #31
 800c006:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c00a:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800c00e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c012:	bf5e      	ittt	pl
 800c014:	0fd9      	lsrpl	r1, r3, #31
 800c016:	005b      	lslpl	r3, r3, #1
 800c018:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800c01c:	2400      	movs	r4, #0
 800c01e:	0fd9      	lsrs	r1, r3, #31
 800c020:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800c024:	107f      	asrs	r7, r7, #1
 800c026:	005b      	lsls	r3, r3, #1
 800c028:	2516      	movs	r5, #22
 800c02a:	4620      	mov	r0, r4
 800c02c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c030:	1846      	adds	r6, r0, r1
 800c032:	4296      	cmp	r6, r2
 800c034:	bfde      	ittt	le
 800c036:	1b92      	suble	r2, r2, r6
 800c038:	1870      	addle	r0, r6, r1
 800c03a:	1864      	addle	r4, r4, r1
 800c03c:	0052      	lsls	r2, r2, #1
 800c03e:	3d01      	subs	r5, #1
 800c040:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800c044:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c048:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c04c:	d1f0      	bne.n	800c030 <__ieee754_sqrt+0x8c>
 800c04e:	4629      	mov	r1, r5
 800c050:	f04f 0e20 	mov.w	lr, #32
 800c054:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c058:	4282      	cmp	r2, r0
 800c05a:	eb06 0c05 	add.w	ip, r6, r5
 800c05e:	dc02      	bgt.n	800c066 <__ieee754_sqrt+0xc2>
 800c060:	d113      	bne.n	800c08a <__ieee754_sqrt+0xe6>
 800c062:	459c      	cmp	ip, r3
 800c064:	d811      	bhi.n	800c08a <__ieee754_sqrt+0xe6>
 800c066:	f1bc 0f00 	cmp.w	ip, #0
 800c06a:	eb0c 0506 	add.w	r5, ip, r6
 800c06e:	da43      	bge.n	800c0f8 <__ieee754_sqrt+0x154>
 800c070:	2d00      	cmp	r5, #0
 800c072:	db41      	blt.n	800c0f8 <__ieee754_sqrt+0x154>
 800c074:	f100 0801 	add.w	r8, r0, #1
 800c078:	1a12      	subs	r2, r2, r0
 800c07a:	459c      	cmp	ip, r3
 800c07c:	bf88      	it	hi
 800c07e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c082:	eba3 030c 	sub.w	r3, r3, ip
 800c086:	4431      	add	r1, r6
 800c088:	4640      	mov	r0, r8
 800c08a:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c08e:	f1be 0e01 	subs.w	lr, lr, #1
 800c092:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800c096:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c09a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c09e:	d1db      	bne.n	800c058 <__ieee754_sqrt+0xb4>
 800c0a0:	4313      	orrs	r3, r2
 800c0a2:	d006      	beq.n	800c0b2 <__ieee754_sqrt+0x10e>
 800c0a4:	1c48      	adds	r0, r1, #1
 800c0a6:	bf13      	iteet	ne
 800c0a8:	3101      	addne	r1, #1
 800c0aa:	3401      	addeq	r4, #1
 800c0ac:	4671      	moveq	r1, lr
 800c0ae:	f021 0101 	bicne.w	r1, r1, #1
 800c0b2:	1063      	asrs	r3, r4, #1
 800c0b4:	0849      	lsrs	r1, r1, #1
 800c0b6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c0ba:	07e2      	lsls	r2, r4, #31
 800c0bc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c0c0:	bf48      	it	mi
 800c0c2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800c0c6:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800c0ca:	460e      	mov	r6, r1
 800c0cc:	e783      	b.n	800bfd6 <__ieee754_sqrt+0x32>
 800c0ce:	0ada      	lsrs	r2, r3, #11
 800c0d0:	3815      	subs	r0, #21
 800c0d2:	055b      	lsls	r3, r3, #21
 800c0d4:	2a00      	cmp	r2, #0
 800c0d6:	d0fa      	beq.n	800c0ce <__ieee754_sqrt+0x12a>
 800c0d8:	02d5      	lsls	r5, r2, #11
 800c0da:	d50a      	bpl.n	800c0f2 <__ieee754_sqrt+0x14e>
 800c0dc:	f1c1 0420 	rsb	r4, r1, #32
 800c0e0:	fa23 f404 	lsr.w	r4, r3, r4
 800c0e4:	1e4d      	subs	r5, r1, #1
 800c0e6:	408b      	lsls	r3, r1
 800c0e8:	4322      	orrs	r2, r4
 800c0ea:	1b41      	subs	r1, r0, r5
 800c0ec:	e78a      	b.n	800c004 <__ieee754_sqrt+0x60>
 800c0ee:	4608      	mov	r0, r1
 800c0f0:	e7f0      	b.n	800c0d4 <__ieee754_sqrt+0x130>
 800c0f2:	0052      	lsls	r2, r2, #1
 800c0f4:	3101      	adds	r1, #1
 800c0f6:	e7ef      	b.n	800c0d8 <__ieee754_sqrt+0x134>
 800c0f8:	4680      	mov	r8, r0
 800c0fa:	e7bd      	b.n	800c078 <__ieee754_sqrt+0xd4>
 800c0fc:	7ff00000 	.word	0x7ff00000

0800c100 <with_errno>:
 800c100:	b570      	push	{r4, r5, r6, lr}
 800c102:	4604      	mov	r4, r0
 800c104:	460d      	mov	r5, r1
 800c106:	4616      	mov	r6, r2
 800c108:	f7fd ff28 	bl	8009f5c <__errno>
 800c10c:	4629      	mov	r1, r5
 800c10e:	6006      	str	r6, [r0, #0]
 800c110:	4620      	mov	r0, r4
 800c112:	bd70      	pop	{r4, r5, r6, pc}

0800c114 <xflow>:
 800c114:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c116:	4615      	mov	r5, r2
 800c118:	461c      	mov	r4, r3
 800c11a:	b180      	cbz	r0, 800c13e <xflow+0x2a>
 800c11c:	4610      	mov	r0, r2
 800c11e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c122:	e9cd 0100 	strd	r0, r1, [sp]
 800c126:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c12a:	4628      	mov	r0, r5
 800c12c:	4621      	mov	r1, r4
 800c12e:	f7f4 fa3b 	bl	80005a8 <__aeabi_dmul>
 800c132:	2222      	movs	r2, #34	; 0x22
 800c134:	b003      	add	sp, #12
 800c136:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c13a:	f7ff bfe1 	b.w	800c100 <with_errno>
 800c13e:	4610      	mov	r0, r2
 800c140:	4619      	mov	r1, r3
 800c142:	e7ee      	b.n	800c122 <xflow+0xe>

0800c144 <__math_uflow>:
 800c144:	2200      	movs	r2, #0
 800c146:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c14a:	f7ff bfe3 	b.w	800c114 <xflow>

0800c14e <__math_oflow>:
 800c14e:	2200      	movs	r2, #0
 800c150:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c154:	f7ff bfde 	b.w	800c114 <xflow>

0800c158 <fabs>:
 800c158:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c15c:	4770      	bx	lr

0800c15e <finite>:
 800c15e:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800c162:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c166:	0fc0      	lsrs	r0, r0, #31
 800c168:	4770      	bx	lr
 800c16a:	0000      	movs	r0, r0
 800c16c:	0000      	movs	r0, r0
	...

0800c170 <scalbn>:
 800c170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c172:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800c176:	4604      	mov	r4, r0
 800c178:	460d      	mov	r5, r1
 800c17a:	4617      	mov	r7, r2
 800c17c:	460b      	mov	r3, r1
 800c17e:	b996      	cbnz	r6, 800c1a6 <scalbn+0x36>
 800c180:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c184:	4303      	orrs	r3, r0
 800c186:	d039      	beq.n	800c1fc <scalbn+0x8c>
 800c188:	4b33      	ldr	r3, [pc, #204]	; (800c258 <scalbn+0xe8>)
 800c18a:	2200      	movs	r2, #0
 800c18c:	f7f4 fa0c 	bl	80005a8 <__aeabi_dmul>
 800c190:	4b32      	ldr	r3, [pc, #200]	; (800c25c <scalbn+0xec>)
 800c192:	429f      	cmp	r7, r3
 800c194:	4604      	mov	r4, r0
 800c196:	460d      	mov	r5, r1
 800c198:	da0f      	bge.n	800c1ba <scalbn+0x4a>
 800c19a:	a32b      	add	r3, pc, #172	; (adr r3, 800c248 <scalbn+0xd8>)
 800c19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a0:	f7f4 fa02 	bl	80005a8 <__aeabi_dmul>
 800c1a4:	e006      	b.n	800c1b4 <scalbn+0x44>
 800c1a6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c1aa:	4296      	cmp	r6, r2
 800c1ac:	d10a      	bne.n	800c1c4 <scalbn+0x54>
 800c1ae:	4602      	mov	r2, r0
 800c1b0:	f7f4 f844 	bl	800023c <__adddf3>
 800c1b4:	4604      	mov	r4, r0
 800c1b6:	460d      	mov	r5, r1
 800c1b8:	e020      	b.n	800c1fc <scalbn+0x8c>
 800c1ba:	460b      	mov	r3, r1
 800c1bc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c1c0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800c1c4:	19b9      	adds	r1, r7, r6
 800c1c6:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800c1ca:	4291      	cmp	r1, r2
 800c1cc:	dd0e      	ble.n	800c1ec <scalbn+0x7c>
 800c1ce:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800c1d2:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800c1d6:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800c1da:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800c1de:	a31c      	add	r3, pc, #112	; (adr r3, 800c250 <scalbn+0xe0>)
 800c1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e4:	481e      	ldr	r0, [pc, #120]	; (800c260 <scalbn+0xf0>)
 800c1e6:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800c1ea:	e7d9      	b.n	800c1a0 <scalbn+0x30>
 800c1ec:	2900      	cmp	r1, #0
 800c1ee:	dd08      	ble.n	800c202 <scalbn+0x92>
 800c1f0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c1f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c1f8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800c1fc:	4620      	mov	r0, r4
 800c1fe:	4629      	mov	r1, r5
 800c200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c202:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800c206:	da12      	bge.n	800c22e <scalbn+0xbe>
 800c208:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c20c:	429f      	cmp	r7, r3
 800c20e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800c212:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800c216:	dcdc      	bgt.n	800c1d2 <scalbn+0x62>
 800c218:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800c21c:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800c220:	a309      	add	r3, pc, #36	; (adr r3, 800c248 <scalbn+0xd8>)
 800c222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c226:	480f      	ldr	r0, [pc, #60]	; (800c264 <scalbn+0xf4>)
 800c228:	f041 011f 	orr.w	r1, r1, #31
 800c22c:	e7b8      	b.n	800c1a0 <scalbn+0x30>
 800c22e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c232:	3136      	adds	r1, #54	; 0x36
 800c234:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c238:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800c23c:	4620      	mov	r0, r4
 800c23e:	4b0a      	ldr	r3, [pc, #40]	; (800c268 <scalbn+0xf8>)
 800c240:	4629      	mov	r1, r5
 800c242:	2200      	movs	r2, #0
 800c244:	e7ac      	b.n	800c1a0 <scalbn+0x30>
 800c246:	bf00      	nop
 800c248:	c2f8f359 	.word	0xc2f8f359
 800c24c:	01a56e1f 	.word	0x01a56e1f
 800c250:	8800759c 	.word	0x8800759c
 800c254:	7e37e43c 	.word	0x7e37e43c
 800c258:	43500000 	.word	0x43500000
 800c25c:	ffff3cb0 	.word	0xffff3cb0
 800c260:	8800759c 	.word	0x8800759c
 800c264:	c2f8f359 	.word	0xc2f8f359
 800c268:	3c900000 	.word	0x3c900000

0800c26c <_init>:
 800c26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c26e:	bf00      	nop
 800c270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c272:	bc08      	pop	{r3}
 800c274:	469e      	mov	lr, r3
 800c276:	4770      	bx	lr

0800c278 <_fini>:
 800c278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c27a:	bf00      	nop
 800c27c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c27e:	bc08      	pop	{r3}
 800c280:	469e      	mov	lr, r3
 800c282:	4770      	bx	lr
